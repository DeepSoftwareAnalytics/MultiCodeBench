{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t\tvar dllDirectory = GetDirectedDllDirectory();\n\tvar dllPath = Path.Combine(dllDirectory, dllName);\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadDll(dllPath);\n\t} else {\n\t\tPosix.LoadDll(dllPath);\n\t}\n}", "CodeBleu_score": 38.435336153783204}, {"code": "public static void PreloadDll(string dllName){\n\t\tstring dllPath = Path.Combine(GetDirectedDllDirectory(), dllName);\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tLoadDll(dllPath);\n\t} else {\n\t\tLoadDllPosix(dllPath);\n\t}\n}", "CodeBleu_score": 29.610086035552385}, {"code": "public static void PreloadDll(string dllName){\n\t\tstring dllDirectory = GetDirectedDllDirectory();\n\tstring dllPath = Path.Combine(dllDirectory, dllName);\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadDll(dllPath);\n\t} else {\n\t\tPosix.LoadDll(dllPath);\n\t}\n}", "CodeBleu_score": 35.185714386800434}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileList.Contains(originalPath)) {\n\t\tLogger.Error(\"Assets file already loaded: \" + originalPath);\n\t\treturn;\n\t}\n\tSerializedFile file = new SerializedFile(reader, unityVersion);\n\tif (file.version == null) {\n\t\tLogger.Error(\"Failed to read version for assets file: \" + originalPath);\n\t\treturn;\n\t}\n\tif (!assetsFileListHash.Contains(file.version)) {\n\t\tLogger.Info(\"Assets file version not found: \" + file.version);\n\t\tassetsFileListHash.Add(file.version);\n\t}\n\tif (string.IsNullOrEmpty(unityVersion)) {\n\t\tCheckStrippedVersion(file.version);\n\t}\n\tassetsFileList.Add(originalPath);\n\tresourceFileReaders.Add(reader);\n}", "CodeBleu_score": 39.728295798860124}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileListHash.Contains(reader.Name)) {\n\t\tLogger.Error(\"Skipping duplicate asset file: \" + reader.Name);\n\t\treturn;\n\t}\n\n\tSerializedFile assetsFile = new SerializedFile(reader, originalPath);\n\tassetsFile.SetVersion(unityVersion);\n\tassetsFileListHash.Add(reader.Name, assetsFile);\n\n\tif (CheckStrippedVersion(assetsFile)) {\n\t\tLogger.Error(\"Skipping asset file: \" + reader.Name + \" - stripped version detected.\");\n\t\treturn;\n\t}\n\n\tLogger.Info(\"Loading asset file: \" + reader.Name);\n\tassetsFileList.Add(assetsFile);\n}", "CodeBleu_score": 39.14674526374098}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileList.Contains(originalPath)) {\n\t\tLogger.Error($\"Skipping already loaded assets file '{originalPath}'\");\n\t\treturn;\n\t}\n\n\tSerializedFile assetsFile = new SerializedFile(reader, originalPath);\n\tif (assetsFile.version == 0) {\n\t\tLogger.Error($\"Skipping assets file '{originalPath}' with no version\");\n\t\treturn;\n\t}\n\n\tif (CheckStrippedVersion(assetsFile, unityVersion)) {\n\t\tLogger.Error($\"Skipping assets file '{originalPath}' with stripped version\");\n\t\treturn;\n\t}\n\n\tassetsFile.SetVersion(unityVersion);\n\tassetsFileListHash.Add(originalPath);\n\tassetsFileList.Add(originalPath);\n}", "CodeBleu_score": 33.208694352149706}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (path == \"\") return this;\n\tif (path.EndsWith(\"/\")) path = path.Substring(0, path.Length - 1);\n\tint index = path.LastIndexOf(\"/\");\n\tstring name = path.Substring(index + 1);\n\tpath = path.Substring(0, index);\n\tforeach (ImportedFrame frame in childs) {\n\t\tif (frame.name == name) {\n\t\t\tif (frame.Path == path) return frame;\n\t\t\tImportedFrame result = frame.FindFrameByPath(path);\n\t\t\tif (result!= null) return result;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 47.40892422709513}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (path == null) {\n\t\treturn null;\n\t}\n\tif (path.Length == 0) {\n\t\treturn null;\n\t}\n\tstring name = path.Substring(0, path.IndexOf(\"/\"));\n\tforeach (ImportedFrame f in FindChilds(name)) {\n\t\tif (f.Path == path) {\n\t\t\treturn f;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 53.56333816181055}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (path == null) {\n\t\treturn null;\n\t}\n\tstring frameName = path.Substring(path.LastIndexOf(\"/\") + 1);\n\tImportedFrame[] childs = FindChilds(frameName);\n\tif (childs!= null && childs.Length > 0) {\n\t\tfor (int i = 0; i < childs.Length; i++) {\n\t\t\tif (childs[i].Path == path) {\n\t\t\t\treturn childs[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 47.364193351302276}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream();\n\tusing (GZipStream gs = new GZipStream(reader.BaseStream, CompressionMode.Decompress, true)) {\n\t\tgs.CopyTo(ms);\n\t}\n\tms.Position = 0;\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 54.2005616655169}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream();\n\treader.CopyTo(ms);\n\tms.Position = 0;\n\tGZipStream gzip = new GZipStream(ms, CompressionMode.Decompress);\n\treturn new FileReader(gzip);\n}", "CodeBleu_score": 27.712005550636405}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tusing (MemoryStream ms = new MemoryStream()) {\n\t\tusing (GZipStream gzs = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n\t\t\tgzs.CopyTo(ms);\n\t\t}\n\t\treturn new FileReader(ms);\n\t}\n}", "CodeBleu_score": 37.88232373048037}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tParseStrings(switchForms, commandStrings, null);\n}", "CodeBleu_score": 16.93988777593802}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tthis.switchForms = switchForms;\n\tthis.commandStrings = commandStrings;\n\tthis.nonSwitchStrings = new List<string>();\n\tthis.switchStrings = new List<string>();\n\tthis.stopToken = null;\n\tthis.stopTokenFound = false;\n\tthis.stopTokenFound = false;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0;\n\tthis.stopTokenIndex = 0", "CodeBleu_score": 14.674761953040214}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Check for null arguments\n\tif (switchForms == null) {\n\t\tthrow new ArgumentNullException(nameof(switchForms));\n\t}\n\tif (commandStrings == null) {\n\t\tthrow new ArgumentNullException(nameof(commandStrings));\n\t}\n\n\t// Check for empty arguments\n\tif (switchForms.Length == 0) {\n\t\tthrow new ArgumentException(nameof(switchForms));\n\t}\n\tif (commandStrings.Length == 0) {\n\t\tthrow new ArgumentException(nameof(commandStrings));\n\t}\n\n\t// Initialize\n\tstring[] commandStringsCopy = new string[commandStrings.Length];\n\tcommandStrings.CopyTo(commandStringsCopy, 0);\n\tbool stopParsingSwitches = false;\n\n\t// Iterate through the command strings\n\tforeach (string commandString in commandStringsCopy) {\n\t\t// Check for stop token\n\t\tif (commandString == SwitchParser.StopToken) {\n\t\t\tstopParsingSwitches = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check for stop parsing switches\n\t\tif (stopParsingSwitches) {\n\t\t\t// Add non-switch string\n\t\t\tNonSwitchStrings.Add(commandString);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Parse the command string\n\t\tParseString(switchForms, commandString);\n\t}\n}", "CodeBleu_score": 41.50556795758328}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Texture2D.GetRawTextureData();\n\tthis.m_Texture2D.GetPixels();\n\tthis.m_Texture2D.GetPixels32();\n\tthis.m_Texture2D.GetPixel(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0, 0);\n\tthis.m_Texture2D.GetPixelBilinear(0", "CodeBleu_score": 12.509732940269163}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\t//m_Texture2D = new Texture2D();\n\tm_Texture2D = m_Texture2D;\n\tm_Texture2D.GetPixels32();\n\tm_Texture2D.GetPixels();\n\tm_Texture2D.GetPixels(0);\n\tm_Texture2D.GetPixels(0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\n\tm_Texture2D.GetPixels(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);", "CodeBleu_score": 17.322073043397186}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\t//m_Texture2D = m_Texture2D;\n\tm_Texture2D = m_Texture2D;\n\tm_Texture2D.GetPixels();\n\tm_Texture2D.GetPixels32();\n\tm_Texture2D.GetRawTextureData();\n\tm_Texture2D.GetPixels(0);\n\tm_Texture2D.GetPixels32(0);\n\tm_Texture2D.GetRawTextureData(0);\n\tm_Texture2D.GetPixels(0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels32(0, 0, 0, 0, 0);\n\tm_Texture2D.GetRawTextureData(0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels(0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels32(0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetRawTextureData(0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels(0, 0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels32(0, 0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetRawTextureData(0, 0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels(0, 0, 0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels32(0, 0, 0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetRawTextureData(0, 0, 0, 0, 0, 0, 0, 0);\n\tm_Texture2D.GetPixels(0, 0, 0, 0, 0, 0, 0, 0,", "CodeBleu_score": 18.996248632603326}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty name = sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\");\n\t\tresult.Add(name.stringValue);\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t} else {\n\t\tStringBuilder s_Sb = new StringBuilder();\n\t\tresult.Aggregate(s_Sb, (sb, s) => sb.Append(s).Append(\", \"));\n\t\treturn s_Sb.ToString();\n\t}\n}", "CodeBleu_score": 41.22445455113282}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty name = sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\");\n\t\tif (name!= null &&!string.IsNullOrEmpty(name.stringValue)) {\n\t\t\tresult.Add(name.stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\telse {\n\t\tStringBuilder s_Sb = new StringBuilder();\n\t\tresult.Aggregate(s_Sb, (sb, s) => sb.Append(s).Append(\", \"));\n\t\treturn s_Sb.ToString();\n\t}\n}", "CodeBleu_score": 43.70696010346413}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue);\n\t}\n\tif (result.Count == 0) return \"Nothing\";\n\tStringBuilder s_Sb = new StringBuilder();\n\tresult.Aggregate(s_Sb, (sb, s) => sb.Append(s).Append(\", \"));\n\ts_Sb.Remove(s_Sb.Length - 2, 2);\n\treturn s_Sb.ToString();\n}", "CodeBleu_score": 39.197874026597454}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add &&!s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, (object obj) => {\n\t\t\tSerializedProperty p = obj as SerializedProperty;\n\t\t\tif (p!= null) {\n\t\t\t\tif (p.isArray) {\n\t\t\t\t\tif (p.arraySize == 0) {\n\t\t\t\t\t\tp.InsertArrayElementAtIndex(0);\n\t\t\t\t\t}\n\t\t\t\t\tp.GetArrayElementAtIndex(p.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\t\tp.GetArrayElementAtIndex(p.arraySize - 1).FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t\t} else {\n\t\t\t\t\tp.FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\t\tp.FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t\t}\n\t\t\t\tp.serializedObject.ApplyModifiedProperties();\n\t\t\t}\n\t\t}, sp);\n\t} else if (!add && s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, (object obj) => {\n\t\t\tSerializedProperty p = obj as SerializedProperty;\n\t\t\tif (p!= null) {\n\t\t\t\tif (p.isArray) {\n\t\t\t\t\tint index = s_ActiveNames.IndexOf(prop.name);\n\t\t\t\t\tp.DeleteArrayElementAtIndex(index);\n\t\t\t\t} else {\n\t\t\t\t\tp.FindPropertyRelative(\"name\").stringValue = string.Empty;\n\t\t\t\t\tp.FindPropertyRelative(\"type\").stringValue = string.Empty;\n\t\t\t\t}\n\t\t\t\tp.serializedObject.ApplyModifiedProperties();\n\t\t\t}\n\t\t}, sp);\n\t}\n}", "CodeBleu_score": 37.64461048463081}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add &&!s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, OnMenuClick, new MenuData(sp, prop, add));\n\t} else if (!add && s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), true, OnMenuClick, new MenuData(sp, prop, add));\n\t}\n}", "CodeBleu_score": 22.308981954108138}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add &&!s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, (object obj) => {\n\t\t\tSerializedProperty p = (SerializedProperty)obj;\n\t\t\tif (p.isArray) {\n\t\t\t\tif (p.arraySize == 0) {\n\t\t\t\t\tp.InsertArrayElementAtIndex(0);\n\t\t\t\t}\n\t\t\t\tp.GetArrayElementAtIndex(p.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tp.GetArrayElementAtIndex(p.arraySize - 1).FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t\tp.serializedObject.ApplyModifiedProperties();\n\t\t\t} else {\n\t\t\t\tp.FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tp.FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t\tp.serializedObject.ApplyModifiedProperties();\n\t\t\t}\n\t\t}, sp);\n\t} else if (!add && s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, (object obj) => {\n\t\t\tSerializedProperty p = (SerializedProperty)obj;\n\t\t\tif (p.isArray) {\n\t\t\t\tp.DeleteArrayElementAtIndex(s_ActiveNames.IndexOf(prop.name));\n\t\t\t\tp.serializedObject.ApplyModifiedProperties();\n\t\t\t} else {\n\t\t\t\tp.FindPropertyRelative(\"name\").stringValue = \"\";\n\t\t\t\tp.FindPropertyRelative(\"type\").stringValue = \"\";\n\t\t\t\tp.serializedObject.ApplyModifiedProperties();\n\t\t\t}\n\t\t}, sp);\n\t}\n}", "CodeBleu_score": 36.46137540778607}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tbool changed = false;\n\tEditorGUILayout.BeginHorizontal();\n\tfloat x = sp.vector3Value.x;\n\tfloat y = sp.vector3Value.y;\n\tfloat z = sp.vector3Value.z;\n\tbool approx = Mathf.Approximately(x, y) && Mathf.Approximately(y, z);\n\tif (showXyz) {\n\t\tEditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName));\n\t} else {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tx = EditorGUILayout.FloatField(new GUIContent(sp.displayName), x);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tchanged = true;\n\t\t\ty = x;\n\t\t\tz = x;\n\t\t}\n\t}\n\tEditorGUI.BeginChangeCheck();\n\tshowXyz = GUILayout.Toggle(showXyz, \"XYZ\", GUILayout.Width(30));\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tchanged = true;\n\t}\n\tEditorGUILayout.EndHorizontal();\n\tif (changed) {\n\t\tsp.vector3Value = new Vector3(x, y, z);\n\t}\n\treturn showXyz;\n}", "CodeBleu_score": 42.40414452060014}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tEditorGUI.BeginChangeCheck();\n\tEditorGUILayout.BeginHorizontal();\n\tGUILayout.Toggle(showXyz, new GUIContent(\"V3\"), GUILayout.Width(20));\n\tif (showXyz) {\n\t\tsp.vector3Value = EditorGUILayout.Vector3Field(\"\", sp.vector3Value);\n\t} else {\n\t\tfloat x = sp.vector3Value.x;\n\t\tx = EditorGUILayout.FloatField(x);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.vector3Value = new Vector3(x, x, x);\n\t\t}\n\t}\n\tEditorGUILayout.EndHorizontal();\n\treturn Mathf.Approximately(sp.vector3Value.x, sp.vector3Value.y) && Mathf.Approximately(sp.vector3Value.y, sp.vector3Value.z);\n}", "CodeBleu_score": 32.26783705065854}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tEditorGUILayout.BeginHorizontal();\n\tbool changed = false;\n\tif (showXyz) {\n\t\tEditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName));\n\t} else {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tfloat x = EditorGUILayout.FloatField(sp.displayName, sp.vector3Value.x);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.vector3Value = new Vector3(x, x, x);\n\t\t\tchanged = true;\n\t\t}\n\t}\n\tshowXyz = GUILayout.Toggle(showXyz, showXyz? \"Vector3\" : \"Float\", \"Button\");\n\tEditorGUILayout.EndHorizontal();\n\treturn changed;\n}", "CodeBleu_score": 28.24381856173044}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial customMat = null;\n\tint index = -1;\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].m_BaseMat == baseMat && s_Entries[i].m_Texture == texture && s_Entries[i].m_Id == id && s_Entries[i].m_Props == props) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (index >= 0) {\n\t\ts_Entries[index].m_Count++;\n\t\tcustomMat = s_Entries[index].m_Mat;\n\t} else {\n\t\tcustomMat = new Material(baseMat);\n\t\tcustomMat.mainTexture = texture;\n\t\tcustomMat.SetInt(\"_Id\", id);\n\t\tcustomMat.SetInt(\"_Props\", props);\n\t\ts_Entries.Add(new CustomMaterialEntry(baseMat, texture, id, props, customMat));\n\t}\n\n\treturn customMat;\n}", "CodeBleu_score": 33.54114675945853}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial customMat = null;\n\tbool found = false;\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].baseMat == baseMat && s_Entries[i].texture == texture && s_Entries[i].id == id && s_Entries[i].props == props) {\n\t\t\tcustomMat = s_Entries[i].customMat;\n\t\t\ts_Entries[i].count++;\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!found) {\n\t\tcustomMat = new Material(baseMat);\n\t\tcustomMat.mainTexture = texture;\n\t\tcustomMat.SetInt(\"_Id\", id);\n\t\tcustomMat.SetInt(\"_Props\", props);\n\t\ts_Entries.Add(new Entry(baseMat, texture, id, props, customMat));\n\t}\n\treturn customMat;\n}", "CodeBleu_score": 32.405121038351425}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial newMat = null;\n\tbool found = false;\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].BaseMaterial == baseMat && s_Entries[i].Texture == texture && s_Entries[i].Id == id && s_Entries[i].Properties == props) {\n\t\t\ts_Entries[i].Count++;\n\t\t\tnewMat = s_Entries[i].Material;\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!found) {\n\t\tnewMat = new Material(baseMat);\n\t\tnewMat.SetTexture(\"_MainTex\", texture);\n\t\tnewMat.SetInt(\"_Id\", id);\n\t\tnewMat.SetInt(\"_Props\", props);\n\t\ts_Entries.Add(new Entry(newMat, baseMat, texture, id, props));\n\t}\n\treturn newMat;\n}", "CodeBleu_score": 30.957821221593885}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Remove: Custom material is null\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].m_CustomMat == customMat) {\n\t\t\ts_Entries[i].m_Count--;\n\t\t\tif (s_Entries[i].m_Count == 0) {\n\t\t\t\tObject.DestroyImmediate(customMat);\n\t\t\t\ts_Entries[i].m_CustomMat = null;\n\t\t\t\ts_Entries[i].m_Count = 0;\n\t\t\t\ts_Entries[i].m_Shader = null;\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\tDebug.LogWarning(\"Remove: Custom material not found\");\n}", "CodeBleu_score": 36.92098336192206}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogError(\"The material you are trying to remove is null!\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].customMat == customMat) {\n\t\t\ts_Entries[i].count--;\n\t\t\tif (s_Entries[i].count == 0) {\n\t\t\t\tUnityEngine.Object.DestroyImmediate(customMat);\n\t\t\t\ts_Entries[i].customMat = null;\n\t\t\t\ts_Entries[i].count = 0;\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 34.402634193740646}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Custom Material is null!\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].m_Material == customMat) {\n\t\t\ts_Entries[i].m_Count--;\n\t\t\tif (s_Entries[i].m_Count <= 0) {\n\t\t\t\tUnityEngine.Object.DestroyImmediate(customMat);\n\t\t\t\ts_Entries[i].Clear();\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 32.660075752218475}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\tif (root == null) return;\n\tif (ps == null) return;\n\n\t// Collect all child particle systems\n\tList<ParticleSystem> particles = new List<ParticleSystem>();\n\troot.GetComponentsInChildren(particles);\n\n\t// Remove those not associated with the current UIParticle instance\n\tfor (int i = particles.Count - 1; i >= 0; i--) {\n\t\tif (particles[i].GetComponentInParent<UIParticle>()!= this) {\n\t\t\tparticles.RemoveAt(i);\n\t\t}\n\t}\n\n\t// Adjust their texture sheet animation settings if necessary\n\tforeach (ParticleSystem particle in particles) {\n\t\tif (particle.main.simulationSpace == ParticleSystemSimulationSpace.World) {\n\t\t\tparticle.main.simulationSpace = ParticleSystemSimulationSpace.Local;\n\t\t}\n\n\t\tif (particle.main.scalingMode == ParticleSystemScalingMode.Local) {\n\t\t\tparticle.main.scalingMode = ParticleSystemScalingMode.Shape;\n\t\t}\n\n\t\tif (particle.main.scalingMode == ParticleSystemScalingMode.Hierarchy) {\n\t\t\tparticle.main.scalingMode = ParticleSystemScalingMode.Shape;\n\t\t}\n\n\t\tif (particle.main.scalingMode == ParticleSystemScalingMode.Local) {\n\t\t\tparticle.main.scalingMode = ParticleSystemScalingMode.Shape;\n\t\t}\n\n\t\tif (particle.textureSheetAnimation.enabled) {\n\t\t\tparticle.textureSheetAnimation.enabled = false;\n\t\t}\n\t}\n\n\t// Call RefreshParticles on the updated list of particle systems\n\tRefreshParticles(particles);\n}", "CodeBleu_score": 38.652469921614134}, {"code": "private void RefreshParticles(GameObject root){\n\t\tList<ParticleSystem> ps = new List<ParticleSystem>(root.GetComponentsInChildren<ParticleSystem>());\n\tfor (int i = ps.Count - 1; i >= 0; i--) {\n\t\tif (ps[i].GetComponentInParent<UIParticle>()!= this) {\n\t\t\tps.RemoveAt(i);\n\t\t}\n\t}\n\tif (ps.Count > 0) {\n\t\tif (ps[0].main.simulationSpace == ParticleSystemSimulationSpace.Local) {\n\t\t\tps[0].transform.localPosition = Vector3.zero;\n\t\t} else {\n\t\t\tps[0].transform.position = Vector3.zero;\n\t\t}\n\t\tif (ps[0].main.useUnscaledTime) {\n\t\t\tps[0].main.useUnscaledTime = false;\n\t\t}\n\t\tps[0].main.scalingMode = ParticleSystemScalingMode.Local;\n\t}\n\tif (ps.Count > 1) {\n\t\tfor (int i = 1; i < ps.Count; i++) {\n\t\t\tif (ps[i].main.simulationSpace == ParticleSystemSimulationSpace.Local) {\n\t\t\t\tps[i].transform.localPosition = Vector3.zero;\n\t\t\t} else {\n\t\t\t\tps[i].transform.position = Vector3.zero;\n\t\t\t}\n\t\t\tif (ps[i].main.useUnscaledTime) {\n\t\t\t\tps[i].main.useUnscaledTime = false;\n\t\t\t}\n\t\t\tps[i].main.scalingMode = ParticleSystemScalingMode.Local;\n\t\t\tif (ps[i].main.scalingMode == ParticleSystemScalingMode.Hierarchy) {\n\t\t\t\tps[i].main.scalingMode = ParticleSystemScalingMode.Local;\n\t\t\t}\n\t\t\tif (ps[i].main.scalingMode == ParticleSystemScalingMode.Shape) {\n\t\t\t\tps[i].main.scalingMode = ParticleSystemScalingMode.Local;\n\t\t\t}\n\t\t\tif (ps[i].main.scalingMode == ParticleSystemScalingMode.Local) {\n\t\t\t\tps[i].main.scalingMode = ParticleSystemScalingMode.Hierarchy;\n\t\t\t}\n\t\t\tif (ps[i].main.scalingMode == ParticleSystemScalingMode.Hierarchy) {\n\t\t\t\tps[i].main.scalingMode = ParticleSystemScalingMode", "CodeBleu_score": 27.346133483197306}, {"code": "private void RefreshParticles(GameObject root){\n\t\tList<ParticleSystem> particles = new List<ParticleSystem>();\n\troot.GetComponentsInChildren(particles);\n\tif (particles.Count > 0) {\n\t\tfor (int i = particles.Count - 1; i >= 0; i--) {\n\t\t\tif (particles[i].GetComponentInParent<UIParticle>()!= this) {\n\t\t\t\tparticles.RemoveAt(i);\n\t\t\t}\n\t\t}\n\t\tif (particles.Count > 0) {\n\t\t\tforeach (ParticleSystem ps in particles) {\n\t\t\t\tps.textureSheetAnimation.SetSprite(0, sprite);\n\t\t\t\tps.textureSheetAnimation.SetSprite(1, sprite);\n\t\t\t}\n\t\t}\n\t}\n\tRefreshParticles(particles);\n}", "CodeBleu_score": 37.065264173127765}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tntAssembly = Assembly.GetExecutingAssembly();\n\tcontainerBuilder\n\t\t.RegisterAssemblyTypes(currentAssembly)\n\t\t.AssignableTo<IColorSwapManager>()\n\t\t.As<IColorSwapManager>()\n\t\t.SingleInstance();\n}", "CodeBleu_score": 71.42067758732742}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tntAssembly = Assembly.GetExecutingAssembly();\n\tcontainerBuilder\n\t\t.RegisterAssemblyTypes(currentAssembly)\n\t\t.AssignableTo<IColorSwapManager>()\n\t\t.As<IColorSwapManager>()\n\t\t.SingleInstance();\n}", "CodeBleu_score": 71.42067758732742}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\ttAssembly = Assembly.GetExecutingAssembly();\ncontainerBuilder.RegisterAssemblyTypes(currentAssembly).AssignableTo<IColorSwapManager>().As<IColorSwapManager>().SingleInstance();\n}", "CodeBleu_score": 52.140298747300406}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\tif (ipAddress == null) {\n\t\tthrow new ArgumentNullException(nameof(ipAddress));\n\t}\n\n\tif (port < 0) {\n\t\tthrow new ArgumentOutOfRangeException(nameof(port));\n\t}\n\n\tthis.ipAddress = ipAddress;\n\tthis.port = port;\n\n\tawait this.serializer.InitializeAsync();\n\n\tawait this.CurrentState.NegotiateReservationAsync();\n}", "CodeBleu_score": 35.743518134328035}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\tif (ipAddress == null) {\n\t\tthrow new ArgumentNullException(nameof(ipAddress));\n\t}\n\tif (port < 0) {\n\t\tthrow new ArgumentOutOfRangeException(nameof(port));\n\t}\n\n\t_ipAddress = ipAddress;\n\t_port = port;\n\t_socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n\tawait _socket.ConnectAsync(new IPEndPoint(IPAddress.Parse(ipAddress), port)).ConfigureAwait(false);\n\tawait InitializeSerializerAsync().ConfigureAwait(false);\n\tawait _currentState.NegotiateReservationAsync().ConfigureAwait(false);\n}", "CodeBleu_score": 41.121230228297335}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\t// Set the IP address and port.\n\tthis.ipAddress = ipAddress;\n\tthis.port = port;\n\n\t// Wait for the serializer initialization task to complete.\n\tawait serializerInitializationTask;\n\n\t// Initiate a reservation negotiation using the current state.\n\tawait this.CurrentState.NegotiateReservationAsync();\n}", "CodeBleu_score": 39.028159851735374}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\t// Validate the input\n\tValidate.NotNull(sessionConnectionState, \"sessionConnectionState\");\n\t// Log the transition from the previous state to the new state\n\tLog.Debug(\"MultiplayerSessionConnectionState\", \"Transition from state {0} to {1}\", m_CurrentState.CurrentStage, sessionConnectionState.CurrentStage);\n\t// Invoke the ConnectionStateChanged event\n\tConnectionStateChanged?.Invoke(sessionConnectionState);\n\t// If the new state is SESSION_RESERVED, update the player name in the log\n\tif (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionState.Stage.SESSION_RESERVED) {\n\t\tLog.Debug(\"MultiplayerSessionConnectionState\", \"Player name: {0}\", sessionConnectionState.PlayerName);\n\t}\n\t// Update the current state\n\tm_CurrentState = sessionConnectionState;\n}", "CodeBleu_score": 43.633917234751195}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(nameof(sessionConnectionState));\n\t}\n\n\tLog.Debug($\"Transitioning from {CurrentState.CurrentStage} to {sessionConnectionState.CurrentStage}\");\n\tCurrentState = sessionConnectionState;\n\tConnectionStateChanged?.Invoke(CurrentState);\n\tif (CurrentState.CurrentStage == MultiplayerSessionConnectionState.SessionStage.SESSION_RESERVED) {\n\t\tLog.Debug($\"Player name: {CurrentState.PlayerName}\");\n\t}\n}", "CodeBleu_score": 43.486930944936994}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\t//...\n}", "CodeBleu_score": 1.4713632696835737}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tclient = new LiteNetLibClient();\n\tclient.Start();\n\tclient.Connect(ipAddress, serverPort, \"nitrox\");\n\tawait Task.Run(() => connectedEvent.WaitOne(2000));\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 49.63937298453913}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\t// Initialize the LiteNetLibClient and start it.\n\tclient = new LiteNetLibClient();\n\tclient.Start();\n\t// Attempt to connect to the server.\n\tclient.Connect(ipAddress, serverPort, \"nitrox\");\n\t// Wait for a connection event for up to 2000 milliseconds.\n\tawait Task.Run(() => {\n\t\tconnectedEvent.WaitOne(2000);\n\t\tconnectedEvent.Reset();\n\t});\n}", "CodeBleu_score": 53.23537029635016}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tclient.Start();\n\tclient.Connect(ipAddress, serverPort, \"nitrox\");\n\tawait connectedEvent.WaitAsync(2000);\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 51.31615904385532}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t\tif (!id.IsValid) return;\n\tCyclopsEntity cyclops = NitroxEntity.RequireObjectFrom(id) as CyclopsEntity;\n\tif (cyclops == null) return;\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton == null) return;\n\tfireSuppButton.subFire.StartCoroutine(fireSuppButton.StartFireSuppressionSystem());\n\tfireSuppButton.StartCooldown();\n}", "CodeBleu_score": 50.261156754951045}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = NitroxEntity.RequireObjectFrom(id);\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tPacketSuppressor<CyclopsFireSuppressionSystem>.Suppress(() => {\n\t\tfireSuppButton.subFire.StartCoroutine(fireSuppButton.subFire.StartFireSuppressionSystem());\n\t});\n\tfireSuppButton.StartCooldown();\n}", "CodeBleu_score": 72.80120386138294}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tif (id.IsInvalid) {\n\t\treturn;\n\t}\n\tCyclops cyclops = NitroxEntity.RequireObjectFrom(id) as Cyclops;\n\tif (cyclops == null) {\n\t\treturn;\n\t}\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton == null) {\n\t\treturn;\n\t}\n\tPacketSuppressor<CyclopsFireSuppressionSystem>.Suppress(id, () => {\n\t\tfireSuppButton.StartCoroutine(fireSuppButton.subFire.StartFireSuppressionSystem());\n\t\tfireSuppButton.StartCooldown();\n\t});\n}", "CodeBleu_score": 49.41380858308443}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot == null) {\n\t\treturn;\n\t}\n\tif (subRoot.TryGetIdOrWarn(out var subRootId)) {\n\t\tvar repairPacket = new RepairPacket(subRootId, damagePoint.DamageType, repairAmount);\n\t\tpacketSender.Send(repairPacket);\n\t}\n}", "CodeBleu_score": 29.452023416688753}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (!subRoot.TryGetIdOrWarn(out int subRootId)) {\n\t\treturn;\n\t}\n\n\t// Identify the specific damage point\n\tint damagePointId = (int)damagePoint;\n\n\t// Create a repair packet with the relevant details\n\tvar repairPacket = new CyclopsRepairPacket() {\n\t\tSubRootId = subRootId,\n\t\tDamagePointId = damagePointId,\n\t\tRepairAmount = repairAmount\n\t};\n\n\t// Send the repair packet\n\tpacketSender.Send(repairPacket);\n}", "CodeBleu_score": 29.153604414505818}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (!subRoot.TryGetIdOrWarn(out var id)) {\n\t\treturn;\n\t}\n\n\tvar packet = new CyclopsDamagePointRepairedPacket(id, damagePoint, repairAmount);\n\tpacketSender.Send(packet);\n}", "CodeBleu_score": 24.853464537984486}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.TryGetIdOrWarn(out var id)) {\n\t\tif (subRoot.GetComponent<LiveMixin>().health > 0f) {\n\t\t\tvar damage = new CyclopsDamageInfoData(id, info.GetOrDefault().damage, info.GetOrDefault().dealer);\n\t\t\tdamage.activeDamagePoints = GetActiveDamagePoints(subRoot);\n\t\t\tdamage.activeRoomFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>());\n\t\t\tvar packet = new CyclopsDamage(damage);\n\t\t\tpacketSender.Send(packet);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.994437645279618}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.TryGetIdOrWarn(out int id) && subRoot.GetComponent<LiveMixin>().health > 0f) {\n\t\tCyclopsDamageInfoData cyclopsDamageInfoData = new CyclopsDamageInfoData(id, info);\n\t\tDamagePoint[] activeDamagePoints = GetActiveDamagePoints(subRoot);\n\t\tRoomFire[] activeRoomFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>());\n\t\tCyclopsDamage packet = new CyclopsDamage(cyclopsDamageInfoData, activeDamagePoints, activeRoomFires);\n\t\tpacketSender.Send(packet);\n\t}\n}", "CodeBleu_score": 22.721984126175073}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.TryGetIdOrWarn(out var id)) {\n\t\tif (subRoot.GetComponent<LiveMixin>().health.health > 0f) {\n\t\t\tCyclopsDamageInfoData cyclopsDamageInfoData = null;\n\t\t\tif (info.HasValue) {\n\t\t\t\tcyclopsDamageInfoData = new CyclopsDamageInfoData(info.Value.damage, info.Value.dealer, info.Value.position);\n\t\t\t}\n\t\t\tCyclopsDamage cyclopsDamage = new CyclopsDamage(id, GetActiveDamagePoints(subRoot), GetActiveRoomFires(subRoot.GetComponent<SubFire>()), cyclopsDamageInfoData);\n\t\t\tpacketSender.Send(cyclopsDamage);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.054420008374386}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tif (dirtyEntities == null) {\n\t\treturn;\n\t}\n\tfor (int i = 0; i < dirtyEntities.Count; i++) {\n\t\tif (dirtyEntities[i]!= null) {\n\t\t\tRemoveEntityHierarchy(dirtyEntities[i]);\n\t\t\tGameObject gameObject = NitroxEntity.GetObjectFrom(dirtyEntities[i]);\n\t\t\tif (gameObject!= null) {\n\t\t\t\tUnityEngine.Object.Destroy(gameObject);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.46361974107986}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach(Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject gameObject = NitroxEntity.GetObjectFrom(entity);\n\t\tif(gameObject!= null) {\n\t\t\tUnityEngine.Object.Destroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.95167995373937}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject gameObject = NitroxEntity.GetObjectFrom(entity);\n\t\tif (gameObject!= null) {\n\t\t\tUnityEngine.Object.Destroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.961302214697}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\tList<Entity> pendingParentEntities;\nif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out pendingParentEntities)) {\npendingParentEntities = new List<Entity>();\npendingParentEntitiesByParentId.Add(entity.ParentId, pendingParentEntities);\n}\npendingParentEntities.Add(entity);\n}", "CodeBleu_score": 50.704747638482814}, {"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.ContainsKey(entity.ParentId)) {\npendingParentEntitiesByParentId.Add(entity.ParentId, new List<Entity>());\n}\npendingParentEntitiesByParentId[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 32.98491400091156}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out var pendingEntities)) {\n\t\tpendingEntities.Add(entity);\n\t} else {\n\t\tpendingParentEntitiesByParentId[entity.ParentId] = new List<Entity>() { entity };\n\t}\n}", "CodeBleu_score": 40.003060873984694}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t}", "CodeBleu_score": 5.28204113749622}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t}", "CodeBleu_score": 5.28204113749622}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t}", "CodeBleu_score": 5.28204113749622}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (!gameObject.TryGetIdOrWarn(out var id)) {\n\t\treturn;\n\t}\n\n\tif (!parent.TryGetIdOrWarn(out var parentId)) {\n\t\treturn;\n\t}\n\n\tvar metadata = _entityMetadataManager.Extract(gameObject);\n\tvar installedBatteryEntity = new InstalledBatteryEntity(id, parentId, techType.ToDto(), metadata);\n\t_packetSender.Send(installedBatteryEntity);\n}", "CodeBleu_score": 48.44984581815414}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject.TryGetIdOrWarn(out var id)) {\n\t\tif (metadata.OrNull(id, out var metadata)) {\n\t\t\tpacketSender.Send(new EntitySpawnedByClient {\n\t\t\t\tentity = new InstalledBatteryEntity {\n\t\t\t\t\tid = id,\n\t\t\t\t\tparent = parent.TryGetIdOrWarn(),\n\t\t\t\t\ttechType = techType.ToDto()\n\t\t\t\t},\n\t\t\t\tmetadata = metadata\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 41.22390226211228}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject.TryGetIdOrWarn(out var id) && parent.TryGetIdOrWarn(out var parentId)) {\n\t\tvar metadata = entityMetadataManager.Extract(gameObject);\n\t\tvar battery = new InstalledBatteryEntity(id, parentId, techType.ToDto(), metadata);\n\t\tpacketSender.Send(new EntitySpawnedByClient(battery));\n\t}\n}", "CodeBleu_score": 44.02157202827003}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tPickingUpObject = gameObject;\n\tRemoveAnyRemoteControl();\n\tif (!gameObject.TryGetNitroxId(out var nitroxId)) {\n\t\tnitroxId = GenerateNewId();\n\t}\n\tentities.MarkAsSpawned(nitroxId);\n\tConvertToInventoryItemEntity(nitroxId, techType);\n\tentityPositionBroadcaster.StopWatchingEntity(nitroxId);\n\tLog.Debug($\"Picked up {gameObject.name} with ID {nitroxId}\");\n\tvar packet = new PickupItem(nitroxId);\n\tpacketSender.Send(packet);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 43.56643875222632}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tPickingUpObject = gameObject;\n\tRemoveAnyRemoteControl();\n\tif (!gameObject.TryGetNitroxId(out NitroxId)) {\n\t\tNitroxId = GenerateNewId();\n\t}\n\tentities.MarkAsSpawned(NitroxId);\n\tConvertToInventoryItemEntity();\n\tLog.Debug($\"Picked up {gameObject.name} ({techType})\");\n\tpacketSender.Send(new PickupItem(NitroxId, techType));\n\tPickingUpObject = null;\n}", "CodeBleu_score": 38.29601808729534}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) {\n\t\treturn;\n\t}\n\n\tPickingUpObject = gameObject;\n\tRemoveAnyRemoteControl();\n\tif (!gameObject.TryGetNitroxId(out var id)) {\n\t\tid = NitroxEntity.GenerateNewId();\n\t}\n\n\tentities.MarkAsSpawned(id);\n\tentityPositionBroadcaster.StopWatchingEntity(id);\n\tConvertToInventoryItemEntity(gameObject, techType);\n\tLog.Debug($\"Picked up {gameObject.name} ({techType}) with id {id}\");\n\tvar packet = new PickupItem(id);\n\tpacketSender.Send(packet);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 47.18248728967795}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// Extract the player's ID\n\tstring playerId = Player.main.GetPlayerID();\n\n\t// Extract the GameObject's TechType\n\tTechType techType = gameObject.RequireComponent<Pickupable>().GetTechType();\n\n\t// Generate or retrieve the GameObject's NitroxId\n\tstring nitroxId = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\n\t// Extract the GameObject's class ID\n\tstring classId = gameObject.RequireComponent<PrefabIdentifier>().ClassId;\n\n\t// Extract the GameObject's metadata\n\tEntityMetadata metadata = entityMetadataManager.Extract(gameObject);\n\n\t// Extract the GameObject's child entities\n\tList<InventoryItemEntity> childEntities = GetPrefabChildren(gameObject, nitroxId, entityMetadataManager).ToList();\n\n\t// Populate the entity with battery data if applicable\n\tBatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, metadata);\n\n\t// Return an InventoryItemEntity constructed using the extracted information\n\treturn new InventoryItemEntity(nitroxId, playerId, classId, techType, metadata, childEntities);\n}", "CodeBleu_score": 58.34895224783334}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// Get the ID of the player that picked up the item\n\tstring playerId = Player.main.playerId;\n\n\t// Get the class ID of the item\n\tstring classId = gameObject.GetClassId();\n\n\t// Get the TechType of the item\n\tTechType techType = gameObject.RequireComponent<Pickupable>().GetTechType();\n\n\t// Get the metadata of the item\n\tEntityMetadata metadata = entityMetadataManager.Extract(gameObject);\n\n\t// Get the child entities of the item\n\tList<InventoryItemEntity> childEntities = GetPrefabChildren(gameObject, techType, entityMetadataManager).ToList();\n\n\t// If the item is a battery, populate the entity with battery data\n\tif (BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, ref childEntities)) {\n\t\t// If the item is a battery, set its class ID to \"Battery\"\n\t\tclassId = \"Battery\";\n\t}\n\n\t// Generate a NitroxId for the item\n\tstring nitroxId = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\n\t// Construct an InventoryItemEntity using the retrieved information\n\tInventoryItemEntity entity = new InventoryItemEntity(nitroxId, classId, techType, metadata, childEntities, playerId);\n\n\t// Return the constructed entity\n\treturn entity;\n}", "CodeBleu_score": 52.86141361412218}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// Get the NitroxId for the GameObject\n\tstring nitroxId = GetNitroxId(gameObject);\n\n\t// Get the class ID and TechType of the GameObject\n\tClassId classId = gameObject.GetClassId();\n\tTechType techType = gameObject.GetTechType();\n\n\t// Get the metadata and child entities for the GameObject\n\tMetadata metadata = entityMetadataManager.Extract(gameObject);\n\tList<InventoryItemEntity> childEntities = GetPrefabChildren(gameObject, nitroxId, entityMetadataManager).ToList();\n\n\t// Get the player's ID\n\tstring playerId = Player.main.playerId;\n\n\t// Create an InventoryItemEntity with the retrieved information\n\tInventoryItemEntity entity = new InventoryItemEntity(nitroxId, classId, techType, metadata, childEntities, playerId);\n\n\t// If the GameObject has a BatteryChildEntityHelper, populate the entity with battery data\n\tif (BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, entity)) {\n\t\treturn entity;\n\t}\n\n\t// Return the InventoryItemEntity\n\treturn entity;\n}", "CodeBleu_score": 43.92487404157691}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\n\tthis.body = new Lazy<PlayerBody>(this.CreateBody);\n\tthis.playerModel = new Lazy<PlayerModel>(this.CreatePlayerModel);\n\tthis.bodyPrototype = new Lazy<PlayerBodyPrototype>(this.CreateBodyPrototype);\n\n\tthis.permissions = new PlayerPermissions(this);\n\tthis.permissions.SetAll(true);\n}", "CodeBleu_score": 49.94359732735308}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\n\t// Set up lazy-loaded references.\n\tbody = new Lazy<Body>(() => multiplayerSession.GetBody(multiplayerSession.MyID));\n\tmodel = new Lazy<PlayerModel>(() => body.Value.PlayerModel);\n\tbodyPrototype = new Lazy<BodyPrototype>(() => model.Value.Prototype);\n\n\t// Set default player permissions.\n\tPermissions = new Permissions();\n\tPermissions.Set(Permission.Move, true);\n\tPermissions.Set(Permission.Use, true);\n\tPermissions.Set(Permission.Attack, true);\n\tPermissions.Set(Permission.Chat, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.Set(Permission.ChangeTeam, true);\n\tPermissions.Set(Permission.ChangeClass, true);\n\tPermissions.", "CodeBleu_score": 46.57298790118375}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<PlayerBody>(() => {\n\t\treturn new PlayerBody(multiplayerSession, packetSender, throttledPacketSender);\n\t});\n\tthis.playerModel = new Lazy<PlayerModel>(() => {\n\t\treturn new PlayerModel(multiplayerSession, packetSender, throttledPacketSender);\n\t});\n\tthis.bodyPrototype = new Lazy<PlayerBodyPrototype>(() => {\n\t\treturn new PlayerBodyPrototype(multiplayerSession, packetSender, throttledPacketSender);\n\t});\n\tthis.permissions = new PlayerPermissions();\n}", "CodeBleu_score": 47.620189432819195}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (player.head.activeSelf) {\n\t\t\tplayer.head.SetActive(false);\n\t\t\tGameObject clone = Instantiate(player.body);\n\t\t\tclone.GetComponentInChildren<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.ShadowsOnly;\n\t\t\tclone.SetActive(false);\n\t\t\tclone.name = \"RemotePlayerPrototype\";\n\t\t\tif (clone.transform.Find(\"LeftHand\")!= null) {\n\t\t\t\tDestroyImmediate(clone.transform.Find(\"LeftHand\").gameObject);\n\t\t\t}\n\t\t\tif (clone.transform.Find(\"RightHand\")!= null) {\n\t\t\t\tDestroyImmediate(clone.transform.Find(\"RightHand\").gameObject);\n\t\t\t}\n\t\t\treturn clone;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}", "CodeBleu_score": 34.22083479015344}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\t// Ensure head is visible\n\t\tif (!head.activeSelf) {\n\t\t\thead.SetActive(true);\n\t\t}\n\n\t\t// Create clone of body prototype\n\t\tGameObject clone = Instantiate(bodyPrototype);\n\n\t\t// Reset head's shadow casting mode\n\t\thead.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = ShadowCastingMode.On;\n\n\t\t// Deactivate and rename clone\n\t\tclone.SetActive(false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\n\t\t// Remove items held in hand\n\t\tif (clone.transform.Find(\"Hand_R/RightHandItem\")) {\n\t\t\tDestroyImmediate(clone.transform.Find(\"Hand_R/RightHandItem\").gameObject);\n\t\t}\n\t\tif (clone.transform.Find(\"Hand_L/LeftHandItem\")) {\n\t\t\tDestroyImmediate(clone.transform.Find(\"Hand_L/LeftHandItem\").gameObject);\n\t\t}\n\n\t\t// Return clone\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 34.49079451890934}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\t// Ensure head is visible\n\t\thead.GetComponent<Renderer>().enabled = true;\n\t\t// Instantiate clone of body prototype\n\t\tGameObject clone = Instantiate(bodyPrototype);\n\t\t// Reset shadow casting mode of head\n\t\thead.GetComponent<Renderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\t// Deactivate clone and rename\n\t\tclone.SetActive(false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\t// Remove items from clone\n\t\tforeach (Transform child in clone.transform) {\n\t\t\tif (child.gameObject.name.Contains(\"Hand\")) {\n\t\t\t\tObject.DestroyImmediate(child.gameObject);\n\t\t\t}\n\t\t}\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 41.956025245519115}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().Name);\n\tbw.Write(Location);\n\tMetadata.Save(bw);\n\tbw.Write(Processes.Count);\n\tforeach (var process in Processes)\n\t\tbw.Write(process);\n\tbw.Write(Dependencies.Count);\n\tforeach (var dependency in Dependencies)\n\t\t((ICacheable) dependency).Save(bw);\n\tbw.Write(Incompatibilities.Count);\n\tforeach (var incompatibility in Incompatibilities)\n\t\t((ICacheable) incompatibility).Save(bw);\n\tbw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 46.00427076970838}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().Name);\n\tbw.Write(Location);\n\tMetadata.Save(bw);\n\tProcesses.Save(bw);\n\tDependencies.Save(bw);\n\tIncompatibilities.Save(bw);\n\tTargettedBepInExVersion.Save(bw);\n}", "CodeBleu_score": 17.990787614613133}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName);\n\tbw.Write(Location);\n\tMetadata.Save(bw);\n\tProcesses.Save(bw);\n\tDependencies.Save(bw);\n\tIncompatibilities.Save(bw);\n\tTargettedBepInExVersion.Save(bw);\n}", "CodeBleu_score": 18.052966218814113}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tvar pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tvar pluginInstance = Activator.CreateInstance(pluginType) as BasePlugin;\n\tpluginInstance.PluginInfo = pluginInfo;\n\tpluginInstance.Load();\n\tPluginLoad?.Invoke();\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 56.02459518159022}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// Get the plugin type\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\t// Create an instance of the plugin\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\t// Invoke the PluginLoad event\n\tPluginLoad?.Invoke(pluginInstance);\n\t// Call the Load method on the plugin instance\n\tpluginInstance.Load();\n\t// Return the plugin instance\n\treturn pluginInstance;\n}", "CodeBleu_score": 56.5993365486818}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tvar pluginType = pluginAssembly.GetType(pluginInfo.ClassName);\n\tvar pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tPluginLoad?.Invoke(pluginInstance);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 57.200590788839364}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare(signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 30.287340471343594}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tTrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 66.01722055988265}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tTrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 66.01722055988265}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\t// Get the language file stream from the assembly's resources\n\tusing (var stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"Localization.{code}.json\")) {\n\t\t// If the stream is null, throw a NullReferenceException\n\t\tif (stream == null) {\n\t\t\tthrow new NullReferenceException($\"Language file for code '{code}' not found.\");\n\t\t}\n\n\t\t// Deserialize the stream into a dictionary\n\t\ttry {\n\t\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t\t} catch (JsonException) {\n\t\t\t// If deserialization fails, throw a JsonException\n\t\t\tthrow new JsonException($\"Failed to deserialize language file for code '{code}'.\");\n\t\t}\n\t}\n}", "CodeBleu_score": 53.52834801231003}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tif (code == null) {\n\t\tthrow new ArgumentNullException(nameof(code));\n\t}\n\tif (code.Length!= 2) {\n\t\tthrow new ArgumentException(\"Language code must be 2 characters long.\", nameof(code));\n\t}\n\tif (code.Any(c =>!char.IsLetter(c))) {\n\t\tthrow new ArgumentException(\"Language code must be letters only.\", nameof(code));\n\t}\n\n\tvar resourceName = \"Localization.Languages.\" + code + \".json\";\n\tusing var stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream(resourceName);\n\tif (stream == null) {\n\t\tthrow new NullReferenceException($\"Resource '{resourceName}' not found.\");\n\t}\n\n\tvar options = new JsonSerializerOptions {\n\t\tPropertyNameCaseInsensitive = true\n\t};\n\tvar language = JsonSerializer.Deserialize<Dictionary<string, string>>(stream, options);\n\tif (language == null) {\n\t\tthrow new JsonException($\"Failed to deserialize resource '{resourceName}'.\");\n\t}\n\n\treturn language;\n}", "CodeBleu_score": 47.706114185610254}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tstring resourceName = $\"Localization.Languages.{code}.json\";\n\tusing (Stream stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream(resourceName)) {\n\t\tif (stream == null) {\n\t\t\tthrow new NullReferenceException($\"The language file for {code} was not found.\");\n\t\t}\n\t\tDictionary<string, string> language = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t\treturn language;\n\t}\n}", "CodeBleu_score": 52.57236647869594}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tcount += this.Visit(node as ParserRuleContext);\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 41.23499797708124}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tcount += this.Visit(node as ParserRuleContext);\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 43.255110270268794}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tcount += this.Visit((ParserRuleContext)node);\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 39.12652234342161}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\nvar formattedText = context.formatted_text();\n", "CodeBleu_score": 7.2766890535504505}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// Emit code for the expressions in the formatted text\n\tthis.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\n\t// Get the line ID tag\n\tvar lineIDTag = this.compiler.GetLineIDTag(context.line_id_tag());\n\n\t// Emit a RunLine opcode with the line ID and expression count\n\tthis.compiler.Emit(OpCode.RunLine, lineIDTag, context.line_formatted_text().expression().Length);\n\n\treturn 0;\n}", "CodeBleu_score": 45.09034873781415}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// Visit the line's formatted text\nvar formattedText = this.Visit(context.formatted_text());\n\n// Get the line ID tag\nvar lineIDTag = this.GetLineIDTag(context);\n\n// Emit the RunLine opcode\nthis.compiler.Emit(new RunLine(lineIDTag, formattedText.Count));\n\nreturn 0;\n}", "CodeBleu_score": 15.908889731245642}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar diagnostics = new List<Diagnostic>();\n\n\t// Get the list of known commands from the project\n\tvar knownCommands = GetKnownCommands();\n\n\t// Loop through each command reference in the YarnFileData object\n\tforeach (var commandReference in yarnFile.CommandReferences) {\n\t\t// Check if the command reference's name is in the list of known commands\n\t\tif (!knownCommands.Contains(commandReference.Name)) {\n\t\t\t// If not, generate a diagnostic object with a warning message\n\t\t\tvar diagnostic = Diagnostic.Create(\n\t\t\t\tnew DiagnosticDescriptor(\n\t\t\t\t\tid: \"YRN001\",\n\t\t\t\t\ttitle: \"Unknown command\",\n\t\t\t\t\tmessageFormat: \"Unknown command: {0}\",\n\t\t\t\t\tcategory: \"Yarn\",\n\t\t\t\t\tdefaultSeverity: DiagnosticSeverity.Warning,\n\t\t\t\t\tisEnabledByDefault: true),\n\t\t\t\tlocation: Location.Create(yarnFile.FilePath, commandReference.ParametersRange),\n\t\t\t\tcommandReference.Name);\n\n\t\t\t// Add the diagnostic to the list\n\t\t\tdiagnostics.Add(diagnostic);\n\t\t}\n\t}\n\n\t// Return the list of diagnostics\n\treturn diagnostics;\n}", "CodeBleu_score": 24.665633191601557}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar commandReference = new Regex(@\"^(?<commandName>\\w+)(?<parameters>\\(.*\\))?$\");\n\tvar knownCommands = new HashSet<string>(yarnFile.Project.Commands.Select(c => c.Name));\n\treturn from command in yarnFile.Commands\n\t\tlet match = commandReference.Match(command.Text)\n\t\twhere match.Success\n\t\tlet commandName = match.Groups[\"commandName\"].Value\n\t\twhere!knownCommands.Contains(commandName)\n\t\tselect new Diagnostic(\n\t\t\tDiagnosticSeverity.Warning,\n\t\t\t$\"Unknown command: {commandName}\",\n\t\t\t\"YarnSpinner\",\n\t\t\t\"UnknownCommand\",\n\t\t\tcommand.ParametersRange.Start.Delta\n\t\t);\n}", "CodeBleu_score": 22.21524668890532}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\t// Create a list to store the diagnostics\n\tvar diagnostics = new List<Diagnostic>();\n\n\t// Get the known commands from the project\n\tvar knownCommands = Project.Current.GetKnownCommands();\n\n\t// Loop through each command reference in the YarnFileData object\n\tforeach (var commandReference in yarnFile.CommandReferences) {\n\t\t// Check if the command reference's command name is not in the known commands list\n\t\tif (!knownCommands.Any(c => c.Name == commandReference.Name)) {\n\t\t\t// Create a diagnostic object for the unknown command\n\t\t\tvar diagnostic = Diagnostic.Create(\n\t\t\t\tDiagnosticDescriptors.UnknownCommand,\n\t\t\t\tcommandReference.NameRange.Start,\n\t\t\t\tcommandReference.Name);\n\n\t\t\t// Add the diagnostic to the list\n\t\t\tdiagnostics.Add(diagnostic);\n\t\t}\n\t}\n\n\t// Return the list of diagnostics\n\treturn diagnostics;\n}", "CodeBleu_score": 22.98955790598083}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = new Container<DocumentSelector>(new DocumentSelector(new DocumentFilter() {\n\t\t\tLanguage = \"yarn\",\n\t\t\tScheme = \"file\",\n\t\t})),\n\t\tResolveProvider = false,\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n\t};\n}", "CodeBleu_score": 61.68534157113359}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = new DocumentSelector(new DocumentFilter() {\n\t\t\tLanguage = \"yarn\",\n\t\t\tScheme = \"file\"\n\t\t}),\n\t\tResolveProvider = false,\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n}", "CodeBleu_score": 57.76856610820925}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions {\n\t\tDocumentSelector = new Container<DocumentSelector>(new DocumentSelector(\n\t\t\tnew DocumentFilter {\n\t\t\t\tLanguage = \"yarn\",\n\t\t\t\tScheme = \"file\"\n\t\t\t}\n\t\t)),\n\t\tResolveProvider = false,\n\t\tCodeActionKinds = new Container<CodeActionKind>(new CodeActionKind(CodeActionKind.QuickFix))\n\t};\n}", "CodeBleu_score": 61.17003802369487}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (string.IsNullOrEmpty(variableName)) {\n\t\tthrow new ArgumentNullException(\"variableName\");\n\t}\n\tobject foundValue;\n\tif (this.variables.TryGetValue(variableName, out foundValue)) {\n\t\tif (typeof(T).IsAssignableFrom(foundValue.GetType())) {\n\t\t\tresult = (T)foundValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(string.Format(\"The type of the variable '{0}' is not compatible with the specified type '{1}'.\", variableName, typeof(T).Name));\n\t\t}\n\t}\n\tresult = default(T);\n\treturn false;\n}", "CodeBleu_score": 63.53122367763868}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (string.IsNullOrEmpty(variableName))\n\t\tthrow new ArgumentNullException(\"variableName\");\n\tif (variableName.IndexOfAny(new char[] { '[', ']' })!= -1)\n\t\tthrow new ArgumentException(\"Variable name cannot contain '[' or ']' characters.\");\n\tobject foundValue;\n\tif (this.variables.TryGetValue(variableName, out foundValue)) {\n\t\tif (foundValue.GetType().IsAssignableFrom(typeof(T))) {\n\t\t\tresult = (T)foundValue;\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\tthrow new ArgumentException(string.Format(\"Variable '{0}' is of type {1}, which is incompatible with the specified type {2}.\", variableName, foundValue.GetType(), typeof(T)));\n\t}\n\telse {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 51.37406144770522}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tobject foundValue;\n\tif (this.variables.TryGetValue(variableName, out foundValue)) {\n\t\tif (foundValue.GetType().IsAssignableFrom(typeof(T))) {\n\t\t\tresult = (T)foundValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(\"The variable type is incompatible with the requested type.\");\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 58.69633025840948}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\t// Create a library and a virtual machine\n\tlibrary = new Library();\n\tvm = new VirtualMachine(library, variableStorage);\n\n\t// Import the standard library\n\tImportLibrary(new StandardLibrary());\n\n\t// Register functions for node visit tracking\n\tRegisterFunction(nameof(GetNodeVisitCount), (string nodeName) => {\n\t\treturn vm.GetNodeVisitCount(nodeName);\n\t});\n\n\tRegisterFunction(nameof(IsNodeVisited), (string nodeName) => {\n\t\treturn vm.IsNodeVisited(nodeName);\n\t});\n\n\t// Create a line parser\n\tlineParser = new LineParser();\n\n\t// Register marker processors for select, plural, and ordinal markers\n\tlineParser.RegisterMarkerProcessor(\"select\", (string[] args) => {\n\t\tif (args.Length!= 2) {\n\t\t\tthrow new ArgumentException(\"select marker requires 2 arguments\");\n\t\t}\n\n\t\treturn vm.GetOptions(args[0], args[1]);\n\t});\n\n\tlineParser.RegisterMarkerProcessor(\"plural\", (string[] args) => {\n\t\tif (args.Length!= 1) {\n\t\t\tthrow new ArgumentException(\"plural marker requires 1 argument\");\n\t\t}\n\n\t\treturn vm.GetOptions(args[0], \"plural\");\n\t});\n\n\tlineParser.RegisterMarkerProcessor(\"ordinal\", (string[] args) => {\n\t\tif (args.Length!= 1) {\n\t\t\tthrow new ArgumentException(\"ordinal marker requires 1 argument\");\n\t\t}\n\n\t\treturn vm.GetOptions(args[0], \"ordinal\");\n\t});\n}", "CodeBleu_score": 43.00437802590449}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\t// Create a new Library, and a new VirtualMachine.\n\tthis.library = new Library();\n\tthis.virtualMachine = new VirtualMachine(this.library, variableStorage);\n\n\t// Import the standard library.\n\tthis.library.ImportLibrary(new StandardLibrary());\n\n\t// Register functions for tracking node visits.\n\tthis.library.RegisterFunction(nameof(Dialogue.SetNodeVisitCount), (string functionName, List<Value> parameters, out Value returnValue) => {\n\t\t// SetNodeVisitCount takes two parameters: the name of the node to set the visit count for, and the number of times to set it to.\n\t\tstring nodeName = parameters[0].AsString;\n\t\tint visitCount = parameters[1].AsNumber;\n\n\t\t// Set the node's visit count.\n\t\tthis.virtualMachine.SetNodeVisitCount(nodeName, visitCount);\n\n\t\t// There's no return value.\n\t\treturnValue = null;\n\t});\n\n\tthis.library.RegisterFunction(nameof(Dialogue.GetNodeVisitCount), (string functionName, List<Value> parameters, out Value returnValue) => {\n\t\t// GetNodeVisitCount takes one parameter: the name of the node to get the visit count for.\n\t\tstring nodeName = parameters[0].AsString;\n\n\t\t// Get the node's visit count.\n\t\tint visitCount = this.virtualMachine.GetNodeVisitCount(nodeName);\n\n\t\t// Return the node's visit count.\n\t\treturnValue = visitCount;\n\t});\n\n\tthis.library.RegisterFunction(nameof(Dialogue.IsNodeVisited), (string functionName, List<Value> parameters, out Value returnValue) => {\n\t\t// IsNodeVisited takes one parameter: the name of the node to check if it has been visited.\n\t\tstring nodeName = parameters[0].AsString;\n\n\t\t// Check if the node has been visited.\n\t\tbool visited = this.virtualMachine.IsNodeVisited(nodeName);\n\n\t\t// Return true or false.\n\t\treturnValue = visited;\n\t});\n\n\t// Create a new LineParser.\n\tthis.lineParser = new LineParser();\n\n\t// Register marker processors for the select, plural, and ordinal markers.\n\tthis.lineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n\tthis.lineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n\t", "CodeBleu_score": 32.26555463794105}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\n\t// Create the library\n\tlibrary = new Library();\n\n\t// Create the virtual machine\n\tvirtualMachine = new VirtualMachine(library);\n\n\t// Import the standard library\n\tLibrary.ImportLibrary(StandardLibrary.GetLibrary());\n\n\t// Register the functions for tracking which nodes have been visited\n\tRegisterFunction(nameof(IsNodeVisited), (string nodeName) => {\n\t\treturn IsNodeVisited(nodeName);\n\t});\n\n\tRegisterFunction(nameof(GetNodeVisitCount), (string nodeName) => {\n\t\treturn GetNodeVisitCount(nodeName);\n\t});\n\n\t// Create the line parser\n\tlineParser = new LineParser();\n\n\t// Register the marker processors\n\tlineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n\tlineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n\tlineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 39.868085890744744}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 69.39193480181972}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < LoopList.Count; i++) {\n\t\tif (LoopList[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 67.78819756160645}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tint i = 0;\n\tforeach (LoopListBankData data in LoopListBank) {\n\t\tif (data.UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn -1;\n}", "CodeBleu_score": 45.36034451470601}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.id = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 58.88680507864894}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newData = new LoopListBankData();\n\tnewData.content = newContent;\n\tnewData.id = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 58.081407341006454}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.uniqueID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 59.20502099182665}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tif (m_ScrollRect!= null) {\n\t\t\tif (m_ScrollRect.m_ScrollPrefab!= null) {\n\t\t\t\tm_ScrollRect.m_ScrollPrefab.name = m_ScrollRect.m_ScrollPrefab.name + idx.ToString();\n\t\t\t}\n\t\t}\n\t}\n\tif (m_ScrollRect!= null) {\n\t\tif (m_ScrollRect.m_ScrollPrefab!= null) {\n\t\t\tif (m_ScrollRect.m_ScrollPrefab.m_ScrollCell!= null) {\n\t\t\t\tm_ScrollRect.m_ScrollPrefab.m_ScrollCell.ScrollCellIndex(idx, content, ClickUniqueID, ClickObject);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.103750189114386}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = string.Format(\"{0} {1}\", gameObject.name, idx);\n\t}\n\tif (m_Content!= null) {\n\t\tif (m_Content is UnityEngine.Object) {\n\t\t\tif (m_Content is GameObject) {\n\t\t\t\tGameObject go = m_Content as GameObject;\n\t\t\t\tif (go.transform.parent!= transform) {\n\t\t\t\t\tgo.transform.SetParent(transform, false);\n\t\t\t\t}\n\t\t\t} else if (m_Content is Component) {\n\t\t\t\tComponent com = m_Content as Component;\n\t\t\t\tif (com.transform.parent!= transform) {\n\t\t\t\t\tcom.transform.SetParent(transform, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (m_ClickUniqueID!= ClickUniqueID) {\n\t\tm_ClickUniqueID = ClickUniqueID;\n\t\tm_ClickObject = ClickObject;\n\t}\n}", "CodeBleu_score": 57.33999609695273}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tname = string.Format(\"{0} {1}\", m_PrefabName, idx);\n\t}\n}", "CodeBleu_score": 59.50138739873111}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\tint addCount = 0;\n\tif (int.TryParse(m_InputField.text, out addCount)) {\n\t\taddCount = Mathf.Max(1, addCount);\n\t\tfor (int i = 0; i < addCount; i++) {\n\t\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t\t}\n\t\tm_LoopScrollRect.UpdateTotalCount(m_ListBank.GetListLength());\n\t\tm_LoopScrollRect.RefreshCells();\n\t}\n}", "CodeBleu_score": 46.737584842404544}, {"code": "private void OnButtonAddDataClickk(){\n\t\t// Parse the input field text to determine the number of items to add\n\tint count = 0;\n\tint.TryParse(m_InputFieldAddData.text, out count);\n\tcount = Mathf.Max(count, 1);\n\n\t// Add random integers between 0 and 10 to the list bank\n\tfor (int i = 0; i < count; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\n\t// Update the total count of the scroll rect\n\tm_LoopScrollRect.TotalCount = m_ListBank.GetListLength();\n\n\t// Refresh the displayed cells\n\tm_LoopScrollRect.RefreshCells();\n}", "CodeBleu_score": 43.70371528309587}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint count = 0;\n\tint.TryParse(m_InputField.text, out count);\n\tcount = Mathf.Max(1, count);\n\n\tfor (int i = 0; i < count; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\n\tm_LoopScrollRect.UpdateTotalCount();\n\tm_LoopScrollRect.RefreshCells();\n}", "CodeBleu_score": 44.114986376699804}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t}", "CodeBleu_score": 1.2759667216965314}, {"code": "protected override void ClearTempPool(){\n\t}", "CodeBleu_score": 1.2759667216965314}, {"code": "protected override void ClearTempPool(){\n\t}", "CodeBleu_score": 1.2759667216965314}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\n}", "CodeBleu_score": 2.0649604624249824}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (PhotonNetwork.InRoom && PhotonNetwork.IsListening) {\n\t\ttransform.localScale = newScale;\n\t\tanticipatedScale = newScale;\n\t\tif (allowAuthoritativeScale) {\n\t\t\tauthoritativeScale = newScale;\n\t\t}\n\t\tRecordAnticipatedTransform();\n\t\tanticipationStartTime = PhotonNetwork.Time;\n\t\tanticipationDuration = 0.0f;\n\t\tanticipationCounter = 0;\n\t\tsmoothTransitionDuration = 0.0f;\n\t\tsmoothTransitionTime = 0.0f;\n\t}\n}", "CodeBleu_score": 38.19478553813564}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\n}", "CodeBleu_score": 2.0649604624249824}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\tif (m_NetworkAnimator == null) {\n\t\treturn;\n\t}\n\n\t// Send animation updates\n\tfor (int i = 0; i < m_SendAnimationUpdates.Count; ++i) {\n\t\tm_NetworkAnimator.SendAnimStateClientRpc(m_SendAnimationUpdates[i]);\n\t}\n\tm_SendAnimationUpdates.Clear();\n\n\t// Send parameter updates\n\tfor (int i = 0; i < m_SendParameterUpdates.Count; ++i) {\n\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates[i]);\n\t}\n\tm_SendParameterUpdates.Clear();\n\n\t// Send trigger updates\n\tfor (int i = 0; i < m_SendTriggerUpdates.Count; ++i) {\n\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates[i]);\n\t}\n\tm_SendTriggerUpdates.Clear();\n\n\t// Send server trigger updates\n\tfor (int i = 0; i < m_SendServerTriggerUpdates.Count; ++i) {\n\t\tm_NetworkAnimator.SendAnimTriggerServerRpc(m_SendServerTriggerUpdates[i]);\n\t}\n\tm_SendServerTriggerUpdates.Clear();\n}", "CodeBleu_score": 46.928166021558745}, {"code": "private void FlushMessages(){\n\t\tif (m_NetworkAnimator == null) {\n\t\treturn;\n\t}\n\n\t// Send animation updates\n\tfor (int i = 0; i < m_SendAnimationUpdates.Count; ++i) {\n\t\tm_NetworkAnimator.SendAnimStateClientRpc(m_SendAnimationUpdates[i]);\n\t}\n\tm_SendAnimationUpdates.Clear();\n\n\t// Send parameter updates\n\tfor (int i = 0; i < m_SendParameterUpdates.Count; ++i) {\n\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates[i]);\n\t}\n\tm_SendParameterUpdates.Clear();\n\n\t// Send trigger updates\n\tfor (int i = 0; i < m_SendTriggerUpdates.Count; ++i) {\n\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates[i]);\n\t}\n\tm_SendTriggerUpdates.Clear();\n}", "CodeBleu_score": 44.46109603120823}, {"code": "private void FlushMessages(){\n\t\tif (m_NetworkAnimator.isClient) {\n\t\tfor (int i = 0; i < m_SendAnimationUpdates.Count; i++) {\n\t\t\tm_NetworkAnimator.SendAnimStateClientRpc(m_SendAnimationUpdates[i]);\n\t\t}\n\t\tm_SendAnimationUpdates.Clear();\n\n\t\tfor (int i = 0; i < m_SendParameterUpdates.Count; i++) {\n\t\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates[i]);\n\t\t}\n\t\tm_SendParameterUpdates.Clear();\n\n\t\tfor (int i = 0; i < m_SendTriggerUpdates.Count; i++) {\n\t\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates[i]);\n\t\t}\n\t\tm_SendTriggerUpdates.Clear();\n\t} else {\n\t\tfor (int i = 0; i < m_SendAnimationUpdates.Count; i++) {\n\t\t\tm_NetworkAnimator.SendAnimStateServerRpc(m_SendAnimationUpdates[i]);\n\t\t}\n\t\tm_SendAnimationUpdates.Clear();\n\n\t\tfor (int i = 0; i < m_SendParameterUpdates.Count; i++) {\n\t\t\tm_NetworkAnimator.SendParametersUpdateServerRpc(m_SendParameterUpdates[i]);\n\t\t}\n\t\tm_SendParameterUpdates.Clear();\n\n\t\tfor (int i = 0; i < m_SendTriggerUpdates.Count; i++) {\n\t\t\tm_NetworkAnimator.SendAnimTriggerServerRpc(m_SendTriggerUpdates[i]);\n\t\t}\n\t\tm_SendTriggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 42.274408339088176}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t}", "CodeBleu_score": 1.249607204939217}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tswitch (updateStage) {\n\t\tcase NetworkUpdateStage.PreUpdate:\n\t\t\tif (m_NetworkAnimator.isServer &&!m_NetworkAnimator.isClient) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NetworkUpdateStage.Update:\n\t\t\tm_NetworkAnimator.UpdateParameters();\n\t\t\tm_NetworkAnimator.CheckForAnimatorChanges();\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 26.48042030954958}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tswitch (updateStage) {\n\t\tcase NetworkUpdateStage.PreUpdate:\n\t\t\tif (m_NetworkAnimator.IsServerAuthoritative || m_NetworkAnimator.IsOwner) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NetworkUpdateStage.Update:\n\t\t\tm_NetworkAnimator.UpdateParameters();\n\t\t\tif (m_NetworkAnimator.IsServerAuthoritative ||!m_NetworkAnimator.IsOwner) {\n\t\t\t\tm_NetworkAnimator.CheckForAnimatorChanges();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 35.00651631842663}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t\tif (IsServer) {\n\t\tif (IsOwnedByServer) {\n\t\t\tSetOwnershipState(OwnershipState.Server);\n\t\t} else {\n\t\t\tSetOwnershipState(OwnershipState.NotOwned);\n\t\t}\n\t} else {\n\t\tif (IsOwnedByServer) {\n\t\t\tSetOwnershipState(OwnershipState.Server);\n\t\t} else {\n\t\t\tif (IsOwnedByClient) {\n\t\t\t\tSetOwnershipState(OwnershipState.Client);\n\t\t\t} else {\n\t\t\t\tSetOwnershipState(OwnershipState.NotOwned);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 10.852681501917791}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (this.ServerAuthority == true) {\n\t\tthis.AuthorityState = AuthorityState.Server;\n\t\tthis.Rigidbody.isKinematic = true;\n\t\tthis.Rigidbody.interpolation = RigidbodyInterpolation.None;\n\t}\n\telse {\n\t\tthis.AuthorityState = AuthorityState.Client;\n\t\tthis.Rigidbody.isKinematic = false;\n\t\tthis.Rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t}\n}", "CodeBleu_score": 28.532661600926733}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (IsOwnedByServer) {\n\t\tif (IsOwnedByLocalPlayer) {\n\t\t\tif (IsOwnedByLocalPlayerAuthority) {\n\t\t\t\t// The object is owned by the server and the local player has authority.\n\t\t\t\t// Set the object's authority state to LocalPlayerAuthority.\n\t\t\t\tAuthorityState = AuthorityState.LocalPlayerAuthority;\n\t\t\t\t// Set the Rigidbody's kinematic and interpolation properties to match the local player's authority state.\n\t\t\t\tif (Rigidbody!= null) {\n\t\t\t\t\tRigidbody.isKinematic = true;\n\t\t\t\t\tRigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The object is owned by the server and the local player does not have authority.\n\t\t\t\t// Set the object's authority state to ServerAuthority.\n\t\t\t\tAuthorityState = AuthorityState.ServerAuthority;\n\t\t\t\t// Set the Rigidbody's kinematic and interpolation properties to match the server's authority state.\n\t\t\t\tif (Rigidbody!= null) {\n\t\t\t\t\tRigidbody.isKinematic = true;\n\t\t\t\t\tRigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// The object is owned by the server and not owned by the local player.\n\t\t\t// Set the object's authority state to ServerAuthority.\n\t\t\tAuthorityState = AuthorityState.ServerAuthority;\n\t\t\t// Set the Rigidbody's kinematic and interpolation properties to match the server's authority state.\n\t\t\tif (Rigidbody!= null) {\n\t\t\t\tRigidbody.isKinematic = true;\n\t\t\t\tRigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (IsOwnedByLocalPlayer) {\n\t\t\t// The object is not owned by the server but is owned by the local player.\n\t\t\t// Set the object's authority state to LocalPlayerNoAuthority.\n\t\t\tAuthorityState = AuthorityState.LocalPlayerNoAuthority;\n\t\t\t// Set the Rigidbody's kinematic and interpolation properties to match the local player's authority state.\n\t\t\tif (Rigidbody!= null) {\n\t\t\t\tRigidbody.isKinematic = true;\n\t\t\t\tRigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t} else {\n\t\t\t// The object is not owned by the server or the local player.\n\t\t\t// Set the object's authority state to NoAuthority", "CodeBleu_score": 23.90437622429583}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tint highestTwoBits = (int)(compressed >> 30) & 3;\n\tif (highestTwoBits == 0) {\n\t\tquaternion.w = 1f;\n\t\tquaternion.x = (float)(compressed >> 16) / 32767f;\n\t\tquaternion.y = (float)(compressed >> 0 & 65535) / 32767f;\n\t\tquaternion.z = (float)(compressed >> 16 & 65535) / 32767f;\n\t} else if (highestTwoBits == 1) {\n\t\tquaternion.w = (float)(compressed >> 16) / 32767f;\n\t\tquaternion.x = 1f;\n\t\tquaternion.y = (float)(compressed >> 0 & 65535) / 32767f;\n\t\tquaternion.z = (float)(compressed >> 16 & 65535) / 32767f;\n\t} else if (highestTwoBits == 2) {\n\t\tquaternion.w = (float)(compressed >> 16) / 32767f;\n\t\tquaternion.x = (float)(compressed >> 0 & 65535) / 32767f;\n\t\tquaternion.y = 1f;\n\t\tquaternion.z = (float)(compressed >> 16 & 65535) / 32767f;\n\t} else {\n\t\tquaternion.w = (float)(compressed >> 16) / 32767f;\n\t\tquaternion.x = (float)(compressed >> 0 & 65535) / 32767f;\n\t\tquaternion.y = (float)(compressed >> 16 & 65535) / 32767f;\n\t\tquaternion.z = 1f;\n\t}\n\tfloat squaredMagnitude = quaternion.w * quaternion.w + quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z;\n\tquaternion.w *= Mathf.Sqrt(", "CodeBleu_score": 17.305592473720594}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tfloat x, y, z, w;\n\tint highestTwoBits = (int)(compressed >> 30);\n\tswitch (highestTwoBits) {\n\t\tcase 0:\n\t\t\tx = DecompressFloat(compressed);\n\t\t\ty = DecompressFloat(compressed >> 10);\n\t\t\tz = DecompressFloat(compressed >> 20);\n\t\t\tw = Mathf.Sqrt(1 - x * x - y * y - z * z);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tx = DecompressFloat(compressed);\n\t\t\ty = DecompressFloat(compressed >> 10);\n\t\t\tw = DecompressFloat(compressed >> 20);\n\t\t\tz = Mathf.Sqrt(1 - x * x - y * y - w * w);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tx = DecompressFloat(compressed);\n\t\t\tz = DecompressFloat(compressed >> 10);\n\t\t\tw = DecompressFloat(compressed >> 20);\n\t\t\ty = Mathf.Sqrt(1 - x * x - z * z - w * w);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\ty = DecompressFloat(compressed);\n\t\t\tz = DecompressFloat(compressed >> 10);\n\t\t\tw = DecompressFloat(compressed >> 20);\n\t\t\tx = Mathf.Sqrt(1 - y * y - z * z - w * w);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new System.Exception(\"Invalid compressed quaternion\");\n\t}\n\tquaternion = new Quaternion(x, y, z, w);\n}", "CodeBleu_score": 25.674876427519266}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tint x = (int)(compressed & 0x3FF);\n\tint y = (int)((compressed >> 10) & 0x3FF);\n\tint z = (int)((compressed >> 20) & 0x3FF);\n\tint w = (int)((compressed >> 30) & 0x3);\n\n\tswitch (w) {\n\t\tcase 0:\n\t\t\tquaternion.w = 1f;\n\t\t\tquaternion.x = (float)x / 1023f * 2f - 1f;\n\t\t\tquaternion.y = (float)y / 1023f * 2f - 1f;\n\t\t\tquaternion.z = (float)z / 1023f * 2f - 1f;\n\t\t\tfloat len = quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z;\n\t\t\tfloat t = Mathf.Sqrt(1f - len);\n\t\t\tif (float.IsNaN(t))\n\t\t\t\tt = 0f;\n\t\t\tquaternion.w = t;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tquaternion.w = (float)x / 1023f * 2f - 1f;\n\t\t\tquaternion.x = 1f;\n\t\t\tquaternion.y = (float)y / 1023f * 2f - 1f;\n\t\t\tquaternion.z = (float)z / 1023f * 2f - 1f;\n\t\t\tlen = quaternion.w * quaternion.w + quaternion.y * quaternion.y + quaternion.z * quaternion.z;\n\t\t\tt = Mathf.Sqrt(1f - len);\n\t\t\tif (float.IsNaN(t))\n\t\t\t\tt = 0f;\n\t\t\tquaternion.x = t;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tquaternion.w = (float)x / 1023f * 2f - 1f;\n\t\t\tquaternion.x = (float)y / 1023f * 2f - 1f;\n\t\t\tquaternion.y = 1f;\n\t\t\tquaternion.z = (float)z / ", "CodeBleu_score": 24.26966735514959}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\t//Generate binding code by analysis\n\tvar domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n\tusing (FileStream fs = new FileStream(Application.dataPath + \"/ILRuntime/Game.dll\", FileMode.Open, FileAccess.Read)) {\n\t\tdomain.LoadAssembly(fs);\n\t\t//Crossbind Adapter is needed to generate the correct binding code\n\t\tILRuntime.Runtime.Generated.CLRBindings.Initialize(domain);\n\t}\n\t//Generate binding code\n\tstring outputPath = Application.dataPath + \"/ILRuntime/Generated\";\n\tif (!Directory.Exists(outputPath))\n\t\tDirectory.CreateDirectory(outputPath);\n\tILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(domain, outputPath);\n\tAssetDatabase.Refresh();\n}", "CodeBleu_score": 33.52388718782614}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\t//Generate binding code\n\tGenerateCLRBindingByAnalysis(Application.dataPath + \"/ILRuntime/Generated\");\n}", "CodeBleu_score": 5.967322189149523}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\t//Creates a new AppDomain and loads the specified assembly into it\n\tAppDomain appDomain = new AppDomain();\n\tAssembly ass = appDomain.LoadAssembly(Application.dataPath + \"/ILRuntime/Generated/Assembly-CSharp.dll\", null, new Mono.Cecil.Pdb.PdbReaderProvider());\n\tInitializeILRuntime(appDomain);\n\t//Generates binding code for the loaded assembly\n\tBindingCodeGenerator.GenerateBindingCode(ass, Application.dataPath + \"/ILRuntime/Generated\");\n\t//Refreshes the AssetDatabase\n\tAssetDatabase.Refresh();\n}", "CodeBleu_score": 24.895196330897136}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigHelperInfo\"), true);\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && serializedObject.targetObject.IsPrefabInHierarchy());\n\tif (Application.isPlaying && serializedObject.targetObject.IsPrefabInHierarchy()) {\n\t\tEditorGUILayout.LabelField(\"Config Count: \" + m_ConfigHelperInfo.Count.ToString());\n\t\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + m_ConfigHelperInfo.CachedBytesSize.ToString());\n\t}\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigHelper\"));\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 49.03934808084613}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(m_ConfigHelperInfo);\n\tEditorGUILayout.PropertyField(m_ConfigHelperInfo.FindPropertyRelative(\"m_ConfigHelper\"));\n\tEditorGUILayout.PropertyField(m_ConfigHelperInfo.FindPropertyRelative(\"m_ConfigHelper.m_Config\"));\n\tif (Application.isPlaying && m_ConfigHelperInfo.FindPropertyRelative(\"m_ConfigHelper.m_Config\").objectReferenceValue!= null) {\n\t\tvar t = (m_ConfigHelperInfo.FindPropertyRelative(\"m_ConfigHelper.m_Config\").objectReferenceValue as Config).GetRuntimeData();\n\t\tEditorGUI.BeginDisabledGroup(true);\n\t\tEditorGUILayout.LabelField(\"Config count: \" + t.Count.ToString());\n\t\tEditorGUILayout.LabelField(\"Cached bytes size: \" + t.CachedBytesSize.ToString());\n\t\tEditorGUI.EndDisabledGroup();\n\t}\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 55.327838949134}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigHelperInfo\"));\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && serializedObject.targetObject is GameObject && ((GameObject)serializedObject.targetObject).GetComponentInParent<ConfigComponent>()!= null);\n\tif (Application.isPlaying && serializedObject.targetObject is GameObject && ((GameObject)serializedObject.targetObject).GetComponentInParent<ConfigComponent>() == null) {\n\t\tvar t = ((GameObject)serializedObject.targetObject).GetComponent<ConfigComponent>();\n\t\tEditorGUILayout.LabelField(\"Config Count: \" + t.Count.ToString());\n\t\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + t.CachedBytesSize.ToString());\n\t}\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 49.12286828117898}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultSceneNames = new HashSet<string>();\n\tdefaultSceneNames.Add(\"Assets/Scenes/Main.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/Menu.unity\");\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tscenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Default scenes set.\");\n}", "CodeBleu_score": 66.39189289351626}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultScenes = new HashSet<string>() {\n\t\t\"Assets/Scenes/Scene0.unity\",\n\t\t\"Assets/Scenes/Scene1.unity\",\n\t\t\"Assets/Scenes/Scene2.unity\",\n\t\t\"Assets/Scenes/Scene3.unity\",\n\t\t\"Assets/Scenes/Scene4.unity\",\n\t\t\"Assets/Scenes/Scene5.unity\",\n\t\t\"Assets/Scenes/Scene6.unity\",\n\t\t\"Assets/Scenes/Scene7.unity\",\n\t\t\"Assets/Scenes/Scene8.unity\",\n\t\t\"Assets/Scenes/Scene9.unity\",\n\t\t\"Assets/Scenes/Scene10.unity\",\n\t\t\"Assets/Scenes/Scene11.unity\",\n\t\t\"Assets/Scenes/Scene12.unity\",\n\t\t\"Assets/Scenes/Scene13.unity\",\n\t\t\"Assets/Scenes/Scene14.unity\",\n\t\t\"Assets/Scenes/Scene15.unity\",\n\t\t\"Assets/Scenes/Scene16.unity\",\n\t\t\"Assets/Scenes/Scene17.unity\",\n\t\t\"Assets/Scenes/Scene18.unity\",\n\t\t\"Assets/Scenes/Scene19.unity\",\n\t\t\"Assets/Scenes/Scene20.unity\",\n\t\t\"Assets/Scenes/Scene21.unity\",\n\t\t\"Assets/Scenes/Scene22.unity\",\n\t\t\"Assets/Scenes/Scene23.unity\",\n\t\t\"Assets/Scenes/Scene24.unity\",\n\t\t\"Assets/Scenes/Scene25.unity\",\n\t\t\"Assets/Scenes/Scene26.unity\",\n\t\t\"Assets/Scenes/Scene27.unity\",\n\t\t\"Assets/Scenes/Scene28.unity\",\n\t\t\"Assets/Scenes/Scene29.unity\",\n\t\t\"Assets/Scenes/Scene30.unity\",\n\t\t\"Assets/Scenes/Scene31.unity\",\n\t\t\"Assets/Scenes/Scene32.unity\",\n\t\t\"Assets/Scenes/Scene33.unity\",\n\t\t\"Assets/Scenes/Scene34.unity\",\n\t\t\"Assets/Scenes/Scene35.unity\",\n\t\t\"", "CodeBleu_score": 10.699509478671457}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultScenes = new HashSet<string>();\n\tdefaultScenes.Add(\"Assets/Scenes/Splash.unity\");\n\tdefaultScenes.Add(\"Assets/Scenes/Menu.unity\");\n\tdefaultScenes.Add(\"Assets/Scenes/Game.unity\");\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultScenes) {\n\t\tscenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 65.71620749838549}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\t// Display a popup menu for selecting a helper type\n\tint selectedIndex = EditorGUILayout.Popup(\"Helper Type\", _selectedIndex, _helperNames);\n\n\t// Update the selected index if it has changed\n\tif (selectedIndex!= _selectedIndex) {\n\t\t_selectedIndex = selectedIndex;\n\t\t_helper = null;\n\t}\n\n\t// If no helper type is selected, display a field for a custom helper and show an error message if the custom helper is not set\n\tif (_selectedIndex == 0) {\n\t\t_helper = EditorGUILayout.ObjectField(\"Custom Helper\", _helper, typeof(Helper), true) as Helper;\n\t\tif (_helper == null) {\n\t\t\tEditorGUILayout.HelpBox(\"Please select a custom helper.\", MessageType.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.413872879445584}, {"code": "public void Draw(){\n\t\tEditorGUILayout.BeginVertical();\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.LabelField(new GUIContent(\"Helper Type\", \"The type of helper to use for this field. Select Custom to use a custom helper class.\"));\n\tEditorGUILayout.EndHorizontal();\n\tEditorGUILayout.BeginHorizontal();\n\tm_selectedHelperIndex = EditorGUILayout.Popup(m_selectedHelperIndex, m_helperNames);\n\tEditorGUILayout.EndHorizontal();\n\tif (m_selectedHelperIndex == m_helperNames.Length - 1) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(new GUIContent(\"Custom Helper\", \"The custom helper to use for this field.\"));\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tm_customHelper = EditorGUILayout.ObjectField(m_customHelper, typeof(Helper), true) as Helper;\n\t\tEditorGUILayout.EndHorizontal();\n\t\tif (m_customHelper == null) {\n\t\t\tEditorGUILayout.HelpBox(\"Custom helper must be set.\", MessageType.Error);\n\t\t}\n\t}\n\tEditorGUILayout.EndVertical();\n}", "CodeBleu_score": 35.37429148700375}, {"code": "public void Draw(){\n\t\t// Get the current helper type from the serialized property\n\tSerializedProperty helperTypeProperty = serializedObject.FindProperty(\"m_HelperType\");\n\tint helperTypeIndex = helperTypeProperty.enumValueIndex;\n\n\t// If the helper type is not set, show a field for a custom helper\n\tif (helperTypeIndex == 0) {\n\t\t// Get the custom helper property\n\t\tSerializedProperty customHelperProperty = serializedObject.FindProperty(\"m_CustomHelper\");\n\n\t\t// If the custom helper is not set, show an error message\n\t\tif (customHelperProperty.objectReferenceValue == null) {\n\t\t\tEditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n\t\t}\n\n\t\t// Show the custom helper field\n\t\tEditorGUILayout.PropertyField(customHelperProperty);\n\t}\n\telse {\n\t\t// Get the helper type names\n\t\tstring[] helperTypeNames = Enum.GetNames(typeof(HelperType));\n\n\t\t// Show the helper type popup\n\t\thelperTypeIndex = EditorGUILayout.Popup(\"Helper Type\", helperTypeIndex, helperTypeNames);\n\n\t\t// Update the helper type property\n\t\thelperTypeProperty.enumValueIndex = helperTypeIndex;\n\t}\n\n\t// Apply the changes to the serialized property\n\tserializedObject.ApplyModifiedProperties();\n}", "CodeBleu_score": 37.64562269607228}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\tRemoveScriptingDefineSymbol(Logging.LOG_GENERAL);\n\tfor (int i = 0; i < Logging.LOG_LEVELS.Length; i++) {\n\t\tRemoveScriptingDefineSymbol(Logging.LOG_LEVELS[i]);\n\t}\n}", "CodeBleu_score": 26.029173700718843}, {"code": "public static void DisableAllLogs(){\n\t\tRemoveScriptingDefineSymbol(LOG_GENERAL_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_ERROR_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_WARNING_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_INFO_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_DEBUG_SYMBOL);\n}", "CodeBleu_score": 21.788296305616633}, {"code": "public static void DisableAllLogs(){\n\t\tRemoveScriptingDefineSymbol(LOG_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_WARNING_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_ERROR_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_EXCEPTION_SYMBOL);\n\tRemoveScriptingDefineSymbol(LOG_ASSERT_SYMBOL);\n}", "CodeBleu_score": 21.756089517356276}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tfor (LinkedListNode<GameFrameworkComponent> current = components.First; current!= null; current = current.Next) {\n\t\tif (current.Value.GetType() == type) {\n\t\t\treturn current.Value;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 52.47209418239517}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tif (type == null) {\n\t\treturn null;\n\t}\n\tforeach (GameFrameworkComponent component in GameFrameworkComponent.current) {\n\t\tif (component.GetType() == type) {\n\t\t\treturn component;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 31.12444405600459}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent current = _components;\n\twhile (current!= null) {\n\t\tif (current.GetType == type)\n\t\t\treturn current;\n\t\tcurrent = current.next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 44.08438875357055}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"Shutting down the game framework...\");\n\tif (s_BaseComponent!= null) {\n\t\ts_BaseComponent.Shutdown();\n\t}\n\ts_GameFrameworkComponents.Clear();\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t\tcase ShutdownType.None:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new ArgumentOutOfRangeException(\"shutdownType\");\n\t}\n}", "CodeBleu_score": 23.83341554990877}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"Shutting down the game framework...\");\n\tif (s_GameFrameworkComponents.Count > 0) {\n\t\tBaseComponent baseComponent = s_GameFrameworkComponents[0] as BaseComponent;\n\t\tif (baseComponent!= null) {\n\t\t\tbaseComponent.Shutdown();\n\t\t}\n\t}\n\ts_GameFrameworkComponents.Clear();\n\tswitch (shutdownType) {\n\tcase ShutdownType.Restart:\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t\tbreak;\n\tcase ShutdownType.Quit:\n\t\tApplication.Quit();\n\t\tbreak;\n\tcase ShutdownType.None:\n\t\tbreak;\n\t}\n}", "CodeBleu_score": 26.892248895380256}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"Shutdown\");\n\n\tif (s_BaseComponent!= null) {\n\t\ts_BaseComponent.Shutdown();\n\t}\n\n\ts_GameFrameworkComponents.Clear();\n\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t\tcase ShutdownType.None:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new ArgumentOutOfRangeException(\"shutdownType\", shutdownType, null);\n\t}\n}", "CodeBleu_score": 24.654682470955684}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"Config manager is invalid.\");\n\t\treturn;\n\t}\n\tm_ConfigManager.ReadConfigSuccess += OnReadConfigSuccess;\n\tm_ConfigManager.ReadConfigFailure += OnReadConfigFailure;\n\tif (m_NeedUpdate) {\n\t\tm_ConfigManager.ConfigUpdateSuccess += OnConfigUpdateSuccess;\n\t\tm_ConfigManager.ConfigUpdateFailure += OnConfigUpdateFailure;\n\t}\n\tif (m_NeedDependency) {\n\t\tm_ConfigManager.ConfigDependencyAssetEvent += OnConfigDependencyAssetEvent;\n\t}\n}", "CodeBleu_score": 76.39455374465403}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tif (GameFrameworkEntry.GetModule<IConfigManager>() == null) {\n\t\tLog.Fatal(\"ConfigManager is invalid.\");\n\t\treturn;\n\t}\n\tGameFrameworkEntry.GetModule<IConfigManager>().ReadConfigSuccess += OnReadConfigSuccess;\n\tGameFrameworkEntry.GetModule<IConfigManager>().ReadConfigFailure += OnReadConfigFailure;\n\tif (m_NeedUpdate) {\n\t\tGameFrameworkEntry.GetModule<IConfigManager>().ConfigUpdateSuccess += OnConfigUpdateSuccess;\n\t\tGameFrameworkEntry.GetModule<IConfigManager>().ConfigUpdateFailure += OnConfigUpdateFailure;\n\t}\n\tif (m_NeedDependency) {\n\t\tGameFrameworkEntry.GetModule<IConfigManager>().ConfigDependencyAsset += OnConfigDependencyAsset;\n\t}\n}", "CodeBleu_score": 30.89826987360317}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"ConfigManager is invalid.\");\n\t\treturn;\n\t}\n\tm_ConfigManager.ReadConfigSuccess += OnReadConfigSuccess;\n\tm_ConfigManager.ReadConfigFailure += OnReadConfigFailure;\n\tif (m_LoadConfigUpdate) {\n\t\tm_ConfigManager.LoadConfigUpdate += OnLoadConfigUpdate;\n\t}\n\tif (m_LoadConfigDependencyAsset) {\n\t\tm_ConfigManager.LoadConfigDependencyAsset += OnLoadConfigDependencyAsset;\n\t}\n}", "CodeBleu_score": 75.54988642374613}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\t// If the config asset is a TextAsset, parse it as text.\n\tif (configAsset is TextAsset) {\n\t\treturn configManager.ParseData((TextAsset)configAsset, userData);\n\t}\n\n\t// If the config asset is a byte array, parse it as bytes.\n\tif (configAsset is byte[]) {\n\t\treturn configManager.ParseData((byte[])configAsset, userData);\n\t}\n\n\t// If the config asset is not a TextAsset or byte array, log a warning and return false.\n\tLog.Warning(this, \"Invalid config asset type: {0}\", configAsset.GetType().Name);\n\treturn false;\n}", "CodeBleu_score": 45.03589725196706}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\t// If the config asset is a TextAsset, parse the data as text\n\tif (configAsset is TextAsset) {\n\t\treturn configManager.ParseData((TextAsset)configAsset, userData);\n\t}\n\n\t// If the config asset is a byte array, parse the data as bytes\n\tif (configAsset is byte[]) {\n\t\treturn configManager.ParseData((byte[])configAsset, userData);\n\t}\n\n\t// If the config asset is invalid, log a warning and return false\n\tLog.Warning(this, \"Invalid config asset: {0}\", configAssetName);\n\treturn false;\n}", "CodeBleu_score": 46.28021282699019}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\t// If the asset is not a TextAsset, log a warning and return false\n\tif (!(configAsset is TextAsset)) {\n\t\tLog.Warning(\"Config asset is not a TextAsset. Asset name: \" + configAssetName);\n\t\treturn false;\n\t}\n\n\t// If the asset ends with a specific byte extension, parse the data as bytes\n\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\treturn configManager.ParseData((TextAsset)configAsset, userData);\n\t}\n\n\t// Otherwise, parse the data as text\n\treturn configManager.ParseData((TextAsset)configAsset, userData);\n}", "CodeBleu_score": 48.41895210434558}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configManager == null) {\n\t\tthrow new ArgumentNullException(\"configManager\");\n\t}\n\tif (configBytes == null) {\n\t\tthrow new ArgumentNullException(\"configBytes\");\n\t}\n\tif (startIndex < 0 || startIndex >= configBytes.Length) {\n\t\tthrow new ArgumentOutOfRangeException(\"startIndex\");\n\t}\n\tif (length < 0 || startIndex + length > configBytes.Length) {\n\t\tthrow new ArgumentOutOfRangeException(\"length\");\n\t}\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (memoryStream.Position < memoryStream.Length) {\n\t\t\t\t\tstring name = binaryReader.ReadString();\n\t\t\t\t\tstring value = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(name, value)) {\n\t\t\t\t\t\tLog.Warning(\"Failed to add config {0}={1}\", new object[]\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tcatch (Exception ex) {\n\t\tLog.Exception(ex);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 60.178115643647565}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configBytes == null || configManager == null) {\n\t\treturn false;\n\t}\n\tif (length <= 0) {\n\t\treturn false;\n\t}\n\tif (startIndex < 0 || startIndex >= configBytes.Length) {\n\t\treturn false;\n\t}\n\tif (startIndex + length > configBytes.Length) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Failed to add config entry: \" + configName + \"=\" + configValue);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tLog.Exception(ex);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 63.91757078135285}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configBytes == null) {\n\t\tLog.Warning(\"ParseData: configBytes is null\");\n\t\treturn false;\n\t}\n\tif (length < 0 || startIndex < 0 || startIndex + length > configBytes.Length) {\n\t\tLog.Warning(\"ParseData: invalid length/startIndex\");\n\t\treturn false;\n\t}\n\tif (configManager == null) {\n\t\tLog.Warning(\"ParseData: configManager is null\");\n\t\treturn false;\n\t}\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (memoryStream.Position < memoryStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"ParseData: failed to add config {0} with value {1}\", configName, configValue);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLog.Warning(\"ParseData: exception {0}\", e);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 66.66941508415788}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configManager == null)\n\t\treturn;\n\tif (configAsset == null)\n\t\treturn;\n\tif (m_ResourceComponent == null)\n\t\treturn;\n\tm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 43.27483188471477}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 71.88402467711936}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tconfigManager.m_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 47.95462607936928}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs t1 = ObjectPool.Instance.Acquire<ActiveSceneChangedEventArgs>();\nt1.LastActiveScene = lastActiveScene;\nt1.ActiveScene = activeScene;\nreturn t1;\n}", "CodeBleu_score": 37.875199715577416}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tvar t = __Pool.Acquire();\n t.lastActiveScene = lastActiveScene;\n t.activeScene = activeScene;\n return t;\n}", "CodeBleu_score": 25.660591326261496}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs t1 = Object.Instantiate<ActiveSceneChangedEventArgs>(ActiveSceneChangedEventArgs.PREFAB);\nt1.lastActiveScene = lastActiveScene;\nt1.activeScene = activeScene;\nreturn t1;\n}", "CodeBleu_score": 39.7112795714388}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name must end with '.unity'.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tLog.Error(\"Scene asset name must start with 'Assets/'.\");\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 54.662655117437474}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is null or empty.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\") ||!sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name is invalid. It must start with \\\"Assets/\\\" and end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 64.23755307490286}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"LoadScene: scene asset name is null or empty.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\") ||!sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"LoadScene: scene asset name '{0}' is not valid.\", sceneAssetName);\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 64.72827846061142}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\n\t// Get registered feature implementations\n\tTArray<IModularFeature*> Featues = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>();\n\n\t// Append enumerators for each feature implementation\n\tfor (auto& Feature : Featues) {\n\t\t// Get feature name\n\t\tFString FeatureName = Feature->GetFeatureName();\n\n\t\t// Append enumerators\n\t\tAppendEnumeraters<EBinariesPatchFeature>(FeatureName);\n\t}\n\n\t// Set up callbacks for when modular features are registered or unregistered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 59.79360455774837}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\t//IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t//IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\t//IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t//IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\t//IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t//IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t//IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t//IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t//IModularFeatures::Get().OnModularFeatureRegistered().AddSP(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t//IModularFeatures::Get().OnModularFeatureUnregistered().AddSP(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t//IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t//IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t//IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t//IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t//IModularFeatures::Get", "CodeBleu_score": 2.5123187516685794}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tTArray<IModularFeature*> Featues = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>();\n\tfor (auto& Featue : Featues)\n\t{\n\t\tFString FeatureName = Featue->GetFeatureName();\n\t\tif (FeatureName.IsEmpty())\n\t\t{\n\t\t\tUE_LOG(LogHotPatcher, Warning, TEXT(\"FeatureName is empty!\"));\n\t\t\tcontinue;\n\t\t}\n\t\tEBinariesPatchFeature FeatureEnum = EBinariesPatchFeature::FromString(FeatureName);\n\t\tif (FeatureEnum!= EBinariesPatchFeature::Invalid)\n\t\t{\n\t\t\tUE_LOG(LogHotPatcher, Warning, TEXT(\"FeatureName(%s) already exist!\"), *FeatureName);\n\t\t\tcontinue;\n\t\t}\n\t\tEBinariesPatchFeature::AddStringMapping(FeatureName, FeatureName);\n\t\tEBinariesPatchFeature::AddNameMapping(FeatureName, FeatureName);\n\t}\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 52.34903981313855}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString CommandLineString = Commandline;\n\tFString TokenString = Token;\n\tCommandLineString.TrimStartAndEndInline();\n\tTokenString.TrimStartAndEndInline();\n\tTMap<FString, FString> CommandLineParamsMap = FCommandLine::GetParamsMap(CommandLineString);\n\tif (CommandLineParamsMap.Contains(TokenString))\n\t{\n\t\tFString Value = CommandLineParamsMap[TokenString];\n\t\tValue.ParseIntoArray(Result, TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 52.73067357747436}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString CommandlineStr = Commandline;\n\tTMap<FString, FString> CommandLineParamsMap = FHTHotPatcherTemplateHelper::GetCommandLineParamsMap(CommandlineStr);\n\tif (CommandLineParamsMap.Contains(Token))\n\t{\n\t\tFString ValueStr = CommandLineParamsMap[Token];\n\t\tValueStr.ParseIntoArray(Result, TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 56.802040188154336}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString, FString> KeyValues;\n\tFString::ParseIntoArray(KeyValues, *Commandline, TEXT(\" \"), true);\n\tif (KeyValues.Contains(Token)) {\n\t\tKeyValues[Token].ParseIntoArray(Result, TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 56.96538659468917}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tif (!IsRunningCommandlet()) {\n\t\treturn false;\n\t}\n\n\tFString CommandletName = GetCommandletName();\n\tif (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 26.88377703962317}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\t// Get the current commandlet name\n\tFString commandletName = GetCommandletName();\n\t// Check if the commandlet name is empty or not\n\tif (!commandletName.IsEmpty()) {\n\t\t// Check if the commandlet name matches \"cook\" (case-insensitive)\n\t\tif (commandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n\t\t\t// Return true if the commandlet name matches \"cook\"\n\t\t\treturn true;\n\t\t}\n\t}\n\t// Return false if the commandlet name is empty or doesn't match \"cook\"\n\treturn false;\n}", "CodeBleu_score": 25.112926401929485}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tif (!CommandletHelper::IsRunningCommandlet()) {\n\t\treturn false;\n\t}\n\n\tFString CommandletName = CommandletHelper::GetCommandletArg();\n\n\tif (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 29.281139045940773}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName = FCommandLine::Get();\n\tif (GetDefault<UHotPatcherSettings>()->bEnableServerlessCount) {\n\t\tCounter = MakeShareable(new FCountServerlessWrapper());\n\t\tCounter->Init(\n\t\t\tFCountServerlessWrapper::MakeServerRequestInfo(\n\t\t\t\tGetDefault<UHotPatcherSettings>()->ServerlessCountServer,\n\t\t\t\tGetDefault<UHotPatcherSettings>()->ServerlessCountToken,\n\t\t\t\tGetDefault<UHotPatcherSettings>()->ServerlessCountProject\n\t\t\t),\n\t\t\tGetDefault<UHotPatcherSettings>()->ServerlessCountProject + CommandletName\n\t\t);\n\t\tCounter->Process();\n\t}\n}", "CodeBleu_score": 33.37035761427379}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CmdName = FCommandLine::Get();\n\tif (GetDefault<UHotPatcherSettings>()->bEnableServerlessCount) {\n\t\tFCountServerlessWrapper Counter;\n\t\tCounter.Init(CmdName);\n\t\tCounter.Process();\n\t}\n}", "CodeBleu_score": 18.738128503928802}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\t// Get the commandlet name from the command line.\n\tFString CommandletName = FCommandLine::Get();\n\n\t// Check if serverless counting is enabled in the settings.\n\tif (GetDefault<UHotPatcherSettings>()->bEnableServerlessCount) {\n\t\t// Initialize the counter with server request and project information.\n\t\tFCountServerlessWrapper Counter;\n\t\tCounter->Init(GetDefault<UHotPatcherSettings>()->ProjectName, CommandletName);\n\n\t\t// Process the counter.\n\t\tCounter->Process();\n\t}\n}", "CodeBleu_score": 24.560515255707568}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform) {\n\t\treturn TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.09416769239223}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\n\tFString PlatformName = TargetPlatform->PlatformName().ToString();\n\tPlatformName.ToUpperInline();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\")) || PlatformName.StartsWith(TEXT(\"MAC\")) || PlatformName.StartsWith(TEXT(\"TVOS\"));\n}", "CodeBleu_score": 33.246059741596376}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\tif (TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.94226265419265}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\t// Get the outermost package of the object.\n\tconst UPackage* Package = Object->GetOutermost();\n\t// If the package is valid.\n\tif (Package) {\n\t\t// If the package is not in CookerAssetsSet but is in AllAssetsSet and does not always require post-load processing.\n\t\tif (!CookerAssetsSet.Contains(Package) && AllAssetsSet.Contains(Package) &&!IsAlwayPostLoadClasses(Package)) {\n\t\t\t// Add the object to the PackageObjectsMap and FreezeObjects list.\n\t\t\tPackageObjectsMap.FindOrAdd(Package->GetPathName()).Add(const_cast<UObject*>(Object));\n\t\t\tFreezeObjects.Add(const_cast<UObject*>(Object));\n\t\t}\n\t\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object.\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 41.48546569304373}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object == nullptr) {\n\t\treturn;\n\t}\n\n\tif (Object->GetOutermost() == nullptr) {\n\t\treturn;\n\t}\n\n\tconst UObject* ObjectOuter = Object->GetOutermost();\n\tif (ObjectOuter->IsAsset()) {\n\t\tif (ObjectOuter->IsA(UClass::StaticClass())) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_None) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_PendingKill) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptGeneratedClass) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultActor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultEngine) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultInput) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultPhysics) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultSound) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultTexture) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultUI) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultLightmass) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultGame) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultEditorSettings) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultEditorKeyBindings) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter->GetFName() == NAME_ScriptDefaultEditorLayout) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (ObjectOuter", "CodeBleu_score": 25.432633509519174}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object) {\n\t\tconst UObject* ObjectOuter = Object->GetOuter();\n\t\tif (ObjectOuter) {\n\t\t\tconst UPackage* Package = ObjectOuter->GetOutermost();\n\t\t\tif (Package) {\n\t\t\t\tFName PackageName = Package->GetFName();\n\t\t\t\tif (!CookerAssetsSet.Contains(PackageName) && AllAssetsSet.Contains(PackageName) &&!IsAlwayPostLoadClasses(Package)) {\n\t\t\t\t\tPackageObjectsMap.FindOrAdd(Package->GetPathName()).Add(const_cast<UObject*>(Object));\n\t\t\t\t\tFreezeObjects.Add(const_cast<UObject*>(Object));\n\t\t\t\t\tstatic_cast<const UObject*>(Object)->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.537813961173306}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFHotPatcherLog::Log(FString::Printf(TEXT(\"CollectForSaveBulkData %s\"), *Record.Name));\n\tFHotPatcherPackageWriter* Writer = this;\n\tFHotPatcherPackageWriter::FCollectForSaveBulkDataHelper Helper(Writer, Record, Context);\n\tfor (auto& BulkRecord : Record.BulkRecords)\n\t{\n\t\tif (BulkRecord.Info.Type == EBulkDataType::Exports)\n\t\t{\n\t\t\tHelper.ProcessExports(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::Texture2D)\n\t\t{\n\t\t\tHelper.ProcessTexture2D(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::Material)\n\t\t{\n\t\t\tHelper.ProcessMaterial(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::SkeletalMesh)\n\t\t{\n\t\t\tHelper.ProcessSkeletalMesh(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::StaticMesh)\n\t\t{\n\t\t\tHelper.ProcessStaticMesh(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::SoundWave)\n\t\t{\n\t\t\tHelper.ProcessSoundWave(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::Font)\n\t\t{\n\t\t\tHelper.ProcessFont(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::TextureCube)\n\t\t{\n\t\t\tHelper.ProcessTextureCube(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::Texture)\n\t\t{\n\t\t\tHelper.ProcessTexture(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::TextureRenderTarget2D)\n\t\t{\n\t\t\tHelper.ProcessTextureRenderTarget2D(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::TextureRenderTargetCube)\n\t\t{\n\t\t\tHelper.ProcessTextureRenderTargetCube(BulkRecord);\n\t\t}\n\t\telse if (BulkRecord.Info.Type == EBulkDataType::TextureLightProfile)\n\t\t{\n\t\t\tHelper.Process", "CodeBleu_score": 32.87858786082396}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t// Iterate through each bulk data record and check the bulk data type\n\tfor (FRecord::FBulkDataRecord& BulkRecord : Record.BulkDataRecords)\n\t{\n\t\tswitch (BulkRecord.Info.Type)\n\t\t{\n\t\tcase FRecord::FBulkDataRecord::EType::AppendedToExports:\n\t\t\t// For bulk data appended to exports, add the export buffer to the corresponding export buffer list in the context\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Buffer);\n\t\t\tbreak;\n\t\tcase FRecord::FBulkDataRecord::EType::Sidecar:\n\t\t\t// For sidecar bulk data, create an output file entry in the context's output files\n\t\t\tFCompositeBuffer& CompositeBuffer = Context.OutputFiles.Emplace_GetRef();\n\t\t\tCompositeBuffer.Add(BulkRecord.Buffer);\n\t\t\tCompositeBuffer.SetBulkDataInfo(BulkRecord.Info);\n\t\t\tCompositeBuffer.SetBulkDataHash(BulkRecord.Hash);\n\t\t\tbreak;\n\t\tcase FRecord::FBulkDataRecord::EType::Inlined:\n\t\t\t// For inlined bulk data, create an output file entry in the context's output files\n\t\t\tFCompositeBuffer& CompositeBuffer = Context.OutputFiles.Emplace_GetRef();\n\t\t\tCompositeBuffer.Add(BulkRecord.Buffer);\n\t\t\tCompositeBuffer.SetBulkDataInfo(BulkRecord.Info);\n\t\t\tCompositeBuffer.SetBulkDataHash(BulkRecord.Hash);\n\t\t\tbreak;\n\t\tcase FRecord::FBulkDataRecord::EType::External:\n\t\t\t// For external bulk data, create an output file entry in the context's output files\n\t\t\tFCompositeBuffer& CompositeBuffer = Context.OutputFiles.Emplace_GetRef();\n\t\t\tCompositeBuffer.SetBulkDataInfo(BulkRecord.Info);\n\t\t\tCompositeBuffer.SetBulkDataHash(BulkRecord.Hash);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 41.45735747082022}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n\tFHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record", "CodeBleu_score": 22.22674454323635}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bExportArchiveCompleted)\n\t{\n\t\treturn;\n\t}\n\n\t// Create a footer buffer with the package file tag.\n\tFSharedBuffer FooterBuffer = MakeShared<FBuffer>();\n\tFooterBuffer->Add(Record.PackageFileTag);\n\n\t// Add the footer buffer to each package's export buffers in the context.\n\tfor (const FPackageContext& Package : Context.Packages)\n\t{\n\t\tPackage.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FooterBuffer);\n\t}\n\n\tContext.bExportArchiveCompleted = true;\n}", "CodeBleu_score": 48.382765930325974}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.bDiffCompleted) {\n\t\treturn;\n\t}\n\n\tTArray<FFileRegion> FooterRegions;\n\tFooterRegions.Add(FFileRegion(FFileRegion::EType::FileTag, Package.Info.FileTag));\n\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FooterRegions);\n}", "CodeBleu_score": 45.590350866330475}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bExportArchiveCompleted)\n\t{\n\t\treturn;\n\t}\n\t// Create the footer buffer.\n\tFSharedBuffer FooterBuffer = MakeShared<FBuffer>();\n\tFooterBuffer->Add(PackageFileTag);\n\t// Add the footer buffer to each package's export buffers in the context.\n\tfor (auto& Package : Context.Packages)\n\t{\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FooterBuffer);\n\t}\n\tContext.bExportArchiveCompleted = true;\n}", "CodeBleu_score": 43.18939049102093}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tGDCharacterMovementComponent->SetSprintRequest(SprintRequest);\n\t\tGDCharacterMovementComponent->SetAimDownSightsRequest(AimDownSightsRequest);\n\t}\n}", "CodeBleu_score": 69.15824107965078}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tGDCharacterMovementComponent->SavedMove_SprintRequest = GDCharacterMovementComponent->SprintRequest;\n\t\tGDCharacterMovementComponent->SavedMove_AimDownSightsRequest = GDCharacterMovementComponent->AimDownSightsRequest;\n\t}\n}", "CodeBleu_score": 66.97102652483179}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent * Movement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (Movement) {\n\t\tMovement->bSavedWantsToRun = bSavedWantsToRun;\n\t\tMovement->bSavedWantsToAimDownSights = bSavedWantsToAimDownSights;\n\t}\n}", "CodeBleu_score": 66.81729420615599}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\t// Validate the ability system component and attribute\n\tif (!IsValid(AbilitySystemComponent) ||!Attribute.IsValid()) {\n\t\t// Remove the task from the root and return null\n\t\tRemoveFromRoot();\n\t\treturn nullptr;\n\t}\n\n\t// Create a new task and initialize it with the ability system component and attribute\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Init(AbilitySystemComponent, Attribute);\n\n\t// Add a delegate to handle attribute value changes\n\tAbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(Task, &UAsyncTaskAttributeChanged::OnAttributeValueChanged);\n\n\t// Return the task\n\treturn Task;\n}", "CodeBleu_score": 54.70416313039431}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!IsValid(AbilitySystemComponent) ||!Attribute.IsValid()) {\n\t\t// Remove the task from the root and return null if either the ability system component or attribute is invalid.\n\t\tRemoveFromRoot();\n\t\treturn nullptr;\n\t}\n\n\t// Add a delegate to handle attribute value changes.\n\tAbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(this, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\n\treturn this;\n}", "CodeBleu_score": 36.2619354269552}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!IsValid(AbilitySystemComponent)) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ListenForAttributeChange: Invalid AbilitySystemComponent\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!Attribute.IsValid()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ListenForAttributeChange: Invalid Attribute\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* WaitForAttributeChangedTask = NewObject<UAsyncTaskAttributeChanged>();\n\tWaitForAttributeChangedTask->AddToRoot();\n\tWaitForAttributeChangedTask->Attribute = Attribute;\n\tWaitForAttributeChangedTask->AbilitySystemComponent = AbilitySystemComponent;\n\tAbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(WaitForAttributeChangedTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\n\treturn WaitForAttributeChangedTask;\n}", "CodeBleu_score": 62.71159737397368}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\tMarkAsGarbage();\n\t}\n\tSetReadyToDestroy();\n}", "CodeBleu_score": 43.75808095299503}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\tMarkAsGarbage();\n}", "CodeBleu_score": 42.23276920066876}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\tIsValid = false;\n\t\tSetReadyToDestroy();\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 37.553557767278924}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags = EffectRemoved.Spec.GetAllAssetTags();\n\tFGameplayTagContainer GrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EEffectStackChange::Removed);\n\t}\n\n\tif (GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EEffectStackChange::Removed);\n\t}\n}", "CodeBleu_score": 52.419768715465466}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.GetAllGrantedTags().HasTagExact(EffectGameplayTag)) {\n\t\tEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - 1);\n\t}\n\tif (EffectRemoved.Spec.GetAllAssetTags().HasTagExact(EffectGameplayTag)) {\n\t\tEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - 1);\n\t}\n}", "CodeBleu_score": 44.82747554735818}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tconst UGameplayEffect* Effect = EffectRemoved.Spec.Def;\n\n\tif (Effect->AssetTags.HasTagExact(EffectGameplayTag)) {\n\t\tEffectStackChangedEvent.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0);\n\t}\n\n\tif (Effect->GetAllGrantedTags().HasTagExact(EffectGameplayTag)) {\n\t\tEffectStackChangedEvent.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0);\n\t}\n}", "CodeBleu_score": 53.38832409926921}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged *AsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\tAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\tAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\tif (AsyncTaskEffectStackChanged->AbilitySystemComponent.IsValid() && AsyncTaskEffectStackChanged->EffectGameplayTag.IsValid()) {\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent->OnAnyGameplayEffectAddedDelegateToSelf.AddUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate.AddUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\t\treturn AsyncTaskEffectStackChanged;\n\t}\n\tAsyncTaskEffectStackChanged->EndTask();\n\treturn nullptr;\n}", "CodeBleu_score": 52.965075175401836}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged *AsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\tAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\tAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\n\tif (AsyncTaskEffectStackChanged->AbilitySystemComponent.IsValid() && AsyncTaskEffectStackChanged->EffectGameplayTag.IsValid()) {\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectRemoved);\n\t} else {\n\t\tAsyncTaskEffectStackChanged->EndTask();\n\t\treturn nullptr;\n\t}\n\n\treturn AsyncTaskEffectStackChanged;\n}", "CodeBleu_score": 53.39210617276221}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (IsValid(AbilitySystemComponent) && InEffectGameplayTag.IsValid()) {\n\t\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\t\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\t\tTask->EffectGameplayTag = InEffectGameplayTag;\n\t\tTask->AbilitySystemComponent->OnAnyGameplayEffectAddedDelegateToSelf.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\t\tTask->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(Task, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectRemoved);\n\t\treturn Task;\n\t}\n\tEndTask();\n\treturn nullptr;\n}", "CodeBleu_score": 53.28117870906334}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// If the removed effect has the specified tag, broadcast a stack change event.\n\tif (EffectRemoved.Spec.GetAllGrantedTags().HasTagExact(EffectGameplayTag)) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Effect Removed with tag %s\"), *EffectGameplayTag.ToString());\n\t\tOnEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EGameplayEffectStackChangeType::Removed);\n\t}\n\t// If the removed effect has the specified tag, broadcast a stack change event.\n\tif (EffectRemoved.Spec.GetAllAssetTags().HasTagExact(EffectGameplayTag)) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Effect Removed with tag %s\"), *EffectGameplayTag.ToString());\n\t\tOnEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EGameplayEffectStackChangeType::Removed);\n\t}\n}", "CodeBleu_score": 45.432285225893686}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.GetAssetTags().HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0);\n\t}\n\tif (EffectRemoved.Spec.GetAllGrantedTags().HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0);\n\t}\n}", "CodeBleu_score": 48.235314116751674}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.GetAllGrantedTags().HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, FGameplayEffectStackChangeDetails(EffectRemoved.Spec.GetStackCount(), 0));\n\t}\n\tif (EffectRemoved.Spec.GetAllAssetTags().HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, FGameplayEffectStackChangeDetails(EffectRemoved.Spec.GetStackCount(), 0));\n\t}\n}", "CodeBleu_score": 49.05151720147292}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (bActivateAbilityOnGranted) {\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false, true);\n\t}\n}", "CodeBleu_score": 72.52111059450421}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (Spec.GetAbility()->GetActivateAbilityOnGranted()) {\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false, true);\n\t}\n}", "CodeBleu_score": 68.72178027948988}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ShouldActivateAbilityOnGranted()) {\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false, Spec.ActivationInfo.GetEffectCauser());\n\t}\n}", "CodeBleu_score": 67.07049397028565}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t}\n\tEndTask();\n}", "CodeBleu_score": 70.20856326502198}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t}\n\tEndTask();\n}", "CodeBleu_score": 70.20856326502198}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t}\n\tEndTask();\n}", "CodeBleu_score": 70.20856326502198}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopPlayingMontage) {\n\t\tAbilitySystemComponent->StopAnimationMontage(PlayMontageAndWaitForEvent);\n\t}\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, OnGameplayEvent, DelegateHandle);\n\t}\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 55.99001121307987}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopPlayingMontage) {\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\t\tAbilitySystemComponent->StopAnimationMontage(PlayMontageParams.AnimMontage);\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(\n\t\t\tAbilitySystemComponent->AbilityActorInfo->AbilitySpecHandle,\n\t\t\tAbilitySystemComponent->AbilityActorInfo->AbilitySpec->AbilityTags,\n\t\t\tOnGameplayEvent);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 53.08517309438275}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopPlayingMontage) {\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\t\tAbilitySystemComponent->GetAnimInstance()->Montage_Stop(0.0f, MontageToPlay);\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, FOnGameplayEvent::FDelegate::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnGameplayEvent, Ability));\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 55.06912124219422}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent && MontageInstance) {\n\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 24.342284822151928}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) {\n\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 20.7469953803573}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\tif (AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) {\n\t\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.011460072501457}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the AI controller and the target actor from the blackboard\n\tAAIController* MyController = OwnerComp.GetAIOwner();\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\n\t// Check if the target is within attack range\n\tif (TargetActor && MyController) {\n\t\tfloat DistanceToTarget = FVector::Distance(MyController->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\t\tif (DistanceToTarget <= MaxAttackRange) {\n\t\t\t// Check for line of sight to the target\n\t\t\tif (MyController->LineOfSightTo(TargetActor)) {\n\t\t\t\t// The target is within range and visible\n\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TargetInAttackRangeKey.SelectedKeyName, true);\n\t\t\t} else {\n\t\t\t\t// The target is within range but not visible\n\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TargetInAttackRangeKey.SelectedKeyName, false);\n\t\t\t}\n\t\t} else {\n\t\t\t// The target is not within range\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TargetInAttackRangeKey.SelectedKeyName, false);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.46108769297233}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard\n\tAAIController* MyController = OwnerComp.GetAIOwner();\n\tUBlackboardComponent* BlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tAActor* TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\n\t// Check if the target actor is valid\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\t// Calculate the distance to the target actor\n\tfloat DistanceToTarget = FVector::Distance(MyController->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\n\t// Check if the target is within range and visible\n\tbool bInRange = DistanceToTarget <= MaxAttackRange;\n\tbool bInLOS = MyController->LineOfSightTo(TargetActor);\n\n\t// Store the result in the blackboard\n\tBlackBoardComp->SetValueAsBool(TargetInRangeKey.SelectedKeyName, bInRange && bInLOS);\n}", "CodeBleu_score": 61.09652669109783}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\t//Get the target actor from the blackboard\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\n\t//If the target actor is valid, calculate the distance to the AI pawn\n\tif (TargetActor) {\n\t\t//Get the AI pawn from the controller\n\t\tAAIController* MyController = OwnerComp.GetAIOwner();\n\t\tif (MyController) {\n\t\t\t//Get the location of the AI pawn\n\t\t\tFVector MyLocation = MyController->GetPawn()->GetActorLocation();\n\n\t\t\t//Calculate the distance to the target actor\n\t\t\tfloat DistanceToTarget = FVector::Distance(MyLocation, TargetActor->GetActorLocation());\n\n\t\t\t//Check if the target is within the maximum attack range\n\t\t\tif (DistanceToTarget <= MaxAttackRange) {\n\t\t\t\t//Check for line of sight to the target\n\t\t\t\tif (MyController->LineOfSightTo(TargetActor)) {\n\t\t\t\t\t//The target is within range and visible, so set the blackboard value to true\n\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(IsInAttackRangeKey.SelectedKeyName, true);\n\t\t\t\t} else {\n\t\t\t\t\t//The target is within range but not visible, so set the blackboard value to false\n\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(IsInAttackRangeKey.SelectedKeyName, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//The target is not within range, so set the blackboard value to false\n\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(IsInAttackRangeKey.SelectedKeyName, false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.65042194352128}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAActor* OwnerActor = OwnerComp.GetAIOwner()->GetPawn();\n\tUAttributeComponent* AttributeComp = Cast<UAttributeComponent>(OwnerActor->GetComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComp) {\n\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 60.24169354997421}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t// Get the pawn from the AI owner\n\tAPawn* MyPawn = OwnerComp.GetAIOwner()->GetPawn();\n\t// Get the attribute component\n\tUSAttributeComponent* AttributeComp = MyPawn->FindComponentByClass<USAttributeComponent>();\n\t// If the attribute component is valid\n\tif (AttributeComp) {\n\t\t// Apply a health change to restore the pawn's health to maximum\n\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t}\n\t// Return a success result\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 71.84253162702237}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tif (APawn* MyPawn = OwnerComp.GetAIOwner()->GetPawn()) {\n\t\tif (UAttributeComponent* AttributeComp = MyPawn->FindComponentByClass<UAttributeComponent>()) {\n\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 57.596080021269}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (GetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this)) {\n\t\t//UE_LOG(LogTemp, Warning, TEXT(\"BeginPlay\"));\n\t}\n}", "CodeBleu_score": 40.76831143721317}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tif (USTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>()) {\n\t\tTickables->DeRegisterComponent(this);\n\t}\n}", "CodeBleu_score": 64.66801485570748}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeRegisterComponent(this);\n}", "CodeBleu_score": 81.971458108573}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (Tickables) {\n\t\tTickables->DeRegisterComponent(this);\n\t}\n}", "CodeBleu_score": 82.17109184581946}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tif (bManageSignificance) {\n\t\tif (GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t} else {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t}\n\t}\n\tSuper::BeginPlay();\n}", "CodeBleu_score": 41.33154913925604}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tif (bManageSignificance) {\n\t\tif (GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t} else {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t} else {\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"Significance Component on %s does not have a Significance Interface!\"), *GetOwner()->GetName());\n\t\t}\n\t}\n\tSuper::BeginPlay();\n\t// Manage particle significance\n\tfor (UParticleSystemComponent* Comp : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tif (Comp->bAutoManageAttachment) {\n\t\t\tComp->SetManagingSignificance(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 68.25590783023586}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManagingSignificance) {\n\t\tif (GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t} else {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t} else {\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"SignificanceComponent: Owner does not implement the SignificanceInterface. Significance management is disabled.\"));\n\t\t}\n\t}\n\n\tif (bManagingParticleSignificance) {\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\t\tParticleSystemComponent->SetManagingSignificance(bManagingParticleSignificance);\n\t\t}\n\t}\n}", "CodeBleu_score": 65.71393633315465}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Get the world and owner\n\tUWorld* World = GetWorld();\n\tAActor* Owner = GetOwner();\n\n\t// Get the significance manager from the world\n\tASSignificanceManager* SignificanceManager = World->GetSignificanceManager();\n\n\t// Define a lambda function for calculating significance\n\tTFunction<float()> CalculateSignificance = [this]() {\n\t\treturn CalcSignificance();\n\t};\n\n\t// Define a lambda function for handling post-significance updates\n\tTFunction<void()> PostSignificanceUpdate = [this]() {\n\t\tthis->OnPostSignificanceUpdate();\n\t};\n\n\t// Register the component with the manager\n\tSignificanceManager->RegisterObject(Owner->GetClass()->GetFName(), CalculateSignificance, PostSignificanceUpdate);\n}", "CodeBleu_score": 27.153100834062897}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Get the significance manager from the world\n\tASSignificanceManager* SignificanceManager = GetWorld()->GetSignificanceManager();\n\n\t// Define a lambda function for calculating significance\n\tTFunction<float()> CalcSignificance = [this]() {\n\t\t// Calculate significance based on the owner's distance from the player\n\t\treturn CalcSignificance();\n\t};\n\n\t// Define a lambda function for handling post-significance updates\n\tTFunction<void()> PostSignificanceUpdate = [this]() {\n\t\t// Perform any necessary actions after the significance is updated\n\t\tPostSignificanceUpdate();\n\t};\n\n\t// Register the component with the manager\n\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), CalcSignificance, PostSignificanceUpdate);\n}", "CodeBleu_score": 23.50736439882013}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Get the significance manager from the world\n\tASignificanceManager* SignificanceManager = GetWorld()->GetAuthGameMode()->GetSignificanceManager();\n\n\t// Define a lambda function for calculating significance\n\tSignificanceCalculator = [this]() {\n\t\treturn CalcSignificance();\n\t};\n\n\t// Define a lambda function for handling post-significance updates\n\tPostSignificanceUpdate = [this]() {\n\t\tOnPostSignificanceUpdate();\n\t};\n\n\t// Register the component with the manager using the owner's class name as the tag\n\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), SignificanceCalculator, PostSignificanceUpdate);\n}", "CodeBleu_score": 21.992663491089555}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USActorPoolingSubsystem::ReleaseToPool - Actor is null\"));\n\t\treturn false;\n\t}\n\n\tif (Actor->IsPoolingEnabled) {\n\t\treturn ReleaseToPool_Internal(Actor);\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 47.98887666378988}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT(USActorPoolingSubsystem_ReleaseToPool, FColor::Cyan);\n\n\tif (Actor->IsPoolingEnabled()) {\n\t\treturn GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool_Internal(Actor);\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 52.298182263320456}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tif (!Actor->IsPoolingEnabled()) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tSCOPED_NAMED_EVENT(USActorPoolingSubsystem_ReleaseToPool, FColor::Green);\n\n\treturn GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool_Internal(Actor);\n}", "CodeBleu_score": 57.08017211671312}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOGFMT(LogTemp, Log, TEXT(\"Priming actor pool for %s\"), *ActorClass->GetName());\n\tSCOPED_NAMED_EVENT(FColor::Green, TEXT(\"PrimeActorPool\"));\n\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseToPool(Actor);\n\t}\n}", "CodeBleu_score": 50.927712013718974}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOGFMT(LogActorPooling, Log, TEXT(\"Priming %s actor pool with %d actors\"), *ActorClass->GetName(), Amount);\n\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FVector::ZeroVector, FRotator::ZeroRotator);\n\t\tReleaseToPool(Actor);\n\t}\n}", "CodeBleu_score": 53.75197673843615}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOGFMT(LogTemp, Warning, TEXT(\"Priming actor pool for %s\"), *GetNameSafe(ActorClass));\n\tSCOPED_NAMED_EVENT(FColor::Red, TEXT(\"PrimeActorPool\"));\n\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FVector::ZeroVector, FRotator::ZeroRotator);\n\t\tReleaseToPool(Actor);\n\t}\n}", "CodeBleu_score": 54.075453822086}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Get the movie player\n\tFMoviePlayer* MoviePlayer = GetMoviePlayer();\n\n\t// Create a new loading screen widget\n\tUUserWidget* LoadingScreenWidget = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\n\t// Setup the loading screen\n\tMoviePlayer->SetupLoadingScreen(LoadingScreenWidget->TakeWidget());\n\n\t// Set the loading screen map name\n\tLoadingScreenMapName = MapName;\n\n\t// Set the loading screen state\n\tLoadingScreenState = ELoadingScreenState::Loading;\n}", "CodeBleu_score": 45.90343439765048}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new FLoadingScreenAttributes object\n\tFLoadingScreenAttributes LoadingScreen;\n\n\t// Assign a new loading screen widget to the FLoadingScreenAttributes object\n\tLoadingScreen.WidgetLoadingScreen = CreateWidget<UUserWidget>(GetWorld(), LoadingScreenWidgetClass);\n\n\t// Set up the loading screen using the movie player\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n\n\t// Begin the loading screen for the specified map\n\tGetMoviePlayer()->PlayMovie();\n}", "CodeBleu_score": 73.73934950230144}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\n\t// Assign a new loading screen widget to it\n\tLoadingScreenAttributes.WidgetLoadingScreen = CreateLoadingScreenWidget(MapName);\n\n\t// Set up the loading screen using the movie player\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 55.94963673132591}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOGFMT(LogGameplayAbilities, Log, TEXT(\"StartAction_Implementation for %s\"), *GetName());\n\n\tif (Instigator) {\n\t\tInstigator->GetGameplayTags().AppendTags(GrantedTags);\n\t}\n\n\t// Update replication data\n\tSetReplicates(true);\n\tSetIsReplicated(true);\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast event\n\tGetOwningComponent()->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 45.36316645691817}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOGFMT(LogTemp, Warning, TEXT(\"StartAction_Implementation\"));\n\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetWorld() %s\"), *GetWorld()->GetName());\n\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetName() %s\"), *GetName());\n\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetOwningComponent() %s\"), *GetOwningComponent()->GetName());\n\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetOwningComponent()->GetOwnerRole %d\"), GetOwningComponent()->GetOwnerRole());\n\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetOwningComponent()->OnActionStarted.Broadcast\"));\n\n\tGetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n\tGetOwningComponent()->SetReplicationData(GrantedTags);\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\tGetOwningComponent()->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 49.190951079383424}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOGFMT(LogAction, Log, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\n\t// Append granted tags to the owning component's active gameplay tags\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\n\t// Update replication data\n\tComp->SetReplicationData(Comp->ActiveGameplayTags, Comp->GrantedAbilities, Comp->GrantedAbilities.Num());\n\n\t// If the component's owner role is authoritative, record the start time\n\tif (Comp->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast an action started event from the owning component\n\tComp->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 36.38159459749574}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tconst AGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\tif (GS) {\n\t\treturn FMath::Max(0.f, Duration - GS->GetServerWorldTimeSeconds() + StartTime);\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 54.64849492560525}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld() == nullptr) {\n\t\treturn Duration;\n\t}\n\n\tconst AGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\tif (GS == nullptr) {\n\t\treturn Duration;\n\t}\n\n\tconst float ServerTime = GS->GetServerWorldTimeSeconds();\n\treturn FMath::Max(0.0f, Duration - (ServerTime - StartTime));\n}", "CodeBleu_score": 55.91690088829395}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()) {\n\t\tconst AGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\t\tif (GS) {\n\t\t\treturn FMath::Max(0.f, Duration - (GS->GetServerWorldTimeSeconds() - StartTime));\n\t\t}\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 60.14569455406876}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Focus is null.\"));\n\t}\n\telse {\n\t\tAPawn* Pawn = Cast<APawn>(GetOwner());\n\t\tif (Pawn) {\n\t\t\tInFocus->Execute_Interact(InFocus, Pawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.06786666223543}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"InteractionComponent::ServerInteract_Implementation: Focus is null.\"));\n\t\treturn;\n\t}\n\n\tAPawn* pawn = Cast<APawn>(GetOwner());\n\tif (pawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"InteractionComponent::ServerInteract_Implementation: Owner is not a pawn.\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(pawn);\n}", "CodeBleu_score": 57.290202794817816}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Invalid Focus Actor\"));\n\t\treturn;\n\t}\n\n\tAPawn* Pawn = GetOwner()->GetOwner<APawn>();\n\tif (Pawn == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Invalid Owner\"));\n\t\treturn;\n\t}\n\n\tInFocus->ISGameplayInterface::Execute_Interact(InFocus, Pawn);\n}", "CodeBleu_score": 60.18284594162272}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ApplyDamage: DamageCauser is null!\"));\n\t\treturn false;\n\t}\n\tif (TargetActor == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ApplyDamage: TargetActor is null!\"));\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* AttributeComp = Cast<UAttributeComponent>(TargetActor->GetComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComp == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ApplyDamage: TargetActor does not have an AttributeComponent!\"));\n\t\treturn false;\n\t}\n\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 47.37633122112559}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr || TargetActor == nullptr || DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* AttributeComp = Cast<UAttributeComponent>(TargetActor->GetComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComp!= nullptr) {\n\t\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 55.80946234954369}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser && TargetActor) {\n\t\tUAttributeComponent* AttributeComp = Cast<UAttributeComponent>(TargetActor->GetComponentByClass(UAttributeComponent::StaticClass()));\n\t\tif (AttributeComp) {\n\t\t\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 60.717692865134524}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tOnPersonalRecordTimeChanged.Broadcast(PersonalRecordTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.407343823651935}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tOnPersonalRecordTimeChanged.Broadcast(PersonalRecordTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.407343823651935}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tOnPersonalRecordTimeChanged.Broadcast(PersonalRecordTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.407343823651935}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\tUAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComp!= nullptr &&!AttributeComp->IsFullHealth()) {\n\t\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\t\tif (PS!= nullptr && PS->RemoveCredits(CreditCost)) {\n\t\t\tAttributeComp->ApplyHealthChange(HealthChange);\n\t\t\tHideAndCooldownPowerup();\n\t\t}\n\t}\n}", "CodeBleu_score": 52.966902093939126}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (!IsValid(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\t// Get the attribute component of the instigator pawn\n\tUAttributeComponent* AttributeComp = Cast<UAttributeComponent>(InstigatorPawn->GetComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComp &&!AttributeComp->IsFullHealth()) {\n\t\t// Get the player state of the instigator pawn\n\t\tASPlayerState* PS = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\t\tif (IsValid(PS)) {\n\t\t\t// Remove the required credits from the player state\n\t\t\tif (PS->RemoveCredits(CreditsCost)) {\n\t\t\t\t// Apply the health change to the pawn\n\t\t\t\tAttributeComp->ApplyHealthChange(HealthChange);\n\t\t\t\t// Trigger the power-up cooldown\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 60.9325061298732}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (!IsValid(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\t// Get the attribute component of the instigator pawn\n\tUAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (!IsValid(AttributeComp)) {\n\t\treturn;\n\t}\n\n\t// Check if the pawn is at full health\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\n\t// Check if the player state can remove the required credits\n\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\tif (!IsValid(PS) ||!PS->RemoveCredits(Cost)) {\n\t\treturn;\n\t}\n\n\t// Apply a health change to the pawn\n\tAttributeComp->ApplyHealthChange(HealthChange);\n\n\t// Trigger the power-up cooldown\n\tHideAndCooldownPowerup();\n}", "CodeBleu_score": 57.988999120997484}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (GetWorld()->GetSubsystem<USActorPoolingSubsystem>()) {\n\t\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n\t}\n}", "CodeBleu_score": 27.150021926956192}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn impact effect\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation());\n\n\t// Play impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\n\t// Trigger camera shake\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactShake, GetActorLocation(), 0.0f, GetImpactShakeOuterRadius(), GetImpactShakeInnerRadius());\n\n\t// Release projectile back to pool\n\tUSActorPoolingSubsystem* PoolingSubsystem = GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\tif (PoolingSubsystem) {\n\t\tPoolingSubsystem->ReleaseToPool(this);\n\t}\n}", "CodeBleu_score": 68.82310557265107}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ImpactEffect) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), GetActorRotation());\n\t}\n\n\tif (ImpactSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t}\n\n\tif (ImpactShake) {\n\t\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactShake, GetActorLocation(), 0.0f, GetImpactShakeOuterRadius(), GetImpactShakeInnerRadius());\n\t}\n\n\tif (GetWorld()->GetSubsystem<USActorPoolingSubsystem>()) {\n\t\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n\t}\n}", "CodeBleu_score": 53.92787324863691}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetPlayerData: PlayerState is null\"));\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetPlayerData: In PIE mode, returning first saved player entry\"));\n\t\treturn SavedPlayers.IsValidIndex(0)? &SavedPlayers[0] : nullptr;\n\t}\n\n\treturn SavedPlayers.FindByPredicate([&PlayerState](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerID == PlayerState->GetUniqueId().ToString();\n\t});\n}", "CodeBleu_score": 58.91531968312337}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (!PlayerState) {\n\t\tUE_LOGFMT(LogTemp, Warning, TEXT(\"PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tif (SavedPlayers.Num() > 0) {\n\t\t\treturn &SavedPlayers[0];\n\t\t}\n\t\tUE_LOGFMT(LogTemp, Warning, TEXT(\"No player data found in PIE mode!\"));\n\t\treturn nullptr;\n\t}\n\tFString PlayerId = PlayerState->GetUniqueId().ToString();\n\tif (SavedPlayers.FindByPredicate([&PlayerId](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerId == PlayerId;\n\t})) {\n\t\treturn &SavedPlayers[SavedPlayers.FindLastByPredicate([&PlayerId](const FPlayerSaveData& PlayerData) {\n\t\t\treturn PlayerData.PlayerId == PlayerId;\n\t\t})];\n\t}\n\tUE_LOGFMT(LogTemp, Warning, TEXT(\"No player data found for player %s!\"), *PlayerId);\n\treturn nullptr;\n}", "CodeBleu_score": 58.94795750113404}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (IsPlayInEditor()) {\n\t\tUE_LOGFMT(LogTemp, Warning, TEXT(\"GetPlayerData: PIE mode, returning first player data\"));\n\t\tif (SavedPlayers.Num() > 0) {\n\t\t\treturn &SavedPlayers[0];\n\t\t}\n\t\treturn nullptr;\n\t}\n\n\tFString PlayerId = PlayerState->GetUniqueId().ToString();\n\tint32 Index = SavedPlayers.IndexOfByPredicate([&](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerId == PlayerId;\n\t});\n\n\tif (Index!= INDEX_NONE) {\n\t\treturn &SavedPlayers[Index];\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 67.21448632547514}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (PS) {\n\t\tLoadPlayerState(PS);\n\t}\n}", "CodeBleu_score": 59.180193513067344}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (NewPlayer == nullptr) {\n\t\treturn;\n\t}\n\n\tASPlayerState* PS = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\n\tLoadPlayerState(PS);\n}", "CodeBleu_score": 52.23345720288144}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (NewPlayer == nullptr) {\n\t\treturn;\n\t}\n\n\tASPlayerState* PS = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\n\tLoadPlayerState(PS);\n}", "CodeBleu_score": 52.23345720288144}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear existing saved player and actor data\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Get the game state and save player data for each player\n\tAGameStateBase* GS = GetWorld()->GetGameState();\n\tfor (APlayerState* PS : GS->PlayerArray) {\n\t\tCastChecked<ASPlayerState>(PS)->SavePlayerState();\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActor> ActorIt(GetWorld()); ActorIt; ++ActorIt) {\n\t\tAActor* Actor = *ActorIt;\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t// Save actor data, including name, transform, and serialized data\n\t\t\tFName ActorName = Actor->GetFName();\n\t\t\tFTransform ActorTransform = Actor->GetActorTransform();\n\t\t\tFString ActorData;\n\t\t\tActor->Serialize(ActorData);\n\t\t\tCurrentSaveGame->SavedActors.Add(FSSavedActorData(ActorName, ActorTransform, ActorData));\n\t\t}\n\t}\n\n\t// Write the save game to a slot, and broadcast an event to signal the save is complete\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveGameSlotName, SaveGameUserIndex);\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 48.363331650527975}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear existing saved player and actor data\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Retrieve the game state\n\tAGameState* GS = GetWorld()->GetGameState();\n\n\t// Save player data for each player in the game state\n\tfor (APlayerState* PS : GS->PlayerArray) {\n\t\tCastChecked<ASPlayerState>(PS)->SavePlayerState(CurrentSaveGame);\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> ActorIt(GetWorld()); ActorIt; ++ActorIt) {\n\t\tAActor* Actor = *ActorIt;\n\n\t\t// Save actors that implement a specific interface\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t// Retrieve the actor's name\n\t\t\tFString ActorName = Actor->GetFName().ToString();\n\n\t\t\t// Save the actor's transform\n\t\t\tFTransform ActorTransform = Actor->GetActorTransform();\n\n\t\t\t// Serialize the actor's data\n\t\t\tFMemoryWriter MemoryWriter(Actor->SerializedData);\n\t\t\tActor->Serialize(MemoryWriter);\n\n\t\t\t// Add the actor's data to the save game\n\t\t\tCurrentSaveGame->SavedActors.Add(FSSavedActorData{ ActorName, ActorTransform, Actor->SerializedData });\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveGameSlotName, SaveGameUserIndex);\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 48.433301885133}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Get the current save game\n\tUSSaveGame* CurrentSaveGame = GetSaveGame();\n\n\t// Clear existing player and actor data\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Get the game state\n\tAGameStateBase* GS = GetWorld()->GetGameState();\n\n\t// Save player data for each player in the game state\n\tfor (int i = 0; i < GS->PlayerArray.Num(); i++) {\n\t\t// Get the player state\n\t\tAPlayerState* PS = GS->PlayerArray[i];\n\n\t\t// Save the player state\n\t\tCurrentSaveGame->SavedPlayers.Add(PS);\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\t// Get the actor\n\t\tAActor* Actor = *ActorItr;\n\n\t\t// Check if the actor implements a specific interface\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t// Get the actor's name\n\t\t\tFName ActorName = Actor->GetFName();\n\n\t\t\t// Get the actor's transform\n\t\t\tFTransform ActorTransform = Actor->GetActorTransform();\n\n\t\t\t// Serialize the actor's data\n\t\t\tFBufferArchive ToBinary;\n\t\t\tActor->Serialize(ToBinary);\n\t\t\tTArray<uint8> BinaryData = ToBinary.GetBuffer();\n\n\t\t\t// Add the actor data to the save game\n\t\t\tFActorSaveData ActorData;\n\t\t\tActorData.ActorName = ActorName;\n\t\t\tActorData.ActorTransform = ActorTransform;\n\t\t\tActorData.ActorData = BinaryData;\n\t\t\tCurrentSaveGame->SavedActors.Add(ActorData);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveSlotName, SaveUserIndex);\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 60.10355058048775}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::BeginCombo(\"Theme\", m_theme->value.c_str())) {\n\t\tfor (const auto& theme : m_themes) {\n\t\t\tif (ImGui::Selectable(theme.c_str(), m_theme->value == theme)) {\n\t\t\t\tm_theme->value = theme;\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\n\tif (ImGui::BeginCombo(\"Font Size\", m_font_size->value.c_str())) {\n\t\tfor (const auto& font_size : m_font_sizes) {\n\t\t\tif (ImGui::Selectable(font_size.c_str(), m_font_size->value == font_size)) {\n\t\t\t\tm_font_size->value = font_size;\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\n\tif (m_font_size->value!= m_font_size->last_value) {\n\t\tg_framework->set_font_size(m_font_size->value);\n\t}\n}", "CodeBleu_score": 40.83893611376844}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::CollapsingHeader(\"Themes\")) {\n\t\tImGui::Indent();\n\t\tImGui::Text(\"Theme\");\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Reset\")) {\n\t\t\tm_theme->reset();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Save\")) {\n\t\t\tm_theme->save();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Load\")) {\n\t\t\tm_theme->load();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Default\")) {\n\t\t\tm_theme->set_default();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Dark\")) {\n\t\t\tm_theme->set_dark();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Light\")) {\n\t\t\tm_theme->set_light();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Classic\")) {\n\t\t\tm_theme->set_classic();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Corporate\")) {\n\t\t\tm_theme->set_corporate();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Light Corporate\")) {\n\t\t\tm_theme->set_light_corporate();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Dark Corporate\")) {\n\t\t\tm_theme->set_dark_corporate();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Light Classic\")) {\n\t\t\tm_theme->set_light_classic();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Dark Classic\")) {\n\t\t\tm_theme->set_dark_classic();\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Custom\")) {\n\t\t\tm_theme->set_custom();\n\t\t}\n\t\tm_theme->draw();\n\t\tImGui::Unindent();\n\t}\n\tif (ImGui::CollapsingHeader(\"Font\")) {\n\t\tImGui::Indent();\n\t\tImGui::Text(\"Font size\");\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Reset\")) {", "CodeBleu_score": 38.92994607194815}, {"code": "void FrameworkConfig::draw_themes(){\n\t\t// Draw theme selector\n\tif (ImGui::BeginCombo(\"Theme\", m_theme->value.c_str())) {\n\t\tfor (auto& theme : m_themes) {\n\t\t\tbool is_selected = (theme.first == m_theme->value);\n\t\t\tif (ImGui::Selectable(theme.first.c_str(), is_selected)) {\n\t\t\t\tm_theme->value = theme.first;\n\t\t\t\tm_theme->save();\n\t\t\t\tset_theme(m_theme->value);\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\n\t// Draw font size selector\n\tif (ImGui::BeginCombo(\"Font Size\", std::to_string(m_font_size->value).c_str())) {\n\t\tfor (auto& font_size : m_font_sizes) {\n\t\t\tbool is_selected = (font_size == m_font_size->value);\n\t\t\tif (ImGui::Selectable(std::to_string(font_size).c_str(), is_selected)) {\n\t\t\t\tm_font_size->value = font_size;\n\t\t\t\tm_font_size->save();\n\t\t\t\tget_imgui_theme()->draw(m_font_size->value);\n\t\t\t\tg_framework->set_font_size(m_font_size->value);\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n}", "CodeBleu_score": 42.12600234219769}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t\tm_menu_key->draw();\n\tm_show_cursor_key->draw();\n\tm_remember_menu_state->draw();\n\tm_enable_l3_r3_toggle->draw();\n\tm_always_show_cursor->draw();\n\tImGui::Separator();\n\tm_l3_r3_long_press->draw();\n\tImGui::SameLine();\n\tm_menu_key->draw();\n\n\tif (m_log_level->value()!= m_log_level_prev) {\n\t\tm_log_level_prev = m_log_level->value();\n\t\tif (m_log_level->value() >= 0 && m_log_level->value() <= 6) {\n\t\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value()));\n\t\t}\n\t}\n}", "CodeBleu_score": 41.714768379720645}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::Text(\"Framework\");\n\tImGui::Separator();\n\tm_menu_key->draw();\n\tm_show_cursor_key->draw();\n\tm_remember_menu_state->draw();\n\tm_enable_l3_r3_toggle->draw();\n\tm_always_show_cursor->draw();\n\tImGui::Separator();\n\tm_l3_r3_long_press->draw();\n\tImGui::SameLine();\n\tm_menu_key->draw();\n\tif (m_log_level->value() >= 0 && m_log_level->value() <= 6)\n\t\tspdlog::set_level(spdlog::level::level_enum(m_log_level->value()));\n\tm_log_level->draw();\n}", "CodeBleu_score": 43.38098217714792}, {"code": "void FrameworkConfig::draw_main() {\n\t\tm_menu_key->draw();\n\tm_show_cursor_key->draw();\n\tm_remember_menu_state->draw();\n\tm_enable_l3_r3_toggle->draw();\n\tm_always_show_cursor->draw();\n\tImGui::Separator();\n\tm_l3_r3_long_press->draw();\n\tImGui::SameLine();\n\tm_menu_key->draw();\n\tif (m_log_level->value() >= 0 && m_log_level->value() <= 6) {\n\t\tspdlog::set_level((spdlog::level::level_enum)m_log_level->value());\n\t}\n}", "CodeBleu_score": 40.8083402896961}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tif (!FeedbackContext ) {\n\t\treturn false;\n\t}\n\n\t// Load the file into memory.\n\tTArray<uint8> FileData;\n\tif (!FFileHelper::LoadFileToArray( FileData, *OSMFilePath ) ) {\n\t\t// Couldn't load the file.\n\t\tFFormatNamedArguments Arguments;\n\t\tArguments.Add( TEXT( \"OSMFilePath\" ), FText::FromString( OSMFilePath ) );\n\t\tFText ErrorMessage = FText::Format( LOCTEXT( \"FailedToLoadOSMFile\", \"Failed to load OSM file {OSMFilePath}.\" ), Arguments );\n\t\tif ( FeedbackContext ) {\n\t\t\tFFormatNamedArguments Arguments;\n\t\t\tArguments.Add( TEXT( \"ErrorMessage\" ), ErrorMessage );\n\t\t\tFText FeedbackMessage = FText::Format( LOCTEXT( \"FailedToLoadOSMFileFeedback\", \"Failed to load OSM file. Error: {ErrorMessage}\" ), Arguments );\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"%s\" ), *FeedbackMessage.ToString() );\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Parse the file.\n\tTSharedPtr<FFastXml> FastXml = MakeShareable( new FFastXml() );\n\tTArray<uint8>& Data = bIsFilePathActuallyTextBuffer? FileData : OSMFilePath.GetCharArray();\n\tif (!FastXml->ParseXmlFile( Data.GetData(), Data.Num(), TEXT( \"OSMFile\" ), FeedbackContext ) ) {\n\t\t// Couldn't parse the file.\n\t\tFFormatNamedArguments Arguments;\n\t\tArguments.Add( TEXT( \"OSMFilePath\" ), FText::FromString( OSMFilePath ) );\n\t\tFText ErrorMessage = FText::Format( LOCTEXT( \"FailedToParseOSMFile\", \"Failed to parse OSM file {OSMFilePath}.\" ), Arguments );\n\t\tif ( FeedbackContext ) {\n\t\t\tFFormatNamedArguments Arguments;\n\t\t\tArguments.Add( TEXT( \"ErrorMessage\" ), ErrorMessage );\n\t\t\tFText FeedbackMessage = FText::Format( LOCTEXT( \"FailedToParseOSMFileFeedback\", \"Failed to parse OSM file. Error: {ErrorMessage}\" ), Arguments );\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error", "CodeBleu_score": 44.759118475793215}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Create a new FFastXml instance\n\tFFastXml* FastXml = new FFastXml();\n\n\t// Set the feedback context for logging\n\tFastXml->SetFeedbackContext( FeedbackContext );\n\n\t// Create a new node map to store the parsed nodes\n\tTMap<FString, FOSMNode> NodeMap;\n\n\t// Create a new way map to store the parsed ways\n\tTMap<FString, FOSMWay> WayMap;\n\n\t// Create a new relation map to store the parsed relations\n\tTMap<FString, FOSMRelation> RelationMap;\n\n\t// Create a new way node map to store the nodes in each way\n\tTMap<FString, TArray<FString>> WayNodeMap;\n\n\t// Create a new relation member map to store the members in each relation\n\tTMap<FString, TArray<FOSMRelationMember>> RelationMemberMap;\n\n\t// Create a new way relation map to store the relations in each way\n\tTMap<FString, TArray<FString>> WayRelationMap;\n\n\t// Create a new relation way map to store the ways in each relation\n\tTMap<FString, TArray<FString>> RelationWayMap;\n\n\t// Create a new node way map to store the ways for each node\n\tTMap<FString, TArray<FString>> NodeWayMap;\n\n\t// Create a new node relation map to store the relations for each node\n\tTMap<FString, TArray<FString>> NodeRelationMap;\n\n\t// Create a new way node relation map to store the relations for each way\n\tTMap<FString, TArray<FString>> WayRelationMap;\n\n\t// Create a new way node relation map to store the nodes for each way\n\tTMap<FString, TArray<FString>> WayNodeMap;\n\n\t// Create a new relation node map to store the nodes for each relation\n\tTMap<FString, TArray<FString>> RelationNodeMap;\n\n\t// Create a new relation way map to store the ways for each relation\n\tTMap<FString, TArray<FString>> RelationWayMap;\n\n\t// Create a new way node map to store the nodes for each way\n\tTMap<FString, TArray<FString>> WayNodeMap;\n\n\t//", "CodeBleu_score": 24.81161853776642}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Create a new FFastXml object to parse the XML file\n\tFFastXml FFastXml;\n\n\t// Create a new OSMFileData object to store the parsed data\n\tFOSMFileData* OSMFileData = new FOSMFileData();\n\n\t// Create a new FOSMFileDataFeedbackContext object to handle feedback\n\tFOSMFileDataFeedbackContext* OSMFileDataFeedbackContext = new FOSMFileDataFeedbackContext( OSMFileData, FeedbackContext );\n\n\t// Set the feedback context for the FFastXml object\n\tFFastXml.SetFeedbackContext( OSMFileDataFeedbackContext );\n\n\t// Load the XML file or text buffer\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\t// Parse the text buffer\n\t\tif (!FFastXml.ParseXmlBuffer( TCHAR_TO_ANSI( *OSMFilePath ) ) ) {\n\t\t\t// Log an error message with the error details\n\t\t\tFFastXml.LogError( OSMFileDataFeedbackContext->Logf );\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t// Parse the XML file\n\t\tif (!FFastXml.ParseXmlFile( TCHAR_TO_ANSI( *OSMFilePath ) ) ) {\n\t\t\t// Log an error message with the error details\n\t\t\tFFastXml.LogError( OSMFileDataFeedbackContext->Logf );\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Calculate the average latitude and longitude from the node data\n\tOSMFileData->CalculateAverageLatLon();\n\n\t// Return true to indicate successful parsing\n\treturn true;\n}", "CodeBleu_score": 38.12425287290343}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset->IsA(UStreetMap::StaticClass())) {\n\t\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t}\n}", "CodeBleu_score": 73.3458487800175}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset->IsA(UStreetMap::StaticClass())) {\n\t\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t}\n}", "CodeBleu_score": 73.3458487800175}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset->IsA(UStreetMap::StaticClass())) {\n\t\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t}\n}", "CodeBleu_score": 73.3458487800175}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.51488926732061}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.51488926732061}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.51488926732061}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions() );\n\tFModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get().RegisterAssetTypeActions( StreetMapAssetTypeActions.ToSharedRef() );\n\tFStreetMapStyle::Initialize();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>( \"PropertyEditor\" );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n}", "CodeBleu_score": 67.5476383521754}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions( EAssetTypeCategories::Misc ) );\n\tFModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get().RegisterAssetTypeActions( StreetMapAssetTypeActions.ToSharedRef() );\n\tFStreetMapStyle::Initialize();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>( \"PropertyEditor\" );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n}", "CodeBleu_score": 72.68901432920012}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\t\n\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions( EAssetTypeCategories::Misc ) );\n\tFModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get().RegisterAssetTypeActions( StreetMapAssetTypeActions.ToSharedRef() );\n\tFStreetMapStyle::Initialize();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>( \"PropertyEditor\" );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n}", "CodeBleu_score": 63.47707907690781}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (!HasValidMesh()) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\tStreetMapSceneProxy->Init();\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 49.10553324258371}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// Check if the component has a valid mesh\n\tif (!HasValidMesh()) {\n\t\treturn nullptr;\n\t}\n\n\t// Create a new scene proxy for the street map component\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\n\t// Initialize the scene proxy with the component's vertices and indices\n\tStreetMapSceneProxy->Init(Vertices, Indices);\n\n\t// Return the scene proxy\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 51.02889104260806}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (HasValidMesh()) {\n\t\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\t\tStreetMapSceneProxy->Init();\n\t\treturn StreetMapSceneProxy;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 52.601629855283335}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FKey> InputIds;\n\tInputIds.Add(EKeys::Gamepad_FaceButton_Bottom);\n\tAbilities->BindAbilityToInputIDs(TestAbility01Handle, InputIds);\n}", "CodeBleu_score": 59.97769666944925}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FKey> InputIds;\n\tInputIds.Add(EKeys::Gamepad_FaceButton_Bottom);\n\tInputIds.Add(EKeys::F);\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 69.4042161466253}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FKey> InputIds;\n\tInputIds.Add(EKeys::F);\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 69.17418673495693}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// Find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// Get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// Find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// Get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\t// TODO: Implement GetMainWeaponSocket\n\treturn FVector::ZeroVector;\n}", "CodeBleu_score": 6.2859653056943525}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMainWeaponMesh()) {\n\t\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 45.020949076334674}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMainWeaponMesh()) {\n\t\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 45.020949076334674}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinEnemiesToSpawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 60.37588270816979}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (SpawnedEnemies.Contains(InEnemy)) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinimumEnemiesToSpawn) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 67.25479159124109}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy == nullptr) {\n\t\treturn;\n\t}\n\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinEnemiesToSpawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 61.8864758549821}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString str = Super::ApproveLogin(Options);\n\tOptions.ParseIntoArray\n\tTEXT\n\tstr.Split\n\treturn str;\n}", "CodeBleu_score": 21.757190049480016}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tFString PlayerId;\n\tOptions.ParseIntoArray(OptionsArray, TEXT(\"&\"), true);\n\tfor (FString Option : OptionsArray) {\n\t\tif (Option.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = Option.RightChop(9);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 51.56246778788444}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\n\t// Parse the options string into an array of parameters\n\tTArray<FString> OptionsArray;\n\tOptions.ParseIntoArray(OptionsArray, TEXT(\"&\"));\n\n\t// Search for the \"PlayerId\" parameter\n\tfor (int32 i = 0; i < OptionsArray.Num(); i++) {\n\t\tif (OptionsArray[i].StartsWith(\"PlayerId=\")) {\n\t\t\t// Extract the player ID value\n\t\t\tPlayerId = OptionsArray[i].Mid(9);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 51.47721259330184}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please fill in all fields!\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\tCast<UARGameInstance>(GetOwningPlayer()->GetGameInstance())->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 56.33872232877055}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t// Get username, display name, and password from input fields\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check if any fields are empty\n\tif (UserName.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\t// Display warning message\n\t\tWarrningText->SetText(FText::FromString(\"Please fill in all fields.\"));\n\t\treturn;\n\t}\n\n\t// Hide register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Call RegisterNewPlayer method from game instance\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 59.91375906002839}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please fill in all fields\"));\n\t}\n\telse {\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\tCast<UARGameInstance>(GetOwningPlayer()->GetGameInstance())->RegisterNewPlayer(UserName, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 55.16795668967197}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor.IsValid()) {\n\t\tconst FVector& DamageLocation = InMod.GetHitResult().ImpactPoint;\n\t\tconst FVector2D& ScreenLocation = UGameplayStatics::ProjectWorldToScreenPoint(InMod.TargetActor.Get(), DamageLocation);\n\t\tFloatingCombatText->SetInfo(ScreenLocation, InMod.GetFinalValue());\n\t}\n}", "CodeBleu_score": 31.855278084715987}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (!InMod.Target.IsValid()) {\n\t\treturn;\n\t}\n\n\tFVector WorldLoc;\n\tif (InMod.Target->GetActorLocation(WorldLoc)) {\n\t\tFVector2D ScreenLoc;\n\t\tif (UGameplayStatics::ProjectWorldToScreen(GetWorld(), WorldLoc, ScreenLoc, false)) {\n\t\t\tFloatingCombatText->SetInfo(InMod.Value, ScreenLoc);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.77564245758538}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor.IsValid()) {\n\t\tFVector2D ScreenLocation;\n\t\tUGameplayStatics::ProjectWorldToScreen(GetOwningPlayerController(), InMod.DamageLocation, ScreenLocation);\n\t\tFloatingCombatText->SetInfo(InMod.Damage, ScreenLocation);\n\t}\n}", "CodeBleu_score": 27.704723436902253}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(AbilityInstance->GetOwner()->GetComponentByClass(UARWeaponComponent::StaticClass()));\n\t\tif (WeaponComponent) {\n\t\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\t\tif (Character) {\n\t\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\tMagazineUpgrade->UpdateMagazineUpgradeValue(Character);\n\t\t\t\t\tAbilityInstance->ApplyMagazineUpgradeEffect(MagazineUpgrade);\n\t\t\t\t}\n\t\t\t\tOnMagazineUpdateAdded(MagazineUpgrade);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.54176527539111}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(AbilityInstance->GetAvatarActorComponent());\n\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\tif (WeaponComponent && Character) {\n\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\tif (Character->HasAuthority()) {\n\t\t\t\tMagazineUpgrade->MagazineUpgradeValue = MagazineUpgrade->MagazineUpgradeValue * Character->GetMagazineUpgradeMultiplier();\n\t\t\t\tAbilityInstance->ApplyMagazineUpgradeEffect(MagazineUpgrade);\n\t\t\t}\n\t\t\tUARWeaponInventoryComponent* WeaponInventoryComponent = Cast<UARWeaponInventoryComponent>(Character->GetInventoryComponent());\n\t\t\tif (WeaponInventoryComponent) {\n\t\t\t\tWeaponInventoryComponent->AddMagazineUpgrade(MagazineUpgrade);\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded.Broadcast(MagazineUpgrade);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.70840585095823}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponComponent* WeaponComponent = Cast<AARCharacter>(GetOuter())->GetWeaponComponent();\n\t\tif (WeaponComponent && WeaponComponent->GetOwner()) {\n\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\tif (WeaponComponent->GetOwner()->HasAuthority()) {\n\t\t\t\tWeaponComponent->GetMagazineUpgradeValue() += MagazineUpgrade->GetMagazineUpgradeValue();\n\t\t\t\tAbilityInstance->ApplyMagazineUpgradeEffect(MagazineUpgrade->GetMagazineUpgradeEffect());\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded(MagazineUpgrade);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.34119991339261}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tUGAAbilityComponent* AbilityComp = OwnerCharacter->GetAbilityComp();\n\t\tif (AbilityComp) {\n\t\t\tFGameplayAbilitySpecHandle Handle = AbilityComp->BP_GetAbilityByHandle(InAbilityTag);\n\t\t\tUGAAbilityBase* Ability = Cast<UGAAbilityBase>(AbilityComp->GetAbilityFromHandle(Handle));\n\t\t\tif (Ability) {\n\t\t\t\tSetAbilityToItem(Ability, LocalIndex);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.11400040207481}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (Character) {\n\t\tUARAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (AbilityComp) {\n\t\t\tFGameplayAbilitySpecHandle Handle = AbilityComp->BP_GetAbilityByHandle(InAbilityTag);\n\t\t\tif (Handle.IsValid()) {\n\t\t\t\tUGAAbilityBase* Ability = Cast<UGAAbilityBase>(AbilityComp->BP_GetAbilityFromHandle(Handle));\n\t\t\t\tif (Ability) {\n\t\t\t\t\tSetAbilityToItem(Ability, LocalIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.73376028597943}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tUGAAbilityComponent* AbilityComp = OwnerCharacter->GetAbilityComp();\n\t\tif (AbilityComp) {\n\t\t\tUGAAbilityBase* Ability = AbilityComp->BP_GetAbilityByHandle(InAbilityTag);\n\t\t\tif (Ability) {\n\t\t\t\tSetAbilityToItem(Ability, LocalIndex);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.311364936243166}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\tif (Owner!= nullptr) {\n\t\tFARWeaponRPC WeaponData;\n\t\tWeaponData.Weapon = nullptr;\n\t\tWeaponData.Position = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tWeaponData.WeaponData.Reset();\n\t\tOwner->SetWeapon(WeaponData);\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tOwner->Unequip();\n\t\t}\n\t}\n}", "CodeBleu_score": 51.59322424362441}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (GetOwner()!= nullptr) {\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\t\tif (Owner!= nullptr) {\n\t\t\tFARWeaponRPC WeaponRPC;\n\t\t\tWeaponRPC.WeaponData.Weapon = nullptr;\n\t\t\tWeaponRPC.WeaponData.WeaponPosition = (uint8)EARWeaponPosition::None;\n\t\t\tWeaponRPC.WeaponData.WeaponState = (uint8)EARWeaponState::None;\n\t\t\tWeaponRPC.WeaponData.Ammo = 0;\n\t\t\tWeaponRPC.WeaponData.MagazineAmmo = 0;\n\t\t\tWeaponRPC.WeaponData.MagazineCapacity = 0;\n\t\t\tWeaponRPC.WeaponData.ReloadTime = 0.0f;\n\t\t\tWeaponRPC.WeaponData.ReloadTimeRemaining = 0.0f;\n\t\t\tWeaponRPC.WeaponData.EquipTime = 0.0f;\n\t\t\tWeaponRPC.WeaponData.EquipTimeRemaining = 0.0f;\n\t\t\tWeaponRPC.WeaponData.UnequipTime = 0.0f;\n\t\t\tWeaponRPC.WeaponData.UnequipTimeRemaining = 0.0f;\n\t\t\tWeaponRPC.WeaponData.FireTime = 0.0f;\n\t\t\tWeaponRPC.WeaponData.FireTimeRemaining = 0.0f;\n\t\t\tWeaponRPC.WeaponData.FireRate = 0.0f;\n\t\t\tWeaponRPC.WeaponData.FireRateRemaining = 0.0f;\n\t\t\tWeaponRPC.WeaponData.FireCount = 0;\n\t\t\tWeaponRPC.WeaponData.FireCountRemaining = 0;\n\t\t\tWeaponRPC.WeaponData.FireMode = (uint8)EARFireMode::Auto;\n\t\t\tWeaponRPC.WeaponData.ReloadMode = (uint8)EARReloadMode::Magazine;\n\t\t\tWeaponRPC.WeaponData.ReloadCount = 0;\n\t\t\tWeaponRPC.WeaponData.ReloadCountRemaining = 0;\n\t\t\tWeaponRPC.WeaponData.ReloadCapacity = 0;\n\t\t\tWeaponRPC.WeaponData.ReloadTimeRemaining = 0.0f;\n\t\t\tWeaponRPC.WeaponData.ReloadTime = 0.0f;\n\t\t\tWeaponRPC.WeaponData.ReloadSpeed = 0.0f;\n\t\t\tWeaponRPC.WeaponData.ReloadSpeedRemaining = 0.0f;\n\t\t\tWeaponRPC.WeaponData.Reload", "CodeBleu_score": 22.630031154926076}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\tif (Owner) {\n\t\tFARWeaponRPC RPC;\n\t\tRPC.WeaponData.Weapon.Reset();\n\t\tOwner->SetWeapon(RPC, LocalIndex);\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tUnequip();\n\t\t}\n\t}\n}", "CodeBleu_score": 38.66819914114709}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (FModuleManager::Get().IsModuleLoaded(\"MoviePlayer\")) {\n\t\tif (!IsRunningDedicatedServer()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.41190451929667}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tif (FModuleManager::Get().IsModuleLoaded(\"MoviePlayer\")) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.91272035752055}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.1566962303026}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (GetDefault<ULoadingScreenSettings>()->bEnableLoadingScreen) {\n\t\tUE_LOG(LogLoadingScreen, Log, TEXT(\"Loading screen enabled\"));\n\t\tGetDefault<ULoadingScreenSettings>()->bStartup = false;\n\t\tSetupLoadingScreen();\n\t}\n}", "CodeBleu_score": 50.684097532800834}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (GetDefault<ULoadingScreenSettings>()->IsEnableLoadingScreen) {\n\t\tStartupFlag = false;\n\t\tSetupLoadingScreen();\n\t}\n}", "CodeBleu_score": 29.45247248273602}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (!GetDefault<ULoadingScreenSettings>()->bEnableLoadingScreen) {\n\t\tUE_LOG(LogLoadingScreen, Warning, TEXT(\"Loading screen is disabled\"));\n\t\treturn;\n\t}\n\n\tStartup = false;\n\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>());\n}", "CodeBleu_score": 52.688082201141206}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tBackgroundImages.Empty();\n\tStartupBackgroundImages.Empty();\n\n\t// Get the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tfor (int32 i = 0; i < LoadingScreenSettings->StartupBackgroundImages.Num(); i++) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->StartupBackgroundImages[i].LoadSynchronous());\n\t\tif (Image!= NULL) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tfor (int32 i = 0; i < LoadingScreenSettings->BackgroundImages.Num(); i++) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->BackgroundImages[i].LoadSynchronous());\n\t\tif (Image!= NULL) {\n\t\t\tBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.668575955946466}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tBackgroundImages.Empty();\n\tStartupBackgroundImages.Empty();\n\n\t// Retrieve the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tfor (int32 i = 0; i < LoadingScreenSettings->StartupBackgroundImages.Num(); i++) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->StartupBackgroundImages[i].TryLoad());\n\t\tif (Image) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tfor (int32 i = 0; i < LoadingScreenSettings->DefaultBackgroundImages.Num(); i++) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->DefaultBackgroundImages[i].TryLoad());\n\t\tif (Image) {\n\t\t\tBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.73262152318789}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\tULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\tif (Settings) {\n\t\tfor (const FString& Path : Settings->StartupBackgroundImages) {\n\t\t\tUTexture2D* Texture = Cast<UTexture2D>(LoadObject<UTexture2D>(nullptr, *Path));\n\t\t\tif (Texture) {\n\t\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t\tfor (const FString& Path : Settings->DefaultBackgroundImages) {\n\t\t\tUTexture2D* Texture = Cast<UTexture2D>(LoadObject<UTexture2D>(nullptr, *Path));\n\t\t\tif (Texture) {\n\t\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.5230083641121}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (TextAlpha == 0.0f) {\n\t\tTextAlpha = 0.01f;\n\t\tTextAlphaDirection = 1.0f;\n\t}\n\n\tif (TextAlphaDirection == 1.0f) {\n\t\tTextAlpha += InDeltaTime * TextAlphaSpeed;\n\t\tif (TextAlpha >= TextAlphaMax) {\n\t\t\tTextAlpha = TextAlphaMax;\n\t\t\tTextAlphaDirection = -1.0f;\n\t\t}\n\t} else {\n\t\tTextAlpha -= InDeltaTime * TextAlphaSpeed;\n\t\tif (TextAlpha <= TextAlphaMin) {\n\t\t\tTextAlpha = TextAlphaMin;\n\t\t\tTextAlphaDirection = 1.0f;\n\t\t}\n\t}\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 44.31971087273626}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (bIsAnimating) {\n\t\tif (bIsAnimatingIn) {\n\t\t\tif (TextAlpha >= MaxTextAlpha) {\n\t\t\t\tbIsAnimatingIn = false;\n\t\t\t} else {\n\t\t\t\tTextAlpha += TextAnimSpeed * InDeltaTime;\n\t\t\t}\n\t\t} else {\n\t\t\tif (TextAlpha <= MinTextAlpha) {\n\t\t\t\tbIsAnimatingIn = true;\n\t\t\t} else {\n\t\t\t\tTextAlpha -= TextAnimSpeed * InDeltaTime;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 40.7181305270521}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Check if the animation has completed.\n\tif (m_fTextAlpha >= 1.0f) {\n\t\t// Set the animation direction to reverse.\n\t\tm_bAnimatingDown = true;\n\t} else if (m_fTextAlpha <= 0.0f) {\n\t\t// Set the animation direction to forward.\n\t\tm_bAnimatingDown = false;\n\t}\n\n\t// Update the alpha value based on the animation direction.\n\tif (m_bAnimatingDown) {\n\t\tm_fTextAlpha -= m_fAnimationSpeed * InDeltaTime;\n\t} else {\n\t\tm_fTextAlpha += m_fAnimationSpeed * InDeltaTime;\n\t}\n\n\t// Update the text's alpha value.\n\tm_pLoadingCompleteText->SetAlpha(m_fTextAlpha);\n\n\t// Continue the animation.\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 39.7638423755435}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tif (Data->Index!= -1) {\n\t\tData->Lock.unlock();\n\t\treturn true;\n\t}\n\tData->Lock.unlock();\n\treturn false;\n}", "CodeBleu_score": 71.12623234489106}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool ready = Data->Index!= -1;\n\tif (!ready)\n\t\tData->Lock.unlock();\n\treturn ready;\n}", "CodeBleu_score": 52.48408409461807}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tif (Data->Index!= -1) {\n\t\tData->Lock.unlock();\n\t\treturn true;\n\t}\n\tData->Lock.unlock();\n\treturn false;\n}", "CodeBleu_score": 71.12623234489106}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tFFindPathSharedPtr* FindPathSharedPtr = static_cast<FFindPathSharedPtr*>(State);\n\t\tif (FindPathSharedPtr->IsValid()) {\n\t\t\tFindPathSharedPtr->Get()->AbortAsyncFindPathRequest();\n\t\t\tdelete FindPathSharedPtr;\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 32.27264860075941}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathState* FindPathState = static_cast<FFindPathState*>(State);\n\tif (FindPathState->QueryID.IsValid()) {\n\t\tif (bCleanup) {\n\t\t\tFindPathState->NavData->AbortAsyncFindPathRequest(FindPathState->QueryID);\n\t\t\tdelete FindPathState;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 33.385891291243915}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tif (State) {\n\t\t\tFFindPathSharedPtr* FindPathState = static_cast<FFindPathSharedPtr*>(State);\n\t\t\tif (FindPathState->IsValid()) {\n\t\t\t\tFindPathState->Get()->AbortAsyncFindPathRequest();\n\t\t\t}\n\t\t\tdelete FindPathState;\n\t\t}\n\t}\n\treturn!State;\n}", "CodeBleu_score": 31.938969352550977}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->is_listener_current(this)) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 55.02984705697518}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->get_current_listener()!= this) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->get_current_listener() == this) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.62893400500455}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_inside_tree()) {\n\t\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->is_current_listener(this)) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree()) {\n\t\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->is_current_listener(this)) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.5761268815606}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(!active.is_set());\n\tERR_FAIL_COND(use_threads);\n\n\tint32_t *w = p_buffer;\n\n\twhile (p_frames) {\n\t\tint chunk = MIN(p_frames, audio_chunk_size);\n\t\t{\n\t\t\t//lock\n\t\t\taudio_mutex.lock();\n\t\t\t//process\n\t\t\tfor (int i = 0; i < chunk; i++) {\n\t\t\t\tfor (int j = 0; j < audio_channels; j++) {\n\t\t\t\t\t*w++ = audio_buffer[j][audio_buffer_pos];\n\t\t\t\t}\n\t\t\t\taudio_buffer_pos = (audio_buffer_pos + 1) % audio_chunk_size;\n\t\t\t}\n\t\t\t//unlock\n\t\t\taudio_mutex.unlock();\n\t\t}\n\t\tp_frames -= chunk;\n\t}\n}", "CodeBleu_score": 46.62219571858206}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active.is_set()) {\n\t\treturn;\n\t}\n\tif (using_threads) {\n\t\treturn;\n\t}\n\n\tint32_t *w = p_buffer;\n\n\twhile (p_frames) {\n\t\tint todo = p_frames;\n\t\tif (todo > MAX_FRAMES_PER_MIX) {\n\t\t\ttodo = MAX_FRAMES_PER_MIX;\n\t\t}\n\n\t\tlock();\n\n\t\tfor (int i = 0; i < todo; i++) {\n\t\t\tfor (int j = 0; j < MAX_MIX_CHANNELS; j++) {\n\t\t\t\tw[i * MAX_MIX_CHANNELS + j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < audio_server_process->get_audio_output_count(); i++) {\n\t\t\tAudioOutput *output = audio_server_process->get_audio_output(i);\n\t\t\tif (output->get_mix_rate()!= mix_rate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tint channels = output->get_channels();\n\t\t\tif (channels > MAX_MIX_CHANNELS) {\n\t\t\t\tchannels = MAX_MIX_CHANNELS;\n\t\t\t}\n\n\t\t\toutput->mix(w, todo, channels);\n\t\t}\n\n\t\tunlock();\n\n\t\tp_frames -= todo;\n\t\tw += todo * MAX_MIX_CHANNELS;\n\t}\n}", "CodeBleu_score": 44.624373971208385}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (active.is_set()) {\n\t\t//lock\n\t\tlock.lock();\n\t\t//mix\n\t\tfor (int i = 0; i < p_frames; i++) {\n\t\t\tint32_t sample = 0;\n\t\t\tfor (int j = 0; j < channels; j++) {\n\t\t\t\tif (audio_server_process) {\n\t\t\t\t\tsample += audio_server_process(j, i);\n\t\t\t\t} else {\n\t\t\t\t\tsample += 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsample = MIN(sample, INT16_MAX);\n\t\t\tsample = MAX(sample, INT16_MIN);\n\t\t\tp_buffer[i] = sample;\n\t\t}\n\t\t//unlock\n\t\tlock.unlock();\n\t}\n}", "CodeBleu_score": 40.458078313336614}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_point_unit_distance!= 0) {\n\t\tr_gravity = (p_position - gravity_point).normalized();\n\t\tr_gravity *= gravity * 1.0 / (p_position - gravity_point).length_squared();\n\t} else {\n\t\tr_gravity = gravity;\n\t}\n}", "CodeBleu_score": 23.558481872805505}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_point) {\n\t\tr_gravity = p_position - gravity_point_position;\n\t\tr_gravity = r_gravity.normalized() * gravity_point_unit_distance / r_gravity.length_squared();\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 21.836713688632102}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_is_point) {\n\t\tVector2 point_to_pos = p_position - gravity_point;\n\t\treal_t dist_squared = point_to_pos.length_squared();\n\t\tif (dist_squared == 0.0) {\n\t\t\tr_gravity = Vector2();\n\t\t} else {\n\t\t\tr_gravity = point_to_pos * (1.0 / dist_squared) * gravity_point_unit_distance;\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vec;\n\t}\n}", "CodeBleu_score": 37.70109482172774}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tif (active) {\n\t\treturn;\n\t}\n\n\tactive = true;\n\n\tint count = constraints.size();\n\tfor (int i = 0; i < count; i++) {\n\t\tGodotConstraint2D *c = constraints[i];\n\t\tGodotBody2D *b = c->get_body_ptr();\n\n\t\tif (b->mode == MODE_RIGID &&!b->active) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.26133868584478}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tif (!is_active()) {\n\t\treturn;\n\t}\n\n\t// Check all constraints\n\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tif (constraints[i]->is_valid()) {\n\t\t\tif (constraints[i]->get_node()->is_inside_tree()) {\n\t\t\t\tif (constraints[i]->get_node()->get_owner()!= get_owner()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (constraints[i]->is_disabled()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (constraints[i]->get_node()->is_inside_tree()) {\n\t\t\t\tif (constraints[i]->get_node()->get_owner()!= get_owner()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (constraints[i]->get_owner()!= get_owner()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tGodotBody2D *body = Object::cast_to<GodotBody2D>(constraints[i]->get_node());\n\t\t\tif (body) {\n\t\t\t\tif (!body->is_active()) {\n\t\t\t\t\tbody->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.7347433019175}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < c->get_constraint_count(); i++) {\n\t\tRef<Physics2DConstraint> constraint = c->get_constraint_ptr(i);\n\t\tif (constraint.is_valid()) {\n\t\t\tif (constraint->is_enabled()) {\n\t\t\t\tif (constraint->is_one_to_one_constraint()) {\n\t\t\t\t\tRef<Physics2DConstraintBody> body = constraint->get_body();\n\t\t\t\t\tif (body.is_valid()) {\n\t\t\t\t\t\tif (!body->is_active() && body->get_mode() == Physics2DServer::BODY_MODE_RIGID) {\n\t\t\t\t\t\t\tbody->set_active(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tRef<Physics2DConstraintBody> body_a = constraint->get_body_a();\n\t\t\t\t\tRef<Physics2DConstraintBody> body_b = constraint->get_body_b();\n\t\t\t\t\tif (body_a.is_valid() && body_b.is_valid()) {\n\t\t\t\t\t\tif (!body_a->is_active() && body_a->get_mode() == Physics2DServer::BODY_MODE_RIGID) {\n\t\t\t\t\t\t\tbody_a->set_active(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!body_b->is_active() && body_b->get_mode() == Physics2DServer::BODY_MODE_RIGID) {\n\t\t\t\t\t\t\tbody_b->set_active(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.75315134027506}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space_rid.is_valid()) {\n\t\tif (!area_add_to_monitor_query_list(space_rid, monitor_query_list)) {\n\t\t\tERR_PRINT(\"Error adding area to monitor query list.\");\n\t\t}\n\t}\n}", "CodeBleu_score": 35.02707472588441}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space) {\n\t\tif (!space->area_add_to_monitor_query_list.in_list()) {\n\t\t\tspace->area_add_to_monitor_query_list.add_to_list(&space->area_add_to_monitor_query_list);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.33875819290591}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\n\tif (!get_space()) {\n\t\treturn;\n\t}\n\n\tif (!get_space()->area_add_to_monitor_query_list(this)) {\n\t\treturn;\n\t}\n}", "CodeBleu_score": 35.481892001815666}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (!body)\n\t\treturn;\n\n\tif (body->get_mode() == PhysicsServer::BODY_MODE_KINEMATIC)\n\t\treturn;\n\n\tTransform xform = get_transform();\n\tVector3 com = body->get_center_of_mass();\n\tcom = xform.xform(com);\n\tbody->set_center_of_mass(com);\n\n\tVector3 principal_inertia_axes[3];\n\tbody->get_principal_inertia_axes(principal_inertia_axes);\n\n\tfor (int i = 0; i < 3; i++) {\n\t\tprincipal_inertia_axes[i] = xform.basis.xform(principal_inertia_axes[i]);\n\t\tprincipal_inertia_axes[i].normalize();\n\t}\n\n\tbody->set_principal_inertia_axes(principal_inertia_axes);\n\n\tMatrix3 inertia_inv = body->get_inverse_inertia_tensor();\n\n\tMatrix3 inertia;\n\n\tfor (int i = 0; i < 3; i++) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tinertia[i][j] = 0;\n\t\t\tfor (int k = 0; k < 3; k++) {\n\t\t\t\tinertia[i][j] += inertia_inv[i][k] * principal_inertia_axes[k][j];\n\t\t\t}\n\t\t}\n\t}\n\n\tbody->set_inverse_inertia_tensor(inertia);\n}", "CodeBleu_score": 43.33562839163411}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t// recalculate center of mass\n\tcenter_of_mass = Vector3(0, 0, 0);\n\tfor (int i = 0; i < shapes.size(); i++) {\n\t\tif (shapes[i]->get_mode() == PhysicsServer::BODY_MODE_KINEMATIC) {\n\t\t\tcontinue;\n\t\t}\n\t\tcenter_of_mass += shapes[i]->get_transform().origin * shapes[i]->get_mass();\n\t}\n\tif (total_mass > CMP_EPSILON) {\n\t\tcenter_of_mass /= total_mass;\n\t}\n\n\t// recalculate principal inertia axes\n\tMatrix3 inertia_inv;\n\tVector3 inertia_axes[3];\n\tinertia_inv.set_axis(0, Vector3(1, 0, 0));\n\tinertia_inv.set_axis(1, Vector3(0, 1, 0));\n\tinertia_inv.set_axis(2, Vector3(0, 0, 1));\n\n\tfor (int i = 0; i < shapes.size(); i++) {\n\t\tif (shapes[i]->get_mode() == PhysicsServer::BODY_MODE_KINEMATIC) {\n\t\t\tcontinue;\n\t\t}\n\t\tMatrix3 inertia_inv_shape = shapes[i]->get_inertia_inv();\n\t\tMatrix3 xform = shapes[i]->get_transform().basis.get_orthogonal_index();\n\t\tinertia_inv = inertia_inv.xform(xform * inertia_inv_shape * xform.inverse());\n\t}\n\n\tinertia_inv.diagonalize(inertia_axes);\n\n\t// recalculate inertia tensor\n\tinertia_tensor = inertia_inv.inverse();\n\n\t// recalculate principal inertia axes\n\tfor (int i = 0; i < 3; i++) {\n\t\tprincipal_inertia_axes[i] = inertia_axes[i];\n\t}\n\n\t// recalculate inverse principal inertia axes\n\tfor (int i = 0; i < 3; i++) {\n\t\tinverse_principal_inertia_axes[i] = principal_inertia_axes[i].inverse();\n\t}\n\n\t// re", "CodeBleu_score": 38.953480978002716}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t// update center of mass\n\tif (mass_mode == MASS_MODE_CUSTOM_INERTIA) {\n\t\tcenter_of_mass = Vector3();\n\t} else {\n\t\tcenter_of_mass = Vector3();\n\t\tfor (int i = 0; i < shapes.size(); i++) {\n\t\t\tif (shapes[i]->get_mode()!= PhysicsServer3D::BODY_MODE_KINEMATIC) {\n\t\t\t\tcenter_of_mass += shapes[i]->get_transform().origin * shapes[i]->get_mass();\n\t\t\t}\n\t\t}\n\t\tif (mass!= 0) {\n\t\t\tcenter_of_mass /= mass;\n\t\t}\n\t}\n\n\t// update principal inertia axes\n\tif (mass_mode == MASS_MODE_CUSTOM_INERTIA) {\n\t\tprincipal_inertia_axes = Basis();\n\t} else {\n\t\tBasis rot_inv = get_transform().basis.inverse();\n\t\tBasis rot_inv_t = rot_inv.transposed();\n\t\tVector3 inertia_axes[3];\n\t\tVector3 inertia_axes_inv[3];\n\t\tVector3 inertia_axes_inv_t[3];\n\t\treal_t inertia_inv[3];\n\n\t\t// calculate inverse inertia tensor\n\t\tfor (int i = 0; i < shapes.size(); i++) {\n\t\t\tif (shapes[i]->get_mode()!= PhysicsServer3D::BODY_MODE_KINEMATIC) {\n\t\t\t\tBasis shape_basis = shapes[i]->get_transform().basis;\n\t\t\t\tVector3 shape_center_of_mass = shapes[i]->get_transform().origin - center_of_mass;\n\t\t\t\treal_t shape_mass = shapes[i]->get_mass();\n\t\t\t\treal_t shape_inertia_inv[3];\n\t\t\t\tshapes[i]->get_inertia_inv(shape_inertia_inv);\n\t\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\t\tinertia_inv[j] += shape_inertia_inv[j] + shape_mass * (shape_center_of_mass.length_squared() - shape_center_of_mass[j] * shape_center_of_mass", "CodeBleu_score": 43.709775391477294}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tAudioDriver::get_singleton()->update_mix_time(p_frames);\n\t}\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 75.14367368262911}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tAudioServer::get_singleton()->_driver_process(p_frames);\n\t}\n\tAudioServer::get_singleton()->process(p_frames, p_buffer);\n}", "CodeBleu_score": 66.12187342059275}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tAudioServer *audio_server = AudioServer::get_singleton();\n\tif (!audio_server) {\n\t\treturn;\n\t}\n\tif (p_update_mix_time) {\n\t\taudio_server->update_mix_time(p_frames);\n\t}\n\taudio_server->process(p_frames, p_buffer);\n}", "CodeBleu_score": 56.8487042296038}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i]->get_id() == p_feed->get_id()) {\n\t\t\tfeeds.remove_at(i);\n\t\t\tGDVIRTUAL_CALL(_feed_removed, p_feed->get_id());\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 40.32305127114505}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tif (p_feed.is_null()) {\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tif (feeds[i]->get_id()!= 0) {\n\t\t\t\tprint_verbose(\"Removing feed with ID \" + itos(feeds[i]->get_id()) + \" and position \" + itos(feeds[i]->get_position()) + \" and name \" + feeds[i]->get_name());\n\t\t\t}\n\t\t\tfeeds.remove_at(i);\n\t\t\temit_signal(\"feed_removed\", feeds[i]->get_id());\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.48370801221559}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tint feed_id = p_feed->get_id();\n\tint feed_position = p_feed->get_position();\n\tString feed_name = p_feed->get_name();\n\n\tfeeds.remove_at(feed_position);\n\tGDVIRTUAL_CALL(_feed_removed, feed_id);\n}", "CodeBleu_score": 31.49498483915918}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate))\n\t{\n\t\tret->autorelease();\n\t}\n\telse\n\t{\n\t\tCC_SAFE_DELETE(ret);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 44.02887108097598}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 48.70458256955082}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate))\n\t{\n\t\tret->autorelease();\n\t}\n\telse\n\t{\n\t\tCC_SAFE_DELETE(ret);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 44.02887108097598}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto child : node->getChildren()) {\n\t\tauto foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 48.868151806414254}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (auto child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.288009147694744}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (auto child : node->getChildren()) {\n\t\tauto found = findChildByNameRecursively(child, childName);\n\t\tif (found) {\n\t\t\treturn found;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 47.607202849730236}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\tif (m_target) {\n\t\tif (m_target->getActionByTag(m_tag) == this) {\n\t\t\tif (m_running) {\n\t\t\t\ts_runningAnimates.erase(m_target);\n\t\t\t}\n\t\t\telse if (m_fadeIn) {\n\t\t\t\ts_fadeInAnimates.erase(m_target);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts_fadeOutAnimates.erase(m_target);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 21.973532532924125}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (m_target) {\n\t\tif (m_target->isRunning()) {\n\t\t\tauto iter = s_runningAnimates.find(m_target);\n\t\t\tif (iter!= s_runningAnimates.end()) {\n\t\t\t\ts_runningAnimates.erase(iter);\n\t\t\t}\n\t\t}\n\n\t\tauto iter = s_fadeInAnimates.find(m_target);\n\t\tif (iter!= s_fadeInAnimates.end()) {\n\t\t\ts_fadeInAnimates.erase(iter);\n\t\t}\n\n\t\titer = s_fadeOutAnimates.find(m_target);\n\t\tif (iter!= s_fadeOutAnimates.end()) {\n\t\t\ts_fadeOutAnimates.erase(iter);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.89761788389125}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (m_target) {\n\t\tauto it = s_runningAnimates.find(m_target);\n\t\tif (it!= s_runningAnimates.end() && it->second == this) {\n\t\t\ts_runningAnimates.erase(it);\n\t\t}\n\n\t\tit = s_fadeInAnimates.find(m_target);\n\t\tif (it!= s_fadeInAnimates.end() && it->second == this) {\n\t\t\ts_fadeInAnimates.erase(it);\n\t\t}\n\n\t\tit = s_fadeOutAnimates.find(m_target);\n\t\tif (it!= s_fadeOutAnimates.end() && it->second == this) {\n\t\t\ts_fadeOutAnimates.erase(it);\n\t\t}\n\t}\n}", "CodeBleu_score": 73.63089278185258}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string fullPath = FileUtils::getInstance()->fullPathForFilename(fileName);\n\tstd::string key = fullPath + animationName;\n\tAnimation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\n\tif (animation) {\n\t\treturn animation;\n\t}\n\tanimation = new (std::nothrow) Animation3D();\n\tif (animation && animation->initWithFile(fileName, animationName)) {\n\t\tanimation->autorelease();\n\t\tAnimation3DCache::getInstance()->addAnimation(animation, key);\n\t}\n\telse {\n\t\tCC_SAFE_DELETE(animation);\n\t}\n\treturn animation;\n}", "CodeBleu_score": 77.12035357965267}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\n\tif (animation) {\n\t\treturn animation;\n\t}\n\n\tanimation = new (std::nothrow) Animation3D();\n\tif (animation && animation->initWithFile(fileName, animationName)) {\n\t\tanimation->autorelease();\n\t\tAnimation3DCache::getInstance()->addAnimation(animation, key);\n\t} else {\n\t\tCC_SAFE_DELETE(animation);\n\t}\n\n\treturn animation;\n}", "CodeBleu_score": 58.8522965849699}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tstd::string fullPath = FileUtils::getInstance()->fullPathForFilename(fileName);\nstd::string key = fullPath + animationName;\nAnimation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\nif (animation == nullptr) {\nanimation = new (std::nothrow) Animation3D();\nif (animation && animation->initWithFile(fullPath, animationName)) {\nanimation->autorelease();\nAnimation3DCache::getInstance()->addAnimation(animation, key);\n} else {\nCC_SAFE_DELETE(animation);\n}\n}\nreturn animation;\n}", "CodeBleu_score": 76.31096805678452}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor = _animations.begin(); itor!= _animations.end();) {\n\t\tif (itor->second->getReferenceCount() == 1) {\n\t\t\titor->second->release();\n\t\t\t_animations.erase(itor++);\n\t\t}\n\t\telse {\n\t\t\titor++;\n\t\t}\n\t}\n}", "CodeBleu_score": 66.29895384946767}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\t//CCLOG(\"removeUnusedAnimation\");\n\tauto itor = _animations.begin();\n\twhile (itor!= _animations.end()) {\n\t\tif (itor->second->getReferenceCount() == 1) {\n\t\t\titor->second->release();\n\t\t\t_animations.erase(itor++);\n\t\t}\n\t\telse {\n\t\t\t++itor;\n\t\t}\n\t}\n}", "CodeBleu_score": 62.84212620596041}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor = _animations.begin(); itor!= _animations.end();) {\n\t\tif (itor->second->getReferenceCount() == 1) {\n\t\t\titor->second->release();\n\t\t\titor = _animations.erase(itor);\n\t\t} else {\n\t\t\t++itor;\n\t\t}\n\t}\n}", "CodeBleu_score": 78.62902760549223}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard* billboard = new (std::nothrow) BillBoard();\n\tif (billboard && billboard->initWithTexture(texture, mode)) {\n\t\tbillboard->autorelease();\n\t\treturn billboard;\n\t}\n\tCC_SAFE_DELETE(billboard);\n\treturn nullptr;\n}", "CodeBleu_score": 72.38299441261782}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *billboard = new (std::nothrow) BillBoard();\n\tif (billboard && billboard->initWithTexture(texture, mode)) {\n\t\tbillboard->autorelease();\n\t\treturn billboard;\n\t}\n\tCC_SAFE_DELETE(billboard);\n\treturn nullptr;\n}", "CodeBleu_score": 75.81205887196573}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *billboard = new (std::nothrow) BillBoard();\n\tif (billboard && billboard->initWithTexture(texture, mode)) {\n\t\tbillboard->autorelease();\n\t\treturn billboard;\n\t}\n\tCC_SAFE_DELETE(billboard);\n\treturn nullptr;\n}", "CodeBleu_score": 75.81205887196573}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\tf (path.empty() || _path == path) {\n\t\treturn false;\n\t}\n\tclear();\n\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(path);\n\tif (ext == \"c3t\") {\n\t\treturn loadJson(path);\n\t} else if (ext == \"c3b\") {\n\t\treturn loadBinary(path);\n\t} else {\n\t\tCCLOGWARN(\"Invalid file format: %s\", path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 40.116951256346276}, {"code": "bool Bundle3D::load(const std::string& path){\n\tf (path.empty() || _path == path)\n\t\treturn false;\n\n\t_path = path;\n\tstd::string extension = FileUtils::getInstance()->getFileExtension(path);\n\tif (extension == \"c3t\")\n\t\treturn loadJson(path);\n\telse if (extension == \"c3b\")\n\t\treturn loadBinary(path);\n\telse {\n\t\tCCLOGWARN(\"Invalid file format: %s\", path.c_str());\n\t\t_path.clear();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 40.8561596929087}, {"code": "bool Bundle3D::load(const std::string& path){\n\tf (path.empty() || _path == path) {\n\t\treturn false;\n\t}\n\t_path.clear();\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(path);\n\tif (ext == \"c3t\") {\n\t\tif (loadJson(path)) {\n\t\t\t_path = path;\n\t\t\treturn true;\n\t\t}\n\t} else if (ext == \"c3b\") {\n\t\tif (loadBinary(path)) {\n\t\t\t_path = path;\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tCCLOG(\"Bundle3D: Invalid file format: %s\", path.c_str());\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.57471513352848}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tif (m_binaryFormat) {\n\t\treturn loadSkinDataBinary(skindata);\n\t} else {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 84.89059988260071}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tif (isBinary) {\n\t\treturn loadSkinDataBinary(skindata);\n\t} else {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 85.2395349305711}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tif (m_binary) {\n\t\treturn loadSkinDataBinary(skindata);\n\t}\n\treturn loadSkinDataJson(skindata);\n}", "CodeBleu_score": 67.57113676699754}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t readBytes = 0;\n\tif (thiz->_fileData.getSize() > 0) {\n\t\tsize_t remainingBytes = thiz->_fileData.getSize() - thiz->_fileData.getPosition();\n\t\treadBytes = std::min(remainingBytes, size * nmemb);\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), readBytes);\n\t\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + readBytes);\n\t}\n\treturn readBytes;\n}", "CodeBleu_score": 57.46829878725389}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = std::min(thiz->_fileData.getSize() - thiz->_currentFilePosition, size * nmemb);\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_currentFilePosition, bytesToRead);\n\t\tthiz->_currentFilePosition += bytesToRead;\n\t}\n\treturn bytesToRead;\n}", "CodeBleu_score": 60.81769284954801}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t readSize = 0;\n\tif (thiz->_fileData.getSize() > 0) {\n\t\treadSize = std::min(thiz->_fileData.getSize(), size * nmemb);\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), readSize);\n\t\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + readSize);\n\t}\n\treturn readSize;\n}", "CodeBleu_score": 56.86790451389443}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\t_pcmBuffer = std::make_shared<std::vector<char>>();\n\t_pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 45.76869405574416}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\tpcmBuffer = std::make_shared<std::vector<char>>();\n\tpcmBuffer->reserve(4096);\n}", "CodeBleu_score": 51.02367217290248}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\tpcmBuffer = std::make_shared<std::vector<char>>();\n\tpcmBuffer->reserve(4096);\n}", "CodeBleu_score": 51.02367217290248}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> lock(sDownloaderMapMutex);\n\tauto iter = sDownloaderMap.find(id);\n\tif (iter!= sDownloaderMap.end()) {\n\t\treturn iter->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 70.52241126746871}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::unique_lock<std::mutex> lock(sDownloaderMapMutex);\n\tauto iter = sDownloaderMap.find(id);\n\tif (iter!= sDownloaderMap.end()) {\n\t\treturn iter->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 69.24213388334057}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> lock(sDownloaderMapMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it!= sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 62.665813195247466}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then isLoop = true end\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 42.4458974139597}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then isLoop = true end\n\taudio.playMusic(filename, isLoop)", "CodeBleu_score": 30.219704731268155}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tisLoop = true\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 42.53778942752714}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\treturn false", "CodeBleu_score": 4.655679712484486}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn ", "CodeBleu_score": 4.586004115149545}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn true", "CodeBleu_score": 6.1421887418480186}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\treturn self.triggerobj_ptr:removeAll()", "CodeBleu_score": 7.47683593962577}, {"code": "function ccs.TriggerObj:removeAll()\n\t\treturn self.table.removeAll", "CodeBleu_score": 6.577754502020751}, {"code": "function ccs.TriggerObj:removeAll()\n\t\treturn self.obj:removeAll()", "CodeBleu_score": 7.470650631914684}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.Sprite3D:create(\"res/hurt.c3b\")\n\thurtEffect:setScale(0.1)\n\thurtEffect:setPosition3D(cc.V3(0, 20, 0))\n\tlocal hurtAnimation = animationCache:getAnimation(\"hurtAnimation\")\n\thurtEffect:runAction(cc.Sequence:create(cc.Animate:create(hurtAnimation), cc.RemoveSelf:create()))\n\ttarget:addChild(hurtEffect, 100, 100)\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)", "CodeBleu_score": 60.37617046374064}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.Sprite3D:create(\"res/hurt.c3b\")\n\thurtEffect:setScale(1.5)\n\thurtEffect:setPosition3D(cc.V3(0, 1.5, 0))\n\thurtEffect:runAction(cc.Sequence:create(cc.Animate:create(animationCache:getAnimation(\"hurtAnimation\")), cc.RemoveSelf:create()))\n\ttarget:addChild(hurtEffect, 100, 100)\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)", "CodeBleu_score": 55.5507356129058}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create()\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)\n\thurtEffect:setScale(0.5)\n\thurtEffect:setPosition3D(cc.V3(0,0,0))\n\thurtEffect:runAction(cc.Sequence:create(cc.Animate:create(animationCache:getAnimation(\"hurtAnimation\")), cc.RemoveSelf:create()))\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 61.79467530053472}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tself:runAction(cc.Sequence:create(cc.DelayTime:create(0.5), cc.RemoveSelf:create()))\n\tlocal magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"mage_normal_attack\"))\n\tself:addChild(magic)\n\tmagic:setGlobalZOrder(999)\n\tmagic:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"mage_normal_attack.png\"))\n\tmagic:setRotation3D(cc.Vertex3F(0, 0, 0))\n\tlocal magicf = magic:getTexture()\n\tmagic:setTextureRect(cc.rect(0, 0, magicf:getRect().width, magicf:getRect().height))\n\tself:setCameraMask(cc.CameraFlag.USER1)\n\tself.sp:setTextureRect(cc.rect(0, 0, magicf:getRect().width, magicf:getRect().height))\n\tself.sp:runAction(cc.FadeOut:create(0.5))\n\tself.sp:setScale(0.5)", "CodeBleu_score": 64.55141632331781}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tself:runAction(cc.Sequence:create(cc.DelayTime:create(0.2), cc.RemoveSelf:create()))\n\tlocal magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"mage_normal_attack\"))\n\tself:addChild(magic)\n\tmagic:setPosition(self.sp:getPosition())\n\tmagic:setGlobalZOrder(self:getGlobalZOrder())\n\tmagic:setScale(1.5)\n\tmagic:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"mage_normal_attack.png\"))\n\tmagic:setRotation3D(cc.Vertex3F(0, 0, 0))\n\tlocal magicf = magic:getTexture()\n\tmagic:setTextureRect(cc.rect(0, 0, magicf:getRect().width, magicf:getRect().height))\n\tself.sp:setTextureRect(cc.rect(0, 0, magicf:getRect().width, magicf:getRect().height))\n\tself.sp:runAction(cc.FadeOut:create(0.1))\n\tself.sp:setScale(2)", "CodeBleu_score": 65.02840904373987}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tself:runAction(cc.Sequence:create(cc.DelayTime:create(1.0), cc.RemoveSelf:create()))\n\tlocal magic = cc.ParticleSystemQuad:create(\"res/particle/mage_normal_attack.plist\")\n\tself:addChild(magic)\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"mage_normal_attack.png\")\n\tmagic:setGlobalZOrder(9999)\n\tmagic:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tmagic:setRotation3D(cc.Vertex3F(0, 0, 0))\n\tmagic:setPositionZ(0)\n\tmagic:setScale(self.sp:getScale())\n\tmagic:runAction(cc.FadeOut:create(1.0))\n\tself.sp:setTextureRect(cc.ParticleManager:getInstance():getPlistData(\"mage_normal_attack\"):getTexture():getTextureRect())", "CodeBleu_score": 63.69961877904565}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\tself.KnightImage:setGreyShader()\n\t\tself.KnightFrame:setGreyShader()\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\telseif hero.name == \"Mage\" then\n\t\tself.MageImage:setGreyShader()\n\t\tself.MageFrame:setGreyShader()\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\telseif hero.name == \"Archer\" then\n\t\tself.ArcherImage:setGreyShader()\n\t\tself.ArcherFrame:setGreyShader()\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\tend", "CodeBleu_score": 49.69008835591329}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\tself.KnightImage:setGreyShader()\n\t\tself.KnightFrame:setGreyShader()\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\telseif hero.name == \"Archer\" then\n\t\tself.ArcherImage:setGreyShader()\n\t\tself.ArcherFrame:setGreyShader()\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\telseif hero.name == \"Mage\" then\n\t\tself.MageImage:setGreyShader()\n\t\tself.MageFrame:setGreyShader()\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngryFullSignal:setVisible(false)\n\tend", "CodeBleu_score": 47.539741195966265}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero == \"Knight\" then\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightImage:setGreyShader(true)\n\t\tself.KnightFrame:setGreyShader(true)\n\telseif hero == \"Mage\" then\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageImage:setGreyShader(true)\n\t\tself.MageFrame:setGreyShader(true)\n\telseif hero == \"Archer\" then\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherImage:setGreyShader(true)\n\t\tself.ArcherFrame:setGreyShader(true)\n\tend", "CodeBleu_score": 42.812570072808576}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tlocal camera = self.camera\n\tif self.specialCamera then\n\t\tlocal target = self.specialCamera.target\n\t\tlocal lookAt = self.specialCamera.lookAt\n\t\tlocal pos = camera:getPosition3D()\n\t\tlocal x, y, z = pos.x, pos.y, pos.z\n\t\tlocal targetX, targetY, targetZ = target.x, target.y, target.z\n\t\tlocal lookAtX, lookAtY, lookAtZ = lookAt.x, lookAt.y, lookAt.z\n\t\tlocal distance = cc.pDistance(target, lookAt)\n\t\tlocal duration = self.specialCamera.duration\n\t\tlocal t = self.specialCamera.t\n\t\tlocal t = t + dt / duration\n\t\tif t > 1 then\n\t\t\tt = 1\n\t\tend\n\t\tlocal t2 = t * t\n\t\tlocal t3 = t2 * t\n\t\tlocal t4 = t3 * t\n\t\tlocal t5 = t4 * t\n\t\tlocal x = targetX + (x - targetX) * (10 * t5 - 15 * t4 + 6 * t3)\n\t\tlocal y = targetY + (y - targetY) * (10 * t5 - 15 * t4 + 6 * t3)\n\t\tlocal z = targetZ + (z - targetZ) * (10 * t5 - 15 * t4 + 6 * t3)\n\t\tcamera:setPosition3D(cc.V3(x, y, z))\n\t\tcamera:lookAt(lookAt)\n\t\tself.specialCamera.t = t\n\t\tif t == 1 then\n\t\t\tself.specialCamera = nil\n\t\tend\n\telseif self.heroes.count > 0 then\n\t\tlocal focusPoint = self:getFocusPointOfHeros()\n\t\tlocal pos = camera:getPosition3D()\n\t\tlocal x, y, z = pos.x, pos.y, pos.z\n\t\tlocal focusPointX, focusPointY, focusPointZ = focusPoint.x, focusPoint.y, focusPoint.z\n\t\tlocal distance = cc.pDistance(focusPoint, cc.p(x, z))\n\t\tlocal duration = 0.5\n\t\tlocal t = self", "CodeBleu_score": 43.048994991773796}, {"code": "local function moveCamera(dt)\n\t\t-- If a special camera is active, interpolate the camera position towards a special target and set the camera to look at a specified point\n\tif self.specialCameraActive then\n\t\tself.camera:setPosition(cc.pLerp(self.camera:getPosition(), self.specialCameraTarget, dt * 10))\n\t\tself.camera:lookAt(self.specialCameraLookAt, cc.V3(0, 1, 0))\n\t-- If there are active heroes, interpolate the camera position towards the focus point of the heroes and set the camera to look at that point\n\telseif self.activeHeroes:getSize() > 0 then\n\t\tself.camera:setPosition(cc.pLerp(self.camera:getPosition(), self:getFocusPointOfHeros(), dt * 10))\n\t\tself.camera:lookAt(self:getFocusPointOfHeros(), cc.V3(0, 1, 0))\n\tend", "CodeBleu_score": 23.424496754921453}, {"code": "local function moveCamera(dt)\n\t\t-- if a special camera is active, interpolate the camera position towards a special target and set the camera to look at a specified point\n\tif (specialCamera ~= nil) then\n\t\t-- interpolate the camera position towards a special target\n\t\tlocal newPos = cc.pLerp(camera:getPosition(), specialCamera.target, dt * specialCamera.speed)\n\t\tcamera:setPosition(newPos)\n\t\t-- set the camera to look at a specified point\n\t\tcamera:lookAt(specialCamera.lookAt)\n\t-- if there are active heroes, interpolate the camera position towards the focus point of the heroes and set the camera to look at that point\n\telseif (List.getSize(activeHeros) > 0) then\n\t\t-- interpolate the camera position towards the focus point of the heroes\n\t\tlocal newPos = cc.pLerp(camera:getPosition(), getFocusPointOfHeros(), dt * cameraSpeed)\n\t\tcamera:setPosition(newPos)\n\t\t-- set the camera to look at the focus point of the heroes\n\t\tcamera:lookAt(getFocusPointOfHeros())\n\tend", "CodeBleu_score": 26.102419431307176}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tlocal heroes = HeroManager.heroes\n\tfor i=1, #heroes do\n\t\tlocal hero = heroes[i]\n\t\tif hero._effectNode ~= nil then\n\t\t\thero._effectNode:setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 47.17566219388509}, {"code": "local function updateParticlePos()\n\t\tlocal heroes = HeroManager.heroes\n\tfor i,hero in ipairs(heroes) do\n\t\tif hero._effectNode ~= nil then\n\t\t\thero._effectNode:setPosition(hero.sprite:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 38.2571261835671}, {"code": "local function updateParticlePos()\n\t\tfor _,hero in pairs(HeroManager._heroes) do\n\t\tif hero._effectNode then\n\t\t\thero._effectNode:setPosition(hero._sprite:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 23.59953053563057}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.currentHeroTag)\n\tlocal raceType = hero:getRaceType()\n\tif raceType == \"Knight\" then\n\t\tccexp.AudioEngine:play2d(\"audio/knight_rotate.mp3\")\n\telseif raceType == \"Archer\" then\n\t\tccexp.AudioEngine:play2d(\"audio/archer_rotate.mp3\")\n\telseif raceType == \"Mage\" then\n\t\tccexp.AudioEngine:play2d(\"audio/mage_rotate.mp3\")\n\tend", "CodeBleu_score": 48.69968926394329}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.currentHeroTag)\n\tlocal heroRace = hero:getRaceType()\n\tif heroRace == 1 then\n\t\taudio.playEffect(audio.knight_audio)\n\telseif heroRace == 2 then\n\t\taudio.playEffect(audio.archer_audio)\n\telseif heroRace == 3 then\n\t\taudio.playEffect(audio.mage_audio)\n\tend", "CodeBleu_score": 41.346730153554006}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.curHeroTag)\n\tlocal heroType = hero:getRaceType()\n\tif heroType == 1 then\n\t\tccexp.AudioEngine:play2d(\"audio/knight_intro.mp3\")\n\telseif heroType == 2 then\n\t\tccexp.AudioEngine:play2d(\"audio/archer_intro.mp3\")\n\telseif heroType == 3 then\n\t\tccexp.AudioEngine:play2d(\"audio/mage_intro.mp3\")\n\tend", "CodeBleu_score": 46.63012321419251}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\t--Create the heros\n\tlocal knight = Knight:create()\n\tlocal mage = Mage:create()\n\tlocal archer = Archer:create()\n\t\n\t--Set their positions\n\tknight:setPosition(cc.p(100, 100))\n\tmage:setPosition(cc.p(300, 100))\n\tarcher:setPosition(cc.p(500, 100))\n\t\n\t--Add them to the current layer\n\tcurrentLayer:addChild(knight)\n\tcurrentLayer:addChild(mage)\n\tcurrentLayer:addChild(archer)\n\t\n\t--Set them to idle mode\n\tknight:idleMode()\n\tmage:idleMode()\n\tarcher:idleMode()\n\t\n\t--Add them to the hero list\n\tList.pushlast(heroList, knight)\n\tList.pushlast(heroList, mage)\n\tList.pushlast(heroList, archer)", "CodeBleu_score": 65.70403750347171}, {"code": "function GameMaster:AddHeros()\n\t\t-- Create Knight\n\tlocal knight = Knight:create()\n\tknight:setPosition(cc.p(400, 300))\n\tcurrentLayer:addChild(knight, 100)\n\tknight:idleMode()\n\tHeroManager:pushlast(knight)\n\n\t-- Create Mage\n\tlocal mage = Mage:create()\n\tmage:setPosition(cc.p(500, 300))\n\tcurrentLayer:addChild(mage, 100)\n\tmage:idleMode()\n\tHeroManager:pushlast(mage)\n\n\t-- Create Archer\n\tlocal archer = Archer:create()\n\tarcher:setPosition(cc.p(600, 300))\n\tcurrentLayer:addChild(archer, 100)\n\tarcher:idleMode()\n\tHeroManager:pushlast(archer)", "CodeBleu_score": 65.72918697417624}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:create()\n\tknight:setPosition(cc.p(200, 100))\n\tcurrentLayer:addChild(knight)\n\tknight:idleMode()\n\tList.pushlast(HeroManager, knight)\n\n\tlocal mage = Mage:create()\n\tmage:setPosition(cc.p(400, 100))\n\tcurrentLayer:addChild(mage)\n\tmage:idleMode()\n\tList.pushlast(HeroManager, mage)\n\n\tlocal archer = Archer:create()\n\tarcher:setPosition(cc.p(600, 100))\n\tcurrentLayer:addChild(archer)\n\tarcher:idleMode()\n\tList.pushlast(HeroManager, archer)", "CodeBleu_score": 76.70110799935416}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss:setCameraMask(self.layer:getCameraMask())\n\tself.layer:add(boss)\n\tboss.x = 100\n\tboss.y = 100\n\tboss:setFacingDirection(1)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 33.11959625997126}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss:setCameraMask(self.cameraMask)\n\tself.currentLayer:addChild(boss)\n\tboss:setPosition(cc.p(100, 100))\n\tboss:setFacingDirection(1)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 31.010118128235796}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss:setCameraMask(2)\n\tself.layer:addChild(boss)\n\tboss.x, boss.y = 100, 100\n\tboss.direction = 2\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 28.764868357784913}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animate3d = cc.Animation3D:create(file)\n\tanimate3d:setSpeed(speed)\n\tanimate3d:retain()\n\treturn cc.Animate3D:create(animate3d, begin, finish)", "CodeBleu_score": 50.3389584378126}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animate3d = cc.Animation3D:create(file)\n\tanimate3d:setSpeed(speed)\n\tanimate3d:retain()\n\treturn cc.Animate3D:create(animate3d, begin, finish)", "CodeBleu_score": 50.3389584378126}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animate3d = cc.Animation3D:create(file)\n\tanimate3d:setSpeed(speed)\n\tanimate3d:retain()\n\treturn cc.Animate3D:create(animate3d, begin, finish)", "CodeBleu_score": 50.3389584378126}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i = #table, 1, -1 do\n\t\ttable.remove(table, i)\n\tend", "CodeBleu_score": 26.38272589103877}, {"code": "function removeAll(table)\n\t\tfor k, v in pairs(table) do\n\t\ttable[k] = nil\n\tend", "CodeBleu_score": 37.567300370186686}, {"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do\n\t\ttable[k] = nil\n\tend", "CodeBleu_score": 37.457832536187205}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal delay = cc.DelayTime:create(delay)\n\tlocal callback = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delay, callback)\n\ttarget:runAction(sequence)", "CodeBleu_score": 56.666544395288085}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delay = cc.DelayTime:create(delay)\n\tlocal callback = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(delay, callback)\n\ttarget:runAction(seq)", "CodeBleu_score": 57.493924177593605}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n\ttarget:runAction(action)", "CodeBleu_score": 59.82560730608639}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal label = cc.Label:createWithTTF(self.loadingText, \"fonts/Marker Felt.ttf\", 32)\n\tlabel:setPosition(cc.p(display.cx, display.cy))\n\tlayer:addChild(label)\n\ttable.insert(self._loading, label)", "CodeBleu_score": 18.457182555692064}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal text = cc.Label:createWithTTF(\n\t\t\"Loading...\",\n\t\t\"fonts/Marker Felt.ttf\",\n\t\t64\n\t)\n\ttext:setPosition(display.cx, display.cy)\n\tlayer:addChild(text)\n\tself._loading = text", "CodeBleu_score": 15.497804775709428}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal font = \"fonts/Marker Felt.ttf\"\n\tlocal fontSize = 24\n\tlocal text = \"loading\"\n\tlocal x = display.cx\n\tlocal y = display.cy\n\tlocal label = cc.Label:createWithTTF(text, font, fontSize)\n\tlabel:setPosition(x, y)\n\tlayer:addChild(label)\n\tself._loading = {label}", "CodeBleu_score": 27.39009813539834}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:createLayer()\n\tscene:addChild(scene.layer)\n\treturn scene", "CodeBleu_score": 57.49588988684005}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:createLayer()\n\treturn scene", "CodeBleu_score": 48.64033735784464}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:createLayer()\n\treturn scene", "CodeBleu_score": 48.64033735784464}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\tlocal objectType = object.type\n\tlocal objectX, objectY = object.x, object.y\n\tlocal objectWidth, objectHeight = object.width, object.height\n\tlocal objectX2, objectY2 = objectX + objectWidth, objectY + objectHeight\n \n\tlocal heroes = HeroManager.getAliveHeroes()\n\tlocal monsters = MonsterManager.getAliveMonsters()\n\tlocal objects = {}\n\tfor i = 1, #heroes do\n\t\tobjects[#objects + 1] = heroes[i]\n\tend\n\tfor i = 1, #monsters do\n\t\tobjects[#objects + 1] = monsters[i]\n\tend\n \n\tfor i = 1, #objects do\n\t\tlocal object2 = objects[i]\n\t\tlocal object2Type = object2.type\n\t\tlocal object2X, object2Y = object2.x, object2.y\n\t\tlocal object2Width, object2Height = object2.width, object2.height\n\t\tlocal object2X2, object2Y2 = object2X + object2Width, object2Y + object2Height\n \n\t\tif objectType == \"monster\" and object2Type == \"hero\" then\n\t\t\tif objectX < object2X2 and objectX2 > object2X and objectY < object2Y2 and objectY2 > object2Y then\n\t\t\t\tsolveCollision(object, object2)\n\t\t\tend\n\t\telseif objectType == \"hero\" and object2Type == \"monster\" then\n\t\t\tif objectX < object2X2 and objectX2 > object2X and objectY < object2Y2 and objectY2 > object2Y then\n\t\t\t\tsolveCollision(object, object2)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 39.055714773529644}, {"code": "local function collision(object)\n\n\t\t-- Check for collisions with heroes\n\tfor i, hero in ipairs(HeroManager.heroes) do\n\t\tif object:collidesWith(hero) then\n\t\t\tsolveCollision(object, hero)\n\t\tend\n\tend\n \n\t-- Check for collisions with monsters\n\tfor i, monster in ipairs(MonsterManager.monsters) do\n\t\tif object:collidesWith(monster) then\n\t\t\tsolveCollision(object, monster)\n\t\tend\n\tend\n ", "CodeBleu_score": 29.496602581626952}, {"code": "local function collision(object)\n\n\t\t-- Check for collisions between the given object and all alive heroes\n\tfor i, hero in ipairs(HeroManager.heroes) do\n\t\tif hero.alive then\n\t\t\tif object:collidesWith(hero) then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend\n \n\t-- Check for collisions between the given object and all alive monsters\n\tfor i, monster in ipairs(MonsterManager.monsters) do\n\t\tif monster.alive then\n\t\t\tif object:collidesWith(monster) then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 32.86018987766097}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor i = #HeroManager.spriteList, 1, -1 do\n\t\tlocal sprite = HeroManager.spriteList[i]\n\t\tif sprite.alive then\n\t\t\tif sprite.isOutOfBound() then\n\t\t\t\tsprite.alive = false\n\t\t\t\tHeroManager.spriteList.remove(sprite)\n\t\t\tend\n\t\t\tsprite.updatePosition(dt)\n\t\telse\n\t\t\tHeroManager.spriteList.remove(sprite)\n\t\tend\n\tend\n\tfor i = #MonsterManager.spriteList, 1, -1 do\n\t\tlocal sprite = MonsterManager.spriteList[i]\n\t\tif sprite.alive then\n\t\t\tif sprite.isOutOfBound() then\n\t\t\t\tsprite.alive = false\n\t\t\t\tMonsterManager.spriteList.remove(sprite)\n\t\t\tend\n\t\t\tsprite.updatePosition(dt)\n\t\t\tif sprite.collision(HeroManager.spriteList) then\n\t\t\t\tsprite.alive = false\n\t\t\t\tMonsterManager.spriteList.remove(sprite)\n\t\t\t\tHeroManager.spriteList.remove(HeroManager.spriteList[1])\n\t\t\tend\n\t\telse\n\t\t\tMonsterManager.spriteList.remove(sprite)\n\t\tend\n\tend", "CodeBleu_score": 44.85770287053942}, {"code": "function collisionDetect(dt)\n\t\tfor i = #MonsterManager.monsterList, 1, -1 do\n\t\tlocal monster = MonsterManager.monsterList[i]\n\t\tif monster.isAlive then\n\t\t\tif monster:isOutOfBound() then\n\t\t\t\tmonster:destroy()\n\t\t\tend\n\t\t\tfor j = #HeroManager.heroList, 1, -1 do\n\t\t\t\tlocal hero = HeroManager.heroList[j]\n\t\t\t\tif hero.isAlive then\n\t\t\t\t\tif monster:collision(hero) then\n\t\t\t\t\t\tmonster:destroy()\n\t\t\t\t\t\thero:destroy()\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\ttable.remove(HeroManager.heroList, j)\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\ttable.remove(MonsterManager.monsterList, i)\n\t\tend\n\tend", "CodeBleu_score": 34.05768337269113}, {"code": "function collisionDetect(dt)\n\t\tfor i = #MonsterManager.monsterList, 1, -1 do\n\t\tlocal monster = MonsterManager.monsterList[i]\n\t\tif monster.isAlive then\n\t\t\tlocal monsterRect = monster._effectNode:getBoundingBox()\n\t\t\tfor j = #HeroManager.heroList, 1, -1 do\n\t\t\t\tlocal hero = HeroManager.heroList[j]\n\t\t\t\tif hero.isAlive then\n\t\t\t\t\tlocal heroRect = hero._effectNode:getBoundingBox()\n\t\t\t\t\tif cc.rectIntersectsRect(monsterRect, heroRect) then\n\t\t\t\t\t\tmonster:onCollision(hero)\n\t\t\t\t\t\thero:onCollision(monster)\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\ttable.remove(HeroManager.heroList, j)\n\t\t\t\tend\n\t\t\tend\n\t\t\tif isOutOfBound(monster) then\n\t\t\t\tmonster:onOutOfBound()\n\t\t\tend\n\t\telse\n\t\t\ttable.remove(MonsterManager.monsterList, i)\n\t\tend\n\tend", "CodeBleu_score": 39.675323957768796}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tlocal attackCollider = Collider.create(self.x, self.y, self.width, self.height, self.facingDirection, self.attackProperties)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 54.011033165637734}, {"code": "function Actor:specialAttack()\n\t\tlocal specialAttackCollider = BasicCollider.create(self.x, self.y, self.facingDirection, self.specialAttackProperties)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 56.23113626672929}, {"code": "function Actor:specialAttack()\n\t\tlocal attackCollider = Collider:new(self.x, self.y, self.width, self.height, self.direction, self.specialAttackProperties)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 53.61979752966361}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif (trueFalse == true) then\n\t\tif (self._angry == false) then\n\t\t\tself._sprite3d:setTexture(\"slime_angry.png\")\n\t\t\tself._angry = true\n\t\tend\n\telse\n\t\tif (self._angry == true) then\n\t\t\tself._sprite3d:setTexture(\"slime.png\")\n\t\t\tself._angry = false\n\t\tend\n\tend", "CodeBleu_score": 48.52075073595464}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse ~= self._angryFace then\n\t\tself._angryFace = trueFalse\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\"slime_angry.png\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"slime.png\")\n\t\tend\n\tend", "CodeBleu_score": 69.2737035319754}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true then\n\t\tif self._sprite3d:getTexture() ~= self._angryTexture then\n\t\t\tself._sprite3d:setTexture(self._angryTexture)\n\t\tend\n\telse\n\t\tif self._sprite3d:getTexture() ~= self._normalTexture then\n\t\t\tself._sprite3d:setTexture(self._normalTexture)\n\t\tend\n\tend", "CodeBleu_score": 41.43532848841032}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval text = char.toString()\n\tval textWidth = getGlyphWidth(text)\n\tval textHeight = getGlyphHeight(text)\n\tval bitmap = Bitmap.createBitmap(textWidth, textHeight, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tval paint = Paint()\n\tpaint.isAntiAlias = true\n\tpaint.textSize = fontSize.toFloat()\n\tpaint.color = Color.WHITE\n\tcanvas.drawText(text, 0f, textHeight.toFloat(), paint)\n\tval pixmap = Pixmap(textWidth, textHeight, Pixmap.Format.RGBA8888)\n\tval pixels = IntArray(textWidth * textHeight)\n\tbitmap.getPixels(pixels, 0, textWidth, 0, 0, textWidth, textHeight)\n\tpixmap.setPixels(pixels, 0, textWidth, 0, 0, textWidth, textHeight)\n\tbitmap.recycle()\n\treturn pixmap\n}", "CodeBleu_score": 42.12044711635554}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval font = getFont()\n\tval fontSize = getFontSize()\n\tval metrics = getMetrics()\n\tval canvas = Canvas()\n\tval bitmap = Bitmap.createBitmap(metrics.width, metrics.height, Bitmap.Config.ARGB_8888)\n\tcanvas.setBitmap(bitmap)\n\tcanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)\n\tcanvas.drawText(char.toString(), 0f, metrics.height.toFloat(), font)\n\tval pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\n\tval pixels = IntArray(bitmap.width * bitmap.height)\n\tbitmap.getPixels(pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n\tpixmap.setPixels(pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n\tbitmap.recycle()\n\treturn pixmap\n}", "CodeBleu_score": 37.58708150481666}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval fontMetrics = getMetrics(char)\n\tval width = fontMetrics.width\n\tval height = fontMetrics.height\n\tval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tval paint = Paint()\n\tpaint.isAntiAlias = true\n\tpaint.textSize = getFontSize(char)\n\tpaint.color = Color.WHITE\n\tcanvas.drawText(char.toString(), 0f, height - 1f, paint)\n\tval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n\tval buffer = IntArray(width * height)\n\tbitmap.getPixels(buffer, 0, width, 0, 0, width, height)\n\tpixmap.setPixels(buffer, 0, width, 0, 0, width, height)\n\tbitmap.recycle()\n\treturn pixmap\n}", "CodeBleu_score": 51.43269953551734}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// Parse the suggested location URI\nval suggestedUri = Uri.parse(suggestedLocation)\n\n// Determine the filename\nval filename = suggestedUri.lastPathSegment?: \"game.sav\"\n\n// Define a callback for file selection\nval fileSelectionCallback = object : OnFileSelectionCallback {\n    override fun onFileSelected(uri: Uri) {\n        // Attempt to write data to the chosen URI\n        try {\n            val outputStream = context.contentResolver.openOutputStream(uri)\n            outputStream?.use {\n                it.write(data.toByteArray())\n            }\n            // Invoke the onSaved callback if successful\n            onSaved(uri.toString())\n        } catch (e: Exception) {\n            // Invoke onError in case of an exception\n            onError(e)\n        }\n    }\n}\n\n// Open a file chooser for user to select save location\nopenSaveFileChooser(filename, fileSelectionCallback)\n}", "CodeBleu_score": 47.15116123962371}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\nval uri = Uri.parse(suggestedLocation)\nval filename = uri.lastPathSegment?: return\nval callback = object : OnSaveCallback {\n    override fun onSave(location: String) {\n        try {\n            val out = openFileOutput(location, MODE_PRIVATE)\n            out.write(data.toByteArray())\n            out.close()\n            onSaved(location)\n        } catch (ex: Exception) {\n            onError(ex)\n        }\n    }\n}\n\nopenSaveFileChooser(filename, callback, onError)\n}", "CodeBleu_score": 56.95317770156626}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t//        val file = File(suggestedLocation)", "CodeBleu_score": 13.92206817903272}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t//        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n//            addCategory(Intent.CATEGORY_OPENABLE)\n//            type = \"text/plain\"\n//        }\n//        startActivityForResult(intent, LOAD_FILE_REQUEST_CODE)\n        openLoadFileChooser { location ->\n            try {\n                val data = File(location).readText()\n                onLoaded(data, location)\n            } catch (ex: Exception) {\n                onError(ex)\n            }\n        }\n    }", "CodeBleu_score": 48.11613548438209}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t//        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n//            addCategory(Intent.CATEGORY_OPENABLE)\n//            type = \"text/plain\"\n//        }\n//        startActivityForResult(intent, READ_REQUEST_CODE)\n        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n        }\n        startActivityForResult(intent, READ_REQUEST_CODE)\n    }", "CodeBleu_score": 36.248640645861286}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n//            addCategory(Intent.CATEGORY_OPENABLE)\n//            type = \"text/plain\"\n//        }\n//        startActivityForResult(intent, LOAD_FILE_REQUEST_CODE)\n\n        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"*/*\"\n        }\n        startActivityForResult(intent, LOAD_FILE_REQUEST_CODE)\n    }", "CodeBleu_score": 36.15640536883985}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t}\n\tstartActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 62.008284931684734}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n\tintent.addCategory(Intent.CATEGORY_OPENABLE)\n\tintent.type = \"application/json\"\n\tintent.putExtra(Intent.EXTRA_TITLE, fileName)\n\tintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\tstartActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 76.76685298843314}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t}\n\tstartActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 62.008284931684734}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t//    val notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n//    val channelId = \"channel_id\"\n//    val channelName = \"channel_name\"\n//    val channelDescription = \"channel_description\"\n//    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n//        val notificationChannel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)\n//        notificationChannel.description = channelDescription\n//        notificationChannel.setShowBadge(true)\n//        notificationManager.createNotificationChannel(notificationChannel)\n//    }\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n//    val notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n//\n//    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n//        val channel = NotificationChannel(\n//            CHANNEL_ID,\n//            CHANNEL_NAME,\n//            NotificationManager.IMPORTANCE_DEFAULT\n//        )\n//        notificationManager.createNotificationChannel(channel)\n//    }\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t// Create the NotificationChannel, but only on API 26+ because\n// the NotificationChannel class is new and not in the support library\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = \"channel_name\"\n        val descriptionText = \"channel_description\"\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(\"channel_id\", name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 42.90911449746345}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t\tval settings = getDefaultSettings()\n\tval packer = TexturePacker(settings)\n\tval mainAssets = File(workingPath, \"assets\")\n\tif (!mainAssets.exists()) {\n\t\tmainAssets.mkdir()\n\t}\n\ttry {\n\t\tpacker.pack(mainAssets.absolutePath, workingPath, \"main\")\n\t} catch (e: Exception) {\n\t\te.printStackTrace()\n\t}\n\tval modsDir = File(workingPath, \"mods\")\n\tif (!modsDir.exists()) {\n\t\tmodsDir.mkdir()\n\t}\n\tval mods = modsDir.listFiles { file -> file.isDirectory &&!file.isHidden }\n\tif (mods!= null) {\n\t\tfor (mod in mods) {\n\t\t\tval modAssets = File(mod, \"assets\")\n\t\t\tif (modAssets.exists()) {\n\t\t\t\ttry {\n\t\t\t\t\tpacker.pack(modAssets.absolutePath, workingPath, mod.name)\n\t\t\t\t} catch (e: Exception) {\n\t\t\t\t\te.printStackTrace()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.12418012989096}, {"code": "fun packImages(workingPath: String){\n\t\ttry {\n\t\tval imagesDir = File(workingPath, \"assets/images\")\n\t\tval modsDir = File(workingPath, \"mods\")\n\n\t\tpackImages(imagesDir)\n\t\tmodsDir.listFiles { file ->!file.isHidden }?.forEach { packImages(it) }\n\t} catch (e: Exception) {\n\t\te.printStackTrace()\n\t}\n}", "CodeBleu_score": 32.93631979098885}, {"code": "fun packImages(workingPath: String){\n\t\ttry {\n\t\tval mods = File(workingPath, \"mods\").listFiles()\n\t\tval main = File(workingPath, \"assets\")\n\t\tval mainImages = File(main, \"images\")\n\t\tval mainAtlases = File(main, \"atlases\")\n\t\tval mainAtlasesList = File(mainAtlases, \"list.txt\")\n\n\t\tif (mainImages.exists()) {\n\t\t\tprintln(\"Packing images for main assets folder...\")\n\t\t\tpackImages(mainImages, mainAtlases, mainAtlasesList)\n\t\t}\n\n\t\tif (mods!= null) {\n\t\t\tfor (mod in mods) {\n\t\t\t\tif (mod.isDirectory &&!mod.isHidden) {\n\t\t\t\t\tval modImages = File(mod, \"assets/images\")\n\t\t\t\t\tval modAtlases = File(mod, \"assets/atlases\")\n\t\t\t\t\tval modAtlasesList = File(modAtlases, \"list.txt\")\n\n\t\t\t\t\tif (modImages.exists()) {\n\t\t\t\t\t\tprintln(\"Packing images for mod ${mod.name}...\")\n\t\t\t\t\t\tpackImages(modImages, modAtlases, modAtlasesList)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (e: Exception) {\n\t\tprintln(\"Error while packing images: $e\")\n\t}\n}", "CodeBleu_score": 40.31439165586513}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t\tval workingPath = workingPath\n\tval mods = mods\n\n\t// Pack images for working path\n\ttry {\n\t\tpackImages(workingPath)\n\t} catch (e: Exception) {\n\t\te.printStackTrace()\n\t}\n\n\t// Pack images for mods\n\tmods.forEach { mod ->\n\t\tif (mod.isHidden) {\n\t\t\treturn@forEach\n\t\t}\n\n\t\ttry {\n\t\t\tpackImages(mod.path)\n\t\t} catch (e: Exception) {\n\t\t\te.printStackTrace()\n\t\t}\n\t}\n}", "CodeBleu_score": 42.19437778776318}, {"code": "suspend fun reloadWorldscreen(){\n\t\tval workingPath = Paths.get(System.getProperty(\"user.dir\"))\n\tval modsPath = workingPath.resolve(\"mods\")\n\tval mods = modsPath.toFile().listFiles()\n\n\tval imageAtlases = mutableListOf<ImageAtlas>()\n\tval imageAtlasPaths = mutableListOf<String>()\n\n\tval imageAtlasPath = workingPath.resolve(\"assets/images/atlas.png\")\n\tval imageAtlasJsonPath = workingPath.resolve(\"assets/images/atlas.json\")\n\n\tval imageAtlas = ImageAtlas(imageAtlasPath.toFile(), imageAtlasJsonPath.toFile())\n\timageAtlases.add(imageAtlas)\n\timageAtlasPaths.add(imageAtlasPath.toString())\n\n\tfor (mod in mods) {\n\t\tif (mod.name.startsWith(\".\")) continue\n\t\tval modAssetsPath = mod.toPath().resolve(\"assets\")\n\t\tval modImageAtlasPath = modAssetsPath.resolve(\"images/atlas.png\")\n\t\tval modImageAtlasJsonPath = modAssetsPath.resolve(\"images/atlas.json\")\n\n\t\ttry {\n\t\t\tval modImageAtlas = ImageAtlas(modImageAtlasPath.toFile(), modImageAtlasJsonPath.toFile())\n\t\t\timageAtlases.add(modImageAtlas)\n\t\t\timageAtlasPaths.add(modImageAtlasPath.toString())\n\t\t} catch (e: Exception) {\n\t\t\te.printStackTrace()\n\t\t}\n\t}\n\n\tval imageAtlas = ImageAtlas(imageAtlases.toTypedArray())\n\timageAtlas.save(imageAtlasPath.toFile())\n\timageAtlas.saveJson(imageAtlasJsonPath.toFile())\n\n\tval imageAtlasTexture = Texture(imageAtlasPath.toFile())\n\timageAtlasTexture.setFilter(Texture.TextureFilter.Linear, Texture.TextureFilter.Linear)\n\timageAtlasTexture.setWrap(Texture.TextureWrap.ClampToEdge, Texture.TextureWrap.ClampToEdge)\n\n\tval imageAtlasSprite = Sprite(imageAtlasTexture)\n\timageAtlasSprite.setOrigin(0f, 0f)\n\timageAtlasSprite.setSize(imageAtlasTexture.width.toFloat(), imageAtlasTexture.height.toFloat())\n\n\tval imageAtlasRegion = TextureRegion(imageAtlasTexture)\n\timageAtlasRegion.setRegion(imageAtlas", "CodeBleu_score": 27.777260018218037}, {"code": "suspend fun reloadWorldscreen(){\n\t\tval workingPath = Paths.get(System.getProperty(\"user.dir\"))\n\tval modsPath = workingPath.resolve(\"mods\")\n\tval mods = modsPath.toFile().listFiles { file -> file.isDirectory &&!file.isHidden }\n\n\t// Pack images for the working path\n\tval workingPathImages = workingPath.resolve(\"assets/images\")\n\tval workingPathAtlas = workingPath.resolve(\"assets/images/atlas.png\")\n\tval workingPathAtlasXml = workingPath.resolve(\"assets/images/atlas.xml\")\n\tval workingPathAtlasDesc = AtlasDescription(workingPathAtlas.toFile(), workingPathAtlasXml.toFile())\n\tval workingPathAtlasPacker = AtlasPacker(workingPathImages.toFile(), workingPathAtlasDesc, false)\n\tworkingPathAtlasPacker.pack()\n\n\t// Pack images for each mod\n\tmods.forEach { mod ->\n\t\tval modImages = mod.resolve(\"assets/images\")\n\t\tval modAtlas = mod.resolve(\"assets/images/atlas.png\")\n\t\tval modAtlasXml = mod.resolve(\"assets/images/atlas.xml\")\n\t\tval modAtlasDesc = AtlasDescription(modAtlas.toFile(), modAtlasXml.toFile())\n\t\tval modAtlasPacker = AtlasPacker(modImages.toFile(), modAtlasDesc, false)\n\n\t\ttry {\n\t\t\tmodAtlasPacker.pack()\n\t\t} catch (e: Exception) {\n\t\t\te.printStackTrace()\n\t\t}\n\t}\n}", "CodeBleu_score": 22.416803733909827}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenuScreen = MainMenuScreen()\n\tmainMenuScreen.show()\n\treturn mainMenuScreen\n}", "CodeBleu_score": 42.24101313862309}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval screen = MainMenuScreen()\n\tpushScreen(screen)\n\treturn screen\n}", "CodeBleu_score": 40.42518871672469}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval screen = MainMenuScreen()\n\tpushScreen(screen)\n\treturn screen\n}", "CodeBleu_score": 40.42518871672469}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val maximumWindowBounds = getMaximumWindowBounds()\n val windowWidth = MathUtils.clamp(settings.width, maximumWindowBounds.x, maximumWindowBounds.y)\n val windowHeight = MathUtils.clamp(settings.height, maximumWindowBounds.z, maximumWindowBounds.w)\n val windowConfig = WindowConfig.Builder().setTitle(settings.title).setSize(windowWidth, windowHeight).setVSync(settings.vSync).setFPS(settings.fpsCap).build()\n window.config = windowConfig\n val graphicsMode = GraphicsMode(settings.width, settings.height, settings.bitsPerPixel, settings.frequency)\n window.graphics.setDisplayMode(graphicsMode)\n return windowWidth == maximumWindowBounds.x && windowHeight == maximumWindowBounds.z\n }", "CodeBleu_score": 49.59697657782828}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val maxBounds = getMaximumWindowBounds()\n val windowSize = settings.windowSize\n val windowPosition = settings.windowPosition\n val windowBounds = Rectangle(\n windowPosition.x,\n windowPosition.y,\n windowSize.width,\n windowSize.height\n )\n val graphicsMode = GraphicsMode(\n settings.bitsPerPixel,\n settings.samplesPerPixel,\n settings.samplesPerUpdate,\n settings.vSyncEnabled\n )\n val windowConfiguration = WindowConfiguration(\n windowBounds,\n settings.resizable,\n settings.title,\n settings.icon,\n settings.fullscreen,\n settings.vsync,\n graphicsMode\n )\n window.configuration = windowConfiguration\n window.graphicsMode = graphicsMode\n window.graphics.configuration = windowConfiguration\n window.graphics.graphicsMode = graphicsMode\n return windowSize == maxBounds.size\n }", "CodeBleu_score": 37.688918782521974}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val maximumWindowBounds = getMaximumWindowBounds()\n window.setSize(maximumWindowBounds.width, maximumWindowBounds.height)\n window.setLocationRelativeTo(null)\n window.isVisible = true\n return window.size == maximumWindowBounds\n}", "CodeBleu_score": 26.150017671610527}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t\tval osReleaseMap = mapOf(File(\"/etc/os-release\").bufferedReader().use { it.readText() })\n\treturn when {\n\t\tosReleaseMap.containsKey(\"PRETTY_NAME\") -> osReleaseMap[\"PRETTY_NAME\"]!!\n\t\tosReleaseMap.containsKey(\"NAME\") && osReleaseMap.containsKey(\"VERSION\") -> \"${osReleaseMap[\"NAME\"]!!} ${osReleaseMap[\"VERSION\"]!!}\"\n\t\telse -> \"\"\n\t}\n}", "CodeBleu_score": 30.91651215378684}, {"code": "private fun getLinuxDistro(): String{\n\t\tval osReleaseFile = File(\"/etc/os-release\")\n\tif (!osReleaseFile.exists()) {\n\t\treturn \"\"\n\t}\n\tval osReleaseMap = mapOf(osReleaseFile)\n\tif (!osReleaseMap.containsKey(\"NAME\")) {\n\t\treturn \"\"\n\t}\n\tval prettyName = osReleaseMap[\"PRETTY_NAME\"]\n\tif (prettyName!= null) {\n\t\treturn prettyName\n\t}\n\tval name = osReleaseMap[\"NAME\"]\n\tval version = osReleaseMap[\"VERSION\"]\n\tif (name!= null && version!= null) {\n\t\treturn \"$name $version\"\n\t}\n\treturn \"\"\n}", "CodeBleu_score": 29.75455134975451}, {"code": "private fun getLinuxDistro(): String{\n\t\tval osReleaseFile = File(\"/etc/os-release\")\n\tif (osReleaseFile.exists()) {\n\t\tval osReleaseMap = parseLinuxReleaseFile(osReleaseFile)\n\t\treturn if (osReleaseMap.containsKey(\"NAME\")) {\n\t\t\tif (osReleaseMap.containsKey(\"PRETTY_NAME\")) {\n\t\t\t\tosReleaseMap[\"PRETTY_NAME\"]!!\n\t\t\t} else {\n\t\t\t\tosReleaseMap[\"NAME\"] + \" \" + osReleaseMap[\"VERSION\"]\n\t\t\t}\n\t\t} else {\n\t\t\t\"\"\n\t\t}\n\t}\n\treturn \"\"\n}", "CodeBleu_score": 30.586564983575563}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t\ttry {\n\t\t// Use the primary method to flash the window\n\t\tif (Platform.isWindows) {\n\t\t\t// Use the Windows API to flash the window\n\t\t\tval hwnd = WindowUtils.getWindowHandle()\n\t\t\tFlashWindowEx(hwnd, 3, 0, 0)\n\t\t} else if (Platform.isMac) {\n\t\t\t// Use the macOS API to flash the window\n\t\t\tval app = NSApplication.sharedApplication()\n\t\t\tapp.requestUserAttention(NSApplication.RequestUserAttentionType.InformationalRequest)\n\t\t} else if (Platform.isLinux) {\n\t\t\t// Use the Linux API to flash the window\n\t\t\tval x11 = X11.INSTANCE\n\t\t\tval display = x11.XOpenDisplay(null)\n\t\t\tif (display!= null) {\n\t\t\t\tval window = x11.XDefaultRootWindow(display)\n\t\t\t\tval event = XEvent()\n\t\t\t\tevent.type = XEvent.FocusIn\n\t\t\t\tx11.XSendEvent(display, window, 0, 0, event)\n\t\t\t\tx11.XCloseDisplay(display)\n\t\t\t}\n\t\t} else {\n\t\t\t// Use a fallback method to flash the window\n\t\t\tval window = WindowUtils.getWindow()\n\t\t\tif (window!= null) {\n\t\t\t\twindow.toFront()\n\t\t\t\twindow.requestFocus()\n\t\t\t}\n\t\t}\n\t} catch (e: Exception) {\n\t\t// Log the error without interrupting execution\n\t\te.printStackTrace()\n\t}\n}", "CodeBleu_score": 43.36442930956537}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\t// Attempt to flash the window using platform-specific APIs\n\t\twhen (Platform.operatingSystem) {\n\t\t\tOperatingSystem.WINDOWS -> flashWindowWindows()\n\t\t\tOperatingSystem.LINUX -> flashWindowLinux()\n\t\t\tOperatingSystem.MAC_OS -> flashWindowMacOS()\n\t\t\telse -> flashWindowFallback()\n\t\t}\n\t} catch (e: Exception) {\n\t\t// Log the error and use the fallback method if the primary method fails\n\t\tlogger.error(\"Failed to flash window: ${e.message}\")\n\t\tflashWindowFallback()\n\t}\n}", "CodeBleu_score": 27.502243610459843}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\tif (Platform.isWindows) {\n\t\t\tflashWindowWindows()\n\t\t} else if (Platform.isLinux) {\n\t\t\tflashWindowLinux()\n\t\t} else if (Platform.isMac) {\n\t\t\tflashWindowMac()\n\t\t} else {\n\t\t\tflashWindowFallback()\n\t\t}\n\t} catch (e: Exception) {\n\t\tlogger.error(\"Failed to flash window\", e)\n\t}\n}", "CodeBleu_score": 31.184977514202632}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t// Backup shared preferences file\n\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n\tSharedPreferences.Editor editor = prefs.edit();\n\teditor.putString(\"my_key\", \"my_value\");\n\teditor.commit();\n\tdata.writeEntityHeader(\"com.example.mygame.prefs\", prefs.getAll().size());\n\tdata.writeEntityData(prefs.getAll());\n\n\t// Backup game data files\n\tFile dir = getFilesDir();\n\tFile[] files = dir.listFiles();\n\tfor (File file : files) {\n\t\tif (file.getName().startsWith(\"rankings\")) {\n\t\t\tdata.writeEntityHeader(\"com.example.mygame.rankings\", file.length());\n\t\t\tdata.writeEntityData(file);\n\t\t} else if (file.getName().startsWith(\"badges\")) {\n\t\t\tdata.writeEntityHeader(\"com.example.mygame.badges\", file.length());\n\t\t\tdata.writeEntityData(file);\n\t\t} else if (file.getName().startsWith(\"journal\")) {\n\t\t\tdata.writeEntityHeader(\"com.example.mygame.journal\", file.length());\n\t\t\tdata.writeEntityData(file);\n\t\t}\n\t}\n}", "CodeBleu_score": 18.00886545658171}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t// backup shared preferences\n\tFile prefsFile = new File(getFilesDir(), \"shared_prefs\");\n\tFile[] prefsFiles = prefsFile.listFiles();\n\tfor (File file : prefsFiles) {\n\t\tString name = file.getName();\n\t\tif (name.startsWith(\"shared_prefs\") && name.endsWith(\".xml\")) {\n\t\t\ttry {\n\t\t\t\tFileInputStream fis = new FileInputStream(file);\n\t\t\t\tbyte[] bytes = new byte[fis.available()];\n\t\t\t\tfis.read(bytes);\n\t\t\t\tfis.close();\n\t\t\t\tdata.writeEntityHeader(name, bytes.length);\n\t\t\t\tdata.writeEntityData(bytes);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t// backup game data\n\tFile gameDataFile = new File(getFilesDir(), \"game_data\");\n\tFile[] gameDataFiles = gameDataFile.listFiles();\n\tfor (File file : gameDataFiles) {\n\t\tString name = file.getName();\n\t\tif (name.startsWith(\"game_data\") && name.endsWith(\".dat\")) {\n\t\t\ttry {\n\t\t\t\tFileInputStream fis = new FileInputStream(file);\n\t\t\t\tbyte[] bytes = new byte[fis.available()];\n\t\t\t\tfis.read(bytes);\n\t\t\t\tfis.close();\n\t\t\t\tdata.writeEntityHeader(name, bytes.length);\n\t\t\t\tdata.writeEntityData(bytes);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 18.10624650981522}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t// Backup the shared preferences file\n\tSharedPreferences sharedPreferences = getSharedPreferences(\"sharedPreferences\", Context.MODE_PRIVATE);\n\tMap<String,?> allEntries = sharedPreferences.getAll();\n\tfor (Map.Entry<String,?> entry : allEntries.entrySet()) {\n\t\tString key = entry.getKey();\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof String) {\n\t\t\tdata.writeString(key, (String) value);\n\t\t} else if (value instanceof Integer) {\n\t\t\tdata.writeInt(key, (Integer) value);\n\t\t} else if (value instanceof Long) {\n\t\t\tdata.writeLong(key, (Long) value);\n\t\t} else if (value instanceof Float) {\n\t\t\tdata.writeFloat(key, (Float) value);\n\t\t} else if (value instanceof Boolean) {\n\t\t\tdata.writeBoolean(key, (Boolean) value);\n\t\t}\n\t}\n\n\t// Backup game data files related to rankings, badges, and journal entries\n\tFile rankingFile = new File(getFilesDir(), \"rankings.json\");\n\tif (rankingFile.exists()) {\n\t\tdata.writeEntityHeader(\"rankings.json\", rankingFile.length());\n\t\tdata.writeEntityData(rankingFile);\n\t}\n\n\tFile badgeFile = new File(getFilesDir(), \"badges.json\");\n\tif (badgeFile.exists()) {\n\t\tdata.writeEntityHeader(\"badges.json\", badgeFile.length());\n\t\tdata.writeEntityData(badgeFile);\n\t}\n\n\tFile journalFile = new File(getFilesDir(), \"journal.json\");\n\tif (journalFile.exists()) {\n\t\tdata.writeEntityHeader(\"journal.json\", journalFile.length());\n\t\tdata.writeEntityData(journalFile);\n\t}\n}", "CodeBleu_score": 17.488828419647373}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tNetwork network = cm.getActiveNetwork();\n\t\tNetworkCapabilities nc = cm.getNetworkCapabilities(network);\n\t\treturn (nc!= null && nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED));\n\t} else {\n\t\tNetworkInfo networkInfo = cm.getActiveNetworkInfo();\n\t\treturn (networkInfo!= null && networkInfo.isConnected() && networkInfo.getType()!= ConnectivityManager.TYPE_WIFI && networkInfo.getType()!= ConnectivityManager.TYPE_WIMAX && networkInfo.getType()!= ConnectivityManager.TYPE_BLUETOOTH && networkInfo.getType()!= ConnectivityManager.TYPE_ETHERNET);\n\t}\n}", "CodeBleu_score": 52.922051811786986}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetwork network = connectivityManager.getActiveNetwork();\n\t\tNetworkCapabilities networkCapabilities = connectivityManager.getNetworkCapabilities(network);\n\t\treturn networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);\n\t} else {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\t\treturn networkInfo!= null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n\t}\n}", "CodeBleu_score": 51.554344075713466}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tNetwork network = cm.getActiveNetwork();\n\t\tNetworkCapabilities nc = cm.getNetworkCapabilities(network);\n\t\treturn nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);\n\t} else {\n\t\tNetworkInfo networkInfo = cm.getActiveNetworkInfo();\n\t\treturn networkInfo!= null && networkInfo.isConnected() && networkInfo.getType()!= ConnectivityManager.TYPE_WIFI && networkInfo.getType()!= ConnectivityManager.TYPE_WIMAX && networkInfo.getType()!= ConnectivityManager.TYPE_BLUETOOTH && networkInfo.getType()!= ConnectivityManager.TYPE_ETHERNET;\n\t}\n}", "CodeBleu_score": 52.86734934274825}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\tif (!hero.isAlive() ) {\n\t\treturn false;\n\t}\n\n\thero.play( \"drink\" );\n\n\thero.cure();\n\n\thero.uncurseEquipped();\n\n\thero.satisfy();\n\n\thero.setHealth( hero.getMaxHealth() );\n\n\thero.showStatusWithIcon( \"buff\" );\n\n\thero.interrupt( \"Drinking \" + this.toString() );\n\n\treturn true;\n}", "CodeBleu_score": 16.55320423502641}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif (!hero.isAlive() ) return false;\n\n\tSound.play( Sound.CURE );\n\thero.cure();\n\thero.uncurseEquipped();\n\thero.satisfy();\n\thero.restoreHealth();\n\thero.showStatusWithIcon( \"images/potion.png\", \"Cured!\" );\n\thero.interrupt();\n\thero.log( \"You drink the potion.\" );\n\treturn true;\n}", "CodeBleu_score": 31.163116643840493}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\thero.play( \"cure.wav\" );\n\t\thero.cure();\n\t\thero.uncurseEquipped();\n\t\thero.satisfy();\n\t\thero.restoreHealth();\n\t\thero.showStatusWithIcon( \"images/cure.gif\" );\n\t\thero.interrupt();\n\t\thero.get( this );\n\t\thero.play( \"pickup.wav\" );\n\t\thero.start( \"You feel cured!\" );\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 19.628855821206802}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif ( item == null ) {\n\t\treturn null;\n\t}\n\tif ( item.isWaterskin() &&!item.isFull() ) {\n\t\titem.fill();\n\t\treturn item;\n\t}\n\tif ( item.isAnkh() &&!item.isBlessed() ) {\n\t\titem.bless();\n\t\treturn item;\n\t}\n\tif ( item.isUncursable() ) {\n\t\titem.uncurse();\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 22.67767074439358}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif( item == null ) {\n\t\treturn null;\n\t}\n\tif( item.isFull() ) {\n\t\treturn null;\n\t}\n\tif( item.isBlessed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isBlessed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn", "CodeBleu_score": 19.273683074578035}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif( item.isFull() ) {\n\t\treturn null;\n\t}\n\tif( item.isBlessed() ) {\n\t\treturn null;\n\t}\n\tif( item.isCursed() ) {\n\t\treturn null;\n\t}\n\tif( item.isWaterskin() ) {\n\t\titem.fill();\n\t\treturn item;\n\t}\n\tif( item.isAnkh() ) {\n\t\titem.bless();\n\t\treturn item;\n\t}\n\tif( item.isUncursable() ) {\n\t\titem.uncurse();\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 20.64168126315749}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (buffCls!= null) {\n\t\tenemy.affect(buffCls);\n\t}\n\tif (enemy.isEnemy()) {\n\t\tif (rollToDropLoot(hero)) {\n\t\t\tenemy.dropLoot(hero);\n\t\t}\n\t\thero.processEnemyKill(enemy);\n\t\tif (hero.getClass() == Monk.class) {\n\t\t\thero.gainEnergy();\n\t\t}\n\t}\n\thero.earnExp(enemy.getLevel());\n\tif (hero.getLevel() > enemy.getLevel()) {\n\t\thero.buff(new EnergyBuff(hero));\n\t}\n}", "CodeBleu_score": 20.056769377779638}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\taffect(enemy, hero, buffCls);\n\tif (enemy.isEnemy()) {\n\t\trollToDropLoot(enemy, hero);\n\t\tshowStatusWithIcon(enemy, hero);\n\t\tearnExp(enemy, hero);\n\t\tprocessAscensionChallenges(enemy, hero);\n\t}\n\tif (hero.getHeroClass() instanceof Monk) {\n\t\tgainEnergy(hero);\n\t}\n}", "CodeBleu_score": 16.556197790211435}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t// Affect the enemy with the specified buff\n\tenemy.affect(buffCls);\n\t// Check if the enemy was aligned as an enemy\n\tif (enemy.isEnemy()) {\n\t\t// Roll for loot\n\t\trollToDropLoot(enemy, hero);\n\t\t// Update kill statistics\n\t\thero.updateMonstersSlain(enemy);\n\t\t// Process ascension challenges\n\t\thero.processEnemyKill(enemy);\n\t}\n\t// Grant experience to the hero based on level comparison\n\thero.earnExp(enemy.getLevel());\n\t// Buff the hero with additional energy if they are a Monk subclass\n\tif (hero.getClass() == Monk.class) {\n\t\thero.gainEnergy(1);\n\t}\n}", "CodeBleu_score": 16.666516172264526}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Buffs.ascensionChallenge.isActive(hero)) {\n\t\tif (enemy instanceof Enemy) {\n\t\t\tEnemy e = (Enemy) enemy;\n\t\t\tif (e.getOriginal()!= null) {\n\t\t\t\te.setOriginal(e.getOriginal().getOriginal());\n\t\t\t\te.setClass(e.getOriginal().getClass());\n\t\t\t\te.setBaseStats(e.getOriginal().getBaseStats());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.setBaseSkills(e.getOriginal().getBaseSkills());\n\t\t\t\te.", "CodeBleu_score": 11.387095044748907}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (hero.hasActiveBuff(AscensionChallenge.class)) {\n\t\tif (enemy.getOriginal()!= null) {\n\t\t\tenemy.setOriginal(enemy.getOriginal());\n\t\t}\n\t\tif (enemy.isBoosted()) {\n\t\t\treturn;\n\t\t}\n\t\tint stacks = hero.getBuff(AscensionChallenge.class).getStacks();\n\t\tif (enemy.isType(EnemyType.BOSS)) {\n\t\t\tif (stacks > 0) {\n\t\t\t\thero.getBuff(AscensionChallenge.class).setStacks(stacks - 1);\n\t\t\t}\n\t\t} else if (enemy.isType(EnemyType.ELITE)) {\n\t\t\tif (stacks > 1) {\n\t\t\t\thero.getBuff(AscensionChallenge.class).setStacks(stacks - 2);\n\t\t\t}\n\t\t} else {\n\t\t\tif (stacks > 2) {\n\t\t\t\thero.getBuff(AscensionChallenge.class).setStacks(stacks - 3);\n\t\t\t}\n\t\t}\n\t\tif (stacks > 0 && stacks <= 3) {\n\t\t\tLog.log(Log.ENEMY, \"Enemy is weakened by the Ascension Challenge!\");\n\t\t}\n\t\tif (hero.getLevel() == hero.getMaxLevel()) {\n\t\t\thero.earnExp(enemy.getExp());\n\t\t}\n\t\thero.refreshBuffs();\n\t}\n}", "CodeBleu_score": 23.123807619166417}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Buffs.ascensionChallenge.isActive(hero)) {\n\t\tif (enemy.getOriginal()!= null) {\n\t\t\tenemy.set(enemy.getOriginal());\n\t\t}\n\t\tif (enemy.getLevel() < 100) {\n\t\t\tint stacks = Buffs.ascensionChallenge.stacks(hero);\n\t\t\tif (enemy.getLevel() < 10) {\n\t\t\t\tstacks -= 1;\n\t\t\t} else if (enemy.getLevel() < 20) {\n\t\t\t\tstacks -= 2;\n\t\t\t} else if (enemy.getLevel() < 30) {\n\t\t\t\tstacks -= 3;\n\t\t\t} else if (enemy.getLevel() < 40) {\n\t\t\t\tstacks -= 4;\n\t\t\t} else if (enemy.getLevel() < 50) {\n\t\t\t\tstacks -= 5;\n\t\t\t} else if (enemy.getLevel() < 60) {\n\t\t\t\tstacks -= 6;\n\t\t\t} else if (enemy.getLevel() < 70) {\n\t\t\t\tstacks -= 7;\n\t\t\t} else if (enemy.getLevel() < 80) {\n\t\t\t\tstacks -= 8;\n\t\t\t} else if (enemy.getLevel() < 90) {\n\t\t\t\tstacks -= 9;\n\t\t\t} else if (enemy.getLevel() < 100) {\n\t\t\t\tstacks -= 10;\n\t\t\t}\n\t\t\tBuffs.ascensionChallenge.setStacks(hero, stacks);\n\t\t\tif (stacks <= 100) {\n\t\t\t\thero.log(\"The enemy weakened your ascension challenge!\");\n\t\t\t}\n\t\t}\n\t\tif (hero.getLevel() == hero.getMaxLevel()) {\n\t\t\thero.earnExp(1000000);\n\t\t}\n\t\thero.refreshHero();\n\t}\n}", "CodeBleu_score": 22.284639557373197}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null)\n\t\treturn 0;\n\tif (m.isPlayer())\n\t\treturn 0;\n\tif (m.getBuffedLevel() == null)\n\t\treturn 0;\n\tif (m.getBuffedLevel().getLevel() == 0)\n\t\treturn 0;\n\tif (m.getBuffedLevel().getLevel() > 120)\n\t\treturn 0;\n\tif (m.getBuffedLevel().getLevel() < 1)\n\t\treturn 0;\n\tif (m.getBuffedLevel().getLevel() < 120) {\n\t\tif (m.getBuffedLevel().getLevel() > 100) {\n\t\t\tif (m.getBuffedLevel().getLevel() < 110) {\n\t\t\t\tif (m.getBuffedLevel().getLevel() > 105) {\n\t\t\t\t\tif (m.getBuffedLevel().getLevel() < 108) {\n\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() > 106) {\n\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() < 107) {\n\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() > 107) {\n\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() < 108) {\n\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() > 107) {\n\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() < 108) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() > 107) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() < 108) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() > 107) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() < 108) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() > 107) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() < 108) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().getLevel() > 107) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (m.getBuffedLevel().", "CodeBleu_score": 13.171194822222448}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null) {\n\t\treturn 0;\n\t}\n\tif (m.getBuffedLevel()!= null && m.getBuffedLevel().getBuffs().contains(Buff.ascension_resistance)) {\n\t\treturn m.getEXP();\n\t}\n\tif (m.getOriginal()!= null) {\n\t\tm = m.getOriginal();\n\t}\n\tif (m instanceof RipperDemon) {\n\t\treturn 10;\n\t}\n\tif (m instanceof Ghoul) {\n\t\treturn 7;\n\t}\n\tif (m instanceof Goblin) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinBrute) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinShaman) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinWarrior) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinWizard) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinKing) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinQueen) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinChieftain) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinPrince) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinPrincess) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinScout) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof GoblinSniper) {\n\t\treturn Math.max(13, m.getEXP());\n\t}\n\tif (m instanceof Gob", "CodeBleu_score": 29.796669038544326}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null || m.isPlayer())\n\t\treturn 1;\n\n\tint exp = m.getExp();\n\tif (exp == 0)\n\t\treturn 1;\n\n\tif (m.isTransformed())\n\t\tm = m.getTransformedFrom();\n\n\tif (m.hasBuff(MobBuffs.NO_ASCENSION))\n\t\treturn exp;\n\n\tif (m instanceof RipperDemon)\n\t\treturn 10;\n\telse if (m instanceof Ghoul)\n\t\treturn 7;\n\telse if (m instanceof Ghast)\n\t\treturn 15;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werewolf)\n\t\treturn 13;\n\telse if (m instanceof Werew", "CodeBleu_score": 22.059228813332613}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\tif ( enemy.isAlive() ) {\n\t\tcomboCount++;\n\t\tcomboTimer = initialComboTime;\n\t\tif ( enemy.getHealth() == enemy.getMaxHealth() ) {\n\t\t\tcomboTimer += comboTimeModifier * talentPointsInCleave;\n\t\t}\n\t\tif ( comboCount == 1 ) {\n\t\t\tsetAction( Action.ATTACK );\n\t\t\trefreshHero();\n\t\t}\n\t\tvalidateMasteryCombo();\n\t\tlog( \"Combo count: \" + comboCount );\n\t\trefreshHero();\n\t}\n}", "CodeBleu_score": 23.53841595712793}, {"code": "public void hit( Char enemy ){\n\t\tcomboCount++;\n\tcomboTimer = 0;\n\tif( comboCount > 1 ) {\n\t\tif( enemy.isDead() || enemy.hasBuff( \"Corruption\" ) && enemy.getBuff( \"Corruption\" ).getHealth() == enemy.getBuff( \"Corruption\" ).getMaxHealth() ) {\n\t\t\tcomboTimer += ( 1.0f - ( 0.01f * getTalentPointsInCleave() ) ) * 3.0f;\n\t\t}\n\t\tif( comboCount == 2 ) {\n\t\t\taddActionIndicator( ActionIndicator.Type.DOUBLE_HIT );\n\t\t} else if( comboCount == 3 ) {\n\t\t\taddActionIndicator( ActionIndicator.Type.TRIPLE_HIT );\n\t\t} else if( comboCount == 4 ) {\n\t\t\taddActionIndicator( ActionIndicator.Type.QUADRUPLE_HIT );\n\t\t} else if( comboCount == 5 ) {\n\t\t\taddActionIndicator( ActionIndicator.Type.PENTA_HIT );\n\t\t}\n\t}\n\tvalidateMasteryCombo();\n\tlog.info( \"Combo count: \" + comboCount );\n\trefreshHero();\n}", "CodeBleu_score": 26.279147083589045}, {"code": "public void hit( Char enemy ){\n\t\tcomboCount++;\n\tif ( enemy.isAlive() &&!enemy.hasBuff( Corruption.class ) ) {\n\t\tcomboTimer.start();\n\t}\n\telse if ( enemy.hasBuff( Corruption.class ) && enemy.getBuff( Corruption.class ).getHealth() == enemy.getBuff( Corruption.class ).getMaxHealth() ) {\n\t\tcomboTimer.extend( getTalent( Cleave ).getPoints() * 1000 );\n\t}\n\tcomboTimer.setStartTime( System.currentTimeMillis() );\n\ttriggerActionIndicators();\n\tvalidateMasteryCombo();\n\tlog( \"Combo: \" + comboCount );\n\trefreshHero();\n}", "CodeBleu_score": 25.445247516451364}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint totalCapacity = baseCapacity;\n\tfor (BagItem item : inventory) {\n\t\ttotalCapacity += item.capacity();\n\t}\n\tif (secondaryWeapon!= null) {\n\t\ttotalCapacity -= secondaryWeapon.capacity();\n\t}\n\treturn totalCapacity;\n}", "CodeBleu_score": 18.416796404666012}, {"code": "public int capacity(){\n\t\tint capacity = 0;\n\tfor (Item item : inventory) {\n\t\tcapacity += item.capacity();\n\t}\n\tif (secondaryWeapon!= null) {\n\t\tcapacity -= secondaryWeapon.capacity();\n\t}\n\treturn capacity;\n}", "CodeBleu_score": 22.19875035268076}, {"code": "public int capacity(){\n\t\tint totalCapacity = baseCapacity;\n\tfor (Bag item : inventory) {\n\t\ttotalCapacity += item.getCapacity();\n\t}\n\tif (secondaryWeapon!= null) {\n\t\ttotalCapacity -= secondaryWeapon.getCapacity();\n\t}\n\treturn totalCapacity;\n}", "CodeBleu_score": 17.625392124493082}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\t// Calculate the new maximum health based on level, boosts, and multipliers\n\tint newHT = (int) ( ( level * 10 ) * HTMultiplier );\n\tif ( buff.containsKey( \"RingOfMight\" ) ) {\n\t\tnewHT += 100;\n\t}\n\tif ( buff.containsKey( \"ElixirOfMight\" ) ) {\n\t\tnewHT += 200;\n\t}\n\tif ( boost ) {\n\t\tnewHT *= 2;\n\t}\n\n\t// Update the maximum health\n\tHT = newHT;\n\n\t// Optionally, boost current health to the new maximum health\n\tif ( boostHP ) {\n\t\tHP = HT;\n\t}\n\n\t// Ensure current health does not exceed the new maximum health\n\tHP = Math.min( HP, HT );\n}", "CodeBleu_score": 23.092430386504446}, {"code": "public void updateHT( boolean boostHP ){\n\t\tint newHT = (int) Math.round( HTMultiplier * ( 100 + 10 * level + 0.5 * strength ) );\n\tif ( buff.active( \"RingOfMight\" ) ) {\n\t\tnewHT = (int) Math.round( 1.15 * newHT );\n\t}\n\tif ( buff.active( \"ElixirOfMight\" ) ) {\n\t\tnewHT = (int) Math.round( 1.25 * newHT );\n\t}\n\tif ( boostHP ) {\n\t\tHP = Math.min( HP, newHT );\n\t}\n\tHT = newHT;\n}", "CodeBleu_score": 24.83917940981974}, {"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (int) ( ( ( level * 20 ) + ( strength * 10 ) + ( endurance * 5 ) ) * HTMultiplier );\n\tif ( buff.containsKey( \"RingOfMight\" ) ) {\n\t\tHT += (int) ( HT * buff.get( \"RingOfMight\" ) );\n\t}\n\tif ( buff.containsKey( \"ElixirOfMight\" ) ) {\n\t\tHT += (int) ( HT * buff.get( \"ElixirOfMight\" ) );\n\t}\n\tif ( boostHP ) {\n\t\tHP = Math.min( HP, HT );\n\t}\n}", "CodeBleu_score": 24.541554899429315}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif( enemy.isEnemy( this ) || ( enemy.isNeutral() && enemy.isMimic() ) ) {\n\t\tif( attack( enemy, wep ) ) {\n\t\t\tif( this instanceof Gladiator || this instanceof Duelist ) {\n\t\t\t\tif( this.getWeapon() instanceof MissileWeapon ) {\n\t\t\t\t\tif( this.getWeapon() instanceof MissileWeapon ) {\n\t\t\t\t\t\tif( this.getWeapon() instanceof MissileWeapon ) {\n\t\t\t\t\t\t\tthis.setWeapon( null );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 12.43954849446153}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif( enemy.alignment!= alignment && enemy.alignment!= Alignment.NEUTRAL_MIMIC ) {\n\t\treturn false;\n\t}\n\tif(!setThrown( wep ) ) {\n\t\treturn false;\n\t}\n\tboolean hit = attack( enemy );\n\tclearThrown();\n\tif( hit ) {\n\t\tif( profession == Profession.GLADIATOR ) {\n\t\t\tgladiatorCombo( enemy );\n\t\t}\n\t\telse if( profession == Profession.DUELIST ) {\n\t\t\tduelistCombo( enemy );\n\t\t}\n\t}\n\treturn hit;\n}", "CodeBleu_score": 27.269843746983224}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif( enemy.isEnemy( this ) || enemy.isNeutralMimic() ) {\n\t\tif( attack( enemy, wep ) ) {\n\t\t\tif( this instanceof Gladiator || this instanceof Duelist ) {\n\t\t\t\tif( this instanceof Gladiator ) {\n\t\t\t\t\tif(!hasEffect( \"Gladiator Combo\" ) ) {\n\t\t\t\t\t\taddEffect( new GladiatorComboEffect() );\n\t\t\t\t\t}\n\t\t\t\t} else if( this instanceof Duelist ) {\n\t\t\t\t\tif(!hasEffect( \"Duelist Combo\" ) ) {\n\t\t\t\t\t\taddEffect( new DuelistComboEffect() );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 12.532108923512975}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tint skill = 0;\n\tint pointsInTalent = 0;\n\tint accuracyFactor = 0;\n\tBuff buff = null;\n\tWeapon attackingWeapon = null;\n\tint accuracyMultiplier = 1;\n\tboolean fightingUnarmed = false;\n\tboolean adjacent = false;\n\n\t// Calculate the base attack skill\n\tskill = getSkill(Skill.ATTACK);\n\n\t// Check if the character is fighting unarmed\n\tfightingUnarmed = isFightingUnarmed();\n\n\t// Check if the character is adjacent to the target\n\tadjacent = isAdjacent(target);\n\n\t// Check if the character has a weapon equipped\n\tattackingWeapon = getWeapon();\n\n\t// Check if the character has the \"Accuracy\" talent\n\tpointsInTalent = getTalentPoints(Talent.ACCURACY);\n\n\t// Check if the character has any relevant buffs\n\tbuff = getBuff(Buff.ACCURACY);\n\n\t// Adjust accuracy based on the weapon type\n\tif (attackingWeapon!= null) {\n\t\tif (attackingWeapon.isRanged()) {\n\t\t\taccuracyMultiplier *= 2;\n\t\t} else if (attackingWeapon.isMelee()) {\n\t\t\taccuracyMultiplier *= 1;\n\t\t} else {\n\t\t\taccuracyMultiplier *= 0.5;\n\t\t}\n\t}\n\n\t// Adjust accuracy based on proximity to the target\n\tif (adjacent) {\n\t\taccuracyMultiplier *= 1;\n\t} else {\n\t\taccuracyMultiplier *= 0.5;\n\t}\n\n\t// Adjust accuracy based on the \"Accuracy\" talent\n\taccuracyMultiplier *= 1 + (0.05 * pointsInTalent);\n\n\t// Adjust accuracy based on any relevant buffs\n\tif (buff!= null) {\n\t\taccuracyMultiplier *= buff.getMultiplier();\n\t}\n\n\t// Apply the accuracy multiplier to the base attack skill\n\tskill *= accuracyMultiplier;\n\n\t// Return the final attack skill value\n\treturn skill;\n}", "CodeBleu_score": 32.46094824695598}, {"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = 0;\n\tint weaponSkill = 0;\n\tint weaponSkillMultiplier = 0;\n\tint weaponSkillMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplierMultiplier = 0;\n\tint weaponSkillMultiplierMultiplierMultiplier", "CodeBleu_score": 5.827177268546106}, {"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = 0;\n\tif ( attackingWeapon == null ) {\n\t\tattackSkill = getAttackSkillUnarmed();\n\t} else {\n\t\tattackSkill = getAttackSkill( attackingWeapon );\n\t}\n\tattackSkill += pointsInTalent;\n\tattackSkill *= accuracyFactor;\n\tattackSkill *= buff;\n\tattackSkill *= attackingWeapon.getAccuracyMultiplier();\n\tattackSkill *= fightingUnarmed? 1 : attackingWeapon.getAccuracyMultiplier();\n\tattackSkill *= adjacent? 1 : 0.75;\n\treturn attackSkill;\n}", "CodeBleu_score": 24.406089406188354}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\trepeat(repeats) {\n\t\ttick()\n\t\toperation()\n\t}\n\tif (printResults) {\n\t\tprettyPrint()\n\t}\n}", "CodeBleu_score": 58.399191605662594}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t//  if (repeats < 1) {\n//    throw IllegalArgumentException(\"The repeat count must be a positive integer.\")\n//  }\n\n  val repeatCount = if (repeats > 0) repeats else 1\n  val results = mutableListOf<Duration>()\n\n  repeat(repeatCount) {\n    reset()\n    operation()\n    results += time.mean!!\n  }\n\n  if (printResults) {\n    println(this)\n  }\n\n  return results\n}", "CodeBleu_score": 58.161265082981636}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\trepeat(repeats) {\n\t\ttick()\n\t\toperation()\n\t\ttock()\n\t}\n\tif (printResults) prettyPrint()\n}", "CodeBleu_score": 50.951413707222}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n\tval tree = BehaviorTree<E>(rootTask, blackboard)\n\ttree.init()\n\treturn tree\n}", "CodeBleu_score": 76.12586210309605}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n\treturn BehaviorTree<E>().apply(init).also {\n\t\tit.rootTask = rootTask\n\t\tit.blackboard = blackboard\n\t}\n}", "CodeBleu_score": 63.00924385914071}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n\treturn BehaviorTree(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 60.99126655466155}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t\t// If the cell is not selected, update the selected cell coordinates in the map\n\tif (!this.selected) {\n\t\tthis.map.selectedCell = this;\n\t}\n\n\t// Highlight the current cell and its related cells by changing their tint color\n\tthis.highlighted = true;\n\tthis.related.forEach(cell => {\n\t\tcell.highlighted = true;\n\t});\n\n\t// Adjust the transparency of the cell's heightmap polygons if they exist\n\tif (this.heightmap) {\n\t\tthis.heightmap.forEach(polygon => {\n\t\t\tpolygon.alpha = 0.5;\n\t\t});\n\t}\n}", "CodeBleu_score": 12.18418608694923}, {"code": "onPointerOver (){\n\t\t// Update the selected cell coordinates in the map\n\tthis.map.selectedCell = this.coordinates;\n\n\t// Highlight the current cell and its related cells by changing their tint color\n\tthis.tiles.sprites.forEach((sprite) => {\n\t\tif (this.related.includes(sprite.cell)) {\n\t\t\tsprite.setTint(0x99ff99);\n\t\t} else {\n\t\t\tsprite.setTint(0xffffff);\n\t\t}\n\t});\n\n\t// Adjust the transparency of the cell's heightmap polygons if they exist\n\tthis.heightmap.polygons.forEach((polygon) => {\n\t\tif (this.related.includes(polygon.cell)) {\n\t\t\tpolygon.setAlpha(0.5);\n\t\t} else {\n\t\t\tpolygon.setAlpha(0);\n\t\t}\n\t});\n}", "CodeBleu_score": 39.47935133674999}, {"code": "onPointerOver (){\n\t\tif (this.map.selectedCell) {\n\t\tthis.map.selectedCell.unselect();\n\t}\n\tthis.select();\n\tthis.related.forEach(cell => {\n\t\tcell.select();\n\t});\n\tthis.tiles.sprites.forEach(sprite => {\n\t\tsprite.setTint(0x00ff00);\n\t});\n\tif (this.heightmap) {\n\t\tthis.heightmap.forEach(polygon => {\n\t\t\tpolygon.alpha = 0.5;\n\t\t});\n\t}\n}", "CodeBleu_score": 19.08338233201206}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t\tdef density = null\n\tif (currentValue >= lightThreshold && currentValue < heavyThreshold) {\n\t\tdensity = 'light'\n\t}\n\telse if (currentValue >= heavyThreshold) {\n\t\tdensity = 'heavy'\n\t}\n\tdensity\n}", "CodeBleu_score": 15.256460618899093}, {"code": "getTrafficDensity (){\n\t\tdef density\n\tif (currentValue(\"motion\") >= 1 && currentValue(\"motion\") <= 3) {\n\t\tdensity = \"light\"\n\t} else if (currentValue(\"motion\") >= 4 && currentValue(\"motion\") <= 5) {\n\t\tdensity = \"heavy\"\n\t} else {\n\t\tdensity = null\n\t}\n\treturn density\n}", "CodeBleu_score": 11.075776995907185}, {"code": "getTrafficDensity (){\n\t\tif (this.currentValue < this.lightThreshold) {\n\t\treturn null\n\t}\n\telse if (this.currentValue >= this.lightThreshold && this.currentValue < this.heavyThreshold) {\n\t\treturn 'light'\n\t}\n\telse {\n\t\treturn 'heavy'\n\t}\n}", "CodeBleu_score": 39.21160701634736}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\tthis.reset\n\tthis.setFrame\n\tthis.onStart.dispatch\n}", "CodeBleu_score": 10.948365650394296}, {"code": "restart: function (){\n\t\tthis._frameData.reset\n\tthis._parent.restart\n\tthis.onStart.dispatch\n\tthis._parent.setFrame\n}", "CodeBleu_score": 11.122209489522982}, {"code": "restart: function (){\n\t\tthis.stop();\n\tthis.play();\n}", "CodeBleu_score": 8.334249803471534}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\tif (!this.fx.flash ||!this.fx.clear ||!this.fx.drawRect ||!this.fx.beginFill ||!this.fx.endFill) {\n\t\treturn false;\n\t}\n\tif (this.fx.flash.running &&!force) {\n\t\treturn false;\n\t}\n\tthis.fx.flash.running = true;\n\tthis.fx.clear();\n\tthis.fx.drawRect(0, 0, this.width, this.height);\n\tthis.fx.beginFill(color, alpha || 1);\n\tthis.fx.endFill();\n\tthis.fx.flash.duration = duration || 1000;\n\treturn true;\n}", "CodeBleu_score": 34.97298113644902}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.fx.flash) {\n\t\tif (force) {\n\t\t\tthis.fx.flash.clear();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tcolor = color || 0xFFFFFF;\n\talpha = alpha || 1;\n\tduration = duration || 1000;\n\tthis.fx.flash = new PIXI.Graphics();\n\tthis.fx.flash.beginFill(color, alpha);\n\tthis.fx.flash.drawRect(0, 0, this.width, this.height);\n\tthis.fx.flash.endFill();\n\tthis.fx.flash.alpha = 0;\n\tthis.fx.flash.duration = duration;\n\tthis.fx.addChild(this.fx.flash);\n\treturn true;\n}", "CodeBleu_score": 46.00579761993835}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.fx.flash) {\n\t\tif (force) {\n\t\t\tthis.fx.flash.stop();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (!color) {\n\t\tcolor = \"#000\";\n\t}\n\tif (!duration) {\n\t\tduration = 1000;\n\t}\n\tif (!alpha) {\n\t\talpha = 1;\n\t}\n\tthis.fx.beginFill(color, alpha);\n\tthis.fx.drawRect(-this.width / 2, -this.height / 2, this.width, this.height);\n\tthis.fx.endFill();\n\tthis.fx.flash = this.tween({\n\t\talpha: 0\n\t}, duration, \"linear\", function () {\n\t\tthis.fx.clear();\n\t\tdelete this.fx.flash;\n\t});\n\treturn true;\n}", "CodeBleu_score": 45.82821739869172}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FlexLayer(this.game, this.layers.length, this.fluidProperties);\nif (addToWorld === undefined) { addToWorld = true; }\nif (addToWorld) { this.game.world.add(layer); }\nif (children) { layer.addMultiple(children); }\nthis.layers.push(layer);\nreturn layer;\n}", "CodeBleu_score": 66.7794465941707}, {"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = this.game.add.group();\nlayer.enableBody = true;\nlayer.physicsBodyType = Phaser.Physics.ARCADE;\nlayer.addMultiple(children);\nif (addToWorld) {\nthis.game.world.add(layer);\n}\nthis.layers.push(layer);\nreturn layer;\n}", "CodeBleu_score": 41.7943854293137}, {"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FlexLayer(this.game, this.game.width, this.game.height, this.game.physics.p2);\nlayer.setFluidProperties(this.fluidProperties);\nif (addToWorld) {\nthis.game.world.add(layer);\n}\nif (children) {\nlayer.addMultiple(children);\n}\nthis.layers.push(layer);\nreturn layer;\n}", "CodeBleu_score": 56.798192491843366}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\tvar layer = new Phaser.FlexLayer(this.game, this.game.world.centerX, this.game.world.centerY, this.game.world.bounds, this.scale);\nthis.layers.push(layer);\nthis.game.world.add(layer);\nif (children) {\nlayer.addMultiple(children);\n}\nreturn layer;\n}", "CodeBleu_score": 60.27201584863746}, {"code": "createFullLayer: function (children){\n\t\nvar layer = new Phaser.FlexLayer(this.game, 0, 0, this.game.world.bounds.width, this.game.world.bounds.height, 1)", "CodeBleu_score": 37.766155321457724}, {"code": "createFullLayer: function (children){\n\tvar layer = new Phaser.FlexLayer(this.game, 0, 0, this.game.width, this.game.height, 1, 1);\nthis.layers.push(layer);\nthis.game.world.add(layer);\nif (children) {\nlayer.addMultiple(children);\n}\nreturn layer;\n}", "CodeBleu_score": 57.419459764739834}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\tif (rect)\n{\nif (copy)\n{\nif (this.cropRect)\n{\nthis.cropRect.copyFrom(rect);\n}\nelse\n{\nthis.cropRect = rect.clone();\n}\n}\nelse\n{\nthis.cropRect = rect;\n}\n\nthis.updateCrop();\n}\nelse\n{\nthis.resetFrame();\n}\n\nreturn this;\n}", "CodeBleu_score": 29.642267384403056}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n\t\t} else {\n\t\t\tthis.cropRect.copyFrom(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 29.79617668627439}, {"code": "crop: function (rect, copy){\n\tif (rect) {\nif (copy) {\nthis.cropRect = Phaser.Rectangle.clone(rect);\n} else {\nthis.cropRect = rect;\n}\nthis.updateCrop();\n} else {\nthis.resetFrame();\n}\n}", "CodeBleu_score": 26.706981660780805}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) this.moveH(x, wrap);\n\tif (y) this.moveV(y, wrap);\n\treturn this;\n}", "CodeBleu_score": 37.54494891585429}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.frozenFrames) {\n\t\treturn false;\n\t}\n\n\tvar key = this.stateFrames[state];\n\tif (key) {\n\t\tthis.setFrames(key);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 22.90375203973087}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.frozenFrames) {\n\t\treturn false;\n\t}\n\n\tif (typeof state === 'undefined') {\n\t\tstate = this.state;\n\t}\n\n\tvar key = this.key + '_' + state;\n\n\tif (typeof this.frames[key] === 'undefined') {\n\t\treturn false;\n\t}\n\n\tthis.frame = this.frames[key];\n\n\treturn true;\n}", "CodeBleu_score": 36.12250897729148}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.freezeFrames) {\n\t\treturn false;\n\t}\n\n\tvar key = this.stateFrameKeys[state];\n\n\tif (key) {\n\t\tvar frame = this.frameByName(key);\n\n\t\tif (frame!== -1) {\n\t\t\tthis.frame = frame;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 38.30349211839148}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\nif (typeof quantity === 'undefined') { quantity = 1; }\nif (typeof key === 'undefined') { key = null; }\nif (typeof frame === 'undefined') { frame = null; }\nif (typeof group === 'undefined') { group = this.game.world; }\nif (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\nthis.game.plugins.add(Phaser.Weapon, quantity, key, frame, group, bulletClass);\n\nreturn this;\n\n}", "CodeBleu_score": 28.797375564044913}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\nif (typeof quantity === 'undefined') { quantity = 1; }\nif (typeof key === 'undefined') { key = null; }\nif (typeof frame === 'undefined') { frame = null; }\nif (typeof group === 'undefined') { group = null; }\nif (typeof bulletClass === 'undefined') { bulletClass = null; }\n\nif (quantity < 1) {\nquantity = 1;\n}\n\nif (group === null) {\ngroup = this.game.world;\n}\n\nif (bulletClass === null) {\nbulletClass = Phaser.Bullet;\n}\n\nvar weapon = new Phaser.Weapon(this.game, key, frame, group, bulletClass);\n\nweapon.create(quantity);\n\nreturn weapon;\n\n}", "CodeBleu_score": 35.67783423857909}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\nif (typeof quantity === 'undefined') { quantity = 1; }\nif (typeof key === 'undefined') { key = null; }\nif (typeof frame === 'undefined') { frame = null; }\nif (typeof group === 'undefined') { group = this.game.world; }\nif (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n//  Create a new Weapon Manager\nvar weapon = new Phaser.Weapon(this.game, key, frame, group, bulletClass);\n\n//  Set the quantity of bullets to create\nweapon.setBullets(quantity);\n\n//  Return the Weapon instance\nreturn weapon;\n\n}", "CodeBleu_score": 37.315590881580874}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar cameraToFace = new Phaser.Point(\n\t\t\tpoints[0].x - this.game.camera.x,\n\t\t\tpoints[0].y - this.game.camera.y\n\t\t);\n\t\tvar normal = new Phaser.Point(\n\t\t\tpoints[1].y - points[0].y,\n\t\t\tpoints[0].x - points[1].x\n\t\t);\n\t\tif (cameraToFace.dot(normal) > 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\tthis.moveTo(points[0].x, points[0].y);\n\tthis.lineTo(points[1].x, points[1].y);\n\tthis.lineTo(points[2].x, points[2].y);\n\tthis.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 40.28114237281203}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar faceNormal = this.calculateFaceNormal(points);\n\t\tif (faceNormal.dot(this.cameraToFace) < 0) {\n\t\t\tthis.drawPolygon(points);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points);\n\t}\n}", "CodeBleu_score": 13.439090594890079}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar v0 = points[0];\n\t\tvar v1 = points[1];\n\t\tvar v2 = points[2];\n\t\tvar cb = this.cameraToFace(v0, v1, v2);\n\t\tif (cb.cross < 0) {\n\t\t\tthis.drawPolygon(points);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points);\n\t}\n}", "CodeBleu_score": 20.266598974792355}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.removeEventListener('progress', this.checkVideoProgress);\n\t\tthis.updateTexture();\n\t} else {\n\t\tif (this.retries > 0) {\n\t\t\tthis.retries--;\n\t\t\tthis.video.removeEventListener('progress', this.checkVideoProgress);\n\t\t\tthis.video.addEventListener('progress', this.checkVideoProgress);\n\t\t\twindow.setTimeout(this.checkVideoProgress.bind(this), 100);\n\t\t} else {\n\t\t\tconsole.warn('Video failed to load');\n\t\t}\n\t}\n}", "CodeBleu_score": 31.79301657984991}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.removeEventListener('progress', this.checkVideoProgress.bind(this));\n\t\tthis.updateTexture();\n\t} else if (this.retries > 0) {\n\t\tthis.retries--;\n\t\tsetTimeout(this.checkVideoProgress.bind(this), 1000);\n\t} else {\n\t\tconsole.warn('Video failed to load');\n\t}\n}", "CodeBleu_score": 26.809851803882722}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.sourceChangePending = false;\n\t\tthis.updateTexture();\n\t} else {\n\t\tif (this.retries > 0) {\n\t\t\tthis.retries--;\n\t\t\tthis.video.load();\n\t\t\tthis.video.play();\n\t\t\twindow.setTimeout(this.checkVideoProgress.bind(this), 1000);\n\t\t} else {\n\t\t\tconsole.warn('Failed to load video.');\n\t\t}\n\t}\n}", "CodeBleu_score": 34.9366816336143}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\tif (this.state!== Phaser.InputHandler.STATE_DOWN) {\n\t\tthis.state = Phaser.InputHandler.STATE_DOWN;\n\t\tthis.timeDown = this.game.time.time;\n\t\tthis.repeats = 0;\n\t}\n\tthis.event = event;\n\tthis.value = value;\n\tthis.isDown = true;\n\tthis.isUp = false;\n\tthis.altKey = event.altKey;\n\tthis.ctrlKey = event.ctrlKey;\n\tthis.shiftKey = event.shiftKey;\n\tthis.onDown.dispatch(this, value);\n\treturn this;\n}", "CodeBleu_score": 70.95025909654474}, {"code": "start: function (event, value){\n\t\nif (this.state!== Phaser.Input.Keyboard.Key.DOWN)\n{\nthis.state = Phaser.Input.Keyboard.Key.DOWN;\nthis.timeDown = this.game.time.time;\nthis.timeUp = 0;\nthis.repeats = 0;\n\nif (event)\n{\nthis.altKey = event.altKey;\nthis.ctrlKey = event.ctrlKey;\nthis.shiftKey = event.shiftKey;\n}\n\nthis.event = event;\nthis.value = value;\n\nthis.onDown.dispatch(this, value);\n}\n\nreturn this;\n\n}", "CodeBleu_score": 65.88218081570584}, {"code": "start: function (event, value){\n\t\tif (this.state!== Phaser.Input.Keyboard.Key.STATE_DOWN)\n\t{\n\t\tthis.state = Phaser.Input.Keyboard.Key.STATE_DOWN;\n\n\t\tthis.timeDown = this.manager.game.time.time;\n\t\tthis.duration = 0;\n\t\tthis.repeats = 0;\n\n\t\tif (event)\n\t\t{\n\t\t\tthis.altKey = event.altKey;\n\t\t\tthis.ctrlKey = event.ctrlKey;\n\t\t\tthis.shiftKey = event.shiftKey;\n\t\t}\n\n\t\tthis.event = event;\n\t\tthis.value = value;\n\n\t\tthis.onDown.dispatch(this, value);\n\t}\n}", "CodeBleu_score": 63.3655205886513}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\nthis.event = event;\n\nif (this.preventDefaultDown) {\nevent.preventDefault();\n}\n\nif (this.mouseDownCallback) {\nthis.mouseDownCallback.call(this.callbackContext, event);\n}\n\nif (this.input.enabled) {\nthis.input.mousePointer.start(event);\n}\n\n}", "CodeBleu_score": 56.197520934838444}, {"code": "onMouseDown: function (event){\n\tthis.event = event;\nif (this.preventDefaultDown) {\nevent.preventDefault();\n}\nif (this.mouseDownCallback) {\nthis.mouseDownCallback.call(this.callbackContext, this.event);\n}\nif (this.input.enabled) {\nthis.input.mousePointer.start(this.event);\n}\n}", "CodeBleu_score": 43.25215697578163}, {"code": "onMouseDown: function (event){\n\t\nthis.mouseDownEvent = event;\n\nif (this.mouseDownCallback)\n{\nthis.mouseDownCallback.call(this.callbackScope, event);\n}\n\nif (this.input.enabled)\n{\nthis.input.mousePointer.start(event);\n}\n\n}", "CodeBleu_score": 37.520451344113}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\tthis.mouseUpCallback = this.game.input.mouse.mouseUpCallback\nthis.mouseUpCallbackContext = this.game.input.mouse.callbackContext\n\nif (this.mouseUpCallback)\n{\nif (this.mouseUpCallback.call(this.mouseUpCallbackContext, event) === false)\n{\nevent.preventDefault()\n}\n}\n\nif (this.game.input.enabled)\n{\nthis.game.input.mousePointer.identifier = event.pointerId\nthis.game.input.mousePointer.start(event)\n}\n}", "CodeBleu_score": 50.31786794858586}, {"code": "onMouseUpGlobal: function (event){\n\t\nthis.event = event\n\nif (this.preventDefaultDown) {\nevent.preventDefault()\n}\n\nif (this.mouseUpCallback) {\nthis.mouseUpCallback.call(this.callbackContext, event)\n}\n\nif (this.input.enabled) {\nthis.input.mousePointer.identifier = event.pointerId\nthis.input.mousePointer.start(event)\n}\n\n}", "CodeBleu_score": 61.27674660368834}, {"code": "onMouseUpGlobal: function (event){\n\t\nthis.mouseUpCallback = this.mouse.callbackContext.onMouseUp;\n\nthis.mouse.callbackContext = this.game;\nthis.mouse.event = event;\n\nif (this.mouse.preventDefault)\n{\nevent.preventDefault();\n}\n\nif (this.mouseUpCallback)\n{\nthis.mouseUpCallback.call(this.game, event);\n}\n\nif (this.input.mousePointer.enabled)\n{\nthis.input.mousePointer.identifier = event.identifier;\nthis.input.mousePointer.start();\n}\n\n}", "CodeBleu_score": 52.28856566535172}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\tif (this.gameInputEnabled && this.enabled) {\n\t\tthis.touchEnterCallback.call(this, event);\n\t\tif (this.touchEnterPreventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 22.855982257462824}, {"code": "onTouchEnter: function (event){\n\t\tif (!this.game.input.enabled ||!this.enabled) {\n\t\treturn;\n\t}\n\n\tthis.game.input.touch.touchEnterCallback(this, event);\n\n\tif (this.game.input.touch.stopOnGameOut &&!this.game.input.touch.touching) {\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 28.67295708672294}, {"code": "onTouchEnter: function (event){\n\t\tif (this.game.input.enabled && this.enabled) {\n\t\tthis.touchEnterCallback.call(this.callbackContext, this, event);\n\t\tif (this.touchEnterCallback) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 26.83299414795734}]}
