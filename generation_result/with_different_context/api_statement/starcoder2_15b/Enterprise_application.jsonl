{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.getlist('attachment_ids')\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    zip_file = attachments._build_zip_from_attachments()\n    zip_headers = attachments._get_zip_headers(zip_file)\n    return request.make_response(zip_file, headers=zip_headers, cookies={'fileToken': attachments.env['ir.http'].session_info()['session_id']})", "CodeBleu_score": 40.71966505381974}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self.env['ir.attachment']\n    attachment_ids = args.getlist('attachment_ids')\n    attachments = attachments.browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    zip_file = attachments._build_zip_from_attachments()\n    zip_file.seek(0)\n    headers = attachments._get_zip_headers()\n    return request.make_response(zip_file, headers=headers)\n", "CodeBleu_score": 36.700681046230386}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.getlist('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    zip_file = attachments._build_zip_from_attachments()\n    zip_headers = attachments._get_zip_headers(zip_file)\n    return request.make_response(zip_file, headers=zip_headers, cookies=None)", "CodeBleu_score": 41.894215823367496}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalMyHome, self)._prepare_home_portal_values(counters)\n    invoice_domain = self._get_invoices_domain()\n    bill_domain = self._get_bills_domain()\n    Invoice = request.env['account.move']\n    Bill = request.env['account.move']\n    if Invoice and Invoice.check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = Invoice.search_count(invoice_domain)\n    if Bill and Bill.check_access_rights('read', raise_exception=False):\n        values['bill_count'] = Bill.search_count(bill_domain)\n    return values\n\n", "CodeBleu_score": 32.109230700885085}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalMyHome, self)._prepare_home_portal_values()\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['show_invoices'] = True\n        values['show_bills'] = True\n        values['invoice_count'] = counters['invoice_count']\n        values['bill_count'] = counters['bill_count']\n        if self.env.user.has_group('account.group_account_invoice'):\n            self.env.user.check_access_rights('read')\n            self.env.user.check_access_rule('read')\n            values['invoice_count'] = self._get_invoices_domain(type='out_invoice', status='open')['invoice_count']\n            values['bill_count'] = self._get_invoices_domain(type='in_invoice', status='open')['invoice_count']\n    return values\n\n", "CodeBleu_score": 33.69409222619119}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    invoice_model = self.env['account.move']\n    bill_model = self.env['account.move']\n    invoice_count = 0\n    bill_count = 0\n    if invoice_model.check_access_rights('read', raise_exception=False):\n        invoice_count = invoice_model.search_count(self._get_invoices_domain())\n    if bill_model.check_access_rights('read', raise_exception=False):\n        bill_count = bill_model.search_count(self._get_bills_domain())\n    values['invoice_count'] = invoice_count\n    values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 39.79809579014878}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = {}\n    domain = self._get_my_invoices_domain(date_begin, date_end, filterby)\n    searchbar_sortings = {\n        'date': {'label': _('Date'), 'order': 'date desc'},\n        'number': {'label': _('Reference'), 'order': 'number'},\n        'amount': {'label': _('Amount'), 'order': 'amount'},\n       'state': {'label': _('Status'), 'order':'state'},\n    }\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n    archive_groups = self._get_archive_groups('account.invoice', domain, order) if values['show_archives'] else []\n    if date_begin and date_end:\n        values['title'] = _('Invoices from %s to %s') % (date_begin, date_end)\n    elif date_begin:\n        values['title'] = _('Invoices from %s') % (date_begin)\n    elif date_end:\n        values['title'] = _('Invoices before %s') % (date_end)\n    else:\n        values['title'] = _('Invoices')\n    if 'invoice_id' in kw and kw['invoice_id'] and kw['invoice_id']!= 'False':\n        values['invoice_id'] = int(kw['invoice_id'])\n    if 'type' in kw and kw['type'] and kw['type']!= 'False':\n        values['type'] = kw['type']\n    if'state' in kw and kw['state'] and kw['state']!= 'False':\n        values['state'] = kw['state']\n    if 'filterby' in kw and kw['filterby'] and kw['filterby']!= 'False':\n        values['filterby'] = kw['filterby']\n    if 'date_begin' in kw and kw['date_begin'] and kw['date_begin']!= 'False':\n        values['date_begin'] = kw['date_begin']\n    if 'date_end' in kw and kw['date_end'] and kw['date_end']!= 'False':\n        values['date_end'] = kw['date_end']\n    if'sortby' in kw and kw['sortby'] and kw['sortby']!= 'False':\n        values['sortby']", "CodeBleu_score": 33.11225984437522}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = {}\n    partner = request.env.user.partner_id\n    domain = [\n        ('partner_id', '=', partner.id),\n        ('state', '!=', 'cancel'),\n    ]\n    if date_begin and date_end:\n        domain += [('date_invoice', '>=', date_begin), ('date_invoice', '<=', date_end)]\n\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n        'due_date': {'label': _('Due Date'), 'order': 'date_due desc'},\n        'name': {'label': _('Reference'), 'order': 'name'},\n       'state': {'label': _('Status'), 'order':'state'},\n    }\n\n    # default sort by date\n    if not sortby:\n        sortby = 'date'\n    sort_order = searchbar_sortings[sortby]['order']\n\n    if filterby == 'overdue':\n        domain += [('state', '=', 'open'), ('date_due', '<=', fields.Date.today())]\n    if filterby == 'open':\n        domain += [('state', '=', 'open'), ('date_due', '>', fields.Date.today())]\n    if filterby == 'paid':\n        domain += [('state', '=', 'paid')]\n\n    # count for pager\n    invoice_count = request.env['account.invoice'].search_count(domain)\n    # make pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n    # search the invoices\n    invoices = request.env['account.invoice'].search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'date_end': date_end,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n       'searchbar_sortings': searchbar_sortings,\n       'sortby': sortby", "CodeBleu_score": 39.31619907356272}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = {}\n    Invoice = request.env['account.invoice']\n    domain = [('partner_id', '=', request.env.user.partner_id.id)]\n    if date_begin and date_end:\n        domain += [('date_invoice', '>', date_begin), ('date_invoice', '<=', date_end)]\n    if filterby == 'overdue':\n        domain += [('state', '=', 'open'), ('date_due', '<', fields.Date.today())]\n    elif filterby == 'paid':\n        domain += [('state', '=', 'paid')]\n    elif filterby == 'unpaid':\n        domain += [('state', '=', 'open'), ('date_due', '>=', fields.Date.today())]\n    if sortby == 'date':\n        invoice_ids = Invoice.search(domain, order='date_invoice desc')\n    elif sortby == 'due':\n        invoice_ids = Invoice.search(domain, order='date_due desc')\n    else:\n        invoice_ids = Invoice.search(domain, order='number desc')\n    # pager\n    pager = request.website.pager(url=\"/my/invoices\", total=len(invoice_ids), page=page, step=self._items_per_page, scope=7, url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby})\n    # content according to pager and archive selected\n    invoices = Invoice.browse(invoice_ids[pager['offset']:pager['offset'] + pager['limit']])\n    request.session['my_invoices_history'] = invoice_ids.ids[:100]\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'default_url': '/my/invoices',\n       'searchbar_sortings': searchbar_sortings,\n       'searchbar_filters': searchbar_filters,\n       'sortby': sortby,\n        'filterby': filterby,\n    })\n    return request.render(\"website_sale.portal_my_invoices\", values)\n\n", "CodeBleu_score": 38.49577387901102}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if invoice.access_token and invoice.access_token!= access_token:\n        return request.redirect('/my/invoices/%s' % invoice.id)\n    if invoice.access_token and invoice.access_token == access_token and invoice.partner_id.id!= request.env.user.partner_id.id:\n        return request.redirect('/my/invoices/%s' % invoice.id)\n\n    if invoice.state == 'draft':\n        return request.redirect('/my/invoices/%s' % invoice.id)\n\n    if invoice.state not in ('open', 'paid') and not invoice.access_token:\n        return request.redirect('/my/invoices/%s' % invoice.id)\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice, report_type)\n\n    if report_type == 'attachment_zip':\n        return self._invoice_get_page_view_values(invoice, download)\n\n    return request.render('account.portal_my_invoice_page', self._invoice_get_page_view_values(invoice))\n", "CodeBleu_score": 29.35295010458817}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if invoice.access_token and invoice.access_token!= access_token:\n        return request.redirect('/my/invoices')\n\n    if invoice.type in ('out_invoice', 'out_refund'):\n        template = 'account.portal_invoice_page'\n    else:\n        template = 'account.portal_invoice_page_supplier'\n\n    values = self._invoice_get_page_view_values(invoice, access_token, report_type, download)\n    return request.render(template, values)\n\n", "CodeBleu_score": 18.802240521463247}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.invoice'].sudo().browse(invoice_id)\n    invoice_sudo = invoice.sudo()\n    if invoice.access_token and invoice.access_token!= access_token:\n        return request.redirect('/my/invoices')\n\n    if invoice.state == 'cancel':\n        return request.redirect('/my/invoices')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type, **kw)\n\n    if report_type == 'pdf' and invoice.state == 'posted':\n        attachments = invoice_sudo.get_legal_documents()\n        if not attachments:\n            return request.redirect('/my/invoices')\n\n        headers = self._get_zip_headers(len(attachments))\n        if download:\n            if len(attachments) > 1:\n                return request.make_response(attachments, headers=headers)\n            attachment = attachments[0]\n            headers['Content-Disposition'] = 'attachment; filename=\"%s\"' % attachment.filename\n            return request.make_response(attachment.datas, headers=headers)\n\n        return request.redirect('/my/invoices')\n\n    return request.redirect('/my/invoices')", "CodeBleu_score": 44.31669562804548}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    prod_templates = self.env['product.template'].search([('company_id', '=', company.id)])\n    prod_templates_sale = prod_templates.filtered(lambda x: x.account_taxes_id)\n    prod_templates_purchase = prod_templates.filtered(lambda x: x.supplier_taxes_id)\n    if company.account_sale_tax_id:\n        prod_templates_sale.write({'account_taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company.account_purchase_tax_id:\n        prod_templates_purchase.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return prod_templates\n\n", "CodeBleu_score": 28.143093171834586}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    prod_templates = self.env['product.template'].search(\n        [('company_id', '=', company.id), ('name', 'ilike', 'Product')],\n        limit=1)\n    prod_templates.write({'sale_taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    prod_templates.write({'purchase_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return prod_templates\n", "CodeBleu_score": 17.419870289489435}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    prod_templates = self.env['product.template'].search([('company_id', '=', company.id)])\n    prod_templates.filtered(lambda x: x.company_id.account_sale_tax_id).write({'taxes_id': [(6, 0, [x.company_id.account_sale_tax_id.id])]})\n    prod_templates.filtered(lambda x: x.company_id.account_purchase_tax_id).write({'supplier_taxes_id': [(6, 0, [x.company_id.account_purchase_tax_id.id])]})\n    return prod_templates\n", "CodeBleu_score": 23.4747978578646}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env.ref(xml_id, raise_if_not_found=False)\n    if demo_account:\n        return demo_account\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if demo_account:\n        return demo_account\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    if demo_account:\n        return demo_account\n    return False\n\n", "CodeBleu_score": 43.04087942462959}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 41.628564989840896}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env['ir.model.data'].xmlid_to_object(xml_id)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return demo_account\n", "CodeBleu_score": 42.31073728691096}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.filtered(lambda account: account.account_type == \"current_year_earnings\")\n    accounts_grouped_by_company = accounts.read_group(\n        domain=[(\"account_type\", \"=\", \"current_year_earnings\")],\n        fields=[\"company_id\"],\n        groupby=[\"company_id\"],\n    )\n    for company_group in accounts_grouped_by_company:\n        if len(company_group[\"__ids\"]) > 1:\n            raise ValidationError(\n                \"There can be only one account of type 'Current Year Earnings' per company.\"\n            )\n", "CodeBleu_score": 30.39547378197245}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('type', '=', 'current_year_earnings')])\n    grouped_accounts = accounts.read_group([('company_id', 'in', self.ids)], ['company_id'], ['company_id'])\n    for grouped_account in grouped_accounts:\n        if grouped_account['company_id_count'] > 1:\n            raise ValidationError(_('There is more than one account with the \"Current Year Earnings\" type for company %s.') % self.browse(grouped_account['company_id'][0]).name)", "CodeBleu_score": 25.723221063401482}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.filtered(lambda account: account.account_type == \"current_year_earnings\")\n    if accounts:\n        account_groups = accounts.read_group(\n            [(\"account_type\", \"=\", \"current_year_earnings\")], [\"company_id\"], [\"company_id\"]\n        )\n        duplicate_companies = [\n            group[\"company_id\"][1] for group in account_groups if group[\"company_id_count\"] > 1\n        ]\n        if duplicate_companies:\n            raise ValidationError(\n                _(\n                    \"There is more than one account of type 'Current Year Earnings' for the following companies: %s\"\n                )\n                % \", \".join(duplicate_companies)\n            )", "CodeBleu_score": 36.66020141444301}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator in ['=', '!=', '<>', 'like', 'not like', 'ilike', 'not ilike'] and not isinstance(name, str):\n        # In this case, name is a tuple of the form (field_name, operator, value)\n        # and we want to replace the name with the field_name, and add the operator and value to the domain\n        name, operator, value = name\n        domain = expression.AND([domain, [(name, operator, value)]])\n        name = False\n    if not name and self._context.get('default_code'):\n        name = self._context.get('default_code')\n    if not name and self._context.get('default_name'):\n        name = self._context.get('default_name')\n    if not name and self._context.get('default_parent_id'):\n        name = self._context.get('default_parent_id')\n    if not name and self._context.get('default_user_type_id'):\n        name = self._context.get('default_user_type_id')\n    if not name and self._context.get('default_company_id'):\n        name = self._context.get('default_company_id')\n    if not name and self._context.get('default_reconcile'):\n        name = self._context.get('default_reconcile')\n    if not name and self._context.get('default_internal_type'):\n        name = self._context.get('default_internal_type')\n    if not name and self._context.get('default_tag_ids'):\n        name = self._context.get('default_tag_ids')\n    if not name and self._context.get('default_tax_ids'):\n        name = self._context.get('default_tax_ids')\n    if not name and self._context.get('default_tax_line_id'):\n        name = self._context.get('default_tax_line_id')\n    if not name and self._context.get('default_tax_line_id'):\n        name = self._context.get('default_tax_line_id')\n    if not name and self._context.get('default_tax_line_id'):\n        name = self._context.get('default_tax_line_id')\n    if not name and self._context.get", "CodeBleu_score": 32.44881060767762}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n    return super(AccountAccount, self)._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 14.031632187654766}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n    domain = domain or []\n    if operator == 'ilike':\n        name = name.replace(' ','| ')\n    domain = expression.AND([domain, [('code', '=', name)]])\n    return super(AccountAccount, self)._name_search(name, domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 30.051982764563007}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    excluded = excluded + ('name',)\n    super(copy_translations, self).copy_translations(new, excluded)\n    if new.name:\n        if new.name.startswith(new.name_get()[0][0]):\n            new.name_field._get_stored_translations(new.id)\n    return new\n", "CodeBleu_score": 28.298339370827986}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super", "CodeBleu_score": 4.567307692307724}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not hasattr(self, 'name'):\n        return\n    excluded = excluded + ('name',)\n    if self.name_field and self.name_field._get_stored_translations():\n        if self.name_field.name in excluded:\n            excluded = excluded[:-1]\n        if self.name_field.name not in new._fields:\n            new._fields[self.name_field.name] = self.name_field\n        if self.name_field.name not in new._translations:\n            new._translations[self.name_field.name] = self.name_field._get_stored_translations()\n    for field in self._fields.values():\n        if field.name in excluded:\n            continue\n        if field.translate:\n            if field.name not in new._fields:\n                new._fields[field.name] = field\n            if field.name not in new._translations:\n                new._translations[field.name] = field._get_stored_translations()\n\n", "CodeBleu_score": 29.557997706443484}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    query = \"\"\"\n        SELECT DISTINCT ai.id\n        FROM account_move_line AS l\n        JOIN account_move AS am ON l.move_id = am.id\n        JOIN account_invoice AS ai ON ai.move_id = am.id\n        WHERE l.account_id = %s\n        AND ai.type = ANY(%s)\n        AND ai.state!= 'cancel'\n        AND ai.partner_id = %s\n    \"\"\"\n    if self.analytic_account_id:\n        query += \"\"\"\n            AND l.analytic_account_id = %s\n        \"\"\"\n    self.env.cr.execute(query, (self.property_account_receivable_id.id, self.get_sale_types(), self.id, self.analytic_account_id.id))\n    invoice_ids = [x[0] for x in self.env.cr.fetchall()]\n    return {\n        'name': _('Customer Invoices'),\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n       'res_model': 'account.invoice',\n        'view_id': False,\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', invoice_ids)],\n        'context': \"{'type':'out_invoice'}\",\n    }\n", "CodeBleu_score": 32.20960786894748}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    query = \"\"\"SELECT DISTINCT account_move_line.move_id AS move_id FROM account_move_line WHERE account_move_line.sale_line_id IS NOT NULL AND account_move_line.sale_line_id IN (SELECT sale_order_line.id FROM sale_order_line WHERE sale_order_line.order_id = %s)\"\"\"\n    if self.analytic_account_id:\n        query += \"\"\" AND account_move_line.analytic_account_id = %s\"\"\"\n    self._cr.execute(query, (self.id, self.analytic_account_id.id) if self.analytic_account_id else (self.id,))\n    res = self._cr.dictfetchall()\n    move_ids = [x['move_id'] for x in res]\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'default_partner_id': self.partner_id.id}\n    return action\n", "CodeBleu_score": 35.52960572261837}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['account.move'].get_sale_types()\n    query = \"\"\"\n        SELECT DISTINCT aml.move_id\n        FROM account_move_line aml\n        WHERE aml.move_id IN (\n            SELECT am.id\n            FROM account_move am\n            WHERE am.company_id = %s\n                AND am.state = 'posted'\n                AND am.sale_journal = true\n                AND am.type IN %s\n        )\n    \"\"\"\n    params = [self.company_id.id, tuple(sale_types)]\n    if self.analytic_account_id:\n        query += \"\"\"\n            AND aml.analytic_account_id IN (\n                SELECT id\n                FROM account_analytic_account\n                WHERE id = %s\n                    OR (parent_id IS NOT NULL AND parent_id IN (\n                        WITH RECURSIVE search_parent(id, parent_id) AS (\n                            SELECT id, parent_id\n                            FROM account_analytic_account\n                            WHERE id = %s\n                            UNION ALL\n                            SELECT aaa.id, aaa.parent_id\n                            FROM account_analytic_account aaa, search_parent sp\n                            WHERE aaa.id = sp.parent_id\n                        )\n                        SELECT id\n                        FROM search_parent\n                    ))\n            )\n        \"\"\"\n        params += [self.analytic_account_id.id, self.analytic_account_id.id]\n    query += \"\"\"\n        AND aml.partner_id = %s\n    \"\"\"\n    params += [self.partner_id.id]\n    self.env.cr.execute(query, params)\n    move_ids = [row[0] for row in self.env.cr.fetchall()]\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'default_partner_id': self.partner_id.id}\n    return action\n", "CodeBleu_score": 25.710207374766025}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_types = self.env['account.move'].get_purchase_types()\n    purchase_type_domain = [('move_type', 'in', purchase_types)]\n    purchase_type_domain.append(('purchase_id', '=', self.id))\n    move_lines = self.env['account.move.line'].search(purchase_type_domain)\n    move_ids = move_lines.mapped('move_id').filtered(lambda move: move.state!= 'draft')\n    action = {\n        'domain': [('id', 'in', move_ids.ids)],\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'context': \"{'create': False, 'default_move_type': 'in_invoice'}\",\n    }\n    return action\n", "CodeBleu_score": 33.76707194311528}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line'].with_context(prefetch_fields=False).search([\n        ('purchase_line_id', 'in', self.order_line.ids),\n        ('account_internal_type', 'in', ('payable','receivable')),\n    ])\n    move_ids = query.mapped('move_id').ids\n    return {\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'create': False, 'default_type': 'in_invoice'},\n    }\n\n", "CodeBleu_score": 26.598164594944944}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_type_ids = self.env['account.move.type'].search([('purchase_type', '=', True)]).ids\n    move_ids = self.env['account.move.line'].search([('move_id.move_type_id', 'in', purchase_type_ids), ('move_id.purchase_id', '=', self.id)]).mapped('move_id').ids\n    move_ids = list(set(move_ids))\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    if len(move_ids) == 1:\n        action['views'] = [(False, 'form')]\n        action['res_id'] = move_ids[0]\n    else:\n        action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'default_type': 'in_invoice', 'default_purchase_id': self.id}\n    return action\n", "CodeBleu_score": 35.394191431208895}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if self.ids and 'attachment_ids' in values:\n        # remove attachment_ids from values\n        values.pop('attachment_ids')\n    with self.env.manage_attachments():\n        return super(AttachmentMixin, self).write(values)\n", "CodeBleu_score": 35.60404986522104}, {"code": "def write(self, values)\n\t\n    if self.ids and 'attachment_ids' in values:\n        self.ids.check_attachments(values.pop('attachment_ids'))\n    return super(AttachmentMixin, self).write(values)\n\n", "CodeBleu_score": 30.646477649120307}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values and len(values['attachment_ids']) > 1:\n        values.pop('attachment_ids')\n    with self._check_attachments():\n        return super(IrAttachment, self).write(values)\n\n", "CodeBleu_score": 28.7264970628789}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env['ir.config_parameter'].sudo().get_param('account.disable_automatic_bank_account_creation'):\n        return self.bank_account.filtered(lambda ba: ba.company_id == self.company_id)\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id)])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.id,\n            'bank_id': self.env['res.bank'].search([('bic', '=', self.bic)], limit=1).id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account.filtered(lambda ba: ba.company_id == self.company_id)\n", "CodeBleu_score": 56.10007701125813}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env['ir.config_parameter'].sudo().get_param('account.disable_automatic_bank_account_creation'):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account.filtered(lambda bank: bank.company_id == self.company_id)", "CodeBleu_score": 62.03155270480758}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if not self.env['ir.config_parameter'].sudo().get_param('l10n_in.bank_account_creation'):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.bank_account_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.bank_account_number,\n            'partner_id': self.partner_id.id,\n            'bank_id': self.bank_id.id,\n            'bank_name': self.bank_name,\n           'state': 'bank',\n        })\n    return bank_account.filtered(lambda bank_account: bank_account.company_id == self.company_id)\n", "CodeBleu_score": 62.86927202596302}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = self.currency_id\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id or company_currency\n    if transaction_currency == journal_currency:\n        # single-currency entry case\n        amount = transaction_currency.round(balance)\n        amount_currency = 0.0\n    elif transaction_currency == company_currency:\n        # multi-currency entry with rate specified on the transaction line\n        amount = company_currency.round(balance)\n        amount_currency = journal_currency.round(amount_currency)\n    else:\n        # multi-currency entry with rate specified on the journal\n        amount = journal_currency.round(balance)\n        amount_currency = transaction_currency.round(amount_currency)\n    return {\n        'amount': amount,\n        'amount_currency': amount_currency,\n        'currency_id': currency.id if currency else False,\n    }\n\n", "CodeBleu_score": 19.786464298818917}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = currency or self.company_currency_id\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id or company_currency\n    transaction_amount = amount_currency\n    journal_amount = transaction_amount\n    company_amount = transaction_amount\n    if transaction_currency!= company_currency:\n        journal_amount = transaction_currency.round(transaction_amount * self.company_currency_exchange_rate)\n    if journal_currency!= company_currency:\n        company_amount = journal_currency.round(journal_amount * self.company_currency_exchange_rate)\n    if transaction_currency!= journal_currency:\n        transaction_amount = journal_currency.round(transaction_amount * self.journal_currency_exchange_rate)\n    if transaction_currency!= company_currency:\n        balance = transaction_currency.round(balance * self.company_currency_exchange_rate)\n    return {\n        \"transaction_amount\": transaction_amount,\n        \"journal_amount\": journal_amount,\n        \"company_amount\": company_amount,\n        \"balance\": balance,\n    }\n\n", "CodeBleu_score": 23.216505930536368}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = self.currency_id\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id or company_currency\n    if transaction_currency == journal_currency:\n        # Single-currency.\n        amount = transaction_currency.round(balance)\n        amount_currency = 0.0\n    elif transaction_currency == company_currency:\n        # Multi-currency with rate specified on the transaction.\n        amount = company_currency.round(balance)\n        amount_currency = transaction_currency.round(amount_currency)\n    else:\n        # Multi-currency with different transaction rate than the company rate.\n        # The journal rate is used for the counterpart.\n        amount = journal_currency.round(balance)\n        amount_currency = transaction_currency.round(amount_currency)\n    return {\n        'amount': amount,\n        'amount_currency': amount_currency,\n        'balance': balance,\n    }\n", "CodeBleu_score": 19.063339575336858}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ['bank', 'cash']:\n            default_outbound_payment_methods = journal._default_outbound_payment_methods()\n            for default_method in default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {'outbound_payment_method_id': default_method.id})]\n\n", "CodeBleu_score": 39.45044676879364}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    # Clear existing payment method lines\n    self.outbound_payment_method_line_ids = None\n    # If journal type is 'bank' or 'cash', create new entries for each default outbound payment method\n    if self.type in (\"bank\", \"cash\"):\n        for method in self._default_outbound_payment_methods:\n            self.env[\"account.journal.outbound.payment.method.line\"].create(\n                {\n                    \"journal_id\": self.id,\n                    \"outbound_payment_method_id\": method.id,\n                }\n            )\n    # Assign the updated list of payment method line commands to the journal\n    self.outbound_payment_method_line_ids = self._compute_outbound_payment_method_line_ids()\n\n", "CodeBleu_score": 32.04699163729029}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    if self.type in ['bank', 'cash']:\n        self.outbound_payment_method_line_ids.unlink()\n        for method in self._default_outbound_payment_methods:\n            self.outbound_payment_method_line_ids = [(0, 0, method)]\n", "CodeBleu_score": 17.00269532029908}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    today = fields.Date.today()\n    for move in self:\n        if move.date and move.date!= today:\n            continue\n        if move.invoice_date:\n            if not move.is_sale_document:\n                move.date = fields.Date.from_string(move.invoice_date) + move.tax_report_id.invoice_date_to_tax_date\n            else:\n                move.date = fields.Date.from_string(move.invoice_date) - move.tax_report_id.invoice_date_to_tax_date\n        else:\n            move.date = today\n        move.env.recompute()\n", "CodeBleu_score": 34.00366493651584}, {"code": "def _compute_date(self)\n\t\n    today = fields.Date.today()\n    for move in self:\n        if move.date:\n            continue\n        if move.invoice_date:\n            if move.is_sale_document():\n                move.date = move.invoice_date\n            else:\n                move.date = move._get_accounting_date(move.invoice_date)\n        else:\n            move.date = today\n        move._affect_tax_report()\n        if move.date!= today:\n            self.env.cr.execute(\n                \"SELECT id FROM ir_model_fields WHERE model = %s AND name = %s\",\n                (\"account.move\", \"date\"),\n            )\n            field_id = self.env.cr.fetchone()[0]\n            self.env.cr.execute(\n                \"\"\"\n                SELECT id FROM ir_rule WHERE model_id = %s AND field_id = %s AND active\n                \"\"\",\n                (self.env[\"ir.model\"]._get(\"account.move\").id, field_id),\n            )\n            rule_ids = [row[0] for row in self.env.cr.fetchall()]\n            if rule_ids:\n                self.env[\"ir.rule\"].browse(rule_ids)._add_to_compute(move)\n", "CodeBleu_score": 33.7538407391066}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date:\n            if move.invoice_date:\n                if not move.is_sale_document:\n                    move.date = fields.Date.from_string(\n                        move._context.get(\"date_p8\")\n                    ) or move.invoice_date\n                    move.date = move._affect_tax_report(move.date)\n                else:\n                    move.date = move.invoice_date\n            else:\n                move.date = move._get_accounting_date()\n        if move.date!= move._context.get(\"date_p8\"):\n            move.add_to_compute()\n\n", "CodeBleu_score": 38.26052068216077}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document and move.partner_id.sale_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.sale_payment_term_id\n        elif move.is_purchase_document and move.partner_id.purchase_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.purchase_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 46.24319947769126}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.customer_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 39.86969340743559}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.sale_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.sale_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.purchase_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.purchase_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 39.534833496073475}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    tax_groups_by_country_company = defaultdict(list)\n    for tax in self:\n        tax_groups_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n    for (country, company), taxes in tax_groups_by_country_company.items():\n        tax_group = tax_groups.search([('country_id', '=', country.id), ('company_id', '=', company.id)])\n        if not tax_group:\n            tax_group = tax_groups.search([('country_id', '=', False), ('company_id', '=', company.id)])\n        taxes.tax_group_id = tax_group\n", "CodeBleu_score": 29.88899080635703}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    tax_groups_by_country_company = defaultdict(list)\n    for tax_group in tax_groups:\n        tax_groups_by_country_company[(tax_group.country_id, tax_group.company_id)].append(tax_group)\n    for tax in self:\n        tax_group_id = False\n        for tax_group in tax_groups_by_country_company[(tax.country_id, tax.company_id)]:\n            if tax_group.country_id == tax.country_id:\n                tax_group_id = tax_group.id\n                break\n        if not tax_group_id:\n            for tax_group in tax_groups_by_country_company[(False, tax.company_id)]:\n                if tax_group.company_id == tax.company_id:\n                    tax_group_id = tax_group.id\n                    break\n        tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 28.817623902001237}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    taxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n    for (country, company), taxes in taxes_by_country_company.items():\n        if not company:\n            continue\n        tax_group_domain = [('country_id', '=', country.id), ('company_id', '=', company.id)]\n        tax_group = tax_groups.search(tax_group_domain, limit=1)\n        if not tax_group:\n            tax_group_domain = [('country_id', '=', False), ('company_id', '=', company.id)]\n            tax_group = tax_groups.search(tax_group_domain, limit=1)\n        if tax_group:\n            taxes.write({'tax_group_id': tax_group.id})\n", "CodeBleu_score": 34.47248160565833}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.set_db(db)\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n    files = {\n        'file': module_file,\n    }\n    res = self.post(url + '/web/base_import_module/login_upload', data=data, files=files)\n    res.raise_for_status()\n    return res.text\n", "CodeBleu_score": 31.459848419191893}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.set_db(db)\n    data = {\n        \"login\": login,\n        \"password\":,\n        \"db\": db,\n        \"force\": force,\n    }\n    with open(module_file, \"rb\") as f:\n        files = {\"module_file\": f}\n        res = self.post(url + \"/web/base_import_module/login_upload\", data=data, files=files)\n        res.raise_for_status()\n        return res.text\n\n", "CodeBleu_score": 34.60563036896558}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.set_db(db)\n    # Prepare the POST request data\n    data = {\n        \"login\": login,\n        \"password\":,\n        \"db\": db,\n        \"force\": force,\n    }\n    # Upload the module file\n    with open(module_file, \"rb\") as f:\n        res = self.post(url, data=data, files={\"file\": f})\n        res.raise_for_status()\n    return res.text\n\n", "CodeBleu_score": 31.208622442749856}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Retrieve configuration settings\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite_translations')\n\n    # Create a new database registry\n    registry = Registry(db_name)\n\n    # Create a cursor and initialize a TranslationImporter\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, overwrite)\n\n        # Load translation files and save the translations\n        translation_importer.load_file()\n        translation_importer.save()\n\n", "CodeBleu_score": 38.52400431464359}, {"code": "def import_translation()\n\t\n    database_name = config.get('database_name')\n    overwrite_existing = config.get('overwrite_existing')\n\n    registry = registry(database_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, database_name, overwrite_existing)\n        translation_importer.load_file()\n        translation_importer.save()\n\n", "CodeBleu_score": 39.58759917174336}, {"code": "def import_translation()\n\t\n    db_name = config.get(\"db_name\")\n    overwrite = config.get(\"overwrite\")\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, overwrite=overwrite)\n        translation_importer.load_file()\n        translation_importer.save()\n\n", "CodeBleu_score": 40.47537463374994}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in [child.name for child in self.children]:\n        return self.children[name]\n    new_child = Node(name, info)\n    new_child.depth = self.depth + 1\n    new_child.parent = self\n    if hasattr(self, \"info\"):\n        setattr(new_child, \"info\", self.info)\n    if hasattr(self, \"children\"):\n        setattr(new_child, \"children\", self.children)\n    if hasattr(self, \"add_child\"):\n        setattr(new_child, \"add_child\", self.add_child)\n    if hasattr(self, \"get_child\"):\n        setattr(new_child, \"get_child\", self.get_child)\n    if hasattr(self, \"get_children\"):\n        setattr(new_child, \"get_children\", self.get_children)\n    self.children.append(new_child)\n    self.children.sort(key=lambda x: x.name)\n    return new_child\n\n", "CodeBleu_score": 39.78453929983226}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if hasattr(self, \"path\"):\n        child.path = self.path + [name]\n    else:\n        child.path = [name]\n    if hasattr(self, \"data\"):\n        child.data = self.data\n    if hasattr(self, \"children\"):\n        if child not in self.children:\n            self.children.append(child)\n    else:\n        self.children = [child]\n    self.children.sort(key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 45.24926830457938}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if hasattr(self, \"parent\"):\n        new_node.parent = self.parent\n    if hasattr(self, \"root\"):\n        new_node.root = self.root\n    if hasattr(self, \"children\"):\n        if new_node not in self.children:\n            self.children.append(new_node)\n    else:\n        self.children = [new_node]\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n", "CodeBleu_score": 45.922546709780924}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"balances\": {date: 0 for date in dates},\n        \"root_type\": frappe.get_cached_value(\"Account\", account, \"root_type\"),\n    }\n    for entry in gl_entries:\n        for date in dates:\n            if entry.posting_date <= date:\n                result[\"balances\"][date] += entry.debit - entry.credit\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        for date in dates:\n            result[\"balances\"][date] *= -1\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        for date in dates[:-1]:\n            result[\"balances\"][dates[dates.index(date) + 1]] += result[\"balances\"][date]\n    return result\n\n", "CodeBleu_score": 27.591179099743705}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {date: {\"balance\": 0} for date in dates}\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        date = entry.posting_date\n        if date in result:\n            result[date][\"balance\"] += entry.debit - entry.credit\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in result:\n            result[date][\"balance\"] *= -1\n    elif root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        balance = 0\n        for date in dates:\n            balance += result[date][\"balance\"]\n            result[date][\"balance\"] = balance\n    return result\n\n", "CodeBleu_score": 36.29410478411047}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"balances\": {date: 0 for date in dates},\n    }\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        for date in dates:\n            if entry.posting_date <= date:\n                result[\"balances\"][date] += entry.debit - entry.credit\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in dates:\n            result[\"balances\"][date] *= -1\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        balance = 0\n        for date in dates:\n            balance += result[\"balances\"][date]\n            result[\"balances\"][date] = balance\n    return result\n\n", "CodeBleu_score": 37.258705335115856}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= \"Receivable\" and self.account_type!= \"Payable\":\n        return\n    if self.account_type!= self.get_doc_before_save().account_type:\n        gl_entries = frappe.db.sql(\n            \"\"\"SELECT name FROM `tabGL Entry` WHERE account = %(account)s\"\"\",\n            {\"account\": self.name},\n            as_dict=True,\n        )\n        if gl_entries:\n            frappe.msgprint(\n                \"Changing the account type from Receivable/Payable to a non-receivable/payable type may result in inaccurate data in the Accounts report. Please verify the account type change carefully.\",\n                alert=True,\n            )\n            self.add_comment(\n                \"Comment\",\n                f\"Changing the account type from Receivable/Payable to a non-receivable/payable type may result in inaccurate data in the Accounts report. Please verify the account type change carefully.\",\n            )\n\n", "CodeBleu_score": 32.24484251764355}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if self.get_doc_before_save().account_type not in (\"Receivable\", \"Payable\"):\n            if self.get_all(\"gl_entries\"):\n                frappe.msgprint(\n                    _(\"Changing account type from {0} to {1} may result in incorrect balances in the Accounts report. Please repost the General Ledger entries for this account.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                    alert=True,\n                )\n                self.add_comment(\n                    \"Comment\",\n                    _(\"Changing account type from {0} to {1} may result in incorrect balances in the Accounts report. Please repost the General Ledger entries for this account.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                )\n\n", "CodeBleu_score": 26.878248031770223}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"] and self.get_doc_before_save().account_type not in [\"Receivable\", \"Payable\"]:\n        if frappe.db.exists(\"General Ledger Entry\", {\"account\": self.name}):\n            frappe.msgprint(\n                frappe._(\"Changing the account type from Receivable or Payable to a non-Receivable/Payable type may cause issues in the Accounts report. Please verify the account type before proceeding.\"),\n                title=frappe._(\"Warning\"),\n            )\n            self.add_comment(\n                \"Comment\",\n                frappe._(\n                    \"Changing the account type from Receivable or Payable to a non-Receivable/Payable type may cause issues in the Accounts report. Please verify the account type before proceeding.\"\n                ),\n            )\n\n", "CodeBleu_score": 25.91857646986216}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value('Company', self.company, 'default_currency')\n        self.is_currency_specified = 1\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n        return\n    if self.is_group:\n       ", "CodeBleu_score": 19.182185594308592}, {"code": "def validate_account_currency(self)\n\t\n\n    # Check if the account currency is explicitly specified\n    if self.account_currency:\n        # If the account currency is explicitly specified, check for existing general ledger entries with a different currency\n        existing_gl_entries = frappe.db.sql(\n            \"\"\"\n            SELECT name\n            FROM `tabGL Entry`\n            WHERE account = %s AND currency!= %s\n            \"\"\",\n            (self.name, self.account_currency),\n            as_dict=True,\n        )\n        # If there are existing general ledger entries with a different currency, raise an error\n        if existing_gl_entries:\n            frappe.throw(\n                _(\"Account currency cannot be changed because there are existing general ledger entries with a different currency.\")\n            )\n    # If the account currency is not explicitly specified, set the company's default currency\n    else:\n        self.account_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n        self.is_account_currency_explicitly_specified = 0\n\n", "CodeBleu_score": 38.803291323394255}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value('Company', self.company, 'default_currency')\n    else:\n        self.currency_is_explicitly_specified = 1\n\n    if self.account_type in ['Asset', 'Liability', 'Equity', 'Expense', 'Income']:\n        if self.get('accounts'):\n            for d in self.accounts:\n                if d.currency!= self.currency:\n                    frappe.throw(_(\"Currency of account {0} must be {1}\").format(d.account, self.currency))\n\n", "CodeBleu_score": 32.675535571099104}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dim] for dim in accounting_dimensions)\n        debit = entry.get(\"debit\")\n        credit = entry.get(\"credit\")\n        if key in merged_entries:\n            merged_entries[key][\"debit\"] += debit\n            merged_entries[key][\"credit\"] += credit\n            merged_entries[key][\"debit_amount_in_account_currency\"] += entry[\"debit_amount_in_account_currency\"]\n            merged_entries[key][\"credit_amount_in_account_currency\"] += entry[\"credit_amount_in_account_currency\"]\n        else:\n            merged_entries[key] = {\n                \"debit\": debit,\n                \"credit\": credit,\n                \"debit_amount_in_account_currency\": entry[\"debit_amount_in_account_currency\"],\n                \"credit_amount_in_account_currency\": entry[\"credit_amount_in_account_currency\"],\n            }\n    return merged_entries\n\n", "CodeBleu_score": 37.741446376021784}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_amount\": 0,\n                \"credit_amount\": 0,\n            }\n        merged_entries[key][\"debit\"] += entry[\"debit\"]\n        merged_entries[key][\"credit\"] += entry[\"credit\"]\n        merged_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n        merged_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n    return merged_entries\n\n", "CodeBleu_score": 39.04655557003049}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        merged_entries.setdefault(key, {\"debit_amount\": 0, \"credit_amount\": 0, \"debit_amount_in_account_currency\": 0, \"credit_amount_in_account_currency\": 0})\n        merged_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n        merged_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n        merged_entries[key][\"debit_amount_in_account_currency\"] += entry[\"debit_amount_in_account_currency\"]\n        merged_entries[key][\"credit_amount_in_account_currency\"] += entry[\"credit_amount_in_account_currency\"]\n    return merged_entries\n\n", "CodeBleu_score": 40.22074470260525}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_type == \"Supplier\":\n        supplier_name = self.supplier\n        supplier_doc = frappe.get_doc(\"Supplier\", supplier_name)\n        if supplier_doc.is_blocked:\n            if supplier_doc.block_type == \"Hold\":\n                if supplier_doc.block_till and supplier_doc.block_till < getdate():\n                    supplier_doc.is_blocked = 0\n                    supplier_doc.block_type = \"\"\n                    supplier_doc.block_till = None\n                    supplier_doc.save()\n                    frappe.db.commit()\n                else:\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold until {1}\").format(\n                            supplier_name, formatdate(supplier_doc.block_till)\n                        )\n                    )\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is blocked\").format(supplier_name)\n                )\n\n", "CodeBleu_score": 30.53524448686674}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    supplier = self.supplier\n    supplier_doc = frappe.get_doc(\"Supplier\", supplier)\n    if supplier_doc.blocked:\n        if supplier_doc.hold_type == \"Payment\" and self.doctype == \"Supplier Payment\":\n            if supplier_doc.release_date and supplier_doc.release_date < nowdate():\n                return\n            else:\n                frappe.throw(\n                    _(\"Supplier is blocked. Cannot proceed with the transaction.\")\n                )\n        elif supplier_doc.hold_type == \"Invoice\" and self.doctype == \"Buying Invoice\":\n            if supplier_doc.release_date and supplier_doc.release_date < nowdate():\n                return\n            else:\n                frappe.throw(\n                    _(\"Supplier is blocked. Cannot proceed with the transaction.\")\n                )\n\n", "CodeBleu_score": 25.98835576207696}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier and self.supplier_type == \"Supplier\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.status == \"On Hold\":\n            if supplier.hold_type == \"Payment\":\n                if self.posting_date > supplier.release_date:\n                    frappe.throw(_(\"Supplier {0} is on hold. Cannot proceed with the transaction.\").format(\n                        self.supplier))\n            elif supplier.hold_type == \"Invoice\":\n                if self.posting_date > supplier.release_date:\n                    frappe.throw(_(\"Supplier {0} is on hold. Cannot proceed with the transaction.\").format(\n                        self.supplier))\n\n", "CodeBleu_score": 26.803123682856743}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    from frappe.model.mapper import get_mapped_doc\n\n    # Identify relevant repost doctypes\n    repost_doctypes = [\n        dt.name\n        for dt in frappe.get_all(\n            \"DocType\", filters={\"is_submittable\": 1, \"is_repost_doctypes\": 1}\n        )\n    ]\n\n    # Query for rows where the voucher type and number match the current document\n    rows = frappe.get_all(\n        \"Repost Voucher\",\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_number\": self.name,\n        },\n        fields=[\"name\", \"parent\", \"parenttype\", \"repost_doctype\", \"repost_name\"],\n    )\n\n    if not rows:\n        return\n\n    # Organize rows into a map by parent document type and parent\n    references_map = {}\n    for row in rows:\n        references_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(\n            row\n        )\n\n    # Retrieve each parent document, remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype, set flags to ignore validation and links, and save the changes\n    for parenttype, parents in references_map.items():\n        for parent in parents:\n            repost_doc = frappe.get_doc(parenttype, parent)\n            for row in parents[parent]:\n                if parenttype == \"Repost Doctype\":\n                    repost_doc.remove(\"repost_vouchers\", row)\n                else:\n                    repost_doc.remove(\"vouchers\", row)\n            repost_doc.flags.ignore_links = True\n            repost_doc.flags.ignore_validate = True\n            repost_doc.save()\n\n", "CodeBleu_score": 32.890635767311714}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\"Repost DocType\", filters={\"parent\": self.doctype})\n    if not repost_doctypes:\n        return\n    repost_doctypes = [r.repost_doctype for r in repost_doctypes]\n    repost_doctypes = \", \".join([\"%s\"] * len(repost_doctypes))\n    query = \"\"\"\n        SELECT\n            parent,\n            parenttype,\n            name\n        FROM\n            `tabRepost Voucher`\n        WHERE\n            voucher_type = %s\n            AND voucher_no = %s\n            AND parenttype IN ({})\n    \"\"\".format(\n        repost_doctypes\n    )\n    rows = frappe.db.sql(query, [self.doctype, self.name] + repost_doctypes, as_dict=True)\n    if not rows:\n        return\n    references_map = {}\n    for row in rows:\n        references_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(\n            row.name\n        )\n    for parenttype, parents in references_map.items():\n        for parent, repost_vouchers in parents.items():\n            repost_doc = frappe.get_doc(parenttype, parent)\n            for repost_voucher in repost_vouchers:\n                repost_doc.remove(\"repost_vouchers\", repost_voucher)\n                repost_doc.remove(\"vouchers\", repost_voucher)\n            repost_doc.flags.ignore_links = True\n            repost_doc.flags.ignore_validate = True\n            repost_doc.save()\n\n", "CodeBleu_score": 30.794476612627957}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.repost_doctypes:\n        return\n\n    repost_doctypes = self.repost_doctypes.split(\"", "CodeBleu_score": 5.932117637056299}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth.authenticate()\n        query_params = {\n            \"fromDate\": start_date.strftime(\"%Y-%m-%d\"),\n            \"toDate\": end_date.strftime(\"%Y-%m-%d\"),\n        }\n        if account_id:\n            query_params[\"accountId\"] = account_id\n        transactions = []\n        while True:\n            response = self.auth.client.get(\n                \"/transactions\", params=query_params\n            )\n            response.raise_for_status()\n            response_json = response.json()\n            transactions.extend(response_json[\"transactions\"])\n            if len(transactions) < response_json[\"total\"]:\n                query_params[\"offset\"] = len(transactions)\n            else:\n                break\n    except requests.HTTPError as e:\n        raise e\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n        raise e\n    return transactions", "CodeBleu_score": 40.98848167978322}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        params = {\n            \"from\": start_date,\n            \"to\": end_date,\n            \"account_id\": account_id,\n            \"sort\": \"date\",\n            \"sort_dir\": \"asc\",\n        }\n        transactions = []\n        while True:\n            response = self.client.get(\"transactions\", params=params)\n            if response.status_code == 200:\n                transactions.extend(response.json()[\"transactions\"])\n                if len(transactions) < response.json()[\"total\"]:\n                    params[\"starting_after\"] = transactions[-1][\"id\"]\n                else:\n                    break\n            else:\n                raise Exception(\n                    f\"Error fetching transactions: {response.json()['error']['message']}\"\n                )\n        return transactions\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), title=\"Error fetching transactions\")\n        raise e\n\n", "CodeBleu_score": 36.66462639269124}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth = self.authenticate()\n        query_params = {\n            \"from\": start_date,\n            \"to\": end_date,\n            \"account_id\": account_id,\n            \"page\": 1,\n            \"per_page\": 100,\n        }\n        transactions = []\n        while True:\n            response = self.client.get_transactions(**query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"total\"]:\n                query_params[\"page\"] += 1\n            else:\n                break\n        return transactions\n    except Exception as e:\n        if isinstance(e, (requests.exceptions.HTTPError, requests.exceptions.ConnectionError)):\n            frappe.log_error(f\"Error fetching transactions for {self.account_name}: {e}\")\n        else:\n            raise e\n\n", "CodeBleu_score": 36.4825402779295}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        parsed_response = json.loads(response)\n        access_token = PlaidConnector.get_access_token(token)\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": parsed_response[\"institution\"][\"institution_id\"]})\n        if not bank.exists():\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = parsed_response[\"institution\"][\"institution_id\"]\n            bank.institution_name = parsed_response[\"institution\"][\"name\"]\n            bank.access_token = access_token\n            bank.insert()\n        else:\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(title=\"Error Adding Institution\", message=str(e))", "CodeBleu_score": 44.991694390098566}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response.get('institution_id')\n        institution_name = response.get('institution_name')\n        institution_url = response.get('url')\n        logo_url = response.get('logo')\n        country_code = response.get('country_code')\n\n        bank = frappe.get_doc('Bank', institution_id)\n        if bank.exists():\n            bank.access_token = token\n            bank.save()\n        else:\n            bank = frappe.new_doc('Bank')\n            bank.bank_id = institution_id\n            bank.bank_name = institution_name\n            bank.bank_url = institution_url\n            bank.logo_url = logo_url\n            bank.country_code = country_code\n            bank.access_token = token\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 31.48562049064098}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response['institution']\n        # Parse the response\n        institution_id = institution['institution_id']\n        name = institution['name']\n        # Retrieve an access token\n        plaid_connector = PlaidConnector(token)\n        access_token = plaid_connector.get_access_token()\n        # Check if the bank already exists\n        bank = frappe.get_doc('Bank', {'institution_id': institution_id})\n        if bank.exists():\n            # Update the access token for the existing bank\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create and insert a new bank record\n            bank = frappe.new_doc('Bank')\n            bank.institution_id = institution_id\n            bank.name = name\n            bank.access_token = access_token\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(f'Error adding institution: {e}')\n\n", "CodeBleu_score": 38.60946466468312}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        if not last_integration_date:\n            last_integration_date = getdate(get_first_day(today()))\n        start_date = last_integration_date + timedelta(days=1)\n        end_date = today()\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        for transaction in transactions:\n            new_bank_transaction(bank, bank_account, transaction)\n        frappe.db.set_value(\n            \"Bank Account\", bank_account, \"last_integration_date\", start_date\n        )\n        frappe.msgprint(\n            f\"{len(transactions)} new transactions added for {bank_account}.\"\n        )\n    except Exception as e:\n        frappe.log_error(\n            f\"Error syncing transactions for {bank_account}: {frappe.get_traceback()}\"\n        )\n\n", "CodeBleu_score": 36.39768869400947}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    if not last_integration_date:\n        frappe.throw(_(\"Please set the last integration date for the bank account {0}\").format(bank_account))\n\n    start_date = last_integration_date + timedelta(days=1)\n    end_date = datetime.now().date()\n\n    try:\n        transactions = bank.get_transactions(bank_account, start_date, end_date)\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), title=\"Bank Integration Error\")\n        return\n\n    new_transactions = []\n    for transaction in transactions:\n        if not frappe.db.exists(\"Bank Transaction\", transaction.id):\n            new_transactions.append(transaction)\n\n    if new_transactions:\n        frappe.get_doc({\n            \"doctype\": \"Bank Transaction\",\n            \"transactions\": [\n                {\n                    \"bank_account\": bank_account,\n                    \"transaction_date\": transaction.transaction_date,\n                    \"reference\": transaction.reference,\n                    \"amount\": transaction.amount,\n                    \"description\": transaction.description,\n                    \"id\": transaction.id\n                } for transaction in new_transactions\n            ]\n        }).insert(ignore_permissions=True)\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", new_transactions[-1].transaction_date)\n        frappe.msgprint(_(\"Added {0} new transactions\").format(len(new_transactions)))\n    else:\n        frappe.msgprint(_(\"No new transactions found\"))\n\n", "CodeBleu_score": 32.197462375669616}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\") or frappe.utils.data.get_datetime(\n            frappe.utils.data.add_days(frappe.utils.data.get_datetime(), -30)\n        )\n        end_date = frappe.utils.data.get_datetime()\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            for transaction in transactions:\n                new_bank_transaction(bank, bank_account, transaction)\n            frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", start_date)\n            frappe.msgprint(f\"Added {len(transactions)} new transactions for {bank_account}\")\n        else:\n            frappe.msgprint(f\"No new transactions found for {bank_account}\")\n    except Exception as e:\n        frappe.log_error(f\"Error syncing transactions for {bank_account}: {frappe.get_traceback()}\")\n\n", "CodeBleu_score": 39.3665379735054}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total_entries = self._get_total_entries(query_uri)\n    self._log_info(f\"Total {entity} entries: {total_entries}\")\n    if total_entries == 0:\n        self._log_info(f\"No {entity} entries to migrate.\")\n        return\n    for i in range(0, total_entries, 1000):\n        query_uri = self._get_query_uri(entity, i)\n        response = self._get(query_uri)\n        if response.status_code!= 200:\n            self._log_error(f\"Error fetching {entity} entries: {response.text}\")\n            return\n        entries = response.json()\n        self._log_info(f\"Fetched {entity} entries: {i + len(entries)}\")\n        self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 27.071692684519206}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"{self.base_url}/{self.company_id}/query?query={entity}\"\n    # Determine the total number of entries\n    total_entries = self._get_total_entries(query_uri)\n    # Fetch the entries in batches of 1000\n    for offset in range(0, total_entries, 1000):\n        query_uri = f\"{query_uri}&offset={offset}&limit=1000\"\n        response = self._get(query_uri)\n        if response.status_code == 200:\n            entries = response.json()\n            entries = self._preprocess_entries(entries, entity)\n            self._save_entries(entries)\n        else:\n            self._log_error(response.text)\n\n", "CodeBleu_score": 21.703954964696713}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.realm_id}/{entity}\"\n\n    # Determine the total number of entries\n    total_entries = self._get_total_entries(query_uri)\n\n    # Fetch entries in batches of 1000\n    for i in range(0, total_entries, 1000):\n        # Construct the query URI with the offset\n        query_uri_with_offset = f\"{query_uri}?startPosition={i+1}&maxResults=1000\"\n\n        # Fetch the entries\n        try:\n            response = self._get(query_uri_with_offset)\n        except Exception as e:\n            self._log_error(f\"Error fetching entries for {entity}: {e}\")\n            continue\n\n        # Preprocess and save the entries\n        try:\n            entries = self._preprocess_entries(entity, response.json())\n            self._save_entries(entity, entries)\n        except Exception as e:\n            self._log_error(f\"Error processing entries for {entity}: {e}\")\n            self._log_error(f\"Response text: {response.text}\")\n            continue\n\n", "CodeBleu_score": 30.05549226692443}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    invoice_type = invoice.get(\"Type\")\n    if invoice_type == \"SalesInvoice\":\n        self._save_sales_invoice(invoice)\n    elif invoice_type == \"JournalEntry\":\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        raise ValueError(f\"Invalid invoice type: {invoice_type}\")\n\n", "CodeBleu_score": 23.515344369069112}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"LinkedTxn\"):\n        for txn in invoice.get(\"LinkedTxn\"):\n            if txn.get(\"TxnType\") in [\"StatementCharge\", \"ReimburseCharge\"]:\n                return self._save_invoice_as_journal_entry(invoice)\n    return self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 30.176704439940437}, {"code": "def _save_invoice(self, invoice)\n\t\n    invoice_type = invoice.get(\"DocType\")\n    if invoice_type == \"Invoice\":\n        invoice_id = self._save_sales_invoice(invoice)\n    elif invoice_type == \"JournalEntry\":\n        invoice_id = self._save_invoice_as_journal_entry(invoice)\n    else:\n        raise ValueError(f\"Invalid invoice type: {invoice_type}\")\n    return invoice_id\n\n", "CodeBleu_score": 28.220228309432}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = (end_date - start_date).days / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=interval * i)\n        schedule_list.append(self.validate_schedule_date_for_holiday_list(schedule_date, sales_person))\n    return schedule_list\n\n", "CodeBleu_score": 24.23856455123062}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n    # Create a list of schedule dates\n    schedule_list = [start_date + timedelta(days=interval * i) for i in range(no_of_visit)]\n    # Validate the schedule dates against holidays\n    schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    return schedule_list\n\n", "CodeBleu_score": 18.058607939065485}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list", "CodeBleu_score": 2.8190591339232887}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\turl = route('bulk-action.handle', ['handle' => $handle]);\n\n$html = view($view, $data)->render();\n\nreturn response()->json([\n   'status' =>'success',\n   'message' => 'Bulk action has been performed successfully!',\n    'data' => [\n        'title' => 'Bulk Action',\n        'path' => $url,\n        'handle' => $handle,\n        'html' => $html,\n    ]\n]);\n}", "CodeBleu_score": 31.339877525629788}, {"code": "<?\n   public function response($view, $data = []){\n\t/ Determine the method to handle the request\n$method = request()->isMethod('post')? 'post' : 'get';\n\n// Construct a URL for bulk actions\n$url = route('bulkactions.index');\n\n// Render HTML content for a modal using the specified view and data\n$html = view($view, $data)->render();\n\n// Return a JSON response with success status, message, data with title, path, handle, and the rendered HTML\nreturn response()->json([\n   'success' => true,\n   'message' => __('Success'),\n    'data' => [\n        'title' => __('Bulk Actions'),\n        'path' => $url,\n        'handle' => 'bulkactions',\n        'html' => $html,\n    ],\n], 200);\n}", "CodeBleu_score": 37.88925591851952}, {"code": "<?\n   public function response($view, $data = []){\n\turl = $this->getBulkActionUrl(request());\n\nreturn response()->json([\n           'success' => true,\n           'message' =>'success',\n            'data' => [\n                'title' => 'Bulk Action',\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view($view, $data)->render(),\n            ]\n        ]);\n}", "CodeBleu_score": 31.3954906691445}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$this->getSelectedRecords($request);\n\t\tforeach ($this->selectedRecords as $contact) {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t}\n\t} catch (\\Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n}", "CodeBleu_score": 51.34722573975925}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$selectedContacts = $this->getSelectedRecords($request);\n\n\ttry {\n\t\tforeach ($selectedContacts as $contact) {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t}\n\t} catch (Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 55.35051342640198}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request);\n\t\tforeach ($contacts as $contact) {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t}\n\t} catch (\\Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n}", "CodeBleu_score": 65.74276735765238}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\ttry {\n\t\t$transactions = $this->getSelectedRecords($request);\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$this->dispatch(new DeleteTransactionJob($transaction));\n\t\t}\n\t} catch (\\Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n}", "CodeBleu_score": 64.24529805992154}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 71.45882382488304}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 64.3462520151203}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\tif (! class_exists($requestClass = $this->container->make($this->getFormRequestClass()))) {\n\t\treturn;\n\t}\n\n\tif (! $requestClass instanceof FormRequest) {\n\t\treturn;\n\t}\n\n\tforeach ($this->getDataRows() as $dataRow) {\n\t\t$request = $this->container->make($requestClass);\n\t\t$request->initialize($this->getRequest(), $this->getMethod(), $this->getRoute()->parameters());\n\t\t$request->rules = $this->prepareRules($dataRow);\n\n\t\ttry {\n\t\t\t$request->validateResolved();\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->setData($e->validator->getData());\n\t\t\tforeach ($e->validator->failed() as $key => $failedRules) {\n\t\t\t\t$validator->addFailure($key, $failedRules);\n\t\t\t}\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 42.61019152902437}, {"code": "<?\npublic function withValidator($validator){\n\t\t$requestClass = get_class($this->request);\n\tif (!class_exists($requestClass) ||!is_subclass_of($requestClass, FormRequest::class)) {\n\t\treturn;\n\t}\n\n\t$data = $this->request->all();\n\t$rules = $this->request->rules();\n\n\tforeach ($data as $key => $value) {\n\t\t$request = $this->request->initialize([$key => $value]);\n\t\t$validator->setData($request->all());\n\t\t$validator->setRules($this->prepareRules($rules));\n\n\t\ttry {\n\t\t\t$validator->validate();\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->addFailure($key, $e->validator->failed());\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 41.8965438996138}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (class_exists($request = $this->container->make($this->getFormRequest()))) {\n\t\tif ($request instanceof FormRequest) {\n\t\t\tforeach ($this->getData() as $data) {\n\t\t\t\t$request->initialize($data);\n\t\t\t\t$validator->setRules($request->rules());\n\t\t\t\ttry {\n\t\t\t\t\t$validator->validate();\n\t\t\t\t} catch (ValidationException $e) {\n\t\t\t\t\t$validator->addFailures($e->validator->failed());\n\t\t\t\t\tthrow $e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.35470331005572}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->shouldUpdate()) {\n\t\t$this->update(...$arguments);\n\t}\n}", "CodeBleu_score": 9.5355358275699}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->instance instanceof ShouldUpdate) {\n\t\t$this->setModelInstance($arguments[0]?? null);\n\t\t$this->setRequestInstance($arguments[1]?? null);\n\t}\n}", "CodeBleu_score": 19.67424644342739}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif($this->shouldUpdate()) {\n\t\t$this->setModel($arguments[0]?? $this->getModel());\n\t\t$this->setRequest($arguments[1]?? $this->getRequest());\n\t}\n}", "CodeBleu_score": 16.157711928488368}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$query->usingSearchString()->sortable($sort);\n\tif ($request->expectsJson() &&!$request->isNotApi()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate(setting('pagination_limit', 25));\n}", "CodeBleu_score": 35.740443056739316}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\n\t// Check if the request is for JSON and not an API request\n\tif ($request->expectsJson() &&!$request->isNotApi()) {\n\t\t// If the request is for JSON and not an API request, return all records\n\t\treturn $query->get();\n\t}\n\n\t// If the request is not for JSON or an API request, paginate the results\n\treturn $query->usingSearchString()->sortable($sort)->paginate(setting('pagination_limit', 20));\n}", "CodeBleu_score": 34.169530371410154}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\tif ($request->expectsJson() &&!$request->isNotApi()) {\n\t\treturn $query->usingSearchString()->sortable()->get();\n\t}\n\treturn $query->usingSearchString()->sortable()->paginate(request('limit', setting('default_limit')));\n}", "CodeBleu_score": 25.62797134224769}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = $overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\n\tif ($model->status == 'partial') {\n\t\t$open = $overdue = $model->transactions()->sum('amount');\n\t}\n\n\tif ($model->due_date) {\n\t\tif ($model->due_date < Date::today()) {\n\t\t\t$overdue = $open;\n\t\t\t$open = 0;\n\t\t} else {\n\t\t\t$open = $model->amount;\n\t\t}\n\t}\n\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 46.56091176266912}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = $overdueAmount = 0;\n\nif ($model->status == 'paid') {\nreturn [0, 0];\n}\n\nif ($model->status == 'partial') {\nforeach ($model->transactions as $transaction) {\n$openAmount += $transaction->getAmountConvertedToDefault();\n}\n}\n\nif ($model->dueDate < Date::today()) {\n$overdueAmount = $openAmount;\n$openAmount = 0;\n}\n\nreturn [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 45.04734713468348}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = $overdue = 0;\n\tif ($model->status == 'paid') {\n\t\treturn array($open, $overdue);\n\t}\n\t$transactions = $model->transactions;\n\tforeach ($transactions as $transaction) {\n\t\tif ($transaction->status == 'partial') {\n\t\t\t$open += $transaction->amount;\n\t\t}\n\t}\n\t$due_date = new Date($model->due_date);\n\tif ($due_date->isPast()) {\n\t\t$overdue = $open;\n\t\t$open = 0;\n\t}\n\treturn array($open, $overdue);\n}", "CodeBleu_score": 45.59752001137852}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\treturn $this->paginator->make($results, $this->getCountForPagination(), $perPage, $page, [\n\t\t'path' => $this->paginator->resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 59.30415887326612}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\treturn $this->paginator->make($results, $this->getCountForPagination(), $perPage, $page, [\n\t\t'path' => $this->paginator->resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 59.30415887326612}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->toBase()->getCountForPagination();\n\t$paginator = new LengthAwarePaginator($results, $this->model->newCollection(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\treturn $paginator;\n}", "CodeBleu_score": 65.5731622161016}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\n$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\nforeach ($reconciliations as $reconciliation) {\n\\DB::transaction(function () use ($reconciliation) {\n$reconciliation->status ='reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('account_id', $reconciliation->account_id)\n->isNotReconciled()\n->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = true;\n$transaction->save();\n}\n});\n}\n}", "CodeBleu_score": 51.15569912257012}, {"code": "<?\npublic function reconcile($request){\n\t// Retrieve the reconciliations\n$reconciliations = Reconciliation::whereIn('id', $request->input('reconciliations'))->get();\n\n// Process each reconciliation within a database transaction\nforeach ($reconciliations as $reconciliation) {\n    \\DB::transaction(function () use ($reconciliation) {\n        // Set the reconciliation status to reconciled\n        $reconciliation->status ='reconciled';\n        $reconciliation->save();\n\n        // Mark all related transactions within the reconciliation's date range and account ID as reconciled\n        Transaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                    ->each(function ($item) {\n                        $item->reconciled = true;\n                        $item->save();\n                    });\n    });\n}\n}", "CodeBleu_score": 57.64114657619426}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getReconciliations($request);\n\nforeach ($reconciliations as $reconciliation) {\n\\DB::transaction(function () use ($reconciliation) {\n$reconciliation->status = Reconciliation::RECONCILED;\n$reconciliation->save();\n\n$this->getSelectedRecords($reconciliation)->each(function ($item) {\n$item->reconciled_at = now();\n$item->save();\n});\n});\n}\n}", "CodeBleu_score": 46.67376299111097}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t\\DB::transaction(function () {\n\t\t// Delete existing invitations\n\t\tUserInvitation::where('user_id', $this->user->id)->delete();\n\n\t\t// Create a new invitation with a unique token\n\t\t$invitation = UserInvitation::create([\n\t\t\t'user_id' => $this->user->id,\n\t\t\t'token' => Str::uuid(),\n\t\t]);\n\n\t\t// Attempt to dispatch a notification job\n\t\ttry {\n\t\t\t$this->dispatch(new UserInvitationNotification($invitation));\n\t\t} catch (\\Exception $e) {\n\t\t\tthrow new \\Exception(\"Failed to dispatch notification: {$e->getMessage()}\");\n\t\t}\n\t});\n\n\treturn $invitation;\n}", "CodeBleu_score": 30.975373487956563}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t\\DB::transaction(function () {\n\t\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\t\tforeach ($invitations as $invitation) {\n\t\t\t$invitation->delete();\n\t\t}\n\t\t$invitation = UserInvitation::create([\n\t\t\t'user_id' => $this->user->id,\n\t\t\t'token' => Str::uuid(),\n\t\t]);\n\t\ttry {\n\t\t\t$this->dispatch(new UserInvitationNotification($invitation));\n\t\t} catch (\\Exception $e) {\n\t\t\tthrow new \\Exception('Failed to send invitation notification');\n\t\t}\n\t});\n\treturn $invitation;\n}", "CodeBleu_score": 47.94675071788138}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\\DB::transaction(function () {\n$this->user->invitations()->delete();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new UserInvitationNotification($invitation));\n} catch (\\Exception $e) {\nthrow new \\Exception('Unable to send invitation email.');\n}\nreturn $invitation;\n});\n}", "CodeBleu_score": 27.65824740293965}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciledTransaction) {\n\t\tthrow new Exception('This transaction has already been reconciled.');\n\t}\n\tif ($this->isTransferTransaction) {\n\t\tthrow new Exception('Unauthorized');\n\t}\n}", "CodeBleu_score": 24.134584545633604}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled()) {\n\t\tthrow new \\Exception('This transaction has already been reconciled.');\n\t}\n\tif ($this->isTransferTransaction()) {\n\t\tthrow new \\Exception('This is a transfer transaction and cannot be authorized.');\n\t}\n}", "CodeBleu_score": 29.438112055248762}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciledTransaction()) {\n\t\tthrow new Exception(\"Transaction is already reconciled.\");\n\t}\n\n\tif ($this->isTransferTransaction()) {\n\t\tthrow new Exception(\"Unauthorized.\");\n\t}\n}", "CodeBleu_score": 19.4772670783147}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\treturn tableName.equals(\"table1\") || tableName.equals(\"table2\");\n}", "CodeBleu_score": 9.368627349626687}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\tString[] allowedTables = new String[] { \"table1\", \"table2\", \"table3\" };\n\tfor (String allowedTable : allowedTables) {\n\t\tif (tableName.equals(allowedTable)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.969566790625564}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId!= 0) {\n\t\tif (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 9.584154128898094}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accounts = null;\n\ttry {\n\t\taccounts = accountService.findBySelect(request);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\treturn \"failure\";\n\t}\n\tJSONArray jsonArray = new JSONArray();\n\tfor (Account account : accounts) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"id\", account.getId());\n\t\tjsonObject.put(\"name\", account.getName());\n\t\tjsonArray.add(jsonObject);\n\t}\n\treturn jsonArray.toString();\n}", "CodeBleu_score": 40.19954059595976}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString json = null;\n\ttry {\n\t\tList<Account> accounts = accountService.findBySelect();\n\t\tMap<String, String> map = new HashMap<>();\n\t\tfor (Account account : accounts) {\n\t\t\tmap.put(account.getId(), account.getName());\n\t\t}\n\t\tjson = JSON.toJSONString(map);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\tjson = \"failure\";\n\t}\n\treturn json;\n}", "CodeBleu_score": 40.69221327400513}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\ttry {\n\t\tList<Account> accounts = accountService.findBySelect();\n\t\tMap<String, String> accountMap = new HashMap<String, String>();\n\t\tfor (Account account : accounts) {\n\t\t\taccountMap.put(account.getId(), account.getName());\n\t\t}\n\t\treturn JSON.toJSONString(accountMap);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in findBySelect\", e);\n\t\treturn \"failure\";\n\t}\n}", "CodeBleu_score": 28.282512089500294}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tAccountServiceResponse accountServiceResponse = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n\t\tresponse.setResult(accountServiceResponse.getResult());\n\t\tresponse.setTotalCount(accountServiceResponse.getTotalCount());\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setResultCode(ResultCode.INTERNAL_SERVER_ERROR);\n\t\tresponse.setResultMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 31.76683327751593}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n Integer count = accountService.listWithBalanceCount(name, serialNo);\n response.setCode(ResponseCode.SUCCESS.getCode());\n response.setMessage(ResponseCode.SUCCESS.getMessage());\n response.setData(accounts);\n response.setTotal(count);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n response.setCode(ResponseCode.ERROR.getCode());\n response.setMessage(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 39.876604698877344}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\n// Create a new response object", "CodeBleu_score": 10.897780847395897}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setData(accountService.getStatistics(name, serialNo));\n\t\tresponse.setCode(200);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.058672904885036}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nresponse.setCode(200);\nresponse.setData(accountService.getStatistics(name, serialNo));\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nresponse.setCode(500);\nresponse.setMessage(e.getMessage());\n}\nreturn response;\n}", "CodeBleu_score": 35.84747357333388}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setData(accountService.getStatistics(name, serialNo));\n\t\tresponse.setCode(200);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.058672904885036}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t//        logger.info(\"getDetailByNumber() method is called\");\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            AccountHeadDetail accountHeadDetail = accountHeadService.getDetailByNumber(billNo);\n            if (accountHeadDetail!= null) {\n                response.setStatusCode(200);\n                response.setStatusMessage(\"Success\");\n                response.setAccountHeadDetail(accountHeadDetail);\n            } else {\n                response.setStatusCode(404);\n                response.setStatusMessage(\"No data found\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in getDetailByNumber() method\", e);\n            response.setStatusCode(500);\n            response.setStatusMessage(\"Internal Server Error\");\n        }\n        return response;\n    }", "CodeBleu_score": 31.923287853469446}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<BillInfo> billInfoList = accountHeadService.getBillDetailByNumber(billNo);\n\t\tif (billInfoList!= null && billInfoList.size() > 0) {\n\t\t\tresponse.setResponseCode(200);\n\t\t\tresponse.setResponseMessage(\"Bill details found\");\n\t\t\tresponse.setResponseObject(billInfoList.get(0));\n\t\t} else {\n\t\t\tresponse.setResponseCode(200);\n\t\t\tresponse.setResponseMessage(\"No bill details found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error in fetching bill details for bill number : \" + billNo, e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 31.613310671056293}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\n// 1. Initialize response object\n        BaseResponseInfo response = new BaseResponseInfo();\n\n// 2. Attempt to fetch the details\n        try {\n\n// 2.1. Get the details\n            List<AccountHead> accountHeads = accountHeadService.getDetailByNumber(billNo);\n\n// 2.2. If the list is not null and has at least one item\n            if (accountHeads!= null && accountHeads.size() > 0) {\n\n// 2.2.1. Set the first item in the list as the response\n                response.setResponse(accountHeads.get(0));\n\n// 2.2.2. Set the response code to 200\n                response.setResponseCode(200);\n\n// 2.3. If the list is null or has no items\n            } else {\n\n// 2.3.1. Set the response code to 404\n                response.setResponseCode(404);\n\n// 2.3.2. Set the response message to \"No account head found\"\n                response.setResponseMessage(\"No account head found\");\n            }\n\n// 3. If an exception occurs\n        } catch (Exception e) {\n\n// 3.1. Log the error\n            logger.error(e.getMessage());\n\n// 3.2. Set the response code to 500\n            response.setResponseCode(500);\n\n// 3.3. Set the response message to the error message\n            response.setResponseMessage(e.getMessage());\n        }\n\n// 4. Return the response\n        return response;\n    }", "CodeBleu_score": 36.84399672117776}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setData(depotService.findDepotByCurrentUser(request));\n\t\tresponse.setCode(200);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.51225750101452}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tDepot depot = depotService.findDepotByCurrentUser(request);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depot);\n\t} catch (Exception e) {\n\t\tlogger.error(\"findDepotByCurrentUser error\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 38.58876014485346}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tDepot depot = depotService.findDepotByCurrentUser();\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depot);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMsg(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 45.33286513075277}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\tList<RoleFunction> functionList = roleFunctionService.findRoleFunction(type, keyId);\n\tJSONObject jsonObject = new JSONObject();\n\tjsonObject.put(\"functionList\", functionList);\n\tif (!\"admin\".equals(getTenantIdByToken(request))) {\n\t\tjsonObject.put(\"functionList\", functionList.stream().filter(f ->!\"\u7cfb\u7edf\u7ba1\u7406\".equals(f.getFunctionName())).collect(Collectors.toList()));\n\t}\n\tjsonArray.add(jsonObject);\n\treturn jsonArray;\n}", "CodeBleu_score": 22.1180584356557}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray jsonArray = new JSONArray();\nList<Function> functionList = functionService.findRoleFunction(type, keyId);\nJSONObject jsonObject = new JSONObject();\njsonObject.put(\"functionList\", functionList);\nif (!\"admin\".equals(getTenantIdByToken(request))) {\njsonObject.put(\"functionList\", functionList.stream().filter(function ->!\"\u7cfb\u7edf\u7ba1\u7406\".equals(function.getFunctionName())).collect(Collectors.toList()));\n}\njsonArray.add(jsonObject);\nreturn jsonArray;\n}", "CodeBleu_score": 22.128074817611314}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\tList<Function> functionList = functionService.findRoleFunction(type, keyId);\n\tif(functionList!= null && functionList.size() > 0) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tString tenantId = getTenantIdByToken(request);\n\t\tif(!\"admin\".equals(tenantId)) {\n\t\t\tfunctionList = functionList.stream().filter(function ->!\"\u7cfb\u7edf\u7ba1\u7406\".equals(function.getFunctionName())).collect(Collectors.toList());\n\t\t}\n\t\tjsonObject.put(\"functionList\", functionList);\n\t\tjsonArray.add(jsonObject);\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 27.800220247882983}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\n    response.setData(platformConfigService.getPlatformConfig(platformKey));\n} catch (Exception e) {\n    log.error(\"Error while getting platform config info for key: \" + platformKey, e);\n    response.setErrorCode(ErrorCode.error);\n    response.setMessage(e.getMessage());\n    response.setCode(500);\n}\nreturn response;\n}", "CodeBleu_score": 39.10578958697404}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\nBaseResponseInfo response = new BaseResponseInfo();\ntry {\n    PlatformConfigInfo platformConfigInfo = platformConfigService.getPlatformConfigInfoByKey(platformKey);\n    response.setCode(200);\n    response.setData(platformConfigInfo);\n} catch (Exception e) {\n    log.error(\"Error occurred while fetching platform configuration information for platformKey: \" + platformKey, e);\n    response.setCode(500);\n    response.setMessage(\"Error occurred while fetching platform configuration information for platformKey: \" + platformKey);\n}\nreturn response;\n}", "CodeBleu_score": 37.6008914684}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseMessage(\"Success\");\n\t\tresponse.setResponse(platformConfigService.getInfoByKey(platformKey));\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while getting platform configuration information for platform key: \" + platformKey, e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseMessage(\"Error\");\n\t\tresponse.setResponse(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.875043197736275}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 37.140027437437176}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\nresponse.setCode(200);\nresponse.setData(systemConfigList.get(0));\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nresponse.setCode(500);\nresponse.setMessage(e.getMessage());\n}\nreturn response;\n}", "CodeBleu_score": 37.654643803655745}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigs = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigs!= null && systemConfigs.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigs.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setData(\"No system configuration information is available.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setData(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.05055900285558}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\tif (file == null || file.isEmpty()) {\n\t\t\tresponseInfo.setCode(ResponseCode.FILE_UPLOAD_ERROR);\n\t\t\tresponseInfo.setMsg(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\tString fileName = file.getOriginalFilename();\n\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n\t\tString newFileName = UUID.randomUUID().toString() + suffix;\n\t\tString filePath = businessPath + \"/\" + newFileName;\n\t\tif (Constants.FILE_UPLOAD_TYPE.equals(Constants.FILE_UPLOAD_TYPE_LOCAL)) {\n\t\t\tString localFilePath = Constants.FILE_UPLOAD_LOCAL_PATH + filePath;\n\t\t\tFile localFile = new File(localFilePath);\n\t\t\tif (!localFile.getParentFile().exists()) {\n\t\t\t\tlocalFile.getParentFile().mkdirs();\n\t\t\t}\n\t\t\tfile.transferTo(localFile);\n\t\t} else if (Constants.FILE_UPLOAD_TYPE.equals(Constants.FILE_UPLOAD_TYPE_OSS)) {\n\t\t\tuploadAliOss(file.getInputStream(), filePath);\n\t\t} else {\n\t\t\tresponseInfo.setCode(ResponseCode.FILE_UPLOAD_ERROR);\n\t\t\tresponseInfo.setMsg(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\tresponseInfo.setCode(ResponseCode.SUCCESS);\n\t\tresponseInfo.setMsg(\"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\");\n\t\tresponseInfo.setData(filePath);\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n\t\tresponseInfo.setCode(ResponseCode.FILE_UPLOAD_ERROR);\n\t\tresponseInfo.setMsg(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 33.32981815186897}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Get the business path and file from the request\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\tif (file!= null &&!file.isEmpty()) {\n\t\t\t// If the file is not empty, save it to the appropriate location based on the file upload type\n\t\t\tif (FileUploadType.LOCAL.equals(fileUploadType)) {\n\t\t\t\t// If the file upload type is local, save the file locally\n\t\t\t\tString filePath = saveToLocal(businessPath, file);\n\t\t\t\tresponseInfo.setCode(200);\n\t\t\t\tresponseInfo.setData(filePath);\n\t\t\t} else if (FileUploadType.ALI_OSS.equals(fileUploadType)) {\n\t\t\t\t// If the file upload type is AliOss, save the file to AliOss\n\t\t\t\tString filePath = saveToAliOss(businessPath, file);\n\t\t\t\tresponseInfo.setCode(200);\n\t\t\t\tresponseInfo.setData(filePath);\n\t\t\t} else {\n\t\t\t\t// If the file upload type is invalid, return an error message\n\t\t\t\tresponseInfo.setCode(500);\n\t\t\t\tresponseInfo.setMessage(\"Invalid file upload type\");\n\t\t\t}\n\t\t} else {\n\t\t\t// If the file is empty, return an error message\n\t\t\tresponseInfo.setCode(500);\n\t\t\tresponseInfo.setMessage(\"File is empty\");\n\t\t}\n\t} catch (Exception e) {\n\t\t// If an exception occurs, log the exception and return an error message\n\t\tlog.error(\"File upload failed\", e);\n\t\tresponseInfo.setCode(500);\n\t\tresponseInfo.setMessage(\"File upload failed\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 34.97708302292101}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\t// Get the business path and file from the request\n\tString businessPath = request.getParameter(\"businessPath\");\n\tMultipartFile file = ((MultipartFile) request.getFile(\"file\"));\n\t// Check if the file is empty\n\tif (file.isEmpty()) {\n\t\t// Set the response code and data for an empty file\n\t\tresponse.setCode(200);\n\t\tresponse.setData(new BaseResponseInfo(false, \"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a\"));\n\t\treturn response;\n\t}\n\t// Check if the business path is empty\n\tif (StringUtils.isEmpty(businessPath)) {\n\t\t// Set the response code and data for an empty business path\n\t\tresponse.setCode(200);\n\t\tresponse.setData(new BaseResponseInfo(false, \"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a\"));\n\t\treturn response;\n\t}\n\t// Upload the file to AliOss or locally based on the file upload type\n\tString filePath = null;\n\ttry {\n\t\tif (FileUploadTypeEnum.ALI_OSS.getValue().equals(businessPath)) {\n\t\t\tfilePath = uploadAliOss(file);\n\t\t} else {\n\t\t\tfilePath = uploadLocal(file, businessPath);\n\t\t}\n\t} catch (Exception e) {\n\t\t// Log the exception and set the response code and data for an error\n\t\tlog.error(\"upload file error\", e);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(new BaseResponseInfo(false, \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\"));\n\t\treturn response;\n\t}\n\t// Set the response code and data for a successful upload\n\tresponse.setCode(200);\n\tresponse.setData(new BaseResponseInfo(true, filePath));\n\treturn response;\n}", "CodeBleu_score": 32.03221697318585}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n JSONArray head = jsonObject.getJSONArray(\"head\");\n String tip = jsonObject.getString(\"tip\");\n List<List<String>> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(List.class);\n\n // Call the service to perform the export\n exportExcel(title, head, tip, dataList, response);\n } catch (Exception e) {\n log.error(\"Error exporting Excel by param\", e);\n }\n }", "CodeBleu_score": 61.558994128284304}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t//    try {\n//      String title = jsonObject.getString(\"title\");\n//      String[] head = jsonObject.getString(\"head\").split(\",\");\n//      String tip = jsonObject.getString(\"tip\");\n//      List<Map<String, Object>> dataList = (List<Map<String, Object>>) jsonObject.get(\"dataList\");\n//      exportExcel(title, head, tip, dataList, response);\n//    } catch (Exception e) {\n//      log.error(e.getMessage(), e);\n//    }\n//  }", "CodeBleu_score": 4.729595274043694}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n// Extract title, head, tip, and data list from the JSON object\n    String title = jsonObject.getString(\"title\");\n    String head = jsonObject.getString(\"head\");\n    String tip = jsonObject.getString(\"tip\");\n    List<Map<String, Object>> dataList = (List<Map<String, Object>>) jsonObject.get(\"data\");\n\n// Call the service to perform the export\n    try {\n        exportExcelService.exportExcel(title, head, tip, dataList, response);\n    } catch (Exception e) {\n        logger.error(\"Export Excel error: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 72.93804975108164}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountType(obj.getString(\"accountType\"));\n\taccount.setAccountHolder(obj.getString(\"accountHolder\"));\n\taccount.setAccountHolderId(obj.getString(\"accountHolderId\"));\n\taccount.setAccountHolderIdType(obj.getString(\"accountHolderIdType\"));\n\taccount.setAccountHolderAddress(obj.getString(\"accountHolderAddress\"));\n\taccount.setAccountHolderPhone(obj.getString(\"accountHolderPhone\"));\n\taccount.setAccountHolderEmail(obj.getString(\"accountHolderEmail\"));\n\taccount.setAccountHolderMobile(obj.getString(\"accountHolderMobile\"));\n\taccount.setAccountHolderGender(obj.getString(\"accountHolderGender\"));\n\taccount.setAccountHolderDateOfBirth(obj.getString(\"accountHolderDateOfBirth\"));\n\taccount.setAccountHolderNationality(obj.getString(\"accountHolderNationality\"));\n\taccount.setAccountHolderCountry(obj.getString(\"accountHolderCountry\"));\n\taccount.setAccountHolderCity(obj.getString(\"accountHolderCity\"));\n\taccount.setAccountHolderState(obj.getString(\"accountHolderState\"));\n\taccount.setAccountHolderPincode(obj.getString(\"accountHolderPincode\"));\n\taccount.setAccountHolderPan(obj.getString(\"accountHolderPan\"));\n\taccount.setAccountHolderAadhar(obj.getString(\"accountHolderAadhar\"));\n\taccount.setAccountHolderPassport(obj.getString(\"accountHolderPassport\"));\n\taccount.setAccountHolderDrivingLicence(obj.getString(\"accountHolderDrivingLicence\"));\n\taccount.setAccountHolderVoterId(obj.getString(\"accountHolderVoterId\"));\n\taccount.setAccountHolderRationCard(obj.getString(\"accountHolderRationCard\"));\n\taccount.setAccountHolderVoterId(obj.getString(\"accountHolderVoterId\"));\n\taccount.setAccountHolderRationCard(obj.getString(\"accountHolderRationCard\"));\n\taccount.setAccountHolderPassport(obj.getString(\"accountHolderPassport\"));\n\taccount.setAccountHolderDrivingLicence(obj.getString(\"accountHolderDrivingLicence\"));\n\taccount.setAccountHolderVoterId(obj.getString(\"accountHolderVoterId\"));\n\taccount.setAccountHolderRationCard", "CodeBleu_score": 15.103482308111344}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.parseObject(obj);\n\taccount.setInitialAmount(obj.containsKey(\"initialAmount\")? obj.getDouble(\"initialAmount\") : 0);\n\taccount.setEnabled(true);\n\tif (account.getIsDefault() == null) {\n\t\taccount.setIsDefault(true);\n\t}\n\tint result = 0;\n\ttry {\n\t\tresult = accountMapper.insertSelective(account);\n\t\tif (account.getIsDefault()) {\n\t\t\taccountMapper.updateOtherAccounts(account.getId());\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.writeFail(e, request);\n\t\tthrow e;\n\t}\n\tlog.insertLog(\"Insert Account\", \"Account\", account.getId(), request);\n\treturn result;\n}", "CodeBleu_score": 41.48547060833948}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setName(obj.getString(\"name\"));\n\taccount.setCurrency(obj.getString(\"currency\"));\n\taccount.setType(obj.getString(\"type\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount", "CodeBleu_score": 14.065314236337507}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceCountMapper(name, serialNo)\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception occurred while getting count of accounts with name ${name} and serialNo ${serialNo}\", e)\n\t\treturn null\n\t}\n}", "CodeBleu_score": 25.071731269889796}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceCountMapper(name, serialNo)\n\t} catch (Exception e) {\n\t\tlog.error(\"Error listing with balance count for name: ${name} and serial number: ${serialNo}\", e)\n\t\treturn null\n\t}\n}", "CodeBleu_score": 23.978203620678425}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null\n\ttry {\n\t\tcount = listWithBalanceCount(name, serialNo)\n\t} catch (Exception e) {\n\t\tlog.error(\"Error getting count of accounts with the specified name and serial number\", e)\n\t}\n\treturn count\n}", "CodeBleu_score": 32.697945135797255}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"deleteDepotItem\", e);\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 26.272944585937786}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\tint result = depotItemMapper.deleteByPrimaryKey(id);\n\t\treturn result;\n\t} catch (Exception e) {\n\t\tlog.error(e);\n\t\tthrow new Exception(\"deleteDepotItem error\");\n\t}\n}", "CodeBleu_score": 42.084522348087404}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"deleteDepotItem error\", e);\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 26.45293930944055}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\t\tString url = \"http://localhost:8080/project/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet request = new HttpGet(url);\n\t\tHttpResponse response = client.execute(request);\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tString responseBody = EntityUtils.toString(response.getEntity());\n\t\t\tJsonNode json = new ObjectMapper().readValue(responseBody, JsonNode.class);\n\t\t\treturn json.has(\"key\");\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Error adding node: \" + e.getMessage());\n\t} finally {\n\t\tclient.close();\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.53758213848165}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\t\tString url = \"http://localhost:8080/projects/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet request = new HttpGet(url);\n\t\tHttpResponse response = client.execute(request);\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tString responseBody = EntityUtils.toString(response.getEntity());\n\t\t\tJsonNode responseJson = new ObjectMapper().readTree(responseBody);\n\t\t\tif (responseJson.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclient.close();\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.390671196407894}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\tHttpGet request = new HttpGet(url);\n\ttry {\n\t\tHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseBody = EntityUtils.toString(entity);\n\t\t\tJSONObject json = new JSONObject(responseBody);\n\t\t\treturn json.has(\"key\");\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\trequest.releaseConnection();\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.777885460178226}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tboolean success = false;\n\ttry (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\t\tURIBuilder uriBuilder = new URIBuilder(this.host + \":\" + this.port + \"/addEdge\");\n\t\turiBuilder.addParameter(\"projectName\", projectName);\n\t\turiBuilder.addParameter(\"edgeType\", edgeType);\n\t\turiBuilder.addParameter(\"fromType\", fromType);\n\t\turiBuilder.addParameter(\"toType\", toType);\n\t\turiBuilder.addParameter(\"from\", from);\n\t\turiBuilder.addParameter(\"to\", to);\n\t\tURI uri = uriBuilder.build();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\tJSONObject responseJson = new JSONObject(responseString);\n\t\tif (responseJson.has(\"key\")) {\n\t\t\tsuccess = true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn success;\n}", "CodeBleu_score": 39.21649496424695}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tboolean success = false;\n\ttry {\n\t\tURIBuilder builder = new URIBuilder(this.host + \":\" + this.port + \"/api/v1/projects/\" + projectName + \"/edges/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\tURI uri = builder.build();\n\t\tHttpGet request = new HttpGet(uri);\n\t\trequest.setHeader(\"Content-Type\", \"application/json\");\n\t\trequest.setHeader(\"Accept\", \"application/json\");\n\t\trequest.setHeader(\"Authorization\", \"Bearer \" + this.token);\n\t\tCloseableHttpResponse response = httpclient.execute(request);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity!= null) {\n\t\t\t\tString json = EntityUtils.toString(entity);\n\t\t\t\tJsonNode root = new ObjectMapper().readTree(json);\n\t\t\t\tif (root.has(\"key\")) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (Exception ex) {\n\t\tex.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 50.79084750078211}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\ttry {\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\t\tURIBuilder builder = new URIBuilder(this.host + \"/project/\" + projectName + \"/edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\tURI uri = builder.build();\n\t\tHttpGet request = new HttpGet(uri);\n\t\trequest.setHeader(\"Accept\", \"application/json\");\n\t\trequest.setHeader(\"Content-type\", \"application/json\");\n\t\tCloseableHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString result = EntityUtils.toString(entity);\n\t\tJSONObject json = new JSONObject(result);\n\t\treturn json.has(\"key\");\n\t} catch (URISyntaxException | IOException | JSONException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 47.920875089287726}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\nreturn;\n}\nif (event.getLocation() == null) {\nevent.setLocation(acquireTestingLocation());\n}\nevent.setTime(System.currentTimeMillis());\nString json = null;\ntry {\njson = mapper.writeValueAsString(event);\n} catch (JsonProcessingException e) {\ne.printStackTrace();\n}\nif (json == null) {\nreturn;\n}\nString topic = event.getTarget() == null? \"test\" : event.getTarget();\nProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\nproducer.send(record);\nproducer.flush();\n}", "CodeBleu_score": 48.26385030890923}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString eventJson = null;\n\t\ttry {\n\t\t\teventJson = mapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (eventJson!= null) {\n\t\t\tString topic = event.getTarget()!= null? event.getTarget() : \"test\";\n\t\t\tProducerRecord<String, String> producerRecord = new ProducerRecord<String, String>(topic, eventJson);\n\t\t\tproducer.send(producerRecord);\n\t\t\tproducer.flush();\n\t\t}\n\t}\n}", "CodeBleu_score": 45.87760053460684}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString json = null;\n\t\ttry {\n\t\t\tjson = mapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (json!= null) {\n\t\t\tString topic = event.getTarget()!= null? event.getTarget() : \"test\";\n\t\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\t\t\tproducer.send(record);\n\t\t\tproducer.flush();\n\t\t}\n\t}\n}", "CodeBleu_score": 45.62967006377568}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.405686986274034}, {"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client with access credentials.\nOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n// Upload the file content as an object with the specified name.\nPutObjectResult result = ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n// Shutdown the OSS client.\nossClient.shutdown();\n\n// Return the URL of the uploaded object.\nreturn ossClient.getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 39.54815522700472}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 33.38313910589362}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tLocationInfo locationInfo = null;\n\ttry {\n\t\tensureIpToLocationWorker();\n\t\tlocationInfo = ipToLocationWorker.getLocationInfoByIP(ipAddress);\n\t} catch (Exception e) {\n\t\tlocationInfo = new LocationInfo();\n\t\tlocationInfo.setCountryCode(\"unknown\");\n\t\tlocationInfo.setCountryName(\"unknown\");\n\t\tlocationInfo.setRegionName(\"unknown\");\n\t\tlocationInfo.setCity(\"unknown\");\n\t\tlocationInfo.setZipCode(\"unknown\");\n\t\tlocationInfo.setLatitude(\"unknown\");\n\t\tlocationInfo.setLongitude(\"unknown\");\n\t\tlocationInfo.setTimeZone(\"unknown\");\n\t}\n\treturn locationInfo;\n}", "CodeBleu_score": 33.139183980888795}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = ensureIpToLocationWorker()\n\tif (worker == null) {\n\t\treturn new LocationInfo(ipAddress, \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\")\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress)\n}", "CodeBleu_score": 25.647650529570186}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tensureIpToLocationWorker()\n\tif (ipToLocationWorker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\")\n\t}\n\treturn ipToLocationWorker.getLocationInfoByIP(ipAddress)\n}", "CodeBleu_score": 16.861105881171408}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\t// Get the cluster host list\n\t\t\t\tString clusterHostList = getClusterHostList();\n\t\t\t\t// Get the cluster host port\n\t\t\t\tint clusterHostPort = getClusterHostPort();\n\t\t\t\t// Parse the cluster host list\n\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\t// Build the low-level REST client\n\t\t\t\tlowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[0])).build();\n\t\t\t\t// Build the high-level REST client\n\t\t\t\tesClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 58.26063720850699}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null || esRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null || esRestClient == null) {\n\t\t\t\t// parse hosts and ports\n\t\t\t\tString[] hosts = getClusterHostList();\n\t\t\t\tint[] ports = getClusterHostPort();\n\n\t\t\t\t// build low-level REST client\n\t\t\t\tRestClientBuilder builder = RestClient.builder(new HttpHost(hosts[0], ports[0], \"http\"));\n\t\t\t\tfor (int i = 1; i < hosts.length; i++) {\n\t\t\t\t\tbuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\t\t\treturn httpClientBuilder.setMaxConnTotal(1000).setMaxConnPerRoute(100);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbuilder.addTransportAddress(new HttpHost(hosts[i], ports[i], \"http\"));\n\t\t\t\t}\n\t\t\t\tesRestClient = builder.build();\n\n\t\t\t\t// build high-level REST client\n\t\t\t\tesClient = new RestHighLevelClient(esRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.00299922910643}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\t\t\t\tthrow new Exception(\"No Elasticsearch cluster hosts provided.\");\n\t\t\t\t}\n\t\t\t\tif (clusterHostPort == null || clusterHostPort.isEmpty()) {\n\t\t\t\t\tthrow new Exception(\"No Elasticsearch cluster port provided.\");\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tList<HttpHost> hosts = new ArrayList<>();\n\t\t\t\t\tfor (String host : clusterHostList) {\n\t\t\t\t\t\thosts.add(new HttpHost(host, Integer.parseInt(clusterHostPort), \"http\"));\n\t\t\t\t\t}\n\t\t\t\t\tesClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new Exception(\"Failed to initialize Elasticsearch client.\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.349890761585456}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = clusterPort;\n\t\tif (host.indexOf(':')!= -1) {\n\t\t\tport = Integer.parseInt(host.substring(host.indexOf(':') + 1));\n\t\t\thost = host.substring(0, host.indexOf(':'));\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.6079482811617}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = clusterPort;\n\t\tif (host.contains(\":\")) {\n\t\t\tint index = host.indexOf(\":\");\n\t\t\tport = Integer.parseInt(host.substring(index + 1));\n\t\t\thost = host.substring(0, index);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 39.80671494384021}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = host.indexOf(':') >= 0? Integer.parseInt(host.substring(host.indexOf(':') + 1)) : clusterPort;\n\t\thosts.add(new HttpHost(host.substring(0, host.indexOf(':')), port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 38.91154009927195}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Poll for tasks with a 30-second timeout.\n\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null) {\n\t\t\t// No task retrieved.\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Process the task based on its type.\n\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t// Extract the recipient number and message data from the task.\n\t\t\tString recipientNumber = task.getRecipientNumber();\n\t\t\tString messageData = task.getMessageData();\n\n\t\t\t// Validate the message data.\n\t\t\tif (messageData.length() > 140) {\n\t\t\t\t// Message data is invalid.\n\t\t\t\tlogger.error(\"Message data is invalid. Recipient number: {}, Message data: {}\", recipientNumber, messageData);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Send the message.\n\t\t\ttry {\n\t\t\t\tsendPlainTextMessage(recipientNumber, messageData);\n\t\t\t} catch (Exception e) {\n\t\t\t\t// An exception occurred while sending the message.\n\t\t\t\tlogger.error(\"An exception occurred while sending the message. Recipient number: {}, Message data: {}\", recipientNumber, messageData, e);\n\t\t\t}\n\t\t} else {\n\t\t\t// Unsupported task type.\n\t\t\tlogger.error(\"Unsupported task type: {}\", task.getType());\n\t\t}\n\t}\n}", "CodeBleu_score": 27.907756207956}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\tdef task = taskQueue.poll(30, TimeUnit.SECONDS)\n\t\tif (task) {\n\t\t\tif (task.type == 'plainTextMessage') {\n\t\t\t\tdef recipient = task.recipient\n\t\t\t\tdef messageData = task.messageData\n\t\t\t\ttry {\n\t\t\t\t\tvalidateMessageData(messageData)\n\t\t\t\t\tsendPlainTextMessage(recipient, messageData)\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Failed to send message to ${recipient}\", e)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 18.04124618646027}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Poll for tasks with a 30-second timeout\n\t\tMap<String, String> taskAttributes = sqs.poll(queueUrl, 30);\n\t\tif (taskAttributes!= null) {\n\t\t\t// Check the task type\n\t\t\tString taskType = taskAttributes.get(\"taskType\");\n\t\t\tif (taskType.equals(\"sendPlainTextMessage\")) {\n\t\t\t\t// Extract the recipient number and message data\n\t\t\t\tString recipientNumber = taskAttributes.get(\"recipientNumber\");\n\t\t\t\tString messageData = taskAttributes.get(\"messageData\");\n\t\t\t\ttry {\n\t\t\t\t\t// Validate the data\n\t\t\t\t\tif (recipientNumber == null || recipientNumber.isEmpty() || messageData == null || messageData.isEmpty()) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid data\");\n\t\t\t\t\t}\n\t\t\t\t\t// Send the message\n\t\t\t\t\tsns.publish(recipientNumber, messageData);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// Log an error message\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.982841480778927}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 60.444797942453256}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault()\n\tHttpGet httpGet = new HttpGet(uri)\n\tCloseableHttpResponse response = httpClient.execute(httpGet)\n\tHttpEntity entity = response.getEntity()\n\tString content = EntityUtils.toString(entity, \"UTF-8\")\n\tprintln(content)\n\treturn content\n}", "CodeBleu_score": 48.63836272617339}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 60.333160059372304}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (messageXmlStr == null || messageXmlStr.length() == 0) {\n\t\treturn null;\n\t}\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tElement rootElement = doc.getDocumentElement();\n\tif (rootElement == null) {\n\t\treturn null;\n\t}\n\tObject[] root = decodeNodeToMap(rootElement, doTrim);\n\tif (root == null || root.length!= 2 ||!(root[0] instanceof String)) {\n\t\treturn null;\n\t}\n\tString rootName = (String) root[0];\n\tMap<String, Object> rootMap = new HashMap<String, Object>();\n\trootMap.put(rootName, root[1]);\n\treturn rootMap;\n}", "CodeBleu_score": 59.37288274127779}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (messageXmlStr == null || messageXmlStr.length() == 0) {\n\t\treturn null;\n\t}\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\tNode root = doc.getDocumentElement();\n\tObject[] rootArray = decodeNodeToMap(root, doTrim);\n\tif (rootArray == null) {\n\t\treturn null;\n\t}\n\tMap<String, Object> map = new HashMap<String, Object>();\n\tfor (int i = 0; i < rootArray.length; i++) {\n\t\tmap.put(rootArray[i].toString(), rootArray[++i]);\n\t}\n\treturn map;\n}", "CodeBleu_score": 59.81000759277866}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<>();\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tdbf.setNamespaceAware(true);\n\tdbf.setIgnoringElementContentWhitespace(true);\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new InputSource(new StringReader(messageXmlStr)));\n\tdoc.getDocumentElement().normalize();\n\tNodeList nodeList = doc.getChildNodes();\n\tif (nodeList.getLength() > 0) {\n\t\tmap = decodeNodeToMap(nodeList.item(0), doTrim);\n\t}\n\treturn map;\n}", "CodeBleu_score": 40.832917829904645}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\t// Check if the order is eligible for auto-processing\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\t// Log the action\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing\");\n\t\t// Enqueue the order for automatic shipping and invoicing using the transaction name\n\t\twithLogger(ofRepoId(orderRecord.get_ID()), () -> scheduleIfNotPostponed(orderRecord.getC_Order_ID()));\n\t} else {\n\t\t// Log the action\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing\");\n\t\t// Schedule the creation of missing shipment schedules if they are not postponed\n\t\twithLogger(ofRepoId(orderRecord.get_ID()), () -> scheduleMissingShipmentSchedules(orderRecord.getC_Order_ID()));\n\t}\n}", "CodeBleu_score": 22.95660400471545}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlog.info(\"Order is eligible for auto-processing. Enqueueing order for automatic shipping and invoicing\");\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing. Enqueueing order for automatic shipping and invoicing\");\n\t\tscheduleIfNotPostponed(orderRecord.getC_Order_ID(), getTrxName());\n\t} else {\n\t\tlog.info(\"Order is not eligible for auto-processing. Enqueueing order for schedule generation\");\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing. Enqueueing order for schedule generation\");\n\t\tscheduleIfNotPostponed(orderRecord.getC_Order_ID(), getTrxName());\n\t}\n}", "CodeBleu_score": 22.840324923518335}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\t// Check if the order is eligible for auto-processing\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\t// Log the action\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing, enqueuing for automatic shipping and invoicing\");\n\t\t// Enqueue the order for automatic shipping and invoicing\n\t\torderRecord.scheduleIfNotPostponed(I_C_Order.Table_Name, orderRecord.getC_Order_ID(), ofRepoId(orderRecord.getAD_Org_ID()), withLogger(log), getTrxName());\n\t} else {\n\t\t// Log the action\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing, scheduling the creation of missing shipment schedules\");\n\t\t// Schedule the creation of missing shipment schedules\n\t\torderRecord.scheduleIfNotPostponed(I_C_Order.Table_Name, orderRecord.getC_Order_ID(), ofRepoId(orderRecord.getAD_Org_ID()), withLogger(log), getTrxName());\n\t}\n}", "CodeBleu_score": 27.989301156523737}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\tif ($user && Hash::check($request->password, $user->password)) {\n\t\treturn $user;\n\t}\n\t$this->fireFailedEvent($user, $request);\n\tthrow new AuthenticationException();\n}", "CodeBleu_score": 43.25150970392659}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\tif ($user && Hash::check($request->password, $user->password)) {\n\t\treturn $user;\n\t}\n\t$this->fireFailedEvent($user, $request);\n\tthrow new AuthenticationException();\n}", "CodeBleu_score": 43.25150970392659}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = User::where('email', $request->email)->first();\n\nif (!$user ||!Hash::check($request->password, $user->password)) {\n$this->fireFailedEvent($user, $request);\nthrow new AuthenticationException();\n}\n\nreturn $user;\n}", "CodeBleu_score": 38.297511311687785}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\nthrow ValidationException::withMessages([\n$this->username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 65.18250787693756}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementLoginAttempts($request);\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 65.1912759393993}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\nthrow ValidationException::withMessages([\n$this->username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 65.18250787693756}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\tuserId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$data = Webauthn::prepareAssertion($user);\n\t\t$data['twoFactor'] = optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at);\n\t\t$data['remember'] = $request->session()->get('login.remember');\n\t}\n\n\treturn Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 56.01254837353948}, {"code": "<?\npublic function toResponse($request){\n\tuserId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\tif ($user) {\n\t\t$data = Webauthn::prepareAssertion($user);\n\t\t$data['twoFactor'] = optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at);\n\t\t$data['remember'] = $request->session()->get('login.remember');\n\t\treturn Inertia::render('Auth/TwoFactorChallenge', $data);\n\t}\n}", "CodeBleu_score": 52.03945040159048}, {"code": "<?\npublic function toResponse($request){\n\tuserId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$data = Webauthn::prepareAssertion($user);\n\t}\n\n\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t'remember' => $request->session()->get('login.remember'),\n\t])->toResponse($request);\n}", "CodeBleu_score": 62.23948502401231}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::firstWhere('driver', $driver)->firstWhere('socialite_id', $socialite->getId());\n\n\tif ($userToken) {\n\t\t$user = $this->getUserOrCreate($userToken->user_id);\n\n\t\t$this->checkUserAssociation($user, $socialite);\n\n\t\treturn $user;\n\t}\n\n\treturn $this->createUserToken($request, $driver, $socialite);\n}", "CodeBleu_score": 42.804334075187136}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::firstWhere('driver', $driver)\n\t\t->firstWhere('socialite_id', $socialite->getId());\n\n\tif ($userToken) {\n\t\t$user = $this->getUserOrCreate($userToken->user_id);\n\t\t$this->checkUserAssociation($user, $socialite);\n\t} else {\n\t\t$user = $this->createUserToken($socialite);\n\t}\n\n\tAuth::login($user);\n\n\treturn $user;\n}", "CodeBleu_score": 43.900280757156615}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\n// Check if there is an existing user token for the given driver and socialite user ID\n$userToken = UserToken::firstWhere('driver', $driver)\n->firstWhere('socialite_id', $socialite->getId());\n\n// If found, retrieve the associated user and verify the user association\nif ($userToken) {\n$user = $this->getUserOrCreate($request, $userToken);\n$this->checkUserAssociation($user, $socialite);\n\n// If not, create a new user or associate the socialite token with an existing user\n} else {\n$user = $this->createUserToken($request, $socialite);\n}\n\n// Return the authenticated user\nreturn $user;\n}", "CodeBleu_score": 43.60909552640859}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $request->user();\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$this->filterCredentials($request);\n\n\tif (!$this->fireFailedEvent($request, $user)) {\n\t\treturn false;\n\t}\n\n\tif ($this->validateAssertion($request, $user)) {\n\t\treturn true;\n\t}\n\n\t$this->throwFailedAuthenticationException();\n\treturn false;\n}", "CodeBleu_score": 49.801300926092104}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\tif (is_null($request->user())) {\n\t\treturn false;\n\t}\n\t$filteredCredentials = $this->filterCredentials($request);\n\tif (! $this->webauthn->validateAssertion($filteredCredentials, $request->user())) {\n\t\t$this->fireFailedEvent($request, $filteredCredentials);\n\t\t$this->throwFailedAuthenticationException();\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.96834848050083}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $request->user();\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\tif (!$this->filterCredentials($request)) {\n\t\treturn false;\n\t}\n\n\tif (!$this->webauthn->validateAssertion($user, $request->all())) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\tthrow new AuthenticationException();\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 52.235160816890435}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif (! $this->email) {\n\t\t$this->error('No email address provided.');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error(\"User not found: {$this->email}\");\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 38.468382874544346}, {"code": "<?\nprivate function user(): ?User{\n\tif ($this->email) {\n\t\ttry {\n\t\t\treturn User::where('email', $this->email)->firstOrFail();\n\t\t} catch (Exception $e) {\n\t\t\t$this->error(\"User not found\");\n\t\t\treturn null;\n\t\t}\n\t}\n\t$this->error(\"No email provided\");\n\treturn null;\n}", "CodeBleu_score": 28.623302337602002}, {"code": "<?\nprivate function user(): ?User{\n\tif (!$this->option('email')) {\n\t\t$this->error('No email provided.');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $this->option('email'))->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error(\"User not found.\");\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 38.41310980865097}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t\tif (config('scout.driver') && $this->option('flush')) {\n\t\tforeach (config('scout.meilisearch.indexes') as $index) {\n\t\t\t$this->artisan('scout:flush', ['model' => (new $index)->getTable()]);\n\t\t}\n\t\t$this->info('Indexes flushed!');\n\t}\n}", "CodeBleu_score": 30.625750598026347}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\tif (config('scout.driver') && $this->option('flush')) {\n\t\tforeach (config('scout.meilisearch.indexes') as $index) {\n\t\t\t$this->artisan('scout:flush', ['model' => (new $index)->getTable()]);\n\t\t}\n\t\t$this->info('Indexes flushed.');\n\t}\n}", "CodeBleu_score": 30.612477497364253}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\tif ($this->option('flush') && config('scout.driver') ==='meilisearch') {\n\t\tforeach (config('scout.meilisearch.indexes') as $index) {\n\t\t\t$this->artisan('scout:flush', [\n\t\t\t\t'index' => (new $index)->getTable(),\n\t\t\t]);\n\t\t}\n\t\t$this->info('Indexes flushed.');\n\t}\n}", "CodeBleu_score": 28.80061201550267}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\ttry {\n\t\t$vcard = Reader::read($resource->getVCard());\n\t\tif ($vcard->getUid() === null) {\n\t\t\t$vcard->setUid(uniqid());\n\t\t}\n\t} catch (VCardException $e) {\n\t\t$vcard = new VCard();\n\t\t$vcard->setVersion('4.0');\n\t\t$vcard->setFormattedName($resource->getDisplayName());\n\t\t$vcard->setUid(uniqid());\n\t}\n\n\tforeach ($this->exporters as $exporter) {\n\t\t$exporter->export($resource, $vcard);\n\t}\n\n\treturn $vcard;\n}", "CodeBleu_score": 29.216354857165065}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\tif ($vcard === null) {\n\t\t$vcard = $this->createVCard($resource);\n\t}\n\t$this->setUid($vcard, $resource);\n\tforeach ($this->exporters as $exporter) {\n\t\t$exporter->export($vcard, $resource);\n\t}\n\treturn $vcard;\n}", "CodeBleu_score": 21.48950264225766}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\tif ($vcard === null) {\n\t\t$vcard = $this->createVCard($resource);\n\t}\n\t$this->setUid($vcard, $resource);\n\tforeach ($this->exporters as $exporter) {\n\t\t$exporter->export($vcard, $resource);\n\t}\n\treturn $vcard;\n}", "CodeBleu_score": 21.48950264225766}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getAddressBookObject($addressBookId, $cardUri);\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue\n$this->getObject\nDestroyContact::dispatch\nDestroyGroup::dispatch\nDestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue\nreturn false;\n}\n}", "CodeBleu_score": 70.42234847438446}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\n\nif ($obj instanceof Contact) {\n    DestroyContact::dispatch([\n        'account_id' => $this->user->account_id,\n        'author_id' => $this->user->id,\n        'vault_id' => $obj->vault_id,\n        'contact_id' => $obj->id,\n    ])->onQueue('high');\n\n    return true;\n} elseif ($obj instanceof Group) {\n    DestroyGroup::dispatch([\n        'account_id' => $this->user->account_id,\n        'author_id' => $this->user->id,\n        'vault_id' => $obj->vault_id,\n        'group_id' => $obj->id,\n    ])->onQueue('high');\n\n    return true;\n}\n\nreturn false;\n}", "CodeBleu_score": 83.66243249889102}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getAddressBookObject($addressBookId, $cardUri);\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue\n$this->getObject\nDestroyContact::dispatch\nDestroyGroup::dispatch\nDestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue\nreturn true;\n} elseif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 74.14124969807767}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn;\n}\n\n$leadActivity = $this->activityRepository->create([\n'lead_id' => $data['lead_id'],\n'user_id' => auth()->guard()->user()->id,\n'type' => 'file',\n'comment' => $data['comment'],\n]);\n\n$file = request()->file('file')->store('files');\n\nreturn $this->create([\n'lead_activity_id' => $leadActivity->id,\n'file' => $file,\n]);\n}", "CodeBleu_score": 61.555154724386355}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn;\n}\n\n$activity = $this->activityRepository->create([\n'lead_id' => $data['lead_id'],\n'type' => 'file',\n'user_id' => auth()->guard()->user()->id,\n]);\n\n$file = request()->file('file')->store('public/files');\n\nreturn $this->create([\n'activity_id' => $activity->id,\n'name' => request()->file('file')->getClientOriginalName(),\n'path' => $file,\n]);\n}", "CodeBleu_score": 55.59265982795152}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn;\n}\n$activity = $this->activityRepository->create([\n'lead_id' => $data['lead_id'],\n'user_id' => auth()->guard()->user()->id,\n'activity_type' => 'file_upload',\n'activity_data' => json_encode(['file_name' => request()->file('file')->getClientOriginalName(), 'file_path' => request()->file('file')->store('files')]),\n]);\nreturn $activity;\n}", "CodeBleu_score": 52.66793696598574}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif (request()->routeIs('admin.*')) {\n\t\treturn redirect()->route('admin.login');\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->view('errors.custom', ['code' => $exception->getStatusCode(),'message' => $exception->getMessage()], $exception->getStatusCode());\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->view('errors.custom', ['code' => 404,'message' => 'Page not found'], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->view('errors.custom', ['code' => 500,'message' => 'Database error'], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->view('errors.custom', ['code' => 500,'message' => 'Parse error'], 500);\n\t}\n\n\treturn parent::render($request, $exception);\n}", "CodeBleu_score": 37.805656633265556}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif (request()->routeIs('admin.*')) {\n\t\treturn redirect()->route('admin.login');\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->view('errors.500', [], $exception->getStatusCode());\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->view('errors.404', [], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\n\treturn parent::render($request, $exception);\n}", "CodeBleu_score": 38.6126736708094}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif (request()->routeIs('admin.*')) {\n\t\treturn redirect()->route('admin.login');\n\t}\n\tif (request()->routeIs('front.*')) {\n\t\treturn redirect()->route('admin.login');\n\t}\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->view('errors.500', [], $exception->getStatusCode()?? 500);\n\t}\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->view('errors.404', [], 404);\n\t}\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\treturn parent::render($request, $exception);\n}", "CodeBleu_score": 39.04669580337695}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => [\n\t\t\t\t'code' => $statusCode,\n\t\t\t\t'message' => $path.'not found.'\n\t\t\t]\n\t\t], $statusCode);\n\t}\n\treturn response()->view('errors.'. $statusCode, [], $statusCode);\n}", "CodeBleu_score": 56.91854358866378}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'error' => 'Unauthorized'\n], $statusCode);\n}\n\nreturn response()->view(\"errors.$statusCode\", [], $statusCode);\n}", "CodeBleu_score": 53.22485571118468}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => $path,\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view('errors.'. $statusCode, [], $statusCode);\n}", "CodeBleu_score": 49.20016061707197}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activity_ids = request('activity_ids');\n$is_done = request('is_done');\n$updated = 0;\nforeach ($activity_ids as $activity_id) {\n$activity = Activity::find($activity_id);\nif ($activity) {\nevent(new ActivityEvent($activity, 'before_mass_update'));\n$activity->is_done = $is_done;\n$activity->save();\nevent(new ActivityEvent($activity, 'after_mass_update'));\n$updated++;\n}\n}\nreturn response()->json([\n'success' => $updated > 0,\n'updated' => $updated,\n]);\n}", "CodeBleu_score": 31.876726760983097}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request()->get('activity_ids');\n$isDone = request()->get('is_done');\n\n$updatedCount = 0;\n\nforeach ($activityIds as $activityId) {\n$activity = $this->activityRepository->getById($activityId);\n\nif ($activity) {\nevent(new ActivityBeforeUpdate($activity, $isDone));\n$activity->is_done = $isDone;\n$activity->save();\nevent(new ActivityAfterUpdate($activity, $isDone));\n\n$updatedCount++;\n}\n}\n\nif ($updatedCount > 0) {\nreturn response()->json(['success' => true,'message' => 'Activities updated successfully.']);\n} else {\nreturn response()->json(['success' => false,'message' => 'No activities were updated.']);\n}\n}", "CodeBleu_score": 39.919403214977436}, {"code": "<?\npublic function massUpdate(){\n\t\t$ids = request('ids');\n\t$isDone = request('is_done');\n\n\t$count = 0;\n\n\tforeach ($ids as $id) {\n\t\t$activity = $this->activityRepository->find($id);\n\n\t\tif ($activity) {\n\t\t\t$activity->is_done = $isDone;\n\t\t\t$activity->save();\n\n\t\t\tevent(new ActivityUpdated($activity));\n\n\t\t\t$count++;\n\t\t}\n\t}\n\n\tif ($count > 0) {\n\t\treturn response()->json([\n\t\t\t'success' => true,\n\t\t\t'message' => 'Activities updated successfully.'\n\t\t]);\n\t} else {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => 'No activities were updated.'\n\t\t]);\n\t}\n}", "CodeBleu_score": 36.687851346902704}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\t$activities = Activity::whereIn('id', request('ids'))->get();\n\tforeach ($activities as $activity) {\n\t\tevent(new ActivityDeleted($activity));\n\t\t$activity->delete();\n\t}\n\treturn response()->json(['message' => trans('cruds.activity.deleted')]);\n}", "CodeBleu_score": 24.91093010985988}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = request()->input('ids');\n\n\t$activities = $this->activityRepository->find($ids);\n\n\t$activities->each(function ($activity) {\n\t\t$this->dispatch(new ActivityDeletedEvent($activity));\n\t\t$activity->delete();\n\t});\n\n\treturn response()->json(trans('messages.activities_deleted'));\n}", "CodeBleu_score": 25.099387711795508}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = request()->input('ids');\n\t$activities = $this->activityRepository->find($ids);\n\n\tforeach ($activities as $activity) {\n\t\tevent(new ActivityDeleting($activity));\n\t}\n\n\t$this->activityRepository->delete($ids);\n\n\tforeach ($activities as $activity) {\n\t\tevent(new ActivityDeleted($activity));\n\t}\n\n\treturn response()->json(trans('global.activity.mass_destroyed'));\n}", "CodeBleu_score": 27.395060364515487}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\t$request = request()->all();\n\tforeach ($cards as $card) {\n\t\tforeach ($request as $key => $value) {\n\t\t\tif ($card['name'] == $key) {\n\t\t\t\t$card['selected'] = $value;\n\t\t\t}\n\t\t}\n\t}\n\treturn response()->json($cards);\n}", "CodeBleu_score": 39.6794085451072}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n foreach (request()->all() as $card) {\n foreach ($cards as $key => $value) {\n if ($card['id'] === $value['id']) {\n $cards[$key]['selected'] = $card['selected'];\n }\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 40.69845326294954}, {"code": "<?\n public function updateCards(){\n\tcards = $this->dashboardHelper->getCards();\n$requestData = request()->all();\nforeach ($cards as $card) {\nforeach ($requestData as $data) {\nif ($data['id'] == $card['id']) {\n$card['selected'] = $data['selected'];\n}\n}\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 41.23547650578956}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\tEvent::dispatch('configuration.store.before');\n\t$configuration = $this->configurationRepository->create(request()->all());\n\tEvent::dispatch('configuration.store.after', $configuration);\n\tsession()->flash('success', trans('configuration.messages.success.store'));\n\treturn redirect()->back();\n}", "CodeBleu_score": 44.96288093395581}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch('configuration.creating');\n\t$configuration = $this->configurationRepository->create(request()->all());\n\tEvent::dispatch('configuration.created', $configuration);\n\tsession()->flash('success', trans('configuration.created'));\n\treturn redirect()->back();\n}", "CodeBleu_score": 43.72479957131026}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch(new ConfigurationCreating($request->all()));\n\t$this->configurationRepository->create($request->all());\n\tEvent::dispatch(new ConfigurationCreated($configuration));\n\tsession()->flash('success', trans('configuration.messages.created'));\n\treturn redirect()->back();\n}", "CodeBleu_score": 38.841718698096216}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t\t$file = request()->route()->parameters['file'];\n\t$fullFileName = $this->configurationRepository->findOneByField('file_path'). $file;\n\t$configuration = $this->configurationRepository->findOneByField('file_name', $file);\n\treturn Storage::download($fullFileName, $configuration->value);\n}", "CodeBleu_score": 47.99998409834071}, {"code": "<?\npublic function download(){\n\t\t$file_path = request()->route()->parameters['file_path'];\n\t$file_name = basename($file_path);\n\t$configuration = $this->configurationRepository->findOneByField('file_name', $file_name);\n\treturn Storage::download($configuration->file_path, $configuration->file_name);\n}", "CodeBleu_score": 50.72766850023547}, {"code": "<?\npublic function download(){\n\t\t$file = request()->route()->parameters['file'];\n\t$fileName = $file. '.pdf';\n\t$config = $this->configurationRepository->findOneByField('name', $file);\n\tif (!$config) {\n\t\treturn response()->json(['error' => 'Configuration not found.'], 404);\n\t}\n\t$filePath = storage_path('app/'. $config->value);\n\tif (!file_exists($filePath)) {\n\t\treturn response()->json(['error' => 'File not found.'], 404);\n\t}\n\treturn Storage::download($filePath, $fileName);\n}", "CodeBleu_score": 44.068128224484425}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n\tfor (String model : list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setSort(0);\n\t\tadminModelSort.setType(model);\n\t\tadminModelSort.setUserId(getUserId());\n\t\tadminModelSort.setIsHidden(false);\n\t\tadminModelSortList.add(adminModelSort);\n\t}\n\tadminModelSortRepository.remove(getUserId());\n\tadminModelSortRepository.saveBatch(adminModelSortList);\n\treturn ok();\n}", "CodeBleu_score": 40.263538803375646}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSorts = new ArrayList<AdminModelSort>();\n\tfor (String model : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setSort(1);\n\t\tmodelSort.setType(model);\n\t\tmodelSort.ok();\n\t\tmodelSorts.add(modelSort);\n\t}\n\tmodelSorts.remove(0);\n\tAdminModelSort.remove(new Query().eq(\"userId\", getUserId()));\n\tAdminModelSort.saveBatch(modelSorts);\n\treturn ok();\n}", "CodeBleu_score": 29.300980084519313}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n\tfor(String s: list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setSort(s);\n\t\tsort.setType(s.split(\"_\")[0]);\n\t\tsort.setUserId(getUserId());\n\t\tsort.setIsHidden(false);\n\t\tsortList.add(sort);\n\t}\n\tAdminModelSort.remove(getUserId());\n\tAdminModelSort.saveBatch(sortList);\n\treturn ok();\n}", "CodeBleu_score": 27.270727088028433}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfiguration adminConfiguration = adminConfigurationService.getAdminConfigurationBySettingId(moduleSetting.getSettingId())\n\tif (adminConfiguration.getSettingType().equals(SettingType.CRM)) {\n\t\treturn new Result(false, \"CRM module setting cannot be updated\")\n\t}\n\tadminConfiguration.setStatus(moduleSetting.getStatus())\n\tadminConfigurationService.saveAdminConfiguration(adminConfiguration)\n\treturn new Result(true, \"Module setting updated successfully\")\n}", "CodeBleu_score": 47.90339636361378}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tif (moduleSetting.getSettingId() == null) {\n\t\treturn error(\"module.setting.id.required\");\n\t}\n\tAdminConfigurationBO adminConfig = adminConfigurationService.getAdminConfiguration(moduleSetting.getSettingId());\n\tif (adminConfig == null) {\n\t\treturn error(\"module.setting.not.found\");\n\t}\n\tif (adminConfig.getModule()!= null && adminConfig.getModule().equalsIgnoreCase(ModuleType.CRM.toString())) {\n\t\treturn error(\"module.setting.not.update.for.crm\");\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigurationService.saveAdminConfiguration(adminConfig);\n\treturn ok();\n}", "CodeBleu_score": 50.44547804370344}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfiguration adminConfiguration = adminConfigurationService.getAdminConfigurationBySettingId(moduleSetting.getSettingId());\n\tif (adminConfiguration.getModule() == Module.CRM) {\n\t\treturn new Result(false, \"Module setting is not editable for CRM module\");\n\t}\n\tadminConfiguration.setStatus(moduleSetting.getStatus());\n\tadminConfigurationService.saveAdminConfiguration(adminConfiguration);\n\treturn new Result(true, \"Module setting updated successfully\");\n}", "CodeBleu_score": 49.35814590781338}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\tif(userConfig!= null){\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.updateById();\n\t}else{\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.save();\n\t}\n\treturn Result.success();\n}", "CodeBleu_score": 47.450846466689335}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// Retrieve the user configuration by the custom key\n\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\t// If the configuration exists, update its value with the provided JSON\n\tif (userConfig!= null) {\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.updateById();\n\t} else {\n\t\t// If not, create a new user configuration with the provided JSON\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.save();\n\t}\n\t// Return a successful result\n\treturn Result.ok();\n}", "CodeBleu_score": 53.32194677912814}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\tif (userConfig!= null) {\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfigService.updateById(userConfig);\n\t} else {\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.setUserId(getUserId());\n\t\tuserConfig.setStatus(1);\n\t\tuserConfigService.save(userConfig);\n\t}\n\treturn Result.success();\n}", "CodeBleu_score": 65.00496312357745}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = userMapper.selectByPrimaryKey(userId);\n\tif (user!= null) {\n\t\tString deptName = deptMapper.selectByPrimaryKey(user.getDeptId()).getDeptName();\n\t\tuser.setDeptName(deptName);\n\t\tuser.setSalt(null);\n\t\tuser.setPassword();\n\t\treturn Result.ok(user);\n\t} else {\n\t\treturn Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t}\n}", "CodeBleu_score": 49.024058224792974}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserDao.queryUserById(userId);\n\tif (user == null) {\n\t\treturn Result.error(ErrorCode.USER_NOT_EXIST);\n\t}\n\tString deptName = adminDeptDao.queryDeptNameById(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn Result.ok(user);\n}", "CodeBleu_score": 49.36839886884022}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.queryUserInfo(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t}\n\tString deptName = adminDeptService.getDeptName(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn Result.success(user);\n}", "CodeBleu_score": 50.17486679939972}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tString userId = session(\"userId\");\n\tif (userId == null) {\n\t\treturn ok(\"No user is logged in\");\n\t}\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif (readNotices.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\treturn ok(\"success\");\n}", "CodeBleu_score": 29.56001405304721}, {"code": " public Result readNotice() {\n\t\tString userId = session(\"userId\");\n\tif(userId == null) {\n\t\treturn redirect(routes.Application.login());\n\t}\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif(readNotices.size() > 0) {\n\t\tfor(ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\treturn ok(\"success\");\n}", "CodeBleu_score": 27.73404977499182}, {"code": " public Result readNotice() {\n\t\tString userId = session(\"userId\");\n\tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif (readNoticeList.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNoticeList) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\treturn ok(\"success\");\n}", "CodeBleu_score": 27.01982016438185}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tString name = \"companyInfo\";\n\tAdminConfigBO adminConfigBO = adminConfigDAO.getByName(name);\n\tif (adminConfigBO == null) {\n\t\tadminConfigBO = new AdminConfigBO();\n\t\tadminConfigBO.setName(name);\n\t\tadminConfigBO.setStatus(AdminConfigBO.STATUS_ACTIVE);\n\t}\n\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\tadminConfigDAO.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 35.99502865644011}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfigBO adminConfigBO = adminConfigDAO.getByName(\"companyInfo\");\n\tif (adminConfigBO == null) {\n\t\tadminConfigBO = new AdminConfigBO();\n\t\tadminConfigBO.setName(\"companyInfo\");\n\t\tadminConfigBO.setDescription(\"Company Info\");\n\t\tadminConfigBO.setStatus(true);\n\t}\n\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\tadminConfigDAO.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 37.06727562752881}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfigBO adminConfigBO = adminConfigService.getAdminConfigByName(\"companyInfo\");\n\tif (adminConfigBO == null) {\n\t\tadminConfigBO = new AdminConfigBO();\n\t\tadminConfigBO.setName(\"companyInfo\");\n\t}\n\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\tadminConfigService.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 34.57427845221783}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tString key = \"company.admin\";\n\tString value = getAdminConfigValue(key);\n\tif (value!= null) {\n\t\tadminCompany = parseAdminConfig(value);\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 28.438018174217085}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tdef adminConfig = adminConfigService.queryAdminConfig(AdminConfigKey.COMPANY_INFO.key)\n\tif (adminConfig) {\n\t\treturn AdminCompanyBO.parse(adminConfig.value)\n\t}\n\treturn new AdminCompanyBO()\n}", "CodeBleu_score": 17.489490760871124}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\ttry {\n\t\tString adminConfig = queryObject(AdminConfig.class, AdminConfig.KEY);\n\t\tif (adminConfig!= null) {\n\t\t\tadminCompany = parseAdminCompany(adminConfig);\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error retrieving admin config\", e);\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 36.07740223524358}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t // create AdminConfig objects\n List<AdminConfig> configList = new ArrayList<>();\n for (String string : stringList) {\n AdminConfig config = new AdminConfig();\n config.setName(string);\n config.setStatus(AdminConfig.Status.ENABLED);\n configList.add(config);\n }\n\n // remove existing configurations\n List<AdminConfig> existingConfigs = getLogWelcomeSpeech();\n for (AdminConfig config : existingConfigs) {\n config.remove();\n }\n\n // save the new list of configurations in batch\n AdminConfig.saveBatch();\n }", "CodeBleu_score": 50.728264814703714}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> newConfigs = new ArrayList<>();\n\tfor (String string : stringList) {\n\t\tnewConfigs.add(new AdminConfig(string));\n\t}\n\tremoveLogWelcomeSpeech();\n\tbatchSave(newConfigs);\n}", "CodeBleu_score": 27.718060372546795}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t List<AdminConfig> adminConfigs = new ArrayList<>();\n stringList.forEach(s -> adminConfigs.add(new AdminConfig(s)));\n adminConfigs.forEach(a -> a.setName(\"WelcomeSpeech\"));\n adminConfigs.forEach(a -> a.setStatus(\"Enabled\"));\n adminConfigs.forEach(a -> a.setValue(\"true\"));\n adminConfigs.forEach(a -> a.setLogConfigName(\"SystemOut\"));\n adminConfigs.forEach(a -> a.setLogConfigType(\"LogConfig\"));\n adminConfigs.forEach(a -> a.setLogConfigScope(\"Cell\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeName(\"cell\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeType(\"Cell\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeId(\"cell\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentId(\"cells\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentName(\"cells\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentType(\"CellManager\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentId(\"Node=nodes/Node=servers\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentName(\"Node=nodes/Node=servers\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentType(\"ServerIndex\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentId(\"servers\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentName(\"servers\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentType(\"Server\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentId(\"ServerIndex=servers\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentName(\"ServerIndex=servers\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentType(\"ServerIndex\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentId(\"Node=nodes\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentName(\"Node=nodes\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentType(\"Node\"));\n adminConfigs.forEach(a -> a.setLogConfigScopeParentId(\"nodes\"));\n adminConfigs", "CodeBleu_score": 29.450787022457835}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString userId = adminInitDataBO.getUserId();\n\tString password = adminInitDataBO.getPassword();\n\tString username = getUsername(userId);\n\tif (username == null) {\n\t\tthrow new RuntimeException(\"Invalid userId\");\n\t}\n\tString storedPassword = getPassword(username);\n\tString salt = getSalt(username);\n\tif (storedPassword == null || salt == null) {\n\t\tthrow new RuntimeException(\"Invalid username\");\n\t}\n\tString hashedPassword = hashPassword(password, salt);\n\tif (!storedPassword.equals(hashedPassword)) {\n\t\tthrow new RuntimeException(\"Invalid password\");\n\t}\n\tString code = generateCode();\n\tsetex(userId, code, 600);\n\treturn code;\n}", "CodeBleu_score": 31.686131460777723}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\ttry {\n\t\tString userId = adminInitDataBO.getUserId();\n\t\tString password = ();\n\t\tString salt = adminInitDataBO.getSalt();\n\t\tString username = adminInitDataBO.getUsername();\n\n\t\tif (userId == null || userId.isEmpty()) {\n\t\t\tthrow new Exception(\"Invalid user ID\");\n\t\t}\n\n\t\tif (password == null || password.isEmpty()) {\n\t\t\tthrow new Exception(\"Invalid password\");\n\t\t}\n\n\t\tif (salt == null || salt.isEmpty()) {\n\t\t\tthrow new Exception(\"Invalid salt\");\n\t\t}\n\n\t\tif (username == null || username.isEmpty()) {\n\t\t\tthrow new Exception(\"Invalid username\");\n\t\t}\n\n\t\tString storedPassword = getPassword(username, salt);\n\n\t\tif (storedPassword == null || storedPassword.isEmpty()) {\n\t\t\tthrow new Exception(\"Invalid stored password\");\n\t\t}\n\n\t\tif (storedPassword.equals(password)) {\n\t\t\tString code = randomInt();\n\t\t\tgetRedis().setex(userId, 600, code);\n\t\t\treturn code;\n\t\t} else {\n\t\t\tthrow new Exception(\"Invalid password\");\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new Exception(\"Error verifying password: \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 27.4614654356781}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString userId = adminInitDataBO.getUserId();\n\tString password = adminInitDataBO.getPassword();\n\tAdminUserBO adminUserBO = adminUserDAO.getById(userId);\n\tString username = adminUserBO.getUsername();\n\tString salt = adminUserBO.getSalt();\n\tif (password.equals(PasswordUtils.getPassword(username, salt))) {\n\t\tString code = String.valueOf(randomInt());\n\t\tgetRedis().setex(userId, 10 * 60, code);\n\t\treturn code;\n\t}\n\tthrow new InvalidPasswordException();\n}", "CodeBleu_score": 34.27982244346346}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tdef userId = getUserId()\n\tdef key = \"unauth:${userId}\"\n\tdef unauthList = getRedis().get(key)\n\tif (unauthList) {\n\t\tdef unauthUrls = unauthList.split(\",\")\n\t\tif (unauthUrls.contains(request.requestURI)) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}", "CodeBleu_score": 27.55032253225302}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = userId + \"_initAuth\";\n\tList<String> list = getRedis().lrange(key, 0, -1);\n\tif (list.contains(get())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 26.472716904538174}, {"code": "private boolean verifyInitAuth(){\n\t\tdef userId = getUserId()\n\tdef key = \"unauthorized:${userId}\"\n\tdef urls = getRedis().lrange(key, 0, -1)\n\treturn urls.contains(request.getRequestURI())\n}", "CodeBleu_score": 22.55839117212795}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\tif (list.size() > 0) {\n\t\tadminRoleMenuDao.saveBatch(list);\n\t}\n}", "CodeBleu_score": 45.336695012195364}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\tif (list.size() > 0) {\n\t\tadminRoleMenuDao.saveBatch(list);\n\t}\n}", "CodeBleu_score": 45.336695012195364}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tif (list.size() > 0) {\n\t\tadminRoleMenuMapper.saveBatch(list);\n\t}\n}", "CodeBleu_score": 53.02992631914447}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\t// \u83b7\u53d6\u65e5\u5fd7\u7d22\u5f15\n\tString index = getSysLogIndex();\n\t// \u5c06\u65e5\u5fd7\u5bf9\u8c61\u8f6c\u6362\u4e3amap\n\tMap<String, Object> map = beanToMap(sysLog);\n\t// \u683c\u5f0f\u5316\u521b\u5efa\u65f6\u95f4\n\tString createTime = formatDateTime(sysLog.getCreateTime());\n\t// \u79fb\u9664ID\n\tmap.remove(\"id\");\n\t// \u521b\u5efa\u7d22\u5f15\u8bf7\u6c42\n\tIndexRequest indexRequest = new IndexRequest(index)\n\t\t\t.source(map)\n\t\t\t.setRefreshPolicy(RefreshPolicy.IMMEDIATE);\n\t// \u63d0\u4ea4\u7d22\u5f15\u8bf7\u6c42\n\ttry {\n\t\tclient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 54.864310175487205}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\ttry {\n\t\t// get the log index\n\t\tString index = getSysLogIndex();\n\t\t// convert the log object to a map\n\t\tMap<String, Object> map = beanToMap(sysLog);\n\t\t// format the creation time\n\t\tString createTime = formatDateTime(sysLog.getCreateTime());\n\t\t// remove the ID\n\t\tmap.remove(\"id\");\n\t\t// create an index request\n\t\tIndexRequest indexRequest = new IndexRequest(index).source(map).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n\t\t// submit the index request to the Elasticsearch client\n\t\tclient.index(indexRequest);\n\t} catch (Exception e) {\n\t\t// log the error message\n\t\tlog.error(e.getMessage());\n\t}\n}", "CodeBleu_score": 46.03919343349712}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\tString index = getSysLogIndex();\n\tMap<String, Object> map = beanToMap(sysLog);\n\tmap.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n\tmap.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index).source(map);\n\ttry {\n\t\tclient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(e.getMessage());\n\t}\n}", "CodeBleu_score": 40.66426455806981}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\tBoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n\tboolQueryBuilder.must(QueryBuilders.matchQuery(SysLog.FIELD_SYSLOG_LEVEL, querySysLogBO.getSysLogLevel()));\n\tboolQueryBuilder.must(QueryBuilders.matchQuery(SysLog.FIELD_SYSLOG_TYPE, querySysLogBO.getSysLogType()));\n\tboolQueryBuilder.must(QueryBuilders.matchQuery(SysLog.FIELD_SYSLOG_CONTENT, querySysLogBO.getSysLogContent()));\n\tboolQueryBuilder.must(QueryBuilders.matchQuery(SysLog.FIELD_SYSLOG_CREATE_TIME, querySysLogBO.getSysLogCreateTime()));\n\tsearchSourceBuilder.query(boolQueryBuilder);\n\tsearchSourceBuilder.sort(SysLog.FIELD_SYSLOG_CREATE_TIME, SortOrder.DESC);\n\tsearchSourceBuilder.fetchSource(new String[]{SysLog.FIELD_SYSLOG_ID, SysLog.FIELD_SYSLOG_LEVEL, SysLog.FIELD_SYSLOG_TYPE, SysLog.FIELD_SYSLOG_CONTENT, SysLog.FIELD_SYSLOG_CREATE_TIME}, null);\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n\tsearchRequest.source(searchSourceBuilder);\n\tsearchRequest.types(SysLog.FIELD_SYSLOG_TYPE);\n\tSearchResponse searchResponse = null;\n\ttry {\n\t\tsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"Error querying system logs: {}\", e.getMessage());\n\t}\n\tSearchHit[] searchHits = searchResponse.getHits().getHits();\n\tList<SysLog> sysLogList = new ArrayList<>();\n\tfor (SearchHit searchHit : searchHits) {\n\t\tsysLogList.add(SearchHitUtils.mapToBean(searchHit, SysLog.class));\n\t}\n\tBasePage<SysLog> sysLogPage = new BasePage<>();\n\tsysLogPage.setList(sysLogList);\n\tsysLogPage.setTotal(searchResponse.getHits().getTotalHits().value);\n\tsysLogPage.setCurrent(querySysLogBO.getCurrent());\n\treturn sysLogPage;\n}", "CodeBleu_score": 46.0628898488727}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder();\n\tif (querySysLogBO.getSort()!= null) {\n\t\tsearchSourceBuilder.sort(querySysLogBO.getSort(), SortOrder.fromString(querySysLogBO.getOrder()));\n\t} else {\n\t\tsearchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n\t}\n\tsearchSourceBuilder.fetchSource(new String[]{\"message\", \"source\", \"level\", \"createTime\"}, null);\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n\tsearchRequest.source(searchSourceBuilder);\n\tSearchResponse searchResponse = null;\n\ttry {\n\t\tsearchResponse = getRestHighLevelClient().search(searchRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"querySysLogPageList error\", e);\n\t}\n\tSearchHits searchHits = searchResponse.getHits();\n\tList<SysLog> sysLogList = new ArrayList<>();\n\tfor (SearchHit hit : searchHits.getHits()) {\n\t\tSysLog sysLog = new SysLog();\n\t\tsysLog.setCreateTime(hit.getSourceAsMap().get(\"createTime\").toString());\n\t\tsysLog.setLevel(hit.getSourceAsMap().get(\"level\").toString());\n\t\tsysLog.setMessage(hit.getSourceAsMap().get(\"message\").toString());\n\t\tsysLog.setSource(hit.getSourceAsMap().get(\"source\").toString());\n\t\tsysLogList.add(sysLog);\n\t}\n\tBasePage<SysLog> page = new BasePage<>();\n\tpage.setTotal(searchHits.getTotalHits().value);\n\tpage.setCurrent(querySysLogBO.getCurrent());\n\tpage.setList(sysLogList);\n\treturn page;\n}", "CodeBleu_score": 50.00844436629555}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder();\n\tsearchSourceBuilder.query(getSysLogQuery(querySysLogBO));\n\tsearchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetchSource(false);\n\tsearchSourceBuilder.fetch", "CodeBleu_score": 14.254748702676162}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 74.48025187889871}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 74.48025187889871}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 74.48025187889871}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependencies()\n.flatMapMany(this::getModule)\n.filter({ module ->\n if (circularDependencyCheckSet.contains(module.getId())) {\n warn(\"Circular dependency detected for module ${module.getId()} in application ${module.getApplicationId()}\")\n return false\n }\n circularDependencyCheckSet.add(module.getId())\n return true\n })\n.collectList()\n.flatMapMany(Flux::fromIterable)\n.onErrorContinue({ error, module ->\n warn(\"Error retrieving dependent modules for module ${module.getId()} in application ${module.getApplicationId()}: ${error.getMessage()}\")\n })\n }", "CodeBleu_score": 48.93333584886335}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependencies()\n.filter(dep ->!circularDependencyCheckSet.contains(dep.getId()))\n.doOnNext(dep -> circularDependencyCheckSet.add(dep.getId()))\n.flatMapMany(dep -> getModule(dep.getId()))\n.collectList()\n.flatMapMany(Flux::fromIterable)\n.doOnNext(depModule -> circularDependencyCheckSet.remove(depModule.getId()))\n.onErrorContinue((error, module) -> log.warn(\"Error while processing dependent module {}: {}\", module.getId(), error.getMessage()))\n.concatWith(Flux.just(module));\n }", "CodeBleu_score": 51.33499923150191}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependencies()\n.filter(dependency ->!circularDependencyCheckSet.contains(dependency.getId()))\n.flatMapMany(dependency -> {\n circularDependencyCheckSet.add(dependency.getId());\n return getLiveModules(dependency.getId());\n })\n.onErrorContinue((error, moduleId) -> log.warn(\"Error while retrieving dependent modules for module with ID {}: {}\", moduleId, error.getMessage()));\n }", "CodeBleu_score": 50.76081078673808}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tmap.each { k, v ->\n\t\tif (v instanceof Map) {\n\t\t\tif (v.componentType == \"module\" &&!v.appId.isBlank()) {\n\t\t\t\tdependentModuleIds.add(v.appId)\n\t\t\t}\n\t\t\tdoGetDependentModules(v, dependentModuleIds)\n\t\t} else if (v instanceof List) {\n\t\t\tv.each {\n\t\t\t\tif (it instanceof Map) {\n\t\t\t\t\tdoGetDependentModules(it, dependentModuleIds)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 18.58569294432518}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tmap.each { key, value ->\n\t\tif (key == 'componentType' && value =='module') {\n\t\t\tString appId = map.get('appId')\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId)\n\t\t\t}\n\t\t}\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules(value, dependentModuleIds)\n\t\t} else if (value instanceof List) {\n\t\t\tvalue.each { item ->\n\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\tdoGetDependentModules(item, dependentModuleIds)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.118370149139253}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tmap.entrySet().each { entry ->\n\t\tif (entry.value instanceof Map) {\n\t\t\tif (entry.value.type == \"module\") {\n\t\t\t\tString appId = entry.value.appId\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId)\n\t\t\t\t}\n\t\t\t}\n\t\t\tdoGetDependentModules(entry.value, dependentModuleIds)\n\t\t} else if (entry.value instanceof List) {\n\t\t\tentry.value.each { item ->\n\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\tdoGetDependentModules(item, dependentModuleIds)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 28.15606238834423}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\ttry {\n\t\t// Get the image data from the DataBuffer\n\t\tBufferedImage image = ImageIO.read(dataBuffer.getInputStream());\n\n\t\t// Resize the image if createThumbnail is true\n\t\tif (createThumbnail) {\n\t\t\timage = resizeImage(image, 250, 250);\n\t\t}\n\n\t\t// Create a new Asset with the processed image data and content type\n\t\tAsset asset = new Asset();\n\t\tasset.setData(image);\n\t\tasset.setContentType(createThumbnail? MediaType.IMAGE_JPEG : srcContentType);\n\n\t\t// Release the DataBuffer\n\t\tdataBuffer.release();\n\n\t\treturn asset;\n\t} catch (Exception e) {\n\t\tthrow new IOException(\"Error processing image data\", e);\n\t}\n}", "CodeBleu_score": 41.36967008440386}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// Read the image data from the DataBuffer\n\tInputStream inputStream = dataBuffer.getInputStream();\n\tBufferedImage image = ImageIO.read(inputStream);\n\tinputStream.close();\n\n\t// Resize the image if createThumbnail is true\n\tif (createThumbnail) {\n\t\timage = resizeImage(image, 100, 100);\n\t}\n\n\t// Set the content type to JPEG if not creating a thumbnail\n\tMediaType contentType = createThumbnail? srcContentType : MediaType.IMAGE_JPEG;\n\n\t// Create a new Asset with the processed image data and content type\n\tAsset asset = new Asset();\n\tasset.setContentType(contentType);\n\tasset.setData(imageToDataBuffer(image));\n\n\treturn asset;\n}", "CodeBleu_score": 40.926990543738405}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// Create an Asset object from the DataBuffer\n\tAsset asset = Asset.createFromData(dataBuffer);\n\t// Read the image data from the DataBuffer\n\tBufferedImage image = ImageIO.read(dataBuffer.getInputStream());\n\t// If the createThumbnail flag is true, resize the image to a thumbnail size\n\tif (createThumbnail) {\n\t\timage = resizeImage(image, THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT);\n\t\t// Set the content type to JPEG\n\t\tasset.setContentType(MediaType.IMAGE_JPEG);\n\t} else {\n\t\t// Otherwise, retain the original content type\n\t\tasset.setContentType(srcContentType);\n\t}\n\t// Release the DataBuffer\n\tdataBuffer.release();\n\t// Return the new Asset with the processed image data and content type\n\treturn asset;\n}", "CodeBleu_score": 41.02000782225973}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn assetService.getAssetById(assetId)\n\t\t.flatMap(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t}\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t});\n}", "CodeBleu_score": 33.036402338347294}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn assetService.getAsset(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Flux.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 32.6862136597781}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn assetService.getAsset(assetId)\n\t\t.flatMap(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t}\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t});\n}", "CodeBleu_score": 32.77528429492972}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (this.getWorkspace().isSaas()) {\n\t\treturn Flux.empty();\n\t}\n\treturn this.getOrganizationInEnterpriseMode()\n\t\t\t.flatMapIterable(org -> org.getAuthConfigs())\n\t\t\t.map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getName(), authConfig.getOrganizationId(), authConfig.getAuthType(), authConfig.getAuthConfigType(), authConfig.getAuthConfigStatus(), authConfig.getAuthConfigStatus().getReason(), authConfig.getAuthConfigStatus().getReasonCode(), authConfig.getAuthConfigStatus().getReasonCode().getReasonCode(), authConfig.getAuthConfigStatus().getReasonCode().getReasonCodeType()));\n}", "CodeBleu_score": 27.721797641239}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn workspaceMode.flatMapIterable(mode -> {\n\t\tif (mode == WorkspaceMode.SAAS) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn getOrganizationInEnterpriseMode()\n\t\t\t\t.flatMapIterable(organization -> organization.getAuthConfigs())\n\t\t\t\t.map(authConfig -> new FindAuthConfig(authConfig.getAuthConfigId(), authConfig.getAuthConfigName(), authConfig.getAuthConfigType(), authConfig.getAuthConfigProvider(), authConfig.getAuthConfigProperties()));\n\t});\n}", "CodeBleu_score": 29.4813684363595}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAllInEnterpriseMode().flatMapIterable(Organization::getAuthConfigs).map(authConfig -> {\n\t\tFindAuthConfig findAuthConfig = new FindAuthConfig();\n\t\tfindAuthConfig.setOrganizationId(authConfig.getOrganizationId());\n\t\tfindAuthConfig.setAuthConfig(authConfig);\n\t\treturn findAuthConfig;\n\t});\n}", "CodeBleu_score": 32.71391830898814}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongockSpring5.MongockApplicationRunner builder = MongockSpring5.builder()\n\t\t.setDriver(MongoDriver.withDefaultLock(mongoTemplate.getDb().getMongoClient(), mongoTemplate.getDb().getName()))\n\t\t.setSpringContext(springContext)\n\t\t.setChangeLogsScanPackages(Collections.singleton(ChangeLogsScanPackage.class.getPackage().getName()))\n\t\t.setJournal(Journal.withDefaultLock(mongoTemplate.getDb().getMongoClient(), mongoTemplate.getDb().getName()))\n\t\t.setWriteConcern(WriteConcern.MAJORITY)\n\t\t.setReadConcern(ReadConcern.MAJORITY);\n\treturn builder.buildApplicationRunner();\n}", "CodeBleu_score": 42.00871382047109}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(mongoTemplate.getDb())\n\t\t.setSpringContext(springContext)\n\t\t.setWriteConcern(WriteConcern.MAJORITY)\n\t\t.setReadConcern(ReadConcern.MAJORITY)\n\t\t.addChangeLogsScanPackages(\"com.example.changelogs\")\n\t\t.withJournal()\n\t\t.withDefaultLock()\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 29.853535551605937}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongockSpring5.MongockApplicationRunner.Builder builder = MongockSpring5.MongockApplicationRunner.withMongock(new MongockApplicationRunner.Mongock(mongoTemplate))\n\t\t.setDriver(new SpringDataMongo3Driver(mongoTemplate))\n\t\t.setSpringContext(springContext)\n\t\t.addChangeLogsScanPackages(\"com.example.changelogs\")\n\t\t.setWriteConcern(WriteConcern.MAJORITY)\n\t\t.setReadConcern(ReadConcern.MAJORITY)\n\t\t.withDefaultLock();\n\treturn builder.buildApplicationRunner();\n}", "CodeBleu_score": 44.916541020352966}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\n// Create a ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter\n    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter)\n\n// Set the read preference to \"secondaryPreferred\"\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred())\n\n// Return the configured ReactiveMongoTemplate\n    return reactiveMongoTemplate\n}", "CodeBleu_score": 61.42549745584793}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t// Create a new ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n// Set the read preference to \"secondaryPreferred\"\nreactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\n// Return the configured ReactiveMongoTemplate\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 77.0636964475727}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(getById(libraryQueryId))\n\t\t.map(this::getDSLFromLibraryQueryRecord);\n}", "CodeBleu_score": 32.51222538535677}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(getById(libraryQueryId))\n\t\t.map(record -> record.getDSL());\n}", "CodeBleu_score": 31.313804831461965}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(getById(libraryQueryId))\n\t\t.map(libraryQuery -> libraryQuery.getDsl());\n}", "CodeBleu_score": 32.846985803623625}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n// Parse the timeout duration from the timeout string\n        Duration timeoutDuration = parseQueryTimeoutMs(timeoutStr);\n\n// Determine if the datasource is a Javascript datasource plugin\n        boolean isJsDatasourcePlugin = datasource instanceof JavascriptDatasourcePlugin;\n\n// If the datasource is a Javascript datasource plugin, execute the query using Node.js\n        if (isJsDatasourcePlugin) {\n            return executeByNodeJs(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n        }\n\n// Execute the query locally\n        return executeLocally(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n    }", "CodeBleu_score": 30.193569494559984}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n// Parse the timeout string to a duration in milliseconds\n        Duration timeout = parseQueryTimeoutMs(timeoutStr);\n\n// Determine if the datasource is a JavaScript plugin\n        boolean isJsDatasourcePlugin = datasource.getType().equals(DatasourceType.JAVASCRIPT);\n\n// Execute the query based on the datasource type\n        Mono<QueryExecutionResult> queryExecutionResult;\n        if (isJsDatasourcePlugin) {\n            queryExecutionResult = executeByNodeJs(datasource, queryConfig, requestParams, queryVisitorContext);\n        } else {\n            queryExecutionResult = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n\n// Defer the query execution with a timeout and handle exceptions\n        return queryExecutionResult\n               .timeout(timeout)\n               .defer()\n               .onErrorMap(TimeoutException.class, e -> new PluginException(PluginError.PLUGIN_ERROR, \"Query execution timed out after \" + timeoutStr + \"ms\"))\n               .onErrorResume(PluginException.class, e -> just(new QueryExecutionResult(e.getMessage(), null, null, null)))\n               .onErrorResume(e -> {\n                    log.error(\"Error while executing query: \" + e.getMessage(), e);\n                    return just(new QueryExecutionResult(e.getMessage(), null, null, null));\n                });\n    }", "CodeBleu_score": 47.795322384784654}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\nreturn Mono.just(timeoutStr)\n               .map(QueryExecutionUtils::parseQueryTimeoutMs)\n               .onErrorMap(Exception.class, e -> {\n                    log.error(\"Error while parsing query timeout\", e);\n                    return new QueryExecutionError(QueryExecutionError.ErrorType.PLUGIN_ERROR, \"Error while parsing query timeout\");\n                })\n               .flatMap(timeout -> {\n                    if (isJsDatasourcePlugin(datasource)) {\n                        return executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n                    } else {\n                        return executeLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n                    }\n                })\n               .onErrorResume(TimeoutException.class, e -> {\n                    log.error(\"Query execution timed out\", e);\n                    return Mono.just(new QueryExecutionError(QueryExecutionError.ErrorType.TIMEOUT, \"Query execution timed out\"));\n                })\n               .onErrorResume(Exception.class, e -> {\n                    log.error(\"Error while executing query\", e);\n                    return Mono.just(new QueryExecutionError(QueryExecutionError.ErrorType.PLUGIN_ERROR, \"Error while executing query\"));\n                });\n}", "CodeBleu_score": 46.221883780713334}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// Get the appropriate query executor based on the datasource type\nQueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n\n// Build the query execution context\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n// Acquire a connection from the datasource connection pool\nMono<Connection> connectionMono = datasource.getConnection(queryExecutionContext);\n\n// Execute the query using the connection and handle any errors that occur during execution\nreturn connectionMono.flatMap(connection -> {\n    try {\n        return queryExecutor.execute(queryExecutionContext, connection);\n    } catch (Exception e) {\n        return Mono.error(e);\n    }\n});\n}", "CodeBleu_score": 42.71438064926747}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// get the query executor based on the datasource type\nQueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n// build the query execution context\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n// acquire a connection from the datasource connection pool\nMono<Connection> connection = datasource.getConnection();\n// execute the query using the connection\nreturn connection.flatMap(conn -> {\n    try {\n        return queryExecutor.executeQuery(queryExecutionContext, conn);\n    } catch (Exception e) {\n        return Mono.error(e);\n    }\n}).doOnError(e -> {\n    // handle any errors that occur during execution\n});\n}", "CodeBleu_score": 43.42529412264607}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n// Get the query executor for the datasource type\nQueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource.getType());\n\n// Build the query execution context\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n// Acquire a connection from the datasource connection pool\nMono<Connection> connectionMono = datasource.getConnection();\n\n// Execute the query using the connection\nMono<QueryExecutionResult> resultMono = connectionMono.flatMap(connection -> {\n    try {\n        return queryExecutor.executeQuery(queryExecutionContext, connection);\n    } catch (Exception e) {\n        return Mono.error(e);\n    }\n});\n\n// Handle any errors that occur during execution\nreturn resultMono.onErrorResume(error -> {\n    log.error(\"Error executing query locally for datasource {}\", datasource.getName(), error);\n    return Mono.error(error);\n});\n}", "CodeBleu_score": 50.23392598219252}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tMatcher matcher = TIMEOUT_PATTERN.matcher(timeoutStr);\n\tif (!matcher.matches()) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\tString valueStr = matcher.group(1);\n\tString unitStr = matcher.group(2);\n\n\tint value = Integer.parseInt(valueStr);\n\tTimeUnit unit = TimeUnit.valueOf(unitStr);\n\n\tlong timeoutMs = unit.toMillis(value);\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed value: \" + timeoutStr);\n\t}\n\n\treturn (int) timeoutMs;\n}", "CodeBleu_score": 37.408424188096575}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\ttry {\n\t\tdouble value = Double.parseDouble(timeoutStr.substring(0, timeoutStr.length() - 1));\n\t\tString unit = timeoutStr.substring(timeoutStr.length() - 1);\n\t\tlong timeoutMs = convertToMs(value, unit);\n\t\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\t\tthrow new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n\t\t}\n\t\treturn (int) timeoutMs;\n\t} catch (Exception e) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n}", "CodeBleu_score": 32.6692329277386}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tMatcher matcher = QUERY_TIMEOUT_PATTERN.matcher(timeoutStr);\n\tif (!matcher.matches()) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n\t}\n\n\tint value = Integer.parseInt(matcher.group(1));\n\tString unit = matcher.group(2);\n\n\tint timeoutMs = convertToMs(value, unit);\n\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds the maximum allowed limit of \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 33.435148253904345}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application, visitorId)\n           .map(queries -> queries.stream()\n                   .map(query -> query.getBaseQuery().map(baseQuery -> baseQuery.getDatasourceId()))\n                   .filter(Optional::isPresent)\n                   .map(Optional::get)\n                   .collect(Collectors.toSet()))\n           .map(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    throw new RuntimeException(\"No datasources found in the application\");\n                }\n                return datasourceIds;\n            })\n           .flatMap(datasourceIds -> Flux.fromIterable(datasourceIds)\n                   .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId))\n                   .collectList());\n}", "CodeBleu_score": 36.44410222920968}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t// get live queries from the given application\nList<Query> liveQueries = application.getLiveQueries();\n\n// extract datasource IDs from live queries\nList<String> datasourceIds = liveQueries.stream().map(Query::getDatasourceId).collect(Collectors.toList());\n\n// if no queries are found, return an error\nif (datasourceIds.isEmpty()) {\nreturn Mono.error(new RuntimeException(\"No live queries found in the given application\"));\n}\n\n// copy each datasource to the current organization\nreturn Flux.fromIterable(datasourceIds)\n.flatMap(datasourceId -> copyDatasource(currentOrganizationId, datasourceId, visitorId))\n.collectList();\n}", "CodeBleu_score": 48.250611000750375}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\nreturn application.getLiveQueries()\n.collectList()\n.flatMap(liveQueries -> {\nif (liveQueries.isEmpty()) {\nreturn Mono.error(new IllegalArgumentException(\"No live queries found\"));\n}\n\nreturn Mono.just(liveQueries)\n.map(queries -> queries.stream()\n.map(query -> query.getDatasourceId())\n.collect(Collectors.toSet()))\n.map(datasourceIds -> datasourceIds.stream()\n.map(datasourceId -> {\nreturn Mono.zip(Mono.just(datasourceId), doCopyDatasource(currentOrganizationId, datasourceId, visitorId));\n})\n.collect(Collectors.toList()))\n.flatMap(datasources -> Mono.zip(datasources));\n});\n}", "CodeBleu_score": 35.69899606680173}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn Mono.defer(() -> {\n\t\treturn datasourceService.getById(datasourceId)\n\t\t\t.flatMap(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t\t} else if (datasource.isLegacyQuickRestApi()) {\n\t\t\t\t\treturn Mono.just(DatasourceId.QUICK_REST_API);\n\t\t\t\t} else if (datasource.isLegacyOpenblocksApi()) {\n\t\t\t\t\treturn Mono.just(DatasourceId.OPENBLOCKS_API);\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(datasource, organizationId, visitorId);\n\t\t\t\t}\n\t\t\t});\n\t});\n}", "CodeBleu_score": 54.73140923932689}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getById(datasourceId)\n\t\t\t.flatMap { datasource ->\n\t\t\t\tif (isSystemStatic(datasource)) {\n\t\t\t\t\treturn Mono.just(datasourceId)\n\t\t\t\t} else if (isLegacyQuickRestApi(datasource)) {\n\t\t\t\t\treturn Mono.just(Datasource.QUICK_REST_API_ID)\n\t\t\t\t} else if (isLegacyOpenblocksApi(datasource)) {\n\t\t\t\t\treturn Mono.just(Datasource.OPENBLOCKS_API_ID)\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(datasource, organizationId, visitorId).map { it.id }\n\t\t\t\t}\n\t\t\t}\n}", "CodeBleu_score": 42.09367625456723}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getById(datasourceId)\n\t\t\t.flatMap {\n\t\t\t\tif (it.isSystemStatic()) {\n\t\t\t\t\treturn Mono.just(datasourceId)\n\t\t\t\t} else if (it.isLegacyQuickRestApi()) {\n\t\t\t\t\treturn Mono.just(DatasourceId.LEGACY_QUICK_REST_API.id)\n\t\t\t\t} else if (it.isLegacyOpenblocksApi()) {\n\t\t\t\t\treturn Mono.just(DatasourceId.LEGACY_OPENBLOCKS_API.id)\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, it, visitorId)\n\t\t\t\t\t\t\t.map { it.id }\n\t\t\t\t}\n\t\t\t}\n}", "CodeBleu_score": 34.21126867714573}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return upload(filePart)\n.defaultIfEmpty(null)\n.getAvatar()\n.remove()\n.get()\n.then(user.updateUserAvatar(filePart.getSubmittedFileName()))\n.isEmpty()\n.flatMap(isEmpty -> Mono.just(!isEmpty));\n }", "CodeBleu_score": 13.829174637490741}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return upload(filePart)\n.defaultIfEmpty(user.getAvatar())\n.get()\n.flatMap(avatar -> {\n if (!avatar.isEmpty()) {\n return remove(user.getAvatar())\n.then(updateUserAvatar(avatar, user));\n } else {\n return updateUserAvatar(avatar, user);\n }\n })\n.thenReturn(true);\n }", "CodeBleu_score": 19.836138690404407}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t Mono<String> uploadedFile = upload(filePart);\n Mono<String> oldAvatar = getAvatar(user);\n Mono<Boolean> removeOldAvatar = oldAvatar.flatMap(this::remove);\n Mono<String> defaultIfNull = oldAvatar.defaultIfNull(EMPTY_AVATAR);\n Mono<String> newAvatar = uploadedFile.defaultIfNull(EMPTY_AVATAR);\n Mono<User> updateUser = newAvatar.flatMap(avatar -> updateUserAvatar(user, avatar));\n return defaultIfNull.then(removeOldAvatar).then(updateUser).map(u -> true);\n }", "CodeBleu_score": 35.88724450508116}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tUser user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.ACTIVE);\n\tuser.setIsEnabled(true);\n\tuser.setAvatarLink(authUser.getTpAvatarLink());\n\tif (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext()!= null && authUser.getAuthContext().getPassword()!= null) {\n\t\tuser.setPassword(encryptPassword(authUser.getAuthContext().getPassword()));\n\t}\n\tuser.setConnections(newHashSet());\n\tfor (AuthConnection authConnection : authUser.getConnections()) {\n\t\tuser.getConnections().add(toAuthConnection(authConnection));\n\t}\n\tuser.setIsNewUser(true);\n\treturn create(user);\n}", "CodeBleu_score": 48.04966868599125}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tUser user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.ACTIVE);\n\tuser.setIsEnabled(true);\n\tuser.setTpAvatarLink(authUser.getAvatar());\n\tif (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext()!= null && authUser.getAuthContext().getPassword()!= null) {\n\t\tuser.setPassword(encryptPassword(authUser.getAuthContext().getPassword()));\n\t}\n\tuser.setConnections(authUser.getConnections());\n\tuser.setIsNewUser(true);\n\treturn create(user);\n}", "CodeBleu_score": 42.7804709689998}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t\t.map(authUser -> {\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(authUser.getName());\n\t\t\t\tuser.setState(User.State.active);\n\t\t\t\tuser.setIsEnabled(true);\n\t\t\t\tuser.setAvatarLink(authUser.getTpAvatarLink());\n\t\t\t\tif (authUser.getSource().equals(AuthUser.Source.email) && authUser.getAuthContext()!= null && authUser.getAuthContext().getPassword()!= null) {\n\t\t\t\t\tuser.setPassword(passwordEncoder.encode(authUser.getAuthContext().getPassword()));\n\t\t\t\t}\n\t\t\t\tuser.setConnections(authUser.getConnections());\n\t\t\t\tuser.setIsNewUser(true);\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(userRepository::create)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (authUser.getConnections()!= null) {\n\t\t\t\t\treturn Mono.from(authUser.getConnections().stream()\n\t\t\t\t\t\t\t.map(connection -> toAuthConnection(connection, user.getId()))\n\t\t\t\t\t\t\t.map(authConnectionRepository::create)\n\t\t\t\t\t\t\t.collect(Collectors.toList()))\n\t\t\t\t\t\t\t.then(Mono.just(user));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t});\n}", "CodeBleu_score": 39.553715170389204}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn userRepository.findById(user.getId())\n\t\t.flatMap(foundUser -> {\n\t\t\tif (foundUser.getConnections().stream().anyMatch(connection -> connection.getSource().equals(email))) {\n\t\t\t\treturn Mono.just(true);\n\t\t\t}\n\t\t\treturn connectionRepository.save(new Connection(email, email, user.getId()))\n\t\t\t\t.flatMap(connection -> {\n\t\t\t\t\tfoundUser.addConnection(connection);\n\t\t\t\t\treturn userRepository.save(foundUser);\n\t\t\t\t})\n\t\t\t\t.map(savedUser -> true)\n\t\t\t\t.onErrorResume(e -> {\n\t\t\t\t\tif (e instanceof DuplicateKeyException) {\n\t\t\t\t\t\treturn Mono.just(false);\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.error(e);\n\t\t\t\t});\n\t\t});\n}", "CodeBleu_score": 34.5691050909103}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn connectionRepository.findByUserIdAndProviderIdAndProviderUserId(user.getId(), EMAIL_PROVIDER_ID, email)\n\t\t.flatMap(connection -> {\n\t\t\tif (connection == null) {\n\t\t\t\tConnectionData data = new ConnectionData(EMAIL_PROVIDER_ID, email, null);\n\t\t\t\tConnection<?> connection = connectionFactoryLocator.getConnectionFactory(EMAIL_PROVIDER_ID).createConnection(data);\n\t\t\t\treturn connectionRepository.createConnection(connection).then(Mono.just(true));\n\t\t\t}\n\t\t\treturn Mono.just(false);\n\t\t})\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t.flatMap(success -> {\n\t\t\tif (success) {\n\t\t\t\treturn userRepository.save(user).then(Mono.just(true));\n\t\t\t}\n\t\t\treturn Mono.just(false);\n\t\t});\n}", "CodeBleu_score": 41.77461066339654}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn connectionRepository.createConnection(email, user.getId())\n\t\t.then(userRepository.save(user))\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t.onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 15.059540077270729}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn userRepository.findById(userId)\n\t\t\t.switchIfEmpty(Mono.error(new UserNotFoundException(\"User not found\")))\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (passwordEncoder.matches(oldPassword, user.getPassword())) {\n\t\t\t\t\treturn encryptPassword(newPassword)\n\t\t\t\t\t\t\t.map(encryptedPassword -> {\n\t\t\t\t\t\t\t\tuser.setPassword();\n\t\t\t\t\t\t\t\treturn userRepository.save(user)\n\t\t\t\t\t\t\t\t\t\t.map(savedUser -> true)\n\t\t\t\t\t\t\t\t\t\t.onErrorResume(e -> Mono.error(new InternalServerErrorException(\"Error updating password\")));\n\t\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn Mono.error(new InvalidPasswordException(\"Invalid password\"));\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 26.087660217528995}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t return findById(userId)\n.flatMap(user -> {\n if (!user.matchPassword(oldPassword)) {\n return Mono.error(new InvalidPasswordException());\n }\n return encryptPassword(newPassword)\n.map(encryptedPassword -> {\n user.setPassword(encryptedPassword);\n return user;\n })\n.flatMap(user -> userRepository.save(user))\n.thenReturn(true);\n })\n.onErrorResume(InvalidPasswordException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 22.826437842184085}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> {\nif (isBlank(newPassword)) {\nreturn Mono.error(new InvalidPasswordException(\"Password cannot be blank\"));\n}\nif (isBlank(oldPassword) ||!matchPassword(oldPassword, user.getPassword())) {\nreturn Mono.error(new InvalidPasswordException(\"Invalid old password\"));\n}\nreturn encryptPassword(newPassword)\n.map(encryptedPassword -> {\nuser.setPassword(encryptedPassword);\nreturn user;\n})\n.flatMap(updatedUser -> {\nreturn handle(userRepository.save(updatedUser))\n.thenReturn(true);\n});\n})\n.onErrorResume(error -> {\nif (error instanceof InvalidPasswordException) {\nreturn Mono.error(error);\n}\nreturn Mono.error(new RuntimeException(\"Failed to update password\"));\n});\n}", "CodeBleu_score": 35.537211170514496}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\nreturn getOrgId(orgMember)\n.flatMap(orgId -> {\nif (isAdmin(orgMember)) {\nreturn getAllUserGroups(orgId);\n} else if (withoutDynamicGroups) {\nreturn getNonDynamicUserGroupIdsInOrg(orgId);\n} else {\nreturn getUserGroupIdsInOrg(orgMember);\n}\n})\n.flatMapMany(groupIds -> {\nif (groupIds.isEmpty()) {\nreturn Mono.empty();\n} else {\nreturn getByIds(groupIds);\n}\n})\n.filter(group ->!isAllUsersGroup(group))\n.map(group -> {\nMap<String, String> map = new HashMap<>();\nmap.put(\"id\", group.getId());\nmap.put(\"name\", group.getName(locale));\nreturn map;\n})\n.collectList();\n}", "CodeBleu_score": 31.507748864468493}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn this.userGroupService.getNonDynamicUserGroupIdsInOrg(userId, orgMember.getOrgId())\n\t\t\t.flatMap(userGroupIds -> {\n\t\t\t\tif (withoutDynamicGroups) {\n\t\t\t\t\treturn this.userGroupService.getUserGroupIdsInOrg(orgMember.getOrgId())\n\t\t\t\t\t\t\t.filter(groupId ->!userGroupIds.contains(groupId));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(userGroupIds);\n\t\t\t})\n\t\t\t.flatMapMany(Flux::fromIterable)\n\t\t\t.filter(groupId ->!UserGroup.ALL_USERS_GROUP_ID.equals(groupId))\n\t\t\t.map(groupId -> this.userGroupService.getByIds(Collections.singleton(groupId), locale))\n\t\t\t.flatMap(group -> group.getId().map(id -> group))\n\t\t\t.collectList()\n\t\t\t.map(groups -> groups.stream()\n\t\t\t\t\t.map(group -> Map.of(\n\t\t\t\t\t\t\t\"id\", group.getId().get(),\n\t\t\t\t\t\t\t\"name\", group.getName().get()))\n\t\t\t\t\t.collect(Collectors.toList()));\n}", "CodeBleu_score": 31.751263067416623}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn getOrgId(orgMember).flatMap(orgId -> {\n\t\treturn isAdmin(orgId, userId).flatMap(isAdmin -> {\n\t\t\treturn withoutDynamicGroups? getNonDynamicUserGroupIdsInOrg(orgId).flatMap(nonDynamicGroupIds -> {\n\t\t\t\treturn getUserGroupIdsInOrg(orgId, userId).filter(groupIds -> {\n\t\t\t\t\treturn!groupIds.isEmpty();\n\t\t\t\t}).flatMap(groupIds -> {\n\t\t\t\t\treturn of(groupIds).filter(groupId -> {\n\t\t\t\t\t\treturn!nonDynamicGroupIds.contains(groupId);\n\t\t\t\t\t}).collectList().flatMap(filteredGroupIds -> {\n\t\t\t\t\t\treturn getName(filteredGroupIds, locale).map(groupNames -> {\n\t\t\t\t\t\t\treturn groupNames.entrySet().stream().filter(entry -> {\n\t\t\t\t\t\t\t\treturn!entry.getKey().equals(ALL_USERS_GROUP_ID);\n\t\t\t\t\t\t\t}).map(entry -> {\n\t\t\t\t\t\t\t\treturn Map.of(ID, entry.getKey(), NAME, entry.getValue());\n\t\t\t\t\t\t\t}).collect(Collectors.toList());\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}) : getUserGroupIdsInOrg(orgId, userId).filter(groupIds -> {\n\t\t\t\treturn!groupIds.isEmpty();\n\t\t\t}).flatMap(groupIds -> {\n\t\t\t\treturn getName(groupIds, locale).map(groupNames -> {\n\t\t\t\t\treturn groupNames.entrySet().stream().filter(entry -> {\n\t\t\t\t\t\treturn!entry.getKey().equals(ALL_USERS_GROUP_ID);\n\t\t\t\t\t}).map(entry -> {\n\t\t\t\t\t\treturn Map.of(ID, entry.getKey(), NAME, entry.getValue());\n\t\t\t\t\t}).collect(Collectors.toList());\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 30.337259696343516}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(UserStatus.class,\n\t\tnew Query(where(\"userId\").is(userId)),\n\t\tnew Update().set(\"hasShowNewUserGuidance\", true),\n\t\tUserStatus.class)\n\t\t.map(updateResult -> updateResult.wasAcknowledged());\n}", "CodeBleu_score": 23.198317442782333}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus)\n\t\t.map(result -> result.wasAcknowledged());\n}", "CodeBleu_score": 33.51918758725856}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(new UserStatus(userId, true), UserStatus.class)\n\t\t\t.map(updateResult -> updateResult.wasAcknowledged())\n\t\t\t.onErrorReturn(false);\n}", "CodeBleu_score": 18.91758822179571}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar rungroup sync.WaitGroup\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\trungroup.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer rungroup.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 37.09547809827847}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\tvar rungroup sync.WaitGroup\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\trungroup.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer rungroup.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 37.018880534016944}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tvar rungroup sync.WaitGroup\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\trungroup.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer rungroup.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 37.30779780068394}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(averageWeightPerPartition))\n}", "CodeBleu_score": 39.37612515206184}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(avgWeightPerPartition))\n}", "CodeBleu_score": 39.41159977215292}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(fmt.Sprintf(\"numPartitions must be greater than 0, got %d\", numPartitions))\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(fmt.Sprintf(\"totalWeightQuantity must be greater than 0, got %d\", totalWeightQuantity))\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(averageWeightPerPartition))\n}", "CodeBleu_score": 54.464666010112154}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tdef map = [:]\n\tdef conn = ConnectionHolder.currentConnection\n\tdef md = conn.metaData\n\tif (md) {\n\t\tmap.databaseProductName = md.databaseProductName\n\t\tmap.databaseProductVersion = md.databaseProductVersion\n\t}\n\treturn map\n}", "CodeBleu_score": 16.198174295723756}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>()\n\tDatabaseMetaData dbMetadata = connection.getMetaData()\n\tif (dbMetadata!= null) {\n\t\tcontributorMap.put(\"databaseProductName\", dbMetadata.getDatabaseProductName())\n\t\tcontributorMap.put(\"databaseProductVersion\", dbMetadata.getDatabaseProductVersion())\n\t}\n\treturn contributorMap\n}", "CodeBleu_score": 36.84062360847212}, {"code": "public Map<String, Object> contributorMap(){\n\t\tdef map = [:]\n\tdef metadata = connection.getMetaData()\n\tif (metadata) {\n\t\tmap.put(\"databaseProductName\", metadata.databaseProductName)\n\t\tmap.put(\"databaseProductVersion\", metadata.databaseProductVersion)\n\t}\n\treturn map\n}", "CodeBleu_score": 26.04963128454198}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tdef userSettings = configMap.getUserSettings()\n\tif (userSettings == null) {\n\t\tinfo.setAllowRegistration(false)\n\t\tinfo.setMustVerifyEmailOnRegistration(false)\n\t} else {\n\t\tinfo.setAllowRegistration(userSettings.getAllowRegistration())\n\t\tinfo.setMustVerifyEmailOnRegistration(userSettings.getMustVerifyEmailOnRegistration())\n\t}\n}", "CodeBleu_score": 37.826202443838966}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tdef userSettings = configMap.get(\"user\")\n\tif (!userSettings) {\n\t\tinfo.setAllowRegistration(false)\n\t\tinfo.setMustVerifyEmailOnRegistration(false)\n\t} else {\n\t\tinfo.setAllowRegistration(userSettings.get(\"allowRegistration\")?: false)\n\t\tinfo.setMustVerifyEmailOnRegistration(userSettings.get(\"mustVerifyEmailOnRegistration\")?: false)\n\t}\n}", "CodeBleu_score": 30.55074463416044}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.userSettings == null) {\n\t\tinfo.setAllowRegistration(false)\n\t\tinfo.setMustVerifyEmailOnRegistration(false)\n\t} else {\n\t\tinfo.setAllowRegistration(configMap.userSettings.allowRegistration)\n\t\tinfo.setMustVerifyEmailOnRegistration(configMap.userSettings.mustVerifyEmailOnRegistration)\n\t}\n}", "CodeBleu_score": 25.652559222019555}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(group, {\n\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\trestartInternal();\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"restarting\";\n}", "CodeBleu_score": 47.585135008053925}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(group, {\n\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\trestartInternal();\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Restarting\";\n}", "CodeBleu_score": 47.72834566510903}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\trestartInternal();\n\t\t}\n\t}, \"restart\");\n\tthread.setContextClassLoader(getClassLoader());\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"restarting\";\n}", "CodeBleu_score": 49.73693639134122}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n}", "CodeBleu_score": 40.14004898603382}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().maxInMemorySize(this.maxInMemorySize);\n\tif (this.jackson2Present) {\n\t\tJackson2CodecSupport.extendMessageConverters(configurer.getCustomCodecs(), this.objectMapper);\n\t}\n}", "CodeBleu_score": 20.26313236184239}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n}", "CodeBleu_score": 40.14004898603382}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\tdef location = getConsole().getLocation()\n\treturn RouterFunctions.route(\n\t\t\tRequestPredicates.GET(\"/console/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)).and(RequestPredicates.negate(RequestPredicates.path(\"/console/assets/**\"))),\n\t\t\tServerResponse.temporaryRedirect(URI.create(location + \"/console/index.html\")).build())\n}", "CodeBleu_score": 28.31827319954703}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\tdef location = getConsole().getConsoleIndexLocation()\n\tdef predicate = RequestPredicates.GET(\"/console/**\")\n\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t.and(RequestPredicates.path(\"/console/assets/**\").negate())\n\t\t.and(RequestPredicates.upgrade().negate())\n\tdef route = RouterFunctions.route(predicate, ServerResponse.temporaryRedirect(location).build())\n\treturn route\n}", "CodeBleu_score": 41.38579796095216}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/console/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)).and(RequestPredicates.negate(RequestPredicates.path(\"/console/assets/**\"))),\n\t\tServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build()\n\t)\n}", "CodeBleu_score": 22.458924413548104}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\tdef ucIndexLocation = getUc().getLocation()\n\tdef ucAssetsLocation = getUc().getAssetsLocation()\n\tdef indexFile = \"index.html\"\n\tdef indexPath = ucIndexLocation.resolve(indexFile)\n\tdef indexResource = new FileSystemResource(indexPath)\n\tdef indexMediaType = MediaType.TEXT_HTML\n\tdef indexMediaTypePredicate = RequestPredicates.accept(indexMediaType)\n\tdef indexPathPredicate = RequestPredicates.path(\"/uc/**\")\n\tdef indexAssetsPathPredicate = RequestPredicates.path(\"/uc/assets/**\").negate()\n\tdef indexPredicate = indexPathPredicate.and(indexAssetsPathPredicate).and(indexMediaTypePredicate)\n\tdef indexHandler = RequestHandlers.serveResource(indexResource)\n\treturn RouterFunctions.route(indexPredicate, indexHandler)\n}", "CodeBleu_score": 28.159173174791963}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.path(\"/uc/assets/**\").negate())\n\t\t\t.and(RequestPredicates.method(HttpMethod.GET)),\n\t\t(ServerRequest request) -> {\n\t\t\tString path = request.path();\n\t\t\tString pathWithoutUc = path.substring(3);\n\t\t\treturn ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html\" + pathWithoutUc)).build();\n\t\t});\n}", "CodeBleu_score": 28.387676131932228}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\tdef uc = getUc()\n\tdef ucAssets = uc.resolve(\"assets\")\n\treturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.path(!PathPatternParser.PATH_PATTERN_MATCHER.matcher(ucAssets.toString() + \"/**\")))\n\t\t\t.and(RequestPredicates.method(HttpMethod.GET)),\n\t\t{\n\t\t\tdef index = uc.resolve(\"index.html\")\n\t\t\tif (Files.exists(index)) {\n\t\t\t\treturn ServerResponse.ok().syncBody(Files.readAllBytes(index))\n\t\t\t} else {\n\t\t\t\treturn ServerResponse.notFound().build()\n\t\t\t}\n\t\t}\n\t)\n}", "CodeBleu_score": 33.03947201176464}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tdef sessionRepository = new ConcurrentMapSessionRepository(new MapSessionRepository(new ConcurrentHashMap<>()))\n\tdef sessionTimeout = getTimeout()\n\tif (sessionTimeout > 0) {\n\t\tsessionRepository.setDefaultMaxInactiveInterval(sessionTimeout)\n\t}\n\treturn sessionRepository\n}", "CodeBleu_score": 33.18586906445746}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>(), sessionRepository, sessionTimeout, serverConfig);\n}", "CodeBleu_score": 14.445011866957286}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tdef sessionConfig = sessionConfig()\n\tdef serverConfig = serverConfig()\n\tdef sessionTimeout = determineTimeout(sessionConfig, serverConfig)\n\tdef sessionRepository = new ConcurrentMapSessionRepository(sessionTimeout)\n\treturn sessionRepository\n}", "CodeBleu_score": 25.610421401297863}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService)\n\tdefaultUserDetailService.setTwoFactorAuthDisabled(haloProperties.getSecurity().getTwoFactorAuth().isDisabled())\n\treturn defaultUserDetailService\n}", "CodeBleu_score": 43.16898162083676}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService)\n\tuserDetailService.setTwoFactorAuthDisabled(haloProperties.getSecurity().getTwoFactorAuth().isDisabled())\n\treturn userDetailService\n}", "CodeBleu_score": 46.428148815399034}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService()\n\tdefaultUserDetailService.userDetailsService = userService\n\tdefaultUserDetailService.roleService = roleService\n\tdefaultUserDetailService.twoFactorAuthDisabled = haloProperties.security.twoFactorAuth.disabled\n\treturn defaultUserDetailService\n}", "CodeBleu_score": 29.14749704262565}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner()\ncommentOwner.setKind(\"email\")\ncommentOwner.setEmail(getEmail()?: \"\")\ncommentOwner.setDisplayName(getDisplayName())\ncommentOwner.setAvatarUrl(getAvatarUrl())\ncommentOwner.setWebsite(getWebsite())\nreturn commentOwner\n}", "CodeBleu_score": 29.3676741404131}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner(kind: 'email',\nemail: email?: '',\ndisplayName: displayName?: '',\navatarUrl: avatarUrl?: '',\nwebsiteUrl: websiteUrl?: '')\n}", "CodeBleu_score": 7.7228466453948625}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setEmail(email?: \"\");\n\tcommentOwner.setDisplayName(displayName);\n\tcommentOwner.setAnnotations(new Comment.CommentOwner.Annotations());\n\tcommentOwner.getAnnotations().setAvatar(avatar);\n\tcommentOwner.getAnnotations().setWebsite(website);\n\treturn commentOwner;\n}", "CodeBleu_score": 42.222490870647576}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"email\")) {\n\t\tUser user = fetch(User.class, commentOwner.getName());\n\t\treturn user.getEmail().equals(post.getOwner());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner());\n\t}\n}", "CodeBleu_score": 29.202748726391086}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"email\")) {\n\t\tUser user = fetch(User.class, commentOwner.getName());\n\t\treturn user.getEmail().equals(post.getOwner().getEmail());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 32.47935917281168}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == \"email\") {\n\t\tUser user = fetch(User, post.getOwner());\n\t\treturn user.getEmail().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 28.32316318283948}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t\tListOptions options = new ListOptions();\n\tString fieldSelector = getFieldSelector();\n\tif (isNotBlank(fieldSelector)) {\n\t\tfieldSelector = fieldSelector.replaceAll(\"labelSelector=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"fieldSelector=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerKind=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerIdentity=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"keyword=\", \"\");\n\t\tfieldSelector = fieldSelector.replaceAll(\"ownerName=\", \"\");\n\t\t", "CodeBleu_score": 17.019335296140586}, {"code": "public ListOptions toListOptions(){\n\t\tListOptions options = new ListOptions();\n\tString fieldSelector = getFieldSelector();\n\tif (isNotBlank(fieldSelector)) {\n\t\toptions.setLabelSelector(labelAndFieldSelectorToListOptions(fieldSelector));\n\t}\n\tif (isNotBlank(getKeyword())) {\n\t\toptions.setKeyword(getKeyword());\n\t}\n\tif (isNotBlank(getOwnerName())) {\n\t\toptions.setOwnerIdentity(ownerIdentity(getOwnerKind(), getOwnerName()));\n\t}\n\treturn options;\n}", "CodeBleu_score": 20.872799206692637}, {"code": "public ListOptions toListOptions(){\n\t\tListOptions listOptions = new ListOptions();\n\tString fieldSelector = getFieldSelector();\n\tif (isNotBlank(fieldSelector)) {\n\t\tlistOptions.setFieldSelector(fieldSelector);\n\t}\n\tString keyword = getKeyword();\n\tif (isNotBlank(keyword)) {\n\t\tlistOptions.addCondition(new Condition(\"name\", keyword));\n\t\tlistOptions.addCondition(new Condition(\"description\", keyword));\n\t}\n\tString ownerName = getOwnerName();\n\tif (isNotBlank(ownerName)) {\n\t\tlistOptions.addCondition(new Condition(\"owner.name\", ownerName));\n\t}\n\treturn listOptions;\n}", "CodeBleu_score": 32.241925693077064}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.flatMap(this::getCounter)\n\t\t.map(this::mapToCommentStats)\n\t\t.defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 25.221652152352664}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.flatMap(this::getCounter)\n\t\t.map(c -> new CommentStats(commentName, c.getUpvote()))\n\t\t.defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 33.126238386096176}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.map(this::getCounter)\n\t\t.map(this::getUpvote)\n\t\t.map(upvote -> new CommentStats(commentName, upvote))\n\t\t.defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 28.28804834021248}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscriber subscriber = createSubscriber(identity)\n\tif (subscriber!= null) {\n\t\tInterestReason reason = new InterestReason()\n\t\treason.setReasonType(ReasonType.SOMEONE_REPLIED_TO_YOU)\n\t\treason.setExpression(\"repliedOwner == '\" + identity.getName() + \"'\")\n\t\tsetReasonType(subscriber, reason)\n\t\tsubscribe(subscriber)\n\t\tblock()\n\t}\n}", "CodeBleu_score": 42.28645844155877}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given user identity\n\tSubscriber subscriber = Subscriber.create(identity);\n\t// Set up an interest reason for the subscription\n\tInterestReason reason = InterestReason.create(\n\t\t\t\"someone replied to you\",\n\t\t\t\"owner\",\n\t\t\t\"==\",\n\t\t\tidentity.name);\n\t// Subscribe the user to the notification center\n\tsubscriber.subscribe(NotificationCenter.instance, reason)\n\t.block();\n}", "CodeBleu_score": 31.36767631683369}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscriber subscriber = createSubscriber(identity);\n\tif (subscriber) {\n\t\tsetReasonType(subscriber, \"someone replied to you\");\n\t\tsetExpression(subscriber, \"replied.owner == \" + identity.name);\n\t\tsubscribe(subscriber);\n\t}\n}", "CodeBleu_score": 24.33320204176847}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.get()\n\t\t.uri(\"/comments/{id}\", comment.getId())\n\t\t.retrieve()\n\t\t.bodyToMono(Comment.class)\n\t\t.flatMap(comment -> {\n\t\t\tcomment.setApproved(true);\n\t\t\tcomment.setApprovedTime(LocalDateTime.now());\n\t\t\treturn updateCommentWithRetry(comment, comment -> client.put()\n\t\t\t\t.uri(\"/comments/{id}\", comment.getId())\n\t\t\t\t.bodyValue(comment)\n\t\t\t\t.retrieve()\n\t\t\t\t.bodyToMono(Comment.class));\n\t\t});\n}", "CodeBleu_score": 30.119690988627628}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.update(comment)\n\t\t.onErrorResume(OptimisticLockingFailureException.class, e -> {\n\t\t\treturn client.get(comment.getSpec().getName())\n\t\t\t\t.flatMap(comment -> approveComment(comment));\n\t\t})\n\t\t.flatMap(comment -> {\n\t\t\tcomment.setApproved(true);\n\t\t\tcomment.setApprovedTime(now());\n\t\t\treturn client.update(comment);\n\t\t});\n}", "CodeBleu_score": 34.6485818377657}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.get()\n\t\t\t.uri(\"/comments/{id}\", comment.getId())\n\t\t\t.retrieve()\n\t\t\t.bodyToMono(Comment.class)\n\t\t\t.flatMap(c -> {\n\t\t\t\tc.setApproved(true);\n\t\t\t\tc.setApprovedTime(Instant.now());\n\t\t\t\treturn client.put()\n\t\t\t\t\t\t.uri(\"/comments/{id}\", c.getId())\n\t\t\t\t\t\t.body(Mono.just(c), Comment.class)\n\t\t\t\t\t\t.retrieve()\n\t\t\t\t\t\t.bodyToMono(Comment.class)\n\t\t\t\t\t\t.onErrorResume(OptimisticLockingFailureException.class, e -> {\n\t\t\t\t\t\t\treturn approveComment(c);\n\t\t\t\t\t\t});\n\t\t\t});\n}", "CodeBleu_score": 33.107990113036}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this->getLivewire();\n\t}\n\n\tif ($this instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 50.128533860914494}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire($this->getLivewire());\n\t}\n\n\tif ($action instanceof HasRecord && $this->getRecord()) {\n\t\t$action->record($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 58.877450405334464}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this->getLivewire();\n\t}\n\n\tif ($this instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 50.128533860914494}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif ($this->redirect) {\n\t\t$url = $this->evaluate($this->redirect);\n\t\tif ($url) {\n\t\t\theader('Location: '. $url);\n\t\t}\n\t}\n\treturn $this;\n}", "CodeBleu_score": 62.14615372045857}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$url = $this->evaluate($this->successRedirect);\n\tif (!empty($url)) {\n\t\t$this->redirect($url);\n\t}\n\treturn $this;\n}", "CodeBleu_score": 71.94809649686414}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->evaluateRedirectUrl();\n\tif ($this->redirect) {\n\t\t$this->redirect();\n\t}\n\treturn $this;\n}", "CodeBleu_score": 27.994240057605534}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tf (!$record) {\n    return;\n}\n\nif (!method_exists($record, 'tags')) {\n    return;\n}\n\n$tagClassName = $record->tags()->getRelated()->getMorphClass();\n\ncollect($state)->map(function ($tagName) use ($tagClassName) {\n    $locale = $tagClassName::getLocale();\n\n    $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n    if ($tag?->isEmpty()?? true) {\n        $tag = $tagClassName::create([\n            'name' => [$locale => $tagName],\n        ]);\n    }\n\n    return $tag;\n})->flatten()->pluck('id')->sync($record->tags);\n}", "CodeBleu_score": 65.1672224683332}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tf (!$record) {\n    throw new InvalidArgumentException('Record not found');\n}\n\nif (!method_exists($record, 'tags')) {\n    throw new InvalidArgumentException('Record does not have a tags method');\n}\n\n$tagClassName = $record->tags()->getRelated()->getMorphClass();\n\n$tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n    $locale = $tagClassName::getLocale();\n\n    $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n    if ($tag?->isEmpty()?? true) {\n        $tag = $tagClassName::create([\n            'name' => [$locale => $tagName],\n        ]);\n    }\n\n    return $tag;\n})->flatten();\n\n$record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 70.59113584891557}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\trecord?->tags", "CodeBleu_score": 7.476635514020624}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{\n\t\tType:   authz.ScopeTypePipeline,\n\t\tName:   pipelineIdentifier,\n\t\tDomain: authz.DomainGlobal,\n\t}\n\tresource := authz.Resource{\n\t\tType:   authz.ResourceTypePipeline,\n\t\tName:   pipelineIdentifier,\n\t\tDomain: authz.DomainGlobal,\n\t}\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"failed to check permission for pipeline %q: %w\", pipelineIdentifier, err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 62.15132008013757}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{\n\t\tType:    authz.ScopeTypeRepo,\n\t\tSpace:   spacePath,\n\t\tName:    repoName,\n\t\tSubPath: pipelineIdentifier,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 66.68470617754181}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tscope, resource, err := getPipelineScopeAndResource(repoPath, pipelineIdentifier)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 30.744555146303632}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope := authz.Scope(authz.SpaceScope, space.ID)\n\tresource := authz.Resource(authz.SpaceResource, space.Name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 34.54516161848217}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\tspacePath := space.Path\n\tif spacePath == \"\" {\n\t\treturn nil\n\t}\n\tspacePath = strings.TrimPrefix(spacePath, \"/\")\n\tspacePath = strings.TrimSuffix(spacePath, \"/\")\n\tparentSpace, spaceName, err := paths.DisectLeaf(spacePath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope(authz.Space, parentSpace)\n\tresource := authz.Resource(spaceName)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 44.2234951060687}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path to get the parent space and name\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect space path: %w\", err)\n\t}\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tID:   parentSpace.ID,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tID:   space.ID,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 65.80120524236395}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar buffer bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(data); err!= nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid JSON payload: %v\", err)\n\t}\n\n\tencoder := json.NewEncoder(&buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(data); err!= nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid JSON payload: %v\", err)\n\t}\n\n\tsanitized := bytes.TrimSuffix(buffer.Bytes(), []byte(\"\n\"))\n\treturn sanitized, nil\n}", "CodeBleu_score": 54.52723983987535}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\tvar v any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&v); err!= nil {\n\t\treturn nil, err\n\t}\n\tbuffer := bytes.NewBuffer(nil)\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(v); err!= nil {\n\t\treturn nil, err\n\t}\n\tresult := buffer.Bytes()\n\tif len(result) > 0 && result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\treturn result, nil\n}", "CodeBleu_score": 67.66437243865796}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\n\tvar sanitized bytes.Buffer\n\tsanitized.Grow(len(source))\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tencoder := json.NewEncoder(&sanitized)\n\tencoder.SetEscapeHTML(false)\n\n\tif err := decoder.Decode(&data); err!= nil {\n\t\treturn nil, err\n\t}\n\tif err := encoder.Encode(&data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized.Truncate(sanitized.Len() - 1)\n\treturn sanitized.Bytes(), nil\n}", "CodeBleu_score": 51.78552709673281}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\tif err := repoRefValidation(repoRef); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository using the reference\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.352685083595745}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\tif err := git.IsValidRepoRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest.Wrap(err)\n\t}\n\n\t// Fetch the repository using the reference\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository\n\tif err := c.authService.CheckRepo(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 49.38620741362863}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := c.repoStore.ValidateRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest(err.Error())\n\t}\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, fmt.Errorf(\"could not find repository: %w\", err)\n\t}\n\tif err := c.repoStore.CheckAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, fmt.Errorf(\"could not check access: %w\", err)\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 60.78150787666636}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.11962240946978}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createMarkdownPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 29.553328223426657}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer,\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer,\n\t\tenum.CheckPayloadKindRaw: createRawPayloadSanitizer,\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer,\n\t}\n}", "CodeBleu_score": 28.129702815081174}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.state.renderer then\n\t\tself.state.renderer = self.renderer\n\tend\n\tself.state.on_render = on_render\n\tself.state.renderer:attach(self)\n\treturn self", "CodeBleu_score": 49.46377769039047}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.renderer then\n\t\tself:attach_to_screen()\n\tend\n\treturn self", "CodeBleu_score": 37.16655570647821}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.renderer then\n\t\tself.renderer = Renderer(self)\n\tend\n\treturn self", "CodeBleu_score": 45.64400014958565}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tlocal filename = self:get_filename()\n\t\tif filename then\n\t\t\tself.watcher = vim.loop.new_fs_event()\n\t\t\tself.watcher:start(filename, {}, function(err)\n\t\t\t\tif err then\n\t\t\t\t\tconsole.debug.error(err)\n\t\t\t\telse\n\t\t\t\t\tcallback()\n\t\t\t\tend\n\t\t\tend)\n\t\tend\n\tend", "CodeBleu_score": 47.95309306741447}, {"code": "function Buffer:watch(callback)\n\t\tif not self:is_valid() then return end\n\tif not callback then return end\n\tself.watcher:watch_file(self.filename, function()\n\t\tif not self:is_valid() then return end\n\t\tcallback(self)\n\tend)", "CodeBleu_score": 34.08989046833455}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tself.watcher:watch_file(self.filename, callback)\n\tend", "CodeBleu_score": 23.265858420920353}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then \n\t\treturn self.hex \n\tend\n\tlocal spec = self.spec\n\tlocal attr = self.attr\n\tlocal hl = vim.api.nvim_get_hl_by_name(attr, true)\n\tif hl then\n\t\tself.hex = string.format(\"#%02x%02x%02x\", hl.foreground, hl.background, hl.special)\n\t\treturn self.hex\n\tend\n\treturn nil", "CodeBleu_score": 51.36808439392975}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\tlocal spec = self.spec\n\tlocal fg = spec.foreground\n\tlocal bg = spec.background\n\tlocal attr = fg and 'fg' or 'bg'\n\tlocal highlight = vim.api.nvim_get_hl_by_name(attr, true)\n\tif not highlight then\n\t\treturn\n\tend\n\tlocal color = highlight[attr]\n\tif color == 'NONE' then\n\t\treturn\n\tend\n\tlocal hex = '#'.. bit.tohex(color, 6)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 56.840194499786}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = self.fg and \"foreground\" or \"background\"\n\tlocal highlight_id = vim.fn.synIDtrans(vim.fn.hlID(spec[attr]))\n\tlocal ok, hex = pcall(vim.fn.synIDattr, highlight_id, \"bg#\")\n\n\tif not ok then\n\t\treturn nil\n\tend\n\n\thex = hex:sub(2)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 55.10258297746746}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines(1, -1, false)\n\tfor line_index, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tself:add_highlight(buffer, line_index, match:find(pattern), match:find(pattern) + #match, hl)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 37.076558397354745}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor line_index, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tlocal start_index = line:find(match)\n\t\t\tlocal end_index = start_index + #match - 1\n\t\t\tself:add_highlight(buffer, line_index, start_index, line_index, end_index, hl)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 46.69303051859772}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines(1, -1)\n\tfor i, line in ipairs(lines) do\n\t\tlocal start, finish = line:find(pattern)\n\t\twhile start do\n\t\t\tbuffer:add_highlight(i, start - 1, finish, hl)\n\t\t\tstart, finish = line:find(pattern, finish + 1)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 43.63916552537581}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row.. \":\".. col\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, row, col, pos or {right_gravity = true}, {\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = \"eol\",\n\t\tpriority = priority or 100,\n\t})\n\tNamespace.virtual_text[id] = extmark\n\treturn id", "CodeBleu_score": 49.871481222922164}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = buffer.. \":\".. row.. \":\".. col\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos or \"overlay\",\n\t\tpriority = priority or 100,\n\t})\n\tNamespace.virtual_text[id] = extmark\n\treturn id", "CodeBleu_score": 60.35105195821156}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row.. \":\".. col\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_priority = priority,\n\t})\n\tNamespace.virtual_text[id] = extmark\n\treturn id", "CodeBleu_score": 57.27004329083354}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 22.16746728091925}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 26.129737275189658}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 26.129737275189658}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher then\n\t\treturn watcher\n\tend\n\n\twatcher = vim.loop.new_fs_event()\n\twatcher:start(path, false, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 44.268658875271136}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif not watcher then\n\t\twatcher = vim.loop.new_fs_event()\n\t\tself.watchers[path] = watcher\n\t\twatcher:start(path, { recursive = true }, handler)\n\tend\n\treturn watcher", "CodeBleu_score": 44.92480388540806}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif not watcher then\n\t\twatcher = vim.loop.new_fs_event()\n\t\tself.watchers[path] = watcher\n\t\twatcher:start(path, {}, handler)\n\tend\n\treturn watcher", "CodeBleu_score": 43.15588210029125}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks == nil then\n\t\treturn nil\n\tend\n\tlocal signs = {}\n\tlocal sign_ns_id = self.namespace:get_sign_ns_id()\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign = {}\n\t\t\tsign.name = line.type\n\t\t\tsign.priority = 10\n\t\t\tsign.line = line.line_num\n\t\t\tsign.id = line.line_num\n\t\t\tsign.namespace = sign_ns_id\n\t\t\ttable.insert(signs, sign)\n\t\tend\n\tend\n\tself.namespace:set_signs(signs)\n\treturn hunks", "CodeBleu_score": 39.26664545560701}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buf = self.buf\n\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif not hunks then\n\t\treturn nil, self.git_object:get_error()\n\tend\n\tlocal signs_setting = self:get_setting('signs')\n\tlocal signs_ns_id = self:get_sign_ns_id()\n\tlocal signs = {}\n\tlocal sign_priority = 0\n\tfor _, hunk in ipairs(hunks) do\n\t\tsign_priority = sign_priority + 1\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = line.id\n\t\t\tsigns[sign_id] = {\n\t\t\t\tname = signs_setting[hunk.type],\n\t\t\t\tpriority = sign_priority,\n\t\t\t\thunk = hunk,\n\t\t\t}\n\t\tend\n\tend\n\tbuf:set_signs(signs_ns_id, signs)\n\treturn hunks", "CodeBleu_score": 52.072745512922246}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tif not lines then\n\t\treturn nil, self.git_object:get_error()\n\tend\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif not hunks then\n\t\treturn nil, self.git_object:get_error()\n\tend\n\tlocal signs_setting = self.signs_setting\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = self.namespace:get_sign_ns_id(line)\n\t\t\tlocal sign_type = signs_setting:get(hunk.type)\n\t\t\tif sign_type then\n\t\t\t\tsigns.set_sign(sign_id, sign_type)\n\t\t\tend\n\t\tend\n\tend\n\tself.signs = hunks\n\treturn hunks", "CodeBleu_score": 42.896798982160156}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = fs.tmpname()\n\tlocal err = fs.write_file(tmp_file, patch)\n\tif err then return nil, err end\n\n\tlocal _, err = self:stage_hunk_from_file(tmp_file)\n\tfs.remove_file(tmp_file)\n\treturn _, err", "CodeBleu_score": 47.833917821240796}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tlocal err = fs.write_file(tmpfile, patch)\n\tif err then\n\t\treturn nil, err\n\tend\n\tlocal _, err = self:stage_hunk_from_file(tmpfile)\n\tfs.remove_file(tmpfile)\n\treturn _, err", "CodeBleu_score": 47.51249214233063}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tlocal err = fs.write_file(tmpfile, patch)\n\tif err then return nil, err end\n\tlocal ok, err = self:stage_hunk_from_file(tmpfile)\n\tfs.remove_file(tmpfile)\n\treturn ok, err", "CodeBleu_score": 47.527217838099574}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\t// Create the access token request\n\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n\t// Add the necessary authentication header\n\trequest.addHeader(getHttpBasicAuthHeaderValue());\n\n\t// Add the body parameters\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, getClientId());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, getClientSecret());\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\n\t// Send the request\n\tResponse response = send(request);\n\n\t// Extract the access token from the response body\n\tToken accessToken = getAccessTokenExtractor().extract(response.getBody());\n\n\treturn accessToken;\n}", "CodeBleu_score": 50.194271165635904}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\taddHeader(request);\n\taddBodyParameter(request, verifier);\n\tResponse response = send(request);\n\treturn extract(response);\n}", "CodeBleu_score": 40.413373988413625}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\t// Create an OAuth request to the access token endpoint\n\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n\t// Add the necessary authentication header and body parameters\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\trequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\n\n\t// Send the request and extract the access token from the response body\n\tResponse response = send(request);\n\treturn getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 50.685356533167166}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host), credentials);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 69.33331826260421}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider()\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), credentials)\n\tcontext.setCredentialsProvider(credsProvider)\n\tAuthCache authCache = new BasicAuthCache()\n\tauthCache.put(host, new BasicScheme())\n\tcontext.setAuthCache(authCache)\n\tlog.info(\"Added credentials for ${host.getHostName()}:${host.getPort()}\")\n}", "CodeBleu_score": 45.50235784624689}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added credentials for {} to context\", host.getHostName());\n}", "CodeBleu_score": 51.86198225649289}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\nif (jenkins == null) {\nthrow new IllegalStateException(\"Jenkins is not available\");\n}\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\"AvatarCache is not available\");\n}\nString key = cache.generateKey(source);\ncache.seed(key, source);\nString encodedKey = rawEncode(key);\nif (encodedKey == null) {\nthrow new IllegalStateException(\"UTF-8 encoding is not available\");\n}\nreturn getRootUrlFromRequest() + \"/avatar/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 44.59478514905242}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.get();\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache implementation\");\n\t}\n\tString key = cache.hashKey(source);\n\tcache.seed(source, key);\n\tString encodedKey = Util.rawEncode(key);\n\treturn jenkins.getRootUrl() + \"avatar/\" + encodedKey + \"/\" + size + \".png\";\n}", "CodeBleu_score": 41.74174313041552}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.get();\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\"No AvatarCache extension is registered\");\n}\nString cacheKey = cache.seed(source);\nString encodedKey = rawEncode(cacheKey);\nString url = jenkins.getRootUrl() + \"avatar/\" + encodedKey + \"/\" + size;\nif (!Charset.isSupported(\"UTF-8\")) {\nthrow new IllegalStateException(\"UTF-8 encoding is not supported\");\n}\nreturn url;\n}", "CodeBleu_score": 44.946418670087894}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source\n\tthis.image = image\n\tthis.lastModified = lastModified\n\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis()\n\t}\n\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tscaleImage(image, 128, 128)\n\t}\n}", "CodeBleu_score": 38.12730049228441}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source\n\tthis.image = image\n\tif (image.width > 128 || image.height > 128) {\n\t\tthis.image = scaleImage(image, 128, 128)\n\t}\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis()\n\t} else {\n\t\tthis.lastModified = lastModified\n\t}\n}", "CodeBleu_score": 42.80994958785399}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source\n\tthis.image = image\n\tthis.lastModified = lastModified\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis()\n\t}\n\tif (image.width > 128 || image.height > 128) {\n\t\timage = scaleImage(image, 128, 128)\n\t}\n}", "CodeBleu_score": 37.313603022704264}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get()\n\t\t\tcacheEntry.lastModifiedDate = new Date()\n\t\t\tcacheEntry.image = image\n\t\t\tfuture = null\n\t\t\treturn false\n\t\t} catch (Exception e) {\n\t\t\tfuture = null\n\t\t\treturn true\n\t\t}\n\t}\n\treturn true\n}", "CodeBleu_score": 32.53573894098941}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tCacheEntry entry = future.get()\n\t\t\timage = entry.image\n\t\t\tlastModified = entry.lastModified\n\t\t\tfuture = null\n\t\t\treturn false\n\t\t} catch (InterruptedException e) {\n\t\t\tfuture = null\n\t\t\treturn true\n\t\t} catch (ExecutionException e) {\n\t\t\tfuture = null\n\t\t\treturn true\n\t\t}\n\t}\n\treturn true\n}", "CodeBleu_score": 34.057760691361935}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tdef entry = future.get()\n\t\t\tif (entry!= null) {\n\t\t\t\timage = entry.image\n\t\t\t\tlastModified = entry.lastModified\n\t\t\t\tfuture = null\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tfuture = null\n\t\t}\n\t}\n\treturn future!= null\n}", "CodeBleu_score": 31.262030056599976}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// Create the image\n\tBufferedImage image = generateImage(node);\n\n\t// Write the image to a byte array output stream\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write(image, \"png\", baos);\n\tbaos.flush();\n\n\t// Set the response headers\n\trsp.setHeader(\"Cache-Control\", \"no-cache\");\n\trsp.setHeader(\"Pragma\", \"no-cache\");\n\trsp.setDateHeader(\"Expires\", 0);\n\trsp.setContentType(\"image/png\");\n\n\t// Write the byte array to the response output stream\n\trsp.getOutputStream().write(baos.toByteArray());\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 41.42675579262103}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// Generate the image\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nBufferedImage image = generateImage();\nif (image!= null) {\nImageIO.write(image, \"png\", baos);\nbaos.flush();\n}\n\n// Write the response\nrsp.setContentType(\"image/png\");\nrsp.setDateHeader(\"Expires\", System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 365)); // cache for 1 year\nrsp.setContentLength(baos.size());\nOutputStream os = rsp.getOutputStream();\nos.write(baos.toByteArray());\nos.flush();\n}", "CodeBleu_score": 45.11683583409835}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tif (req.checkIfModified(lastModification, rsp)) {\nreturn;\n}\nByteArrayOutputStream baos = new ByteArrayOutputStream();\ntry {\nwriteImage(baos);\n} finally {\nif (flushImage) {\nbaos.flush();\n}\n}\nrsp.setContentType(\"image/png\");\nrsp.setDateHeader(\"Last-Modified\", lastModification);\nrsp.setContentLength(baos.size());\nrsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 49.237494771601654}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n}", "CodeBleu_score": 7.520147519375872}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n}", "CodeBleu_score": 7.520147519375872}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClient = createHttpClient();\n\tthis.context = createContext();\n}", "CodeBleu_score": 23.633191895973336}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tdef sourceBranch = pullRequest.getSource()\n\tdef destinationBranch = pullRequest.getDestination()\n\tif (sourceBranch!= null) {\n\t\tdef sourceNode = sourceBranch.getRawNode()\n\t\tif (sourceNode!= null) {\n\t\t\tpullRequest.setCommitClosure(new CommitClosure(sourceNode))\n\t\t}\n\t}\n\tif (destinationBranch!= null) {\n\t\tdef destinationNode = destinationBranch.getRawNode()\n\t\tif (destinationNode!= null) {\n\t\t\tpullRequest.setCommitClosure(new CommitClosure(destinationNode))\n\t\t}\n\t}\n}", "CodeBleu_score": 35.22980600434409}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranchName = pullRequest.getSource().getBranch().getName()\n\tString destinationBranchName = pullRequest.getDestination().getBranch().getName()\n\tBranch sourceBranch = repository.getBranch(sourceBranchName)\n\tBranch destinationBranch = repository.getBranch(destinationBranchName)\n\n\tif (sourceBranch!= null) {\n\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceBranch.getRawNode()))\n\t}\n\n\tif (destinationBranch!= null) {\n\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationBranch.getRawNode()))\n\t}\n}", "CodeBleu_score": 44.74963088482187}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tdef source = pullRequest.getSource()\n\tdef destination = pullRequest.getDestination()\n\tdef sourceBranch = pullRequest.getSource().getBranch()\n\tdef destinationBranch = pullRequest.getDestination().getBranch()\n\n\tif (sourceBranch) {\n\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceBranch.getRawNode()))\n\t}\n\tif (destinationBranch) {\n\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationBranch.getRawNode()))\n\t}\n}", "CodeBleu_score": 40.672271833349896}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tdef url = Jenkins.getInstance().getRootUrl()\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\")\n\t}\n\treturn url\n}", "CodeBleu_score": 44.97675428915866}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tdef rootURL = Jenkins.get().getRootUrl()\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is missing. Please configure the root URL in the Jenkins global settings.\")\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build)\n}", "CodeBleu_score": 53.43867280726757}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = Jenkins.getInstance().getRootUrl()\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\")\n\t}\n\treturn rootURL\n}", "CodeBleu_score": 45.86401790606004}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tURI uri = URI.create(url)\n\tif (uri.isOpaque()) {\n\t\tthrow new IllegalStateException(\"Invalid URL: \" + url)\n\t}\n\n\tString host = uri.getHost()\n\tif (host == null || host.isEmpty()) {\n\t\tthrow new IllegalStateException(\"Invalid URL: \" + url)\n\t}\n\n\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Invalid URL: \" + url)\n\t}\n\n\tif (bitbucket instanceof BitbucketServerApi) {\n\t\tif (!host.contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Invalid URL: \" + url)\n\t\t}\n\t}\n\n\treturn url\n}", "CodeBleu_score": 39.05108537044912}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL parsedURL = new URL(url)\n\t\tif (\"localhost\".equals(parsedURL.getHost()) || \"unconfigured-jenkins-location\".equals(parsedURL.getHost())) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url + \" - The Jenkins URL cannot use 'localhost' or 'unconfigured-jenkins-location' as the host.\")\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApi) {\n\t\t\tif (!parsedURL.getHost().contains(\".\")) {\n\t\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url + \" - The Jenkins URL must be fully qualified for Bitbucket Cloud API clients.\")\n\t\t\t}\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url, e)\n\t}\n\treturn url\n}", "CodeBleu_score": 59.94643043561876}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tString host = url\n\tif (host.contains(\"://\")) {\n\t\thost = host.substring(host.indexOf(\"://\") + 3)\n\t}\n\tif (host.contains(\"/\")) {\n\t\thost = host.substring(0, host.indexOf(\"/\"))\n\t}\n\tif (host.contains(\"localhost\") || host.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"The Jenkins URL cannot be \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\"\")\n\t}\n\tif (bitbucket.isCloud() &&!host.contains(\".\")) {\n\t\tthrow new IllegalStateException(\"The Jenkins URL must be a fully qualified domain name\")\n\t}\n\treturn host\n}", "CodeBleu_score": 34.52863658827647}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t// Initialize the Bitbucket context and check if notifications are disabled\nBitbucketContext context = new BitbucketContext(build, listener);\nif (context.isNotificationsDisabled()) {\n    return;\n}\n\n// Retrieve the SCM revision and its hash\nSCMRevision revision = source.getRevision(build);\nString hash = revision.getHash();\n\n// Determine whether to share the build key between branch and PR\nString buildKey = null;\nif (revision instanceof BranchSCMRevision) {\n    buildKey = revision.getHash();\n} else if (revision instanceof PullRequestSCMRevision) {\n    buildKey = ((PullRequestSCMRevision) revision).getOriginName();\n}\n\n// Log the notification type, construct the build key, and initialize the Bitbucket client\nlistener.getLogger().println(\"Notifying Bitbucket for \" + buildKey);\nBitbucketClient client = buildBitbucketClient(source, context, listener);\n\n// Create and send the build status notification\nclient.createStatus(buildKey, hash, context.getBuildState(), context.getBuildUrl(), context.getBuildDescription());\n}", "CodeBleu_score": 29.162763809427428}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none())\n\t\t\t.withTraits(source.getTraits());\n\tif (context.notificationsDisabled()) {\n\t\treturn;\n\t}\n\tSCMRevision revision = build.getAction(RevisionAction.class).getRevision();\n\tif (revision == null) {\n\t\tlistener.getLogger().println(\"No revision for \" + build.getFullDisplayName());\n\t\treturn;\n\t}\n\tString hash = revision.getHash();\n\tif (hash == null) {\n\t\tlistener.getLogger().println(\"No hash for \" + build.getFullDisplayName());\n\t\treturn;\n\t}\n\tString buildKey = context.getBuildKey();\n\tif (buildKey == null) {\n\t\tbuildKey = build.getParent().getFullName() + \"@\" + build.getNumber();\n\t}\n\tBitbucketClient client = buildBitbucketClient(source, listener);\n\tcreateStatus(client, source, build, buildKey, listener);\n}", "CodeBleu_score": 39.82656841827645}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\titbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none())\n           .withTraits(source.getTraits());\nif (context.notificationsDisabled()) {\nreturn;\n}\nSCMRevision revision = build.getChangeSet().isEmpty()? build.getParent().getAction(RevisionAction.class).getRevision() : build.getAction(RevisionAction.class).getRevision();\nString hash = revision.getHash().substring(0, 8);\nString buildKey = context.getBuildKey();\nif (buildKey == null) {\nbuildKey = build.getParent().getDisplayName();\n}\nBitbucketClient client = buildBitbucketClient(source, listener);\nif (revision instanceof BranchSCMRevision) {\nString branch = ((BranchSCMRevision) revision).getBranch();\nlistener.getLogger().println(\"Notifying Bitbucket of build \" + buildKey + \" on branch \" + branch + \" with commit \" + hash);\nclient.createStatus(build.getParent().getFullName(), buildKey, build.getResult(), hash, branch, context.getBuildDisplayName(build), context.getBuildUrl(build), context.getCommitUrl(build));\n} else if (revision instanceof PullRequestSCMRevision) {\nString originName = ((PullRequestSCMRevision) revision).getOriginName();\nlistener.getLogger().println(\"Notifying Bitbucket of build \" + buildKey + \" on PR \" + originName + \" with commit \" + hash);\nclient.createStatus(build.getParent().getFullName(), buildKey, build.getResult(), hash, originName, context.getBuildDisplayName(build), context.getBuildUrl(build), context.getCommitUrl(build));\n}\n}", "CodeBleu_score": 46.3157769664312}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t//    if (shareBuildKeyBetweenBranchAndPR) {\n//        return build.getParent().getFullName() + \"-\" + branch\n//    }\n//    else {\n//        return build.getFullName()\n//    }\n\n    return build.getParent().getFullName() + \"-\" + branch\n}", "CodeBleu_score": 16.96311793135984}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n+        return \"${build.getParent().getFullName()}-${branch}\"\n+    }\n+    return build.getParent().getFullName()\n+}", "CodeBleu_score": 26.933803040220738}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n-        return getBuildKey(build.getParent(), branch)\n-    }\n-    return build.getParent().getFullName()\n+    return getBuildKey(build.getParent(), branch)\n }", "CodeBleu_score": 30.164231806605684}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = BitbucketSCMNavigator.DEFAULT_SERVER_URL\n\t\tLOGGER.log(Level.WARNING, \"Server URL is null, using default: {0}\", serverUrl)\n\t}\n\tif (traits == null) {\n\t\ttraits = [new BranchDiscoveryTrait(true, true), new OriginPullRequestDiscoveryTrait(true, true, true, true)]\n\t\tLOGGER.log(Level.WARNING, \"Traits are null, using default: {0}\", traits)\n\t}\n\treturn this\n}", "CodeBleu_score": 17.120164503069134}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = readResolveServerUrl()\n\t\tif (serverUrl == null) {\n\t\t\tLOGGER.log(Level.WARNING, \"Could not resolve server URL for {0}\", this)\n\t\t}\n\t}\n\tif (traits == null) {\n\t\ttraits = defaultIfBlank(traits, [])\n\t\ttraits.add(new BitbucketSCMNavigatorContextTraits())\n\t}\n\treturn this\n}", "CodeBleu_score": 13.466043054574028}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = readResolveServerUrl()\n\t\tLOGGER.log(Level.WARNING, \"No server URL was specified for ${id}. Using default URL ${serverUrl}\")\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<BitbucketSCMNavigatorRequest.BitbucketSCMNavigatorRequestTrait>()\n\t\ttraits.add(new BitbucketSCMNavigatorRequest.BitbucketSCMNavigatorRequestTrait(BitbucketSCMNavigatorRequest.BitbucketSCMNavigatorRequestTrait.BitbucketSCMNavigatorRequestTraitImpl.create()))\n\t}\n\treturn this\n}", "CodeBleu_score": 22.82424907495615}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tdef repo = getBitbucketRepository(name)\n\tif (repo!= null) {\n\t\tdef message = format(\"Repository %s %s\", repo.getFullName(), isMatch? \"proposed\" : \"ignored\")\n\t\tif (isMatch) {\n\t\t\tcount++\n\t\t}\n\t\tgetLogger().info(message)\n\t}\n}", "CodeBleu_score": 40.30760265313395}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name)\n\tif (repository == null) {\n\t\treturn\n\t}\n\tString message = format(\"Repository %s %s\", getFullName(repository), isMatch? \"proposed\" : \"ignored\")\n\tif (isMatch) {\n\t\tcount++\n\t}\n\tgetLogger().info(message)\n}", "CodeBleu_score": 43.709149592329005}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name)\n\tif (repository!= null) {\n\t\tString message = format(\"Repository %s is %s\", getFullName(repository), isMatch? \"proposed\" : \"ignored\")\n\t\tif (isMatch) {\n\t\t\tcount++\n\t\t}\n\t\tgetLogger().info(message)\n\t}\n}", "CodeBleu_score": 43.86096608475007}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t/        GitSCM scm = build.getParent().getParent().getScm()\n//        Run<?,?> build = build\n//        GitClient git = build.getParent().getParent().getSCM().createClient(build, listener)\n//        TaskListener listener = listener\n//        Revision marked = build.getPreviousBuild().getAction(GitRevisionState.class).getRevision()\n//        Revision rev = build.getAction(GitRevisionState.class).getRevision()\n\n        if (marked == null) {\n            return rev\n        }\n\n        if (rev instanceof Branch) {\n            String hash = rev.getHash()\n            if (hash!= null) {\n                String branch = rev.getBranch()\n                if (branch!= null && branchExists(git, branch)) {\n                    if (!commitExists(git, hash)) {\n                        listener.getLogger().println(\"Fetching branch ${branch} from remote repository\")\n                        git.fetch(scm.getRepositories().get(0).getFetch(), new RefSpec(\"+${hash}:${hash}\"), null, null)\n                    }\n                }\n            }\n        }\n\n        return rev\n    }", "CodeBleu_score": 33.00080216728185}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//    String cloneLink = scm.getRepositories().get(0).getGitCloneLink().getRemote();", "CodeBleu_score": 7.4903428112491035}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//    if (marked == null) {", "CodeBleu_score": 7.465730879678959}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> linksMap = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tlinksMap.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn linksMap;\n}", "CodeBleu_score": 57.143425188904885}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 62.864718988261345}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 62.864718988261345}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selectedResources = resourceStates.length? resourceStates : await this.getSelectedResources();\n\tif (!selectedResources.length) {\n\t\treturn;\n\t}\n\n\tconst resourcesByRepository = groupBy(selectedResources, resource => resource.resourceUri.scheme);\n\tfor (const [repositoryScheme, resources] of resourcesByRepository) {\n\t\tconst repository = this.getRepository(repositoryScheme);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst filePaths = resources.map(resource => repository.asFilePath(resource.resourceUri));\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (e) {\n\t\t\tthis.logError(e, 'Failed to add files to repository');\n\t\t\tthis.showErrorMessage('Failed to add files to repository');\n\t\t}\n\t}\n}", "CodeBleu_score": 43.69383158063588}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = resourceStates.map(resourceState => resourceState.resourceUri);\n\tconst repositories = await getRepositories(uris);\n\n\tfor (const repository of repositories) {\n\t\tconst files = uris.filter(uri => repository.contains(uri)).map(uri => repository.toFilePath(uri));\n\t\ttry {\n\t\t\tawait repository.add(files);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tshowError(`Failed to add files to repository: ${error}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.24957426393629}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = await this.resolveResources(resourceStates);\n\tif (!resources.length) {\n\t\treturn;\n\t}\n\n\tconst repos = new Map<string, string[]>();\n\tfor (const resource of resources) {\n\t\tconst uri = resource.resourceUri;\n\t\tconst repo = this.getRepository(uri);\n\t\tif (repo) {\n\t\t\tconst repoUris = repos.get(repo.rootUri.toString());\n\t\t\tif (repoUris) {\n\t\t\t\trepoUris.push(uri.toString());\n\t\t\t} else {\n\t\t\t\trepos.set(repo.rootUri.toString(), [uri.toString()]);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const [repoUri, uris] of repos) {\n\t\tconst repo = this.getRepository(Uri.parse(repoUri));\n\t\tif (!repo) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst paths = await repo.toPaths(uris);\n\t\tconst result = await repo.add(paths);\n\t\tif (result.code) {\n\t\t\tconst message = `Failed to add files to repository. ${result.message}`;\n\t\t\tthis.logger.error(message, result.code);\n\t\t\twindow.showErrorMessage(message);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.99304677224227}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\t/**\n\t * The resource states to check.\n\t */\n\tresourceStates: ResourceState[];\n\t/**\n\t * The URI of the resource to check.\n\t */\n\tresourceUri?: Uri;\n\t/**\n\t * The source control id to check.\n\t */\n\tsourceControlId?: string;\n\t/**\n\t * The source control provider to check.\n\t */\n\tsourceControlProvider?: SourceControlProvider;\n\t/**\n\t * The source control repository to check.\n\t */\n\tsourceControlRepository?: SourceControlRepository;\n\t/**\n\t * The source control resource state to check.\n\t */\n\tsourceControlResourceState?: SourceControlResourceState;\n\t/**\n\t * The source control resource to check.\n\t */\n\tsourceControlResource?: SourceControlResource;\n\t/**\n\t * The source control to check.\n\t */\n\tsourceControl?: SourceControl;\n\t/**\n\t * The source control repository to check.\n\t */\n\tsourceControlRepository?: SourceControlRepository;\n\t/**\n\t * The source control resource state to check.\n\t */\n\tsourceControlResourceState?: SourceControlResourceState;\n\t/**\n\t * The source control resource to check.\n\t */\n\tsourceControlResource?: SourceControlResource;\n\t/**\n\t * The source control to check.\n\t */\n\tsourceControl?: SourceControl;\n\t/**\n\t * The source control repository to check.\n\t */\n\tsourceControlRepository?: SourceControlRepository;\n\t/**\n\t * The source control resource state to check.\n\t */\n\tsourceControlResourceState?: SourceControlResourceState;\n\t/**\n\t * The source control resource to check.\n\t */\n\tsourceControlResource?: SourceControlResource;\n\t/**\n\t * The source control to check.\n\t */\n\tsourceControl?: SourceControl;\n\t/**\n\t * The source control repository to check.\n\t */\n\tsourceControlRepository?: SourceControlRepository;\n\t/**\n\t * The source control resource state to check.\n\t */\n\tsourceControlResourceState?: SourceControlResourceState;\n\t/**\n\t * The source control resource to check.\n\t */\n\tsourceControlResource?: SourceControlResource;\n\t/**\n\t * The source control to check.\n\t */\n\tsourceControl?: SourceControl;\n\t/**\n\t * The source control repository to check.\n\t */\n\tsourceControlRepository?: SourceControlRepository;\n\t/**\n\t * The source control resource state to check.\n\t */\n", "CodeBleu_score": 22.648947848222633}, {"code": "protected async getResourceStates{\n\t\tif (resourceStates.length === 0 ||!Uri.isUri(resourceStates[0].resource)) {\n\t\tconst resource = await this.getSingleSCMResource();\n\t\tif (resource) {\n\t\t\tresourceStates = [resource];\n\t\t}\n\t}\n\treturn resourceStates.filter(resource => Uri.isUri(resource.resource));\n}", "CodeBleu_score": 34.049636799146754}, {"code": "protected async getResourceStates{\n\t\tvar resourceStates = this.resourceStates;\n\tif (resourceStates.empty ||!(resourceStates.first.URI instanceOf Uri)) {\n\t\tvar resource = await this.getSingleSCMResource;\n\t\tif (resource!= null) {\n\t\t\tresourceStates = #[resource];\n\t\t}\n\t}\n\treturn resourceStates.select(r | r instanceOf Resource);\n}", "CodeBleu_score": 29.064662908901028}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tif (!uri) {\n\t\tconst activeEditor = window.activeTextEditor;\n\t\tif (activeEditor) {\n\t\t\turi = activeEditor.document.uri;\n\t\t}\n\t}\n\n\tif (uri && uri.scheme ==='svn') {\n\t\turi = fromSvnUri(uri);\n\t}\n\n\tif (uri && uri.scheme === 'file') {\n\t\tconst sourceControlManager = await commands.executeCommand<SourceControlManager>('getSCMManager');\n\t\tif (sourceControlManager) {\n\t\t\tconst repository = sourceControlManager.getRepository(uri);\n\t\t\tif (repository) {\n\t\t\t\treturn repository.getResourceFromFile(uri);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}", "CodeBleu_score": 47.66803132713727}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tif (!uri) {\n\t\tconst activeTextEditor = window.activeTextEditor;\n\t\tif (!activeTextEditor) {\n\t\t\treturn undefined;\n\t\t}\n\t\turi = activeTextEditor.document.uri;\n\t}\n\n\tif (uri.scheme ==='svn') {\n\t\turi = fromSvnUri(uri);\n\t}\n\n\tif (uri.scheme!== 'file') {\n\t\treturn undefined;\n\t}\n\n\tconst sourceControlManager = this.sourceControlManager;\n\tif (!sourceControlManager) {\n\t\treturn undefined;\n\t}\n\n\tconst repository = await sourceControlManager.getRepository(uri);\n\tif (!repository) {\n\t\treturn undefined;\n\t}\n\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 47.09533771581756}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tconst uriToUse = uri?? this.editor.document.uri;\n\tif (uriToUse.scheme ==='svn') {\n\t\turiToUse.with({ scheme: 'file' });\n\t}\n\tif (uriToUse.scheme === 'file') {\n\t\tconst sourceControlManager = await this.sourceControlManager;\n\t\tif (sourceControlManager) {\n\t\t\tconst repository = sourceControlManager.getRepository(uriToUse);\n\t\t\tif (repository) {\n\t\t\t\treturn repository.getResourceFromFile(uriToUse);\n\t\t\t}\n\t\t}\n\t}\n\treturn undefined;\n}", "CodeBleu_score": 33.73933545223714}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remoteRepository = await this.model.getRemoteRepository(element.resource);\n\tif (remoteRepository) {\n\t\tif (element.type === SvnPathChangeType.MODIFIED) {\n\t\t\tconst oldPath = element.resource.path.substr(0, element.resource.path.lastIndexOf('/'));\n\t\t\tconst oldRevision = element.resource.revision - 1;\n\t\t\tconst oldUri = await remoteRepository.getUri(oldPath, oldRevision);\n\t\t\tconst newUri = await remoteRepository.getUri(element.resource.path, element.resource.revision);\n\t\t\tthis.openDiff(oldUri, newUri);\n\t\t} else if (element.type === SvnPathChangeType.ADDED) {\n\t\t\tconst uri = await remoteRepository.getUri(element.resource.path, element.resource.revision);\n\t\t\tthis.openFileRemote(uri);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.686326440656664}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remoteRepo = await this.model.getRemoteRepository(element);\n\tif (element.changeType === SvnChangeType.Modified) {\n\t\tconst oldPath = element.oldPath;\n\t\tconst oldRevision = element.oldRevision;\n\t\tconst newPath = element.newPath;\n\t\tconst newRevision = element.newRevision;\n\t\tconst diffCmd = `svn diff -r ${oldRevision}:${newRevision} ${oldPath} ${newPath}`;\n\t\tthis.openDiff(diffCmd, remoteRepo);\n\t} else if (element.changeType === SvnChangeType.Added) {\n\t\tconst newPath = element.newPath;\n\t\tconst newRevision = element.newRevision;\n\t\tconst diffCmd = `svn cat -r ${newRevision} ${newPath}`;\n\t\tthis.openDiff(diffCmd, remoteRepo);\n\t}\n}", "CodeBleu_score": 35.344847648317824}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst repository = await this.model.getRemoteRepository(element);\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst oldPath = element.oldPath || element.path;\n\tconst newPath = element.newPath || element.path;\n\n\tif (element.changeType === ChangeType.MODIFIED) {\n\t\tawait this.openDiff(repository, oldPath, element.oldRevision, newPath, element.newRevision);\n\t} else if (element.changeType === ChangeType.ADDED) {\n\t\tawait this.openFileRemote(repository, newPath, element.newRevision);\n\t}\n}", "CodeBleu_score": 39.52203418339194}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\tshowErrorMessage('Clipboard is not supported.');\n\t\treturn;\n\t}\n\n\tif (item.type === 'commit') {\n\t\tconst commit = item.commit;\n\t\tconst message = what ==='message'? commit.message : commit.revision;\n\t\tclipboard.writeText(message);\n\t}\n}", "CodeBleu_score": 35.933190984351214}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\tshowErrorMessage('Clipboard is not supported.');\n\t\treturn;\n\t}\n\n\tif (item.type === 'commit') {\n\t\tconst commit = item.commit;\n\t\tif (what ==='message') {\n\t\t\tclipboard.writeText(commit.message);\n\t\t} else if (what ==='revision') {\n\t\t\tclipboard.writeText(commit.revision);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.249196319736676}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!navigator.clipboard) {\n\t\twindow.showErrorMessage('Clipboard is not supported in your browser.');\n\t\treturn;\n\t}\n\n\tif (item.type === 'commit') {\n\t\tconst commit = item.commit;\n\t\tconst message = what ==='message'? commit.message : commit.revision;\n\t\tawait navigator.clipboard.writeText(message);\n\t}\n}", "CodeBleu_score": 39.37093975947538}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tif (connection!= null) {\n\t\treturn connection;\n\t}\n\tif (factories.isEmpty()) {\n\t\tload();\n\t}\n\tif (factories.isEmpty()) {\n\t\tthrow new IOException(\"No GiteaConnectionFactory implementations found\");\n\t}\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\tif (factory.canOpen(this)) {\n\t\t\tconnection = factory.open(this);\n\t\t\treturn connection;\n\t\t}\n\t}\n\tthrow new IOException(\"No GiteaConnectionFactory implementation found that can open this connection\");\n}", "CodeBleu_score": 24.943723634448318}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : GiteaConnectionFactory.getFactories()) {\n\t\tif (factory.canOpen(this)) {\n\t\t\treturn factory.open(this);\n\t\t}\n\t}\n\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 15.062482655779535}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\t// Load available GiteaConnectionFactory implementations\n\tServiceLoader<GiteaConnectionFactory> serviceLoader = ServiceLoader.load(GiteaConnectionFactory.class);\n\tList<GiteaConnectionFactory> factories = new ArrayList<>();\n\tfor (GiteaConnectionFactory factory : serviceLoader) {\n\t\tfactories.add(factory);\n\t}\n\n\t// Sort factories based on their priority\n\tCollections.sort(factories, new Comparator<GiteaConnectionFactory>() {\n\t\t@Override\n\t\tpublic int compare(GiteaConnectionFactory o1, GiteaConnectionFactory o2) {\n\t\t\treturn o1.getPriority() - o2.getPriority();\n\t\t}\n\t});\n\n\t// Attempt to open the connection using the factories\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\tif (factory.canOpen(this)) {\n\t\t\treturn factory.open(this);\n\t\t}\n\t}\n\n\t// If no suitable factory is found, throw an IOException\n\tthrow new IOException(\"No suitable GiteaConnectionFactory found to open the connection\");\n}", "CodeBleu_score": 37.57057599524201}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tdef jenkinsInstance = Jenkins.getInstanceOrNull()\n\tif (jenkinsInstance!= null) {\n\t\tthis.classLoader = jenkinsInstance.pluginManager.classLoader\n\t} else {\n\t\tthis.classLoader = this.getClass().getClassLoader()\n\t}\n\treturn this\n}", "CodeBleu_score": 40.93740735461837}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tdef jenkins = Jenkins.getInstanceOrNull()\n\tif (jenkins!= null) {\n\t\tthis.classLoader = jenkins.getPluginManager().uberClassLoader\n\t} else {\n\t\tthis.classLoader = this.getClass().getClassLoader()\n\t}\n\treturn this\n}", "CodeBleu_score": 47.257457090438486}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tdef jenkins = Jenkins.getInstanceOrNull()\n\tif (jenkins!= null) {\n\t\tthis.classLoader = jenkins.pluginManager.uberClassLoader\n\t} else {\n\t\tthis.classLoader = getClass().classLoader\n\t}\n\tthis\n}", "CodeBleu_score": 37.3984553891174}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\n}", "CodeBleu_score": 12.827570259923954}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\n}", "CodeBleu_score": 12.827570259923954}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\n}", "CodeBleu_score": 12.827570259923954}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(serverUrl);\n\t}\n\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(serverUrl);\n\t}\n\n\treturn includeMatchingAs(\n\t\t\tnew StandardListBoxModel()\n\t\t\t\t\t.includeEmptyValue()\n\t\t\t\t\t.includeAs(\n\t\t\t\t\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\t\t\t\t\tJenkins.get(),\n\t\t\t\t\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()),\n\t\t\t\t\t\t\tserverUrl),\n\t\t\tGiteaAuth.class);\n}", "CodeBleu_score": 40.967153552781255}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(credentialsId);\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\treturn includeMatchingAs(\n\t\t\tserverUrl,\n\t\t\tserverUrl.endsWith(\"/\")? \"api/v1/\" : \"/\",\n\t\t\tGiteaAuth.class,\n\t\t\tURIRequirementBuilder.fromUri(serverUrl).build(),\n\t\t\tCredentialsMatchers.always()\n\t).includeCurrentValue(credentialsId);\n}", "CodeBleu_score": 39.85243461174955}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(serverUrl);\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\treturn includeMatchingAs(serverUrl, GiteaAuth.class).includeCurrentValue(serverUrl);\n}", "CodeBleu_score": 31.608791280144978}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (\"http\".equalsIgnoreCase(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} else if (\"https\".equalsIgnoreCase(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t}\n\t\t}\n\t\treturn uri.toString().replaceFirst(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 32.86892051057801}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tif (uri.getScheme() == null) {\n\t\t\turi = new URI(\"http://\" + serverUrl);\n\t\t}\n\t\tString port = uri.getPort() == -1? \"\" : \":\" + uri.getPort();\n\t\tString path = uri.getPath();\n\t\tif (path.length() == 0 || path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\treturn uri.getScheme() + \"://\" + uri.getHost() + port + path;\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 30.799633462156308}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase());\n\t\tString scheme = uri.getScheme();\n\t\tif (scheme == null) {\n\t\t\treturn null;\n\t\t}\n\t\tint port = uri.getPort();\n\t\tif (port == -1) {\n\t\t\tif (\"http\".equals(scheme)) {\n\t\t\t\tport = 80;\n\t\t\t} else if (\"https\".equals(scheme)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\tString host = uri.getHost();\n\t\tif (host == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString path = uri.getPath();\n\t\tif (path == null || path.isEmpty()) {\n\t\t\tpath = \"/\";\n\t\t}\n\t\tString query = uri.getQuery();\n\t\tif (query!= null &&!query.isEmpty()) {\n\t\t\tpath += \"?\" + query;\n\t\t}\n\t\tString fragment = uri.getFragment();\n\t\tif (fragment!= null &&!fragment.isEmpty()) {\n\t\t\tpath += \"#\" + fragment;\n\t\t}\n\t\treturn (port == -1? scheme : scheme + \"://\" + host + \":\" + port) + path;\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 39.18299329585603}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel()\n\titems.add(\"\")\n\tfor (GiteaServer server : GiteaServer.all()) {\n\t\tString name = server.getDisplayName()\n\t\tString url = server.getServerUrl()\n\t\tif (name.isBlank()) {\n\t\t\titems.add(url, url)\n\t\t} else {\n\t\t\titems.add(name, url)\n\t\t}\n\t}\n\treturn items\n}", "CodeBleu_score": 29.84030557969276}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServer.getServers()) {\n\t\tString name = server.getDisplayName();\n\t\tif (name == null || name.isEmpty()) {\n\t\t\titems.add(server.getServerUrl());\n\t\t} else {\n\t\t\titems.add(name, server.getServerUrl());\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 41.96527629972765}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel()\n\titems.add(\"No Server\", \"\")\n\tfor (GiteaServer server : GiteaServer.getServers()) {\n\t\tString displayName = server.getDisplayName()\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getServerUrl()\n\t\t}\n\t\titems.add(displayName, server.getServerUrl())\n\t}\n\treturn items\n}", "CodeBleu_score": 35.379152662513725}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission(Jenkins.ADMINISTER);\n\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (StringUtils.isBlank(server.getUrl())) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (newServers.stream().anyMatch(s -> s.getUrl().equals(server.getUrl()))) {\n\t\t\tcontinue;\n\t\t}\n\t\tnewServers.add(server);\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 32.75261184907281}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission(GiteaServer.CONFIGURE);\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tif (servers!= null) {\n\t\tfor (GiteaServer server : servers) {\n\t\t\tString url = server.getUrl();\n\t\t\tif (StringUtils.isNotBlank(url)) {\n\t\t\t\turl = fixNull(url);\n\t\t\t\tif (!newServers.contains(url)) {\n\t\t\t\t\tnewServers.add(server);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 33.76535249160814}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission(GiteaServer.CONFIGURE);\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tString url = fixNull(server.getUrl());\n\t\tif (url.isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\turl = getServerUrl(url);\n\t\tif (url == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (newServers.stream().anyMatch(s -> s.getUrl().equals(url))) {\n\t\t\tcontinue;\n\t\t}\n\t\tnewServers.add(new GiteaServer(url));\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 34.89822592582975}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tboolean removed = false;\n\tfor (Iterator<GiteaServer> iterator = getServers().iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (serverUrl.equals(server.getUrl())) {\n\t\t\titerator.remove();\n\t\t\tremoved = true;\n\t\t}\n\t}\n\tif (removed) {\n\t\tupdateServers();\n\t}\n\treturn removed;\n}", "CodeBleu_score": 53.19320326354232}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tString normalizedServerUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> servers = getServers();\n\tboolean removed = false;\n\tfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (server.getUrl().equals(normalizedServerUrl)) {\n\t\t\titerator.remove();\n\t\t\tremoved = true;\n\t\t}\n\t}\n\tif (removed) {\n\t\tsetServers(servers);\n\t}\n\treturn removed;\n}", "CodeBleu_score": 47.09047131951475}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tboolean removed = false;\n\tfor (Iterator<GiteaServer> iterator = getServers().iterator(); iterator.hasNext();) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (serverUrl.equals(server.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t\tremoved = true;\n\t\t}\n\t}\n\tif (removed) {\n\t\tupdateServers();\n\t}\n\treturn removed;\n}", "CodeBleu_score": 52.59175626471718}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\t// Retrieve the set of elements annotated with the specified annotation\n\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\n\t// Iterate over each annotated element\n\tfor (Element element : annotatedElements) {\n\t\t// Get the annotation instance\n\t\tAnnotationMirror annotationMirror = element.getAnnotation(annotation);\n\n\t\t// Get the attributes from the annotation\n\t\tMap<? extends ExecutableElement,? extends AnnotationValue> attributes = annotationMirror.getElementValues();\n\n\t\t// Convert the element's type to a string\n\t\tString elementType = element.asType().toString();\n\n\t\t// Add a new ConfigElement with the attributes and type to the set of descriptor elements\n\t\tdescriptorElements.add(new DescriptorElement(attributes, elementType));\n\t}\n}", "CodeBleu_score": 55.32949133293014}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(element, annotation);\n\t\tString type = element.asType().toString();\n\t\tdescriptorElements.add(new DescriptorElement(type, attributes));\n\t}\n}", "CodeBleu_score": 57.46319348781969}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\troundEnv.getElementsAnnotatedWith(annotation).forEach { element ->\n\t\tdef attributes = getAttributesFromAnnotation(element, annotation)\n\t\tdef type = element.asType().toString()\n\t\tdescriptorElements.add(new DescriptorElement(attributes, type))\n\t}\n}", "CodeBleu_score": 36.269537183750955}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.replace('$', '.').equals(annotationClass.getName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.86999915008633}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.equals(annotationClassName) || qualifiedName.startsWith(annotationClassName + \".\")) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 34.84041069735711}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationName = annotationClass.getCanonicalName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (annotationName.equals(qualifiedName) || qualifiedName.startsWith(annotationName + '.')) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 33.227356238572426}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters: dict = {}\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"not in\", [\"Approved\", \"Rejected\", \"Cancelled\"]],\n                \"docstatus\": 1,\n            }\n        )\n        if approver_id:\n            filters.update({\"approver_id\": approver_id})\n        else:\n            filters.update({\"approver_id\": employee})\n    else:\n        filters.update(\n            {\n                \"status\": [\"not in\", [\"Cancelled\"]],\n                \"docstatus\": 1,\n                \"employee\": employee,\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 25.212494846831646}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters: dict = {}\n    if not for_approval:\n        filters = {\"employee\": employee, \"status\": (\"!=\", \"Cancelled\")}\n    else:\n        filters = {\"approver\": approver_id, \"status\": (\"!=\", \"Cancelled\")}\n        if approver_id:\n            workflow = get_workflow(\"Leave Application\")\n            if workflow:\n                state_filters = get_allowed_states_for_workflow(workflow, approver_id)\n                if state_filters:\n                    filters[\"status\"] = (\"in\", state_filters)\n                else:\n                    filters[\"status\"] = \"Open\"\n        else:\n            filters[\"status\"] = \"Open\"\n    return filters\n\n", "CodeBleu_score": 36.05399307931426}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n    if for_approval:\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n        filters[\"status\"] = \"Open\"\n        filters[\"workflow_state\"] = get_allowed_states_for_workflow(\n            \"Leave Application\", filters[\"status\"]\n        )\n    else:\n        filters[\"status\"] = [\"!=\", \"Canceled\"]\n\n    return filters\n\n", "CodeBleu_score": 28.189446427212417}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    # Get the current date\n    current_date = datetime.datetime.now().date()\n\n    # Get the leave details for the specified employee\n    leave_details = get_leave_details(employee)\n\n    # Initialize the leave balance map\n    leave_balance_map = {}\n\n    # Iterate through the leave details\n    for leave_type, leave_type_details in leave_details.items():\n        # Get the leave allocations for the current date\n        leave_allocations = leave_type_details.get(\"allocations\", {}).get(current_date.strftime(\"%Y-%m-%d\"), {})\n\n        # Get the allocated and balance leave details\n        allocated_leave = leave_allocations.get(\"allocated\", 0)\n        balance_leave = leave_allocations.get(\"balance\", 0)\n\n        # Add the leave type to the leave balance map\n        leave_balance_map[leave_type] = {\n            \"allocated\": allocated_leave,\n            \"balance\": balance_leave\n        }\n\n    return leave_balance_map\n", "CodeBleu_score": 42.291466611191886}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for allocation in leave_details.get(\"allocations\", []):\n        leave_type = allocation.get(\"leave_type\", {}).get(\"name\")\n        if leave_type:\n            leave_balance_map[leave_type] = {\n                \"allocated\": allocation.get(\"allocated\", 0.0),\n                \"balance\": allocation.get(\"balance\", 0.0),\n            }\n    return leave_balance_map\n\n", "CodeBleu_score": 42.031442956300744}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocation = leave_details[leave_type].get(\"allocation\")\n        leave_balance_map[leave_type] = {\n            \"allocated\": allocation.get(\"amount\"),\n            \"balance\": allocation.get(\"amount\") - allocation.get(\"used\"),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 44.44818117301327}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = select(\n        from_(Holiday).where(Holiday.holiday_list_id == holiday_list[0].id)\n    ).all()\n    holidays = [\n        {\n            \"date\": holiday.date,\n            \"description\": strip_html(holiday.description),\n            \"holiday_type\": holiday.holiday_type,\n        }\n        for holiday in holidays\n        if holiday.holiday_type!= \"Weekly off\"\n    ]\n    return sorted(holidays, key=lambda holiday: holiday[\"date\"])\n\n", "CodeBleu_score": 37.42974012426403}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = select(\n        from_(DocType).where(DocType.name.in_(holiday_list)).where(\n            DocType.docstatus == 1\n        ).where(DocType.holiday_date!= None).where(\n            DocType.is_weekly_off == 0\n        )\n    ).order_by(DocType.holiday_date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays", "CodeBleu_score": 36.71484207276416}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = select(Holidays).where(Holidays.holiday_list == holiday_list).where(Holidays.holiday_type!= \"Weekly Off\").order_by(Holidays.holiday_date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 32.09341404552969}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # get the relevant settings\n    settings = get_settings()\n    if settings.send_reminders == True and settings.reminder_frequency == \"Weekly\":\n        # get the holidays that are in advance\n        holidays_in_advance = get_holidays_in_advance()\n        # send the reminders\n        send_advance_holiday_reminders(holidays_in_advance)\n", "CodeBleu_score": 23.213462696029705}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Check if the HR settings specify to send reminders\n    hr_settings = frappe.get_single(\"HR Settings\")\n    if hr_settings.send_reminders:\n        # Get the frequency of reminders\n        frequency = hr_settings.reminder_frequency\n        if frequency == \"Weekly\":\n            # Send reminders in advance\n            send_advance_holiday_reminders()", "CodeBleu_score": 22.71656486521561}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the HR settings\n    hr_settings = frappe.get_single(\"HR Settings\")\n    # Check if reminders are enabled and the frequency is set to \"Weekly\"\n    if hr_settings.enable_holiday_reminders and hr_settings.holiday_reminder_frequency == \"Weekly\":\n        # Get the holidays that are due for reminders\n        holidays = frappe.get_all(\n            \"Holiday\",\n            filters={\n                \"holiday_date\": [\n                    \">=\",\n                    add_days(nowdate(), -1 * hr_settings.holiday_reminder_advance_days),\n                ],\n                \"holiday_date\": [\"<=\", add_days(nowdate(), 7)],\n                \"reminder_sent\": 0,\n            },\n            fields=[\"name\", \"holiday_date\", \"parent\"],\n        )\n        # Send the reminders\n        if holidays:\n            send_advance_holiday_reminders(holidays)\n\n", "CodeBleu_score": 27.450384471675086}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self.self_appraisal_score += entry.rating * entry.weightage / 100 * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 28.673414163099626}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += rating.rating * rating.weightage * 0.01 * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 23.002567031060494}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * (self_rating.weightage / 100)\n    self_appraisal_score = round(self_appraisal_score, self.precision)\n    self.self_appraisal_score = self_appraisal_score\n\n", "CodeBleu_score": 20.772244031855127}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = self.get_data_for_formula()\n        formula = sanitize_expression(appraisal_cycle_doc.formula_for_final_score)\n        self.final_score = flt(frappe.safe_eval(formula, data))\n    else:\n        self.final_score = flt((self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, precision=self.precision)\n\n", "CodeBleu_score": 27.607400607846955}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        data = self.get_data_for_final_score_formula()\n        sanitized_formula = sanitize_expression(appraisal_cycle_doc.final_score_formula, data)\n        try:\n            self.final_score = flt(frappe.safe_eval(sanitized_formula), self.precision(\"final_score\"))\n        except Exception as e:\n            frappe.throw(\n                _(\n                    \"Error in calculating final score for appraisal {0} using formula {1}: {2}\".format(\n                        self.name, appraisal_cycle_doc.final_score_formula, str(e)\n                    )\n                )\n            )\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            self.precision(\"final_score\"),\n        )\n", "CodeBleu_score": 32.6965071707588}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        self.final_score = flt(frappe.safe_eval(formula, data), self.precision(\"final_score\"))\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 35.870919753192524}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\" and self.attendance_date > getdate():\n        frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'\"))\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance cannot be marked for earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 23.17486590319125}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\" and getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance cannot be marked for future dates.\"))\n    if getdate(self.attendance_date) < getdate(self.employee.date_of_joining):\n        frappe.throw(_(\"Attendance cannot be marked for a date before the employee's date of joining.\"))\n    if self.status == \"On Leave\":\n        leave_application = frappe.db.sql(\n            \"\"\"\n            SELECT name\n            FROM `tabLeave Application`\n            WHERE employee = %s AND from_date <= %s AND to_date >= %s\n            \"\"\",\n            (self.employee, self.attendance_date, self.attendance_date),\n            as_dict=True,\n        )\n        if not leave_application:\n            frappe.throw(_(\"Attendance cannot be marked as On Leave without a valid leave application.\"))\n\n", "CodeBleu_score": 41.840391067351185}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        if self.status!= \"On Leave\" or not get_value(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"status\": (\"not in\", (\"Cancelled\", \"Rejected\"))}):\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\"))\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance cannot be marked before the employee's date of joining\"))\n\n", "CodeBleu_score": 30.020818235629754}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.status == \"Present\":\n        if self.attendance_date:\n            attendance_records = frappe.get_all(\"Attendance\", filters={\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date\n            })\n\n            if len(attendance_records) > 1:\n                existing_record = attendance_records[0]\n                existing_record_link = get_link_to_form(\"Attendance\", existing_record.name)\n                message = _(\"Attendance record for {0} on {1} already exists. {2}\").format(self.employee, format_date(self.attendance_date), existing_record_link)\n                frappe.throw(message, title=\"Duplicate Attendance Record\")\n\n", "CodeBleu_score": 36.47775058312792}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        attendance_records = frappe.get_all(\"Attendance\", filters={\"employee\": self.employee, \"attendance_date\": self.attendance_date}, fields=[\"name\"])\n        if len(attendance_records) > 1:\n            duplicate_record = attendance_records[0]\n            message = _(\"Attendance record for {employee} on {date} already exists.\").format(\n                employee=self.employee, date=format_date(self.attendance_date)\n            )\n            message += f\"<br><br><a href='#Form/Attendance/{duplicate_record.name}'>{get_link_to_form('Attendance', duplicate_record.name)}</a>\"\n            frappe.throw(message, title=_(\"Duplicate Attendance Record\"))\n\n", "CodeBleu_score": 37.45541010542466}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.status!= \"Present\":\n        return\n    duplicate_attendance_record = frappe.db.sql(\n        \"\"\"\n        SELECT name, employee, attendance_date, status, shift_type, shift_start_time, shift_end_time\n        FROM `tabAttendance`\n        WHERE employee = %s AND attendance_date = %s AND status = %s AND name!= %s\n        \"\"\",\n        (self.employee, self.attendance_date, self.status, self.name),\n        as_dict=True,\n    )\n    if duplicate_attendance_record:\n        duplicate_attendance_record = duplicate_attendance_record[0]\n        duplicate_attendance_record_link = get_link_to_form(\n            \"Attendance\", duplicate_attendance_record.name\n        )\n        message = frappe.bold(_(\"Duplicate Attendance Record Found\"))\n        message += f\"\"\"\n        <br><br>\n        Employee: {self.employee}\n        <br>\n        Date: {format_date(self.attendance_date)}\n        <br>\n        Status: {self.status}\n        <br>\n        Shift Type: {self.shift_type}\n        <br>\n        Shift Start Time: {self.shift_start_time}\n        <br>\n        Shift End Time: {self.shift_end_time}\n        <br>\n        Existing Attendance Record: {duplicate_attendance_record_link}\n        \"\"\"\n        frappe.throw(message)\n\n", "CodeBleu_score": 31.90281231783927}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n\n    # Get the message details\n    message_details = self.get_message_details()\n\n    # Get the email addresses of users in the specified group\n    group_emails = self.get_user_emails_from_group()\n\n    # Send the email with the summary using a template\n    subject = \"Daily Summary\"\n    template_path = \"templates/emails/daily_summary.html\"\n    message = frappe.render_template(template_path, {\"message_details\": message_details})\n    frappe.sendmail(\n        recipients=group_emails,\n        subject=subject,\n        message=message,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    # Update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 37.217523679666385}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    if not message_details:\n        return\n    emails = self.get_user_emails_from_group()\n    if not emails:\n        return\n    email_template = frappe.get_doc(\"Email Template\", \"Daily Summary\")\n    email_template.send(\n        recipients=emails,\n        message_details=message_details,\n        reply_to=frappe.session.user,\n        sender=frappe.session.user,\n        subject=\"Daily Summary\",\n    )\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 34.44386927400267}, {"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = self.get_message_details()\n    # Get email addresses of users in the specified group\n    email_addresses = self.get_user_emails_from_group()\n    # Send email with the summary using a template\n    sendmail(recipients=email_addresses, subject=\"Daily Summary\", message=message_details, template=\"Daily Summary Template\")\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 22.90270841462765}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        duplicate_interview = frappe.db.exists(\n            \"Job Applicant Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n        )\n        if duplicate_interview:\n            job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n            job_applicant_name = frappe.get_value(\n                \"Job Applicant\", self.job_applicant, \"applicant_name\"\n            )\n            interview_round_name = frappe.get_value(\n                \"Job Applicant Interview Round\", self.interview_round, \"name\"\n            )\n            interview_link = get_link_to_form(\n                \"Job Applicant Interview\", duplicate_interview\n            )\n            message = _(\n                \"Job Applicant {0} already exists for {1} in interview round {2}. <br> <br> <a href='{3}'>Click here</a> to view the existing interview record.\").format(\n                job_applicant_name,\n                job_applicant_link,\n                interview_round_name,\n                interview_link,\n            )\n            frappe.throw(message)\n\n", "CodeBleu_score": 40.9986458625921}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.docstatus == 1:\n        interview_records = frappe.get_all(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"name\": [\"!=\", self.name],\n            },\n        )\n        if interview_records:\n            job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n            interview_link = get_link_to_form(\"Interview\", interview_records[0].name)\n            frappe.throw(\n                _(\n                    f\"Job Applicant {job_applicant_link} is not allowed to appear twice for the same interview round. \"\n                    f\"Please check the existing interview record {interview_link}.\"\n                )\n            )\n\n", "CodeBleu_score": 46.46789962945442}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        duplicate_interview = frappe.db.get_value(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n        )\n        if duplicate_interview:\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            message = frappe._(\"Job Applicant {0} is already interviewed in this round.\").format(\n                job_applicant.name\n            )\n            message += frappe._(\" View existing interview record: {0}\").format(\n                get_link_to_form(\"Interview\", duplicate_interview)\n            )\n            frappe.throw(message)\n\n", "CodeBleu_score": 45.42373622628223}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total_rating = sum(assessment.rating for assessment in self.skill_assessments if assessment.rating)\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 33.956410151653174}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.94149257350562}, {"code": "def calculate_average_rating(self)\n\t\n    if len(self.skill_assessments) > 0:\n        total_rating = 0\n        num_assessments = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total_rating += assessment.rating\n                num_assessments += 1\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 27.999793701756108}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc('Interview')\n    interview.interview_round = doc.get('interview_round')\n    interview.designation = doc.get('designation')\n    if doc.get('interviewers'):\n        interview.append('interview_details', {\n            'interviewer': doc.get('interviewers')\n        })\n    return interview\n\n", "CodeBleu_score": 33.09377503454967}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    return interview\n\n", "CodeBleu_score": 44.65962641750825}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    return interview\n", "CodeBleu_score": 44.65962641750825}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offer_list = frappe.get_list(\n        \"Job Offer\",\n        filters={\n            \"creation\": [\"between\", [from_date, to_date]],\n            \"status\": \"Submitted\",\n            \"designation\": self.designation,\n            \"company\": self.company,\n        },\n        fields=[\"name\"],\n    )\n    return job_offer_list\n\n", "CodeBleu_score": 56.227268803933185}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    job_offers_list = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"designation\": self.designation, \"company\": self.company, \"creation\": [\">=\", from_date], \"creation\": [\"<=\", to_date]})\n    for job_offer in job_offers_list:\n        job_offers.append(job_offer.name)\n    return job_offers\n\n", "CodeBleu_score": 50.03641348950738}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    job_offers = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"creation\": [\"between\", [from_date, to_date]],\n        },\n        fields=[\"name\"],\n    )\n\n    return [job_offer.name for job_offer in job_offers]\n\n", "CodeBleu_score": 61.67039568528905}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company, \"status\": \"Accepted\"})\n    elif department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department, \"status\": \"Accepted\"})\n    else:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n    if total_offers > 0:\n        acceptance_rate = accepted_offers / total_offers * 100\n    else:\n        acceptance_rate = 0\n    return acceptance_rate\n\n", "CodeBleu_score": 33.76756293135006}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1\"\"\")\n    if company:\n        total_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %(company)s\"\"\", {\"company\": company})\n    if department:\n        total_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND department = %(department)s\"\"\", {\"department\": department})\n    if company and department:\n        total_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %(company)s AND department = %(department)s\"\"\", {\"company\": company, \"department\": department})\n    accepted_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted'\"\"\")\n    if company:\n        accepted_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted' AND company = %(company)s\"\"\", {\"company\": company})\n    if department:\n        accepted_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted' AND department = %(department)s\"\"\", {\"department\": department})\n    if company and department:\n        accepted_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted' AND company = %(company)s AND department = %(department)s\"\"\", {\"company\": company, \"department\": department})\n    if total_offers[0][0] == 0:\n        return 0\n    return (accepted_offers[0][0] / total_offers[0][0]) * 100\n\n", "CodeBleu_score": 23.292386328763616}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    if company is not None:\n        total_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = '{company}'\"\"\"\n        )\n    elif department is not None:\n        total_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND department = '{department}'\"\"\"\n        )\n    else:\n        total_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1\"\"\"\n        )\n\n    if company is not None:\n        accepted_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted' AND company = '{company}'\"\"\"\n        )\n    elif department is not None:\n        accepted_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted' AND department = '{department}'\"\"\"\n        )\n    else:\n        accepted_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted'\"\"\"\n        )\n\n    if total_offers[0][0] == 0:\n        return 0\n    else:\n        return accepted_offers[0][0] / total_offers[0][0] * 100\n\n", "CodeBleu_score": 19.817357822504892}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.88472362864232}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\treturn result.isSuccess()? new ResponseEntity<>(result, HttpStatus.OK) : new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 66.35266141278069}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.88472362864232}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\treturn findById(companyStaffForUpdateDto.getId())\n\t\t.flatMap(staff -> {\n\t\t\tif (companyStaffForUpdateDto.getPassword().equals(staff.getPassword())) {\n\t\t\t\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\t\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\t\tstaff.save();\n\t\t\t\treturn ok(Json.toJson(staff));\n\t\t\t} else {\n\t\t\t\treturn badRequest(Json.toJson(\"Passwords do not match\"));\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 28.318778662644206}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElseThrow(NotFoundException::new);\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn Result.failure(\"Password does not match\");\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn Result.success(\"Staff updated\");\n}", "CodeBleu_score": 40.693315116105936}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\treturn findById(companyStaffForUpdateDto.getId())\n\t\t.flatMap(staff -> {\n\t\t\tif (!checkIfPasswordsMatch(companyStaffForUpdateDto.getPassword(), staff.getPassword())) {\n\t\t\t\treturn notFound(String.format(\"Staff with ID %s not found\", companyStaffForUpdateDto.getId()));\n\t\t\t}\n\t\t\tif (!checkBusinessRules(companyStaffForUpdateDto)) {\n\t\t\t\treturn run(Result.failure(\"Business rules check failed\"));\n\t\t\t}\n\t\t\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\tstaff.save();\n\t\t\treturn run(Result.success(\"Staff updated\"));\n\t\t});\n}", "CodeBleu_score": 33.992350457733735}]}
