{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.args.getlist('attachment_ids')\n\n    # Verify read access rights and rules for the attachments\n    for attachment_id in attachment_ids:\n        attachments.check_access_rights(attachment_id,'read')\n        attachments.check_access_rule(attachment_id,'read')\n\n    # Build a zip file from the attachments' content\n    zip_file = attachments._build_zip_from_attachments(attachment_ids)\n\n    # Prepare HTTP headers for the zip file\n    zip_headers = attachments._get_zip_headers(zip_file)\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file, headers=zip_headers)\n\n", "CodeBleu_score": 29.17512622761184}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from request arguments\n    attachment_ids = args.get('ids', [])\n    # Check access rights and rules for attachments\n    attachments.check_access_rights(attachment_ids)\n    attachments.check_access_rule(attachment_ids)\n    # Build zip file from attachments' content\n    zip_file = attachments._build_zip_from_attachments(attachment_ids)\n    # Prepare HTTP headers for zip file\n    zip_headers = _get_zip_headers(zip_file)\n    # Return zip file as HTTP response\n    return request.make_response(zip_file, headers=zip_headers)\n", "CodeBleu_score": 16.711486944574876}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Get attachment IDs from HTTP request arguments\n    attachment_ids = self.request.params.getall('id')\n    # Check access rights and rules for the attachments\n    for attachment_id in attachment_ids:\n        self.check_access_rights(attachment_id)\n        self.check_access_rule(attachment_id)\n    # Build a zip file from the attachments' content\n    zip_file = self._build_zip_from_attachments(attachment_ids)\n    # Prepare HTTP headers for the zip file\n    zip_headers = self._get_zip_headers(zip_file)\n    # Return the zip file as an HTTP response\n    response = request.make_response(zip_file, headers=zip_headers)\n    return response\n\n", "CodeBleu_score": 30.099819958933672}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(Account, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_manager'):\n        values.update({\n            'invoice_count': counters.get('account.move', {}).get('invoice_count'),\n            'bill_count': counters.get('account.move', {}).get('bill_count'),\n        })\n    return values\n\n", "CodeBleu_score": 17.212521660602093}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountAccount, self)._prepare_home_portal_values(counters)\n    values['invoices_count'] = counters['account.move'].get('invoice', 0)\n    values['bills_count'] = counters['account.move'].get('bill', 0)\n    if self.check_access_rights('read'):\n        values['invoices_count'] = self.search_count([('type', '=', 'in_invoice'), ('state', '!=', 'draft')])\n        values['bills_count'] = self.search_count([('type', '=', 'out_invoice'), ('state', '!=', 'draft')])\n    return values", "CodeBleu_score": 28.79900368622796}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountPortal, self)._prepare_home_portal_values(counters)\n    if self.check_access_rights('account.move','read'):\n        values['invoice_count'] = counters['account_invoice']\n        values['bill_count'] = counters['account_bill']\n    return values", "CodeBleu_score": 13.315522819822984}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n\n    # Get the list of invoices based on the parameters.\n    invoices = self.portal_catalog(portal_type='Invoice', sort_on=sortby, sort_order=filterby, sort_limit=10, review_state='published', invoice_date={'query': [date_begin, date_end], 'range':'min:max'}, invoice_number={'query': kw.get('invoice_number', ''), 'operator': 'and'}, invoice_status={'query': kw.get('invoice_status', ''), 'operator': 'and'}, invoice_type={'query': kw.get('invoice_type', ''), 'operator': 'and'}, invoice_owner={'query': kw.get('invoice_owner', ''), 'operator': 'and'}, invoice_supplier={'query': kw.get('invoice_supplier', ''), 'operator': 'and'}, invoice_customer={'query': kw.get('invoice_customer', ''), 'operator': 'and'}, invoice_project={'query': kw.get('invoice_project', ''), 'operator': 'and'}, invoice_payment_method={'query': kw.get('invoice_payment_method', ''), 'operator': 'and'}, invoice_payment_status={'query': kw.get('invoice_payment_status', ''), 'operator': 'and'}, invoice_payment_date={'query': [kw.get('invoice_payment_date_begin', ''), kw.get('invoice_payment_date_end', '')], 'range':'min:max'}, invoice_total_amount={'query': [kw.get('invoice_total_amount_begin', ''), kw.get('invoice_total_amount_end', '')], 'range':'min:max'}, invoice_paid_amount={'query': [kw.get('invoice_paid_amount_begin', ''), kw.get('invoice_paid_amount_end', '')], 'range':'min:max'}, invoice_balance={'query': [kw.get('invoice_balance_begin', ''), kw.get('invoice_balance_end', '')], 'range':'min:max'}, invoice_currency={'query': kw.get('invoice_currency', ''), 'operator': 'and'}, invoice_exchange_rate={'query': [kw.get('invoice_exchange_rate_begin', ''), kw.get('invoice_exchange_rate_end', '')], 'range':'min:max'}, invoice", "CodeBleu_score": 26.30760042513237}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    request = self.REQUEST\n    # Get the invoices\n    invoices = self.get_invoices(page, date_begin, date_end, sortby, filterby)\n    # Prepare the values needed for displaying the invoices\n    values = self._prepare_my_invoices_values(invoices)\n    # Update the session history with the latest invoice IDs\n    self._update_session_history(invoices)\n    # Render the invoices page with the prepared values\n    return request.render('my_invoices.pt', values)\n", "CodeBleu_score": 29.104317779892153}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    request = self.request\n    # Get the relevant invoices based on the parameters\n    invoices = self.portal_catalog(portal_type='Invoice', review_state='validated', path=self.context.getPhysicalPath(), sort_on=sortby, sort_order=filterby)\n    # Get the latest invoice IDs\n    invoice_ids = [invoice.UID for invoice in invoices]\n    # Update the session history with the latest invoice IDs\n    request.SESSION.set('invoice_ids', invoice_ids)\n    # Prepare the values needed for displaying the invoices\n    values = self._prepare_my_invoices_values(invoices, page, date_begin, date_end)\n    # Render the invoices page with the prepared values\n    return request.render('my_invoices', values)\n", "CodeBleu_score": 35.27664414494906}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self.env['account.invoice'].sudo().browse(invoice_id)\n    if not invoice_sudo.check_access_rights('read'):\n        raise AccessError(_('You do not have access rights to this invoice.'))\n    if not invoice_sudo.check_access_rule('read'):\n        raise AccessError(_('You cannot access this invoice.'))\n    if not invoice_sudo.is_invoice_accessible():\n        raise AccessError(_('You cannot access this invoice.'))\n    if report_type:\n        if report_type == 'pdf':\n            return self._get_invoice_pdf(invoice_sudo, download, access_token)\n        elif report_type == 'html':\n            return self._get_invoice_html(invoice_sudo, download, access_token)\n        elif report_type == 'text':\n            return self._get_invoice_text(invoice_sudo, download, access_token)\n    return self._get_invoice_page_view(invoice_sudo, access_token)\n\n", "CodeBleu_score": 25.994808501133416}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    self.check_access('read')\n    self.check_access('view')\n    invoice = self.env['account.invoice'].sudo().browse(invoice_id)\n    if not invoice:\n        return request.not_found()\n    if not invoice.is_invoice_user(user=self.env.user):\n        return request.redirect('/my/invoice/%s' % invoice.id)\n    if access_token:\n        if not invoice.access_token == access_token:\n            return request.not_found()\n    if download:\n        if not invoice.access_token:\n            return request.not_found()\n        if not invoice.is_invoice_user(user=self.env.user):\n            return request.redirect('/my/invoice/%s' % invoice.id)\n        if invoice.state == 'cancel':\n            return request.not_found()\n        if report_type:\n            if report_type == 'pdf':\n                return self._invoice_download_pdf(invoice, access_token)\n            if report_type == 'html':\n                return self._invoice_download_html(invoice, access_token)\n            if report_type == 'text':\n                return self._invoice_download_text(invoice, access_token)\n        else:\n            return self._invoice_download_pdf(invoice, access_token)\n    else:\n        if report_type:\n            if report_type == 'pdf':\n                return self._invoice_get_pdf(invoice)\n            if report_type == 'html':\n                return self._invoice_get_html(invoice)\n            if report_type == 'text':\n                return self._invoice_get_text(invoice)\n        else:\n            return self._invoice_get_page_view(invoice)\n", "CodeBleu_score": 32.87132082805621}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    request = self.env.ref('account.invoice_form_view_end_customer')\n    self.ensure_one()\n    invoice_sudo = self.sudo()\n    invoice_sudo._check_access_rights('read')\n    invoice_sudo._check_access_rule('read')\n    if not invoice_sudo.access_token or not access_token:\n        return request.render('account.portal_my_invoice_detail_error', {'error': _('You are not allowed to access this invoice.')})\n    if access_token!= invoice_sudo.access_token:\n        return request.render('account.portal_my_invoice_detail_error', {'error': _('Invalid access token.')})\n    if report_type in ('pdf', 'text'):\n        if download:\n            return self._download_invoice_report(report_type)\n        else:\n            return self._show_report(report_type)\n    elif report_type == 'html':\n        return self._show_report(report_type)\n    else:\n        return request.render('account.portal_my_invoice_detail_error', {'error': _('Invalid report type.')})\n\n", "CodeBleu_score": 27.951553342240537}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    products = self.env['product.template'].search([('company_id', '=', company.id)])\n    for product in products:\n        if company.account_sale_tax_id:\n            product.taxes_id = company.account_sale_tax_id\n        if company.account_purchase_tax_id:\n            product.purchase_taxes_id = company.account_purchase_tax_id\n    return True\n", "CodeBleu_score": 14.90826823427269}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    prod_templates = self.env['product.template'].search(domain)\n    for prod_template in prod_templates:\n        if prod_template.company_id:\n            if prod_template.company_id.account_sale_tax_id:\n                prod_template.taxes_id = [(4, prod_template.company_id.account_sale_tax_id.id)]\n            if prod_template.company_id.account_purchase_tax_id:\n                prod_template.purchase_taxes_id = [(4, prod_template.company_id.account_purchase_tax_id.id)]\n\n", "CodeBleu_score": 35.576592300010226}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    for template in self.search([('company_id', '=', company.id)]):\n        # Update the sale taxes for the products based on the company's account_sale_tax_id\n        if company.account_sale_tax_id:\n            template.product_tmpl_id.taxes_id = [(4, company.account_sale_tax_id.id)]\n        # Update the purchase taxes for the products based on the company's account_purchase_tax_id\n        if company.account_purchase_tax_id:\n            template.product_tmpl_id.purchase_taxes_id = [(4, company.account_purchase_tax_id.id)]\n\n", "CodeBleu_score": 19.635476366881157}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Search for the demo account using the company's ID and the xml_id in the 'ir.model.data' model\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if demo_account:\n        return demo_account\n    # Search for an account matching the account_type within the company's domain\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if demo_account:\n        return demo_account\n    # If no account is found, return the first account within the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 47.46058880059798}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account_id = self.env['ir.model.data'].sudo().get_object_reference(company.id, xml_id)[1]\n    if demo_account_id:\n        return self.env['account.account'].sudo().browse(demo_account_id)\n    demo_account = self.env['account.account'].sudo().search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id), ('internal_type', '=', 'view')])\n    if demo_account:\n        return demo_account[0]\n    return self.env['account.account'].sudo().search([('company_id', '=', company.id), ('internal_type', '=', 'view')], limit=1)\n\n", "CodeBleu_score": 50.14454116757572}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['ir.model.data'].xmlid_to_res_id('account.account_demo', raise_if_not_found=False)\n    if account_id:\n        account_id = self.env['account.account'].browse(account_id)\n        if account_id.company_id.id == company.id:\n            return account_id\n    else:\n        domain = ['|', ('company_id', '=', company.id), ('company_id', '=', False)]\n        if account_type:\n            domain.append(('user_type_id', '=', account_type.id))\n        accounts = self.search(domain)\n        if accounts:\n            return accounts[0]\n    return self.browse()\n\n", "CodeBleu_score": 45.52251766252172}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts_with_current_year_earnings_type = self.env['account.account'].search([('company_id', '!=', False), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    accounts_with_current_year_earnings_type_grouped_by_company = accounts_with_current_year_earnings_type.read_group([('company_id', '!=', False)], ['company_id'], ['id'])\n    if len(accounts_with_current_year_earnings_type_grouped_by_company) > 1:\n        raise ValidationError(_(\"There can be only one account with the 'Current Year Earnings' type for each company.\"))\n\n", "CodeBleu_score": 19.025649045890017}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    # Retrieve accounts of type \"Current Year Earnings\" grouped by company\n    accounts_by_company = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)], groupby='company_id')\n    # Raise a ValidationError if more than one account of this type exists for any company\n    if len(accounts_by_company) > 1:\n        raise ValidationError('There can be only one account with the \"Current Year Earnings\" type for each company.')\n\n", "CodeBleu_score": 20.96882057719596}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    # Get all accounts with the \"Current Year Earnings\" type grouped by company\n    accounts_grouped_by_company = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)], groupby='company_id')\n    # Raise a ValidationError if more than one account with the \"Current Year Earnings\" type exists for any company\n    if len(accounts_grouped_by_company) > 1:\n        raise ValidationError(\"There is more than one account with the 'Current Year Earnings' type for each company. Please check the data.\")\n\n", "CodeBleu_score": 23.682685607691397}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('active_test'):\n        return self._order_accounts_by_frequency_for_partner(self._context['active_test'])\n    domain = domain or []\n    if name:\n        name_domain = ['|', ('code', operator, name), ('name', operator, name)]\n        domain += name_domain\n    if domain:\n        domain = expression.AND([[('active', '=', True)]] + domain)\n    return self._search(domain, limit=limit, order=order)\n", "CodeBleu_score": 40.232317746656}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('active_test'):\n        return self._order_accounts_by_frequency_for_partner(self._context['active_test'])\n    return super(Account, self)._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 18.95800882857524}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('search_default_account_receivable'):\n        return self._order_accounts_by_frequency_for_partner(domain, operator, limit, order)\n    else:\n        return super(AccountAccount, self)._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 20.30187664048309}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    # Exclude the name field and any fields specified in the excluded parameter\n    excluded = excluded + ('name',)\n    # Copy translations from the current record to the new one\n    new.copy_translations(self, excluded=excluded)\n    # If the new record's name follows a specific pattern, update the translations for the name field in the cache to reflect the new name format\n    if new.name:\n        name_field = self.fields_map['name']\n        name_field._get_stored_translations(new)\n\n", "CodeBleu_score": 27.719432695172074}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self.fields:\n        if field.name in excluded or field.name == 'name':\n            continue\n        if field.name == 'name':\n            if new.name:\n                new.name = self.name\n            continue\n        if field.is_translation:\n            for lang in field.languages:\n                setattr(new, lang, getattr(self, lang))\n    if new.name:\n        new.name = self.name\n\n", "CodeBleu_score": 26.37378274844975}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self.fields:\n        if field.name in excluded:\n            continue\n        if field.name == 'name':\n            continue\n        if field.name == 'id':\n            continue\n        if field.name == 'active':\n            continue\n        if field.name == 'create_date':\n            continue\n        if field.name == 'write_date':\n            continue\n        if field.name == 'create_uid':\n            continue\n        if field.name == 'write_uid':\n            continue\n        if field.name == 'company_id':\n            continue\n        if field.name == 'company_ids':\n            continue\n        if field.name == 'company_name':\n            continue\n        if field.name == 'company_code':\n            continue\n        if field.name == 'company_parent_id':\n            continue\n        if field.name == 'company_parent_name':\n            continue\n        if field.name == 'company_parent_code':\n            continue\n        if field.name == 'company_parent_parent_id':\n            continue\n        if field.name == 'company_parent_parent_name':\n            continue\n        if field.name == 'company_parent_parent_code':\n            continue\n        if field.name == 'company_parent_parent_parent_id':\n            continue\n        if field.name == 'company_parent_parent_parent_name':\n            continue\n        if field.name == 'company_parent_parent_parent_code':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_id':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_name':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_code':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_parent_id':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_parent_name':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_parent_code':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_parent_parent_id':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_parent_parent_name':\n            continue\n        if field.name == 'company_parent_parent_parent_parent_parent_parent_code", "CodeBleu_score": 14.626904744944664}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].with_context(active_test=False).sudo()\n    query.add_where([('reconcile_id', '=', False), ('account_id.user_type_id.type', '=','receivable'), ('move_id.state', '=', 'posted'), ('move_id.sale_type_id', 'in', sale_types)])\n    query.add_where([('partner_id', '=', self.id)])\n    query.add_where([('analytic_account_id', 'in', self._query_analytic_accounts())])\n    move_ids = query.select('move_id').distinct().ids\n    return {\n        'name': _('Invoices'),\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'view_id': False,\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'default_partner_id': self.id, 'default_type': 'in_invoice', 'default_invoice_type': 'out_invoice'},\n    }\n", "CodeBleu_score": 31.377475541661255}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    get_sale_types = self.env['sale.order'].search([('id', '=', self.id)])\n    query = self.env['account.move.line'].search([])\n    query.add_where([('type', '=', 'out_invoice'), ('partner_id', '=', get_sale_types.partner_id.id)])\n    if get_sale_types.analytic_account_id:\n        query.add_where([('analytic_account_id', '=', get_sale_types.analytic_account_id.id)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n    if get_sale_types.analytic_tag_ids:\n        query.add_where([('analytic_tag_ids', 'in', get_sale_types.analytic_tag_ids.ids)])\n   ", "CodeBleu_score": 19.741468335467705}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line'].with_context(active_test=False).with_context(default_type='in_invoice')\n    query = query.with_context(default_partner_id=self.partner_id.id)\n    query = query.with_context(default_analytic_account_id=self.analytic_account_id.id)\n    query = query.with_context(default_analytic_account_ids=self.analytic_account_id.ids)\n    query = query.with_context(default_invoice_state='open')\n    query = query.with_context(default_invoice_type='out_invoice')\n    query = query.with_context(default_invoice_date_type='invoice_date')\n    query = query.with_context(default_invoice_date_from=self.invoice_date_from)\n    query = query.with_context(default_invoice_date_to=self.invoice_date_to)\n    query = query.with_context(default_invoice_date_from_date=self.invoice_date_from_date)\n    query = query.with_context(default_invoice_date_to_date=self.invoice_date_to_date)\n    query = query.with_context(default_invoice_date_from_date_to=self.invoice_date_from_date_to)\n    query = query.with_context(default_invoice_date_to_date_from=self.invoice_date_to_date_from)\n    query = query.with_context(default_invoice_date_from_date_to_date=self.invoice_date_from_date_to_date)\n    query = query.with_context(default_invoice_date_to_date_from_date=self.invoice_date_to_date_from_date)\n    query = query.with_context(default_invoice_date_from_date_to_date_from=self.invoice_date_from_date_to_date_from)\n    query = query.with_context(default_invoice_date_to_date_from_date_to=self.invoice_date_to_date_from_date_to)\n    query", "CodeBleu_score": 23.447141569519765}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    self.env['account.move'].search([('purchase_type', '=', self.purchase_type.id), ('partner_id', '=', self.partner_id.id)]).ids\n    return {\n        'type': 'ir.actions.act_window',\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'default_move_type': 'in_invoice'},\n    }", "CodeBleu_score": 21.466628284199533}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_types = self.get_purchase_types()\n    move_ids = self.env['account.move'].search([('purchase_type', 'in', purchase_types), ('purchase_id', '=', self.id)]).ids\n    action = self.env.ref('purchase_order_extension.action_view_vendor_bill').read()[0]\n    action['context'] = {'default_purchase_id': self.id, 'default_move_type': 'in_invoice', 'default_move_ids': [(6, 0, move_ids)]}\n    return action\n\n", "CodeBleu_score": 23.835273599888254}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    self.env.context = {'active_model': 'account.move', 'active_ids': [self.id], 'active_id': self.id}\n    return {\n        'name': _('Vendor Bills'),\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('type', '=', 'in_invoice'), ('purchase_type_id', 'in', self.get_purchase_types())],\n        'context': {'default_move_type': 'in_invoice'},\n    }\n\n", "CodeBleu_score": 22.28000066951326}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if self._check_attachments:\n        values.pop('attachment_ids', None)\n    return super(AttachmentMixin, self).write(values)\n\n", "CodeBleu_score": 17.44436043390904}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments():\n        return super(Attachment, self).write(values)\n\n", "CodeBleu_score": 31.5838270865161}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments(values):\n        return super(AttachmentMixin, self).write(values)\n\n", "CodeBleu_score": 33.1545771209022}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    # Check if bank account creation should be skipped\n    if self.env['ir.config_parameter'].sudo().get_param('account_bank_statement_import.skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    # Search for existing bank account with the same account number and partner ID\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.partner_id.id), ('acc_number', '=', self.acc_number)])\n    if bank_account:\n        return bank_account\n    # Create new bank account if none is found\n    bank_account = self.env['res.partner.bank'].create({\n        'partner_id': self.partner_id.id,\n        'acc_number': self.acc_number,\n        'bank_id': self.bank_id.id,\n    })\n    return bank_account\n\n", "CodeBleu_score": 49.130332620582244}, {"code": "def _find_or_create_bank_account(self)\n\t\n    # Ensure the context is a single record\n    self.ensure_one()\n    # Check the configuration parameter to determine if bank account creation should be skipped\n    skip_bank_account_creation = self.env['ir.config_parameter'].sudo().get_param('bank_account_creation.skip_bank_account_creation')\n    # If the configuration parameter is True, return an empty bank account record\n    if str2bool(skip_bank_account_creation):\n        return self.env['res.partner.bank']\n    # Search for an existing bank account with the same account number and partner ID\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('acc_number', '=', self.bank_account_number)], limit=1)\n    # If the bank account is not found, create a new one\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'partner_id': self.id,\n            'acc_number': self.bank_account_number,\n            'bank_id': self.bank_id.id,\n            'bank_name': self.bank_id.name,\n            'bank_bic': self.bank_id.bic,\n        })\n    # Return the bank account filtered by the company ID\n    return bank_account.filtered(lambda record: record.company_id == self.company_id)\n", "CodeBleu_score": 57.43388196437471}, {"code": "def _find_or_create_bank_account(self)\n\t\n    # Check if bank account creation is allowed.\n    if self.env.ref('account.data_account_config_settings_bank_account_creation').create_bank_account:\n        return self.env['account.bank.account']\n    # Search for an existing bank account with the same account number and partner ID.\n    bank_account = self.env['account.bank.account'].search([('partner_id', '=', self.id), ('acc_number', '=', self.acc_number)], limit=1)\n    # If no bank account is found, create a new one.\n    if not bank_account:\n        bank_account = self.env['account.bank.account'].create({'partner_id': self.id, 'acc_number': self.acc_number})\n    # Return the bank account filtered by the company ID.\n    return bank_account.filtered(lambda account: account.company_id == self.company_id)\n\n", "CodeBleu_score": 43.908803806417204}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # The following code is a simplified version of the function _prepare_counterpart_amounts_using_st_line_rate in the account_move_line model.\n    # The function _prepare_counterpart_amounts_using_st_line_rate is responsible for calculating the transaction amount, journal amount, and company amount in different currencies. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate only calculates the transaction amount and journal amount in different currencies.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used in the simplified version of the function _prepare_counterpart_amounts_using_st_line_rate in the account_move_line model.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used to calculate the transaction amount and journal amount in different currencies.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used to calculate the transaction amount and journal amount in different currencies.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used to calculate the transaction amount and journal amount in different currencies.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used to calculate the transaction amount and journal amount in different currencies.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used to calculate the transaction amount and journal amount in different currencies.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used to calculate the transaction amount and journal amount in different currencies.\n    # The simplified version of the function _prepare_counterpart_amounts_using_st_line_rate is used to calculate the transaction amount and journal amount in different currencies.\n    # The simplified version", "CodeBleu_score": 1.588800071169947}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    currency_obj = self.env['res.currency']\n    if currency.type == 'base':\n        amount_currency = balance\n        balance = 0.0\n    elif currency.type == 'exchange':\n        amount_currency = - balance\n        balance = 0.0\n    else:\n        amount_currency = 0.0\n    if currency.is_zero(balance):\n        balance = 0.0\n        amount_currency = 0.0\n    if currency.is_zero(amount_currency):\n        amount_currency = 0.0\n    if currency.is_zero(balance):\n        balance = 0.0\n    if currency.is_zero(amount_currency):\n        amount_currency = 0.0\n    res = {\n        'amount_currency': amount_currency,\n        'balance': balance,\n        'amount_currency_company_signed': amount_currency,\n        'amount_currency_signed': amount_currency,\n        'amount_company_signed': amount_currency,\n        'amount_signed': amount_currency,\n        'amount_company_currency': amount_currency,\n        'amount_currency_company_currency': amount_currency,\n        'amount_company_currency_signed': amount_currency,\n        'amount_company_signed': amount_currency,\n        'amount_signed': amount_currency,\n        'amount_currency_company_currency_signed': amount_currency,\n        'amount_company_currency_signed': amount_currency,\n        'amount_company_signed': amount_currency,\n        'amount_signed': amount_currency,\n    }\n    return res\n", "CodeBleu_score": 26.32459404500319}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # get relevant accounting amounts and currencies\n    amounts, currencies = self._get_accounting_amounts_and_currencies(currency)\n    # compute transaction amount\n    transaction_amount = amounts.get('transaction', 0.0)\n    # compute journal amount\n    journal_amount = amounts.get('journal', 0.0)\n    # compute company amount\n    company_amount = amounts.get('company', 0.0)\n    # adjust transaction amount and balance\n    if currency.is_zero(balance):\n        transaction_amount = 0.0\n        balance = 0.0\n    elif currency.is_zero(amount_currency):\n        transaction_amount = 0.0\n        balance = currency.round(balance)\n    elif currency.is_zero(amount_currency) and not currency.is_zero(balance):\n        transaction_amount = currency.round(balance)\n        balance = 0.0\n    else:\n        transaction_amount = currency.round(balance)\n    # prepare the result\n    result = {\n        'transaction_amount': transaction_amount,\n        'balance': balance,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n    return result\n", "CodeBleu_score": 19.96418495802343}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    if self.journal_type == 'bank' or self.journal_type == 'cash':\n        self.outbound_payment_method_line_ids.clear()\n        default_outbound_payment_methods = self.company_id.outbound_payment_method_ids.filtered(lambda x: x.journal_type == self.journal_type)\n        for default_outbound_payment_method in default_outbound_payment_methods:\n            self.outbound_payment_method_line_ids += self.outbound_payment_method_line_ids.new({\n                'name': default_outbound_payment_method.name,\n                'payment_method_id': default_outbound_payment_method.id,\n            })\n\n", "CodeBleu_score": 31.948426907674538}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    journal_ids = self.env['account.journal'].search([('type', 'in', ['bank', 'cash'])])\n    for journal in journal_ids:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ['bank', 'cash']:\n            default_outbound_payment_methods = journal._default_outbound_payment_methods()\n            for default_outbound_payment_method in default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.create(default_outbound_payment_method)\n\n", "CodeBleu_score": 29.874530458278564}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids.clear()\n    if self.journal_type == 'bank' or self.journal_type == 'cash':\n        default_outbound_payment_methods = self.env['account.outbound.payment.method'].search([('journal_type', '=', self.journal_type)])\n        for default_outbound_payment_method in default_outbound_payment_methods:\n            self.outbound_payment_method_line_ids.create({\n                'name': default_outbound_payment_method.name,\n                'account_id': default_outbound_payment_method.account_id.id,\n                'amount': default_outbound_payment_method.amount,\n                'currency_id': default_outbound_payment_method.currency_id.id,\n                'journal_id': self.id,\n               'sequence': default_outbound_payment_method.sequence,\n            })\n    return self.outbound_payment_method_line_ids\n", "CodeBleu_score": 25.92248223713854}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    if not self.invoice_date:\n        self.date = fields.Date.today()\n    else:\n        if not self.is_sale_document:\n            self.date = self.invoice_date\n            if self.date!= self.env.context.get('date'):\n                self.env.context = dict(self.env.context, date=self.date)\n                self.env.context.update(self._context_today)\n                self.env.context.update(self._context_today_move)\n                self.env.context.update(self._context_today_move_line)\n                self.env.context.update(self._context_today_move_line_tax)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.update(self._context_today_move_line_tax_report)\n                self.env.context.update(self._context_today_move_tax_report)\n                self.env.context.", "CodeBleu_score": 21.902700762347312}, {"code": "def _compute_date(self)\n\t\n    if self.invoice_date and self.invoice_date!= self.date:\n        self.date = self.invoice_date\n    elif not self.invoice_date and not self.date:\n        self.date = fields.Date.context_today(self)\n    elif self.invoice_date and self.invoice_date!= self.date:\n        self.date = self.invoice_date\n        self.with_context(tax_report_date=self.invoice_date)._recompute_tax_lines()\n\n", "CodeBleu_score": 23.44747457852773}, {"code": "def _compute_date(self)\n\t\n    # If there is no invoice date and no existing date, set the date to today's date.\n    if not self.invoice_date and not self.date:\n        self.date = fields.Date.today()\n    # If there is an invoice date, check if the move is not a sale document and calculate the accounting date based on the invoice date and tax report impact.\n    if self.invoice_date:\n        if not self.is_sale_document():\n            self.date = self.invoice_date + self._get_accounting_date()\n        # If the calculated accounting date differs from the current date, update the move's date and schedule the recalculation of related fields in the environment.\n        if self.date!= self.date_today:\n            self.date = self.date_today\n            self.env.context = self._context_today\n            self.env.context.update(self._context_today)\n            self._compute_date()\n            self._compute_tax_report()\n            self._compute_amount()\n            self._compute_total_debit()\n            self._compute_total_credit()\n            self._compute_balance()\n            self._compute_tax_amount()\n            self._compute_tax_base()\n            self._compute_tax_code()\n            self._compute_tax_amount_currency()\n            self._compute_tax_base_currency()\n            self._compute_tax_code_currency()\n            self._compute_tax_amount_currency_company()\n            self._compute_tax_base_currency_company()\n            self._compute_tax_code_currency_company()\n            self._compute_tax_amount_currency_company_partner()\n            self._compute_tax_base_currency_company_partner()\n            self._compute_tax_code_currency_company_partner()\n            self._compute_tax_amount_currency_company_partner_tax_code()\n            self._compute_tax_base_currency_company_partner_tax_code()\n            self._compute_tax_code_currency_company_partner_tax_code()\n            self._compute_tax_amount_currency_company_partner_tax_code_tax_code()\n            self._compute_tax_base_currency_company_partner_tax_code_tax_code()\n            self._compute_tax_code_currency_company_partner_tax_code_tax_", "CodeBleu_score": 20.422727792227345}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_purchase_document:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        elif move.is_sale_document:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 37.90539199695451}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_purchase_document:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        elif move.is_sale_document:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False", "CodeBleu_score": 37.90539199695451}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        elif move.is_purchase_document:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 37.90539199695451}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([('name', '=', 'Default')])\n    for tax in self.filtered(lambda tax: tax.type == 'tax'):\n        tax_group = tax_groups.filtered(lambda tax_group: tax_group.country_id == tax.country_id and tax_group.company_id == tax.company_id)\n        if not tax_group:\n            tax_group = tax_groups.filtered(lambda tax_group: not tax_group.country_id and tax_group.company_id == tax.company_id)\n        if not tax_group:\n            tax_group = tax_groups.filtered(lambda tax_group: tax_group.country_id == tax.country_id and not tax_group.company_id)\n        if not tax_group:\n            tax_group = tax_groups.filtered(lambda tax_group: not tax_group.country_id and not tax_group.company_id)\n        if not tax_group:\n            tax_group = tax_groups[0]\n        tax.tax_group_id = tax_group.id\n\n", "CodeBleu_score": 21.990881120192125}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    tax_group_by_country_company = defaultdict(list)\n    for tax in self.filtered(lambda tax: tax.tax_group_id):\n        tax_group_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n    for (country, company), taxes in tax_group_by_country_company.items():\n        if country and company:\n            tax_group = tax_groups.search([('country_id', '=', country.id), ('company_id', '=', company.id)], limit=1)\n            if not tax_group:\n                tax_group = tax_groups.search([('country_id', '=', False), ('company_id', '=', company.id)], limit=1)\n        else:\n            tax_group = tax_groups.search([('country_id', '=', False), ('company_id', '=', False)], limit=1)\n        if not tax_group:\n            tax_group = tax_groups.create({'name': _('Tax Group'), 'country_id': country, 'company_id': company})\n        for tax in taxes:\n            tax.tax_group_id = tax_group.id\n\n", "CodeBleu_score": 37.6814381637316}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups_by_country_company = defaultdict(list)\n    for tax_group in self.env['account.tax.group'].search([]):\n        tax_groups_by_country_company[tax_group.country_id, tax_group.company_id].append(tax_group)\n    for tax in self.filtered(lambda tax: tax.tax_group_id):\n        tax_groups_by_country_company[tax.country_id, tax.company_id].append(tax.tax_group_id)\n    for tax in self.filtered(lambda tax: not tax.tax_group_id):\n        tax_group = next(\n            (tax_group for tax_group in tax_groups_by_country_company[tax.country_id, tax.company_id] if tax_group.country_id.id == tax.country_id.id),\n            None,\n        )\n        if tax_group:\n            tax.tax_group_id = tax_group\n        else:\n            tax_group = next(\n                (tax_group for tax_group in tax_groups_by_country_company[None, tax.company_id] if tax_group.country_id.id == tax.country_id.id),\n                None,\n            )\n            if tax_group:\n                tax.tax_group_id = tax_group", "CodeBleu_score": 28.135926403291588}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session by accessing the login URL\n    login_url = url + 'login'\n    login_data = {\n        'login_username': login,\n        'login_password':,\n        'database': db\n    }\n    login_res = requests.post(login_url, data=login_data)\n    login_res.raise_for_status()\n\n    # Prepare the POST request data\n    post_data = {\n        'database': db,\n        'force': force\n    }\n    files = {\n        'file': module_file\n    }\n\n    # Upload the module file\n    upload_url = url + 'base_import_module/login_upload'\n    upload_res = requests.post(upload_url, data=post_data, files=files)\n    upload_res.raise_for_status()\n\n    # Return the response text\n    return upload_res.text\n\n", "CodeBleu_score": 39.97635037536792}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.login(login, password, db)\n    # Prepare the POST data\n    data = {\n        'name': module_file.name,\n        'force': force\n    }\n    # Upload the module file\n    res = self.session.post(url, files=dict(file=(module_file.name, module_file, 'application/octet-stream')), data=data)\n    res.raise_for_status()\n    return res.text\n\n", "CodeBleu_score": 29.862451308867982}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    r = self.session.get(url)\n    r.raise_for_status()\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n    files = {'file': (module_file.name, module_file, 'application/zip')}\n    # Upload the module file\n    r = self.session.post(url, data=data, files=files)\n    r.raise_for_status()\n    return r.text\n\n", "CodeBleu_score": 34.33097387568723}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    db_name = config.get('database', 'name')\n    overwrite_existing = config.getboolean('translation', 'overwrite_existing')\n    registry = odoo.registry(db_name)\n    cursor = registry.cursor\n    translation_importer = odoo.api.registry.TranslationImporter(cursor)\n    translation_importer.save(overwrite_existing)\n    translation_importer.load_file()", "CodeBleu_score": 40.87988610490213}, {"code": "def import_translation()\n\t\n    db_name = get_database_name()\n    overwrite_translations = get_overwrite_translations()\n    registry = odoo.registry(db_name)\n    cursor = registry.cursor\n    translation_importer = odoo.tools.config.TranslationImporter(cursor)\n    translation_importer.save(overwrite_translations)\n    translation_importer.load_file()\n\n", "CodeBleu_score": 17.703062683545323}, {"code": "def import_translation()\n\t\n    registry = odoo.registry\n    cursor = odoo.registry.cursor\n    new = odoo.registry.new\n    TranslationImporter = odoo.addons.base.models.ir_translation_importer\n    translation_importer = TranslationImporter(new)\n    translation_importer.save()\n    translation_importer.load_file()\n\n", "CodeBleu_score": 16.22122306649668}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n    if hasattr(self, 'name'):\n        child.name = self.name\n    if hasattr(self, 'info'):\n        child.info = self.info\n    self.children.sort(key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 47.49961126007247}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, info)\n        child.depth = self.depth + 1\n        self.children[name] = child\n        self.children = sorted(self.children.values(), key=lambda x: x.name)\n        return child\n", "CodeBleu_score": 39.30497848574657}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        child = Node(name, info, self.depth + 1)\n        self.children[name] = child\n        self.children = sorted(self.children.values(), key=lambda x: x.name)\n    return self.children[name]\n\n", "CodeBleu_score": 33.99114341480114}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"balances\": {date: 0 for date in dates},\n    }\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    if root_type not in (\"Asset\", \"Expense\"):\n        for gl_entry in gl_entries:\n            gl_entry.debit_amount = -gl_entry.debit_amount\n            gl_entry.credit_amount = -gl_entry.credit_amount\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for gl_entry in gl_entries:\n            for date in dates:\n                if gl_entry.posting_date <= date:\n                    if gl_entry.debit_amount:\n                        result[\"balances\"][date] += gl_entry.debit_amount\n                    elif gl_entry.credit_amount:\n                        result[\"balances\"][date] += gl_entry.credit_amount\n    else:\n        for gl_entry in gl_entries:\n            for date in dates:\n                if gl_entry.posting_date <= date:\n                    if gl_entry.debit_amount:\n                        result[\"balances\"][date] -= gl_entry.debit_amount\n                    elif gl_entry.credit_amount:\n                        result[\"balances\"][date] -= gl_entry.credit_amount\n    return result\n\n", "CodeBleu_score": 25.450046203148563}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    # Initialize result with dates and zeros for balances\n    result = {\n        \"dates\": dates,\n        \"balances\": {date: 0 for date in dates},\n        \"total\": 0,\n    }\n    # Determine the account's root type\n    root_type = account.get(\"root_type\")\n    # Iterate through the entries and update the balance for each date\n    for entry in gl_entries:\n        date = entry.get(\"posting_date\")\n        if date in result[\"dates\"]:\n            # Update the balance for the date\n            if root_type == \"Asset\":\n                result[\"balances\"][date] += entry.get(\"debit_in_account_currency\") - entry.get(\"credit_in_account_currency\")\n            elif root_type == \"Expense\":\n                result[\"balances\"][date] -= entry.get(\"debit_in_account_currency\") - entry.get(\"credit_in_account_currency\")\n            else:\n                result[\"balances\"][date] += entry.get(\"debit_in_account_currency\") - entry.get(\"credit_in_account_currency\")\n            # Update the total balance\n            result[\"total\"] += entry.get(\"debit_in_account_currency\") - entry.get(\"credit_in_account_currency\")\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for date in result[\"dates\"]:\n            result[\"balances\"][date] *= -1\n    # Return the computed result\n    return result\n\n", "CodeBleu_score": 20.687861881904087}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {date: 0 for date in dates}\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for gl_entry in gl_entries:\n            result[gl_entry.posting_date] -= gl_entry.debit_in_account_currency\n            result[gl_entry.posting_date] += gl_entry.credit_in_account_currency\n    else:\n        for gl_entry in gl_entries:\n            result[gl_entry.posting_date] += gl_entry.debit_in_account_currency\n            result[gl_entry.posting_date] -= gl_entry.credit_in_account_currency\n    if root_type == \"Asset\":\n        for date in dates:\n            result[date] = sum(result[date] for date in dates[: dates.index(date) + 1])\n    elif root_type == \"Expense\":\n        for date in dates:\n            result[date] = sum(result[date] for date in dates[: dates.index(date) + 1])\n    return result\n\n", "CodeBleu_score": 26.507014175640208}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type:\n        if self.account_type in (\"Receivable\", \"Payable\") and self.account_type!= self.old_account_type:\n            if self.account_type!= \"Receivable\" and self.account_type!= \"Payable\":\n                if frappe.db.sql(\n                    \"\"\"select count(*) from `tabGL Entry` where account = %s and docstatus = 1\"\"\",\n                    (self.name),\n                    as_dict=1,\n                ):\n                    frappe.msgprint(\n                        _(\"You are changing the account type for {0} to {1}. This may result in potential issues in the Accounts report.\").format(\n                            self.account_name, self.account_type\n                        ),\n                        title=_(\"Potential Issues\"),\n                        indicator=\"orange\",\n                        is_warning=1,\n                    )\n                    self.add_comment(\n                        _(\"You are changing the account type for {0} to {1}. This may result in potential issues in the Accounts report.\").format(\n                            self.account_name, self.account_type\n                        )\n                    )\n\n", "CodeBleu_score": 24.557043037802494}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.old_account_type!= self.account_type:\n        if self.account_type!= \"Receivable\" and self.account_type!= \"Payable\":\n            if self.get_all():\n                frappe.msgprint(\n                    _(\"This account has existing general ledger entries. Changing the account type to a non-receivable/payable type may result in inaccurate financial statements and financial reports. Please review the general ledger entries before proceeding.\"),\n                    indicator=\"orange\",\n                    title=_(\"Warning\"),\n                )\n                self.add_comment(\n                    _(\"Changing the account type to a non-receivable/payable type may result in inaccurate financial statements and financial reports. Please review the general ledger entries before proceeding.\")\n                )\n\n", "CodeBleu_score": 24.062977148320904}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.old_account_type and self.account_type not in [\"Receivable\", \"Payable\"]:\n        if self.account_type in [\"Asset\", \"Expense\", \"Liability\", \"Equity\"]:\n            if frappe.db.sql(\"\"\"SELECT COUNT(1) FROM `tabGL Entry` WHERE account = %s\"\"\", self.name):\n                frappe.msgprint(_(\"Warning: Changing the account type for {0} will result in the loss of any existing general ledger entries.\").format(self.name), title=_(\"Warning\"), indicator=\"orange\", raise_exception=False)\n                self.add_comment(comment=_(\"Warning: Changing the account type for {0} will result in the loss of any existing general ledger entries.\").format(self.name))\n\n", "CodeBleu_score": 27.310259512038666}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.company_currency!= self.currency:\n        self.company_currency = self.currency\n        self.explicit_currency = 1\n        self.save()\n        if self.is_group:\n            for child in self.get(\"children\"):\n                child.company_currency = self.company_currency\n                child.explicit_currency = 1\n                child.save()\n        if self.is_group:\n            for child in self.get(\"children\"):\n                child.validate_account_currency()\n        else:\n            for debit in self.get(\"debit_entries\"):\n                if debit.currency!= self.company_currency:\n                    raise frappe.ValidationError(\n                        _(\"Account currency must be {0}\").format(self.company_currency)\n                    )\n            for credit in self.get(\"credit_entries\"):\n                if credit.currency!= self.company_currency:\n                    raise frappe.ValidationError(\n                        _(\"Account currency must be {0}\").format(self.company_currency)\n                    )\n\n", "CodeBleu_score": 24.278261474231318}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency and self.account_currency!= self.company_currency:\n        self.currency_explicitly_set = 1\n        self.company_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        if self.company_currency!= self.account_currency:\n            frappe.throw(_(\"The account currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.default_currency:\n            frappe.throw(_(\"The default currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.base_currency:\n            frappe.throw(_(\"The base currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.cost_center_currency:\n            frappe.throw(_(\"The cost center currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.profit_center_currency:\n            frappe.throw(_(\"The profit center currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.sales_expense_account_currency:\n            frappe.throw(_(\"The sales expense account currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.purchase_expense_account_currency:\n            frappe.throw(_(\"The purchase expense account currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.purchase_return_account_currency:\n            frappe.throw(_(\"The purchase return account currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.sales_return_account_currency:\n            frappe.throw(_(\"The sales return account currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.expense_account_currency:\n            frappe.throw(_(\"The expense account currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.income_account_currency:\n            frappe.throw(_(\"The income account currency must be {0}\").format(self.company_currency))\n        if self.company_currency!= self.", "CodeBleu_score": 28.638977224988448}, {"code": "def validate_account_currency(self)\n\t\n\n    if self.currency:\n        self.set_currency_explicitly_specified()\n        self.set_default_currency()\n        self.check_for_general_ledger_entries_with_different_currency()\n    else:\n        self.set_currency_explicitly_specified()\n        self.set_default_currency()\n\n", "CodeBleu_score": 13.15328416526396}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {'debit': 0, 'credit': 0, 'debit_amount': 0, 'credit_amount': 0})\n        merged_entries[key]['debit'] += entry.get('debit')\n        merged_entries[key]['credit'] += entry.get('credit')\n        merged_entries[key]['debit_amount'] += entry.get('debit_amount')\n        merged_entries[key]['credit_amount'] += entry.get('credit_amount')\n\n    return merged_entries\n\n", "CodeBleu_score": 44.14993470898991}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dim] for dim in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                'debit': entry.get('debit', 0),\n                'credit': entry.get('credit', 0),\n                'debit_amount_account_currency': entry.get('debit_amount_account_currency', 0),\n                'credit_amount_account_currency': entry.get('credit_amount_account_currency', 0),\n                'debit_amount_company_currency': entry.get('debit_amount_company_currency', 0),\n                'credit_amount_company_currency': entry.get('credit_amount_company_currency', 0),\n                'last_account_closing_balance_account_currency': entry.get('last_account_closing_balance_account_currency', 0),\n                'last_account_closing_balance_company_currency': entry.get('last_account_closing_balance_company_currency', 0),\n            }\n        else:\n            merged_entries[key]['debit'] += entry.get('debit', 0)\n            merged_entries[key]['credit'] += entry.get('credit', 0)\n            merged_entries[key]['debit_amount_account_currency'] += entry.get('debit_amount_account_currency', 0)\n            merged_entries[key]['credit_amount_account_currency'] += entry.get('credit_amount_account_currency', 0)\n            merged_entries[key]['debit_amount_company_currency'] += entry.get('debit_amount_company_currency', 0)\n            merged_entries[key]['credit_amount_company_currency'] += entry.get('credit_amount_company_currency', 0)\n            merged_entries[key]['last_account_closing_balance_account_currency'] += entry.get('last_account_closing_balance_account_currency', 0)\n            merged_entries[key]['last_account_closing_balance_company_currency'] += entry.get('last_account_closing_balance_company_currency', 0)\n    return merged_entries\n\n", "CodeBleu_score": 26.407513405646128}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry.get(dimension) for dimension in accounting_dimensions)\n        merged_entries.setdefault(key, {'debit': 0, 'credit': 0, 'debit_amount': 0, 'credit_amount': 0})\n        merged_entries[key]['debit'] += entry.get('debit')\n        merged_entries[key]['credit'] += entry.get('credit')\n        merged_entries[key]['debit_amount'] += entry.get('debit_amount')\n        merged_entries[key]['credit_amount'] += entry.get('credit_amount')\n    return merged_entries\n\n", "CodeBleu_score": 43.4802078049642}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_blocked:\n        if self.hold_type == \"Payment Hold\" and self.transaction_type == \"Supplier Payment\":\n            if self.release_date:\n                if getdate(self.release_date) > getdate(nowdate()):\n                    raise frappe.ValidationError(\"Supplier is blocked and cannot proceed with the transaction.\")\n                else:\n                    self.db_set(\"is_blocked\", 0)\n                    self.save()\n                    frappe.msgprint(\"Supplier has been released from the hold.\")\n            else:\n                raise frappe.ValidationError(\"Supplier is blocked and cannot proceed with the transaction.\")\n        elif self.hold_type == \"Invoice Hold\" and self.transaction_type == \"Buying Invoice\":\n            if self.release_date:\n                if getdate(self.release_date) > getdate(nowdate()):\n                    raise frappe.ValidationError(\"Supplier is blocked and cannot proceed with the transaction.\")\n                else:\n                    self.db_set(\"is_blocked\", 0)\n                    self.save()\n                    frappe.msgprint(\"Supplier has been released from the hold.\")\n            else:\n                raise frappe.ValidationError(\"Supplier is blocked and cannot proceed with the transaction.\")\n        else:\n            raise frappe.ValidationError(\"Supplier is blocked and cannot proceed with the transaction.\")\n\n", "CodeBleu_score": 20.55229933690544}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_blocked:\n        if self.supplier_on_hold:\n            if self.supplier_on_hold.hold_type == \"Payment\":\n                if self.supplier_on_hold.release_date > nowdate():\n                    frappe.throw(_(\"Supplier is on hold. The hold will be released on {0}\").format(self.supplier_on_hold.release_date))\n            elif self.supplier_on_hold.hold_type == \"Invoice\":\n                if self.supplier_on_hold.release_date > nowdate():\n                    frappe.throw(_(\"Supplier is on hold. The hold will be released on {0}\").format(self.supplier_on_hold.release_date))\n        else:\n            frappe.throw(_(\"Supplier is on hold. Please contact your supplier to resolve the issue.\"))\n\n", "CodeBleu_score": 22.481389605159443}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_is_blocked:\n        if self.transaction_type == \"Supplier Payment\" and self.supplier_hold_type == \"On Hold\":\n            if self.supplier_release_date and self.supplier_release_date < nowdate():\n                frappe.throw(_(\"Supplier {0} is on hold until {1}.\").format(self.supplier, self.supplier_release_date))\n        else:\n            frappe.throw(_(\"Supplier {0} is on hold.\").format(self.supplier))\n\n", "CodeBleu_score": 19.611419032337363}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doc = frappe.get_doc(self.doctype, self.name)\n    repost_doc.flags.ignore_validate = True\n    repost_doc.flags.ignore_mandatory = True\n    repost_doc.flags.ignore_links = True\n    references_map = {}\n    for doctype in self.get_repost_doctypes():\n        references = frappe.db.sql(\n            \"\"\"select parent, parentfield, parenttype from `tab{doctype}` where voucher_type = %s and voucher_no = %s\"\"\".format(\n                doctype=doctype\n            ),\n            (self.voucher_type, self.voucher_no),\n            as_dict=True,\n        )\n        for reference in references:\n            references_map.setdefault(reference.parenttype, {})[\n                reference.parent\n            ].append(reference)\n    for parenttype, parent_map in references_map.items():\n        for parent, references in parent_map.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            for reference in references:\n                if reference.parentfield == \"repost_vouchers\":\n                    parent_doc.repost_vouchers = [\n                        d\n                        for d in parent_doc.repost_vouchers\n                        if d.voucher_no!= self.voucher_no\n                    ]\n                elif reference.parentfield == \"vouchers\":\n                    parent_doc.vouchers = [\n                        d\n                        for d in parent_doc.vouchers\n                        if d.voucher_no!= self.voucher_no\n                    ]\n                else:\n                    raise Exception(\n                        \"Unknown parent field {parentfield} for parent {parenttype} {parent}\".format(\n                            parentfield=reference.parentfield,\n                            parenttype=parenttype,\n                            parent=parent,\n                        )\n                    )\n            parent_doc.save()\n    repost_doc.flags.ignore_validate = False\n    repost_doc.flags.ignore_mandatory = False\n    repost_doc.flags.ignore_links = False\n\n", "CodeBleu_score": 26.043269638453935}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\"Repost DocType\", fields=[\"name\", \"repost_doctype\"])\n    repost_doc_map = {}\n    for repost_doctype in repost_doctypes:\n        repost_doc_map.setdefault(repost_doctype.repost_doctype, []).append(repost_doctype.name)\n\n    for parent_doctype, repost_doc_list in repost_doc_map.items():\n        if parent_doctype == self.doctype:\n            continue\n        parent_doc = frappe.get_doc(self.doctype, self.name)\n        for repost_doc in repost_doc_list:\n            repost_vouchers = parent_doc.get(repost_doc)\n            for repost_voucher in repost_vouchers:\n                if repost_voucher.voucher_type == self.doctype and repost_voucher.voucher_number == self.name:\n                    repost_vouchers.remove(repost_voucher)\n                    parent_doc.ignore_validate = True\n                    parent_doc.ignore_links = True\n                    parent_doc.save()\n                    parent_doc.ignore_validate = False\n                    parent_doc.ignore_links = False\n", "CodeBleu_score": 23.618917936962696}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # get repost doctypes\n    repost_doctypes = frappe.db.sql_list(\"\"\"select distinct repost_doctype from `tabRepost Settings` where parent = %s\"\"\", self.doctype)\n    # get rows where voucher type and number match current document\n    repost_rows = frappe.db.sql(\"\"\"select name, parent, parentfield from `tabRepost Vouchers` where voucher_type = %s and voucher_no = %s\"\"\", (self.doctype, self.name), as_dict=1)\n    # organize rows by parent document type and parent\n    repost_rows_map = {}\n    for row in repost_rows:\n        repost_rows_map.setdefault(row.parent, {}).setdefault(row.parentfield, []).append(row.name)\n    # remove references for each parent document\n    for parent in repost_rows_map:\n        parent_doc = frappe.get_doc(parent, parent)\n        parent_doc.flags.ignore_validate = True\n        parent_doc.flags.ignore_mandatory = True\n        parent_doc.flags.ignore_links = True\n        for parentfield in repost_rows_map[parent]:\n            if parentfield == \"repost_vouchers\":\n                for repost_voucher in repost_rows_map[parent][parentfield]:\n                    parent_doc.repost_vouchers.remove(repost_voucher)\n            elif parentfield == \"vouchers\":\n                for voucher in repost_rows_map[parent][parentfield]:\n                    parent_doc.vouchers.remove(voucher)\n        parent_doc.save()\n    # remove rows from repost vouchers table\n    for repost_voucher in repost_rows:\n        frappe.delete_doc(\"Repost Voucher\", repost_voucher.name)\n    # remove rows from repost settings table\n    for repost_doctype in repost_doctypes:\n        frappe.delete_doc(\"Repost Settings\", repost_doctype)\n", "CodeBleu_score": 26.541910938307485}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_id\": account_id\n        }\n        transactions = []\n        while True:\n            response = self.get(\"/v1/transactions\", params=params)\n            transactions.extend(response.json()[\"transactions\"])\n            if len(transactions) == response.json()[\"total\"]:\n                break\n            params[\"offset\"] = len(transactions)\n        return transactions\n    except requests.exceptions.HTTPError as e:\n        if e.response.status_code == 401:\n            raise frappe.AuthenticationError(\"Authentication failed. Please check your credentials and try again.\")\n        raise e\n    except Exception as e:\n        frappe.log_error(e)\n        raise e", "CodeBleu_score": 35.493304400898666}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.auth:\n        self.authenticate()\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"limit\": 100,\n    }\n    if account_id:\n        params[\"account_id\"] = account_id\n    transactions = []\n    while True:\n        try:\n            response = self.client.get(\"/transactions\", params=params)\n            data = response.json()\n            transactions.extend(data[\"transactions\"])\n            if len(transactions) < data[\"total\"]:\n                params[\"offset\"] = len(transactions)\n            else:\n                break\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 401:\n                self.auth = False\n                self.authenticate()\n                continue\n            elif e.response.status_code == 404:\n                raise frappe.DoesNotExistError(\"Account not found.\")\n            else:\n                raise\n        except Exception as e:\n            frappe.log_error(message=e, title=\"Error fetching transactions from client.\")\n            raise\n    return transactions\n\n", "CodeBleu_score": 35.16862293525992}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        query_params = {\n           'start_date': start_date,\n            'end_date': end_date,\n            'page_size': self.page_size,\n            'page': self.page,\n        }\n        if account_id:\n            query_params['account_id'] = account_id\n        response = self.get(self.transactions_url, params=query_params)\n        response.raise_for_status()\n        transactions = response.json()['transactions']\n        self.page += 1\n        if len(transactions) < self.page_size:\n            self.total = len(transactions)\n        else:\n            self.total = response.json()['total']\n        self.transactions.extend(transactions)\n        if self.page * self.page_size < self.total:\n            self.get_transactions(start_date, end_date, account_id)\n    except requests.HTTPError as e:\n        if e.response.status_code == 401:\n            raise AuthenticationError(e.response.text)\n        elif e.response.status_code == 404:\n            raise NotFoundError(e.response.text)\n        elif e.response.status_code == 422:\n            raise ValidationError(e.response.text)\n        else:\n            raise e\n    except Exception as e:\n        frappe.log_error(title='Error in get_transactions', message=str(e))\n        raise e", "CodeBleu_score": 35.11695132778208}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    # Parse the response\n    institution_id = response.get('institution_id')\n    institution_name = response.get('institution_name')\n    institution_logo = response.get('institution_logo')\n    bank_name = response.get('bank_name')\n    bank_logo = response.get('bank_logo')\n\n    # Retrieve an access token using the PlaidConnector\n    plaid_connector = PlaidConnector()\n    access_token = plaid_connector.get_access_token(token)\n\n    # Check if the bank already exists in the database\n    bank = frappe.get_doc('Bank', {'institution_id': institution_id})\n    if bank:\n        # Update the access token for the existing bank record\n        bank.access_token = access_token\n        bank.save()\n    else:\n        # Create and insert a new bank record\n        bank = frappe.new_doc('Bank')\n        bank.institution_id = institution_id\n        bank.institution_name = institution_name\n        bank.institution_logo = institution_logo\n        bank.bank_name = bank_name\n        bank.bank_logo = bank_logo\n        bank.access_token = access_token\n        bank.insert()\n\n    # Log any errors that occur during the process\n    if frappe.get_last_error():\n        frappe.log_error(frappe.get_last_error())\n", "CodeBleu_score": 40.500316882821565}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response['institution']\n        bank = frappe.get_doc('Bank', institution['name'])\n        if not bank:\n            bank = frappe.new_doc('Bank')\n            bank.name = institution['name']\n            bank.title = institution['name']\n            bank.is_active = 1\n        bank.access_token = token\n        bank.save()\n        frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(e, 'PlaidConnector')\n\n", "CodeBleu_score": 32.81408977785294}, {"code": "def add_institution(token, response)\n\t\n\n    try:\n        # Parse the response\n        institution = response.get(\"institution\")\n        access_token = response.get(\"access_token\")\n\n        # Retrieve an access token using the PlaidConnector\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(access_token)\n\n        # Check if the bank already exists in the database\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution.get(\"institution_id\")})\n\n        if bank:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create and insert a new bank record\n            bank = frappe.new_doc(\"Bank\")\n            bank.name = institution.get(\"name\")\n            bank.institution_id = institution.get(\"institution_id\")\n            bank.institution_type = institution.get(\"institution_type\")\n            bank.access_token = access_token\n            bank.insert()\n\n        return bank\n    except Exception as e:\n        # Log any errors that occur\n        frappe.log_error(frappe.get_traceback(), title=\"Error Adding Institution\")\n        return None", "CodeBleu_score": 42.98289005396833}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # Get the last integration date for the bank account\n        last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n        if not last_integration_date:\n            last_integration_date = frappe.utils.today()\n        # Get the start and end dates for the transaction retrieval\n        start_date = frappe.utils.add_months(last_integration_date, -1)\n        end_date = frappe.utils.today()\n        # Attempt to fetch the transactions\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if not transactions:\n            frappe.throw(_(\"No transactions found for the specified bank and bank account\"))\n        # Process the transactions into new bank transactions\n        new_transactions = process_transactions(bank, bank_account, transactions)\n        # Update the last integration date to the date of the oldest transaction\n        if new_transactions:\n            last_integration_date = min(t.transaction_date for t in new_transactions)\n            frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", last_integration_date)\n        # Log the number of new transactions added\n        frappe.log_error(\n            _(\"Bank: {0}, Bank Account: {1}, New Transactions: {2}\").format(\n                bank, bank_account, len(new_transactions)\n            ),\n            title=\"Bank Integration\",\n        )\n    except Exception as e:\n        frappe.log_error(\n            _(\"An error occurred while syncing bank transactions: {0}\").format(\n                frappe.get_traceback()\n            ),\n            title=\"Bank Integration\",\n        )\n\n", "CodeBleu_score": 39.868997199780765}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get the last integration date for the bank and bank account\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    # If the last integration date is not set, set it to the current date\n    if not last_integration_date:\n        last_integration_date = frappe.utils.nowdate()\n    # Set the start date to the last integration date plus one day\n    start_date = frappe.utils.add_days(last_integration_date, 1)\n    # Set the end date to the current date\n    end_date = frappe.utils.nowdate()\n    # Attempt to fetch the transactions\n    try:\n        transactions = fetch_transactions(bank, bank_account, start_date, end_date)\n    except Exception as e:\n        # Log the error message\n        frappe.log_error(\"Error fetching transactions for Bank: {0}, Bank Account: {1}, Start Date: {2}, End Date: {3}\".format(bank, bank_account, start_date, end_date), get_traceback())\n        # Return False\n        return False\n    # Process the transactions\n    for transaction in transactions:\n        # Create a new bank transaction\n        new_bank_transaction = frappe.new_doc(\"Bank Transaction\")\n        # Set the bank and bank account\n        new_bank_transaction.bank = bank\n        new_bank_transaction.bank_account = bank_account\n        # Set the transaction date\n        new_bank_transaction.transaction_date = transaction.date\n        # Set the transaction amount\n        new_bank_transaction.transaction_amount = transaction.amount\n        # Set the transaction description\n        new_bank_transaction.transaction_description = transaction.description\n        # Set the transaction reference\n        new_bank_transaction.transaction_reference = transaction.reference\n        # Set the transaction status\n        new_bank_transaction.transaction_status = \"Unprocessed\"\n        # Save the new bank transaction\n        new_bank_transaction.save()\n        # Update the last integration date to the date of the oldest transaction\n        last_integration_date = min(last_integration_date, transaction.date)\n    # Update the last integration date\n    frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", last_integration_date)\n    # Log the number of new transactions added", "CodeBleu_score": 33.18999741316831}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = bank_account.last_integration_date\n        if not last_integration_date:\n            last_integration_date = today()\n        start_date = add_months(last_integration_date, -1)\n        end_date = today()\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        new_bank_transactions = process_transactions(bank, bank_account, transactions)\n        if new_bank_transactions:\n            frappe.db.set_value(\"Bank Account\", bank_account.name, \"last_integration_date\", start_date)\n            frappe.log_error(\n                \"Bank Account {0} - {1} new transactions added\".format(bank_account.name, len(new_bank_transactions)),\n                \"Bank Account Sync\",\n            )\n        else:\n            frappe.log_error(\"Bank Account {0} - No new transactions added\".format(bank_account.name), \"Bank Account Sync\")\n    except Exception as e:\n        frappe.log_error(\n            \"Bank Account {0} - Error syncing transactions: {1}\".format(bank_account.name, get_traceback()), \"Bank Account Sync\"\n        )\n\n", "CodeBleu_score": 33.03458509570005}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    self._log_info('Migrating entries for entity %s' % entity)\n    uri = 'https://%s.quickbooks.com/v3/company/%s/query?query=select * from %s' % (self.realm, self.company_id, entity)\n    self._log_debug('Query URI: %s' % uri)\n    total_entries = 0\n    while True:\n        try:\n            response = self._get(uri)\n            total_entries += len(response.json['QueryResponse']['entries'])\n            self._log_debug('Fetched %d entries' % total_entries)\n            entries = response.json['QueryResponse']['entries']\n            self._preprocess_entries(entries)\n            self._save_entries(entries)\n            if response.json['QueryResponse']['iteratorRemainingCount'] == 0:\n                break\n            uri = response.json['QueryResponse']['iterator']['iteratorId']\n        except Exception as e:\n            self._log_error('Exception encountered while fetching entries for entity %s: %s' % (entity, e))\n            self._log_debug('Response text: %s' % response.text)\n            raise\n\n    self._log_info('Successfully migrated %d entries for entity %s' % (total_entries, entity))\n\n", "CodeBleu_score": 25.17359860573206}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct query URI\n    query_uri = self._build_query_uri(entity)\n    # Determine total number of entries\n    total_entries = self._get_total_entries(query_uri)\n    # Retrieve entries in batches of 1000\n    for i in range(0, total_entries, 1000):\n        # Retrieve entries\n        response = self._get(query_uri, params={'startPosition': i})\n        # Preprocess entries\n        entries = self._preprocess_entries(response.json())\n        # Save entries\n        self._save_entries(entity, entries)\n        # Log any errors\n        self._log_error(response)\n\n", "CodeBleu_score": 21.581789801023675}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = self._build_query_uri(entity, self.quickbooks_company_id, self.quickbooks_access_token)\n    # Determine the total number of entries\n    total_entries = self._get_total_entries(query_uri)\n    # Retrieve the entries in batches of 1000\n    for start_index in range(0, total_entries, 1000):\n        # Retrieve the entries\n        response = self._get(query_uri, params={'start': start_index,'maxResults': 1000})\n        # Preprocess the entries\n        entries = self._preprocess_entries(response.json())\n        # Save the entries\n        self._save_entries(entity, entries)\n        # Log any errors\n        self._log_error(response.status_code, response.text)\n", "CodeBleu_score": 26.656847345499575}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == \"SalesInvoice\":\n        self._save_sales_invoice(invoice)\n    else:\n        self._save_invoice_as_journal_entry(invoice)\n\n", "CodeBleu_score": 17.529047439168565}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == \"SalesInvoice\":\n        self._save_sales_invoice(invoice)\n    elif invoice.type == \"JournalEntry\":\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        raise ValueError(\"The invoice type is not supported.\")\n\n", "CodeBleu_score": 24.158070803791425}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type =='sale':\n        self._save_sales_invoice(invoice)\n    else:\n        self._save_invoice_as_journal_entry(invoice)\n\n", "CodeBleu_score": 16.616608610046658}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = no_of_visit - 1\n    if interval < 1:\n        raise ValueError(\"Number of visits must be greater than 1.\")\n    # Calculate the interval between visits\n    interval_days = (end_date - start_date).days\n    if interval_days < interval:\n        raise ValueError(\"Number of visits exceeds the number of days between the start and end dates.\")\n    interval_days = interval_days // interval\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=interval_days * i)\n        schedule_list.append(schedule_date)\n    # Adjust dates to avoid holidays\n    schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    return schedule_list\n", "CodeBleu_score": 34.25050157522335}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = 1\n    if no_of_visit == 1:\n        interval = 0\n    for i in range(no_of_visit):\n        schedule_list.append(start_date)\n        start_date = start_date + timedelta(days=interval)\n    schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    return schedule_list\n", "CodeBleu_score": 26.287959295190998}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n    interval = no_of_visit / (end_date - start_date).days\n    for i in range(start_date, end_date):\n        schedule_list.append(i)\n        if interval > 1:\n            interval = interval - 1\n        else:\n            interval = no_of_visit / (end_date - start_date).days\n    schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    return schedule_list\n\n", "CodeBleu_score": 26.589102122382403}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\tthis->response = response()->json([\n           'status' =>'success',\n           'message' => __('messages.success.bulkaction'),\n            'data' => [\n                'title' => __('messages.title.bulkaction'),\n                'path' => route($this->route),\n                'handle' => $this->handle,\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\nreturn $this->response;\n\n}", "CodeBleu_score": 41.66341950751401}, {"code": "<?\n   public function response($view, $data = []){\n\this->checkIfBulkActionRequest();\n$url = $this->getBulkActionUrl($view, $data);\n$handle = $this->getBulkActionHandle($view, $data);\nreturn response()->json([\n           'success' => true,\n           'message' => $this->getMessage(),\n            'data' => [\n                'title' => $this->getTitle(),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\n}", "CodeBleu_score": 38.121099455045226}, {"code": "<?\n   public function response($view, $data = []){\n\tquest()->get", "CodeBleu_score": 7.632902298850574}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $request->getSelectedRecords();\nforeach ($contacts as $contact) {\ntry {\n$contact->delete();\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}\n}", "CodeBleu_score": 41.00649577217392}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $request->get('contacts');\nforeach ($contacts as $contactId) {\ntry {\n$contact = $this->contactRepository->find($contactId);\n$this->contactRepository->delete($contact);\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}\n}", "CodeBleu_score": 43.61944135015797}, {"code": "<?\npublic function deleteContacts($request){\n\t\t// Retrieve the selected contacts from the request.\n\t$selectedContacts = $request->input('selectedContacts');\n\n\t// Attempt to dispatch a delete operation for each contact.\n\tforeach ($selectedContacts as $contactId) {\n\t\ttry {\n\t\t\t$contact = Contact::find($contactId);\n\t\t\t$contact->delete();\n\t\t} catch (Exception $e) {\n\t\t\t// Display an error message if an exception occurs.\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n\n\t// Redirect to the contacts page.\n\treturn redirect()->route('contacts.index');\n}", "CodeBleu_score": 41.80917802256931}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedTransactions($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransactionJob($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 55.3555468579026}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = Transaction::whereIn('id', $request->get('transactions'))->get();\n\ttry {\n\t\tforeach ($transactions as $transaction) {\n\t\t\tdispatch(new DeleteTransaction($transaction));\n\t\t}\n\t} catch (Exception $e) {\n\t\tflash($e->getMessage())->error();\n\t\treturn redirect()->back();\n\t}\n\tflash('The transactions were successfully deleted.')->success();\n\treturn redirect()->back();\n}", "CodeBleu_score": 49.112961604048564}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransactionJob($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 55.70998411173209}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($this->requestClass)) {\n\t\treturn;\n\t}\n\t$request = $this->container->make($this->requestClass);\n\tif (!$request instanceof FormRequest) {\n\t\treturn;\n\t}\n\tforeach ($this->get($this->dataKey) as $data) {\n\t\t$request->initialize($data);\n\t\t$validator->prepareRules($request);\n\t\t$validator->getData();\n\t\tif ($validator->failed()) {\n\t\t\t$validator->addFailure($request);\n\t\t}\n\t}\n\tif ($validator->failed()) {\n\t\tthrow new ValidationException($validator);\n\t}\n}", "CodeBleu_score": 31.41011853043063}, {"code": "<?\npublic function withValidator($validator){\n\t\t$request = $this->request;\n\tif (class_exists($request->get('request'))) {\n\t\t$request = new $request->get('request');\n\t}\n\n\tif (!$request instanceof FormRequest) {\n\t\treturn;\n\t}\n\n\t$request->initialize($this->request->all());\n\t$data = $request->getData();\n\n\tforeach ($data as $row) {\n\t\t$request->initialize($row);\n\n\t\t$validator->prepareRules($request);\n\n\t\ttry {\n\t\t\t$request->rules();\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->failed($e->validator->failed());\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 29.9823853593976}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (! class_exists($requestClass = $this->requestClass())) {\n\t\treturn;\n\t}\n\n\tif (! $request = new $requestClass) {\n\t\treturn;\n\t}\n\n\t$this->initialize($request);\n\n\t$validator->setData($request->all());\n\n\tforeach ($this->getRules() as $attribute => $rules) {\n\t\t$validator->addFailure($attribute, $this->validateAttribute($request, $attribute, $rules));\n\t}\n\n\tif ($validator->failed()) {\n\t\tthrow new ValidationException($validator);\n\t}\n}", "CodeBleu_score": 29.11807860621231}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif($this->shouldUpdate()) {\n\t\t$this->setModel($arguments[0]?? null);\n\t\t$this->setRequest($arguments[1]?? null);\n\t}\n}", "CodeBleu_score": 14.123782452564338}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->shouldUpdate()) {\n\t\t$this->setModel($arguments[0]?? null);\n\t\t$this->setRequest($arguments[1]?? null);\n\t}\n}", "CodeBleu_score": 14.36080315108088}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->shouldUpdate) {\n\t\t$this->setModel($arguments[0]?? null);\n\t\t$this->setRequest($arguments[1]?? null);\n\t}\n}", "CodeBleu_score": 15.401848572470112}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t/**\n * This function scopes a query to collect records with optional sorting. It retrieves the sorting parameter from the request, applies search and sorting to the query, and checks if the request expects a JSON response and is not an API request. If true, it returns all records; otherwise, it paginates the results based on a limit from the request or a default setting.\n */\n public function scopeCollect($query, $sort = 'name') {", "CodeBleu_score": 10.906284066937713}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $query->with('user')->usingSearchString()->sortable($sort);\n if ($this->expectsJson() && $this->isNotApi()) {\n return $query->get();\n }\n return $query->paginate(request('limit', 10));\n }", "CodeBleu_score": 28.87948814951273}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$query->usingSearchString()->sortable($sort);\n\tif ($this->expectsJson() &&!$this->isNotApi()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate($this->get('limit', 10));\n}", "CodeBleu_score": 27.033339418767948}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$totalAmount = $model->getAmountConvertedToDefault();\n\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'openAmount' => 0,\n\t\t\t'overdueAmount' => 0,\n\t\t];\n\t}\n\n\t$payments = $model->payments;\n\n\tforeach ($payments as $payment) {\n\t\tif ($payment->status == 'paid') {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$openAmount += $payment->amount;\n\n\t\tif ($payment->dueDate < Date::today()) {\n\t\t\t$overdueAmount += $payment->amount;\n\t\t}\n\t}\n\n\treturn [\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount,\n\t];\n}", "CodeBleu_score": 40.06966994768309}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\tif($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$openAmount = $model->amount;\n\t\t$overdueAmount = $model->amount;\n\n\t\tforeach($model->transactions as $transaction) {\n\t\t\tif($transaction->status == 'paid') {\n\t\t\t\t$openAmount -= $transaction->amount;\n\t\t\t\t$overdueAmount -= $transaction->amount;\n\t\t\t}\n\t\t}\n\n\t\tif($model->status == 'partial') {\n\t\t\t$overdueAmount -= $model->amount;\n\t\t}\n\n\t\tif($model->status == 'overdue') {\n\t\t\t$openAmount = 0;\n\t\t}\n\t}\n\n\treturn [\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount\n\t];\n}", "CodeBleu_score": 32.300210306252986}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\tif($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$openAmount = $model->amount;\n\t\t$overdueAmount = 0;\n\t\tforeach($model->transactions as $transaction) {\n\t\t\tif($transaction->status!= 'paid') {\n\t\t\t\t$openAmount -= $transaction->amount;\n\t\t\t\tif($transaction->status == 'overdue') {\n\t\t\t\t\t$overdueAmount += $transaction->amount;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif($model->status == 'partial') {\n\t\t\t$openAmount += $model->amount;\n\t\t}\n\t}\n\treturn ['openAmount' => $openAmount, 'overdueAmount' => $overdueAmount];\n}", "CodeBleu_score": 31.698883011604796}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t// If we haven't been given a page make sure the current page is set on the\n\t// request to preserve old behavior. This allows the developer to use this\n\t// method without having to define a route for every page and allows the\n\t// developer to just use the paginate method without having to define a route\n\t// for the first page.\n\tif (is_null($page)) {\n\t\t$page = $this->currentPageResolver();\n\t}\n\t// Once we have the current page, we can push it into the URL so the user\n\t// does not have to add it to the URL. Then, we will get the proper slice\n\t// of the items for the given page and return a new paginator instance for\n\t// the given slice. We'll add the necessary URL information to that.\n\t$page = $this->resolveCurrentPage($page);\n\t$perPage = $this->getPerPage($perPage);\n\t$results = $this->simplePaginate($perPage, $columns, $page, $this->total);\n\treturn $this->paginator->make($results, $this->total, $perPage, $page, [\n\t\t'path' => $this->toBase(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 50.86742881514045}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\n\treturn $this->paginator($results, $this->total(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 61.47022574515599}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t// If we have an explicit perPage value, we can just grab the results and return them\n\tif (isset($perPage)) {\n\t\t$results = $this->forPage($page, $perPage)->get($columns);\n\n\t\treturn $this->paginator($results, $this->total(), $perPage, $page, [\n\t\t\t'path' => $this->toBase(),\n\t\t\t'pageName' => $pageName,\n\t\t]);\n\t}\n\n\t// If we have a limit or a page name, we will grab that amount of items and return it\n\tif (isset($this->limit) || $pageName!== 'page') {\n\t\t$results = $this->simplePaginate($perPage, $columns);\n\n\t\treturn $this->paginator($results, $this->total(), $perPage, $page, [\n\t\t\t'path' => $this->toBase(),\n\t\t\t'pageName' => $pageName,\n\t\t]);\n\t}\n\n\t// If we don't have a limit or a page name, we will just get the results and return them\n\t$results = $this->get($columns);\n\n\treturn $this->paginator($results, $this->total(), $perPage, $page, [\n\t\t'path' => $this->toBase(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 47.352498943483766}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$this->authorize('reconcile', Reconciliation::class);\n$this->validate($request, [\n'ids' =>'required|array',\n'ids.*' =>'required|integer|exists:reconciliations,id',\n'started_at' =>'required|date',\n'ended_at' =>'required|date',\n]);\n$reconciliations = Reconciliation::whereIn('id', $request->ids)->get();\n\\DB::transaction(function () use ($reconciliations, $request) {\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n$transactions = Transaction::where('account_id', $reconciliation->account_id)\n->isNotReconciled()\n->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n->get();\nforeach ($transactions as $transaction) {\n$transaction->reconciled_at = now();\n$transaction->save();\n}\n}\n});\nreturn response()->json([\n'message' => 'Reconciliation completed successfully.',\n], 200);\n}", "CodeBleu_score": 44.05985719215699}, {"code": "<?\npublic function reconcile($request){\n\t$this->authorize('reconcile', Reconciliation::class);\n$this->authorize('reconcile', $request->reconciliation);\n$reconciliation = $request->reconciliation;\n$selectedRecords = $request->selectedRecords;\n$this->authorize('reconcile', $selectedRecords);\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\\DB::transaction(function () use ($reconciliation, $selectedRecords) {\n$reconciliation->save();\n$selectedRecords->each(function ($record) use ($reconciliation) {\n$record->reconciled_at = $reconciliation->reconciled_at;\n$record->save();\n});\n$reconciliation->transactions()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->update(['reconciled_at' => $reconciliation->reconciled_at]);\n});\nreturn response()->json([\n'success' => true,\n]);\n}", "CodeBleu_score": 35.95773550676717}, {"code": "<?\npublic function reconcile($request){\n\t$request->validate([", "CodeBleu_score": 6.493506495247201}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\nthrow new Exception(\"Failed to dispatch notification job: {$e->getMessage()}\");\n}\nreturn $invitation;\n}", "CodeBleu_score": 25.685188095179925}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n$invitation = $this->user->invitations()->create([\n'token' => Str::uuid(),\n]);\n$this->dispatch(new NotifyUserInvitation($invitation));\nreturn $invitation;\n}", "CodeBleu_score": 16.52144245686901}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t// Retrieve existing invitations for the user.\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n\t// Delete existing invitations.\n\t$invitations->each->delete();\n\n\t// Create a new invitation with a unique token.\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $this->user->id,\n\t\t'token' => Str::uuid(),\n\t]);\n\n\t// Attempt to dispatch a notification job to notify the user.\n\ttry {\n\t\t$this->dispatch(new NotifyUserInvitation($invitation));\n\t} catch (Exception $e) {\n\t\t// If the notification fails, throw an exception with an error message.\n\t\tthrow new Exception('Failed to notify user about the invitation.');\n\t}\n\n\t// Return the newly created invitation.\n\treturn $invitation;\n}", "CodeBleu_score": 36.73063442015199}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled) {\n\t\tthrow new Exception(\"Transaction has been reconciled. Please check your reconciliation process.\");\n\t}\n\tif ($this->isTransferTransaction) {\n\t\tthrow new Exception(\"Unauthorized transaction\");\n\t}\n}", "CodeBleu_score": 20.8169588916511}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isReconciled) {\n\t\tthrow new Exception(\"This transaction has been reconciled and cannot be authorized\");\n\t}\n\tif ($this->model->isTransferTransaction) {\n\t\tthrow new Exception(\"This transaction is a transfer transaction and cannot be authorized\");\n\t}\n}", "CodeBleu_score": 22.20121509067619}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isReconciled) {\n\t\tthrow new \\Exception(\"Transaction has been reconciled. Please do not authorize this transaction.\");\n\t}\n\tif ($this->model->isTransferTransaction) {\n\t\tthrow new \\Exception(\"Transfer transactions cannot be authorized.\");\n\t}\n}", "CodeBleu_score": 25.468104380363133}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\t// TODO: Implement this function\n\treturn true;\n}", "CodeBleu_score": 1.8407229387928892}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"tenant_user\") || tableName.equals(\"tenant_user_role\") || tableName.equals(\"tenant_role\") || tableName.equals(\"tenant_role_permission\") || tableName.equals(\"tenant_permission\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 13.989287133602051}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"tenant\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"role\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"permission\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"role_permission\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit_log\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit_log_audit\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit_log_audit_log\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit_log_audit_log_audit\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit_log_audit_log_audit_log\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit_log_audit_log_audit_log_audit\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_role_permission_history_audit_log_audit_log_audit_log_audit_log_", "CodeBleu_score": 13.407421614406811}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString jsonString = \"\";\n\ttry {\n\t\tList<Account> accounts = accountService.findAll();\n\t\tJSONArray jsonArray = new JSONArray();\n\t\tfor (Account account : accounts) {\n\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\tjsonObject.put(\"id\", account.getId());\n\t\t\tjsonObject.put(\"name\", account.getName());\n\t\t\tjsonArray.put(jsonObject);\n\t\t}\n\t\tjsonString = jsonArray.toString();\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while retrieving accounts: \" + e.getMessage());\n\t\tjsonString = \"{\\\"success\\\":false,\\\"message\\\":\\\"Error while retrieving accounts.\\\"}\";\n\t}\n\treturn jsonString;\n}", "CodeBleu_score": 52.36585065382151}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttry {\nList<Account> accounts = accountService.findAll();\nJSONArray jsonArray = new JSONArray();\nfor (Account account : accounts) {\nJSONObject jsonObject = new JSONObject();\njsonObject.put(\"id\", account.getId());\njsonObject.put(\"name\", account.getName());\njsonArray.add(jsonObject);\n}\nreturn jsonArray.toString();\n} catch (Exception e) {\nlog.error(\"Error while retrieving accounts\", e);\nreturn \"Error while retrieving accounts\";\n}\n}", "CodeBleu_score": 37.749980812752426}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accounts = accountService.findAll();\n\tString json = \"[\";\n\tfor (Account account : accounts) {\n\t\tjson += \"{\\\"id\\\":\\\"\" + account.getId() + \"\\\",\\\"name\\\":\\\"\" + account.getName() + \"\\\"},\";\n\t}\n\tif (json.length() > 1) {\n\t\tjson = json.substring(0, json.length() - 1);\n\t}\n\tjson += \"]\";\n\treturn json;\n}", "CodeBleu_score": 25.63773213627092}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\nBaseResponseInfo response = new BaseResponseInfo();\ntry {\n\nList<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n\nif (accounts!= null) {\n\nresponse.setCode(BaseResponseInfo.SUCCESS_CODE);\nresponse.setMessage(BaseResponseInfo.SUCCESS_MESSAGE);\nresponse.setListWithBalance(accounts);\nresponse.setListWithBalanceCount(accountService.listWithBalanceCount(name, serialNo));\n\n} else {\n\nresponse.setCode(BaseResponseInfo.FAILURE_CODE);\nresponse.setMessage(BaseResponseInfo.FAILURE_MESSAGE);\n\n}\n\n} catch (Exception e) {\n\nlogger.error(\"Error occurred while fetching accounts with balances\", e);\nresponse.setCode(BaseResponseInfo.FAILURE_CODE);\nresponse.setMessage(BaseResponseInfo.FAILURE_MESSAGE);\n\n}\n\nreturn response;\n\n}", "CodeBleu_score": 36.1868665041947}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response.setResponseCode(ResponseCode.SUCCESS.getCode());\n response.setResponseMessage(ResponseCode.SUCCESS.getMessage());\n response.setResponseObject(accountService.listWithBalance(name, serialNo, currentPage, pageSize));\n response.setResponseObjectCount(accountService.listWithBalanceCount(name, serialNo));\n } catch (Exception e) {\n logger.error(\"Error while listing accounts with balance\", e);\n response.setResponseCode(ResponseCode.FAILURE.getCode());\n response.setResponseMessage(ResponseCode.FAILURE.getMessage());\n }\n return response;\n }", "CodeBleu_score": 34.04231700639236}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n List<Account> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n int totalCount = accountService.listWithBalanceCount(name, serialNo);\n response.setResponseCode(BaseResponseInfo.SUCCESS_CODE);\n response.setResponseMessage(BaseResponseInfo.SUCCESS_MESSAGE);\n response.setResponseObject(accountList);\n response.setTotalCount(totalCount);\n } catch (Exception e) {\n response.setResponseCode(BaseResponseInfo.ERROR_CODE);\n response.setResponseMessage(BaseResponseInfo.ERROR_MESSAGE);\n logger.error(\"Error occurred while fetching account list with balance\", e);\n }\n return response;\n }", "CodeBleu_score": 38.813806636120034}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nAccountService accountService = new AccountService();\nStatistics statistics = accountService.getStatistics(name, serialNo);\nresponse.setCode(200);\nresponse.setData(statistics);\n} catch (Exception e) {\nresponse.setCode(500);\nresponse.setMessage(e.getMessage());\n}\nreturn response;\n}", "CodeBleu_score": 39.53739315402137}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(accountService.getStatistics(name, serialNo));\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t\tlog.error(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.73333466195211}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(accountService.getStatistics(name, serialNo));\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t\tlog.error(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.73333466195211}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n List<BillDetails> billDetails = accountHeadService.getBillDetailsByNumber(billNo);\n if(billDetails!= null && billDetails.size() > 0) {\n response.setStatus(200);\n response.setResponse(billDetails.get(0));\n }\n }catch (Exception e) {\n response.setStatus(500);\n response.setError(e.getMessage());\n logger.error(\"Error in getDetailByNumber\", e);\n }\n return response;\n }", "CodeBleu_score": 34.79274614437283}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response.setStatus(200);\n response.setMessage(\"Success\");\n response.setDetail(accountHeadService.getDetailByNumber(billNo));\n } catch (Exception e) {\n response.setStatus(500);\n response.setMessage(\"Error\");\n response.setDetail(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 28.429131855324393}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo responseInfo = new BaseResponseInfo();\n try {\n responseInfo.setStatusCode(200);\n responseInfo.setResponse(accountHeadService.getDetailByNumber(billNo));\n } catch (Exception e) {\n responseInfo.setStatusCode(500);\n responseInfo.setErrorMessage(e.getMessage());\n log.error(e.getMessage(), e);\n }\n return responseInfo;\n }", "CodeBleu_score": 30.22703106935452}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tUser user = (User) request.getSession().getAttribute(\"user\");\n\t\tDepot depot = depotService.findDepotByUserId(user.getId());\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(depot);\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setMessage(\"Error: \" + e.getMessage());\n\t\tlog.error(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 37.302902973996495}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nresponse.setCode(200);\nresponse.setData(depotService.findDepotByCurrentUser(request));\n} catch (Exception e) {\nresponse.setCode(500);\nresponse.setMessage(e.getMessage());\n}\nreturn response;\n}", "CodeBleu_score": 34.522233236032555}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nresponse.setCode(200);\nresponse.setMessage(\"Depot Information Retrieved Successfully\");\nresponse.setData(depotService.findDepotByCurrentUser(request));\n} catch (Exception e) {\nresponse.setCode(500);\nresponse.setMessage(\"Error Retrieving Depot Information\");\nlog.error(e.getMessage());\n}\nreturn response;\n}", "CodeBleu_score": 34.842000676428604}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\tList<RoleFunction> roleFunctionList = roleFunctionService.findByTypeAndKeyId(type, keyId);\n\tfor (RoleFunction roleFunction : roleFunctionList) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functionId\", roleFunction.getFunctionId());\n\t\tjsonObject.put(\"functionName\", roleFunction.getFunctionName());\n\t\tjsonObject.put(\"functionUrl\", roleFunction.getFunctionUrl());\n\t\tjsonObject.put(\"functionIcon\", roleFunction.getFunctionIcon());\n\t\tjsonObject.put(\"functionDescription\", roleFunction.getFunctionDescription());\n\t\tjsonObject.put(\"functionType\", roleFunction.getFunctionType());\n\t\tjsonObject.put(\"functionStatus\", roleFunction.getFunctionStatus());\n\t\tjsonObject.put(\"functionSort\", roleFunction.getFunctionSort());\n\t\tjsonObject.put(\"functionParentId\", roleFunction.getFunctionParentId());\n\t\tjsonObject.put(\"functionLevel\", roleFunction.getFunctionLevel());\n\t\tjsonObject.put(\"functionKey\", roleFunction.getFunctionKey());\n\t\tjsonObject.put(\"functionNameEn\", roleFunction.getFunctionNameEn());\n\t\tjsonObject.put(\"functionUrlEn\", roleFunction.getFunctionUrlEn());\n\t\tjsonObject.put(\"functionDescriptionEn\", roleFunction.getFunctionDescriptionEn());\n\t\tjsonObject.put(\"functionIconEn\", roleFunction.getFunctionIconEn());\n\t\tjsonObject.put(\"functionStatusEn\", roleFunction.getFunctionStatusEn());\n\t\tjsonObject.put(\"functionSortEn\", roleFunction.getFunctionSortEn());\n\t\tjsonObject.put(\"functionParentIdEn\", roleFunction.getFunctionParentIdEn());\n\t\tjsonObject.put(\"functionLevelEn\", roleFunction.getFunctionLevelEn());\n\t\tjsonObject.put(\"functionKeyEn\", roleFunction.getFunctionKeyEn());\n\t\tjsonObject.put(\"functionTypeEn\", roleFunction.getFunctionTypeEn());\n\t\tjsonObject.put(\"functionNameZh\", roleFunction.getFunctionNameZh());\n\t\tjsonObject.put(\"functionUrlZh\", roleFunction.getFunctionUrlZh());\n\t\tjsonObject.put(\"functionDescriptionZh\", roleFunction.getFunctionDescriptionZh());\n\t\tjsonObject.put(\"functionIconZh\", roleFunction.getFunctionIconZh());\n\t\tjsonObject.put(\"functionStatusZh\", roleFunction.getFunctionStatusZh());\n\t\tjsonObject.put(\"functionSortZh\", roleFunction", "CodeBleu_score": 21.129306894670233}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\tList<Function> functionList = getFunctionList(type, keyId);\n\tfor (Function function : functionList) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functionId\", function.getFunctionId());\n\t\tjsonObject.put(\"functionName\", function.getFunctionName());\n\t\tjsonObject.put(\"functionCode\", function.getFunctionCode());\n\t\tjsonObject.put(\"functionType\", function.getFunctionType());\n\t\tjsonObject.put(\"functionUrl\", function.getFunctionUrl());\n\t\tjsonObject.put(\"functionIcon\", function.getFunctionIcon());\n\t\tjsonObject.put(\"functionSort\", function.getFunctionSort());\n\t\tjsonObject.put(\"functionParentId\", function.getFunctionParentId());\n\t\tjsonObject.put(\"functionIsLeaf\", function.getFunctionIsLeaf());\n\t\tjsonObject.put(\"functionLevel\", function.getFunctionLevel());\n\t\tjsonObject.put(\"functionDescription\", function.getFunctionDescription());\n\t\tjsonObject.put(\"functionCreateDate\", function.getFunctionCreateDate());\n\t\tjsonObject.put(\"functionCreateBy\", function.getFunctionCreateBy());\n\t\tjsonObject.put(\"functionUpdateDate\", function.getFunctionUpdateDate());\n\t\tjsonObject.put(\"functionUpdateBy\", function.getFunctionUpdateBy());\n\t\tjsonObject.put(\"functionStatus\", function.getFunctionStatus());\n\t\tjsonObject.put(\"functionRemark\", function.getFunctionRemark());\n\t\tjsonObject.put(\"functionIsMenu\", function.getFunctionIsMenu());\n\t\tjsonObject.put(\"functionIsShow\", function.getFunctionIsShow());\n\t\tjsonObject.put(\"functionIsShowInMenu\", function.getFunctionIsShowInMenu());\n\t\tjsonObject.put(\"functionIsShowInButton\", function.getFunctionIsShowInButton());\n\t\tjsonObject.put(\"functionIsShowInTree\", function.getFunctionIsShowInTree());\n\t\tjsonObject.put(\"functionIsShowInToolbar\", function.getFunctionIsShowInToolbar());\n\t\tjsonObject.put(\"functionIsShowInGrid\", function.getFunctionIsShowInGrid());\n\t\tjsonObject.put(\"functionIsShowInSearch\", function.getFunctionIsShowInSearch());\n\t\tjsonObject.put(\"functionIsShowInTab\", function.getFunctionIsShowInTab());\n\t\tjsonObject.put(\"functionIsShowInDialog\", function.getFunctionIsShowInDialog());", "CodeBleu_score": 24.475741162283107}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray functionList = new JSONArray();\n\ttry {\n\t\tJSONArray jsonArray = new JSONArray();\n\t\tList<Function> functionList1 = functionService.getFunctionList(type, keyId);\n\t\tfor (Function function : functionList1) {\n\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\tjsonObject.put(\"id\", function.getId());\n\t\t\tjsonObject.put(\"name\", function.getName());\n\t\t\tjsonObject.put(\"url\", function.getUrl());\n\t\t\tjsonObject.put(\"description\", function.getDescription());\n\t\t\tjsonObject.put(\"icon\", function.getIcon());\n\t\t\tjsonObject.put(\"parentId\", function.getParentId());\n\t\t\tjsonObject.put(\"type\", function.getType());\n\t\t\tjsonObject.put(\"orderNum\", function.getOrderNum());\n\t\t\tjsonObject.put(\"isShow\", function.getIsShow());\n\t\t\tjsonObject.put(\"isEnable\", function.getIsEnable());\n\t\t\tjsonObject.put(\"isSystem\", function.getIsSystem());\n\t\t\tjsonObject.put(\"isMenu\", function.getIsMenu());\n\t\t\tjsonObject.put(\"isLeaf\", function.getIsLeaf());\n\t\t\tjsonObject.put(\"isPage\", function.getIsPage());\n\t\t\tjsonObject.put(\"isButton\", function.getIsButton());\n\t\t\tjsonObject.put(\"isView\", function.getIsView());\n\t\t\tjsonObject.put(\"isExport\", function.getIsExport());\n\t\t\tjsonObject.put(\"isImport\", function.getIsImport());\n\t\t\tjsonObject.put(\"isPrint\", function.getIsPrint());\n\t\t\tjsonObject.put(\"isExportAll\", function.getIsExportAll());\n\t\t\tjsonObject.put(\"isPrintAll\", function.getIsPrintAll());\n\t\t\tjsonObject.put(\"isImportAll\", function.getIsImportAll());\n\t\t\tjsonObject.put(\"isDelete\", function.getIsDelete());\n\t\t\tjsonObject.put(\"isUpdate\", function.getIsUpdate());\n\t\t\tjsonObject.put(\"isInsert\", function.getIsInsert());\n\t\t\tjsonObject.put(\"isSelect\", function.getIsSelect());\n\t\t\tjsonObject.put(\"isCheck\", function.getIsCheck());\n\t\t\tjsonObject.put(\"isPrint\", function.getIsPrint());\n\t\t\tjsonObject.put(\"isExport\", function.getIsExport());\n\t\t\tjsonObject.put(\"isImport\", function.getIsImport());\n\t\t\tjsonObject.put(\"isPrintAll\", function.getIsPrintAll());\n\t\t\tjsonObject.put(\"isExportAll\", function.getIsExportAll());\n\t\t\tjsonObject", "CodeBleu_score": 24.768904048905945}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig config = platformConfigService.getConfigByKey(platformKey);\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(config);\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception occurred while getting platform config info for key: \" + platformKey, e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 40.11868054419971}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse = platformConfigService.getInfoByKey(platformKey);\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setMessage(\"Success\");\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setMessage(\"Error\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 40.30934228958104}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfigInfo platformConfigInfo = platformConfigService.getInfoByKey(platformKey);\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(platformConfigInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 44.24554895682632}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// get the system configuration list\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\t// check if the list is not empty\n\t\tif (!systemConfigList.isEmpty()) {\n\t\t\t// set the response code to 200\n\t\t\tresponse.setResponseCode(200);\n\t\t\t// set the response data to the first item in the list\n\t\t\tresponse.setResponseData(systemConfigList.get(0));\n\t\t} else {\n\t\t\t// set the response code to 200\n\t\t\tresponse.setResponseCode(200);\n\t\t\t// set the response data to a new SystemConfig object\n\t\t\tresponse.setResponseData(new SystemConfig());\n\t\t}\n\t} catch (Exception e) {\n\t\t// log the error\n\t\tlogger.error(e.getMessage());\n\t\t// set the response code to 500\n\t\tresponse.setResponseCode(500);\n\t\t// set the response data to an error message\n\t\tresponse.setResponseData(getMessage(request, \"error.system.config.get\"));\n\t}\n\treturn response;\n}", "CodeBleu_score": 31.876419934878108}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Retrieve the system configuration list from the service\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\t// If the list is not empty, set the response code to 200 and include the first item in the response data\n\t\tif (systemConfigList!= null &&!systemConfigList.isEmpty()) {\n\t\t\tresponseInfo.setResponseCode(200);\n\t\t\tresponseInfo.setData(systemConfigList.get(0));\n\t\t}\n\t\t// If the list is empty, set the response code to 204\n\t\telse {\n\t\t\tresponseInfo.setResponseCode(204);\n\t\t}\n\t}\n\t// If an exception occurs, log the error, set the response code to 500, and include an error message in the response data\n\tcatch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponseInfo.setResponseCode(500);\n\t\tresponseInfo.setData(e.getMessage());\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 33.17376192938012}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tSystemConfigDAO configDAO = new SystemConfigDAO();\n\t\tList<SystemConfig> configList = configDAO.getSystemConfigList();\n\t\tif (configList!= null && configList.size() > 0) {\n\t\t\tresponse.setResponseCode(200);\n\t\t\tresponse.setData(configList.get(0));\n\t\t} else {\n\t\t\tresponse.setResponseCode(500);\n\t\t\tresponse.setData(\"No system configuration information found.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setData(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 35.86937250314165}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tString businessPath = request.getParameter(BUSINESS_PATH);\n\tString uploadType = request.getParameter(UPLOAD_TYPE);\n\tString fileName = request.getParameter(FILE_NAME);\n\tString fileType = request.getParameter(FILE_TYPE);\n\tString fileData = request.getParameter(FILE_DATA);\n\tString fileDataBase64 = request.getParameter(FILE_DATA_BASE64);\n\tString fileDataBase64Url = request.getParameter(FILE_DATA_BASE64_URL);\n\tString fileDataBase64UrlPrefix = request.getParameter(FILE_DATA_BASE64_URL_PREFIX);\n\tString fileDataBase64UrlSuffix = request.getParameter(FILE_DATA_BASE64_URL_SUFFIX);\n\tString fileDataBase64UrlSeparator = request.getParameter(FILE_DATA_BASE64_URL_SEPARATOR);\n\tString fileDataBase64UrlPrefixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SEPARATOR);\n\tString fileDataBase64UrlSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_PREFIX_SUFFIX_SEPARATOR);\n\tString fileDataBase64UrlPrefixSuffixSeparator = request.getParameter(FILE_DATA_BASE64_URL_", "CodeBleu_score": 14.2774787665215}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tString businessPath = request.getParameter(\"businessPath\");\n\tString fileName = request.getParameter(\"fileName\");\n\tString fileType = request.getParameter(\"fileType\");\n\tString fileData = request.getParameter(\"fileData\");\n\tString fileExtension = request.getParameter(\"fileExtension\");\n\tString fileId = request.getParameter(\"fileId\");\n\tString fileUrl = request.getParameter(\"fileUrl\");\n\tString fileSize = request.getParameter(\"fileSize\");\n\tString fileStatus = request.getParameter(\"fileStatus\");\n\tString fileVersion = request.getParameter(\"fileVersion\");\n\tString fileVersionId = request.getParameter(\"fileVersionId\");\n\tString fileVersionStatus = request.getParameter(\"fileVersionStatus\");\n\tString fileVersionUrl = request.getParameter(\"fileVersionUrl\");\n\tString fileVersionSize = request.getParameter(\"fileVersionSize\");\n\tString fileVersionDate = request.getParameter(\"fileVersionDate\");\n\tString fileVersionDescription = request.getParameter(\"fileVersionDescription\");\n\tString fileVersionAuthor = request.getParameter(\"fileVersionAuthor\");\n\tString fileVersionAuthorId = request.getParameter(\"fileVersionAuthorId\");\n\tString fileVersionAuthorName = request.getParameter(\"fileVersionAuthorName\");\n\tString fileVersionAuthorEmail = request.getParameter(\"fileVersionAuthorEmail\");\n\tString fileVersionAuthorAvatar = request.getParameter(\"fileVersionAuthorAvatar\");\n\tString fileVersionAuthorRole = request.getParameter(\"fileVersionAuthorRole\");\n\tString fileVersionAuthorRoleName = request.getParameter(\"fileVersionAuthorRoleName\");\n\tString fileVersionAuthorRoleDescription = request.getParameter(\"fileVersionAuthorRoleDescription\");\n\tString fileVersionAuthorRoleColor = request.getParameter(\"fileVersionAuthorRoleColor\");\n\tString fileVersionAuthorRoleIcon = request.getParameter(\"fileVersionAuthorRoleIcon\");\n\tString fileVersionAuthorRoleIconColor = request.getParameter(\"fileVersionAuthorRoleIconColor\");\n\tString fileVersionAuthorRoleIconBackgroundColor = request.getParameter(\"fileVersionAuthorRoleIconBackgroundColor\");\n\tString fileVersionAuthorRoleIconBackgroundImage = request.getParameter(\"fileVersionAuthorRoleIconBackgroundImage\");\n\tString fileVersionAuthorRoleIconBackgroundImageOpacity = request.getParameter(\"fileVersionAuthorRoleIconBackgroundImageOpacity\");\n\tString fileVersionAuthorRoleIconBackgroundImageSize = request.getParameter(\"fileVersionAuthor", "CodeBleu_score": 17.25910707331975}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tString businessPath = request.getParameter(Constants.BUSINESS_PATH);\n\tString uploadType = request.getParameter(Constants.UPLOAD_TYPE);\n\tString fileName = request.getParameter(Constants.FILE_NAME);\n\tString fileExtension = request.getParameter(Constants.FILE_EXTENSION);\n\tString fileSize = request.getParameter(Constants.FILE_SIZE);\n\tString fileType = request.getParameter(Constants.FILE_TYPE);\n\tString fileDate = request.getParameter(Constants.FILE_DATE);\n\tString fileTime = request.getParameter(Constants.FILE_TIME);\n\tString fileData = request.getParameter(Constants.FILE_DATA);\n\tString fileDataBase64 = request.getParameter(Constants.FILE_DATA_BASE64);\n\tString fileDataBinary = request.getParameter(Constants.FILE_DATA_BINARY);\n\tString fileDataBinaryBase64 = request.getParameter(Constants.FILE_DATA_BINARY_BASE64);\n\tString fileDataBinaryBase64Encoded = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED);\n\tString fileDataBinaryBase64EncodedSize = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED_SIZE);\n\tString fileDataBinaryBase64EncodedType = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED_TYPE);\n\tString fileDataBinaryBase64EncodedDate = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED_DATE);\n\tString fileDataBinaryBase64EncodedTime = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED_TIME);\n\tString fileDataBinaryBase64EncodedData = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED_DATA);\n\tString fileDataBinaryBase64EncodedDataBase64 = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED_DATA_BASE64);\n\tString fileDataBinaryBase64EncodedDataBinary = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_ENCODED_DATA_BINARY);\n\tString fileDataBinaryBase64EncodedDataBinaryBase64 = request.getParameter(Constants.FILE_DATA_BINARY_BASE64_", "CodeBleu_score": 15.971356008089144}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\t// TODO Auto-generated method stub\n\t\ttry {\n\t\t\t// get title, head, tip, and data list from JSON object\n\t\t\tString title = jsonObject.getString(\"title\");\n\t\t\tJSONArray head = jsonObject.getJSONArray(\"head\");\n\t\t\tJSONArray tip = jsonObject.getJSONArray(\"tip\");\n\t\t\tJSONArray data = jsonObject.getJSONArray(\"data\");\n\t\t\t// call service to perform the export\n\t\t\texportService.exportExcel(title, head, tip, data, response);\n\t\t} catch (JSONException e) {\n\t\t\tlog.error(\"Exception occurred while exporting data to Excel file: {}\", e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"Exception occurred while exporting data to Excel file: {}\", e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "CodeBleu_score": 55.36526313598239}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n JSONArray head = jsonObject.getJSONArray(\"head\");\n JSONArray tip = jsonObject.getJSONArray(\"tip\");\n JSONArray data = jsonObject.getJSONArray(\"data\");\n //\u8c03\u7528service\u65b9\u6cd5\n exportExcel(title, head, tip, data, response);\n } catch (Exception e) {\n log.error(\"Export Excel error: {}\", e.getMessage());\n }\n }", "CodeBleu_score": 62.386476608338626}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n//        try {\n//            // Get the title, head, tip, and data list from the JSON object\n//            String title = jsonObject.getString(\"title\");\n//            JSONArray head = jsonObject.getJSONArray(\"head\");\n//            JSONArray tip = jsonObject.getJSONArray(\"tip\");\n//            JSONArray data = jsonObject.getJSONArray(\"data\");\n//\n//            // Create a new ExcelExportService instance\n//            ExcelExportService excelExportService = new ExcelExportService();\n//\n//            // Call the export method of the ExcelExportService instance\n//            excelExportService.export(title, head, tip, data, response);\n//        } catch (Exception e) {\n//            // Log any exceptions that occur during the process\n//            logger.error(\"Error exporting data to Excel: {}\", e.getMessage());\n//        }\n    }", "CodeBleu_score": 4.842893009750053}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccount(obj.getString(\"account\"));\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setCurrency(obj.getString(\"currency\"));\n\t\taccount.setBank(obj.getString(\"bank\"));\n\t\taccount.setBankAccount(obj.getString(\"bankAccount\"));\n\t\taccount.setBankBranch(obj.getString(\"bankBranch\"));\n\t\taccount.setBankAccountType(obj.getString(\"bankAccountType\"));\n\t\taccount.setBankAccountNumber(obj.getString(\"bankAccountNumber\"));\n\t\taccount.setBankAccountHolder(obj.getString(\"bankAccountHolder\"));\n\t\taccount.setBankAccountHolderType(obj.getString(\"bankAccountHolderType\"));\n\t\taccount.setBankAccountHolderAddress(obj.getString(\"bankAccountHolderAddress\"));\n\t\taccount.setBankAccountHolderPhone(obj.getString(\"bankAccountHolderPhone\"));\n\t\taccount.setBankAccountHolderMobile(obj.getString(\"bankAccountHolderMobile\"));\n\t\taccount.setBankAccountHolderEmail(obj.getString(\"bankAccountHolderEmail\"));\n\t\taccount.setBankAccountHolderId(obj.getString(\"bankAccountHolderId\"));\n\t\taccount.setBankAccountHolderIdNumber(obj.getString(\"bankAccountHolderIdNumber\"));\n\t\taccount.setBankAccountHolderIdIssuedBy(obj.getString(\"bankAccountHolderIdIssuedBy\"));\n\t\taccount.setBankAccountHolderIdIssuedDate(obj.getString(\"bankAccountHolderIdIssuedDate\"));\n\t\taccount.setBankAccountHolderIdExpiredDate(obj.getString(\"bankAccountHolderIdExpiredDate\"));\n\t\taccount.setBankAccountHolderIdRemark(obj.getString(\"bankAccountHolderIdRemark\"));\n\t\taccount.setBankAccountHolderIdRemark2(obj.getString(\"bankAccountHolderIdRemark2\"));\n\t\taccount.setBankAccountHolderIdRemark3(obj.getString(\"bankAccountHolderIdRemark3\"));\n\t\taccount.setBankAccountHolderIdRemark4(obj.getString(\"bankAccountHolderIdRemark4\"));\n\t\taccount.setBankAccountHolderIdRemark5(obj.getString(\"bankAccountHolderIdRemark5\"));\n\t\taccount.setBankAccountHolderIdRemark6(obj.getString(\"bankAccountHolderIdRemark6\"));\n\t\taccount.setBankAccountHolderIdRemark7(obj.getString(\"bank", "CodeBleu_score": 14.676463858905967}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = parseObject(obj);\n\t\taccount.setEnabled(true);\n\t\taccount.setInitialAmount(0);\n\t\tif (account.getName().isEmpty()) {\n\t\t\taccount.setName(account.getAccountType());\n\t\t}\n\t\tif (account.getAccountType().equals(Account.DEFAULT_ACCOUNT_TYPE)) {\n\t\t\taccount.setIsDefault(true);\n\t\t}\n\t\tresult = insertSelective(account);\n\t\tinsertLog(request, account, \"insert\");\n\t} catch (Exception e) {\n\t\twriteFail(request, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 35.968772705940424}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\taccount.setAccountName(obj.getString(\"accountName\"));\n\taccount.setAccountType(obj.getString(\"accountType\"));\n\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\taccount.setAccountBalance(obj.getDouble(\"accountBalance\"));\n\taccount.setAccountBalanceDate(obj.getString(\"accountBalanceDate\"));\n\taccount.setAccountBalanceTime(obj.getString(\"accountBalanceTime\"));\n\taccount.setAccountBalanceBy(obj.getString(\"accountBalanceBy\"));\n\taccount.setAccountBalanceByDate(obj.getString(\"accountBalanceByDate\"));\n\taccount.setAccountBalanceByTime(obj.getString(\"accountBalanceByTime\"));\n\taccount.setAccountBalanceByIP(obj.getString(\"accountBalanceByIP\"));\n\taccount.setAccountBalanceByBrowser(obj.getString(\"accountBalanceByBrowser\"));\n\taccount.setAccountBalanceByOS(obj.getString(\"accountBalanceByOS\"));\n\taccount.setAccountBalanceByDevice(obj.getString(\"accountBalanceByDevice\"));\n\taccount.setAccountBalanceByDeviceID(obj.getString(\"accountBalanceByDeviceID\"));\n\taccount.setAccountBalanceByDeviceName(obj.getString(\"accountBalanceByDeviceName\"));\n\taccount.setAccountBalanceByDeviceModel(obj.getString(\"accountBalanceByDeviceModel\"));\n\taccount.setAccountBalanceByDeviceVersion(obj.getString(\"accountBalanceByDeviceVersion\"));\n\taccount.setAccountBalanceByDeviceManufacturer(obj.getString(\"accountBalanceByDeviceManufacturer\"));\n\taccount.setAccountBalanceByDeviceBrand(obj.getString(\"accountBalanceByDeviceBrand\"));\n\taccount.setAccountBalanceByDeviceProduct(obj.getString(\"accountBalanceByDeviceProduct\"));\n\taccount.setAccountBalanceByDeviceSerialNumber(obj.getString(\"accountBalanceByDeviceSerialNumber\"));\n\taccount.setAccountBalanceByDeviceIMEI(obj.getString(\"accountBalanceByDeviceIMEI\"));\n\taccount.setAccountBalanceByDeviceMAC(obj.getString(\"accountBalanceByDeviceMAC\"));\n\taccount.setAccountBalanceByDeviceSIM(obj.getString(\"accountBalanceByDeviceSIM\"));\n\taccount.setAccountBalanceByDeviceLanguage(obj.getString(\"accountBalanceBy", "CodeBleu_score": 12.854339686277196}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while getting the count of accounts with the specified name and serial number.\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.324921643840938}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception occurred while getting count of accounts with name \" + name + \" and serial number \" + serialNo, e);\n\t}\n\treturn null;\n}", "CodeBleu_score": 27.63634750933268}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn countsByAccount.get(name + serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving count for account: \" + name + serialNo, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 23.52266867329541}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"deleteDepotItem error\", e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 60.72859966405557}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"deleteDepotItem(Long id, HttpServletRequest request)throws Exception\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.767243277015524}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"deleteDepotItem\", e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 61.04201766477048}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\t// Create an HTTP client and set the base URL\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\t\tString url = \"http://localhost:8080/api/v1/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\n\t\t// Create an HTTP request\n\t\tHttpGet request = new HttpGet(url);\n\n\t\t// Execute the request and get the response\n\t\tHttpResponse response = client.execute(request);\n\n\t\t// Process the response\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\tString responseBody = EntityUtils.toString(response.getEntity());\n\t\t\tif (responseBody.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close resources\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 40.02000216758256}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\n/**\n * This function adds a node to a specified project by sending an HTTP GET request to a given endpoint. It creates an HTTP client and constructs the request URL using the project name, node type, and node key. It executes the request, processes the response, and returns true if the response contains a key; otherwise, it returns false. Any exceptions are caught and printed, and resources are closed in the finally block.\n */", "CodeBleu_score": 3.256651537871598}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\tString url = \"http://\" + this.getHost() + \":\" + this.getPort() + \"/api/v1/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\tHttpGet request = new HttpGet(url);\n\ttry {\n\t\tHttpResponse response = client.execute(request);\n\t\tString responseBody = EntityUtils.toString(response.getEntity());\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tif (responseBody.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Exception caught: \" + e.getMessage());\n\t} finally {\n\t\tclient.close();\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.779554036550365}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient client = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tclient = HttpClients.createDefault();\n\t\tString url = String.format(\"%s://%s:%d/edge/%s/%s/%s/%s/%s\", getProtocol(), getHost(), getPort(), projectName, edgeType, fromType, toType, from, to);\n\t\tHttpGet request = new HttpGet(url);\n\t\tresponse = client.execute(request);\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tJSONObject json = readValue(response.getEntity());\n\t\t\treturn json.has(\"key\");\n\t\t}\n\t\treturn false;\n\t} catch (IOException e) {\n\t\tthrow new RuntimeException(e);\n\t} finally {\n\t\ttry {\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\ttry {\n\t\t\tif (client!= null) {\n\t\t\t\tclient.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.00839567750151}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient client = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tclient = createDefault();\n\t\tString url = getHost() + \":\" + getPort() + \"/project/\" + projectName + \"/edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\t\tHttpGet request = new HttpGet(url);\n\t\tresponse = client.execute(request);\n\t\treturn readValue(response);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tif (response!= null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (client!= null) {\n\t\t\ttry {\n\t\t\t\tclient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.474906787007775}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\n// Create a CloseableHttpClient instance\nCloseableHttpClient httpClient = HttpClients.createDefault();\n\n// Create a URI object from the endpoint URL\nURI uri = URI.create(endpoint + \"/addEdge\");\n\n// Create a HttpGet object with the URI\nHttpGet httpGet = new HttpGet(uri);\n\n// Add query parameters to the HttpGet object\nhttpGet.addParameter(\"project\", projectName);\nhttpGet.addParameter(\"edgeType\", edgeType);\nhttpGet.addParameter(\"fromType\", fromType);\nhttpGet.addParameter(\"toType\", toType);\nhttpGet.addParameter(\"from\", from);\nhttpGet.addParameter(\"to\", to);\n\n// Execute the request and get the response\nCloseableHttpResponse response = null;\ntry {\n    response = httpClient.execute(httpGet);\n    // Get the response status code\n    int statusCode = response.getStatusLine().getStatusCode();\n    // Get the response body as a String\n    String responseBody = EntityUtils.toString(response.getEntity());\n    // Parse the response body as a JSON object\n    JSONObject json = new JSONObject(responseBody);\n    // Check if the \"key\" field exists in the JSON object\n    if (json.has(\"key\")) {\n        // Get the \"key\" field value\n        String key = json.getString(\"key\");\n        // Return true if the \"key\" field is not null\n        return key!= null;\n    } else {\n        // Return false if the \"key\" field does not exist\n        return false;\n    }\n} catch (IOException | JSONException e) {\n    // Handle exceptions\n    e.printStackTrace();\n    return false;\n} finally {\n    // Close the resources\n    if (response!= null) {\n        try {\n            response.close();\n        } catch (IOException e) {\n            // Handle exceptions\n            e.printStackTrace();\n        }\n    }\n    if (httpClient!= null) {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            // Handle exceptions\n            e.printStackTrace();\n        }\n    }\n}\n}", "CodeBleu_score": 44.63184875922405}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString json = valueAsString(event);\n\t\tif (event.getTarget()!= null) {\n\t\t\tsend(event.getTarget(), json);\n\t\t} else {\n\t\t\tsend(\"test\", json);\n\t\t}\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 23.49318987614963}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString jsonString = \"\";\n\ttry {\n\t\tjsonString = writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tif (event.getTarget()!= null) {\n\t\tsend(event.getTarget(), jsonString);\n\t} else {\n\t\tsend(\"test\", jsonString);\n\t}\n\tflush();\n}", "CodeBleu_score": 33.93687724899727}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(getLocation());\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString json = writeValueAsString(event);\n\t\tif (event.getTarget()!= null) {\n\t\t\tsend(event.getTarget(), json);\n\t\t} else {\n\t\t\tsend(\"test\", json);\n\t\t}\n\t\tflush();\n\t}\n}", "CodeBleu_score": 22.199837819163125}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// 1. \u521d\u59cb\u5316OSSClient\n\tOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n\t// 2. \u4e0a\u4f20\u6587\u4ef6\u6d41\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n\t// 3. \u5173\u95edOSSClient\u3002\n\tossClient.shutdown();\n\n\t// 4. \u8fd4\u56de\u4e0a\u4f20\u6210\u529f\u540e\u7684URL\n\treturn getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 38.857227400710606}, {"code": "public String upload(String objName, byte[] content){\n\t\t// 1. Get access credentials\n\tString accessKeyId = getAccessKeyId();\n\tString accessKeySecret = getAccessKeySecret();\n\n\t// 2. Create a client\n\tOSSClient client = new OSSClient(getEndpoint(), accessKeyId, accessKeySecret);\n\n\t// 3. Upload file\n\tString bucketName = getOssBucket();\n\tString url = client.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// 4. Shutdown client\n\tclient.shutdown();\n\n\t// 5. Return the URL of the uploaded object\n\treturn url;\n}", "CodeBleu_score": 36.60882663946586}, {"code": "public String upload(String objName, byte[] content){\n\t\tString url = null;\n\ttry {\n\t\t// \u521b\u5efaOSSClient\u5b9e\u4f8b\n\t\tOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\t\t// \u4e0a\u4f20\u6587\u4ef6\n\t\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\t\t// \u5173\u95edOSSClient\n\t\tossClient.shutdown();\n\t\turl = \"http://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn url;\n}", "CodeBleu_score": 44.2659029614247}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\t// Get the IpToLocationWorker instance\n\tIpToLocationWorker worker = ensureIpToLocationWorker();\n\t// Get the location information\n\tLocationInfo locationInfo = worker.getIpToLocation(ipAddress);\n\t// Return the location information\n\treturn locationInfo;\n}", "CodeBleu_score": 23.975412861723992}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tensureIpToLocationWorker();\n\treturn ipToLocationWorker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 10.388556171175033}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipToLocationWorker == null) {\n\t\tensureIpToLocationWorker();\n\t}\n\treturn ipToLocationWorker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 16.90636901419083}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\nsynchronized (this) {\nif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\nif (this.clusterHostList == null || this.clusterHostPort == null) {\nthis.parseHosts();\n}\nthis.build();\n}\n}\n}\n}", "CodeBleu_score": 18.957664428571487}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient!= null && highLevelClient!= null) {\nreturn;\n}\nsynchronized (this) {\nif (lowLevelClient!= null && highLevelClient!= null) {\nreturn;\n}\nparseHosts();\nlowLevelClient = new LowLevelClient(builder.build());\nhighLevelClient = new RestClient(builder.build());\n}\n}", "CodeBleu_score": 39.492896757205415}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (esClient == null || esClient.isClosed()) {", "CodeBleu_score": 5.635859515747967}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tString[] hosts = StringUtils.split(clusterHostList, \",\");\n\tList<HttpHost> httpHosts = new ArrayList<HttpHost>(hosts.length);\n\tfor (String host : hosts) {\n\t\tString trimmedHost = StringUtils.trim(host);\n\t\tint indexOfColon = StringUtils.indexOf(trimmedHost, \":\");\n\t\tif (indexOfColon == -1) {\n\t\t\thttpHosts.add(new HttpHost(trimmedHost, clusterPort));\n\t\t} else {\n\t\t\tString hostName = StringUtils.substring(trimmedHost, 0, indexOfColon);\n\t\t\tint port = StringUtils.parseInt(StringUtils.substring(trimmedHost, indexOfColon + 1), clusterPort);\n\t\t\thttpHosts.add(new HttpHost(hostName, port));\n\t\t}\n\t}\n\treturn httpHosts;\n}", "CodeBleu_score": 41.10913892633418}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tString[] hosts = clusterHostList.split(\",\");\n\tList<HttpHost> httpHosts = new ArrayList<HttpHost>(hosts.length);\n\tfor (String host : hosts) {\n\t\tString hostPort = host.trim();\n\t\tint port = clusterPort;\n\t\tif (hostPort.contains(\":\")) {\n\t\t\tString[] hostAndPort = hostPort.split(\":\");\n\t\t\thostPort = hostAndPort[0];\n\t\t\tport = Integer.parseInt(hostAndPort[1]);\n\t\t}\n\t\thttpHosts.add(new HttpHost(hostPort, port));\n\t}\n\treturn httpHosts;\n}", "CodeBleu_score": 46.5059923592066}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tString[] hosts = clusterHostList.split(\",\");\n\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\tfor (String host : hosts) {\n\t\thost = host.trim();\n\t\tint index = host.indexOf(\":\");\n\t\tif (index == -1) {\n\t\t\thttpHosts.add(new HttpHost(host, clusterPort));\n\t\t} else {\n\t\t\thttpHosts.add(new HttpHost(host.substring(0, index), Integer.parseInt(host.substring(index + 1))));\n\t\t}\n\t}\n\treturn httpHosts;\n}", "CodeBleu_score": 50.653047330986276}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Poll for a task with a 30-second timeout\n\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\tif (task!= null) {\n\t\t\t// Check the task type\n\t\t\tif (task.getType().equals(TaskType.PLAIN_TEXT_MESSAGE)) {\n\t\t\t\t// Extract the recipient number and message data\n\t\t\t\tString recipientNumber = task.getRecipientNumber();\n\t\t\t\tString messageData = task.getMessageData();\n\n\t\t\t\t// Validate the message data\n\t\t\t\tif (validateMessageData(messageData)) {\n\t\t\t\t\t// Send the message\n\t\t\t\t\tsendPlainTextMessage(recipientNumber, messageData);\n\t\t\t\t} else {\n\t\t\t\t\t// Log an error message\n\t\t\t\t\tlogger.error(\"Invalid message data: \" + messageData);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// No task found; sleep for 1 second\n\t\t\tThread.sleep(1000);\n\t\t}\n\t}\n}", "CodeBleu_score": 22.103994423003712}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t// Poll for tasks with a 30-second timeout\n\tTask task = poll(30000);\n\t// Check task type\n\tif (task.getType() == Task.Type.PLAIN_TEXT_MESSAGE) {\n\t\t// Extract recipient number and message data\n\t\tString recipient = task.getRecipient();\n\t\tString message = task.getMessage();\n\t\t// Validate message data\n\t\tif (recipient == null || message == null) {\n\t\t\t// Log error message\n\t\t\tlog.error(\"Invalid message data: recipient = \" + recipient + \", message = \" + message);\n\t\t} else {\n\t\t\t// Send message\n\t\t\tsendPlainTextMessage(recipient, message);\n\t\t}\n\t} else {\n\t\t// Log error message\n\t\tlog.error(\"Invalid task type: \" + task.getType());\n\t}\n}", "CodeBleu_score": 19.880167025361878}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task!= null) {\n\t\t\tswitch (task.getType()) {\n\t\t\t\tcase PLAIN_TEXT_MESSAGE:\n\t\t\t\t\tPlainTextMessage plainTextMessage = (PlainTextMessage) task;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsendPlainTextMessage(plainTextMessage.getRecipient(), plainTextMessage.getMessage());\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"Error sending message\", e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlogger.warn(\"Unhandled task type: \" + task.getType());\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 22.171850018731188}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpClient = getHttpClient();\nHttpGet httpGet = new HttpGet(uri);\nCloseableHttpResponse httpResponse = httpClient.execute(httpGet);\ntry {\nHttpEntity entity = httpResponse.getEntity();\nif (entity!= null) {\nString response = EntityUtils.toString(entity, \"UTF-8\");\nlog.info(\"Response: \" + response);\nreturn response;\n}\n} finally {\nhttpResponse.close();\n}\nreturn null;\n}", "CodeBleu_score": 56.38729353443544}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\nHttpGet httpget = new HttpGet(uri);\nCloseableHttpResponse response = httpclient.execute(httpget);\ntry {\nHttpEntity entity = response.getEntity();\nif (entity!= null) {\nString responseString = EntityUtils.toString(entity, \"UTF-8\");\nlog.info(responseString);\nreturn responseString;\n}\n} finally {\nresponse.close();\n}\nreturn null;\n}", "CodeBleu_score": 63.046357028933286}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpClient = getHttpClient();\nHttpGet request = new HttpGet(uri);\nCloseableHttpResponse response = httpClient.execute(request);\ntry {\nHttpEntity entity = response.getEntity();\nif (entity!= null) {\nString responseContent = EntityUtils.toString(entity, \"UTF-8\");\nlog.info(responseContent);\nreturn responseContent;\n}\n} finally {\nresponse.close();\n}\nreturn null;\n}", "CodeBleu_score": 60.32368658834755}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = null;\n\ttry {\n\t\tDocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t\tDocument doc = docBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\t\tNodeList nodeList = doc.getDocumentElement().getChildNodes();\n\t\tmap = decodeNodeToMap(nodeList, doTrim);\n\t} catch (Exception e) {\n\t\tthrow new Exception(e);\n\t}\n\treturn map;\n}", "CodeBleu_score": 37.78185196378722}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tMap<String, Object> map = new HashMap<String, Object>();\nDocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\nDocument doc = docBuilder.parse(new InputSource(new StringReader(messageXmlStr)));\nNodeList nodeList = doc.getChildNodes();\nfor (int i = 0; i < nodeList.getLength(); i++) {\nNode node = nodeList.item(i);\nif (node.getNodeType() == Node.ELEMENT_NODE) {\nString[] pair = decodeNodeToMap(node, doTrim);\nif (pair!= null) {\nmap.put(pair[0], pair[1]);\n}\n}\n}\nreturn map;\n}", "CodeBleu_score": 47.68518224519765}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\tDocumentBuilder documentBuilder = null;\n\tDocument document = null;\n\tElement rootElement = null;\n\tNodeList rootChildNodes = null;\n\tString key = null;\n\tString value = null;\n\tString tempValue = null;\n\tString tempValue2 = null;\n\tString tempValue3 = null;\n\tString tempValue4 = null;\n\tString tempValue5 = null;\n\tString tempValue6 = null;\n\tString tempValue7 = null;\n\tString tempValue8 = null;\n\tString tempValue9 = null;\n\tString tempValue10 = null;\n\tString tempValue11 = null;\n\tString tempValue12 = null;\n\tString tempValue13 = null;\n\tString tempValue14 = null;\n\tString tempValue15 = null;\n\tString tempValue16 = null;\n\tString tempValue17 = null;\n\tString tempValue18 = null;\n\tString tempValue19 = null;\n\tString tempValue20 = null;\n\tString tempValue21 = null;\n\tString tempValue22 = null;\n\tString tempValue23 = null;\n\tString tempValue24 = null;\n\tString tempValue25 = null;\n\tString tempValue26 = null;\n\tString tempValue27 = null;\n\tString tempValue28 = null;\n\tString tempValue29 = null;\n\tString tempValue30 = null;\n\tString tempValue31 = null;\n\tString tempValue32 = null;\n\tString tempValue33 = null;\n\tString tempValue34 = null;\n\tString tempValue35 = null;\n\tString tempValue36 = null;\n\tString tempValue37 = null;\n\tString tempValue38 = null;\n\tString tempValue39 = null;\n\tString tempValue40 = null;\n\tString tempValue41 = null;\n\tString tempValue42 = null;\n\tString tempValue43 = null;\n\tString tempValue44 = null;\n\tString tempValue45 = null;\n\tString tempValue46 = null", "CodeBleu_score": 16.92630435683191}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\t// Determine if order is eligible for auto-processing\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\t// Get order id\n\tfinal int c_Order_ID = orderRecord.getC_Order_ID();\n\n\t// Get transaction name\n\tfinal String trxName = getTrxName(orderRecord);\n\n\t// Schedule order for auto processing if eligible\n\tif (isEligibleForAutoProcessing) {\n\t\t// Log action\n\t\taddLog(c_Order_ID, trxName, \"Auto processing order\");\n\n\t\t// Enqueue order for auto processing\n\t\tenqueue(c_Order_ID, trxName);\n\t} else {\n\t\t// Log action\n\t\taddLog(c_Order_ID, trxName, \"Order not eligible for auto processing\");\n\n\t\t// Schedule creation of missing shipment schedules if they are not postponed\n\t\tscheduleIfNotPostponed(c_Order_ID, trxName);\n\t}\n}", "CodeBleu_score": 37.184083668087254}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tenqueueGenerateSchedulesAfterCommit(orderRecord.get_ID());\n}", "CodeBleu_score": 7.933204501442927}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlog.info(\"Enqueueing order {} for automatic processing.\", orderRecord.getC_Order_ID());\n\t\tenqueue(orderRecord, TransactionName.AUTO_PROCESSING_ORDER_AFTER_COMMIT);\n\t} else {\n\t\tlog.info(\"Not eligible for automatic processing of order {}. Scheduling missing shipment schedules.\", orderRecord.getC_Order_ID());\n\t\tenqueue(orderRecord, TransactionName.SCHEDULE_MISSING_SHIPMENT_SCHEDULES);\n\t}\n}", "CodeBleu_score": 21.794658599764244}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->guard->getProvider()->retrieveByCredentials($request->only($this->username(), 'password'));\nif ($user &&! $this->guard->getProvider()->validateCredentials($user, $request)) {\n$this->fireFailedEvent($request);\nthrow new AuthenticationException;\n}\nreturn $user;\n}", "CodeBleu_score": 39.76086983917596}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->guard->getProvider()->retrieveByCredentials($request->only($this->username(), 'password'));\nif ($user && $this->guard->getProvider()->validateCredentials($user, $request)) {\nreturn $user;\n}\n$this->fireFailedEvent($request);\nthrow new AuthenticationException;\n}", "CodeBleu_score": 39.92159185654577}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tthis->lastAttempted = $user = $this->guard->getProvider()->retrieveByCredentials($request->only($this->credentials()));\nif ($this->hasValidCredentials($user, $request)) {\nreturn $user;\n}\n$this->fireFailedEvent($request, $user);\nthrow new AuthenticationException;\n}", "CodeBleu_score": 39.920116723547984}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->limiter->increment($request);\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 70.69267723292124}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tif ($this->limiter->tooManyAttempts($request, $this->maxAttempts)) {\n$this->limiter->lock($request, $this->decayMinutes);\nthrow ValidationException::withMessages([\n$this->username() => [trans('auth.throttle', ['seconds' => $this->decayMinutes * 60])],\n]);\n}\n$this->limiter->hit($request);\n}", "CodeBleu_score": 48.98826435344098}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 89.17727496393344}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\tdata = [\n\t\t'user' => User::find($request->session()->get('login.id')),\n\t];\n\n\tif ($request->session()->get('login.remember')) {\n\t\t$data['remember'] = true;\n\t}\n\n\tif (optional($data['user'])->two_factor_secret &&! is_null(optional($data['user'])->two_factor_confirmed_at)) {\n\t\t$data['twoFactor'] = true;\n\t}\n\n\treturn Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse();\n}", "CodeBleu_score": 30.207677601647866}, {"code": "<?\npublic function toResponse($request){\n\t*\n * This function generates a response for a two-factor authentication challenge. It retrieves the user ID from the session and fetches the user. If the user exists, it prepares a WebAuthn assertion and includes the public key in the response data. It then renders the 'TwoFactorChallenge' view with data indicating whether two-factor authentication is enabled and if the \"remember me\" option is set, and returns the response.\n */\n$user = User::find($request->session()->get('login.id'));\nif (! $user) {\nreturn redirect()->route('login');\n}\n$data = [\n'publicKey' => Webauthn::prepareAssertion($user),\n];\nreturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n'remember' => $request->session()->get('login.remember'),\n])->toResponse($request);\n}", "CodeBleu_score": 54.79451489682003}, {"code": "<?\npublic function toResponse($request){\n\t*\n * This function generates a response for a two-factor authentication challenge. It retrieves the user ID from the session and fetches the user. If the user exists, it prepares a WebAuthn assertion and includes the public key in the response data. It then renders the 'TwoFactorChallenge' view with data indicating whether two-factor authentication is enabled and if the \"remember me\" option is set, and returns the response.\n */\n$this->user = User::find($request->session()->get('login.id'));\nif ($this->user) {\n$this->publicKey = Webauthn::prepareAssertion($this->user);\n}\nreturn $this->render('Auth/TwoFactorChallenge', [\n'twoFactor' => optional($this->user)->two_factor_secret &&! is_null(optional($this->user)->two_factor_confirmed_at),\n'remember' => $request->session()->get('login.remember'),\n])->toResponse($request);\n}", "CodeBleu_score": 41.7565290071798}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$user = UserToken::firstWhere('driver', $driver)\n->where('socialite_id', $socialite->getId())\n->first();\nif ($user) {\n$user = $this->getUserOrCreate($user);\n$this->checkUserAssociation($user, $request);\n} else {\n$user = $this->createUserToken($request, $driver, $socialite);\n}\nreturn $user;\n}", "CodeBleu_score": 47.74408973210677}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t// Check if there is an existing user token for the given driver and socialite user ID.\n\t$userToken = UserToken::firstWhere([\n\t\t'driver' => $driver,\n\t\t'socialite_id' => $socialite->getId(),\n\t]);\n\n\t// If found, retrieve the associated user and verify the user association.\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\t\t$this->checkUserAssociation($user, $request->ip());\n\t\treturn $user;\n\t}\n\n\t// If not, create a new user or associate the socialite token with an existing user.\n\treturn $this->createUserToken($request, $driver, $socialite);\n}", "CodeBleu_score": 43.46110217202959}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$user = $this->getUserOrCreate($socialite, $driver);\n$this->checkUserAssociation($user, $socialite, $driver);\n$this->createUserToken($user, $socialite, $driver);\nreturn $user;\n}", "CodeBleu_score": 25.390112993795235}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t// Get the user from the request.\n\t$user = $request->user();\n\n\t// If no user is found, return false.\n\tif (! $user) {\n\t\treturn false;\n\t}\n\n\t// Validate the assertion using the filtered credentials.\n\t$validated = $this->validateAssertion($request, $user);\n\n\t// If validation fails, trigger a failed authentication event, throw an authentication exception, and return false.\n\tif (! $validated) {\n\t\t$this->fireFailedEvent($request);\n\n\t\tthrow new AuthenticationException();\n\t}\n\n\t// If successful, return true.\n\treturn true;\n}", "CodeBleu_score": 53.74325096808275}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $request->user();\n\tif (! $user) {\n\t\treturn false;\n\t}\n\t$credentials = $this->filterCredentials($request);\n\ttry {\n\t\t$this->guard->validateAssertion($user, $credentials);\n\t} catch (AuthenticationException $e) {\n\t\t$this->fireFailedEvent($request, $e);\n\t\tthrow new AuthenticationException($e->getMessage(), $e->getCode(), $e);\n\t}\n\treturn true;\n}", "CodeBleu_score": 54.23243762709544}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\tif (! $request->user()) {\n\t\treturn false;\n\t}\n\n\t$this->validateAssertion($request);\n\n\t$this->fireFailedEvent($request);\n\n\tthrow new AuthenticationException('Invalid authentication credentials.');\n}", "CodeBleu_score": 29.982969095556598}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif ($this->option['email'] == null) {\n\t\t$this->error('No email provided');\n\t\treturn null;\n\t}\n\ttry {\n\t\t$user = User::where('email', $this->option['email'])->firstOrFail();\n\t\treturn $user;\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 55.14043615635538}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->option['email'])) {\n\t\t$this->error(\"No email provided.\");\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $this->option['email'])->firstOrFail();\n\t} catch (Exception $e) {\n\t\t$this->error(\"User not found.\");\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 31.801187300777784}, {"code": "<?\nprivate function user(): ?User{\n\tif(empty($this->option['email'])) {\n\t\t$this->error = 'Email address is required.';\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $this->option['email'])->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error = 'User not found.';\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 37.69681268969388}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush')) {\n$indexes = config('scout.indexes');\nforeach ($indexes as $index => $settings) {\n$tableName = (new $index)->getTable();\n$this->info('Flushing Meilisearch index: '. $tableName);\n$this->call('scout:flush', ['model' => $index]);\n}\n$this->info('Meilisearch indexes flushed.');\n}\n}", "CodeBleu_score": 51.47624049839945}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush')) {\nif ($this->app->bound('meilisearch')) {\n$meilisearch = $this->app->make('meilisearch');\n$indexes = $meilisearch->getIndexes();\nforeach ($indexes as $index) {\n$tableName = $index->getTable();\n$this->call('scout:flush', [\n'--model' => $tableName,\n'--driver' =>'meilisearch',\n]);\n}\n$this->info('Meilisearch indexes flushed.');\n}\n}\n}", "CodeBleu_score": 45.19592740921694}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver')!=='meilisearch' ||! $this->option('flush')) {\nreturn;\n}\n\n$indexes = config('scout.indexes');\n\nforeach ($indexes as $index) {\n$table = (new $index)->getTable();\n$this->call('scout:flush', ['--model' => $index, '--table' => $table]);\n}\n\n$this->info('Meilisearch indexes have been flushed.');\n}", "CodeBleu_score": 44.15797524320965}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\tif ($vcard === null) {\n\t\t$vcard = new VCard();\n\t\t$vcard->setUid(Uuid::uuid4());\n\t\t$vcard->setVersion(VCard::VERSION_4_0);\n\t}\n\n\tforeach ($this->exporters as $exporter) {\n\t\t$vcard = $exporter->export($vcard, $resource);\n\t}\n\n\treturn $vcard;\n}", "CodeBleu_score": 24.09812132350012}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\n\tif ($vcard === null) {\n\t\t$vcard = new VCard();\n\t\t$vcard->setUid(Uuid::uuid4());\n\t\t$vcard->setVersion(VCard::VERSION_4_0);\n\t}\n\n\tforeach ($this->exporters as $exporter) {\n\t\t$vcard = $exporter->export($vcard, $resource);\n\t}\n\n\treturn $vcard;\n}", "CodeBleu_score": 24.09812132350012}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\t$this->setUid($vcard);\n\t$this->applyExporters($vcard, $resource);\n\treturn $vcard;\n}", "CodeBleu_score": 13.524806109564702}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\nif ($obj === null) {\nreturn false;\n}\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue($this->highPriorityQueue);\n} elseif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue($this->highPriorityQueue);\n} else {\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 74.98125013524866}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$this->user->account_id", "CodeBleu_score": 9.308510639480284}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$this->getObject\n$obj = $this->getObject($addressBookId, $cardUri)\nif (!$obj) {\nreturn false;\n}\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue\n} elseif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue\n} else {\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 69.08159900528929}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\tif (request()->hasFile('file')) {\n\t\t$leadActivity = $this->activityRepository->create($data, auth()->guard()->user());\n\t\t$file = request()->file('file')->store('public/files');\n\t\treturn $this->fileRepository->create(['name' => request()->file('file')->getClientOriginalName(), 'path' => $file, 'lead_activity_id' => $leadActivity->id]);\n\t}\n}", "CodeBleu_score": 45.698304452691765}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->activityRepository->create($data);\n\t$leadActivity->files()->create([\n\t\t'name' => request()->file('file')->getClientOriginalName,\n\t\t'storage_path' => request()->file('file')->store('lead_activity_files'),\n\t]);\n\n\treturn $leadActivity->files->first();\n}", "CodeBleu_score": 35.077537453641625}, {"code": "<?\npublic function upload(array $data){\n\t\t// Check if a file is present in the request\n\tif (request()->hasFile('file')) {\n\t\t// Create a new lead activity record with the provided data and the authenticated user\n\t\t$activity = $this->activityRepository->create($data, auth()->guard()->user());\n\t\t// Create a new file record with the file's name and storage path\n\t\t$file = $this->fileRepository->create(request()->file('file'), $activity);\n\t\t// Return the new file record\n\t\treturn $file;\n\t}\n}", "CodeBleu_score": 39.07887964966058}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$request = request();\n\t$route = $request->route();\n\n\tif ($route->getName() === 'admin.session.create') {\n\t\treturn $this->renderAdminSessionCreateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.create') {\n\t\treturn $this->renderFrontSessionCreateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.destroy') {\n\t\treturn $this->renderFrontSessionDestroyResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.restore') {\n\t\treturn $this->renderFrontSessionRestoreResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.update') {\n\t\treturn $this->renderFrontSessionUpdateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.create') {\n\t\treturn $this->renderFrontSessionCreateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.destroy') {\n\t\treturn $this->renderFrontSessionDestroyResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.restore') {\n\t\treturn $this->renderFrontSessionRestoreResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.update') {\n\t\treturn $this->renderFrontSessionUpdateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.create') {\n\t\treturn $this->renderFrontSessionCreateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.destroy') {\n\t\treturn $this->renderFrontSessionDestroyResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.restore') {\n\t\treturn $this->renderFrontSessionRestoreResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.update') {\n\t\treturn $this->renderFrontSessionUpdateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.create') {\n\t\treturn $this->renderFrontSessionCreateResponse($exception);\n\t}\n\n\tif ($route->getName() === 'front.session.destroy') {\n\t\treturn", "CodeBleu_score": 22.246244553975515}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn $this->renderNotFoundResponse($exception);\n\t} elseif ($exception instanceof PDOException) {\n\t\treturn $this->renderPDOErrorResponse($exception);\n\t} elseif ($exception instanceof ParseError) {\n\t\treturn $this->renderParseErrorResponse($exception);\n\t} elseif ($exception instanceof HttpException) {\n\t\treturn $this->renderHttpException($exception);\n\t}\n\treturn $this->renderGeneralErrorResponse($exception);\n}", "CodeBleu_score": 27.176843138267603}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif (in_array($exception->getCode(), [404, 500])) {\n\t\t$response = $this->response->setStatusCode($exception->getCode());\n\t} elseif ($exception instanceof ModelNotFoundException) {\n\t\t$response = $this->response->setStatusCode(404);\n\t} elseif ($exception instanceof PDOException) {\n\t\t$response = $this->response->setStatusCode(500);\n\t} elseif ($exception instanceof ParseError) {\n\t\t$response = $this->response->setStatusCode(500);\n\t} else {\n\t\t$response = $this->response->setStatusCode(500);\n\t}\n\treturn $response;\n}", "CodeBleu_score": 36.861337436212054}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t\t$request = request();\n\t$expectsJson = $request->expectsJson();\n\t$response = [\n\t\t'path' => $path,\n\t\t'statusCode' => $statusCode,\n\t];\n\tif ($expectsJson) {\n\t\t$response = response()->json($response, $statusCode);\n\t} else {\n\t\t$response = response()->view('errors.'. $statusCode, $response, $statusCode);\n\t}\n\treturn $response;\n}", "CodeBleu_score": 44.35206400178545}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'message' => trans('errors.'.$path),\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view('errors.'.$path, [], $statusCode);\n}", "CodeBleu_score": 52.538883248419786}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => 'Error '. $statusCode. ': '. $path\n\t\t], $statusCode);\n\t} else {\n\t\treturn response()->view('errors.'. $statusCode, [], $statusCode);\n\t}\n}", "CodeBleu_score": 54.20856165074426}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$ids = request()->input('ids');\n$isDone = request()->input('is_done');\n$updates = 0;\nforeach($ids as $id) {\n$activity = $this->activityRepository->find($id);\nif($activity) {\n$activity->is_done = $isDone;\n$activity->save();\n$updates++;\n}\n}\n$response = [\n'success' => $updates > 0? true : false,\n'count' => $updates\n];\nreturn response()->json($response);\n}", "CodeBleu_score": 33.10941093314201}, {"code": "<?\npublic function massUpdate(){\n\t$ids = request()->get('ids');\n$updates = 0;\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\nif ($activity) {\n$activity->is_done = request()->get('is_done');\n$activity->save();\n$updates++;\n}\n}\nif ($updates > 0) {\nevent(new ActivityUpdated($updates));\nreturn response()->json(['success' => true,'message' => 'Activities updated successfully!']);\n}\nelse {\nreturn response()->json(['success' => false,'message' => 'No activities were updated.']);\n}\n}", "CodeBleu_score": 36.379770684623836}, {"code": "<?\npublic function massUpdate(){\n\t$ids = request()->input('ids');\n$updates = 0;\nforeach ($ids as $id) {\n$activity = Activity::find($id);\nif ($activity) {\n$activity->is_done = request()->input('is_done');\n$activity->save();\n$updates++;\n}\n}\nif ($updates > 0) {\n$response = [\n'success' => true,\n'message' => $updates.'activity(s) updated successfully',\n];\n} else {\n$response = [\n'success' => false,\n'message' => 'No activities were updated',\n];\n}\nreturn response()->json($response);\n}", "CodeBleu_score": 34.14174002894567}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$ids = $this->request->input('ids');\nif (!empty($ids)) {\nforeach ($ids as $id) {\n$activity = Activity::find($id);\nif (empty($activity)) {\ncontinue;\n}\nEvent::dispatch(new ActivityDeleted($activity));\n$activity->delete();\n}\n}\nreturn response()->json(trans('crudbooster.delete_all_success'));\n}", "CodeBleu_score": 24.720322414668342}, {"code": "<?\n public function massDestroy(){\n\t$this->authorize('delete', Activity::class);\n$activityIds = $this->request->get('ids');\nforeach ($activityIds as $activityId) {\n$activity = Activity::find($activityId);\n$activity->delete();\nEvent::dispatch('activity.deleted', $activity);\n}\nreturn response()->json(['message' => trans('crud.deleted_all', ['model' => trans('activity.name')])]);\n}", "CodeBleu_score": 37.807629980151624}, {"code": "<?\n public function massDestroy(){\n\t$ids = $this->request->get('ids');\n$ids = explode(',', $ids);\n$activities = $this->activityRepository->find($ids);\nforeach ($activities as $activity) {\n$this->activityRepository->delete($activity);\n}\nreturn response()->json([\n'success' => true,\n'message' => trans('cruds.activity.deleting_mass'),\n]);\n}", "CodeBleu_score": 29.865873990983104}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\trequest = request()->all();\n$cards = $this->dashboardHelper->getCards();\n\nforeach ($request['cards'] as $card) {\nforeach ($cards as $index => $cardData) {\nif ($cardData['id'] == $card['id']) {\n$cards[$index]['selected'] = $card['selected'];\n}\n}\n}\n\nreturn response()->json($cards);\n}", "CodeBleu_score": 44.46544005350398}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n$request = request()->all();\n\nforeach ($request as $card) {\nforeach ($cards as $key => $value) {\nif ($card['id'] == $value['id']) {\n$cards[$key]['selected'] = $card['selected'];\n}\n}\n}\n\nreturn response()->json($cards);\n}", "CodeBleu_score": 44.1581475253309}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n $request = request()->all();\n $updatedCards = [];\n foreach ($cards as $card) {\n if (in_array($card['id'], $request['selected'])) {\n $card['selected'] = true;\n } else {\n $card['selected'] = false;\n }\n $updatedCards[] = $card;\n }\n return response()->json($updatedCards);\n }", "CodeBleu_score": 40.263038101423085}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\tEvent::dispatch(new ConfigurationCreated($configuration));\n$this->configurationRepository->create($request->all());\nsession()->flash('success', trans('configuration.create.success'));\nreturn redirect()->back();\n}", "CodeBleu_score": 36.26263397241736}, {"code": "<?\npublic function store(){\n\tEvent::dispatch(new ConfigurationCreated($request->all()));\n$this->configurationRepository->create($request->all());\nsession()->flash('success', 'Configuration created successfully.');\nreturn redirect()->back();\n}", "CodeBleu_score": 30.088033841950335}, {"code": "<?\npublic function store(){\n\t$this->configurationRepository->create(request()->all());\nsession()->flash('success', 'Configuration created successfully.');\nreturn redirect()->back();\n}", "CodeBleu_score": 28.58350992953801}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$fileName = request()->route('filename');\n$configuration = $this->configurationRepository->findOneByField('filename', $fileName);\nif ($configuration) {\n$filePath = storage_path('app/'. $configuration->getValue());\nreturn response()->download($filePath);\n} else {\nreturn response('File not found', 404);\n}\n}", "CodeBleu_score": 46.78705031194482}, {"code": "<?\npublic function download(){\n\t$file_path = request()->route()->parameters['file_path'];\n$file_name = request()->route()->parameters['file_name'];\n$configuration = $this->configurationRepository->findOneByField('file_path', $file_path);\n$file_path = $configuration->get('file_path');\nreturn Storage::download($file_path, $file_name);\n}", "CodeBleu_score": 48.21738217493598}, {"code": "<?\npublic function download(){\n\t// Retrieve the file path from the request parameters\n$file_path = $this->request->route('file_path');\n// Construct the full file name\n$file_name = $this->configurationRepository->findOneByField('file_name', $file_path)->value;\n// Fetch the configuration from the repository\n$configuration = $this->configurationRepository->findOneByField('file_name', $file_name);\n// Return the file for download\nreturn Storage::download($file_path, $file_name);\n}", "CodeBleu_score": 41.21830882933645}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\n}", "CodeBleu_score": 4.81262677663159}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> list2 = new ArrayList<AdminModelSort>();\n\tfor (String s : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setModel(s);\n\t\tlist2.add(modelSort);\n\t}\n\tList<AdminModelSort> list3 = new ArrayList<AdminModelSort>();\n\tlist3.addAll(list2);\n\tString userId = getUserId();\n\tif (userId!= null) {\n\t\tAdminModelSort.remove(userId);\n\t\tAdminModelSort.saveBatch(list3);\n\t}\n\treturn ok();\n}", "CodeBleu_score": 28.33093232134305}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\n}", "CodeBleu_score": 4.81262677663159}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\t// Check if the module is CRM.\n\tif (moduleSetting.getModule().equalsIgnoreCase(\"CRM\")) {\n\t\treturn Result.error(\"Cannot update CRM module setting.\");\n\t}\n\n\t// Get the current admin configuration by the setting ID.\n\tAdminConfiguration adminConfiguration = adminConfigurationService.getById(moduleSetting.getSettingId());\n\tif (adminConfiguration == null) {\n\t\treturn Result.error(\"Cannot find admin configuration by setting ID.\");\n\t}\n\n\t// Update the status of the admin configuration and save the updated setting.\n\tadminConfiguration.setStatus(moduleSetting.getStatus());\n\tadminConfigurationService.save(adminConfiguration);\n\n\treturn Result.ok(\"Module setting status updated successfully.\");\n}", "CodeBleu_score": 49.33751802668039}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tResult result = new Result();\n\tModuleSettingBO moduleSettingBO = null;\n\tif (moduleSetting.getId()!= null) {\n\t\tmoduleSettingBO = moduleSettingDAO.getById(moduleSetting.getId());\n\t\tif (moduleSettingBO!= null) {\n\t\t\tif (moduleSettingBO.getModule().equals(Module.CRM.getName())) {\n\t\t\t\tresult.setStatus(Status.ERROR);\n\t\t\t\tresult.setError(new Error(ErrorCode.MODULE_SETTING_UPDATE_ERROR, \"Module setting update error. CRM module cannot be updated.\"));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tmoduleSettingBO.setStatus(moduleSetting.getStatus());\n\t\t\tmoduleSettingDAO.save(moduleSettingBO);\n\t\t\tresult.setStatus(Status.OK);\n\t\t\tresult.setValue(moduleSettingBO);\n\t\t\treturn result;\n\t\t}\n\t}\n\tresult.setStatus(Status.ERROR);\n\tresult.setError(new Error(ErrorCode.MODULE_SETTING_UPDATE_ERROR, \"Module setting update error.\"));\n\treturn result;\n}", "CodeBleu_score": 39.999371464544204}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tResult result = new Result();\n\tif (moduleSetting.getSettingId() == null) {\n\t\tresult.error(\"Invalid setting ID\");\n\t\treturn result;\n\t}\n\tif (moduleSetting.getStatus() == null) {\n\t\tresult.error(\"Invalid status\");\n\t\treturn result;\n\t}\n\tif (moduleSetting.getStatus() == ModuleSettingStatus.ENABLED) {\n\t\tif (moduleSetting.getModule().equals(Module.CRM)) {\n\t\t\tresult.error(\"Cannot enable CRM module\");\n\t\t\treturn result;\n\t\t}\n\t}\n\tModuleSetting setting = moduleSettingRepository.findById(moduleSetting.getSettingId()).orElse(null);\n\tif (setting == null) {\n\t\tresult.error(\"Invalid setting ID\");\n\t\treturn result;\n\t}\n\tsetting.setStatus(moduleSetting.getStatus());\n\tmoduleSettingRepository.save(setting);\n\tresult.ok();\n\treturn result;\n}", "CodeBleu_score": 42.19448737605933}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tUser user = User.getCurrent();\n\tUserConfig userConfig = UserConfig.queryUserConfigByName(user, customKey);\n\tif (userConfig == null) {\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setUserId(user.getId());\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toString());\n\t\tuserConfig.save();\n\t} else {\n\t\tuserConfig.setValue(json.toString());\n\t\tuserConfig.updateById();\n\t}\n\treturn Result.ok();\n}", "CodeBleu_score": 49.63710726892352}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n}", "CodeBleu_score": 7.1426324062336555}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// TODO Auto-generated method stub\n\treturn null;\n}", "CodeBleu_score": 7.208225180606746}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"User does not exist\");\n\t}\n\tString deptName = adminUserService.getDeptName(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn Result.success(user);\n}", "CodeBleu_score": 49.60399864699973}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"User not found\");\n\t}\n\tuser.setDeptName(adminDeptService.getDeptName(user.getDeptId()));\n\tuser.setPassword(null);\n\tuser.setSalt(null);\n\treturn Result.success(user);\n}", "CodeBleu_score": 41.315668463637074}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tResult<AdminUser> result = new Result<>();\nAdminUser user = adminUserDao.getById(userId);\nif (user == null) {\nresult.setSuccess(false);\nresult.setMessage(\"User not found.\");\nreturn result;\n}\nString deptName = adminDeptDao.getDeptName(user.getDeptId());\nuser.setDeptName(deptName);\nuser.setSalt(null);\nuser.setPassword(null);\nresult.setSuccess(true);\nresult.setMessage(\"User information retrieved successfully.\");\nresult.setData(user);\nreturn result;\n}", "CodeBleu_score": 48.00344624899212}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tString userId = getUserId();\n\tList<Notice> notices = Notice.find.where().eq(\"userId\", userId).findList();\n\tif (notices.size() > 1) {\n\t\tfor (Notice notice : notices) {\n\t\t\tnotice.setStatus(1);\n\t\t\tnotice.save();\n\t\t}\n\t} else {\n\t\tNotice notice = new Notice();\n\t\tnotice.setStatus(1);\n\t\tnotice.setUserId(userId);\n\t\tnotice.save();\n\t}\n\treturn ok(\"Success\");\n}", "CodeBleu_score": 27.110197018216514}, {"code": " public Result readNotice() {\n\t\nString userId = getUserId();\n\nList<Notice> noticeList = Notice.find.where().eq(\"userId\", userId).eq(\"status\", 0).findList();\n\nif (noticeList.size() > 1) {\n\nfor (Notice notice : noticeList) {\n\nnotice.setStatus(1);\nnotice.save();\n\n}\n\nreturn ok(Json.toJson(new Result(true, \"Read notice successfully\")));\n\n} else if (noticeList.size() == 1) {\n\nNotice notice = noticeList.get(0);\nnotice.setStatus(1);\nnotice.save();\n\nreturn ok(Json.toJson(new Result(true, \"Read notice successfully\")));\n\n} else {\n\nNotice notice = new Notice();\nnotice.setUserId(userId);\nnotice.setStatus(1);\nnotice.save();\n\nreturn ok(Json.toJson(new Result(true, \"Read notice successfully\")));\n\n}\n\n}", "CodeBleu_score": 32.9468511226273}, {"code": " public Result readNotice() {\n\t\t//get current user ID\n\tString userId = getUserId();\n\t//check if there are multiple \"readNotice\" entries for the user\n\tList<ReadNotice> readNotices = lambdaQuery(ReadNotice.class, \"userId\", userId);\n\t//if more than one entry exists, update the status to 1 for all matching entries\n\tif (readNotices.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.save();\n\t\t}\n\t}\n\t//if not, create a new \"readNotice\" entry with status 1 and save it\n\telse {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\t//return success result\n\treturn ok(Json.toJson(new Result(\"success\")));\n}", "CodeBleu_score": 25.62499369855722}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tString companyInfo = adminCompanyBO.getCompanyInfo();\n\tString configName = \"companyInfo\";\n\tString configValue = companyInfo;\n\tString configDescription = \"Company Information\";\n\tString configType = \"json\";\n\tString configStatus = \"active\";\n\tString configGroup = \"admin\";\n\tString configCreatedBy = \"admin\";\n\tString configUpdatedBy = \"admin\";\n\tString configCreatedDate = \"2019-08-01 12:00:00\";\n\tString configUpdatedDate = \"2019-08-01 12:00:00\";\n\tString configLastUpdate = \"2019-08-01 12:00:00\";\n\n\t// Get the existing configuration or create a new one\n\tConfiguration config = new Configuration();\n\tconfig.setName(configName);\n\tConfiguration existingConfig = configurationService.findOne(config);\n\tif (existingConfig!= null) {\n\t\tconfig = existingConfig;\n\t}\n\n\t// Update the configuration's value\n\tconfig.setValue(configValue);\n\n\t// Save or update the configuration\n\tconfig.setDescription(configDescription);\n\tconfig.setType(configType);\n\tconfig.setStatus(configStatus);\n\tconfig.setGroup(configGroup);\n\tconfig.setCreatedBy(configCreatedBy);\n\tconfig.setUpdatedBy(configUpdatedBy);\n\tconfig.setCreatedDate(configCreatedDate);\n\tconfig.setUpdatedDate(configUpdatedDate);\n\tconfig.setLastUpdate(configLastUpdate);\n\tconfigurationService.saveOrUpdate(config);\n}", "CodeBleu_score": 28.688550805343983}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tCompanyInfo companyInfo = CompanyInfo.findCompanyInfoByName(\"companyInfo\");\n\tif (companyInfo == null) {\n\t\tcompanyInfo = new CompanyInfo();\n\t\tcompanyInfo.setName(\"companyInfo\");\n\t\tcompanyInfo.setValue(adminCompanyBO.getCompanyInfo());\n\t\tcompanyInfo.save();\n\t} else {\n\t\tcompanyInfo.setValue(adminCompanyBO.getCompanyInfo());\n\t\tcompanyInfo.saveOrUpdate();\n\t}\n}", "CodeBleu_score": 25.475914773355917}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tConfiguration companyInfo = Configuration.find(\"byName\", \"companyInfo\").first();\n\tif (companyInfo == null) {\n\t\tcompanyInfo = new Configuration(\"companyInfo\");\n\t}\n\tcompanyInfo.setValue(adminCompanyBO.toJSONString());\n\tcompanyInfo.save();\n}", "CodeBleu_score": 26.282469236974816}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO config = new AdminCompanyBO();\n\n\t// Retrieve the configuration\n\tString configValue = getValue(configKey);\n\tif (configValue!= null) {\n\t\tconfig = parseObject(configValue, AdminCompanyBO.class);\n\t}\n\n\treturn config;\n}", "CodeBleu_score": 26.97333690858011}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = null;\n\tString adminConfigKey = \"admin_company_config\";\n\tString adminConfigValue = \"\";\n\ttry {\n\t\tadminConfigValue = getAdminConfigValue(adminConfigKey);\n\t\tif (adminConfigValue!= null && adminConfigValue.length() > 0) {\n\t\t\tadminCompanyBO = parseAdminCompanyBO(adminConfigValue);\n\t\t} else {\n\t\t\tadminCompanyBO = new AdminCompanyBO();\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error retrieving admin configuration for company\", e);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 36.941938790915074}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO config = new AdminCompanyBO();\n\tString key = \"admin_config\";\n\tString value = null;\n\ttry {\n\t\tvalue = getAdminConfig(key);\n\t\tif (value!= null) {\n\t\t\tconfig = parseObject(value, AdminCompanyBO.class);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn config;\n}", "CodeBleu_score": 34.60845708267385}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tString logConfigName = \"LogWelcomeSpeech\";\n\tString logConfigType = \"LogConfiguration\";\n\tString logConfigProperty = \"logWelcomeSpeech\";\n\tString logConfigProperty2 = \"logWelcomeSpeech2\";\n\tString logConfigProperty3 = \"logWelcomeSpeech3\";\n\tString logConfigProperty4 = \"logWelcomeSpeech4\";\n\tString logConfigProperty5 = \"logWelcomeSpeech5\";\n\tString logConfigProperty6 = \"logWelcomeSpeech6\";\n\tString logConfigProperty7 = \"logWelcomeSpeech7\";\n\tString logConfigProperty8 = \"logWelcomeSpeech8\";\n\tString logConfigProperty9 = \"logWelcomeSpeech9\";\n\tString logConfigProperty10 = \"logWelcomeSpeech10\";\n\tString logConfigProperty11 = \"logWelcomeSpeech11\";\n\tString logConfigProperty12 = \"logWelcomeSpeech12\";\n\tString logConfigProperty13 = \"logWelcomeSpeech13\";\n\tString logConfigProperty14 = \"logWelcomeSpeech14\";\n\tString logConfigProperty15 = \"logWelcomeSpeech15\";\n\tString logConfigProperty16 = \"logWelcomeSpeech16\";\n\tString logConfigProperty17 = \"logWelcomeSpeech17\";\n\tString logConfigProperty18 = \"logWelcomeSpeech18\";\n\tString logConfigProperty19 = \"logWelcomeSpeech19\";\n\tString logConfigProperty20 = \"logWelcomeSpeech20\";\n\tString logConfigProperty21 = \"logWelcomeSpeech21\";\n\tString logConfigProperty22 = \"logWelcomeSpeech22\";\n\tString logConfigProperty23 = \"logWelcomeSpeech23\";\n\tString logConfigProperty24 = \"logWelcomeSpeech24\";\n\tString logConfigProperty25 = \"logWelcomeSpeech25\";\n\tString logConfigProperty26 = \"logWelcomeSpeech26\";\n\tString logConfigProperty27 = \"logWelcomeSpeech27\";\n\tString logConfigProperty28 = \"logWelcomeSpeech28\";\n\tString logConfigProperty29 = \"logWelcomeSpeech29\";\n\tString logConfigProperty30 = \"logWelcomeSpeech30\";\n\tString logConfigProperty31 = \"logWelcomeSpeech31\";\n\tString logConfigProperty32 = \"logWelcomeSpeech3", "CodeBleu_score": 12.238372349608696}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tif (stringList == null || stringList.size() == 0) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\t// Create a list of AdminConfig objects for each string in the list\n\t\tList<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n\t\tfor (String string : stringList) {\n\t\t\tAdminConfig adminConfig = new AdminConfig();\n\t\t\tadminConfig.setName(string);\n\t\t\tadminConfigList.add(adminConfig);\n\t\t}\n\n\t\t// Set the properties of each AdminConfig object\n\t\tfor (AdminConfig adminConfig : adminConfigList) {\n\t\t\tadminConfig.setValue(\"logWelcomeSpeech\");\n\t\t\tadminConfig.setStatus(\"enabled\");\n\t\t}\n\n\t\t// Remove existing configurations with the specified log configuration name\n\t\tString[] args = { \"logConfiguration\", \"logWelcomeSpeech\" };\n\t\tAdminTask.remove(args);\n\n\t\t// Save the new list of configurations in batch\n\t\tAdminConfig.saveBatch(adminConfigList);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 32.53354301043526}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\t// Create the log welcome speech AdminConfig objects\n\tList<AdminConfig> logWelcomeSpeechList = new ArrayList<AdminConfig>();\n\tfor (String string : stringList) {\n\t\tAdminConfig logWelcomeSpeech = AdminConfig.create(logConfig, \"logWelcomeSpeech\", string);\n\t\tlogWelcomeSpeechList.add(logWelcomeSpeech);\n\t}\n\n\t// Remove existing log welcome speech configurations\n\tAdminConfig.remove(logConfig, \"logWelcomeSpeech\");\n\n\t// Save the new list of log welcome speech configurations\n\tAdminConfig.saveBatch(logConfig, logWelcomeSpeechList);\n}", "CodeBleu_score": 32.0682767047155}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = adminInitDataBO.getPassword();\n\tString username = adminInitDataBO.getUsername();\n\tString userId = adminInitDataBO.getUserId();\n\tString salt = adminInitDataBO.getSalt();\n\tString hashedPassword = adminInitDataBO.getHashedPassword();\n\tString passwordHash = getPasswordHash(password, salt);\n\tif (passwordHash.equals(hashedPassword)) {\n\t\tString code = generateRandomInt(1000000, 9999999);\n\t\tsetex(userId, code, 600);\n\t\treturn code;\n\t}\n\tthrow new InvalidPasswordException(\"Invalid Password\");\n}", "CodeBleu_score": 32.376827070821484}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = adminInitDataBO.getPassword();\n\tString username = adminInitDataBO.getUsername();\n\tString userId = adminInitDataBO.getUserId();\n\tString salt = adminInitDataBO.getSalt();\n\tString hashedPassword = getPassword(password, salt);\n\tif (hashedPassword.equals(adminInitDataBO.getHashedPassword())) {\n\t\tString accessCode = generateRandomInt(10);\n\t\tsetex(accessCode, 10 * 60, userId);\n\t\treturn accessCode;\n\t}\n\tthrow new RuntimeException(\"Invalid password\");\n}", "CodeBleu_score": 28.468861504634297}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = ();\n\tString username = adminInitDataBO.getUsername();\n\tString salt = adminInitDataBO.getSalt();\n\tString passwordHash = adminInitDataBO.getPassword();\n\tString userId = adminInitDataBO.getUserId();\n\tString redisKey = \"temp_access_code_\" + userId;\n\tString redisValue = getRedis().get(redisKey);\n\tString currentUsername = getUsername(userId);\n\tif (currentUsername.equals(username)) {\n\t\tif (passwordHash.equals(getPassword(username, salt))) {\n\t\t\tString tempAccessCode = generateRandomInt();\n\t\t\tsetex(redisKey, tempAccessCode, 600);\n\t\t\treturn tempAccessCode;\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Invalid password\");\n\t\t}\n\t} else {\n\t\tthrow new RuntimeException(\"Invalid username\");\n\t}\n}", "CodeBleu_score": 32.96236226167738}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized:\" + userId;\n\tList<String> unauthorizedUrls = getRedis().lrange(key, 0, -1);\n\treturn!unauthorizedUrls.contains(initialAuthUrl);\n}", "CodeBleu_score": 29.381413160796267}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized:\" + userId;\n\tList<String> unauthorizedUrls = getRedis().lrange(key, 0, -1);\n\tif (unauthorizedUrls.contains(initAuthUrl)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 32.024810115055516}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized_urls_\" + userId;\n\tList<String> unauthorizedUrls = getRedis().lrange(key, 0, -1);\n\tif (unauthorizedUrls.contains(initialAuthUrl)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 32.288700797487124}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(roleMenuList);\n}", "CodeBleu_score": 54.03230340896127}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tAdminRoleMenu roleMenu = null;\nList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\nfor (Integer menuId : menuIdList) {\nroleMenu = new AdminRoleMenu();\nroleMenu.setRoleId(roleId);\nroleMenu.setMenuId(menuId);\nroleMenuList.add(roleMenu);\n}\nsaveBatch(roleMenuList);\n}", "CodeBleu_score": 43.43625795675313}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 67.00479360537585}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\tif (sysLog == null) {\n\t\treturn;\n\t}\n\ttry {\n\t\t// get log index\n\t\tString logIndex = getSysLogIndex();\n\t\t// convert log object to a map\n\t\tMap<String, Object> logMap = beanToMap(sysLog);\n\t\t// format creation time\n\t\tString createTime = formatDateTime(sysLog.getCreateTime());\n\t\t// remove id\n\t\tlogMap.remove(\"id\");\n\t\t// create index request\n\t\tIndexRequest indexRequest = new IndexRequest(logIndex, \"syslog\", createTime).source(logMap);\n\t\t// submit index request to client\n\t\texecute(indexRequest);\n\t} catch (Exception e) {\n\t\t// log error message\n\t\tString message = String.format(\"Error saving system log: %s\", sysLog.getMessage());\n\t\tLOGGER.error(message, e);\n\t}\n}", "CodeBleu_score": 43.88851737846027}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\t// Retrieve the log index.\n\tString logIndex = getSysLogIndex();\n\t// Convert the log object to a map.\n\tMap<String, Object> logMap = beanToMap(sysLog);\n\t// Format the creation time.\n\tString createTime = formatDateTime(sysLog.getCreateTime());\n\t// Remove the ID.\n\tlogMap.remove(\"id\");\n\t// Create an index request.\n\tIndexRequest indexRequest = new IndexRequest(logIndex, \"log\", createTime)\n\t\t\t.source(logMap);\n\t// Submit the request to the Elasticsearch client.\n\ttry {\n\t\texecute(indexRequest);\n\t} catch (Exception e) {\n\t\t// Log the error message.\n\t\terror(\"Error saving system log: \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 40.72949141147474}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\t// Get the log index\n\tString index = getSysLogIndex();\n\t// Convert the log to a map\n\tMap<String, Object> logMap = beanToMap(sysLog);\n\t// Format the creation time\n\tString createTime = formatDateTime(sysLog.getCreateTime());\n\t// Remove the ID\n\tlogMap.remove(\"_id\");\n\t// Create the index request\n\tIndexRequest request = new IndexRequest(index).source(logMap);\n\t// Submit the request to the Elasticsearch client\n\ttry {\n\t\texecute(request);\n\t} catch (IOException e) {\n\t\t// Log the error message\n\t\tlogger.error(\"Error saving system log: {}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 42.293154436614756}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tBasePage<SysLog> page = new BasePage<SysLog>();\n\ttry {\n\t\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n\t\tsearchSourceBuilder.sort(\"created_at\", SortOrder.DESC);\n\t\tsearchSourceBuilder.fetchSource(false);\n\t\tsearchSourceBuilder.size(querySysLogBO.getPageSize());\n\t\tsearchSourceBuilder.from(querySysLogBO.getOffset());\n\t\tSearchRequest searchRequest = new SearchRequest(getIndexAliases());\n\t\tsearchRequest.types(SysLog.TYPE);\n\t\tsearchRequest.source(searchSourceBuilder);\n\t\tSearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);\n\t\tif (searchResponse.getHits().getHits().length == 0) {\n\t\t\treturn page;\n\t\t}\n\t\tSysLog[] sysLogs = mapToBean(searchResponse);\n\t\tpage.setTotal(searchResponse.getHits().getTotalHits().value);\n\t\tpage.setCurrent(querySysLogBO.getPageIndex());\n\t\tpage.setList(Arrays.asList(sysLogs));\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error while querying system logs\", e);\n\t}\n\treturn page;\n}", "CodeBleu_score": 46.937184769921416}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\n}", "CodeBleu_score": 2.2160770868584074}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tBasePage<SysLog> page = new BasePage<>();\n\tSearchRequest searchRequest = new SearchRequest(indexName);\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"type\", \"syslog\")));\n\tif (StringUtils.isNotBlank(querySysLogBO.getIp())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp())));\n\t}\n\tif (StringUtils.isNotBlank(querySysLogBO.getHostName())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"host_name\", querySysLogBO.getHostName())));\n\t}\n\tif (StringUtils.isNotBlank(querySysLogBO.getLevel())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"level\", querySysLogBO.getLevel())));\n\t}\n\tif (StringUtils.isNotBlank(querySysLogBO.getMsg())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"msg\", querySysLogBO.getMsg())));\n\t}\n\tif (StringUtils.isNotBlank(querySysLogBO.getTags())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"tags\", querySysLogBO.getTags())));\n\t}\n\tif (StringUtils.isNotBlank(querySysLogBO.getSysLogId())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"syslog_id\", querySysLogBO.getSysLogId())));\n\t}\n\tif (StringUtils.isNotBlank(querySysLogBO.getSysLogType())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"syslog_type\", querySysLogBO.getSysLogType())));\n\t}\n\tif (StringUtils.isNotBlank(querySysLogBO.getSysLogSubType())) {\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"syslog_sub_type\", querySysLogBO.getSysLogSubType())));\n\t}\n\tif (StringUtils.", "CodeBleu_score": 30.323604623116964}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, function (response) {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on(\"finish\", function () {\n\t\t\t\tfile.close(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}).on(\"error\", function (err) {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 77.91548807535317}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, function (response) {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on(\"finish\", function () {\n\t\t\t\tfile.close(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}).on(\"error\", function (error) {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 71.34300286844106}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, function (response) {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on(\"finish\", function () {\n\t\t\t\tfile.close(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t})\n\t\t.on(\"error\", function (err) {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 75.07827624763216}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return getLiveModules()\n.filter(m -> m.getId().equals(module.getId()))\n.flatMapMany(m -> {\n if (circularDependencyCheckSet.contains(m.getId())) {\n return Flux.error(new RuntimeException(\"Circular dependency detected for module \" + m.getId()));\n }\n circularDependencyCheckSet.add(m.getId());\n return getDependentModules(m, circularDependencyCheckSet);\n })\n.collectList()\n.map(modules -> {\n circularDependencyCheckSet.remove(module.getId());\n return modules;\n })\n.onErrorContinue((e, o) -> {\n logger.warn(\"Error while retrieving dependent modules for module \" + module.getId(), e);\n });\n }", "CodeBleu_score": 46.64970630436493}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(module.getDependencies())\n.filter(dependency ->!circularDependencyCheckSet.contains(dependency.getId()))\n.flatMap(dependency -> {\n circularDependencyCheckSet.add(dependency.getId());\n return this.getLiveModules(dependency.getId());\n })\n.doOnNext(dependentModule -> circularDependencyCheckSet.remove(dependentModule.getId()));\n }", "CodeBleu_score": 47.63782204268452}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn getLiveModules()\n\t\t.filter(m -> m.getDependencies().contains(module.getId()))\n\t\t.filter(m ->!circularDependencyCheckSet.contains(m.getId()))\n\t\t.doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n\t\t.concatMap(m -> getDependentModules(m, circularDependencyCheckSet).next().defaultIfEmpty(m));\n}", "CodeBleu_score": 46.61682345000178}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map!= null) {\n\t\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\t\tObject value = entry.getValue();\n\t\t\tif (value instanceof Map) {\n\t\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t\t} else if (value instanceof List) {\n\t\t\t\tfor (Object item : (List<?>) value) {\n\t\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\t\tdoGetDependentModules((Map<?,?>) item, dependentModuleIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (value instanceof String && \"module\".equals(entry.getKey())) {\n\t\t\t\tString moduleId = (String) value;\n\t\t\t\tif (StringUtils.isNotBlank(moduleId)) {\n\t\t\t\t\tdependentModuleIds.add(moduleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.67556013234174}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tdoGetDependentModules((List<?>) value, dependentModuleIds);\n\t\t} else if (value instanceof String) {\n\t\t\tif (isNotBlank((String) value)) {\n\t\t\t\tdependentModuleIds.add((String) value);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 21.768461362236184}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map == null) {\n\t\treturn;\n\t}\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tfor (Object item : (List<?>) value) {\n\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) item, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (entry.getKey().equals(COMPONENT_TYPE) && isNotBlank((String) value)) {\n\t\t\tif (value.equals(MODULE)) {\n\t\t\t\tString appId = (String) entry.getValue();\n\t\t\t\tif (isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.830073174411204}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tAsset asset = null;\nbyte[] imageData = dataBuffer.toByteArray();\nString contentType = srcContentType.toString();\nif (createThumbnail) {\nbyte[] thumbnailData = resizeImage(imageData);\nasset = Asset.Builder.newInstance()\n.setContentType(MediaType.JPEG)\n.setBinaryData(thumbnailData)\n.build();\n} else {\nasset = Asset.Builder.newInstance()\n.setContentType(srcContentType)\n.setBinaryData(imageData)\n.build();\n}\ndataBuffer.release();\nreturn asset;\n}", "CodeBleu_score": 40.47360635373111}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t// Read the image data from the DataBuffer\nInputStream inputStream = dataBuffer.getInputStream();\nByteArrayOutputStream outputStream = new ByteArrayOutputStream();\nbyte[] buffer = new byte[1024];\nint len;\nwhile ((len = inputStream.read(buffer))!= -1) {\noutputStream.write(buffer, 0, len);\n}\n// Create a new DataBuffer with the processed image data\nbyte[] imageData = outputStream.toByteArray();\nDataBuffer dataBufferNew = new DataBuffer(imageData);\n// Create a new Asset with the processed image data and content type\nAsset asset = new Asset();\nasset.setData(dataBufferNew);\nasset.setContentType(MediaType.JPEG);\n// Resize the image if creating a thumbnail\nif (createThumbnail) {\nresizeImage(asset);\n}\n// Release the DataBuffer\ndataBuffer.release();\nreturn asset;\n}", "CodeBleu_score": 39.00916938929353}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n// Create a new Asset object with the original data buffer and content type.\nAsset asset = new Asset();\nasset.setDataBuffer(dataBuffer);\nasset.setContentType(srcContentType);\n\n// Check if the createThumbnail flag is true.\nif (createThumbnail) {\n\n// Get the image data from the DataBuffer.\nBufferedImage bufferedImage = ImageIO.read(dataBuffer.getInputStream());\n\n// Check if the image is valid.\nif (bufferedImage!= null) {\n\n// Get the original image width and height.\nint originalWidth = bufferedImage.getWidth();\nint originalHeight = bufferedImage.getHeight();\n\n// Calculate the thumbnail width and height.\nint thumbnailWidth = 100;\nint thumbnailHeight = 100;\n\n// Calculate the thumbnail aspect ratio.\ndouble aspectRatio = (double) thumbnailWidth / thumbnailHeight;\n\n// Calculate the thumbnail height based on the aspect ratio.\nthumbnailHeight = (int) (thumbnailWidth / aspectRatio);\n\n// Create a new BufferedImage with the thumbnail width and height.\nBufferedImage thumbnailImage = new BufferedImage(thumbnailWidth, thumbnailHeight, BufferedImage.TYPE_INT_RGB);\n\n// Create a Graphics2D object for drawing the thumbnail image.\nGraphics2D graphics = thumbnailImage.createGraphics();\n\n// Draw the original image on the thumbnail image.\ngraphics.drawImage(bufferedImage, 0, 0, thumbnailWidth, thumbnailHeight, null);\n\n// Dispose of the Graphics2D object.\ngraphics.dispose();\n\n// Convert the thumbnail image to a DataBuffer.\nByteArrayOutputStream thumbnailOutputStream = new ByteArrayOutputStream();\nImageIO.write(thumbnailImage, \"jpg\", thumbnailOutputStream);\nDataBuffer thumbnailDataBuffer = new DataBuffer(thumbnailOutputStream.toByteArray());\n\n// Set the thumbnail data buffer and content type on the Asset.\nasset.setDataBuffer(thumbnailDataBuffer);\nasset.setContentType(MediaType.IMAGE_JPEG);\n\n}\n\n}\n\n// Return the Asset object with the processed image data and content type.\nreturn asset;\n\n}", "CodeBleu_score": 35.06087076069917}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.fromCallable(() -> {\n\t\tAsset asset = assetRepository.findById(assetId).orElseThrow(() -> new RuntimeException(\"Asset not found\"));\n\t\treturn new ImageResponse(asset.getData(), asset.getContentType());\n\t})\n\t.flatMap(imageResponse -> {\n\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\tif (imageResponse.getContentType()!= null) {\n\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.valueOf(imageResponse.getContentType()));\n\t\t}\n\t\treturn exchange.getResponse().writeWith(Flux.just(imageResponse.getData()));\n\t});\n}", "CodeBleu_score": 39.005174307968346}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn exchange.getAssetService()\n\t\t.getById(assetId)\n\t\t.flatMap(asset -> {\n\t\t\texchange.setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\texchange.getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n\t\t\t}\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t});\n}", "CodeBleu_score": 32.517241646626736}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getData(assetId)\n\t\t.flatMap(data -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\texchange.getResponse().getHeaders().setContentType(getContentType(data));\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(data));\n\t\t});\n}", "CodeBleu_score": 26.0276387432556}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getOrganizationInEnterpriseMode()\n\t\t.flatMapIterable(org -> org.getAuthenticationConfigurations())\n\t\t.map(FindAuthConfig::new);\n}", "CodeBleu_score": 12.669783574216126}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getOrganizationInEnterpriseMode()\n\t\t.flatMapIterable(organization -> organization.getAuthConfigs())\n\t\t.map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getName(), authConfig.getType(), authConfig.getOrganizationId(), authConfig.getOrganizationName()));\n}", "CodeBleu_score": 19.562597569257456}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getOrganizationInEnterpriseMode().flatMapIterable(organization -> organization.getAuthConfigs().stream()).map(FindAuthConfig::new).collect(Collectors.toList());\n}", "CodeBleu_score": 16.6396918768198}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn mongockApplicationRunner(springContext, mongoTemplate, null);\n}", "CodeBleu_score": 13.677426624553544}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\n// Configure the MongockApplicationRunner\nMongockSpring5.MongockApplicationRunner applicationRunner = new MongockSpring5.MongockApplicationRunner(springContext, mongoTemplate);\n\n// Set the write concern\napplicationRunner.setWriteConcern(WriteConcern.ACKNOWLEDGED);\n\n// Set the read concern\napplicationRunner.setReadConcern(ReadConcern.DEFAULT);\n\n// Specify the package to scan for change logs\napplicationRunner.addChangeLogsScanPackages(\"com.example.changelogs\");\n\n// Enable journaling\napplicationRunner.withJournal();\n\n// Build the MongockApplicationRunner\napplicationRunner.build();\n\n// Return the MongockApplicationRunner\nreturn applicationRunner;\n}", "CodeBleu_score": 41.831446899723176}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongoClient mongoClient = mongoTemplate.getDb().getMongo();\n\tMongoDatabase db = mongoTemplate.getDb();\n\tMongoCollection<Document> changeLogsCollection = mongoTemplate.getCollection(CHANGE_LOGS_COLLECTION_NAME);\n\n\tMongockSpring5.MongockApplicationRunner.Builder builder = MongockSpring5.MongockApplicationRunner.builder()\n\t\t\t.setSpringContext(springContext)\n\t\t\t.setMongoClient(mongoClient)\n\t\t\t.setDatabaseName(db.getName())\n\t\t\t.setChangeLogsCollection(changeLogsCollection)\n\t\t\t.setLockQuickConfig(lockQuickConfig)\n\t\t\t.setLockWaitTime(lockWaitTime)\n\t\t\t.setLockMaxAttempts(lockMaxAttempts)\n\t\t\t.setLockMaxTime(lockMaxTime)\n\t\t\t.setLockMaxTimePerAttempt(lockMaxTimePerAttempt)\n\t\t\t.setLockMaxTimePerItem(lockMaxTimePerItem)\n\t\t\t.setLockMaxTimePerItemPerAttempt(lockMaxTimePerItemPerAttempt)\n\t\t\t.setLockMaxTimePerItemPerAttemptPerThread(lockMaxTimePerItemPerAttemptPerThread)\n\t\t\t.setLockMaxTimePerItemPerThread(lockMaxTimePerItemPerThread)\n\t\t\t.setLockMaxTimePerThread(lockMaxTimePerThread)\n\t\t\t.setLockMaxTimePerThreadPerAttempt(lockMaxTimePerThreadPerAttempt)\n\t\t\t.setLockMaxTimePerThreadPerAttemptPerItem(lockMaxTimePerThreadPerAttemptPerItem)\n\t\t\t.setLockMaxTimePerThreadPerItem(lockMaxTimePerThreadPerItem)\n\t\t\t.setLockMaxTimePerThreadPerItemPerAttempt(lockMaxTimePerThreadPerItemPerAttempt)\n\t\t\t.setLockMaxTimePerThreadPerItemPerAttemptPerThread(lockMaxTimePerThreadPerItemPerAttemptPerThread)\n\t\t\t.setLockMaxTimePerThreadPerItemPerThread(lockMaxTimePerThreadPerItemPerThread)\n\t\t\t.setLockMaxTimePerThreadPerItemPerThreadPerAttempt(lockMaxTimePerThreadPerItemPerThreadPerAttempt)\n\t\t\t.setLockMaxTimePerThreadPerItemPerThreadPerAttemptPerThread(lockMaxTimePerThreadPerItemPerThreadPerAttemptPerThread)\n\t\t\t.setLockMaxTimePerThreadPerItemPerThreadPerAttemptPerThreadPerItem(lockMaxTimePerThreadPerItemPerThread", "CodeBleu_score": 32.91077225944136}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\tsetReadPreference(template, ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 67.43970070391663}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(getDSLByLibraryQueryId(libraryQueryId))\n\t\t.map(record -> (Map<String, Object>) record.get(\"dsl\"));\n}", "CodeBleu_score": 33.79426779822495}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.switchIfEmpty(\n\t\t\t\t\tgetLatestRecordByLibraryQueryId(libraryQueryId).flatMap(record -> getLatestDSLByLibraryQueryId(libraryQueryId))\n\t\t\t)\n\t\t\t.map(record -> record.get(\"dsl\"));\n}", "CodeBleu_score": 47.11355745669046}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(Mono.defer(() -> libraryQueryRepository.findById(libraryQueryId)))\n\t\t.map(libraryQueryRecord -> libraryQueryRecord.getDsl());\n}", "CodeBleu_score": 37.41318608057902}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//         if (datasource.isJsDatasourcePlugin()) {\n//             return executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n//         } else {\n//             return executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n//         }\n\n//         return executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n        return executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n    }", "CodeBleu_score": 14.943942473806143}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//        String timeoutStr = (String) queryConfig.get(QueryConstants.QUERY_TIMEOUT);\n        if (StringUtils.isBlank(timeoutStr)) {\n            timeoutStr = DEFAULT_QUERY_TIMEOUT;\n        }\n        long timeout = Long.parseLong(timeoutStr);\n        if (isJsDatasourcePlugin(datasource)) {\n            return executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n    }", "CodeBleu_score": 30.417400666403882}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//        if (queryConfig.containsKey(QueryConstants.QUERY_TIMEOUT)) {", "CodeBleu_score": 8.955266419682054}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n/**\n * This function builds the query execution context for a given datasource and query. It retrieves the appropriate query executor based on the datasource type, builds the query execution context, and acquires a connection from the datasource connection pool. It then executes the query using the connection and handles any errors that occur during execution.\n */", "CodeBleu_score": 12.526471240669057}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n}", "CodeBleu_score": 9.634820991429324}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// TODO: add support for other datasource types\n\tif (datasource.getType() == DatasourceType.MYSQL) {\n\t\treturn executeMysqlQuery(datasource, queryConfig, requestParams, queryVisitorContext);\n\t} else {\n\t\treturn Mono.error(new IllegalArgumentException(\"Unsupported datasource type: \" + datasource.getType()));\n\t}\n}", "CodeBleu_score": 21.551070614570786}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tint timeoutMs = toMillis(timeoutStr);\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 11.833742549362762}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tUnitInfo unitInfo = getUnitInfo(timeoutStr);\n\tdouble value = substring(timeoutStr, 0, unitInfo.getLeft()).toDouble();\n\tif (value <= 0) {\n\t\tthrow new IllegalArgumentException(\"Query timeout must be greater than 0\");\n\t}\n\tif (value > MAX_QUERY_TIMEOUT_MS / unitInfo.getRight()) {\n\t\tthrow new IllegalArgumentException(\"Query timeout must be less than \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n\t}\n\treturn toMillis(value, unitInfo.getRight());\n}", "CodeBleu_score": 28.83187183698529}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nint timeoutMs = 0;\n\nUnitInfo unitInfo = getUnitInfo(timeoutStr);\nif (unitInfo == null) {\nthrow new IllegalArgumentException(String.format(\"Invalid query timeout: '%s'\", timeoutStr));\n}\n\nString valueStr = substring(timeoutStr, 0, unitInfo.getLeft());\nif (isBlank(valueStr)) {\nthrow new IllegalArgumentException(String.format(\"Invalid query timeout: '%s'\", timeoutStr));\n}\n\ndouble value = toDouble(valueStr);\nif (value <= 0) {\nthrow new IllegalArgumentException(String.format(\"Invalid query timeout: '%s'\", timeoutStr));\n}\n\nif (unitInfo.getUnit().equals(SECONDS)) {\ntimeoutMs = toMillis(value);\n} else if (unitInfo.getUnit().equals(MILLISECONDS)) {\ntimeoutMs = toMillis(value);\n} else {\nthrow new IllegalArgumentException(String.format(\"Invalid query timeout: '%s'\", timeoutStr));\n}\n\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(String.format(\"Query timeout must not exceed %d milliseconds\", MAX_QUERY_TIMEOUT_MS));\n}\n\nreturn timeoutMs;\n}", "CodeBleu_score": 38.03288507904438}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application, visitorId)\n.flatMapMany(liveQueries -> Flux.fromIterable(liveQueries))\n.filter(liveQuery -> liveQuery.getDatasource()\n.filter(datasource -> datasource.getDatasourceType()\n.equals(DatasourceType.DATASOURCE_TYPE_SQL)\n)\n.isPresent()\n)\n.map(liveQuery -> liveQuery.getDatasource()\n.get()\n)\n.map(datasource -> datasource.getId())\n.collectList()\n.flatMap(datasourceIds -> {\nreturn Flux.fromIterable(datasourceIds)\n.map(datasourceId -> copyDatasource(currentOrganizationId, datasourceId, visitorId))\n.collectList()\n.map(datasourceIdPairs -> datasourceIdPairs\n.stream()\n.map(datasourceIdPair -> Pair.of(datasourceIdPair.getT1(), datasourceIdPair.getT2()))\n.collect(Collectors.toList())\n);\n}\n)\n.onErrorResume(throwable -> {\nlog.error(\"Failed to copy datasources from template to current organization\", throwable);\nreturn Mono.error(new RuntimeException(\"Failed to copy datasources from template to current organization\"));\n}\n);\n}", "CodeBleu_score": 33.64470220210856}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn getLiveQueries(application, visitorId)\n\t\t.flatMap(queries -> {\n\t\t\tif (queries.isEmpty()) {\n\t\t\t\treturn Mono.error(new Exception(\"No live queries found for application \" + application.getId()));\n\t\t\t}\n\n\t\t\treturn Flux.fromIterable(queries)\n\t\t\t\t.flatMap(query -> copyDatasource(currentOrganizationId, query.getDatasourceId(), visitorId))\n\t\t\t\t.collectList();\n\t\t});\n}", "CodeBleu_score": 25.64956392152854}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn getLiveQueries(application, visitorId)\n\t.flatMap(liveQueries -> {\n\t\tif (liveQueries.isEmpty()) {\n\t\t\treturn Mono.error(new Exception(\"No live queries found for application \" + application.getName()));\n\t\t}\n\t\treturn Flux.fromIterable(liveQueries)\n\t\t.map(liveQuery -> liveQuery.getDatasourceId())\n\t\t.collectList()\n\t\t.flatMap(datasourceIds -> {\n\t\t\treturn Flux.fromIterable(datasourceIds)\n\t\t\t.map(datasourceId -> {\n\t\t\t\treturn copyDatasource(currentOrganizationId, datasourceId, visitorId);\n\t\t\t})\n\t\t\t.collectList()\n\t\t\t.map(copiedDatasourceIds -> {\n\t\t\t\treturn copiedDatasourceIds.stream()\n\t\t\t\t.map(copiedDatasourceId -> {\n\t\t\t\t\treturn Pair.of(datasourceId, copiedDatasourceId);\n\t\t\t\t})\n\t\t\t\t.collect(Collectors.toList());\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 33.55448006555893}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getById(datasourceId)\n\t\t\t.flatMap(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t\t} else if (datasource.isLegacyQuickRestApi()) {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, datasource, visitorId)\n\t\t\t\t\t\t\t.map(newDatasource -> newDatasource.getId());\n\t\t\t\t} else if (datasource.isLegacyOpenblocksApi()) {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, datasource, visitorId)\n\t\t\t\t\t\t\t.map(newDatasource -> newDatasource.getId());\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, datasource, visitorId)\n\t\t\t\t\t\t\t.map(newDatasource -> newDatasource.getId());\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 49.6869122647901}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn this.getDatasource(organizationId, datasourceId, visitorId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t}\n\t\t\tif (datasource.isLegacyQuickRestApi()) {\n\t\t\t\treturn this.createNewDatasourceFrom(organizationId, visitorId, datasource.getId(), \"Quick REST API\", \"quickRestApiDatasource\", datasource.getQuickRestApi());\n\t\t\t}\n\t\t\tif (datasource.isLegacyOpenblocksApi()) {\n\t\t\t\treturn this.createNewDatasourceFrom(organizationId, visitorId, datasource.getId(), \"Openblocks API\", \"openblocksApiDatasource\", datasource.getOpenblocksApi());\n\t\t\t}\n\t\t\treturn this.createNewDatasourceFrom(organizationId, visitorId, datasource.getId(), datasource.getName(), datasource.getType(), datasource.getJson());\n\t\t});\n}", "CodeBleu_score": 63.810277165902775}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getById(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (isSystemStatic(datasource)) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t}\n\t\t\tif (isLegacyQuickRestApi(datasource)) {\n\t\t\t\treturn createNewDatasourceFrom(datasource, organizationId, visitorId);\n\t\t\t}\n\t\t\tif (isLegacyOpenblocksApi(datasource)) {\n\t\t\t\treturn createNewDatasourceFrom(datasource, organizationId, visitorId);\n\t\t\t}\n\t\t\treturn createNewDatasourceFrom(datasource, organizationId, visitorId);\n\t\t});\n}", "CodeBleu_score": 45.50903276822594}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.just(filePart)\n.filter(filePart -> filePart.getSize() > 0)\n.flatMap(filePart -> {\n String fileName = user.getId() + \".jpg\";\n return filePart.transferTo(Paths.get(uploadPath, fileName))\n.then(Mono.just(fileName));\n })\n.filter(fileName ->!fileName.isEmpty())\n.flatMap(fileName -> {\n if (user.getAvatar()!= null) {\n return remove(user.getAvatar())\n.then(Mono.just(fileName));\n }\n return Mono.just(fileName);\n })\n.flatMap(fileName -> updateUserAvatar(user, fileName))\n.then(Mono.just(true))\n.defaultIfEmpty(false);\n }", "CodeBleu_score": 32.876584131542145}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return upload(filePart)\n.flatMap(avatar -> {\n if (user.getAvatar()!= null) {\n return remove(user.getAvatar());\n }\n return Mono.just(true);\n })\n.then(updateUserAvatar(user, avatar));\n }", "CodeBleu_score": 16.03658517855015}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t String fileName = filePart.getSubmittedFileName();\n String extension = fileName.substring(fileName.lastIndexOf(\".\"));\n String newFileName = user.getId() + extension;\n return upload(filePart, newFileName)\n.flatMap(uploadResult -> {\n if (user.getAvatar()!= null) {\n return remove(user.getAvatar());\n }\n return Mono.just(true);\n })\n.flatMap(removeResult -> updateUserAvatar(user, newFileName));\n }", "CodeBleu_score": 31.592914628561207}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t.flatMap(authUser -> {\n\t\t\tUser user = new User();\n\t\t\tuser.setName(authUser.getName());\n\t\t\tuser.setState(authUser.getState());\n\t\t\tuser.setIsEnabled(authUser.getIsEnabled());\n\t\t\tuser.setAvatar(authUser.getAvatar());\n\t\t\tuser.setTpAvatarLink(authUser.getTpAvatarLink());\n\t\t\tuser.setIsNewUser(true);\n\t\t\tuser.setConnections(new HashSet<>());\n\n\t\t\tif (authUser.getAuthContext()!= null) {\n\t\t\t\tif (authUser.getAuthContext().getPassword()!= null) {\n\t\t\t\t\tuser.setPassword(encryptPassword(authUser.getAuthContext().getPassword()));\n\t\t\t\t}\n\t\t\t\tuser.setAuthContext(authUser.getAuthContext());\n\t\t\t}\n\n\t\t\tif (authUser.getAuthSource()!= null && authUser.getAuthSource().equals(AuthSource.EMAIL)) {\n\t\t\t\tuser.setUsername(authUser.getUsername());\n\t\t\t}\n\n\t\t\tauthUser.getConnections().forEach(connection -> {\n\t\t\t\tuser.add(toAuthConnection(connection));\n\t\t\t});\n\n\t\t\treturn Mono.just(user);\n\t\t})\n\t\t.flatMap(user -> {\n\t\t\treturn user.create();\n\t\t});\n}", "CodeBleu_score": 40.3948567316766}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tUser user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(authUser.getState());\n\tuser.setIsEnabled(authUser.isEnabled());\n\tuser.setAvatar(authUser.getAvatar());\n\tuser.setTpAvatarLink(authUser.getTpAvatarLink());\n\tuser.setSource(authUser.getSource());\n\tif (authUser.getSource().equals(AuthSource.EMAIL.toString()) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD.toString())) {\n\t\tuser.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD.toString())));\n\t}\n\tuser.setIsNewUser(true);\n\tuser.setConnections(new HashSet<Connection>());\n\tauthUser.getConnections().forEach(c -> user.add(toAuthConnection(c)));\n\treturn create(user);\n}", "CodeBleu_score": 47.61725894458897}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t\t.map(authUser1 -> {\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(authUser1.getName());\n\t\t\t\tuser.setState(authUser1.getState());\n\t\t\t\tuser.setIsEnabled(authUser1.isEnabled());\n\t\t\t\tuser.setAvatar(authUser1.getAvatar());\n\t\t\t\tuser.setSource(authUser1.getSource());\n\t\t\t\tif (authUser1.getSource().equals(AuthSource.EMAIL) && authUser1.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n\t\t\t\t\tuser.setPassword(encryptPassword(authUser1.getAuthContext().get(AuthContext.PASSWORD)));\n\t\t\t\t}\n\t\t\t\tuser.setConnections(new HashSet<>());\n\t\t\t\tauthUser1.getConnections().forEach(authConnection -> user.add(toAuthConnection(authConnection)));\n\t\t\t\tuser.setIsNewUser(true);\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(user -> userRepository.save(user));\n}", "CodeBleu_score": 45.34667076051216}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn bindEmail(user, email, null);\n}", "CodeBleu_score": 6.9665773640568345}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.defer(() -> {\nif (user.getEmail()!= null) {\nreturn Mono.error(new ConflictException(\"User already has an email\"));\n}\nreturn this.userRepository.save(user);\n})\n.then(this.connectionRepository.save(new Connection(user.getId(), email, ConnectionSource.EMAIL)))\n.then(Mono.just(true))\n.onErrorResume(error -> {\nif (error instanceof DuplicateKeyException) {\nreturn Mono.error(new ConflictException(\"Email already exists\"));\n}\nreturn Mono.error(error);\n});\n}", "CodeBleu_score": 36.11875049501089}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.defer(() -> {\ntry {\nreturn Mono.just(user.getConnections().add(new Connection(email, Connection.Source.EMAIL)));\n} catch (DuplicateKeyException e) {\nreturn Mono.error(new EmailAlreadyBoundException(email));\n}\n}).flatMap(success -> user.save().map(success::booleanValue));\n}", "CodeBleu_score": 19.340939783597207}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn Mono.just(userId)\n.flatMap(id -> this.findById(id))\n.map(user -> user.getPassword())\n.map(password -> matchPassword(oldPassword, password))\n.filter(match -> match)\n.flatMap(match -> {\nif (match) {\nreturn this.encryptPassword(newPassword)\n.flatMap(encryptedPassword -> {\nuser.setPassword(encryptedPassword);\nreturn this.save(user);\n});\n}\nreturn Mono.error(new PasswordMismatchException());\n});\n}", "CodeBleu_score": 26.628951855568207}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn userRepository.findById(userId)\n\t\t.map(user -> {\n\t\t\tif (matchPassword(oldPassword, user.getPassword())) {\n\t\t\t\tuser.setPassword(encryptPassword(newPassword));\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn Mono.error(new InvalidPasswordException());\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 15.394041948910223}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn userRepository.findById(userId)\n.flatMap(user -> {\nif (user == null) {\nreturn Mono.error(new NotFoundException(\"User not found\"));\n}\n\nif (matchPassword(user.getPassword(), oldPassword)) {\nuser.setPassword();\nreturn userRepository.save(user);\n} else {\nreturn Mono.error(new InvalidPasswordException(\"Invalid password\"));\n}\n});\n}", "CodeBleu_score": 20.48476454860413}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn getOrgId(orgMember)\n\t\t.flatMapMany(orgId -> {\n\t\t\tif (withoutDynamicGroups) {\n\t\t\t\treturn getNonDynamicUserGroupIdsInOrg(orgId, userId);\n\t\t\t} else {\n\t\t\t\treturn getUserGroupIdsInOrg(orgId, userId);\n\t\t\t}\n\t\t})\n\t\t.filter(groupId ->!groupId.equals(ALL_USERS_GROUP_ID))\n\t\t.map(groupId -> {\n\t\t\treturn Mono.just(groupId)\n\t\t\t\t.flatMap(id -> getName(id, locale))\n\t\t\t\t.map(name -> {\n\t\t\t\t\tMap<String, String> group = new HashMap<>();\n\t\t\t\t\tgroup.put(\"id\", id);\n\t\t\t\t\tgroup.put(\"name\", name);\n\t\t\t\t\treturn group;\n\t\t\t\t});\n\t\t})\n\t\t.collectList();\n}", "CodeBleu_score": 28.759880845758207}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\n```\n", "CodeBleu_score": 6.011571885569868}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\n}", "CodeBleu_score": 6.028157562186501}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper(userId, UserStatus::new, userStatus -> userStatus.setHasShowNewUserGuidance(true));\n}", "CodeBleu_score": 16.49996576989598}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn mongoUpsertHelper(UserStatus.builder().userId(userId).hasShowNewUserGuidance(true).build())\n.map(result -> result.getModifiedCount() == 1);\n}", "CodeBleu_score": 26.831372626680334}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 27.225741869732705}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\t// Ensure the partition predicate is not nil\n\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate cannot be nil\")\n\t}\n\n\t// Ensure the value predicate is not nil\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate cannot be nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries concurrently\n\tg := rungroup.RunGroup{}\n\n\t// Iterate over each partition in the cache\n\tfor _, partition := range c.partitions {\n\t\t// Enqueue the partition for processing\n\t\tg.Enqueue(func() {\n\t\t\t// Clear entries based on the value predicate\n\t\t\tpartition.clearMatching(predicateValue)\n\t\t})\n\t}\n\n\t// Wait for all tasks to complete\n\tg.Wait()\n}", "CodeBleu_score": 33.69657274906256}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg, ctx := errgroup.WithContext(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p) {\n\t\t\tg.Go(func() error {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tif err := g.Wait(); err!= nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 39.96777294438111}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif c.partitionPredicate == nil {\n\t\tpanic(\"partition predicate cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate cannot be nil\")\n\t}\n\tg, ctx := errgroup.WithContext(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p) {\n\t\t\tg.Go(func() error {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tif err := g.Wait(); err!= nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 38.449440740395495}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\t// Check if the number of partitions and total weight quantity are greater than zero\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\t// Calculate the average weight per partition\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\t// Return the maximum size per partition\n\treturn int(math.Floor(float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 37.368168692497726}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(avgWeightPerPartition))\n}", "CodeBleu_score": 39.41159977215292}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\t// Check if the number of partitions and total weight quantity are greater than zero\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\t// Calculate the average weight per partition\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Return the maximum size per partition\n\treturn int(math.Floor(averageWeightPerPartition))\n}", "CodeBleu_score": 39.34900574685315}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\ttry {\n\t\tDatabaseMetaData databaseMetaData = getDatabaseMetaData();\n\t\tif (databaseMetaData!= null) {\n\t\t\tcontributorMap.put(\"databaseProductName\", databaseMetaData.getDatabaseProductName());\n\t\t\tcontributorMap.put(\"databaseProductVersion\", databaseMetaData.getDatabaseProductVersion());\n\t\t}\n\t} catch (SQLException e) {\n\t\tLOGGER.error(\"Exception while creating contributor map\", e);\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 36.78514127088025}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<String, Object>();\ntry {\nConnectionMetadata metadata = getDatabaseMetadata();\nif (metadata!= null) {\nmap.put(DatabaseMetadata.DATABASE_PRODUCT_NAME, metadata.getDatabaseProductName());\nmap.put(DatabaseMetadata.DATABASE_VERSION, metadata.getDatabaseProductVersion());\n}\n} catch (SQLException e) {\nlogger.error(\"Error getting database metadata\", e);\n}\nreturn map;\n}", "CodeBleu_score": 49.589152846522985}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\nDatabaseMetaData databaseMetaData = null;\ntry {\ndatabaseMetaData = connection.getMetaData();\n} catch (SQLException e) {\nlogger.log(Level.SEVERE, \"Exception while getting database metadata\", e);\n}\nif (databaseMetaData!= null) {\ntry {\ncontributorMap.put(\"databaseProductName\", databaseMetaData.getDatabaseProductName());\ncontributorMap.put(\"databaseProductVersion\", databaseMetaData.getDatabaseProductVersion());\n} catch (SQLException e) {\nlogger.log(Level.SEVERE, \"Exception while getting database metadata\", e);\n}\n}\nreturn contributorMap;\n}", "CodeBleu_score": 42.820520552030175}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.containsKey(\"registration\")) {\n\t\tinfo.setAllowRegistration(configMap.getBoolean(\"registration\"));\n\t}\n\tif (configMap.containsKey(\"emailVerification\")) {\n\t\tinfo.setMustVerifyEmailOnRegistration(configMap.getBoolean(\"emailVerification\"));\n\t}\n}", "CodeBleu_score": 16.0378942427345}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Get user settings from the configuration map\n\tBoolean mustVerifyEmailOnRegistration = configMap.getMustVerifyEmailOnRegistration();\n\tBoolean allowRegistration = configMap.getAllowRegistration();\n\n\t// If user settings are null, disable registration and email verification on registration\n\tif (mustVerifyEmailOnRegistration == null || allowRegistration == null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\tinfo.setAllowRegistration(false);\n\t} else {\n\t\t// Update GlobalInfo with the retrieved settings for registration and email verification\n\t\tinfo.setMustVerifyEmailOnRegistration(mustVerifyEmailOnRegistration);\n\t\tinfo.setAllowRegistration(allowRegistration);\n\t}\n}", "CodeBleu_score": 38.92732718153563}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tString mustVerifyEmailOnRegistration = configMap.getString(ConfigConstants.MUST_VERIFY_EMAIL_ON_REGISTRATION);\n\tString allowRegistration = configMap.getString(ConfigConstants.ALLOW_REGISTRATION);\n\n\tif (mustVerifyEmailOnRegistration!= null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(mustVerifyEmailOnRegistration));\n\t}\n\n\tif (allowRegistration!= null) {\n\t\tinfo.setAllowRegistration(Boolean.parseBoolean(allowRegistration));\n\t}\n}", "CodeBleu_score": 33.682597593560324}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"Restart Thread Group\");\n\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\tpublic void run() {\n\t\t\tThread.currentThread().setContextClassLoader(Thread.currentThread().getContextClassLoader());\n\t\t\tThread.currentThread().setDaemon(false);\n\t\t\ttry {\n\t\t\t\tThread.currentThread().start();\n\t\t\t} catch (IllegalThreadStateException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.start();\n\treturn \"Application restart initiated.\";\n}", "CodeBleu_score": 40.785731971802576}, {"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tRuntime.getRuntime().exec(\"java -jar \" + Application.class.getProtectionDomain().getCodeSource().getLocation().getPath());\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 48.12720062478317}, {"code": "public Object restart(){\n\t\tThreadGroup tg = new ThreadGroup(getClass().getName());\n\tThread t = new Thread(tg, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tThread.currentThread().setContextClassLoader(App.class.getClassLoader());\n\t\t\tThread.currentThread().setDaemon(false);\n\t\t\tApp.this.start();\n\t\t}\n\t});\n\tt.start();\n\treturn \"Restarting application\";\n}", "CodeBleu_score": 41.24988712934463}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer\n.defaultCodecs()\n.jackson2JsonEncoder(jackson2JsonEncoder())\n.jackson2JsonDecoder(jackson2JsonDecoder());\n }", "CodeBleu_score": 22.85179006739203}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n }", "CodeBleu_score": 40.497839280753695}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper objectMapper = new ObjectMapper();\n configurer\n.defaultCodecs()\n.jackson2JsonDecoder(objectMapper)\n.jackson2JsonEncoder(objectMapper);\n }", "CodeBleu_score": 35.59739033687708}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn (request) -> {\n\t\treturn request.path().startsWith(\"/console/\") &&!request.path().startsWith(\"/console/assets/\") && request.accepts().contains(\"text/html\") &&!request.isWebSocket()?\n\t\t\t\trequest.response().sendFile(consoleIndexPath) :\n\t\t\t\tnull;\n\t};\n}", "CodeBleu_score": 17.725137318913575}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn (ServerRequest request) -> {\n\t\tif (request.method() == HttpMethod.GET\n\t\t\t&& request.path()!= \"/console/assets/**\"\n\t\t\t&& request.accepts(MediaType.TEXT_HTML)\n\t\t\t&&!request.isWebSocket()) {\n\t\t\treturn ServerResponse.status(HttpStatus.FOUND)\n\t\t\t\t.location(\"/console/index.html\")\n\t\t\t\t.build();\n\t\t}\n\t\treturn ServerResponse.status(HttpStatus.NOT_FOUND)\n\t\t\t.build();\n\t};\n}", "CodeBleu_score": 23.50325885084415}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(GET(\"/console/**\").and(not(GET(\"/console/assets/**\"))).and(accept(MediaType.TEXT_HTML)), req -> {\n\t\tString consolePath = req.path().substring(\"/console\".length());\n\t\treturn serveIndex(consolePath);\n\t});\n}", "CodeBleu_score": 30.354937224625}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\").and(not(GET(\"/uc/assets/**\"))).and(accept(MediaType.TEXT_HTML)).and(not(ws())), req -> {\n\t\tString ucPath = req.uri().path().substring(4);\n\t\tPath ucIndexPath = Paths.get(ucPath, \"index.html\");\n\t\tif (Files.exists(ucIndexPath)) {\n\t\t\treturn serveIndex(ucIndexPath);\n\t\t} else {\n\t\t\treturn notFound();\n\t\t}\n\t});\n}", "CodeBleu_score": 37.344912466282395}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn request -> {\n\t\tif (request.path().startsWith(\"/uc/assets\") || request.method()!= HttpMethod.GET || request.headers().asHttpHeaders().accept().stream().noneMatch(mediaType -> mediaType.type().equals(\"text\") && mediaType.subtype().equals(\"html\")) || request.isWebSocket()) {\n\t\t\treturn ServerResponse.notFound().build();\n\t\t}\n\t\treturn ServerResponse.ok().body(ResourceBodyBuilder.fromResource(ucLocation.resolve(\"index.html\")).build());\n\t};\n}", "CodeBleu_score": 20.677793260499648}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\").and(not(GET(\"/uc/assets/**\"))).and(accept(MediaType.TEXT_HTML)).and(not(isWebSocket())))\n\t\t\t.filter(req -> {\n\t\t\t\tString path = req.path();\n\t\t\t\treturn path.startsWith(\"/uc/\") &&!path.startsWith(\"/uc/assets/\");\n\t\t\t}).and(req -> {\n\t\t\t\tString path = req.path();\n\t\t\t\tString ucPath = path.substring(path.indexOf(\"/uc/\"));\n\t\t\t\tString ucIndexPath = ucPath.substring(0, ucPath.lastIndexOf(\"/\")) + \"/index.html\";\n\t\t\t\treturn req.response().sendFile(ucIndexPath);\n\t\t\t});\n}", "CodeBleu_score": 38.105834249163294}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn ReactiveIndexedSessionRepository(\n\t\tsessionRepository = ReactiveInMemorySessionRepository(\n\t\t\tsessionMap = ConcurrentHashMap(),\n\t\t\tmaxInactiveInterval = determineTimeout(\n\t\t\t\tsessionProperties = sessionProperties,\n\t\t\t\tserverProperties = serverProperties\n\t\t\t)\n\t\t)\n\t)\n}", "CodeBleu_score": 25.213307794860317}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn ReactiveIndexedSessionRepository<MapSession>(\n\t\tsessionRepository: reactiveSessionRepository,\n\t\tsessionFactory: sessionFactory,\n\t\tsessionTimeout: sessionTimeout\n\t)\n}", "CodeBleu_score": 11.181162985942727}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tval sessionRepository = ReactiveIndexedSessionRepository<MapSession>(\n\t\tsessionRepository = ConcurrentHashMapSessionRepository(\n\t\t\tsession = session,\n\t\t\tserver = server\n\t\t),\n\t\tsessionTimeout = determineTimeout(session, server)\n\t)\n\treturn sessionRepository\n}", "CodeBleu_score": 20.464017449279474}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n//        return new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 8.115039031832884}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\treturn new DefaultUserDetailService(userService, roleService, haloProperties.getSecurity().isTwoFactorAuthEnabled());\n}", "CodeBleu_score": 21.578009286793286}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\t// Create a new DefaultUserDetailService instance\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\n\t// Set the user service for the user details service\n\tuserDetailsService.setUserService(userService);\n\n\t// Set the role service for the user details service\n\tuserDetailsService.setRoleService(roleService);\n\n\t// Set the two-factor authentication enabled flag\n\tuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().isTwoFactorAuthEnabled());\n\n\t// Return the user details service\n\treturn userDetailsService;\n}", "CodeBleu_score": 37.14348426429963}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\n}", "CodeBleu_score": 2.816750106190552}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tCommentOwner owner = new CommentOwner();\nowner.setDisplayName(displayName);\nowner.setKind(\"email\");\nowner.setEmail(email);\nowner.setAvatarUrl(avatarUrl);\nowner.setWebsiteUrl(websiteUrl);\nowner.setAnnotations(annotations);\nreturn owner;\n}", "CodeBleu_score": 16.13695857020401}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tCommentOwner owner = new CommentOwner();\nowner.setKind(\"email\");\nowner.setDisplayName(getName());\nowner.setEmail(getEmail());\nowner.setAvatarUrl(getAvatarUrl());\nowner.setWebsiteUrl(getWebsiteUrl());\nreturn owner;\n}", "CodeBleu_score": 11.298808137596103}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"email\")) {\n\t\treturn post.getOwner().getEmail().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 22.32149627610795}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (post.getOwner().getKind().equals(Owner.Kind.EMAIL)) {\n\t\tUser user = fetchUserByEmail(post.getOwner().getEmail());\n\t\tif (user.getName().equals(commentOwner.getName())) {\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tif (post.getOwner().getName().equals(commentOwner.getName())) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 34.684220314900486}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(OWNER_KIND_EMAIL)) {\n\t\tUser user = post.getOwner().fetch();\n\t\treturn user.getEmail().equals(commentOwner.getName());\n\t}\n\treturn post.getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 32.49410304191173}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();", "CodeBleu_score": 4.493570631121082}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\nString fieldSelector = getFieldSelector();\nif (isNotBlank(fieldSelector)) {\nlistOptions.setFieldSelector(fieldSelector);\n}\nString keyword = getKeyword();\nif (isNotBlank(keyword)) {\nlistOptions.addCondition(KeywordCondition.of(keyword));\n}\nString ownerName = getOwnerName();\nif (isNotBlank(ownerName)) {\nlistOptions.addCondition(OwnerNameCondition.of(ownerName));\n}\nreturn listOptions;\n}", "CodeBleu_score": 31.275233332673196}, {"code": "public ListOptions toListOptions(){\n\tListOptions options = new ListOptions();\noptions.setFieldSelector(getFieldSelector());\nif (isNotBlank(getKeyword())) {\noptions.setQuery(getKeyword());\n}\nif (isNotBlank(getOwnerName())) {\noptions.setOwnerIdentity(getOwnerIdentity());\n}\nif (isNotBlank(getLabelSelector())) {\noptions.setLabelSelector(getLabelSelector());\n}\nreturn options;\n}", "CodeBleu_score": 14.079696180327112}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.filter(StringUtils::hasText)\n\t\t.map(name -> counterService.getByName(name))\n\t\t.map(Counter::getUpvote)\n\t\t.map(upvote -> new CommentStats(commentName, upvote))\n\t\t.defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 31.945704925276054}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn commentCounter.get(commentName)\n\t\t.map(counter -> new CommentStats(counter.get()))\n\t\t.defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 32.25170819621206}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.map(this::getByName)\n\t\t.map(this::getUpvote)\n\t\t.map(CommentStats::new)\n\t\t.defaultIfEmpty(CommentStats.empty());\n}", "CodeBleu_score": 32.845776907964066}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the user identity.\n\tSubscriber subscriber = createSubscriber(identity);\n\n\t// Set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name.\n\tReasonType reasonType = setReasonType(\"someone replied to you\");\n\tCondition condition = setExpression(\"replied.owner\", \"==\", identity.name);\n\tReason reason = createReason(reasonType, condition);\n\n\t// Subscribe the user to the notification center and block until the subscription is completed.\n\tblock(subscribe(subscriber, reason));\n}", "CodeBleu_score": 32.89650279401683}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given user identity.\n\tSubscriber subscriber = createSubscriber(identity);\n\t// Set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name.\n\tReason reason = setReasonType(subscriber, \"someone replied to you\");\n\tsetExpression(reason, \"repliedOwner\", \"== \" + identity.name);\n\t// Subscribe the user to the notification center and block until the subscription is completed.\n\tblock(subscriber);\n}", "CodeBleu_score": 28.703513639354266}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given user identity.\n\tSubscriber subscriber = createSubscriber(identity);\n\t// Set up an interest reason for the subscription.\n\tsetReasonType(subscriber, \"someone replied to you\");\n\tsetExpression(subscriber, \"repliedOwner = '\"+identity.name+\"'\");\n\t// Subscribe the user to the notification center.\n\tsubscribe(subscriber);\n\t// Block until the subscription is completed.\n\tblock(subscriber);\n}", "CodeBleu_score": 22.277350058415124}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.update(comment, comment -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApprovedTime(now());\n\t})\n\t.retryWhen(onErrorResume(this::updateCommentWithRetry))\n\t.doOnSuccess(this::setApproved);\n}", "CodeBleu_score": 15.690665653187247}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.updateComment(comment.getId(), comment.getApproved(), comment.getApprovedTime())\n\t\t.retryWhen(Retry.anyOf(\n\t\t\tRetry.backoff(Duration.ofMillis(100), Duration.ofSeconds(10))\n\t\t\t\t.filter(throwable -> throwable instanceof OptimisticLockingFailureException)\n\t\t\t\t.onRetry(retryContext -> log.warn(\"Failed to update comment {} with optimistic locking failure, retrying...\", comment.getId())),\n\t\t\tRetry.max(10)\n\t\t\t\t.onRetry(retryContext -> log.warn(\"Failed to update comment {} after 10 retries\", comment.getId()))\n\t\t))\n\t\t.map(comment::setApproved);\n}", "CodeBleu_score": 26.071481728176497}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn commentClient.update(comment.getId(), this::setApproved, this::setApprovedTime)\n\t\t.onErrorResume(OptimisticLockingFailureException.class,\n\t\t\te -> approveComment(comment));\n}", "CodeBleu_score": 18.889476391215233}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this;\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 42.10018301332678}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 56.108584083339984}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\t$action->livewire($this);\n\n\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 60.98696093733192}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t}", "CodeBleu_score": 3.570348106299543}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->evaluate();\n\tif (empty($this->redirect)) {\n\t\treturn $this;\n\t}\n\t$this->redirect();\n\treturn $this;\n}", "CodeBleu_score": 26.546039199924664}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$url = $this->getSuccessRedirect();\n\n\tif (!empty($url)) {\n\t\t$this->redirect($url);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 53.195667273058234}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\trecord->tags", "CodeBleu_score": 7.242990654206022}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\trecord->tags()->sync", "CodeBleu_score": 8.41121496329386}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\trecord", "CodeBleu_score": 7.242990654205607}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect leaf path: %w\", err)\n\t}\n\tscope, resource, err := pipeline.NewScopeAndResource(spacePath, repoName)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to create scope and resource: %w\", err)\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 59.17252091874361}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.Scope{\n\t\tType:      authz.ScopeTypeRepository,\n\t\tSpacePath: spacePath,\n\t\tRepoName:  repoName,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tID:   pipelineIdentifier,\n\t}\n\t// Perform the authorization check.\n\tif err := authorizer.Check(ctx, authorizer.NewContext(session), scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"failed to check authorization: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 64.23578556222212}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.Scope{\n\t\tType:        authz.ScopeTypeRepository,\n\t\tSpacePath:   spacePath,\n\t\tRepository:  repoName,\n\t\tPipeline:    pipelineIdentifier,\n\t\tPipelineRun: \"\",\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check.\n\tif err := authorizer.Check(ctx, authorizer.NewContext(session), scope, resource, permission); err!= nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 61.83690515155352}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space.\n\tparentSpace, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect space path: %w\", err)\n\t}\n\n\t// Create a scope and resource.\n\tscope := &types.Scope{\n\t\tType:  enum.ScopeTypeSpace,\n\t\tSpace: parentSpace,\n\t}\n\tresource := &types.Resource{\n\t\tType:  enum.ResourceTypeSpace,\n\t\tSpace: parentSpace,\n\t}\n\n\t// Check if the session has the permission for the scope and resource.\n\treturn authorizer.Check(ctx, authorizer.WithSession(session), authorizer.WithScope(scope), authorizer.WithResource(resource), authorizer.WithPermission(permission))\n}", "CodeBleu_score": 55.38684239711904}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tif authorizer == nil {\n\t\treturn fmt.Errorf(\"authorizer is nil\")\n\t}\n\n\tif session == nil {\n\t\treturn fmt.Errorf(\"session is nil\")\n\t}\n\n\t// dissect the space path to get the parent space and name\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// create a scope and resource based on the parent space and name\n\tscope := &types.Scope{\n\t\tType:  types.ScopeTypeSpace,\n\t\tSpace: parentSpace,\n\t}\n\tresource := &types.Resource{\n\t\tType:  types.ResourceTypeSpace,\n\t\tSpace: parentSpace,\n\t\tName:  name,\n\t}\n\n\t// call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 61.801971080415186}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\t// Dissect the space path to get the parent space and name.\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.NewScope(parentSpace, name)\n\tresource := authz.NewResource(parentSpace, name)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.531443711255136}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tvar err error\n\tvar result json.RawMessage\n\tif len(source) == 0 {\n\t\tresult, err = json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\t\tdecoder.DisallowUnknownFields()\n\t\terr = decoder.Decode(&result)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tvar buffer bytes.Buffer\n\tencoder := json.NewEncoder(&buffer)\n\tencoder.SetEscapeHTML(false)\n\terr = encoder.Encode(result)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tif buffer.Bytes()[len(buffer.Bytes())-1] == '\n' {\n\t\treturn json.RawMessage(buffer.Bytes()[:len(buffer.Bytes())-1]), nil\n\t}\n\treturn json.RawMessage(buffer.Bytes()), nil\n}", "CodeBleu_score": 51.267463212024424}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource = json.RawMessage(mustMarshal(data))\n\t}\n\tvar err error\n\tvar result bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err = decoder.Decode(&result); err!= nil {\n\t\treturn nil, usererror.BadRequestf(\"Invalid JSON payload: %v\", err)\n\t}\n\tif err = encoder.SetEscapeHTML(true).Encode(&result); err!= nil {\n\t\treturn nil, usererror.BadRequestf(\"Invalid JSON payload: %v\", err)\n\t}\n\tif result.Bytes()[len(result.Bytes())-1] == '\n' {\n\t\tresult.Truncate(len(result.Bytes()) - 1)\n\t}\n\treturn json.RawMessage(result.Bytes()), nil\n}", "CodeBleu_score": 49.45601658762733}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource = json.RawMessage(MustMarshalJSON(data))\n\t}\n\tvar err error\n\tvar buffer bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\terr = decoder.Decode(&buffer)\n\tif err!= nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid JSON payload: %s\", err)\n\t}\n\terr = json.NewEncoder(&buffer).Encode(data)\n\tif err!= nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid JSON payload: %s\", err)\n\t}\n\treturn json.RawMessage(bytes.TrimRight(buffer.Bytes(), \"\n\")), nil\n}", "CodeBleu_score": 48.07285970942993}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := check.RepoRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest(err, \"repository reference\")\n\t}\n\n\trepo, err := c.repoStore.FindByRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.repoStore.CheckAccess(repo, session, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 44.65108678051447}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := c.repoStore.CheckRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest(err, \"invalid repository reference\")\n\t}\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.BadRequest(err, \"failed to retrieve repository\")\n\t}\n\t// Check access permissions for the session.\n\tif err := c.repoStore.CheckAccess(repo, session, reqPermission); err!= nil {\n\t\treturn nil, usererror.BadRequest(err, \"insufficient permissions\")\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 47.37049985525075}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate repository reference\n\tif err := c.repoStore.CheckRepoRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest(err, \"invalid repository reference\")\n\t}\n\n\t// Fetch repository\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check permissions\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 50.312207386375476}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\t// Empty payload sanitizer.\n\temptySanitizer := createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = emptySanitizer\n\n\t// Raw payload sanitizer.\n\trawSanitizer := createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = rawSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = rawSanitizer\n\n\t// Pipeline payload sanitizer.\n\tpipelineSanitizer := createPipelinePayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = pipelineSanitizer\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 51.35859587954027}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer\n\treturn sanitizers\n}", "CodeBleu_score": 44.49197584983734}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 61.787367292169236}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.renderer then\n\t\tself.renderer = Renderer()\n\tend\n\tself.renderer:attach(self)\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 45.41469169823405}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.state.attached then\n\t\tself.renderer.attach(self)\n\t\tself.state.attached = true\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 51.76627103782913}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.state.attached then\n\t\tself.state.on_render = on_render\n\telse\n\t\tself.state.on_render = on_render\n\t\tself.renderer:attach(self)\n\tend\n\treturn self", "CodeBleu_score": 45.221677821795005}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self.watcher then\n\t\tself.watcher:stop()\n\tend\n\tif self.filename and self.filename ~= \"\" then\n\t\tself.watcher = loop.watch_file(self.filename, function(event)\n\t\t\tif event == \"change\" then\n\t\t\t\tcallback()\n\t\t\telseif event == \"error\" then\n\t\t\t\tconsole.debug.error(\"Error watching file: \".. self.filename)\n\t\t\tend\n\t\tend)\n\tend", "CodeBleu_score": 46.415669264308676}, {"code": "function Buffer:watch(callback)\n\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\tif self:is_valid() and callback then\n\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\tif self:is_valid() and callback then\n\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\tif self:is_valid() and callback then\n\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- If the buffer is valid and a callback is provided, it executes the callback function.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif self:is_valid() and callback then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "CodeBleu_score": 29.1007056640198}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() then\n\t\tlocal filename = self:get_filename()\n\t\tif filename then\n\t\t\tself.watcher = loop.free_textlock(filename)\n\t\t\tif self.watcher then\n\t\t\t\tself.watcher:watch_file(function(err)\n\t\t\t\t\tif err then\n\t\t\t\t\t\tconsole.debug.error(\"Error watching file: \".. err)\n\t\t\t\t\telse\n\t\t\t\t\t\tcallback()\n\t\t\t\t\tend\n\t\t\t\tend)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 47.850884181077156}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self:get_spec()\n\tlocal attr = spec.foreground and \"fg\" or \"bg\"\n\tlocal color = spec[attr]\n\n\tif color then\n\t\tlocal hex = string.format(\"#%02x%02x%02x\", color.r, color.g, color.b)\n\t\tself.hex = hex\n\t\treturn hex\n\tend\n\n\tlocal highlight = vim.api.nvim_get_hl_by_name(self.name, true)\n\tlocal color = highlight[attr]\n\n\tif color then\n\t\tlocal hex = string.format(\"#%02x%02x%02x\", color.r, color.g, color.b)\n\t\tself.hex = hex\n\t\treturn hex\n\tend\n\n\treturn nil", "CodeBleu_score": 50.05041161884536}, {"code": "function Color:to_hex()\n\t\tlocal hex = self.hex\n\tif hex then\n\t\treturn hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal color_attr = self.color_attr\n\tlocal highlight = self.highlight\n\tlocal color = spec[color_attr]\n\tlocal hex_color\n\n\tif highlight then\n\t\thex_color = vim.api.nvim_get_hl_by_name(highlight, true)[color_attr]\n\tend\n\n\tif not hex_color then\n\t\thex_color = spec[color_attr]\n\tend\n\n\tif type(hex_color) == \"table\" then\n\t\thex_color = hex_color[1]\n\tend\n\n\tif hex_color then\n\t\thex_color = string.format(\"%02x\", hex_color)\n\tend\n\n\tself.hex = hex_color\n\treturn hex_color", "CodeBleu_score": 48.17083402274994}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = spec.foreground and 'foreground' or 'background'\n\tlocal highlight = api.nvim_get_hl_by_name(attr, spec.name, true)\n\tlocal hex = highlight and highlight[attr]\n\tif not hex then\n\t\treturn nil\n\tend\n\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 59.633139693766445}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tlocal match = line:find(pattern)\n\t\tif match then\n\t\t\tbuffer:add_highlight(hl, match[0], match[0] + match[1])\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 32.628479718410944}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tlocal pos = 0\n\t\twhile true do\n\t\t\tlocal start, end_ = line:find(pattern, pos, true)\n\t\t\tif start then\n\t\t\t\tbuffer:add_highlight(hl, start-1, end_-1)\n\t\t\t\tpos = end_\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 49.77447767430318}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor _, line in ipairs(lines) do\n\t\tlocal line_number = buffer:line_from_position(line)\n\t\tlocal match = line:find(pattern)\n\t\tif match then\n\t\t\tbuffer:add_highlight(hl, line_number, match - 1, #match)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 41.08760078248857}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row.. col\n\tvim.api.nvim_buf_set_extmark(buffer, Namespace.extmark_namespace, id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 55.750893054612916}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = Namespace:get_id(row, col)\n\tvim.api.nvim_buf_set_extmark(buffer, Namespace.ns, id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 55.650305806818146}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\t-- Calculate a unique ID based on the row and column\n\tlocal id = row.. col\n\t-- Set an extmark with the given text, highlight, position, and priority using Neovim's API\n\tvim.api.nvim_buf_set_extmark(buffer, Namespace.ns_id, id, {\n\t\ttext = text,\n\t\thl_group = hl,\n\t\tend_line = row,\n\t\tend_col = col,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 46.1758248172363}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal line_number = 0\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 11.851111718989932}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor char in output:gmatch(\".\") do\n\t\tline = line.. char\n\t\tif char == \"", "CodeBleu_score": 15.546684106006254}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal i = 1\n\tlocal c = output:sub(i, i)\n\twhile c ~= nil do\n\t\tif c == \"", "CodeBleu_score": 17.479682597670074}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher then\n\t\treturn watcher\n\tend\n\n\tlocal watcher = self:new_watcher()\n\tself.watchers[path] = watcher\n\twatcher:start(path, handler)\n\treturn watcher", "CodeBleu_score": 40.11764927383131}, {"code": "function Watcher:watch_file(path, handler)\n\t\t-- Check if the path is a directory\n\tif vim.loop.fs_stat(path).type == \"directory\" then\n\t\t-- If the path is a directory, return an error\n\t\treturn nil, \"Cannot watch a directory\"\n\tend\n\n\t-- Check if a watcher already exists for the path\n\tif self.watchers[path] then\n\t\t-- If a watcher exists, return the existing watcher\n\t\treturn self.watchers[path]\n\tend\n\n\t-- Create a new file system event watcher\n\tlocal watcher = vim.loop.new_fs_event()\n\n\t-- Start watching the path with the given handler\n\tlocal ok, err = vim.loop.fs_event_start(watcher, path, handler)\n\n\t-- If the start failed, return an error\n\tif not ok then\n\t\treturn nil, err\n\tend\n\n\t-- Add the watcher to the watchers table\n\tself.watchers[path] = watcher\n\n\t-- Return the watcher\n\treturn watcher", "CodeBleu_score": 44.859735099130575}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif not self.watchers[path] then\n\t\tself.watchers[path] = vim.loop.new_fs_event()\n\t\tself.watchers[path]:start(path, handler)\n\tend\n\n\treturn self.watchers[path]", "CodeBleu_score": 38.94454953101746}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks then\n\t\tself:set_signs(hunks)\n\tend\n\treturn hunks", "CodeBleu_score": 17.233542294859753}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks then\n\t\tself:update_signs(hunks)\n\telse\n\t\treturn hunks\n\tend", "CodeBleu_score": 17.609722771789407}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tself:set_signs(hunks)\n\treturn hunks", "CodeBleu_score": 16.413216297001078}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = fs.tmpname()\n\tfs.write_file(tmp_file, patch)\n\tlocal status, err = self:run_command(\"git\", \"apply\", \"--cached\", \"--unidiff-zero\", tmp_file)\n\tfs.remove_file(tmp_file)\n\treturn status, err", "CodeBleu_score": 43.56008897681136}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_path = fs.tmpname()\n\tfs.write_file(tmp_path, patch)\n\tlocal res, err = self:git(\"add\", \"-p\", tmp_path)\n\tfs.remove_file(tmp_path)\n\treturn res, err", "CodeBleu_score": 41.25356399652686}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = fs.tmpname()\n\tfs.write_file(temp_file, patch)\n\tlocal result, error_message = self:run_git(\"add\", temp_file)\n\tfs.remove_file(temp_file)\n\tif not result then\n\t\treturn nil, error_message\n\tend", "CodeBleu_score": 43.66583417482662}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\t// create an OAuth request to the access token endpoint\n\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n\t// add the necessary authentication header\n\trequest.addHeader(getAccessTokenHeaderName(), getHttpBasicAuthHeaderValue(getConsumer(), requestToken));\n\n\t// add the request token and verifier as body parameters\n\trequest.addBodyParameter(getAccessTokenRequestTokenParameterName(), requestToken.getToken());\n\trequest.addBodyParameter(getAccessTokenVerifierParameterName(), verifier.getValue());\n\n\t// send the request and extract the access token from the response body\n\treturn extract(getAccessTokenExtractor(), request);\n}", "CodeBleu_score": 42.61073369133775}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tRequest request = createAccessTokenRequest(requestToken, verifier);\n\tResponse response = send(request);\n\treturn extract(response);\n}", "CodeBleu_score": 19.36300835569455}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\t// Create a request to the access token endpoint\n\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n\t// Add the necessary authentication header\n\trequest.addHeader(getAccessTokenHeader(), getAccessTokenHeaderValue(requestToken, verifier));\n\n\t// Add the necessary body parameters\n\trequest.addBodyParameter(getAccessTokenBodyParameter(), getAccessTokenBodyParameterValue(requestToken, verifier));\n\n\t// Send the request\n\tsend(request);\n\n\t// Extract the access token from the response body\n\treturn extract(request);\n}", "CodeBleu_score": 41.613643056297754}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tAuthCache authCache = context.getAuthCache();\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\tcontext.setCredentialsProvider(new BasicCredentialsProvider());\n\tcontext.setAuthCache(authCache);\n\tlog.debug(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 43.54835272037414}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t//setCredentials\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(\n\t\tnew AuthScope(host.getHostName(), host.getPort()),\n\t\tnew UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\t//setAuthCache\n\tAuthCache authCache = new BasicAuthCache();\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\tcontext.setAuthCache(authCache);\n\t//log\n\tlog.info(\"Credentials for host \" + host.toHostString() + \" were added to auth cache\");\n}", "CodeBleu_score": 48.5861467613048}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Set up the credentials provider to use for this host\n\tcontext.setCredentialsProvider(new BasicCredentialsProvider());\n\t// Add the host to the auth cache\n\tBasicScheme basicAuth = new BasicScheme();\n\tcontext.getAuthCache().put(host, basicAuth);\n\t// Log the action of adding the host to the auth cache\n\tlog.info(\"Added host \" + host + \" to auth cache\");\n}", "CodeBleu_score": 31.315802624328715}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tif (source == null) {\n\t\tthrow new IllegalArgumentException(\"AvatarCacheSource cannot be null\");\n\t}\n\tif (size == null) {\n\t\tthrow new IllegalArgumentException(\"AvatarCacheSize cannot be null\");\n\t}\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache is not available\");\n\t}\n\tString key = hashKey(source.getName(), size);\n\tif (cache.lookup(key) == null) {\n\t\tcache.seed(key, source.getDigestOf(size));\n\t}\n\treturn getRootUrlFromRequest() + getUrlName() + \"/\" + rawEncode(key) + \"/\" + size;\n}", "CodeBleu_score": 31.410012123519916}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (source.getJenkins() == null) {\nthrow new IllegalArgumentException(\"AvatarCacheSource must have a Jenkins instance.\");\n}\nif (source.getJenkins().getExtensionList(AvatarCache.class).isEmpty()) {\nthrow new IllegalArgumentException(\"AvatarCacheSource must have an AvatarCache extension.\");\n}\nif (source.getJenkins().getExtensionList(AvatarCache.class).get(0) == null) {\nthrow new IllegalArgumentException(\"AvatarCacheSource must have an AvatarCache extension.\");\n}\nif (!AvatarCache.UTF8_SUPPORTED) {\nthrow new IllegalArgumentException(\"UTF-8 encoding is not supported.\");\n}\nAvatarCache cache = source.getJenkins().getExtensionList(AvatarCache.class).get(0);\nString key = cache.getKey(source.getName(), size);\ncache.seed(key, source.getJenkins().getRootUrl());\nString url = cache.getUrl(key, size);\nreturn url;\n}", "CodeBleu_score": 41.263031361367894}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (source == null) {\nthrow new IllegalArgumentException(\"AvatarCacheSource cannot be null\");\n}\nif (size == null) {\nthrow new IllegalArgumentException(\"Size cannot be null\");\n}\nif (Jenkins.getInstance() == null) {\nthrow new IllegalStateException(\"Jenkins instance cannot be null\");\n}\nAvatarCache cache = Jenkins.getInstance().getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"AvatarCache instance cannot be null\");\n}\nString key = source.getDigestOf(size);\nif (key == null) {\nthrow new IllegalStateException(\"AvatarCache key cannot be null\");\n}\ncache.seed(key, source);\nString rootUrl = Jenkins.getInstance().getRootUrlFromRequest();\nif (rootUrl == null) {\nthrow new IllegalStateException(\"Jenkins root URL cannot be null\");\n}\nString encodedKey = rawEncode(key);\nif (encodedKey == null) {\nthrow new IllegalStateException(\"AvatarCache key cannot be null\");\n}\nreturn rootUrl + \"avatar/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 42.12945081922559}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nimage = scaleImage(image);\n}\n}", "CodeBleu_score": 36.68280594751573}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nthis.image = scaleImage(image, 128, 128);\n}\n}", "CodeBleu_score": 43.279361081502365}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\n\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nBufferedImage newImage = scaleImage(image, 128, 128);\nthis.image = newImage;\n}\n}", "CodeBleu_score": 42.846284420397545}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\nif (future.isDone()) {\ntry {\ncacheEntry = future.get();\n} catch (Exception e) {\nfuture = null;\nreturn true;\n}\nfuture = null;\nimage = cacheEntry.getImage();\nlastModified = cacheEntry.getLastModified();\n}\nreturn true;\n}", "CodeBleu_score": 39.35530238900294}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nif (future.isDone()) {\nCacheEntry entry = future.get();\nimage = entry.getImage();\nlastModified = entry.getLastModified();\nfuture = null;\n}\n} catch (Exception e) {\nfuture = null;\n}\nreturn future!= null;\n}", "CodeBleu_score": 40.75387429517488}, {"code": "private synchronized boolean pending(){\n\tif (future!= null) {\ntry {\nif (future.isDone()) {\nif (future.get()!= null) {\nimage = future.get();\nlastModified = System.currentTimeMillis();\n}\nfuture = null;\n}\n} catch (Exception e) {\nfuture = null;\n}\n}\nreturn future!= null;\n}", "CodeBleu_score": 27.4998521101957}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tbyte[] image = generateImage(req, node);\nrsp.setContentType(\"image/png\");\nrsp.setContentLength(image.length);\nrsp.getOutputStream().write(image);\nif (flush) {\nrsp.getOutputStream().flush();\n}\n}", "CodeBleu_score": 31.01656041013777}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// TODO: Should we use the request or response?\n\t// TODO: Should we use the node?\n\t// TODO: Should we use the image?\n\t// TODO: Should we use the image type?\n\t// TODO: Should we use the image format?\n\t// TODO: Should we use the image quality?\n\t// TODO: Should we use the image width?\n\t// TODO: Should we use the image height?\n\t// TODO: Should we use the image background?\n\t// TODO: Should we use the image foreground?\n\t// TODO: Should we use the image padding?\n\t// TODO: Should we use the image border?\n\t// TODO: Should we use the image border color?\n\t// TODO: Should we use the image border width?\n\t// TODO: Should we use the image border radius?\n\t// TODO: Should we use the image border style?\n\t// TODO: Should we use the image border join?\n\t// TODO: Should we use the image border cap?\n\t// TODO: Should we use the image border miter?\n\t// TODO: Should we use the image border dash?\n\t// TODO: Should we use the image border spacing?\n\t// TODO: Should we use the image border offset?\n\t// TODO: Should we use the image border blur?\n\t// TODO: Should we use the image border spread?\n\t// TODO: Should we use the image border clip?\n\t// TODO: Should we use the image border origin?\n\t// TODO: Should we use the image border repeat?\n\t// TODO: Should we use the image border composite?\n\t// TODO: Should we use the image border opacity?\n\t// TODO: Should we use the image border colorize?\n\t// TODO: Should we use the image border saturate?\n\t// TODO: Should we use the image border hue?\n\t// TODO: Should we use the image border invert?\n\t// TODO: Should we use the image border opacity?\n\t// TODO: Should we use the image border contrast?\n\t// TODO: Should we use the image border brightness?\n\t// TODO: Should we use the image border grayscale?\n\t// TODO: Should we use the image border blur?\n\t// TODO: Should we use the image border blur radius?\n\t// TODO: Should we use the image border blur sigma", "CodeBleu_score": 9.483316362454275}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// get the image as a byte array\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tBufferedImage image = getGraphImage(req, node);\n\tImageIO.write(image, \"png\", baos);\n\tbaos.flush();\n\tbyte[] bytes = baos.toByteArray();\n\n\t// set the headers\n\trsp.setContentLength(bytes.length);\n\trsp.addHeader(\"Cache-Control\", \"max-age=3600, must-revalidate\");\n\trsp.setContentType(\"image/png\");\n\n\t// write the image to the response output stream\n\trsp.getOutputStream().write(bytes);\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 50.05791483815485}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tif (enableCache) {\nthis.teamCacheDuration = teamCacheDuration;\nthis.repositoriesCacheDuration = repositoriesCacheDuration;\n}\nif (authenticator!= null) {\nthis.authenticator = authenticator;\n}\n}", "CodeBleu_score": 15.137689049127218}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.configureContext();\n\tthis.setConnectionManager();\n\tthis.setClientProxyParams();\n\tthis.build();\n\tthis.convert();\n\tthis.setExpireDuration();\n\tthis.setConnectionManagerShared();\n\tthis.setRetryHandler();\n\tthis.setKeepAliveStrategy();\n\tthis.create();\n\tthis.configureBuilder();\n}", "CodeBleu_score": 27.951022589861672}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n}", "CodeBleu_score": 7.520147519375872}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketBranchValue sourceBranch = pullRequest.getSource();\n\tif (sourceBranch!= null) {\n\t\tif (sourceBranch.getBranch()!= null) {\n\t\t\t// TODO: This is a hack to get around the fact that the Bitbucket API doesn't return a node for the source branch.\n\t\t\t// We need to retrieve the node for the source branch from the Bitbucket API.\n\t\t\t// We could potentially cache this, but it's not clear how long this would be valid.\n\t\t\t// We could also retrieve the node from the source repository, but this would require the user to have read access to the source repository.\n\t\t\t// This is a temporary workaround until we can get the source branch's node from the Bitbucket API.\n\t\t\tBitbucketRepositoryValue sourceRepository = pullRequest.getSource().getRepository();\n\t\t\tBitbucketClient bitbucketClient = new BitbucketClient(sourceRepository.getSlug(), sourceRepository.getOwner().getSlug(), sourceRepository.getSlug());\n\t\t\tBitbucketBranchValue bitbucketSourceBranch = bitbucketClient.getBranch(sourceBranch.getBranch());\n\t\t\tif (bitbucketSourceBranch!= null) {\n\t\t\t\t// TODO: This is a hack to get around the fact that the Bitbucket API doesn't return a node for the source branch.\n\t\t\t\t// We need to retrieve the node for the source branch from the Bitbucket API.\n\t\t\t\t// We could potentially cache this, but it's not clear how long this would be valid.\n\t\t\t\t// We could also retrieve the node from the source repository, but this would require the user to have read access to the source repository.\n\t\t\t\t// This is a temporary workaround until we can get the source branch's node from the Bitbucket API.\n\t\t\t\tBitbucketNodeValue bitbucketSourceNode = bitbucketClient.getNode(bitbucketSourceBranch.getNode());\n\t\t\t\tif (bitbucketSourceNode!= null) {\n\t\t\t\t\t// TODO: This is a hack to get around the fact that the Bitbucket API doesn't return a node for the source branch.\n\t\t\t\t\t// We need to retrieve the node for the source branch from the Bitbucket API.\n\t\t\t\t\t// We could potentially cache this, but it's not clear how long this would be valid.\n\t\t\t\t\t// We could also retrieve the node from the source repository, but this would require the user to have read access to the source repository.\n\t\t\t\t\t// This is a temporary workaround until we can get the source branch's", "CodeBleu_score": 36.22528354032401}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketPullRequestValue.Branch sourceBranch = pullRequest.getSource();\n\tBitbucketPullRequestValue.Branch destinationBranch = pullRequest.getDestination();\n\n\tif (sourceBranch!= null) {\n\t\tBitbucketBranchValue sourceBranchValue = sourceBranch.getBranch();\n\t\tif (sourceBranchValue!= null) {\n\t\t\tBitbucketBranchValue.RawNode sourceBranchRawNode = sourceBranchValue.getRawNode();\n\t\t\tif (sourceBranchRawNode!= null) {\n\t\t\t\tString sourceBranchName = sourceBranchRawNode.getFullName();\n\t\t\t\tif (sourceBranchName!= null) {\n\t\t\t\t\tString sourceBranchRef = \"refs/heads/\" + sourceBranchName;\n\t\t\t\t\tCommitClosure sourceBranchClosure = new CommitClosure(sourceBranchRef, sourceBranchRawNode.getLatestCommit());\n\t\t\t\t\tpullRequest.setSource(sourceBranchClosure);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (destinationBranch!= null) {\n\t\tBitbucketBranchValue destinationBranchValue = destinationBranch.getBranch();\n\t\tif (destinationBranchValue!= null) {\n\t\t\tBitbucketBranchValue.RawNode destinationBranchRawNode = destinationBranchValue.getRawNode();\n\t\t\tif (destinationBranchRawNode!= null) {\n\t\t\t\tString destinationBranchName = destinationBranchRawNode.getFullName();\n\t\t\t\tif (destinationBranchName!= null) {\n\t\t\t\t\tString destinationBranchRef = \"refs/heads/\" + destinationBranchName;\n\t\t\t\t\tCommitClosure destinationBranchClosure = new CommitClosure(destinationBranchRef, destinationBranchRawNode.getLatestCommit());\n\t\t\t\t\tpullRequest.setDestination(destinationBranchClosure);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 28.80278189552179}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketBranchValue sourceBranch = pullRequest.getSource();\n\tif (sourceBranch!= null) {\n\t\tBitbucketBranchValue destinationBranch = pullRequest.getDestination();\n\t\tif (destinationBranch!= null) {\n\t\t\tBitbucketBranchValue.Node sourceNode = sourceBranch.getRawNode();\n\t\t\tif (sourceNode!= null) {\n\t\t\t\tString sourceCommitId = sourceNode.getCommitId();\n\t\t\t\tif (sourceCommitId!= null) {\n\t\t\t\t\tthis.setCommitClosure(sourceCommitId, new BitbucketCommitClosure(sourceBranch.getBranch()));\n\t\t\t\t}\n\t\t\t}\n\t\t\tBitbucketBranchValue.Node destinationNode = destinationBranch.getRawNode();\n\t\t\tif (destinationNode!= null) {\n\t\t\t\tString destinationCommitId = destinationNode.getCommitId();\n\t\t\t\tif (destinationCommitId!= null) {\n\t\t\t\t\tthis.setCommitClosure(destinationCommitId, new BitbucketCommitClosure(destinationBranch.getBranch()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.7816573290462}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tif (build == null) {\n\t\tthrow new IllegalArgumentException(\"The build cannot be null.\");\n\t}\n\n\tif (build.getParent() == null) {\n\t\tthrow new IllegalStateException(\"The build has no parent.\");\n\t}\n\n\tif (build.getParent().getParent() == null) {\n\t\tthrow new IllegalStateException(\"The build has no parent.\");\n\t}\n\n\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n\tif (jenkinsLocationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"The Jenkins location configuration is null.\");\n\t}\n\n\tString rootURL = jenkinsLocationConfiguration.getRootURL();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"The Jenkins root URL is null.\");\n\t}\n\n\tDisplayURLProvider displayURLProvider = JenkinsLocationConfiguration.get().getDisplayURLProvider();\n\tif (displayURLProvider == null) {\n\t\tthrow new IllegalStateException(\"The Jenkins display URL provider is null.\");\n\t}\n\n\treturn displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 49.808973027776474}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n\tif (location == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins location configuration\");\n\t}\n\tString url = location.getUrl();\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins location URL\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build, url);\n}", "CodeBleu_score": 51.462224467810216}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n\tif (location == null) {\n\t\tthrow new IllegalStateException(\"Jenkins Location configuration is null\");\n\t}\n\tString url = location.getUrl();\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"Jenkins Location URL is null\");\n\t}\n\tDisplayURLProvider displayUrlProvider = Jenkins.getInstance().getDescriptorByType(DisplayURLProvider.class);\n\tif (displayUrlProvider == null) {\n\t\tthrow new IllegalStateException(\"Display URL provider is null\");\n\t}\n\treturn displayUrlProvider.getRunURL(build, url);\n}", "CodeBleu_score": 46.141664439665085}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif\n(\n!\nurl\n.\nmatches\n(\n\"^(?:https?:\\\\/\\\\/)?[^\\\\/]+(?:\\\\/.*)?$\"\n)\n)\n{\nthrow\nnew\nIllegalStateException\n(\n\"The provided URL is malformed: \"\n+\nurl\n)\n;\n}\nif\n(\nurl\n.\nstartsWith\n(\n\"http://localhost\"\n)\n||\nurl\n.\nstartsWith\n(\n\"http://unconfigured-jenkins-location\"\n)\n)\n{\nthrow\nnew\nIllegalStateException\n(\n\"The provided URL is invalid: \"\n+\nurl\n)\n;\n}\nif\n(\nbitbucket\n.\nisCloud\n(\n)\n)\n{\nif\n(\n!\nurl\n.\ncontains\n(\n\"/\"\n)\n)\n{\nthrow\nnew\nIllegalStateException\n(\n\"The provided URL is invalid: \"\n+\nurl\n)\n;\n}\n}\nreturn\nurl\n;\n}", "CodeBleu_score": 24.691690806313048}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif\n(url\n.\ncontains\n(\n\"localhost\"\n)\n)\n{\nthrow\nnew\nIllegalStateException\n(\n\"Jenkins URL cannot use 'localhost' as the host. Please configure the Jenkins URL in the Bitbucket Cloud plugin settings.\"\n)\n;\n}\nif\n(url\n.\ncontains\n(\n\"unconfigured-jenkins-location\"\n)\n)\n{\nthrow\nnew\nIllegalStateException\n(\n\"Jenkins URL cannot use 'unconfigured-jenkins-location' as the host. Please configure the Jenkins URL in the Bitbucket Cloud plugin settings.\"\n)\n;\n}\nif\n(url\n.\ncontains\n(\n\"jenkins\"\n)\n)\n{\nif\n(url\n.\ncontains\n(\n\"/\"\n)\n)\n{\nthrow\nnew\nIllegalStateException\n(\n\"Jenkins URL cannot use 'jenkins' as the host. Please configure the Jenkins URL in the Bitbucket Cloud plugin settings.\"\n)\n;\n}\n}\nif\n(url\n.\ncontains\n(\n\"/\"\n)\n&&\nbitbucket\n.\nisCloud\n(\n)\n)\n{\nif\n(!url\n.\ncontains\n(\n\"://\"\n)\n)\n{\nthrow\nnew\nIllegalStateException\n(\n\"Jenkins URL must be fully qualified. Please configure the Jenkins URL in the Bitbucket Cloud plugin settings.\"\n)\n;\n}\n}\nreturn\nurl\n;\n}", "CodeBleu_score": 32.82133901285343}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url == null || url.isEmpty()) {\n\t\tthrow new IllegalStateException(\"Jenkins URL cannot be empty\");\n\t}\n\ttry {\n\t\tURI uri = new URI(url);\n\t\tif (uri.getHost() == null || uri.getHost().isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must contain a host\");\n\t\t}\n\t\tif (uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL cannot use localhost or unconfigured-jenkins-location as the host\");\n\t\t}\n\t\tif (bitbucket.isCloud() &&!uri.getHost().endsWith(bitbucket.getCloudDomain())) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must use a fully qualified host\");\n\t\t}\n\t\treturn url;\n\t} catch (URISyntaxException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\", e);\n\t}\n}", "CodeBleu_score": 58.935652724907925}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t/        final BitbucketSCMSourceContext context = source.getContext(build);", "CodeBleu_score": 5.486370523130354}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext ctx = source.getContext(build);\n\tif (ctx == null) {\n\t\treturn;\n\t}\n\tif (ctx.notificationsDisabled()) {\n\t\tlistener.getLogger().println(\"Bitbucket notifications are disabled for \" + source.getDisplayName());\n\t\treturn;\n\t}\n\tSCMRevision revision = ctx.getRevision();\n\tif (revision == null) {\n\t\treturn;\n\t}\n\tString hash = revision.getHash();\n\tif (hash == null) {\n\t\treturn;\n\t}\n\tBitbucketClient client = ctx.getClient();\n\tif (client == null) {\n\t\treturn;\n\t}\n\tString buildKey = ctx.getBuildKey();\n\tif (buildKey == null) {\n\t\treturn;\n\t}\n\tString buildUrl = build.getAbsoluteUrl();\n\tString originName = ctx.getOriginName();\n\tif (originName == null) {\n\t\treturn;\n\t}\n\tString revisionType = revision.getType();\n\tif (revisionType == null) {\n\t\treturn;\n\t}\n\tlistener.getLogger().println(\"Sending Bitbucket status for \" + revisionType + \" \" + hash + \" to \" + originName);\n\tString statusUrl = client.createStatus(buildUrl, hash, buildKey, revisionType);\n\tlistener.getLogger().println(\"Bitbucket status URL: \" + statusUrl);\n}", "CodeBleu_score": 35.72900089049189}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\titbucketSCMSourceContext context = source.getContext(build);\nif (context == null) {\nreturn;\n}\nif (context.notificationsDisabled()) {\nlistener.getLogger().println(\"Bitbucket notifications are disabled for this build.\");\nreturn;\n}\nString originName = context.getOriginName();\nString head = context.getHead();\nString hash = context.getHash();\nboolean shareBuildKey = context.getTraits(BitbucketSCMSourceContext.ShareBuildKeyTrait.class).shareBuildKey();\nlistener.getLogger().println(\"Sending Bitbucket status for \" + originName + \" \" + head + \" \" + hash);\nlistener.getLogger().println(\"Build key: \" + context.getBuildKey());\nBitbucketClient client = buildBitbucketClient(context);\nif (client == null) {\nreturn;\n}\nString notificationType = getNotificationType(source, build);\nif (notificationType == null) {\nreturn;\n}\ncreateStatus(client, notificationType, context, build);\n}", "CodeBleu_score": 36.74598732421559}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString folder = build.getParent().getFullName();\n String key = shareBuildKeyBetweenBranchAndPR? folder + \"-\" + branch : build.getFullName();\n return key;\n}", "CodeBleu_score": 33.89385508318306}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = build.getParent().getFullName() + \"-\" + branch;\n if (shareBuildKeyBetweenBranchAndPR) {\n buildKey = build.getParent().getFullName() + \"-\" + buildKey;\n }\n return buildKey;\n }", "CodeBleu_score": 38.51069023227327}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString jobName = build.getParent().getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n return String.format(\"%s/%s\", jobName, branch);\n }\n return jobName;\n }", "CodeBleu_score": 34.239520181799676}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl\n==\nnull\n) {\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\n}\nif (serverUrl\n==\nnull\n) {\nLOGGER\n.\nlog\n(\nLevel\n.\nWARNING\n,\n\"BitbucketSCMNavigator\n.\nserverUrl\nis\nnull\n.\nUsing\ndefault\nserver\nURL\n{0}\n.\n\"\n,\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n)\n;\n}\nif (traits\n==\nnull\n) {\ntraits\n=\nCollections\n.\nsingletonList\n(\nnew\nBitbucketSCMSourceTrait\n(\n)\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 12.131795442972246}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nif\n(\nserverUrlTrait\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\n}\nelse\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nresolveServerUrl\n(\nserverUrlTrait\n)\n;\n}\n}\nif\n(\ntraits\n==\nnull\n)\n{\nif\n(\nserverUrlTrait\n==\nnull\n)\n{\ntraits\n=\nCollections\n.\nemptyList\n(\n)\n;\n}\nelse\n{\ntraits\n=\nBitbucketSCMNavigator\n.\nresolveTraits\n(\nserverUrlTrait\n)\n;\n}\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 10.916787263399709}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\n}\nif (StringUtils\n.\nisBlank\n(\nserverUrl\n)\n)\n{\nLOGGER\n.\nwarn\n(\n\"Server URL is blank. Using default server URL: {}\"\n,\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n)\n;\n}\nif (traits\n==\nnull\n)\n{\ntraits\n=\nnew\nArrayList\n<\nSCMTrait\n>\n(\n)\n;\ntraits\n.\nadd\n(\nnew\nSCMTrait\n.\nAll\n(\n)\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 11.724115621239182}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (isMatch) {\n\t\tlogger.info(format(\"Proposed repository %s\", repository.getFullName()));\n\t\tcount++;\n\t} else {\n\t\tlogger.info(format(\"Ignored repository %s\", repository.getFullName()));\n\t}\n}", "CodeBleu_score": 51.60272257667854}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (repository == null) {\n\t\treturn;\n\t}\n\n\tString message = format(isMatch? \"Proposed\" : \"Ignored\", repository.getFullName());\n\tgetLogger().info(message);\n\n\tif (isMatch) {\n\t\tcount.incrementAndGet();\n\t}\n}", "CodeBleu_score": 48.55219315337993}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tString message = isMatch? \"Proposed\" : \"Ignored\";\n\tlog.info(\"{} repository {}/{}\", message, getFullName(repository), repository.getName());\n\tif (isMatch) {\n\t\tcount++;\n\t}\n}", "CodeBleu_score": 47.25288495912234}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// filter branches with hashes to find those whose commits don't exist locally\n\tList<RefSpec> refSpecs = getRefSpecs(scm, build, git, listener, marked, rev);\n\tif (refSpecs.isEmpty()) {\n\t    return rev;\n\t}\n\t// fetch the missing commits from the remote repository using the provided clone link\n\tfetch_(scm, git, listener, refSpecs);\n\treturn rev;\n    }", "CodeBleu_score": 16.057569649753667}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// The decorated revision is the same as the given revision\n\tRevision decorated = rev;\n\n\t// If the decorated revision is null, then the decorated revision is the same as the marked revision\n\tif (decorated == null) {\n\t    decorated = marked;\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t}\n\n\t// If the decorated revision is null, then the decorated revision is the same as the head revision\n\tif (decorated == null) {\n\t    decorated = git.getHead();\n\t", "CodeBleu_score": 17.955034692022213}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\treturn decorateRevisionToBuild(scm, build, git, listener, marked, rev, null);\n}", "CodeBleu_score": 8.152397014057044}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 60.84941137876611}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\n\tMap<String, BitbucketHref> linksMap = new HashMap<>();\n\tfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tlinksMap.put(entry.getKey(), entry.getValue());\n\t}\n\n\treturn linksMap;\n}", "CodeBleu_score": 48.85291462390564}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t}\n\treturn result;\n}", "CodeBleu_score": 52.11419297947097}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourceStatesToUri = new Map<SourceControlResourceState, Uri>();\n\tconst repositoryUris = new Set<string>();\n\tfor (const resourceState of resourceStates) {\n\t\tconst uri = await this.resourceStateToUri(resourceState);\n\t\tif (!uri) {\n\t\t\tcontinue;\n\t\t}\n\t\tresourceStatesToUri.set(resourceState, uri);\n\t\trepositoryUris.add(uri.authority);\n\t}\n\n\tif (repositoryUris.size === 0) {\n\t\treturn;\n\t}\n\n\tconst repositories = await this.sourceControl.getRepositories(Array.from(repositoryUris));\n\tif (repositories.length === 0) {\n\t\treturn;\n\t}\n\n\tconst filePaths = new Map<string, SourceControlResourceState>();\n\tfor (const resourceState of resourceStates) {\n\t\tconst uri = resourceStatesToUri.get(resourceState);\n\t\tif (!uri) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst repository = repositories.find(repository => repository.rootUri.authority === uri.authority);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst filePath = await this.uriToFilePath(uri, repository);\n\t\tif (!filePath) {\n\t\t\tcontinue;\n\t\t}\n\t\tfilePaths.set(filePath, resourceState);\n\t}\n\n\tif (filePaths.size === 0) {\n\t\treturn;\n\t}\n\n\tconst repositoryPromises = repositories.map(repository => this.addFilesToRepository(filePaths, repository));\n\tawait Promise.all(repositoryPromises);\n}", "CodeBleu_score": 39.347227391251636}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = await this.mapResourceStatesToURIs(resourceStates);\n\n\tfor (const repository of this.repositories) {\n\t\tconst paths = await this.mapURIsToPaths(uris, repository);\n\t\tconst errors = await this.addPathsToRepository(paths, repository);\n\n\t\tif (errors.length > 0) {\n\t\t\tthis.showErrors(errors);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 42.37848481117492}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// If no resources are selected, return.\n\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Get the resource states.\n\tconst resourceStatesToProcess = await this.getResourceStates(resourceStates);\n\n\t// If no resources are selected, return.\n\tif (!resourceStatesToProcess || resourceStatesToProcess.length === 0) {\n\t\treturn;\n\t}\n\n\t// Map the resource states to their URIs.\n\tconst resourceStatesToProcessWithURIs = await this.mapResourceStatesToURIs(resourceStatesToProcess);\n\n\t// If no resources are selected, return.\n\tif (!resourceStatesToProcessWithURIs || resourceStatesToProcessWithURIs.length === 0) {\n\t\treturn;\n\t}\n\n\t// Process the resource states by repository.\n\tawait this.processResourceStatesByRepository(resourceStatesToProcessWithURIs);\n}", "CodeBleu_score": 35.72041518232858}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tconst resourceStates = this.resourceStates;\n\tif (resourceStates.length === 0 ||!Uri.isUri(resourceStates[0])) {\n\t\tconst scm = await this.getSCM(resourceStates[0]);\n\t\tif (scm) {\n\t\t\tresourceStates.push(scm);\n\t\t}\n\t}\n\treturn resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 33.73700833419089}, {"code": "protected async getResourceStates{\n\t\tlet resourceStates: ResourceState[] = [];\n\n\tif (this.resourceStates.length === 0) {\n\t\tconst resourceUri = this.resourceUri;\n\t\tif (resourceUri instanceof Uri) {\n\t\t\tconst scmResource = await this.getScmResource(resourceUri);\n\t\t\tif (scmResource) {\n\t\t\t\tresourceStates.push(scmResource);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresourceStates = this.resourceStates;\n\t}\n\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 35.85269904974566}, {"code": "protected async getResourceStates{\n\t\tlet resourceStates: ResourceState[] = [];\n\tif (this.resourceStates.length === 0 || this.resourceStates[0].uri.constructor!== Uri) {\n\t\tresourceStates = await this.getResourceStatesFromSingleSCMResource();\n\t} else {\n\t\tresourceStates = this.resourceStates;\n\t}\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 34.301773943512856}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tconst activeEditor = this.activeEditor;\n\tif (uri) {\n\t\turi = uri.with({ scheme: 'file' });\n\t} else if (activeEditor) {\n\t\turi = activeEditor.document.uri;\n\t}\n\n\tif (!uri ||!uri.scheme || uri.scheme!== 'file') {\n\t\treturn;\n\t}\n\n\tconst fileUri = fileUri.file(uri);\n\tconst scm = this.sourceControlManager;\n\tconst repository = scm.getRepository(fileUri);\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst resource = await repository.getResourceFromFile(fileUri);\n\tif (!resource) {\n\t\treturn;\n\t}\n\n\treturn resource;\n  }", "CodeBleu_score": 40.51092271754865}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tif (!uri) {\n\t\turi = this.editor.document.uri;\n\t}\n\n\t// Convert the SVN URI to a file URI\n\tif (uri.scheme ==='svn') {\n\t\turi = toFileUri(uri);\n\t}\n\n\t// Get the source control manager and repository for the URI\n\tconst scm = this.sourceControlManager.getRepository(uri);\n\tif (!scm) {\n\t\treturn undefined;\n\t}\n\n\t// Get the resource for the URI\n\tconst resource = scm.getResource(uri);\n\tif (!resource) {\n\t\treturn undefined;\n\t}\n\n\treturn resource;\n}", "CodeBleu_score": 36.39051025943962}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tif (!uri) {\n\t\tconst editor = window.activeTextEditor;\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\turi = editor.document.uri;\n\t}\n\n\tif (uri.scheme ==='svn') {\n\t\turi = fromSvnUri(uri);\n\t}\n\n\tconst repository = this.sourceControlManager.getRepository(uri);\n\tif (!repository) {\n\t\treturn undefined;\n\t}\n\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 39.561312241880486}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tif (element.type =='modified') {\n\t\tlet oldRev = element.oldRevision;\n\t\tlet newRev = element.newRevision;\n\t\tlet oldPath = element.oldPath;\n\t\tlet newPath = element.newPath;\n\n\t\tlet oldPathInfo = await this.model.getRemoteRepository(oldPath);\n\t\tlet newPathInfo = await this.model.getRemoteRepository(newPath);\n\n\t\tlet oldPathRev = oldPathInfo.revision;\n\t\tlet newPathRev = newPathInfo.revision;\n\n\t\tif (oldPathRev == newPathRev) {\n\t\t\tlet diffCmd ='svn diff -r'+ oldRev + ':' + newRev +'' + oldPath;\n\t\t\tthis.openDiff(diffCmd);\n\t\t} else {\n\t\t\tlet diffCmd ='svn diff -r'+ oldRev + ':' + oldPathRev +'' + oldPath +'| svn diff -r'+ newPathRev + ':' + newRev +'' + newPath;\n\t\t\tthis.openDiff(diffCmd);\n\t\t}\n\t} else if (element.type == 'added') {\n\t\tlet newPath = element.newPath;\n\t\tlet newPathInfo = await this.model.getRemoteRepository(newPath);\n\t\tlet newPathRev = newPathInfo.revision;\n\t\tlet diffCmd ='svn diff -r'+ newPathRev + ':' + newPath;\n\t\tthis.openDiff(diffCmd);\n\t}\n}", "CodeBleu_score": 29.847020354369526}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst repository = await this.model.getRemoteRepository(element.path);\n\tconst diff = await repository.getDiff(element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n\tif (diff) {\n\t\tthis.openDiff(diff);\n\t} else {\n\t\tthis.openFileRemote(element.newPath, element.newRevision);\n\t}\n}", "CodeBleu_score": 43.978933500662514}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tlet repo = await this.model.getRemoteRepository(element.path);\n\tif (element.type === 'M') {\n\t\tconst oldRev = element.oldRevision;\n\t\tconst newRev = element.newRevision;\n\t\tconst oldPath = element.oldPath;\n\t\tconst newPath = element.path;\n\t\tconst diffCmd = `svn diff -r ${oldRev}:${newRev} ${repo.path}${oldPath} ${repo.path}${newPath}`;\n\t\tthis.openDiff(diffCmd);\n\t} else if (element.type === 'A') {\n\t\tconst newRev = element.newRevision;\n\t\tconst newPath = element.path;\n\t\tconst diffCmd = `svn cat -r ${newRev} ${repo.path}${newPath}`;\n\t\tthis.openFileRemote(diffCmd);\n\t}\n}", "CodeBleu_score": 38.641311782031494}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!window.clipboard) {\n\t\twindow.showErrorMessage(\"Clipboard not supported\");\n\t\treturn;\n\t}\n\tlet commit = item.commit;\n\tif (!commit) {\n\t\twindow.showErrorMessage(\"No commit information available\");\n\t\treturn;\n\t}\n\tlet message = what == \"message\"? commit.message : commit.revision;\n\twindow.clipboard.writeText(message);\n}", "CodeBleu_score": 36.58671377916776}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (vscode.env.clipboard.writeText) {\n\t\tlet commitMessage = '';\n\t\tif (what ==='message') {\n\t\t\tcommitMessage = item.commitMessage;\n\t\t} else {\n\t\t\tcommitMessage = item.commit;\n\t\t}\n\t\tawait vscode.env.clipboard.writeText(commitMessage);\n\t} else {\n\t\tvscode.window.showErrorMessage('Clipboard not supported');\n\t}\n}", "CodeBleu_score": 24.61363206866004}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (window.clipboard.writeText) {\n\t\tconst commitMessage = item.commitMessage;\n\t\tconst commitRevision = item.commitRevision;\n\t\tconst commitAuthor = item.commitAuthor;\n\t\tconst commitDate = item.commitDate;\n\t\tconst commitUrl = item.commitUrl;\n\n\t\tconst commitInfo = `${commitMessage}\n${commitRevision}\n${commitAuthor}\n${commitDate}\n${commitUrl}`;\n\t\tawait window.clipboard.writeText(commitInfo);\n\t\twindow.showInformationMessage(`Copied ${what} to clipboard.`);\n\t} else {\n\t\twindow.showErrorMessage('Clipboard is not supported.');\n\t}\n}", "CodeBleu_score": 33.818921838062096}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\t// TODO: Consider implementing a timeout for this method\n\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : factories) {\n\t\tif (f.canOpen(this)) {\n\t\t\tfactory = f;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n\t}\n\treturn factory.open(this);\n}", "CodeBleu_score": 18.689174195853553}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : factories) {\n\t\tif (factory.canOpen()) {\n\t\t\treturn factory.open();\n\t\t}\n\t}\n\tthrow new IOException(\"Unable to open Gitea connection\");\n}", "CodeBleu_score": 5.5256181199268815}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory[] factories = GiteaConnectionFactory.getFactories();\n\tGiteaConnection connection = null;\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\tif (factory.canOpen()) {\n\t\t\tconnection = factory.open();\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (connection == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n\t}\n\treturn connection;\n}", "CodeBleu_score": 21.54852031906852}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tif (jenkins!= null) {\n\t\treturn jenkins.pluginManager.pluginManager.getPlugin(Gitea.class).getInstance();\n\t}\n\treturn Gitea.getInstance();\n}", "CodeBleu_score": 22.56572290169565}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader cl = Jenkins.getInstanceOrNull().getPluginManager().getPlugin(Gitea.class).getPluginClassLoader();\n\tif (cl == null) {\n\t\tcl = Gitea.class.getClassLoader();\n\t}\n\treturn Jenkins.getInstanceOrNull().getDescriptorByType(Gitea.class).setClassLoader(cl);\n}", "CodeBleu_score": 42.82113218640106}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader cl = Jenkins.getInstanceOrNull().getPluginManager().getPlugin(Gitea.class).getPluginClassLoader();\n\tif (cl == null) {\n\t\tcl = Gitea.class.getClassLoader();\n\t}\n\treturn Gitea.class.cast(Gitea.class.getClassLoader().loadClass(Gitea.class.getName()).newInstance());\n}", "CodeBleu_score": 41.8426463304867}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = isNotBlank(displayName)? displayName : fromUrl(serverUrl);\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = isNotBlank(credentialsId)? credentialsId : null;\n\tthis.aliasUrl = isNotBlank(aliasUrl)? aliasUrl : null;\n}", "CodeBleu_score": 36.572737025616334}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = trimToNull(displayName);\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 28.959676694853304}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tsuper(displayName, serverUrl, manageHooks, credentialsId, aliasUrl);\n}", "CodeBleu_score": 13.290242156207196}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<Credentials> credentials = new ArrayList<>();\n\ttry {\n\t\tif (checkPermission(serverUrl)) {\n\t\t\tcredentials = includeMatchingAs(normalizeServerUrl(serverUrl), credentials);\n\t\t}\n\t} catch (Exception e) {\n\t\tLOGGER.log(Level.WARNING, \"Failed to populate credentials list\", e);\n\t}\n\treturn new StandardListBoxModel().withMatching(\n\t\t\tmatcher(serverUrl),\n\t\t\tcredentials,\n\t\t\tCredentials.class,\n\t\t\tCredentials.DISPLAY_NAME);\n}", "CodeBleu_score": 36.92432593575127}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<ListBoxModel.Option> result = new ArrayList<>();\n\tif (checkPermission(serverUrl, CredentialsProvider.USE_ITEM, GiteaAuth.class)) {\n\t\ttry {\n\t\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\t\tGiteaAuth giteaAuth = get(serverUrl);\n\t\t\tif (giteaAuth!= null) {\n\t\t\t\tList<GiteaAuth.Credential> credentials = giteaAuth.getCredentials();\n\t\t\t\tfor (GiteaAuth.Credential credential : credentials) {\n\t\t\t\t\tif (includeMatchingAs(credential, serverUrl)) {\n\t\t\t\t\t\tresult.add(new ListBoxModel.Option(credential.getId(), credential.getId()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Failed to load credentials for \" + serverUrl, e);\n\t\t}\n\t}\n\treturn new ListBoxModel(result);\n}", "CodeBleu_score": 36.327218667662116}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<ListBoxModel.Option> options = new ArrayList<>();\n\n\tString normalizedServerUrl = normalizeServerUrl(serverUrl);\n\tif (normalizedServerUrl!= null) {\n\t\ttry {\n\t\t\tboolean hasAdminPermissions = checkPermission(normalizedServerUrl);\n\t\t\tList<Credential> credentials = CredentialsProvider.lookupCredentials(GiteaAuth.class, Jenkins.getInstance(), ACL.SYSTEM, null);\n\t\t\tfor (Credential credential : credentials) {\n\t\t\t\tif (credential instanceof GiteaAuth) {\n\t\t\t\t\tGiteaAuth giteaAuth = (GiteaAuth) credential;\n\t\t\t\t\tif (hasAdminPermissions || includeMatchingAs(giteaAuth.getServerUrl(), normalizedServerUrl)) {\n\t\t\t\t\t\toptions.add(new ListBoxModel.Option(giteaAuth.getName(), giteaAuth.getName()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException | InterruptedException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Failed to populate credentials dropdown list\", e);\n\t\t}\n\t}\n\n\treturn new ListBoxModel(options);\n}", "CodeBleu_score": 32.52261654496148}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tserverUrl = uri.getScheme() + \"://\" + uri.getHost() + (uri.getPort()!= -1? \":\" + uri.getPort() : \"\");\n\t} catch (URISyntaxException e) {\n\t\t// Ignore the exception\n\t}\n\n\tserverUrl = serverUrl.toLowerCase();\n\tserverUrl = serverUrl.replaceAll(\":[0-9]+$\", \"\");\n\tserverUrl = serverUrl.replaceAll(\"/$\", \"\");\n\n\treturn serverUrl;\n}", "CodeBleu_score": 27.724657072799797}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tString query = uri.getQuery();\n\t\tString fragment = uri.getFragment();\n\t\tif (port == 80 && scheme.equals(\"http\")) {\n\t\t\tport = -1;\n\t\t} else if (port == 443 && scheme.equals(\"https\")) {\n\t\t\tport = -1;\n\t\t}\n\t\tif (path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\tif (path.isEmpty()) {\n\t\t\tpath = \"/\";\n\t\t}\n\t\treturn new URI(scheme, null, host, port, path, query, fragment).normalize().toString();\n\t} catch (URISyntaxException e) {\n\t\t// Ignore\n\t}\n\treturn null;\n}", "CodeBleu_score": 42.731378944685986}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tif (port == 80 && scheme.equals(\"http\")) {\n\t\t\treturn scheme + \"://\" + host + path;\n\t\t} else if (port == 443 && scheme.equals(\"https\")) {\n\t\t\treturn scheme + \"://\" + host + path;\n\t\t} else {\n\t\t\treturn scheme + \"://\" + host + \":\" + port + path;\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 29.131604027399572}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel();\n\tList<GiteaServer> servers = getServers();\n\tfor (GiteaServer server : servers) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (isBlank(displayName)) {\n\t\t\titems.add(server.getServerUrl());\n\t\t} else {\n\t\t\titems.add(displayName);\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 40.94635438160778}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\tList<GiteaServer> servers = getServers();\n\tfor (GiteaServer server : servers) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (isBlank(displayName)) {\n\t\t\tmodel.add(server.getServerUrl());\n\t\t} else {\n\t\t\tmodel.add(displayName, server.getServerUrl());\n\t\t}\n\t}\n\treturn model;\n}", "CodeBleu_score": 41.558011271130525}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\n\tfor (GiteaServer server : getServers()) {\n\t\tif (isBlank(server.getDisplayName())) {\n\t\t\tmodel.add(new Option(server.getServerUrl(), server.getServerUrl()));\n\t\t} else {\n\t\t\tmodel.add(new Option(server.getDisplayName(), server.getServerUrl()));\n\t\t}\n\t}\n\n\treturn model;\n}", "CodeBleu_score": 37.26149400205482}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\tif (servers.isEmpty()) {\n\t\treturn;\n\t}\n\tcheckPermission();\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tString url = fixNull(server.getUrl());\n\t\tif (url.isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (newServers.contains(server)) {\n\t\t\tcontinue;\n\t\t}\n\t\tnewServers.add(server);\n\t}\n\tif (newServers.isEmpty()) {\n\t\treturn;\n\t}\n\tservers = newServers;\n\tList<GiteaServer> oldServers = getServers();\n\tfor (Iterator<GiteaServer> i = oldServers.listIterator(); i.hasNext();) {\n\t\tGiteaServer server = i.next();\n\t\tif (servers.contains(server)) {\n\t\t\tcontinue;\n\t\t}\n\t\ti.remove();\n\t}\n\tfor (GiteaServer server : servers) {\n\t\tif (oldServers.contains(server)) {\n\t\t\tcontinue;\n\t\t}\n\t\toldServers.add(server);\n\t}\n\tsave();\n}", "CodeBleu_score": 39.66175468178633}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\tcheckPermission(GiteaServer.class, Item.CONFIGURE);\n\tservers = new ArrayList<>(servers);\n\tfor (Iterator<? extends GiteaServer> iterator = servers.iterator(); iterator.hasNext();) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (server == null || server.getUrl() == null || server.getUrl().trim().length() == 0) {\n\t\t\titerator.remove();\n\t\t} else {\n\t\t\tserver.setUrl(fixNull(server.getUrl()));\n\t\t}\n\t}\n\tif (servers.size() == 0) {\n\t\treturn;\n\t}\n\tif (servers.size()!= this.servers.size()) {\n\t\tthis.servers = servers;\n\t\tsave();\n\t} else {\n\t\tboolean changed = false;\n\t\tfor (int i = 0; i < servers.size(); i++) {\n\t\t\tGiteaServer server = servers.get(i);\n\t\t\tGiteaServer oldServer = this.servers.get(i);\n\t\t\tif (server.getUrl() == null || server.getUrl().trim().length() == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!server.getUrl().equals(oldServer.getUrl())) {\n\t\t\t\tchanged = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (changed) {\n\t\t\tthis.servers = servers;\n\t\t\tsave();\n\t\t}\n\t}\n}", "CodeBleu_score": 34.83171461415394}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tif (servers.size() == 0) {\n\t\tservers = Collections.singletonList(new GiteaServer(null, null, null));\n\t}\n\tif (servers.size() > 1) {\n\t\tIterator<? extends GiteaServer> iterator = servers.listIterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tGiteaServer server = iterator.next();\n\t\t\tif (server.getUrl() == null) {\n\t\t\t\titerator.remove();\n\t\t\t}\n\t\t}\n\t}\n\tif (servers.size() > 1) {\n\t\tIterator<? extends GiteaServer> iterator = servers.listIterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tGiteaServer server = iterator.next();\n\t\t\tif (server.getUrl()!= null) {\n\t\t\t\tIterator<? extends GiteaServer> iterator2 = servers.listIterator();\n\t\t\t\twhile (iterator2.hasNext()) {\n\t\t\t\t\tGiteaServer server2 = iterator2.next();\n\t\t\t\t\tif (server2!= server && server2.getUrl()!= null && server2.getUrl().equals(server.getUrl())) {\n\t\t\t\t\t\titerator2.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (servers.size() > 1) {\n\t\tIterator<? extends GiteaServer> iterator = servers.listIterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tGiteaServer server = iterator.next();\n\t\t\tif (server.getUrl()!= null) {\n\t\t\t\tIterator<? extends GiteaServer> iterator2 = servers.listIterator();\n\t\t\t\twhile (iterator2.hasNext()) {\n\t\t\t\t\tGiteaServer server2 = iterator2.next();\n\t\t\t\t\tif (server2!= server && server2.getUrl()!= null && server2.getUrl().equals(server.getUrl())) {\n\t\t\t\t\t\titerator2.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis.servers = servers;\n\tsave();\n}", "CodeBleu_score": 31.34416205333654}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn false;\n}\nString normalizedServerUrl = normalizeServerUrl(serverUrl);\nfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext();) {\nGiteaServer server = iterator.next();\nif (server.getServerUrl\n.equals\n(normalizedServerUrl)) {\niterator.remove();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 35.576776564576704}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn false;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nfor (Iterator<GiteaServer> iterator = getServers\n(\n).iterator\n(\n); iterator.hasNext\n(\n); ) {\nGiteaServer server = iterator.next\n(\n);\nif (server.getServerUrl\n(\n).equals\n(\nserverUrl\n)\n) {\niterator.remove\n(\n);\nupdateServers\n(\n);\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 36.097929687155336}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn false;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nGiteaServer serverToRemove = null;\nIterator<GiteaServer> iterator = getServers().iterator();\nwhile (iterator.hasNext()) {\nGiteaServer server = iterator.next();\nif (server.getServerUrl\n.\nequals\n(serverUrl)) {\nserverToRemove = server;\nbreak;\n}\n}\nif (serverToRemove!= null) {\ngetServers\n.\nremove\n(serverToRemove);\nsaveServers();\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 41.710489885235745}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tTypeElement annotatedType = (TypeElement) annotatedElement;\n\t\tString type = annotatedType.getQualifiedName().toString();\n\t\tSet<String> attributes = getAttributesFromAnnotation(annotatedType);\n\t\tdescriptorElements.add(new ConfigElement(type, attributes));\n\t}\n}", "CodeBleu_score": 53.09648411993477}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tfor (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tString type = annotatedElement.asType().toString();\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(annotatedElement, annotation);\n\t\tdescriptorElements.add(new ConfigElement(type, attributes));\n\t}\n}", "CodeBleu_score": 48.56566651798284}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(annotatedElement, annotation);\n\t\tString type = asType(annotatedElement.asType());\n\t\tdescriptorElements.add(new ConfigElement(attributes, type));\n\t}\n}", "CodeBleu_score": 64.60009788049226}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tTypeElement result = null;\nfor (TypeElement annotation : annotations) {\nString qualifiedName = annotation.getQualifiedName().toString();\nString annotationName = qualifiedName.replace('$', '.');\nif (annotationName.equals(annotationClass.getName())) {\nresult = annotation;\nbreak;\n}\n}\nreturn result;\n}", "CodeBleu_score": 53.304204784576434}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\n// Find the annotation type element for the annotation class\nTypeElement annotationTypeElement = elementUtils.getTypeElement(annotationClass.getCanonicalName());\n\n// Iterate through the provided annotations\nfor (TypeElement annotation : annotations) {\n\n// Get the annotation's qualified name and replace $ with.\nString qualifiedName = annotation.getQualifiedName().toString().replace('$', '.');\n\n// Check if the qualified name matches the target annotation class\nif (qualifiedName.equals(annotationTypeElement.getQualifiedName())) {\nreturn annotation;\n}\n}\n\n// Return null if the annotation is not found\nreturn null;\n}", "CodeBleu_score": 36.864613999591775}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tTypeElement annotationElement = null;\nfor (TypeElement annotation : annotations) {\nif (annotationClass.getName\n.replace\n.\nequals\n(annotation.getQualifiedName\n.\nreplace\n(\n.\n,\n.\n)\n)\n) {\nannotationElement = annotation;\nbreak;\n}\n}\nreturn annotationElement;\n}", "CodeBleu_score": 62.07384149179001}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"docstatus\": 1,\n                \"status\": [\"!=\", \"Cancelled\"],\n                \"workflow_state\": [\"!=\", \"Approved\"],\n                \"workflow_state\": [\"!=\", \"Rejected\"],\n                \"workflow_state\": [\"!=\", \"Cancelled\"],\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"docstatus\": 1,\n                \"status\": [\"!=\", \"Cancelled\"],\n                \"workflow_state\": [\"!=\", \"Approved\"],\n                \"workflow_state\": [\"!=\", \"Rejected\"],\n                \"workflow_state\": [\"!=\", \"Cancelled\"],\n            }\n        )\n\n    if approver_id:\n        filters.update({\"approver\": approver_id})\n\n    return filters\n\n", "CodeBleu_score": 23.11679175478715}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters.update({\n            \"name\": [\"not in\", frappe.db.get_all(\"Leave Application\", {\"employee\": employee, \"docstatus\": 1, \"status\": \"Approved\"})],\n            \"status\": [\"not in\", [\"Cancelled\"]],\n        })\n\n    else:\n        filters.update({\n            \"name\": [\"not in\", frappe.db.get_all(\"Leave Application\", {\"employee\": employee, \"docstatus\": 1, \"status\": \"Cancelled\"})],\n        })\n\n    if approver_id:\n        filters.update({\n            \"approver\": approver_id,\n            \"status\": [\"not in\", [\"Cancelled\"]],\n        })\n\n    else:\n        filters.update({\n            \"status\": [\"not in\", [\"Cancelled\"]],\n        })\n\n    return filters\n\n", "CodeBleu_score": 24.687020038718277}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n    if for_approval:\n        filters.update({\n            \"status\": \"Pending Approval\",\n            \"approver\": approver_id,\n        })\n    else:\n        filters.update({\n            \"status\": [\"!=\", \"Cancelled\"],\n            \"approver\": [\"!=\", employee],\n        })\n    workflow_state_filters = get_workflow_state_filters(\n        filters,\n        \"Leave Application\",\n        \"status\",\n        \"status_detail\",\n    )\n    if workflow_state_filters:\n        filters.update(workflow_state_filters)\n    else:\n        filters.update({\n            \"status\": \"Open\",\n        })\n    return filters\n", "CodeBleu_score": 28.7002216717123}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leaves = leave_details[leave_type]['allocated']\n        balance_leaves = allocated_leaves - leave_details[leave_type]['taken']\n        leave_balance_map[leave_type] = {'allocated': allocated_leaves, 'balance': balance_leaves}\n    return leave_balance_map\n\n", "CodeBleu_score": 40.257909163268344}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"allocated\"] - leave_details[leave_type][\"taken\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 36.89301584530823}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = datetime.datetime.now().date()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": leave_details[leave_type][\"allocated_leave\"],\n            \"balance_leave\": leave_details[leave_type][\"allocated_leave\"] - leave_details[leave_type][\"taken_leave\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 42.06269939325845}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = []\n    for holiday in holiday_list:\n        holiday['description'] = strip_html(holiday['description'])\n        holidays.append(holiday)\n    return sorted(holidays, key=lambda holiday: holiday['date'])\n\n", "CodeBleu_score": 22.342104758096188}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = db.query(Holiday).filter(Holiday.employee == employee).filter(Holiday.holiday_type!= \"Weekly Off\").order_by(Holiday.date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 31.258532210457574}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = query_holidays(employee)\n    holidays = [strip_html(holiday[\"description\"]) for holiday in holidays]\n    return holidays\n\n", "CodeBleu_score": 18.018190370674194}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the relevant settings\n    hr_settings = get_hr_settings()\n    # Get the current date\n    current_date = datetime.date.today()\n    # Get the next week's date\n    next_week_date = current_date + datetime.timedelta(days=7)\n    # Get the next week's day\n    next_week_day = next_week_date.weekday()\n    # Get the next week's day name\n    next_week_day_name = calendar.day_name[next_week_day]\n    # Get the next week's day number\n    next_week_day_number = next_week_day + 1\n    # Get the next week's day number\n    next_week_day_number = next_week_date.day\n    # Get the next week's month\n    next_week_month = next_week_date.month\n    # Get the next week's month name\n    next_week_month_name = calendar.month_name[next_week_month]\n    # Get the next week's year\n    next_week_year = next_week_date.year\n    # Get the next week's year name\n    next_week_year_name = calendar.year_name[next_week_year]\n    # Get the next week's date in the format \"day, month, year\"\n    next_week_date_format = next_week_day_name + \", \" + next_week_month_name + \" \" + str(next_week_day_number) + \", \" + next_week_year_name\n    # Check if the HR settings are set to send reminders\n    if hr_settings[\"send_reminders\"] == True:\n        # Check if the frequency is set to \"Weekly\"\n        if hr_settings[\"frequency\"] == \"Weekly\":\n            # Get the holiday reminders\n            holiday_reminders = get_holiday_reminders()\n            # Iterate through the holiday reminders\n            for holiday_reminder in holiday_reminders:\n                # Get the holiday reminder's date\n                holiday_reminder_date = holiday_reminder[\"date\"]\n                # Get the holiday reminder's day\n                holiday_reminder_day = holiday_reminder_date.weekday()\n                # Get the holiday reminder's day name\n                holiday_reminder_day_name = calendar.day_name[", "CodeBleu_score": 24.305014107959583}, {"code": "def send_reminders_in_advance_weekly()\n\t\n\n    # Get the settings for this module\n    module_settings = get_module_settings()\n\n    # If the module is enabled and the frequency is weekly, send the weekly reminders\n    if module_settings['enabled'] and module_settings['frequency'] == 'Weekly':\n        send_reminders_in_advance_weekly_inner(module_settings)\n\n", "CodeBleu_score": 13.766954681759676}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the settings for sending reminders in advance\n    send_reminders_in_advance_weekly = get_single_value(\"send_reminders_in_advance_weekly\")\n    send_reminders_in_advance_weekly_frequency = get_single_value(\"send_reminders_in_advance_weekly_frequency\")\n    # Check if reminders should be sent and if the frequency is set to \"Weekly\"\n    if send_reminders_in_advance_weekly == \"Yes\" and send_reminders_in_advance_weekly_frequency == \"Weekly\":\n        # Call the function to send the reminders\n        send_advance_holiday_reminders()\n", "CodeBleu_score": 24.60626972053492}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += self_rating.rating * self_rating.weightage / 100\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self.self_appraisal_score", "CodeBleu_score": 21.277946667301567}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += self_rating.rating * self_rating.weightage / 100\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    self.save()\n\n", "CodeBleu_score": 22.152427177571717}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * (self_rating.weightage / 100)\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self.self_appraisal_score", "CodeBleu_score": 23.05284143660012}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        formula = appraisal_cycle_doc.final_score_formula\n        data = self.get_data_for_formula()\n        data.update(self.as_dict())\n        formula = sanitize_expression(formula, data)\n        final_score = frappe.safe_eval(formula, data)\n        self.final_score = round(final_score, appraisal_cycle_doc.final_score_precision)\n    else:\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n        self.final_score = round(final_score, appraisal_cycle_doc.final_score_precision)\n", "CodeBleu_score": 34.59259794062774}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        try:\n            formula_data = {}\n            for key, value in appraisal_cycle_doc.final_score_formula_data.items():\n                formula_data[key] = frappe.get_doc(value[\"doctype\"], value[\"name\"]).as_dict()\n            formula_data.update(self.as_dict())\n            final_score = frappe.safe_eval(appraisal_cycle_doc.final_score_formula, formula_data)\n        except Exception:\n            frappe.throw(_(\"Invalid formula\"))\n    else:\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n    self.final_score = round(final_score, appraisal_cycle_doc.final_score_precision)\n", "CodeBleu_score": 36.32831692036186}, {"code": "def calculate_final_score(self)\n\t\n", "CodeBleu_score": 0.24509803921568626}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        leave_applications = frappe.db.sql(\"\"\"select name from `tabLeave Application` where employee = %s and status!= 'Cancelled'\"\"\", (self.employee), as_dict=1)\n        if leave_applications:\n            frappe.throw(_(\"Attendance cannot be marked for a future date as there is a leave application in progress for this employee.\"))\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked for a date earlier than the employee's date of joining.\"))\n\n", "CodeBleu_score": 32.29469501539281}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        if not frappe.db.get_value(\"Leave Application\", {\"employee\": self.employee, \"status\": [\"not in\", [\"Cancelled\", \"Rejected\"]]}, \"name\"):\n            if self.attendance_date > nowdate():\n                frappe.throw(_(\"Attendance for {0} cannot be marked for a future date\").format(self.employee))\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance for {0} cannot be marked before the date of joining\").format(self.employee))\n\n", "CodeBleu_score": 30.241044095127133}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.employee:\n        employee = frappe.get_doc(\"Employee\", self.employee)\n        if self.attendance_date > nowdate() and self.status!= \"On Leave\":\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'\"))\n        if self.attendance_date < employee.date_of_joining:\n            frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining\"))\n", "CodeBleu_score": 29.908640797827335}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    attendance_records = frappe.db.sql(\"\"\"\n        SELECT\n            name\n        FROM\n            `tabAttendance`\n        WHERE\n            employee = %s\n            AND attendance_date = %s\n            AND docstatus = 1\n            AND name!= %s\n    \"\"\", (self.employee, self.attendance_date, self.name), as_dict=1)\n\n    if attendance_records:\n        frappe.throw(_(\"Attendance record for {0} on {1} already exists. <a href='#Form/Attendance/{2}'>Click here</a> to view the existing attendance record.\").format(self.employee, format_date(self.attendance_date), attendance_records[0].name))\n\n", "CodeBleu_score": 28.929081679163787}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_record = frappe.db.sql(\"\"\"select name from `tabAttendance` where employee = %s and attendance_date = %s\"\"\", (self.employee, self.attendance_date), as_dict=1)\n    if duplicate_record:\n        frappe.throw(_(\"Attendance record for {0} on {1} already exists. Please check <a href='{2}'>here</a>\").format(self.employee, format_date(self.attendance_date), get_link_to_form(\"Attendance\", duplicate_record[0].name)))\n\n", "CodeBleu_score": 33.899747191211375}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date}):\n        frappe.throw(_(\"Attendance record for {0} on {1} already exists. <a href='{2}'>Click here</a> to view the existing record.\").format(self.employee, format_date(self.attendance_date), get_link_to_form(\"Attendance\", self.name)))", "CodeBleu_score": 32.529219110945576}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # Get the message details\n    message_details = self.get_message_details()\n\n    # Get the email addresses of users in the specified group\n    group_emails = self.get_user_emails_from_group()\n\n    # Send the email\n    self.send_email(message_details, group_emails)\n\n    # Update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 15.644206413370396}, {"code": "def send_summary(self)\n\t\"\"\n    self.get_message_details()\n    self.get_user_emails_from_group()\n    self.send_email()\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 10.37504160109577}, {"code": "def send_summary(self)\n\t\n    self.get_message_details()\n    self.get_user_emails_from_group()\n    frappe.sendmail(recipients=self.recipients, sender=self.sender, subject=self.subject, message=self.message,\n        attachments=self.attachments)\n    self.db_set(self.status, \"Sent\")\n    self.db_set(self.sent_on, frappe.utils.nowdate())\n    self.db_set(self.sent_by, frappe.session.user)\n    self.db_set(self.sent_on_time, frappe.utils.nowtime())\n    self.save(ignore_permissions=True)\n", "CodeBleu_score": 33.35396185013712}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        interviews = frappe.get_all(\"Interview\", filters={\"job_applicant\": self.job_applicant, \"interview_round\": self.interview_round}, fields=[\"name\"])\n        if len(interviews) > 1:\n            message = _(\"Job applicants are not allowed to appear twice for the same interview round. <a href='#Form/Interview/{0}'>View existing interview record</a>\").format(interviews[0][0])\n            frappe.throw(_(\"Duplicate interview record found for job applicant {0} in interview round {1}\").format(self.job_applicant, self.interview_round), frappe.DuplicateInterviewError, message)\n\n", "CodeBleu_score": 50.65987571707063}, {"code": "def validate_duplicate_interview(self)\n\t\n    # get interview records for the same job applicant and interview round\n    interview_records = frappe.get_all('Interview', filters={'job_applicant': self.job_applicant, 'interview_round': self.interview_round})\n    # if there are duplicate interview records, raise an exception\n    if len(interview_records) > 1:\n        # get the first interview record\n        first_interview_record = interview_records[0]\n        # get the job applicant's name\n        job_applicant_name = frappe.db.get_value('Job Applicant', self.job_applicant, 'name')\n        # get the job title\n        job_title = frappe.db.get_value('Job', self.job, 'job_title')\n        # get the interview round's name\n        interview_round_name = frappe.db.get_value('Interview Round', self.interview_round, 'name')\n        # get the interview round's start date\n        interview_round_start_date = frappe.db.get_value('Interview Round', self.interview_round,'start_date')\n        # raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n        frappe.throw(f'Job applicant {job_applicant_name} has already been interviewed in this round of interviews ({interview_round_name}) on {interview_round_start_date}. Please review the <a href=\"{get_link_to_form(\"Interview\", first_interview_record.name)}\">existing interview record</a> and make necessary changes.', title='Duplicate Interview')\n\n", "CodeBleu_score": 38.861100528665105}, {"code": "def validate_duplicate_interview(self)\n\t\n    if frappe.db.exists(\"Interview\", [[\"job_applicant\", \"=\", self.job_applicant], [\"interview_round\", \"=\", self.interview_round]]):\n        frappe.throw(_(\"Job applicants are not allowed to appear twice for the same interview round. <a href='#Form/Interview/{0}'>Click here</a> to view the existing interview record.\").format(self.name))\n\n", "CodeBleu_score": 28.27744717207042}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    ratings = [assessment.rating for assessment in self.assessments if assessment.rating is not None]\n    self.average_rating = sum(ratings) / len(ratings) if len(ratings) > 0 else 0", "CodeBleu_score": 23.09396691822067}, {"code": "def calculate_average_rating(self)\n\t\n    ratings = [assessment.rating for assessment in self.skill_assessments.all() if assessment.rating is not None]\n    if len(ratings) > 0:\n        self.average_rating = sum(ratings) / len(ratings)\n    else:\n        self.average_rating = 0\n    self.save()\n\n", "CodeBleu_score": 24.0612745087558}, {"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    self.average_rating = total / count if count else 0\n\n", "CodeBleu_score": 27.265551884867712}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.update(doc)\n    if \"interviewers\" in doc:\n        interview.append(\"interview_details\", {\"interviewer\": doc[\"interviewers\"]})\n    return interview\n\n", "CodeBleu_score": 43.45288209727162}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.append(\"interview_details\", {\n        \"interview_round\": doc.get(\"interview_round\"),\n        \"designation\": doc.get(\"designation\"),\n        \"interviewers\": doc.get(\"interviewers\")\n    })\n    return interview\n", "CodeBleu_score": 44.167667920929496}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview.update(doc)\n    if \"interviewers\" in doc:\n        interview.append(\"interview_details\", {\"interviewer\": interview.interviewers})\n    return interview\n\n", "CodeBleu_score": 46.38745432106871}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and creation = %s and docstatus = 1\"\"\", (self.designation, self.company, self.creation))\n    return job_offers\n", "CodeBleu_score": 30.574797921436364}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offer_list = frappe.get_all('Job Offer', filters={'designation': self.designation, 'company': self.company, 'creation': ['between', from_date, to_date], 'docstatus': 1}, fields=['name'])\n    return job_offer_list\n\n", "CodeBleu_score": 53.488436831843686}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.get_all(\"Job Offer\", filters = {\"designation\": self.designation, \"company\": self.company, \"from_date\": (\"between\", [from_date, to_date]), \"status\": 1}, fields = [\"name\"])\n    job_offers_list = []\n    for job_offer in job_offers:\n        job_offers_list.append(job_offer.name)\n    return job_offers_list\n\n", "CodeBleu_score": 52.65750263797866}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    :param company: the company name to filter by\n    :param department: the department to filter by\n    :return: the acceptance rate, the field type Percent\n    \"\"\"\n    # Count the total job offers with a docstatus of 1\n    total_offers = db.job_offer.find({\"docstatus\": 1}).count()\n    # Count the accepted job offers within the filters\n    if company:\n        accepted_offers = db.job_offer.find({\"docstatus\": 1, \"company\": company}).count()\n    elif department:\n        accepted_offers = db.job_offer.find({\"docstatus\": 1, \"department\": department}).count()\n    else:\n        accepted_offers = db.job_offer.find({\"docstatus\": 1}).count()\n    # Calculate the acceptance rate as a percentage\n    acceptance_rate = (accepted_offers / total_offers) * 100\n    # Return the acceptance rate and the field type Percent\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 6.7848698811146635}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        offer_count = db.job_offer.count(docstatus=1, company=company)\n        offer_accepted_count = db.job_offer.count(docstatus=1, company=company, accepted=True)\n    elif department:\n        offer_count = db.job_offer.count(docstatus=1, department=department)\n        offer_accepted_count = db.job_offer.count(docstatus=1, department=department, accepted=True)\n    else:\n        offer_count = db.job_offer.count(docstatus=1)\n        offer_accepted_count = db.job_offer.count(docstatus=1, accepted=True)\n    acceptance_rate = (offer_accepted_count / offer_count) * 100\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 29.654319043379274}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    :param company: Optional parameter to filter by company.\n    :param department: Optional parameter to filter by department.\n    :return: Tuple with the acceptance rate and the field type.\n    \"\"\"\n    if company and department:\n        count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus=1 and company=%s and department=%s\"\"\", (company, department), as_dict=1)\n    elif company:\n        count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus=1 and company=%s\"\"\", (company), as_dict=1)\n    elif department:\n        count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus=1 and department=%s\"\"\", (department), as_dict=1)\n    else:\n        count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus=1\"\"\", as_dict=1)\n    accepted = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus=1 and accepted=1\"\"\", as_dict=1)\n    if count[0].get('count(*)') == 0:\n        return 0, \"Percent\"\n    else:\n        return round(float(accepted[0].get('count(*)')) / float(count[0].get('count(*)')) * 100, 2), \"Percent\"\n\n", "CodeBleu_score": 16.57925205408779}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isSuccess()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.OK);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 71.20791005445089}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isSuccess()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.OK);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 71.20791005445089}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isSuccess()) {\n\t\treturn ResponseEntity.ok(result);\n\t} else {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n}", "CodeBleu_score": 63.27000811283763}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn Result.notFound();\n\t}\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn Result.forbidden();\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn Result.success();\n}", "CodeBleu_score": 37.32001519621775}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn Result.notFound();\n\t}\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn Result.forbidden();\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn Result.success();\n}", "CodeBleu_score": 37.32001519621775}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tif (companyStaffForUpdateDto.getId() == null) {\nreturn notFound();\n}\nfinal CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\nif (companyStaff == null) {\nreturn notFound();\n}\nif (!companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\nreturn unauthorized();\n}\ncompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\ncompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\nsave(companyStaff);\nreturn updated();\n}", "CodeBleu_score": 32.785225209266244}]}
