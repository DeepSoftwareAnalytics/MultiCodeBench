{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self.env['ir.attachment'].browse(args.get('ids'))\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    content = attachments._build_zip_from_attachments()\n    filename = 'attachments.zip'\n    headers = self._get_zip_headers(content, filename)\n    return request.make_response(content, headers=headers)\n\n", "CodeBleu_score": 43.80522707755365}, {"code": "def export_zip_documents(self, **args)\n\t\n\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('ids', [])\n    if not isinstance(attachment_ids, list):\n        attachment_ids = [attachment_ids]\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n\n    # Verify read access rights and rules for the attachments\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_writer:\n        for attachment in attachments:\n            zip_writer.writestr(attachment.name, attachment.datas)\n\n    # Prepare HTTP headers for the zip file\n    headers = [('Content-Type', 'application/zip'), ('Content-Disposition', 'attachment; filename=\"attachments.zip\"')]\n\n    # Return the zip file as an HTTP response\n    return Response(zip_file.getvalue(), headers=headers, status=200)\n\n", "CodeBleu_score": 39.48908195014963}, {"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachment_ids = self.env['ir.attachment'].browse(args.get('ids', []))\n    # check read access rights and rules for the attachments\n    attachment_ids.check_access_rights('read')\n    attachment_ids.check_access_rule('read')\n    # build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_archive:\n        for attachment in attachment_ids:\n            zip_archive.writestr(attachment.name, attachment.datas)\n    # prepare HTTP headers for the zip file\n    headers = [\n        ('Content-Type', 'zip'),\n        ('X-Content-Type-Options', 'nosniff'),\n        ('Content-Length', zip_file.tell()),\n        ('Content-Disposition', content_disposition(args.get('filename', 'attachments.zip'))),\n    ]\n    # return the zip file as an HTTP response\n    return Response(zip_file.getvalue(), headers=headers)\n", "CodeBleu_score": 36.29037182409798}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    self.env['ir.http'].session_store.update_record(values['invoices'](0).ids)\n    return request.render('account.portal_my_invoices', values)\n\n", "CodeBleu_score": 29.42021011327734}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['portal_history_id'] = values['invoices']._ids\n    return request.render('account.portal_my_invoices', values)", "CodeBleu_score": 29.69556319509789}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    if values.get('invoices') and values['invoices']():\n        self.env['ir.session'].write_last_portal_invoice_ids(values['invoices']().ids)\n    return request.render('portal.portal_my_invoices', values)\n", "CodeBleu_score": 38.83689938937789}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.sudo()._check_access('read', raise_exception=True):\n        raise AccessError(_(\"You do not have access to this invoice.\"))\n    if report_type == 'pdf':\n        if not invoice.sudo()._check_access('action_invoice_open', raise_exception=True):\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        if invoice.invoice_user_id.id!= request.session.uid:\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type, download=download)\n    elif report_type == 'html':\n        if not invoice.sudo()._check_access('action_invoice_open', raise_exception=True):\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        if invoice.invoice_user_id.id!= request.session.uid:\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type)\n    elif report_type == 'text':\n        if not invoice.sudo()._check_access('action_invoice_open', raise_exception=True):\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        if invoice.invoice_user_id.id!= request.session.uid:\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type)\n    else:\n        if not invoice.sudo()._check_access('action_invoice_open', raise_exception=True):\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        if invoice.invoice_user_id.id!= request.session.uid:\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n        return self._invoice_get_page_view_values(invoice, access_token)\n", "CodeBleu_score": 26.79682483720991}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.sudo()._check_access('read', raise_exception=False):\n        return request.redirect('/my/invoices')\n    if not invoice.sudo()._check_access('view', raise_exception=False):\n        return request.redirect('/my/invoices')\n    if invoice.sudo().state!= 'posted':\n        return request.redirect('/my/invoices')\n    if report_type == 'pdf':\n        return self._invoice_get_pdf_report(invoice, access_token, download=download)\n    if report_type == 'html':\n        return self._invoice_get_html_report(invoice, access_token)\n    if report_type == 'text':\n        return self._invoice_get_text_report(invoice, access_token)\n    return self._invoice_get_page_view(invoice, access_token)\n", "CodeBleu_score": 27.80392266944781}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice = request.env['account.move'].sudo().browse(invoice_id)\n        if not invoice:\n            return request.redirect('/my/invoices')\n        if invoice.state not in ['posted', 'paid']:\n            return request.redirect('/my/invoices')\n        if not invoice.user_has_groups('account.group_account_invoice'):\n            return request.redirect('/my/invoices')\n        if not invoice.company_id.sudo().user_has_groups('base.group_system'):\n            return request.redirect('/my/invoices')\n        if not invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_manager'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups('account.group_account_user'):\n            return request.redirect('/my/invoices')\n        if invoice.company_id.sudo().user_has_groups", "CodeBleu_score": 23.66172637316466}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.user.company_id\n    domain = [('company_id', '=', company.id)]\n    if company.account_sale_tax_id:\n        domain.append(('sale_taxes_id', '=', company.account_sale_tax_id.id))\n    if company.account_purchase_tax_id:\n        domain.append(('purchase_taxes_id', '=', company.account_purchase_tax_id.id))\n    return self.search(domain)\n", "CodeBleu_score": 24.30147995150297}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    products = self.env['product.template'].search([('company_id', '=', company.id)])\n    for product in products:\n        if company.account_sale_tax_id:\n            product.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n        if company.account_purchase_tax_id:\n            product.purchase_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n", "CodeBleu_score": 16.079726078008076}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    product_template_obj = self.env['product.template']\n    product_obj = self.env['product.product']\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = [('company_id', '=', self.env.company.id)]\n    prod_templates = product_template_obj.search(domain)\n    for prod_template in prod_templates:\n        # Updating the taxes for the products\n        if prod_template.company_id.account_sale_tax_id:\n            prod_template.taxes_id = [(6, 0, [prod_template.company_id.account_sale_tax_id.id])]\n        if prod_template.company_id.account_purchase_tax_id:\n            prod_template.purchase_taxes_id = [(6, 0, [prod_template.company_id.account_purchase_tax_id.id])]\n        # Updating the product\n        prod = product_obj.search([('product_tmpl_id', '=', prod_template.id)])\n        if prod:\n            prod.write({'taxes_id': [(6, 0, [prod_template.company_id.account_sale_tax_id.id])]})\n", "CodeBleu_score": 37.60637966911946}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['ir.model.data'].get_object_reference(company.id, 'account', xml_id)[1]\n    if account_id:\n        return self.env['account.account'].browse(account_id)\n    else:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)])\n        if account:\n            return account[0]\n        else:\n            return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 47.64148074113898}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id), ('user_type_id.type', '=', account_type)])\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type), ('internal_group', '=', True)])\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('internal_group', '=', True)])\n    return demo_account\n", "CodeBleu_score": 45.79078215272565}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Search for the demo account using the company's ID and the xml_id in the 'ir.model.data' model\n    demo_account_id = self.env['ir.model.data'].search([('model', '=', 'account.account'), ('name', '=', xml_id), ('module', '=', 'l10n_be_demo')], limit=1).res_id\n    if demo_account_id:\n        return self.env['account.account'].browse(demo_account_id)\n    # Search for an account matching the account_type within the company's domain\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if demo_account:\n        return demo_account\n    # Return the first account within the company's domain\n    return company.partner_id.property_account_receivable_id or company.partner_id.property_account_payable_id or company.partner_id.property_account_expense_id or company.partner_id.property_account_income_id\n", "CodeBleu_score": 49.58644727080216}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_types_grouped_by_company = self.env['account.account'].search([('company_id', '!=', False), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)]).mapped('company_id')._group_by_full_name()\n    for company_id, accounts in account_types_grouped_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(_('There should be only one account of type \"Current Year Earnings\" for each company.'))\n", "CodeBleu_score": 23.534740374218305}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    accounts_by_company = accounts.mapped('company_id')\n    for company in accounts_by_company:\n        if len(accounts_by_company.filtered(lambda x: x.id == company.id)) > 1:\n            raise ValidationError(_(\"There is more than one account with the 'Current Year Earnings' type for the company '%s'.\") % company.name)\n", "CodeBleu_score": 23.52301724665156}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_types_current_year_earnings = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    for account_type_current_year_earning in account_types_current_year_earnings:\n        if account_type_current_year_earning.company_id.id!= self.company_id.id:\n            continue\n        if len(account_type_current_year_earning.company_id.account_ids) > 1:\n            raise ValidationError(_(\"There is more than one account with the 'Current Year Earnings' type for the company '%s'.\") % (account_type_current_year_earning.company_id.name))\n\n\n\n\n", "CodeBleu_score": 21.298296189527314}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('default_partner_id'):\n        return self._order_accounts_by_frequency_for_partner(self._context['default_partner_id'])\n    domain = domain or []\n    if name:\n        domain += [|('name', operator, name)|]\n    return super(AccountAccount, self)._name_search(name, domain, operator=operator, limit=limit, order=order)\n", "CodeBleu_score": 30.24084141427637}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('search_default_partner_id'):\n            order = 'frequency'\n        else:\n            order = 'name'\n    else:\n        order = 'name'\n    return super(AccountAccount, self)._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 19.443955347976814}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('active_model') =='res.partner' and self._context.get('active_id'):\n        # If no name is given and specific context values are present, it orders accounts by frequency for a partner.\n        self._order_accounts_by_frequency_for_partner(self._context.get('active_id'))\n    else:\n        # Otherwise, it constructs a search domain based on the name and operator, combines it with the given domain, and performs the search with optional limit and order parameters.\n        domain = domain or []\n        if name:\n            domain += ['|', '|', '|', ('name', operator, name), ('ref', operator, name), ('parent_id.name', operator, name), ('parent_id.ref', operator, name)]\n        if operator in expression.NEGATIVE_TERM_OPERATORS:\n            domain = expression.NOT(domain)\n        if limit:\n            domain = expression.AND([domain, [('id', 'in', self._search(domain))]], limit=limit)\n        if order:\n            domain = expression.AND([domain, [('id', 'in', self._search(domain))]], order=order)\n        return self._search(domain)\n", "CodeBleu_score": 57.624843331281994}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].search([('sale_type', 'in', sale_types)])\n    query.add_where([('account_id', '=', self.account_id.id)])\n    query.add_where([('analytic_account_id', '=', self.analytic_account_id.id)])\n    move_ids = self.env['account.move.line'].query_get_analytic_accounts(query)\n    action = self.env.ref('account.action_move_line_form').read()[0]\n    action['context'] = dict(self._context, default_move_id=move_ids[0])\n    action['domain'] = [('id', 'in', move_ids)]\n    return action\n", "CodeBleu_score": 29.83753508763978}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].search([('sale_type', 'in', sale_types), ('account_id', '=', self.account_id.id)])\n    self.add_where(query)\n    self.add_analytic_accounts(query)\n    query.select = ['move_id']\n    query.group_by = ['move_id']\n    move_ids = self.execute(query)\n    return {\n        'type': 'ir.actions.act_window',\n        'name': _('Customer Invoices'),\n       'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'view_mode': 'tree,form',\n        'context': {'search_default_customer_invoiced': True, 'default_partner_id': self.id},\n    }\n", "CodeBleu_score": 29.951375084979837}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].with_context(active_test=False).with_context(active_id=self.id).with_context(active_ids=self.ids).with_context(active_domain=[('sale_type', 'in', sale_types), ('account_id.internal_type', '=','receivable')])\n    query.select = ['DISTINCT(move_id)']\n    query.add_where = [('account_id.internal_type', '=','receivable'), ('move_id', '!=', False)]\n    invoice_ids = query.execute()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', invoice_ids)]\n    action['context'] = {'search_default_group_by_move': True,'search_default_group_by_move_type': True}\n    return action\n", "CodeBleu_score": 30.77075396941848}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    self.env.cr.execute(\"\"\"\n    SELECT DISTINCT\n    move_id\n    FROM account_move_line\n    WHERE\n    move_id IN (SELECT id FROM account_move WHERE purchase_type IN (SELECT id FROM purchase_type WHERE name = 'Vendor Bill'))\n    AND\n    purchase_type IN (SELECT id FROM purchase_type WHERE name = 'Vendor Bill')\n    AND\n    move_id = %s\n    \"\"\", (self.id,))\n    result = self.env.cr.fetchall()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'type': 'in_invoice', 'default_move_type': 'in_invoice'}\n    action['domain'] = [('id', 'in', [x[0] for x in result])]\n    return action", "CodeBleu_score": 27.168607162707026}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n    self.ensure_one()\n   ", "CodeBleu_score": 5.61733718623822}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    self.env.cr.execute(\"\"\"SELECT DISTINCT move_id FROM account_move_line WHERE purchase_type_id = %s AND move_id IN (SELECT id FROM account_move WHERE id = %s)\"\"\", (self.purchase_type_id.id, self.id))\n    move_ids = self.env.cr.fetchall()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_purchase_type_id': self.purchase_type_id.id}\n    action['domain'] = [('id', 'in', move_ids)]\n    return action", "CodeBleu_score": 28.057455657604297}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t\n    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.11836716414241}, {"code": "def write(self, values)\n\t\n    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.11836716414241}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env['ir.config_parameter'].sudo().get_param('account_bank_account.skip_bank_account_creation'):\n        return self.env['account.bank.account']\n    else:\n        bank_account = self.env['account.bank.account'].search([('partner_id', '=', self.partner_id.id), ('account_number', '=', self.account_number)])\n        if not bank_account:\n            bank_account = self.env['account.bank.account'].create({\n                'partner_id': self.partner_id.id,\n                'account_number': self.account_number,\n                'company_id': self.company_id.id,\n            })\n        return bank_account.filtered(lambda x: x.company_id == self.company_id)\n\n", "CodeBleu_score": 55.127405132894495}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.env.user.company_id.create_bank_account:\n        return self.env['account.bank.account']\n    bank_account = self.search([('partner_id', '=', self.partner_id.id), ('company_id', '=', self.env.user.company_id.id), ('acc_number', '=', self.acc_number)], limit=1)\n    if not bank_account:\n        bank_account = self.env['account.bank.account'].create({\n            'partner_id': self.partner_id.id,\n            'company_id': self.env.user.company_id.id,\n            'acc_number': self.acc_number,\n            'bank_name': self.bank_name,\n            'bank_bic': self.bank_bic,\n            'bank_iban': self.bank_iban,\n            'bank_swift': self.bank_swift,\n            'bank_country_id': self.bank_country_id.id,\n            'bank_city': self.bank_city,\n            'bank_street': self.bank_street,\n            'bank_street2': self.bank_street2,\n            'bank_zip': self.bank_zip,\n            'bank_state_id': self.bank_state_id.id,\n        })\n    return bank_account.filtered(lambda r: r.company_id == self.env.user.company_id)\n\n", "CodeBleu_score": 48.57889568572736}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation', False):\n        return self.env['account.bank.statement.line']\n    else:\n        bank_account = self.env['account.bank.statement.line'].search([('partner_id', '=', self.partner_id.id), ('journal_id', '=', self.journal_id.id), ('account_number', '=', self.account_number)], limit=1)\n        if bank_account:\n            return bank_account\n        else:\n            return self.env['account.bank.statement.line'].create({\n                'partner_id': self.partner_id.id,\n                'journal_id': self.journal_id.id,\n                'account_number': self.account_number,\n            })\n\n", "CodeBleu_score": 43.58796997356878}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n    if suspense_line and not other_lines:\n        transaction_amount = -suspense_line.amount_currency\n        transaction_currency = suspense_line.currency_id\n    else:\n        # In case of to_check or partial reconciliation, we can't trust the suspense line.\n        transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n        transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n    journal_amount = sum(liquidity_line.mapped('amount_currency'))\n    journal_currency = liquidity_line.currency_id\n    company_amount = sum(liquidity_line.mapped('balance'))\n    company_currency = liquidity_line.company_currency_id\n    if currency == journal_currency:\n        if currency == company_currency:\n            return {\n                'transaction_amount': transaction_amount,\n                'journal_amount': journal_amount,\n                'company_amount': company_amount,\n            }\n        else:\n            return {\n                'transaction_amount': transaction_amount,\n                'journal_amount': currency.compute(journal_amount, company_currency),\n                'company_amount': currency.compute(company_amount, company_currency),\n            }\n    else:\n        if currency == company_currency:\n            return {\n                'transaction_amount': currency.compute(transaction_amount, journal_currency),\n                'journal_amount': journal_amount,\n                'company_amount': currency.compute(company_amount, journal_currency),\n            }\n        else:\n            return {\n                'transaction_amount': currency.compute(transaction_amount, journal_currency),\n                'journal_amount': currency.compute(journal_amount, company_currency),\n                'company_amount': currency.compute(company_amount, company_currency),\n            }\n", "CodeBleu_score": 29.344695458487593}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # Retrieve the accounting amounts and currencies from the statement line.\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n\n    # Convert the transaction amount to the currency of the statement line.\n    if transaction_currency!= currency:\n        if transaction_currency.is_zero(transaction_amount):\n            transaction_amount = 0.0\n        else:\n            transaction_amount = transaction_currency.with_context(date=self.date).compute(transaction_amount, currency)\n\n    # Convert the journal amount to the currency of the statement line.\n    if journal_currency!= currency:\n        if journal_currency.is_zero(journal_amount):\n            journal_amount = 0.0\n        else:\n            journal_amount = journal_currency.with_context(date=self.date).compute(journal_amount, currency)\n\n    # Convert the company amount to the currency of the statement line.\n    if company_currency!= currency:\n        if company_currency.is_zero(company_amount):\n            company_amount = 0.0\n        else:\n            company_amount = company_currency.with_context(date=self.date).compute(company_amount, currency)\n\n    # Compute the balance using the exchange rates between the statement line currency and the currency of the transaction.\n    balance = currency.with_context(date=self.date).compute(balance, company_currency)\n\n    # Adjust the transaction amount and balance depending on the currency type.\n    if currency.is_zero(transaction_amount):\n        transaction_amount = 0.0\n    else:\n        transaction_amount = currency.with_context(date=self.date).compute(transaction_amount, currency)\n    if currency.is_zero(balance):\n        balance = 0.0\n    else:\n        balance = currency.with_context(date=self.date).compute(balance, currency)\n\n    # Return the computed amounts and currencies in a dictionary.\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': currency,\n        'journal_amount': journal_amount,\n        'journal_currency': currency,\n        'company_amount': company_amount,\n        'company_currency': currency,\n        'balance': balance,\n    }\n", "CodeBleu_score": 36.04618668762275}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n    if suspense_line and not other_lines:\n        transaction_amount = -suspense_line.amount_currency\n        transaction_currency = suspense_line.currency_id\n    else:\n        # In case of to_check or partial reconciliation, we can't trust the suspense line.\n        transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n        transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': sum(liquidity_line.mapped('amount_currency')),\n        'journal_currency': liquidity_line.currency_id,\n        'company_amount': sum(liquidity_line.mapped('balance')),\n        'company_currency': liquidity_line.company_currency_id,\n    }\n\n", "CodeBleu_score": 15.201224029200272}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids.unlink()\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = self.env['account.payment.method.line'].create({\n                'payment_method_id': method.id,\n                'journal_id': journal.id,\n            } for method in journal._default_outbound_payment_methods())\n\n", "CodeBleu_score": 38.32641589160068}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.clear()\n        if journal.type in ('bank', 'cash'):\n            for payment_method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids.create({'payment_method_id': payment_method.id})\n\n", "CodeBleu_score": 34.89729229044979}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids.clear()\n    if self.type in ('bank', 'cash'):\n        default_outbound_payment_methods = self._default_outbound_payment_methods()\n        for payment_method in default_outbound_payment_methods:\n            self.outbound_payment_method_line_ids.create({\n                'payment_method_id': payment_method.id,\n                'journal_id': self.id,\n            })\n    else:\n        for payment_method in self.outbound_payment_method_line_ids:\n            payment_method.unlink()\n\n", "CodeBleu_score": 33.16650330518424}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t   for move in self:\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.context_today(move)\n        if move.invoice_date and not move.date:\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        if move.date!= fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n            move.with_context(recompute_tax_base_amount=True)._recompute_tax_base_amount()\n\n", "CodeBleu_score": 41.65027427136885}, {"code": "def _compute_date(self)\n\t   for move in self:\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.context_today(self)\n        elif not move.invoice_date and move.date:\n            move.date = move._get_accounting_date(move.date, move._affect_tax_report())\n        elif move.invoice_date and move.date:\n            if move.is_sale_document(include_receipts=True) and move.date!= move._get_accounting_date(move.invoice_date, move._affect_tax_report()):\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                move.env.context = dict(self.env.context, recompute_date=True)\n            elif not move.is_sale_document(include_receipts=True) and move.date!= move.invoice_date:\n                move.date = move.invoice_date\n                move.env.context = dict(self.env.context, recompute_date=True)\n\n", "CodeBleu_score": 43.05635919174321}, {"code": "def _compute_date(self)\n\t   for move in self:\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        elif not move.invoice_date and not move.date:\n            move.date = fields.Date.context_today(self)\n        else:\n            if move.is_sale_document(include_receipts=True):\n                if move.invoice_date and move.date!= move.invoice_date:\n                    move.date = move.invoice_date\n            else:\n                if move.invoice_date and move.date!= move._get_accounting_date(move.invoice_date, move._affect_tax_report()):\n                    move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        move._compute_date_done()\n\n\n", "CodeBleu_score": 43.671256783648246}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        elif move.is_purchase_document:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 37.90539199695451}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document():\n        if self.partner_id.property_payment_term_id:\n            self.payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    else:\n        self.payment_term_id = False\n", "CodeBleu_score": 30.935187582529306}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        elif move.is_purchase_document:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n\n", "CodeBleu_score": 38.89858478616589}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    tax_group_by_country_company = defaultdict(list)\n    for tax in self.filtered(lambda tax: tax.amount_type == 'group'):\n        tax_group_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n    for (country_id, company_id), taxes in tax_group_by_country_company.items():\n        for tax_group in tax_groups:\n            if (tax_group.country_id, tax_group.company_id) == (country_id, company_id):\n                for tax in taxes:\n                    tax.tax_group_id = tax_group.id\n                break\n        else:\n            for tax in taxes:\n                tax.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', company_id)], limit=1)\n", "CodeBleu_score": 33.06198343180527}, {"code": " def _compute_tax_group_id(self)\n\t\n    taxes = self.env['account.tax'].search([('company_id', '=', self.env.company.id)])\n    tax_groups_by_country_company = defaultdict(list)\n    for tax in taxes:\n        tax_groups_by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n    for (country_id, company_id), taxes in tax_groups_by_country_company.items():\n        for tax in taxes:\n            tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', country_id), ('company_id', '=', company_id)], limit=1)\n            if not tax.tax_group_id:\n                tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', company_id)], limit=1)\n", "CodeBleu_score": 33.24226142085151}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    tax_groups_by_country_company = defaultdict(dict)\n    for tax in self.filtered('tax_group_id'):\n        tax_groups_by_country_company[tax.country_id][tax.company_id] = tax.tax_group_id\n    for country, company_tax_groups in tax_groups_by_country_company.items():\n        for company, tax_group in company_tax_groups.items():\n            if tax_group:\n                continue\n            company_tax_groups[company] = self.env['account.tax.group'].search([('country_id', '=', country), ('company_id', '=', company)])\n            if not company_tax_groups[company]:\n                company_tax_groups[company] = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', company)])\n            tax_groups_by_country_company[country][company] = company_tax_groups[company]\n    for tax in self.filtered('tax_group_id'):\n        tax.tax_group_id = tax_groups_by_country_company[tax.country_id][tax.company_id]", "CodeBleu_score": 31.77783007049654}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # set database in session\n    self.login(login, password, db)\n    # prepare post data\n    post_data = {'name': module_file, 'force': force}\n    # upload module file\n    res = self.session.post(url, files={'file': open(module_file, 'rb')}, data=post_data)\n    res.raise_for_status()\n    return res.text\n", "CodeBleu_score": 28.110114607201066}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    response = self.session.get(url)\n    response.raise_for_status()\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n    # Upload the module file\n    files = {\n       'module_file': module_file,\n    }\n    response = self.session.post(url, data=data, files=files)\n    response.raise_for_status()\n    return response.text\n\n\n\n\n", "CodeBleu_score": 32.5190247200971}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.set_database(db)\n    # Prepare the POST request data\n    data = {'login': login, 'password':, 'db': db, 'force': force}\n    files = {'module_file': open(module_file, 'rb')}\n    # Upload the module file\n    res = self.session.post(url, data=data, files=files)\n    # Raise an exception if the module is not installed or is outdated\n    if res.text == 'Module not installed or outdated':\n        raise Exception('Module not installed or outdated')\n    # Return the server's response text\n    return res.text\n\n", "CodeBleu_score": 33.254919949204655}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Get configuration settings for database name and overwrite flag\n    db_name = config.get('database', 'name')\n    overwrite = config.getboolean('translation', 'overwrite')\n\n    # Create database registry and cursor\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        # Create TranslationImporter\n        translation_importer = TranslationImporter(cr, overwrite=overwrite)\n        # Load translation files and save translations\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'translations.csv'))\n        translation_importer.save()\n", "CodeBleu_score": 46.483919577431585}, {"code": "def import_translation()\n\t\n    import psycopg2\n    import os\n    import sys\n    import argparse\n    import odoo.tools.config as config\n    import odoo.tools.translate as translate\n    from odoo.tools import config\n    from odoo.tools.translate import TranslationImporter\n    from odoo.tools.translate import TranslationExporter\n    from odoo.tools.translate import TranslationManager\n    from odoo.tools.translate import TranslationRegistry\n    from odoo.tools.translate import TranslationSource\n    from odoo.tools.translate import TranslationTarget\n    from odoo.tools.translate import Translation\n    from odoo.tools.translate import TranslationKey\n    from odoo.tools.translate import TranslationString\n    from odoo.tools.translate import TranslationFile\n    from odoo.tools.translate import TranslationManager\n    from odoo.tools.translate import TranslationRegistry\n    from odoo.tools.translate import TranslationSource\n    from odoo.tools.translate import TranslationTarget\n    from odoo.tools.translate import Translation\n    from odoo.tools.translate import TranslationKey\n    from odoo.tools.translate import TranslationString\n    from odoo.tools.translate import TranslationFile\n    from odoo.tools.translate import TranslationManager\n    from odoo.tools.translate import TranslationRegistry\n    from odoo.tools.translate import TranslationSource\n    from odoo.tools.translate import TranslationTarget\n    from odoo.tools.translate import Translation\n    from odoo.tools.translate import TranslationKey\n    from odoo.tools.translate import TranslationString\n    from odoo.tools.translate import TranslationFile\n    from odoo.tools.translate import TranslationManager\n    from odoo.tools.translate import TranslationRegistry\n    from odoo.tools.translate import TranslationSource\n    from odoo.tools.translate import TranslationTarget\n    from odoo.tools.translate import Translation\n    from odoo.tools.translate import TranslationKey\n    from odoo.tools.translate import TranslationString\n    from odoo.tools.translate import TranslationFile\n    from odoo.tools.translate import TranslationManager\n    from odoo.tools.translate import TranslationRegistry\n    from odoo.tools.translate import TranslationSource\n    from odoo.tools.translate import TranslationTarget\n    from odoo.tools.translate import Translation\n    from odoo.tools.translate import TranslationKey\n    from odoo.tools.translate import TranslationString\n    from odoo.tools.translate import TranslationFile\n    from odoo.tools.translate import TranslationManager\n   ", "CodeBleu_score": 11.442801729325174}, {"code": "def import_translation()\n\t\n    # Get the database name and overwrite existing translations from the configuration file\n    database_name = config.get('database_name')\n    overwrite_existing = config.get('overwrite_existing')\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = Registry(database_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, overwrite_existing)\n\n        # Load translation files\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'translations.csv'))\n\n        # Save the translations\n        translation_importer.save()\n\n", "CodeBleu_score": 42.74611018019602}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    child = Node(name, info)\n    # Set the depth of the new node to the depth of the parent plus one\n    child.depth = self.depth + 1\n    # Append the new node to the children list if it's not already present\n    if child not in self.children:\n        self.children.append(child)\n    # Inherit certain attributes from the parent if they exist\n    if hasattr(self, 'name'):\n        child.name = self.name\n    if hasattr(self, 'info'):\n        child.info = self.info\n    if hasattr(self, 'children'):\n        child.children = self.children\n    # Sort the children by name\n    self.children.sort(key=lambda child: child.name)\n    # Return the new node\n    return child\n", "CodeBleu_score": 46.31772385137209}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        self.children[name] = Node(name, info)\n        self.children[name].depth = self.depth + 1\n        if hasattr(self, 'parent'):\n            self.children[name].parent = self.parent\n        if hasattr(self, 'children'):\n            self.children[name].children = self.children\n        if hasattr(self, 'attributes'):\n            self.children[name].attributes = self.attributes\n        self.children[name].sort_children()\n    return self.children[name]\n", "CodeBleu_score": 35.54719498790608}, {"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    child = Node(name, info)\n    # Set the depth of the child to be one more than the parent\n    child.depth = self.depth + 1\n    # Append the child to the children list if it's not already present\n    if child not in self.children:\n        self.children.append(child)\n    # Inherit certain attributes from the parent if they exist\n    if hasattr(self, 'children_by_name'):\n        child.children_by_name = self.children_by_name\n    if hasattr(self, 'children_by_info'):\n        child.children_by_info = self.children_by_info\n    # Sort the children by name and return the new node\n    self.children.sort(key=lambda x: x.name)\n    return child\n", "CodeBleu_score": 44.30700925011812}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    # Initialize the result with the dates and zeros for balances\n    result = {date: 0 for date in dates}\n    # Determine the account's root type\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    # Iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        if entry.account == account:\n            if root_type == \"Asset\":\n                result[entry.posting_date] += entry.debit - entry.credit\n            elif root_type == \"Expense\":\n                result[entry.posting_date] += entry.credit - entry.debit\n            elif root_type == \"Liability\":\n                result[entry.posting_date] += entry.credit - entry.debit\n            elif root_type == \"Equity\":\n                result[entry.posting_date] += entry.credit - entry.debit\n    # Accumulate the balance over time\n    for date in dates:\n        result[date] += result.get(date - timedelta(days=1), 0)\n    # Return the computed results\n    return result\n", "CodeBleu_score": 25.570426273299496}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {date: 0 for date in dates}\n    root_type = get_root_type(account)\n    if root_type == \"Asset\" or root_type == \"Expense\":\n        for entry in gl_entries:\n            if entry.account == account:\n                date = getdate(entry.posting_date)\n                if date in result:\n                    result[date] += entry.debit - entry.credit\n    elif root_type == \"Liability\" or root_type == \"Equity\":\n        for entry in gl_entries:\n            if entry.account == account:\n                date = getdate(entry.posting_date)\n                if date in result:\n                    result[date] += entry.credit - entry.debit\n    return result\n", "CodeBleu_score": 27.318301579408566}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\"dates\": dates, \"balances\": [0] * len(dates)}\n    if account.root_type == \"Asset\":\n        result[\"balances\"] = [0] * len(dates)\n    elif account.root_type == \"Expense\":\n        result[\"balances\"] = [0] * len(dates)\n        for i in range(len(dates)):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    elif account.root_type == \"Liability\":\n        result[\"balances\"] = [0] * len(dates)\n        for i in range(len(dates)):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    elif account.root_type == \"Equity\":\n        result[\"balances\"] = [0] * len(dates)\n        for i in range(len(dates)):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    for entry in gl_entries:\n        date_index = dates.index(entry.posting_date)\n        if account.root_type == \"Asset\":\n            result[\"balances\"][date_index] += entry.debit - entry.credit\n        elif account.root_type == \"Expense\":\n            result[\"balances\"][date_index] += entry.credit - entry.debit\n        elif account.root_type == \"Liability\":\n            result[\"balances\"][date_index] += entry.credit - entry.debit\n        elif account.root_type == \"Equity\":\n            result[\"balances\"][date_index] += entry.credit - entry.debit\n    return result\n\n", "CodeBleu_score": 25.28240962671875}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.old_account_type:\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.old_account_type not in [\"Receivable\", \"Payable\"]:\n                if self.get_gl_entries():\n                    frappe.msgprint(_(\"Account {0} has existing general ledger entries and will be removed if the account type is changed.\").format(self.account_name), title=_(\"Warning\"), indicator=\"orange\", alert=True)\n                    self.add_comment(_(\"Account type changed from {0} to {1}\").format(self.old_account_type, self.account_type))\n        else:\n            if self.old_account_type in [\"Receivable\", \"Payable\"]:\n                if self.get_gl_entries():\n                    frappe.msgprint(_(\"Account {0} has existing general ledger entries and will be removed if the account type is changed.\").format(self.account_name), title=_(\"Warning\"), indicator=\"orange\", alert=True)\n                    self.add_comment(_(\"Account type changed from {0} to {1}\").format(self.old_account_type, self.account_type))\n\n", "CodeBleu_score": 24.047859178800838}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.account_type_before_save:\n        if self.account_type in [\"Receivable\", \"Payable\"] and self.account_type_before_save not in [\"Receivable\", \"Payable\"]:\n            if frappe.db.sql(\"\"\"select count(*) from `tabGL Entry` where account = %s\"\"\", self.name):\n                frappe.msgprint(_(\"The account type for {0} has been changed from {1} to {2}. The Accounts report may not be accurate as there are existing general ledger entries for this account.\").format(self.name, self.account_type_before_save, self.account_type), indicator=\"orange\")\n                self.add_comment(_(\"Account type changed from {0} to {1}\").format(self.account_type_before_save, self.account_type))\n", "CodeBleu_score": 30.39721726781366}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # Get the account type before the save operation\n    before_account_type = self.get_doc_before_save(\"account_type\")\n\n    # Check if the account type has changed\n    if before_account_type!= self.account_type:\n        # Check if the account type has changed to a non-receivable/payable type\n        if self.account_type not in [\"Receivable\", \"Payable\"]:\n            # Check if there are existing general ledger entries for the account\n            if frappe.db.get_value(\"GL Entry\", {\"account\": self.name}):\n                # Generate a warning message\n                frappe.msgprint(\n                    _(\n                        \"Warning: Changing the account type to a non-receivable/payable type may result in potential issues in the Accounts report. Please ensure that you have reviewed and understood the implications of this change.\"\n                    ),\n                    title=_(\"Warning\"),\n                    indicator=\"red\",\n                    alert=True,\n                )\n                # Add a comment to the account record\n                self.add_comment(\n                    _(\"Account type changed from {0} to {1}\").format(\n                        before_account_type, self.account_type\n                    ),\n                    \"System\",\n                )\n\n", "CodeBleu_score": 27.085110138754143}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.currency:\n        self.set_value(\"is_currency_explicitly_specified\", 1)\n        self.set_value(\"currency\", self.currency)\n    else:\n        self.set_value(\"is_currency_explicitly_specified\", 0)\n        self.set_value(\"currency\", self.company_currency)\n    if self.is_group:\n        for child in self.get(\"children\"):\n            child.validate_account_currency()\n    else:\n        self.validate_account_currency_for_entries()\n", "CodeBleu_score": 24.333309512636685}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency:\n        self.is_explicit_currency = 1\n        if self.company:\n            self.currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n    else:\n        self.is_explicit_currency = 0\n        if self.company:\n            self.currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n        else:\n            self.currency = frappe.db.get_value(\"Global Defaults\", None, \"default_currency\")\n    if self.company:\n        self.company_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n    else:\n        self.company_currency = frappe.db.get_value(\"Global Defaults\", None, \"default_currency\")\n    if self.company:\n        self.company_name = frappe.db.get_value(\"Company\", self.company, \"company_name\")\n    else:\n        self.company_name = frappe.db.get_value(\"Global Defaults\", None, \"company_name\")\n    if self.company:\n        self.company_abbr = frappe.db.get_value(\"Company\", self.company, \"abbr\")\n    else:\n        self.company_abbr = frappe.db.get_value(\"Global Defaults\", None, \"abbr\")\n    if self.company:\n        self.company_address = frappe.db.get_value(\"Company\", self.company, \"address\")\n    else:\n        self.company_address = frappe.db.get_value(\"Global Defaults\", None, \"address\")\n    if self.company:\n        self.company_website = frappe.db.get_value(\"Company\", self.company, \"website\")\n    else:\n        self.company_website = frappe.db.get_value(\"Global Defaults\", None, \"website\")\n    if self.company:\n        self.company_phone = frappe.db.get_value(\"Company\", self.company, \"phone\")\n    else:\n        self.company_phone = frappe.db.get_value(\"Global Defaults\", None, \"phone\")\n    if self.company:\n        self.company_email = frappe.db.get_value(\"Company\", self.company, \"email\")\n    else:\n        self", "CodeBleu_score": 28.957130610501586}, {"code": "def validate_account_currency(self)\n\t\n\n    if self.currency and self.company:\n        if self.currency!= self.company:\n            self.explicit_currency = 1\n        else:\n            self.explicit_currency = 0\n\n        if self.company!= \"Default\":\n            self.currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\n    if self.company:\n        self.validate_currency_for_company()\n\n    if self.currency:\n        self.validate_currency_for_account()\n\n    self.validate_currency_for_entries()\n", "CodeBleu_score": 31.137984585026445}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": cfloat(entry.get(\"debit\")),\n                \"credit\": cfloat(entry.get(\"credit\")),\n                \"debit_in_account_currency\": cfloat(entry.get(\"debit_in_account_currency\")),\n                \"credit_in_account_currency\": cfloat(entry.get(\"credit_in_account_currency\")),\n                \"account_closing_balance\": cfloat(entry.get(\"account_closing_balance\")),\n                \"account_closing_balance_in_account_currency\": cfloat(entry.get(\"account_closing_balance_in_account_currency\")),\n                \"account_currency\": cstr(entry.get(\"account_currency\")),\n                \"company\": cstr(entry.get(\"company\")),\n                \"account\": cstr(entry.get(\"account\")),\n                \"cost_center\": cstr(entry.get(\"cost_center\")),\n                \"project\": cstr(entry.get(\"project\")),\n                \"finance_book\": cstr(entry.get(\"finance_book\")),\n                \"is_period_closing_voucher_entry\": cint(entry.get(\"is_period_closing_voucher_entry\")),\n                \"account_closing_balance_date\": cstr(entry.get(\"account_closing_balance_date\")),\n                \"account_closing_balance_date_time\": cstr(entry.get(\"account_closing_balance_date_time\")),\n                \"account_closing_balance_time_zone\": cstr(entry.get(\"account_closing_balance_time_zone\")),\n                \"account_closing_balance_in_account_currency_date\": cstr(entry.get(\"account_closing_balance_in_account_currency_date\")),\n                \"account_closing_balance_in_account_currency_date_time\": cstr(entry.get(\"account_closing_balance_in_account_currency_date_time\")),\n                \"account_closing_balance_in_account_currency_time_zone\": cstr(entry.get(\"account_closing_balance_in_account_currency_time_zone\")),\n                \"is_period_closing_voucher_entry_date\":", "CodeBleu_score": 29.840298486345397}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": key_values[\"account\"],\n                \"account_currency\": key_values[\"account_currency\"],\n                \"cost_center\": key_values[\"cost_center\"],\n                \"project\": key_values[\"project\"],\n                \"finance_book\": key_values[\"finance_book\"],\n                \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"account_closing_balance\": 0.0,\n                \"account_closing_balance_in_account_currency\": 0.0,\n            }\n\n        merged_entries[key][\"debit\"] += float(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += float(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += float(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += float(entry.get(\"credit_in_account_currency\"))\n\n        merged_entries[key][\"account_closing_balance\"] += float(entry.get(\"account_closing_balance\"))\n        merged_entries[key][\"account_closing_balance_in_account_currency\"] += float(entry.get(\"account_closing_balance_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 41.330721446322904}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"key_values\": key_values,\n            }\n        merged_entries[key][\"debit\"] += entry.get(\"debit\")\n        merged_entries[key][\"credit\"] += entry.get(\"credit\")\n        merged_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n        merged_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n\n    return merged_entries\n\n", "CodeBleu_score": 62.28461289680462}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier and self.supplier_is_blocked():\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if self.is_supplier_payment:\n            if supplier.on_hold == \"Yes\" and supplier.hold_type == \"Payment\":\n                if self.release_date and supplier.release_date < self.release_date:\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold for payment. The release date for this supplier is {1}. Please wait until the release date is reached before making this transaction.\"\n                        ).format(supplier.name, supplier.release_date)\n                    )\n        else:\n            if supplier.on_hold == \"Yes\" and supplier.hold_type == \"Invoice\":\n                if self.release_date and supplier.release_date < self.release_date:\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold for invoice. The release date for this supplier is {1}. Please wait until the release date is reached before making this transaction.\"\n                        ).format(supplier.name, supplier.release_date)\n                    )\n\n", "CodeBleu_score": 27.15968621921631}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_is_blocked:\n        if self.transaction_type == \"Supplier Payment\":\n            if self.supplier_on_hold_type == \"On Hold\":\n                if self.supplier_on_hold_release_date:\n                    if self.supplier_on_hold_release_date < nowdate():\n                        frappe.throw(_(\"{0} is on hold. Transaction cannot be processed until {1}\").format(self.supplier, self.supplier_on_hold_release_date))\n        else:\n            frappe.throw(_(\"{0} is on hold. Transaction cannot be processed until {1}\").format(self.supplier, self.supplier_on_hold_release_date))\n", "CodeBleu_score": 21.268382905552095}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_is_blocked:\n        if self.transaction_type == \"Payment\":\n            if self.supplier_hold_type == \"On Hold\":\n                if self.supplier_release_date < nowdate():\n                    frappe.throw(_(\"Supplier {0} is still on hold and cannot be paid\").format(self.supplier))\n                else:\n                    self.supplier_is_blocked = False\n            else:\n                frappe.throw(_(\"Supplier {0} is blocked and cannot be paid\").format(self.supplier))\n        elif self.transaction_type == \"Invoice\":\n            if self.supplier_hold_type == \"On Hold\":\n                if self.supplier_release_date < nowdate():\n                    frappe.throw(_(\"Supplier {0} is still on hold and cannot be invoiced\").format(self.supplier))\n                else:\n                    self.supplier_is_blocked = False\n            else:\n                frappe.throw(_(\"Supplier {0} is blocked and cannot be invoiced\").format(self.supplier))\n\n", "CodeBleu_score": 23.563784961854374}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.db.sql_list(\"\"\"select name from `tabDocType` where repost_doc = 1\"\"\")\n    if not repost_doctypes:\n        return\n\n    repost_doc_map = {}\n    for repost_doc in frappe.get_all(\n        \"Repost Voucher\",\n        filters=[\n            [\"voucher_type\", \"=\", self.voucher_type],\n            [\"voucher_number\", \"=\", self.voucher_number],\n        ],\n        fields=[\"parent\", \"parent_doctype\"],\n    ):\n        if repost_doc.parent_doctype not in repost_doctypes:\n            continue\n\n        repost_doc_map.setdefault(repost_doc.parent_doctype, {})\n        repost_doc_map[repost_doc.parent_doctype].setdefault(repost_doc.parent, [])\n        repost_doc_map[repost_doc.parent_doctype][repost_doc.parent].append(repost_doc)\n\n    for parent_doctype, parent_map in repost_doc_map.items():\n        for parent, repost_docs in parent_map.items():\n            parent_doc = frappe.get_doc(parent_doctype, parent)\n            for repost_doc in repost_docs:\n                if repost_doc.parent_doctype == \"Repost Voucher\":\n                    parent_doc.repost_vouchers.remove(repost_doc.name)\n                else:\n                    parent_doc.vouchers.remove(repost_doc.name)\n\n                parent_doc.flags.ignore_validate = True\n                parent_doc.flags.ignore_link_with = True\n                parent_doc.save()\n", "CodeBleu_score": 29.09304770601685}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.db.sql(\"\"\"select name from `tabDocType` where repost_doctype = 1\"\"\", as_dict=1)\n    repost_doctypes = [d.name for d in repost_doctypes]\n    if not repost_doctypes:\n        return\n    repost_rows = frappe.db.sql(\"\"\"select parent, parenttype, voucher_type, voucher_no from `tabRepost Voucher` where voucher_type = %(voucher_type)s and voucher_no = %(voucher_no)s\"\"\", {\n        \"voucher_type\": self.voucher_type,\n        \"voucher_no\": self.voucher_no\n    }, as_dict=1)\n    references_map = {}\n    for row in repost_rows:\n        references_map.setdefault(row.parenttype, {})\n        references_map[row.parenttype].setdefault(row.parent, [])\n        references_map[row.parenttype][row.parent].append(row)\n    for parenttype, parent_map in references_map.items():\n        for parent, rows in parent_map.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            parent_doc.flags.ignore_validate = True\n            parent_doc.flags.ignore_links = True\n            if parenttype == \"Journal Entry\":\n                parent_doc.repost_vouchers = [r.name for r in rows]\n            else:\n                parent_doc.vouchers = [r.name for r in rows]\n            parent_doc.save()\n", "CodeBleu_score": 25.796447878382956}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\"Repost DocType\", filters={\"is_repost_doctype\": 1})\n    if not repost_doctypes:\n        return\n\n    repost_vouchers = []\n    vouchers = []\n    for repost_doctype in repost_doctypes:\n        repost_vouchers.append(repost_doctype.repost_voucher_field)\n        vouchers.append(repost_doctype.voucher_field)\n\n    repost_vouchers = list(set(repost_vouchers))\n    vouchers = list(set(vouchers))\n\n    if not repost_vouchers and not vouchers:\n        return\n\n    if self.doctype in repost_vouchers:\n        vouchers.append(self.doctype)\n\n    if self.doctype in vouchers:\n        repost_vouchers.append(self.doctype)\n\n    if not repost_vouchers and not vouchers:\n        return\n\n    references_map = {}\n    for repost_voucher_field in repost_vouchers:\n        for voucher_field in vouchers:\n            if voucher_field == repost_voucher_field:\n                continue\n            repost_vouchers_rows = frappe.get_all(\n                repost_voucher_field,\n                filters={\n                    \"voucher_type\": self.doctype,\n                    \"voucher_number\": self.name,\n                },\n                fields=[\"parent\", \"parenttype\"],\n            )\n            if repost_vouchers_rows:\n                for row in repost_vouchers_rows:\n                    references_map.setdefault(row.parenttype, []).append(row)\n\n    for parenttype, rows in references_map.items():\n        for row in rows:\n            repost_doc = frappe.get_doc(dict(parenttype=parenttype, parent=row.parent))\n            repost_doc.repost_vouchers = [\n                d for d in repost_doc.repost_vouchers if d.voucher_type!= self.doctype\n            ]\n            repost_doc.vouchers = [\n                d for d in repost_doc.vouchers if d.voucher_type!= self.doctype\n            ]\n            repost_doc.flags.ignore_validate = True\n            re", "CodeBleu_score": 28.156293656986854}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n    except Exception as e:\n        raise e\n\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"count\": 100,\n            \"offset\": 0,\n        },\n    }\n\n    if account_id:\n        params[\"account_ids\"] = [account_id]\n\n    transactions = []\n\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **params)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Error fetching transactions\")\n            frappe.throw(_(str(e)), title=_(\"Error Fetching Transactions\"))\n\n        transactions.extend(response[\"transactions\"])\n\n        if len(response[\"transactions\"]) < params[\"options\"][\"count\"]:\n            break\n\n        params[\"options\"][\"offset\"] += params[\"options\"][\"count\"]\n\n    return transactions\n", "CodeBleu_score": 40.824724376882656}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n        if account_id:\n            params[\"account_ids\"] = [account_id]\n        response = self.client.Transactions.get(self.access_token, params)\n        transactions = response[\"transactions\"]\n        while response[\"total_transactions\"] > len(transactions):\n            response = self.client.Transactions.get(self.access_token, params, offset=len(transactions))\n            transactions.extend(response[\"transactions\"])\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(str(e)), title=_(\"Login Required\"))\n        else:\n            frappe.log_error(\"Plaid: Item error\")\n            frappe.throw(_(str(e)), title=_(\"Item Error\"))\n    except APIError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(str(e)), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(str(e)), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(str(e)), title=_(\"Login Required\"))\n        else:\n            frappe.log_error(\"Plaid: API error\")\n            frappe.throw(_(str(e)), title=_(\"API Error\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Timeout error\")\n        frappe.throw(_(\"Timeout Error\"), title=_(\"Timeout Error\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: General error\")\n        frappe.throw(_(str(e)), title=_(\"General Error\"))\n", "CodeBleu_score": 45.07495271510402}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        transactions = []\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": True},\n        }\n        if account_id:\n            params[\"account_ids\"] = [account_id]\n        while True:\n            response = self.client.Transactions.get(self.access_token, params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"total_transactions\"]:\n                params[\"offset\"] = len(transactions)\n            else:\n                break\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        else:\n            frappe.log_error(\"Plaid: Item error\")\n            frappe.throw(_(str(e)), title=_(\"Item Error\"))\n    except APIError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please login to your bank account to sync transactions.\"), title=_(\"Login Required\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please", "CodeBleu_score": 34.037460047008054}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    if response.get(\"error_code\"):\n        frappe.log_error(\"Plaid: Error adding institution: {0}\".format(response.get(\"error_message\")))\n    else:\n        bank = frappe.new_doc(\"Bank\")\n        bank.name = response[\"institution\"][\"name\"]\n        bank.bank_id = response[\"institution\"][\"institution_id\"]\n        bank.bank_name = response[\"institution\"][\"name\"]\n        bank.bank_code = response[\"institution\"][\"institution_code\"]\n        bank.access_token = token\n        bank.insert()\n        frappe.msgprint(\"Bank added successfully\")\n\n", "CodeBleu_score": 33.33821458601647}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response\n        institution_data = response[\"institution\"]\n        institution_id = institution_data[\"institution_id\"]\n        institution_name = institution_data[\"name\"]\n        institution_logo = institution_data[\"logo\"]\n\n        # Get an access token using the PlaidConnector\n        access_token = get_access_token(token)\n\n        # Check if the bank exists in the database\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution_id})\n        if bank:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create and insert a new bank record\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = institution_id\n            bank.name = institution_name\n            bank.logo = institution_logo\n            bank.access_token = access_token\n            bank.insert()\n\n        frappe.msgprint(\"Bank added successfully\")\n    except Exception as e:\n        frappe.log_error(e, \"Plaid: Error adding bank\")\n", "CodeBleu_score": 37.57995589806893}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution_code = response[\"institution\"][\"institution_code\"]\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"institution\"][\"bank_id\"]\n        bank_image = response[\"institution\"][\"logo\"]\n        bank_url = response[\"institution\"][\"url\"]\n        bank_primary_color = response[\"institution\"][\"primary_color\"]\n        bank_secondary_color = response[\"institution\"][\"secondary_color\"]\n        bank_display_name = response[\"institution\"][\"display_name\"]\n        bank_countries = response[\"institution\"][\"countries\"]\n        bank_products = response[\"institution\"][\"products\"]\n        bank_oauth_url = response[\"institution\"][\"oauth_url\"]\n        bank_oauth_nonces = response[\"institution\"][\"oauth_nonces\"]\n        bank_oauth_metadata = response[\"institution\"][\"oauth_metadata\"]\n        bank_oauth_version = response[\"institution\"][\"oauth_version\"]\n        bank_oauth_client_name = response[\"institution\"][\"oauth_client_name\"]\n        bank_oauth_client_id = response[\"institution\"][\"oauth_client_id\"]\n        bank_oauth_redirect_uri = response[\"institution\"][\"oauth_redirect_uri\"]\n        bank_oauth_client_secret = response[\"institution\"][\"oauth_client_secret\"]\n        bank_oauth_client_public_key = response[\"institution\"][\"oauth_client_public_key\"]\n        bank_oauth_client_private_key = response[\"institution\"][\"oauth_client_private_key\"]\n        bank_oauth_client_metadata = response[\"institution\"][\"oauth_client_metadata\"]\n        bank_oauth_token_endpoint = response[\"institution\"][\"oauth_token_endpoint\"]\n        bank_oauth_token_endpoint_auth = response[\"institution\"][\"oauth_token_endpoint_auth\"]\n        bank_oauth_token_endpoint_auth_version = response[\"institution\"][\"oauth_token_endpoint_auth_version\"]\n        bank_oauth_token_endpoint_client_id = response[\"institution\"][\"oauth_token_endpoint_client_id\"]\n        bank_oauth_token_endpoint_client_secret = response[\"institution\"][\"oauth_token_endpoint_client_secret\"]\n        bank_oauth_token_endpoint_client_public_key = response[\"institution\"][\"oauth_token_endpoint_client_public_key\"]\n        bank_oauth_token_endpoint_client_private_key = response[\"institution\"][\"oauth_token_endpoint_client", "CodeBleu_score": 18.777247748235897}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # Get the last integration date for the bank and bank account\n        last_integration_date = frappe.db.get_value(\n            \"Bank Integration\", {\"bank\": bank, \"bank_account\": bank_account}, \"last_integration_date\"\n        )\n        # If the last integration date is not set, use the current date\n        if not last_integration_date:\n            last_integration_date = today()\n\n        # Get the start date and end date for the transaction retrieval\n        start_date = add_months(last_integration_date, -1)\n        end_date = today()\n\n        # Attempt to fetch the transactions\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        # Update the last integration date to the date of the oldest transaction\n        if new_transactions:\n            last_integration_date = min(\n                [getdate(transaction[\"date\"]) for transaction in transactions]\n            )\n            frappe.db.set_value(\n                \"Bank Integration\",\n                {\"bank\": bank, \"bank_account\": bank_account},\n                \"last_integration_date\",\n                last_integration_date,\n            )\n\n        # Log the number of new transactions added\n        frappe.log_error(\n            message=f\"Synced {len(new_transactions)} new transactions for {bank} - {bank_account}\",\n            title=\"Bank Transaction Sync\",\n        )\n    except Exception as e:\n        # Log an error message if an exception occurs\n        frappe.log_error(\n            message=f\"Bank transaction sync error: {str(e)}\",\n            title=\"Bank Transaction Sync Error\",\n        )\n\n", "CodeBleu_score": 37.34239446100055}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get the last integration date for the bank and bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Integration\", {\"bank\": bank, \"bank_account\": bank_account}, \"last_integration_date\"\n    )\n    if not last_integration_date:\n        # If the last integration date is not found, use today's date as the start date\n        start_date = frappe.utils.nowdate()\n    else:\n        # If the last integration date is found, use it as the start date\n        start_date = frappe.utils.get_datetime(last_integration_date).date()\n\n    # Get the transactions for the bank and bank account\n    transactions = get_transactions(bank, bank_account, start_date=start_date)\n    if not transactions:\n        # If there are no transactions, log an error message and return\n        frappe.log_error(\n            message=\"No transactions found for bank {} and bank account {}.\".format(bank, bank_account),\n            title=\"Plaid Sync Error\",\n        )\n        return\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        last_integration_date = min([getdate(t[\"date\"]) for t in transactions])\n        frappe.db.set_value(\n            \"Bank Integration\",\n            {\"bank\": bank, \"bank_account\": bank_account},\n            \"last_integration_date\",\n            last_integration_date,\n        )\n\n    # Log the number of new transactions added\n    frappe.msgprint(\n        _(\"Synced {} new transactions for bank {} and bank account {}.\").format(\n            len(new_transactions), bank, bank_account\n        )\n    )\n\n", "CodeBleu_score": 37.014439501681615}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    bank_account_doc = frappe.get_doc(\"Bank Account\", bank_account)\n    bank_doc = frappe.get_doc(\"Bank\", bank)\n\n    # Determine the start and end dates for the transaction retrieval\n    start_date = bank_account_doc.last_integration_date or bank_doc.last_integration_date or today()\n    end_date = today()\n\n    # Fetch the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date\n    if new_transactions:\n        bank_account_doc.last_integration_date = min([getdate(t[\"date\"]) for t in transactions])\n        bank_account_doc.save()\n        bank_doc.last_integration_date = bank_account_doc.last_integration_date\n        bank_doc.save()\n\n    # Log the number of new transactions added\n    frappe.log_info(\n        _(\"Synced {0} transactions for Bank {1} and Bank Account {2}\").format(\n            len(new_transactions), bank, bank_account\n        )\n    )\n\n    # Handle any exceptions by logging an error message\n    except Exception:\n        frappe.log_error(\n            message=frappe.get_traceback(),\n            title=_(\"Bank Transaction Sync Error\"),\n        )\n\n", "CodeBleu_score": 30.558523176872253}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query = f\"select * from {entity}\"\n    total = self._get(self.base_url + \"/query\", params={\"query\": query}).json()[\"totalCount\"]\n    for offset in range(0, total, 1000):\n        response = self._get(self.base_url + \"/query\", params={\"query\": query, \"offset\": offset})\n        entries = response.json()[\"queryResponse\"][\"result\"][\"{0}s\".format(entity.lower())]\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 23.697532190855142}, {"code": "def _migrate_entries(self, entity)\n\t\n    if not self.access_token:\n        raise frappe.ValidationError(_(\"Access token is not set\"))\n\n    query_uri = f\"{self.base_uri}/{entity}?minorversion={self.minor_version}\"\n    total_entries = self._get_total_entries(query_uri)\n    entries = self._get_entries(query_uri, total_entries)\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)", "CodeBleu_score": 22.288555437620204}, {"code": "def _migrate_entries(self, entity)\n\t\n    query = f\"SELECT * FROM {entity}\"\n    total_entries = self._get_total_entries(query)\n    entries = []\n    for start in range(0, total_entries, 1000):\n        response = self._get(self.base_uri, params={\"query\": query, \"startPosition\": start})\n        if response.status_code == 200:\n            entries.extend(response.json()[\"QueryResponse\"][\"{0}s\".format(entity)])\n        else:\n            self._log_error(response.text)\n            break\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)\n", "CodeBleu_score": 31.579357949157476}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            invoice_dict = {\n                \"doctype\": \"Sales Invoice\",\n                \"quickbooks_id\": invoice[\"Id\"],\n                \"currency\": invoice[\"CurrencyRef\"][\"value\"],\n                \"conversion_rate\": invoice.get(\"ExchangeRate\", 1),\n                \"posting_date\": invoice[\"TxnDate\"],\n                \"due_date\": invoice.get(\"DueDate\", invoice[\"TxnDate\"]),\n                \"customer\": frappe.get_all(\n                    \"Customer\",\n                    filters={\n                        \"quickbooks_id\": invoice[\"CustomerRef\"][\"value\"],\n                        \"company\": self.company,\n                    },\n                )[0][\"name\"],\n                \"items\": self._get_si_items(invoice),\n                \"taxes\": self._get_taxes(invoice),\n                \"set_posting_time\": 1,\n                \"disable_rounded_total\": 1,\n                \"company\": self.company,\n            }\n            discount = self._get_discount(invoice[\"Line\"])\n            if discount:\n                if invoice[\"ApplyTaxAfterDiscount\"]:\n                    invoice_dict[\"apply_discount_on\"] = \"Net Total\"\n                else:\n                    invoice_dict[\"apply_discount_on\"] = \"Grand Total\"\n                invoice_dict[\"discount_amount\"] = discount[\"Amount\"]\n\n            invoice_doc = frappe.get_doc(invoice_dict)\n            invoice_doc.insert()\n            invoice_doc.submit()\n    except Exception as e:\n        self._log_error(e, [invoice, invoice_dict, json.loads(invoice_doc.as_json())])\n\n", "CodeBleu_score": 27.740950776376792}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"TxnType\"] == \"SalesOrder\":\n            self._save_sales_order(invoice)\n        elif invoice[\"TxnType\"] == \"SalesInvoice\":\n            self._save_sales_invoice(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"CreditMemo\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"TxnType\"] == \"Bill\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        else:\n            self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 30.955349422643586}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists({\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}):\n            if frappe.db.exists({\"doctype\": \"Journal Entry\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}):\n                self._save_invoice_as_journal_entry(invoice, invoice[\"Id\"])\n            else:\n                self._save_sales_invoice(invoice, invoice[\"Id\"])\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 29.240699473727116}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if start_date and end_date and no_of_visit:\n        interval = (end_date - start_date).days / no_of_visit\n        for i in range(no_of_visit):\n            schedule_date = add_days(start_date, interval * i)\n            schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n            schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 33.07024310878217}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    date_interval = (end_date - start_date).days / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=date_interval * i)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n", "CodeBleu_score": 28.787681190194085}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        # Adjust the schedule date to avoid holidays\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 27.936141695527063}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\tThis function generates a JSON response for a given view and data. It determines the method to handle the request, constructs a URL for bulk actions, and renders HTML content for a modal using the specified view and data. The response includes success status, message, data with title, path, handle, and the rendered HTML.\n */\n        $method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle']?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n           'success' => true,\n            'error' => false,\n           'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 85.04118728229356}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\nforeach ($contacts as $contact) {\n    try {\n        $contact->delete();\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error();\n    }\n}\n}", "CodeBleu_score": 57.573651115171806}, {"code": "<?\npublic function deleteContacts($request){\n\ttry {\n// Get the selected contacts\n$contacts = $this->getSelectedRecords($request);\n\n// Dispatch a delete operation for each contact\nforeach ($contacts as $contact) {\n$contact->delete();\n}\n\n// Display a success message\nflash('Contacts deleted successfully')->success();\n} catch (\\Exception $e) {\n// Display an error message if an exception occurs\nflash($e->getMessage())->error();\n}\n}", "CodeBleu_score": 54.903616786277624}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$selectedContacts = $this->getSelectedRecords($request);\n\tforeach ($selectedContacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 46.751152843354895}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\ttry {\n$transactions = $this->getSelectedRecords($request);\n\nforeach ($transactions as $transaction) {\n$this->dispatch(new DeleteTransactionJob($transaction));\n}\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}", "CodeBleu_score": 52.1139658527479}, {"code": "<?\npublic function deleteTransactions($request){\n\ttry {\n$transactions = $this->getSelectedRecords($request);\nforeach ($transactions as $transaction) {\ndispatch(new DeleteTransactionJob($transaction));\n}\nflash('The selected transactions have been deleted.')->success();\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}", "CodeBleu_score": 52.09950604826204}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\nforeach ($transactions as $transaction) {\ntry {\n$transaction->delete();\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}\n}", "CodeBleu_score": 49.06529275333782}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t}", "CodeBleu_score": 7.9136354944001415}, {"code": "<?\npublic function withValidator($validator){\n\t", "CodeBleu_score": 7.6190476190476195}, {"code": "<?\npublic function withValidator($validator){\n\t\n}", "CodeBleu_score": 7.9136354944001415}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->shouldUpdate()) {\n\t\t$this->update(...$arguments);\n\t}\n}", "CodeBleu_score": 9.5355358275699}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t// If the first argument is a Model instance, set the model.\n\tif ($arguments[0] instanceof Model) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\n\t// If the second argument is a Request instance, set the request.\n\tif ($arguments[1] instanceof Request) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n}", "CodeBleu_score": 25.43096466722724}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this instanceof ShouldUpdate) {\n\t\t$this->initializeUpdate(...$arguments);\n\t}\n}", "CodeBleu_score": 12.763573650208151}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$query->usingSearchString()->sortable($sort)->paginate(request()->has('limit')? request()->input('limit') : 10);\n\tif (request()->expectsJson() &&!request()->isNotApi()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate();\n}", "CodeBleu_score": 30.172883190575345}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t", "CodeBleu_score": 10.364635364635365}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\n$query->with('user');\n\n$query->where('user_id', auth()->user()->id);\n\n$query->where('status', 'active');\n\n$query->where('type', 'client');\n\n$query->where('name', 'like', \"%{$request->search}%\");\n\n$query->orderBy($sort, $request->order);\n\nif ($request->expectsJson()) {\n\nreturn $query->get();\n\n}\n\nreturn $query->paginate($request->per_page?? 10);\n\n}", "CodeBleu_score": 30.817539070087776}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$dueDate = $model->due_date;\n\t$today = Date::today()->toDateString();\n\n\tif ($model->status == 'paid') {\n\t\treturn array($openAmount, $overdueAmount);\n\t}\n\n\tforeach ($model->transactions as $transaction) {\n\t\tif ($transaction->status == 'paid') {\n\t\t\t$openAmount += $transaction->amount;\n\t\t} else if ($transaction->status == 'partial') {\n\t\t\t$openAmount += $transaction->amount;\n\t\t} else if ($transaction->status == 'overdue') {\n\t\t\t$overdueAmount += $transaction->amount;\n\t\t}\n\t}\n\n\tif ($dueDate < $today) {\n\t\t$overdueAmount += $openAmount;\n\t\t$openAmount = 0;\n\t}\n\n\treturn array($openAmount, $overdueAmount);\n}", "CodeBleu_score": 46.102919047643184}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$status = $model->status;\n\n\t// If the document is paid, return zeroes.\n\tif ($status == 'paid') {\n\t\treturn ['open' => 0, 'overdue' => 0];\n\t}\n\n\t// Get all transactions for the given document.\n\t$transactions = Transaction::where('document_id', $model->id)->get();\n\n\t// Loop through the transactions and calculate the open and overdue amounts.\n\tforeach ($transactions as $transaction) {\n\t\tif ($transaction->status == 'paid') {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$openAmount += $transaction->amount_converted_to_default;\n\t\t$overdueAmount += $transaction->amount_converted_to_default;\n\n\t\tif ($transaction->due_date <= Date::today()) {\n\t\t\t$overdueAmount -= $transaction->amount_converted_to_default;\n\t\t}\n\t}\n\n\t// Return the calculated open and overdue amounts.\n\treturn ['open' => $openAmount, 'overdue' => $overdueAmount];\n}", "CodeBleu_score": 37.29111434081979}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$openAmount = $model->amount;\n\t\t$overdueAmount = 0;\n\n\t\t$transactions = $model->transactions;\n\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$openAmount -= $transaction->amount;\n\t\t}\n\n\t\tif ($model->status == 'partial') {\n\t\t\t$openAmount = $model->amount;\n\t\t}\n\n\t\t$today = date('Y-m-d');\n\t\t$dueDate = $model->due_date;\n\n\t\tif ($today > $dueDate) {\n\t\t\t$overdueAmount = $openAmount;\n\t\t} else {\n\t\t\t$overdueAmount = 0;\n\t\t}\n\t}\n\n\treturn array(\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount,\n\t);\n}", "CodeBleu_score": 37.31581723314421}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t// If we have an explicit perPage value, we can just paginate the query up front so\n\t// we don't have to constantly check the per-page request for changes. We'll keep\n\t// the user-specified value in case the request is an API call to a route.\n\tif (isset($perPage)) {\n\t\t$this->perPage = $perPage;\n\t}\n\n\t// Next we will determine the total count of items for the query. We can do that by\n\t// simply tallying the total number of records found by the query, but first\n\t// we'll get the total count if we have it cached already. This allows us to\n\t// avoid multiple identical count queries if we know we need to beforehand.\n\tif (isset($this->total)) {\n\t\treturn $this->paginator($perPage, $columns, $pageName, $page);\n\t}\n\n\t// Here we will get the total count of the selected records from the database and set\n\t// the total attribute on this builder before we run the paginator. If this is not\n\t// a proper count query, we will fall back to getting the count manually from\n\t// the results by iterating through the results and counting them. This covers\n\t// both normal SQL queries as well as Eloquent scopes so we can always get these\n\t// counts for the developer. Lastly, we will set the total attribute in the\n\t// instance if the developer had specified it manually to avoid further queries\n\t// on the database by the paginator function.\n\t$total = $this->getCountForPagination();\n\n\t$this->total = $total;\n\n\treturn $this->paginator($perPage, $columns, $pageName, $page);\n}", "CodeBleu_score": 33.276502529587646}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t// Determine the current page\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t// Determine the per page\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t// Determine the total count of records\n\t$total = $this->toBase()->getCountForPagination();\n\t// Slice the results for the current page\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\t// Return a paginator instance\n\treturn $this->paginator($results, $total, $perPage, $page, $this->path());\n}", "CodeBleu_score": 55.361391421666575}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t// Determine how many items we want to be on each page\n\t$perPage = $this->getPerPage($perPage);\n\n\t// Get the total number of records\n\t$total = $this->getCountForPagination();\n\n\t// If the page is not specified, we will just use the current page from the request\n\t// or we will use the default page which is 1\n\t$page = $this->resolveCurrentPage($page);\n\n\t// Get the current page and the items that should be shown on the current page\n\t$results = $this->simplePaginate($perPage, $columns, $pageName, $page);\n\n\treturn $this->paginator($results, $total, $perPage, $page, [\n\t\t'path' => $this->toBase(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 51.16240167537246}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t", "CodeBleu_score": 6.493506493506493}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('account_id', $request->account_id)->whereBetween('started_at', [$request->started_at, $request->ended_at])->get();\nforeach ($reconciliations as $reconciliation) {\n\\DB::transaction(function () use ($reconciliation, $request) {\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n$transactions = Transaction::where('account_id', $reconciliation->account_id)\n->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n->where('is_reconciled', false)->get();\nforeach ($transactions as $transaction) {\n$transaction->is_reconciled = true;\n$transaction->save();\n}\n});\n}\n}", "CodeBleu_score": 46.04736535530184}, {"code": "<?\npublic function reconcile($request){\n\t", "CodeBleu_score": 6.493506493506493}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n$invitation = $this->user->invitations()->create([\n'invitation_token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\nthrow new Exception('Failed to dispatch notification job: '. $e->getMessage());\n}\nreturn $invitation;\n}", "CodeBleu_score": 21.399434271232725}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\nthrow new Exception('Failed to dispatch notification job.');\n}\nreturn $invitation;\n}", "CodeBleu_score": 25.570236832163072}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n$invitation = $this->user->invitations()->create([\n'token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\nthrow new Exception('Unable to send invitation email.');\n}\nreturn $invitation;\n}", "CodeBleu_score": 20.814939470518475}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isTransferTransaction) {\n\t\tthrow new UnauthorizedException(\"This is a transfer transaction. It cannot be authorized.\");\n\t}\n\tif ($this->isReconciled) {\n\t\tthrow new UnauthorizedException(\"This transaction has already been reconciled. It cannot be authorized.\");\n\t}\n}", "CodeBleu_score": 19.660274644003103}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isReconciled) {\n\t\tthrow new \\Exception(\"This transaction has already been reconciled and cannot be authorized.\");\n\t}\n\tif ($this->model->isTransferTransaction) {\n\t\tthrow new \\Exception(\"This transaction is a transfer transaction and cannot be authorized.\");\n\t}\n}", "CodeBleu_score": 24.540246373252}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled) {\n\t\tthrow new Exception('Transaction has already been reconciled.');\n\t}\n\tif ($this->isTransferTransaction) {\n\t\tthrow new Exception('Unauthorized transfer transaction.');\n\t}\n}", "CodeBleu_score": 24.398465785116237}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\t// TODO Auto-generated method stub\n\treturn false;\n}", "CodeBleu_score": 1.840722938793938}, {"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}, {"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\n}", "CodeBleu_score": 10.968036946150765}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\nBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\nLong count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nmap.put(\"total\", count);\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 94.59275456261103}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\nLong count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nmap.put(\"total\", count);\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 94.59841155843584}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\n    List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n    //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n    JSONObject outer = new JSONObject();\n    outer.put(\"id\", 0);\n    outer.put(\"key\", 0);\n    outer.put(\"value\", 0);\n    outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n    outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null!= dataListFun) {\n        //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n        List<Function> dataList = new ArrayList<>();\n        for (Function fun : dataListFun) {\n            String token = request.getHeader(\"X-Access-Token\");\n            Long tenantId = Tools.getTenantIdByToken(token);\n            if (tenantId!=0L) {\n                if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                    dataList.add(fun);\n                }\n            } else {\n                //\u8d85\u7ba1\n                dataList.add(fun);\n            }\n        }\n        dataArray = getFunctionList(dataList, type, keyId);\n        outer.put(\"children\", dataArray);\n    }\n    arr.add(outer);\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 95.73246367685468}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(systemConfigList.get(0));\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseData(e.getMessage());\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 37.273369557050664}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(getSystemConfig());\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setData(e.getMessage());\n\t\tlog.error(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 27.094343070726197}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setCode(200);\n\tresponse.setData(new SystemConfig());\n\ttry {\n\t\tSystemConfig config = systemConfigService.get();\n\t\tresponse.setData(config);\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t\tlog.error(\"Error getting system configuration\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 32.461562075692505}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(Constant.BUSINESS_PATH);\n\t\tFile file = getFile(request);\n\t\tif (isNotEmpty(businessPath) && isNotEmpty(file)) {\n\t\t\tString uploadType = request.getParameter(Constant.UPLOAD_TYPE);\n\t\t\tString fileName = file.getName();\n\t\t\tif (Constant.UPLOAD_TYPE_LOCAL.equals(uploadType)) {\n\t\t\t\tuploadLocal(businessPath, file, fileName);\n\t\t\t} else if (Constant.UPLOAD_TYPE_ALI_OSS.equals(uploadType)) {\n\t\t\t\tuploadAliOss(businessPath, file, fileName);\n\t\t\t}\n\t\t\tbaseResponseInfo.setCode(Constant.SUCCESS_CODE);\n\t\t\tbaseResponseInfo.setMessage(getMessage(Constant.UPLOAD_SUCCESS_MESSAGE, fileName));\n\t\t} else {\n\t\t\tbaseResponseInfo.setCode(Constant.ERROR_CODE);\n\t\t\tbaseResponseInfo.setMessage(getMessage(Constant.UPLOAD_ERROR_MESSAGE));\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\tbaseResponseInfo.setCode(Constant.ERROR_CODE);\n\t\tbaseResponseInfo.setMessage(getMessage(Constant.UPLOAD_ERROR_MESSAGE));\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 30.477020765771968}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\nString title = jsonObject.getString(\"title\");\nString head = jsonObject.getString(\"head\");\nString tip = jsonObject.getString(\"tip\");\nJSONArray arr = jsonObject.getJSONArray(\"list\");\nsystemConfigService.exportExcelByParam(title, head, tip, arr, response);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\n}", "CodeBleu_score": 94.49600541256909}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\nString title = jsonObject.getString(\"title\");\nString head = jsonObject.getString(\"head\");\nString tip = jsonObject.getString(\"tip\");\nJSONArray arr = jsonObject.getJSONArray(\"list\");\nsystemConfigService.exportExcelByParam(title, head, tip, arr, response);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\n}", "CodeBleu_score": 94.49600541256909}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\nAccount account=null;\ntry{\naccount=parseObject(obj);\nif(account.getInitialAmount()==null){\naccount.setInitialAmount(new BigDecimal(0));\n}\nif(account.getIsDefault()==null){\naccount.setIsDefault(0);\n}\nif(account.getIsEnabled()==null){\naccount.setIsEnabled(1);\n}\nresult=accountMapperEx.insertAccount(account);\nif(result==1){\ninsertLog(account, request);\n}\n}catch(Exception e){\nwriteFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 32.11948988710127}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\tAccount account = null;\n\ttry {\n\t\taccount = parseObject(obj);\n\t\taccount.setEnabled(true);\n\t\taccount.setIsDefault(accountMapperEx.getDefaultAccountCount(account.getName()) == 0);\n\t\tresult = accountMapper.insertSelective(account);\n\t\tif (result > 0) {\n\t\t\taccount.writeSuccess(logger, request);\n\t\t\taccount.insertLog(request);\n\t\t}\n\t} catch (Exception e) {\n\t\taccount.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 36.58278391313036}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t", "CodeBleu_score": 3.3888212609146513}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error in listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.724518423281914}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.143857470077755}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error getting count of accounts with name \" + name + \" and serial no \" + serialNo, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.618181591766138}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\ntry {\nresult = depotItemMapper.deleteByPrimaryKey(id);\n} catch (Exception e) {\nlogger.error(\"Exception while deleting depot item with ID \" + id, e);\n}\nreturn result;\n}", "CodeBleu_score": 60.89252820746971}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"deleteDepotItem\", e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 60.68510729394183}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item with ID \" + id, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 60.052300407028156}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\t// Create an HTTP client\n\t\thttpClient = HttpClients.createDefault();\n\t\t// Create an HTTP request\n\t\tString requestUrl = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(requestUrl);\n\t\t// Execute the request\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\t// Process the response\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tif (response.contains(nodeKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close resources\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.66815451228145}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"nodes/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tif (response.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 53.00126274258662}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\t// Create an HTTP client\n\t\thttpClient = HttpClients.createDefault();\n\t\t// Construct the request URL\n\t\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"addNode?nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n\t\t// Create an HTTP request\n\t\tHttpGet request = new HttpGet(url);\n\t\t// Execute the request\n\t\thttpResponse = httpClient.execute(request);\n\t\t// Process the response\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t// Read the response body as a string\n\t\t\tString responseBody = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t// Parse the response body as a JSON object\n\t\t\tJSONObject responseObject = new JSONObject(responseBody);\n\t\t\t// Get the \"key\" field from the JSON object\n\t\t\tString key = responseObject.getString(\"key\");\n\t\t\t// Return true if the \"key\" field is not empty\n\t\t\treturn!key.isEmpty();\n\t\t} else {\n\t\t\t// Handle HTTP error\n\t\t\tSystem.out.println(\"Error: \" + httpResponse.getStatusLine().getStatusCode());\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\t// Handle any exceptions\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\t// Close resources\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 49.320727697083875}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edge?type=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tString responseBody = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject jsonObject = new JSONObject(responseBody);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 49.998477426739385}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\t// Create a CloseableHttpClient instance\n\t\thttpClient = HttpClients.createDefault();\n\t\t// Create a HttpGet instance\n\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"edge/add?type=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n\t\t// Execute the request and get the response\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\t// Check the response status code\n\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\t// Read the response body\n\t\tString responseBody = EntityUtils.toString(httpResponse.getEntity());\n\t\t// Parse the response body as JSON\n\t\tJSONObject responseJSON = new JSONObject(responseBody);\n\t\t// Check if the \"key\" property exists in the response\n\t\tif (responseJSON.has(\"key\")) {\n\t\t\t// Get the value of the \"key\" property\n\t\t\tString key = responseJSON.getString(\"key\");\n\t\t\t// Check if the key is \"success\"\n\t\t\tif (key.equals(\"success\")) {\n\t\t\t\t// Return true if the response indicates success\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t// Return false if the response does not indicate success\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Ensure resources are closed\n\t\tclose(httpClient, httpResponse);\n\t}\n\t// Return false if the execution reaches this point\n\treturn false;\n}", "CodeBleu_score": 53.63342350088418}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\t\tSystem.out.println(url);\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tString json = EntityUtils.toString(httpResponse.getEntity());\n\t\tSystem.out.println(json);\n\t\tJSONObject jsonObject = new JSONObject(json);\n\t\treturn jsonObject.has(\"key\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 52.45992986467595}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event or message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(new Date());\n\tString json = writeValueAsString(event);\n\tif (target!= null) {\n\t\tproducer.send(new ProducerRecord<String, String>(target, json));\n\t} else {\n\t\tproducer.send(new ProducerRecord<String, String>(\"test\", json));\n\t}\n\tproducer.flush();\n}", "CodeBleu_score": 31.809731824008242}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = valueToString(event);\n\tif (event.getTarget()!= null) {\n\t\tproducer.send(new ProducerRecord<String, String>(event.getTarget(), json));\n\t} else {\n\t\tproducer.send(new ProducerRecord<String, String>(\"test\", json));\n\t}\n\tproducer.flush();\n}", "CodeBleu_score": 32.30449645397716}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString jsonString = convertEventToJson(event);\n\t\tif (event.getTarget() == null) {\n\t\t\tevent.setTarget(\"test\");\n\t\t}\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget(), jsonString);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 35.60693808543205}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t//        // Initialize the OSS client with access credentials\n//        OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n//\n//        // Upload the file content to the specified object name\n//        ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n//\n//        // Shut down the OSS client\n//        ossClient.shutdown();\n//\n//        // Return the URL of the uploaded object\n//        return config.getEndpoint() + \"/\" + config.getOssBucket() + \"/\" + objName;\n//    }", "CodeBleu_score": 3.9768209924122306}, {"code": "public String upload(String objName, byte[] content){\n\t//        OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        try {\n            ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n        } catch (OSSException oe) {\n            System.out.println(\"Caught an OSSException, which means your request made it to OSS, \"\n                    + \"but was rejected with an error response for some reason.\");\n            System.out.println(\"Error Message: \" + oe.getErrorCode());\n            System.out.println(\"Error Code:       \" + oe.getErrorCode());\n            System.out.println(\"Request ID:      \" + oe.getRequestId());\n            System.out.println(\"Host ID:           \" + oe.getHostId());\n        } catch (ClientException ce) {\n            System.out.println(\"Caught an ClientException, which means the client encountered \"\n                    + \"a serious internal problem while trying to communicate with OSS, \"\n                    + \"such as not being able to access the network.\");\n            System.out.println(\"Error Message: \" + ce.getMessage());\n        } finally {\n            ossClient.shutdown();\n        }\n        return config.getEndpoint() + \"/\" + config.getOssBucket() + \"/\" + objName;\n    }", "CodeBleu_score": 43.2212558263311}, {"code": "public String upload(String objName, byte[] content){\n\t//        String accessKeyId = config.getAccessKeyId();\n//        String accessKeySecret = config.getAccessKeySecret();\n//        String endpoint = config.getEndpoint();\n//        String bucketName = config.getOssBucket();\n//\n//        // Create a client instance\n//        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n//\n//        // Upload file\n//        ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n//\n//        // Close client\n//        ossClient.shutdown();\n//\n//        // Return the URL of the uploaded object\n//        return endpoint + \"/\" + bucketName + \"/\" + objName;\n    }", "CodeBleu_score": 4.075365161109065}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t1. Get an IpToLocationWorker instance.\n// 2. If the worker is unavailable, return a LocationInfo object with \"unknown\" values.\n// 3. Otherwise, use the worker to get location information based on the IP address and return the result.\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.getLocationInfoByIP(ipAddress);\n    }", "CodeBleu_score": 29.076906727037034}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tureIpToLocationWorker();\nIpToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\n    return new LocationInfo();\n}\nreturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 27.103811333915743}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t 1. \u83b7\u53d6\u4e00\u4e2aIpToLocationWorker\u5b9e\u4f8b\uff0c\u5982\u679c\u9700\u8981\u521d\u59cb\u5316\uff0c\u5219\u521d\u59cb\u5316\n\t// 2. \u5982\u679cworker\u4e0d\u53ef\u7528\uff0c\u8fd4\u56de\u4e00\u4e2aLocationInfo\u5bf9\u8c61\uff0c\u5176\u4e2d\u7684\u4fe1\u606f\u4e3a\u201cunknown\u201d\n\t// 3. \u5426\u5219\uff0c\u4f7f\u7528worker\u83b7\u53d6IP\u5730\u5740\u5bf9\u5e94\u7684\u5730\u7406\u4f4d\u7f6e\u4fe1\u606f\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\n\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 33.72076588024208}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (ESClient.class) {\n\t\tif (client == null) {\n\t\t\tif (clusterHostList == null || clusterHostPort == 0) {\n\t\t\t\tthrow new Exception(\"No cluster hosts specified.\");\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tclient = new TransportClient(Settings.EMPTY).addTransportAddresses(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t}\n\t}\n}", "CodeBleu_score": 37.49221971785756}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (this.lowLevelClient!= null && this.highLevelClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lowLevelClient == null) {\n\t\t\tthis.lowLevelClient = new LowLevelClient(this.clusterHostList, this.clusterHostPort);\n\t\t}\n\t\tif (this.highLevelClient == null) {\n\t\t\tthis.highLevelClient = new HighLevelClient(this.clusterHostList, this.clusterHostPort);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.87203979898797}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (esClient == null) {\n\t\t\tinitESClient();\n\t\t}\n\t}\n}", "CodeBleu_score": 9.253494842330529}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tif (clusterHostList!= null) {\n\t\tString[] hostStrings = clusterHostList.split(\",\");\n\t\tfor (String hostString : hostStrings) {\n\t\t\tif (hostString.trim().length() > 0) {\n\t\t\t\tint port = clusterPort;\n\t\t\t\tint index = hostString.indexOf(\":\");\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tString portString = hostString.substring(index + 1);\n\t\t\t\t\tport = Integer.parseInt(portString);\n\t\t\t\t}\n\t\t\t\thosts.add(new HttpHost(hostString.substring(0, index), port));\n\t\t\t}\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 34.85624963527375}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tString[] hosts = clusterHostList.split(\",\");\n\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\tfor (String host : hosts) {\n\t\tString[] hostPort = host.split(\":\");\n\t\tint port = clusterPort;\n\t\tif (hostPort.length == 2) {\n\t\t\tport = Integer.parseInt(hostPort[1]);\n\t\t}\n\t\thttpHosts.add(new HttpHost(hostPort[0], port));\n\t}\n\treturn httpHosts;\n}", "CodeBleu_score": 49.584021187231514}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString hostAndPort = host.trim();\n\t\tif (hostAndPort.isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\tint port = clusterPort;\n\t\tint colonIndex = hostAndPort.indexOf(':');\n\t\tif (colonIndex > 0) {\n\t\t\tString portString = hostAndPort.substring(colonIndex + 1);\n\t\t\tport = Integer.parseInt(portString);\n\t\t\thostAndPort = hostAndPort.substring(0, colonIndex);\n\t\t}\n\t\thosts.add(new HttpHost(hostAndPort, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 43.64136165383425}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\tTask task = poll(30000);\n\t\tif (task!= null) {\n\t\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\tif (toNumber!= null && message!= null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tif (this.getSmtpService()!= null) {\n\t\t\t\t\t\t\tString messageContent = String.format(\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r\n%s\", toNumber, message, e.getMessage());\n\t\t\t\t\t\t\tthis.getSmtpService().send(\"archerliyaqing@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\t\tthis.getSmtpService().send(\"philip_chang@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\t\tthis.getSmtpService().send(\"clariones@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.837948480493857}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t// poll for a task with a 30-second timeout\n\t\tTask task = poll(30000);\n\t\tif (task == null) {\n\t\t\tSystem.out.println(\"No task received.\");\n\t\t\tcontinue;\n\t\t}\n\t\t// check the task type\n\t\tif (task.getType().equals(Task.PLAIN_TEXT_MESSAGE)) {\n\t\t\t// extract the recipient number and message data\n\t\t\tString toNumber = task.getToNumber();\n\t\t\tString message = task.getMessage();\n\t\t\t// validate the message data\n\t\t\tif (toNumber == null || message == null || toNumber.length() == 0 || message.length() == 0) {\n\t\t\t\tSystem.out.println(\"Invalid message data.\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// send the message\n\t\t\ttry {\n\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"Error sending message: \" + e.getMessage());\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Invalid task type.\");\n\t\t}\n\t}\n}", "CodeBleu_score": 27.08069898729042}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t// poll for a task\n\t\tTask task = poll();\n\t\tif (task == null) {\n\t\t\tThread.sleep(30000);\n\t\t} else {\n\t\t\t// process the task\n\t\t\tif (task.getType() == Task.TYPE_PLAIN_TEXT_MESSAGE) {\n\t\t\t\t// process the plain text message task\n\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\t// validate the message data\n\t\t\t\tif (toNumber == null || toNumber.isEmpty() || message == null || message.isEmpty()) {\n\t\t\t\t\t// log an error message\n\t\t\t\t\tSystem.out.println(\"Invalid message data: toNumber=\" + toNumber + \", message=\" + message);\n\t\t\t\t} else {\n\t\t\t\t\t// send the message\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 25.703319095100376}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpClient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tlogger.info(content);\n\treturn content;\n}", "CodeBleu_score": 67.80961675945383}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString responseContent = EntityUtils.toString(entity, \"UTF-8\");\n\tlog.info(responseContent);\n\treturn responseContent;\n}", "CodeBleu_score": 65.3806255442129}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tlog.info(responseString);\n\t\t\treturn responseString;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 62.124270686344495}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t// Create a DocumentBuilder to parse the XML string\n\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t// Parse the XML string into a Document object\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\t// Get the root element of the document\n\tElement rootElement = document.getDocumentElement();\n\t// Decode the root element into an array\n\tObject[] rootValue = decodeNodeToMap(rootElement, doTrim);\n\t// Create a Map to store the results\n\tMap<String, Object> result = new HashMap<String, Object>();\n\t// If the root element is not null, add it to the Map\n\tif (rootValue!= null) {\n\t\tresult.put(rootValue[0].toString(), rootValue[1]);\n\t}\n\t// Return the Map\n\treturn result;\n}", "CodeBleu_score": 49.940021523385255}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tif (StringUtils.isBlank(messageXmlStr)){\n\t\treturn null;\n\t}\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\tObject[] rootValue = decodeNodeToMap(doc.getDocumentElement(), doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) rootValue[1];\n}", "CodeBleu_score": 49.66728405763773}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tMap<String, Object> result = null;\n\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode rootNode = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue!= null && rootValue.length >= 2){\n\t\tresult = new HashMap<String, Object>();\n\t\tresult.put((String) rootValue[0], rootValue[1]);\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.4373429230946}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlog.info(String.format(\"Enqueuing Generate Schedules after Commit for Order %d\", orderRecord.getC_Order_ID()));\n\t\tenqueue(ofRepoId(orderRecord.getC_Order_ID()), TRANSACTION_NAME_GENERATE_SCHEDULES_AFTER_COMMIT);\n\t} else {\n\t\tlog.info(String.format(\"Not eligible for auto-processing for Order %d\", orderRecord.getC_Order_ID()));\n\t\tif (orderRecord.getDeliveryRule().isBasedOnDelivery()) {\n\t\t\tlog.info(String.format(\"Enqueuing Generate Schedules after Commit for Order %d\", orderRecord.getC_Order_ID()));\n\t\t\tscheduleIfNotPostponed(ofRepoId(orderRecord.getC_Order_ID()), TRANSACTION_NAME_GENERATE_SCHEDULES_AFTER_COMMIT);\n\t\t}\n\t}\n}", "CodeBleu_score": 30.849042812728587}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\treturn;\n\t}\n\n\tfinal String trxName = getTrxName(orderRecord);\n\tlog.info(orderRecord.toString() + \" is eligible for auto processing. Enqueuing for transaction: \" + trxName);\n\n\tenqueue(orderRecord, trxName);\n}", "CodeBleu_score": 22.511999821204782}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\tlog.info(\"Order {} is not eligible for auto-processing. Scheduling creation of missing shipment schedules if they are not postponed.\", orderRecord.get_ID());\n\t\tscheduleIfNotPostponed(orderRecord);\n\t\treturn;\n\t}\n\n\tfinal String transactionName = getTrxName(orderRecord);\n\tlog.info(\"Enqueuing order {} for auto-processing using transaction name {}\", orderRecord.get_ID(), transactionName);\n\tenqueue(transactionName);\n}", "CodeBleu_score": 30.437731134294943}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = $this->provider->retrieveByCredentials($request->only('email', 'password'));\n\nif (! $user ||! $this->provider->validateCredentials($user, $request)) {\n    $this->fireFailedEvent($request, $user);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 39.606261687170786}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tturn $this->getProvider()->validateCredentials($request);\n}", "CodeBleu_score": 15.482422057191963}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = User::where('email', $request->email)->first();\n\nif ($user && $this->guard->validate($request->only('email', 'password'))) {\n    return $user;\n}\n\n$this->fireFailedEvent($request, $user);\n\nthrow ValidationException::withMessages([\n    'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 33.51622317404468}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\nthrow ValidationException::withMessages([\n'email' => 'Too many login attempts. Please try again in '. $this->limiter->availableIn($request).'seconds.',\n]);\n}", "CodeBleu_score": 62.19289801668501}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tif ($this->limiter->tooManyAttempts($request)) {\n$this->limiter->block($request);\nthrow ValidationException::withMessages([\n'email' => [trans('auth.throttle', ['seconds' => $this->limiter->availableIn($request)])],\n]);\n}\n}", "CodeBleu_score": 58.403742401298274}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 89.17727496393344}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t*\n * This function generates a response for a two-factor authentication challenge. It retrieves the user ID from the session and fetches the user. If the user exists, it prepares a WebAuthn assertion and includes the public key in the response data. It then renders the 'TwoFactorChallenge' view with data indicating whether two-factor authentication is enabled and if the \"remember me\" option is set, and returns the response.\n */\n$user = User::find($request->session()->get('login.id'));\nif ($user) {\n$data = Webauthn::prepareAssertion($user);\nreturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n'user' => $user,\n'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n'remember' => $request->session()->get('login.remember'),\n])->toResponse($request);\n}\nreturn $this->sendFailedLoginResponse($request);\n}", "CodeBleu_score": 50.18902183634641}, {"code": "<?\npublic function toResponse($request){\n\t", "CodeBleu_score": 5.182926829268292}, {"code": "<?\npublic function toResponse($request){\n\tequest->session()->get\nUser::find\noptional\n$request->session()->get\nInertia::render('Auth/TwoFactorChallenge', $data + [\n            'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n           'remember' => $request->session()->get('login.remember'),\n        ])->toResponse\nInertia::render\nis_null\noptional\n\n}", "CodeBleu_score": 39.65482399166138}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuser = $this->getUserOrCreate($socialite);\n$this->checkUserAssociation($request, $user, $driver);\nreturn $user;\n}", "CodeBleu_score": 19.40238141330654}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tthis->checkUserAssociation($request, $user, $driver);\n$this->createUserToken($user, $driver, $socialite);\nreturn $user;\n}", "CodeBleu_score": 20.910379871375582}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuser = $this->getUserOrCreate($socialite);\n$this->checkUserAssociation($request, $user, $driver);\n$this->createUserToken($user, $driver, $socialite);\nreturn $user;\n}", "CodeBleu_score": 24.878283275108743}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tRetrieve the user from the request.\n\t$user = $request->user();\n\n\t// If no user is found, return false.\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t// Validate the assertion using the filtered credentials from the request.\n\t$validated = $this->webauthn->validateAssertion(\n\t\t$user,\n\t\t$this->filterCredentials($request)\n\t);\n\n\t// If validation fails, trigger a failed authentication event, throw an authentication exception, and return false.\n\tif (!$validated) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\t$this->throwFailedAuthenticationException($request);\n\t\treturn false;\n\t}\n\n\t// If successful, return true.\n\treturn true;\n}", "CodeBleu_score": 71.18820039171798}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tr = $this->guard->user();\nif ($user === null) {\n    return false;\n}\n\ntry {\n    $this->validateAssertion($user, $this->filterCredentials($request));\n} catch (Exception $e) {\n    $this->fireFailedEvent($request, $user);\n    throw new AuthenticationException($e->getMessage(), $e->getCode(), $e);\n}\n\nreturn true;\n}", "CodeBleu_score": 44.71720248050578}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\ter = $request->user();\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentials($request);\n\n\ttry {\n\t\t$this->guard->validateAssertion($user, $credentials);\n\t} catch (AuthenticationException $e) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\tthrow new AuthenticationException(trans_ignore('webauthn::errors.login_failed'), $e->getCode(), $e);\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 45.90186836036947}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif (!$email = $this->option('email')) {\n\t\t$this->error('You must provide an email address.');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 72.08890356843591}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n\t\t$this->error = 'Email is required.';\n\t\treturn null;\n\t}\n\n\ttry {\n\t\t$user = User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error = 'User not found.';\n\t\treturn null;\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 36.85853337913353}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->option)) {\n\t\t$this->error(\"No email provided.\");\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $this->option)->firstOrFail();\n\t} catch (\\Exception $e) {\n\t\t$this->error(\"User not found.\");\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 30.416466012954835}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tf (config('scout.driver') ==='meilisearch' && $this->option('flush')) {\n$indexes = config('scout.indexes');\nforeach ($indexes as $index) {\n$index = new $index;\n$tableName = $index->getTable();\n$this->info(\"Flushing index $tableName...\");\n$this->call('scout:flush', ['index' => $index->searchName]);\n}\n$this->info('Indexes flushed successfully.');\n}\n}", "CodeBleu_score": 42.83112076188371}, {"code": "<?\nprotected function scoutFlush(): void{\n\tf ($this->option('flush')) {\nforeach ($this->meilisearch->getIndexes() as $index) {\n$tableName = (new $index)->getTable();\nif ($tableName!== null) {\n$this->call('scout:flush', ['model' => $index]);\n}\n}\n$this->info('Meilisearch indexes flushed.');\n}\n}", "CodeBleu_score": 52.73418081955015}, {"code": "<?\nprotected function scoutFlush(): void{\n\tthis->info('Flushing Scout indexes...');\nif ($this->option('scout-flush')) {\nforeach ($this->getMeilisearchIndexSettings() as $index => $settings) {\n$tableName = $settings['table'];\n$this->artisan(\"scout:flush {$index} {$tableName}\");\n}\n}\n$this->info('Scout indexes flushed!');\n}", "CodeBleu_score": 40.70498615537454}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t// First, we read an existing VCard from the resource, setting a UID if it is missing. If reading fails or the VCard doesn't exist, we create a new VCard with basic information.\n$vcard = $this->read($resource);\n\n// If the VCard doesn't have a UID, we generate a new one.\nif (!$vcard->hasUid()) {\n    $vcard->setUid(Str::uuid());\n}\n\n// Apply a series of exporters to add more details to the VCard from the resource.\nforeach ($this->exporters(get_class($resource)) as $exporter) {\n    $vcard = $exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 19.186594130129816}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\n// If the VCard doesn't have a UID, set one from the resource's ID.\nif ($vcard->uid === null) {\n    $vcard->uid = $resource->id;\n}\n\n// Apply exporters to populate the VCard.\nforeach ($this->exporters(get_class($resource)) as $exporter) {\n    $vcard = $exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 22.4943525391653}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$this->user->account->addressBooks->find($addressBookId)->cards->find($cardUri)->delete();\nif ($this->user->account->addressBooks->find($addressBookId)->cards->find($cardUri)->isContact()) {\n$this->user->account->addressBooks->find($addressBookId)->cards->find($cardUri)->delete();\nDestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $this->user->account->addressBooks->find($addressBookId)->vault_id,\n                'contact_id' => $this->user->account->addressBooks->find($addressBookId)->cards->find($cardUri)->id,\n            ])->onQueue;\n} elseif ($this->user->account->addressBooks->find($addressBookId)->cards->find($cardUri)->isGroup()) {\n$this->user->account->addressBooks->find($addressBookId)->cards->find($cardUri)->delete();\nDestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $this->user->account->addressBooks->find($addressBookId)->vault_id,\n                'group_id' => $this->user->account->addressBooks->find($addressBookId)->cards->find($cardUri)->id,\n            ])->onQueue;\n} else {\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 37.823471300676474}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t", "CodeBleu_score": 6.117021276595745}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t", "CodeBleu_score": 6.117021276595745}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\t$leadActivity = $this->activityRepository->create($data, auth()->guard()->user());\n\t$file = request()->file('file');\n\t$filename = $file->getClientOriginalName();\n\t$file->storeAs('public/lead_activities', $filename);\n\t$fileRecord = $this->fileRepository->create([\n\t\t'filename' => $filename,\n\t\t'path' => 'lead_activities/'. $filename,\n\t\t'lead_activity_id' => $leadActivity->id,\n\t]);\n\treturn $fileRecord;\n}", "CodeBleu_score": 51.97130702602632}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$activity = $this->activityRepository->create($data);\n\t$file = request()->file('file');\n\t$file->store('public/activities');\n\t$activity->files()->create([\n\t\t'name' => $file->getClientOriginalName(),\n\t\t'path' => $file->hashName(),\n\t]);\n\n\treturn $activity->files->first();\n}", "CodeBleu_score": 36.5725842917357}, {"code": "<?\npublic function upload(array $data){\n\t\tif (request()->hasFile('file')) {\n\t\t$leadActivity = $this->activityRepository->create($data, auth()->guard()->user());\n\t\t$file = $leadActivity->files()->create([\n\t\t\t'name' => request()->file('file')->getClientOriginalName(),\n\t\t\t'path' => request()->file('file')->store('public/lead_activity_files'),\n\t\t]);\n\t\treturn $file;\n\t}\n}", "CodeBleu_score": 45.872213549628114}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t", "CodeBleu_score": 5.526315789473684}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t ($exception instanceof ModelNotFoundException) {\nreturn $this->renderModelNotFoundResponse($exception);\n} elseif ($exception instanceof PDOException) {\nreturn $this->renderPDOErrorResponse($exception);\n} elseif ($exception instanceof ParseError) {\nreturn $this->renderParseErrorResponse($exception);\n}\n\nif ($exception instanceof HttpException) {\nreturn $this->renderHttpErrorResponse($exception);\n}\n\nreturn $this->renderErrorResponse($exception);\n}", "CodeBleu_score": 27.46012375528989}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tthis->response: private function response($path, $statusCode)\n    {\n        if (request()->expectsJson()) {\n            return response()->json([\n               'message' => isset($this->jsonErrorMessages[$statusCode])\n                   ? $this->jsonErrorMessages[$statusCode]\n                    : trans('admin::app.common.something-went-wrong')\n            ], $statusCode);\n        }\n\n        return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n    }\n\n}", "CodeBleu_score": 23.835018896977576}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tf (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'message' => isset($this->jsonErrorMessages[$statusCode])\n\t\t\t\t? $this->jsonErrorMessages[$statusCode]\n\t\t\t\t: trans('admin::app.common.something-went-wrong')\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.79794742145134}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t// Get the list of activity IDs from the request\n\t$activity_ids = request()->get('activity_ids');\n\n\t// Initialize variables to keep track of the number of updates and whether any updates were made\n\t$num_updates = 0;\n\t$updates_made = false;\n\n\t// Iterate over the activity IDs\n\tforeach ($activity_ids as $activity_id) {\n\t\t// Dispatch the 'before_update' event\n\t\tevent(new BeforeUpdateActivity($activity_id));\n\n\t\t// Update the activity's 'is_done' status\n\t\t$this->activityRepository->update($activity_id, ['is_done' => request()->get('is_done')]);\n\n\t\t// Dispatch the 'after_update' event\n\t\tevent(new AfterUpdateActivity($activity_id));\n\n\t\t// Increment the number of updates\n\t\t$num_updates++;\n\n\t\t// Set the updates_made flag to true if any updates were made\n\t\tif ($num_updates > 0) {\n\t\t\t$updates_made = true;\n\t\t}\n\t}\n\n\t// Return a JSON response indicating success or failure based on whether any updates were made\n\treturn response()->json(['success' => $updates_made]);\n}", "CodeBleu_score": 29.87823996410967}, {"code": "<?\npublic function massUpdate(){\n\t$ids = request()->get('ids');\n$is_done = request()->get('is_done');\n$count = 0;\nforeach ($ids as $id) {\n$activity = Activity::find($id);\nif ($activity) {\n$activity->is_done = $is_done;\n$activity->save();\n$count++;\n}\n}\nreturn response()->json(['success' => $count > 0]);\n}", "CodeBleu_score": 29.849041238794072}, {"code": "<?\npublic function massUpdate(){\n\t$ids = request()->input('ids');\n$isDone = request()->input('is_done');\n$updates = 0;\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\nif ($activity) {\n$activity->is_done = $isDone;\n$activity->save();\n$updates++;\n}\n}\nif ($updates > 0) {\n$response = [\n'success' => true,\n'message' => 'Activities updated successfully.'\n];\n} else {\n$response = [\n'success' => false,\n'message' => 'No activities were updated.'\n];\n}\nreturn response()->json($response);\n}", "CodeBleu_score": 36.332047721323306}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t", "CodeBleu_score": 0.9090909090909091}, {"code": "<?\n public function massDestroy(){\n\t$activityIds = $request->input('ids');\n$activityIds = explode(',', $activityIds);\nforeach ($activityIds as $activityId) {\n$activity = Activity::find($activityId);\nif ($activity) {\n// Dispatch event before deleting the activity\nEvent::dispatch(new ActivityDeleted($activity));\n$activity->delete();\n// Dispatch event after deleting the activity\nEvent::dispatch(new ActivityDeleted($activity));\n}\n}\nreturn response()->json(['success' => true]);\n}", "CodeBleu_score": 27.663415322038766}, {"code": "<?\n public function massDestroy(){\n\t\n$ids = explode(',', $request->input('ids'));\n\nforeach ($ids as $id) {\n$this->dispatch(new ActivityDeleted($id));\n}\n\n$this->activityRepository->delete($ids);\n\nreturn response()->json(['success' => true]);\n}", "CodeBleu_score": 20.77910783403612}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n$requestData = request()->all();\n\nforeach ($cards as $card) {\n\n$cardId = $card['id'];\n\n$cardSelected = false;\n\nforeach ($requestData as $requestDataItem) {\n\nif ($requestDataItem['id'] == $cardId) {\n\n$cardSelected = true;\n\nbreak;\n\n}\n\n}\n\n$this->dashboardHelper->updateCard($cardId, $cardSelected);\n\n}\n\nreturn response()->json($cards);\n\n}", "CodeBleu_score": 44.979470002639836}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\t$request = request()->all();\n\n\tforeach ($cards as $key => $card) {\n\t\tforeach ($request as $requestKey => $requestValue) {\n\t\t\tif ($card['id'] == $requestKey) {\n\t\t\t\t$cards[$key]['selected'] = $requestValue;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json($cards);\n}", "CodeBleu_score": 44.296508744981054}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n$request = request()->all();\n\nforeach ($request as $key => $value) {\nforeach ($cards as $card) {\nif ($card['id'] == $key) {\n$card['selected'] = $value;\n}\n}\n}\n\nreturn response()->json($cards);\n}", "CodeBleu_score": 40.09955292073386}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t$this->configurationRepository->create(request()->all());\n\tEvent::dispatch(new ConfigurationCreated(request()->all()));\n\tsession()->flash('success', 'Configuration saved.');\n\treturn redirect()->back();\n}", "CodeBleu_score": 32.6205498210018}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch(new BeforeConfigurationCreate($this->request));\n\t$configuration = $this->configurationRepository->create($this->request->all());\n\tEvent::dispatch(new AfterConfigurationCreate($this->request, $configuration));\n\tsession()->flash('success', trans('messages.configuration.create.success'));\n\treturn redirect()->back();\n}", "CodeBleu_score": 36.824077223774985}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('configuration.store.before', $this);\n$this->configurationRepository->create($this->request->all());\nEvent::dispatch('configuration.store.after', $this);\nsession()->flash('success', trans('configuration.store.success'));\nreturn redirect()->back();\n}", "CodeBleu_score": 40.283234912139356}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/'. $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/'. $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/'. $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n\tfor (String s : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setModel(s);\n\t\tmodelSort.setSort(true);\n\t\tmodelSort.setUserId(getUserId());\n\t\tsortList.add(modelSort);\n\t}\n\tsaveBatch(sortList);\n\treturn ok();\n}", "CodeBleu_score": 24.193612563962365}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> adminModelSorts = new ArrayList<AdminModelSort>();\n\tfor(String model: list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setModel(model);\n\t\tadminModelSort.setSort(\"asc\");\n\t\tadminModelSorts.add(adminModelSort);\n\t}\n\treturn setModelSort(adminModelSorts);\n}", "CodeBleu_score": 26.605277977791363}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t// TODO Auto-generated method stub\n\treturn null;\n}", "CodeBleu_score": 4.8605767515403375}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// TODO Auto-generated method stub\n\treturn null;\n}", "CodeBleu_score": 7.208225180606746}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// TODO Auto-generated method stub\n\treturn null;\n}", "CodeBleu_score": 7.208225180606746}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\tif(userConfig!= null){\n\t\tuserConfig.setValue(json.toString());\n\t\tuserConfigService.updateById(userConfig);\n\t}else{\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toString());\n\t\tuserConfigService.save(userConfig);\n\t}\n\treturn Result.ok();\n}", "CodeBleu_score": 53.938382520980355}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (user!= null) {\n\t\tLong deptId = user.getDeptId();\n\t\tString deptName = adminDeptService.getDeptName(deptId);\n\t\tuser.setDeptName(deptName);\n\t\tuser.setSalt(null);\n\t\tuser.setPassword(null);\n\t}\n\treturn Result.success(user);\n}", "CodeBleu_score": 50.354978039864875}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (user == null) {\n\t\treturn Result.error(ResultCode.USER_NOT_EXIST);\n\t}\n\tString deptName = departmentService.getDeptName(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn Result.ok(user);\n}", "CodeBleu_score": 50.485500539071616}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserMapper.selectByPrimaryKey(userId);\n\tif (user == null) {\n\t\treturn Result.error(ResultEnum.USER_NOT_EXIST);\n\t}\n\tuser.setDeptName(deptMapper.selectByPrimaryKey(user.getDeptId()).getDeptName());\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.success(user);\n}", "CodeBleu_score": 38.90830833135665}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tString userId = SecurityContextHolder.getContext().getAuthentication().getName();\n\tList<Notice> noticeList = noticeRepository.findByUserIdAndStatus(userId, 0);\n\tif (noticeList.size() > 1) {\n\t\tfor (Notice notice : noticeList) {\n\t\t\tnotice.setStatus(1);\n\t\t}\n\t\tnoticeRepository.saveAll(noticeList);\n\t} else {\n\t\tNotice notice = new Notice();\n\t\tnotice.setUserId(userId);\n\t\tnotice.setStatus(1);\n\t\tnoticeRepository.save(notice);\n\t}\n\treturn Result.success();\n}", "CodeBleu_score": 27.130186885664987}, {"code": " public Result readNotice() {\n\t\tString userId = Security.getUser().getId();\n\tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif (readNoticeList.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNoticeList) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.save();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\treturn ok(Json.toJson(new Result(true, \"Read Notice Successfully\")));\n}", "CodeBleu_score": 29.910721019703086}, {"code": " public Result readNotice() {\n\t\tString userId = getUserId();\n\tString query = \"SELECT * FROM readNotice WHERE userId = '\" + userId + \"'\";\n\tList<ReadNotice> readNoticeList = lambdaQuery(ReadNotice.class, query);\n\tif (readNoticeList.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNoticeList) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.save();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\treturn ok(Json.toJson(new Result(true, \"Read notice successfully.\")));\n}", "CodeBleu_score": 25.02559798802455}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tString methodName = \"setAdminConfig\";\n\tlog.info(methodName + \" starts\");\n\ttry {\n\t\tConfiguration config = Configuration.find(\"byName\", \"companyInfo\").first();\n\t\tif (config == null) {\n\t\t\tconfig = new Configuration();\n\t\t\tconfig.setName(\"companyInfo\");\n\t\t\tconfig.setValue(\"{}\");\n\t\t\tconfig.save();\n\t\t}\n\t\tJSONObject json = new JSONObject(config.getValue());\n\t\tjson.put(\"companyName\", adminCompanyBO.getCompanyName());\n\t\tjson.put(\"companyAddress\", adminCompanyBO.getCompanyAddress());\n\t\tjson.put(\"companyPhone\", adminCompanyBO.getCompanyPhone());\n\t\tjson.put(\"companyEmail\", adminCompanyBO.getCompanyEmail());\n\t\tconfig.setValue(json.toString());\n\t\tconfig.save();\n\t} catch (Exception e) {\n\t\tlog.error(methodName + \" ends with error: \" + e.getMessage());\n\t\tthrow new RuntimeException(e);\n\t}\n\tlog.info(methodName + \" ends\");\n}", "CodeBleu_score": 37.93259453982659}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tCompanyInfoBO companyInfoBO = null;\n\ttry {\n\t\tcompanyInfoBO = this.getCompanyInfo();\n\t\tif (companyInfoBO == null) {\n\t\t\tcompanyInfoBO = new CompanyInfoBO();\n\t\t\tcompanyInfoBO.setName(\"companyInfo\");\n\t\t\tcompanyInfoBO.setStatus(Constants.ACTIVE);\n\t\t\tcompanyInfoBO.setValue(new JSONObject(adminCompanyBO).toString());\n\t\t\tcompanyInfoBO.saveOrUpdate();\n\t\t} else {\n\t\t\tcompanyInfoBO.setValue(new JSONObject(adminCompanyBO).toString());\n\t\t\tcompanyInfoBO.saveOrUpdate();\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while setting Admin Company Info: \" + e.getMessage());\n\t\tthrow new RuntimeException(e.getMessage());\n\t}\n}", "CodeBleu_score": 27.370661508190864}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tadminCompanyBO.setName(\"companyInfo\");\n\tadminCompanyBO.setKey(\"companyInfo\");\n\tadminCompanyBO.setValue(JSON.toJSONString(adminCompanyBO));\n\tadminCompanyBO.setStatus(1);\n\tadminCompanyBO.setCreateBy(1);\n\tadminCompanyBO.setCreateDate(new Date());\n\tadminCompanyBO.setLast(1);\n\tadminCompanyBO.setLastDate(new Date());\n\tadminCompanyBO.setDescription(\"companyInfo\");\n\tadminCompanyBO.saveOrUpdate();\n}", "CodeBleu_score": 28.70780072876471}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString key = \"admin.company\";\n\tString value = \"\";\n\ttry {\n\t\tvalue = (String) this.queryAdminConfig(key);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\tif (value!= null &&!value.isEmpty()) {\n\t\tadminCompanyBO = this.parseObject(value, AdminCompanyBO.class);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 44.93473931881661}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tString adminConfig = getAdminConfig();\n\tif (adminConfig == null) {\n\t\treturn new AdminCompanyBO();\n\t}\n\treturn parseObject(adminConfig, AdminCompanyBO.class);\n}", "CodeBleu_score": 15.738863258842835}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminConfig = new AdminCompanyBO();\ntry {\nif (this.getAdminConfigKey()!= null) {\nString adminConfigValue = this.getAdminConfigValue();\nif (adminConfigValue!= null) {\nadminConfig = (AdminCompanyBO) JSON.parseObject(adminConfigValue, AdminCompanyBO.class);\n}\n}\n} catch (Exception e) {\nlog.error(\"Error parsing admin configuration\", e);\n}\nreturn adminConfig;\n}", "CodeBleu_score": 38.003660689780354}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t", "CodeBleu_score": 4.070653414637172}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tif (stringList == null) {\n\t\treturn;\n\t}\n\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n\tfor (String string : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setName(string);\n\t\tconfig.setType(\"com.ibm.ws.logging.LogConfig\");\n\t\tconfig.setProperties(new Properties());\n\t\tconfig.getProperties().put(\"logWelcomeSpeech\", string);\n\t\tconfigList.add(config);\n\t}\n\ttry {\n\t\tAdminConfig.remove(new AdminConfig[] { AdminConfig.getAdminConfig(logConfigName) });\n\t} catch (Exception e) {\n\t\t// do nothing\n\t}\n\tAdminConfig.saveBatch(configList, null);\n}", "CodeBleu_score": 39.933705187516985}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tString logConfigurationName = \"logWelcomeSpeech\";\n\tString logWelcomeSpeechName = \"logWelcomeSpeech\";\n\tString logWelcomeSpeechType = \"logWelcomeSpeech\";\n\tString logWelcomeSpeechValue = \"logWelcomeSpeech\";\n\tString logWelcomeSpeechDescription = \"logWelcomeSpeech\";\n\n\t// Remove existing configurations with the specified log configuration name\n\tAdminConfig.remove(AdminConfig.getid(logConfigurationName));\n\n\t// Create AdminConfig objects for each string\n\tfor (String string : stringList) {\n\t\tAdminConfig.create(logConfigurationName, logWelcomeSpeechName, logWelcomeSpeechType, logWelcomeSpeechValue, logWelcomeSpeechDescription);\n\t\tAdminConfig.modify(AdminConfig.getid(logWelcomeSpeechName), logWelcomeSpeechValue, string);\n\t}\n\n\t// Save the new list of configurations in batch\n\tAdminConfig.saveBatch();\n}", "CodeBleu_score": 25.19820600724455}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t", "CodeBleu_score": 1.4766140476740475}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = adminInitDataBO.getPassword();\n\tString username = adminInitDataBO.getUsername();\n\tString userId = getUserId(adminInitDataBO.getUsername());\n\tString salt = getSalt(userId);\n\tString hash = getPassword(userId);\n\tString passwordHash = getHash(password, salt);\n\tif (passwordHash.equals(hash)) {\n\t\tString code = generateCode();\n\t\tsetex(code, 10 * 60, userId);\n\t\treturn code;\n\t} else {\n\t\tthrow new RuntimeException(\"Invalid password\");\n\t}\n}", "CodeBleu_score": 29.32490113644815}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t", "CodeBleu_score": 1.4766140476740475}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized:\" + userId;\n\tList<String> unauthorizedUrls = getRedis().lrange(key, 0, -1);\n\tif (unauthorizedUrls.contains(getInitAuthUrl())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 29.93945529856458}, {"code": "private boolean verifyInitAuth(){\n\t\t// Get the user ID\n\tString userId = getUserId();\n\t// Construct the key\n\tString key = userId + \":unauthorized\";\n\t// Fetch the list of unauthorized menu URLs from Redis\n\tList<String> unauthorizedUrls = getRedis().lrange(key, 0, -1);\n\t// Check if the initial authentication URL is in the list\n\tif (unauthorizedUrls.contains(getInitAuthUrl())) {\n\t\t// Return true if the initial authentication URL is in the list\n\t\treturn true;\n\t}\n\t// Return false if the initial authentication URL is not in the list\n\treturn false;\n}", "CodeBleu_score": 28.279175254751067}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized_\" + userId;\n\tList<String> unauthorizedUrls = getRedis().lrange(key, 0, -1);\n\tString initAuthUrl = getInitAuthUrl();\n\treturn unauthorizedUrls.contains(initAuthUrl);\n}", "CodeBleu_score": 32.82671323177597}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tsaveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 59.155729108454246}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 67.00479360537585}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 67.00479360537585}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\ttry {\nString month = LocalDate.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM\"));\nString index = getIndexAliases(SYS_LOG_TYPE) + \"-\" + month;\nMap<String, Object> source = beanToMap(sysLog);\nsource.put(\"create_time\", formatDateTime(sysLog.getCreateTime()));\nsource.remove(\"_id\");\nIndexRequest request = new IndexRequest(index).source(source);\nrestHighLevelClient.index(request, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 50.33568313562886}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> source = beanToMap(sysLog);\nString createTime = formatDateTime(sysLog.getCreateTime());\nsource.remove(\"_id\");\nIndexRequest request = new IndexRequest(index).source(source);\nrequest.id(createTime);\ntry {\nrestHighLevelClient.index(request, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 52.62993095872538}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t//        String month = LocalDate.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM\"));\n//        String index = getIndexAliases(SYS_LOG_TYPE) + \"-\" + month;\n//        Map<String, Object> source = beanToMap(sysLog);\n//        source.put(\"create_time\", formatDateTime(sysLog.getCreateTime()));\n//        source.remove(\"id\");\n//        IndexRequest indexRequest = new IndexRequest(index).source(source);\n//        try {\n//            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n//        } catch (IOException e) {\n//            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n//        }\n    }", "CodeBleu_score": 2.498932858752913}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    BasePage<SysLog> page = new BasePage<>();\n//        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n//        //\u8bbe\u7f6e\u6392\u5e8f\n//        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n//        //\u8bbe\u7f6e\u6392\u9664\u5b57\u6bb5\n//        searchSourceBuilder.fetchSource(false);\n//        //\u6267\u884c\u67e5\u8be2\n//        try {\n//            SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n//            searchRequest.source(searchSourceBuilder);\n//            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n//            //\u83b7\u53d6\u641c\u7d22\u7ed3\u679c\n//            SearchHits hits = searchResponse.getHits();\n//            //\u83b7\u53d6\u603b\u6761\u6570\n//            page.setTotal(hits.getTotalHits().value);\n//            //\u83b7\u53d6\u5f53\u524d\u9875\n//            page.setCurrent(querySysLogBO.getPage());\n//            //\u83b7\u53d6\u641c\u7d22\u7ed3\u679c\n//            List<SysLog> sysLogList = mapToBean(hits);\n//            page.setList(sysLogList);\n//        } catch (IOException e) {\n//            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n//        }\n//        return page;\n//    }", "CodeBleu_score": 9.34523304906277}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tge<SysLog> basePage = new BasePage<>();\ntry {\n    // Create a SearchRequest object with the search index and type\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.types(SYS_LOG_TYPE);\n    // Create a SearchSourceBuilder object and set the search criteria\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // Set the sort order\n    searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    // Exclude specific fields from the response\n    searchSourceBuilder.fetchSource(false);\n    // Set the SearchSourceBuilder object as the source of the SearchRequest\n    searchRequest.source(searchSourceBuilder);\n    // Execute the search request using the REST client\n    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    // Get the total number of hits\n    long totalHits = searchResponse.getHits().getTotalHits().value;\n    // Set the total hits in the BasePage object\n    basePage.setTotal(totalHits);\n    // Get the current page number\n    int currentPage = querySysLogBO.getPage();\n    // Set the current page number in the BasePage object\n    basePage.setCurrent(currentPage);\n    // Initialize a list to hold the results\n    List<SysLog> sysLogList = new ArrayList<>();\n    // Iterate through the search hits\n    for (SearchHit hit : searchResponse.getHits().getHits()) {\n        // Map the search hit to a SysLog object\n        SysLog sysLog = mapToBean(hit);\n        // Add the SysLog object to the list\n        sysLogList.add(sysLog);\n    }\n    // Set the list of SysLog objects in the BasePage object\n    basePage.setList(sysLogList);\n} catch (IOException e) {\n    log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\nreturn basePage;\n}", "CodeBleu_score": 57.638389748343144}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tge<SysLog> page = new BasePage<>();\nSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\nSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\nsearchRequest.source(searchSourceBuilder);\nSearchResponse searchResponse;\ntry {\nsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\nreturn page;\n}\npage.setTotal(getTotalHits(searchResponse));\npage.setList(getHits(searchResponse));\nreturn page;\n}", "CodeBleu_score": 38.14587678390302}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 81.9635313433029}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 81.9635313433029}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 81.9635313433029}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\n}", "CodeBleu_score": 13.700548681226493}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn getLiveModules()\n\t\t\t.filter(m -> m.getParentModule()!= null && m.getParentModule().getId().equals(module.getId()))\n\t\t\t.filter(m ->!circularDependencyCheckSet.contains(m.getId()))\n\t\t\t.flatMap(m -> {\n\t\t\t\tcircularDependencyCheckSet.add(m.getId());\n\t\t\t\treturn getDependentModules(m, circularDependencyCheckSet)\n\t\t\t\t\t\t.concatWith(Flux.just(m))\n\t\t\t\t\t\t.doOnError(e -> log.warn(\"Error while retrieving dependent modules for module '{}': {}\", module.getId(), e.getMessage()));\n\t\t\t});\n}", "CodeBleu_score": 48.492577126692524}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\t// If the module is null or the module ID is already processed, return an empty flux.\n\tif (module == null || circularDependencyCheckSet.contains(module.getId())) {\n\t\treturn Flux.empty();\n\t}\n\n\t// Add the module ID to the circular dependency check set.\n\tcircularDependencyCheckSet.add(module.getId());\n\n\t// Retrieve the dependent module IDs.\n\tList<String> dependentModuleIds = module.getDependentModuleIds();\n\n\t// If there are no dependent module IDs, return an empty flux.\n\tif (dependentModuleIds == null || dependentModuleIds.isEmpty()) {\n\t\treturn Flux.empty();\n\t}\n\n\t// Retrieve the dependent modules.\n\treturn Flux.fromIterable(dependentModuleIds)\n\t\t.flatMap(dependentModuleId -> getLiveModules().get(dependentModuleId))\n\t\t.doOnNext(dependentModule -> {\n\t\t\t// Retrieve the dependent modules for the current dependent module.\n\t\t\tFlux<Application> dependentModules = getDependentModules(dependentModule, circularDependencyCheckSet);\n\n\t\t\t// Add the dependent modules to the current module's dependent modules.\n\t\t\tmodule.getDependentModules().addAll(dependentModules.collectList().block());\n\t\t})\n\t\t.onErrorContinue((throwable, application) -> {\n\t\t\t// Log a warning.\n\t\t\twarn(\"Error while retrieving dependent modules for module with ID '{}'.\", module.getId());\n\n\t\t\t// Continue processing.\n\t\t\treturn true;\n\t\t})\n\t\t.doOnNext(dependentModule -> {\n\t\t\t// Remove the module ID from the circular dependency check set.\n\t\t\tcircularDependencyCheckSet.remove(module.getId());\n\t\t});\n}", "CodeBleu_score": 45.20320069471048}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\teck if the component type is \"module\"\nif (map.containsKey(\"compType\") && map.get(\"compType\").equals(\"module\")) {\n// Get the app ID from the \"comp\" map\nif (map.containsKey(\"comp\") && map.get(\"comp\") instanceof Map) {\nMap<String, Object> compMap = (Map<String, Object>) map.get(\"comp\");\nString appId = (String) compMap.get(\"appId\");\n// Add the app ID to the set of dependent module IDs if it is not blank\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n// Iterate through the map's entries\nfor (Map.Entry<?,?> entry : map.entrySet()) {\n// Check if the value is a map\nif (entry.getValue() instanceof Map) {\n// Recursively call doGetDependentModules() on the nested map\ndoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n}\n// Check if the value is a list\nelse if (entry.getValue() instanceof List) {\n// Cast the value to a list\nList<?> valueList = (List<?>) entry.getValue();\n// Iterate through the list\nfor (Object value : valueList) {\n// Check if the value is a map\nif (value instanceof Map) {\n// Recursively call doGetDependentModules() on the nested map\ndoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n}\n}\n}\n}\n}", "CodeBleu_score": 48.03937150261599}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.51809984956577}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tint dimension = thumbNailPhotoDimension.get();\n        BufferedImage bufferedImage = ImageIO.read(dataBuffer.asInputStream());\n        Image scaledImage = bufferedImage.getScaledInstance(dimension, dimension, Image.SCALE_SMOOTH);\n        BufferedImage imageBuff = new BufferedImage(dimension, dimension, BufferedImage.TYPE_INT_RGB);\n        imageBuff.getGraphics().drawImage(scaledImage, 0, 0, new Color(0, 0, 0), null);\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        ImageIO.write(imageBuff, \"jpg\", buffer);\n        byte[] data = buffer.toByteArray();\n        buffer.close();\n        DataBufferUtils.release(dataBuffer);\n        Asset asset = new Asset();\n        asset.setContentType(srcContentType);\n        asset.setData(data);\n        return asset;\n    }", "CodeBleu_score": 36.58731745673488}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t//        if (createThumbnail) {\n//            byte[] data = resizeImage(dataBuffer);\n//            return new Asset(data, MediaType.IMAGE_JPEG);\n//        }\n//        return new Asset(dataBuffer, srcContentType);\n    }", "CodeBleu_score": 8.045619396733148}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t//        DataBufferUtils.release(dataBuffer);\n        Asset asset = new Asset();\n        asset.setData(resizeImage(dataBuffer));\n        if (createThumbnail) {\n            asset.setContentType(MediaType.IMAGE_JPEG);\n        } else {\n            asset.setContentType(srcContentType);\n        }\n        return asset;\n    }", "CodeBleu_score": 31.680222929289286}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n.flatMap(asset -> {\nexchange.getResponse().setStatusCode(HttpStatus.OK);\nif (asset.getContentType()!= null) {\nexchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n}\nreturn exchange.getResponse().writeWith(Flux.just(asset.getData()));\n});\n}", "CodeBleu_score": 33.02034984775084}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t// Retrieve the asset by its ID\nreturn repository.findById(assetId)\n// Set the response status to OK\n.flatMap(asset -> {\nexchange.getResponse().setStatusCode(HttpStatus.OK);\n// Set the content type header if available\nif (asset.getContentType()!= null) {\nexchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n}\n// Write the asset data to the response\nreturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n});\n}", "CodeBleu_score": 33.196775314195726}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n.flatMap(asset -> {\nexchange.getResponse().setStatusCode(HttpStatus.OK);\nif (asset.getContentType()!= null) {\nexchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n}\nDataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\nreturn exchange.getResponse().writeWith(Mono.just(buffer));\n});\n}", "CodeBleu_score": 41.76920163086605}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getOrganizationInEnterpriseMode()\n\t\t.flatMapIterable(organization -> organization.getAuthConfigs())\n\t\t.map(authConfig -> new FindAuthConfig(authConfig.getName(), authConfig.getMode(), authConfig.getOrganization(), authConfig.getWorkspace()));\n}", "CodeBleu_score": 18.965479045687253}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t", "CodeBleu_score": 2.6983305016023995}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (isSaasMode()) {\n\t\treturn Flux.empty();\n\t}\n\treturn getOrganizationInEnterpriseMode().flatMapIterable(organization -> organization.getAuthenticationConfigs().stream()).map(FindAuthConfig::new);\n}", "CodeBleu_score": 23.109929338061384}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\n// Create a new MongockApplicationRunner instance\nMongockSpring5.MongockApplicationRunner runner = new MongockSpring5.MongockApplicationRunner(springContext, mongoTemplate);\n\n// Set the write concern to majority\nrunner.setWriteConcern(WriteConcern.MAJORITY);\n\n// Set the read concern to local\nrunner.setReadConcern(ReadConcern.LOCAL);\n\n// Set the default lock timeout to 10 seconds\nrunner.setDefaultLockTimeout(10);\n\n// Set the package to scan for change logs\nrunner.addChangeLogsScanPackages(\"com.example.changelogs\");\n\n// Set the journal to true\nrunner.withJournal(true);\n\n// Return the MongockApplicationRunner instance\nreturn runner;\n}", "CodeBleu_score": 37.42207330706157}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t", "CodeBleu_score": 7.4417428058422415}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\n// Create a MongockApplicationRunner\nMongockSpring5.MongockApplicationRunner runner = new MongockSpring5.MongockApplicationRunner(springContext, mongoTemplate);\n\n// Set the write concern\nrunner.setWriteConcern(writeConcern);\n\n// Set the read concern\nrunner.setReadConcern(readConcern);\n\n// Set the package to scan for change logs\nrunner.addChangeLogsScanPackages(changeLogsScanPackages);\n\n// Set the Spring application context\nrunner.setSpringContext(springContext);\n\n// Set the MongoDB driver\nrunner.setDriver(driver);\n\n// Return the MongockApplicationRunner\nreturn runner;\n}", "CodeBleu_score": 34.13115930454753}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\nreactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.968876915312}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn reactiveMongoTemplate(mongoDbFactory, mappingMongoConverter, secondaryPreferred());\n}", "CodeBleu_score": 24.734784606573655}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\nreactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 77.0636964475727}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn getLatestRecordByLibraryQueryId(libraryQueryId)\n               .map(libraryQuery -> libraryQuery.getDsl())\n               .defaultIfEmpty(getDSLByLibraryQueryId(libraryQueryId));\n}", "CodeBleu_score": 41.19656013463382}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn getLatestRecordByLibraryQueryId(libraryQueryId)\n               .map(libraryQueryRecord -> libraryQueryRecord.getDsl())\n               .switchIfEmpty(getDslByLibraryQueryId(libraryQueryId));\n    }", "CodeBleu_score": 43.39482265567503}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn getLatestRecordByLibraryQueryId(libraryQueryId)\n               .flatMap(libraryQuery -> {\n                    if (libraryQuery.getDsl() == null) {\n                        return getById(libraryQueryId)\n                               .map(LibraryQuery::getDsl);\n                    }\n                    return Mono.just(libraryQuery.getDsl());\n                });\n    }", "CodeBleu_score": 53.442721565877996}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t     if (StringUtils.isBlank(timeoutStr)) {\n//            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n//        }\n//\n//        var timeout = ofMillis(Long.parseLong(timeoutStr));\n//        if (isJsDatasourcePlugin(datasource)) {\n//            return executeByNodeJs(datasource, queryConfig, requestParams)\n//                   .timeout(timeout)\n//                   .onErrorMap(e -> {\n//                        if (e instanceof TimeoutException) {\n//                            return new PluginException(PluginException.Type.TIMEOUT, \"Query execution timed out\");\n//                        } else {\n//                            return new PluginException(PluginException.Type.ERROR, \"Query execution failed\");\n//                        }\n//                    })\n//                   .onErrorResume(e -> {\n//                        log.error(\"Error while executing query\", e);\n//                        return Mono.just(new QueryExecutionResult(QueryExecutionResult.Status.ERROR, null, null));\n//                    });\n//        } else {\n//            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n//                   .timeout(timeout)\n//                   .onErrorMap(e -> {\n//                        if (e instanceof TimeoutException) {\n//                            return new PluginException(PluginException.Type.TIMEOUT, \"Query execution timed out\");\n//                        } else {\n//                            return new PluginException(PluginException.Type.ERROR, \"Query execution failed\");\n//                        }\n//                    })\n//                   .onErrorResume(e -> {\n//                        log.error(\"Error while executing query\", e);\n//                        return Mono.just(new QueryExecutionResult(QueryExecutionResult.Status.ERROR, null, null));\n//                    });\n//        }\n//    }", "CodeBleu_score": 10.42033100548631}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t    var queryExecutor = datasourceMetaInfoService.getQueryExecutor(datasource.getType());\n//\n//        return queryExecutor.buildQueryExecutionContextMono(datasource.getDetailConfig(), queryConfig, requestParams, queryVisitorContext)\n//               .zipWhen(context -> datasourceConnectionPool.getOrCreateConnection(datasource))\n//               .flatMap(tuple -> {\n//                    QueryExecutionContext queryExecutionRequest = tuple.getT1();\n//                    DatasourceConnectionHolder connectionHolder = tuple.getT2();\n//                    return queryExecutor.doExecuteQuery(connectionHolder.connection(), queryExecutionRequest)\n//                           .doOnError(connectionHolder::onQueryError);\n//                })\n//               .timeout(Duration.ofMillis(Long.parseLong(timeoutStr)))\n//               .onErrorMap(e -> {\n//                    if (e instanceof TimeoutException) {\n//                        return new PluginException(e.getMessage(), e);\n//                    }\n//                    if (e instanceof DatasourcePluginException) {\n//                        return new PluginException(e.getMessage(), e);\n//                    }\n//                    return new PluginException(\"Failed to execute query\", e);\n//                })\n//               .onErrorResume(e -> {\n//                    if (e instanceof PluginException) {\n//                        return Mono.just(QueryExecutionResult.errorResult(e.getMessage()));\n//                    }\n//                    return Mono.error(e);\n//                });\n        return Mono.just(QueryExecutionResult.errorResult(\"error\"));\n    }", "CodeBleu_score": 17.38605262156461}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t     var timeout = Duration.ofMillis(Long.parseLong(timeoutStr));\n        var timeout = Duration.ofMillis(Long.parseLong(timeoutStr));\n\n        if (isJsDatasourcePlugin(datasource)) {\n            return executeByNodeJs(datasource, queryConfig, requestParams)\n                   .onErrorMap(e -> {\n                        if (e instanceof PluginException) {\n                            return ((PluginException) e).toQueryExecutionError();\n                        }\n                        return new QueryExecutionError(e.getMessage());\n                    })\n                   .onErrorResume(e -> {\n                        if (e instanceof PluginException) {\n                            return Mono.just(new QueryExecutionError(((PluginException) e).toQueryExecutionError()));\n                        }\n                        return Mono.just(new QueryExecutionError(e.getMessage()));\n                    })\n                   .timeout(timeout);\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                   .onErrorMap(e -> {\n                        if (e instanceof PluginException) {\n                            return ((PluginException) e).toQueryExecutionError();\n                        }\n                        return new QueryExecutionError(e.getMessage());\n                    })\n                   .onErrorResume(e -> {\n                        if (e instanceof PluginException) {\n                            return Mono.just(new QueryExecutionError(((PluginException) e).toQueryExecutionError()));\n                        }\n                        return Mono.just(new QueryExecutionError(e.getMessage()));\n                    })\n                   .timeout(timeout);\n        }\n    }", "CodeBleu_score": 44.9761314541523}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.fromCallable(() -> {\n\t\tQueryExecutor queryExecutor = datasource.getQueryExecutor(queryConfig);\n\t\tQueryExecutionContext queryExecutionContext = queryVisitorContext.buildQueryExecutionContext(queryConfig, requestParams);\n\t\tConnection connection = datasource.getConnection();\n\t\treturn queryExecutor.executeQuery(connection, queryExecutionContext);\n\t})\n\t.doOnError(e -> {\n\t\tlog.error(\"Error executing query locally\", e);\n\t})\n\t.onErrorResume(e -> {\n\t\tlog.error(\"Error executing query locally\", e);\n\t\treturn Mono.just(new QueryExecutionResult(new QueryExecutionResult.Error(e)));\n\t});\n}", "CodeBleu_score": 43.5514355305029}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t//...\n}", "CodeBleu_score": 9.634820991429324}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.fromCallable(() -> {\n\t\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\t\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t\tConnection connection = getOrCreateConnection(datasource);\n\t\treturn queryExecutor.execute(connection, queryExecutionContext);\n\t}).doOnError(e -> {\n\t\tLOGGER.error(\"Error executing query locally: {}\", e.getMessage(), e);\n\t});\n}", "CodeBleu_score": 35.838985686475205}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (isBlank(timeoutStr)) {\n//            return DEFAULT_QUERY_TIMEOUT_MS;\n//        }\n//        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n//        String unit = unitInfo.getLeft();\n//        int unitIndex = unitInfo.getRight();\n//        String valueStr = substring(timeoutStr, 0, unitIndex);\n//        double value = toDouble(valueStr);\n//        int ms = convertToMs(value, unit);\n//        if (ms < 0 || ms > MAX_QUERY_TIMEOUT_MS) {\n//            throw new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n//        }\n//        return ms;\n    }", "CodeBleu_score": 3.539681780731759}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tf (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n\tString unit = unitInfo.getLeft();\n\tint unitIndex = unitInfo.getRight();\n\n\tString valueStr = substring(timeoutStr, 0, unitIndex);\n\tdouble value;\n\ttry {\n\t\tvalue = toDouble(valueStr);\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\tint timeoutMs = convertToMs(value, unit);\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed timeout: \" + timeoutStr);\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 50.61280369751031}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tnt timeoutMs = DEFAULT_QUERY_TIMEOUT_MS;\n\tif (!isBlank(timeoutStr)) {\n\t\tPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n\t\tString unit = unitInfo.getLeft();\n\t\tint unitIndex = unitInfo.getRight();\n\t\tString valueStr = substring(timeoutStr, 0, unitIndex);\n\t\tdouble value = toDouble(valueStr);\n\t\ttimeoutMs = convertToMs(value, unit);\n\t\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"Query timeout must be less than %d %s\", MAX_QUERY_TIMEOUT_MS, unit));\n\t\t}\n\t}\n\treturn timeoutMs;\n}", "CodeBleu_score": 44.33639906620734}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n.flatMapMany(liveQueries -> Flux.fromIterable(liveQueries))\n.flatMap(liveQuery -> {\n\nreturn Mono.just(liveQuery.getDatasourceId())\n.flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n.map(copiedDatasourceId -> new Pair<>(datasourceId, copiedDatasourceId));\n\n})\n.collectList();\n}", "CodeBleu_score": 29.67117129818581}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn applicationService.getLiveQueries(application.getId())\n               .flatMap(liveQueries -> {\n                    if (liveQueries.isEmpty()) {\n                        return Mono.error(new BadRequestException(\"No live queries found for the application\"));\n                    }\n\n                    return Mono.just(liveQueries)\n                           .map(liveQueries::stream)\n                           .flatMap(liveQueryStream -> {\n                                return liveQueryStream.map(liveQuery -> {\n                                    String datasourceId = liveQuery.getDatasourceId();\n                                    return doCopyDatasource(currentOrganizationId, datasourceId, visitorId);\n                                }).collect(Collectors.toList());\n                            })\n                           .map(datasourceIds -> {\n                                List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n                                for (int i = 0; i < datasourceIds.size(); i++) {\n                                    Pair<String, String> datasourceIdPair = new Pair<>(application.getDatasources().get(i), datasourceIds.get(i));\n                                    datasourceIdPairs.add(datasourceIdPair);\n                                }\n                                return datasourceIdPairs;\n                            });\n                });\n    }", "CodeBleu_score": 36.14395494239433}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t/        return applicationService.getLiveQueries(application.getId())\n//               .flatMap(liveQueries -> {\n//                    if (liveQueries.isEmpty()) {\n//                        return Mono.error(new ErrorResponse(HttpStatus.BAD_REQUEST, \"No live queries found in application \" + application.getId()));\n//                    }\n//                    return copyDatasources(currentOrganizationId, visitorId, liveQueries.stream().map(LiveQuery::getDatasourceId).collect(Collectors.toSet()));\n//                });\n    }", "CodeBleu_score": 11.350246172998194}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.getById(datasourceId)\n       .flatMap(datasource -> {\n            if (isSystemStatic(datasource)) {\n                return Mono.just(datasourceId);\n            }\n            if (isLegacyQuickRestApi(datasource)) {\n                return Mono.just(datasource.getDetailConfig().getOpenblocksDatasourceId());\n            }\n            if (isLegacyOpenblocksApi(datasource)) {\n                return Mono.just(datasource.getDetailConfig().getQuickRestApiId());\n            }\n            return createNewDatasourceFrom(organizationId, visitorId, datasource);\n        });\n}", "CodeBleu_score": 60.81410667433508}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.getById(datasourceId)\n.switchIfEmpty(Mono.error(new DatasourceNotFoundException(datasourceId)))\n.flatMap(datasource -> {\nif (isSystemStatic(datasource)) {\nreturn Mono.just(datasourceId);\n}\nif (isLegacyQuickRestApi(datasource)) {\nreturn just(datasource.getDetailConfig().getOpenapiId());\n}\nif (isLegacyOpenblocksApi(datasource)) {\nreturn just(datasource.getDetailConfig().getOpenblocksId());\n}\nreturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n});\n}", "CodeBleu_score": 48.96777903492849}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.getById(datasourceId)\n.flatMap(datasource -> {\nif (isSystemStatic(datasource)) {\nreturn Mono.just(datasourceId);\n} else if (isLegacyQuickRestApi(datasource)) {\nreturn Mono.just(createLegacyQuickRestApiId(organizationId));\n} else if (isLegacyOpenblocksApi(datasource)) {\nreturn Mono.just(createLegacyOpenblocksApiId(organizationId));\n} else {\nreturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n}\n});\n}", "CodeBleu_score": 33.1703587263134}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t//        String userId = user.getId();\n        String fileName = filePart.getSubmittedFileName();\n        String extension = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n        String newFileName = UUID.randomUUID().toString() + \".\" + extension;\n        String contentType = filePart.getContentType();\n        Asset newAvatar = new Asset();\n        newAvatar.setContentType(contentType);\n        newAvatar.setFileName(newFileName);\n        newAvatar.setUserId(user.getId());\n        newAvatar.setExtension(extension);\n        newAvatar.setCreatedAt(Instant.now());\n        newAvatar.setUpdatedAt(Instant.now());\n        newAvatar.setDeletedAt(null);\n        return uploadFile(filePart, newFileName)\n               .flatMap(asset -> updateUserAvatar(asset, user.getId()))\n               .then(Mono.just(true));\n    }", "CodeBleu_score": 40.005881662850996}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\n//        Mono<Boolean> deleteOldAvatar = user.getAvatar()\n//               .flatMap(avatarId -> assetService.deleteAsset(avatarId))\n//               .switchIfEmpty(Mono.just(true));\n//\n//        Mono<Boolean> saveNewAvatar = assetService.saveAsset(filePart)\n//               .flatMap(asset -> updateUserAvatar(asset, user.getId()));\n//\n//        return deleteOldAvatar.then(saveNewAvatar);\n    }", "CodeBleu_score": 6.38547684789392}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t//        if (filePart.getSize() > 5000000) {\n//            return Mono.error(new RuntimeException(\"File size too large\"));\n//        }\n\n        return upload.upload(filePart)\n               .flatMap(asset -> {\n                    if (!user.getAvatar().isEmpty()) {\n                        return remove.remove(user.getAvatar());\n                    }\n                    return Mono.empty();\n                })\n               .flatMap(asset -> {\n                    user.setAvatar(asset.getId());\n                    return updateUserAvatar(asset, user.getId());\n                });\n    }", "CodeBleu_score": 29.97905926907944}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t If the auth source is email, encrypt the password and set it for the user.\n\tif (authUser.getAuthSource().equals(AuthSource.EMAIL)) {\n\t\tauthUser.setPassword(encryptionService.encryptPassword(authUser.getPassword()));\n\t}\n\n\t// Create the new user.\n\tUser user = new User(authUser.getName(), authUser.getState(), authUser.isEnabled(), authUser.getAvatarLink());\n\tuser.setAuthContext(authUser.getAuthContext());\n\n\t// Establish user connections from the AuthUser.\n\tuser.setConnections(authUser.getConnections());\n\n\t// Mark the user as new.\n\tuser.setIsNewUser(true);\n\n\treturn create(user);\n}", "CodeBleu_score": 45.009147214943454}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tr user = new User();\nuser.setName(authUser.getName());\nuser.setState(authUser.getState());\nuser.setIsEnabled(authUser.getIsEnabled());\nuser.setAvatar(authUser.getAvatar());\nif (authUser.getAuthContext().containsKey(AuthConstants.PASSWORD)) {\nuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthConstants.PASSWORD)));\n}\nuser.setConnections(authUser.getConnections());\nuser.setIsNewUser(true);\nreturn create(user);\n}", "CodeBleu_score": 42.06314765804944}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t       if (authUser.getAuthContext().get(\"password\")!= null) {\n//            authUser.getAuthContext().put(\"password\", encryptionService.encryptPassword((String) authUser.getAuthContext().get(\"password\")));\n//        }\n        User user = new User();\n        user.setUsername(authUser.getUsername());\n        user.setState(authUser.getState());\n        user.setIsEnabled(authUser.getIsEnabled());\n        user.setAvatar(authUser.getAvatar());\n        user.setConnections(authUser.getConnections());\n        user.setIsNewUser(true);\n        return create(user);\n    }", "CodeBleu_score": 36.865214030971764}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn this.bindEmail(user, email, null);\n}", "CodeBleu_score": 5.716675787302923}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn this.save(user, email, UserSource.EMAIL)\n.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n.onErrorResume(e -> Mono.just(e));\n}", "CodeBleu_score": 12.924690483700891}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(email)\n.flatMap(source -> this.sourceRepository.findBySource(Source.EMAIL, source))\n.flatMap(source -> {\nif (source == null) {\nreturn Mono.error(new EmailNotFoundException(email));\n}\nreturn this.connectionRepository.findBySourceAndRawId(Source.EMAIL, source.getRawId())\n.flatMap(connection -> {\nif (connection!= null) {\nreturn Mono.error(new EmailAlreadyBoundException(email));\n}\nreturn Mono.just(user);\n})\n.flatMap(user -> this.connectionRepository.save(new Connection(Source.EMAIL, source.getRawId(), user.getId())));\n})\n.flatMap(user -> this.userRepository.save(user))\n.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n.map(user -> true);\n}", "CodeBleu_score": 32.85798984017042}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n.flatMap(user -> {\nif (!encryptionService.matchPassword(user.getPassword(), oldPassword)) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.OLD_PASSWORD));\n}\n\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user)\n.thenReturn(true);\n});\n}", "CodeBleu_score": 20.497384156518795}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n.filter(user -> matchPassword(user.getPassword(), oldPassword))\n.map(user -> {\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true);\n}", "CodeBleu_score": 20.705130886720813}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n.flatMap(user -> {\nif (user.getPassword() == null ||!encryptionService.matchPassword(oldPassword, user.getPassword())) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n}\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user);\n})\n.thenReturn(true);\n}", "CodeBleu_score": 25.953657099561983}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t", "CodeBleu_score": 5.956160929320657}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t", "CodeBleu_score": 5.956160929320657}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t       if (withoutDynamicGroups) {\n//            return repository.findUserDetailGroups(userId, orgMember.getOrgId(), false, locale)\n//                   .filter(it ->!it.getId().equals(ALL_USERS_GROUP_ID))\n//                   .collectList()\n//                   .map(it -> it.stream()\n//                           .map(group -> Map.of(\"id\", group.getId(), \"name\", group.getName(locale)))\n//                           .collect(Collectors.toList()));\n//        } else {\n//            return repository.findUserDetailGroups(userId, orgMember.getOrgId(), true, locale)\n//                   .collectList()\n//                   .map(it -> it.stream()\n//                           .map(group -> Map.of(\"id\", group.getId(), \"name\", group.getName(locale)))\n//                           .collect(Collectors.toList()));\n//        }\n\n        return repository.findUserDetailGroups(userId, orgMember.getOrgId(), withoutDynamicGroups, locale)\n               .filter(it ->!it.getId().equals(ALL_USERS_GROUP_ID))\n               .collectList()\n               .map(it -> it.stream()\n                       .map(group -> Map.of(\"id\", group.getId(), \"name\", group.getName(locale)))\n                       .collect(Collectors.toList()));\n    }", "CodeBleu_score": 26.035943367305325}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n}", "CodeBleu_score": 35.645960721693434}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn mongoUpsertHelper\n.upsert(\nUserStatus.builder()\n.userId(userId)\n.hasShowNewUserGuidance(true)\n.build(),\nUserStatus.class\n)\n.map(result -> result.getUpsertedId()!= null);\n}", "CodeBleu_score": 32.6872716447588}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn mongoUpsertHelper.upsert(\nUserStatus.builder()\n.userId(userId)\n.hasShowNewUserGuidance(true)\n.build(),\nUserStatus::getUserId,\nUserStatus::getUserId\n);\n}", "CodeBleu_score": 33.068918521660166}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg := new(sync.WaitGroup)\n\tg.Add(len(c.partitions))\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p) {\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer g.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 39.81332724111352}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg, ctx := errgroup.WithContext(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p) {\n\t\t\tp := p\n\t\t\tg.Go(func() error {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tif err := g.Wait(); err!= nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 40.96233415683469}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg, ctx := errgroup.WithContext(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p) {\n\t\t\tg.Go(func() error {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tif err := g.Wait(); err!= nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 40.77422455728434}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\t// Check if the number of partitions and total weight quantity are greater than zero\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\t// Calculate the average weight per partition\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Calculate the maximum size per partition based on the formula\n\tmaxSizePerPartition := int(math.Floor(avgWeightPerPartition * float64(maxItemsTotal)))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 41.924240980921034}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Invalid number of partitions or total weight quantity\")\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(averageWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 47.81258150485124}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(avgWeightPerPartition))\n}", "CodeBleu_score": 39.41159977215292}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\ttry {\n\t\tConnectionMetadata metadata = getConnectionMetadata().block();\n\t\tif (metadata!= null) {\n\t\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tlogger.error(\"Error retrieving database metadata\", e);\n\t}\n\treturn map;\n}", "CodeBleu_score": 48.98090751913404}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = getConnectionMetadata().block();\n\tif (metadata!= null) {\n\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 48.08525233504894}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\n\n// get connection metadata\nConnectionMetadata connectionMetadata = getConnectionMetadata();\n\n// if connection metadata is not null, add database product name and version to map\nif (connectionMetadata!= null) {\ncontributorMap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\ncontributorMap.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n}\n\nreturn contributorMap;\n}", "CodeBleu_score": 41.83275189891154}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUserSetting userSetting = configMap.getUserSetting();\n\tif (userSetting!= null) {\n\t\tinfo.setAllowRegistration(userSetting.getAllowRegistration());\n\t\tinfo.setMustVerifyEmailOnRegistration(userSetting.getMustVerifyEmailOnRegistration());\n\t} else {\n\t\tinfo.setAllowRegistration(false);\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t}\n}", "CodeBleu_score": 44.30299841084947}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tif (configMap.get(Config.USER_SETTING_KEY)!= null) {\nUserSetting userSetting = configMap.get(Config.USER_SETTING_KEY);\nif (userSetting.getMustVerifyEmailOnRegistration()!= null) {\ninfo.setMustVerifyEmailOnRegistration(userSetting.getMustVerifyEmailOnRegistration());\n}\nif (userSetting.getAllowRegistration()!= null) {\ninfo.setAllowRegistration(userSetting.getAllowRegistration());\n}\n}\n}", "CodeBleu_score": 40.423326361598825}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUserSetting userSetting = configMap.getUserSetting();\n\tif (userSetting!= null) {\n\t\tinfo.setAllowRegistration(userSetting.getAllowRegistration());\n\t\tinfo.setMustVerifyEmailOnRegistration(userSetting.getMustVerifyEmailOnRegistration());\n\t} else {\n\t\tinfo.setAllowRegistration(false);\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t}\n}", "CodeBleu_score": 44.30299841084947}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t// Set the context class loader to the application class loader.\n\t\t\t\t// This is required to ensure that the application is restarted in the same class loader.\n\t\t\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\t\t\t// Load the application class and create an instance of the application class.\n\t\t\t\tClass<?> applicationClass = Class.forName(applicationClassname);\n\t\t\t\tObject application = applicationClass.newInstance();\n\t\t\t\t// Call the restart method on the application instance.\n\t\t\t\tMethod restartMethod = applicationClass.getMethod(\"restart\");\n\t\t\t\trestartMethod.invoke(application);\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Handle any exceptions that occur during the restart process.\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Application restart initiated.\";\n}", "CodeBleu_score": 44.64893916992823}, {"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tThread.currentThread().start();\n\t\t\t\tThread.sleep(5000);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 43.80901683183835}, {"code": "public Object restart(){\n\t\tThreadGroup tg = new ThreadGroup(\"restart\");\n\tThread t = new Thread(tg, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tApplication.class.getMethod(\"main\", String[].class).invoke(null, new Object[] { new String[] { \"-restart\" } });\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tt.start();\n\treturn \"Application restart initiated\";\n}", "CodeBleu_score": 42.077686976797565}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n }", "CodeBleu_score": 40.497839280753695}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n }", "CodeBleu_score": 40.497839280753695}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n }", "CodeBleu_score": 40.497839280753695}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n   .and(RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\")))\n   .and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 19.123305621672884}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n.and(RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\")))\n.and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 18.38318766259289}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\").and(RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 18.45400754355592}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 18.16418772241941}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML)),\n\t\t\tthis::serveIndex);\n}", "CodeBleu_score": 18.36941693017197}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n       .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n       .and(RequestPredicates.accept(MediaType.TEXT_HTML)),\n        this::serveIndex);\n}", "CodeBleu_score": 20.349569266853354}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tget {\n\t\treturn ReactiveIndexedSessionRepository(\n\t\t\tdelegate: ConcurrentHashMapSessionRepository(\n\t\t\t\tdelegate: InMemoryReactiveSessionRepository(\n\t\t\t\t\tdelegate: InMemorySessionRepository(\n\t\t\t\t\t\tdelegate: InMemorySessionRepository()\n\t\t\t\t\t),\n\t\t\t\t\tsessionFactory: {\n\t\t\t\t\t\treturn ReactiveIndexedSession(\n\t\t\t\t\t\t\tdelegate: InMemoryReactiveSession(\n\t\t\t\t\t\t\t\tdelegate: InMemorySession(\n\t\t\t\t\t\t\t\t\tdelegate: InMemorySession()\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tsessionFactory: {\n\t\t\t\t\t\t\t\t\treturn IndexedSession(\n\t\t\t\t\t\t\t\t\t\tdelegate: InMemorySession(\n\t\t\t\t\t\t\t\t\t\t\tdelegate: InMemorySession()\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t),\n\t\t\tsessionFactory: {\n\t\t\t\treturn ReactiveIndexedSession(\n\t\t\t\t\tdelegate: InMemoryReactiveSession(\n\t\t\t\t\t\tdelegate: InMemorySession(\n\t\t\t\t\t\t\tdelegate: InMemorySession()\n\t\t\t\t\t\t),\n\t\t\t\t\t\tsessionFactory: {\n\t\t\t\t\t\t\treturn IndexedSession(\n\t\t\t\t\t\t\t\tdelegate: InMemorySession(\n\t\t\t\t\t\t\t\t\tdelegate: InMemorySession()\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}\n}", "CodeBleu_score": 18.035691936036947}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n/**\n * The following code creates and configures a DefaultUserDetailService instance using the provided user and role services. It sets the userDetailsService property to the created instance.\n */\nDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\nuserDetailsService.setUserService(userService);\nuserDetailsService.setRoleService(roleService);\n\n/**\n * The following code configures the DefaultUserDetailService instance to enable or disable two-factor authentication based on the security settings in HaloProperties.\n */\nif (haloProperties.isTwoFactorAuthEnabled()) {\nuserDetailsService.setTwoFactorAuthenticationEnabled(true);\n} else {\nuserDetailsService.setTwoFactorAuthenticationEnabled(false);\n}\n\n/**\n * The following code returns the configured DefaultUserDetailService instance.\n */\nreturn userDetailsService;\n}", "CodeBleu_score": 34.55403089314479}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t", "CodeBleu_score": 7.796101949025487}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\treturn new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 13.733270766072927}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner()\n.setKind(\"email\")\n.setDisplayName(displayName)\n.setEmail(email!= null? email : \"\")\n.setAvatarUrl(avatarUrl)\n.setWebsiteUrl(websiteUrl)\n.setAnnotations(annotations);\n}", "CodeBleu_score": 8.846584284913291}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tif (kind!= null) {\nthrow new IllegalArgumentException(\"Kind is already set.\");\n}\nif (email == null) {\nemail = \"\";\n}\nif (displayName == null) {\ndisplayName = \"\";\n}\nif (avatarUrl == null) {\navatarUrl = \"\";\n}\nif (websiteUrl == null) {\nwebsiteUrl = \"\";\n}\nkind = \"email\";\nannotations.put(\"avatar\", avatarUrl);\nannotations.put(\"website\", websiteUrl);\nreturn this;\n}", "CodeBleu_score": 14.497610572076224}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\n}", "CodeBleu_score": 2.816750106190552}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = fetchUserByEmail(post.getOwner().getName());\n\t\tif (user!= null && user.getEmail()!= null && user.getEmail().equals(commentOwner.getName())) {\n\t\t\treturn true;\n\t\t}\n\t} else if (commentOwner.getKind() == Comment.CommentOwner.Kind.NAME) {\n\t\tif (post.getOwner().getName().equals(commentOwner.getName())) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.0279657169528}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"email\")) {\n\t\tUser user = post.getOwner().fetch();\n\t\treturn user.getEmail().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getOwner().getKind().equals(commentOwner.getKind()) && post.getOwner().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 33.747280073804326}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"email\")) {\n\t\tUser user = post.getOwner().fetch();\n\t\treturn user.getEmail().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 30.40920100540894}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nif (StringUtils.isNotBlank(keyword)) {\nlistOptions.setQuery(keyword);\n}\nif (StringUtils.isNotBlank(ownerName)) {\nlistOptions.setOwnerName(ownerName);\n}\nif (StringUtils.isNotBlank(ownerKind)) {\nlistOptions.setOwnerKind(ownerKind);\n}\nlistOptions.setFieldSelector(fieldSelector);\nreturn listOptions;\n}", "CodeBleu_score": 17.446206707258824}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nlistOptions.setFields(getFieldSelector());\n\nif (isNotBlank(getKeyword())) {\nlistOptions.setKeyword(getKeyword());\n}\n\nif (isNotBlank(getOwnerKind())) {\nlistOptions.setOwnerKind(getOwnerKind());\n}\n\nif (isNotBlank(getOwnerName())) {\nlistOptions.setOwnerName(getOwnerName());\n}\n\nreturn listOptions;\n}", "CodeBleu_score": 14.571872796596388}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\n// Build the field query from the selectors\nString fieldSelector = buildFieldSelector();\nlistOptions.setFieldSelector(fieldSelector);\n\n// Add conditions based on keyword and owner name, if provided\nif (StringUtils.isNotBlank(keyword)) {\nlistOptions.addCondition(new Condition(Condition.Operator.CONTAINS, \"name\", keyword));\n}\nif (StringUtils.isNotBlank(ownerName)) {\nlistOptions.addCondition(new Condition(Condition.Operator.EQUAL, \"ownerName\", ownerName));\n}\n\nreturn listOptions;\n}", "CodeBleu_score": 25.102205867681754}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t\t.filter(StringUtils::hasText)\n\t\t\t.map(this::getUpvote)\n\t\t\t.map(counter -> new CommentStats(commentName, counter.get()));\n}", "CodeBleu_score": 31.803521571651334}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n.map(this::getByName)\n.map(Counter::get)\n.map(this::getUpvote)\n.map(CommentStats::new);\n}", "CodeBleu_score": 23.15229971458551}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n.filter(StringUtils::hasText)\n.map(this::getUpvote)\n.map(CommentStats::new);\n}", "CodeBleu_score": 22.084173158399217}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\nif (subscriber == null) {\nreturn;\n}\n\nSubscription.Reason reason = new Subscription.Reason();\nreason.setReasonType(Subscription.Reason.ReasonType.SOMEONE_REPLIED_TO_YOU);\nSubscription.Condition condition = new Subscription.Condition();\ncondition.setOperator(Subscription.Condition.Operator.EQUALS);\ncondition.setKey(\"replied_owner\");\ncondition.setValue(subscriber.getName());\nreason.setCondition(condition);\n\nsubscriber.setReason(reason);\n\nsubscribe(subscriber);\n}", "CodeBleu_score": 51.267869699878545}, {"code": "void subscribeReply(UserIdentity identity){\n\t// Create a subscriber from the given user identity.\n    Subscription.Subscriber subscriber = createSubscriber(identity);\n\n// If the subscriber is null, the user identity is invalid and the subscription is not possible.\n    if (subscriber == null) {\n        return;\n    }\n\n// Set up an interest reason for the subscription.\n    Subscription.Reason reason = new Subscription.Reason();\n    reason.setType(Subscription.Reason.ReasonType.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(String.format(Locale.US, \"owner.name = '%s'\", identity.name()));\n\n// Subscribe the user to the notification center.\n    Subscription subscription = new Subscription.Builder(subscriber, reason).build();\n    notificationCenter.subscribe(subscription);\n\n// Block until the subscription is completed.\n    try {\n        subscription.awaitCompletion();\n    } catch (InterruptedException e) {\n        Log.e(TAG, \"Interrupted while waiting for subscription completion\");\n    }\n}", "CodeBleu_score": 50.26916676247259}, {"code": "void subscribeReply(UserIdentity identity){\n\t\n// Create a subscriber from the given identity.\nSubscription.Subscriber subscriber = createSubscriber(identity);\n\n// Set up an interest reason for the subscription.\nSubscription.Reason reason = new Subscription.Reason();\nreason.setReasonType(\"someone replied to you\");\nreason.setCondition(\"replied_owner_name = '\" + identity.name() + \"'\");\n\n// Subscribe the user to the notification center.\nSubscription subscription = new Subscription();\nsubscription.setSubscriber(subscriber);\nsubscription.setReason(reason);\n\n// Subscribe the user to the notification center and block until the subscription is completed.\ntry {\n    subscription.subscribe(this);\n} catch (IOException e) {\n    Log.e(TAG, \"Error subscribing to reply notifications\", e);\n}\n\n}", "CodeBleu_score": 35.4588389697003}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\trn Mono.defer(() -> updateCommentWithRetry(comment.getName(), c -> c.setApproved(true).setApprovedTime(now()))\n.doOnError(OptimisticLockingFailureException.class, e -> log.warn(\"Failed to approve comment {} with error {}\", comment.getName(), e.getMessage())));\n}", "CodeBleu_score": 22.023109169436783}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn Mono.defer(() -> updateCommentWithRetry(comment.getName(), c -> {\nc.setApproved(true);\nc.setApprovedTime(now());\nreturn c;\n}));\n}", "CodeBleu_score": 16.002172953696885}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn updateCommentWithRetry(comment.getName(), c -> {\nc.setApproved(true);\nc.setApprovedTime(now());\nreturn c;\n});\n}", "CodeBleu_score": 15.95847489442002}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this;\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 42.10018301332678}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 56.108584083339984}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this;\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 42.10018301332678}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\n$this->redirect($this->successRedirect);\n\nreturn $this;\n\n}", "CodeBleu_score": 21.034890183104483}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$this->redirect(\n$this->successRedirect?? $this->redirect?? $this->url\n);\n\nreturn $this;\n}", "CodeBleu_score": 22.97951001024563}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$url = $this->evaluate($this->successRedirect);\n\n\tif (! empty($url)) {\n\t\t$this->redirect($url);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 72.00815647721815}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tf ($record?->exists?? false) {\n            $tagClassName = $this->tagClassName;\n\n            $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n                $locale = $tagClassName::getLocale();\n\n                $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n                if ($tag?->isEmpty()?? true) {\n                    $tag = $tagClassName::create([\n                        'name' => [$locale => $tagName],\n                    ]);\n                }\n\n                return $tag;\n            })->flatten;\n\n            $record->tags()->sync($tags->pluck('id'));\n        }\n    }", "CodeBleu_score": 69.11402617395792}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t", "CodeBleu_score": 7.242990654205607}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.Scope{\n\t\tType:     enum.ScopeTypeRepository,\n\t\tSpace:    spacePath,\n\t\tResource: repoName,\n\t}\n\tresource := authz.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tID:   pipelineIdentifier,\n\t}\n\t// Perform the authorization check.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"permission check failed: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 65.89392459557575}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := &authz.Scope{\n\t\tType:      authz.ScopeTypePipeline,\n\t\tSpacePath: spacePath,\n\t\tRepoName:  repoName,\n\t\tPipeline:  pipelineIdentifier,\n\t}\n\tresource := &authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// Perform the authorization check.\n\tif err := authorizer.Check(ctx, authorizer.WithSession(session),\n\t\tauthorizer.WithContext(ctx), authorizer.WithScope(scope),\n\t\tauthorizer.WithResource(resource), authorizer.WithPermission(permission)); err!= nil {\n\t\treturn fmt.Errorf(\"failed to check authorization: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 62.30190760110881}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repositoryName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(spacePath, repositoryName)\n\tresource := authz.NewResource(scope, authz.Pipeline, pipelineIdentifier)\n\n\t// Perform the authorization check.\n\tif err := authorizer.Check(ctx, authorizer.NewContext(session), scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"failed to check authorization: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 51.522520426555765}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Check if the session has permission to the space\n\tif err := Check(ctx, authorizer, session, space, permission); err!= nil {\n\t\treturn err\n\t}\n\treturn nil\n}", "CodeBleu_score": 24.30249745898706}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path to get the parent space and name\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"error dissecting space path: %w\", err)\n\t}\n\t// Create a scope and resource based on the parent space and name\n\tscope := &types.Scope{\n\t\tSpace: parentSpace,\n\t\tName:  name,\n\t}\n\tresource := &types.Resource{\n\t\tScope: scope,\n\t\tType:  types.ResourceTypeSpace,\n\t}\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 70.2371058630237}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect space path: %w\", err)\n\t}\n\n\tscope := &types.Scope{\n\t\tSpace: parentSpace,\n\t\tName:  name,\n\t}\n\n\tresource := &types.Resource{\n\t\tType: types.ResourceTypeSpace,\n\t\tName: name,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 73.71955655482219}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the data and return the result.\n\tif len(source) == 0 {\n\t\tresult, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn result, nil\n\t}\n\n\t// Decode the source JSON into a map.\n\tvar sourceMap map[string]any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\terr := decoder.Decode(&sourceMap)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the source map to JSON.\n\tbuffer := bytes.NewBuffer(nil)\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\terr = encoder.Encode(sourceMap)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result.\n\tresult := buffer.Bytes()\n\tif len(result) > 0 && result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\n\treturn result, nil\n}", "CodeBleu_score": 67.76338600678297}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tvar err error\n\tif len(source) == 0 {\n\t\tsource, err = json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar buf bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\terr = decoder.Decode(&buf)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\terr = json.NewEncoder(&buf).Encode(data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn json.RawMessage(bytes.TrimRight(buf.Bytes(), \"\n\")), nil\n}", "CodeBleu_score": 44.92962280786714}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tvar buf bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tencoder := json.NewEncoder(&buf)\n\tencoder.SetEscapeHTML(true)\n\terr := decoder.Decode(data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\terr = encoder.Encode(data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tif buf.Bytes()[len(buf.Bytes())-1] == '\n' {\n\t\tbuf.Truncate(len(buf.Bytes()) - 1)\n\t}\n\treturn buf.Bytes(), nil\n}", "CodeBleu_score": 49.31245741920065}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate repository reference\n\trepoRef, err := c.repoStore.ValidateRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch repository\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions\n\tif err := c.repoStore.CheckAccess(session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 43.309961711028336}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\t// Check access permissions for the session on the repository.\n\tif!c.repoStore.CheckAccess(ctx, session, repo, reqPermission) {\n\t\treturn nil, usererror.New(usererror.BadRequest, \"session does not have access to the repository\")\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 40.16653157320835}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate repository reference\n\tif err := c.repoStore.ValidateRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest(err)\n\t}\n\n\t// Fetch repository\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions\n\tif err := c.repoStore.CheckAccess(ctx, repo, session, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 46.665657354128584}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.renderer.attach(self)\n\tself.on_render = on_render\n\treturn self", "CodeBleu_score": 30.806974064704594}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer then\n\t\tself.renderer.attach(self)\n\t\tself.state.on_render = on_render\n\t\treturn self\n\telse\n\t\tself.renderer = self.screen.renderer\n\t\tself.renderer.attach(self)\n\t\tself.state.on_render = on_render\n\t\treturn self\n\tend", "CodeBleu_score": 49.44556953030897}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif self.state.attached_to_screen then\n\t\tself:update()\n\tend\n\treturn self", "CodeBleu_score": 37.60575850081985}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tself.watcher:watch_file(self.filename, callback)\n\telse\n\t\tconsole.debug.error(\"Buffer:watch: invalid buffer or no callback\")\n\tend", "CodeBleu_score": 28.65364189680659}, {"code": "function Buffer:watch(callback)\n\t\tif not self:is_valid() then\n\t\tconsole.debug.error(\"Buffer is not valid\")\n\t\treturn\n\tend\n\tif not callback then\n\t\tconsole.debug.error(\"No callback provided\")\n\t\treturn\n\tend\n\tlocal filename = self:get_filename()\n\tif not filename then\n\t\tconsole.debug.error(\"No filename provided\")\n\t\treturn\n\tend\n\tself.watcher = loop.free_textlock()\n\tself.watcher:watch_file(filename, function(err)\n\t\tif err then\n\t\t\tconsole.debug.error(\"Error watching file: \".. err)\n\t\t\treturn\n\t\tend\n\t\tcallback()\n\tend)", "CodeBleu_score": 46.11025032259889}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tself.watcher = loop.free_textlock()\n\t\tself.watcher:watch_file(self.filename, callback)\n\tend", "CodeBleu_score": 31.33514575838398}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal color_spec = self:get_spec()\n\tlocal color_attr = self:get_attr()\n\tlocal color_highlight = self:get_highlight(color_spec, color_attr)\n\n\tif color_highlight then\n\t\tself.hex = color_highlight\n\t\treturn color_highlight\n\tend\n\n\tlocal r, g, b = color_spec[1], color_spec[2], color_spec[3]\n\tself.hex = string.format(\"#%02x%02x%02x\", r, g, b)\n\treturn self.hex", "CodeBleu_score": 45.40434182016174}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal color_spec = self:get_color_spec()\n\tlocal color_attr = self:get_color_attr()\n\tlocal highlight_color = self:get_highlight_color()\n\n\tif highlight_color then\n\t\tself.hex = highlight_color\n\t\treturn highlight_color\n\tend\n\n\tif color_spec and color_spec[color_attr] then\n\t\tself.hex = color_spec[color_attr]\n\t\treturn self.hex\n\tend\n\n\treturn nil", "CodeBleu_score": 44.568576243254164}, {"code": "function Color:to_hex()\n\t\t-- If the hex value is already cached, return it\n\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\t-- Retrieve the color's specification\n\tlocal spec = self.spec\n\n\t-- Determine the relevant attribute (foreground or background)\n\tlocal attr = spec.foreground and \"foreground\" or \"background\"\n\n\t-- Attempt to get the highlight color using Neovim's API\n\tlocal color = vim.api.nvim_get_hl_by_name(spec.name, true)[attr]\n\n\t-- If successful, convert the color to a hex string and cache it\n\tif color then\n\t\tself.hex = string.format(\"#%02x%02x%02x\", color.r, color.g, color.b)\n\tend\n\n\t-- Return the hex value\n\treturn self.hex", "CodeBleu_score": 58.182551062905134}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tlocal col_top, col_end = line:find(pattern)\n\t\tif col_top then\n\t\t\tbuffer:add_highlight(hl, i, col_top, col_end)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 37.760178530034224}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal matches = {}\n\tfor i, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\ttable.insert(matches, {\n\t\t\t\tline = i,\n\t\t\t\tcol_top = match:find(pattern),\n\t\t\t\tcol_end = match:find(pattern) + #match - 1,\n\t\t\t})\n\t\tend\n\tend\n\n\tfor _, match in ipairs(matches) do\n\t\tbuffer:add_highlight(hl, match.line, match.col_top, match.col_end)\n\tend\n\n\treturn self", "CodeBleu_score": 42.63906917441397}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\n\tfor i, line in ipairs(lines) do\n\t\tlocal col_top, col_end = line:find(pattern)\n\n\t\tif col_top then\n\t\t\tbuffer:add_highlight(hl, i, col_top, col_end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 37.760178530034224}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = self:calculate_id(row, col)\n\tself:set_virtual_text(buffer, id, text, hl, row, col, pos, priority)\n\treturn id", "CodeBleu_score": 32.30931760347781}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = buffer:get_virtual_text_id(hl, row, col)\n\tbuffer:set_virtual_text(id, row, { { text, hl, pos, priority } }, {})\n\treturn id", "CodeBleu_score": 34.37713642874278}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = self:generate_id(row, col)\n\tvim.api.nvim_buf_set_extmark(buffer, 0, id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 59.78270642575756}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal i = 1\n\tlocal c = output:sub(i, i)\n\twhile c ~= \"\" do\n\t\tif c == \"", "CodeBleu_score": 17.427948999492788}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal i = 1\n\tlocal c = string.sub(output, i, i)\n\twhile c do\n\t\tif c == \"", "CodeBleu_score": 16.296170984611308}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal start = 1\n\tlocal end_ = string.len(output)\n\tfor i = start, end_ do\n\t\tlocal c = string.sub(output, i, i)\n\t\tif c == \"", "CodeBleu_score": 27.571865047587885}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif not self.watchers[path] then\n\t\tlocal watcher = vim.loop.new_fs_event()\n\t\tself.watchers[path] = watcher\n\t\tvim.loop.fs_event_start(watcher, path, handler)\n\tend\n\treturn self.watchers[path]", "CodeBleu_score": 45.2413505842555}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher then\n\t\treturn watcher\n\tend\n\n\twatcher = self.loop:fs_event(path, 0)\n\tself.watchers[path] = watcher\n\twatcher:start(handler)\n\treturn watcher", "CodeBleu_score": 39.6882993702792}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif not self.watchers[path] then\n\t\tself.watchers[path] = vim.loop.new_fs_event()\n\t\tvim.loop.fs_event_start(self.watchers[path], path, handler)\n\tend\n\treturn self.watchers[path]", "CodeBleu_score": 47.45207217339801}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks()\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal start_line = hunk.start_line\n\t\tlocal end_line = hunk.end_line\n\t\tlocal line_count = end_line - start_line + 1\n\t\tlocal line_index = 1\n\t\tfor line_number = start_line, end_line do\n\t\t\tlocal line = lines[line_number]\n\t\t\tlocal sign = {}\n\t\t\tsign.line = line_number\n\t\t\tsign.hunk = hunk\n\t\t\tsign.line_index = line_index\n\t\t\tsign.line_count = line_count\n\t\t\tsign.type = hunk.type\n\t\t\tsign.priority = hunk.priority\n\t\t\tsign.text = line\n\t\t\tsign.ns_id = self.namespace:get_sign_ns_id()\n\t\t\tsigns[line_number] = sign\n\t\t\tline_index = line_index + 1\n\t\tend\n\tend\n\tself:set_signs(signs)\n\treturn hunks", "CodeBleu_score": 44.22921741139858}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks == nil then\n\t\treturn nil\n\tend\n\tself:set_signs(hunks)\n\tself.buffer:update_signs(self.namespace)\n\treturn hunks", "CodeBleu_score": 19.657559019163816}, {"code": "function GitBuffer:live_hunks()\n\t\t-- Get the buffer lines\n\tlocal buffer_lines = self:get_lines()\n\t\n\t-- Get the hunks using the git object\n\tlocal hunks, err = self.git_object:live_hunks(buffer_lines)\n\tif err then\n\t\treturn err\n\tend\n\t\n\t-- Set up signs for each line in the hunks\n\tfor _, hunk in pairs(hunks) do\n\t\tfor _, line in pairs(hunk) do\n\t\t\tself:set_sign(line, hunk.type, hunk.priority)\n\t\tend\n\tend\n\t\n\t-- Update the buffer's signs\n\tself:update_signs()\n\t\n\t-- Return the hunks\n\treturn hunks", "CodeBleu_score": 28.436298534085925}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tfs.write_file(tmpfile, patch)\n\tlocal err = self:run_git_command('apply', tmpfile)\n\tfs.remove_file(tmpfile)\n\treturn err", "CodeBleu_score": 41.59732038657951}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal patch_file = fs.tmpname()\n\tfs.write_file(patch_file, patch)\n\tlocal status, err = self:git_cmd('add', patch_file)\n\tfs.remove_file(patch_file)\n\n\treturn status, err", "CodeBleu_score": 44.471525193221275}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tfs.write_file(tmpfile, patch)\n\tlocal err = loop.free_textlock(1):execute('git --git-dir=\"'.. self.gitdir.. '\" --work-tree=\"'.. self.workdir.. '\" apply --cached --whitespace=nowarn --unidiff-zero '.. tmpfile)\n\tfs.remove_file(tmpfile)\n\treturn err", "CodeBleu_score": 47.89257657387369}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString accessTokenEndpoint = getAccessTokenEndpoint();\n\tString accessTokenVerb = getAccessTokenVerb();\n\tString body = getBody(requestToken, verifier);\n\tString accessTokenExtractor = getAccessTokenExtractor();\n\tString accessToken = send(accessTokenEndpoint, accessTokenVerb, body, accessTokenExtractor);\n\treturn new Token(accessToken, null);\n}", "CodeBleu_score": 34.95607309572936}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n//        String accessTokenEndpoint = config.getAccessTokenEndpoint();\n//        String accessTokenVerb = config.getAccessTokenVerb();\n//        String accessTokenExtractor = config.getAccessTokenExtractor();\n//\n//        Request request = new Request(accessTokenVerb, accessTokenEndpoint);\n//\n//        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n//        request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n//        request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n//\n//        Response response = send(request);\n//\n//        return extract(response, accessTokenExtractor);\n    }", "CodeBleu_score": 4.935804193421823}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\nString accessTokenEndpoint = getAccessTokenEndpoint();\nString accessTokenVerb = getAccessTokenVerb();\nString accessTokenExtractor = getAccessTokenExtractor();\nString accessTokenBodyParameter = getAccessTokenBodyParameter();\n\n// Create an OAuth request to the access token endpoint\nOAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n\n// Add the necessary authentication header and body parameters to the request\nrequest.addHeader(getHttpBasicAuthHeaderValue());\nrequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\nrequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n// Send the request and extract the access token from the response body\nOAuthResponse response = send(request);\nToken accessToken = extract(response, accessTokenExtractor, accessTokenBodyParameter);\n\nreturn accessToken;\n}", "CodeBleu_score": 42.530963006103406}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Set up credentials provider\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\n\t// Add host to auth cache\n\tAuthCache authCache = context.getAuthCache();\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\n\t// Log the action of adding the host to the auth cache\n\tlog.info(\"Added host \" + host.toHostString() + \" to auth cache\");\n}", "CodeBleu_score": 47.49195809177213}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create a credentials provider with the specified credentials\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\n\t// Add the credentials provider to the context\n\tcontext.setCredentialsProvider(credsProvider);\n\n\t// Add the host to the auth cache\n\tBasicScheme basicAuth = new BasicScheme();\n\tcontext.getAuthCache().put(host, basicAuth);\n\n\t// Log the action of adding the host to the auth cache\n\tlog.info(\"Added host \" + host.toHostString() + \" to auth cache\");\n}", "CodeBleu_score": 44.92010329904959}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// set up the credentials provider\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()),\n\t\tnew UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\n\t// add the host to the auth cache\n\tBasicScheme basicAuth = new BasicScheme();\n\tcontext.getAuthCache().put(host, basicAuth);\n\n\t// log the action\n\tlog.info(\"Added host \" + host.toHostString() + \" to auth cache\");\n}", "CodeBleu_score": 44.756174648631266}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t/ get Jenkins instance and AvatarCache extension\n\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance not found\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache instance not found\");\n\t}\n\t// build cache key and seed cache\n\tString key = cache.getDigestOf(source.getName() + size);\n\tcache.seed(key, source);\n\t// build URL\n\tString rootUrl = cache.getRootUrlFromRequest();\n\tString encodedKey = cache.rawEncode(key);\n\treturn rootUrl + cache.getUrlName() + \"/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 50.64719289755186}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t        if (cache == null) {\n//            throw new IllegalStateException(\"AvatarCache is not configured\");\n//        }\n//        String key = getCacheKey(source, size);\n//        CacheEntry entry = cache.get(key);\n//        if (entry == null) {\n//            entry = new CacheEntry(source, service.submit(new FetchImage(source)));\n//            cache.put(key, entry);\n//        } else {\n//            if (entry.isStale()) {\n//                synchronized (serviceLock) {\n//                    if (!entry.pending()) {\n//                        entry.setFuture(service.submit(new FetchImage(entry.source)));\n//                    }\n//                }\n//            }\n//        }\n//        entry.touch();\n//        if (iterator == null ||!iterator.hasNext()) {\n//            synchronized (serviceLock) {\n//                if (iterator == null ||!iterator.hasNext()) {\n//                    iterator = cache.entrySet().iterator();\n//                }\n//            }\n//        } else {\n//            synchronized (iterator) {\n//                // process one entry in the cache each access\n//                if (iterator.hasNext()) {\n//                    Map.Entry<String, CacheEntry> next = iterator.next();\n//                    if (next.getValue().isUnused()) {\n//                        iterator.remove();\n//                    }\n//                } else {\n//                    iterator = null;\n//                }\n//            }\n//        }\n//        return entry;\n    }", "CodeBleu_score": 6.297168256114732}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tatarCache cache = Jenkins.get().getExtensionList(AvatarCache.class).get(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\"AvatarCache extension is not installed\");\n}\nString key = cache.encode(source.getName());\ncache.seedCache(key, source);\ntry {\nreturn Jenkins.get().getRootUrlFromRequest() + cache.getUrlName() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n}\n}", "CodeBleu_score": 49.772261645522796}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nthis.image = scaleImage(image, 128);\n}\nif (this.lastModified < 0) {\nthis.lastModified = System.currentTimeMillis();\n}\n}", "CodeBleu_score": 52.95142226434507}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 34.98477217692263}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tthis.image = scaleImage(image, 128);\n\t}\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n}", "CodeBleu_score": 53.559824143341174}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null)\nreturn false;\ntry {\nif (future.isDone()) {\n// Retrieve the cache entry.\nCacheEntry entry = future.get();\n// Update the image.\nimage = entry.image;\n// Update the last modified time.\nlastModified = entry.lastModified;\n// Set the future to null.\nfuture = null;\n}\n}\ncatch (InterruptedException e) {\n// Ignore.\n}\ncatch (ExecutionException e) {\n// Ignore.\n}\nreturn future!= null;\n}", "CodeBleu_score": 40.501315527571435}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nif (future.isDone()) {\ncacheEntry = future.get();\nimage = cacheEntry.getImage();\nlastModified = cacheEntry.getLastModified();\nfuture = null;\n}\n} catch (Exception e) {\nfuture = null;\n}\nreturn future!= null;\n}", "CodeBleu_score": 39.71984309010137}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nif (future.isDone()) {\nImage image = future.get();\nif (image!= null) {\nsetImage(image);\nlastModified = System.currentTimeMillis();\n}\nfuture = null;\n}\n} catch (Exception e) {\nfuture = null;\n}\nreturn future!= null;\n}", "CodeBleu_score": 36.41875584205193}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// get the byte array from the node\n\tbyte[] image = (byte[]) node;\n\t// set the content length\n\trsp.setContentLength(image.length);\n\t// set the content type\n\trsp.setContentType(\"image/png\");\n\t// set the content disposition\n\trsp.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + req.getOriginalRequestURI() + \".png\\\"\");\n\t// set the cache control header\n\trsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n\t// set the pragma header\n\trsp.setHeader(\"Pragma\", \"no-cache\");\n\t// set the expires header\n\trsp.setDateHeader(\"Expires\", 0);\n\t// write the image to the output stream\n\trsp.getOutputStream().write(image);\n\t// flush the output stream\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 38.00990846255742}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// get the image from the node\n\tBufferedImage image = node.getIcon();\n\t// create a byte array output stream\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t// write the image to the byte array output stream\n\tImageIO.write(image, \"png\", baos);\n\t// flush the byte array output stream\n\tbaos.flush();\n\t// get the byte array from the byte array output stream\n\tbyte[] imageBytes = baos.toByteArray();\n\t// set the content length to the length of the byte array\n\trsp.setContentLength(imageBytes.length);\n\t// set the content type to PNG\n\trsp.setContentType(\"image/png\");\n\t// set the cache control header to 1 hour\n\trsp.addHeader(\"Cache-Control\", \"max-age=3600\");\n\t// set the date header to the current date\n\trsp.addDateHeader(\"Date\", System.currentTimeMillis());\n\t// write the byte array to the response output stream\n\trsp.getOutputStream().write(imageBytes);\n\t// flush the response output stream\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 45.92412172382696}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tbyte[] image = generateImage(node);\n\trsp.setContentLength(image.length);\n\trsp.addDateHeader(\"Expires\", System.currentTimeMillis() + 60000);\n\trsp.addHeader(\"Cache-Control\", \"max-age=60\");\n\trsp.setContentType(\"image/png\");\n\trsp.getOutputStream().write(image);\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 35.81151172050725}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t     this.enableCache = enableCache;\n//        this.teamCacheDuration = teamCacheDuration;\n//        this.repositoriesCacheDuration = repositoriesCacheDuration;\n//        this.owner = owner;\n//        this.projectKey = projectKey;\n//        this.repositoryName = repositoryName;\n//        this.authenticator = authenticator;\n//\n//        if (enableCache) {\n//            configureContext();\n//            configureBuilder();\n//            setExpireDuration();\n//            setConnectionManager();\n//            setClientProxyParams(BitbucketCloudApiClient.DEFAULT_HOST, builder);\n//            setKeepAliveStrategy();\n//            setRetryHandler();\n//            setConnectionManagerShared();\n//        } else {\n//            configureBuilder();\n//            setClientProxyParams(BitbucketCloudApiClient.DEFAULT_HOST, builder);\n//        }\n//\n//        if (authenticator!= null) {\n//            configureContext();\n//            authenticator.configureContext(context, new HttpHost(DEFAULT_HOST, DEFAULT_PORT));\n//            setClientProxyParams(BitbucketCloudApiClient.DEFAULT_HOST, builder);\n//        }\n//\n//        client = builder.build();\n    }", "CodeBleu_score": 13.387179818440991}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t     this.enableCache = enableCache;\n//        this.teamCacheDuration = teamCacheDuration;\n//        this.repositoriesCacheDuration = repositoriesCacheDuration;\n//        this.owner = owner;\n//        this.projectKey = projectKey;\n//        this.repositoryName = repositoryName;\n//        this.authenticator = authenticator;\n//        if (enableCache) {\n//            configureCache();\n//        }\n//        configureBuilder();\n//        configureContext();\n//        setClientProxyParams(host, builder);\n//        client = builder.build();\n    }", "CodeBleu_score": 13.387179818440991}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t     this.enableCache = enableCache;\n//        this.teamCacheDuration = teamCacheDuration;\n//        this.repositoriesCacheDuration = repositoriesCacheDuration;\n//        this.owner = owner;\n//        this.projectKey = projectKey;\n//        this.repositoryName = repositoryName;\n//        this.authenticator = authenticator;\n//        configureContext();\n//        configureBuilder();\n//        setClientProxyParams(host, builder);\n//        client = builder.build();\n//        setConnectionManager();\n//        setRetryHandler();\n//        setKeepAliveStrategy();\n//        setExpireDuration();\n    }", "CodeBleu_score": 13.387179818440991}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t  BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n//    if (sourceBranch!= null) {\n//        pullRequest.setSource(new BitbucketPullRequestSource(sourceBranch.getCommit().getHash()));\n//    }\n//    BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n//    if (destinationBranch!= null) {\n//        pullRequest.setDestination(new BitbucketPullRequestDestination(destinationBranch.getCommit().getHash()));\n//    }\n}", "CodeBleu_score": 23.04945031546713}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tget source branch\nString sourceBranchName = pullRequest.getSource().getBranch().getName();\n\n// get source branch raw node\nString sourceBranchRawNode = getRawNode(pullRequest.getSource().getBranch());\n\n// set source branch commit closure\nsetCommitClosure(sourceBranchName, sourceBranchRawNode);\n\n// get destination branch\nString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\n// get destination branch raw node\nString destinationBranchRawNode = getRawNode(pullRequest.getDestination().getBranch());\n\n// set destination branch commit closure\nsetCommitClosure(destinationBranchName, destinationBranchRawNode);\n}", "CodeBleu_score": 36.586777167951574}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tGet the source branch\n\tBitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n\n\t// If the source branch exists, assign a new CommitClosure based on the branch's raw node\n\tif (sourceBranch!= null) {\n\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceBranch.getRawNode()));\n\t}\n\n\t// Get the destination branch\n\tBitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n\n\t// If the destination branch exists, assign a new CommitClosure based on the branch's raw node\n\tif (destinationBranch!= null) {\n\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationBranch.getRawNode()));\n\t}\n}", "CodeBleu_score": 54.0568139244906}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tif (locationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins location configuration\");\n\t}\n\tString url = locationConfiguration.getUrl();\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins URL\");\n\t}\n\tDisplayURLProvider displayURLProvider = locationConfiguration.getDisplayURLProvider();\n\tif (displayURLProvider == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins display URL provider\");\n\t}\n\treturn displayURLProvider.getRunURL(build, url, false);\n}", "CodeBleu_score": 46.06044728201656}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tif (build instanceof AbstractBuild) {\n\t\tAbstractBuild<?,?> ab = (AbstractBuild<?,?>) build;\n\t\tif (ab.getParent() instanceof AbstractProject) {\n\t\t\tAbstractProject<?,?> ap = (AbstractProject<?,?>) ab.getParent();\n\t\t\tif (ap.getBuildWrappersList().get(DisplayURLProvider.class)!= null) {\n\t\t\t\treturn DisplayURLProvider.getRunURL(ab);\n\t\t\t}\n\t\t}\n\t}\n\treturn Jenkins.get().getRootUrl();\n}", "CodeBleu_score": 36.50460575469111}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = null;\n\ttry {\n\t\trootURL = Jenkins.getInstance().getRootUrl();\n\t\tif (rootURL == null) {\n\t\t\tthrow new IllegalStateException(\"Jenkins root URL is not configured\");\n\t\t}\n\t\trootURL = rootURL.trim();\n\t\tif (rootURL.endsWith(\"/\")) {\n\t\t\trootURL = rootURL.substring(0, rootURL.length() - 1);\n\t\t}\n\t\trootURL = rootURL.trim();\n\t\tif (!rootURL.endsWith(\"/jenkins\")) {\n\t\t\trootURL = rootURL + \"/jenkins\";\n\t\t}\n\t} catch (IllegalStateException e) {\n\t\tLOGGER.log(Level.FINE, \"Jenkins root URL is not configured\", e);\n\t}\n\tif (rootURL!= null) {\n\t\tDisplayURLProvider displayURLProvider = build.getDisplayName().getProvider();\n\t\tif (displayURLProvider!= null) {\n\t\t\trootURL = displayURLProvider.getURLFor(build);\n\t\t}\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 44.0544237181139}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null || url.isEmpty()) {\nthrow new IllegalStateException(\"URL cannot be null or empty\");\n}\n\nURL parsedUrl;\ntry {\nparsedUrl = new URL(url);\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\"URL is malformed: \" + url, e);\n}\n\nString host = parsedUrl.getHost();\nif (host == null || host.isEmpty()) {\nthrow new IllegalStateException(\"URL is malformed: \" + url);\n}\n\nif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\nthrow new IllegalStateException(\"URL cannot use localhost or unconfigured-jenkins-location as the host: \" + url);\n}\n\nif (bitbucket!= null && bitbucket.isCloud()) {\nif (!host.contains(\".\")) {\nthrow new IllegalStateException(\"URL must be fully qualified for Bitbucket Cloud: \" + url);\n}\n}\n\nreturn url;\n}", "CodeBleu_score": 52.034084107239856}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null) {\nthrow new IllegalArgumentException(\"URL cannot be null\");\n}\nif (url.isEmpty()) {\nthrow new IllegalArgumentException(\"URL cannot be empty\");\n}\nif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\nthrow new IllegalStateException(\"URL cannot contain 'localhost' or 'unconfigured-jenkins-location'\");\n}\nif (bitbucket == BitbucketApi.BITBUCKET_CLOUD &&!url.contains(\".\")) {\nthrow new IllegalStateException(\"URL must be fully qualified for Bitbucket Cloud API clients\");\n}\nURI uri;\ntry {\nuri = new URI(url);\n} catch (URISyntaxException e) {\nthrow new IllegalStateException(\"URL is not valid\", e);\n}\nif (uri.getHost() == null) {\nthrow new IllegalStateException(\"URL is not valid\");\n}\nreturn url;\n}", "CodeBleu_score": 48.41268298467085}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t", "CodeBleu_score": 7.399760459247054}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tSCMSource source = SCMSource.SourceByItem.findSource(build.getParent());\n        if (!(source instanceof BitbucketSCMSource)) {\n            return;\n        }\n\n        BitbucketApi bitbucket = buildBitbucketClient(source, build, listener);\n        if (bitbucket == null) {\n            return;\n        }\n\n        final SCMHead head = build.getHead();\n        final SCMRevision revision = head.getRevision();\n        final String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Skipping build status notification for \" + head.getName() + \" because the revision is not a Git commit\");\n            return;\n        }\n\n        final String branch = head.getName();\n        final boolean shareBuildKeyBetweenBranchAndPR = source.getShareBuildKeyBetweenBranchAndPR();\n        final String buildKey = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        listener.getLogger().println(\"[Bitbucket] Sending build status notification for \" + head.getName() + \" with key \" + buildKey);\n        createStatus(build, listener, bitbucket, buildKey, hash);\n    }", "CodeBleu_score": 45.072920750089075}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    final SCMSource source = SCMSource.SourceByItem.findSource(build.getParent());\n//        if (!(source instanceof BitbucketSCMSource)) {\n//            return;\n//        }\n\n        // Initialize the Bitbucket context\n        BitbucketApi bitbucket = buildBitbucketClient(source, build, listener);\n        if (bitbucket == null) {\n            return;\n        }\n\n        // Check if notifications are disabled\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.disableNotifications()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled for this build\");\n            return;\n        }\n\n        // Retrieve the SCM revision and its hash\n        SCMRevision revision = build.getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Can not determine commit hash\");\n            return;\n        }\n\n        // Determine whether to share the build key between branch and PR\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        // Log the notification type\n        String notificationType = shareBuildKeyBetweenBranchAndPR? \"branch\" : \"PR\";\n        listener.getLogger().println(\"[Bitbucket] Sending build status for \" + notificationType);\n\n        // Construct the build key\n        String key = getBuildKey(build, source.getBranch(), shareBuildKeyBetweenBranchAndPR);\n\n        // Initialize the Bitbucket client\n        BitbucketChangesetCommentNotifier notifier = new BitbucketChangesetCommentNotifier(bitbucket);\n\n        // Create and send the build status notification\n        notifier.buildStatus(new BitbucketBuildStatus(hash, null, null, null, key, build.getDisplayName()));\n        listener.getLogger().println(\"[Bitbucket] Build result notified\");\n    }", "CodeBleu_score": 51.46705210748501}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n//        if (context.disableNotifications()) {\n//            listener.getLogger().println(\"[Bitbucket] Build status notifications are disabled.\");\n//            return;\n//        }\n//\n//        String branch = build.getEnvironment(listener).get(BitbucketSCMSourceContext.BITBUCKET_BRANCH_ENV);\n//        String hash = getHash(build.getRevision());\n//        if (hash == null) {\n//            listener.getLogger().println(\"[Bitbucket] Build status notifications are disabled.\");\n//            return;\n//        }\n//\n//        String key = getBuildKey(build, branch, context.shareBuildKeyBetweenBranchAndPR());\n//        BitbucketApi bitbucket = createBitbucketClient(source, listener);\n//        if (bitbucket == null) {\n//            return;\n//        }\n//\n//        createStatus(build, listener, bitbucket, key, hash);\n//        listener.getLogger().println(\"[Bitbucket] Build status notifications sent.\");\n    }", "CodeBleu_score": 14.749245626055544}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString folderName = build.getParent().getFullName();\n String jobName = build.getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n return folderName + \"-\" + branch;\n }\n return jobName;\n }", "CodeBleu_score": 39.478575569332726}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tif (shareBuildKeyBetweenBranchAndPR) {\n return build.getParent().getFullName() + \"-\" + branch;\n }\n return build.getFullName();\n }", "CodeBleu_score": 25.616865840542363}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey;\n if (shareBuildKeyBetweenBranchAndPR) {\n String folder = build.getParent().getFullName();\n buildKey = folder + \"/\" + branch;\n } else {\n buildKey = build.getFullName();\n }\n return buildKey;\n }", "CodeBleu_score": 44.72194674079576}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\nlog\n.\nwarning\n(\n\"Server URL is null for BitbucketSCMNavigator. This will be changed to \"\n+\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nArrayList\n<\nSCMNavigatorTrait\n>\n(\n)\n;\ntraits\n.\nadd\n(\nnew\nSCMNavigatorTrait\n(\nBitbucketSCMNavigator\n.\nTRAIT_ID\n)\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 8.929340602956488}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\n}\nif\n(\nserverUrl\n==\nnull\n)\n{\nLOGGER\n.\nwarning\n(\n\"Server URL is null, using default URL\"\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\nLOGGER\n.\nwarning\n(\n\"Traits are null, using default traits\"\n)\n;\ntraits\n=\nBitbucketSCMNavigator\n.\ngetDefaultTraits\n(\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 8.201985730330524}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nget\ndefaultIfBlank\nget\nadd\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nArrayList\n<\nSCMTrait\n>\n(\n)\n;\nif\n(\nuseLegacyTraits\n)\n{\nif\n(\nbitbucketServerVersion\n==\nnull\n)\n{\nbitbucketServerVersion\n=\nBitbucketServerVersion\n.\nVERSION_5_2_0\n;\n}\ntraits\n.\nadd\n(\nnew\nSCMTrait\n(\nBitbucketSCMSourceTrait\n.\nclass\n)\n)\n;\n}\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 8.856690558000443}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tString message = isMatch? \"Proposed\" : \"Ignored\";\n\tlogger.info(\"{}: {} {}\", message, repository.getFullName(), repository.getScm());\n\tif (isMatch) {\n\t\tcount++;\n\t}\n}", "CodeBleu_score": 47.28877201972008}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (repository == null) {\n\t\treturn;\n\t}\n\tString message = format(\"Repository %s%s\", repository.getFullName(), isMatch? \" is proposed\" : \" is ignored\");\n\tlogger.info(message);\n\tif (isMatch) {\n\t\tcount.incrementAndGet();\n\t}\n}", "CodeBleu_score": 46.59771872512439}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (repository!= null) {\n\t\tString message = format(\"Repository %s %s\", repository.getFullName(), isMatch? \"is proposed\" : \"is ignored\");\n\t\tif (isMatch) {\n\t\t\tcount++;\n\t\t}\n\t\tgetLogger().info(message);\n\t} else {\n\t\tgetLogger().info(format(\"Repository %s is not found\", name));\n\t}\n}", "CodeBleu_score": 49.90229407580628}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t", "CodeBleu_score": 7.465730872593649}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (scm.getBranches().isEmpty()) {\n//            listener.getLogger().format(\"No branches configured, using default branch: %s%n\", git.getDefaultBranch());\n//            marked = new BranchSpec(git.getDefaultBranch()).decorateRevisionToBuild(scm, build, git, listener, marked, rev);\n//        } else {\n//            for (BranchSpec branchSpec : scm.getBranches()) {\n//                marked = branchSpec.decorateRevisionToBuild(scm, build, git, listener, marked, rev);\n//            }\n//        }\n//\n//        return marked;\n//    }", "CodeBleu_score": 7.465730872593649}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (scm.isSkipTag()) {\n//            return rev;\n//        }\n\n        List<String> branches = rev.getBranches();\n        List<String> tags = rev.getTags();\n        if (branches.isEmpty() && tags.isEmpty()) {\n            return rev;\n        }\n\n        List<String> refSpecs = new ArrayList<>();\n        for (String branch : branches) {\n            if (commitExists(git, branch)) {\n                continue;\n            }\n            refSpecs.add(\"+refs/heads/\" + branch + \":\" + branch);\n        }\n        for (String tag : tags) {\n            if (commitExists(git, tag)) {\n                continue;\n            }\n            refSpecs.add(\"+refs/tags/\" + tag + \":\" + tag);\n        }\n\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n\n        listener.getLogger().println(\"Fetching missing commits from remote\");\n        git.fetch(refSpecs);\n\n        return rev;\n    }", "CodeBleu_score": 33.660699636030685}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = new HashMap<>();\n\tif (this.links!= null) {\n\t\tfor (Map.Entry<String, BitbucketHref> entry : this.links.entrySet()) {\n\t\t\tlinks.put(entry.getKey(), entry.getValue().getHref());\n\t\t}\n\t}\n\treturn links;\n}", "CodeBleu_score": 51.25208797829634}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tif (links!= null) {\n\t\tfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\t\tresult.put(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 43.67291361385529}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\nfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue());\n}\nreturn result;\n}", "CodeBleu_score": 52.859356532274425}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\tconst uris = await this.mapResourceStatesToURIs(resourceStates);\n\tfor (const repository of this.repositories) {\n\t\tconst paths = await this.mapURIsToPaths(uris, repository);\n\t\ttry {\n\t\t\tawait this.addPathsToRepository(paths, repository);\n\t\t} catch (e) {\n\t\t\tthis.logError(e);\n\t\t\tthis.showErrorMessage(e);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.83318404624719}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t", "CodeBleu_score": 2.2664046881289432}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates ||!resourceStates.length) {\n\t\treturn;\n\t}\n\n\tconst uris = await this.mapResourceStatesToURIs(resourceStates);\n\tif (!uris ||!uris.length) {\n\t\treturn;\n\t}\n\n\tconst repositoryUris = await this.mapURIsToRepositories(uris);\n\tif (!repositoryUris ||!repositoryUris.length) {\n\t\treturn;\n\t}\n\n\tconst repositoryPaths = await this.mapRepositoriesToPaths(repositoryUris);\n\tif (!repositoryPaths ||!repositoryPaths.length) {\n\t\treturn;\n\t}\n\n\tconst errors = await this.addFilesToRepositories(repositoryPaths);\n\tif (errors && errors.length) {\n\t\tconst errorMessage = this.localize('addFilesToRepositoryError', \"Failed to add files to repository. See console for more details.\");\n\t\tthis.showErrorMessage(errorMessage,...errors);\n\t}\n}", "CodeBleu_score": 41.54371947967515}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tlet resourceStates: ResourceState[] = [];\n\tlet resourceUri: Uri;\n\n\tif (this.resourceStates.length === 0 || this.resourceStates[0].uri.scheme!== 'git') {\n\t\tresourceUri = await this.getSingleResourceUri();\n\t} else {\n\t\tresourceUri = this.resourceStates[0].uri;\n\t}\n\n\tif (resourceUri) {\n\t\tlet resourceState = await this.getResourceState(resourceUri);\n\t\tif (resourceState) {\n\t\t\tresourceStates.push(resourceState);\n\t\t}\n\t}\n\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 36.84448326124139}, {"code": "protected async getResourceStates{\n\t\tconst resourceStates: ResourceState[] = [];\n\tconst resourceState = await this.getResourceState(this.resourceUri);\n\tif (resourceState) {\n\t\tresourceStates.push(resourceState);\n\t}\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 32.89545026352613}, {"code": "protected async getResourceStates{\n\t", "CodeBleu_score": 3.381342689188379}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\tconst editor = window.activeTextEditor;\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\t\turi = editor.document.uri;\n\t}\n\n\tif (uri.scheme ==='svn') {\n\t\turi = Uri.file(uri.fsPath);\n\t}\n\n\tconst scm = sourceControlManager.getRepository(uri);\n\tif (!scm) {\n\t\treturn undefined;\n\t}\n\n\treturn scm.getResource(uri);\n}", "CodeBleu_score": 34.46199446179674}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t editor = this.getEditor();\n\tif (!editor) {\n\t\treturn undefined;\n\t}\n\tconst editorUri = editor.document.uri;\n\tif (!uri) {\n\t\turi = editorUri;\n\t}\n\tif (uri.scheme === \"svn\") {\n\t\turi = Uri.file(uri.fsPath);\n\t}\n\tconst scm = this.sourceControlManager.getRepository(uri);\n\tif (!scm) {\n\t\treturn undefined;\n\t}\n\treturn scm.resource;\n}", "CodeBleu_score": 35.48784158889845}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\tconst editor = window.activeTextEditor;\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\t\turi = editor.document.uri;\n\t}\n\tif (uri.scheme ==='svn') {\n\t\turi = Uri.file(uri.fsPath);\n\t}\n\tconst scm = sourceControlManager.getRepository(uri);\n\tif (!scm) {\n\t\treturn undefined;\n\t}\n\treturn scm.getResource(uri);\n}", "CodeBleu_score": 34.46199446179674}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tlet repository = await this.model.getRemoteRepository(element);\n\tif (repository) {\n\t\tlet diffCmd = this.getDiffCommand(repository, element);\n\t\tif (diffCmd) {\n\t\t\tthis.commands.executeCommand(diffCmd);\n\t\t}\n\t}\n}", "CodeBleu_score": 20.746377194186934}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst repository = await this.model.getRemoteRepository(element.path);\n\tif (repository) {\n\t\tconst remotePath = repository.getRemotePath(element.path);\n\t\tif (element.type === 'A') {\n\t\t\tthis.openFileRemote(remotePath, element.revision);\n\t\t} else {\n\t\t\tconst oldPath = repository.getRemotePath(element.oldPath);\n\t\t\tthis.openDiff(oldPath, element.revision, remotePath, element.revision);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.99291126407006}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t this.model.getRemoteRepository(element.path).then(repository => {\n if (element.action === \"D\") {\n // If the element is deleted, just open the remote file at the new path and revision\n this.openFileRemote(repository, element.path, element.revision);\n } else {\n // If the element is modified or added, open a diff between the old and new revisions\n let oldPath = element.oldPath;\n if (element.action === \"M\") {\n oldPath = element.path;\n }\n repository.getRemoteFile(oldPath, element.revision).then(file => {\n repository.getRemoteFile(element.path, element.revision).then(newFile => {\n this.openDiff(file, newFile);\n });\n });\n }\n });\n }", "CodeBleu_score": 30.15775491078802}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (clipboard.writeText) {\n\t\tif (item.commit) {\n\t\t\tconst commit = item.commit;\n\t\t\tconst message = commit.message || commit.shortMessage;\n\t\t\tclipboard.writeText(message);\n\t\t} else {\n\t\t\tconst revision = item.revision;\n\t\t\tclipboard.writeText(revision);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage('Clipboard not supported');\n\t}\n}", "CodeBleu_score": 36.283339175021446}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage(\"Clipboard is not supported in this environment.\");\n\t\treturn;\n\t}\n\n\tif (item.type === \"commit\") {\n\t\tclipboard.writeText(item.commit.message);\n\t} else {\n\t\tclipboard.writeText(item.revision);\n\t}\n}", "CodeBleu_score": 27.164125486403723}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (await isClipboardSupported()) {\n\t\tif (item.commit) {\n\t\t\tconst message = item.commit.message;\n\t\t\tif (what ==='message') {\n\t\t\t\tawait clipboard.writeText(message);\n\t\t\t} else if (what ==='revision') {\n\t\t\t\tawait clipboard.writeText(item.commit.revision);\n\t\t\t}\n\t\t} else {\n\t\t\twindow.showErrorMessage(`The item is not a commit.`);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(`The clipboard is not supported.`);\n\t}\n}", "CodeBleu_score": 36.79967482574995}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t// Load the available GiteaConnectionFactory implementations\nServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\n// Initialize variables to store the best factory and its priority\nGiteaConnectionFactory best = null;\nlong priority = 0L;\n\n// Iterate through the factories to find the best one\nfor (GiteaConnectionFactory factory : loader) {\n\n// Check if the factory can open the connection\nif (factory.canOpen(this)) {\n\n// Get the priority of the factory\nlong p = factory.priority(this);\n\n// Update the best factory and priority if necessary\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\n\n// Throw an IOException if no suitable factory is found\nif (best == null) {\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}\n\n// Open the connection using the best factory\nreturn best.open(this);\n}", "CodeBleu_score": 85.37373294227957}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader loader = null;\n\tif (Jenkins.getInstanceOrNull()!= null) {\n\t\tloader = Jenkins.getInstanceOrNull().getPluginManager().getPlugin(Gitea.class).getPluginClassLoader();\n\t} else {\n\t\tloader = this.getClass().getClassLoader();\n\t}\n\treturn new Gitea(loader);\n}", "CodeBleu_score": 41.909093622167454}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader cl = null;\n\tif (jenkins!= null) {\n\t\tcl = jenkins.getPluginManager().getPlugin(Gitea.class).getPluginClassLoader();\n\t} else {\n\t\tcl = getClass().getClassLoader();\n\t}\n\treturn this.setClassLoader(cl);\n}", "CodeBleu_score": 46.04245566877826}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\n}", "CodeBleu_score": 2.705335215564287}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t}", "CodeBleu_score": 12.827570259923954}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = trimToNull(displayName);\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 29.29301002818664}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\n}", "CodeBleu_score": 12.827570259923954}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<ListBoxModel.Option> credentials = new ArrayList<>();\n\ttry {\n\t\tCredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, Jenkins.getInstance(), ACL.SYSTEM, URIRequirementBuilder.fromUri(normalizeServerUrl(serverUrl)).build());\n\t\tcredentials.add(new ListBoxModel.Option(Messages.GiteaAuth_NoCredentials(), \"\"));\n\t\tcredentials.addAll(CredentialsMatchers.withId(GiteaAuth.CREDENTIALS_ID).matches(ACL.SYSTEM, URIRequirementBuilder.fromUri(normalizeServerUrl(serverUrl)).build()));\n\t} catch (Exception e) {\n\t\tcredentials.add(new ListBoxModel.Option(Messages.GiteaAuth_NoCredentials(), \"\"));\n\t}\n\treturn new ListBoxModel(credentials);\n}", "CodeBleu_score": 39.392076816950066}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<ListBoxModel.Option> result = new ArrayList<>();\n\tif (checkPermission(serverUrl)) {\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\tList<Credentials> credentials = CredentialsProvider.lookupCredentials(Credentials.class, this, ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build());\n\t\tList<Credentials> matchingCredentials = includeMatchingAs(credentials, serverUrl);\n\t\tfor (Credentials credential : matchingCredentials) {\n\t\t\tresult.add(new ListBoxModel.Option(credential.getId(), credential.getId()));\n\t\t}\n\t}\n\treturn new ListBoxModel(result);\n}", "CodeBleu_score": 42.5382444260789}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (checkPermission(serverUrl, CredentialsProvider.USE_ITEM)) {\n\t\treturn CredentialsProvider.listCredentials(GiteaAuth.GiteaCredentials.class, Jenkins.getInstance(), ACL.SYSTEM, serverUrl);\n\t} else {\n\t\treturn new StandardListBoxModel();\n\t}\n}", "CodeBleu_score": 21.814606074395865}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\t// Convert to lowercase\n\t\tserverUrl = serverUrl.toLowerCase();\n\n\t\t// Remove default ports\n\t\tserverUrl = serverUrl.replaceAll(\"http://[^/]*:80/\", \"http://\");\n\t\tserverUrl = serverUrl.replaceAll(\"https://[^/]*:443/\", \"https://\");\n\n\t\t// Remove trailing slash\n\t\tif (serverUrl.endsWith(\"/\")) {\n\t\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t\t}\n\n\t\t// Ensure the URL is properly formatted\n\t\tserverUrl = serverUrl.replaceAll(\"([^:])//+\", \"$1/\");\n\t} catch (Exception e) {\n\t\t// Ignore any exceptions\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 19.506228065002347}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\t// Convert to lowercase\n\tserverUrl = serverUrl.toLowerCase();\n\n\t// Remove default ports\n\tif (serverUrl.startsWith(\"http://\") && serverUrl.endsWith(\":80/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 3);\n\t} else if (serverUrl.startsWith(\"https://\") && serverUrl.endsWith(\":443/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 3);\n\t}\n\n\t// Remove trailing slash\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tserverUrl = uri.getScheme() + \"://\" + uri.getHost() + (uri.getPort()!= -1? \":\" + uri.getPort() : \"\");\n\t} catch (URISyntaxException e) {\n\t\t// Ignore\n\t}\n\n\treturn serverUrl;\n}", "CodeBleu_score": 34.93105533098811}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tif (scheme == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString host = uri.getHost();\n\t\tif (host == null) {\n\t\t\treturn null;\n\t\t}\n\t\tint port = uri.getPort();\n\t\tif (port == -1) {\n\t\t\tport = 80;\n\t\t\tif (\"https\".equals(scheme)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\tString path = uri.getPath();\n\t\tif (path == null) {\n\t\t\tpath = \"/\";\n\t\t}\n\t\tif (path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\treturn new URI(scheme, null, host, port, path, null, null).toString();\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 35.26965456021539}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tistBoxModel model = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nif (StringUtils.isBlank(server.getDisplayName())) {\nmodel.add(server.getServerUrl());\n} else {\nmodel.add(server.getDisplayName(), server.getServerUrl());\n}\n}\nreturn model;\n}", "CodeBleu_score": 37.673135894880325}, {"code": "public ListBoxModel getServerItems(){\n\t// Create an empty ListBoxModel\n\tListBoxModel serverItems = new ListBoxModel();\n\n\t// Iterate through the available Gitea servers\n\tfor (GiteaServer server : getServers()) {\n\t\t// If the server's display name is blank, add only the server URL\n\t\tif (isBlank(server.getDisplayName())) {\n\t\t\tserverItems.add(server.getServerUrl());\n\t\t} else {\n\t\t\t// Otherwise, add the server's display name and URL\n\t\t\tserverItems.add(server.getDisplayName(), server.getServerUrl());\n\t\t}\n\t}\n\n\t// Return the populated ListBoxModel\n\treturn serverItems;\n}", "CodeBleu_score": 36.65368320123728}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel listBoxModel = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tif (StringUtils.isNotBlank(server.getDisplayName())) {\n\t\t\tlistBoxModel.add(new ListBoxOption(server.getServerUrl(), server.getDisplayName()));\n\t\t} else {\n\t\t\tlistBoxModel.add(new ListBoxOption(server.getServerUrl()));\n\t\t}\n\t}\n\treturn listBoxModel;\n}", "CodeBleu_score": 38.779572401239726}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null) {\n    servers = Collections.emptyList();\n}\n// Check for admin permissions\nif (!checkPermission()) {\n    return;\n}\n// Remove duplicates and empty URLs\nList<GiteaServer> uniqueServers = new ArrayList<>();\nfor (GiteaServer server : servers) {\n    if (server!= null &&!server.getUrl().isEmpty()) {\n        uniqueServers.add(server);\n    }\n}\n// Update servers\nthis.servers = uniqueServers;\n// Save configuration\nsave();\n}", "CodeBleu_score": 30.242443283404423}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null) {\n    throw new IllegalArgumentException(\"servers cannot be null\");\n}\n\n// Check for admin permissions\nif (!checkPermission()) {\n    throw new IllegalStateException(\"You do not have the necessary permissions to add or remove Gitea servers.\");\n}\n\n// Remove duplicates and empty URLs from the list\nList<GiteaServer> updatedServers = new ArrayList<>();\nfor (GiteaServer server : servers) {\n    if (!updatedServers.contains(server) &&!fixNull(server.getUrl()).isBlank()) {\n        updatedServers.add(server);\n    }\n}\n\n// Update the servers\nGiteaServers.get().servers = updatedServers;\n\n// Save the configuration\nsave();\n}", "CodeBleu_score": 30.489123151477983}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission();\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null &&!isBlank(server.getUrl())) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tif (newServers.size() > 0) {\n\t\tservers = newServers;\n\t\tlist = new ArrayList<>(newServers);\n\t}\n\tif (list.size() > 0) {\n\t\tfor (int i = 0; i < list.size() - 1; i++) {\n\t\t\tfor (int j = i + 1; j < list.size(); j++) {\n\t\t\t\tif (list.get(i).getUrl().equals(list.get(j).getUrl())) {\n\t\t\t\t\tlist.remove(j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCollections.sort(list, (o1, o2) -> o1.getUrl().compareTo(o2.getUrl()));\n\t}\n\tsave();\n}", "CodeBleu_score": 34.90827772310334}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\trverUrl = normalizeServerUrl(serverUrl);\nif (StringUtils.isBlank(serverUrl)) {\n    return false;\n}\n// remove the server if it exists\nboolean removed = false;\nif (servers!= null) {\n    for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (endpoint.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n}\nif (removed) {\n    save();\n}\nreturn removed;\n}", "CodeBleu_score": 46.983848152355726}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\trverUrl = normalizeServerUrl(serverUrl);\nif (serverUrl == null) {\nreturn false;\n}\nfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (serverUrl.equals(endpoint.getServerUrl())) {\niterator.remove();\nsave();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 38.23779212931762}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\trverUrl = normalizeServerUrl(serverUrl);\nif (serverUrl == null) {\nreturn false;\n}\nfor (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (serverUrl.equals(endpoint.getServerUrl())) {\niterator.remove();\nsave();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 36.099535992235275}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\nMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\nString type = asType(el.asType());\ndescriptorElements.add(new ConfigElement(el, attributes, type));\n}\n}", "CodeBleu_score": 38.03154488863182}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\n  Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n  TypeMirror type = ((TypeElement) el).asType();\n  String typeString = asType(type);\n  descriptorElements.add(new ConfigElement(typeString, attributes));\n}\n}", "CodeBleu_score": 43.91418798840951}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\n  TypeMirror typeMirror = el.asType();\n  String type = typeMirror.toString();\n  Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n  descriptorElements.add(new ConfigElement(type, attributes));\n}\n}", "CodeBleu_score": 40.81527562791762}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t//...\n}", "CodeBleu_score": 12.166142816305852}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tTypeElement matchedAnnotation = null;\nfor (TypeElement annotation : annotations) {\nString qualifiedName = annotation.getQualifiedName().toString();\nString annotationClassName = annotationClass.getCanonicalName();\nif (qualifiedName.equals(annotationClassName)) {\nmatchedAnnotation = annotation;\nbreak;\n} else if (qualifiedName.startsWith(annotationClassName.replace('.', '$'))) {\nmatchedAnnotation = annotation;\n}\n}\nreturn matchedAnnotation;\n}", "CodeBleu_score": 45.964412275465854}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\nTypeElement targetAnnotation = null;\nString targetAnnotationName = annotationClass.getName().replace('$', '.');\nfor (TypeElement annotation : annotations) {\nif (targetAnnotationName.equals(annotation.getQualifiedName().toString())) {\ntargetAnnotation = annotation;\nbreak;\n}\n}\nreturn targetAnnotation;\n}", "CodeBleu_score": 46.75663397895827}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"docstatus\": 1,\n                \"workflow_state\": [\"!=\", \"Cancelled\"],\n            }\n        )\n\n        if approver_id:\n            filters.update({\"approver\": approver_id})\n\n    else:\n        filters.update({\"docstatus\": [\"!=\", 2]})\n\n    return filters\n\n", "CodeBleu_score": 25.761530513674725}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n\n    if for_approval:\n        filters[\"status\"] = [\"!=\", \"Submitted\"]\n        filters[\"workflow_state\"] = [\"!=\", \"Cancelled\"]\n        if approver_id:\n            filters[\"approver\"] = approver_id\n        else:\n            filters[\"approver\"] = [\"!=\", \"\"]\n\n    return filters\n\n", "CodeBleu_score": 24.455675707860586}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"!=\", \"Draft\"],\n                \"workflow_state\": [\"!=\", \"Cancelled\"],\n                \"workflow_state\": [\"!=\", \"Rejected\"],\n                \"workflow_state\": [\"!=\", \"Resubmitted\"],\n                \"workflow_state\": [\"!=\", \"Approved\"],\n                \"workflow_state\": [\"!=\", \"Rejected\"],\n                \"workflow_state\": [\"!=\", \"Cancelled\"],\n            }\n        )\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    return filters\n\n", "CodeBleu_score": 24.36282927966003}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = datetime.datetime.now().date()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leave = leave_details[leave_type][\"allocated\"]\n        balance_leave = leave_details[leave_type][\"balance\"]\n        leave_balance_map[leave_type] = {\n            \"allocated\": allocated_leave,\n            \"balance\": balance_leave,\n        }\n    return leave_balance_map\n", "CodeBleu_score": 41.69223414539288}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": leave_details[leave_type][\"allocated_leave\"],\n            \"balance_leave\": leave_details[leave_type][\"allocated_leave\"] - leave_details[leave_type][\"taken_leave\"]\n        }\n    return leave_balance_map\n", "CodeBleu_score": 38.728193761245514}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    # Get the current date\n    current_date = datetime.now()\n    # Get the leave details for the employee\n    leave_details = get_leave_details(employee)\n    # Construct the leave balance map\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        # Get the allocated and balance leave details for the current date\n        allocated_leave = leave_details[leave_type][\"allocated\"][current_date]\n        balance_leave = leave_details[leave_type][\"balance\"][current_date]\n        # Add the leave type and its allocated and balance leave details to the leave balance map\n        leave_balance_map[leave_type] = {\n            \"allocated\": allocated_leave,\n            \"balance\": balance_leave,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 36.55227768316228}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = []\n    for holiday in holiday_list:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n        holidays.append(holiday)\n    return sorted(holidays, key=lambda holiday: holiday[\"date\"])\n", "CodeBleu_score": 23.04267607419936}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = query_holidays(employee)\n    holidays = [strip_html(holiday['description']) for holiday in holidays if holiday['type']!= 'weekly_off']\n    holidays.sort(key=lambda holiday: holiday['date'])\n    return holidays\n", "CodeBleu_score": 25.748716853531374}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list:\n        holidays = db.session.query(Holiday).filter(Holiday.holiday_list == holiday_list).filter(Holiday.holiday_type!= \"Weekly off\").order_by(Holiday.holiday_date).all()\n        holidays = [strip_html(holiday.holiday_description) for holiday in holidays]\n        return holidays\n    return []", "CodeBleu_score": 31.020708943963136}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n\n    # Get the settings for the Holiday Reminders in Advance feature\n    settings = frappe.get_doc(\"HR Settings\", \"HR Settings\")\n    frequency = settings.holiday_reminders_in_advance_frequency\n    send_reminders = settings.holiday_reminders_in_advance_send_reminders\n\n    if frequency == \"Weekly\" and send_reminders:\n        send_advance_holiday_reminders(frequency)\n\n", "CodeBleu_score": 28.452513420309554}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    try:\n        send_advance_holiday_reminders(\"Weekly\")\n    except Exception as e:\n        frappe.log_error(frappe._dict(message=str(e), title=\"Error Sending Weekly Holiday Reminders in Advance\"))\n\n", "CodeBleu_score": 19.728067888263322}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    frequency = frappe.db.get_value(\"HR Settings\", None, \"holiday_reminder_frequency\")\n    if frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 20.06036271865156}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.weightage / 100\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self.self_appraisal_score", "CodeBleu_score": 19.95130827439401}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    self.save()\n\n", "CodeBleu_score": 21.82425648966248}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * self_rating.weightage / 100\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    self.save()", "CodeBleu_score": 23.68662024065339}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    # Get the appraisal cycle document\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle_doc.final_score_formula:\n        # Gather necessary data\n        appraisal_cycle_data = appraisal_cycle_doc.as_dict()\n        appraisal_cycle_data[\"appraisal_cycle\"] = appraisal_cycle_doc.name\n        appraisal_cycle_data[\"employee\"] = self.employee\n        appraisal_cycle_data[\"appraisal_cycle_year\"] = self.appraisal_cycle_year\n        appraisal_cycle_data[\"appraisal_cycle_quarter\"] = self.appraisal_cycle_quarter\n        appraisal_cycle_data[\"appraisal_cycle_month\"] = self.appraisal_cycle_month\n        appraisal_cycle_data[\"appraisal_cycle_week\"] = self.appraisal_cycle_week\n        appraisal_cycle_data[\"appraisal_cycle_day\"] = self.appraisal_cycle_day\n        appraisal_cycle_data[\"appraisal_cycle_date\"] = self.appraisal_cycle_date\n        appraisal_cycle_data[\"appraisal_cycle_start_date\"] = self.appraisal_cycle_start_date\n        appraisal_cycle_data[\"appraisal_cycle_end_date\"] = self.appraisal_cycle_end_date\n        appraisal_cycle_data[\"appraisal_cycle_duration\"] = self.appraisal_cycle_duration\n        appraisal_cycle_data[\"appraisal_cycle_start_time\"] = self.appraisal_cycle_start_time\n        appraisal_cycle_data[\"appraisal_cycle_end_time\"] = self.appraisal_cycle_end_time\n        appraisal_cycle_data[\"appraisal_cycle_time_spent", "CodeBleu_score": 20.910945544350614}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_formula:\n        # Get the appraisal cycle document\n        appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        # Check if the final score should be calculated based on a formula\n        if appraisal_cycle_doc.calculate_final_score_formula:\n            # Gather necessary data\n            total_score = self.total_score\n            average_feedback_score = self.average_feedback_score\n            self_appraisal_score = self.self_appraisal_score\n            # Sanitize the formula\n            formula = sanitize_expression(appraisal_cycle_doc.calculate_final_score_formula)\n            # Evaluate the formula\n            final_score = frappe.safe_eval(formula, {\"total_score\": total_score, \"average_feedback_score\": average_feedback_score, \"self_appraisal_score\": self_appraisal_score})\n            # Set the final score with the appropriate precision\n            self.final_score = final_score\n            self.db_set(\"final_score\", final_score)\n        else:\n            # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n            final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n            # Set the final score with the appropriate precision\n            self.final_score = final_score\n            self.db_set(\"final_score\", final_score)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n        # Set the final score with the appropriate precision\n        self.final_score = final_score\n        self.db_set(\"final_score\", final_score)\n", "CodeBleu_score": 37.12730091844689}, {"code": "def calculate_final_score(self)\n\t\n\n    if not self.appraisal_cycle:\n        frappe.throw(_(\"Appraisal Cycle is not set for {0}\").format(self.name))\n\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.calculate_final_score_formula:\n        formula = appraisal_cycle_doc.calculate_final_score_formula\n        formula = sanitize_expression(formula)\n\n        if not formula:\n            frappe.throw(_(\"Final Score Formula is not set for {0}\").format(self.name))\n\n        # Get the appraisal cycle data\n        appraisal_cycle_data = appraisal_cycle_doc.as_dict()\n        appraisal_cycle_data.pop(\"name\")\n        appraisal_cycle_data.pop(\"modified\")\n        appraisal_cycle_data.pop(\"modified_by\")\n        appraisal_cycle_data.pop(\"creation\")\n        appraisal_cycle_data.pop(\"created_by\")\n        appraisal_cycle_data.pop(\"__islocal\")\n        appraisal_cycle_data.pop(\"__unsaved\")\n        appraisal_cycle_data.pop(\"docstatus\")\n        appraisal_cycle_data.pop(\"docstatus\")\n        appraisal_cycle_data.pop(\"appraisal_cycle_items\")\n\n        # Get the employee data\n        employee_doc = frappe.get_doc(\"Employee\", self.employee)\n        employee_data = employee_doc.as_dict()\n        employee_data.pop(\"name\")\n        employee_data.pop(\"modified\")\n        employee_data.pop(\"modified_by\")\n        employee_data.pop(\"creation\")\n        employee_data.pop(\"created_by\")\n        employee_data.pop(\"__islocal\")\n        employee_data.pop(\"__unsaved\")\n        employee_data.pop(\"docstatus\")\n        employee_data.pop(\"appraisal_cycle\")\n        employee_data.pop(\"appraisal_cycle_items\")\n\n        # Get the appraisal data\n        appraisal_data = self.as_dict()\n        appraisal_data", "CodeBleu_score": 32.13966632150701}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate() and self.status!= \"On Leave\":\n        frappe.throw(_(\"Attendance for {0} cannot be marked for a future date\").format(self.employee))\n    if self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(_(\"Attendance for {0} cannot be marked for a date before the employee's date of joining\").format(self.employee))\n    if self.status == \"On Leave\":\n        if not frappe.db.get_value(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"to_date\": self.attendance_date}, \"name\"):\n            frappe.throw(_(\"Attendance for {0} cannot be marked for a date when there is no leave application\").format(self.employee))\n", "CodeBleu_score": 34.67129198399837}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        if not self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates for employees on leave\"))\n    if self.attendance_date > self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked for dates after the employee's date of joining\"))\n\n", "CodeBleu_score": 20.349836517626972}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\" and not self.leave_application:\n        frappe.throw(_(\"Attendance cannot be marked for future dates unless the employee is on leave and there is no leave application\"))\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining\"))\n", "CodeBleu_score": 22.665211558214985}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t    if self.get_duplicate_attendance_record():\n        raise frappe.ValidationError(\n            f\"An attendance record for employee {self.employee} on {format_date(self.attendance_date)} already exists. Please check the attendance record with name {self.get_duplicate_attendance_record()}.\"\n        )\n\n", "CodeBleu_score": 20.77623347793716}, {"code": "def validate_duplicate_record(self)\n\t   if self.get_duplicate_attendance_record():\n        raise frappe.ValidationError(\n            f\"Duplicate attendance record for {self.employee} on {format_date(self.attendance_date)}: {get_link_to_form('Attendance', self.get_duplicate_attendance_record())}\"\n        )\n\n", "CodeBleu_score": 21.923399670335517}, {"code": "def validate_duplicate_record(self)\n\t    duplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        employee_name = frappe.get_value(\"Employee\", self.employee, \"employee_name\")\n        attendance_date = format_date(self.attendance_date)\n        message = f\"An attendance record for {employee_name} on {attendance_date} already exists. Please check the attendance record with name {duplicate_attendance_record}.\"\n        link_to_form = get_link_to_form(\"Attendance\", duplicate_attendance_record)\n        message += f\" {link_to_form}\"\n        frappe.throw(message, title=\"Duplicate Attendance Record\")\n\n", "CodeBleu_score": 35.39894244666926}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        frappe.throw(_(\"Cannot send a draft summary\"))\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Please select a group to send the summary to\"))\n\n    if not self.message:\n        frappe.throw(_(\"Please enter a message\"))\n\n    # get the email addresses of users in the specified group\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n\n    if not emails:\n        frappe.throw(_(\"No users found in the group\"))\n\n    # get the message details\n    message_details = self.get_message_details()\n\n    # send the email using a template\n    frappe.sendmail(\n        recipients=emails,\n        subject=_(\"Work Summary for {0}\").format(global_date_format(self.creation)),\n        message=message_details,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        send_email_after_save=True,\n    )\n\n    # update the status to \"Sent\"\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 42.77734574024613}, {"code": "def send_summary(self)\n\t\n    # get message details\n    message_details = self.get_message_details()\n\n    # get emails of users in group\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n\n    # send email\n    self.sendmail(\n        recipients=emails,\n        subject=message_details[\"title\"],\n        message=message_details[\"content\"],\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        reply_to=self.email_sent_to,\n        cc=self.email_cc,\n        bcc=self.email_bcc,\n    )\n\n    # update status\n    self.status = \"Sent\"\n    self.save(ignore_permissions=True)\n\n", "CodeBleu_score": 37.004071402702614}, {"code": "def send_summary(self)\n\t\n    dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.daily_work_summary_group)\n    if dws_group.send_summary_at_midnight:\n        if self.status == \"Sent\":\n            return\n        self.get_message_details()\n        emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n        if emails:\n            self.send_mail(emails, self.get_message_details())\n            self.status = \"Sent\"\n            self.save(ignore_permissions=True)\n\n", "CodeBleu_score": 39.8228105778709}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if not self.name:\n        return\n    existing_interview_record = frappe.db.sql(\"\"\"select name from `tabInterview` where applicant_name = %s and interview_round = %s and name!= %s\"\"\", (self.applicant_name, self.interview_round, self.name), as_dict=1)\n    if existing_interview_record:\n        frappe.throw(_(\"Job applicants are not allowed to appear twice for the same interview round. <a href='#Form/Interview/{0}'>{0}</a>\").format(existing_interview_record[0].name), title=_(\"Duplicate Interview Record\"))\n", "CodeBleu_score": 48.5166112033427}, {"code": "def validate_duplicate_interview(self)\n\t\n    if frappe.db.exists(\"Interview\", {\"job_applicant\": self.job_applicant, \"interview_round\": self.interview_round}):\n        frappe.throw(_(\"Job Applicant {0} has already been interviewed in the {1} round. <a href='#Form/Interview/{2}'>Click here</a> to view the interview record.\").format(self.job_applicant, self.interview_round, self.name), frappe.DuplicateEntryError)\n", "CodeBleu_score": 29.033253234364114}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview_records = frappe.get_all(\"Interview\", filters={\"job_applicant\": self.job_applicant, \"interview_round\": self.interview_round})\n    if len(interview_records) > 1:\n        frappe.throw(_(\"You are not allowed to appear twice for the same interview round. Please check the <a href='#Form/Interview/{0}'>existing interview record</a> for {1} {2} {3} {4}.\").format(interview_records[0].name, self.job_applicant.first_name, self.job_applicant.middle_name, self.job_applicant.last_name, self.job_applicant.suffix), title=_(\"Duplicate Interview\"))\n\n", "CodeBleu_score": 34.65499597625173}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0", "CodeBleu_score": 26.531969911301644}, {"code": "def calculate_average_rating(self)\n\t\n    rating_sum = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            rating_sum += assessment.rating\n            num_assessments += 1\n    self.average_rating = rating_sum / num_assessments if num_assessments else 0\n", "CodeBleu_score": 24.801865813493514}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total_rating = 0\n        for assessment in self.skill_assessments:\n            total_rating += assessment.rating\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n", "CodeBleu_score": 40.69242909410387}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    if doc.get(\"interviewers\"):\n        interview.append(\"interview_details\", {\"interviewer\": doc.get(\"interviewers\")})\n    return interview\n\n", "CodeBleu_score": 51.14705722221215}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.update(doc)\n    interview.append(\"interview_details\", {\"interviewer\": interview.interviewer, \"round\": interview.round})\n    interview.save()\n    return interview\n", "CodeBleu_score": 28.763007533072287}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.update(doc)\n    if \"interviewers\" in doc:\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interviewers\", interviewer)\n    return interview\n", "CodeBleu_score": 45.38683896444897}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND creation >= %s AND creation <= %s AND docstatus = 1\"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n    return job_offers\n", "CodeBleu_score": 34.40259314273232}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.get_all(\"Job Offer\", filters={\"designation\": self.designation, \"company\": self.company, \"docstatus\": 1, \"creation\": (\"between\", [from_date, to_date])})\n    job_offer_names = [job_offer.name for job_offer in job_offers]\n    return job_offer_names\n", "CodeBleu_score": 57.47632888372735}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND creation >= %s AND creation <= %s AND docstatus = 1\"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n    return job_offers\n", "CodeBleu_score": 34.40259314273232}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    if company:\n        doc = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company = %s and docstatus = 1\"\"\", company, as_dict=1)\n        accepted = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company = %s and docstatus = 1 and accepted = 1\"\"\", company, as_dict=1)\n    elif department:\n        doc = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where department = %s and docstatus = 1\"\"\", department, as_dict=1)\n        accepted = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where department = %s and docstatus = 1 and accepted = 1\"\"\", department, as_dict=1)\n    else:\n        doc = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus = 1\"\"\", as_dict=1)\n        accepted = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus = 1 and accepted = 1\"\"\", as_dict=1)\n    if doc[0]['count(*)']!= 0:\n        return accepted[0]['count(*)']/doc[0]['count(*)']*100\n    else:\n        return 0\n", "CodeBleu_score": 22.329483694700077}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    :param company: The company name to filter the data by.\n    :param department: The department to filter the data by.\n    :return: A tuple containing the acceptance rate and the field type.\n    \"\"\"\n    accepted_count = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"accepted\": 1, \"company\": company, \"department\": department})\n    total_count = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company, \"department\": department})\n    acceptance_rate = accepted_count / total_count * 100\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 10.125071819387626}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    if company is not None:\n        offer_count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company = %s and docstatus = 1\"\"\", company, as_dict=1)\n        accepted_count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company = %s and docstatus = 1 and accepted = 1\"\"\", company, as_dict=1)\n    elif department is not None:\n        offer_count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where department = %s and docstatus = 1\"\"\", department, as_dict=1)\n        accepted_count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where department = %s and docstatus = 1 and accepted = 1\"\"\", department, as_dict=1)\n    else:\n        offer_count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus = 1\"\"\", as_dict=1)\n        accepted_count = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus = 1 and accepted = 1\"\"\", as_dict=1)\n\n    if offer_count[0].count == 0:\n        return 0\n    else:\n        return round(accepted_count[0].count / offer_count[0].count * 100, 1)\n", "CodeBleu_score": 22.26992599300918}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.notFound);\n\t}\n\tfinal Result result = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tthis.save(companyStaff);\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 46.02960693632107}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElseThrow(() -> new EntityNotFoundException(Messages.staffNotFound));\n\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\tif (result.isSuccess()) {\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}\n\treturn result;\n}", "CodeBleu_score": 45.74462609190635}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> optionalCompanyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\tif (!optionalCompanyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.notFound);\n\t}\n\tfinal CompanyStaff companyStaff = optionalCompanyStaff.get();\n\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 52.732473045961626}]}
