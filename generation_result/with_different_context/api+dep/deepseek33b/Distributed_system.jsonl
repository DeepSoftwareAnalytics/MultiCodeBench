{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    wait_time = max(2, self.loop_wait - 2) * 1000\n    return wait_time, self._orig_kazoo_connect(*args)\n\n", "CodeBleu_score": 50.2273244970304}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    wait_time = max(2, self.loop_wait - 2) * 1000\n    return wait_time, self._orig_kazoo_connect(*args)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 50.2273244970304}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n\n    return (max(2, self.loop_wait - 2) * 1000, self._orig_kazoo_connect(*args))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 50.448820048867674}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    self.set_retry_timeout(config['retry_timeout'])\n    self.set_loop_wait(config['loop_wait'])\n    if self.set_ttl(config['ttl']):\n        if self._client.handler and isinstance(self._client.handler, PatroniSequentialThreadingHandler):\n            self._client.handler.set_connect_timeout(self._connect_timeout)\n        if self._loop_wait != config['loop_wait']:\n            self._client.close()\n\n", "CodeBleu_score": 45.76061352423848}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(config)\n    if self.set_retry_timeout(config['retry_timeout']):\n        self._client.handler.loop.stop()\n    self._client.handler.loop.wait = config['loop_wait']\n    if self.set_ttl(config['ttl']) and self._client.handler.wait != config['loop_wait']:\n        self._client.close()\n    if isinstance(self._client.handler, PatroniSequentialThreadingHandler):\n        self.set_connect_timeout(config['loop_wait'])\n\n", "CodeBleu_score": 50.69674826283862}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n\n    # Check if the config parameter is a Config object or a dictionary\n    if isinstance(config, dict):\n        config = Config(config)\n\n    # Update the retry timeout\n    self.set_retry_timeout(config['retry_timeout'])\n\n    # Update the loop wait time\n    loop_wait = config['loop_wait']\n    if self._loop_wait != loop_wait:\n        self._loop_wait = loop_wait\n        if isinstance(self._client._handler, PatroniSequentialThreadingHandler):\n            self.set_connect_timeout(loop_wait)\n\n    # Update the TTL\n    if self.set_ttl(config['ttl']):\n        # If the TTL update fails and the loop wait time has changed, close the client's socket connection\n        if self._loop_wait != loop_wait:\n            self.close()\n\n", "CodeBleu_score": 55.78697413357311}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    init_state = self.get_node(path + self._INIT_STATE)\n    config = self.get_node(path + self._CONFIG)\n    timeline_history = self.get_node(path + self._TIMELINE_HISTORY)\n    sync_state = self.get_node(path + self._SYNC_STATE)\n    members = self.load_members(path)\n    leader = self.get_node(path + self._LEADER)\n    status = self.get_status(path, leader)\n    failover = self.get_node(path + self._FAILOVER)\n    failsafe = self.get_node(path + self._FAILSAFE)\n\n    return Cluster(\n        init_state=InitState.from_node(init_state and init_state[0]),\n        config=ClusterConfig.from_node(config and config[0]),\n        timeline_history=TimelineHistory.from_node(timeline_history and timeline_history[0]),\n        sync_state=SyncState.from_node(sync_state and sync_state[0]),\n        members=members,\n        leader=Leader.from_node(leader and leader[0]),\n        status=status,\n        failover=Failover.from_node(failover and failover[0]),\n        failsafe=json.loads(failsafe and failsafe[0] or '{}'),\n    )\n\n", "CodeBleu_score": 23.683678067910062}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # Check if the cluster is initialized\n    initialized = self.get_node(path + self._INITIALIZED)\n    if not initialized:\n        raise NoNodeError\n    # Load the cluster configuration\n    config = self.get_node(path + self._CONFIG)\n    if not config:\n        raise NoNodeError\n    # Load the timeline history\n    history = self.get_node(path + self._TIMELINE_HISTORY)\n    if not history:\n        raise NoNodeError\n    # Load the synchronization state\n    sync_state = self.get_node(path + self._SYNC_STATE)\n    if not sync_state:\n        raise NoNodeError\n    # Load the members\n    members = self.load_members(path)\n    # Load the leader information\n    leader = self.get_node(path + self._LEADER)\n    if not leader:\n        raise NoNodeError\n    # Load the cluster status\n    status = self.get_status(path, leader)\n    # Load the failover state\n    failover = self.get_node(path + self._FAILOVER)\n    if not failover:\n        raise NoNodeError\n    # Load the failsafe configuration\n    failsafe = self.get_node(path + self._FAILSAFE)\n    if not failsafe:\n        raise NoNodeError\n    # Create and return the Cluster object\n    return Cluster(\n        initialized[0],\n        ClusterConfig.from_node(config[0]),\n        TimelineHistory.from_node(history[0]),\n        SyncState.from_node(sync_state[0]),\n        members,\n        Leader.from_node(leader[0]),\n        status,\n        Failover.from_node(failover[0]),\n        json.loads(failsafe[0]) if failsafe else None,\n    )\n\n", "CodeBleu_score": 30.305486875189892}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    init_state = self.get_node(path + self._INIT_STATE)\n    if not init_state:\n        raise ValueError('Initialization state not found')\n\n    config = self.get_node(path + self._CONFIG)\n    if not config:\n        raise ValueError('Configuration not found')\n\n    timeline_history = TimelineHistory.from_node(self.get_node(path + self._TIMELINE_HISTORY))\n    sync_state = SyncState.from_node(self.get_node(path + self._SYNC_STATE))\n    members = self.load_members(path)\n    leader = self.get_node(path + self._LEADER)\n    status = self.get_status(path, leader)\n    failover = Failover.from_node(self.get_node(path + self._FAILOVER))\n    failsafe = self.get_node(path + self._FAILSAFE)\n\n    return Cluster(\n        ClusterConfig.from_node(config[0]),\n        timeline_history,\n        sync_state,\n        members,\n        leader,\n        status,\n        failover,\n        FailSafeConfig.from_node(failsafe[0]) if failsafe else None,\n    )\n\n", "CodeBleu_score": 26.973683728605646}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n\n\n\n", "CodeBleu_score": 0.4807692307692308}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n\n\n\n", "CodeBleu_score": 0.4807692307692308}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n\n\n\n", "CodeBleu_score": 0.4807692307692308}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n\n    if leader.session != self._client.client_id:\n        logger.warning(\n            \"Client ID mismatch: %s != %s\", leader.session, self._client.client_id\n        )\n        try:\n            self._client.delete(self._leader_path)\n        except NoNodeError:\n            pass\n        except (ConnectionClosedError, RetryFailedError) as e:\n            logger.warning(\"Failed to delete leader: %s\", e)\n            return False\n        except Exception as e:\n            logger.warning(\"Failed to delete leader: %s\", e)\n            raise ZooKeeperError(e) from e\n\n    try:\n        self._client.create(\n            self._leader_path,\n            self._client.client_id.encode(\"utf-8\"),\n            ephemeral=True,\n            makepath=True,\n        )\n    except (NodeExistsError, NoNodeError):\n        pass\n    except (ConnectionClosedError, RetryFailedError) as e:\n        logger.warning(\"Failed to update leader: %s\", e)\n        return False\n    except Exception as e:\n        logger.warning(\"Failed to update leader: %s\", e)\n        raise ZooKeeperError(e) from e\n\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 60.97041775672882}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client.client_id != leader.session:\n        logger.warning(\n            \"Client ID mismatch: %s != %s\",\n            self._client.client_id,\n            leader.session,\n        )\n        try:\n            self._client.delete(leader.path)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError) as e:\n            logger.warning(\"Error deleting leader: %s\", e)\n        except Exception as e:\n            logger.warning(\"Error deleting leader: %s\", e)\n            raise ZooKeeperError(e)\n\n    try:\n        self._client.create(\n            leader.path,\n            self._client.client_id.encode(\"utf-8\"),\n            ephemeral=True,\n            makepath=True,\n        )\n    except (NodeExistsError, ConnectionClosedError, RetryFailedError) as e:\n        logger.warning(\"Error creating leader: %s\", e)\n        return False\n    except Exception as e:\n        logger.warning(\"Error creating leader: %s\", e)\n        raise ZooKeeperError(e)\n\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 50.90449604647716}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client_id != leader.session:\n        logger.warning(\n            f\"Client {self._client_id} is not the leader, but {leader.name} is. Ignoring.\"\n        )\n        try:\n            self._zk.delete(leader.path)\n        except NoNodeError:\n            pass\n        except (ConnectionClosedError, RetryFailedError):\n            pass\n        except Exception as e:\n            logger.error(f\"Error deleting leader {leader.name}: {e}\")\n            raise ZooKeeperError from e\n        return False\n    try:\n        self._zk.create(\n            self._leader_path,\n            self._client_id.encode(\"utf-8\"),\n            ephemeral=True,\n            makepath=True,\n        )\n    except NodeExistsError:\n        logger.info(f\"Leader already exists: {self._client_id}\")\n    except (ConnectionClosedError, RetryFailedError):\n        pass\n    except Exception as e:\n        logger.error(f\"Error creating leader {self._client_id}: {e}\")\n        raise ZooKeeperError from e\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 49.04884970952252}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if time.time() - self._last_poll < self.POLL_INTERVAL:\n        return False\n    self._last_poll = time.time()\n    data = self._query_exhibitors(self._exhibitors)\n    if not data:\n        logging.warning('No data received from exhibitors')\n        return False\n    if not isinstance(data, list):\n        logging.warning('Received data is not a list')\n        return False\n    if not data:\n        logging.warning('Received data is empty')\n        return False\n    if not all(isinstance(item, dict) for item in data):\n        logging.warning('Received data is not a list of dictionaries')\n        return False\n    if not all(item.get('hostname') for item in data):\n        logging.warning('Received data does not contain hostname')\n        return False\n    if not all(item.get('port') for item in data):\n        logging.warning('Received data does not contain port')\n        return False\n    if not all(item.get('jmx_port') for item in data):\n        logging.warning('Received data does not contain jmx_port')\n        return False\n    if not all(item.get('version') for item in data):\n        logging.warning('Received data does not contain version')\n        return False\n    if not all(item.get('timestamp') for item in data):\n        logging.warning('Received data does not contain timestamp')\n        return False\n    if not all(item.get('status') for item in data):\n        logging.warning('Received data does not contain status')\n        return False\n    if not all(item.get('description') for item in data):\n        logging.warning('Received data does not contain description')\n        return False\n    if not all(item.get('config') for item in data):\n        logging.warning('Received data does not contain config')\n        return False\n    if not all(item.get('config').get('server') for item in data):\n        logging.warning('Received data does not contain server')\n        return False\n    if not all(item.get('config').get('", "CodeBleu_score": 25.87430509402321}, {"code": "def poll(self) -> bool\n\t\n    if time.time() - self._last_poll < self.POLL_INTERVAL:\n        return False\n    self._last_poll = time.time()\n    data = self._query_exhibitors(self._exhibitors)\n    if not data:\n        return False\n    if isinstance(data, dict):\n        data = data.get('servers')\n    if not data:\n        return False\n    data = sorted(data, key=lambda x: (x.get('hostname'), x.get('port')))\n    zk_connection_string = ','.join([f'{x.get(\"hostname\")}:{x.get(\"port\")}' for x in data])\n    if zk_connection_string != self._zk_connection_string:\n        logger.info('Changing ZooKeeper connection string from %s to %s', self._zk_connection_string, zk_connection_string)\n        self._zk_connection_string = zk_connection_string\n        self._update_state()\n        return True\n    return False\n\n\n\n", "CodeBleu_score": 42.96415882324735}, {"code": "def poll(self) -> bool\n\t\n    if self._last_poll is None or time.time() - self._last_poll > self._poll_interval:\n        self._last_poll = time.time()\n        data = self._query_exhibitors(self._exhibitors)\n        if data is None:\n            return False\n        if 'server' in data and 'port' in data:\n            host = data['server']\n            port = data['port']\n            if host != self._host or port != self._port:\n                logger.info('ZooKeeper connection string changed from %s:%s to %s:%s', self._host, self._port, host, port)\n                self._host = host\n                self._port = port\n                return True\n        return False\n", "CodeBleu_score": 37.689544428023396}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n        if self._ensemble_provider.poll():\n            self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n        return super(Exhibitor, self)._load_cluster(path, loader)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 95.37052616514315}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider.poll():\n        self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 96.93873121769799}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n        if self._ensemble_provider.poll():\n            self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n        return super(Exhibitor, self)._load_cluster(path, loader)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 95.37052616514315}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n    String group = getGroup();\n    String dataId = getDataId();\n    logUnsubscribeStarted(dataId, group);\n    try {\n        zookeeperListener.unsubscribe(group, dataId);\n    } catch (Exception e) {\n        logUnsubscribeFailed(dataId, group, e);\n    }\n}", "CodeBleu_score": 79.52930280944508}, {"code": "public void destroy(){\n\t    if (zookeeperListener != null) {\n        String group = getGroup();\n        String dataId = getDataId();\n        logUnsubscribeStarted(group, dataId);\n        try {\n            zookeeperListener.unSubscribeData(group, dataId);\n        } catch (Throwable t) {\n            logUnsubscribeFailed(group, dataId, t);\n        }\n    }\n}", "CodeBleu_score": 65.89034970661291}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n    String group = getGroup();\n    String dataId = getDataId();\n    logUnsubscribeStarted(group, dataId);\n    try {\n        zookeeperListener.unsubscribe(group, dataId);\n    } catch (Exception e) {\n        logUnsubscribeFailed(group, dataId);\n    }\n}", "CodeBleu_score": 78.73207040018676}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zkServer = (ZookeeperServer) server;\n        return zkServer.getPayload();\n    } else {\n        return Collections.emptyMap();\n    }\n}", "CodeBleu_score": 60.06063340156083}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zkServer = (ZookeeperServer) server;\n        return zkServer.getPayload();\n    } else {\n        return Collections.emptyMap();\n    }\n}", "CodeBleu_score": 60.06063340156083}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n        return zookeeperServer.getPayload();\n    }\n    return Collections.emptyMap();\n}", "CodeBleu_score": 66.87845463592035}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t        String path = String.format(ZOOKEEPER_CONFIG_PATH_FORMAT, group, serviceId);\n        NodeCache nodeCache = new NodeCache(curatorFramework, path);\n        nodeCache.start();\n        NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n            @Override\n            public void nodeChanged() throws Exception {\n                String config = convertConfig(nodeCache.getCurrentData().getPath());\n                zookeeperSubscribeCallback.callback(config);\n            }\n        };\n        ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n        zookeeperListener.addListener();\n        return zookeeperListener;\n    }", "CodeBleu_score": 73.35641659259504}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t        String path = String.format(ZK_CONFIG_PATH, group, serviceId);\n        NodeCache nodeCache = new NodeCache(curatorFramework, path, false);\n        NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n            @Override\n            public void nodeChanged() throws Exception {\n                String config = convertConfig(nodeCache.getCurrentData().getPath());\n                zookeeperSubscribeCallback.callback(config);\n            }\n        };\n        nodeCache.getListenable().addListener(nodeCacheListener);\n        nodeCache.start();\n        ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n        listeners.add(zookeeperListener);\n        return zookeeperListener;\n    }", "CodeBleu_score": 68.76137047756089}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t        String path = getConfigPath(group, serviceId);\n        NodeCache nodeCache = new NodeCache(curatorFramework, path);\n        nodeCache.start();\n        NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n            @Override\n            public void nodeChanged() throws Exception {\n                String config = nodeCache.getCurrentData().getData() == null ? null : new String(nodeCache.getCurrentData().getData());\n                zookeeperSubscribeCallback.callback(config);\n            }\n        };\n        nodeCache.getListenable().addListener(nodeCacheListener);\n        ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n        zookeeperListeners.put(path, zookeeperListener);\n        return zookeeperListener;\n    }", "CodeBleu_score": 70.30418517483552}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ServerList<?> serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n    serverList.initWithNiwsConfig(config);\n    serverList.setLoadBalanceListenerExecutor(new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>()));\n    serverList.setServiceId(config.getClientName());\n    return serverList;\n}", "CodeBleu_score": 66.7657672263275}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery, config.getClientName());\n    serverList.initWithNiwsConfig(config);\n    serverList.setLoadBalanceListenerExecutor(this.loadBalanceListenerExecutor);\n    serverList.setServiceId(config.getClientName());\n    return serverList;\n}", "CodeBleu_score": 70.20259092836578}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ServerList<?> serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n    serverList.initWithNiwsConfig(config);\n    serverList.setLoadBalanceListenerExecutor(new ExecutorServiceThreadPool(config));\n    serverList.setServiceId(config.getClientName());\n    return serverList;\n}", "CodeBleu_score": 73.10990309080397}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = globalConfig ? ConfigConstants.GROUP : configGroup;\n    String dataId = globalConfig ? ConfigConstants.DATA_ID : configDataId;\n    logger.info(\"[Nacos-Config] Subscribe to config: group={}, dataId={}\", group, dataId);\n    try {\n        return zookeeperOperation.subscribe(group, dataId, new ConfigChangeListener() {\n            @Override\n            public void onChange(String group, String dataId, String newContent) {\n                callbackConfig(newContent);\n            }\n        });\n    } catch (Exception e) {\n        logger.error(\"[Nacos-Config] Subscribe to config failed: group={}, dataId={}\", group, dataId, e);\n        return null;\n    }\n}", "CodeBleu_score": 43.56867084441499}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = globalConfig ? this.globalGroup : this.group;\n    String dataId = globalConfig ? this.globalDataId : this.dataId;\n    log.info(\"Subscribing to configuration group: {}, dataId: {}\", group, dataId);\n    try {\n        return zookeeperOperation.subscribe(group, dataId, new ZookeeperListener() {\n            @Override\n            public void receiveConfigInfo(String configInfo) {\n                callbackConfig(configInfo);\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"Subscribe to configuration group: {}, dataId: {} failed\", group, dataId, e);\n    }\n    return null;\n}", "CodeBleu_score": 48.07386261300922}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = globalConfig ? \"DEFAULT_GROUP\" : getGroup();\n    String dataId = globalConfig ? \"nacos-spring-cloud-context\" : getDataId();\n    log.info(\"Subscribing to config: {}\", dataId);\n    try {\n        return zookeeperOperation.subscribe(group, dataId, new ZookeeperListener() {\n            @Override\n            public void receiveConfigInfo(String configInfo) {\n                log.info(\"Received config info: {}\", configInfo);\n                refresh(configInfo);\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"Failed to subscribe to config: {}\", dataId, e);\n        return null;\n    }\n}", "CodeBleu_score": 46.871572417286686}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t    String connectString = getProperty(ZOOKEEPER_CONNECT_STRING);\n    if (isEmpty(connectString)) {\n        throw new DiscoveryException(\"Zookeeper connect string is empty\");\n    }\n    int retryCount = Integer.parseInt(getProperty(ZOOKEEPER_RETRY_COUNT));\n    int sleepTime = Integer.parseInt(getProperty(ZOOKEEPER_SLEEP_TIME));\n    CuratorFramework curatorFramework = builder().connectString(connectString)\n            .retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount)).build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 44.60645687719625}, {"code": "public CuratorFramework curatorFramework(){\n\t    String connectString = getProperty(\"zookeeper.connect\");\n    if (connectString.isEmpty()) {\n        throw new DiscoveryException(\"zookeeper.connect cannot be empty\");\n    }\n    int retryCount = Integer.parseInt(getProperty(\"zookeeper.retryCount\", \"3\"));\n    int sleepTime = Integer.parseInt(getProperty(\"zookeeper.sleepTime\", \"1000\"));\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(connectString)\n            .retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount))\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 46.67402198378509}, {"code": "public CuratorFramework curatorFramework(){\n\t    String connectString = getProperty(\"zookeeper.connectString\");\n    if (connectString.isEmpty()) {\n        throw new DiscoveryException(\"Zookeeper connect string is empty\");\n    }\n    int retryCount = Integer.parseInt(getProperty(\"zookeeper.retryCount\"));\n    int sleepTime = Integer.parseInt(getProperty(\"zookeeper.sleepTime\"));\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(connectString)\n            .retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount))\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 45.559991212224645}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t", "CodeBleu_score": 1.394537427031336}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t", "CodeBleu_score": 1.394537427031336}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t\n    /**\n     * The gateway strategy route zookeeper processor.\n     */\n    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(ZookeeperDiscoveryProperties zookeeperDiscoveryProperties, ZookeeperClient zookeeperClient, ZookeeperProperties zookeeperProperties) {\n        return new GatewayStrategyRouteZookeeperProcessor(zookeeperDiscoveryProperties, zookeeperClient, zookeeperProperties);\n    }\n}", "CodeBleu_score": 44.16419913908194}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t        CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().namespace(getNamespace()).connectString(getZkHosts()).retryPolicy(retryPolicy()).sessionTimeoutMs(getSessionTimeout()).build();\n        curatorFramework.start();\n        return curatorFramework;\n    }", "CodeBleu_score": 41.4406354196524}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    // Create a CuratorFramework instance using the builder\n    CuratorFramework curatorFramework = builder.build();\n\n    // Set the retry policy for the CuratorFramework\n    curatorFramework.setRetryPolicy(retryPolicy);\n\n    // Start the CuratorFramework\n    curatorFramework.start();\n\n    // Return the initialized CuratorFramework instance\n    return curatorFramework;\n}", "CodeBleu_score": 23.33401452963387}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    CuratorFramework client = CuratorFrameworkFactory.builder().namespace(getNamespace()).connectString(connectString).retryPolicy(retryPolicy).sessionTimeoutMs(sessionTimeoutMs).build();\n    client.start();\n    return client;\n}", "CodeBleu_score": 33.94960651251532}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t    // Get the current thread\n    Thread currentThread = Thread.currentThread();\n    // Get the lock for the current thread\n    InterProcessMutex lock = locksMap.get(currentThread);\n    // If the lock does not exist, create a new one\n    if (lock == null) {\n        lock = new InterProcessMutex(getZkCleint(), path);\n        locksMap.put(currentThread, lock);\n    }\n    // Try to acquire the lock\n    try {\n        lock.acquire();\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 31.40221551435135}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    try {\n        if (!locksMap.containsKey(path)) {\n            InterProcessMutex mutex = new InterProcessMutex(client, path);\n            mutex.acquire();\n            locksMap.put(path, mutex);\n        } else {\n            InterProcessMutex mutex = locksMap.get(path);\n            mutex.acquire();\n        }\n    } catch (Exception e) {\n        throw new DistributedLockException(\"Error acquiring lock for path: \" + path, e);\n    }\n}", "CodeBleu_score": 29.41891076628101}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    try {\n        InterProcessMutex lock = locksMap.get(path);\n        if (lock == null) {\n            lock = new InterProcessMutex(getZkCleint(), path);\n            locksMap.put(path, lock);\n        }\n        lock.acquire();\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 26.272360063472576}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t        CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n        String nodePath = nodePath(dtpProperties);\n        if (ConfigType.PROPERTIES.equals(dtpProperties.getConfigType())) {\n            return genPropertiesTypeMap(nodePath, curatorFramework);\n        } else if (ConfigType.JSON.equals(dtpProperties.getConfigType())) {\n            String configKey = dtpProperties.getConfigKey();\n            String configPath = ZKPaths.makePath(nodePath, configKey);\n            String value = getVal(configPath, curatorFramework);\n            return ConfigHandler.parseConfig(value, dtpProperties.getConfigType());\n        }\n        return Collections.emptyMap();\n    }", "CodeBleu_score": 50.315959704759535}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t        final CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n        final String nodePath = nodePath(dtpProperties);\n        final ConfigType configType = dtpProperties.getConfigType();\n        Map<Object, Object> properties = newHashMap();\n        if (ConfigType.PROPERTIES == configType) {\n            properties = genPropertiesTypeMap(nodePath, curatorFramework);\n        } else if (ConfigType.JSON == configType) {\n            final String configKey = getConfigKey(dtpProperties);\n            final String path = ZKPaths.makePath(nodePath, configKey);\n            final String value = getVal(path, curatorFramework);\n            properties = ConfigHandler.parseConfig(value, ConfigType.JSON);\n        }\n        return properties;\n    }", "CodeBleu_score": 54.481904361793895}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t        final CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n        final String nodePath = nodePath(dtpProperties);\n        if (ConfigTypeEnum.PROPERTIES.getType().equals(dtpProperties.getConfigType())) {\n            return genPropertiesTypeMap(nodePath, curatorFramework);\n        }\n        String configKey = dtpProperties.getConfigKey();\n        String value = getVal(ZKPaths.makePath(nodePath, configKey), curatorFramework);\n        return ConfigHandler.parseConfig(value, dtpProperties.getConfigType());\n    }", "CodeBleu_score": 42.2515660040109}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = DtpProperties.bind(environment);\n        Map<Object, Object> properties = genPropertiesMap(dtpProperties);\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, properties);\n        }\n    }", "CodeBleu_score": 66.1597438464947}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = DtpProperties.bindConfigProperties(environment);\n        Map<Object, Object> properties = genPropertiesMap(dtpProperties);\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, properties);\n        }\n    }", "CodeBleu_score": 67.18226526896387}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = DtpProperties.bind(environment);\n        Map<Object, Object> properties = genPropertiesMap(dtpProperties);\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, properties);\n        }\n    }", "CodeBleu_score": 66.1597438464947}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    builder.Register(provider => {\n        var logger = provider.GetRequiredService<ILogger<ZooKeeperServiceRouteManager>>();\n        var serializer = provider.GetRequiredService<ISerializer<byte[]>>();\n        var factory = provider.GetRequiredService<IServiceRouteFactory>();\n        var byteSerializer = provider.GetRequiredService<ISerializer<string>>();\n        var clientProvider = provider.GetRequiredService<IZookeeperClientProvider>();\n        return new ZooKeeperServiceRouteManager(\n            logger,\n            serializer,\n            factory,\n            byteSerializer,\n            clientProvider,\n            configInfo);\n    }).As<IServiceRouteManager>().SingleInstance();\n    return this;\n}", "CodeBleu_score": 49.43833544380471}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    var config = GetConfigInfo(configInfo);\n    builder.Register(provider => {\n        var logger = provider.GetRequiredService<ILogger<ZooKeeperServiceRouteManager>>();\n        var byteSerializer = provider.GetRequiredService<ISerializer<byte[]>>();\n        var routeFactory = provider.GetRequiredService<IServiceRouteFactory>();\n        var stringSerializer = provider.GetRequiredService<ISerializer<string>>();\n        var zookeeperClientProvider = provider.GetRequiredService<IZookeeperClientProvider>();\n        return new ZooKeeperServiceRouteManager(config, logger, byteSerializer, routeFactory, stringSerializer, zookeeperClientProvider);\n    }).As<IServiceRouteManager>().SingleInstance();\n    return this;\n}", "CodeBleu_score": 47.464576549399716}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    builder.RegisterAdapter<IServiceRouteManager, ZooKeeperServiceRouteManager>();\n    builder.RegisterAdapter<ISerializer<byte[]>, ZooKeeperBytesSerializer>();\n    builder.RegisterAdapter<ISerializer<string>, ZooKeeperStringSerializer>();\n    builder.RegisterAdapter<IServiceRouteFactory, DefaultServiceRouteFactory>();\n    builder.RegisterAdapter<IZookeeperClientProvider, DefaultZookeeperClientProvider>();\n    builder.RegisterAdapter<ILogger<ZooKeeperServiceRouteManager>, Logger<ZooKeeperServiceRouteManager>>();\n    var config = GetConfigInfo(configInfo);\n    builder.RegisterInstance(config).As<ConfigInfo>();\n    return this;\n}", "CodeBleu_score": 37.95416649630852}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            var config = GetConfigInfo(configInfo);\n            builder.RegisterType<ZookeeperServiceCommandManager>().As<IServiceCommandManager>().WithParameter(TypedParameter.From(config)).SingleInstance();\n            return this;\n        }", "CodeBleu_score": 23.51214624936156}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t", "CodeBleu_score": 8.618059401316474}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            builder.RegisterType<ZookeeperServiceCommandManager>().As<IServiceCommandManager>().WithParameter(TypedParameter.From(configInfo)).SingleInstance();\n            return this;\n        }", "CodeBleu_score": 20.5647148103246}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    Check.NotNull(builder, nameof(builder));\n    Check.CheckCondition(!string.IsNullOrEmpty(path), nameof(path));\n\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n        path = Path.GetFileName(path);\n    }\n\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n\n    source.ResolveFileProvider();\n    builder.Add(source);\n    builder.Build();\n    return builder;\n}", "CodeBleu_score": 81.55901264102789}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"Invalid file path\", nameof(path));\n    }\n\n    return builder.AddZookeeperFile(s => {\n        s.FileProvider = provider;\n        s.Path = path;\n        s.Optional = optional;\n        s.ReloadOnChange = reloadOnChange;\n        s.ResolveFileProvider();\n    });\n}", "CodeBleu_score": 34.87822010364299}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(Resources.Error_InvalidFilePath, nameof(path));\n    }\n\n    path = Environment.ExpandEnvironmentVariables(path);\n    provider = provider ?? new PhysicalFileProvider(Path.GetDirectoryName(path));\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    source.ResolveFileProvider();\n    builder.Add(source);\n    builder.Build();\n    return builder;\n}", "CodeBleu_score": 61.812951251451366}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        route.Address = route.Address.Except(Address);\n    }\n    await SetRoutesAsync(routes);\n}", "CodeBleu_score": 81.59209605417736}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        route.Addresses = route.Addresses.Except(Address);\n    }\n    await SetRoutesAsync(routes);\n}", "CodeBleu_score": 75.68230983986868}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    await EnterRoutes();\n    _routes = _routes.Select(route => new ServiceRoute(route.Id, route.Addresses.Except(Address), route.ServiceName));\n    await SetRoutesAsync(_routes);\n}", "CodeBleu_score": 43.172860173686125}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var path = _options.ZooKeeper.RootNodePath + \"/\" + _options.ZooKeeper.RoutePath;\n    var addresses = _zookeeperClientProvider.GetZooKeepers().Select(i => i.Item1.Address).ToArray();\n    var oldRoutes = await _zookeeperClientProvider.GetZooKeepers().Select(i => i.Item2.getChildrenAsync(path)).SelectMany(i => i.Result.Children);\n    var newRoutes = routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var oldRouteIds = oldRoutes.Select(i => i.Split('-')[0]).ToArray();\n    var deletedRouteIds = oldRouteIds.Except(newRoutes).ToArray();\n    foreach (var zooKeeper in _zookeeperClientProvider.GetZooKeepers()) {\n        var deletedRoutes = _routes.Where(p => p.ServiceDescriptor.Id == deletedRouteId).Select(p => p.Address).ToArray();\n        if (deletedRoutes.Contains(hostAddr)) {\n            var deletedRoutePath = path + \"/\" + deletedRouteId;\n            await zooKeeper.Item2.deleteAsync(deletedRoutePath);\n        }\n    }\n}", "CodeBleu_score": 45.451223856127}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var path = _options.RoutePath;\n    var addresses = _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in addresses) {\n        var oldRoutes = await zooKeeper.Item1.getChildrenAsync(path);\n        var oldRouteIds = oldRoutes.Select(i => i.Split('-')[0]).ToArray();\n        var newRouteIds = routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n        var deletedRouteIds = oldRouteIds.Except(newRouteIds).ToArray();\n        foreach (var deletedRouteId in deletedRouteIds) {\n            var routePath = path + \"/\" + deletedRouteId;\n            var routeAddress = routes.Where(p => p.ServiceDescriptor.Id == deletedRouteId).Select(p => p.Address).FirstOrDefault();\n            if (routeAddress != null && routeAddress.Contains(hostAddr.ToString())) {\n                await zooKeeper.Item2.deleteAsync(routePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 57.578973184504974}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var path = GetRoutePath();\n    var addresses = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in addresses) {\n        var oldRoutes = await zooKeeper.Item1.getChildrenAsync(path);\n        var newRoutes = routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n        var oldRouteIds = oldRoutes.Select(i => i.Split('-')[0]).ToArray();\n        var deletedRouteIds = oldRouteIds.Except(newRoutes).ToArray();\n        foreach (var deletedRouteId in deletedRouteIds) {\n            var deletedRouteAddress = routes.Where(p => p.ServiceDescriptor.Id == deletedRouteId).Select(p => p.Address).FirstOrDefault();\n            if (deletedRouteAddress != null && deletedRouteAddress.Contains(hostAddr.Ip)) {\n                await zooKeeper.Item2.deleteAsync($\"{path}/{deletedRouteId}\");\n            }\n        }\n    }\n}", "CodeBleu_score": 54.980208525081544}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t            if (data == null) {\n                return null;\n            }\n\n            if (_logger.IsEnabled(LogLevel.Debug)) {\n                _logger.LogDebug($\"Getting route from {\nJsonSerializer.Serialize(data)}.\");\n            }\n\n            var descriptor = JsonSerializer.Deserialize<ServiceRouteDescriptor>(data);\n            return (await _serviceRouteFactory.CreateServiceRoutesAsync(new[] { descriptor })).First();\n        }", "CodeBleu_score": 48.786906497066326}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t            if (data == null) {\n                return null;\n            }\n\n            _logger.LogDebug($\"{nameof(GetRoute)}: {Encoding.UTF8.GetString(data)}\");\n\n            var descriptor = JsonSerializer.Deserialize<ServiceRouteDescriptor>(data);\n            return (await _serviceRouteFactory.CreateServiceRoutesAsync(new[] { descriptor })).First();\n        }", "CodeBleu_score": 50.263805980739605}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t            if (data == null)\n            {\n                return null;\n            }\n\n            _logger.LogDebug($\"{nameof(GetRoute)}: {Encoding.UTF8.GetString(data)}\");\n\n            var descriptor = _serializer.Deserialize<ServiceRouteDescriptor>(data);\n            return (await _serviceRouteFactory.CreateServiceRoutesAsync(new[] { descriptor })).First();\n        }", "CodeBleu_score": 50.14658560776573}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u51c6\u5907\u8f6c\u6362\u670d\u52a1\u8def\u7531\uff0c\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(newData)}\u3002\");\n\n    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n\n    lock (_routes) {\n        _routes = _routes.Where(i => i.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id).Concat(new[] { newRoute }).ToArray();\n    }\n\n    OnChanged(newRoute, _routes.FirstOrDefault(i => i.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id));\n}", "CodeBleu_score": 69.52718504616001}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u51c6\u5907\u8f6c\u6362\u670d\u52a1\u8def\u7531\uff0c\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(newData)}\u3002\");\n\n    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    if (newRoute == null)\n        return;\n\n    lock (_routes) {\n        var oldRoute = _routes.FirstOrDefault(i => i.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id);\n        _routes = _routes.Where(i => i.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id)\n            .Concat(new[] { newRoute }).ToArray();\n    }\n\n    OnChanged(newRoute, oldRoute);\n}", "CodeBleu_score": 75.29338965271627}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug($\"\u51c6\u5907\u8f6c\u6362\u670d\u52a1\u8def\u7531\uff0c\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(newData)}\u3002\");\n    }\n\n    if (newData == null) {\n        return;\n    }\n\n    var newRoute = await GetRoute(newData);\n    if (oldData == null) {\n        lock (_routes) {\n            _routes = _routes.Concat(new[] { newRoute }).ToArray();\n        }\n        OnChanged(newRoute, null);\n        return;\n    }\n\n    var oldRoute = await GetRoute(oldData);\n    if (DataEquals(oldRoute.ServiceDescriptor.GetData(), newRoute.ServiceDescriptor.GetData())) {\n        return;\n    }\n\n    lock (_routes) {\n        _routes = _routes.Where(i => i.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id).Concat(new[] { newRoute }).ToArray();\n    }\n\n    OnChanged(newRoute, oldRoute);\n}", "CodeBleu_score": 65.41143068864645}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var childrens = await _client.GetChildrenAsync(_configInfo.SubscriberPath);\n    var serviceSubscribers = await GetSubscribers(childrens);\n    foreach (var subscriber in subscribers) {\n        var serviceSubscriber = serviceSubscribers.Where(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id).FirstOrDefault();\n        if (serviceSubscriber != null) {\n            serviceSubscriber.Address = serviceSubscriber.Address.Concat(subscriber.Address.Except(serviceSubscriber.Address)).Distinct().ToArray();\n        } else {\n            serviceSubscriber = subscriber;\n            serviceSubscribers.Add(serviceSubscriber);\n        }\n    }\n    await base.SetSubscribersAsync(serviceSubscribers);\n}", "CodeBleu_score": 69.18262761465888}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var oldSubscribers = await GetSubscribers(subscribers.Select(p => p.ServiceDescriptor.Id));\n    foreach (var subscriber in subscribers) {\n        var oldSubscriber = oldSubscribers.Where(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id).FirstOrDefault();\n        if (oldSubscriber != null) {\n            subscriber.Address = subscriber.Address.Concat(oldSubscriber.Address.Except(subscriber.Address)).Distinct().ToArray();\n        }\n    }\n    await base.SetSubscribersAsync(subscribers);\n}", "CodeBleu_score": 76.22991153231597}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var oldSubscribers = await GetSubscribers(subscribers.Select(p => p.ServiceDescriptor.Id));\n    foreach (var subscriber in subscribers) {\n        var oldSubscriber = oldSubscribers.Where(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id).FirstOrDefault();\n        if (oldSubscriber != null) {\n            subscriber.Address = subscriber.Address.Concat(oldSubscriber.Address.Except(subscriber.Address)).ToArray();\n        }\n    }\n    await base.SetSubscribersAsync(subscribers);\n}", "CodeBleu_score": 76.15559287941366}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var rootPath = _options.RootPath + \"/subscribers\";\n    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug(\"Getting subscribers for {childrens}\", childrens);\n    }\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var child in childrens) {\n        var fullPath = rootPath + \"/\" + child;\n        var subscriber = await _client.GetAsync<ServiceSubscriber>(fullPath);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 45.035348234485646}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var rootPath = Path.Combine(BasePath, \"subscribers\");\n    _logger.LogDebug(\"Getting subscribers for {childrens}\", childrens);\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var children in childrens) {\n        var fullPath = Path.Combine(rootPath, children);\n        var subscriber = await GetSubscriber(fullPath);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 44.61747716707059}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var rootPath = _options.RootPath;\n    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug(\"Getting subscribers for {0}\", rootPath);\n    }\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var child in childrens) {\n        var fullPath = rootPath + \"/\" + child;\n        var subscriber = await GetSubscriber(fullPath);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 44.406612174102875}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var (zooKeeperEvent, zooKeeper) = await GetZooKeeper();\n    zooKeeperEvent.WaitOne();\n\n    var rootPath = _configInfo.SubscriberPath;\n    var exists = await zooKeeper.existsAsync(rootPath);\n    if (exists != null) {\n        var result = await zooKeeper.getChildrenAsync(rootPath);\n        var childrens = result.Children.ToArray();\n        _subscribers = await GetSubscribers(childrens);\n    }\n    else {\n        if (_logger.IsEnabled(LogLevel.Warning))\n            _logger.LogWarning($\"\u8ba2\u9605\u8005\u8def\u5f84\uff1a{rootPath}\u4e0d\u5b58\u5728\u3002\");\n        _subscribers = new ServiceSubscriber[0];\n    }\n}", "CodeBleu_score": 63.68354743766926}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var (waitHandle, zooKeeper) = await GetZooKeeper();\n    if (!await zooKeeper.existsAsync(_configInfo.SubscriberPath)) {\n        if (_logger.IsEnabled(LogLevel.Warning))\n            _logger.LogWarning($\"\u8ba2\u9605\u8005\u8282\u70b9\uff1a{_configInfo.SubscriberPath}\u4e0d\u5b58\u5728\uff0c\u8bf7\u68c0\u67e5\u914d\u7f6e\u3002\");\n        _subscribers = Array.Empty<ServiceSubscriber>();\n        return;\n    }\n\n    var result = await zooKeeper.getChildrenAsync(_configInfo.SubscriberPath);\n    if (result.Children == null || result.Children.Count == 0) {\n        if (_logger.IsEnabled(LogLevel.Warning))\n            _logger.LogWarning($\"\u8ba2\u9605\u8005\u8282\u70b9\uff1a{_configInfo.SubscriberPath}\u4e0b\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u8bf7\u68c0\u67e5\u914d\u7f6e\u3002\");\n        _subscribers = Array.Empty<ServiceSubscriber>();\n        return;\n    }\n\n    _subscribers = (await GetSubscribers(result.Children)).ToArray();\n}", "CodeBleu_score": 53.22642548196639}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var zooKeeper = await GetZooKeeper();\n    var (eventWaitHandle, client) = zooKeeper;\n    eventWaitHandle.WaitOne();\n\n    var rootPath = _configInfo.SubscriberPath;\n    var exist = await client.existsAsync(rootPath);\n    if (exist == null) {\n        _logger.LogWarning($\"\u8ba2\u9605\u8005\u8282\u70b9\uff1a{rootPath}\u4e0d\u5b58\u5728\u3002\");\n        _subscribers = Array.Empty<ServiceSubscriber>();\n        return;\n    }\n\n    var children = await client.getChildrenAsync(rootPath);\n    _subscribers = await GetSubscribers(children.Children);\n}", "CodeBleu_score": 49.355378914271895}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u670d\u52a1\u547d\u4ee4\u914d\u7f6e\u53d1\u751f\u53d8\u66f4\uff0c\u65e7\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(oldData)}\uff0c\u65b0\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(newData)}\u3002\");\n\n    var oldCommand = GetServiceCommand(oldData);\n    var newCommand = GetServiceCommand(newData);\n\n    if (oldCommand == null && newCommand != null) {\n        // If the old command is null and the new command is not null, add the new command to the list of service commands.\n        _serviceCommands = new[] { newCommand };\n    } else if (oldCommand != null && newCommand == null) {\n        // If the old command is not null and the new command is null, remove the old command from the list of service commands.\n        _serviceCommands = new ServiceCommandDescriptor[0];\n    } else if (oldCommand != null && newCommand != null) {\n        // If both the old and new commands are not null, update the list of service commands by replacing the old command with the new one for the same service ID.\n        _serviceCommands = _serviceCommands.Where(i => i.ServiceId != newCommand.ServiceId)\n            .Concat(new[] { newCommand }).ToArray();\n    }\n\n    // Trigger the OnChanged event with the new and old commands.\n    OnChanged?.Invoke(this, new ServiceCommandChangeEventArgs(oldCommand, newCommand));\n}", "CodeBleu_score": 63.83966307841493}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (oldData == null) {\n        oldData = new byte[0];\n    }\n    if (newData == null) {\n        newData = new byte[0];\n    }\n    if (!DataEquals(oldData, newData)) {\n        ServiceCommandDescriptor newCommand = GetServiceCommand(newData);\n        ServiceCommandDescriptor oldCommand = GetServiceCommand(oldData);\n        if (newCommand != null) {\n            if (oldCommand != null) {\n                if (newCommand.ServiceId == oldCommand.ServiceId) {\n                    ServiceCommands = ServiceCommands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n                }\n                else {\n                    ServiceCommands = ServiceCommands.Concat(new[] { newCommand }).ToArray();\n                }\n            }\n            else {\n                ServiceCommands = ServiceCommands.Concat(new[] { newCommand }).ToArray();\n            }\n        }\n        else {\n            if (oldCommand != null) {\n                ServiceCommands = ServiceCommands.Where(i => i.ServiceId != oldCommand.ServiceId).ToArray();\n            }\n        }\n        OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(newCommand, oldCommand));\n    }\n}", "CodeBleu_score": 53.72130957640058}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u670d\u52a1\u547d\u4ee4\u914d\u7f6e\u53d1\u751f\u53d8\u5316\uff0c\u539f\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(oldData)}\uff0c\u65b0\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(newData)}\u3002\");\n\n    var oldCommand = GetServiceCommand(oldData);\n    var newCommand = GetServiceCommand(newData);\n\n    if (oldCommand != null && newCommand != null && oldCommand.ServiceId != newCommand.ServiceId)\n        return;\n\n    if (oldCommand != null && newCommand != null && DataEquals(oldCommand.Data, newCommand.Data))\n        return;\n\n    if (oldCommand == null && newCommand != null) {\n        _serviceCommands = _serviceCommands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n    }\n    else if (oldCommand != null && newCommand == null) {\n        _serviceCommands = _serviceCommands.Where(i => i.ServiceId != oldCommand.ServiceId).ToArray();\n    }\n    else if (oldCommand != null && newCommand != null) {\n        _serviceCommands = _serviceCommands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n    }\n\n    OnChanged?.Invoke(newCommand, oldCommand);\n}", "CodeBleu_score": 57.13974404514447}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        try {\n            byte[] newData = await zooKeeper.Item2.getDataAsync(watchedEvent.getPath());\n            _action(GetCurrentData(), newData);\n            SetCurrentData(newData);\n        }\n        catch (KeeperException.NoNodeException) {\n            // ignore\n        }\n        catch (KeeperException.SessionExpiredException) {\n            // ignore\n        }\n        catch (KeeperException e) {\n            throw new KeeperException.OperationTimeoutException(e);\n        }\n    }\n}", "CodeBleu_score": 50.50927131533483}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    var currentData = await _zooKeeperCall(x => x.getDataAsync(watchedEvent.get_Path(), false));\n    _action(currentData, watchedEvent.get_CurrentData());\n    _zooKeeperCall(x => x.existsAsync(watchedEvent.get_Path(), new Watcher(_action, _zooKeeperCall)));\n}", "CodeBleu_score": 18.788487633738598}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    var currentData = await zooKeeper.Item2.getDataAsync(watchedEvent.get_Path(), false);\n    _action(currentData, watchedEvent.get_Data());\n    await zooKeeper.Item2.setDataAsync(watchedEvent.get_Path(), watchedEvent.get_Data(), -1);\n}", "CodeBleu_score": 42.69918976469352}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.Register(provider =>\n        new DefaultZookeeperClientProvider(\n            GetConfigInfo(configInfo),\n            provider.Resolve<IHealthCheckService>(),\n            provider.Resolve<IZookeeperAddressSelector>(),\n            provider.Resolve<ILogger<DefaultZookeeperClientProvider>>())).As<IZookeeperClientProvider>().SingleInstance;\n    return builder;\n}", "CodeBleu_score": 68.19621835597654}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.Register(provider =>\n           new DefaultZookeeperClientProvider(\n               GetConfigInfo(configInfo),\n            provider.Resolve<IHealthCheckService>(),\n              provider.Resolve<IZookeeperAddressSelector>(),\n              provider.Resolve<ILogger<DefaultZookeeperClientProvider>>())).As<IZookeeperClientProvider>().SingleInstance;\n    return builder;\n}", "CodeBleu_score": 67.64946907699428}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.Register(provider =>\n        new DefaultZookeeperClientProvider(\n            GetConfigInfo(configInfo),\n            provider.Resolve<IHealthCheckService>(),\n            provider.Resolve<IZookeeperAddressSelector>(),\n            provider.Resolve<ILogger<DefaultZookeeperClientProvider>>())).As<IZookeeperClientProvider>().SingleInstance();\n    return builder;\n}", "CodeBleu_score": 91.7811603739314}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t    var zooKeepers = _zookeeperProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var nodePath = _zookeeperPathProvider.GetServiceRoutePath(zooKeeper);\n        await _zookeeperProvider.EnsureNodeExistsAsync(zooKeeper, nodePath);\n        foreach (var route in routes) {\n            var routePath = _zookeeperPathProvider.GetServiceRoutePath(zooKeeper, route.Id);\n            var routeData = _serializer.Serialize(route);\n            if (await _zookeeperProvider.ExistsNodeAsync(zooKeeper, routePath)) {\n                _logger.LogInformation($\"Update route data: {routePath}\");\n                await _zookeeperProvider.SetDataAsync(zooKeeper, routePath, routeData);\n            } else {\n                _logger.LogInformation($\"Create route node: {routePath}\");\n                await _zookeeperProvider.CreateNodeAsync(zooKeeper, routePath, routeData, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n            }\n        }\n        _logger.LogInformation($\"Set routes: {nodePath}\");\n    }\n}", "CodeBleu_score": 43.41073770651911}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t  var zooKeeper = await _zookeeperProvider.GetZooKeepers();\n  foreach (var zooKeeperClient in zooKeeper) {\n    var nodePath = _config.GetMqttRoutePath();\n    if (!await zooKeeperClient.ExistsAsync(nodePath)) {\n      await zooKeeperClient.CreateAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n    }\n    foreach (var route in routes) {\n      var routePath = _config.GetMqttRoutePath(route.ServiceId);\n      var data = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(route));\n      if (await zooKeeperClient.ExistsAsync(routePath) == null) {\n        await zooKeeperClient.CreateAsync(routePath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n        _logger.LogInformation($\"Create route node:{routePath},{Encoding.UTF8.GetString(data)}\");\n      } else {\n        await zooKeeperClient.SetDataAsync(routePath, data, -1);\n        _logger.LogInformation($\"Update route node:{routePath},{Encoding.UTF8.GetString(data)}\");\n      }\n    }\n    _logger.LogInformation($\"Routes added.\");\n  }\n}", "CodeBleu_score": 44.797783080489104}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t  var zooKeepers = _zookeeperProvider.GetZooKeepers();\n  foreach (var zooKeeper in zooKeepers) {\n    var nodePath = GetServiceRoutePath(zooKeeper);\n    if (await zooKeeper.ExistsAsync(nodePath) == null) {\n      await zooKeeper.CreateAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n    }\n    foreach (var route in routes) {\n      var routePath = GetServiceRoutePath(zooKeeper, route.ServiceName);\n      var data = JsonConvert.SerializeObject(route).GetBytes();\n      if (await zooKeeper.ExistsAsync(routePath) == null) {\n        await zooKeeper.CreateAsync(routePath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n        _logger.LogInformation($\"Node created: {routePath}\");\n      } else {\n        await zooKeeper.SetDataAsync(routePath, data, -1);\n        _logger.LogInformation($\"Data updated: {routePath}\");\n      }\n    }\n    _logger.LogInformation($\"Routes added: {string.Join(\", \", routes.Select(r => r.ServiceName))}\");\n  }\n}", "CodeBleu_score": 44.87452924881687}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = _zookeeperClientProvider.GetZooKeepers().Select(i => i.Item2.getDataAsync(i.Item1.GetRoutePath())).ToArray();\n    var oldRouteTopics = routePath.Select(i => i.Result.Result.GetString()).ToArray();\n    var newRouteTopics = routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n    var deletedRouteTopics = oldRouteTopics.Except(newRouteTopics).ToArray();\n    foreach (var zooKeeper in _zookeeperClientProvider.GetZooKeepers()) {\n        var deletedRoutes = _routes.Where(p => p.MqttDescriptor.Topic == deletedRouteTopic).Select(p => p.MqttEndpoint).ToArray();\n        foreach (var deletedRoute in deletedRoutes) {\n            if (deletedRoute.Addresses.Contains(hostAddr)) {\n                await zooKeeper.Item2.deleteAsync(zooKeeper.Item1.GetRoutePath() + \"/\" + deletedRouteTopic);\n            }\n        }\n    }\n}", "CodeBleu_score": 52.15135422480005}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = _zookeeperClientProvider.GetMqttServiceRoutePath();\n    var zooKeepers = _zookeeperClientProvider.GetZooKeepers();\n\n    foreach (var zooKeeper in zooKeepers) {\n        var oldRouteTopics = await zooKeeper.Item1.getChildrenAsync(routePath);\n        var newRouteTopics = routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n\n        var addresses = await zooKeeper.Item1.getChildrenAsync(routePath + \"/\" + deletedRouteTopic);\n        if (addresses.Contains(hostAddr.ToString())) {\n            var deletePath = routePath + \"/\" + deletedRouteTopic + \"/\" + hostAddr.ToString();\n            await zooKeeper.Item2.deleteAsync(deletePath);\n        }\n    }\n}", "CodeBleu_score": 40.91060813160053}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = ZookeeperPathHelper.GetMqttServiceRoutesPath(hostAddr.Host, hostAddr.Port);\n    var zooKeepers = _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var oldRouteTopics = await zooKeeper.Item1.getChildrenAsync(routePath);\n        var newRouteTopics = routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n        var deletedRouteTopics = oldRouteTopics.Except(newRouteTopics).ToArray();\n        foreach (var deletedRouteTopic in deletedRouteTopics) {\n            var deletedRouteAddresses = _routes.Where(p => p.MqttDescriptor.Topic == deletedRouteTopic).Select(p => p.MqttEndpoint).ToArray();\n            if (deletedRouteAddresses.Contains(hostAddr)) {\n                var routeNodePath = ZookeeperPathHelper.GetMqttServiceRoutePath(hostAddr.Host, hostAddr.Port, deletedRouteTopic);\n                await zooKeeper.Item2.deleteAsync(routeNodePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 60.14437034511079}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    _logger.LogInformation(\"SetCachesAsync\");\n\n    string cachePath = _configuration.GetCachePath();\n\n    IEnumerable<ZooKeeper> zooKeepers = _zookeeperProvider.GetZooKeepers();\n\n    foreach (ZooKeeper zooKeeper in zooKeepers) {\n        await EnsureCachePathExistsAsync(zooKeeper, cachePath);\n\n        foreach (ServiceCacheDescriptor cacheDescriptor in cacheDescriptors) {\n            string nodePath = GetNodePath(cachePath, cacheDescriptor);\n            string nodeData = JsonSerializer.Serialize(cacheDescriptor);\n\n            if (await zooKeeper.ExistsAsync(nodePath) == null) {\n                await zooKeeper.CreateAsync(nodePath, nodeData, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            } else {\n                byte[] existingData = await zooKeeper.GetDataAsync(nodePath);\n                string existingDataString = Encoding.UTF8.GetString(existingData);\n\n                if (nodeData != existingDataString) {\n                    await zooKeeper.SetDataAsync(nodePath, nodeData);\n                }\n            }\n        }\n    }\n\n    _logger.LogInformation(\"Successfully added service caches\");\n}", "CodeBleu_score": 40.96261389614311}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    _logger.LogInformation(\"Setting service caches\");\n\n    string cachePath = _config.CachePath;\n\n    var zooKeepers = _provider.GetZooKeepers();\n\n    foreach (var zooKeeper in zooKeepers) {\n        await EnsurePathAsync(zooKeeper, cachePath);\n\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var data = Serialize(cacheDescriptor);\n            string nodePath = Path.Combine(cachePath, cacheDescriptor.Name);\n            if (!await NodeExistsAsync(zooKeeper, nodePath)) {\n                await CreateNodeAsync(zooKeeper, nodePath, data);\n            } else {\n                var currentData = await GetDataAsync(zooKeeper, nodePath);\n                if (!DataEquals(data, currentData)) {\n                    await SetDataAsync(zooKeeper, nodePath, data);\n                }\n            }\n        }\n    }\n\n    _logger.LogInformation(\"Successfully added service caches\");\n}", "CodeBleu_score": 37.06262532525185}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    _logger.LogInformation(\"\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u63cf\u8ff0\u7b26\");\n    var cachePath = _config.GetCachePath();\n    var zooKeepers = await _zookeeperProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        await zooKeeper.EnsurePathAsync(cachePath);\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var data = JsonSerializer.SerializeToUtf8Bytes(cacheDescriptor);\n            var nodePath = _config.GetCacheNodePath(cacheDescriptor.ServiceName);\n            if (!await zooKeeper.ExistsAsync(nodePath)) {\n                await zooKeeper.CreateAsync(nodePath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n            } else {\n                await zooKeeper.SetDataAsync(nodePath, data, -1);\n            }\n        }\n    }\n    _logger.LogInformation(\"\u6210\u529f\u6dfb\u52a0\u670d\u52a1\u7f13\u5b58\");\n}", "CodeBleu_score": 38.806303081591345}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    zooKeeper.Item1.WaitOne();\n    if (await zooKeeper.Item2.existsAsync(path) == null) {\n        _logger.LogInformation(\"Creating {path}\", path);\n        var subPaths = path.Split(\"/\", StringSplitOptions.RemoveEmptyEntries);\n        var currentPath = \"\";\n        foreach (var subPath in subPaths) {\n            currentPath += \"/\" + subPath;\n            if (await zooKeeper.Item2.existsAsync(currentPath) == null) {\n                await zooKeeper.Item2.createAsync(currentPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        }\n    }\n}", "CodeBleu_score": 62.66805812682098}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    zooKeeper.Item1.WaitOne();\n    if (await zooKeeper.Item2.existsAsync(path) == null) {\n        _logger.LogInformation($\"Creating {path}\");\n        string[] subdirectories = path.Split('/');\n        string currentPath = \"\";\n        foreach (string subdirectory in subdirectories) {\n            if (!string.IsNullOrEmpty(subdirectory)) {\n                currentPath += \"/\" + subdirectory;\n                if (await zooKeeper.Item2.existsAsync(currentPath) == null) {\n                    await zooKeeper.Item2.createAsync(currentPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 57.380110133996276}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var nodePath = path.Replace('/', '\\\\');\n    zooKeeper.Item1.WaitOne();\n    if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n        _logger.LogInformation($\"Creating node {nodePath}\");\n        var pathParts = nodePath.Split('\\\\');\n        var currentPath = \"\";\n        foreach (var pathPart in pathParts) {\n            currentPath += $\"{pathPart}\\\\\";\n            if (await zooKeeper.Item2.existsAsync(currentPath) == null) {\n                _logger.LogInformation($\"Creating node {currentPath}\");\n                await zooKeeper.Item2.createAsync(currentPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        }\n    }\n}", "CodeBleu_score": 59.58101506454806}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var ipAddress in _config.IpAddresses) {\n        if (await _healthCheckService.IsHealth(ipAddress)) {\n            result.Add(CreateZooKeeper(ipAddress));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 77.11683841724157}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var ipAddress in _config.IpAddresses) {\n        if (await _healthCheckService.IsHealth(ipAddress)) {\n            result.Add(CreateZooKeeper(ipAddress));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 77.11683841724157}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _config.Addresses) {\n        if (await _healthCheckService.IsHealth(address)) {\n            result.Add(CreateZooKeeper(address));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 79.49646835364102}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t        synchronized (this) {\n            if (zk == null) {\n                zk = new ZooKeeper(ensembleProvider.getConnectionString(), sessionTimeout, this);\n            }\n            return zk;\n        }\n    }", "CodeBleu_score": 34.43306983192868}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t        synchronized (this) {\n            if (zk == null) {\n                String cnxnString = getConnectionString();\n                if (cnxnString == null) {\n                    throw new IllegalStateException(\"No connection string has been set\");\n                }\n                zk = new ZooKeeper(cnxnString, sessionTimeout, this);\n            }\n            return zk;\n        }\n    }", "CodeBleu_score": 36.08769892556881}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t        if (zk != null && zk.getState() == ZooKeeper.States.CONNECTED) {\n            return zk;\n        }\n        synchronized (this) {\n            if (zk != null && zk.getState() == ZooKeeper.States.CONNECTED) {\n                return zk;\n            }\n            if (zk != null) {\n                zk.close();\n            }\n            zk = new ZooKeeper(connectionString, sessionTimeout, this);\n            return zk;\n        }\n    }", "CodeBleu_score": 38.78948306273167}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t  ZooKeeper zk = getZooKeeper();\n  if (zk == null) {\n    return;\n  }\n  try {\n    zk.register(new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n      }\n    });\n  }\n  catch (Exception e) {\n    LOG.warn(\"Unexpected exception while registering watcher\",e);\n  }\n  if (waitForShutdownTimeoutMs > 0) {\n    try {\n      zk.close(waitForShutdownTimeoutMs);\n    }\n catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw e;\n    }\n  }\n else {\n    zk.close();\n  }\n}", "CodeBleu_score": 40.411586525297224}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t  ZooKeeper zk = getZooKeeper();\n  if (zk == null) {\n    return;\n  }\n  try {\n    zk.register(new Watcher() {\n\n      @Override\n      public void process(WatchedEvent event) {\n      }\n    });\n  }\n  catch (KeeperException e) {\n    if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n      throw e;\n    }\n  }\n  if (waitForShutdownTimeoutMs > 0) {\n    try {\n      Thread.sleep(waitForShutdownTimeoutMs);\n    }\n    catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n  zk.close();\n}", "CodeBleu_score": 41.14320674905085}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t  if (helper != null) {\n    ZooKeeper zk = helper.getZooKeeper();\n    if (zk != null) {\n      zk.register(new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n        }\n      });\n      zk.close();\n    }\n  }\n  if (waitForShutdownTimeoutMs > 0) {\n    Thread.sleep(waitForShutdownTimeoutMs);\n  }\n}", "CodeBleu_score": 32.66935818291459}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t        OperationTrace trace = null;\n        try {\n            trace = startAdvancedTracer(\"blockUntilConnectedOrTimedOut\");\n            internalBlockUntilConnectedOrTimedOut();\n            return state.isConnected();\n        } finally {\n            trace.commit();\n        }\n    }", "CodeBleu_score": 34.414263246205316}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    long waitTimeMs = connectionTimeoutMs;\n    while (!state.isConnected() && (waitTimeMs > 0)) {\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher tempWatcher = new Watcher() {\n            @Override\n            public void process(WatchedEvent event) {\n                latch.countDown();\n            }\n        };\n\n        state.addParentWatcher(tempWatcher);\n        long startTimeMs = System.currentTimeMillis();\n        long timeoutMs = Math.min(waitTimeMs, 1000);\n        try {\n            latch.await(timeoutMs, TimeUnit.MILLISECONDS);\n        } finally {\n            state.removeParentWatcher(tempWatcher);\n        }\n        long elapsed = Math.max(1, System.currentTimeMillis() - startTimeMs);\n        waitTimeMs -= elapsed;\n    }\n    return state.isConnected();\n}", "CodeBleu_score": 25.796654076046988}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t        try {\n            startAdvancedTracer(\"blockUntilConnectedOrTimedOut\").start();\n            internalBlockUntilConnectedOrTimedOut();\n            return isConnected();\n        } finally {\n            startAdvancedTracer(\"blockUntilConnectedOrTimedOut\").stop();\n        }\n    }", "CodeBleu_score": 24.23564024409572}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t    logger.info(\"Shutting down\");\n    started = false;\n    try {\n        state.close(waitForShutdownTimeoutMs);\n    } catch (IOException e) {\n        if (Thread.interrupted()) {\n            logger.error(\"Interrupted while waiting for shutdown\");\n        } else {\n            logger.error(\"Error while waiting for shutdown\", e);\n        }\n    }\n}", "CodeBleu_score": 52.60595606195964}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    if (started) {\n        log.info(\"Shutting down {}\", this);\n        started = false;\n        try {\n            state.close(waitForShutdownTimeoutMs);\n        } catch (IOException e) {\n            if (Thread.interrupted()) {\n                log.error(\"Shutdown interrupted\", e);\n            } else {\n                log.error(\"Shutdown failed\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 51.539180501169234}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    synchronized (this) {\n        if (!started) {\n            return;\n        }\n        started = false;\n        try {\n            LOG.info(\"Shutting down service {}\", serviceName);\n            state.close(waitForShutdownTimeoutMs);\n        } catch (IOException e) {\n            if (Thread.currentThread().isInterrupted()) {\n                LOG.warn(\"Interrupted while shutting down service {}\", serviceName);\n            } else {\n                LOG.error(\"Error while shutting down service {}\", serviceName, e);\n            }\n        }\n        LOG.info(\"Shutdown service {}\", serviceName);\n    }\n}", "CodeBleu_score": 43.27712489514241}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    long remainingWaitTime = connectionTimeout;\n    while (remainingWaitTime > 0 && state != State.CONNECTED) {\n        CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher() {\n\n            @Override\n            public void process(WatchedEvent event)  {\n                if (event.getType() == Event.EventType.None && event.getState() == Event.KeeperState.SyncConnected) {\n                    latch.countDown();\n                }\n            }\n        }\n;\n        addWatch(watcher);\n        try {\n            latch.await(remainingWaitTime, TimeUnit.MILLISECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw e;\n        } finally {\n            removeWatcher(watcher);\n        }\n        remainingWaitTime = connectionTimeout - (System.currentTimeMillis() - startTime);\n    }\n    if (state != State.CONNECTED) {\n        throw new InterruptedException(\"Connection timed out: \" + connectionTimeout + \"ms elapsed without success\");\n    }\n}", "CodeBleu_score": 43.76008806776136}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    long remainingWaitTime = connectionTimeout;\n    while (remainingWaitTime > 0) {\n        final CountDownLatch connectionLatch = new CountDownLatch(1);\n        Watcher watcher = new Watcher() {\n            @Override\n            public void process(WatchedEvent event) {\n                if (event.getState() == Event.KeeperState.SyncConnected) {\n                    connectionLatch.countDown();\n                }\n            }\n        };\n        try {\n            watcher.process(WatchedEvent.builder().state(getState()).build());\n            if (connectionLatch.await(remainingWaitTime, TimeUnit.MILLISECONDS)) {\n                return;\n            }\n        } finally {\n            removeWatcher(watcher);\n        }\n        remainingWaitTime = connectionTimeout - (System.currentTimeMillis() - startTime);\n    }\n    throw new TimeoutException(\"Failed to connect to ZooKeeper server within timeout of \" + connectionTimeout + \"ms\");\n}", "CodeBleu_score": 44.82332906187211}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t  if (connectionState.get() == KeeperState.CONNECTED) {\n    return;\n  }\n  long remainingWait = connectionTimeout;\n  long startTime = System.currentTimeMillis();\n  while (connectionState.get() != KeeperState.CONNECTED) {\n    long elapsedTime = System.currentTimeMillis() - startTime;\n    if (elapsedTime >= remainingWait) {\n      throw new ConnectionLossException(\"Connection timed out: \" + connectionTimeout + \"ms elapsed while waiting for connection\");\n    }\n    remainingWait -= elapsedTime;\n    startTime = System.currentTimeMillis();\n    CountDownLatch connectionLatch = new CountDownLatch(1);\n    Watcher watcher = new ConnectionWatcher(connectionLatch);\n    try {\n      watcher.process(connectionState.get());\n      addConnectionWatcher(watcher);\n      connectionLatch.await(remainingWait, TimeUnit.MILLISECONDS);\n    }\n finally {\n      removeConnectionWatcher(watcher);\n    }\n  }\n}", "CodeBleu_score": 35.76879834860963}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (createMode == CreateMode.EPHEMERAL_SEQUENTIAL || createMode == CreateMode.EPHEMERAL) {\n        if (!client.getSessionId().equals(sessionId)) {\n            LOG.info(\"Found node {} has session ID {} which does not match client's session ID {}\", foundNode, getSessionId(foundNode), client.getSessionId());\n            deleteNode(client, foundNode);\n            sessionId = client.getSessionId();\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 32.22224658635866}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t        if (doProtected() && createMode == CreateMode.EPHEMERAL) {\n            if (!client.getSessionId().equals(protectedId)) {\n                LOG.info(\"Session ID changed from {} to {}\", protectedId, client.getSessionId());\n                client.getZooKeeper().delete(foundNode, -1);\n                protectedId = client.getSessionId();\n            }\n        }\n        return foundNode;\n    }", "CodeBleu_score": 31.624468933997633}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t        if (doProtected() && createMode == CreateMode.EPHEMERAL) {\n            if (!client.getZooKeeper().getSessionId().equals(sessionId)) {\n                LOG.warn(\"Client session changed while protected mode operation in progress. Deleting old node: \" + foundNode);\n                getFailedDeleteManager().delete(foundNode);\n                sessionId = client.getZooKeeper().getSessionId();\n            }\n        }\n        return foundNode;\n    }", "CodeBleu_score": 38.01579333771735}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    Stat stat = null;\n    boolean done = false;\n    int retryCount = 0;\n    while (!done) {\n        try {\n            stat = zk.setACL(path, aclList, -1);\n            done = true;\n        } catch (KeeperException.SessionExpiredException e) {\n            throw e;\n        } catch (KeeperException e) {\n            if (e.code() == KeeperException.Code.NOAUTH) {\n                done = true;\n            } else if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                if (retryCount++ < MAX_RETRIES) {\n                    // sleep then retry\n                    Thread.sleep(RETRY_WAIT_MILLIS);\n                } else {\n                    throw e;\n                }\n            } else {\n                // rethrow any other exception\n                throw e;\n            }\n        }\n    }\n    return stat;\n}", "CodeBleu_score": 25.674376983724994}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final Stat stat = new Stat();\n    final String traceName = \"setACL\";\n    final Trace trace = Trace.getInstance(traceName);\n    trace.setStartTime();\n    trace.record(Trace.Type.BEGIN, \"setACL\");\n    trace.record(Trace.Type.PARAM, \"path\", path);\n    trace.record(Trace.Type.PARAM, \"aclList\", aclList);\n    final int maxRetries = 3;\n    int retries = 0;\n    while (true) {\n        try {\n            final Stat result = getZooKeeper().setACL(path, aclList, -1);\n            trace.record(Trace.Type.RETURN, \"setACL\", result);\n            trace.setSuccessful();\n            trace.commit();\n            return result;\n        } catch (final KeeperException e) {\n            if (e instanceof ConnectionLossException) {\n                retries++;\n                if (retries > maxRetries) {\n                    throw e;\n                }\n                continue;\n            }\n            throw e;\n        }\n    }\n}", "CodeBleu_score": 31.89610609333523}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final Stat stat = new Stat();\n    final long startTime = System.currentTimeMillis();\n    final String operation = \"setACL\";\n    final String pathString = path.toString();\n    final String aclListString = aclList.toString();\n    final String operationString = operation + \" \" + pathString + \" \" + aclListString;\n    final Trace trace = TracerFactory.getTraceInstance(\"zookeeper\");\n    final Trace.Record record = trace.record(operationString);\n    record.setStatus(Trace.SUCCESS);\n    record.setStartTime(startTime);\n    record.setCaller(this);\n    record.setParameters(new Object[] { path, aclList });\n    record.setResult(stat);\n    try {\n        stat.setVersion(this.getZooKeeper().setACL(path, aclList, -1));\n        record.setEndTime(System.currentTimeMillis());\n        record.setStatus(Trace.SUCCESS);\n        return stat;\n    }\n    catch (final KeeperException e) {\n        record.setEndTime(System.currentTimeMillis());\n        record.setStatus(Trace.FAILURE);\n        throw e;\n    }\n    finally {\n        trace.commit(record);\n    }\n}", "CodeBleu_score": 36.98936658080566}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    if (thisId == null || thisId.length() == 0) {\n        throw new IllegalArgumentException(\"thisId cannot be null or empty\");\n    }\n\n    this.membershipCache = new CuratorCache(client, membershipPath, false);\n    this.membershipCache.start();\n\n    this.member = new PersistentNode(client, membershipPath + \"/\" + thisId, CreateMode.EPHEMERAL, false, payload);\n    this.member.start();\n}", "CodeBleu_score": 44.56398048655632}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n    checkNotNull(client, \"client\");\n    checkNotNull(membershipPath, \"membershipPath\");\n    checkNotNull(thisId, \"thisId\");\n    checkNotNull(payload, \"payload\");\n    this.cache = new CuratorCache(client, membershipPath, false);\n    this.cache.start();\n    this.memberNode = client.create()\n        .creatingParentsIfNeeded()\n        .withMode(CreateMode.EPHEMERAL)\n        .forPath(membershipPath + \"/\" + thisId, payload);\n}", "CodeBleu_score": 46.669083158766846}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    checkNotNull(client, \"client\");\n    checkNotNull(membershipPath, \"membershipPath\");\n    checkNotNull(thisId, \"thisId\");\n    checkNotNull(payload, \"payload\");\n\n    this.membershipCache = CuratorCache.builder(client, membershipPath).build();\n\n    this.member = new PersistentNode(client, membershipPath + \"/\" + thisId, payload, CreateMode.EPHEMERAL);\n}", "CodeBleu_score": 49.071197649920315}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    // create a node at the given path asynchronously\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n\n            // set up a watch on the node to handle future events\n            CompletionStage<WatchedEvent> watchedStage = async.checkExists().watched().forPath(path);\n            handleWatchedStage(watchedStage);\n        }\n    });\n}", "CodeBleu_score": 81.78892130776157}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    // Create an AsyncCuratorFramework instance\n    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    // Create a node at the specified path\n    async.create().forPath(path);\n\n    // Set up a watch on the node\n    async.checkExists().watched().forPath(path);\n\n    // Handle the watch event\n    handleWatchedStage(async.checkExists().watched().forPath(path));\n}", "CodeBleu_score": 50.96745755394685}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async =\n            AsyncCuratorFramework.wrap(client);\n\n    async.create().forPath(path, new byte[0]).whenComplete((name, exception) -> {\n        if (exception != null) {\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n            // setup a watch on the node\n            AsyncCuratorFramework.Watch watch = new AsyncCuratorFramework.Watch() {\n                @Override\n                public void process(WatchedEvent event) {\n                    System.out.println(\"Event received: \" + event);\n                }\n            };\n            async.checkExists().usingWatcher(watch).forPath(path);\n        }\n    });\n}", "CodeBleu_score": 72.79041457509473}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t        List<OpResult> results = client.transaction().forOperations(transaction).commit();\n\n        if (!results.isEmpty()) {\n            OpResult first = results.get(0);\n            if (first instanceof ErrorResult) {\n                ErrorResult errorResult = (ErrorResult) first;\n                int code = errorResult.getCode();\n                throw KeeperException.create(code);\n            }\n        }\n\n        return results;\n    }", "CodeBleu_score": 42.45726831872015}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> results = client.transaction().forOperations(transaction).commit();\n    if (results.size() > 0) {\n        OpResult firstResult = results.get(0);\n        if (firstResult.getType() == OpResult.Type.ERROR) {\n            KeeperException.Code code = firstResult.getErr();\n            throw KeeperException.create(code);\n        }\n    }\n    return results;\n}", "CodeBleu_score": 46.766788792919584}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t        List<OpResult> results = transaction.check(0, client.getZooKeeper()).get();\n        if (results.size() > 0) {\n            OpResult firstResult = results.get(0);\n            if (firstResult.getType() == OpResult.Type.ERROR) {\n                KeeperException.Code code = getErr(firstResult.getErr());\n                throw new KeeperException.MultiException(code);\n            }\n        }\n        return results;\n    }", "CodeBleu_score": 50.021206669350484}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t        System.out.println(\"Services:\");\n        serviceDiscovery.queryForNames().forEach(serviceName -> {\n            try {\n                System.out.println(serviceName);\n                serviceDiscovery.queryForInstances(serviceName).forEach(ServiceDiscoveryUtil::outputInstance);\n            } catch (Exception e) {\n                System.out.println(\"\\tNo instances for \" + serviceName);\n            }\n        });\n        System.out.println();\n        serviceDiscovery.close();\n    }", "CodeBleu_score": 35.37021599702306}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t        try {\n            System.out.println(\"=== Listing service names and their instances ===\");\n            serviceDiscovery.queryForNames().forEach(serviceName -> {\n                try {\n                    serviceDiscovery.queryForInstances(serviceName).forEach(ServiceDiscoveryExample::outputInstance);\n                } catch (Exception e) {\n                    System.out.println(\"Error occurred while querying for instances of \" + serviceName);\n                    e.printStackTrace();\n                }\n            });\n        } catch (Exception e) {\n            System.out.println(\"Error occurred while querying for service names\");\n            e.printStackTrace();\n        } finally {\n            closeQuietly(serviceDiscovery);\n        }\n    }", "CodeBleu_score": 41.231317568398936}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t        System.out.println(\"Listing all service names and their instances:\");\n        try {\n            serviceDiscovery.queryForNames().forEach(serviceName -> {\n                try {\n                    serviceDiscovery.queryForInstances(serviceName).forEach(ServiceDiscoveryExample::outputInstance);\n                } catch (Exception e) {\n                    System.out.println(\"\\tNo instance registered yet!\");\n                }\n            });\n        } catch (Exception e) {\n            System.out.println(\"No service registered yet!\");\n        }\n        System.out.println();\n        closeQuietly(serviceDiscovery);\n    }", "CodeBleu_score": 37.267398737945896}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    return children.stream()\n            .filter(name -> !READY_NODE.equals(name))\n            .sorted()\n            .collect(Collectors.toList());\n}", "CodeBleu_score": 18.04721356234062}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    return children.stream()\n            .filter(name -> !READY_NODE.equals(name))\n            .sorted()\n            .collect(Collectors.toList());\n}", "CodeBleu_score": 18.04721356234062}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    return children.stream().filter(name -> !READY_NODE.equals(name)).sorted().collect(Collectors.toList());\n}", "CodeBleu_score": 15.193362495204255}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        try {\n            zk.close();\n        } catch (InterruptedException e) {\n            throw e;\n        }\n    }\n    try {\n        zk = new ZooKeeper(newHost, SESSION_TIMEOUT, this);\n        connectedSignal.await();\n    } catch (IOException e) {\n        if (zk != null) {\n            try {\n                zk.close();\n            } catch (InterruptedException e1) {\n                e1.printStackTrace();\n            }\n        }\n        throw e;\n    }\n}", "CodeBleu_score": 30.07998100099087}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    close();\n    zk = new ZooKeeper(newHost, timeout, this);\n    connectedSignal.await();\n}", "CodeBleu_score": 16.378311941171795}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t        close();\n        try {\n            String[] hostport = newHost.split(\":\");\n            String host = hostport[0];\n            String port = hostport[1];\n            zk = new ZooKeeper(host + \":\" + port, timeout, this);\n            connectedSignal.await();\n        } catch (IOException e) {\n            if (zk != null) {\n                try {\n                    zk.close();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n            throw e;\n        }\n    }", "CodeBleu_score": 40.25468691527878}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t        List<ACL> acls = new ArrayList<ACL>();\n        String[] segments = aclString.split(\",\");\n        for (String segment : segments) {\n            String[] elements = segment.split(\":\");\n            if (elements.length != 3) {\n                outputStream.write((\"Invalid ACL format: \" + segment).getBytes());\n                continue;\n            }\n            String scheme = elements[0];\n            String id = elements[1];\n            String perms = elements[2];\n            ACL acl = new ACL();\n            acl.setId(scheme + \":\" + id);\n            acl.setPerms(getPermFromString(perms));\n            acls.add(acl);\n        }\n        return acls;\n    }", "CodeBleu_score": 35.01836036682728}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t        List<ACL> acls = new ArrayList<ACL>();\n        String[] segments = aclString.split(\",\");\n        for (String segment : segments) {\n            String[] parts = segment.split(\":\");\n            if (parts.length != 3) {\n                outputStream.write((\"Invalid ACL format: \" + segment).getBytes());\n                continue;\n            }\n            String scheme = parts[0];\n            String id = parts[1];\n            String perms = parts[2];\n            int perm = getPermFromString(perms);\n            ACL acl = new ACL(perm, new Id(scheme, id));\n            acls.add(acl);\n        }\n        return acls;\n    }", "CodeBleu_score": 32.16587512684629}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    String[] acls = aclString.split(\",\");\n    for (String acl : acls) {\n        String[] idAndPerms = acl.split(\":\");\n        if (idAndPerms.length != 2) {\n            outputStream.write((\"Invalid acl: \" + acl).getBytes());\n            continue;\n        }\n        String id = idAndPerms[0];\n        String perms = idAndPerms[1];\n        int perm = getPermFromString(perms);\n        ACL a = new ACL(perm, new Id(scheme, id));\n        aclList.add(a);\n    }\n    return aclList;\n}", "CodeBleu_score": 31.057963537993405}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t        Objects.requireNonNull(pathList);\n        assertZookeeperExists(serverId);\n        if (pathList.size() < 20) {\n            for (String path : pathList) {\n                zookeeperMap.get(serverId).delete(path);\n            }\n        } else {\n            zookeeperMap.get(serverId).deleteAsync(pathList);\n        }\n    }", "CodeBleu_score": 96.80308378969973}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t        Objects.requireNonNull(pathList);\n        assertZookeeperExists(serverId);\n        if (pathList.size() < 20) {\n            for (String path : pathList) {\n                zookeeperMap.get(serverId).delete(path);\n            }\n        } else {\n            zookeeperMap.get(serverId).deleteAsync(pathList);\n        }\n    }", "CodeBleu_score": 96.80308378969973}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t        Objects.requireNonNull(pathList);\n        assertZookeeperExists(serverId);\n        if (pathList.size() < 20) {\n            for (String path : pathList) {\n                zookeeperMap.get(serverId).delete(path);\n            }\n        } else {\n            zookeeperMap.get(serverId).deleteAsync(pathList);\n        }\n    }", "CodeBleu_score": 96.80308378969973}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t        writer.write(\"Connecting to \" + url + \"...\");\n        var factory = new CuratorZookeeperConnectionFactory();\n        var params = ZookeeperParams.builder()\n                .id(id)\n                .url(url)\n                .aclList(List.of())\n                .maxRetries(5)\n                .connectionTimeout(1000)\n                .retryIntervalTime(1000)\n                .sessionTimeout(1000)\n                .build();\n        var connection = factory.create(params);\n        writer.write(\"Connected to \" + url);\n        var zkMain = new ZooKeeperMain(connection);\n        return new Terminal(id, url, connection, zkMain);\n    }", "CodeBleu_score": 68.37580029876335}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t        writer.write(String.format(\"Connecting to %s...\n\", url));\n        var factory = new CuratorZookeeperConnectionFactory();\n        var params = ZookeeperParams.builder()\n                .id(id)\n                .url(url)\n                .aclList(Collections.emptyList())\n                .maxRetries(1)\n                .connectionTimeout(1000)\n                .retryIntervalTime(1000)\n                .sessionTimeout(1000)\n                .build();\n        var connection = factory.create(params, Collections.emptyList());\n        writer.write(String.format(\"Connected to %s\n\", url));\n        var main = new ZooKeeperMain(connection);\n        return new Terminal(id, url, connection, main);\n    }", "CodeBleu_score": 58.34098107431145}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t        writer.write(\"Connecting to \" + url + \"...\");\n        var factory = new CuratorZookeeperConnectionFactory();\n        var params = ZookeeperParams.builder()\n                .id(id)\n                .url(url)\n                .aclList(null)\n                .maxRetries(10)\n                .connectionTimeout(5000)\n                .retryIntervalTime(1000)\n                .sessionTimeout(30000)\n                .build();\n        var connection = factory.create(params, Collections.emptyList());\n        writer.write(\"Successfully connected to \" + url + \"\n\");\n        var zooKeeperMain = new ZooKeeperMain(connection.getZooKeeperClient(), writer);\n        return new Terminal(id, url, connection, zooKeeperMain);\n    }", "CodeBleu_score": 61.65110756889044}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t        for (int i = 0; i < 6; i++) {\n            try {\n                if (isConnected()) {\n                    return;\n                }\n\n                Thread.sleep(1000);\n            } catch (Exception e) {\n                close();\n                throw new IllegalStateException(e);\n            }\n        }\n\n        close();\n        throw new IllegalStateException(\"Failed to connect to SSH tunnel.\");\n    }", "CodeBleu_score": 44.714678769132185}, {"code": "public void blockUntilConnected(){\n\t        for (int i = 0; i < 6; i++) {\n            try {\n                if (isConnected()) {\n                    return;\n                }\n\n                Thread.sleep(1000);\n            } catch (Exception e) {\n                close();\n                throw new IllegalStateException(e);\n            }\n        }\n\n        close();\n        throw new IllegalStateException(\"Failed to establish SSH tunnel connection\");\n    }", "CodeBleu_score": 44.71691005369743}, {"code": "public void blockUntilConnected(){\n\t    int retries = 6;\n    while (!isConnected()) {\n        try {\n            Thread.sleep(1000);\n            connect();\n        } catch (Exception e) {\n            close();\n            throw new IllegalStateException(e);\n        }\n        retries--;\n        if (retries == 0) {\n            close();\n            throw new IllegalStateException(\"Failed to establish SSH tunnel connection.\");\n        }\n    }\n}", "CodeBleu_score": 48.25985049804769}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"deleteNode error\", e);\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 84.85775485894237}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        LOG.error(\"Failed to delete nodes from Zookeeper\", e);\n        throw new IllegalStateException(\"Failed to delete nodes from Zookeeper\", e);\n    }\n}", "CodeBleu_score": 66.17905235678883}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"\u5220\u9664\u8282\u70b9\u5931\u8d25\", e);\n        throw new IllegalStateException(\"\u5220\u9664\u8282\u70b9\u5931\u8d25\", e);\n    }\n}", "CodeBleu_score": 67.86182917592832}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t        Platform.runLater(() -> {\n            ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n            zookeeperDomainService.disconnect(serverConfiguration.getId());\n            treeItemCache.remove(id);\n        });\n    }", "CodeBleu_score": 90.48842970608284}, {"code": "public void disconnect(String id){\n\t        Platform.runLater(() -> {\n            ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n            zookeeperDomainService.disconnect(serverConfiguration.getId());\n            treeItemCache.remove(id);\n        });\n    }", "CodeBleu_score": 90.48842970608284}, {"code": "public void disconnect(String id){\n\t        Platform.runLater(() -> {\n            ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n            zookeeperDomainService.disconnect(serverConfiguration.getId());\n            treeItemCache.remove(id);\n        });\n    }", "CodeBleu_score": 90.48842970608284}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    Server server = serverService.getById(serverId);\n    String host = server.getHost();\n    String port = server.getPort();\n    Boolean sshTunnelEnabled = server.getSshTunnelEnabled();\n    if (sshTunnelEnabled) {\n        host = sshService.getHost();\n        port = sshService.getPort();\n    }\n    String connectionUrl = String.format(\"http://%s:%s/terminal\", host, port);\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 44.200077819798054}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    Server server = serverService.getById(serverId).orElseThrow();\n    String host = server.getHost();\n    Integer port = server.getPort();\n    Boolean sshTunnelEnabled = server.getSshTunnelEnabled();\n    String connectionUrl = host + \":\" + port;\n    if (sshTunnelEnabled) {\n        connectionUrl = \"localhost:\" + port;\n    }\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 51.92804891131713}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    Server server = getServer(serverId);\n    String connectionUrl = getConnectionUrl(server);\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 19.375037489250936}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t    try {\n        zkServer.executeCommand(id, command);\n    } catch (Exception e) {\n        logger.error(\"Error executing command on server with ID \" + id + \": \" + command, e);\n        JOptionPane.showMessageDialog(null, \"Error executing command on server with ID \" + id + \": \" + command + \"\n\n\" + e.getMessage() + \"\n\nPlease try again.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n    }\n}", "CodeBleu_score": 60.36731417641854}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        zkServer.executeCommand(id, command);\n    } catch (Exception e) {\n        log.error(\"Error executing command on server with ID: \" + id, e);\n        displayErrorMessage(\"Failed to execute command on server with ID: \" + id + \". Please try again.\");\n    }\n}", "CodeBleu_score": 52.67521925176189}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        ZookeeperServer server = zookeeperServers.get(id);\n        server.executeCommand(command);\n    } catch (Exception e) {\n        logger.error(\"Failed to execute command on server \" + id + \": \" + command, e);\n        System.out.println(\"Failed to execute command on server \" + id + \": \" + command + \". Please try again.\");\n    }\n}", "CodeBleu_score": 45.53535478554293}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    String filePath = \"zookeeper.properties\";\n    File file = new File(filePath);\n    if (file.exists()) {\n        try {\n            properties.load(new FileInputStream(file));\n            logger.info(\"Loaded Zookeeper properties from file: \" + filePath);\n        } catch (IOException e) {\n            logger.error(\"Error loading Zookeeper properties from file: \" + filePath, e);\n        }\n    } else {\n        logger.error(\"Zookeeper properties file does not exist: \" + filePath);\n    }\n    return properties;\n}", "CodeBleu_score": 43.09425301784112}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    String filePath = System.getProperty(\"zookeeper.properties.path\");\n    if (filePath == null) {\n        logger.error(\"zookeeper.properties.path system property is not set\");\n        return properties;\n    }\n    File file = new File(filePath);\n    if (!file.exists()) {\n        logger.error(\"zookeeper.properties.path file does not exist: {}\", filePath);\n        return properties;\n    }\n    try (FileInputStream fis = new FileInputStream(file)) {\n        properties.load(fis);\n        logger.info(\"Loaded zookeeper properties from file: {}\", filePath);\n    } catch (IOException e) {\n        logger.error(\"Error loading zookeeper properties from file: {}\", filePath, e);\n    }\n    return properties;\n}", "CodeBleu_score": 44.557944655140105}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties props = new Properties();\n    String path = System.getProperty(\"zookeeper.properties.path\");\n    File file = new File(path);\n    if (file.exists()) {\n        try {\n            props.load(new FileInputStream(file));\n            LOG.info(\"Loaded Zookeeper properties from file \" + path + \": \" + props);\n        } catch (IOException e) {\n            LOG.error(\"Failed to load Zookeeper properties from file \" + path, e);\n        }\n    } else {\n        LOG.error(\"Zookeeper properties file \" + path + \" does not exist\");\n    }\n    return props;\n}", "CodeBleu_score": 41.642000151441536}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        LOGGER.error(\"Failed to load properties from content.\", e);\n        Notifications.create()\n            .title(\"Error\")\n            .text(\"Failed to load properties from content.\")\n            .showError();\n        return;\n    }\n    try {\n        properties.store(new FileOutputStream(SYS_PROP_PATH), null);\n    } catch (IOException e) {\n        LOGGER.error(\"Failed to save properties to file.\", e);\n        Notifications.create()\n            .title(\"Error\")\n            .text(\"Failed to save properties to file.\")\n            .showError();\n    }\n}", "CodeBleu_score": 40.19836026587324}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties props = new Properties();\n    try {\n        props.load(new StringReader(content));\n    } catch (IOException e) {\n        log.error(\"Error loading zookeeper system properties\", e);\n        Notifications.create()\n                .title(\"Error loading zookeeper system properties\")\n                .text(\"Error loading zookeeper system properties: \" + e.getMessage())\n                .showError();\n        return;\n    }\n    try {\n        props.store(new FileOutputStream(SYS_PROP_PATH), null);\n    } catch (IOException e) {\n        log.error(\"Error saving zookeeper system properties\", e);\n        Notifications.create()\n                .title(\"Error saving zookeeper system properties\")\n                .text(\"Error saving zookeeper system properties: \" + e.getMessage())\n                .showError();\n    }\n}", "CodeBleu_score": 39.98044410465593}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        LOGGER.error(\"Error loading properties from content\", e);\n        Notifications.create()\n                .title(\"Error loading properties\")\n                .text(\"An error occurred while loading properties from the content.\")\n                .showError();\n        return;\n    }\n\n    try {\n        properties.store(new FileWriter(SYS_PROP_PATH), null);\n    } catch (IOException e) {\n        LOGGER.error(\"Error saving properties to file\", e);\n        Notifications.create()\n                .title(\"Error saving properties\")\n                .text(\"An error occurred while saving properties to the file.\")\n                .showError();\n    }\n}", "CodeBleu_score": 38.58874685220576}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t        try {\n            BufferedReader reader = new BufferedReader(\n                    new InputStreamReader(client.getInputStream(), \"UTF-8\"));\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n            cleanup(reader);\n            cleanup(client);\n            return response.toString();\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Request failed\", e);\n        }\n    }", "CodeBleu_score": 49.22405233643269}, {"code": "private String response(Socket client){\n\t        StringBuilder result = new StringBuilder();\n        try {\n            BufferedReader reader = new BufferedReader(\n                    new InputStreamReader(client.getInputStream(), StandardCharsets.UTF_8));\n\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                result.append(line).append(\"\n\");\n            }\n\n            cleanup(reader);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Can't read data from server\", e);\n        }\n        cleanup(client);\n        return result.toString();\n    }", "CodeBleu_score": 46.640777348536545}, {"code": "private String response(Socket client){\n\t        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line).append(\"\n\");\n            }\n            cleanup(reader);\n            cleanup(client);\n            return response.toString();\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "CodeBleu_score": 59.73951745481176}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t        final CuratorFramework curatorFramework = curatorFramework(params);\n        try {\n            curatorFramework.start();\n            if (!curatorFramework.blockUntilConnected(5, TimeUnit.SECONDS)) {\n                curatorFramework.close();\n                throw new ZookeeperConnectionException(\"Failed to connect to Zookeeper\");\n            }\n        } catch (InterruptedException e) {\n            curatorFramework.close();\n            throw new ZookeeperConnectionException(\"Interrupted while connecting to Zookeeper\", e);\n        }\n\n        return new CuratorZookeeperConnection(curatorFramework, params);\n    }", "CodeBleu_score": 64.6638072926261}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t        CuratorFramework curatorFramework = curatorFramework(params);\n        curatorFramework.start();\n        try {\n            if (!curatorFramework.blockUntilConnected(5, TimeUnit.SECONDS)) {\n                throw new ZookeeperConnectionException(\"Timeout connecting to Zookeeper\");\n            }\n        } catch (InterruptedException e) {\n            curatorFramework.close();\n            throw new ZookeeperConnectionException(\"Interrupted connecting to Zookeeper\", e);\n        }\n\n        return new CuratorZookeeperConnection(curatorFramework, params);\n    }", "CodeBleu_score": 66.35108378284885}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    CuratorFramework client = curatorFramework(params);\n    try {\n        client.start();\n        client.blockUntilConnected(5, TimeUnit.SECONDS);\n    } catch (InterruptedException | ConnectionLossException e) {\n        client.close();\n        throw new ZookeeperConnectionException(e);\n    }\n    return new CuratorZookeeperConnection(client, params);\n}", "CodeBleu_score": 57.28116973586115}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (isSync.compareAndSet(false, true)) {\n        log.info(\"Starting synchronization of Zookeeper nodes\");\n        String currentConnectionString = getCurrentConnectionString();\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener() {\n            @Override\n            public void childEvent(CuratorFramework curatorFramework, TreeCacheEvent treeCacheEvent) throws Exception {\n                if (treeCacheEvent.getType() == TreeCacheEvent.Type.NODE_ADDED || treeCacheEvent.getType() == TreeCacheEvent.Type.NODE_UPDATED || treeCacheEvent.getType() == TreeCacheEvent.Type.NODE_REMOVED) {\n                    ZookeeperNode zookeeperNode = new ZookeeperNode(treeCacheEvent.getData().getPath(), treeCacheEvent.getData().getData());\n                    listeners.forEach(listener -> listener.onEvent(zookeeperNode, treeCacheEvent.getType()));\n                }\n            }\n        });\n        try {\n            treeCache.start();\n        } catch (Exception e) {\n            log.error(\"Error starting synchronization of Zookeeper nodes\", e);\n            treeCache.close();\n        }\n    } else {\n        log.info(\"Synchronization of Zookeeper nodes is already in progress\");\n    }\n}", "CodeBleu_score": 50.885768713525295}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    String currentConnectionString = getCurrentConnectionString();\n    if (!isSync.get()) {\n        log.info(\"Starting synchronization process\");\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        try {\n            treeCache.start();\n        } catch (Exception e) {\n            log.error(\"Error while starting TreeCache\", e);\n            treeCache.close();\n        }\n    } else {\n        log.info(\"Synchronization process is already in progress\");\n    }\n}", "CodeBleu_score": 44.09143410278278}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (!isSync.get()) {\n        log.info(\"Start sync zookeeper nodes.\");\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener() {\n            @Override\n            public void childEvent(CuratorFramework curatorFramework, TreeCacheEvent treeCacheEvent) throws Exception {\n                log.info(\"Zookeeper node changed: \" + treeCacheEvent.getData().getPath());\n                listeners.forEach(listener -> listener.onChange(treeCacheEvent.getData().getPath(), treeCacheEvent.getType()));\n            }\n        });\n        try {\n            treeCache.start();\n        } catch (Exception e) {\n            log.error(\"Start tree cache error.\", e);\n            treeCache.close();\n        }\n        isSync.set(true);\n    } else {\n        log.info(\"Zookeeper nodes are already in sync.\");\n    }\n}", "CodeBleu_score": 47.27180445256957}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache cache = new PathChildrenCache(client, path, true);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 73.84492591071368}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache cache = new PathChildrenCache(zk, path, true);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 60.99818522903908}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache cache = new PathChildrenCache(zkClient, path, true);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 61.61525132234349}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t    logger.info(\"Unregistering services...\");\n    for (String path : paths) {\n        try {\n            curator.delete().forPath(path);\n        } catch (Exception e) {\n            logger.error(\"Error unregistering service: \" + e.getMessage());\n        }\n    }\n    curator.close();\n}", "CodeBleu_score": 62.42320216930604}, {"code": "public void unregisterService(){\n\t    logger.info(\"Unregistering service\");\n    for (String path : paths) {\n        try {\n            curator.delete().forPath(path);\n        } catch (Exception e) {\n            logger.error(\"Error unregistering service: \" + e.getMessage());\n        }\n    }\n    curator.close();\n}", "CodeBleu_score": 63.91568993009316}, {"code": "public void unregisterService(){\n\t    log.info(\"Unregistering services...\");\n    for (String path : paths) {\n        try {\n            client.delete().forPath(path);\n        } catch (Exception e) {\n            log.error(e.getMessage());\n        }\n    }\n    client.close();\n}", "CodeBleu_score": 54.86470945816491}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t        CompletableFuture.runAsync(() -> {\n            makeClientReady(new ZkClient(zookeeperServer, sessionTimeout, connectionTimeout, new SerializableSerializer()), null);\n            if (client != null) {\n                client.subscribeStateChanges(listener);\n            }\n        });\n    }", "CodeBleu_score": 48.08579126367641}, {"code": "public void addListener(IZkStateListener listener){\n\t        CompletableFuture.runAsync(() -> makeClientReady(client, null), executorService).whenComplete((v, e) -> {\n            this.client.subscribeStateChanges(listener);\n        });\n    }", "CodeBleu_score": 30.496865536289917}, {"code": "public void addListener(IZkStateListener listener){\n\t        CompletableFuture.runAsync(() -> {\n            try {\n                ZkClient client = new ZkClient(zkAddress, 10000, 10000, new SerializableSerializer());\n                makeClientReady(client, null);\n                client.subscribeStateChanges(listener);\n            } catch (Exception e) {\n                makeClientReady(null, e);\n            }\n        });\n    }", "CodeBleu_score": 26.582619994872235}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t        this(serverAddr, authority, null);\n    }", "CodeBleu_score": 3.410257369084739}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    this.serverAddr = serverAddr;\n    this.authority = authority;\n    this.retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    this.connectionTimeoutMs = 30 * 1000;\n    this.client = CuratorFrameworkFactory.newClient(this.serverAddr, this.retryPolicy);\n    if (this.authority != null) {\n        this.client = this.client.authorization(\"digest\", this.authority.getBytes()).build();\n    }\n    this.client.getConnectionStateListenable().addListener(this);\n    this.client.start();\n    try {\n        this.client.blockUntilConnected(this.connectionTimeoutMs, TimeUnit.MILLISECONDS);\n    } catch (InterruptedException e) {\n        throw new IllegalStateException(e.getMessage(), e);\n    }\n}", "CodeBleu_score": 35.20128288197397}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t        this.serverAddr = serverAddr;\n        this.authority = authority;\n        this.retryPolicy = new ExponentialBackoffRetry(1000, 3);\n        this.connectionTimeoutMs = 30 * 1000;\n        this.client = CuratorFrameworkFactory.newClient(serverAddr, retryPolicy);\n        if (authority != null) {\n            this.client = this.client.authorization(\"digest\", authority.getBytes()).build();\n        }\n        this.client.getConnectionStateListenable().addListener(this);\n        try {\n            this.client.start();\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 35.19314386417635}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t    Map<ChildListener, TargetChildListener> listeners = this.childListeners.get(path);\n    if (listeners != null) {\n        TargetChildListener targetListener = listeners.remove(listener);\n        if (targetListener != null) {\n            removeTargetChildListener(path, targetListener);\n        }\n    }\n}", "CodeBleu_score": 85.38298232773096}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    synchronized (this) {\n        Map<ChildListener, TargetChildListener> listeners = this.childListeners.get(path);\n        if (listeners != null) {\n            TargetChildListener targetListener = listeners.remove(listener);\n            if (targetListener != null) {\n                removeTargetChildListener(path, targetListener);\n            }\n        }\n    }\n}", "CodeBleu_score": 82.10161954206558}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    Map<ChildListener, TargetChildListener> listeners = this.listeners.get(path);\n    if (listeners != null) {\n        TargetChildListener targetListener = listeners.remove(listener);\n        if (targetListener != null) {\n            removeTargetChildListener(path, targetListener);\n        }\n    }\n}", "CodeBleu_score": 84.97251310589438}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (NULL == zh) {\n        return QCONF_ERR_OTHER;\n    }\n\n    string idc_host;\n    lock_ht_find(g_zk_idc_host_map, g_zk_idc_host_map_mutex, zh, idc_host);\n    lock_ht_delete(g_zk_idc_host_map, g_zk_idc_host_map_mutex, zh);\n\n    zookeeper_close(zh);\n\n    string idc;\n    string host;\n    deserialize_from_idc_host(idc_host, idc, host);\n\n    int ret = init_env_for_zk(idc, host);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"init env for zk failed, ret: %d\", ret);\n        return ret;\n    }\n\n    ret = zookeeper_init(idc, host, g_zk_recv_timeout);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"zookeeper_init failed, ret: %d\", ret);\n        return ret;\n    }\n\n    g_zk_table_watcher->reset_zh(zh);\n    return QCONF_OK;\n}", "CodeBleu_score": 43.23706199284069}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (zh == NULL) {\n        LOG_ERR(\"zh is null\");\n        return QCONF_ERR_OTHER;\n    }\n\n    string idc;\n    string host;\n    lock_ht_find(g_idc_host_map, g_idc_host_map_mutex, zh, idc);\n    lock_ht_delete(g_idc_host_map, g_idc_host_map_mutex, zh);\n\n    zookeeper_close(zh);\n\n    idc = deserialize_from_idc_host(idc, host);\n\n    zh = zookeeper_init(host.c_str(), watcher_fn, 10000, 0, 0, 0);\n    if (zh == NULL) {\n        LOG_ERR(\"zookeeper_init failed, host: %s\", host.c_str());\n        return QCONF_ERR_ZOOKEEPER_INIT;\n    }\n\n    int ret = init_env_for_zk(zh, idc);\n    if (ret != QCONF_OK) {\n        LOG_ERR(\"init_env_for_zk failed, host: %s\", host.c_str());\n        zookeeper_close(zh);\n        return ret;\n    }\n\n    g_watcher_table.reset_watcher(zh);\n\n    return QCONF_OK;\n}", "CodeBleu_score": 45.05392315974358}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (NULL == zh) {\n        LOG_ERR(\"zh is null\");\n        return QCONF_ERR_OTHER;\n    }\n\n    string idc_host;\n    if (QCONF_OK != lock_ht_find(idc_host_map, idc_host_map_mutex, zh, idc_host)) {\n        LOG_ERR(\"lock_ht_find failed\");\n        return QCONF_ERR_OTHER;\n    }\n\n    lock_ht_delete(idc_host_map, idc_host_map_mutex, zh);\n\n    zookeeper_close(zh);\n\n    string idc;\n    string host;\n    if (QCONF_OK != deserialize_from_idc_host(idc_host, idc, host)) {\n        LOG_ERR(\"deserialize_from_idc_host failed\");\n        return QCONF_ERR_OTHER;\n    }\n\n    zh = zookeeper_init(host.c_str(), watcher_fn, 10000, 0, 0, 0);\n    if (NULL == zh) {\n        LOG_ERR(\"zookeeper_init failed\");\n        return QCONF_ERR_OTHER;\n    }\n\n    if (QCONF_OK != init_env_for_zk(zh, idc)) {\n        LOG_ERR(\"init_env_for_zk failed\");\n        return QCONF_ERR_OTHER;\n    }\n\n    if (QCONF_OK != reset_table_watcher(reinterpret_cast<unsigned long>(zh))) {\n        LOG_ERR(\"reset_table_watcher failed\");\n        return QCONF_ERR_OTHER;\n    }\n\n    return QCONF_OK;\n}", "CodeBleu_score": 50.939189276408015}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    if (zh == NULL) {\n        return;\n    }\n\n    lock_ht_update(zk_handle_to_idc_host, zk_handle_to_idc_host_mu, zh, idc_host);\n    lock_ht_update(idc_host_to_zk_handle, idc_host_to_zk_handle_mu, idc_host, zh);\n\n    int state = zoo_state(zh);\n    if (state != ZOO_CONNECTED_STATE) {\n        LOG_FATAL_ERR(\"zoo_state(zh) != ZOO_CONNECTED_STATE\");\n        return;\n    }\n\n    int ret = zk_register_ephemeral(zh, \"/notify/\" + idc_host, idc_host);\n    if (ret != ZOK) {\n        LOG_FATAL_ERR(\"zk_register_ephemeral(zh, /notify/ + idc_host, idc_host) != ZOK\");\n        return;\n    }\n\n    ret = watch_notify_node(zh, idc_host, idc);\n    if (ret != ZOK) {\n        LOG_FATAL_ERR(\"watch_notify_node(zh, idc_host, idc) != ZOK\");\n        return;\n    }\n\n    if (ret == ZOK) {\n        LOG_INFO(\"watch_notify_node(zh, idc_host, idc) == ZOK\");\n        return;\n    }\n\n    if (ret == ZNONODE) {\n        add_gray_idc(idc);\n        LOG_INFO(\"add_gray_idc(idc)\");\n        return;\n    }\n\n    LOG_FATAL_ERR(\"watch_notify_node(zh, idc_host, idc) != ZOK && watch_notify_node(zh, idc_host, idc) != ZNONODE\");\n}", "CodeBleu_score": 51.817406531799485}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    lock_ht_update(zk_handle_to_host, zk_handle_to_host_mu, zh, idc_host);\n    lock_ht_update(zk_host_to_handle, zk_host_to_handle_mu, idc_host, zh);\n\n    int state = zoo_state(zh);\n    if (state != ZOO_CONNECTED_STATE) {\n        LOG_FATAL_ERR(\"zk_handle %p is not connected\", zh);\n        return;\n    }\n\n    int ret = zk_register_ephemeral(zh, idc_host);\n    if (ret != ZOK) {\n        LOG_FATAL_ERR(\"zk_register_ephemeral failed, ret %d\", ret);\n        return;\n    }\n\n    ret = watch_notify_node(zh, idc_host);\n    if (ret != ZOK) {\n        LOG_FATAL_ERR(\"watch_notify_node failed, ret %d\", ret);\n        return;\n    }\n\n    if (ret == ZOK) {\n        LOG_INFO(\"zk_register_ephemeral success, ret %d\", ret);\n    } else {\n        add_gray_idc(idc);\n    }\n}", "CodeBleu_score": 54.81918193859614}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    lock_ht_update(zk_handle_to_idc_host, zk_handle_to_idc_host_mu, zh, idc_host);\n    lock_ht_update(zk_handle_to_idc, zk_handle_to_idc_mu, zh, idc);\n    if (zoo_state(zh) != ZOO_CONNECTED_STATE) {\n        return;\n    }\n    if (zk_register_ephemeral(zh, idc_host, idc) != 0) {\n        LOG_FATAL_ERR(\"init_env_for_zk: zk_register_ephemeral failed\");\n    }\n    if (zoo_wexists(zh, notify_node.c_str(), watch_notify_node, NULL) != 0) {\n        LOG_INFO(\"init_env_for_zk: zoo_wexists failed, add %s to gray list\", idc.c_str());\n        add_gray_idc(idc);\n    }\n}", "CodeBleu_score": 45.520591102422934}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    # Combine the username and password\n    credential = f\"{username}:{password}\"\n    # Hash the credential using SHA-1\n    hashed_credential = hashlib.sha1(credential.encode()).digest()\n    # Encode the hashed credential in base64\n    encoded_credential = base64.b64encode(hashed_credential).decode().strip()\n    # Return the credential in the format \"username:base64_hash\"\n    return f\"digest:{username}:{encoded_credential}\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 15.499206057469712}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    # Combine the username and password\n    credential = f\"{username}:{password}\"\n    # Hash the credential using SHA-1\n    hashed_credential = hashlib.sha1(credential.encode()).digest()\n    # Encode the hashed credential in base64\n    encoded_credential = base64.b64encode(hashed_credential).decode().strip()\n    # Return the credential in the format \"username:base64_hash\"\n    return f\"{username}:{encoded_credential}\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 15.859140771723492}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    cred_hash = hashlib.sha1((username + \":\" + password).encode()).digest()\n    cred_hash = base64.b64encode(cred_hash).strip().decode()\n    credential = username + \":\" + cred_hash\n    return credential\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.01759040700426}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    if self.zk is None:\n        return False\n    lock_path = self.get_lock_path()\n    self.zk.sync(lock_path)\n    lock_value = self.zk.get(lock_path)[0]\n    return lock_value == self.id\n\n", "CodeBleu_score": 37.07572936252564}, {"code": "def holds_lock(self)\n\t\n    if not self.zk_client:\n        return False\n    lock_path = self.get_lock_path()\n    self.zk_client.sync(lock_path)\n    lock_value = self.zk_client.get(lock_path)[0]\n    return lock_value == self.instance_id.encode()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.13698127457131}, {"code": "def holds_lock(self)\n\t\n    if not self.zk_client:\n        return False\n    lock_path = self.lock_path()\n    self.zk_client.sync(lock_path)\n    lock_value = self.zk_client.get(lock_path)[0]\n    return lock_value == self.instance_id\n\n\n\n", "CodeBleu_score": 34.84398859888117}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    if self.processing_element is not None and self.holds_lock():\n        transaction = self.client.transaction()\n        transaction.delete(self._lock_path)\n        transaction.delete(self._entry_path)\n        try:\n            transaction.commit()\n        except kazoo.exceptions.NoNodeError:\n            return False\n        self.processing_element = None\n        return True\n    return False\n\n", "CodeBleu_score": 45.461290943241984}, {"code": "def consume(self)\n\t\n    if self.processing_element is not None and self.holds_lock():\n        transaction = self.client.transaction()\n        transaction.delete(self._lock_path)\n        transaction.delete(self.path)\n        try:\n            transaction.commit()\n            self.processing_element = None\n            return True\n        except:\n            return False\n\n", "CodeBleu_score": 44.55044777218219}, {"code": "def consume(self)\n\t\n    if self.processing_element is not None and self.holds_lock():\n        with self.client.transaction() as transaction:\n            transaction.delete(self._lock_path)\n            transaction.delete(self._path)\n        self.processing_element = None\n        return True\n    return False\n\n", "CodeBleu_score": 38.96194428352281}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    header, buffer, offset = self._read_header(read_timeout)\n    self.logger.log(BLATHER, \"Read header: %s\", header)\n\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping\")\n        self._outstanding_ping = False\n    elif header.xid == AUTH_XID:\n        self._handle_auth_response(header, buffer, offset)\n    elif header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n    else:\n        self._read_response(header, buffer, offset)\n\n", "CodeBleu_score": 38.752715027523124}, {"code": "def _read_socket(self, read_timeout)\n\t\n    try:\n        header, buffer, offset = self._read_header(read_timeout)\n    except Exception as exc:\n        self.logger.exception(\"Exception raised during read_header\")\n        raise exc\n\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping\")\n        self._outstanding_ping = False\n    elif header.xid == AUTH_XID:\n        self._read_auth(header, buffer, offset)\n    elif header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n    else:\n        self.logger.log(\n            BLATHER, \"Received header: %r\", header\n        )  # pragma: nocover\n        self._read_response(header, buffer, offset)\n\n    return True\n", "CodeBleu_score": 50.753729167689656}, {"code": "def _read_socket(self, read_timeout)\n\t\n    header, buffer, offset = self._read_header(read_timeout)\n    self.logger.log(BLATHER, \"Received header: %r\", header)\n\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping\")\n        self._outstanding_ping = False\n        return\n    elif header.xid == AUTH_XID:\n        if header.err:\n            self.logger.log(BLATHER, \"Received auth error %r\", header.err)\n            self._auth_exception = AuthFailedError()\n            self.client.handler.dispatch_callback(\n                Callback(\"auth\", self.client._state, (self._auth_exception,))\n            )\n        else:\n            self.logger.log(BLATHER, \"Received auth success\")\n            self._auth_exception = None\n            self.client.handler.dispatch_callback(\n                Callback(\"auth\", self.client._state, (None,))\n            )\n        return\n    elif header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n        return\n\n    self._read_response(header, buffer, offset)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 47.514597511532386}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.logger.info(\"Starting zk_loop\")\n    self.connection_stopped.clear()\n    try:\n        self.retry.retry(self.connect)\n    except Exception as e:\n        self.logger.warning(\"Connection to Zookeeper failed: %s\" % e)\n    else:\n        self.logger.info(\"Connected to Zookeeper\")\n        self.session_callback(self.client.STATE_CONNECTED)\n    finally:\n        self.logger.info(\"Stopping zk_loop\")\n        self.connection_stopped.set()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 39.72027516592299}, {"code": "def zk_loop(self)\n\t\n    self.logger.info(\"Starting ZK loop\")\n    self.connection_stopped.clear()\n\n    while not self.stopped:\n        try:\n            self.logger.info(\"Connecting to ZK\")\n            self.retry(self.connect)\n            self.logger.info(\"Connected to ZK\")\n            self.set_state(self.STATE_CONNECTED)\n            break\n        except Exception as e:\n            self.logger.warning(\"Failed to connect to ZK: %s\", e)\n            self.retry(self.connect)\n\n    self.logger.info(\"Stopping ZK loop\")\n    self.set_state(self.STATE_STOPPED)\n    self.session_callback(self.STATE_CLOSED)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.33316097715788}, {"code": "def zk_loop(self)\n\t\n    self.logger.info(\"Starting Zookeeper connection loop\")\n    self.connection_stopped.clear()\n    while not self.stopped.is_set():\n        try:\n            self.zk.start()\n        except Exception:\n            self.logger.warning(\"Failed to connect to Zookeeper, retrying...\")\n            if self.stopped.wait(timeout=self.retry_policy.next()):\n                break\n        else:\n            break\n    self.logger.info(\"Stopped Zookeeper connection loop\")\n    self.connection_stopped.set()\n    self.session_callback(zk.State.CLOSED)\n\n\n\n", "CodeBleu_score": 43.34016256412983}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    sorted_members = sorted(members)\n    sorted_partitions = sorted(partitions)\n    index = sorted_members.index(identifier)\n    return sorted_partitions[index::len(sorted_members)]\n\n\n\n\n", "CodeBleu_score": 35.701061449925966}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members = sorted(members)\n    partitions = sorted(partitions)\n    index = members.index(identifier)\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 39.65957835883439}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members = sorted(members)\n    partitions = sorted(partitions)\n    idx = members.index(identifier)\n    return partitions[idx::len(members)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 39.64689755031}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self.client.delete, self.create_path)\n    except NoNodeError:\n        pass\n    except Exception as e:\n        if isinstance(e, KazooRetry):\n            raise\n        self._best_effort_cleanup()\n        raise\n    self.participating = False\n\n", "CodeBleu_score": 43.810295737421704}, {"code": "def leave(self)\n\t\n    self._retry(self.client.retry(self.client.delete, self.create_path))\n    self._best_effort_cleanup()\n    self.participating = False\n\n", "CodeBleu_score": 44.46546930687683}, {"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self.client.delete, self.create_path)\n    except NoNodeError:\n        pass\n    else:\n        self.participating = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 42.45088047569854}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t    try {\n        if (!statusServer()) {\n            startServer();\n        }\n        return new Result(true, \"HDFS over FTP server started successfully\");\n    } catch (Exception e) {\n        return new Result(false, e.getMessage());\n    }\n}", "CodeBleu_score": 33.53698914612265}, {"code": "public Result start(){\n\t    try {\n        if (!isRunning()) {\n            startServer();\n        }\n        return Result.success();\n    } catch (Exception e) {\n        return Result.error(e.getMessage());\n    }\n}", "CodeBleu_score": 24.50005659336296}, {"code": "public Result start(){\n\t    try {\n        if (statusServer() == false) {\n            server.start();\n            return new Result(true, \"Server started successfully\");\n        } else {\n            return new Result(false, \"Server already running\");\n        }\n    } catch (Exception e) {\n        return new Result(false, \"Error starting server: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 33.78862378509222}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t    if (server != null) {\n        try {\n            server.stop();\n            return new Result(true, \"Server stopped\");\n        } catch (Exception e) {\n            logger.error(\"Error stopping server\", e);\n            return new Result(false, \"Error stopping server\");\n        }\n    } else {\n        return new Result(false, \"Server not running\");\n    }\n}", "CodeBleu_score": 33.63484882853533}, {"code": "public Result stop(){\n\t    if (!isRunning()) {\n        return Result.failure(\"Server is not running\");\n    }\n    try {\n        server.stop();\n        return Result.success(\"Server stopped\");\n    } catch (Exception e) {\n        logger.error(\"Error stopping server\", e);\n        return Result.failure(\"Error stopping server: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 31.76498052143895}, {"code": "public Result stop(){\n\t    try {\n        if (ftpServer.isStopped()) {\n            return Result.success(\"The server is not running.\");\n        }\n        ftpServer.stop();\n        return Result.success(\"Server stopped.\");\n    } catch (Exception e) {\n        log.error(\"Error stopping server: {}\", e.getMessage());\n        return Result.failure(\"Error stopping server: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 40.20423796407818}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    List<Authority> authorities = getAuthorities();\n\n    // Check for no authorities at all\n    if (authorities == null) {\n        return null;\n    }\n\n    boolean someoneCouldAuthorize = false;\n    for (Authority authority : authorities) {\n        if (authority.canAuthorize(request)) {\n            someoneCouldAuthorize = true;\n\n            request = authority.authorize(request);\n\n            // Authorization failed, return null\n            if (request == null) {\n                return null;\n            }\n        }\n    }\n\n    if (someoneCouldAuthorize) {\n        return request;\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 77.33228114918748}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tList<Authority> authorities = getAuthorities();\n\n\t// check for no authorities at all\n\tif (authorities == null) {\n\t\treturn null;\n\t}\n\n\tboolean someoneCouldAuthorize = false;\n\tfor (Authority authority : authorities) {\n\t\tif (authority.canAuthorize(request)) {\n\t\t\tsomeoneCouldAuthorize = true;\n\n\t\t\trequest = authority.authorize(request);\n\n\t\t\t// authorization failed, return null\n\t\t\tif (request == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif (someoneCouldAuthorize) {\n\t\treturn request;\n\t} else {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 78.96798314404714}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    List<Authority> authorities = getAuthorities();\n\n    // check for no authorities at all\n    if (authorities == null) {\n        return null;\n    }\n\n    boolean someoneCouldAuthorize = false;\n    for (Authority authority : authorities) {\n        if (authority.canAuthorize(request)) {\n            someoneCouldAuthorize = true;\n\n            request = authority.authorize(request);\n\n            // authorization failed, return null\n            if (request == null) {\n                return null;\n            }\n        }\n\n    }\n\n    if (someoneCouldAuthorize) {\n        return request;\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 77.33228114918748}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t    try {\n        return getDfs().mkdirs(fullPath);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 48.09462545320303}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem fs = getDfs();\n        return fs.mkdirs(fullPath);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 65.07700130106436}, {"code": "public boolean mkdir(){\n\t  try {\n    FileSystem fs = getDfs();\n    return fs.mkdirs(fullPath);\n  } catch (IOException e) {\n    e.printStackTrace();\n    return false;\n  }\n}", "CodeBleu_score": 65.8313630821644}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t\t\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tdfs.delete(fullPath, true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 95.04522169548919}, {"code": "public boolean delete(){\n\t\t\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tdfs.delete(fullPath, true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 95.04522169548919}, {"code": "public boolean delete(){\n\t\t\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tdfs.delete(fullPath, true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 95.04522169548919}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t\t\ttry {\n\t\t\tFileSystem fs = FileSystem.get(conf);\n\t\t\treturn fs.rename(new Path(ftpFile.getAbsolutePath()), new Path(getParent() + \"/\" + ftpFile.getName()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 62.427612072272694}, {"code": "public boolean move(FtpFile ftpFile){\n\t\t\ttry {\n\t\t\tFileSystem fs = FileSystem.get(conf);\n\t\t\treturn fs.rename(new Path(ftpFile.getAbsolutePath()), new Path(parentDir, ftpFile.getName()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 61.14615275298153}, {"code": "public boolean move(FtpFile ftpFile){\n\t\t\ttry {\n\t\t\tFileSystem fs = FileSystem.get(getConf());\n\t\t\treturn fs.rename(new Path(ftpFile.getAbsolutePath()), new Path(getParent(), ftpFile.getName()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 54.21604631353478}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t\t\ttry {\n\t\t\tFileSystem fs = getFileSystem();\n\t\t\tFileStatus[] files = fs.listStatus(path);\n\t\t\tList<FtpFile> fileList = new ArrayList<FtpFile>();\n\t\t\tfor (FileStatus file : files) {\n\t\t\t\tString name = file.getPath().getName();\n\t\t\t\tString virtualPath = getVirtualPath(name);\n\t\t\t\tFtpFile ftpFile = new HdfsFtpFile(name, virtualPath, file.isDir(), file.getLen(), file.getModificationTime(), file.getOwner(), file.getGroup(), file.getPermission());\n\t\t\t\tfileList.add(ftpFile);\n\t\t\t}\n\t\t\treturn Collections.unmodifiableList(fileList);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"Error listing files\", e);\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 36.07351571821481}, {"code": "public List<FtpFile> listFiles(){\n\t\t\ttry {\n\t\t\tFileSystem fs = getDfs();\n\t\t\tFileStatus[] status = fs.listStatus(path);\n\t\t\tFtpFile[] files = new FtpFile[status.length];\n\t\t\tString base = getAbsolutePath();\n\t\t\tfor (int i = 0; i < status.length; i++) {\n\t\t\t\tFileStatus stat = status[i];\n\t\t\t\tString name = stat.getPath().getName();\n\t\t\t\tPath filePath = new Path(base + \"/\" + name);\n\t\t\t\tfiles[i] = new HdfsFtpFile(filePath, stat);\n\t\t\t}\n\t\t\treturn Arrays.asList(files);\n\t\t} catch (IOException e) {\n\t\t\tLOG.error(\"listFiles\", e);\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 39.09796512361438}, {"code": "public List<FtpFile> listFiles(){\n\t\t\ttry {\n\t\t\tFileSystem fs = FileSystem.get(conf);\n\t\t\tFileStatus[] stats = fs.listStatus(path);\n\t\t\tList<FtpFile> list = new ArrayList<FtpFile>();\n\n\t\t\tfor (FileStatus stat : stats) {\n\t\t\t\tString name = stat.getPath().getName();\n\t\t\t\tString path = stat.getPath().toString();\n\t\t\t\tlong size = stat.getLen();\n\t\t\t\tint type = stat.isDir() ? TYPE_DIRECTORY : TYPE_FILE;\n\t\t\t\tString virtualPath = baseDir.getVirtualPath() + name;\n\n\t\t\t\tlist.add(new HdfsFtpFile(name, path, size, type, virtualPath));\n\t\t\t}\n\n\t\t\treturn Collections.unmodifiableList(list);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"listFiles error\", e);\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 32.47932323417502}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t\t\tconfigured = true;\n\n\t\tuserDataProp = new Properties();\n\n\t\tFile userDataFile = getAbsolutePath();\n\n\t\tif (userDataFile.exists()) {\n\t\t\ttry {\n\t\t\t\tuserDataProp.load(new FileInputStream(userDataFile));\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\t\"Failed to load user data from \" + userDataFile, e);\n\t\t\t}\n\t\t}\n\n\t\tconvertDeprecatedPropertyNames();\n\t}", "CodeBleu_score": 43.05890035250341}, {"code": "public void configure(){\n\t\t\tconfigured = true;\n\n\t\tuserDataProp = new Properties();\n\n\t\ttry {\n\t\t\tFile userDataFile = new File(getAbsolutePath(USER_DATA_FILE));\n\n\t\t\tif (userDataFile.exists()) {\n\t\t\t\tFileInputStream fis = new FileInputStream(userDataFile);\n\t\t\t\tuserDataProp.load(fis);\n\t\t\t\tfis.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\"Failed to load user data file: \" + getAbsolutePath(USER_DATA_FILE), e);\n\t\t}\n\n\t\tconvertDeprecatedPropertyNames();\n\t}", "CodeBleu_score": 54.18621914282793}, {"code": "public void configure(){\n\t        // Set the configuration state to true\n        isConfigured = true;\n\n        // Initialize the user data properties\n        userDataProp = new Properties();\n\n        // Check if the user data file exists\n        if (userDataFile.exists()) {\n            // Load the properties from the user data file\n            try {\n                FileInputStream fis = new FileInputStream(userDataFile);\n                userDataProp.load(fis);\n                fis.close();\n            } catch (IOException e) {\n                // If an IOException occurs, throw an FtpServerConfigurationException with the file path and error details\n                throw new FtpServerConfigurationException(\"Failed to load user data from file \" + userDataFile.getAbsolutePath(), e);\n            }\n        }\n\n        // Convert any deprecated property names\n        convertDeprecatedPropertyNames();\n    }", "CodeBleu_score": 55.71116470804947}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t    File parent = userDataFile.getParentFile();\n    if (parent != null && !parent.exists()) {\n        if (!parent.mkdirs()) {\n            throw new ConfigurationException(\"Failed to create directory for user data file: \" + parent.getAbsolutePath());\n        }\n    }\n    try {\n        FileOutputStream fos = new FileOutputStream(userDataFile);\n        try {\n            store(fos, \"FTP Server user data\");\n        } finally {\n            close(fos);\n        }\n    } catch (IOException e) {\n        LOG.error(\"Failed to save user data to file: \" + userDataFile.getAbsolutePath(), e);\n        throw new FtpException(\"Failed to save user data to file: \" + userDataFile.getAbsolutePath(), e);\n    }\n}", "CodeBleu_score": 41.21270342200337}, {"code": "private void saveUserData() throws FtpException{\n\t    File parent = userDataFile.getParentFile();\n    if (!parent.exists()) {\n        if (!parent.mkdirs()) {\n            throw new FtpException(\"Unable to create directory for user data file\");\n        }\n    }\n    try {\n        FileOutputStream fos = new FileOutputStream(userDataFile);\n        try {\n            store(fos, \"FTP Server user data\");\n        } finally {\n            fos.close();\n        }\n    } catch (IOException e) {\n        logger.log(Level.WARNING, \"Failed to save user data\", e);\n        throw new FtpException(\"Failed to save user data\", e);\n    }\n}", "CodeBleu_score": 40.92888099684407}, {"code": "private void saveUserData() throws FtpException{\n\t    File userDataFile = new File(userDataPath);\n    if (!userDataFile.getParentFile().exists()) {\n        if (!userDataFile.getParentFile().mkdirs()) {\n            throw new ConfigurationException(\"Could not create user data directory: \" + userDataFile.getParentFile());\n        }\n    }\n\n    try {\n        FileOutputStream fos = new FileOutputStream(userDataFile);\n        userData.store(fos, \"FTP Server user data\");\n        fos.close();\n    } catch (IOException e) {\n        logger.log(Level.WARNING, \"Could not save user data: \" + e.getMessage());\n        throw new FtpException(\"Could not save user data\");\n    }\n}", "CodeBleu_score": 36.350896332333576}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    debug(\"Opening file \" + path + \" with buffer size \" + bufferSize);\n    Path qualifiedPath = qualify(path);\n    try {\n        return new FSDataInputStream(new BufferedInputStream(\n                new FileInputStream(qualifiedPath.toString()), bufferSize));\n    } catch (Exception e) {\n        warn(\"Error opening file \" + path + \": \" + e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 30.933485281891354}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    debug(\"open(%s, %d)\", path, bufferSize);\n    path = qualify(path);\n    try {\n        return new FSDataInputStream(new BufferedInputStream(\n                store.open(path.toString(), bufferSize), bufferSize));\n    } catch (Exception e) {\n        warn(\"open(%s): %s\", path, e);\n        return null;\n    }\n}", "CodeBleu_score": 33.85005791023313}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t        debug(\"open(%s, %d)\", path, bufferSize);\n        path = qualify(path);\n        try {\n            return new FSDataInputStream(new BufferedInputStream(store.open(path.toString()), bufferSize));\n        } catch (Exception e) {\n            warn(\"open(%s, %d) failed\", path, bufferSize);\n            return null;\n        }\n    }", "CodeBleu_score": 34.470390505286474}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n\n    FilerProto.Entry entry = seaweedFileSystemStore.lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    seaweedFileSystemStore.rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 99.91986673198495}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n\n    FilerProto.Entry entry = seaweedFileSystemStore.lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    seaweedFileSystemStore.rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 99.91986673198495}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\n    LOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n    FilerProto.Entry entry = seaweedFileSystemStore.lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    seaweedFileSystemStore.rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 99.96446340328713}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t    if (capability.toLowerCase().equals(\"hsync\")) {\n        return supportFlush;\n    }\n    if (capability.toLowerCase().equals(\"hflush\")) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 46.14268216868396}, {"code": "public boolean hasCapability(String capability){\n\t    if (capability.toLowerCase().equals(\"hsync\")) {\n        return supportFlush;\n    } else if (capability.toLowerCase().equals(\"hflush\")) {\n        return supportFlush;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 33.24242060799634}, {"code": "public boolean hasCapability(String capability){\n\t    capability = capability.toLowerCase();\n    if (capability.equals(\"hflush\")) {\n        return supportFlush;\n    } else if (capability.equals(\"hsync\")) {\n        return supportSync;\n    }\n    return false;\n}", "CodeBleu_score": 34.73643503949674}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t        if (offset == lastFlushOffset) {\n            return;\n        }\n        if (offset < lastFlushOffset) {\n            throw new IOException(\"Tried to flush written bytes to the service with an offset (\" + offset + \") that is smaller than the last flush offset (\" + lastFlushOffset + \")\");\n        }\n        if (offset > lastFlushOffset) {\n            // Write metadata to the filer\n            try {\n                filerClient.recordAppend(handle, offset, writtenBytes.size());\n            } catch (Throwable t) {\n                throw new IOException(t);\n            }\n            lastFlushOffset = offset;\n        }\n    }", "CodeBleu_score": 39.512851059473206}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t        if (offset > lastFlushOffset) {\n            final long length = offset - lastFlushOffset;\n            if (length > 0) {\n                final byte[] bytes = Arrays.copyOfRange(bytesWritten, (int) lastFlushOffset, (int) offset);\n                filerClient.write(path, offset, bytes);\n            }\n            lastFlushOffset = offset;\n        }\n    }", "CodeBleu_score": 30.916453720951054}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t        if (offset <= lastFlushOffset) {\n            return;\n        }\n        if (lastFlushOffset == -1) {\n            lastFlushOffset = offset;\n            return;\n        }\n        // write metadata\n        try {\n            filerClient.write(path, offset, lastFlushOffset);\n        } catch (Throwable t) {\n            throw new IOException(\"Failed to write metadata to filer\", t);\n        }\n        lastFlushOffset = offset;\n    }", "CodeBleu_score": 38.291571145160965}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    int bytesToWrite = bufferToWrite.limit() - bufferToWrite.position();\n    bufferToWrite.flip();\n\n    WriteOperation writeOperation = new WriteOperation(writePosition, bytesToWrite);\n    writeOperation.task = completionService.submit(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n            try {\n                return service.write(bufferToWrite, writePosition);\n            } finally {\n                bufferToWrite.rewind();\n            }\n        }\n    });\n\n    writeOperations.add(writeOperation);\n    shrinkWriteOperationQueue();\n\n    return bytesToWrite;\n}", "CodeBleu_score": 47.558271936266024}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    // Flip the buffer to prepare for reading\n    bufferToWrite.flip();\n    // Calculate the byte length of the buffer\n    final int byteLength = bufferToWrite.limit();\n    // Ensure the task queue is not overloaded\n    while (writeOperations.size() > maxWriteOperations) {\n        try {\n            waitForTaskToComplete();\n        } catch (IOException e) {\n            throw e;\n        }\n    }\n    // Submit a write task to the completion service\n    final WriteTask writeTask = new WriteTask(bufferToWrite, writePosition, byteLength);\n    completionService.submit(writeTask);\n    // Record the write operation\n    writeOperations.add(writeTask);\n    // Manage the operation queue\n    shrinkWriteOperationQueue();\n    // Return the number of bytes written\n    return byteLength;\n}", "CodeBleu_score": 34.21764429608797}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t        int length = bufferToWrite.limit();\n        bufferToWrite.flip();\n\n        if (writeOperations.size() > MAX_QUEUE_SIZE) {\n            shrinkWriteOperationQueue();\n        }\n\n        final WriteOperation writeOperation = new WriteOperation(writePosition, length);\n        writeOperations.add(writeOperation);\n\n        writeOperation.task = completionService.submit(new Callable<Void>() {\n            @Override\n            public Void call() throws Exception {\n                try {\n                    writeData(bufferToWrite, writePosition);\n                } catch (IOException e) {\n                    lastError = e;\n                    throw e;\n                } finally {\n                    bufferToWrite.clear();\n                }\n                return null;\n            }\n        });\n\n        return length;\n    }", "CodeBleu_score": 40.13657749167433}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t    while (true) {\n        Future<?> f = completionService.poll();\n        if (f == null) {\n            return;\n        }\n        try {\n            f.get();\n        } catch (ExecutionException e) {\n            throw new IOException(e.getCause());\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IOException(e);\n        }\n    }\n}", "CodeBleu_score": 34.746587327795666}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    while (true) {\n        try {\n            Future<?> f = completionService.poll(POLL_TIMEOUT, TimeUnit.MILLISECONDS);\n            if (f == null) {\n                return;\n            }\n            f.get();\n        } catch (ExecutionException e) {\n            throw new IOException(e.getCause());\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        }\n    }\n}", "CodeBleu_score": 34.64807792814773}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    try {\n        while (completionService.poll() == null) {\n            Thread.sleep(10);\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 23.06595189605017}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t  while (true) {\n    WriteOperation writeOperation = writeOperationQueue.peek();\n    if (writeOperation == null) {\n      return;\n    }\n    if (writeOperation.isDone()) {\n      writeOperationQueue.remove();\n      totalAppendOffset += writeOperation.getLength();\n    } else {\n      return;\n    }\n  }\n}", "CodeBleu_score": 30.51082403160405}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    Iterator<WriteOperation> iterator = writeOperationQueue.iterator();\n    while (iterator.hasNext()) {\n        WriteOperation writeOperation = iterator.next();\n        if (writeOperation.isDone()) {\n            try {\n                totalAppendOffset += writeOperation.getLength();\n            } catch (Exception e) {\n                throw new IOException(e);\n            }\n            iterator.remove();\n        }\n    }\n}", "CodeBleu_score": 38.968361182709785}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    while (!writeOperationQueue.isEmpty() && writeOperationQueue.peek().isDone()) {\n        WriteOperation writeOperation = writeOperationQueue.remove();\n        totalAppendOffset += writeOperation.getLength();\n    }\n}", "CodeBleu_score": 27.934152655482926}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t\t\tif (user == null) {\n\t\t\tthrow new IllegalArgumentException(\"User must not be null\");\n\t\t}\n\t\tif (user.getHomeDirectory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"User home directory must not be null\");\n\t\t}\n\t\thomePath = user.getHomeDirectory();\n\t\tthis.user = user;\n\t}", "CodeBleu_score": 69.60690409884856}, {"code": "protected HdfsFileSystemView(User user){\n\t\t\tif (user == null) {\n\t\t\tthrow new IllegalArgumentException(\"User must not be null\");\n\t\t}\n\t\tif (user.getHomeDirectory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"User home directory must not be null\");\n\t\t}\n\t\thomePath = user.getHomeDirectory();\n\t\tthis.user = user;\n\t}", "CodeBleu_score": 69.60690409884856}, {"code": "protected HdfsFileSystemView(User user){\n\t\t\tif (user == null) {\n\t\t\tthrow new IllegalArgumentException(\"User must not be null\");\n\t\t}\n\t\tHdfsFile homeDir = (HdfsFile) user.getHomeDirectory();\n\t\tif (homeDir == null) {\n\t\t\tthrow new IllegalArgumentException(\"Home directory must not be null\");\n\t\t}\n\t\thomePath = homeDir.getAbsolutePath();\n\t\tthis.user = user;\n\t}", "CodeBleu_score": 59.37968541442776}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath = Paths.get(dir);\n    if (newPath.isAbsolute()) {\n        currentPath = newPath;\n    } else {\n        currentPath = currentPath.resolve(newPath);\n    }\n    if (currentPath.getParent().equals(root)) {\n        currentPath = root;\n    }\n    if (Files.isDirectory(currentPath)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 23.475664210163455}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath;\n    if (dir.startsWith(\"/\")) {\n        newPath = Path.of(dir);\n    } else {\n        newPath = Path.of(currentPath.toString(), dir);\n    }\n    if (newPath.getParent().equals(rootPath)) {\n        return false;\n    }\n    if (Files.isDirectory(newPath)) {\n        currentPath = newPath;\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 28.426201745916828}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath;\n    if (dir.startsWith(\"/\")) {\n        newPath = Path.of(dir);\n    } else {\n        newPath = currentPath.resolve(dir);\n    }\n    if (newPath.startsWith(rootPath)) {\n        if (Files.isDirectory(newPath)) {\n            currentPath = newPath;\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 19.59837966423339}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.host = host;\n    this.port = port;\n    this.grpcPort = grpcPort;\n    this.conf = conf;\n    this.filerClient = new FilerClient(host, port, grpcPort);\n    this.accessVolumeServerByFilerProxy = conf.getBoolean(\"weedfs.access.volume.server.by.filer.proxy\", false);\n    this.accessVolumeServerByPublicUrl = conf.getBoolean(\"weedfs.access.volume.server.by.public.url\", false);\n}", "CodeBleu_score": 41.76603288461176}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.host = host;\n    this.port = port;\n    this.grpcPort = grpcPort;\n    this.conf = conf;\n    this.filerClient = new FilerClient(host, port, grpcPort);\n    this.accessVolumeServerByPublicUrl = conf.getBoolean(SeaweedConstants.ACCESS_VOLUME_SERVER_BY_PUBLIC_URL, false);\n    this.accessVolumeServerByFilerProxy = conf.getBoolean(SeaweedConstants.ACCESS_VOLUME_SERVER_BY_FILER_PROXY, false);\n    if (accessVolumeServerByPublicUrl) {\n        this.volumeServerAccessMode = VolumeServerAccessMode.PublicUrl;\n    } else if (accessVolumeServerByFilerProxy) {\n        this.volumeServerAccessMode = VolumeServerAccessMode.FilerProxy;\n    } else {\n        this.volumeServerAccessMode = VolumeServerAccessMode.Direct;\n    }\n}", "CodeBleu_score": 39.757306738555876}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.host = host;\n    this.port = port;\n    this.grpcPort = grpcPort;\n    this.conf = conf;\n    this.filerClient = new FilerClient(host, grpcPort, port);\n    this.accessVolumeServerByFilerProxy = conf.getBoolean(\n            SeaweedFileSystem.ACCESS_VOLUME_SERVER_BY_FILER_PROXY,\n            SeaweedFileSystem.ACCESS_VOLUME_SERVER_BY_FILER_PROXY_DEFAULT);\n    this.accessVolumeServerByPublicUrl = conf.getBoolean(\n            SeaweedFileSystem.ACCESS_VOLUME_SERVER_BY_PUBLIC_URL,\n            SeaweedFileSystem.ACCESS_VOLUME_SERVER_BY_PUBLIC_URL_DEFAULT);\n}", "CodeBleu_score": 32.107264729439436}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\n        LOG.debug(\"openFileForRead: {}\", path);\n\n        FilerProto.Entry entry = lookupEntry(path);\n        if (entry == null) {\n            throw new FileNotFoundException(path.toString());\n        }\n\n        return new SeaweedHadoopInputStream(filerClient, statistics, path);\n\n    }", "CodeBleu_score": 74.60539558688596}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\n        LOG.debug(\"Opening file for read: {}\", path);\n\n        FilerProto.Entry entry = lookupEntry(path);\n\n        if (entry == null) {\n\n            throw new FileNotFoundException(path.getName());\n\n        }\n\n        return new SeaweedHadoopInputStream(filerClient, statistics, path);\n\n    }", "CodeBleu_score": 74.19594686483637}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\n        LOG.debug(\"Opening file {} for read\", path);\n\n        FilerProto.Entry entry = lookupEntry(path);\n\n        if (entry == null) {\n            throw new FileNotFoundException(path.toString());\n        }\n\n        return new SeaweedHadoopInputStream(filerClient, statistics, path);\n\n    }", "CodeBleu_score": 74.15200604421544}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        this.hostName = InetAddress.getLocalHost().getHostName();\n    }\n    catch (UnknownHostException e) {\n        this.hostName = \"localhost\";\n    }\n    this.numThreadsPerMap = conf.getInt(\"mapred.tasktracker.tasks.num\", 1);\n    this.numFilesPerThread = conf.getInt(\"mapred.tasktracker.files.per.thread\", 1);\n    this.threadPool = Executors.newFixedThreadPool(this.numThreadsPerMap);\n    Iterator<Thread> it = this.threadPool.iterator();\n    while (it.hasNext()) {\n        it.next().setDaemon(true);\n    }\n}", "CodeBleu_score": 37.67841517229236}, {"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        this.localHost = InetAddress.getLocalHost().getHostName();\n    }\n    catch (Exception e) {\n        this.localHost = \"localhost\";\n    }\n    this.numThreadsPerMap = conf.getInt(\"mapred.map.tasks\", 1);\n    this.numFilesPerThread = conf.getInt(\"mapred.map.files.per.thread\", 1);\n    this.threadPool = Executors.newFixedThreadPool(this.numThreadsPerMap, new DaemonThreadFactory());\n}", "CodeBleu_score": 42.070466870718114}, {"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        this.localHostName = InetAddress.getLocalHost().getHostName();\n    }\n    catch (UnknownHostException e) {\n        this.localHostName = \"localhost\";\n    }\n    this.numThreadsPerMap = conf.getInt(MRJobConfig.NUM_MAPS, 1);\n    this.numFilesPerThread = conf.getInt(MRJobConfig.NUM_FILES_PER_THREAD, 1);\n    this.threadPool = Executors.newFixedThreadPool(this.numThreadsPerMap, new ThreadFactory() {\n        private int count = 0;\n\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            t.setName(\"MRJobThread-\" + (this.count++));\n            return t;\n        }\n    });\n}", "CodeBleu_score": 43.53971983624133}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\");\n    }\n  }", "CodeBleu_score": 94.23896749872512}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\");\n    }\n  }", "CodeBleu_score": 94.23896749872512}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\");\n    }\n  }", "CodeBleu_score": 94.23896749872512}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\t    String current = getCurrent();\n    if (!isContextValid(current)) {\n        current = build(context);\n        setCurrent(current);\n    } else if (!current.contains(context)) {\n        current = current + \",\" + context;\n        setCurrent(current);\n    }\n}", "CodeBleu_score": 21.80967333146537}, {"code": "public static void setContext(String context) throws Exception{\n\t    // Get the current caller context\n    String currentContext = getCurrent();\n\n    // Check if the current context is invalid or not set\n    if (!isContextValid(currentContext)) {\n        // If the current context is invalid or not set, create a new caller context using the provided context\n        build(context);\n    } else {\n        // If the current context is valid, check if it already includes the provided context\n        if (!currentContext.contains(context)) {\n            // If the current context does not already include the provided context, append the new context to the existing one\n            String newContext = currentContext + \" \" + context;\n            // Set the new caller context\n            setCurrent(newContext);\n        }\n    }\n}", "CodeBleu_score": 20.40669945360345}, {"code": "public static void setContext(String context) throws Exception{\n\t    String currentContext = getCurrent();\n    if (!isContextValid(currentContext)) {\n        build(context);\n        return;\n    }\n\n    if (!currentContext.contains(\"signature=\")) {\n        currentContext += \"&\" + context;\n        setCurrent(currentContext);\n    }\n}", "CodeBleu_score": 20.56511370294748}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t  // Connect\n  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n\n  // Delete file\n  auto uri_path = uri.to_path();\n  int rc = hdfsDelete(fs, uri_path.c_str());\n  if (rc < 0) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot delete file \") + uri_path + \"; \" +\n        std::string(hdfsGetLastError())));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 62.47054654773119}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_string().c_str());\n  if (rc != 0) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot delete file \") + uri.to_string() +\n        \"; \" + std::string(hdfsGetLastError())));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 67.24504112148306}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_path().c_str());\n  if (rc < 0) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot delete file \") + uri.to_string() +\n        \"; \" + libhdfs_->status()));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 76.07567452812816}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    hdfsFile file = libhdfs_->hdfsOpenFile(\n        fs, uri.to_path().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n    if (file == NULL) {\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot open file \" + uri.to_string() + \" for syncing\"));\n    }\n    if (libhdfs_->hdfsHFlush(fs, file) == -1) {\n      libhdfs_->hdfsCloseFile(fs, file);\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot flush file \" + uri.to_string() + \" for syncing\"));\n    }\n    libhdfs_->hdfsCloseFile(fs, file);\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 54.715224253297926}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    hdfsFile file = libhdfs_->hdfsOpenFile(\n        fs, uri.to_path().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n    if (file == nullptr) {\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot sync; File opening error on \" + uri.to_string()));\n    }\n    ret = libhdfs_->hdfsHFlush(fs, file);\n    if (ret == -1) {\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot sync; File flushing error on \" + uri.to_string()));\n    }\n    libhdfs_->hdfsCloseFile(fs, file);\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 53.65304147786982}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    hdfsFile file = libhdfs_->hdfsOpenFile(\n        fs, uri.to_path().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n    if (file == NULL) {\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot open file \" + uri.to_string() + \" for syncing\"));\n    }\n    ret = libhdfs_->hdfsHFlush(fs, file);\n    if (ret == -1) {\n      libhdfs_->hdfsCloseFile(fs, file);\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot flush file \" + uri.to_string() + \" for syncing\"));\n    }\n    libhdfs_->hdfsCloseFile(fs, file);\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 54.65494334455406}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  RETURN_NOT_OK(init());\n\n  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n\n  int ret = 0;\n  hdfsFileInfo* fileInfo = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (fileInfo == nullptr) {\n    RETURN_NOT_OK(libhdfs_->status());\n  }\n\n  if (fileInfo->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size; Path is not a file: \" +\n                    uri.to_string())));\n  }\n\n  *nbytes = static_cast<uint64_t>(fileInfo->mSize);\n  libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n  return Status::Ok();\n}", "CodeBleu_score": 63.70651246208035}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n  hdfsFileInfo* file_info = nullptr;\n  RETURN_NOT_OK(libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str(), &file_info));\n  RETURN_NOT_OK(libhdfs_->status());\n  if (file_info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Failed to get file info for \" + uri.to_string())));\n  }\n  if (!file_info->mIsDirectory) {\n    *nbytes = static_cast<uint64_t>(file_info->mSize);\n    libhdfs_->hdfsFreeFileInfo(file_info, 1);\n    return Status::Ok();\n  }\n  libhdfs_->hdfsFreeFileInfo(file_info, 1);\n  return LOG_STATUS(Status_HDFSError(\n      std::string(\"Path is a directory: \" + uri.to_string())));\n}", "CodeBleu_score": 60.659047876604056}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n\n  hdfsFileInfo* file_info = nullptr;\n  RETURN_NOT_OK(libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str(), &file_info));\n  if (file_info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Error getting file info\"));\n  }\n\n  if (file_info->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(file_info, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size; Not a file: \") + uri.to_string()));\n  }\n\n  *nbytes = static_cast<uint64_t>(file_info->mSize);\n  libhdfs_->hdfsFreeFileInfo(file_info, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 64.73998579695058}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String zkQuorum = null;\n    String znodeParent = null;\n\n    String[] cfgPairs = hbaseCfgString.split(\",\");\n    for (String cfgPair : cfgPairs) {\n        String[] parts = cfgPair.split(\"=\", 2);\n        if (parts.length != 2) {\n            continue;\n        }\n        String key = parts[0].trim();\n        String value = parts[1].trim();\n\n        if (key.equalsIgnoreCase(\"hbase.zookeeper.quorum\")) {\n            zkQuorum = value;\n        } else if (key.equalsIgnoreCase(\"zookeeper.znode.parent\")) {\n            znodeParent = value;\n        }\n    }\n\n    if (zkQuorum == null) {\n        throw new IllegalArgumentException(\"Missing 'hbase.zookeeper.quorum' in HBase configuration string.\");\n    }\n\n    // Ensure Zookeeper quorum includes the port number, defaulting to 2181 if not specified\n    String[] zkServers = zkQuorum.split(\",\");\n    StringBuilder zkQuorumBuilder = new StringBuilder();\n    for (String zkServer : zkServers) {\n        if (zkServer.contains(\":\")) {\n            zkQuorumBuilder.append(zkServer).append(\",\");\n        } else {\n            zkQuorumBuilder.append(zkServer).append(\":2181,\");\n        }\n    }\n    zkQuorum = zkQuorumBuilder.substring(0, zkQuorumBuilder.length() - 1);\n\n    // If Znode parent is not provided, use a predefined value\n    if (znodeParent == null) {\n        znodeParent = \"/hbase\";\n    }\n\n    return new Pair<>(zkQuorum, znodeParent);\n}", "CodeBleu_score": 32.38931628091352}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String quorum = null;\n    String znodeParent = null;\n    String[] hbaseCfg = hbaseCfgString.split(\";\");\n    for (String cfg : hbaseCfg) {\n        String[] cfgPair = cfg.split(\"=\");\n        if (cfgPair.length != 2) {\n            continue;\n        }\n        String key = cfgPair[0];\n        String value = cfgPair[1];\n        if (key.equals(\"hbase.zookeeper.quorum\")) {\n            quorum = value;\n        } else if (key.equals(\"zookeeper.znode.parent\")) {\n            znodeParent = value;\n        }\n    }\n    if (quorum == null) {\n        throw new IllegalArgumentException(\"Invalid HBase configuration: missing hbase.zookeeper.quorum\");\n    }\n    if (!quorum.contains(\":\")) {\n        quorum += \":2181\";\n    }\n    if (znodeParent == null) {\n        znodeParent = \"/hbase\";\n    }\n    return new Pair<>(quorum, znodeParent);\n}", "CodeBleu_score": 31.17109232806003}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String quorum = \"\";\n    String znodeParent = \"\";\n\n    // Parse the HBase configuration string\n    String[] cfgPairs = hbaseCfgString.split(\",\");\n    for (String cfgPair : cfgPairs) {\n        String[] keyValue = cfgPair.split(\"=\");\n        String key = keyValue[0];\n        String value = keyValue[1];\n\n        // Extract the Zookeeper quorum and znode parent values\n        if (key.equals(\"hbase.zookeeper.quorum\")) {\n            quorum = value;\n        } else if (key.equals(\"zookeeper.znode.parent\")) {\n            znodeParent = value;\n        }\n    }\n\n    // Ensure the quorum includes the port number, defaulting to 2181 if not specified\n    if (!quorum.contains(\":\")) {\n        quorum += \":2181\";\n    }\n\n    // If the znode parent is not provided, use a predefined value\n    if (znodeParent.isEmpty()) {\n        znodeParent = \"/hbase\";\n    }\n\n    return new Pair<>(quorum, znodeParent);\n}", "CodeBleu_score": 32.34549939772891}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t        Connection conn = null;\n        try {\n            conn = getJdbcConnection(cfg);\n            String fullTableName = cfg.getTable();\n            String namespace = cfg.getNamespace();\n            checkTable(conn, namespace, fullTableName, cfg.isThinClient());\n            PTable tableSchema = getTableSchema(conn, fullTableName);\n            List<String> columns = getColumns(tableSchema);\n            List<String> columnNames = cfg.getColumn();\n            for (String columnName : columnNames) {\n                if (!columns.contains(columnName)) {\n                    throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                            String.format(\"Column [%s] does not exist in table [%s]\", columnName, fullTableName));\n                }\n            }\n        }\n        catch (Throwable e) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                    \"Unable to validate the configuration for HbaseSQLWriter\", e);\n        }\n        finally {\n            if (conn != null) {\n                try {\n                    conn.close();\n                }\n                catch (SQLException e) {\n                    LOG.warn(\"Failed to close the JDBC connection\", e);\n                }\n            }\n        }\n    }", "CodeBleu_score": 46.26956125800007}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t        Connection conn = null;\n        try {\n            conn = getJdbcConnection(cfg);\n            String namespace = cfg.getNamespace();\n            String tableName = cfg.getTableName();\n            checkTable(conn, namespace, tableName, cfg.isThinClient());\n            PTable tableSchema = getTableSchema(conn, namespace + \".\" + tableName);\n            List<String> columnNames = cfg.getColumn();\n            for (String columnName : columnNames) {\n                if (!getColumnForColumnName(tableSchema, columnName).isPresent()) {\n                    throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                            \"Column \" + columnName + \" does not exist in table \" + tableName);\n                }\n            }\n        }\n        catch (SQLException e) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                    \"Unable to validate config for HbaseSQLWriter\", e);\n        }\n        finally {\n            if (conn != null) {\n                try {\n                    conn.close();\n                }\n                catch (SQLException e) {\n                    throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                            \"Unable to close JDBC connection for HbaseSQLWriter\", e);\n                }\n            }\n        }\n    }", "CodeBleu_score": 48.759152383966175}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    String tableName = cfg.getTableName();\n    String namespace = cfg.getNamespace();\n    boolean isThinClient = cfg.isThinClient();\n    Connection conn = null;\n    try {\n        conn = getJdbcConnection(cfg);\n        checkTable(conn, namespace, tableName, isThinClient);\n        PTable tableSchema = getTableSchema(conn, namespace + \".\" + tableName);\n        List<String> columns = getColumns(cfg);\n        for (String column : columns) {\n            if (!tableSchema.hasColumn(column)) {\n                throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.CONFIG_ERROR,\n                        String.format(\"Column [%s] does not exist in table [%s].\", column, tableName));\n            }\n        }\n    }\n    catch (SQLException e) {\n        throw asAddaxException(HbaseSQLWriterErrorCode.CONFIG_ERROR,\n                String.format(\"Unable to validate configuration for HbaseSQLWriter, please check the configuration and cluster status.\", e));\n    }\n    finally {\n        if (conn != null) {\n            try {\n                conn.close();\n            }\n            catch (SQLException e) {\n                LOG.warn(\"Failed to close JDBC connection\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 43.378439913327064}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (isNotBlank(kerberosPrincipal) && isNotBlank(kerberosKeytabFilePath)) {\n        try {\n            UserGroupInformation.setConfiguration(new Configuration());\n            loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            error(\"Kerberos login error\", e);\n            throw asAddaxException(format(\"Kerberos login error: %s\", e.getMessage()), e);\n        }\n    }\n}", "CodeBleu_score": 28.421437179074573}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n        Configuration conf = new Configuration();\n        conf.set(\"hadoop.security.authentication\", \"kerberos\");\n        conf.set(\"hadoop.security.authorization\", \"true\");\n        conf.set(\"dfs.namenode.kerberos.principal\", kerberosPrincipal);\n        conf.set(\"dfs.namenode.keytab.file\", kerberosKeytabFilePath);\n        try {\n            UserGroupInformation.setConfiguration(conf);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            String error = String.format(\"Failed to log in using principal: %s and keytab file: %s\", kerberosPrincipal, kerberosKeytabFilePath);\n            log.error(error, e);\n            throw new AddaxException(error, e);\n        }\n    }\n}", "CodeBleu_score": 53.95915829080893}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (kerberosPrincipal != null && !kerberosPrincipal.isBlank() && kerberosKeytabFilePath != null && !kerberosKeytabFilePath.isBlank()) {\n        try {\n            UserGroupInformation.setConfiguration(HadoopConfiguration.get());\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOGGER.error(\"Kerberos login error\", e);\n            throw new AddaxException(String.format(\"Kerberos login error, principal: %s, keytab: %s\", kerberosPrincipal, kerberosKeytabFilePath), e);\n        }\n    }\n}", "CodeBleu_score": 39.53745542108768}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            String colType = rsmd.getColumnTypeName(i);\n            if (colName == null || colType == null) {\n                throw new SQLException(\"Column name or type is null\");\n            }\n            colTypeMap.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n        }\n        return colTypeMap;\n    }", "CodeBleu_score": 44.714093697401424}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colType = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            if (colName == null) {\n                throw new SQLException(\"column name is null\");\n            }\n            int type = rsmd.getColumnType(i);\n            if (type == -1) {\n                throw new SQLException(\"column type is null\");\n            }\n            colType.put(colName, new ThinClientPTable.ThinClientPColumn(type, colName));\n        }\n        return colType;\n    }", "CodeBleu_score": 43.44206813705887}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> cols = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            String colType = rsmd.getColumnTypeName(i);\n            if (colName == null || colType == null) {\n                throw new SQLException(\"Null column name or type in result set\");\n            }\n            cols.put(colName, new ThinClientPTable.ThinClientPColumn(colType));\n        }\n        return cols;\n    }", "CodeBleu_score": 42.66472006676395}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR, \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.35140210030072}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.91872507973358}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.91872507973358}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\t    try {\n        if (checkHdfsFileType(filePath, fileType)) {\n            LOG.info(\"Add source file:{}\", filePath);\n            sourceFiles.add(filePath);\n        } else {\n            String message = String.format(\"Unsupported file type:%s\", filePath);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.UNSUPPORTED_FILE_TYPE, message);\n        }\n    } catch (Exception e) {\n        String message = String.format(\"Failed to add source file:%s\", filePath);\n        LOG.error(message, e);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);\n    }\n}", "CodeBleu_score": 45.581908292774415}, {"code": "private void addSourceFileByType(String filePath){\n\t    try {\n        if (checkHdfsFileType(filePath, fileType)) {\n            LOG.info(\"Adding source file: {}\", filePath);\n            sourceFiles.add(filePath);\n        } else {\n            String message = String.format(\"Unsupported file type: %s\", filePath);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.UNSUPPORTED_FILE_TYPE, message);\n        }\n    } catch (Exception e) {\n        String message = String.format(\"Error adding source file: %s\", filePath);\n        LOG.error(message, e);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);\n    }\n}", "CodeBleu_score": 45.400037749040166}, {"code": "private void addSourceFileByType(String filePath){\n\t    try {\n        if (checkHdfsFileType(filePath, fileType)) {\n            LOG.info(\"The file type of the file {} is {}.\", filePath, fileType);\n            sourceFiles.add(filePath);\n        } else {\n            String message = String.format(\"The file type of the file %s is not %s.\", filePath, fileType);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.UNSUPPORTED_FILE_TYPE, message);\n        }\n    } catch (Exception e) {\n        String message = String.format(\"Failed to add source file %s.\", filePath);\n        LOG.error(message, e);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);\n    }\n}", "CodeBleu_score": 49.43233117803176}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t    LOG.info(\"Start read sequence file:{}\", sourceSequenceFilePath);\n    try (SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(new Configuration()),\n            new Path(sourceSequenceFilePath), readerSliceConfig)) {\n        Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), readerSliceConfig);\n        Writable value = (Writable) ReflectionUtils.newInstance(reader.getValueClass(), readerSliceConfig);\n        while (reader.next(key, value)) {\n            if (StringUtils.isNotBlank(value.toString())) {\n                StorageReaderUtil.transportOneRecord(key, value, recordSender, taskPluginCollector);\n            }\n        }\n    } catch (Exception e) {\n        LOG.error(\"Read sequence file:{} failed.\", sourceSequenceFilePath, e);\n        throw new AddaxException(AddaxException.TASK_RUN_ERROR, \"Read sequence file: \" + sourceSequenceFilePath + \" failed.\", e);\n    }\n}", "CodeBleu_score": 49.81034500232945}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        try {\n            LOG.info(\"Start read sequence file: {}\", sourceSequenceFilePath);\n            FileSystem fs = FileSystem.get(new URI(sourceSequenceFilePath), readerSliceConfig);\n            SequenceFile.Reader reader = new SequenceFile.Reader(fs, new Path(sourceSequenceFilePath), readerSliceConfig);\n            Text key = new Text();\n            Text value = new Text();\n            while (reader.next(key, value)) {\n                if (isNotBlank(value.toString())) {\n                    transportOneRecord(key.toString(), value.toString(), recordSender, taskPluginCollector);\n                }\n            }\n            reader.close();\n            fs.close();\n        } catch (Exception e) {\n            LOG.error(\"Read sequence file: {} error\", sourceSequenceFilePath, e);\n            throw new AddaxException(\"Read sequence file: \" + sourceSequenceFilePath + \" error\", e);\n        }\n    }", "CodeBleu_score": 51.97915997523403}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        LOG.info(\"Start reading sequence file from {}\", sourceSequenceFilePath);\n        try (SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(new Configuration()),\n                new Path(sourceSequenceFilePath), readerSliceConfig)) {\n            Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), readerSliceConfig);\n            Writable value = (Writable) ReflectionUtils.newInstance(reader.getValueClass(), readerSliceConfig);\n            while (reader.next(key, value)) {\n                String valueString = value.toString();\n                if (StringUtils.isNotBlank(valueString)) {\n                    StorageReaderUtil.transportOneRecord(key.toString(), valueString, recordSender, taskPluginCollector);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"Read sequence file from {} failed\", sourceSequenceFilePath, e);\n            throw new AddaxException(AddaxException.TASK_ERROR, \"Read sequence file from \" + sourceSequenceFilePath + \" failed\", e);\n        }\n    }", "CodeBleu_score": 53.08606863779433}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        FileSystem fs = FileSystem.get(new Configuration());\n        FSDataInputStream in = fs.open(new Path(filepath));\n        if (specifiedFileType.equalsIgnoreCase(\"orc\")) {\n            return isORCFile(new Path(filepath), fs, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"rc\")) {\n            return isRCFile(filepath, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"sequence\")) {\n            return isSequenceFile(new Path(filepath), in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"parquet\")) {\n            return isParquetFile(new Path(filepath));\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"csv\")) {\n            return isCSVFile(filepath, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"text\")) {\n            return isTextFile(filepath, in);\n        }\n        else {\n            throw new AddaxException(ErrorCode.ILLEGAL_VALUE,\n                    String.format(\"The file type [%s] is not supported.\", specifiedFileType));\n        }\n    }\n    catch (Exception e) {\n        LOG.error(\"Failed to check the file type [{}].\", filepath, e);\n        throw asAddaxException(e);\n    }\n}", "CodeBleu_score": 47.72379127869147}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        FileSystem fs = FileSystem.get(hadoopConf);\n        Path file = new Path(filepath);\n        FSDataInputStream in = fs.open(file);\n        switch (specifiedFileType) {\n            case \"ORC\":\n                return isORCFile(file, fs, in);\n            case \"RC\":\n                return isRCFile(filepath, in);\n            case \"SEQUENCE\":\n                return isSequenceFile(file, in);\n            case \"PARQUET\":\n                return isParquetFile(file);\n            case \"CSV\":\n                return format(filepath).equals(\"CSV\");\n            case \"TEXT\":\n                return format(filepath).equals(\"TEXT\");\n            default:\n                return false;\n        }\n    } catch (IOException e) {\n        LOG.error(\"Error while checking file type for file [{}]: {}\", filepath, e.getMessage());\n        throw new AddaxException(\"Error while checking file type for file [\" + filepath + \"]: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 40.65202614186436}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        Configuration conf = new Configuration();\n        FileSystem fs = FileSystem.get(URI.create(filepath), conf);\n        Path file = new Path(filepath);\n        FSDataInputStream in = fs.open(file);\n\n        switch (specifiedFileType) {\n            case \"orc\":\n                return isORCFile(file, fs, in);\n            case \"rc\":\n                return isRCFile(filepath, in);\n            case \"seq\":\n                return isSequenceFile(file, in);\n            case \"parquet\":\n                return isParquetFile(file);\n            case \"csv\":\n                return format.equalsIgnoreCase(\"csv\");\n            case \"text\":\n                return format.equalsIgnoreCase(\"text\");\n            default:\n                throw new AddaxException(-100, \"Unsupported file type: \" + specifiedFileType);\n        }\n    } catch (IOException e) {\n        LOG.error(\"An error occurred while checking the file type: \" + e.getMessage());\n        throw new AddaxException(-100, \"An error occurred while checking the file type: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 39.40386611865502}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw new asAddaxException(\"Error closing HBase connection\", 500);\n        }\n    }\n}", "CodeBleu_score": 44.472505903995916}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw new asAddaxException(asAddaxException.CLOSE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 54.22788695688232}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw new asAddaxException(\"Could not close connection\", 1000);\n        }\n    }\n}", "CodeBleu_score": 44.052962262276004}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        }\n        catch (IOException e) {\n            throw new asAddaxException(asAddaxException.ErrorCode.CLOSE_ADMIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 54.11517203751585}, {"code": "public static void closeAdmin(Admin admin){\n\t        if (admin != null) {\n            try {\n                admin.close();\n            }\n            catch (IOException e) {\n                throw new AsAddaxException(AsAddaxException.ErrorCode.UNKNOWN_ERROR, e);\n            }\n        }\n    }", "CodeBleu_score": 50.524147638557906}, {"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw new AsAddaxException(AsAddaxException.ErrorCode.ADMIN_CLOSE_FAILED, e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 47.74016896656038}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        // Get the row key as a byte array\n        byte[] rowKey = cell.getRowArray();\n        // Get the timestamp of the cell\n        long timestamp = cell.getTimestamp();\n        // Get the column family as a byte array\n        byte[] family = cell.getFamilyArray();\n        // Get the qualifier as a byte array\n        byte[] qualifier = cell.getQualifierArray();\n        // Get the value as a byte array\n        byte[] value = cell.getValueArray();\n\n        // Add the row key as a column to the record\n        record.add(getByTypeName(rowKey, rowKeyType, rowKeyFormat));\n        // Add the timestamp as a column to the record\n        record.add(getTimestamp(timestamp));\n        // Add the column family as a column to the record\n        record.add(getByTypeName(family, columnFamilyType, columnFamilyFormat));\n        // Add the qualifier as a column to the record\n        record.add(getByTypeName(qualifier, columnQualifierType, columnQualifierFormat));\n        // Add the value as a column to the record\n        record.add(getByTypeName(value, columnValueType, columnValueFormat));\n    }", "CodeBleu_score": 23.886034654013905}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        String rowKey = Bytes.toString(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());\n        String family = Bytes.toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());\n        String qualifier = Bytes.toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());\n        long timestamp = cell.getTimestamp();\n        String columnValue = Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n\n        if (rowKeyType != null) {\n            record.addColumn(rowKeyType, rowKey);\n        } else {\n            record.addColumn(rowKeyFormat, rowKey);\n        }\n\n        if (familyType != null) {\n            record.addColumn(familyType, family);\n        } else {\n            record.addColumn(familyFormat, family);\n        }\n\n        if (qualifierType != null) {\n            record.addColumn(qualifierType, qualifier);\n        } else {\n            record.addColumn(qualifierFormat, qualifier);\n        }\n\n        if (timestampType != null) {\n            record.addColumn(timestampType, timestamp);\n        } else {\n            record.addColumn(timestampFormat, timestamp);\n        }\n\n        if (columnValueType != null) {\n            record.addColumn(columnValueType, columnValue);\n        } else {\n            record.addColumn(columnValueFormat, columnValue);\n        }\n    }", "CodeBleu_score": 27.784087654929984}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        String rowKey = Bytes.toString(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());\n        long timestamp = cell.getTimestamp();\n        String family = Bytes.toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());\n        String qualifier = Bytes.toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());\n        String value = Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n\n        if (rowKeyType != null) {\n            record.addColumn(rowKeyType.getName(), rowKey);\n        }\n\n        if (timestampType != null) {\n            record.addColumn(timestampType.getName(), timestamp);\n        }\n\n        if (familyType != null) {\n            record.addColumn(familyType.getName(), family);\n        }\n\n        if (qualifierType != null) {\n            record.addColumn(qualifierType.getName(), qualifier);\n        }\n\n        if (valueType != null) {\n            record.addColumn(valueType.getName(), value);\n        }\n    }", "CodeBleu_score": 26.648926379959804}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t        String startRowkey = configuration.get(Constants.USER_START_ROWKEY);\n        if (isBlank(startRowkey)) {\n            return new byte[0];\n        }\n        boolean isBinaryRowkey = getBool(configuration, Constants.IS_BINARY_ROWKEY, false);\n        return stringToBytes(startRowkey, isBinaryRowkey);\n    }", "CodeBleu_score": 55.79097423865136}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t        String startRowkey = configuration.get(Constants.USER_START_ROWKEY);\n        if (isBlank(startRowkey)) {\n            return new byte[0];\n        }\n        else {\n            boolean isBinaryRowkey = getBool(configuration, Constants.USER_BINARY_ROWKEY);\n            return stringToBytes(startRowkey, isBinaryRowkey);\n        }\n    }", "CodeBleu_score": 62.00217859767265}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t        String startRowkey = configuration.get(HBaseConfig.START_ROW_KEY);\n        boolean isBinaryRowkey = configuration.getBool(HBaseConfig.IS_BINARY_ROW_KEY);\n        if (isBlank(startRowkey)) {\n            return new byte[0];\n        }\n        else {\n            return stringToBytes(startRowkey, isBinaryRowkey);\n        }\n    }", "CodeBleu_score": 59.849880545472246}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(Constants.INNER_START_ROWKEY, \"\");\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    return Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 66.3512298441079}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(Constants.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    return Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 68.73514123415757}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(Constants.INNER_START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    return Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 68.76281882895377}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new TbQueueMsgHeaders();\n    record.headers().forEach(header -> this.headers.put(header.key(), header.value()));\n    this.data = record.value();\n}", "CodeBleu_score": 54.13133400426149}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    super(UUID.fromString(record.key()));\n    this.headers = new TbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 35.03436324428697}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new TbQueueMsgHeaders();\n    record.headers().forEach(header -> this.headers.put(header.key(), header.value()));\n    this.data = record.value();\n}", "CodeBleu_score": 54.13133400426149}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    TbKafkaSettings settings = tbTransportNotificationSettings.getKafkaSettings();\n    String clientId = tbTransportNotificationSettings.getServiceId();\n    TbQueueAdmin admin = new TbKafkaAdmin(settings, clientId);\n    TbQueueProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> template = new TbKafkaProducerTemplate<>(settings, clientId);\n    String defaultTopic = tbTransportNotificationSettings.getGetNotificationsTopic();\n    return new TbKafkaProducer<>(template, admin, defaultTopic);\n}", "CodeBleu_score": 42.42822722144125}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    TbKafkaProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> producerTemplate =\n            new TbKafkaProducerTemplate<>(settings.getKafkaSettings());\n    producerTemplate.setClientId(clientId);\n    producerTemplate.setDefaultTopic(settings.getGetNotificationsTopic());\n    producerTemplate.setAdmin(admin);\n    return producerTemplate;\n}", "CodeBleu_score": 38.19931120310701}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    TbQueueProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> producerTemplate =\n            new TbQueueProducerTemplate<>(settings.getTransportNotificationsMsgKafkaSettings());\n    String clientId = \"transport-notifications-msg-producer-\" + getServiceId();\n    producerTemplate.setClientId(clientId);\n    String defaultTopic = settings.getTransportNotificationsMsgTopic();\n    producerTemplate.setDefaultTopic(defaultTopic);\n    TbQueueAdmin admin = new TbQueueAdmin(settings.getTransportNotificationsMsgKafkaSettings());\n    TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> producer = producerTemplate.producer(admin);\n    return producer;\n}", "CodeBleu_score": 40.09053769757729}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerTemplate =\n            new TbKafkaConsumerTemplate<>(settings, topic, clientId, groupId);\n    consumerTemplate.setMessageDecoder(decoder);\n    consumerTemplate.configureConsumer(admin, statisticsService);\n    return consumerTemplate;\n}", "CodeBleu_score": 20.208183782894224}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>> template =\n            new TbKafkaConsumerTemplate<>(settings, topic, clientId, groupId);\n    template.setMessageDecoder(new TbKafkaProtoDecoder<>(ToCoreNotificationMsg.getDescriptor()));\n    template.configure(admin, statisticsService);\n    return template.getConsumer();\n}", "CodeBleu_score": 24.43515074201153}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerTemplate =\n            new TbKafkaConsumerTemplate<>(settings, topic, clientId, groupId);\n    consumerTemplate.setMessageDecoder(decoder);\n    consumerTemplate.configure(admin, statisticsService);\n    return consumerTemplate;\n}", "CodeBleu_score": 19.95956882006662}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (!topicNames.isEmpty()) {\n        topicNames.forEach(topic -> {\n            try {\n                createTopicIfNotExists(topic);\n            } catch (Exception e) {\n                log.error(\"Failed to create topic {}\", topic, e);\n            }\n        });\n\n        consumer.subscribe(topicNames);\n        log.info(\"Subscribed to topics: {}\", topicNames);\n    } else {\n        consumer.unsubscribe();\n        log.info(\"No topics provided. Unsubscribing from all topics.\");\n    }\n}", "CodeBleu_score": 58.74573837977296}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (!topicNames.isEmpty()) {\n        topicNames.forEach(topicName -> {\n            if (!topicExists(topicName)) {\n                createTopic(topicName);\n            }\n        });\n        consumer.subscribe(topicNames);\n    } else {\n        logger.info(\"No topics provided. Unsubscribing consumer from all topics.\");\n        consumer.unsubscribe();\n    }\n}", "CodeBleu_score": 65.25056785649355}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (!topicNames.isEmpty()) {\n        topicNames.forEach(topicName -> {\n            try {\n                if (!topicExists(topicName)) {\n                    createTopic(topicName);\n                }\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        });\n        consumer.subscribe(topicNames);\n    } else {\n        log.info(\"Unsubscribing from all topics\");\n        consumer.unsubscribe();\n    }\n}", "CodeBleu_score": 62.375531932263954}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    Stopwatch stopwatch = Stopwatch.createStarted();\n    LOG.trace(\"Polling {} for {} ms\", getTopic(), durationInMillis);\n    ConsumerRecords<String, byte[]> records = poll(durationInMillis);\n    stopwatch.stop();\n    LOG.trace(\"Polled {} for {} ms, {} records returned\", getTopic(), stopwatch.elapsed(TimeUnit.MILLISECONDS), records.count());\n    if (records.isEmpty()) {\n        return emptyList();\n    }\n    return stream(records.iterator())\n        .map(this::toRecord)\n        .collect(toList());\n}", "CodeBleu_score": 46.53660977190498}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    Stopwatch stopwatch = Stopwatch.createStarted();\n    LOGGER.trace(\"Polling topic {} for {} ms\", getTopic(), durationInMillis);\n    ConsumerRecords<String, byte[]> records = poll(durationInMillis);\n    stopwatch.stop();\n    LOGGER.trace(\"Polled topic {} for {} ms\", getTopic(), stopwatch.elapsed(TimeUnit.MILLISECONDS));\n    if (records.isEmpty()) {\n        return emptyList();\n    }\n    return records.records(getTopic()).stream().collect(Collectors.toList());\n}", "CodeBleu_score": 45.32455651688122}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    Stopwatch stopwatch = Stopwatch.createStarted();\n    LOGGER.debug(\"Polling topic {} for {} ms\", topic, durationInMillis);\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopwatch.stop();\n    LOGGER.trace(\"Polling topic {} took {} ms\", topic, stopwatch.elapsed(TimeUnit.MILLISECONDS));\n    if (records.isEmpty()) {\n        return emptyList();\n    }\n    return records.records(topic).stream()\n            .map(record -> new ConsumerRecord<>(record.topic(), record.partition(), record.offset(), record.key(), record.value()))\n            .collect(toList());\n}", "CodeBleu_score": 53.10036181949882}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t        try {\n            String topicPattern = getTopicPattern();\n            String keyPattern = getKeyPattern();\n\n            if (topicPattern == null || keyPattern == null) {\n                log.error(\"[{}] Kafka rule node is not configured properly\", ctx.getSelfId());\n                ctx.tellFailure(new TbNodeException(\"Kafka rule node is not configured properly\"));\n                return;\n            }\n\n            String topic = MsgPackProcessingDecorator.processPattern(topicPattern, msg);\n            String key = MsgPackProcessingDecorator.processPattern(keyPattern, msg);\n\n            if (topic == null || key == null) {\n                log.error(\"[{}] Topic or key cannot be null\", ctx.getSelfId());\n                ctx.tellFailure(new TbNodeException(\"Topic or key cannot be null\"));\n                return;\n            }\n\n            executeAsync(() -> publish(ctx, msg, topic, key));\n        } catch (Exception e) {\n            log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, e);\n        }\n    }", "CodeBleu_score": 43.802158741069945}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    try {\n        if (initializationFailure != null) {\n            log.debug(\"[{}] Failed to initialize Kafka rule node\", ctx.getSelfId());\n            ctx.tellFailure(ctx.getSelfId(), initializationFailure);\n            return;\n        }\n        String topic = getTopicPattern().getTopic(msg);\n        String key = getKeyPattern().getKey(msg);\n        publish(ctx, msg, topic, key);\n    } catch (Exception e) {\n        log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, e);\n        ctx.tellFailure(ctx.getSelfId(), e);\n    }\n}", "CodeBleu_score": 35.53399687024172}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    try {\n        String topicPattern = getTopicPattern();\n        String keyPattern = getKeyPattern();\n        if (topicPattern == null || keyPattern == null) {\n            log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg);\n            ctx.tellFailure(new TbNodeException(\"Topic and key patterns are not configured for Kafka rule node.\"));\n            return;\n        }\n        String topic = processPattern(topicPattern, msg);\n        String key = processPattern(keyPattern, msg);\n        publish(ctx, msg, topic, key);\n    } catch (Exception e) {\n        log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, e);\n        ctx.tellFailure(e);\n    }\n}", "CodeBleu_score": 40.67720841401737}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t        try {\n            if (addMetaData) {\n                ProducerRecord<String, byte[]> record = new ProducerRecord<>(topic, key, msg.getData());\n                Map<String, String> metadata = msg.getMetaData();\n                if (metadata != null) {\n                    for (Map.Entry<String, String> entry : metadata.entrySet()) {\n                        record.headers().add(entry.getKey(), entry.getValue().getBytes(StandardCharsets.UTF_8));\n                    }\n                }\n                kafkaTemplate.send(record).addCallback(new ListenableFutureCallback<>() {\n                    @Override\n                    public void onFailure(Throwable ex) {\n                        tellFailure(ctx, processException(msg, ex), ex);\n                    }\n\n                    @Override\n                    public void onSuccess(SendResult<String, byte[]> result) {\n                        tellSuccess(ctx, processResponse(msg, result.getRecordMetadata()));\n                    }\n                });\n            } else {\n                kafkaTemplate.send(topic, key, msg.getData()).addCallback(new ListenableFutureCallback<>() {\n                    @Override\n                    public void onFailure(Throwable ex) {\n                        tellFailure(ctx, processException(msg, ex), ex);\n                    }\n\n                    @Override\n                    public void onSuccess(SendResult<String, byte[]> result) {\n                        tellSuccess(ctx, processResponse(msg, result.getRecordMetadata()));\n                    }\n                });\n            }\n        } catch (Exception e) {\n            log.debug(\"[{}] Exception during publish: {}\", ctx.getSelfId(), e.getMessage());\n            tellFailure(ctx, processException(msg, e), e);\n        }\n    }", "CodeBleu_score": 35.41162694905265}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t        if (addMetaData) {\n            Map<String, byte[]> headers = getMetaData(msg);\n            if (headers.isEmpty()) {\n                kafkaTemplate.send(topic, key, msg.getData()).addCallback(new ListenableFutureCallback<SendResult<String, byte[]>>() {\n                    @Override\n                    public void onSuccess(SendResult<String, byte[]> result) {\n                        processRecord(ctx, msg, result.getRecordMetadata(), null);\n                    }\n\n                    @Override\n                    public void onFailure(Throwable ex) {\n                        processRecord(ctx, msg, null, ex);\n                    }\n                });\n            } else {\n                kafkaTemplate.send(topic, key, msg.getData(), headers).addCallback(new ListenableFutureCallback<SendResult<String, byte[]>>() {\n                    @Override\n                    public void onSuccess(SendResult<String, byte[]> result) {\n                        processRecord(ctx, msg, result.getRecordMetadata(), null);\n                    }\n\n                    @Override\n                    public void onFailure(Throwable ex) {\n                        processRecord(ctx, msg, null, ex);\n                    }\n                });\n            }\n        } else {\n            kafkaTemplate.send(topic, key, msg.getData()).addCallback(new ListenableFutureCallback<SendResult<String, byte[]>>() {\n                @Override\n                public void onSuccess(SendResult<String, byte[]> result) {\n                    processRecord(ctx, msg, result.getRecordMetadata(), null);\n                }\n\n                @Override\n                public void onFailure(Throwable ex) {\n                    processRecord(ctx, msg, null, ex);\n                }\n            });\n        }\n    }", "CodeBleu_score": 28.83401906572334}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t", "CodeBleu_score": 5.441118430176013}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            logger.error(\"Failed to close Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 68.291721355429}, {"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            logger.error(\"Failed to close Kafka producer: \" + e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 53.484598597435436}, {"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close Kafka producer cleanly\", e);\n        }\n    }\n}", "CodeBleu_score": 71.82205493948321}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t        TbQueueProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> builder = new TbQueueProducerTemplateBuilder<>();\n        builder.setKafkaSettings(kafkaSettings);\n        builder.setClientId(serviceInfoProvider.getServiceId());\n        builder.setDefaultTopic(defaultTopic);\n        builder.setAdmin(admin);\n        return builder.build();\n    }", "CodeBleu_score": 39.75532881154877}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    KafkaProducerTemplateBuilder<String, byte[]> builder = new KafkaProducerTemplateBuilder<>();\n    KafkaSettings kafkaSettings = settings.getKafkaSettings();\n    builder.setKafkaSettings(kafkaSettings);\n    builder.setClientId(getServiceId());\n    builder.setDefaultTopic(defaultTopic);\n    builder.setAdmin(admin);\n    return builder.build();\n}", "CodeBleu_score": 37.51590098028335}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    return new TbQueueProducer<>(\n            new KafkaTemplateBuilder<>(\n                    KafkaTemplateBuilder.Settings.builder()\n                            .withKafkaSettings(kafkaSettings)\n                            .withClientId(serviceInfoProvider.getServiceId())\n                            .withDefaultTopic(defaultTopic)\n                            .withAdmin(admin)\n                            .build()\n            ).withProducerBuilder(KafkaProducerBuilder.builder()\n                    .withKeySerializer(new JsonSerializer<>())\n                    .withValueSerializer(new JsonSerializer<>())\n                    .build()\n            ).build()\n    );\n}", "CodeBleu_score": 26.397195461089396}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t        try {\n            Duration timeout = Duration.ofMillis(kafkaResponseTimeoutMs);\n            ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n            scheduledExecutorService.scheduleWithFixedDelay(() -> {\n                if (isStatsPrintRequired()) {\n                    for (String groupId : monitoredConsumerGroups) {\n                        try {\n                            Map<TopicPartition, OffsetAndMetadata> groupOffsets = getGroupOffsets(groupId);\n                            Map<TopicPartition, Long> endOffsets = getEndOffsets(groupOffsets.keySet());\n                            List<GroupTopicStats> consumerGroupStats = getTopicsStatsWithLag(groupOffsets, endOffsets);\n                            if (!consumerGroupStats.isEmpty()) {\n                                log.info(\"Consumer group [{}] lagging topics: {}\", groupId, consumerGroupStats);\n                            }\n                        } catch (Exception e) {\n                            log.warn(\"Failed to get consumer group [{}] stats\", groupId, e);\n                        }\n                    }\n                }\n            }, printIntervalMs, printIntervalMs, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            log.warn(\"Failed to start Kafka consumer group stats logging\", e);\n        }\n    }", "CodeBleu_score": 40.156310435682215}, {"code": "private void startLogScheduling(){\n\t        long kafkaResponseTimeoutMs = kafkaConfig.getKafkaResponseTimeoutMs();\n        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n        executorService.scheduleWithFixedDelay(() -> {\n            if (isStatsPrintRequired()) {\n                try {\n                    for (String groupId : monitoredConsumerGroups) {\n                        Map<TopicPartition, OffsetAndMetadata> groupOffsets = getGroupOffsets(groupId);\n                        Map<TopicPartition, Long> endOffsets = getTopicEndOffsets(groupOffsets);\n                        List<GroupTopicStats> consumerGroupStats = getTopicsStatsWithLag(groupOffsets, endOffsets);\n                        if (!consumerGroupStats.isEmpty()) {\n                            log.info(\"[{}] Consumer group lagging topics: {}\", groupId, consumerGroupStats);\n                        }\n                    }\n                } catch (Exception e) {\n                    log.warn(\"[{}] Failed to get consumer group lagging topics\", groupId, e);\n                    log.trace(\"[{}] Failed to get consumer group lagging topics\", groupId, e);\n                }\n            }\n        }, 0, printIntervalMs, TimeUnit.MILLISECONDS);\n    }", "CodeBleu_score": 38.08779457979339}, {"code": "private void startLogScheduling(){\n\t        long kafkaResponseTimeoutMs = kafkaConsumerProps.getKafkaResponseTimeoutMs();\n        long printIntervalMs = kafkaConsumerProps.getPrintIntervalMs();\n        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n        executor.scheduleWithFixedDelay(() -> {\n            try {\n                if (isStatsPrintRequired()) {\n                    for (String groupId : kafkaConsumerProps.getConsumerGroups()) {\n                        Map<TopicPartition, OffsetAndMetadata> groupOffsets = getGroupOffsets(groupId);\n                        Map<TopicPartition, Long> endOffsets = getEndOffsets(groupOffsets.keySet());\n                        List<GroupTopicStats> consumerGroupStats = getTopicsStatsWithLag(groupOffsets, endOffsets);\n                        if (!consumerGroupStats.isEmpty()) {\n                            log.info(\"Consumer group [{}] lagging topics: [{}]\", groupId, consumerGroupStats);\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                log.warn(\"Failed to get consumer group offsets for group [{}]\", groupId, e);\n                log.trace(\"Failed to get consumer group offsets for group [{}], error: {}\", groupId, ExceptionUtils.getStackTrace(e));\n            }\n        }, printIntervalMs, printIntervalMs, TimeUnit.MILLISECONDS);\n    }", "CodeBleu_score": 38.15634475584546}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\t        Properties props = toProps();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n        return props;\n    }", "CodeBleu_score": 89.50348007366593}, {"code": "protected Properties toAdminProps(){\n\t        Properties props = toProps();\n        props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n        return props;\n    }", "CodeBleu_score": 81.90085808525856}, {"code": "protected Properties toAdminProps(){\n\t        Properties props = toProps();\n\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n\n        return props;\n    }", "CodeBleu_score": 89.50348007366593}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tfinal String scopedName = getScopedName(metricName, group);\n\t\tfinal Map<String, String> tags = getTags(group);\n\t\tfinal MetricEvent event = new MetricEvent(scopedName, tags);\n\t\tif (metric instanceof Counter) {\n\t\t\tcounters.add((Counter) metric);\n\t\t\tcounterEvents.add(event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tgauges.add((Gauge) metric);\n\t\t\tgaugeEvents.add(event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\thistograms.add((Histogram) metric);\n\t\t\thistogramEvents.add(event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tmeters.add((Meter) metric);\n\t\t\tmeterEvents.add(event);\n\t\t} else {\n\t\t\twarn(metric.getClass() + \" is not supported.\");\n\t\t}\n\t}", "CodeBleu_score": 47.44532426764075}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tMetricEvent event = new MetricEvent(getScopedName(metricName, group), getTags(group));\n\n\t\tif (metric instanceof Counter) {\n\t\t\tcounters.put(metric, event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tgauges.put(metric, event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\thistograms.put(metric, event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tmeters.put(metric, event);\n\t\t} else {\n\t\t\tLOG.warn(\"The metric type {} is not supported\", metric.getClass().getName());\n\t\t}\n\t}", "CodeBleu_score": 55.28846961215934}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tString scopedName = getScopedName(metricName, group);\n\t\tMap<String, String> tags = getTags(group);\n\t\tif (metric instanceof Counter) {\n\t\t\tCounter counter = (Counter) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, MetricEvent.Type.COUNTER, counter);\n\t\t\tcounters.put(scopedName, event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tGauge gauge = (Gauge) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, MetricEvent.Type.GAUGE, gauge);\n\t\t\tgauges.put(scopedName, event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, MetricEvent.Type.HISTOGRAM, histogram);\n\t\t\thistograms.put(scopedName, event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMeter meter = (Meter) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, MetricEvent.Type.METER, meter);\n\t\t\tmeters.put(scopedName, event);\n\t\t} else {\n\t\t\twarn(String.format(\"Unsupported metric type %s for metric %s\", metric.getClass().getName(), scopedName));\n\t\t}\n\t}", "CodeBleu_score": 44.64686837187779}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t        Object value = gauge.getValue();\n        Map<String, Object> fields = metricEvent.getFields();\n        if (fields != null) {\n            if (value instanceof Number) {\n                fields.put(field, value);\n            } else {\n                fields.put(field, value.toString());\n            }\n        } else {\n            fields = new HashMap<>();\n            if (value instanceof Number) {\n                fields.put(field, value);\n            } else {\n                fields.put(field, value.toString());\n            }\n            metricEvent.setFields(fields);\n        }\n        return metricEvent;\n    }", "CodeBleu_score": 60.57658182250192}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    Map<String, Object> fields = metricEvent.getFields();\n    if (fields != null) {\n        fields.put(field, convertValue(value));\n    } else {\n        Map<String, Object> newFields = new HashMap<>();\n        newFields.put(field, convertValue(value));\n        metricEvent.setFields(newFields);\n    }\n    return metricEvent;\n}", "CodeBleu_score": 47.953813082464556}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        metricEvent.put(field, (Number) value);\n    } else {\n        metricEvent.put(field, String.valueOf(value));\n    }\n    return metricEvent;\n}", "CodeBleu_score": 37.50695858798116}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\t\tMetricGroup group = gauge.getMetricIdentifier().getGroup();\n\t\tString[] components = gauge.getValue().toString().split(\",\");\n\t\tlong currentOffsets = Long.parseLong(components[0].split(\":\")[1]);\n\t\tlong dataTimestamp = Long.parseLong(components[1].split(\":\")[1]);\n\t\tlong committedOffsets = Long.parseLong(components[2].split(\":\")[1]);\n\t\tmetricEvent.addField(\"current_offsets\", currentOffsets);\n\t\tmetricEvent.addField(\"data_timestamp\", dataTimestamp);\n\t\tmetricEvent.addField(\"committed_offsets\", committedOffsets);\n\t\tmetricEvent.setTimestamp(timestamp);\n\t\tmetricEvent.setTags(getTags(group));\n\t\treturn metricEvent;\n\t}", "CodeBleu_score": 32.15211573791707}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\t\t// Split the gauge value into components.\n\t\tString[] components = gauge.getValue().toString().split(\";\");\n\t\tif (components.length != 3) {\n\t\t\tthrow new IllegalStateException(\"Gauge value is not in the expected format: \" + gauge.getValue());\n\t\t}\n\t\t// Extract the current offsets, data timestamp, and committed offsets.\n\t\tString[] currentOffsets = components[0].split(\",\");\n\t\tString dataTimestamp = components[1];\n\t\tString[] committedOffsets = components[2].split(\",\");\n\t\t// Check for changes in the Kafka lag metrics.\n\t\tif (currentOffsets.length != committedOffsets.length) {\n\t\t\tthrow new IllegalStateException(\"Current offsets and committed offsets are not in the same length: \" + gauge.getValue());\n\t\t}\n\t\tboolean hasChange = false;\n\t\tfor (int i = 0; i < currentOffsets.length; i++) {\n\t\t\tlong currentOffset = Long.parseLong(currentOffsets[i]);\n\t\t\tlong committedOffset = Long.parseLong(committedOffsets[i]);\n\t\t\tlong lag = currentOffset - committedOffset;\n\t\t\tif (lag != 0) {\n\t\t\t\thasChange = true;\n\t\t\t}\n\t\t\tmetricEvent.addField(KAFKA_LAG_PREFIX + i, lag);\n\t\t}\n\t\tif (hasChange) {\n\t\t\tkafkaLagTimes.put(metricEvent.getTags(), timestamp);\n\t\t}\n\t\tmetricEvent.setTimestamp(timestamp);\n\t\treturn metricEvent;\n\t}", "CodeBleu_score": 33.02278466344474}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\t\tString[] split = gauge.getValue().toString().split(\",\");\n\t\tString currentOffsets = split[0].split(\":\")[1].trim();\n\t\tString dataTimestamp = split[1].split(\":\")[1].trim();\n\t\tString committedOffsets = split[2].split(\":\")[1].trim();\n\n\t\t// check for changes in the Kafka lag metrics to avoid duplicates\n\t\tif (!kafkaLagTimes.containsKey(metricEvent.getName()) ||\n\t\t\t\tkafkaLagTimes.get(metricEvent.getName()) != timestamp) {\n\t\t\tkafkaLagTimes.put(metricEvent.getName(), timestamp);\n\t\t\tmetricEvent.addField(\"current_offsets\", currentOffsets);\n\t\t\tmetricEvent.addField(\"data_timestamp\", dataTimestamp);\n\t\t\tmetricEvent.addField(\"committed_offsets\", committedOffsets);\n\t\t\tmetricEvent.setTimestamp(timestamp);\n\t\t}\n\t\treturn metricEvent;\n\t}", "CodeBleu_score": 32.88666340662884}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t        Properties props = getConfig(env);\n        ParameterTool parameterTool = getGlobalJobParameters(env);\n        setStartFromSpecificOffsets(props, parameterTool, time);\n        FlinkKafkaConsumer<MetricEvent> consumer = addSource(topic, MetricEvent.class, props);\n        return env.addSource(consumer);\n    }", "CodeBleu_score": 35.56669956656483}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t        Properties props = buildKafkaProps();\n        GlobalJobParameters parameters = getGlobalJobParameters(env);\n        if (time != null) {\n            setStartFromSpecificOffsets(props, time);\n        }\n        FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), props);\n        addSource(env, consumer);\n        return env.addSource(consumer);\n    }", "CodeBleu_score": 47.46974797555406}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t        Properties props = getGlobalJobParameters();\n        setStartFromSpecificOffsets(props, time);\n        FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricEventSchema(), props);\n        addSource(env, consumer);\n        return env.addSource(consumer);\n    }", "CodeBleu_score": 37.817918563611975}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String groupId = \"consumer-\" + time;\n    props.setProperty(\"group.id\", groupId);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    Map<String, List<PartitionInfo>> partitions = consumer.listTopics();\n    Map<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n    partitions.forEach((topic, partitions1) -> partitions1.forEach(partitionInfo -> {\n        KafkaTopicPartition kafkaTopicPartition = new KafkaTopicPartition(topic, partitionInfo.partition());\n        consumer.assign(Collections.singleton(kafkaTopicPartition));\n        consumer.seekToBeginning(Collections.singleton(kafkaTopicPartition));\n        Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes = consumer.offsetsForTimes(Collections.singletonMap(kafkaTopicPartition, time));\n        offsetsForTimes.forEach((topicPartition, offsetAndTimestamp) -> {\n            partitionOffsets.put(kafkaTopicPartition, offsetAndTimestamp.offset());\n        });\n    }));\n    consumer.close();\n    return partitionOffsets;\n}", "CodeBleu_score": 43.452565164292665}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    props.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"offset-by-time-\" + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    Map<String, List<PartitionInfo>> partitions = consumer.listTopics();\n    List<PartitionInfo> partitionInfos = partitions.get(parameterTool.getRequired(TOPIC_NAME));\n    Map<TopicPartition, Long> timestampsToSearch = new HashMap<>();\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        timestampsToSearch.put(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()), time);\n    }\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(timestampsToSearch);\n    Map<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n    for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n        TopicPartition key = entry.getKey();\n        OffsetAndTimestamp value = entry.getValue();\n        if (value != null) {\n            partitionOffsets.put(new KafkaTopicPartition(key.topic(), key.partition()), value.offset());\n        }\n    }\n    consumer.close();\n    return partitionOffsets;\n}", "CodeBleu_score": 56.246347542286244}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String groupId = parameterTool.getRequired(\"group.id\");\n    String topic = parameterTool.getRequired(\"topic\");\n    props.setProperty(\"group.id\", groupId + \"_\" + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n    Map<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n    partitionInfos.forEach(partitionInfo -> {\n        KafkaTopicPartition kafkaTopicPartition = new KafkaTopicPartition(topic, partitionInfo.partition());\n        partitionOffsets.put(kafkaTopicPartition, time);\n    });\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(partitionOffsets);\n    consumer.close();\n    return offsets.entrySet().stream().collect(Collectors.toMap(entry -> new KafkaTopicPartition(entry.getKey().topic(), entry.getKey().partition()), entry -> entry.getValue().offset()));\n}", "CodeBleu_score": 46.582382497762936}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t    // Set up Kafka producer properties\n    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    // Create a Kafka producer\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    // Create a MetricEvent\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\"my_metric\");\n    event.setTags(new HashMap<String, String>() {{\n        put(\"tag1\", \"value1\");\n        put(\"tag2\", \"value2\");\n    }});\n    event.setFields(new HashMap<String, Object>() {{\n        put(\"field1\", 1.0);\n        put(\"field2\", 2.0);\n    }});\n\n    // Send the MetricEvent to Kafka\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"my_topic\", event.toJson());\n    producer.send(record);\n\n    // Print the sent data\n    System.out.println(\"Sent data: \" + event.toJson());\n\n    // Flush the producer to ensure all data is sent\n    producer.flush();\n}", "CodeBleu_score": 50.27410455994497}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    // Set up Kafka producer properties\n    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    // Create KafkaProducer instance\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    // Create a MetricEvent\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\"my_metric\");\n    event.setTags(new HashMap<String, String>() {{\n        put(\"tag1\", \"value1\");\n        put(\"tag2\", \"value2\");\n    }});\n    event.setFields(new HashMap<String, Object>() {{\n        put(\"field1\", 1);\n        put(\"field2\", \"value\");\n    }});\n\n    // Send the MetricEvent to Kafka\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"my_topic\", event.toJson());\n    producer.send(record);\n\n    // Print the sent data\n    System.out.println(\"Sent data: \" + event.toJson());\n\n    // Flush the producer to ensure all data is sent\n    producer.flush();\n}", "CodeBleu_score": 49.352467784457794}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    // Set up Kafka producer properties\n    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    // Create a Kafka producer\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    // Create a MetricEvent\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\"my_metric\");\n    event.setTags(new HashMap<String, String>() {{\n        put(\"host\", \"localhost\");\n        put(\"region\", \"us-west-2\");\n    }});\n    event.setFields(new HashMap<String, Object>() {{\n        put(\"value\", 42);\n    }});\n\n    // Create a ProducerRecord with the serialized MetricEvent\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"my_topic\", event.toJson());\n\n    // Send the record to the Kafka topic\n    producer.send(record);\n\n    // Print the sent data\n    System.out.println(\"Sent data: \" + event.toJson());\n\n    // Flush the producer to ensure all data is sent\n    producer.flush();\n}", "CodeBleu_score": 48.84857027753454}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t        try {\n            if (levels.contains(event.getLevel().toString()) && !event.getLoggerName().contains(\"xxx\")) {\n                String log = subAppend(event);\n                if (log != null) {\n                    producer.send(new ProducerRecord<>(topic, log));\n                }\n            }\n        } catch (Exception e) {\n            log.warn(\"Error sending log to kafka: \", e);\n        }\n    }", "CodeBleu_score": 57.33632507160537}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t        if (event.getLevel().isInRange(Level.ERROR, Level.FATAL) && !event.getLoggerName().contains(\"xxx\")) {\n            try {\n                String log = subAppend(event);\n                if (log != null) {\n                    kafkaProducer.send(new ProducerRecord<>(topic, log));\n                }\n            } catch (Exception e) {\n                log.warn(\"Error sending log to kafka\", e);\n            }\n        }\n    }", "CodeBleu_score": 50.92702294474023}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t        try {\n            if (event.getLevel().isInRange(Level.INFO, Level.WARN)\n                    && !event.getLoggerName().contains(\"xxx\")) {\n                producer.send(new ProducerRecord<>(topic, subAppend(event)));\n            }\n        } catch (Exception e) {\n            log.warn(\"Error sending log event to kafka topic\", e);\n        }\n    }", "CodeBleu_score": 52.754618423057565}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t", "CodeBleu_score": 2.5579410414724593}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"suffix\", \"prefix\", \"any\", \"none\"}\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 80.32715391645591}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, validMethod := range validTopicSuffixMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 89.40480295903943}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\troutingKey := k.RoutingKey\n\n\tif routingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\tif routingTag := k.RoutingTag; routingTag != \"\" {\n\t\tif value, ok := metric.GetTag(routingTag); ok {\n\t\t\treturn value, nil\n\t\t}\n\t}\n\n\treturn routingKey, nil\n}", "CodeBleu_score": 64.79501192980786}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif value, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn value, nil\n\t\t} else {\n\t\t\treturn \"\", fmt.Errorf(\"metric missing routing tag %q\", k.RoutingTag)\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 78.40625735366982}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif value, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn value, nil\n\t\t} else {\n\t\t\treturn \"\", fmt.Errorf(\"metric missing tag %v\", k.RoutingTag)\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 78.71496848237794}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tregexps := make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, regexStr := range k.TopicRegexps {\n\t\tregex, err := regexp.Compile(regexStr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile regular expression %q: %w\", regexStr, err)\n\t\t}\n\t\tregexps[i] = regex\n\t}\n\tk.topicRegexps = regexps\n\treturn nil\n}", "CodeBleu_score": 44.56615662496884}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tregexps := make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, regex := range k.TopicRegexps {\n\t\tre, err := regexp.Compile(regex)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile regular expression '%s': %v\", regex, err)\n\t\t}\n\t\tregexps[i] = re\n\t}\n\tk.topicRegexps = regexps\n\treturn nil\n}", "CodeBleu_score": 47.03102245285913}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tregexps := make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, regexpStr := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(regexpStr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile regexp '%s': %w\", regexpStr, err)\n\t\t}\n\t\tregexps[i] = regexp\n\t}\n\tk.topicRegexps = regexps\n\treturn nil\n}", "CodeBleu_score": 43.69880604049898}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tmsg, ok := h.undelivered[track.ID]\n\tif !ok {\n\t\th.mu.Unlock()\n\t\treturn\n\t}\n\n\tmsg.Delivered = true\n\th.mu.Unlock()\n\n\tif err := track.Session.MarkMessage(msg, \"\"); err != nil {\n\t\th.log.Errorf(\"Failed to mark message as delivered: %v\", err)\n\t}\n\n\th.mu.Lock()\n\tdelete(h.undelivered, track.ID)\n\th.mu.Unlock()\n\n\th.sem.Release(1)\n}", "CodeBleu_score": 50.71359513083519}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tmsg, ok := h.undelivered[track.ID]\n\tif !ok {\n\t\th.mu.Unlock()\n\t\treturn\n\t}\n\tmsg.session.MarkMessage(track.ID, \"\")\n\tdelete(h.undelivered, track.ID)\n\th.mu.Unlock()\n\n\th.sem.Release(1)\n}", "CodeBleu_score": 45.95902608083904}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tmsg, ok := h.undelivered[track.ID]\n\tif !ok {\n\t\th.mu.Unlock()\n\t\treturn\n\t}\n\n\tif msg.Delivered() {\n\t\th.log.Debugf(\"message already delivered, skipping: %v\", track)\n\t\th.mu.Unlock()\n\t\treturn\n\t}\n\n\tmsg.MarkDelivered()\n\th.mu.Unlock()\n\n\th.log.Debugf(\"message delivered: %v\", track)\n\tmsg.session.MarkMessage(msg, \"\")\n\n\th.mu.Lock()\n\tdelete(h.undelivered, track.ID)\n\th.mu.Unlock()\n\n\th.sem.Release(1)\n}", "CodeBleu_score": 55.90613138105748}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx := session.Context()\n\n\tfor {\n\t\tif err := session.Context().Err(); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tcase msg, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\th.handle(ctx, msg)\n\t\t}\n\t}\n}", "CodeBleu_score": 65.60584016659222}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx := session.Context()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tcase message, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\th.Handle(ctx, message)\n\t\t\tsession.MarkMessage(message, \"\")\n\t\t\th.acc.AddError(ctx, nil)\n\t\t}\n\t}\n}", "CodeBleu_score": 59.32704962759631}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx := session.Context()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tcase message, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\th.Handle(session, message)\n\t\t\tsession.MarkMessage(message, \"\")\n\t\t\tif h.acc.Error() != nil {\n\t\t\t\tlog.Println(\"[ERROR]\", h.acc.Error())\n\t\t\t\th.acc.Reset()\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.38608005684084}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t    checkCondition(logkafka_id.length <= MAX_LOGKAFKA_ID_LENGTH, IllegalCharacterInLogkafkaId)\n    checkCondition(logkafka_id.nonEmpty, IllegalCharacterInLogkafkaId)\n    checkCondition(!logkafka_id.equals(\".\") && !logkafka_id.equals(\"..\"), IllegalCharacterInLogkafkaId)\n    checkCondition(logkafka_id.matches(LOGKAFKA_ID_PATTERN), IllegalCharacterInLogkafkaId)\n  }", "CodeBleu_score": 40.21943079051141}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t    checkCondition(logkafka_id.nonEmpty, EmptyLogkafkaId)\n    checkCondition(logkafka_id != \".\" && logkafka_id != \"..\", InvalidLogkafkaId)\n    checkCondition(logkafka_id.length <= maxLogkafkaIdLength, LogkafkaIdTooLong)\n    checkCondition(logkafka_id.matches(logkafkaIdRegex), IllegalCharacterInLogkafkaId)\n  }", "CodeBleu_score": 38.81622026898739}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t    checkCondition(logkafka_id.nonEmpty, IllegalCharacterInLogkafkaId)\n    checkCondition(!logkafka_id.equals(\".\") && !logkafka_id.equals(\"..\"), IllegalCharacterInLogkafkaId)\n    checkCondition(logkafka_id.length <= LogkafkaId.MAX_LENGTH, IllegalCharacterInLogkafkaId)\n    checkCondition(rgx.findFirstIn(logkafka_id).isEmpty, IllegalCharacterInLogkafkaId)\n  }", "CodeBleu_score": 36.53429505614522}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    Try {\n      system.actorSelection(kafkaManagerActor).ask(msg).map {\n        case err: ActorErrorResponse => \n          error(s\"Failed on input : $msg\")\n          -\\/(ApiError.from(err))\n        case o: Output =>\n          Try {\n            fn(o)\n          } match {\n            case Failure(t) => \n              error(s\"Failed on input : $msg\")\n              -\\/(ApiError.fromThrowable(t))\n            case Success(foutput) => \\/-(foutput)\n          }\n      }.recover\n    }.recover {\n      case t: Throwable =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 82.61942245613088}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    system.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse => \n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        Try {\n          fn(o)\n        } match {\n          case Failure(t) => \n            error(s\"Failed on input : $msg\")\n            -\\/(ApiError.fromThrowable(t))\n          case Success(foutput) => \\/-(foutput)\n        }\n    }.recover\n  }", "CodeBleu_score": 67.62408264969089}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    Try {\n      system.actorSelection(kafkaManagerActor).ask(msg).map {\n        case err: ActorErrorResponse =>\n          error(s\"Failed on input : $msg\")\n          -\\/(ApiError.from(err))\n        case o: Output =>\n          Try {\n            fn(o)\n          } match {\n            case Failure(t) =>\n              error(s\"Failed on input : $msg\")\n              -\\/(ApiError.fromThrowable(t))\n            case Success(foutput) => \\/-(foutput)\n          }\n      }.recover {\n        case t: Throwable =>\n          error(s\"Failed on input : $msg\")\n          -\\/(ApiError.fromThrowable(t))\n      }\n    } match {\n      case Failure(t) =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.fromThrowable(t))\n      case Success(f) => f\n    }\n  }", "CodeBleu_score": 79.0905440888093}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    system.actorSelection(kafkaManagerActor).ask(msg).flatMap {\n      case err: ActorErrorResponse => Future.successful(-\\/(ApiError.from(err)))\n      case o: Output =>\n        fn(o)\n    }.recover {\n      case t: Throwable =>\n        -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 75.28622754929306}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    system.actorSelection(kafkaManagerActor).ask(msg).flatMap {\n      case err: ActorErrorResponse => Future.successful(-\\/(ApiError.from(err)))\n      case o: Output =>\n        fn(o)\n    }.recover {\n      case t: Throwable => -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 75.0306295608407}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    system.actorSelection(kafkaManagerActor).ask(msg).flatMap {\n      case err: ActorErrorResponse => Future.successful(-\\/(ApiError.from(err)))\n      case o: Output =>\n        fn(o)\n    }.recover {\n      case t: Throwable => -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 75.0306295608407}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val request = KMClusterCommandRequest(clusterName, PreferredLeaderElectionCommand(topics))\n    (kafkaManager ? request).map {\n      case commandResult: KMClusterCommandResult => commandResult.result match {\n        case Success => Right(commandResult.context)\n        case Failure(error) => Left(ApiError(s\"Failed to run preferred leader election for topics ${topics.mkString(\", \")}: ${error.getMessage}\"))\n      }\n      case unexpectedResult => Left(ApiError(s\"Unexpected result from Kafka manager: $unexpectedResult\"))\n    }\n  }", "CodeBleu_score": 20.13434671781846}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val command = KMClusterCommandRequest(clusterName, PreferredLeaderElectionCommand(topics))\n    (kafkaManager ? command).mapTo[ApiError \\/ ClusterContext]\n  }", "CodeBleu_score": 21.02896182719644}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    implicit val timeout: Timeout = Timeout(5.seconds)\n    val request = KMClusterCommandRequest(clusterName, PreferredLeaderElection(topics))\n    val result = (kafkaManager ? request).mapTo[ApiError \\/ ClusterContext]\n    result\n  }", "CodeBleu_score": 26.802064079585598}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t    getTopicList(clusterName).fold(\n      error => Future.successful(error),\n      topicList => runPreferredLeaderElection(clusterName, topicList.topics.keySet)\n    )\n  }", "CodeBleu_score": 24.125534716908}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t    getTopicList(clusterName).flatMap {\n      case -\\/(error) => Future.successful(error)\n      case \\/-(topics) => runPreferredLeaderElection(clusterName, topics.topics.keySet)\n    }\n  }", "CodeBleu_score": 24.174482208800406}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t    implicit val ec = apiExecutionContext\n    getTopicList(clusterName).fold(\n      err => Future.successful(err),\n      topicList => runPreferredLeaderElection(clusterName, topicList.topics.toSet)\n    )\n  }", "CodeBleu_score": 61.19640431706019}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t    import scala.concurrent.ExecutionContext.Implicits.global\n    tryWithKafkaManagerActor(\n      KMClusterCommandRequest (\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    )(result => result.result.collect {\n      case Left(err) => err\n    })\n  }", "CodeBleu_score": 27.040294466482294}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t    val results = tryWithKafkaManagerActor(\n      KMClusterCommandRequest (\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    )(_.result.collect { case err: ApiError => err })\n    results.map {\n      case Nil => \\/-(())\n      case errors => -\\/(errors)\n    }\n  }", "CodeBleu_score": 30.195531668053103}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t    implicit val ec = apiExecutionContext\n    tryWithKafkaManagerActor(\n      KMClusterCommandRequest (\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    ) { results =>\n      val errors = results.collect { case Left(e) => e }\n      if (errors.isEmpty) {\n        Right(())\n      } else {\n        Left(errors)\n      }\n    }\n  }", "CodeBleu_score": 43.68351690206184}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t  // Describe the cluster to get the available nodes within a specified timeout\n  DescribeClusterResult describeClusterResult = admin.describeCluster(new DescribeClusterOptions().timeoutMs(10000));\n\n  // If no nodes are available, throw a ConnectException\n  if (describeClusterResult.nodes().get().isEmpty()) {\n    throw new ConnectException(\"No Kafka nodes available within the specified timeout.\");\n  }\n\n  // Select the first node's ID and request its configuration\n  Node node = describeClusterResult.nodes().get().get(0);\n  ConfigResource configResource = new ConfigResource(ConfigResource.Type.BROKER, node.idString());\n  Config config = admin.describeConfigs(Collections.singleton(configResource)).all().get().get(configResource);\n\n  // If no configurations are received, throw another ConnectException\n  if (config == null) {\n    throw new ConnectException(\"No configurations received for the specified Kafka broker.\");\n  }\n\n  // Return the broker's configuration\n  return config;\n}", "CodeBleu_score": 49.31799175384971}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    Config config;\n    try {\n        DescribeClusterResult describeClusterResult = admin.describeCluster(new DescribeClusterOptions().timeoutMs(timeoutMs));\n        if (describeClusterResult.nodes().isEmpty()) {\n            throw new ConnectException(\"No nodes available in the Kafka cluster\");\n        }\n        Node node = describeClusterResult.nodes().get().get(0);\n        String nodeId = node.idString();\n        ConfigResource configResource = new ConfigResource(ConfigResource.Type.BROKER, nodeId);\n        DescribeConfigsResult describeConfigsResult = admin.describeConfigs(Collections.singleton(configResource), new DescribeConfigsOptions().timeoutMs(timeoutMs));\n        config = describeConfigsResult.values().get(configResource);\n        if (config == null) {\n            throw new ConnectException(\"No configuration available for broker \" + nodeId);\n        }\n    } catch (ExecutionException e) {\n        throw new ConnectException(\"Error describing Kafka cluster\", e);\n    }\n    return config;\n}", "CodeBleu_score": 48.7722199908724}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    DescribeClusterResult describeClusterResult = admin.describeCluster(new DescribeClusterOptions().timeoutMs(10000));\n    Collection<Node> nodes = describeClusterResult.nodes().get();\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"No Kafka nodes found in the cluster\");\n    }\n    String nodeId = nodes.iterator().next().idString();\n    ConfigResource configResource = new ConfigResource(ConfigResource.Type.BROKER, nodeId);\n    DescribeConfigsResult describeConfigsResult = admin.describeConfigs(Collections.singletonList(configResource));\n    Config config = describeConfigsResult.values().get(configResource).get();\n    if (config.isEmpty()) {\n        throw new ConnectException(\"No Kafka broker configuration found for node \" + nodeId);\n    }\n    return config;\n}", "CodeBleu_score": 58.44653561287125}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t    return (config, mode) -> {\n        if (mode == SchemaRegistryConfig.SchemaHistory.KAFKA_SCHEMA_HISTORY) {\n            return validator.validate(config, mode);\n        } else {\n            return 0;\n        }\n    };\n}", "CodeBleu_score": 24.085546744258817}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (s, p) -> {\n        if (s.get(SCHEMA_HISTORY_INTERVAL_MS_CONFIG) != null) {\n            final SchemaHistory schemaHistory = SchemaHistory.forConfig(s);\n            if (schemaHistory == SchemaHistory.KAFKA) {\n                return validator.validate(s, p);\n            }\n        }\n        return Collections.emptyMap();\n    };\n}", "CodeBleu_score": 31.651508058122914}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (s, t) -> {\n        if (s.schemaHistory() == KafkaSchemaHistory.class) {\n            return validator.validate(s, t);\n        }\n        return 0;\n    };\n}", "CodeBleu_score": 21.88342595257392}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t        if (topicCreationEnabled == null) {\n            String topicCreationEnable = (String) config.get(TOPIC_CREATION_ENABLE_CONFIG);\n            if (topicCreationEnable == null) {\n                topicCreationEnable = (String) config.get(TOPIC_CREATION_ENABLE_CONFIG_LEGACY);\n            }\n            if (topicCreationEnable == null) {\n                topicCreationEnable = \"true\";\n            }\n            topicCreationEnabled = parseBoolean(topicCreationEnable) && kafkaConnectVersion.compareTo(Version.parse(\"2.0.0\")) >= 0;\n        }\n        return topicCreationEnabled;\n    }", "CodeBleu_score": 46.66618900353914}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t        Version version = parseVersion(config.get(KafkaConnector.CONNECTOR_VERSION_CONFIG).toString());\n        Boolean enabled = parseBoolean(config.get(KafkaConnector.TOPIC_CREATION_ENABLE_CONFIG).toString(), true);\n        return version.compareTo(MIN_VERSION_TOPIC_CREATION) >= 0 && enabled;\n    }", "CodeBleu_score": 39.318834106051085}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t        if (topicCreationEnabled != null) {\n            return topicCreationEnabled;\n        }\n        topicCreationEnabled = parseBoolean(config, \"topic.creation.enable\", true);\n        if (!topicCreationEnabled) {\n            return false;\n        }\n        Version version = parseVersion(Version.getVersion());\n        if (version.compareTo(KAFKA_0_9_VERSION) < 0) {\n            topicCreationEnabled = false;\n        }\n        return topicCreationEnabled;\n    }", "CodeBleu_score": 47.330350488832536}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t        final String clientId = config.get(KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG);\n        if (clientId == null || clientId.isEmpty()) {\n            throw new IllegalArgumentException(\"Missing mandatory configuration option: \" + KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG);\n        }\n        final Map<String, Object> adminProperties = new HashMap<>(config);\n        adminProperties.put(AdminClientConfig.CLIENT_ID_CONFIG, clientId);\n        final SharedTopicAdmin sharedAdmin = SharedTopicAdmin.create(adminProperties);\n        return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 41.91898388224994}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t        final String clientId = config.get(KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG);\n        if (clientId == null) {\n            throw new IllegalArgumentException(\"Missing mandatory configuration option \" + KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG);\n        }\n\n        final Map<String, Object> adminProps = new HashMap<>(config);\n        adminProps.remove(KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG);\n        adminProps.remove(KafkaOffsetBackingStoreConfig.TOPIC_CONFIG);\n        adminProps.remove(KafkaOffsetBackingStoreConfig.OFFSET_STORE_FILE_CONFIG);\n\n        final SharedTopicAdmin sharedAdmin = new SharedTopicAdmin(adminProps);\n\n        return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 50.37164931730997}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t        final String clientId = config.get(KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG);\n        if (clientId == null || clientId.isEmpty()) {\n            throw new IllegalArgumentException(KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG + \" must be set\");\n        }\n        final Properties adminProperties = new Properties();\n        adminProperties.putAll(config);\n        adminProperties.put(AdminClientConfig.CLIENT_ID_CONFIG, clientId);\n        final SharedTopicAdmin admin = SharedTopicAdmin.create(adminProperties);\n        return new KafkaOffsetBackingStore(admin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 36.16636697619303}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t        JsonNode payload = node.get(PAYLOAD_FIELD);\n\n        // Schema + payload format\n        if (payload != null) {\n            node = payload;\n        }\n\n        if (node.isObject()) {\n            Iterator<String> fieldNames = node.fieldNames();\n            if (fieldNames.hasNext()) {\n                String fieldName = fieldNames.next();\n                if (!fieldNames.hasNext()) {\n                    return reader.readValue(node.get(fieldName));\n                }\n                else {\n                    return reader.readValue(node);\n                }\n            }\n        }\n\n        throw new IllegalArgumentException(\"Invalid key: \" + node);\n    }", "CodeBleu_score": 46.63245993096698}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t            JsonNode payload = node.get(PAYLOAD_FIELD);\n\n            // Schema + payload format\n            if (payload != null) {\n                node = payload;\n            }\n            // Debezium envelope\n            if (config.asEnvelope()) {\n                return reader.readValue(node);\n            }\n            else if (node.has(Envelope.FieldName.SOURCE) && node.has(config.sourceField())) {\n                return reader.readValue(node.get(config.sourceField()));\n            }\n            // Extracted format\n            else {\n                return reader.readValue(node);\n            }\n        }", "CodeBleu_score": 38.73425209877465}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t        JsonNode payload = node.get(PAYLOAD_FIELD);\n\n        // Schema + payload format\n        if (payload != null) {\n            node = payload;\n        }\n\n        // Debezium envelope\n        if (config.asEnvelope()) {\n            return reader.readValue(node);\n        }\n        else if (node.has(Envelope.FieldName.SOURCE) && node.has(config.sourceField())) {\n            return reader.readValue(node.get(config.sourceField()));\n        }\n        // Extracted format\n        else {\n            return reader.readValue(node);\n        }\n    }", "CodeBleu_score": 39.89313579623943}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t        String topicName = topicNameFor(id);\n        if (prefix != null) {\n            topicName = prefix + delimiter + topicName;\n        }\n        StringBuilder sanitizedTopicName = new StringBuilder(topicName.length());\n        boolean replaced = false;\n        for (int i = 0; i < topicName.length(); i++) {\n            char c = topicName.charAt(i);\n            if (!isValidTopicNameCharacter(c)) {\n                replaced = true;\n                sanitizedTopicName.append('_');\n            } else {\n                sanitizedTopicName.append(c);\n            }\n        }\n        if (replaced) {\n            warn(\"Topic name '\" + topicName + \"' contains invalid characters, replacing with '_'.\");\n        }\n        return sanitizedTopicName.toString();\n    }", "CodeBleu_score": 53.99715001569576}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t        String topicName = delegate.topicNameFor(id, prefix, delimiter);\n        StringBuilder sanitizedTopicName = new StringBuilder();\n        boolean replaced = false;\n        for (char c : topicName.toCharArray()) {\n            if (!isValidTopicNameCharacter(c)) {\n                sanitizedTopicName.append(replacementCharacter);\n                replaced = true;\n            } else {\n                sanitizedTopicName.append(c);\n            }\n        }\n        if (replaced) {\n            warn(topicName + \" is not a valid topic name. Sanitizing to \" + sanitizedTopicName.toString());\n        }\n        return sanitizedTopicName.toString();\n    }", "CodeBleu_score": 47.119053198912766}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t        String topicName = delegate.topicNameFor(id, prefix, delimiter);\n        StringBuilder sanitizedTopicName = new StringBuilder();\n        boolean replaced = false;\n        for (int i = 0; i < topicName.length(); i++) {\n            char c = topicName.charAt(i);\n            if (isValidTopicNameCharacter(c)) {\n                sanitizedTopicName.append(c);\n            } else {\n                sanitizedTopicName.append(replacementCharacter);\n                replaced = true;\n            }\n        }\n        if (replaced) {\n            LOG.warn(\"Topic name {} contains invalid characters. Replacing with {}.\", topicName, sanitizedTopicName);\n        }\n        return sanitizedTopicName.toString();\n    }", "CodeBleu_score": 59.59425513141675}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t        this.connectorType = connectorType;\n        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.replacedErrorHandler = replacedErrorHandler;\n        this.producerThrowable = new AtomicReference<>();\n        this.retries = connectorConfig.getMaxRetriesOnError();\n        if (replacedErrorHandler != null) {\n            this.retries = replacedErrorHandler.getRetries();\n        }\n    }", "CodeBleu_score": 67.95084707072168}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t        this.connectorType = connectorType;\n        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.retryCount = replacedErrorHandler == null ? 0 : replacedErrorHandler.getRetries();\n        this.maxRetries = connectorConfig.getMaxRetriesOnError();\n        this.maxRetriesOnError = maxRetries != null ? maxRetries : Integer.MAX_VALUE;\n    }", "CodeBleu_score": 54.82215007227978}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t        this.connectorType = connectorType;\n        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.retryCount = replacedErrorHandler != null ? replacedErrorHandler.retryCount : 0;\n        this.maxRetries = getMaxRetriesOnError(connectorType, connectorConfig);\n    }", "CodeBleu_score": 45.99493919711795}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t        Map<String, ConfigValue> validations = configuration.validate(fields);\n        for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n            if (!entry.getValue().errorMessages().isEmpty()) {\n                final ConfigValue value = entry.getValue();\n                throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n            }\n        }\n    }", "CodeBleu_score": 88.33017243847502}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t        Map<String, ConfigValue> validations = configuration.validate(fields);\n        for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n            if (!entry.getValue().errorMessages().isEmpty()) {\n                final ConfigValue value = entry.getValue();\n                throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n            }\n        }\n    }", "CodeBleu_score": 88.33017243847502}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t        Map<String, ConfigValue> validations = configuration.validate(fields);\n        for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n            if (!entry.getValue().errorMessages().isEmpty()) {\n                final ConfigValue value = entry.getValue();\n                throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n            }\n        }\n    }", "CodeBleu_score": 88.33017243847502}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema.type().isPrimitive()) {\n        return oldSchema;\n    }\n\n    // Get fields from original schema\n    SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n    for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n        if (isContainedIn(field.name(), nestedFields)) {\n            newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n        } else {\n            newSchemabuilder.field(field.name(), field.schema());\n        }\n    }\n\n    LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n    for (int i = 0; i < headers.size(); i++) {\n        Header currentHeader = headerToProcess.get(headers.get(i));\n        Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n        LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n        if (currentFieldName.isPresent() && currentHeader != null) {\n            newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n        }\n    }\n    LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n    return newSchemabuilder.build();\n}", "CodeBleu_score": 99.56338433231458}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema.type().isPrimitive()) {\n        return oldSchema;\n    }\n\n    // Get fields from original schema\n    SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n    for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n        if (isContainedIn(field.name(), nestedFields)) {\n\n            newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n        }\n        else {\n            newSchemabuilder.field(field.name(), field.schema());\n        }\n    }\n\n    LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n    for (int i = 0; i < headers.size(); i++) {\n\n        Header currentHeader = headerToProcess.get(headers.get(i));\n        Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n        LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n        if (currentFieldName.isPresent() && currentHeader != null) {\n            newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n        }\n    }\n    LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n    return newSchemabuilder.build();\n}", "CodeBleu_score": 99.75474500864982}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n        if (oldSchema.type().isPrimitive()) {\n            return oldSchema;\n        }\n\n        // Get fields from original schema\n        SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n        for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n            if (isContainedIn(field.name(), nestedFields)) {\n\n                newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n            }\n            else {\n                newSchemabuilder.field(field.name(), field.schema());\n            }\n        }\n\n        LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n        for (int i = 0; i < headers.size(); i++) {\n\n            Header currentHeader = headerToProcess.get(headers.get(i));\n            Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n            LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n            if (currentFieldName.isPresent() && currentHeader != null) {\n                newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n            }\n        }\n        LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n        return newSchemabuilder.build();\n    }", "CodeBleu_score": 97.99759105768322}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.schema().field(SnapshotRecord.SNAPSHOT_KEY_FIELD) != null && source.schema().field(SnapshotRecord.SNAPSHOT_KEY_FIELD).schema().name().equals(SnapshotRecord.SNAPSHOT_KEY_SCHEMA)) {\n        String snapshotString = source.getString(SnapshotRecord.SNAPSHOT_KEY_FIELD);\n        if (snapshotString != null) {\n            return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 69.52488485415793}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    Schema schema = source.schema();\n    if (schema.field(SNAPSHOT_KEY) == null) {\n        return null;\n    }\n    String snapshotString = source.getString(SNAPSHOT_KEY);\n    if (snapshotString == null) {\n        return null;\n    }\n    snapshotString = snapshotString.toUpperCase();\n    return valueOf(snapshotString);\n}", "CodeBleu_score": 36.85147950753777}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.schema().field(SNAPSHOT_KEY) != null && source.getString(SNAPSHOT_KEY).toUpperCase().equals(SNAPSHOT_KEY)) {\n        return SnapshotRecord.valueOf(source.getString(SNAPSHOT_KEY));\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 25.233310778671935}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n        String[] parts = version.split(\"\\\\.\");\n        String[] subParts = parts[0].split(\"-\");\n        return Optional.of(Float.parseFloat(subParts[0]));\n    } catch (Exception e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 60.239960527081614}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n        String[] parts = version.split(\"\\\\.\");\n        if (parts.length > 2) {\n            parts = Arrays.copyOfRange(parts, 0, 2);\n        }\n        String[] subParts = parts[0].split(\"-\");\n        return Optional.of(Float.parseFloat(subParts[0]));\n    } catch (Exception e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 66.61546715154962}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n        String[] parts = version.split(\"\\\\.\");\n        String[] subparts = parts[0].split(\"-\");\n        return Optional.of(Float.parseFloat(subparts[0]));\n    } catch (Exception e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 60.431700294686564}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 95.616906356027}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 95.616906356027}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 95.616906356027}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.74751834071806}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.74751834071806}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.74751834071806}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    ConnectAction[] connectActions;\n    if (RESTART_ACTIONS.contains(action)) {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n    } else {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n    }\n\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(connectActions)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService\n            .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 97.98462714091751}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    ConnectAction[] connectActions;\n    if (RESTART_ACTIONS.contains(action)) {\n        connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n    } else {\n        connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n    }\n\n    var context = AccessContext.builder()\n            .cluster(clusterName)\n            .connect(connectName)\n            .connectActions(connectActions)\n            .operationName(\"updateConnectorState\")\n            .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n            .build();\n\n    return validateAccess(context).then(\n            kafkaConnectService\n                    .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n                    .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 96.70936033094512}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t  ConnectAction[] connectActions;\n  if (RESTART_ACTIONS.contains(action)) {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n  } else {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n  }\n\n  var context = AccessContext.builder()\n      .cluster(clusterName)\n      .connect(connectName)\n      .connectActions(connectActions)\n      .operationName(\"updateConnectorState\")\n      .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n      .build();\n\n  return validateAccess(context).then(\n      kafkaConnectService\n          .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n          .map(ResponseEntity::ok)\n  ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 99.23554997824671}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t  return kafkaConnectService\n      .validateConnectorPluginConfig(\n          getCluster(clusterName), connectName, pluginName, requestBody)\n      .map(ResponseEntity::ok);\n}", "CodeBleu_score": 45.60697206589765}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t", "CodeBleu_score": 7.1690436822820445}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t", "CodeBleu_score": 7.1690436822820445}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class).initializers(dynamicConfigPropertiesInitializer()).run(args);\n}", "CodeBleu_score": 33.897978348638155}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    SpringApplicationBuilder builder = new SpringApplicationBuilder(KafkaUiApplication.class);\n    builder.initializers(new DynamicConfigPropertiesInitializer());\n    return builder.run(args);\n}", "CodeBleu_score": 45.22206797006011}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    SpringApplicationBuilder builder = new SpringApplicationBuilder(KafkaUiApplication.class);\n    builder.initializers(new DynamicConfigPropertiesInitializer());\n    return builder.run(args);\n}", "CodeBleu_score": 45.22206797006011}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n      return connector -> true;\n    }\n\n    final String searchTerm = search.toLowerCase();\n    return connector -> getStringsForSearch(connector)\n        .anyMatch(string -> string.toLowerCase().contains(searchTerm));\n  }", "CodeBleu_score": 62.98824386352305}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n      return connector -> true;\n    }\n    final String searchTerm = search.toLowerCase();\n    return connector -> getStringsForSearch(connector)\n        .anyMatch(string -> containsIgnoreCase(string, searchTerm));\n  }", "CodeBleu_score": 65.16378953276609}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n      return connector -> true;\n    }\n    return connector -> getStringsForSearch(connector).anyMatch(str -> str.containsIgnoreCase(search));\n  }", "CodeBleu_score": 66.44309769207794}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattened = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattened;\n    }\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      if (prefix != null) {\n        key = prefix + \".\" + key;\n      }\n      Object value = entry.getValue();\n      if (value instanceof Map) {\n        flattened.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        flattened.put(key, value);\n      }\n    }\n    return flattened;\n  }", "CodeBleu_score": 56.790973071879925}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattened = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattened;\n    }\n\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      if (prefix != null) {\n        key = prefix + \".\" + key;\n      }\n      if (entry.getValue() instanceof Map) {\n        flattened.putAll(flattenClusterProperties(key, (Map<String, Object>) entry.getValue()));\n      } else {\n        flattened.put(key, entry.getValue());\n      }\n    }\n\n    return flattened;\n  }", "CodeBleu_score": 52.29794710486364}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattened = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattened;\n    }\n\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      if (prefix != null) {\n        key = prefix + \".\" + key;\n      }\n\n      if (entry.getValue() instanceof Map) {\n        flattened.putAll(flattenClusterProperties(key, (Map<String, Object>) entry.getValue()));\n      } else {\n        flattened.put(key, entry.getValue());\n      }\n    }\n\n    return flattened;\n  }", "CodeBleu_score": 52.29794710486364}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t        final ConfigDef configDef = new ConfigDef();\n        addClientSslSupport(configDef);\n        addClientSaslSupport(configDef);\n        return configDef.filter(config -> config.type() == ConfigDef.Type.PASSWORD)\n                .entrySet()\n                .stream()\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toSet());\n    }", "CodeBleu_score": 69.75316939026715}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t        ConfigDef configDef = new ConfigDef();\n        addClientSslSupport(configDef);\n        addClientSaslSupport(configDef);\n        return configDef.configKeys().stream()\n                .filter(configKey -> configKey.type == ConfigDef.Type.PASSWORD)\n                .map(configKey -> configKey.name)\n                .collect(Collectors.toSet());\n    }", "CodeBleu_score": 63.577128065492786}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    final ConfigDef configDef = new ConfigDef();\n    addClientSslSupport(configDef);\n    addClientSaslSupport(configDef);\n    return configDef.names().stream()\n            .filter(name -> configDef.get(name).type() == ConfigDef.Type.PASSWORD)\n            .collect(Collectors.toSet());\n  }", "CodeBleu_score": 69.07164730038339}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return Mono.just(clusterDescription)\n        .filter(clusterDescription1 -> aclViewEnabled(adminClient))\n        .map(ClusterDescription::getAuthorizedOperations)\n        .filter(authorizedOperations -> authorizedOperations.containsAll(Arrays.asList(AclOperation.ALL, AclOperation.ALTER)))\n        .map(authorizedOperations -> KAFKA_ACL_EDIT);\n  }", "CodeBleu_score": 26.637762897819485}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    if (aclViewEnabled(adminClient)) {\n      return getAuthorizedOperations(adminClient)\n        .map(operations -> {\n          if (operations.contains(ReactiveAdminClient.AuthorizedOperation.ALL) ||\n            operations.contains(ReactiveAdminClient.AuthorizedOperation.ALTER)) {\n            return ClusterFeature.KAFKA_ACL_EDIT;\n          }\n          return null;\n        })\n        .ofNullable();\n    }\n    return Mono.empty();\n  }", "CodeBleu_score": 28.459203461833344}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return Mono.just(clusterDescription)\n        .filter(this::aclViewEnabled)\n        .filter(cluster -> getAuthorizedOperations(cluster).containsAll(ALL_ACL_OPERATIONS))\n        .map(cluster -> KAFKA_ACL_EDIT);\n  }", "CodeBleu_score": 17.13466302271701}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    // Initialize the map of offsets to read from based on the previous range or the offsets from seek operations if the previous range is empty\n    TreeMap<TopicPartition, FromToOffset> offsetsToReadFrom = prevRange != null ? prevRange : seekOperations.getOffsetsForSeek();\n    // Calculate the number of messages to poll per partition\n    int numMessagesToPollPerPartition = calculateNumMessagesToPollPerPartition(offsetsToReadFrom);\n    // For each topic partition, determine the start offset and adjust it based on the number of messages to poll, ensuring it does not go below the beginning offset\n    for (FromToOffset fromToOffset : offsetsToReadFrom.values()) {\n        long startOffset = fromToOffset.getFrom();\n        long endOffset = fromToOffset.getTo();\n        long newStartOffset = Math.max(startOffset - numMessagesToPollPerPartition, endOffset);\n        fromToOffset.setFrom(newStartOffset);\n    }\n    // Return the map of topic partitions to their respective polling ranges\n    return offsetsToReadFrom;\n}", "CodeBleu_score": 26.47869763226329}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> result = new TreeMap<>();\n    Map<TopicPartition, Long> offsetsFromSeekOperations = seekOperations.getOffsetsForSeek();\n    for (Map.Entry<TopicPartition, Long> entry : offsetsFromSeekOperations.entrySet()) {\n        TopicPartition topicPartition = entry.getKey();\n        Long seekOffset = entry.getValue();\n        if (seekOffset == null) {\n            result.put(topicPartition, new FromToOffset(null, null));\n        } else {\n            result.put(topicPartition, new FromToOffset(seekOffset, seekOffset));\n        }\n    }\n    for (Map.Entry<TopicPartition, FromToOffset> entry : prevRange.entrySet()) {\n        TopicPartition topicPartition = entry.getKey();\n        FromToOffset prevOffsets = entry.getValue();\n        if (prevOffsets.getBeginOffset() == null) {\n            result.put(topicPartition, new FromToOffset(null, null));\n        }\n    }\n    long numMessagesToPoll = calculateNumMessagesToPoll(result);\n    for (Map.Entry<TopicPartition, FromToOffset> entry : result.entrySet()) {\n        TopicPartition topicPartition = entry.getKey();\n        FromToOffset prevOffsets = entry.getValue();\n        if (prevOffsets.getBeginOffset() == null) {\n            long startOffset = topicPartition.getBeginOffsets().get(topicPartition.getPartition());\n            long endOffset = startOffset + numMessagesToPoll;\n            result.put(topicPartition, new FromToOffset(startOffset, endOffset));\n        } else {\n            long startOffset = Math.max(prevOffsets.getBeginOffset() + numMessagesToPoll, topicPartition.getBeginOffsets().get(topicPartition.getPartition()));\n            long endOffset = startOffset + numMessagesToPoll;\n            result.put(topicPartition, new FromToOffset(startOffset, endOffset));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 31.567048280074683}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> range = new TreeMap<>(Comparator.comparingInt(TopicPartition::partition));\n    if (prevRange.isEmpty()) {\n        range.putAll(seekOperations.getOffsetsForSeek());\n    } else {\n        range.putAll(prevRange);\n    }\n\n    int numMessagesToPoll = calculateNumMessagesToPoll(range);\n\n    for (Map.Entry<TopicPartition, FromToOffset> entry : range.entrySet()) {\n        TopicPartition topicPartition = entry.getKey();\n        FromToOffset fromToOffset = entry.getValue();\n        long startOffset = fromToOffset.getFromOffset();\n        if (startOffset == -1) {\n            startOffset = getBeginOffsets(topicPartition).get(topicPartition);\n        }\n        startOffset = Math.max(startOffset, fromToOffset.getFromOffset());\n        long endOffset = startOffset + numMessagesToPoll - 1;\n        range.put(topicPartition, new FromToOffset(startOffset, endOffset));\n    }\n\n    return range;\n}", "CodeBleu_score": 44.84140301868304}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t    // If the input is legacy, check if the configuration is valid.\n    if (input.isLegacy()) {\n        // Check if the ZooKeeper configuration is valid.\n        if (configuration.getString(CK_ZOOKEEPER).isEmpty()) {\n            throw new ConfigurationException(\"Legacy input requires a ZooKeeper configuration.\");\n        }\n    } else {\n        // Check if the bootstrap servers configuration is valid.\n        if (configuration.getString(CK_BOOTSTRAP).isEmpty()) {\n            throw new ConfigurationException(\"Consumer input requires a bootstrap servers configuration.\");\n        }\n    }\n\n    // Wait for the server to be running.\n    Uninterruptibles.awaitUninterruptibly(serverRunningLatch);\n\n    // Register for server lifecycle events.\n    eventBus.register(this);\n\n    // Launch the input based on the mode.\n    if (input.isLegacy()) {\n        doLaunchLegacy(input);\n    } else {\n        doLaunchConsumer(input);\n    }\n\n    // Schedule a task to update the last second bytes read every second.\n    executor.scheduleAtFixedRate(new Runnable() {\n        @Override\n        public void run() {\n            lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n        }\n    }, 1, 1, TimeUnit.SECONDS);\n}", "CodeBleu_score": 39.36045312886121}, {"code": "public void doLaunch(final MessageInput input){\n\t    final boolean legacyMode = configuration.getBoolean(CK_LEGACY_MODE, DEFAULT_LEGACY_MODE);\n\n    if (legacyMode) {\n        // Validate ZooKeeper\n        final String zookeeper = configuration.getString(CK_ZOOKEEPER);\n        if (isNullOrEmpty(zookeeper)) {\n            throw new ConfigurationException(\"ZooKeeper is not configured.\");\n        }\n    } else {\n        // Validate bootstrap servers\n        final String bootstrap = configuration.getString(CK_BOOTSTRAP);\n        if (isNullOrEmpty(bootstrap)) {\n            throw new ConfigurationException(\"Bootstrap servers are not configured.\");\n        }\n    }\n\n    // Wait for the server to be running\n    Uninterruptibles.awaitUninterruptibly(serverRunningLatch);\n\n    // Register for server lifecycle events\n    lifecycleService.register(this);\n\n    if (legacyMode) {\n        doLaunchLegacy(input);\n    } else {\n        doLaunchConsumer(input);\n    }\n\n    // Schedule a task to update the last second bytes read every second\n    scheduler.scheduleAtFixedRate(new Runnable() {\n        @Override\n        public void run() {\n            lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n        }\n    }, 1, 1, TimeUnit.SECONDS);\n}", "CodeBleu_score": 62.81415541910273}, {"code": "public void doLaunch(final MessageInput input){\n\t    if (configuration.getBoolean(CK_LEGACY, false)) {\n        if (configuration.isNullOrEmpty(CK_ZOOKEEPER)) {\n            throw new IllegalArgumentException(\"ZooKeeper must be set when legacy mode is enabled.\");\n        }\n    } else {\n        if (configuration.isNullOrEmpty(CK_BOOTSTRAP)) {\n            throw new IllegalArgumentException(\"Bootstrap servers must be set when legacy mode is disabled.\");\n        }\n    }\n\n    Uninterruptibles.awaitUninterruptibly(serverRunning);\n\n    lifecycle.register(this);\n\n    if (configuration.getBoolean(CK_LEGACY, false)) {\n        doLaunchLegacy(input);\n    } else {\n        doLaunchConsumer(input);\n    }\n\n    executor.scheduleAtFixedRate(new Runnable() {\n        @Override\n        public void run() {\n            lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n        }\n    }, 1, 1, TimeUnit.SECONDS);\n}", "CodeBleu_score": 44.121990252159}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        props.putAll(load(getString(\"custom.properties\")));\n    } catch (IOException e) {\n        error(\"Unable to load custom properties\", e);\n    }\n}", "CodeBleu_score": 26.132372095218237}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        String customProperties = getString(CUSTOM_PROPERTIES_KEY);\n        if (customProperties != null) {\n            Properties custom = new Properties();\n            custom.load(new StringReader(customProperties));\n            props.putAll(custom);\n        }\n    } catch (IOException e) {\n        error(\"Error loading custom properties: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 40.813002268399615}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        props.putAll(load(getString(R.string.custom_properties)));\n    } catch (IOException e) {\n        Log.e(TAG, \"Unable to insert custom properties\", e);\n    }\n}", "CodeBleu_score": 26.819095494741678}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t        final List<Journal.Entry> journalEntries = entries.stream()\n                .filter(Objects::nonNull)\n                .map(this::mapToJournalEntry)\n                .collect(Collectors.toList());\n\n        final long totalMessageBytes = journalEntries.stream()\n                .mapToLong(Journal.Entry::getMessageSize)\n                .sum();\n\n        final long start = System.currentTimeMillis();\n        try {\n            writeToJournal(journalEntries);\n        } catch (JournalException e) {\n            throw new MessageQueueException(e);\n        }\n        final long end = System.currentTimeMillis();\n\n        writtenMessages.addAndGet(journalEntries.size());\n        writtenBytes.addAndGet(totalMessageBytes);\n        writeTime.addAndGet(end - start);\n    }", "CodeBleu_score": 48.27028902353422}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t        final List<Journal.Entry> journalEntries = entries.stream()\n                .filter(Objects::nonNull)\n                .map(this::mapToJournalEntry)\n                .collect(Collectors.toList());\n\n        final int totalMessageBytes = journalEntries.stream()\n                .map(Journal.Entry::message)\n                .mapToInt(ByteBuffer::limit)\n                .sum();\n\n        final long startTime = System.currentTimeMillis();\n        long lastOffset = -1;\n        int attempt = 0;\n        while (lastOffset < 0) {\n            try {\n                lastOffset = kafkaJournal.write(journalEntries);\n            } catch (JournalException e) {\n                LOG.error(\"Failed to write to journal\", e);\n                if (attempt < MAX_WRITE_ATTEMPTS) {\n                    try {\n                        Thread.sleep(backoff(attempt));\n                    } catch (InterruptedException ex) {\n                        throw new MessageQueueException(\"Interrupted while backing off\", ex);\n                    }\n                    attempt++;\n                } else {\n                    throw new MessageQueueException(\"Failed to write to journal after \" + MAX_WRITE_ATTEMPTS + \" attempts\", e);\n                }\n            }\n        }\n        final long endTime = System.currentTimeMillis();\n\n        LOG.debug(\"Wrote {} messages ({} bytes) to journal in {} ms\",\n                journalEntries.size(), totalMessageBytes, endTime - startTime);\n\n        writtenMessages.add(journalEntries.size());\n        writtenBytes.add(totalMessageBytes);\n    }", "CodeBleu_score": 48.72572390628956}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t        final List<Journal.Entry> journalEntries = entries.stream()\n                .filter(Objects::nonNull)\n                .map(this::toJournalEntry)\n                .collect(Collectors.toList());\n\n        final long totalMessageBytes = journalEntries.stream()\n                .mapToLong(Journal.Entry::getSize)\n                .sum();\n\n        final long startTime = System.currentTimeMillis();\n        final long lastOffset;\n        try {\n            lastOffset = writeWithRetries(journalEntries);\n        } catch (JournalException e) {\n            throw new MessageQueueException(\"Failed to write to journal\", e);\n        }\n\n        final long endTime = System.currentTimeMillis();\n        final long elapsedTime = endTime - startTime;\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Wrote {} entries to journal in {} ms, last offset: {}\",\n                    journalEntries.size(), elapsedTime, lastOffset);\n        }\n\n        writtenMessages.mark(journalEntries.size());\n        writtenBytes.mark(totalMessageBytes);\n    }", "CodeBleu_score": 49.54015976547772}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t    Optional<Message> maxValidMessage = messages.stream().filter(this::isValidMessage).max(Comparator.comparing(Message::getQueueId));\n    maxValidMessage.ifPresent(message -> {\n        messageQueue.acknowledge(message.getQueueId());\n        metrics.mark(messages.size());\n    });\n}", "CodeBleu_score": 41.08516734229447}, {"code": "public void acknowledge(List<Message> messages){\n\t        long maxValidId = messages.stream().filter(Message::isValid).mapToLong(Message::getId).max().orElse(0L);\n        if (maxValidId > 0) {\n            this.acknowledgedMessages.add(maxValidId);\n            this.metrics.mark(messages.size());\n        }\n    }", "CodeBleu_score": 39.11602368741356}, {"code": "public void acknowledge(List<Message> messages){\n\t    Optional<Long> maxValidMessageQueueId = messages.stream().map(Message::getQueueId).filter(queueId -> queueId <= this.queueId).max(Long::compareTo);\n    maxValidMessageQueueId.ifPresent(queueId -> {\n        this.queueId = queueId;\n        this.metrics.mark(messages.size());\n    });\n}", "CodeBleu_score": 42.15565670709546}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t        final MetricRegistry registry = LocalKafkaJournal.this.getMetrics();\n        final String prefix = LocalKafkaJournal.this.getClass().getName();\n        registry.getMetrics().entrySet().stream()\n                .filter(e -> e.getKey().startsWith(prefix))\n                .forEach(e -> {\n                    final String legacyName = e.getKey().replace(prefix, \"kafka.log\");\n                    try {\n                        registry.register(legacyName, e.getValue());\n                    } catch (final Exception ex) {\n                        LocalKafkaJournal.this.warn(\"Failed to register legacy metric {} under new name {}\", e.getKey(), legacyName);\n                    }\n                });\n    }", "CodeBleu_score": 47.350443740460555}, {"code": "private void registerLegacyMetrics(){\n\t        final String className = LocalKafkaJournal.class.getSimpleName();\n        final MetricRegistry metricRegistry = this.metrics.metricRegistry();\n        final Set<String> filteredMetrics = metricRegistry.getMetrics().keySet().stream().filter(name -> name.startsWith(className)).collect(Collectors.toSet());\n        for (final String metricName : filteredMetrics) {\n            final String legacyMetricName = metricName.replace(className, \"kafka-log\");\n            try {\n                metricRegistry.register(legacyMetricName, metricRegistry.getMetrics().get(metricName));\n            } catch (final IllegalArgumentException e) {\n                log.warn(\"Failed to register legacy metric {} under new name {}. This indicates that the metric has already been registered.\", metricName, legacyMetricName);\n            }\n        }\n    }", "CodeBleu_score": 40.74992992928579}, {"code": "private void registerLegacyMetrics(){\n\t        final String prefix = LocalKafkaJournal.class.getSimpleName() + \".\";\n        final MetricRegistry registry = LocalKafkaJournal.this.getMetrics().getRegistry();\n        final Map<String, Metric> metrics = registry.getMetrics();\n        for (final Map.Entry<String, Metric> entry : metrics.entrySet()) {\n            final String name = entry.getKey();\n            if (name.startsWith(prefix)) {\n                final String legacyName = name.substring(prefix.length());\n                try {\n                    registry.register(legacyName, entry.getValue());\n                } catch (final IllegalArgumentException e) {\n                    logger.warn(\"Unable to register legacy metric {} under new name {}\", name, legacyName);\n                }\n            }\n        }\n    }", "CodeBleu_score": 43.31024754982089}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.register(metricName, new HdrTimer(metricName));\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 24.49086260409129}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 21.97987496955459}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 21.97987496955459}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t        try {\n            metricRegistry.register(name, new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    final long size = kafkaLog.size();\n                    if (size == 0) {\n                        return 0L;\n                    }\n                    final long committed = committedOffset();\n                    if (committed == -1) {\n                        return kafkaLog.logEndOffset() - kafkaLog.logStartOffset();\n                    } else {\n                        return kafkaLog.logEndOffset() - committed;\n                    }\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // Ignore, this can happen if the metric is already registered.\n        }\n    }", "CodeBleu_score": 52.786205418065556}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t        try {\n            metricRegistry.register(MetricRegistry.name(name, \"uncommitted\"), new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    if (size() == 0) {\n                        return 0L;\n                    }\n                    if (committedOffset == -1) {\n                        return getLogEndOffset() - getLogStartOffset();\n                    }\n                    return getLogEndOffset() - committedOffset;\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // Ignore\n        }\n    }", "CodeBleu_score": 63.695760590815794}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t        try {\n            metricRegistry.register(MetricRegistry.name(getClass(), name, \"Uncommitted\"), new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    final long size = size();\n                    if (size == 0) {\n                        return 0L;\n                    }\n                    final long committed = getCommittedOffset();\n                    if (committed == -1) {\n                        return getLogEndOffset() - getLogStartOffset();\n                    }\n                    return getLogEndOffset() - committed;\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // ignore\n        }\n    }", "CodeBleu_score": 53.93868469501977}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t        if (messages.isEmpty()) {\n            logger.debug(\"No messages to flush\");\n            return -1;\n        }\n        ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n        logger.trace(\"Flushing {} messages with {} bytes payload\", messageSet.size(), payloadSize);\n        long lastOffset = kafkaLog.append(messageSet);\n        logger.trace(\"Wrote {} messages with {} bytes payload to {}\", messageSet.size(), payloadSize, lastOffset);\n        mark(messageSet.size());\n        return lastOffset;\n    }", "CodeBleu_score": 38.639335924006105}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t        if (messages.isEmpty()) {\n            if (isDebugEnabled) {\n                debug(\"No messages to flush\");\n            }\n            return kafkaLog.lastOffset();\n        }\n\n        ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages, payloadSize);\n        if (isDebugEnabled) {\n            debug(\"Flushing %d messages (%d bytes) to log %s\", messageSet.size(), messageSet.sizeInBytes(), log);\n        }\n        kafkaLog.append(messageSet);\n        long lastOffset = kafkaLog.lastOffset();\n        if (isDebugEnabled) {\n            debug(\"Wrote %d messages (%d bytes) to log %s: %s\", messageSet.size(), messageSet.sizeInBytes(), log, lastOffset);\n        }\n        mark(messageSet.size());\n        return lastOffset;\n    }", "CodeBleu_score": 43.26736817475178}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t        if (messages.isEmpty()) {\n            logger.debug(\"No messages to flush\");\n            return lastOffset;\n        }\n\n        ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages, payloadSize);\n        logger.debug(\"Flushing {} messages with {} bytes payload\", messageSet.size(), payloadSize);\n\n        long offset = kafkaLog.append(messageSet);\n        logger.debug(\"Wrote {} messages with {} bytes payload to offset {}\", messageSet.size(), payloadSize, offset);\n\n        lastOffset = offset;\n        mark(messageSet.size());\n\n        return offset;\n    }", "CodeBleu_score": 40.97854724332177}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t        try {\n            lock.lock();\n            List<AdminClient> adminClientList = clientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n\n            LOGGER.info(\"start to close kafka AdminClient, clusterPhyId:{}\", clusterPhyId);\n            boolean allSuccess = true;\n            for (AdminClient adminClient: adminClientList) {\n                try {\n                    // \u5173\u95ed\u5ba2\u6237\u7aef\uff0c\u8d85\u65f6\u65f6\u95f4\u4e3a30\u79d2\n                    adminClient.close(Duration.ofSeconds(30));\n                } catch (Exception e) {\n                    // ignore\n                    LOGGER.error(\"close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId, e);\n                    allSuccess = false;\n                }\n            }\n\n            if (allSuccess) {\n                LOGGER.info(\"close kafka AdminClient success, clusterPhyId:{}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId);\n            }\n        } finally {\n            lock.unlock();\n        }\n    }", "CodeBleu_score": 68.65995554349635}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t        try {\n            lock.lock();\n            List<AdminClient> adminClientList = clientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n\n            LOGGER.info(\"start to close kafka AdminClient, clusterPhyId:{}\", clusterPhyId);\n            boolean allSuccess = closeAdminClientList(clusterPhyId, adminClientList);\n            if (allSuccess) {\n                LOGGER.info(\"close kafka AdminClient success, clusterPhyId:{}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId, e);\n        } finally {\n            lock.unlock();\n        }\n    }", "CodeBleu_score": 79.33550047839772}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t        if (clusterPhyId == null) {\n            return;\n        }\n\n        try {\n            lock.lock();\n            List<AdminClient> adminClientList = adminClientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n\n            LOGGER.info(\"start to close kafka AdminClient, clusterPhyId:{}\", clusterPhyId);\n            boolean allSuccess = closeAdminClientList(clusterPhyId, adminClientList);\n            if (allSuccess) {\n                LOGGER.info(\"close kafka AdminClient success, clusterPhyId:{}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId, e);\n        } finally {\n            lock.unlock();\n        }\n    }", "CodeBleu_score": 77.63529159133647}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    boolean success = true\n    if (adminClientList == null) {\n        return true\n    }\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30))\n        } catch (Exception e) {\n            log.error(\"Failed to close AdminClient for cluster ${clusterPhyId}\", e)\n            success = false\n        }\n    }\n    return success\n}", "CodeBleu_score": 59.75072790500234}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(ofSeconds(30));\n        } catch (Exception e) {\n            log.error(\"close adminClient error, clusterPhyId:{}\", clusterPhyId, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 66.93603999810523}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    boolean success = true;\n    if (adminClientList == null) {\n        return true;\n    }\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            log.error(\"Failed to close AdminClient for cluster {}\", clusterPhyId, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 79.06858596039407}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        int attempts = 5;\n        while (app.isRunning() && attempts > 0) {\n            attempts = attempts - 1;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 93.09752595819398}, {"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        int attempts = 5;\n        while (app.isRunning() && attempts > 0) {\n            attempts = attempts - 1;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 93.09752595819398}, {"code": "public void stop() {\n\t\t\tif (app != null) {\n\t\t\tapp.stop();\n\t\t\tint attempts = 5;\n\t\t\twhile (app.isRunning() && attempts > 0) {\n\t\t\t\tattempts = attempts - 1;\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException e) {\n\t\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tapp = null;\n\t\t}\n\t}", "CodeBleu_score": 93.64540182287362}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner runner = new EurekaServerRunner(config)\n    runner.enableTls()\n    runner.setKeyStore(keyStore, keyStorePassword)\n    runner.setTrustStore(trustStore, trustStorePassword)\n    runner.start()\n    return runner\n}", "CodeBleu_score": 38.47197684734838}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner eurekaServer = new EurekaServerRunner(config)\n    enableTls(eurekaServer)\n    setKeyStore(eurekaServer)\n    setTrustStore(eurekaServer)\n    eurekaServer.start()\n    return eurekaServer\n}", "CodeBleu_score": 32.761409682472916}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner runner = new EurekaServerRunner(config)\n    runner.enableTls()\n    runner.setKeystore(keystore, keystorePassword)\n    runner.setTrustStore(truststore, truststorePassword)\n    runner.start()\n    return runner\n}", "CodeBleu_score": 36.48581490067885}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\t\tEurekaClientRunner client = new EurekaClientRunner(config, server, \"testservice\");\n\t\tenableTlsClient(client);\n\t\tclient.start();\n\t\treturn client;\n\t}", "CodeBleu_score": 67.14514233323408}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\t\tEurekaClientRunner runner = new EurekaClientRunner(config, server, \"testservice\");\n\t\tenableTlsClient(runner);\n\t\trunner.start();\n\t\treturn runner;\n\t}", "CodeBleu_score": 67.20622575706126}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\t\tEurekaClientRunner client = new EurekaClientRunner(config, server, \"testservice\");\n\t\tenableTlsClient(client);\n\t\tclient.start();\n\t\treturn client;\n\t}", "CodeBleu_score": 67.14514233323408}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t\t\tKeyTool ca = KeyTool.createCA(\"ca\");\n\t\tKeyAndCert server = ca.createServer(\"server\");\n\t\tKeyAndCert client = ca.createClient(\"client\");\n\t\tsaveCert(server);\n\t\tsaveKeyAndCert(server);\n\t\tsaveCert(client);\n\t\tsaveKeyAndCert(client);\n\n\t\tKeyTool ca2 = KeyTool.createCA(\"ca2\");\n\t\tKeyAndCert client2 = ca2.createClient(\"client2\");\n\t\tsaveCert(client2);\n\t\tsaveKeyAndCert(client2);\n\t}", "CodeBleu_score": 40.65411611438067}, {"code": "static void createCertificates() throws Exception{\n\t\t\tKeyTool caKeyTool = new KeyTool(CA_ALIAS, CA_PASSWORD);\n\t\tKeyAndCert caKeyAndCert = caKeyTool.createCA();\n\t\tsaveCert(caKeyAndCert);\n\n\t\tKeyTool serverKeyTool = new KeyTool(SERVER_ALIAS, SERVER_PASSWORD);\n\t\tKeyAndCert serverKeyAndCert = serverKeyTool.createServerCert(caKeyAndCert);\n\t\tsaveKeyAndCert(serverKeyAndCert);\n\n\t\tKeyTool clientKeyTool = new KeyTool(CLIENT_ALIAS, CLIENT_PASSWORD);\n\t\tKeyAndCert clientKeyAndCert = clientKeyTool.createClientCert(caKeyAndCert);\n\t\tsaveKeyAndCert(clientKeyAndCert);\n\n\t\tKeyTool caKeyTool2 = new KeyTool(CA2_ALIAS, CA2_PASSWORD);\n\t\tKeyAndCert caKeyAndCert2 = caKeyTool2.createCA();\n\t\tsaveCert(caKeyAndCert2);\n\n\t\tKeyTool clientKeyTool2 = new KeyTool(CLIENT2_ALIAS, CLIENT2_PASSWORD);\n\t\tKeyAndCert clientKeyAndCert2 = clientKeyTool2.createClientCert(caKeyAndCert2);\n\t\tsaveKeyAndCert(clientKeyAndCert2);\n\t}", "CodeBleu_score": 26.778006102319175}, {"code": "static void createCertificates() throws Exception{\n\t\t\tKeyTool ca = KeyTool.createCA(\"CA\");\n\t\tKeyAndCert server = ca.createServer(\"server\");\n\t\tKeyAndCert client = ca.createClient(\"client\");\n\t\tsaveCert(ca);\n\t\tsaveKeyAndCert(server);\n\t\tsaveKeyAndCert(client);\n\t\tKeyTool ca2 = KeyTool.createCA(\"CA2\");\n\t\tKeyAndCert client2 = ca2.createClient(\"client2\");\n\t\tsaveCert(ca2);\n\t\tsaveKeyAndCert(client2);\n\t}", "CodeBleu_score": 39.038712457912325}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long startTime = System.currentTimeMillis();\n    long timeLimit = seconds * 1000;\n    while (!assertion.getAsBoolean()) {\n        if (System.currentTimeMillis() - startTime > timeLimit) {\n            throw new RuntimeException(\"Assertion not met within \" + seconds + \" seconds\");\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}", "CodeBleu_score": 35.66761628102026}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long startTime = System.currentTimeMillis();\n    long timeLimit = seconds * 1000;\n\n    while (!assertion.getAsBoolean()) {\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        if (elapsedTime >= timeLimit) {\n            throw new RuntimeException(\"Assertion not met within \" + seconds + \" seconds\");\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}", "CodeBleu_score": 37.7673663863861}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long startTime = System.currentTimeMillis();\n    long timeLimit = seconds * 1000L;\n\n    while (!assertion.getAsBoolean()) {\n        if (System.currentTimeMillis() - startTime >= timeLimit) {\n            throw new RuntimeException(\"Assertion not met within \" + seconds + \" seconds.\");\n        }\n        yield();\n    }\n}", "CodeBleu_score": 39.33972518450505}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tJcaX509v3CertificateBuilder builder = certBuilder(keyPair.getPublic(), ca, ca);\n\t\taddExtension(builder, KeyUsage.digitalSignature, true);\n\t\taddExtension(builder, BasicConstraints.cA, true);\n\n\t\treturn signCert(builder, keyPair.getPrivate());\n\t}", "CodeBleu_score": 64.43091567224799}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tJcaX509v3CertificateBuilder builder = certBuilder(keyPair.getPublic(), ca, ca);\n\t\tbuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\t\tbuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\n\t\treturn signCert(builder, keyPair.getPrivate());\n\t}", "CodeBleu_score": 76.74321921144615}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tJcaX509v3CertificateBuilder builder = certBuilder(keyPair.getPublic(), ca, ca);\n\n\t\tbuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\t\tbuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\n\t\treturn signCert(builder, keyPair.getPrivate());\n\t}", "CodeBleu_score": 76.74321921144615}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (eurekaHttpClient == null) {\n        try {\n            eurekaHttpClient = findField(eurekaTransport, \"registrationClient\").get(eurekaTransport) as EurekaHttpClient\n        } catch (IllegalAccessException e) {\n            log.error(\"Failed to access registrationClient field\", e)\n        }\n    }\n    return eurekaHttpClient\n}", "CodeBleu_score": 32.05633743005347}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (EurekaHttpClient == null) {\n        try {\n            Field registrationClient = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n            registrationClient.setAccessible(true);\n            EurekaHttpClient = (EurekaHttpClient) registrationClient.get(eurekaTransport);\n        } catch (IllegalAccessException | NoSuchFieldException e) {\n            log.error(\"Error accessing registrationClient field from eurekaTransport\", e);\n        }\n    }\n    return EurekaHttpClient;\n}", "CodeBleu_score": 48.127951271643504}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (eurekaHttpClient == null) {\n        try {\n            Field registrationClientField = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n            registrationClientField.setAccessible(true);\n            eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n        } catch (IllegalAccessException | NoSuchFieldException e) {\n            log.error(\"Error accessing EurekaHttpClient\", e);\n        }\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 49.20098878075916}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t    List<Application> applications = this.eurekaClient.getApplications().getRegisteredApplications();\n    if (applications.isEmpty()) {\n        return Collections.emptyList();\n    }\n    List<String> names = new ArrayList<>();\n    for (Application app : applications) {\n        if (!app.getInstances().isEmpty()) {\n            names.add(app.getName().toLowerCase());\n        }\n    }\n    return names;\n}", "CodeBleu_score": 67.43424072010393}, {"code": "public List<String> getServices(){\n\t    Applications applications = this.eurekaClient.getApplications();\n    if (applications == null) {\n        return Collections.emptyList();\n    }\n    List<String> names = new ArrayList<>();\n    for (Application app : applications.getRegisteredApplications()) {\n        if (app.getInstances().size() > 0) {\n            names.add(app.getName().toLowerCase());\n        }\n    }\n    return names;\n}", "CodeBleu_score": 72.45262348690898}, {"code": "public List<String> getServices(){\n\t    Applications applications = this.eurekaClient.getApplications();\n    if (applications == null) {\n        return Collections.emptyList();\n    }\n    List<String> names = new ArrayList<>();\n    for (Application app : applications.getRegisteredApplications()) {\n        if (!app.getInstances().isEmpty()) {\n            names.add(app.getName().toLowerCase());\n        }\n    }\n    return names;\n}", "CodeBleu_score": 74.37610805470106}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    this.healthContributors.forEach((key, value) -> {\n        if (value instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) value;\n            discoveryCompositeHealthContributor.getIndicators().forEach((indicatorKey, indicatorValue) -> {\n                if (!(indicatorValue instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(indicatorKey, indicatorValue);\n                }\n            });\n        } else {\n            healthContributors.put(key, value);\n        }\n    });\n}", "CodeBleu_score": 38.36321118846035}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        HealthContributor contributor = entry.getValue();\n        if (contributor instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) contributor;\n            for (Map.Entry<String, HealthIndicator> indicatorEntry : discoveryCompositeHealthContributor.getIndicators().entrySet()) {\n                if (!(indicatorEntry.getValue() instanceof EurekaHealthIndicator)) {\n                    this.healthContributors.put(indicatorEntry.getKey(), indicatorEntry.getValue());\n                }\n            }\n        } else {\n            this.healthContributors.put(entry.getKey(), entry.getValue());\n        }\n    }\n}", "CodeBleu_score": 45.67944370513785}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : this.healthContributors.entrySet()) {\n        String name = entry.getKey();\n        HealthContributor contributor = entry.getValue();\n        if (contributor instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor composite = (DiscoveryCompositeHealthContributor) contributor;\n            for (Map.Entry<String, HealthIndicator> indicatorEntry : composite.getIndicators().entrySet()) {\n                String indicatorName = indicatorEntry.getKey();\n                HealthIndicator indicator = indicatorEntry.getValue();\n                if (!(indicator instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(name + \".\" + indicatorName, indicator);\n                }\n            }\n        } else {\n            healthContributors.put(name, contributor);\n        }\n    }\n}", "CodeBleu_score": 38.26326980881113}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.size() == 0) {\n        throw new RuntimeException(\"No service instance for provider-application\");\n    }\n    String uri = instances.get(0).getUri().toString();\n    String response = restTemplate.postForObject(uri + \"/echo\", \"Hello\", String.class);\n    return response;\n}", "CodeBleu_score": 61.4973866207283}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No instances found for provider-application\");\n    }\n    String uri = instances.get(0).getUri().toString();\n    String response = restTemplate.postForObject(uri + \"/echo\", \"Hello\", String.class);\n    return response;\n}", "CodeBleu_score": 56.242920547328424}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No instances of provider-application found\");\n    }\n    String serviceUri = instances.get(0).getUri().toString();\n    ResponseEntity<String> response = restTemplate.postForObject(serviceUri + \"/echo\", \"Hello\", String.class);\n    return response.getBody();\n}", "CodeBleu_score": 53.46950930036368}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t    ServiceInstance instance = loadBalancer.choose(\"provider-application\");\n    if (instance == null) {\n        throw new RuntimeException(\"Failed to find service instance: provider-application\");\n    }\n    URI uri = instance.getUri();\n    String url = uri.toString() + \"/echo\";\n    String response = restTemplate.postForObject(url, \"Hello World\", String.class);\n    return response;\n}", "CodeBleu_score": 64.54528775142617}, {"code": "public String world(){\n\t    ServiceInstance instance = loadBalancer.choose(\"provider-application\");\n    if (instance == null) {\n        throw new RuntimeException(\"Failed to find service: provider-application\");\n    }\n    URI uri = instance.getUri();\n    return restTemplate.postForObject(uri + \"/echo\", \"hello\", String.class);\n}", "CodeBleu_score": 44.772136287189504}, {"code": "public String world(){\n\t    ServiceInstance instance = loadBalancerClient.choose(\"provider-application\");\n    if (instance == null) {\n        throw new RuntimeException(\"Failed to discover service\");\n    }\n    URI uri = instance.getUri();\n    if (uri != null) {\n        return (String) restTemplate.postForObject(uri + \"/echo\", \"hello\", String.class);\n    }\n    return null;\n}", "CodeBleu_score": 47.72943836376625}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"Registering service: {} with IP: {} and port: {}\", serviceName, ip, port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 63.831560359055985}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"Registering service: \" + serviceName + \" with IP: \" + ip + \" and port: \" + port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 53.36343386842197}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"Received registration request for service {} with IP {} and port {}\", serviceName, ip, port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 61.02009097361998}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    log.info(\"Deregistering service: {} with IP: {} and port: {}\", serviceName, ip, port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        log.error(\"No servers found for service: {}\", serviceName);\n        return false;\n    }\n    return servers.remove(new Server(ip, port));\n}", "CodeBleu_score": 56.990442392737286}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    log.info(\"deregister: {} {} {}\", serviceName, ip, port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        return false;\n    }\n    return servers.remove(new Server(ip, port));\n}", "CodeBleu_score": 51.818998120670436}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    log.info(\"deregister service {}, ip {}, port {}\", serviceName, ip, port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        return false;\n    }\n    return servers.remove(new Server(ip, port));\n}", "CodeBleu_score": 53.640603003526046}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t        Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n        if (attributes == null) {\n            return;\n        }\n        Map<String, Object> defaultAttributes = (Map<String, Object>) attributes.get(\"defaultConfiguration\");\n        if (defaultAttributes != null) {\n            Object defaultConfigurationName = defaultAttributes.get(\"name\");\n            if (defaultConfigurationName != null) {\n                registerClientConfiguration(registry, defaultConfigurationName, defaultAttributes);\n            }\n        }\n    }", "CodeBleu_score": 44.69641492047255}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t        Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n        if (attributes == null) {\n            return;\n        }\n        Map<String, Object> defaultAttributes = (Map<String, Object>) attributes.get(\"defaultConfiguration\");\n        if (defaultAttributes != null) {\n            Object name = getName(metadata);\n            registerClientConfiguration(registry, name, defaultAttributes);\n        }\n    }", "CodeBleu_score": 47.63528854527627}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t        Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n        Map<String, Object> defaultAttributes = metadata.getAnnotationAttributes(RibbonClient.class.getName());\n        if (defaultAttributes != null) {\n            AnnotationAttributes rca = AnnotationAttributes.fromMap(defaultAttributes);\n            String name = getName(rca);\n            registerClientConfiguration(registry, name, rca.getString(\"defaultConfiguration\"));\n        }\n        if (attributes != null) {\n            AnnotationAttributes rca = AnnotationAttributes.fromMap(attributes);\n            AnnotationAttributes[] rcaa = rca.getAnnotationArray(\"value\");\n            for (AnnotationAttributes aa : rcaa) {\n                if (aa.getClassArray(\"configuration\").length == 0 && aa.getStringArray(\"value\").length > 0) {\n                    String name = getName(aa);\n                    registerClientConfiguration(registry, name, aa.getStringArray(\"value\"));\n                }\n            }\n        }\n    }", "CodeBleu_score": 44.56834936154135}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ServiceInstance instance = chooseServer(serviceId, request);\n    if (instance == null) {\n        return null;\n    }\n    return new ServiceInstance(serviceId, instance.getHost(), instance.getPort());\n}", "CodeBleu_score": 39.60772649080255}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ServiceInstance instance = getInstance(serviceId);\n    if (instance == null) {\n        return null;\n    }\n    return new ServiceInstance(serviceId, instance.getHost(), instance.getPort());\n}", "CodeBleu_score": 37.60665318372563}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ServiceInstance server = getInstance(serviceId);\n    if (server == null) {\n        return null;\n    }\n    return new ServiceInstance(serviceId, server.getHost(), server.getPort());\n}", "CodeBleu_score": 39.67334807606382}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        String host = server.getHost();\n        int port = server.getPort();\n        String path = original.getRawPath();\n        String query = original.getRawQuery();\n        URI reconstructed = new URI(\"http\", host, port, path, query, null);\n        return reconstructed;\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 40.06773454786351}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        return new URI(server.getScheme(), null, server.getHost(), server.getPort(), original.getPath(), original.getRawQuery(), null);\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 24.866264236370565}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        return new URI(server.getScheme(), server.getHost(), server.getPort(), original.getPath(), original.getRawQuery(), original.getFragment());\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 25.406315164485072}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t    // Get the service name from the configuration\n    String serviceName = config.getString(\"serviceName\");\n\n    // Construct the parameters for the HTTP GET request\n    Map<String, Object> params = new HashMap<>();\n    params.put(\"serviceName\", serviceName);\n\n    // Get the server address from the configuration\n    String serverAddr = config.getString(\"serverAddr\");\n\n    // Send an HTTP GET request to the specified server address\n    HttpResponse response = httpClient.get(serverAddr + \"/list\", params);\n\n    // Parse the JSON array into a list of TutuServer objects\n    List<TutuServer> servers = parseArray(response.body(), TutuServer.class);\n\n    // Return the list of TutuServer objects\n    return servers;\n}", "CodeBleu_score": 40.433915041805136}, {"code": "private List<TutuServer> getServer(){\n\t    String serviceName = \"tutu-server\";\n    String serverAddr = getServerAddr();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"serviceName\", serviceName);\n    String url = serverAddr + \"/list\";\n    String response = HttpUtil.get(url, params);\n    List<TutuServer> serverList = parseArray(response);\n    return serverList;\n}", "CodeBleu_score": 32.92491684677521}, {"code": "private List<TutuServer> getServer(){\n\t    def serverList = []\n    def params = [:]\n    params.put(\"serviceName\", serviceName)\n    def url = getServerAddr() + \"/list\"\n    def response = httpGet(url, params)\n    if (response.status == 200) {\n        def json = response.data\n        def array = parseArray(json)\n        for (int i = 0; i < array.length(); i++) {\n            def obj = array.get(i)\n            def ip = obj.get(\"ip\").asString()\n            def port = obj.get(\"port\").asInt()\n            def server = new TutuServer(ip, port)\n            serverList.add(server)\n        }\n    }\n    return serverList\n}", "CodeBleu_score": 24.846292294372226}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t    for (ZuulRoute route : this.routes.values()) {\n        if (pathMatcher.match(route.getPath(), path)) {\n            String newPath = path.substring(route.getPath().length());\n            if (!newPath.startsWith(\"/\")) {\n                newPath = \"/\" + newPath;\n            }\n            return new Route(newPath, route.getServiceId(), route.getUrl(), false, null);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 34.67431019556466}, {"code": "public Route getMatchingRoute(String path){\n\t    for (ZuulRoute route : routes.values()) {\n        if (pathMatcher.match(route.getPath(), path)) {\n            String targetPath = extractTargetPath(path, route.getPath());\n            return new Route(targetPath, route.getServiceId());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 34.18243823424586}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, ZuulRoute> entry : routes.entrySet()) {\n        ZuulRoute route = entry.getValue();\n        if (pathMatcher.match(route.getPath(), path)) {\n            String targetPath = path.substring(route.getPath().length());\n            return new Route(targetPath, route.getServiceId());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 44.731816438253894}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n    Set<BeanDefinitionHolder> beanDefinitions = scan(registry, packageName);\n    if (logger.isDebugEnabled()) {\n        for (BeanDefinitionHolder holder : beanDefinitions) {\n            logger.debug(\"Creating Feign client bean with name '\" + holder.getBeanName()\n                    + \"' and type of \" + holder.getBeanDefinition().getBeanClassName());\n        }\n    }\n}", "CodeBleu_score": 24.30636604684363}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry, false);\n    scanner.addIncludeFilter(new AnnotationTypeFilter(FeignClient.class));\n    scanner.addIncludeFilter(new AssignableTypeFilter(FeignClientFactoryBean.class));\n    scanner.scan(importingClassMetadata.getClassName());\n    for (String beanName : scanner.getBeanDefinitionNames()) {\n        BeanDefinition beanDefinition = registry.getBeanDefinition(beanName);\n        if (beanDefinition instanceof GenericBeanDefinition) {\n            GenericBeanDefinition genericBeanDefinition = (GenericBeanDefinition) beanDefinition;\n            genericBeanDefinition.getConstructorArgumentValues().addGenericArgumentValue(beanName);\n            genericBeanDefinition.getPropertyValues().add(\"contextId\", beanName);\n            genericBeanDefinition.setBeanClass(FeignClientFactoryBean.class);\n            registry.registerBeanDefinition(beanName, genericBeanDefinition);\n        }\n    }\n}", "CodeBleu_score": 37.446275205655965}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    // Get the package name of the importing class\n    String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n\n    // Scan for classes with the FeignClient annotation\n    Set<BeanDefinitionHolder> beanDefinitions = scanPackageByAnnotation(packageName, FeignClient.class);\n\n    // Register each bean definition with the registry\n    for (BeanDefinitionHolder definitionHolder : beanDefinitions) {\n        GenericBeanDefinition definition = (GenericBeanDefinition) definitionHolder.getBeanDefinition();\n\n        // Get the class name of the annotated class\n        String className = definition.getBeanClassName();\n\n        // Create a new GenericBeanDefinition instance for the FeignClientFactoryBean\n        GenericBeanDefinition feignClientFactoryBeanDefinition = new GenericBeanDefinition();\n\n        // Set the contextId and type of the FeignClientFactoryBean\n        feignClientFactoryBeanDefinition.setContextId(className);\n        feignClientFactoryBeanDefinition.setType(className);\n\n        // Register the FeignClientFactoryBean with the registry using its class name as the bean name\n        registry.registerBeanDefinition(className, feignClientFactoryBeanDefinition);\n    }\n}", "CodeBleu_score": 39.90836015061653}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}]}
