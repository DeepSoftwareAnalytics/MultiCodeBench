{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # Get attachment IDs from request arguments\n    attachment_ids = args.get('attachment_ids', [])\n\n    # Verify read access rights and rules for attachments\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build zip file from attachments' content\n    zip_content = attachments._build_zip_from_attachments()\n\n    # Prepare HTTP headers for zip file\n    headers = self._get_zip_headers(zip_content, 'attachments.zip')\n\n    # Return zip file as HTTP response\n    return request.make_response(zip_content, headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 39.41649408658351}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if attachment_ids:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n\n    # Verify read access rights and rules for the attachments\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build zip file from attachments' content\n    content = attachments._build_zip_from_attachments()\n\n    # Prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(content, 'attachments.zip')\n\n    # Return zip file as an HTTP response\n    return request.make_response(content, headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 50.139585231893236}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = self.getlist('attachment_ids')\n    if attachment_ids:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n        attachments = self.env['ir.attachment'].browse(attachment_ids)\n        self.attachments._check_access_rights(attachments, 'read')\n        self.attachments.check_access_rule('read')\n        content, filename = self.attachments._build_zip_from_attachments(attachments)\n        headers = self.request.make_response(content, headers=self._get_zip_headers(content, filename), cookies=None, status=200).headers\n        return headers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.34135050463257}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    request.session['my_invoices_history'] = values['invoices'].ids[:100]\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 32.290675363585244}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, domain=None, url=\"/my/invoices\")\n    request.session['my_invoices_history'] = values['invoices'].ids[:100]\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.027375381369026}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    AccountInvoice = request.env['account.move']\n    invoices = values.get('invoices')(values['pager']['offset'])\n    values.update({\n        'invoices': invoices,\n        'account_invoices': AccountInvoice,\n        'portal_account_invoices_page': 'my_invoices',\n    })\n    self._update_account_history(invoices.ids)\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 48.96580074027862}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if download:\n        invoice_sudo._get_invoice_report_filename()\n        pdf = self._show_report(model=invoice_sudo, report_type='pdf', report_ref='account.account_invoices', download=download)\n        legal_documents = invoice_sudo._get_invoice_legal_documents()\n        if len(legal_documents) > 1:\n            pdf = self._build_zip_from_attachments(pdf, legal_documents)\n        return self._get_http_headers(pdf, 'pdf')\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render('portal.portal_my_invoice', values)\n\n\n", "CodeBleu_score": 50.75997465517346}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if download:\n        invoice_sudo.check_access_rights('read')\n        invoice_sudo.check_access_rule('read')\n        legal_attachments = invoice_sudo._get_invoice_legal_documents()\n        if len(legal_attachments) == 1:\n            return request.make_response(\n                legal_attachments[0].with_context(bin_size=False).raw,\n                headers=[\n                    ('Content-Type', 'application/pdf'),\n                    ('Content-Length', len(legal_attachments[0].with_context(bin_size=False).raw)),\n                ],\n            )\n        else:\n            return request.make_response(\n                _build_zip_from_attachments(legal_attachments),\n                headers=[\n                    ('Content-Type', 'application/zip'),\n                    ('Content-Disposition', content_disposition('%s.zip' % invoice_sudo.name)),\n                ],\n            )\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render(\"account.portal_invoice_page\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 51.602723376352685}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    # Check access to the invoice\n    invoice_sudo = request.env['account.move'].sudo().browse(invoice_id).exists()\n    if not invoice_sudo or not invoice_sudo._document_check_access('portal', request.env.user):\n        return request.redirect('/my')\n\n    # If an access token is provided, check that it matches the invoice token\n    if access_token and invoice_sudo.access_token != access_token:\n        return request.redirect('/my')\n\n    # If the report type is specified, show the report\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    # If the download flag is set, download the invoice as a PDF\n    if download:\n        # Get legal documents\n        legal_documents = invoice_sudo._get_invoice_legal_documents()\n\n        # If there are multiple attachments, create a zip file\n        if len(legal_documents) > 1:\n            zip_filename, zip_content = self._build_zip_from_attachments(legal_documents)\n            headers = self._get_zip_headers(zip_filename)\n            return request.make_response(zip_content, headers=headers, cookies=None)\n\n        # If there is only one attachment, return it as a download\n        return request.make_response(legal_documents[0].datas, headers=self._get_http_headers(legal_documents[0], legal_documents[0].mimetype), cookies=None)\n\n    # Prepare and show the report\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render('account.portal_invoice_page', values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 49.34697354397033}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    # Check if the company is specified, otherwise use the current company\n    if not company:\n        company = self.env.company\n\n    # Search for product templates based on the company's domain\n    domain = company._check_company_domain([])\n    prod_templates = self.env[\"product.template\"].search(domain)\n\n    # Update the sale taxes for the product templates if the company has a sale tax\n    if company.account_sale_tax_id:\n        prod_templates_sale = prod_templates.filtered(\n            lambda p: not p.taxes_id.filtered(\n                lambda r: r.company_id == company\n            )\n        )\n        prod_templates_sale.write(\n            {\"taxes_id\": [(4, company.account_sale_tax_id.id)]}\n        )\n\n    # Update the purchase taxes for the product templates if the company has a purchase tax\n    if company.account_purchase_tax_id:\n        prod_templates_purchase = prod_templates.filtered(\n            lambda p: not p.supplier_taxes_id.filtered(\n                lambda r: r.company_id == company\n            )\n        )\n        prod_templates_purchase.write(\n            {\"supplier_taxes_id\": [(4, company.account_purchase_tax_id.id)]}\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 49.626168314544}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)] if company else []\n    domain = expression.AND([domain, [('type', '=', 'product')]])\n    prod_templates = self.env['product.template'].search(domain)\n    prod_templates_sale = prod_templates.filtered(lambda p: p.taxes_id)\n    if company.account_sale_tax_id:\n        prod_templates_sale.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    prod_templates_purchase = prod_templates.filtered(lambda p: p.supplier_taxes_id)\n    if company.account_purchase_tax_id:\n        prod_templates_purchase.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return prod_templates\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.11412499450989}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)] if company else []\n    prod_templates = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        prod_templates_sale = prod_templates.filtered(lambda p: not p.taxes_id.filtered(lambda t: t.company_id.id == company.id))\n        prod_templates_sale.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        prod_templates_purchase = prod_templates.filtered(lambda p: not p.supplier_taxes_id.filtered(lambda t: t.company_id.id == company.id))\n        prod_templates_purchase.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.10105010185913}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id, raise_if_not_found=False)\n    if account:\n        return account\n\n    domain = [('deprecated', '=', False)]\n    if account_type:\n        domain += [('user_type_id', '=', self.env.ref('account.data_account_type_' + account_type).id)]\n    domain += company._get_parent_field_domain()\n    account = self.env['account.account'].search(domain, limit=1)\n    if account:\n        return account\n\n    domain = company._get_parent_field_domain()\n    account = self.env['account.account'].search(domain, limit=1)\n    return account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 46.7618573633724}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_res_id(xml_id, raise_if_not_found=False)\n    if account:\n        return self.env['account.account'].browse(account)\n    domain = [('deprecated', '=', False), ('company_id', '=', company.id)]\n    if account_type:\n        domain += [('user_type_id', '=', self.env.ref('account.data_account_type_' + account_type).id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    if account:\n        return account\n    domain = [('deprecated', '=', False)] + self._get_company_domain(company)\n    if account_type:\n        domain += [('user_type_id', '=', self.env.ref('account.data_account_type_' + account_type).id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    return account", "CodeBleu_score": 48.43338904861593}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_res_id_and_model(xml_id, raise_if_not_found=False)\n    if account:\n        return self.env['account.account'].browse(account[1])\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if account:\n        return account\n    account = self.env['account.account'].search([('company_id', 'in', [company.id, False]), ('user_type_id.type', '=', account_type)], limit=1)\n    return account\n\n\n\n\n", "CodeBleu_score": 45.05513166762174}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in self.filtered(lambda a: a.account_type == 'current_year_earnings').groupby('company_id'):\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account with \"Current Year Earnings\" type for each company.'))\n\n\n\n\n\n\n", "CodeBleu_score": 21.861013920242844}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in self.filtered(lambda a: a.account_type == 'current_year_earning').groupby('company_id'):\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There can only be one account with 'Current Year Earnings' type for each company.\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 18.643019685418288}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    current_year_earning_accounts = self.filtered(lambda account: account.account_type == 'current_year_earning')\n    company_to_current_year_earning_accounts = defaultdict(lambda: self.env['account.account'])\n    for account in current_year_earning_accounts:\n        company_to_current_year_earning_accounts[account.company_id] |= account\n    for company, accounts in company_to_current_year_earning_accounts.items():\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There can only be one account with 'Current Year Earnings' type for each company.\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 22.918100882767046}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_frequency_account_search'):\n        return self._order_accounts_by_frequency_for_partner(self._context.get('partner_id'), domain, limit=limit, order=order)\n    return super(Account, self)._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.054340294303877}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n\n    if not name and self._context.get('partner_id') and self._context.get('search_default_frequency'):\n        return self._order_accounts_by_frequency_for_partner(self._context.get('partner_id'))\n\n    domain = domain or []\n    if name:\n        domain = expression.AND([domain, [('name', operator, name)]])\n    return self._search(domain, limit=limit, order=order)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 37.70663297469844}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_frequency_account_search'):\n        return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n    return super(AccountAccount, self)._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 21.669131795395145}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].search([])\n    query.add_where('am.move_type IN %s', [tuple(sale_types)])\n    query.add_where('am.state = %s', ('posted',))\n    query.add_where('al.account_id IN %s', [tuple(self.analytic_account_ids.ids)])\n    query.add_where('al.name = %s', (str(self.id),))\n    query.select('DISTINCT(am.id)')\n    res = query.execute()\n    invoice_ids = [r[0] for r in res.dictfetchall()]\n    action = self.env['ir.actions.act_window']._for_xml_id('account.action_move_out_invoice_type')\n    action['context'] = {'default_move_type': 'out_invoice'}\n    action['domain'] = [('id', 'in', invoice_ids)]\n    return action\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 39.09652938746774}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].search([])\n    query.add_where('am.state = %s', ('posted',))\n    query.add_where('am.type in %s', (sale_types,))\n    query.add_where('am.company_id = %s', (self.env.company.id,))\n    query.add_where('am.partner_id = %s', (self.id,))\n    query.add_where('am.analytic_account_id in %s', (self._search_analytic_accounts(),))\n    query.select('DISTINCT(am.id)')\n    query_res = query.execute()\n    res = query_res.fetchall()\n    result = []\n    if res:\n        result = [x[0] for x in res]\n    action = {\n        'name': _('Customer Invoices'),\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'context': {'tree_view_ref': 'account.view_move_tree', 'form_view_ref': 'account.view_move_form', 'journal_type': 'sale'},\n        'domain': [('id', 'in', result)],\n        'view_mode': 'tree,form',\n    }\n    if len(result) == 1:\n        del action['views']\n        action['res_id'] = result[0]\n    return action", "CodeBleu_score": 41.54074852819486}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line']\n    query = query.select(\n        'DISTINCT move_id'\n    )\n    query = query.add_where(\n        'AND', [\n            ('account_id', 'in', self.account_ids.ids),\n            ('analytic_account_id', 'in', self.analytic_account_ids.ids),\n            ('sale_type_id', 'in', sale_types.ids),\n            ('move_id.state', '=', 'posted'),\n            ('move_id.move_type', '=', 'out_invoice'),\n            ('move_id.partner_id', '=', self.id),\n        ]\n    )\n    query = query.order_by(\n        'move_id.date desc, move_id.id desc'\n    )\n    self.env.cr.execute(str(query))\n    move_ids = [row[0] for row in self.env.cr.fetchall()]\n    action = self.env['ir.actions.act_window']._for_xml_id('account.action_move_out_invoice_type')\n    action['context'] = {\n        'default_move_type': 'out_invoice',\n        'default_partner_id': self.id,\n        'search_default_not_paid': 1,\n        'search_default_partner_id': self.id,\n    }\n    action['domain'] = [\n        ('id', 'in', move_ids),\n    ]\n    return action\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 38.77393385075191}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = \"\"\"\n        SELECT DISTINCT aml.id\n        FROM account_move_line aml\n        JOIN account_move am ON aml.move_id = am.id\n        JOIN purchase_order po ON po.name = am.invoice_origin\n        WHERE po.purchase_type IN %s\n        AND po.id = %s\n    \"\"\"\n    query_params = [tuple(self.get_purchase_types()), self.id]\n    self.env.cr.execute(query, query_params)\n    move_ids = [r[0] for r in self.env.cr.fetchall()]\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_journal_line\")\n    action[\"context\"] = {\n        \"create\": False,\n        \"default_move_type\": \"in_invoice\",\n    }\n    if len(move_ids) > 1:\n        action[\"domain\"] = [(\"id\", \"in\", move_ids)]\n    elif move_ids:\n        action[\"views\"] = [(False, \"form\")]\n        action[\"res_id\"] = move_ids[0]\n    return action\n\n\n\n\n", "CodeBleu_score": 33.8794724051235}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = \"\"\"SELECT DISTINCT move_id\n                FROM account_move_line\n                WHERE purchase_type = 'purchase'\n                AND purchase_id = %s\"\"\"\n    self.env.cr.execute(query, (self.id,))\n    move_ids = [res['move_id'] for res in self.env.cr.dictfetchall()]\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice', 'create': False}\n    if len(move_ids) > 1:\n        action['domain'] = [('id', 'in', move_ids)]\n    elif move_ids:\n        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n        action['res_id'] = move_ids[0]\n    return action\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.57613348792681}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self._query_analytic_accounts()\n    query.select = \"DISTINCT move.id\"\n    query.add_where(\n        \"am.id IN %s AND am.move_type = 'in_invoice'\",\n        [tuple(self.get_purchase_types()._search([(\"id\", \"in\", self.ids)]))],\n    )\n    query.order = None\n    move_ids = query.with_context(\n        default_move_type=\"in_invoice\", create=False\n    )._query.with_context(create=False)._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._query.with_context(\n        create=False\n    )._", "CodeBleu_score": 23.984707999087025}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 93.54198523107293}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    with_context(company_id=self.company_id.id)\n    sudo\n    create\n    search\n    bank_account.filtered\n    str2bool\n    get_param\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 6.780876291300686}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    with_context(company_id=self.company_id.id)\n    sudo\n    if not str2bool(self.env['ir.config_parameter'].sudo().get_param('account_bank_statement_import_skip_bank_account_creation')):\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.account_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'company_id': self.company_id.id,\n            })\n    return bank_account.filtered(lambda r: r.company_id == self.company_id)\n\n", "CodeBleu_score": 61.81713344035846}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    with_context = self.env.context.copy()\n    with_context.update({'default_company_id': self.company_id.id})\n    sudo = self.sudo().with_context(with_context)\n    create = sudo.create\n    search = sudo.search\n    bank_account = self.bank_account\n    bank_account.filtered(lambda b: b.company_id.id == self.company_id.id)\n    str2bool(self.env['ir.config_parameter'].sudo().get_param('account_banking_mandate.create_bank_account_from_iban', 'True'))\n    if not bank_account:\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param('account_banking_mandate.create_bank_account_from_iban', 'True')):\n            return bank_account\n        if self.partner_bank_id:\n            bank_account = search([('sanitized_acc_number', '=', self.partner_bank_id.sanitized_acc_number), ('company_id', '=', self.company_id.id)])\n        if not bank_account:\n            bank_account = create({\n                'acc_number': self.partner_bank_id.acc_number,\n                'partner_id': self.partner_id.id,\n                'acc_type': self.partner_bank_id.acc_type,\n                'bank_id': self.partner_bank_id.bank_id.id,\n                'company_id': self.company_id.id,\n            })\n    return bank_account.filtered(lambda b: b.company_id.id == self.company_id.id)\n\n", "CodeBleu_score": 47.14281493533037}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    with_context(self._set_context())\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if transaction_currency == currency:\n        return {\n            'amount': transaction_amount,\n            'balance': balance,\n            'amount_currency': amount_currency,\n        }\n    else:\n        if currency == journal_currency:\n            return {\n                'amount': journal_amount,\n                'balance': balance * journal_currency.rate,\n                'amount_currency': amount_currency,\n            }\n        elif currency == company_currency:\n            return {\n                'amount': company_amount,\n                'balance': balance * company_currency.rate,\n                'amount_currency': amount_currency,\n            }\n        else:\n            return {\n                'amount': transaction_amount * currency.rate,\n                'balance': balance * currency.rate,\n                'amount_currency': amount_currency,\n            }\n\n", "CodeBleu_score": 22.12326976561904}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n\n    transaction_currency = self.foreign_currency_id or self.currency_id\n    if self.currency_id == currency:\n        if self.foreign_currency_id:\n            balance = self.foreign_currency_id.compute(balance, currency)\n        transaction_amount = self.amount\n    else:\n        if self.foreign_currency_id:\n            balance = self.foreign_currency_id.compute(balance, currency)\n            transaction_amount = self.amount_currency\n        else:\n            transaction_amount = self.currency_id._convert(\n                self.amount, currency, self.company_id, self.date)\n    journal_currency = self.currency_id\n    company_currency = self.company_currency_id\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': balance,\n        'journal_currency': journal_currency,\n        'company_amount': amount_currency,\n        'company_currency': company_currency,\n    }\n\n", "CodeBleu_score": 21.28989162946841}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if self.currency_id == currency:\n        return {\n            'amount': self.amount,\n            'amount_currency': amount_currency,\n            'balance': balance,\n        }\n    else:\n        if self.currency_id.is_zero(self.amount):\n            balance = 0.0\n        else:\n            balance = currency.round(balance) if currency else balance\n        if self.currency_id.is_zero(amount_currency):\n            amount_currency = 0.0\n        else:\n            amount_currency = self.currency_id._convert(amount_currency, currency, self.company_id, self.date)\n            amount_currency = currency.round(amount_currency) if currency else amount_currency\n        return {\n            'amount': self.amount,\n            'amount_currency': amount_currency,\n            'balance': balance,\n        }\n\n", "CodeBleu_score": 21.091443475092767}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            outbound_payment_methods = journal._default_outbound_payment_methods()\n            journal.outbound_payment_method_line_ids = [\n                Command.create({\n                    'payment_method_id': method.id,\n                    'journal_id': journal.id,\n                }) for method in outbound_payment_methods\n            ]", "CodeBleu_score": 54.21192543135991}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids = [(0, 0, {\n                    'payment_method_id': method.id,\n                    'journal_id': journal.id,\n                })]", "CodeBleu_score": 43.617131568907034}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = journal._default_outbound_payment_methods().ids\n\n", "CodeBleu_score": 26.131777147875873}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date and move.invoice_date and move.invoice_date != move.date:\n            move.date = move.invoice_date\n        elif not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif not move.date:\n            move.date = move.invoice_date\n        if not move.is_sale_document(include_receipts=True) and move._affect_tax_report():\n            accounting_date = move._get_accounting_date(move.invoice_date, True)\n            if accounting_date != move.date:\n                move.date = accounting_date\n                move._recompute_dynamic_lines(recompute_all_taxes=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 47.490045769944224}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date:\n            if not move.date:\n                move.date = fields.Date.context_today(move)\n        else:\n            if not move.is_sale_document(include_receipts=True):\n                accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                if accounting_date != move.date:\n                    move.date = accounting_date\n                    move.with_context(check_move_validity=False)._recompute_dynamic_lines()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 53.69724731232637}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date:\n            if not move.date:\n                move.date = fields.Date.context_today(move)\n        else:\n            if not move.is_sale_document(include_receipts=True):\n                accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                if accounting_date != move.date:\n                    move.date = accounting_date\n                    move._recompute_dynamic_lines(recompute_all_taxes=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 53.45079416302604}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_company(move.company_id).property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_company(move.company_id).property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 46.58884270867711}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in (\"out_invoice\", \"out_refund\"):\n            move.invoice_payment_term_id = (\n                move.partner_id.property_payment_term_id.id\n                if move.partner_id.property_payment_term_id\n                else False\n            )\n        elif move.move_type in (\"in_invoice\", \"in_refund\"):\n            move.invoice_payment_term_id = (\n                move.partner_id.property_supplier_payment_term_id.id\n                if move.partner_id.property_supplier_payment_term_id\n                else False\n            )\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n", "CodeBleu_score": 39.77823387456519}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_company(move.company_id).property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_company(move.company_id).property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 46.58884270867711}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        # Categorize taxes by country and company\n        taxes_by_country_company = defaultdict(lambda: defaultdict(list))\n        for tax in self:\n            taxes_by_country_company[tax.country_id][tax.company_id].append(tax)\n\n        # Search for a matching tax group with the same country and company\n        for country_id, company_dict in taxes_by_country_company.items():\n            for company_id, taxes in company_dict.items():\n                tax_group = self.env['account.tax.group'].search([\n                    ('country_id', '=', country_id),\n                    ('company_id', '=', company_id),\n                ], limit=1)\n                if tax_group:\n                    for tax in taxes:\n                        tax.tax_group_id = tax_group\n                    continue\n\n                # Search for a tax group without a specified country but within the same company\n                tax_group = self.env['account.tax.group'].search([\n                    ('country_id', '=', False),\n                    ('company_id', '=', company_id),\n                ], limit=1)\n                if tax_group:\n                    for tax in taxes:\n                        tax.tax_group_id = tax_group\n                    continue\n\n                # If no matching tax group is found, create a new one\n                tax_group = self.env['account.tax.group'].create({\n                    'country_id': country_id,\n                    'company_id': company_id,\n                })\n                for tax in taxes:\n                    tax.tax_group_id = tax_group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 36.599443697243586}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = False\n    # Categorize taxes by country and company\n    taxes_by_country_company = defaultdict(lambda: defaultdict(list))\n    for tax in self:\n        taxes_by_country_company[tax.company_id][tax.country_id].append(tax)\n    # Search for tax groups\n    for company_taxes in taxes_by_country_company.values():\n        for country_taxes in company_taxes.values():\n            # Search for an exact match\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', country_taxes[0].country_id.id),\n                ('company_id', '=', country_taxes[0].company_id.id)\n            ], limit=1)\n            if not tax_group:\n                # Search for a tax group without a specified country but within the same company\n                tax_group = self.env['account.tax.group'].search([\n                    ('country_id', '=', False),\n                    ('company_id', '=', country_taxes[0].company_id.id)\n                ], limit=1)\n            if tax_group:\n                for tax in country_taxes:\n                    tax.tax_group_id = tax_group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 40.603233736260606}, {"code": " def _compute_tax_group_id(self)\n\t\n\n    # Create a dictionary to store taxes by country and company\n    by_country_company = defaultdict(lambda: defaultdict(list))\n    for tax in self:\n        by_country_company[tax.company_id][tax.country_id].append(tax)\n\n    # Search for a matching tax group for each tax\n    for company_taxes in by_country_company.values():\n        for country_taxes in company_taxes.values():\n            tax_group = self.env['account.tax.group'].search(\n                [('country_id', '=', country_taxes[0].country_id.id),\n                 ('company_id', '=', country_taxes[0].company_id.id)], limit=1)\n            if not tax_group:\n                tax_group = self.env['account.tax.group'].search(\n                    [('country_id', '=', False),\n                     ('company_id', '=', country_taxes[0].company_id.id)], limit=1)\n            for tax in country_taxes:\n                tax.tax_group_id = tax_group\n\n    # Search for a matching tax group for each tax group\n    for company_taxes in by_country_company.values():\n        for country_taxes in company_taxes.values():\n            tax_group = self.env['account.tax.group'].search(\n                [('country_id', '=', country_taxes[0].country_id.id),\n                 ('company_id', '=', country_taxes[0].company_id.id)], limit=1)\n            if not tax_group:\n                tax_group = self.env['account.tax.group'].search(\n                    [('country_id', '=', False),\n                     ('company_id', '=', country_taxes[0].company_id.id)], limit=1)\n            for tax in country_taxes:\n                tax.tax_group_id = tax_group\n\n    # Search for a matching tax group for each tax group\n    for company_taxes in by_country_company.values():\n        for country_taxes in company_", "CodeBleu_score": 32.95249651431899}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session by accessing the login URL\n    self.session.get(url + '/web/database/selector', data={'db': db})\n\n    # Prepare the POST request data\n    post_data = {\n        'login': login,\n        'password': password,\n        'db': db,\n    }\n    if force:\n        post_data['force'] = '1'\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        post_data['mod_file'] = f.read()\n    res = self.session.post(url + '/base_import_module/login_upload', data=post_data)\n\n    # Check if the server has the required module installed or is outdated\n    if res.status_code == 404:\n        raise Exception(\"The server does not have the required module installed\")\n    elif res.status_code == 405:\n        raise Exception(\"The server is outdated\")\n\n    # Return the server's response text\n    return res.text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 55.025869768431114}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session by accessing the login URL\n    self.session.get(url)\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force,\n    }\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        res = self.session.post(url + 'base_import_module/login_upload', data=data, files=files)\n\n    # Raise an exception if the server does not have the required module installed or is outdated\n    if res.status_code != 200:\n        raise Exception('Error uploading module: {}'.format(res.text))\n\n    return res.text\n\n\n\n\n", "CodeBleu_score": 44.551665911569735}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session by accessing the login URL\n    self.get(url + '/web/database/selector')\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n    }\n    if force:\n        data['force'] = '1'\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n    res = self.post(url + '/base_import_module/login_upload', data=data, files={'file': module_data})\n\n    # Raise an exception if the server does not have the required module installed or is outdated\n    if res.text.find('<h1>Server Error</h1>') != -1:\n        raise Exception('Module installation error')\n\n    # Return the server's response text\n    return res.text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 48.326293427000856}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n\n    dbname = config.get('db_name')\n    overwrite = config.getboolean('overwrite_translations')\n\n    registry = Registry(dbname)\n    cursor = registry.cursor()\n    translation_importer = TranslationImporter(cursor, dbname, overwrite)\n    translation_importer.load_file()\n    translation_importer.save()\n\n    cursor.close()\n    registry.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.13516161249829}, {"code": "def import_translation()\n\t\n\n    # Get configuration settings\n    db_name = config.get('database_name')\n    overwrite = config.get('overwrite_translations')\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr)\n\n        # Load translation files based on configuration\n        translation_importer.load_file(\n            'path/to/translation_file.csv',\n            overwrite=overwrite\n        )\n\n        # Save translations\n        translation_importer.save()", "CodeBleu_score": 41.00372141527532}, {"code": "def import_translation()\n\t\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    registry = Registry(db_name)\n    cursor = registry.cursor()\n    translation_importer = TranslationImporter(cursor, registry)\n    translation_importer.load_file(overwrite)\n    translation_importer.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.972470422036906}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    for child in self.children:\n        if child.name == name:\n            return child\n    child = Node(name, info, self.depth + 1, self.path + \"/\" + name)\n    if hasattr(self, \"children\"):\n        child.children = self.children\n    if hasattr(self, \"parent\"):\n        child.parent = self.parent\n    if hasattr(self, \"siblings\"):\n        child.siblings = self.siblings\n    if hasattr(self, \"children_names\"):\n        child.children_names = self.children_names\n    if hasattr(self, \"children_full\"):\n        child.children_full = self.children_full\n    if hasattr(self, \"children_names_all\"):\n        child.children_names_all = self.children_names_all\n    if hasattr(self, \"children_full_all\"):\n        child.children_full_all = self.children_full_all\n    if hasattr(self, \"children_names_all_list\"):\n        child.children_names_all_list = self.children_names_all_list\n    if hasattr(self, \"children_full_all_list\"):\n        child.children_full_all_list = self.children_full_all_list\n    if hasattr(self, \"children_names_all_list_full\"):\n        child.children_names_all_list_full = self.children_names_all_list_full\n    if hasattr(self, \"children_full_all_list_full\"):\n        child.children_full_all_list_full = self.children_full_all_list_full\n    if hasattr(self, \"children_names_all_list_full_sorted\"):\n        child.children_names_all_list_full_sorted = self.children_names_all_list_full_sorted\n    if hasattr(self, \"children_full_all_list_full_sorted\"):\n        child.children_full_all_list_full_sorted = self.children_full_all_list_full_sorted", "CodeBleu_score": 23.02741414409597}, {"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info, self.depth + 1)\n    if node not in self.children:\n        self.children.append(node)\n        if hasattr(self, \"type\"):\n            setattr(node, \"type\", getattr(self, \"type\"))\n        if hasattr(self, \"parent_type\"):\n            setattr(node, \"parent_type\", getattr(self, \"parent_type\"))\n        if hasattr(self, \"parent_name\"):\n            setattr(node, \"parent_name\", getattr(self, \"parent_name\"))\n        self.children.sort(key=lambda x: x.name)\n    return node\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.14489530991559}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    self.children[name] = new_node\n    if hasattr(self, 'parent'):\n        if hasattr(self.parent, 'parent'):\n            setattr(new_node, 'grandparent', self.parent.parent)\n        setattr(new_node, 'parent', self.parent)\n    self.children = dict(sorted(self.children.items()))\n    return new_node\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 37.7617072706412}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_currency\": frappe.db.get_value(\"Account\", account, \"account_currency\"),\n        \"company\": frappe.db.get_value(\"Account\", account, \"company\"),\n        \"root_type\": frappe.db.get_value(\"Account\", account, \"root_type\"),\n        \"dates\": dates,\n        \"balance\": [0.0] * len(dates),\n        \"debit\": [0.0] * len(dates),\n        \"credit\": [0.0] * len(dates),\n    }\n\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        for key in [\"balance\", \"debit\", \"credit\"]:\n            result[key] = [x * -1 for x in result[key]]\n\n    for entry in gl_entries:\n        if entry.docstatus == 2:\n            continue\n\n        account_idx = dates.index(entry.posting_date)\n        if entry.debit > 0:\n            result[\"balance\"][account_idx] += flt(entry.debit)\n            result[\"debit\"][account_idx] += flt(entry.debit)\n        if entry.credit > 0:\n            result[\"balance\"][account_idx] -= flt(entry.credit)\n            result[\"credit\"][account_idx] += flt(entry.credit)\n\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        for key in [\"balance\", \"debit\", \"credit\"]:\n            result[key] = accumulate_values_on_date(dates, result[key])\n\n    return result\n\n", "CodeBleu_score": 24.631477246102545}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = [\n        [getdate(date) for date in dates] + [\"Total\"]\n    ]\n\n    # initialize\n    for root_type in [\"Asset\", \"Liability\", \"Equity\", \"Income\", \"Expense\"]:\n        result.append(\n            [account]\n            + [0.0] * len(dates)\n            + [root_type]\n        )\n\n    # get balances\n    balances = {\n        getdate(date): 0.0\n        for date in dates\n    }\n\n    for entry in gl_entries:\n        if entry.account == account:\n            date = getdate(entry.posting_date)\n            if date not in balances:\n                continue\n            balances[date] += flt(entry.debit) - flt(entry.credit)\n\n    # update balance in result\n    for i, date in enumerate(dates):\n        for j, row in enumerate(result):\n            if row[0] == account:\n                result[j][i + 1] = balances.get(date, 0.0)\n\n    # compute total\n    for row in result:\n        if row[0] == account:\n            row[-1] = sum(row[1:-1])\n\n    # compute accumulated values\n    for i, row in enumerate(result):\n        if row[0] in (\"Asset\", \"Liability\", \"Equity\"):\n            for j in range(2, len(row) - 1):\n                result[i][j] += result[i][j - 1]\n\n    # negate expense, income and asset accounts\n    for row in result:\n        if row[0] not in (\"Asset\", \"Liability\", \"Equity\"):\n            for i in range(1, len(row) - 1):\n                row[i] = -1 * flt(row[i])\n\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.556578823080816}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[\"Date\", \"Balance\"]]\n    for date in dates:\n        result.append([date, 0.0])\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.docstatus == 2:\n            balance_type = \"Debit\" if entry.debit else \"Credit\"\n            if balance_type == \"Debit\":\n                result[dates.index(getdate(entry.posting_date)) + 1][1] += entry.balance\n            else:\n                result[dates.index(getdate(entry.posting_date)) + 1][1] -= entry.balance\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for balance in result[1:]:\n            balance[1] *= -1\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for index in range(1, len(result)):\n            result[index][1] += result[index - 1][1]\n\n    return result\n\n", "CodeBleu_score": 36.658643853029446}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # Get the account type before the save operation\n    account_type_before_save = self.get_doc_before_save().account_type\n\n    # Get the account type after the save operation\n    account_type_after_save = self.account_type\n\n    # Check if the account type has changed from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n    if (account_type_before_save == \"Receivable\" or account_type_before_save == \"Payable\") and account_type_after_save not in [\"Receivable\", \"Payable\"]:\n        # Check if there are existing general ledger entries for the account\n        gl_entries = frappe.get_all(\"GL Entry\", filters={\"account\": self.name}, fields=[\"name\"])\n        if gl_entries:\n            # Generate a warning message indicating potential issues in the \"Accounts\" report\n            warning_message = frappe._(\"Warning: The account type for {0} has been changed from {1} to {2}. This may impact the accuracy of the Accounts report.\").format(self.name, account_type_before_save, account_type_after_save)\n            frappe.msgprint(warning_message, alert=True)\n\n            # Add a comment to the account record\n            comment = frappe._(\"The account type for this account has been changed from {0} to {1}. This may impact the accuracy of the Accounts report.\").format(account_type_before_save, account_type_after_save)\n            self.add_comment(\"Comment\", comment)\n\n", "CodeBleu_score": 39.5126613544026}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # Check if the account type is being changed\n    if self.is_new() or self.account_type != self.get_doc_before_save().account_type:\n        # Check if the account type is being changed from \"Receivable\" or \"Payable\"\n        if self.get_doc_before_save().account_type in [\"Receivable\", \"Payable\"]:\n            # Check if the account type is being changed to a non-receivable/payable type\n            if self.account_type not in [\"Receivable\", \"Payable\"]:\n                # Check if there are existing general ledger entries for the account\n                if frappe.db.get_value(\"GL Entry\", {\"account\": self.name}, \"name\"):\n                    # Generate a warning message\n                    frappe.msgprint(\n                        \"Account type changed from Receivable/Payable to {0}. Please check the Accounts Report and GL Entries for this account.\".format(\n                            self.account_type\n                        )\n                    )\n                    # Add a comment to the account record\n                    self.add_comment(\n                        \"Label\",\n                        \"Account type changed from Receivable/Payable to {0}. Please check the Accounts Report and GL Entries for this account.\".format(\n                            self.account_type\n                        ),\n                    )\n\n", "CodeBleu_score": 25.419452425345103}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not self.is_new():\n        doc_before_save = self.get_doc_before_save()\n        if doc_before_save:\n            if (\n                doc_before_save.account_type in (\"Receivable\", \"Payable\")\n                and self.account_type not in (\"Receivable\", \"Payable\")\n                and frappe.db.get_all(\n                    \"GL Entry\",\n                    filters={\"account\": self.name},\n                    limit_page_length=1,\n                )\n            ):\n                self.add_comment(\n                    text=_(\n                        \"Account type changed from {0} to {1}. Please check the Accounts Report and General Ledger for this account.\"\n                    ).format(\n                        frappe.bold(doc_before_save.account_type),\n                        frappe.bold(self.account_type),\n                    )\n                )\n                frappe.msgprint(\n                    _(\n                        \"Account type changed from {0} to {1}. Please check the Accounts Report and General Ledger for this account.\"\n                    ).format(\n                        frappe.bold(doc_before_save.account_type),\n                        frappe.bold(self.account_type),\n                    )\n                )\n\n", "CodeBleu_score": 35.07060340046875}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.is_account_currency_specified = 0\n    else:\n        self.is_account_currency_specified = 1\n\n    if self.account_currency != self.company_currency:\n        if frappe.db.get_value(\n            \"GL Entry\",\n            filters={\n                \"account\": self.name,\n                \"docstatus\": (\"<\", 2),\n                \"currency\": (\"not in\", [self.company_currency, self.account_currency]),\n            },\n            fieldname=\"name\",\n        ):\n            frappe.throw(\n                _(\n                    \"Account {0} has transactions in {1} currency. Cannot change account currency to {2}\").format(\n                    self.name, self.company_currency, self.account_currency)\n            )\n\n    if self.account_currency != self.company_currency:\n        self.company_currency = self.account_currency\n\n    if self.account_currency != self.company_currency:\n        frappe.throw(\n            _(\"Currency {0} is not a valid currency for company {1}\").format(\n                self.account_currency, self.company)\n        )\n\n    if not frappe.db.exists(\"Currency\", self.account_currency):\n        frappe.throw(\n            _(\"Currency {0} is not a valid currency\").format(\n                self.account_currency)\n        )\n\n    if not frappe.db.exists(\"Currency\", self.company_currency):\n        frappe.throw(\n            _(\"Currency {0} is not a valid currency\").format(\n                self.company_currency)\n        )\n\n    if (\n        frappe.db.get_value(\n            \"Currency\", self.account_currency, \"enabled\") == \"Disabled\"\n    ):\n        frappe.throw(\n            _(\"Currency {0} is disabled\").format(self.account_", "CodeBleu_score": 33.8340429128496}, {"code": "def validate_account_currency(self)\n\t\n\n    if self.account_currency:\n        self.explicitly_specified_currency = True\n\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n\n    existing_gle = frappe.db.sql(\n        \"\"\"\n        SELECT DISTINCT account_currency\n        FROM `tabGL Entry`\n        WHERE account=%s\n        AND docstatus=1\n        AND is_cancelled=0\n        AND account_currency != %s\n        LIMIT 1\n    \"\"\",\n        (self.name, self.account_currency),\n        as_dict=True,\n    )\n\n    if existing_gle:\n        frappe.throw(\n            _(\n                \"Account Currency cannot be changed as there are existing transactions in different currency\"\n            )\n        )\n\n    if self.account_currency != self.company_currency:\n        validate_account_company_currency(self.account_currency, self.company)\n\n", "CodeBleu_score": 42.89472150217772}, {"code": "def validate_account_currency(self)\n\t\n\n    if self.is_group == 1:\n        return\n\n    if self.currency:\n        # validate the currency code\n        frappe.get_value(\"Currency\", self.currency, \"name\")\n        self.explicitly_specified_currency = 1\n    else:\n        self.currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        self.explicitly_specified_currency = 0\n\n    existing_gle = frappe.db.sql_list(\n        \"\"\"select distinct currency from `tabGL Entry` where account=%s and docstatus=1\"\"\",\n        self.name,\n    )\n\n    if existing_gle and self.currency not in existing_gle:\n        frappe.throw(\n            _(\"Currency {0} is used in existing GL Entries. You can not change the currency\").format(\n                frappe.bold(self.currency)\n            )\n        )\n\n", "CodeBleu_score": 41.58159202714962}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n\n        merged_entry = merged_entries.setdefault(key, {\n            \"account\": key_values[\"account\"],\n            \"account_currency\": key_values[\"account_currency\"],\n            \"cost_center\": key_values[\"cost_center\"],\n            \"project\": key_values[\"project\"],\n            \"finance_book\": key_values[\"finance_book\"],\n            \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n            \"debit\": 0,\n            \"credit\": 0,\n            \"debit_in_account_currency\": 0,\n            \"credit_in_account_currency\": 0\n        })\n\n        merged_entry[\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entry[\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entry[\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entry[\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries", "CodeBleu_score": 43.72397471737777}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entry = merged_entries.setdefault(key, key_values)\n        merged_entry[\"debit\"] = merged_entry.get(\"debit\", 0.0) + flt(entry.get(\"debit\"))\n        merged_entry[\"credit\"] = merged_entry.get(\"credit\", 0.0) + flt(entry.get(\"credit\"))\n        merged_entry[\"debit_in_account_currency\"] = merged_entry.get(\"debit_in_account_currency\", 0.0) + flt(\n            entry.get(\"debit_in_account_currency\")\n        )\n        merged_entry[\"credit_in_account_currency\"] = merged_entry.get(\"credit_in_account_currency\", 0.0) + flt(\n            entry.get(\"credit_in_account_currency\")\n        )\n    return merged_entries\n\n", "CodeBleu_score": 43.35547942647773}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entry = merged_entries.setdefault(key, key_values)\n        merged_entry[\"debit\"] = flt(merged_entry.get(\"debit\", 0)) + flt(entry.get(\"debit\", 0))\n        merged_entry[\"credit\"] = flt(merged_entry.get(\"credit\", 0)) + flt(entry.get(\"credit\", 0))\n        merged_entry[\"debit_in_account_currency\"] = flt(merged_entry.get(\"debit_in_account_currency\", 0)) + flt(entry.get(\"debit_in_account_currency\", 0))\n        merged_entry[\"credit_in_account_currency\"] = flt(merged_entry.get(\"credit_in_account_currency\", 0)) + flt(entry.get(\"credit_in_account_currency\", 0))\n\n    return merged_entries\n\n", "CodeBleu_score": 40.65359516092656}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    else:\n        supplier = self.party\n\n    if supplier and frappe.db.exists(\"Supplier\", supplier):\n        supplier_details = frappe.get_doc(\"Supplier\", supplier)\n\n        if supplier_details.on_hold:\n            if supplier_details.hold_type == \"All Transactions\":\n                frappe.throw(\n                    _(\"Cannot proceed with the transaction as supplier is on hold\"),\n                    title=_(\"Hold Status\"),\n                )\n            elif supplier_details.hold_type == \"Invoices\" and self.doctype == \"Purchase Invoice\":\n                frappe.throw(\n                    _(\"Cannot proceed with the transaction as supplier is on hold\"),\n                    title=_(\"Hold Status\"),\n                )\n            elif supplier_details.hold_type == \"Payments\" and self.doctype == \"Payment Entry\":\n                frappe.throw(\n                    _(\"Cannot proceed with the transaction as supplier is on hold\"),\n                    title=_(\"Hold Status\"),\n                )\n            else:\n                if getdate(supplier_details.release_date) > getdate(nowdate()):\n                    frappe.throw(\n                        _(\"Cannot proceed with the transaction as supplier is on hold\"),\n                        title=_(\"Hold Status\"),\n                    )\n\n", "CodeBleu_score": 28.520137050777638}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in (\"Buying Invoice\", \"Supplier Payment\"):\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_type == \"Hold\" and supplier.on_hold:\n            if not supplier.release_date:\n                frappe.throw(\n                    \"Please set Release Date for Supplier {0}\".format(supplier.name)\n                )\n            elif getdate(supplier.release_date) > getdate(nowdate()):\n                frappe.throw(\n                    \"Supplier {0} is on hold since {1} till {2}, cannot {3}\".format(\n                        supplier.name, supplier.hold_type, supplier.release_date, self.doctype\n                    )\n                )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 27.408148684801994}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.doctype == \"Payment Entry\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n    else:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n\n    if supplier.on_hold:\n        if self.doctype == \"Payment Entry\":\n            if supplier.hold_type == \"Payment\":\n                if getdate(supplier.release_date) > getdate(nowdate()):\n                    frappe.throw(\n                        _(\n                            \"{0} {1} is on hold since {2} till {3}, cannot make payment now\"\n                        ).format(\n                            self.doctype, self.name, supplier.hold_type, supplier.release_date\n                        )\n                    )\n                else:\n                    supplier.on_hold = 0\n                    supplier.save()\n            else:\n                frappe.throw(\n                    _(\n                        \"{0} {1} is on hold since {2} till {3}, cannot make buying transaction now\"\n                    ).format(\n                        self.doctype,\n                        self.name,\n                        supplier.hold_type,\n                        supplier.release_date,\n                    )\n                )\n        else:\n            frappe.throw(\n                _(\n                    \"{0} {1} is on hold since {2} till {3}, cannot make buying transaction now\"\n                ).format(\n                    self.doctype,\n                    self.name,\n                    supplier.hold_type,\n                    supplier.release_date,\n                )\n            )\n\n", "CodeBleu_score": 27.37917690045647}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = self._get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    repost_rows = frappe.get_all(\n        \"Repost Item Valuation\",\n        fields=[\"parent\", \"parenttype\", \"name\"],\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n            \"parenttype\": (\"in\", repost_doctypes),\n        },\n    )\n\n    if not repost_rows:\n        return\n\n    references_map = {}\n    for row in repost_rows:\n        references_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(\n            row.name\n        )\n\n    for doctype, parent_map in references_map.items():\n        for parent, references in parent_map.items():\n            parent_doc = frappe.get_doc(doctype, parent)\n            if doctype == \"Delivery Note\":\n                parent_doc.set(\"vouchers\", [])\n            else:\n                parent_doc.set(\"repost_vouchers\", [])\n\n            for reference in references:\n                if doctype == \"Delivery Note\":\n                    parent_doc.append(\"vouchers\", {\"voucher_type\": self.doctype, \"voucher_no\": self.name, \"reference_voucher\": reference})\n                else:\n                    parent_doc.append(\"repost_vouchers\", {\"voucher_type\": self.doctype, \"voucher_no\": self.name, \"reference_voucher\": reference})\n\n            parent_doc.flags.ignore_validate = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 28.936681542695535}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    repost_rows = frappe.db.get_all(\n        \"Repost Item Valuation\",\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n        },\n        fields=[\"parent\", \"parenttype\"],\n    )\n\n    if not repost_rows:\n        return\n\n    references_map = {}\n    for row in repost_rows:\n        references_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(\n            self.name\n        )\n\n    for doctype, parents in references_map.items():\n        for parent, vouchers in parents.items():\n            parent_doc = frappe.get_doc(doctype, parent)\n            if doctype == \"Repost Item Valuation\":\n                parent_doc.repost_vouchers = [\n                    v for v in parent_doc.repost_vouchers if v not in vouchers\n                ]\n            else:\n                parent_doc.vouchers = [v for v in parent_doc.vouchers if v not in vouchers]\n\n            parent_doc.ignore_validate_update_after_submit = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 30.985238326456297}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = self._get_repost_doctypes()\n    repost_rows = self._get_repost_rows(repost_doctypes)\n    references_map = self._get_references_map(repost_rows)\n\n    for doctype, references in references_map.items():\n        for parent, vouchers in references.items():\n            parent_doc = frappe.get_doc(doctype, parent)\n            if doctype == \"Sales Invoice\":\n                parent_doc.set(\"repost_vouchers\", [])\n            else:\n                parent_doc.set(\"vouchers\", [])\n\n            for voucher in vouchers:\n                if doctype == \"Sales Invoice\":\n                    parent_doc.append(\"repost_vouchers\", voucher)\n                else:\n                    parent_doc.append(\"vouchers\", voucher)\n\n            parent_doc.flags.ignore_validate = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 25.55057971053396}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    self.auth()\n\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"count\": 500,\n        \"offset\": 0,\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            query_params[\"offset\"] += query_params[\"count\"]\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n            else:\n                raise\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n            else:\n                raise\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: get_transactions error\")\n            raise\n\n    return transactions\n\n", "CodeBleu_score": 35.96539597696143}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"count\": 500,\n        \"offset\": 0,\n    }\n    if account_id:\n        query_params.update({\"account_ids\": [account_id]})\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            query_params[\"offset\"] += query_params[\"count\"]\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n            else:\n                raise e\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n            else:\n                raise e\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transactions error\")\n            raise e\n    return transactions\n\n", "CodeBleu_score": 36.59292737673706}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"count\": 500,\n        \"offset\": 0,\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            query_params[\"offset\"] += response[\"total_transactions\"]\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transactions error\")\n            raise e\n    return transactions\n\n", "CodeBleu_score": 37.76351225350578}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        response = json.loads(response)\n        access_token = plaid.get_access_token(response[\"public_token\"])\n        bank = frappe.get_doc(\"Bank\", response[\"metadata\"][\"institution\"][\"name\"])\n        if not bank.exists:\n            bank.bank_name = response[\"metadata\"][\"institution\"][\"name\"]\n            bank.plaid_access_token = access_token\n            bank.insert()\n        else:\n            bank.plaid_access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid: Error while adding institution\")\n\n\n", "CodeBleu_score": 46.55142059949475}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response\n        institution_id = response[\"institution_id\"]\n        institution_name = response[\"institution\"][\"name\"]\n        institution_logo = response[\"institution\"][\"logo\"]\n        institution_colors = response[\"institution\"][\"colors\"]\n        institution_url = response[\"institution\"][\"url\"]\n\n        # Get access token\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(token)\n\n        # Check if bank already exists\n        bank_name = frappe.db.get_value(\n            \"Bank\", {\"bank_name\": institution_name}, \"name\"\n        )\n\n        if bank_name:\n            # Update existing bank record\n            bank = frappe.get_doc(\"Bank\", bank_name)\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create new bank record\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = institution_name\n            bank.bank_url = institution_url\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid: Error adding institution\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.535534053852345}, {"code": "def add_institution(token, response)\n\t\n    # Parse the response\n    institution_id = response[\"institution_id\"]\n    institution_name = response[\"institution\"][\"name\"]\n\n    # Retrieve access token\n    plaid_connector = PlaidConnector()\n    access_token = plaid_connector.get_access_token(token)\n\n    # Check if bank already exists\n    bank = frappe.get_doc(\"Bank\", institution_id)\n    if bank.bank_name:\n        # Update access token\n        bank.access_token = access_token\n        bank.save()\n    else:\n        # Create new bank\n        bank = frappe.new_doc(\"Bank\")\n        bank.bank_name = institution_name\n        bank.bank_id = institution_id\n        bank.access_token = access_token\n        bank.insert()\n\n    return bank\n\n\n", "CodeBleu_score": 34.288786553857534}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank\", bank, \"last_integration_date\"\n        )\n        start_date = add_months(last_integration_date, -2)\n        end_date = today()\n\n        transactions = get_transactions(\n            bank, bank_account=bank_account, start_date=start_date, end_date=end_date\n        )\n\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if len(new_transactions) > 0:\n            frappe.log(\n                _(\"Added {} new bank transactions\").format(len(new_transactions)),\n                level=\"INFO\",\n            )\n\n        frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", end_date)\n\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 39.23009522832102}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date from the bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Determine the start and end dates for transaction retrieval\n    start_date = getdate(last_integration_date) if last_integration_date else getdate(today())\n    end_date = getdate(today())\n\n    # Fetch the transactions from the Plaid API\n    try:\n        transactions = get_transactions(\n            bank, bank_account, start_date=start_date, end_date=end_date\n        )\n    except Exception as e:\n        frappe.log_error(\n            title=\"Plaid API Error\",\n            message=f\"Error fetching transactions from Plaid API: {e}\",\n        )\n        return\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        try:\n            new_transactions += new_bank_transaction(transaction)\n        except Exception as e:\n            frappe.log_error(\n                title=\"Bank Transaction Creation Error\",\n                message=f\"Error creating bank transaction: {e}\",\n            )\n\n    # Update the last integration date to the date of the oldest transaction\n    if transactions:\n        oldest_transaction_date = min(\n            [getdate(transaction[\"date\"]) for transaction in transactions]\n        )\n        frappe.db.set_value(\n            \"Bank Account\",\n            bank_account,\n            \"last_integration_date\",\n            formatdate(oldest_transaction_date, \"yyyy-MM-dd\"),\n        )\n\n    # Log the number of new transactions added\n    if new_transactions:\n        frappe.log_error(\n            title=\"New Bank Transactions Added\",\n            message=f\"{len(new_transactions)} new bank transactions added.\",\n        )\n\n    # Handle any exceptions by logging an error message\n    except Exception as e:\n        frappe.log_error(\n            title=", "CodeBleu_score": 34.56143585919903}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date, end_date = get_start_and_end_dates(bank, bank_account)\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if len(new_transactions) > 0:\n            frappe.log_error(\n                _(\"{} new transactions added for {}\").format(\n                    len(new_transactions), bank_account\n                ),\n                _(\"Bank Transactions Synced\"),\n            )\n\n        update_last_integration_date(bank, bank_account, start_date)\n\n    except Exception:\n        frappe.log_error(_(\"Bank transactions syncing error\"))\n\n", "CodeBleu_score": 25.327514028124387}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self.get_query_uri(entity)\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        entries = response.json()[entity]\n        total = response.json()[\"totalCount\"]\n        for start in range(1, total, 1000):\n            response = self._get(query_uri, params={\"startPosition\": start})\n            if response.status_code == 200:\n                entries.extend(response.json()[entity])\n            else:\n                self._log_error(response.text, response.json())\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n    else:\n        self._log_error(response.text, response.json())\n\n", "CodeBleu_score": 36.98946412556203}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total_entries = self._get_total_entries(query_uri)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total_entries,\n        }\n    )\n    entries = []\n    for start_position in range(0, total_entries, 1000):\n        entries.extend(\n            self._get_entries(query_uri, start_position, total_entries, entity)\n        )\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Saved {0}\").format(entity),\n            \"count\": total_entries,\n            \"total\": total_entries,\n        }\n    )\n\n", "CodeBleu_score": 30.630862135565806}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"{self.company_url}/query?query=SELECT * FROM {entity}\"\n    # Determine the total number of entries\n    response = self._get(query_uri)\n    total_entries = response.json().get(\"totalCount\", 0)\n    # Retrieve entries in batches of 1000\n    for start_pos in range(0, total_entries, 1000):\n        # Construct the batch query URI\n        batch_query_uri = f\"{query_uri}&startPosition={start_pos+1}&maxResults=1000\"\n        # Retrieve the batch of entries\n        response = self._get(batch_query_uri)\n        # Preprocess and save the entries\n        self._preprocess_entries(entity, response.json().get(\"QueryResponse\", {}).get(entity, []))\n        self._save_entries(entity, response.json().get(\"QueryResponse\", {}).get(entity, []))\n        # Log any exceptions encountered\n        if response.status_code != 200:\n            self._log_error(response.text)\n\n", "CodeBleu_score": 24.62914872588258}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n\n    quickbooks_id = self._generate_quickbooks_id()\n    invoice[\"Id\"] = quickbooks_id\n    self.general_ledger[\"Invoice\"][quickbooks_id] = invoice\n\n    if invoice[\"LinkedTxn\"]:\n        for transaction in invoice[\"LinkedTxn\"]:\n            if transaction[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                return\n\n    self._save_sales_invoice(invoice, quickbooks_id)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 27.40979510077008}, {"code": "def _save_invoice(self, invoice)\n\t\n\n    quickbooks_id = self._generate_quickbooks_id(invoice[\"Id\"])\n    if invoice[\"LinkedTxn\"]:\n        for linked_txn in invoice[\"LinkedTxn\"]:\n            if linked_txn[\"TxnType\"] == \"StatementCharge\":\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                return\n            elif linked_txn[\"TxnType\"] == \"ReimburseCharge\":\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                return\n\n    if invoice[\"SalesTermRef\"][\"value\"] == \"POS\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 34.9526604532337}, {"code": "def _save_invoice(self, invoice)\n\t\n    quickbooks_id = self._generate_quickbooks_id(\"Invoice\")\n    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    if self._is_linked_transaction_type(invoice, \"StatementCharge\") or self._is_linked_transaction_type(\n        invoice, \"ReimburseCharge\"\n    ):\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n", "CodeBleu_score": 40.48980656224652}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    visit_interval = self.get_visit_interval(no_of_visit)\n    while schedule_date <= end_date:\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, visit_interval)\n    for _i in range(len(schedule_list)):\n        schedule_list[_i] = self.validate_schedule_date_for_holiday_list(schedule_list[_i], sales_person)\n    return schedule_list\n\n\n", "CodeBleu_score": 21.57382021629515}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    interval = (end_date - start_date).days / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 29.280383288606814}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    schedule_list.append(schedule_date)\n    # Calculate the interval between visits\n    visit_interval = (end_date - start_date).days / (no_of_visit - 1)\n    # Iterate to create the schedule\n    for i in range(1, no_of_visit):\n        schedule_date = add_days(start_date, i * visit_interval)\n        # Adjust the date to avoid holidays\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 29.439245218864418}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t    $method = request()->get('handle', 'edit');\n    $handle = $this->actions[$method]['handle'] ?? 'update';\n    $url = route('bulk-actions.action', $this->path);\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $handle,\n        'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n    return response()->json([\n        'success' => true,\n        'error' => false,\n        'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 99.41552324981049}, {"code": "<?\n   public function response($view, $data = []){\n\t    $method = request()->get('handle', 'edit');\n    $handle = $this->actions[$method]['handle'] ?? 'update';\n    $url = route('bulk-actions.action', $this->path);\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $handle,\n        'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n\n    return response()->json([\n        'success' => true,\n        'error' => false,\n        'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 99.41552324981049}, {"code": "<?\n   public function response($view, $data = []){\n\t        // Determine the method to handle the request\n        $method = request()->get('handle', 'edit');\n        // Get the handle from the actions array or use the default value 'update'\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        // Construct the URL for bulk actions using the specified path\n        $url = route('bulk-actions.action', $this->path);\n        // Render the HTML content for the modal using the specified view and data\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n        // Return a JSON response with success status, message, data, and rendered HTML\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.84846855808269}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.751997416708}, {"code": "<?\npublic function deleteContacts($request){\n\t    try {\n        $contacts = $this->getSelectedRecords($request);\n\n        foreach ($contacts as $contact) {\n            $this->dispatch(new DeleteContact($contact));\n        }\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 71.94009537134649}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.751997416708}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, ['account', 'category', 'tag']);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 73.9203129147915}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, ['account', 'category']);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 74.4198204620309}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.51133095308249}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = get_class($this);\n\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $requestClass;\n    $request->setContainer($this->container);\n    $request->initialize($this->query(), $this->request->all(), $this->attributes->all());\n    $request->setUserResolver($this->getUserResolver());\n    $request->setRouteResolver($this->getRouteResolver());\n\n    $rules = $request->rules();\n    $rules = $request->prepareRules($rules);\n\n    foreach ($this->all() as $key => $data) {\n        try {\n            $validator->make($data, $rules[$key])->validate();\n        } catch (ValidationException $e) {\n            foreach ($e->validator->failed() as $attribute => $messages) {\n                foreach ($messages as $rule => $params) {\n                    $validator->addFailure($key . '.' . $attribute, $rule, $params);\n                }\n            }\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 49.2134793019919}, {"code": "<?\npublic function withValidator($validator){\n\t    // Get the name of the request class\n    $requestClass = get_class($this);\n\n    // Check if the request class exists and is an instance of FormRequest\n    if (!class_exists($requestClass) || !($this instanceof FormRequest)) {\n        return;\n    }\n\n    // Get the data to be validated\n    $data = $this->validationData();\n\n    // Get the rules for the request\n    $rules = $this->container->call([$requestClass, 'rules']);\n\n    // Prepare the rules\n    $rules = $this->prepareRules($rules);\n\n    // Validate the data for each row\n    foreach ($data as $key => $row) {\n        try {\n            // Initialize the request with the row data\n            $request = $this->initialize($this->query(), $this->request(), $this->attributes(), $this->cookies(), $this->files(), $this->server(), $row);\n\n            // Prepare the validation rules for the request\n            $rules = $this->container->call([$request, 'prepareRules'], compact('rules'));\n\n            // Validate the data for the row\n            $validator->validate($row, $rules);\n        } catch (ValidationException $e) {\n            // Add the validation failures for the row to the validator\n            $validator->addFailure($key, 'row', $e->validator->failed());\n\n            // Rethrow the exception\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 48.13593313484466}, {"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = get_class($this);\n    if (!class_exists($requestClass) || !($this instanceof FormRequest)) {\n        return;\n    }\n\n    foreach ($validator->getData() as $data) {\n        $request = new $requestClass($data);\n        $rules = $this->prepareRules($request->rules());\n\n        try {\n            Validator::make($data, $rules)->validate();\n        } catch (ValidationException $e) {\n            foreach ($e->validator->failed() as $field => $errors) {\n                foreach ($errors as $error) {\n                    $validator->addFailure($field, $error[0], $error[1]);\n                }\n            }\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 52.85611604353795}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t        if ($this->instance instanceof ShouldUpdate) {\n            if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n                $this->model = $arguments[0];\n            }\n\n            if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n                $this->request = $arguments[1];\n            }\n        }\n    }", "CodeBleu_score": 52.096670563450445}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t        if (!$this instanceof ShouldUpdate) {\n            return;\n        }\n\n        if ($arguments[0] instanceof Model) {\n            $this->model = $arguments[0];\n        }\n\n        if ($arguments[1] instanceof Request) {\n            $this->request = $arguments[1];\n        }\n    }", "CodeBleu_score": 63.246416463510634}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t        if (!$this->instance instanceof ShouldUpdate) {\n            return;\n        }\n\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->instance->setModel($arguments[0]);\n        }\n\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->instance->setRequest($arguments[1]);\n        }\n    }", "CodeBleu_score": 36.26022721492931}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $request = request();\n\n    // Apply search and sorting to the query\n    $query->usingSearchString()->sortable($sort);\n\n    // Check if the request expects a JSON response and is not an API request\n    if ($request->expectsJson() && !$request->isNotApi()) {\n        return $query->get();\n    }\n\n    // Paginate the results based on the limit from the request or a default setting\n    return $query->paginate($request->get('limit', 10));\n}", "CodeBleu_score": 39.93508488497121}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $sort = request('sort', $sort);\n\n    $query->usingSearchString()->sortable($sort);\n\n    if ($request->expectsJson() && !$request->isNotApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit', setting('DefaultItemsPerPage', 10)));\n}", "CodeBleu_score": 40.006727393318336}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $request = request();\n\n    $query->usingSearchString();\n    $query->sortable($sort);\n\n    if ($request->expectsJson() && !$request->isNotApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate($request->get('limit', setting('pagination', 10)));\n}", "CodeBleu_score": 40.388714687770914}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $open_amount += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    if ($model->due_at < Date::today()->toDateString()) {\n        $overdue_amount += $open_amount;\n        $open_amount = 0;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 50.87779268692957}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $transactions = $model->transactions;\n\n        $payments = $transactions->map(function ($transaction) {\n            return $transaction->getAmountConvertedToDefault();\n        });\n\n        $open_amount = (double) $payments->sum();\n    }\n\n    if ($model->due_at > Date::today()->toDateString()) {\n        $overdue_amount = $open_amount;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 49.20586138433632}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $amount_open = 0;\n    $amount_overdue = 0;\n\n    // Check if the document status is 'paid'\n    if ($model->status == 'paid') {\n        return [\n            'amount_open' => 0,\n            'amount_overdue' => 0,\n        ];\n    }\n\n    // Sum the payments from transactions\n    foreach ($model->transactions as $transaction) {\n        if ($transaction->type == 'income') {\n            $amount_open += $transaction->getAmountConvertedToDefault();\n        } else {\n            $amount_open -= $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    // Determine if the document is open or overdue\n    if ($model->due_at > Date::today()->toDateString()) {\n        $amount_overdue = $amount_open;\n        $amount_open = 0;\n    } else {\n        $amount_overdue = 0;\n    }\n\n    return [\n        'amount_open' => $amount_open,\n        'amount_overdue' => $amount_overdue,\n    ];\n}", "CodeBleu_score": 46.29705669261626}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.53728247813989}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.53728247813989}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.53728247813989}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request, 'reconciliations');\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($item) {\n                    $item->reconciled = 1;\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 62.540214938812234}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request, 'reconciliations');\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($item) {\n                    $item->reconciled = 1;\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 62.540214938812234}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request, 'reconciliations');\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $item) {\n            $item->status = 'reconciled';\n            $item->save();\n\n            Transaction::where('account_id', $item->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$item->started_at, $item->ended_at])->each\n                ->setReconciled();\n        }\n    });\n}", "CodeBleu_score": 44.10602229938568}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    // Retrieve and delete existing invitations for the user\n    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    // Create a new invitation with a unique token\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    // Attempt to dispatch a notification job to notify the user\n    try {\n        $this->dispatch(new NotifyUserOfInvitation($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send invitation notification: ' . $e->getMessage());\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 48.06748930123705}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    try {\n        $this->dispatch(new SendUserInvitationNotificationJob($invitation));\n    } catch (Exception $e) {\n        throw new Exception(__('Failed to send user invitation notification'));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 48.131570339282284}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    try {\n        $this->dispatch(new UserInvitationNotificationJob($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send user invitation notification: ' . $e->getMessage());\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 48.337726080663}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException();\n    }\n\n    if ($this->model->isReconciled()) {\n        throw new Exception('This transaction has been reconciled.');\n    }\n}", "CodeBleu_score": 35.77080787020122}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException(\"Unauthorized\");\n    }\n\n    if ($this->model->isReconciled()) {\n        throw new Exception(\"This transaction has been reconciled\");\n    }\n}", "CodeBleu_score": 32.24902716227087}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception(trans('transactions.reconciled_tran'));\n    }\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException(trans('transactions.transfer_tran'));\n    }\n}", "CodeBleu_score": 38.52438325006805}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    String tenantId = getTenantIdByToken();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (!tenantId.equals(\"0\")) {\n        List<String> allowedTables = Arrays.asList(\"table1\", \"table2\", \"table3\");\n        if (allowedTables.contains(tableName)) {\n            return true;\n        }\n    }\n\n    // If the tenant ID is zero, deny access to all tables\n    return false;\n}", "CodeBleu_score": 22.79506170985907}, {"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    int tenantId = getTenantIdByToken();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (tenantId != 0) {\n        return Arrays.asList(\"table1\", \"table2\", \"table3\").contains(tableName);\n    }\n\n    // If the tenant ID is zero, deny access to all tables\n    return false;\n}", "CodeBleu_score": 12.317338503006367}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (getTenantIdByToken() != 0) {\n        return Arrays.asList(\"table1\", \"table2\").contains(tableName);\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 10.099476314685159}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.08759747992765}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 97.2459881440059}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 98.73922343565063}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 98.73922343565063}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 98.73922343565063}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t     BaseResponseInfo res = new BaseResponseInfo();\n     AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n     try {\n         List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n         if(list.size()>0) {\n             ahl = list.get(0);\n         }\n         res.code = 200;\n         res.data = ahl;\n     } catch(Exception e){\n         logger.error(e.getMessage(), e);\n         res.code = 500;\n         res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n     }\n     return res;\n }", "CodeBleu_score": 98.87996258160882}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId != 0L) {\n                    if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 98.59149985415463}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId != 0L) {\n                    if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 98.59149985415463}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId != 0L) {\n                    if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 98.59149985415463}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.6463896481805}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.6463896481805}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfig();\n        response.setCode(200);\n        response.setData(systemConfigList.get(0));\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo error\", e);\n        response.setCode(500);\n        response.setMessage(\"getCurrentInfo error\");\n    }\n    return response;\n}", "CodeBleu_score": 38.49964615000937}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    List<SystemConfig> list = null;\n    try {\n        list = systemConfigService.getSystemConfigList();\n        response.setCode(200);\n        response.setData(list.get(0));\n    } catch (Exception e) {\n        log.error(\"getCurrentInfo error\", e);\n        response.setCode(500);\n        response.setData(new BaseResponseInfo.Error(e.getMessage()));\n    }\n    return response;\n}", "CodeBleu_score": 38.1097071742566}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        response.setCode(200);\n        response.setData(systemConfigList.get(0));\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo error\", e);\n        response.setCode(500);\n        response.setMessage(\"getCurrentInfo error\");\n    }\n    return response;\n}", "CodeBleu_score": 38.208664178773965}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        MultipartFile file = getFile(request);\n        if (file == null) {\n            baseResponseInfo.setCode(400);\n            baseResponseInfo.setData(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n            return baseResponseInfo;\n        }\n        String fileUploadType = getParameter(request, \"fileUploadType\");\n        if (fileUploadType.equals(\"local\")) {\n            String fileName = uploadLocal(file, businessPath);\n            if (fileName != null) {\n                baseResponseInfo.setCode(200);\n                baseResponseInfo.setData(fileName);\n            } else {\n                baseResponseInfo.setCode(400);\n                baseResponseInfo.setData(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n            }\n        } else if (fileUploadType.equals(\"aliOss\")) {\n            String fileName = uploadAliOss(file, businessPath);\n            if (fileName != null) {\n                baseResponseInfo.setCode(200);\n                baseResponseInfo.setData(fileName);\n            } else {\n                baseResponseInfo.setCode(400);\n                baseResponseInfo.setData(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n            }\n        }\n    } catch (Exception e) {\n        logger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setData(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 29.78140038069117}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        MultipartFile file = getFile(request, \"file\");\n        if (file == null) {\n            res.setCode(ResultCode.PARAM_IS_BLANK);\n            return res;\n        }\n        String uploadType = getParameter(request, \"uploadType\");\n        if (uploadType == null) {\n            uploadType = \"local\";\n        }\n        String realName = getParameter(request, \"realName\");\n        String filePath = null;\n        if (uploadType.equals(\"local\")) {\n            filePath = uploadLocal(file, businessPath, realName);\n        } else if (uploadType.equals(\"alioss\")) {\n            filePath = uploadAliOss(file, businessPath, realName);\n        }\n        if (filePath == null) {\n            res.setCode(ResultCode.FAIL);\n        } else {\n            res.setCode(ResultCode.SUCCESS);\n            res.setData(filePath);\n        }\n    } catch (Exception e) {\n        logger.error(e.toString(), e);\n        res.setCode(ResultCode.EXCEPTION);\n    }\n    return res;\n}", "CodeBleu_score": 41.86866565990447}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        String fileUploadType = request.getParameter(\"fileUploadType\");\n        if (StringUtils.isEmpty(businessPath) || file == null || StringUtils.isEmpty(fileUploadType)) {\n            baseResponseInfo.setCode(ResponseCodeEnum.PARAM_ERROR.getCode());\n            baseResponseInfo.setMessage(\"\u53c2\u6570\u9519\u8bef\");\n            return baseResponseInfo;\n        }\n        String fileName = file.getOriginalFilename();\n        String filePath = businessPath + \"/\" + fileName;\n        if (FileUploadTypeEnum.LOCAL.getCode().equals(fileUploadType)) {\n            String localPath = getLocalPath(businessPath);\n            File localFile = new File(localPath);\n            if (!localFile.exists()) {\n                localFile.mkdirs();\n            }\n            file.transferTo(new File(localPath + \"/\" + fileName));\n            baseResponseInfo.setCode(ResponseCodeEnum.SUCCESS.getCode());\n            baseResponseInfo.setData(filePath);\n        } else if (FileUploadTypeEnum.ALIOSS.getCode().equals(fileUploadType)) {\n            String uploadUrl = uploadAliOss(file, businessPath);\n            baseResponseInfo.setCode(ResponseCodeEnum.SUCCESS.getCode());\n            baseResponseInfo.setData(uploadUrl);\n        } else {\n            baseResponseInfo.setCode(ResponseCodeEnum.PARAM_ERROR.getCode());\n            baseResponseInfo.setMessage(\"\u53c2\u6570\u9519\u8bef\");\n        }\n    } catch (Exception e) {\n        baseResponseInfo.setCode(ResponseCodeEnum.SYSTEM_ERROR.getCode());\n        baseResponseInfo.setMessage(\"\u7cfb\u7edf\u5f02\u5e38\");\n        log.error(\"upload error:\", e);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 34.8489077610748}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result = 0;\n    try {\n        Account account = new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setInitialAmount(obj.getDouble(\"initialAmount\"));\n        account.setDescription(obj.getString(\"description\"));\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n        account.setEnabled(true);\n        if (account.getInitialAmount() == null) {\n            account.setInitialAmount(0D);\n        }\n        if (account.getIsDefault()) {\n            List<Account> list = accountMapperEx.getAllList();\n            for (Account a : list) {\n                a.setIsDefault(false);\n                updateAccount(a);\n            }\n        }\n        result = insert(account);\n        insertLog(log, \"\u6dfb\u52a0\u8d26\u6237\", obj.toString(), request);\n    } catch (Exception e) {\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 44.452854670073734}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        int result=0;\n        try{\n            Account account=new Account();\n            account.setInitialAmount(0.0);\n            account.setName(obj.getString(\"name\"));\n            account.setSerialNo(obj.getString(\"serialNo\"));\n            account.setRemarks(obj.getString(\"remarks\"));\n            account.setIsDefault(0);\n            List<Account> list=accountMapperEx.getAccountByParam(null, account.getSerialNo());\n            if(list.size()==0){\n                account.setIsDefault(1);\n            }\n            account.setEnabled(true);\n            result=accountMapperEx.insert(account);\n            logService.insertLog(LogObjectType.ACCOUNT, LogObjectAction.ADD, account.getId(), request);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 51.79654723249217}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        int result=0;\n        try{\n            Account account=new Account();\n            account.setInitialAmount(0.0);\n            account.setName(obj.getString(\"name\"));\n            account.setSerialNo(obj.getString(\"serialNo\"));\n            account.setDescription(obj.getString(\"description\"));\n            account.setIsDefault(obj.getBoolean(\"isDefault\"));\n            List<Account> list=getAccountByParam(account.getName(), account.getSerialNo());\n            if(list.size()>0){\n                account.setIsDefault(false);\n            }\n            account.setEnabled(true);\n            result=accountMapperEx.insertSelective(account);\n            insertLog(obj.getString(\"description\"), request);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 53.62981223545562}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.20415842895711}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"\u67e5\u8be2\u5931\u8d25\", e);\n        return null;\n    }\n}", "CodeBleu_score": 29.3121946935927}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"listWithBalanceCount error\", e);\n    }\n    return count;\n}", "CodeBleu_score": 49.36776170299837}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"\u5220\u9664\u5931\u8d25\", e);\n        throw new Exception(\"\u5220\u9664\u5931\u8d25\");\n    }\n    return result;\n}", "CodeBleu_score": 64.4825957060895}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"\u5220\u9664\u4ed3\u5e93\u5546\u54c1\u5931\u8d25\", e);\n        throw new Exception(\"\u5220\u9664\u4ed3\u5e93\u5546\u54c1\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 33.10619049773149}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"\u5220\u9664\u5931\u8d25\", e);\n        throw new Exception(\"\u5220\u9664\u5931\u8d25\");\n    }\n    return result;\n}", "CodeBleu_score": 64.4825957060895}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(getProtocol() + getHost() + \":\" + getPort() + \"/\"\n\t\t\t\t\t+ withProjectName(projectName) + \"addNode?nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tif (httpEntity != null) {\n\t\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\t\treturn jsonObject.has(\"key\");\n\t\t\t}\n\t\t} catch (IOException | JSONException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 51.65824955652791}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(withProjectName(projectName)\n\t\t\t\t\t+ nodeType + \"/\" + nodeKey);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tJSONObject jsonObject = readValue(httpEntity.getContent());\n\t\t\treturn jsonObject.containsKey(\"key\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 43.29574141132015}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClientBuilder.create().build();\n\t\t\tHttpGet httpGet = new HttpGet(getProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tif (httpEntity != null) {\n\t\t\t\tString json = EntityUtils.toString(httpEntity);\n\t\t\t\tJSONObject jsonObject = new JSONObject(json);\n\t\t\t\treturn jsonObject.has(\"key\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 53.73545583099148}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClientBuilder.create().build();\n\t\t\tHttpGet httpGet = new HttpGet(\n\t\t\t\t\tprotocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"addEdge?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 52.534613004936645}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(\n\t\t\t\t\tgetProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"edges/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tJSONObject jsonObject = (JSONObject) JSONValue.parse(response);\n\t\t\tif (jsonObject.containsKey(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 58.110424075865}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(\n\t\t\t\t\tgetProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"edges?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tif (httpEntity != null) {\n\t\t\t\tString json = EntityUtils.toString(httpEntity);\n\t\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\t\tMap<String, Object> map = mapper.readValue(json, Map.class);\n\t\t\t\tif (map.containsKey(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 61.76240263691275}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t        if(event == null || event.getMessage() == null) {\n            return;\n        }\n        if(event.getLocation() == null) {\n            event.setLocation(acquireTestingLocation());\n        }\n        event.setTime(System.currentTimeMillis());\n        String json = gson.toJson(event);\n        String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }", "CodeBleu_score": 38.89555297201941}, {"code": "public void sendEvent(Event event){\n\t    if(event == null || event.getMessage() == null) {\n        return;\n    }\n    if(event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String jsonString = writeValueAsString(event);\n    String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 36.35379858882482}, {"code": "public void sendEvent(Event event){\n\t\t\tif (event != null && event.getMessage() != null) {\n\t\t\tif (event.getLocation() == null) {\n\t\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t\t}\n\t\t\tevent.setTime(System.currentTimeMillis());\n\t\t\tString jsonString = \"\";\n\t\t\ttry {\n\t\t\t\tjsonString = mapper.writeValueAsString(event);\n\t\t\t} catch (JsonProcessingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tString topic = event.getTarget() != null ? event.getTarget() : \"test\";\n\t\t\tProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n\t\t\tproducer.send(record);\n\t\t\tproducer.flush();\n\t\t}\n\t}", "CodeBleu_score": 42.198096516925254}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t        OSS ossClient = new OSSClient(getConfig().getEndpoint(), getConfig().getAccessKeyId(), getConfig().getAccessKeySecret());\n        ossClient.putObject(getConfig().getOssBucket(), objName, new ByteArrayInputStream(content));\n        ossClient.shutdown();\n        return getConfig().getEndpoint() + \"/\" + getConfig().getOssBucket() + \"/\" + objName;\n    }", "CodeBleu_score": 47.14501463297811}, {"code": "public String upload(String objName, byte[] content){\n\t        OSS ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n        ossClient.shutdown();\n        return \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n    }", "CodeBleu_score": 38.72547847848105}, {"code": "public String upload(String objName, byte[] content){\n\t        OSS ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n        ossClient.shutdown();\n        return \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n    }", "CodeBleu_score": 38.72547847848105}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return LocationInfo.unknown();\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 25.57299186516363}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 28.258056796807583}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return LocationInfo.unknown();\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 25.57299186516363}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (lowLevelRestClient != null && restHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient != null && restHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> clusterHosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tlowLevelRestClient = RestClient.builder(clusterHosts.toArray(new HttpHost[0])).build();\n\t\t\trestHighLevelClient = new RestHighLevelClient(RestClient.builder(clusterHosts.toArray(new HttpHost[0])));\n\t\t}\n\t}", "CodeBleu_score": 69.2974782702898}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null) {\n\t\t\t\tList<HttpHost> hostList = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\t\t\tlowLevelRestClient = RestClient.builder(hostList.toArray(new HttpHost[hostList.size()])).build();\n\t\t\t}\n\t\t\tif (highLevelRestClient == null) {\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 58.539658860467505}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tsynchronized (this) {\n\t\t\tif (restClient == null || restHighLevelClient == null) {\n\t\t\t\tList<HttpHost> hostList = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\trestClient = RestClient.builder(hostList.toArray(new HttpHost[hostList.size()])).build();\n\t\t\t\trestHighLevelClient = new RestHighLevelClient(restClient);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 46.95071161390713}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostsList = clusterHostList.split(\",\");\n    for (String host : hostsList) {\n        String[] hostParts = host.split(\":\");\n        String hostName = hostParts[0];\n        int port = clusterPort;\n        if (hostParts.length > 1) {\n            port = Integer.parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 40.37153259102943}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostPort = host.split(\":\");\n        String hostName = hostPort[0];\n        int port = clusterPort;\n        if (hostPort.length > 1) {\n            port = Integer.parseInt(hostPort[1]);\n        }\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 41.13205892174191}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostsList = clusterHostList.split(\",\");\n    for (String host : hostsList) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            host = hostParts[0];\n            port = Integer.parseInt(hostParts[1]);\n        }\n        HttpHost httpHost = new HttpHost(host, port, \"http\");\n        hosts.add(httpHost);\n    }\n    return hosts;\n}", "CodeBleu_score": 38.264790339567476}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    try {\n        // Poll for tasks with a 30-second timeout\n        MessageTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            // Check the task type\n            if (task.getType() == MessageTask.TYPE_PLAIN_TEXT) {\n                // Extract the recipient number and message data\n                String toNumber = task.getToNumber();\n                String message = task.getMessage();\n                try {\n                    // Validate the data\n                    if (toNumber == null || toNumber.isEmpty() || message == null || message.isEmpty()) {\n                        throw new IllegalArgumentException(\"Invalid message data\");\n                    }\n                    // Send the message\n                    sendPlainTextMessage(toNumber, message);\n                } catch (Exception e) {\n                    // Log an error message if the data is invalid or an exception occurs\n                    logger.error(\"Failed to send message to \" + toNumber, e);\n                }\n            }\n        }\n    } catch (InterruptedException e) {\n        // Log an error message if the polling is interrupted\n        logger.error(\"Polling interrupted\", e);\n        throw e;\n    }\n}", "CodeBleu_score": 33.909488563602494}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        // Poll for a task with a 30-second timeout\n        MessageTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n        if (task == null) {\n            // If no task is retrieved, continue to the next iteration of the loop\n            continue;\n        }\n        try {\n            // Check the task type\n            if (task.getTaskType() == MessageTask.TaskType.PLAIN_TEXT_MESSAGE) {\n                // Extract the recipient number and message data from the task\n                String toNumber = task.getToNumber();\n                String message = task.getMessage();\n                // Validate the data\n                if (toNumber == null || toNumber.isEmpty() || message == null || message.isEmpty()) {\n                    // If the data is invalid, log an error message\n                    logger.error(\"Invalid message task: toNumber={}, message={}\", toNumber, message);\n                    continue;\n                }\n                // Send the message\n                sendPlainTextMessage(toNumber, message);\n            }\n        } catch (Exception e) {\n            // If an exception occurs, log an error message\n            logger.error(\"Error sending message: toNumber={}, message={}\", task.getToNumber(), task.getMessage(), e);\n        }\n    }\n}", "CodeBleu_score": 29.808489931527138}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tTask task = this.taskQueue.poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\tif (task instanceof PlainTextMessageTask) {\n\t\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tlogger.error(\"Send plain text message to \" + toNumber + \" failed.\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 30.793803702100263}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(\"Response content: \" + content);\n\t\treturn content;\n\t}", "CodeBleu_score": 68.54311198347935}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(\"Content: \" + content);\n\t\treturn content;\n\t}", "CodeBleu_score": 70.88321920619809}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(content);\n\t\treturn content;\n\t}", "CodeBleu_score": 67.93550694101549}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    Object[] root = decodeNodeToMap(document.getDocumentElement(), doTrim);\n    if (root == null || root.length < 2){\n        return null;\n    }\n    Map<String, Object> result = new HashMap<String, Object>();\n    result.put((String) root[0], root[1]);\n    return result;\n}", "CodeBleu_score": 67.73675143120468}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] result = decodeNodeToMap(doc.getDocumentElement(), doTrim);\n\tif (result == null || result.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> map = new HashMap<String, Object>();\n\tmap.put((String) result[0], result[1]);\n\treturn map;\n}", "CodeBleu_score": 59.52593059946464}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] rootValue = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootValue[0].toString(), rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 64.66043436757032}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n    if (eligibleForAutoProcessing) {\n        log.info(\"Enqueuing order {} for auto-shipping and invoicing\", orderRecord.getC_Order_ID());\n        addLog(orderRecord, \"Enqueued for auto-shipping and invoicing\");\n        enqueue(orderRecord, getTrxName());\n    } else {\n        log.info(\"Order {} is not eligible for auto-shipping and invoicing\", orderRecord.getC_Order_ID());\n        addLog(orderRecord, \"Not eligible for auto-shipping and invoicing\");\n        scheduleIfNotPostponed(orderRecord);\n    }\n}", "CodeBleu_score": 28.214326523436807}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal int orderId = orderRecord.getC_Order_ID();\n\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlog.info(\"Enqueueing auto-ship-and-invoice for order {}\", orderId);\n\t\twithLogger(log).addLog(orderId, \"Enqueueing auto-ship-and-invoice\").scheduleIfNotPostponed(orderId);\n\t} else {\n\t\tlog.info(\"Enqueueing missing shipment schedules for order {}\", orderId);\n\t\twithLogger(log).addLog(orderId, \"Enqueueing missing shipment schedules\").scheduleIfNotPostponed(orderId);\n\t}\n}", "CodeBleu_score": 30.317975822452247}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal C_Order_ID orderId = C_Order_ID.ofRepoId(orderRecord.getC_Order_ID());\n\n\tif (isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\tlog.info(\"Auto-ship and invoice order {}\", orderId);\n\t\tenqueue(orderId, getTrxName());\n\t}\n\telse\n\t{\n\t\tlog.info(\"Schedule missing shipment schedules for order {}\", orderId);\n\t\tscheduleIfNotPostponed(orderId);\n\t}\n}", "CodeBleu_score": 34.240462895634316}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, ['password' => $request->password])) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 61.7375224905766}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! $this->provider->validateCredentials($user, ['password' => $request->password])) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 65.10582133780048}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = $this->guard->getProvider()->getModel();\n    $user = $model->where('email', $request->email)->first();\n\n    if (! $user || ! $this->guard->getProvider()->validateCredentials($user, ['password' => $request->password])) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 70.11553577472067}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => trans('auth.failed'),\n    ]);\n}", "CodeBleu_score": 75.40817795255732}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        ThrottleKey::get($request) => trans('auth.failed'),\n    ]);\n}", "CodeBleu_score": 63.625336846694026}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        ThrottleKey::getKey($request) => __('auth.failed'),\n    ]);\n}", "CodeBleu_score": 62.951920631732605}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $publicKey = $user->webAuthnCredentials()->get()->map(function ($key) {\n            return new PublicKeyCredentialDescriptor(\n                PublicKeyCredentialDescriptor::CREDENTIAL_TYPE_PUBLIC_KEY,\n                $key->credentialId\n            );\n        });\n\n        $data = Webauthn::prepareAssertion($publicKey);\n\n        return Inertia::render('Auth/TwoFactorChallenge', $data + [\n            'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n        ])->toResponse($request);\n    }\n\n    return redirect()->route('login');\n}", "CodeBleu_score": 70.30016918092777}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n\n    $user = User::find($userId);\n\n    if ($user) {\n        // Prepare the WebAuthn assertion\n        $publicKey = Webauthn::prepareAssertion($user);\n\n        return Inertia::render('Auth/TwoFactorChallenge', [\n            'publicKey' => $publicKey,\n            'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n        ])->toResponse($request);\n    }\n}", "CodeBleu_score": 70.4207747835026}, {"code": "<?\npublic function toResponse($request){\n\t    // Get the user ID from the session.\n    $userId = $request->session()->get('login.id');\n\n    // Fetch the user.\n    $user = User::find($userId);\n\n    // If the user exists, prepare a WebAuthn assertion.\n    if ($user) {\n        // Include the public key in the response data.\n        $data = Webauthn::prepareAssertion($user);\n    }\n\n    // Render the 'TwoFactorChallenge' view with data indicating whether two-factor authentication is enabled and if the \"remember me\" option is set.\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ])->toResponse($request);\n}", "CodeBleu_score": 78.24008182745527}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        ['driver', '=', $driver],\n        ['driver_id', '=', $socialite->getId()],\n    ]);\n\n    if ($userToken) {\n        // If found, retrieve the associated user\n        $user = $userToken->user;\n    } else {\n        // If not found, create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n    }\n\n    // Verify the user association\n    $this->checkUserAssociation($request, $user, $driver);\n\n    return $user;\n}", "CodeBleu_score": 51.635628766718966}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\n    // Check if the user is already authenticated\n    if ($user = Auth::user()) {\n        return $user;\n    }\n\n    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    // If a user token is found, retrieve the associated user\n    if ($userToken) {\n        $user = $userToken->user;\n    } else {\n        // If no user token is found, create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n    }\n\n    // Verify the user association\n    $this->checkUserAssociation($request, $user, $driver);\n\n    // Create a new user token if necessary\n    if (!$userToken) {\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Log the user in\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 60.0952395338526}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    // If found, retrieve the associated user and verify the user association\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        // If not found, create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Return the authenticated user\n    return $user;\n}", "CodeBleu_score": 62.99872967007543}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    // Get the user from the request\n    $user = $request->user();\n    // If no user is found, return false\n    if (! $user) {\n        return false;\n    }\n    // Validate the assertion using the filtered credentials from the request\n    $validated = WebauthnFacade::validateAssertion($user, $this->filterCredentials($request));\n    // If validation fails, trigger a failed authentication event, throw an authentication exception, and return false\n    if (! $validated) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n    // If successful, return true\n    return true;\n}", "CodeBleu_score": 83.63791356402854}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (WebauthnFacade::validateAssertion($user, $credentials)) {\n        return true;\n    }\n\n    $this->fireFailedEvent($request, $user);\n    $this->throwFailedAuthenticationException($request);\n\n    return false;\n}", "CodeBleu_score": 71.6158132797969}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n    if (! WebauthnFacade::validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 64.21169888838777}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    if (!$email = $this->option('email')) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 76.30775858092078}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!$email = $this->option('email')) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 76.30775858092078}, {"code": "<?\nprivate function user(): ?User{\n\t    if (empty($this->option)) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->option)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 43.61704909366494}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    $config = config('scout.meilisearch');\n    if ($config['flush'] ?? false) {\n        foreach ($config['indexes'] ?? [] as $index => $settings) {\n            $table = $settings['table'] ?? (new $index)->getTable();\n            $this->artisan(\n                \"Flushing index [{$table}]\",\n                'scout:flush',\n                ['model' => $index]\n            );\n        }\n        $this->info('\u2705 Meilisearch indexes flushed');\n    }\n}", "CodeBleu_score": 51.405846818054734}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch' || !$this->option('flush')) {\n        return;\n    }\n\n    $indexes = config('scout.meilisearch.index-settings');\n\n    foreach ($indexes as $index => $settings) {\n        $table = (new $index)->getTable();\n        $this->artisan(\"scout:flush \\\"$table\\\"\", 'Flushing index:');\n    }\n\n    $this->info('\u2705 Indexes flushed');\n}", "CodeBleu_score": 57.76308584146934}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch') {\n        return;\n    }\n\n    if (!$this->option('flush')) {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.settings') as $index => $settings) {\n        $table = (new $index)->getTable();\n        $this->artisan('Flushing index: '.$table, 'scout:flush', [\n            'model' => $index,\n        ]);\n    }\n\n    $this->info('All indexes flushed');\n}", "CodeBleu_score": 66.69014658119441}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n\n    if (! $vcard->hasUID()) {\n        $vcard->setUID($resource->getUID());\n    }\n\n    if (! $vcard->exists()) {\n        $vcard->setName($resource->getName());\n        $vcard->setSource($this->getSource($resource));\n    }\n\n    $this->exporters($resource::class)->each(function (ExportVCardResource $exporter) use ($resource, $vcard) {\n        $exporter->export($resource, $vcard);\n    });\n\n    return $vcard;\n}", "CodeBleu_score": 25.680390840995404}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read the VCard from the resource, or create a new one if it doesn't exist\n    $vcard = $this->read($resource);\n    if (! $vcard->hasUID()) {\n        $vcard->setUID($resource->getUID());\n    }\n\n    // Apply exporters to add more details to the VCard\n    $exporters = $this->exporters($resource::class);\n    foreach ($exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    // Return the populated VCard\n    return $vcard;\n}", "CodeBleu_score": 27.038919701573743}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t        // Read an existing VCard from the resource, setting a UID if it is missing\n        $vcard = $this->read($resource);\n\n        // If the VCard doesn't exist, create a new VCard with basic information\n        if (! $vcard->exists()) {\n            $vcard = $this->create($resource);\n        }\n\n        // Apply a series of exporters to add more details to the VCard from the resource\n        $this->exporters(get_class($resource))\n            ->each(fn (ExportVCardResource $exporter) => $exporter->execute($vcard, $resource));\n\n        return $vcard;\n    }", "CodeBleu_score": 20.419134314763525}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 82.7297530864468}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    }\n\n    if ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    }\n\n    return false;\n}", "CodeBleu_score": 80.51554711187205}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 82.7297530864468}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'description' => $data['description'],\n        'type'        => $data['type'],\n        'user_id'     => auth()->guard()->user()->id,\n        'lead_id'     => $data['lead_id'],\n    ]);\n\n    $file = request()->file('file');\n\n    return $this->create([\n        'filename'    => $file->getClientOriginalName(),\n        'path'        => $file->store('lead_files'),\n        'activity_id' => $leadActivity->id,\n    ]);\n}", "CodeBleu_score": 64.94076144945456}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'description' => $data['description'],\n        'type' => 'file',\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard()->user()->id\n    ]);\n\n    return $this->create([\n        'filename' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('lead-files/' . $leadActivity->id),\n        'activity_id' => $leadActivity->id\n    ]);\n}", "CodeBleu_score": 67.74979487779095}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $user = auth()->guard()->user();\n\n    $leadActivity = $this->activityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => $user->id,\n        'event'   => $data['event'],\n        'content' => $data['content'],\n    ]);\n\n    return $this->create([\n        'activity_id' => $leadActivity->id,\n        'name'        => request()->file('file')->getClientOriginalName(),\n        'path'        => request()->file('file')->store('leads/' . $leadActivity->id),\n    ]);\n}", "CodeBleu_score": 63.10483601804887}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    $path = $this->isAdmin(request()) ? 'admin' : 'front';\n\n    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } else if ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } else if ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } else if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    if (request()->routeIs('admin.*')) {\n        if ($statusCode == 404) {\n            return $this->response($path, $statusCode);\n        }\n\n        if ($statusCode == 403) {\n            return $this->response($path, $statusCode);\n        }\n\n        if ($statusCode == 401) {\n            return redirect()->route('admin.session.create');\n        }\n\n        return $this->response($path, $statusCode);\n    } else {\n        if ($statusCode == 404) {\n            return $this->response($path, $statusCode);\n        }\n\n        if ($statusCode == 403) {\n            return $this->response($path, $statusCode);\n        }\n\n        return $this->response($path, $statusCode);\n    }\n}", "CodeBleu_score": 48.038693266449286}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } else {\n        $statusCode = method_exists($exception, 'getStatusCode') ? $exception->getStatusCode() : 500;\n    }\n\n    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    if ($statusCode == 404) {\n        if (request()->routeIs('admin.*')) {\n            return redirect()->route('admin.session.create');\n        } else {\n            return redirect()->route('shop.session.create');\n        }\n    }\n\n    return $this->response(\n        request()->routeIs('admin.*') ? 'admin' : 'shop',\n        $statusCode\n    );\n}", "CodeBleu_score": 43.581784326623406}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    // Check if the route is for admin or front\n    $route = request()->routeIs('admin.*') ? 'admin' : 'front';\n\n    // Redirect front routes to the admin session creation\n    if ($route === 'front') {\n        return redirect()->route('admin.session.create');\n    }\n\n    // Handle HTTP exceptions\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n\n        // Set the status code to a specified value or 500\n        if (in_array($statusCode, [403, 404, 500])) {\n            return $this->response($route, $statusCode);\n        }\n    }\n\n    // Handle ModelNotFoundException\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->response($route, 404);\n    }\n\n    // Handle PDOException\n    if ($exception instanceof PDOException) {\n        return $this->response($route, 500);\n    }\n\n    // Handle ParseError\n    if ($exception instanceof ParseError) {\n        return $this->response($route, 500);\n    }\n\n    // Handle other exceptions\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 61.559542380593335}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $activities = request()->get('activities');\n    $count = 0;\n    foreach ($activities as $activityId) {\n        Event::dispatch('activity.updating', $activityId);\n        $this->activityRepository->update($activityId, ['is_done' => trans('status.success')]);\n        $count++;\n        Event::dispatch('activity.updated', $activityId);\n    }\n    if ($count == 0) {\n        return response()->json(['message' => trans('status.error')], 400);\n    }\n    return response()->json(['message' => trans('status.success')]);\n}", "CodeBleu_score": 44.848329665909056}, {"code": "<?\npublic function massUpdate(){\n\t    $data = request()->all();\n\n    $ids = request()->get('ids');\n    $ids = explode(',', $ids);\n\n    $count = 0;\n    foreach ($ids as $id) {\n        Event::dispatch('activities.updating', $id);\n\n        $this->activityRepository->update($data, $id);\n        Event::dispatch('activities.updated', $id);\n        $count++;\n    }\n\n    if ($count) {\n        return response()->json(['status' => 'success']);\n    }\n\n    return response()->json(['status' => 'fail']);\n}", "CodeBleu_score": 42.22850399888499}, {"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request()->get('activityIds');\n    $count = 0;\n    foreach ($activityIds as $activityId) {\n        Event::dispatch('activity.updating', $activityId);\n        $this->activityRepository->update($activityId, ['is_done' => trans('status.done')]);\n        Event::dispatch('activity.updated', $activityId);\n        $count++;\n    }\n    if ($count > 0) {\n        return response()->json(['message' => 'Activities updated successfully.']);\n    } else {\n        return response()->json(['message' => 'No activities were updated.']);\n    }\n}", "CodeBleu_score": 42.79682099685557}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    foreach (request('ids') as $id) {\n        Event::dispatch('activity.deleting', $id);\n        $this->activityRepository->delete($id);\n        Event::dispatch('activity.deleted', $id);\n    }\n\n    return response()->json([\n        'message' => trans('messages.activities_deleted'),\n    ]);\n}", "CodeBleu_score": 40.941809042992276}, {"code": "<?\n public function massDestroy(){\n\t    // Retrieve the activity IDs from the request\n    $ids = request('ids');\n    // Loop through each activity ID\n    foreach ($ids as $id) {\n        // Dispatch an event before deleting the activity\n        Event::dispatch('activity.deleting', $id);\n        // Delete the activity using the activity repository\n        $this->activityRepository->delete($id);\n        // Dispatch an event after deleting the activity\n        Event::dispatch('activity.deleted', $id);\n    }\n    // Return a JSON response indicating a successful destruction\n    return response()->json([\n        'message' => trans('messages.success.deleted', ['Module' => trans('activity::activity.name')])\n    ]);\n}", "CodeBleu_score": 46.850404531302836}, {"code": "<?\n public function massDestroy(){\n\t    // Get the IDs of activities to delete from the request\n    $ids = request('ids');\n\n    // Iterate over the IDs and delete each activity\n    foreach ($ids as $id) {\n        // Dispatch an event before deleting the activity\n        Event::dispatch('activity.deleting', $id);\n\n        // Delete the activity\n        $this->activityRepository->delete($id);\n\n        // Dispatch an event after deleting the activity\n        Event::dispatch('activity.deleted', $id);\n    }\n\n    // Return a JSON response indicating a successful destruction\n    return response()->json([\n        'message' => trans('messages.success.deleted', ['Module' => trans('activity::activity.name')]),\n    ]);\n}", "CodeBleu_score": 46.753241346887066}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    foreach($cards as $key => $card) {\n        if(isset(request()->all()[$card['id']])) {\n            $cards[$key]['selected'] = true;\n        } else {\n            $cards[$key]['selected'] = false;\n        }\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 37.56168290510665}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $request = request()->all();\n\n    foreach ($cards as $card) {\n        foreach ($request as $key => $value) {\n            if ($card['name'] == $key) {\n                $card['selected'] = $value;\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 45.92614530023829}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $requestData = request()->all();\n\n    foreach ($cards as $card) {\n        foreach ($requestData as $key => $value) {\n            if ($card['id'] == $key) {\n                $card['selected'] = $value;\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 46.902633946463396}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n    $configuration = $this->configurationRepository->create(request()->all());\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 46.00344073148498}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.settings.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 45.4584128507407}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.settings.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 45.4584128507407}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/' . $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 90.66551583260859}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(getUserId());\n        sort.setModel(model);\n        sort.setType(AdminModelSort.Type.HEADER);\n        sort.setSort(list.indexOf(model));\n        sortList.add(sort);\n    }\n    adminModelSortRepository.removeByUserIdAndType(getUserId(), AdminModelSort.Type.HEADER);\n    adminModelSortRepository.saveAll(sortList);\n    return ok();\n}", "CodeBleu_score": 41.205936452125215}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(getUserId());\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setSort(i);\n        adminModelSort.setType(AdminModelSort.Type.HEADER);\n        adminModelSorts.add(adminModelSort);\n    }\n    remove(getUserId(), AdminModelSort.Type.HEADER);\n    saveBatch(adminModelSorts);\n    return ok();\n}", "CodeBleu_score": 63.615380330872476}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(list.get(i));\n        sort.setUserId(getUserId());\n        sort.setSort(i);\n        sort.setType(AdminModelSort.TYPE_HEADER);\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteByUserIdAndType(getUserId(), AdminModelSort.TYPE_HEADER);\n    adminModelSortRepository.saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 60.47813982822306}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if(userConfig != null) {\n        userConfig.setValue(json.toString());\n        userConfigService.updateById(userConfig);\n    } else {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toString());\n        userConfigService.save(userConfig);\n    }\n    return Result.success();\n}", "CodeBleu_score": 61.27621627979719}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    // Retrieve the user configuration by the custom key\n    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    // If the configuration exists, update its value with the provided JSON\n    if (userConfig != null) {\n        userConfig.setValue(json.toString());\n        userConfigService.updateById(userConfig);\n    } else {\n        // If the configuration doesn't exist, create a new one with the provided JSON\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toString());\n        userConfigService.save(userConfig);\n    }\n    // Return a successful result\n    return Result.success();\n}", "CodeBleu_score": 63.812138404616924}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    // Retrieve the user configuration by the custom key\n    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if (userConfig != null) {\n        // Update the value of the existing user configuration\n        userConfig.setValue(json.toString());\n        userConfigService.updateById(userConfig);\n    } else {\n        // Create a new user configuration with the provided JSON\n        UserConfig userConfig1 = new UserConfig();\n        userConfig1.setName(customKey);\n        userConfig1.setValue(json.toString());\n        userConfig1.setUserId(1L);\n        userConfigService.save(userConfig1);\n    }\n    // Return a successful result\n    return Result.success();\n}", "CodeBleu_score": 59.36020249695899}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\uff0c\u8bf7\u91cd\u8bd5\uff01\");\n    }\n    user.setDeptName(sysDeptService.getNameByDeptId(user.getDeptId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 43.990252696664434}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.getById(userId);\n    if (user == null) {\n        return Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n    }\n    user.setDeptName(sysDeptService.getNameByDeptId(user.getDeptId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 43.09174955596918}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.getById(userId);\n    if (user == null) {\n        return Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n    }\n    String deptName = sysDeptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 52.32059682977983}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    // Get the user ID\n    long userId = getUserId();\n\n    // Check if there are multiple \"readNotice\" entries for the user\n    List<readNotice> readNotices = lambdaQuery(readNotice.class).eq(readNotice::getUserId, userId).queryList();\n    if (readNotices.size() > 1) {\n        // Update the status to 1 for all matching entries\n        for (readNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            update(readNotice);\n        }\n    } else {\n        // Create a new \"readNotice\" entry with status 1\n        readNotice readNotice = new readNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        save(readNotice);\n    }\n\n    // Return a success result\n    return success();\n}", "CodeBleu_score": 34.63908262916057}, {"code": " public Result readNotice() {\n\t    String userId = getUserId();\n    List<ReadNotice> readNoticeList = lambdaQuery(ReadNotice.class, (query) -> query.eq(\"userId\", userId));\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            update(readNotice);\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        save(readNotice);\n    }\n    return success();\n}", "CodeBleu_score": 30.71443298270089}, {"code": " public Result readNotice() {\n\t    // Get the user ID\n    Long userId = getUserId();\n\n    // Check if there are multiple \"readNotice\" entries for the user\n    List<ReadNotice> readNotices = lambdaQuery(ReadNotice.class).eq(ReadNotice::getUserId, userId).listNoPaging();\n    if (readNotices.size() > 1) {\n        // Update the status of all matching entries to 1\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            update(readNotice);\n        }\n    } else {\n        // Create a new \"readNotice\" entry with status 1\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        save(readNotice);\n    }\n\n    // Return a success result\n    return success();\n}", "CodeBleu_score": 33.62732248817172}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = AdminConfig.findByName(\"companyInfo\");\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n    }\n    adminConfig.setValue(adminCompanyBO.toJSONString());\n    adminConfig.saveOrUpdate();\n}", "CodeBleu_score": 41.30562491441069}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = AdminConfig.findByName(\"companyInfo\")\n    if (!adminConfig) {\n        adminConfig = new AdminConfig()\n        adminConfig.name = \"companyInfo\"\n        adminConfig.value = \"{}\"\n    }\n    Map companyInfo = [:]\n    companyInfo.put(\"name\", adminCompanyBO.name)\n    companyInfo.put(\"description\", adminCompanyBO.description)\n    companyInfo.put(\"status\", adminCompanyBO.status)\n    adminConfig.value = companyInfo as JSON\n    adminConfig.save(flush: true)\n}", "CodeBleu_score": 37.469133548853776}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // Search for an existing configuration with the name \"companyInfo\"\n    AdminConfiguration configuration = AdminConfiguration.findByName(\"companyInfo\")\n    // If the configuration is not found, create a new one with default values\n    if (!configuration) {\n        configuration = new AdminConfiguration(\n                name: \"companyInfo\",\n                description: \"Company Information\",\n                value: [\n                        name: \"Company Name\",\n                        address: \"Company Address\",\n                        email: \"company@example.com\",\n                        phone: \"+1 (123) 456-7890\",\n                        website: \"https://example.com\"\n                ].toJSONString()\n        ).save()\n    }\n    // Update the configuration's value with the provided company information\n    configuration.value = [\n            name: adminCompanyBO.name,\n            address: adminCompanyBO.address,\n            email: adminCompanyBO.email,\n            phone: adminCompanyBO.phone,\n            website: adminCompanyBO.website\n    ].toJSONString()\n    // Save or update the configuration\n    configuration.save(flush: true)\n}", "CodeBleu_score": 31.738728813552374}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    ParseQuery<ParseObject> query = ParseQuery.getQuery(\"AdminCompany\");\n    query.whereEqualTo(\"key\", \"adminConfig\");\n    try {\n        ParseObject object = query.getFirst();\n        if (object != null) {\n            return parseObject(object);\n        }\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 26.720378357125245}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    ParseQuery<ParseObject> query = ParseQuery.getQuery(\"AdminCompany\");\n    query.whereEqualTo(\"key\", \"admin_company\");\n    try {\n        List<ParseObject> results = query.find();\n        if (!results.isEmpty()) {\n            ParseObject adminConfig = results.get(0);\n            return parseObject(adminConfig);\n        }\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 27.490481838977942}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    ParseQuery<ParseObject> query = ParseQuery.getQuery(\"AdminCompany\");\n    query.whereEqualTo(\"key\", \"company\");\n    try {\n        ParseObject parseObject = query.getFirst();\n        if (parseObject != null) {\n            return parseObject.getValue(\"value\");\n        }\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 26.500567401979513}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> configList = new ArrayList<AdminConfig>();\n     for (String string : stringList) {\n         AdminConfig config = new AdminConfig();\n         config.setName(string);\n         config.setType(\"string\");\n         config.setValue(string);\n         configList.add(config);\n     }\n     AdminConfig.remove(logConfigName);\n     AdminConfig.saveBatch(configList);\n }", "CodeBleu_score": 44.88300525649691}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setName(logConfigName);\n        config.setValue(string);\n        configList.add(config);\n    }\n    remove(logConfigName);\n    saveBatch(configList);\n}", "CodeBleu_score": 44.06156180684029}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n    stringList.forEach(string -> {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(string);\n        adminConfig.setStatus(AdminConfig.STATUS_ENABLED);\n        adminConfigList.add(adminConfig);\n    });\n    AdminConfig.remove(AdminConfig.TYPE_LOG_WELCOME_SPEECH, logConfigurationName);\n    AdminConfig.saveBatch(AdminConfig.TYPE_LOG_WELCOME_SPEECH, adminConfigList);\n}", "CodeBleu_score": 45.617693069905854}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = adminInitDataBO.getUserId();\n    AdminUserBO adminUserBO = getById(userId);\n    String username = adminUserBO.getUsername();\n    String password = adminUserBO.getPassword();\n    String salt = adminUserBO.getSalt();\n\n    if (!password.equals(EncryptUtil.encrypt(adminInitDataBO.getPassword(), username, salt))) {\n        throw new BusinessException(ErrorCode.INVALID_PASSWORD);\n    }\n\n    String code = String.valueOf(randomInt(100000, 999999));\n    setex(getRedis(RedisKey.ADMIN_TEMP_CODE_KEY, userId), 600, code);\n    return code;\n}", "CodeBleu_score": 39.79663289663888}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId();\n    UserDetailsBO userDetailsBO = getById(userId);\n    String username = getUsername(userDetailsBO);\n    String password = getPassword(userInitDataBO);\n    String salt = getSalt(userDetailsBO);\n\n    if (verify(password, salt, username)) {\n        String code = generateRandomCode();\n        setex(getRedis(), \"temp:\" + code, code, 600);\n        return code;\n    } else {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n}", "CodeBleu_score": 26.724887908883726}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getCurrentUserId();\n    UserDetailsBO userDetails = getUserDetails(userId);\n    String username = userDetails.getUsername();\n    String password = getPassword();\n    String salt = getSalt();\n    if (verify(password, username, salt)) {\n        String code = generateRandomCode();\n        setex(code, code, 10 * 60);\n        return code;\n    } else {\n        throw new InvalidPasswordException();\n    }\n}", "CodeBleu_score": 28.607509497850327}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"user:\" + userId + \":initAuth\";\n    List<String> unauthorizedMenuUrls = (List<String>) get(key);\n    return unauthorizedMenuUrls.contains(getInitialAuthenticationUrl());\n}", "CodeBleu_score": 30.21959837966544}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = RedisKey.UNAUTH_MENU_URL + userId;\n    Set<String> unauthMenuUrls = redisUtils.getSet(key);\n    return unauthMenuUrls.contains(getInitAuthUrl());\n}", "CodeBleu_score": 27.977851928945874}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"user:\" + userId + \":unauth:menu\";\n    List<String> unauthorizedMenuUrls = redis.getList(key);\n    if (unauthorizedMenuUrls.contains(getInitialAuthUrl())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 31.28782365929796}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.00793022948004}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.00793022948004}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.00793022948004}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //\u6392\u5e8f\n        searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        //\u4e0d\u67e5\u8be2\u7684\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(new String[]{}, new String[]{\"content\"});\n        //\u6267\u884c\u67e5\u8be2\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = null;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        //\u83b7\u53d6\u7ed3\u679c\n        List<SysLog> sysLogList = mapToBean(searchResponse);\n        //\u8bbe\u7f6e\u603b\u6761\u6570\n        long totalHits = getTotalHits(searchResponse);\n        //\u8bbe\u7f6e\u5f53\u524d\u9875\n        int current = querySysLogBO.getPage();\n        //\u5c01\u88c5\u5206\u9875\u7ed3\u679c\n        BasePage<SysLog> page = new BasePage<>();\n        page.setCurrent(current);\n        page.setTotal(totalHits);\n        page.setList(sysLogList);\n        return page;\n    }", "CodeBleu_score": 53.59469820629125}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        try {\n            // \u521d\u59cb\u5316\u641c\u7d22\u6761\u4ef6\n            SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n            // \u6392\u5e8f\n            searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n            // \u6392\u9664\u5b57\u6bb5\n            searchSourceBuilder.fetchSource(new String[]{}, new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"subModel\", \"createTime\", \"createBy\", \"createName\", \"ip\", \"content\", \"result\", \"params\"});\n            // \u6267\u884c\u641c\u7d22\n            SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n            searchRequest.source(searchSourceBuilder);\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            // \u83b7\u53d6\u603b\u6761\u6570\n            long totalHits = searchResponse.getHits().getTotalHits().value;\n            // \u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\n            List<SysLog> sysLogList = mapToBean(searchResponse, SysLog.class);\n            // \u5c01\u88c5\u5206\u9875\u5bf9\u8c61\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setList(sysLogList);\n            basePage.setTotal(totalHits);\n            basePage.setCurrent(querySysLogBO.getPage());\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 55.74576194737089}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"userName\", \"model\", \"subModel\", \"subModelLabel\", \"ip\", \"createTime\"}, null);\n        searchRequest.source(searchSourceBuilder);\n        BasePage<SysLog> page = new BasePage<>();\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            SearchHits hits = searchResponse.getHits();\n            List<SysLog> sysLogs = mapToBean(hits.getHits(), SysLog.class);\n            page.setList(sysLogs);\n            page.setTotal(hits.getTotalHits().value);\n            page.setCurrent(querySysLogBO.getPage());\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return page;\n    }", "CodeBleu_score": 62.517350397318324}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  return new Promise(async (resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 82.58710521999708}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  return new Promise((resolve, reject) => {\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 79.46117752759243}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 84.67517220344354}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(module.getDependentModules())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> getLiveModules(moduleId)\n                        .onErrorContinue((throwable, o) -> log.warn(\"Error while retrieving dependent module: {}\", moduleId, throwable))\n                );\n    }", "CodeBleu_score": 63.188884199213334}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(module.getDependentModules())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> getLiveModules(moduleId)\n                        .onErrorContinue((throwable, o) -> log.warn(\"Error while retrieving dependent module: {}\", moduleId, throwable))\n                );\n    }", "CodeBleu_score": 63.188884199213334}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(module.getDependentModules())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> getLiveModules(moduleId)\n                        .onErrorContinue((throwable, o) -> log.warn(\"Error while retrieving dependent module for module ID: {}, error: {}\", moduleId, throwable.getMessage())))\n                .collectList()\n                .flatMapMany(Flux::fromIterable);\n    }", "CodeBleu_score": 61.371139223600494}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data;\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        } else {\n            data = read(dataBuffer);\n        }\n        String contentType = createThumbnail ? \"image/jpeg\" : srcContentType.getType();\n        return Asset.builder().contentType(contentType).data(data).build();\n    }", "CodeBleu_score": 43.99875478051748}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = createThumbnail ? resizeImage(dataBuffer) : dataBuffer.asByteBuffer().array();\n        String contentType = createThumbnail ? \"image/jpeg\" : srcContentType.toString();\n        DataBufferUtils.release(dataBuffer);\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 41.88519212816723}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = createThumbnail ? resizeImage(dataBuffer) : dataBuffer.asByteBuffer().array();\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        DataBufferUtils.release(dataBuffer);\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 43.80589242479536}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(asset.getContentType());\n                }\n                return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n            });\n}", "CodeBleu_score": 43.9601445976065}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n        .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n            }\n            return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n        });\n}", "CodeBleu_score": 42.855413181988254}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n            });\n}", "CodeBleu_score": 44.447023801930605}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getWorkspace().isSaasMode()) {\n        return Flux.empty();\n    }\n    return getOrganizationInEnterpriseMode()\n            .flatMapIterable(org -> org.getAuthConfigs())\n            .map(authConfig -> new FindAuthConfig(authConfig, org.getId()))\n            .collect(Collectors.toList())\n            .flatMapIterable(Flux::fromIterable);\n}", "CodeBleu_score": 32.25473252934176}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getWorkspace().getMode() == WorkspaceMode.SAAS) {\n      return Flux.empty();\n    }\n\n    return getOrganizationInEnterpriseMode()\n        .map(this::mapToFindAuthConfig)\n        .collect(Collectors.toList())\n        .flatMapIterable(toList -> toList)\n        .map(this::mapToFindAuthConfig);\n  }", "CodeBleu_score": 32.258098935997225}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getWorkspace().getMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return getOrganizationInEnterpriseMode()\n            .flatMapIterable(org -> org.getAuthConfigs().values())\n            .map(FindAuthConfig::new);\n}", "CodeBleu_score": 30.151065338682344}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.mongock.examples.mongock.quickstart.mongodb.springdata.v3.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 27.21690076526967}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.example.mongock.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 25.453597536427797}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.example.mongock.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 25.453597536427797}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        mongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return mongoTemplate;\n    }", "CodeBleu_score": 95.78632722296167}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return libraryQueryRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n                .map(LibraryQuery::getDsl)\n                .switchIfEmpty(libraryQueryService.getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl));\n    }", "CodeBleu_score": 59.639756879020226}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQueryRecord::getDsl)\n                .switchIfEmpty(libraryQueryService.getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl));\n    }", "CodeBleu_score": 63.697690645310445}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQueryRecord::getDsl)\n                .switchIfEmpty(getById(libraryQueryId).map(LibraryQuery::getDsl));\n    }", "CodeBleu_score": 57.15380807742893}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeout = parseQueryTimeoutMs(timeoutStr);\n        return defer(() -> {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        }).timeout(timeout)\n                .onErrorMap(PluginException.class, ex -> {\n                    log.error(\"Failed to execute query on datasource: {}\", datasource.getName(), ex);\n                    return new QueryExecutionException(getMessage(ex));\n                })\n                .onErrorResume(PluginException.class, ex -> {\n                    log.error(\"Failed to execute query on datasource: {}\", datasource.getName(), ex);\n                    return just(QueryExecutionResult.error(getMessage(ex)));\n                })\n                .onErrorResume(ex -> {\n                    log.error(\"Failed to execute query on datasource: {}\", datasource.getName(), ex);\n                    return just(QueryExecutionResult.error(getMessage(ex)));\n                });\n    }", "CodeBleu_score": 54.721872046598975}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeoutDuration = parseQueryTimeoutMs(timeoutStr);\n        var deferredQueryExecution = defer(() -> {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        });\n        return deferredQueryExecution\n                .timeout(timeoutDuration)\n                .onErrorMap(PluginException.class, exception -> {\n                    log.error(\"Error while executing query on datasource {}\", datasource.getName(), exception);\n                    return new PluginException(exception.getType(), exception.getMessage(), exception.getCause());\n                })\n                .onErrorResume(PluginException.class, exception -> {\n                    log.error(\"Error while executing query on datasource {}\", datasource.getName(), exception);\n                    return just(QueryExecutionResult.error(exception.getMessage()));\n                })\n                .onErrorResume(throwable -> {\n                    log.error(\"Error while executing query on datasource {}\", datasource.getName(), throwable);\n                    return just(QueryExecutionResult.error(throwable.getMessage()));\n                });\n    }", "CodeBleu_score": 49.91317192798562}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeout = parseQueryTimeoutMs(timeoutStr);\n        return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                .timeout(timeout, Mono.defer(() -> {\n                    if (isJsDatasourcePlugin(datasource.getType())) {\n                        return executeByNodeJs(datasource, queryConfig, requestParams);\n                    } else {\n                        return just(QueryExecutionResult.error(error(getMessage(ErrorCode.QUERY_TIMEOUT))));\n                    }\n                }))\n                .onErrorMap(PluginException.class, PluginException::ofException)\n                .onErrorResume(PluginException.class, PluginException::onErrorMap)\n                .onErrorResume(error -> {\n                    log.error(\"Error while executing query on datasource\", error);\n                    return just(QueryExecutionResult.error(error(getMessage(ErrorCode.QUERY_EXECUTION_ERROR))));\n                });\n    }", "CodeBleu_score": 56.585397119033196}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return getQueryExecutor(datasource, queryConfig, requestParams, queryVisitorContext)\n            .flatMap(queryExecutor -> buildQueryExecutionContextMono(datasource, queryConfig, queryExecutor, queryVisitorContext))\n            .flatMap(queryExecutionContext -> getOrCreateConnection(datasource, queryExecutionContext))\n            .flatMap(connection -> doExecuteQuery(queryExecutionContext, connection))\n            .doOnError(throwable -> {\n                queryExecutionContext.getQuery().getQueryConfig().setError(throwable);\n                queryExecutionContext.getQuery().getQueryConfig().setStatus(QueryStatus.FAILED);\n            })\n            .onErrorResume(throwable -> {\n                queryExecutionContext.getQuery().getQueryConfig().setError(throwable);\n                queryExecutionContext.getQuery().getQueryConfig().setStatus(QueryStatus.FAILED);\n                return Mono.just(QueryExecutionResult.builder().queryExecutionContext(queryExecutionContext).build());\n            });\n}", "CodeBleu_score": 41.64968978886107}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.just(queryConfig)\n                .map(config -> getQueryExecutor(datasource, config))\n                .map(queryExecutor -> buildQueryExecutionContextMono(queryExecutor, queryConfig, requestParams, queryVisitorContext))\n                .flatMap(mono -> mono.map(queryExecutionContext -> getOrCreateConnection(datasource, queryExecutionContext)))\n                .flatMap(mono -> mono.flatMap(connection -> doExecuteQuery(queryExecutionContext, connection, datasource, queryConfig, requestParams, queryVisitorContext)))\n                .onErrorResume(throwable -> doOnError(queryExecutionContext, throwable));\n    }", "CodeBleu_score": 35.38075404112668}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.just(datasource)\n                .map(datasource1 -> getQueryExecutor(datasource1.getType()))\n                .map(queryExecutor -> buildQueryExecutionContextMono(queryExecutor, datasource, queryConfig, requestParams, queryVisitorContext))\n                .flatMap(queryExecutionContextMono -> queryExecutionContextMono\n                        .flatMap(queryExecutionContext -> getOrCreateConnection(queryExecutionContext)\n                                .flatMap(connection -> doExecuteQuery(queryExecutionContext, connection))\n                                .doOnError(error -> queryExecutionContext.closeConnection())\n                                .doOnSuccess(queryExecutionResult -> queryExecutionContext.closeConnection())\n                        )\n                );\n    }", "CodeBleu_score": 37.77829637628287}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        String valueStr = getLeft(timeoutStr);\n        String unitStr = getRight(timeoutStr);\n        if (StringUtils.isBlank(valueStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        double value;\n        try {\n            value = Double.parseDouble(valueStr);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid query timeout value: \" + valueStr);\n        }\n        if (value <= 0) {\n            throw new IllegalArgumentException(\"Query timeout must be positive: \" + value);\n        }\n        if (unitStr.equals(\"ms\")) {\n            return (int) value;\n        }\n        int ms = convertToMs(value, unitStr);\n        if (ms > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Query timeout must be less than or equal to \" + MAX_QUERY_TIMEOUT_MS + \" ms: \" + ms);\n        }\n        return ms;\n    }", "CodeBleu_score": 37.79145646282879}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n\n        // Extract numeric value and unit from string\n        String valueStr = StringUtils.getLeft(timeoutStr, StringUtils.indexOfAny(timeoutStr, 'M', 'm', 'S', 's'));\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getKey();\n        int unitIndex = unitInfo.getValue();\n\n        // Convert value to milliseconds\n        double value;\n        try {\n            value = Double.parseDouble(valueStr);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + valueStr);\n        }\n        int ms = convertToMs(value, unit);\n\n        // Ensure value does not exceed maximum allowed timeout\n        if (ms > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed value: \" + ms);\n        }\n\n        // Return timeout in milliseconds\n        return ms;\n    }", "CodeBleu_score": 52.792603500554456}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n        String valueStr = timeoutStr.substring(0, unitIndex);\n        double value;\n        try {\n            value = Double.parseDouble(valueStr);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Timeout value \" + timeoutMs + \"ms exceeds the maximum allowed value \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 61.539907783229154}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return getLiveQueries(application.getId())\n                .flatMap(liveQueries -> {\n                    if (liveQueries.isEmpty()) {\n                        return Mono.error(new OpenblocksError(ErrorType.BAD_REQUEST, \"No queries found in this application.\"));\n                    }\n\n                    List<String> datasourceIds = liveQueries.stream()\n                            .map(LiveQuery::getDatasourceId)\n                            .collect(Collectors.toList());\n\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                    .map(copiedDatasourceId -> new Pair<>(datasourceId, copiedDatasourceId)))\n                            .collectList();\n                });\n    }", "CodeBleu_score": 53.114794969093616}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        // Get the live queries from the application\n        List<LiveQuery> liveQueries = application.getLiveQueries();\n        if (liveQueries.isEmpty()) {\n            return Mono.error(new ServerException(ErrorCode.NO_LIVE_QUERY_FOUND));\n        }\n\n        // Extract the datasource IDs from the live queries\n        List<String> datasourceIds = liveQueries.stream()\n                .map(LiveQuery::getDatasourceId)\n                .collect(Collectors.toList());\n\n        // Iterate over the datasource IDs, copy each datasource to the current organization, and return a list of original and copied datasource ID pairs\n        return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                        .flatMap(datasource -> {\n                            if (datasource.isSystemStatic()) {\n                                return Mono.just(datasource.getId());\n                            }\n\n                            // return new QUICK_REST_API id for legacy quick rest api\n                            if (datasource.isLegacyQuickRestApi()) {\n                                return Mono.just(Datasource.QUICK_REST_API.getId());\n                            }\n\n                            if (datasource.isLegacyOpenblocksApi()) {\n                                return Mono.just(Datasource.OPENBLOCKS_API.getId());\n                            }\n\n                            return createNewDatasourceFrom(currentOrganizationId, visitorId, datasource);\n                        }))\n                .collectList()\n                .map(copiedDatasourceIds -> {\n                    List<Pair<String, String>> originalAndCopiedDatasourceIdPairs = new ArrayList<>();\n                    for (int i = 0; i < datasourceIds.size(); i++) {\n                        originalAndCopiedDatasourceIdPairs.add(Pair.of(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n                    }\n                    return originalAndCopiedDatasourceIdPairs;\n                });\n    }", "CodeBleu_score": 43.30448650132622}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        List<LiveQuery> liveQueries = application.getLiveQueries();\n        if (liveQueries == null || liveQueries.isEmpty()) {\n            return Mono.error(new OfError(ErrorCode.BAD_REQUEST, \"No queries found in the application\"));\n        }\n        List<String> datasourceIds = liveQueries.stream().map(LiveQuery::getDatasourceId).collect(Collectors.toList());\n        List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n        return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                        .map(copiedDatasourceId -> datasourceIdPairs.add(Pair.of(datasourceId, copiedDatasourceId)))\n                )\n                .then(Mono.just(datasourceIdPairs));\n    }", "CodeBleu_score": 58.90302999615221}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 65.78451686392499}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 64.10914165325981}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(DatasourceCreationSource.LEGACY_QUICK_REST_API.getValue());\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(DatasourceCreationSource.LEGACY_OPENBLOCKS_API.getValue());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 67.77498994309293}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return upload(filePart, user)\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return remove(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 27.970840523244433}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return upload(filePart)\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return getAvatar(user.getAvatar())\n                                .flatMap(avatar -> remove(avatar.getId()))\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 30.68181167054217}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return filePart.content()\n                .flatMap(dataBuffer -> defaultIfNull(user.getAvatar(), \"\")\n                        .flatMap(avatarId -> remove(avatarId))\n                        .then(upload(dataBuffer, filePart.filename())))\n                .flatMap(newAvatar -> updateUserAvatar(newAvatar, user.getId()));\n    }", "CodeBleu_score": 24.889964211677743}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n\n    if (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n        String password = (String) authUser.getAuthContext().get(\"password\");\n        user.setPassword(encryptionService.encryptPassword(password));\n    }\n\n    establishUserConnections(authUser, user);\n    user.setIsNewUser(true);\n\n    return create(user);\n}", "CodeBleu_score": 46.32152487305669}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(authUser)\n            .map(this::createUserFromAuthUser)\n            .map(user -> {\n                user.setState(UserState.ACTIVE);\n                user.setIsEnabled(true);\n                user.setTpAvatarLink(authUser.getAvatar());\n                if (authUser.getSource() == AuthSource.EMAIL) {\n                    if (authUser.getAuthContext().containsKey(\"password\")) {\n                        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\")));\n                    }\n                }\n                return user;\n            })\n            .map(this::establishUserConnections)\n            .map(user -> {\n                user.setIsNewUser(true);\n                return user;\n            })\n            .flatMap(this::create);\n}", "CodeBleu_score": 37.33951041866036}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n\n    if (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n        String password = (String) authUser.getAuthContext().get(\"password\");\n        user.setPassword(encryptionService.encryptPassword(password));\n    }\n\n    user.setConnections(establishUserConnections(authUser));\n    user.setIsNewUser(true);\n\n    return create(user);\n}", "CodeBleu_score": 46.96742565420943}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(new Connection<>(ConnectionData.builder()\n            .source(new ConnectionSource(ConnectionSource.EMAIL, email))\n            .rawId(email)\n            .build()))\n            .flatMap(connection -> {\n                user.getConnections().add(connection);\n                return userRepository.save(user);\n            })\n            .map(savedUser -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateEmailException(email)));\n}", "CodeBleu_score": 32.24651410149868}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return connectionRepository.addConnection(new ConnectionData(email, \"email\", null, null, null, null, null, null, null))\n            .doOnSuccess(connection -> {\n                user.addConnection(connection);\n                userRepository.save(user);\n            })\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateEmailException(\"Duplicate email: \" + email)));\n}", "CodeBleu_score": 21.0409917158729}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    ConnectionData connectionData = new ConnectionData(\"email\", email, null, null, null, null, null, null, null);\n    Connection<?> connection = new Connection<>(connectionData, null, null, null);\n    return connectionRepository.add(connection)\n            .then(connectionRepository.createConnectionRepository(connection.getKey().getProviderId()))\n            .then(connectionRepository.update(connection))\n            .then(userConnectionRepository.add(user.getId(), connection.getKey()))\n            .then(userRepository.update(user))\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateEmailException(\"Duplicate email: \" + email)))\n            .thenReturn(true);\n}", "CodeBleu_score": 36.52741520774064}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (!matchPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 26.940685994424236}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (isBlank(oldPassword)) {\n                    return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.OLD_PASSWORD));\n                }\n\n                if (!matchPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.OLD_PASSWORD));\n                }\n\n                if (isBlank(newPassword)) {\n                    return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.NEW_PASSWORD));\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user).thenReturn(true);\n            });\n}", "CodeBleu_score": 44.43262067153415}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .map(user -> {\n                if (!encryptionService.matchPassword(oldPassword, user.getPassword())) {\n                    throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD);\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 32.210282927171}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return repository.findByOrgId(orgMember.getOrgId())\n                    .filter(group -> !group.isAllUsersGroup())\n                    .map(group -> ImmutableMap.of(\n                            \"id\", group.getId(),\n                            \"name\", group.getName().get(locale)\n                    ))\n                    .collectList();\n        } else {\n            if (withoutDynamicGroups) {\n                return repository.findByOrgId(orgMember.getOrgId())\n                        .filter(group -> !group.isAllUsersGroup())\n                        .filter(group -> !group.isDynamic())\n                        .map(group -> ImmutableMap.of(\n                                \"id\", group.getId(),\n                                \"name\", group.getName().get(locale)\n                        ))\n                        .collectList();\n            } else {\n                return repository.findByOrgId(orgMember.getOrgId())\n                        .filter(group -> !group.isAllUsersGroup())\n                        .flatMap(group -> {\n                            if (group.isDynamic()) {\n                                return group.getDynamicGroupRule().getUserGroupIds(userId)\n                                        .flatMap(userGroupIds -> {\n                                            if (userGroupIds.isEmpty()) {\n                                                return Mono.empty();\n                                            } else {\n                                                return repository.findByIdIn(userGroupIds)\n                                                        .map(it -> ImmutableMap.of(\n                                                                \"id\", it.getId(),\n                                                                \"name\", it.getName().get(locale)\n                                                        ));\n                                            }\n                                        });\n                            } else {\n                                return Mono.just(ImmutableMap.of(\n                                        \"id\", group.getId(),\n                                        \"name\", group.getName().get(locale)\n                                ));\n                            }\n                        })\n                        .collectList();\n            }\n        }\n    }", "CodeBleu_score": 29.357698491390583}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return Mono.just(orgMember.isAdmin())\n                .flatMapMany(isAdmin -> isAdmin ? getAllGroupsInOrg(orgMember.getOrgId()) : getUserGroupsInOrg(userId, orgMember.getOrgId()))\n                .filter(group -> !isAllUsersGroup(group.getId()))\n                .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n                .map(group -> Map.of(\n                        \"id\", group.getId(),\n                        \"name\", group.getName().getLocalized(locale)\n                ))\n                .collectList();\n    }", "CodeBleu_score": 27.539970202008373}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getUserGroupIdsInOrg(userId, orgMember.getOrgId(), withoutDynamicGroups)\n                .flatMapMany(groupIds -> getByIds(groupIds))\n                .filter(group -> !isAllUsersGroup(group))\n                .map(group -> {\n                    Map<String, String> groupMap = new HashMap<>();\n                    groupMap.put(\"id\", group.getId());\n                    groupMap.put(\"name\", getName(group, locale));\n                    return groupMap;\n                })\n                .collectList();\n    }", "CodeBleu_score": 28.851546067021093}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.just(UserStatus.builder().id(userId).hasShowNewUserGuidance(true).build())\n            .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus, UserStatus.class));\n}", "CodeBleu_score": 33.014205843173315}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 33.026124405823765}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.just(new UserStatus(userId, true))\n            .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus, UserStatus.class))\n            .map(UpdateResult::wasAcknowledged);\n}", "CodeBleu_score": 21.377897793965875}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg := rungroup.New(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p.manager) {\n\t\t\tg.Enqueue(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 37.15280890480409}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tg := rungroup.New(c.options.clearMatchingConcurrency)\n\tpartitions := c.partitions.Range(func(k string, p PartitionManager) bool {\n\t\treturn predicatePartition(k, p)\n\t})\n\tfor _, p := range partitions {\n\t\tg.Enqueue(func() {\n\t\t\tp.clearMatching(predicateValue)\n\t\t})\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 42.18649558044317}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tg := rungroup.New(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\tg.Enqueue(func(ctx context.Context) error {\n\t\t\t\treturn p.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 39.049643075011566}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Invalid input: numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) / averageWeightPerPartition))\n}", "CodeBleu_score": 53.79007426310783}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t    if numPartitions <= 0 {\n        panic(\"Number of partitions must be greater than zero\")\n    }\n    if totalWeightQuantity <= 0 {\n        panic(\"Total weight quantity must be greater than zero\")\n    }\n    avgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n    return int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 60.35109577906799}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"numPartitions must be greater than 0\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"totalWeightQuantity must be greater than 0\")\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 66.95905099450307}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t        Map<String, Object> map = new HashMap<>();\n        ConnectionMetadata metadata = getConnectionMetadata();\n        if (metadata != null) {\n            map.put(\"database.product.name\", metadata.getDatabaseProductName());\n            map.put(\"database.version\", metadata.getDatabaseVersion());\n        }\n        return map;\n    }", "CodeBleu_score": 45.247836939191174}, {"code": "public Map<String, Object> contributorMap(){\n\t        Map<String, Object> contributorMap = new HashMap<>();\n\n        ConnectionMetadata metadata = this.connectionFactory.getMetadata();\n        if (metadata != null) {\n            contributorMap.put(\"database\", metadata.getDatabaseProductName());\n            contributorMap.put(\"version\", metadata.getDatabaseVersion());\n        }\n\n        return contributorMap;\n    }", "CodeBleu_score": 44.03100066946105}, {"code": "public Map<String, Object> contributorMap(){\n\t        return getConnectionMetadata().map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            if (metadata != null) {\n                map.put(\"database\", metadata.getDatabaseProductName());\n                map.put(\"version\", metadata.getDatabaseVersion());\n            }\n            return map;\n        }).block();\n    }", "CodeBleu_score": 42.44919625791722}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    def userSettings = configMap.get(\"user\")\n    if (userSettings == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSettings.get(\"allowRegistration\", true))\n        info.setMustVerifyEmailOnRegistration(userSettings.get(\"mustVerifyEmailOnRegistration\", false))\n    }\n}", "CodeBleu_score": 36.31640056312274}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting userSetting = configMap.getUserSetting()\n    if (userSetting == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSetting.getAllowRegistration())\n        info.setMustVerifyEmailOnRegistration(userSetting.getMustVerifyEmailOnRegistration())\n    }\n}", "CodeBleu_score": 44.827762131900016}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSettings userSettings = configMap.getUserSettings()\n    if (userSettings == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSettings.getAllowRegistration())\n        info.setMustVerifyEmailOnRegistration(userSettings.getMustVerifyEmailOnRegistration())\n    }\n}", "CodeBleu_score": 40.82355911187444}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"Restart Thread Group\");\n    Thread restartThread = new Thread(threadGroup, new Runnable() {\n        public void run() {\n            try {\n                Thread.sleep(1000);\n                System.exit(0);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }, \"Restart Thread\");\n    restartThread.setDaemon(false);\n    restartThread.setContextClassLoader(getClass().getClassLoader());\n    restartThread.start();\n    return \"Restart has begun\";\n}", "CodeBleu_score": 46.972507648804715}, {"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"restart-thread-group\");\n    Thread t = new Thread(tg, this, \"restart-thread\");\n    t.setDaemon(false);\n    t.setContextClassLoader(getClassLoader());\n    t.start();\n    return \"Restarting application\";\n}", "CodeBleu_score": 46.66360604955037}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"Restart thread group\");\n    threadGroup.setDaemon(false);\n    Thread thread = new Thread(threadGroup, \"Restart thread\", new Runnable() {\n        public void run() {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            Thread.currentThread().setContextClassLoader(getClassLoader());\n            start();\n        }\n    });\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 43.88918344945327}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t     configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n     configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.98168117420023}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper()));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper()));\n }", "CodeBleu_score": 52.51777424218924}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n}", "CodeBleu_score": 93.44420714478667}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        var indexLocation = getConsole().getIndexLocation();\n        return route(\n            GET(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(negate(method(HttpMethod.GET))\n                    .and(negate(path(\"/console/assets/**\")))),\n            request -> serveIndex(indexLocation)\n        );\n    }", "CodeBleu_score": 35.48460879365436}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return route(\n            GET(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(negate(method(HttpMethod.GET)))\n                .and(negate(path(\"/console/assets/**\"))),\n            request -> serveIndex(getConsole().getIndexLocation()));\n    }", "CodeBleu_score": 30.533585904639654}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return route(\n            GET(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(negate(method(HttpMethod.GET)))\n                .and(negate(path(\"/console/assets/**\"))),\n            request -> serveIndex(consoleIndexLocation)\n        );\n    }", "CodeBleu_score": 26.998917693744612}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.path(\"/uc/assets/**\").negate())\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.webSocket())),\n            request -> serveIndex(ucLocation));\n    }", "CodeBleu_score": 27.617109060907612}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.pathPattern(\"/uc/**\"))\n                .and(RequestPredicates.pathPattern(\"/uc/assets/**\").negate())\n                .and(RequestPredicates.not(RequestPredicates.webSocket())),\n            request -> {\n                var ucLocation = getUcLocation();\n                return serveIndex(ucLocation + \"/index.html\");\n            });\n    }", "CodeBleu_score": 26.42336703695759}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return route(\n            GET(\"/uc/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(negate(WebSocketRequestPredicate.requestType()))\n                .and(path(\"/uc/**\")\n                    .and(negate(path(\"/uc/assets/**\")))),\n            req -> serveIndex(getUc().getIndexLocation())\n        );\n    }", "CodeBleu_score": 32.10981303341172}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    new MapReactiveSessionRepository(new ConcurrentHashMap<>(100)) {\n        @Override\n        protected void onInitialize(MapSession session) {\n            super.onInitialize(session)\n            setDefaultMaxInactiveInterval(session, serverProperties.session.timeout)\n        }\n    }\n}", "CodeBleu_score": 19.902567472918253}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    @Bean\n    ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n        ReactiveMapSessionRepository repository = new ReactiveMapSessionRepository(new ConcurrentHashMap<>());\n        repository.setDefaultMaxInactiveInterval(Duration.ofSeconds(sessionProperties.getRedis().getDefaultMaxInactiveInterval()));\n        return repository;\n    }\n}", "CodeBleu_score": 39.72812790062673}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    MapSessionRepository repository = new MapSessionRepository(new ConcurrentHashMap<>());\n    repository.setDefaultMaxInactiveInterval(sessionProperties.getRedis().getTimeout())\n    return repository\n}", "CodeBleu_score": 29.69005810318065}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    if (haloProperties.getSecurity().isTwoFactorAuth()) {\n        userDetailService.setTwoFactorAuthEnabled(true);\n    } else {\n        userDetailService.setTwoFactorAuthEnabled(false);\n    }\n    return userDetailService;\n}", "CodeBleu_score": 49.414855593334}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService();\n    userDetailService.setUserService(userService);\n    userDetailService.setRoleService(roleService);\n    userDetailService.setSecurityConfig(haloProperties.getSecurity());\n    userDetailService.setTwoFactorAuth(haloProperties.getAuth().getTwoFactorAuth());\n    userDetailService.setTwoFactorAuthDisabled(!haloProperties.getAuth().getTwoFactorAuth().getEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 39.475304301957756}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthEnabled(haloProperties.getSecurity().isTwoFactorAuth());\n    return userDetailService;\n}", "CodeBleu_score": 50.55446508242335}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.email != null ? this.email : \"\");\n    commentOwner.setDisplayName(this.displayName);\n    commentOwner.setAnnotations(new ArrayList<>());\n    commentOwner.getAnnotations().add(new Comment.CommentOwner.Annotation().setType(\"avatar\").setValue(this.avatar));\n    commentOwner.getAnnotations().add(new Comment.CommentOwner.Annotation().setType(\"website\").setValue(this.website));\n    return commentOwner;\n}", "CodeBleu_score": 46.62877949255403}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(this.getEmail() != null ? this.getEmail() : \"\");\n    owner.setDisplayName(this.getDisplayName());\n    owner.setAnnotations(new ArrayList<>());\n    owner.getAnnotations().add(new Comment.CommentOwner.Annotation(\"avatar\", this.getAvatar()));\n    owner.getAnnotations().add(new Comment.CommentOwner.Annotation(\"website\", this.getWebsite()));\n    return owner;\n}", "CodeBleu_score": 37.05324176549114}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email != null ? email : \"\");\n    owner.setDisplayName(displayName);\n    owner.setAnnotations(new ArrayList<>());\n    owner.getAnnotations().add(new Comment.Annotation().setKey(\"avatar\").setValue(avatar));\n    owner.getAnnotations().add(new Comment.Annotation().setKey(\"website\").setValue(website));\n    return owner;\n}", "CodeBleu_score": 39.88653559062746}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == 'email') {\n        User user = User.fetch(post.getOwner().getName())\n        return user.getEmail() == commentOwner.getName()\n    }\n    return commentOwner.getName() == post.getOwner().getName()\n}", "CodeBleu_score": 32.3181424617734}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n    User user = ofy().load().type(User.class).id(post.getOwner()).now();\n    if (user == null) {\n      return false;\n    }\n    return user.getEmail().equals(commentOwner.getName());\n  }\n  return post.getOwner().equals(commentOwner.getName());\n}", "CodeBleu_score": 42.774029976452965}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n    User user = User.fetch(post.getOwner().getName());\n    return user.getEmail().equals(commentOwner.getName());\n  } else {\n    return post.getOwner().getName().equals(commentOwner.getName());\n  }\n}", "CodeBleu_score": 36.34772369025225}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t        ListOptions listOptions = new ListOptions();\n        String fieldQuery = getFieldSelector();\n        if (StringUtils.isNotBlank(fieldQuery)) {\n            fieldQuery = \"spec.\" + fieldQuery;\n        }\n        if (StringUtils.isNotBlank(getKeyword())) {\n            if (StringUtils.isNotBlank(fieldQuery)) {\n                fieldQuery += \",\";\n            }\n            fieldQuery += \"spec.keyword=\" + getKeyword();\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            if (StringUtils.isNotBlank(fieldQuery)) {\n                fieldQuery += \",\";\n            }\n            fieldQuery += \"spec.ownerName=\" + getOwnerName();\n        }\n        if (StringUtils.isNotBlank(getOwnerKind())) {\n            if (StringUtils.isNotBlank(fieldQuery)) {\n                fieldQuery += \",\";\n            }\n            fieldQuery += \"spec.ownerKind=\" + getOwnerKind();\n        }\n        listOptions.setFieldSelector(fieldQuery);\n        return listOptions;\n    }", "CodeBleu_score": 31.272231065917417}, {"code": "public ListOptions toListOptions(){\n\t        ListOptions listOptions = new ListOptions();\n        String fieldQuery = getFieldSelector();\n        if (StringUtils.isNotBlank(fieldQuery)) {\n            listOptions.setFieldSelector(fieldQuery);\n        }\n        String keyword = getKeyword();\n        if (StringUtils.isNotBlank(keyword)) {\n            listOptions.setLabelSelector(getLabelSelector());\n        }\n        String ownerName = getOwnerName();\n        if (StringUtils.isNotBlank(ownerName)) {\n            listOptions.setFieldSelector(getFieldSelector() + \",metadata.ownerReferences.name=\" + ownerName);\n        }\n        return listOptions;\n    }", "CodeBleu_score": 40.93666949380411}, {"code": "public ListOptions toListOptions(){\n\t        ListOptions listOptions = new ListOptions();\n        listOptions.setFieldSelector(getFieldSelector());\n        if (StringUtils.isNotBlank(getKeyword())) {\n            listOptions.addCondition(new Condition(\"keyword\", Condition.Type.EQUAL, getKeyword()));\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            listOptions.addCondition(new Condition(\"ownerName\", Condition.Type.EQUAL, getOwnerName()));\n        }\n        return listOptions;\n    }", "CodeBleu_score": 22.050179359758427}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> Mono.justOrEmpty(counterMap.get(name)))\n            .map(counter -> new CommentStats(counter.get()))\n            .defaultIfEmpty(new CommentStats(0));\n}", "CodeBleu_score": 38.91880965420961}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> commentCounterRepository.findById(name))\n            .map(counter -> new CommentStats(counter.getUpvote()))\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 39.9401448303205}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> counterRepository.findById(name))\n            .map(counter -> new CommentStats(counter.getCounter()))\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 39.17473694611814}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.Reason reason = new Subscription.Reason();\n    reason.setType(Subscription.Reason.ReasonType.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(new Subscription.Condition());\n    reason.getCondition().setRepliedOwner(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setReason(reason);\n\n    NotificationCenter.subscribe(subscription, new SubscriptionCallback() {\n        @Override\n        public void onSuccess() {\n            // Subscription successful\n        }\n\n        @Override\n        public void onFailure(Error error) {\n            // Subscription failed\n        }\n    });\n\n    try {\n        subscription.block();\n    } catch (InterruptedException e) {\n        // Handle interrupted exception\n    }\n}", "CodeBleu_score": 47.24491628313859}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    InterestReason reason = new InterestReason();\n    reason.setType(InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(new Condition(Condition.Operator.EQUALS, identity.name()));\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(reason);\n\n    NotificationCenter.subscribe(subscription);\n    NotificationCenter.block();\n}", "CodeBleu_score": 50.45475406751203}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason interestReason = new Subscription.InterestReason();\n    interestReason.setType(Subscription.InterestReasonType.SOMEONE_REPLIED_TO_YOU);\n    interestReason.setCondition(new Subscription.Condition());\n    interestReason.getCondition().setOwner(identity.name());\n    subscriber.setInterestReason(interestReason);\n\n    Subscription.SubscribeRequest request = Subscription.SubscribeRequest.newBuilder()\n            .setSubscriber(subscriber)\n            .build();\n\n    try {\n        Subscription.SubscribeResponse response = notificationCenter.subscribe(request);\n        response.getResult();\n    } catch (StatusRuntimeException e) {\n        // Handle error\n    }\n\n    try {\n        Subscription.BlockRequest blockRequest = Subscription.BlockRequest.newBuilder()\n                .setSubscriber(subscriber)\n                .build();\n        Subscription.BlockResponse blockResponse = notificationCenter.block(blockRequest);\n        blockResponse.getResult();\n    } catch (StatusRuntimeException e) {\n        // Handle error\n    }\n}", "CodeBleu_score": 48.70922678429839}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t        return updateCommentWithRetry(comment.getName(), c -> {\n            c.setApproved(true);\n            c.setApprovedTime(now());\n            return c;\n        });\n    }", "CodeBleu_score": 18.537228999474987}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedTime(now());\n        return c;\n    });\n}", "CodeBleu_score": 16.84588570438145}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedTime(now());\n        return c;\n    });\n}", "CodeBleu_score": 16.84588570438145}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 67.07739332696906}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 60.83286416955309}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 67.07739332696906}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->evaluate($this->getSuccessRedirectUrl());\n\n    if (filled($successRedirectUrl)) {\n        $this->redirect($successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 59.07029670158366}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->getSuccessRedirectUrl();\n\n    if (filled($successRedirectUrl)) {\n        $this->redirect($successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 52.35143204135907}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($successRedirectUrl)) {\n        $this->redirect($successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 75.07711819440168}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('filament-spatie-tags.tag_model');\n\n    collect($state)\n        ->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })\n        ->flatten()\n        ->pipe(fn (Collection $tags) => $record->tags()->sync($tags->pluck('id')));\n}", "CodeBleu_score": 66.6970445025201}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record) {\n        return;\n    }\n\n    if (!method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('filament-spatie-tags.tag_resource');\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 76.23364892071064}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('filament-spatie-tags.tag_model');\n\n    $tags = collect($state)\n        ->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })\n        ->flatten();\n\n    $record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 73.80753322620957}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to disect leaf path: %w\", err)\n\t}\n\n\tscope := fmt.Sprintf(\"space:%s\", spacePath)\n\tresource := fmt.Sprintf(\"pipeline:%s:%s\", spacePath, pipelineIdentifier)\n\n\terr = Check(ctx, authorizer, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 62.707308013428765}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to disect the repository path: %w\", err)\n\t}\n\n\tscope := fmt.Sprintf(\"spaces/%s/pipelines/%s\", spacePath, pipelineIdentifier)\n\tresource := fmt.Sprintf(\"spaces/%s/repositories/%s\", spacePath, repoName)\n\n\terr = Check(ctx, authorizer, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 61.940953413028986}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to disect leaf: %w\", err)\n\t}\n\n\tscope := fmt.Sprintf(\"space:%s/repo:%s/pipeline:%s\", spacePath, repoName, pipelineIdentifier)\n\tresource := fmt.Sprintf(\"space:%s/repo:%s\", spacePath, repoName)\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 55.86254128471862}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.DisectLeaf(space.Path)\n\tscope := fmt.Sprintf(\"spaces/%s\", parent)\n\tresource := fmt.Sprintf(\"spaces/%s/%s\", parent, name)\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 42.89531942720885}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tParent: parent,\n\t\tName:   name,\n\t\tType:   enum.Space,\n\t}\n\n\tresource := types.Resource{\n\t\tScope: scope,\n\t\tType:  enum.Space,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 69.41732389812361}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\n\tparent, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to disect space path: %w\", err)\n\t}\n\n\tscope := types.Scope{\n\t\tType:  enum.Space,\n\t\tSpace: parent,\n\t}\n\n\tresource := types.Resource{\n\t\tType: enum.Space,\n\t\tName: name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 74.74745823281538}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar obj map[string]interface{}\n\tif err := json.Unmarshal(source, &obj); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult, err := json.Marshal(obj)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(result))\n\tdecoder.DisallowUnknownFields()\n\n\tvar resultObj map[string]interface{}\n\tif err := decoder.Decode(&resultObj); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf bytes.Buffer\n\tencoder := json.NewEncoder(&buf)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(resultObj); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult = bytes.TrimSuffix(buf.Bytes(), []byte(\"\n\"))\n\treturn result, nil\n}", "CodeBleu_score": 53.41780679434647}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar m map[string]any\n\tif err := json.Unmarshal(source, &m); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal JSON: %w\", err)\n\t}\n\n\tb, err := json.Marshal(m)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to marshal JSON: %w\", err)\n\t}\n\n\treturn bytes.TrimRight(b, \"\n\"), nil\n}", "CodeBleu_score": 37.0829290167513}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar payload map[string]interface{}\n\tif err := json.NewDecoder(bytes.NewReader(source)).Decode(&payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencoded, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tencoded = bytes.TrimSuffix(encoded, []byte(\"\n\"))\n\treturn encoded, nil\n}", "CodeBleu_score": 36.72166723303592}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\thasPermission, err := c.repoStore.CheckAccess(ctx, session.UserID, repo.ID, reqPermission)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif !hasPermission {\n\t\treturn nil, usererror.Forbidden\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.7328339292394}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepoRef, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.24754346106195}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepoRef, err := apiauth.CheckRepo(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif repo == nil {\n\t\treturn nil, usererror.BadRequest(\"repository not found\")\n\t}\n\n\tif !c.authChecker.CheckRepoAccess(ctx, session, repo, reqPermission) {\n\t\treturn nil, usererror.Forbidden(\"access denied\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 57.05938164184643}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 61.787367292169236}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 62.446156573879044}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.446156573879044}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t    if self.state.attached then\n        self.state.attached_to_renderer = true\n        self.state.on_render = on_render\n        self.state.attached_to_renderer_at = os.time()\n        self:attach()\n    end\n    return self", "CodeBleu_score": 49.185252256547194}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    local buffer = self\n    local renderer = buffer.renderer\n    local state = buffer.state\n\n    if not buffer.renderer then\n        buffer.renderer = renderer\n        state.attached = true\n    end\n\n    state.on_render = on_render\n\n    return buffer", "CodeBleu_score": 59.950122734362445}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    local state = self.state\n    local renderer = state.renderer\n    if not renderer then\n        error(\"Buffer is not attached to a renderer\")\n    end\n\n    local buffer = state.buffer\n    if not buffer then\n        error(\"Buffer is not attached to a buffer\")\n    end\n\n    local screen = state.screen\n    if not screen then\n        error(\"Buffer is not attached to a screen\")\n    end\n\n    if not on_render then\n        error(\"No on_render function provided\")\n    end\n\n    state.on_render = on_render\n\n    if not state.attached then\n        renderer:attach(buffer, screen)\n        state.attached = true\n    end\n\n    return self", "CodeBleu_score": 61.615409057541925}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if not self:is_valid() then\n        return\n    end\n\n    if callback then\n        self.watcher:watch_file(self.filename, callback)\n    end", "CodeBleu_score": 25.732602668068548}, {"code": "function Buffer:watch(callback)\n\t    if not self:is_valid() then return end\n    if callback then\n        self.watcher = loop.coroutine(function()\n            self.watcher:watch_file(self.filename, callback)\n        end)\n    end", "CodeBleu_score": 35.46199333212352}, {"code": "function Buffer:watch(callback)\n\t    if self:is_valid() then\n        self.watcher:watch_file(self.filename, function()\n            if callback then\n                callback()\n            end\n        end)\n    end", "CodeBleu_score": 33.16331803473987}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    if self.hex_value then\n        return self.hex_value\n    end\n\n    local spec = self.spec\n    local attr = spec.attr\n    local hl_name = spec.hl_name\n\n    local color\n    if attr == \"fg\" then\n        color = vim.api.nvim_get_hl_by_name(hl_name, true).foreground\n    else\n        color = vim.api.nvim_get_hl_by_name(hl_name, true).background\n    end\n\n    if color == nil then\n        return nil\n    end\n\n    local hex_value = string.format(\"#%06x\", color)\n    self.hex_value = hex_value\n\n    return hex_value", "CodeBleu_score": 51.01151159902221}, {"code": "function Color:to_hex()\n\t    if self.hex then\n        return self.hex\n    end\n    local spec = self.spec\n    local attr = spec.attr\n    if not attr then\n        return nil\n    end\n    local hl_name = (attr == \"fg\" and \"Normal\" or \"NormalNC\")\n    local hl = vim.api.nvim_get_hl_by_name(hl_name, true)\n    if not hl then\n        return nil\n    end\n    local hex = hl.foreground\n    if attr == \"bg\" then\n        hex = hl.background\n    end\n    if hex then\n        hex = hex:gsub(\"#\", \"\")\n        self.hex = hex\n    end\n    return hex", "CodeBleu_score": 55.42643568603371}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n  local spec = self.spec\n  local attr = self.attr\n  local group = self.group\n  local hl_group = attr == \"fg\" and \"NormalFloat\" or \"NormalNC\"\n  local hex = vim.api.nvim_get_hl_by_name(hl_group, true)\n  if hex then\n    hex = hex.foreground\n  else\n    hex = vim.api.nvim_get_hl_by_name(group, true)\n    if hex then\n      hex = hex.foreground\n    end\n  end\n  if hex then\n    self.hex = hex\n  end\n  return hex", "CodeBleu_score": 53.19108234905643}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    for i, line in ipairs(lines) do\n        local start_col, end_col = string.find(line, pattern)\n        if start_col and end_col then\n            buffer:add_highlight(hl, i - 1, start_col - 1, end_col)\n        end\n    end\n    return self", "CodeBleu_score": 47.21898028317922}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    local row = 0\n    for _, line in ipairs(lines) do\n        local col_top = 0\n        local col_end = 0\n        while true do\n            local start, finish = string.find(line, pattern, col_top, true)\n            if start then\n                col_top = start\n                col_end = finish\n                buffer:add_highlight(hl, row, col_top, col_end)\n                col_top = col_end\n            else\n                break\n            end\n        end\n        row = row + 1\n    end\n    return self", "CodeBleu_score": 54.234271632595835}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local line_num = 0\n\n  for _, line in ipairs(lines) do\n    local start_index = 0\n    local match\n\n    while true do\n      match = string.find(line, pattern, start_index, true)\n      if match then\n        local col_start, col_end = match - 1, match + #pattern - 1\n        buffer:add_highlight(hl, line_num, col_start, col_end)\n        start_index = col_end + 1\n      else\n        break\n      end\n    end\n\n    line_num = line_num + 1\n  end\n\n  return self", "CodeBleu_score": 53.49420549615742}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = row .. \":\" .. col\n    vim.api.nvim_buf_set_extmark(buffer, Namespace.ns, id, row, col, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_lines = { { text, hl } },\n        virt_lines_above = true,\n        virt_lines_below = true,\n        ephemeral = true,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 61.85019392553151}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = vim.api.nvim_buf_get_mark(buffer, \"<\")\n  local lnum = id[1]\n  local coln = id[2]\n  local id = lnum .. \":\" .. coln\n  local ns_id = vim.api.nvim_create_namespace(\"transpose_virtual_text\")\n  vim.api.nvim_buf_set_extmark(buffer, ns_id, id, row, col, {\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    virt_lines = true,\n    virt_lines_above = true,\n    virt_lines_below = true,\n    priority = priority,\n  })\n  return id", "CodeBleu_score": 56.35710321784957}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = vim.api.nvim_buf_get_mark(buffer, row, col)\n    local unique_id = string.format('%s:%s:%s', id, row, col)\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, unique_id, row, col, {\n        virt_text = {\n            { text, hl },\n        },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n    return unique_id", "CodeBleu_score": 58.35466262697487}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t  local lines = {}\n  local line = \"\"\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == \"", "CodeBleu_score": 26.963364902010145}, {"code": "function Spawn:parse_result(output, callback)\n\t    local line = \"\"\n    for _, char in pairs(output) do\n        if char == \"", "CodeBleu_score": 9.12921327710157}, {"code": "function Spawn:parse_result(output, callback)\n\t  local lines = {}\n  local line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 26.999334529213648}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if not self.watchers[path] then\n        local watcher = vim.loop.new_fs_event()\n        watcher:start(path, {}, function(err, filename, status, status_item)\n            if err then\n                error(err)\n            end\n            handler(filename, status, status_item)\n        end)\n        self.watchers[path] = watcher\n    end\n    return self.watchers[path]", "CodeBleu_score": 42.982223539563904}, {"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, vim.schedule_wrap(function(err, name, flags)\n        if err then\n            return\n        end\n\n        handler(path, name, flags)\n    end))\n\n    self.watchers[path] = watcher\n\n    return watcher", "CodeBleu_score": 46.22794052750089}, {"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = self.watchers[path]\n    if watcher then\n        return watcher\n    end\n\n    watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, vim.schedule_wrap(handler))\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 50.9838628592001}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t    local buf_lines = self:get_lines()\n    local hunks = self.git_object:live_hunks(buf_lines)\n    if hunks == nil then\n        return hunks, self.git_object.error\n    end\n\n    local signs_setting = signs_setting:get()\n    local sign_ns_id = self.namespace:get_sign_ns_id()\n\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk.lines) do\n            local sign_priority = signs_setting.priority[hunk.type]\n            local sign_text = signs_setting.text[hunk.type]\n            local sign_hl_group = signs_setting.hl_group[hunk.type]\n            vim.fn.sign_place(sign_ns_id, sign_priority, sign_hl_group, line, line, {text = sign_text})\n        end\n    end\n\n    self.signs = vim.fn.sign_getplaced(sign_ns_id, {buffer = self.bufnr})\n    return hunks", "CodeBleu_score": 49.041970724677206}, {"code": "function GitBuffer:live_hunks()\n\t    local git_object = self.git_object\n    local signs_setting = signs_setting:get()\n    local lines = self:get_lines()\n    local ns_id = self.namespace:get_sign_ns_id()\n    local hunks, err = git_object:live_hunks(lines)\n    if err then\n        return nil, err\n    end\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk.lines) do\n            local sign_type = line.type\n            local priority = nil\n            if sign_type == \"added\" then\n                priority = 1\n            elseif sign_type == \"modified\" then\n                priority = 2\n            elseif sign_type == \"deleted\" then\n                priority = 3\n            end\n            if priority then\n                local sign = signs_setting:get_sign(sign_type)\n                vim.fn.sign_place(ns_id, sign.group, sign.name, line.lnum, line.lnum, { priority = priority })\n            end\n        end\n    end\n    vim.fn.sign_define(ns_id, {\n        name = \"GitBlame\",\n        texthl = \"GitBlame\",\n        text = \"\u2588\",\n        numhl = \"\"\n    })\n    vim.fn.sign_define(ns_id, {\n        name = \"GitGutterAdd\",\n        texthl = \"GitGutterAdd\",\n        text = \"\u2502\",\n        numhl = \"\"\n    })\n    vim.fn.sign_define(ns_id, {\n        name = \"GitGutterChange\",\n        texthl = \"GitGutterChange\",\n        text = \"\u2502\",\n        numhl = \"\"\n    })\n    vim.fn.sign_define(ns_id, {\n        name = \"GitGutterDelete\",\n        texthl = \"GitGutterDelete\",\n        text = \"~\",\n        numhl = \"\"\n    })\n    vim.fn.sign_define(ns_id, {\n        name = \"GitGutterChangeDelete\",\n", "CodeBleu_score": 42.56940663120765}, {"code": "function GitBuffer:live_hunks()\n\t    local git_object = self.git_object\n    local signs_setting = signs_setting:get()\n    local lines = self:get_lines()\n    local ns_id = self.namespace:get_sign_ns_id()\n\n    -- Calculate the hunks using the git object\n    local hunks, err = git_object:live_hunks(lines)\n    if err then\n        return nil, err\n    end\n\n    -- Set up signs for each line in the hunks\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk.lines) do\n            local type = hunk.type\n            local priority = hunk.priority\n\n            -- Check if the line is already marked\n            if line.marked then\n                -- If the line is already marked, check if it has a higher priority\n                if priority > line.priority then\n                    -- If the line has a higher priority, update the sign\n                    line.sign.type = type\n                    line.sign.priority = priority\n                    line.sign.ns_id = ns_id\n                end\n            else\n                -- If the line is not marked, create a new sign\n                line.sign = {\n                    type = type,\n                    priority = priority,\n                    ns_id = ns_id,\n                }\n                line.marked = true\n            end\n        end\n    end\n\n    -- Update the buffer's signs\n    self.namespace:update_signs(hunks)\n\n    return hunks", "CodeBleu_score": 48.43577143245253}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpfile = fs.tmpname()\n\n  fs.write_file(tmpfile, patch)\n\n  local _, err = self:git('apply', '--cached', '--unidiff-zero', tmpfile)\n\n  fs.remove_file(tmpfile)\n\n  if err then\n    return err\n  end\n\n  return self", "CodeBleu_score": 49.61900375362473}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmp_file = fs.tmpname()\n  fs.write_file(tmp_file, patch)\n  local _, err = os.execute(string.format('git apply --cached %s', tmp_file))\n  fs.remove_file(tmp_file)\n  if err then\n    return nil, err\n  end\n  return self", "CodeBleu_score": 46.34147244611384}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local tmp_file = fs.tmpname()\n    local patch_content = patch.lines\n    fs.write_file(tmp_file, patch_content)\n    local result, err = git.run({'apply', '--cached', '--ignore-whitespace', tmp_file}, self.repo_path)\n    fs.remove_file(tmp_file)\n    if err then\n        return nil, err\n    end\n    return result", "CodeBleu_score": 51.07136216923429}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t        OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n        request.addHeader(OAuthConstants.HEADER, getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n        request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n        request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n        request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\n        Response response = send(request);\n        return extract(response.getBody());\n    }", "CodeBleu_score": 47.30594926843996}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    addHttpBasicAuthHeader(request);\n    addBodyParameter(request, OAuthConstants.TOKEN, requestToken.getToken());\n    addBodyParameter(request, OAuthConstants.VERIFIER, verifier.getValue());\n    return sendRequest(request);\n}", "CodeBleu_score": 46.94324444364358}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    addHeader(request, \"Authorization\", getHttpBasicAuthHeaderValue());\n    addBodyParameter(request, \"oauth_token\", requestToken.getToken());\n    addBodyParameter(request, \"oauth_verifier\", verifier.getValue());\n    Response response = send(request);\n    return extract(response);\n}", "CodeBleu_score": 49.29262744998165}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicScheme = new BasicScheme();\n    authCache.put(host, basicScheme);\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 69.08097362046564}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Create a credentials provider with the specified credentials\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n\n    // Add the host to an authentication cache using the Basic authentication scheme\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n\n    // Assign the credentials provider and authentication cache to the context\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n\n    // Log the action of adding the host to the auth cache\n    log.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 69.51320460361754}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Create a credential provider with the specified credentials\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), credentials);\n\n    // Add the host to the authentication cache using the Basic authentication scheme\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n\n    // Assign the credentials provider and authentication cache to the context\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n\n    // Log the action of adding the host to the auth cache\n    log.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 71.65281963095187}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins j = Jenkins.get();\n    AvatarCache cache = j.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not installed\");\n    }\n    String key = cache.encode(source);\n    cache.seed(source);\n    try {\n        return j.rootUrl + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 48.61938356420906}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins j = Jenkins.get();\n    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not installed\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.seed(key, source);\n    try {\n        return j.getRootUrl() + cache.getUrlName() + '/' + URLEncoder.encode(key, \"UTF-8\") + '/' + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new Error(e);\n    }\n}", "CodeBleu_score": 43.392865963866434}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    CacheEntry entry = getCacheEntry(getCacheKey(source), source);\n    if (entry == null) {\n        throw new IllegalStateException(\"Cache entry is null\");\n    }\n    seedCache(entry);\n    try {\n        return Jenkins.get().getRootUrl() + \"avatar/\" + URLEncoder.encode(entry.key, \"UTF-8\") + \"?s=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new Error(e);\n    }\n}", "CodeBleu_score": 31.770616110807996}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image.getWidth() > MAX_SIZE || image.getHeight() > MAX_SIZE) {\n        image = scaleImage(image, MAX_SIZE);\n    }\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 58.30301202350914}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.source = source;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    } else {\n        this.image = image;\n    }\n}", "CodeBleu_score": 61.95454409776458}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    if (image.getWidth() > MAX_SIZE || image.getHeight() > MAX_SIZE) {\n        image = scaleImage(image, MAX_SIZE);\n    }\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 57.6619863824835}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            cacheEntry = future.get();\n            lastModified = cacheEntry.getLastModified();\n            image = cacheEntry.getImage();\n            future = null;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 50.45507041055386}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false\n    }\n    if (future.isDone) {\n        try {\n            entry = future.get()\n            image = entry.image\n            lastModified = entry.lastModified\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace()\n        }\n        future = null\n    }\n    return true\n}", "CodeBleu_score": 37.83534585211493}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false\n    }\n    if (future.isDone) {\n        try {\n            entry = future.get()\n            image = entry.image\n            lastModified = entry.lastModified\n        } catch (InterruptedException | ExecutionException e) {\n            return true\n        }\n        future = null\n    }\n    return true\n}", "CodeBleu_score": 34.819231973964136}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t        if (node instanceof AbstractProject) {\n            AbstractProject<?, ?> project = (AbstractProject<?, ?>) node;\n            if (project.hasPermission(Item.READ)) {\n                rsp.setContentType(\"image/png\");\n                rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n                rsp.setHeader(\"Pragma\", \"no-cache\");\n                rsp.setHeader(\"Expires\", \"0\");\n                rsp.setHeader(\"X-Accel-Buffering\", \"no\");\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                ImageIO.write(ImageGenerator.generateImage(project), \"png\", os);\n                if (req.getParameter(\"flush\") != null) {\n                    rsp.flushBuffer();\n                }\n                rsp.getOutputStream().write(os.toByteArray());\n            }\n        }\n    }", "CodeBleu_score": 42.95701123379765}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t", "CodeBleu_score": 9.478070530273596}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t        if (node instanceof Image) {\n            Image image = (Image) node;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            image.write(baos);\n            if (req.getParameter(\"flush\") != null) {\n                baos.flush();\n            }\n            rsp.setHeader(\"Cache-Control\", \"no-cache, no-store\");\n            rsp.setHeader(\"Pragma\", \"no-cache\");\n            rsp.setHeader(\"Expires\", \"0\");\n            rsp.setContentType(\"image/png\");\n            rsp.getOutputStream().write(baos.toByteArray());\n        } else {\n            rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        }\n    }", "CodeBleu_score": 47.58784601246631}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        setClientProxyParams(API_HOST, builder);\n        if (enableCache) {\n            setExpireDuration(builder, teamCacheDuration, repositoriesCacheDuration);\n            setConnectionManagerShared(builder);\n        }\n        setKeepAliveStrategy(builder);\n        setRetryHandler(builder);\n        setConnectionManager(builder);\n        httpClient = builder.build();\n        if (authenticator != null) {\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n    }", "CodeBleu_score": 51.31163783309696}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        setClientProxyParams(BITBUCKET_CLOUD_API_HOST, builder);\n\n        if (enableCache) {\n            setExpireDuration(teamCacheDuration, repositoriesCacheDuration);\n            setConnectionManagerShared(builder);\n        }\n\n        setKeepAliveStrategy(builder);\n        setRetryHandler(builder);\n\n        if (authenticator != null) {\n            setConnectionManager(builder);\n            setClientProxyParams(BITBUCKET_CLOUD_API_HOST, builder);\n            authenticator.configureContext(context, BITBUCKET_CLOUD_API_HOST);\n        }\n\n        client = builder.build();\n    }", "CodeBleu_score": 49.19054952669792}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        if (enableCache) {\n            cache = new BitbucketCloudApiCache(teamCacheDuration, repositoriesCacheDuration);\n        }\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        setConnectionManager(builder);\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\n        if (authenticator != null) {\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, new HttpHost(API_HOST));\n            builder.setDefaultCredentialsProvider(context.getCredentialsProvider());\n            builder.setDefaultRequestConfig(context.getRequestConfig());\n        }\n\n        setClientProxyParams(API_HOST, builder);\n\n        httpClient = builder.build();\n    }", "CodeBleu_score": 51.104143037481954}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    try {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n        if (sourceBranch != null) {\n            setCommitClosure(sourceBranch, new CommitClosure(sourceBranch.getRawNode()));\n        }\n        BitbucketCloudBranch destBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n        if (destBranch != null) {\n            setCommitClosure(destBranch, new CommitClosure(destBranch.getRawNode()));\n        }\n    } catch (IOException | InterruptedException e) {\n        LOGGER.error(\"Failed to setup commit closure for PR branch\", e);\n    }\n}", "CodeBleu_score": 47.300408836678116}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    try {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n        if (sourceBranch != null) {\n            setCommitClosure(sourceBranch, pullRequest.getSource().getBranch().getCommit());\n        }\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n        if (destinationBranch != null) {\n            setCommitClosure(destinationBranch, pullRequest.getDestination().getBranch().getCommit());\n        }\n    } catch (IOException | InterruptedException e) {\n        LOGGER.error(\"Error setting up commit closures for pull request {}\", pullRequest.getId(), e);\n    }\n}", "CodeBleu_score": 43.24414211555756}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = null;\n    try {\n        sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.WARNING, \"Error getting source branch for pull request \" + pullRequest.getId(), e);\n    }\n    if (sourceBranch != null) {\n        setCommitClosure(sourceBranch, new CommitClosure(sourceBranch.getRawNode()));\n    }\n    BitbucketCloudBranch destinationBranch = null;\n    try {\n        destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.WARNING, \"Error getting destination branch for pull request \" + pullRequest.getId(), e);\n    }\n    if (destinationBranch != null) {\n        setCommitClosure(destinationBranch, new CommitClosure(destinationBranch.getRawNode()));\n    }\n}", "CodeBleu_score": 42.81328806217346}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration configuration = JenkinsLocationConfiguration.get();\n    if (configuration == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is not set\");\n    }\n    String url = configuration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration URL is not set\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 58.047845166850195}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration configuration = JenkinsLocationConfiguration.get();\n    if (configuration == null) {\n        throw new IllegalStateException(\"Jenkins Location configuration is missing\");\n    }\n    URL url = configuration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins Location configuration URL is missing\");\n    }\n    return DisplayURLProvider.get().getRunURL(url, build);\n}", "CodeBleu_score": 61.834215630515054}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is missing!\");\n    }\n    String url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured!\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 59.46720278089158}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URI uri = new URI(url);\n        if (uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n        }\n        if (bitbucket instanceof BitbucketCloudApi) {\n            if (!uri.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n            }\n        }\n        return url;\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Invalid Jenkins URL: \" + url, e);\n    }\n}", "CodeBleu_score": 57.303927692881196}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URI uri = new URI(url);\n        if (uri.getHost() == null || uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL is not configured. Please configure it in the Jenkins global configuration.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (!uri.getHost().endsWith(\".org\") && !uri.getHost().endsWith(\".com\")) {\n                throw new IllegalStateException(\"Jenkins URL must be fully qualified for Bitbucket Cloud API clients.\");\n            }\n        }\n        return url;\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed. Please check it in the Jenkins global configuration.\");\n    }\n}", "CodeBleu_score": 66.25348983611002}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url.startsWith(\"localhost\")) {\n        throw new IllegalStateException(\"Jenkins URL cannot be localhost: ${url}\");\n    }\n    if (url.startsWith(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"Jenkins URL cannot be unconfigured-jenkins-location: ${url}\");\n    }\n    if (bitbucket instanceof BitbucketCloudApi && !url.startsWith(\"https://\")) {\n        throw new IllegalStateException(\"Jenkins URL must be fully qualified for Bitbucket Cloud: ${url}\");\n    }\n    return url;\n}", "CodeBleu_score": 36.91736065083318}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = build.getAction(SCMRevisionState.class).getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Can not determine revision hash\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        if (revision instanceof BranchSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Sending build notification for branch\");\n            String branch = ((BranchSCMRevision) revision).getBranch();\n            String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n            try (BitbucketApi bitbucket = buildBitbucketClient(source, listener)) {\n                createStatus(build, listener, bitbucket, key, hash);\n            }\n        } else if (revision instanceof PullRequestSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Sending build notification for pull request\");\n            String key = getBuildKey(build, null, shareBuildKeyBetweenBranchAndPR);\n            try (BitbucketApi bitbucket = buildBitbucketClient(source, listener)) {\n                createStatus(build, listener, bitbucket, key, hash);\n            }\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Can not determine revision type\");\n        }\n    }", "CodeBleu_score": 52.62175994896873}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        final SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        final String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Skip notification, no hash found\");\n            return;\n        }\n\n        final String branch = getBranch(revision);\n        final boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        listener.getLogger().println(String.format(\"[Bitbucket] Notify %s for %s\", branch, hash));\n\n        final String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        final BitbucketApi bitbucket = buildBitbucketClient(source, listener);\n\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 48.54575780351867}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = build.getAction(SCMRevisionState.class).getRevision();\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision found, skipping notification\");\n            return;\n        }\n\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No hash found, skipping notification\");\n            return;\n        }\n\n        String branch = getBranch(revision);\n        if (branch == null) {\n            listener.getLogger().println(\"[Bitbucket] No branch found, skipping notification\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        if (shareBuildKeyBetweenBranchAndPR) {\n            listener.getLogger().println(\"[Bitbucket] Notifications will be shared between branch and PR\");\n        }\n\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = buildBitbucketClient(source, listener);\n        if (bitbucket == null) {\n            listener.getLogger().println(\"[Bitbucket] No Bitbucket API client found, skipping notification\");\n            return;\n        }\n\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 49.28476620717225}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \"-\" + branch;\n    } else {\n        key = build.getFullDisplayName();\n    }\n    return key;\n}", "CodeBleu_score": 52.666975699979204}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \"-\" + branch;\n    } else {\n        key = build.getFullDisplayName();\n    }\n    return key;\n}", "CodeBleu_score": 48.22517043908213}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \":\" + branch;\n    } else {\n        key = build.getFullDisplayName();\n    }\n    return key;\n}", "CodeBleu_score": 52.666975699979204}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = new URL(getUrl())\n        log.warning(\"BitbucketSCMNavigator.serverUrl is null, fixing\")\n    }\n    if (traits == null) {\n        log.warning(\"BitbucketSCMNavigator.traits is null, reconstructing legacy traits\")\n        traits = new BitbucketSCMNavigatorTraits(getUrl())\n    }\n    return this\n}", "CodeBleu_score": 13.54278399079466}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = new URL(\"https://bitbucket.org\")\n        log.warning(\"BitbucketSCMNavigator.serverUrl is null, defaulting to https://bitbucket.org\")\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits()\n        traits.legacy = true\n    }\n    return this\n}", "CodeBleu_score": 12.825474750034344}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = new URL(getBitbucketServerUrl())\n        log.warning(\"BitbucketSCMNavigator.serverUrl is null, defaulting to ${serverUrl}\")\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits(false, false, false, false, false, false, false, false)\n        log.warning(\"BitbucketSCMNavigator.traits is null, defaulting to ${traits}\")\n    }\n    return this\n}", "CodeBleu_score": 15.48503415392431}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    getLogger().info(format(\"Repository %s is %s\", repository.getFullName(), isMatch ? \"proposed\" : \"ignored\"));\n    if (isMatch) {\n        count++;\n    }\n}", "CodeBleu_score": 45.98223388031171}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    getLogger().info(format(\"{} {}\", repository.getFullName(), isMatch ? \"proposed\" : \"ignored\"));\n    if (isMatch) {\n        count++;\n    }\n}", "CodeBleu_score": 44.886554239926234}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    Optional<BitbucketRepository> repo = getBitbucketRepository(name);\n    if (repo.isPresent()) {\n        BitbucketRepository bitbucketRepository = repo.get();\n        if (isMatch) {\n            getLogger().info(\"{} is proposed\", format(bitbucketRepository));\n            count++;\n        } else {\n            getLogger().info(\"{} is ignored\", format(bitbucketRepository));\n        }\n    }\n}", "CodeBleu_score": 50.51626284484174}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        // If the revision is a branch with a hash, we need to check if the commit exists locally\n        if (marked != null && marked.getBranch() != null && marked.getHash() != null) {\n            // If the commit doesn't exist locally, we need to fetch it\n            if (!commitExists(git, marked.getHash())) {\n                // Fetch the commit from the remote repository\n                fetchCommit(scm, build, git, listener, marked.getHash());\n            }\n        }\n\n        // Return the given revision\n        return rev;\n    }", "CodeBleu_score": 18.73866163471753}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        String branch = marked.getBranch();\n        String hash = marked.getHash();\n        String remote = scm.getUserRemoteConfigs().get(0).getUrl();\n        String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n        String credentialsId = scm.getUserRemoteConfigs().get(0).getCredentialsId();\n        String refSpec = \"+\" + hash + \":\" + hash;\n\n        if (!commitExists(git, hash)) {\n            listener.getLogger().println(\"Commit \" + hash + \" does not exist locally.\");\n            listener.getLogger().println(\"Fetching commit from remote repository...\");\n            git.fetch()\n                    .setRemote(remote)\n                    .setRefSpecs(refSpec)\n                    .setCredentialsProvider(new CredentialsProvider() {\n                        @Override\n                        public boolean isInteractive() {\n                            return false;\n                        }\n\n                        @Override\n                        public boolean supports(AuthScheme authScheme) {\n                            return authScheme instanceof HttpHeaderAuthScheme;\n                        }\n\n                        @Override\n                        public Credentials get(URI uri, HttpHost httpHost, AuthScheme authScheme) {\n                            String username = git.getRepository().getConfig().getString(\"remote\", remote, \"url\");\n                            String password = git.getRepository().getConfig().getString(\"remote\", remote, \"password\");\n                            return new UsernamePasswordCredentials(username, password);\n                        }\n                    })\n                    .call();\n            listener.getLogger().println(\"Commit fetched successfully.\");\n        }\n\n        return rev;\n    }", "CodeBleu_score": 39.12240623037574}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (marked == null) {\n            return rev;\n        }\n\n        // If the revision is a branch with a hash, we need to fetch the missing commits\n        if (rev instanceof BranchRevision && ((BranchRevision) rev).getHash() != null) {\n            String branchName = ((BranchRevision) rev).getBranchName();\n            String hash = ((BranchRevision) rev).getHash();\n\n            if (!commitExists(git, hash)) {\n                listener.getLogger().println(\"Branch \" + branchName + \" with hash \" + hash + \" doesn't exist locally. Fetching missing commits...\");\n                List<RefSpec> refSpecs = toList(git.getRefs(scm.getRepository(), \"refs/heads/\" + branchName));\n                if (refSpecs.isEmpty()) {\n                    listener.getLogger().println(\"No refs found for branch \" + branchName + \". Skipping fetch.\");\n                    return rev;\n                }\n\n                execute(git.fetch(scm.getRepository(), scm.getRemote(), refSpecs));\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 37.13299314767475}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 69.81598344779034}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() == null || entry.getValue().isEmpty()) {\n            continue;\n        }\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 75.41741934706684}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 72.25196065151466}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = resourceStates.filter(\n    (resourceState) => resourceState.selected\n  );\n\n  if (selectedResourceStates.length === 0) {\n    return;\n  }\n\n  const resourceUris = selectedResourceStates.map(\n    (resourceState) => resourceState.resourceUri\n  );\n\n  const resourceUrisByRepository = this.groupResourceUrisByRepository(\n    resourceUris\n  );\n\n  for (const [repository, resourceUris] of resourceUrisByRepository) {\n    const filePaths = resourceUris.map((resourceUri) =>\n      this.convertResourceUriToFilePath(resourceUri)\n    );\n\n    try {\n      await this.addFilesToRepository(repository, filePaths);\n    } catch (error) {\n      this.logger.error(error);\n      this.showErrorMessage(error.message);\n    }\n  }\n}", "CodeBleu_score": 45.635179764764885}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResourceStates = resourceStates.filter((resourceState) => resourceState.selected);\n    if (selectedResourceStates.length === 0) {\n        return;\n    }\n\n    const resourcePathsByRepository = selectedResourceStates.reduce((acc, resourceState) => {\n        const repository = resourceState.resourceUri.repository;\n        const resourcePath = resourceState.resourceUri.path;\n        if (!acc[repository]) {\n            acc[repository] = [];\n        }\n        acc[repository].push(resourcePath);\n        return acc;\n    }, {});\n\n    for (const [repository, resourcePaths] of Object.entries(resourcePathsByRepository)) {\n        try {\n            await this.sourceControlManager.add(repository, resourcePaths);\n        } catch (error) {\n            console.error(error);\n            this.showErrorMessage(`Failed to add files to ${repository}.`);\n        }\n    }\n}", "CodeBleu_score": 43.49826893829477}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = resourceStates.filter(\n    (resourceState) => resourceState.selected\n  );\n  if (selectedResourceStates.length === 0) {\n    return;\n  }\n\n  const resourceURIs = selectedResourceStates.map(\n    (resourceState) => resourceState.resourceUri\n  );\n\n  const resourceURIsByRepository = this.groupResourceURIsByRepository(\n    resourceURIs\n  );\n\n  for (const [repository, resourceURIs] of resourceURIsByRepository) {\n    const filePaths = resourceURIs.map((resourceURI) =>\n      this.getFilePathFromResourceURI(resourceURI)\n    );\n\n    try {\n      await this.addFilesToRepository(repository, filePaths);\n    } catch (error) {\n      this.logger.error(`Failed to add files to repository: ${error}`);\n      this.showErrorMessage(`Failed to add files to repository: ${error}`);\n    }\n  }\n}", "CodeBleu_score": 44.64540236409659}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  // If the resource states are empty or the first resource URI is not an instance of Uri,\n  // try to get a single SCM resource and update the resource states\n  if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n    const resource = await this.getScmResource(resourceStates[0]);\n    resourceStates = [resource];\n  }\n\n  // Filter and return the resource states that are instances of Resource\n  return resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 41.67503123764307}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n    return this.resourceStates;\n  }\n\n  const resource = await this.getResource(this.resourceStates[0].resourceUri);\n  if (resource) {\n    this.resourceStates = [new ResourceState(resource, this.resourceStates[0].scmResourceGroup)];\n  }\n\n  return this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 38.24569482449836}, {"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n        return;\n    }\n\n    const resource = await this.getSingleResource(this.resourceStates[0].resourceUri);\n    if (resource) {\n        this.resourceStates = [resource];\n    }\n\n    return this.resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 41.63800139887777}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(fromSvnUri(uri.toString()));\n    }\n\n    const scm = await commands.executeCommand<SourceControlManager>(\n      'getSourceControlManager'\n    );\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 52.73504611476545}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n\n    if (uri) {\n      if (uri.scheme === 'svn') {\n        uri = Uri.file(uri.fsPath);\n      }\n      const scm = this.getSCM();\n      if (scm) {\n        const repository = await scm.getRepository(uri);\n        if (repository) {\n          return repository.getResourceFromFile(uri);\n        }\n      }\n    }\n\n    return undefined;\n  }", "CodeBleu_score": 38.20691097491028}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(fromSvnUri(uri));\n    }\n    const scm = this.sourceControlManager;\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 45.11277723985136}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    try {\n        const repository = await this.model.getRemoteRepository(element.path);\n        if (element.type === 'M') {\n            await this.openDiff(repository, element.path, element.oldRevision, element.newRevision);\n        } else {\n            await this.openFileRemote(repository, element.path, element.newRevision);\n        }\n    } catch (err) {\n        console.error(err);\n    }\n}", "CodeBleu_score": 44.0386307836465}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repository = await this.model.getRemoteRepository(element);\n    if (repository) {\n      if (element.type === 'modified') {\n        this.openDiff(repository, element.oldPath, element.oldRevision, element.path, element.revision);\n      } else {\n        this.openFileRemote(repository, element.path, element.revision);\n      }\n    }\n  }", "CodeBleu_score": 38.505287486641954}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepository = await this.model.getRemoteRepository(element.path);\n  if (element.type === ChangeType.Modified) {\n    await this.openDiff(element.path, element.oldRevision, element.newRevision, remoteRepository);\n  } else if (element.type === ChangeType.Added) {\n    await this.openFileRemote(element.path, element.newRevision, remoteRepository);\n  }\n}", "CodeBleu_score": 45.31355497800832}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.isSupported()) {\n        window.showErrorMessage('Your browser does not support clipboard.');\n        return;\n    }\n\n    if (item instanceof Commit) {\n        const commit = item.commit;\n        const text = what === 'message' ? commit.message : commit.hash;\n        await clipboard.writeText(text);\n    }\n}", "CodeBleu_score": 42.41297857187358}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!clipboard.isSupported()) {\n    window.showErrorMessage('Clipboard is not supported');\n    return;\n  }\n  if (item instanceof CommitTreeItem) {\n    const commit = item.commit;\n    if (commit) {\n      switch (what) {\n        case 'message':\n          clipboard.writeText(commit.message);\n          break;\n        case 'revision':\n          clipboard.writeText(commit.revision);\n          break;\n      }\n    }\n  }\n}", "CodeBleu_score": 40.93778997815728}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (clipboard.isSupported()) {\n    if (item instanceof CommitTreeItem) {\n      if (what === 'commit') {\n        await clipboard.writeText(item.commit.message);\n      } else {\n        await clipboard.writeText(item.commit.sha);\n      }\n    }\n  } else {\n    window.showErrorMessage('Clipboard not supported');\n  }\n}", "CodeBleu_score": 30.545501647920226}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        this.classLoader = jenkins.getPluginManager().getClassLoader();\n    } else {\n        this.classLoader = this.getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 47.53462145874124}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def jenkins = Jenkins.getInstance()\n    if (jenkins) {\n        pluginManager.classLoader = jenkins.pluginManager.classLoader\n    } else {\n        pluginManager.classLoader = this.class.classLoader\n    }\n    return this\n}", "CodeBleu_score": 35.97112703311953}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def jenkins = Jenkins.getInstanceOrNull()\n    if (jenkins != null) {\n        def pluginManager = jenkins.getPluginManager()\n        def classLoader = pluginManager.getClassLoader()\n        setClassLoader(classLoader)\n    } else {\n        setClassLoader(getClass().getClassLoader())\n    }\n    return this\n}", "CodeBleu_score": 39.30511739559584}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = trimToNull(aliasUrl);\n\n    if (isNullOrEmpty(displayName)) {\n        this.displayName = getServerName(this.serverUrl);\n    }\n}", "CodeBleu_score": 35.32674576376629}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = trimToNull(aliasUrl);\n}", "CodeBleu_score": 41.498535425460894}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName == null ? serverUrl : displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = trimToNull(aliasUrl);\n}", "CodeBleu_score": 42.90207814046235}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!checkPermission(Permission.ADMINISTER)) {\n        return new ListBoxModel();\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    return includeMatchingAs(GiteaAuth.class, serverUrl, \"credentialsId\", \"\");\n}", "CodeBleu_score": 25.674074643863232}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!checkPermission(Permission.ADMINISTER)) {\n        return new ListBoxModel();\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    return includeMatchingAs(serverUrl, GiteaAuth.class, serverUrl, \"credentialsId\", CredentialsMatchers.withId(credentialsId));\n}", "CodeBleu_score": 29.41878251144453}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!checkPermission(Permission.ADMINISTER)) {\n        return new ListBoxModel()\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl)\n    def credentials = includeMatchingAs(GiteaAuth.class, serverUrl)\n\n    return credentials\n}", "CodeBleu_score": 33.65395095062809}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl).normalize();\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(host);\n        if (port != -1) {\n            sb.append(\":\").append(port);\n        }\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.63458614294283}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    try {\n        URI uri = new URI(serverUrl);\n        int port = uri.getPort();\n        String scheme = uri.getScheme();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(uri.getHost().toLowerCase());\n        if (port != -1) {\n            sb.append(\":\").append(port);\n        }\n        sb.append(uri.getPath());\n        String normalizedUrl = sb.toString();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n        return normalizedUrl;\n    } catch (Exception e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 42.05083386433011}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return (new URI(scheme, null, host, port, path, null, null)).toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 40.50154756540918}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            model.add(server.getServerUrl(), server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 51.70207204200391}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl(), server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 53.5219052490981}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            model.add(server.getUrl(), server.getUrl());\n        } else {\n            model.add(displayName, server.getUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 51.8720513090166}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t        if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            if (servers != null) {\n                // Remove duplicates and empty URLs\n                servers = servers.stream()\n                        .filter(Objects::nonNull)\n                        .filter(server -> !fixNull(server.getServerUrl()).isEmpty())\n                        .distinct()\n                        .collect(Collectors.toList());\n            }\n            this.servers = servers;\n            save();\n        }\n    }", "CodeBleu_score": 33.54328897413136}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t        if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException();\n        }\n\n        if (servers == null) {\n            servers = new ArrayList<>();\n        }\n\n        // remove duplicates\n        Set<GiteaServer> uniqueServers = new LinkedHashSet<>(servers);\n\n        // remove empty URLs\n        uniqueServers.removeIf(server -> isBlank(server.getServerUrl()));\n\n        // update servers\n        this.servers = new ArrayList<>(uniqueServers);\n\n        // save configuration\n        save();\n    }", "CodeBleu_score": 33.5154430159713}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t        if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            if (servers == null) {\n                this.servers.clear();\n            } else {\n                Set<String> urls = new HashSet<>();\n                for (GiteaServer server : servers) {\n                    if (server != null && !isBlank(server.getServerUrl())) {\n                        urls.add(server.getServerUrl());\n                    }\n                }\n                this.servers.clear();\n                for (String url : urls) {\n                    this.servers.add(new GiteaServer(url));\n                }\n            }\n            save();\n        }\n    }", "CodeBleu_score": 34.60769186541442}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 48.9155223832305}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    if (servers != null) {\n        for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (serverUrl.equals(endpoint.getServerUrl())) {\n                iterator.remove();\n                removed = true;\n            }\n        }\n    }\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 46.897869769708564}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 48.9155223832305}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el.asType());\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 48.70158947298321}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el.asType());\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 48.70158947298321}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el.asType()).toString();\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 49.57791157938504}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationCanonicalName = annotationClass.getCanonicalName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationCanonicalName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 46.66928827836825}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationCanonicalName = annotationClass.getCanonicalName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationCanonicalName)) {\n            return annotation;\n        }\n        if (annotation.getQualifiedName().endsWith(\".\" + annotationClass.getSimpleName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 44.71083658691033}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String qualifiedName = annotationClass.getName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace('$', '.')\n                .equals(qualifiedName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.1773755614882}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"name\"] = [\"not in\", frappe.get_list(\"Leave Application\", filters={\"employee\": employee, \"docstatus\": 1, \"name\": [\"not in\", [d.leave_application for d in frappe.get_all(\"Leave Approval\", filters={\"approver\": approver_id}, fields=[\"leave_application\"])]], \"employee\": employee}, pluck=\"name\")]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n    return filters\n\n", "CodeBleu_score": 33.83283408677257}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"from_date\": [\">=\", frappe.utils.get_datetime().date()],\n    }\n\n    if for_approval:\n        filters[\"approval_status\"] = \"Pending\"\n        filters[\"name\"] = [\"not in\", frappe.get_list(\"Leave Application\", filters={\"employee\": employee, \"docstatus\": 1})]\n    else:\n        filters[\"approval_status\"] = [\"not in\", [\"Cancelled\"]]\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    workflow_state = frappe.db.get_value(\"Employee\", employee, \"workflow_state\")\n    if workflow_state:\n        filters[\"workflow_state\"] = workflow_state\n    else:\n        filters[\"workflow_state\"] = \"Leave Approval\"\n\n    return filters\n\n", "CodeBleu_score": 32.862492106886506}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"leave_type\": [\"in\", frappe.get_list(\"Leave Type\", pluck=\"name\")],\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"approver\"] = [\"in\", [approver_id, employee]]\n        filters[\"name\"] = [\"not in\", frappe.get_list(\"Leave Application\", filters={\"employee\": employee, \"status\": \"Cancelled\"}, pluck=\"name\")]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n\n    workflow_filters = get_workflow_filters(filters, approver_id, for_approval)\n    if workflow_filters:\n        filters.update(workflow_filters)\n\n    return filters\n\n", "CodeBleu_score": 33.742927243858475}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = {}\n    for leave_type in leave_details.get(\"leave_type\"):\n        leave_balance_map[leave_type] = {\n            \"allocated\": allocation.items.get(leave_type),\n            \"balance\": leave_details.get(\"total_leaves\"),\n        }\n\n    return leave_balance_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 45.96682968775161}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today.year)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leaves = allocation.items(leave_type)\n        balance_leaves = allocation.items(leave_type)\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": allocated_leaves,\n            \"balance_leaves\": balance_leaves,\n        }\n    return leave_balance_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.444996910946465}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocation_items = allocation.items(leave_type)\n        allocated_leaves = sum(\n            allocation_items.values()\n        )  # Sum of all allocation items for the leave type\n        balance_leaves = allocated_leaves - leave_details[leave_type]\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": allocated_leaves,\n            \"balance_leaves\": balance_leaves,\n        }\n\n    return leave_balance_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 40.3153812535894}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    # Query the holidays from the database, excluding weekly offs, and order them by date\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT holiday_date, description\n        FROM `tabHoliday`\n        WHERE parent = %s\n        AND weekly_off = 0\n        ORDER BY holiday_date\n    \"\"\",\n        (holiday_list,),\n        as_dict=True,\n    )\n\n    # Strip HTML from the holiday descriptions\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 34.35699112617346}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holiday_list = frappe.get_doc(\"Holiday List\", holiday_list)\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list.name, \"parentfield\": \"holidays\"},\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 38.19712911014606}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"weekly_off\": 0},\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.25327405639332}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\") and (\n        frappe.db.get_single_value(\"HR Settings\", \"holiday_reminders_frequency\") == \"Weekly\"\n    ):\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 32.45678651123227}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Check if HR settings specify to send reminders\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\"):\n        return\n\n    # Check if frequency is set to \"Weekly\"\n    if frappe.db.get_single_value(\"HR Settings\", \"holiday_reminders_frequency\") != \"Weekly\":\n        return\n\n    # Call function to send reminders in advance\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 35.83237933846582}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.378922231120049}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        score = rating.rating * 5 * rating.percentage\n        self.self_appraisal_score += score\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n    self.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 25.26142492101618}, {"code": "def calculate_self_appraisal_score(self)\n\t\n\n    self_appraisal_score = 0\n    for entry in self.self_ratings:\n        score = entry.rating * 5 * entry.percentage_weightage / 100\n        self_appraisal_score += score\n\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 32.048920426097965}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for self_rating in self.self_ratings:\n        score = self_rating.rating * 5 * self_rating.percentage / 100\n        total_score += score\n    self.self_appraisal_score = round(total_score, self.precision)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 28.644841942561367}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_using_formula:\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n            \"appraisal_cycle\": self.appraisal_cycle,\n            \"employee\": self.employee,\n            \"employee_name\": self.employee_name,\n            \"department\": self.department,\n            \"designation\": self.designation,\n            \"grade\": self.grade,\n            \"branch\": self.branch,\n            \"status\": self.status,\n            \"company\": self.company,\n            \"total_score_percentage\": self.total_score_percentage,\n            \"average_feedback_score_percentage\": self.average_feedback_score_percentage,\n            \"self_appraisal_score_percentage\": self.self_appraisal_score_percentage,\n            \"final_score\": self.final_score,\n            \"final_score_percentage\": self.final_score_percentage,\n            \"appraisal_cycle_doc\": appraisal_cycle_doc.as_dict(),\n        }\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        data.update(data)\n        final_score = flt(frappe.safe_eval(formula, None, data), self.precision(\"final_score\"))\n        self.final_score = final_score\n        self.final_score_percentage = (final_score / self.maximum_score) * 100\n    else:\n        self.final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score", "CodeBleu_score": 36.612424228556144}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.calculate_final_score_using_formula:\n        data = {}\n        employee_doc = frappe.get_cached_doc(\"Employee\", self.employee)\n        data.update(employee_doc.as_dict())\n        data.update(appraisal_cycle_doc.as_dict())\n        data.update(self.as_dict())\n\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n\n        final_score = flt(frappe.safe_eval(formula, None, data), self.precision(\"final_score\"))\n\n        self.final_score = final_score\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            self.precision(\"final_score\"),\n        )", "CodeBleu_score": 45.752754577389354}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_using_formula:\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        formula = sanitize_expression(appraisal_cycle_doc.formula)\n        data.update(data)\n        self.final_score = flt(frappe.safe_eval(formula, None, data), self.precision(\"final_score\"))\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score)\n            / 3,\n            self.precision(\"final_score\"),\n        )\n\n\n", "CodeBleu_score": 35.8969975548516}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                \"Attendance date cannot be of future dates unless the status is 'On Leave'\")\n        else:\n            leave_application = frappe.db.sql(\n                \"SELECT name FROM `tabLeave Application` WHERE employee = %s AND %s BETWEEN from_date AND to_date AND docstatus = 1\", (\n                    self.employee, self.attendance_date), as_dict=True)\n            if leave_application:\n                frappe.throw(\"Attendance date cannot be of future dates when the employee is on leave\")\n\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(\n            \"Attendance date cannot be earlier than the employee's date of joining\")", "CodeBleu_score": 35.103921040891414}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be of future\"))\n        else:\n            leave_application = frappe.db.exists(\n                \"Leave Application\",\n                {\n                    \"employee\": self.employee,\n                    \"from_date\": [\"<=\", self.attendance_date],\n                    \"to_date\": [\">=\", self.attendance_date],\n                    \"docstatus\": 1,\n                },\n            )\n            if not leave_application:\n                frappe.throw(_(\"Attendance date is a future date. Please select present if employee has applied for leave.\"))\n\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date\"))\n\n", "CodeBleu_score": 36.71124681303072}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\"Attendance date cannot be of future for employee {0}\").format(\n                    self.employee\n                )\n            )\n\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(\n            _(\"Attendance date cannot be earlier than employee's joining date\")\n        )\n\n", "CodeBleu_score": 27.40317262916159}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                \"Attendance record for employee {0} already exists on {1}. Please update the existing record instead.\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", duplicate_record),\n            )\n        )\n\n", "CodeBleu_score": 38.277579308162025}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        attendance_date = frappe.bold(format_date(self.attendance_date))\n        attendance_link = get_link_to_form(\"Attendance\", duplicate)\n        frappe.throw(\n            _(\"Attendance record: {0} for employee: {1} already exists against the attendance date: {2}\").format(\n                attendance_link, frappe.bold(self.employee), attendance_date\n            )\n        )\n\n", "CodeBleu_score": 44.169987854516776}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record: {0} for employee: {1} already exists against the date: {2}. <br>Note: Attendance can only be created against a shift if it is not created against a default shift. To create attendance against a default shift, please create a new shift and associate it with the employee.\"\n            ).format(\n                get_link_to_form(\"Attendance\", duplicate),\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n            )\n        )\n\n", "CodeBleu_score": 38.34143690881611}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    args = self.get_message_details()\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n    frappe.sendmail(\n        recipients=emails,\n        subject=args[\"title\"],\n        template=\"daily_work_summary\",\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        args=args,\n    )\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 53.45000698682186}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # send email\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details[\"title\"],\n        template=\"daily_work_summary\",\n        args=message_details,\n        now=True,\n    )\n\n    # update status\n    self.db_set(\"status\", \"Sent\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 40.30900746686417}, {"code": "def send_summary(self)\n\t\n\n    # Get message details\n    args = self.get_message_details()\n\n    # Get emails of users in the group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # Send email\n    frappe.sendmail(\n        recipients=emails,\n        subject=args[\"title\"],\n        template=\"daily_work_summary\",\n        args=args,\n        now=True,\n    )\n\n    # Update status\n    self.db_set(\"status\", \"Sent\")", "CodeBleu_score": 42.91648162138966}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n\n    # Check if the job applicant already has an interview record in the same interview round\n    existing_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": (\"<\", 2),\n        },\n    )\n\n    # If a duplicate interview record is found, raise an exception with a link to the existing interview record and the job applicant's information\n    if existing_interview:\n        interview_link = get_link_to_form(\"Interview\", existing_interview)\n        job_applicant_link = get_link_to_form(\n            \"Job Applicant\", self.job_applicant\n        )\n        frappe.throw(\n            _(\n                \"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record {0} and the job applicant's information {1}.\"\n            ).format(interview_link, job_applicant_link)\n        )\n\n", "CodeBleu_score": 43.20518816531047}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        existing_interview = frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": (\"<\", 2),\n            },\n        )\n\n        if existing_interview:\n            frappe.throw(\n                _(\n                    \"Job Applicant {0} is not allowed to appear twice in Interview: {1}\"\n                ).format(\n                    frappe.bold(self.job_applicant),\n                    get_link_to_form(\"Interview\", self.interview),\n                ),\n                title=_(\"Not Allowed\"),\n            )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 49.826525627678805}, {"code": "def validate_duplicate_interview(self)\n\t\n\n    # Check if an interview record with the same job applicant and interview round already exists\n    existing_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n        },\n    )\n\n    if existing_interview:\n        # If a duplicate is found, raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n        frappe.throw(\n            _(\n                \"Job applicant {0} is not allowed to appear twice for the same interview round. Please check the existing interview record {1} and the job applicant's information.\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                get_link_to_form(\"Interview\", existing_interview),\n            )\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 37.616342821197485}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessment.count() == 0:\n        self.average_rating = 0\n    else:\n        total_rating = 0\n        for assessment in self.skill_assessment.all():\n            if assessment.rating:\n                total_rating += assessment.rating\n        self.average_rating = total_rating / self.skill_assessment.count()\n    self.save()\n", "CodeBleu_score": 33.12019572015053}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments.count() == 0:\n        self.average_rating = 0\n    else:\n        total_rating = 0\n        for assessment in self.skill_assessments.all():\n            if assessment.rating:\n                total_rating += assessment.rating\n        self.average_rating = total_rating / self.skill_assessments.count()\n    self.save()\n\n\n\n", "CodeBleu_score": 33.00750104762623}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 25.423236665617033}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interview_details = []\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\"interviewer\": interviewer})\n    return interview\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 51.171737806890484}, {"code": "def create_interview(doc):\n\t\n\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interview_details = []\n\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n\n    return interview\n\n\n\n", "CodeBleu_score": 51.92243895214179}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    return interview\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 44.65962641750825}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.get_all(\"Job Offer\", filters={\n        \"designation\": self.designation,\n        \"company\": self.company,\n        \"docstatus\": 1,\n        \"creation\": [\"between\", [from_date, to_date]],\n    }, fields=[\"name\"])\n\n    return [offer.name for offer in job_offer_list]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 62.01140844381402}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.get_all(\"Job Offer\",\n                                  filters={\n                                      \"designation\": self.designation,\n                                      \"company\": self.company,\n                                      \"docstatus\": 1,\n                                      \"creation\": [\"between\", (from_date, to_date)]\n                                  },\n                                  fields=[\"name\"])\n    return job_offer_list\n\n", "CodeBleu_score": 59.384517769965214}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    # Query the Job Offer doctype to retrieve job offers created within the specified date range\n    # and where the document status is 1 (submitted)\n    job_offers = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"creation\": [\"between\", (from_date, to_date)],\n        },\n        fields=[\"name\"],\n    )\n\n    # Return a list of job offer names matching the criteria\n    return [offer.name for offer in job_offers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 66.47119642818772}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"company\": company if company else [\"like\", \"%\"],\n            \"department\": department if department else [\"like\", \"%\"],\n        },\n    )\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"company\": company if company else [\"like\", \"%\"],\n            \"department\": department if department else [\"like\", \"%\"],\n            \"status\": \"Accepted\",\n        },\n    )\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100 if total_job_offers > 0 else 0\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 31.27758542645295}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={**filters, \"status\": \"Accepted\"})\n\n    acceptance_rate = (accepted_offers / total_offers) * 100 if total_offers > 0 else 0\n\n    return acceptance_rate, \"Percent\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 60.24989420688146}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_job_offers = frappe.db.count(\n        \"Job Offer\", filters={\"docstatus\": 1}\n    )\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"status\": \"Accepted\",\n            \"company\": company,\n            \"department\": department,\n        },\n    )\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 32.9347962411652}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 89.47653384283774}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal CompanyStaff companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\t\tif (!companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\n\t\t\treturn new ErrorResult(Messages.passwordNotMatch);\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 41.95853858970681}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal CompanyStaff companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.notFound);\n\t\t}\n\t\tfinal Result businessRules = this.businessRules.checkIfPasswordsMatch(companyStaff.getPassword(), companyStaffForUpdateDto.getPassword());\n\t\tif (!businessRules.isSuccess()) {\n\t\t\treturn businessRules;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.updated);\n\t}", "CodeBleu_score": 50.08450492537566}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Result result = BusinessRules.run(\n\t\t\t\tcheckIfCompanyStaffExistsById(companyStaffForUpdateDto.getId()),\n\t\t\t\tcheckIfPasswordsMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getPasswordRepeat())\n\t\t);\n\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfinal CompanyStaff companyStaff = companyStaffDao.getById(companyStaffForUpdateDto.getId());\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 48.18161287347771}]}
