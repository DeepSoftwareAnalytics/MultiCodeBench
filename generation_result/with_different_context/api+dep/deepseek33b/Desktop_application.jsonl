{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t    for (let item of template) {\n        if (!item.metadata) {\n            item.metadata = {}\n        }\n        if (item.command) {\n            let keystrokes = keystrokesByCommand[item.command]\n            if (keystrokes) {\n                let keystroke = keystrokes[0]\n                if (keystroke.includes(' ')) {\n                    item.label += ` (${keystroke})`\n                } else {\n                    item.accelerator = keystroke\n                }\n            }\n            item.click = () => global.atomApplication.sendCommand(item.command)\n            if (!item.command.startsWith('application:')) {\n                item.metadata.windowSpecific = true\n            }\n        }\n        if (item.submenu) {\n            item.submenu = this.translateTemplate(item.submenu, keystrokesByCommand)\n        }\n    }\n    return template\n}", "CodeBleu_score": 53.797849733107505}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t    for (const item of template) {\n        if (!item.metadata) {\n            item.metadata = {}\n        }\n        if (item.command) {\n            const keystrokes = keystrokesByCommand[item.command]\n            if (keystrokes) {\n                if (item.label.includes(' ')) {\n                    item.metadata.keystroke = keystrokes[0]\n                } else {\n                    item.accelerator = keystrokes[0]\n                }\n            }\n            if (!item.command.startsWith('application:')) {\n                item.click = () => {\n                    global.atomApplication.sendCommand(item.command)\n                }\n            }\n        }\n        if (item.submenu) {\n            this.translateTemplate(item.submenu, keystrokesByCommand)\n        }\n    }\n    return template\n}", "CodeBleu_score": 44.89792998619782}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t    for (const item of template) {\n        if (!item.metadata) item.metadata = {};\n        if (!item.metadata.windowSpecific) item.metadata.windowSpecific = true;\n        if (item.command) {\n            const keystrokes = keystrokesByCommand[item.command];\n            if (keystrokes) {\n                const firstKeystroke = keystrokes[0];\n                if (firstKeystroke.includes(\" \")) {\n                    item.label = `${firstKeystroke} ${item.label}`;\n                } else {\n                    item.accelerator = firstKeystroke;\n                }\n            }\n            item.click = () => {\n                atomApplication.sendCommand(item.command);\n            };\n            if (!item.command.startsWith(\"application:\")) {\n                item.metadata.windowSpecific = false;\n            }\n        }\n        if (item.submenu) {\n            item.submenu = this.translateTemplate(item.submenu, keystrokesByCommand);\n        }\n    }\n    return template;\n}", "CodeBleu_score": 51.514104742364665}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\t    const object = menu.items || {};\n    let items = [];\n    for (let index in object) {\n      const item = object[index];\n      items.push(item);\n      if (item.submenu)\n        items = items.concat(this.flattenMenuItems(item.submenu));\n    }\n    return items;\n  }", "CodeBleu_score": 97.84004031471557}, {"code": "flattenMenuItems(menu){\n\t    const object = menu.items || {};\n    let items = [];\n    for (let index in object) {\n      const item = object[index];\n      items.push(item);\n      if (item.submenu)\n        items = items.concat(this.flattenMenuItems(item.submenu));\n    }\n    return items;\n  }", "CodeBleu_score": 97.84004031471557}, {"code": "flattenMenuItems(menu){\n\t    const object = menu.items || {};\n    let items = [];\n    for (let index in object) {\n      const item = object[index];\n      items.push(item);\n      if (item.submenu)\n        items = items.concat(this.flattenMenuItems(item.submenu));\n    }\n    return items;\n  }", "CodeBleu_score": 97.84004031471557}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t  const initVector = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(\n    \"aes-256-gcm\",\n    Buffer.from(secret, \"hex\"),\n    initVector\n  );\n  const encrypted = Buffer.concat([\n    cipher.update(JSON.stringify(options)),\n    cipher.final(),\n  ]);\n  const authTag = cipher.getAuthTag().toString(\"hex\");\n  return JSON.stringify({\n    authTag,\n    encrypted: encrypted.toString(\"hex\"),\n    initVector: initVector.toString(\"hex\"),\n  });\n}", "CodeBleu_score": 55.72524915117689}, {"code": "const encryptOptions = (options, secret) =>{\n\t  const initVector = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(\n    \"aes-256-gcm\",\n    secret,\n    initVector\n  );\n  const encrypted = Buffer.concat([\n    cipher.update(JSON.stringify(options)),\n    cipher.final(),\n  ]);\n  const tag = cipher.getAuthTag();\n  return JSON.stringify({\n    tag: tag.toString(\"hex\"),\n    content: encrypted.toString(\"hex\"),\n    iv: initVector.toString(\"hex\"),\n  });\n}", "CodeBleu_score": 52.627415312694225}, {"code": "const encryptOptions = (options, secret) =>{\n\t    const initVector = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv(\n        'aes-256-gcm',\n        secret,\n        initVector\n    );\n    const encryptedContent = cipher.update(JSON.stringify(options), 'utf-8', 'hex') + cipher.final('hex');\n    const authTag = cipher.getAuthTag().toString('hex');\n    return JSON.stringify({\n        authTag,\n        encryptedContent,\n        initVector: initVector.toString('hex'),\n    });\n}", "CodeBleu_score": 64.82083534318302}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t  template.forEach((item) => {\n    if (item.command) {\n      if (!item.commandDetail) {\n        item.commandDetail = {};\n      }\n      item.contextCommand = true;\n      item.click = () => {\n        global.atomApplication.sendCommandToWindow(item.commandDetail.windowId, item.command, item.commandDetail.args);\n      };\n    }\n    if (item.submenu) {\n      createClickHandlers(item.submenu);\n    }\n  });\n}", "CodeBleu_score": 68.05384548431152}, {"code": "createClickHandlers(template){\n\t  for (const item of template) {\n    if (item.command) {\n      item.commandDetail = global.atomApplication.commandDetail(item.command);\n      item.contextCommand = true;\n      item.click = () => {\n        global.atomApplication.sendCommandToWindow(item.commandDetail.window, item.commandDetail.command);\n      };\n    }\n\n    if (item.submenu) {\n      createClickHandlers(item.submenu);\n    }\n  }\n}", "CodeBleu_score": 57.63618756156432}, {"code": "createClickHandlers(template){\n\t\n\n\n\n    for (let item of template) {\n\n        if (item.command) {\n\n            if (!item.commandDetail) {\n                item.commandDetail = {\n                    command: item.command,\n                    args: item.args\n                }\n            }\n\n            item.contextCommand = true\n\n            item.click = () => {\n                global.atomApplication.sendCommandToWindow(item.commandDetail.command, item.commandDetail.args)\n            }\n        }\n\n        if (item.submenu) {\n            createClickHandlers(item.submenu)\n        }\n    }\n}", "CodeBleu_score": 53.45434873325689}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t    const recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n    try {\n      await recoveryFile.release();\n    } catch (error) {\n      console.error(`Error releasing recovery file for ${path}: ${error}`);\n    }\n    this.recoveryFilesByFilePath.delete(path);\n    this.windowsByRecoveryFile.delete(recoveryFile);\n    this.recoveryFilesByWindow.delete(window);\n  }", "CodeBleu_score": 53.96899277782193}, {"code": "async didSavePath(window, path){\n\t  const recoveryFile = this.recoveryFilesByFilePath.get(path);\n  if (!recoveryFile) return;\n  try {\n    await recoveryFile.release();\n  } catch (error) {\n    console.error(`Error releasing recovery file for ${path}`, error);\n  }\n  this.recoveryFilesByFilePath.delete(path);\n  this.windowsByRecoveryFile.delete(recoveryFile);\n  this.recoveryFilesByWindow.delete(window);\n}", "CodeBleu_score": 52.438818775056205}, {"code": "async didSavePath(window, path){\n\t  const recoveryFile = this.recoveryFilesByFilePath.get(path);\n  if (!recoveryFile) return;\n  try {\n    await recoveryFile.release();\n  } catch (error) {\n    console.error(`Error releasing recovery file for ${path}`, error);\n  }\n  this.recoveryFilesByFilePath.delete(path);\n  this.windowsByRecoveryFile.delete(recoveryFile);\n  this.recoveryFilesByWindow.delete(window);\n}", "CodeBleu_score": 52.438818775056205}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\t  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (recoveryFiles) {\n    for (const recoveryFile of recoveryFiles) {\n      try {\n        await recoveryFile.recover();\n      } catch (error) {\n        const message = 'A file that Atom was saving could be corrupted';\n        const detail =\n          `Error ${error.code}. There was a crash while saving \"${\n            recoveryFile.originalPath\n          }\", so this file might be blank or corrupted.\n` +\n          `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n            recoveryFile.recoveryPath\n          }\".`;\n        console.log(detail);\n        dialog.showMessageBox(window, {\n          type: 'info',\n          buttons: ['OK'],\n          message,\n          detail\n        });\n      }\n    }\n  }\n\n  this.windowsByRecoveryFile.delete(window);\n  this.recoveryFilesByWindow.delete(window);\n  this.recoveryFilesByFilePath.delete(window);\n}", "CodeBleu_score": 67.3977320847349}, {"code": "async didCrashWindow(window){\n\t  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (recoveryFiles) {\n    for (const recoveryFile of recoveryFiles) {\n      try {\n        await recoveryFile.recover();\n      } catch (error) {\n        const message = 'A file that Atom was saving could be corrupted';\n        const detail =\n          `Error ${error.code}. There was a crash while saving \"${\n            recoveryFile.originalPath\n          }\", so this file might be blank or corrupted.\n` +\n          `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n            recoveryFile.recoveryPath\n          }\".`;\n        console.log(detail);\n        dialog.showMessageBox(window, {\n          type: 'info',\n          buttons: ['OK'],\n          message,\n          detail\n        });\n      }\n      this.recoveryFilesByWindow.delete(recoveryFile);\n      this.windowsByRecoveryFile.delete(recoveryFile);\n      this.recoveryFilesByFilePath.delete(recoveryFile.recoveryPath);\n      recoveryFile.remove();\n    }\n  }\n}", "CodeBleu_score": 68.37323069370032}, {"code": "async didCrashWindow(window){\n\t  if (this.windowsByRecoveryFile.has(window)) {\n    const promises = [];\n    for (const recoveryFile of this.windowsByRecoveryFile.get(window)) {\n      promises.push(\n        recoveryFile\n          .recover()\n          .catch(error => {\n            const message = 'A file that Atom was saving could be corrupted';\n            const detail =\n              `Error ${error.code}. There was a crash while saving \"${\n                recoveryFile.originalPath\n              }\", so this file might be blank or corrupted.\n` +\n              `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n                recoveryFile.recoveryPath\n              }\".`;\n            console.log(detail);\n            dialog.showMessageBox(window, {\n              type: 'info',\n              buttons: ['OK'],\n              message,\n              detail\n            });\n          })\n      );\n    }\n    await Promise.all(promises);\n  }\n  this.windowsByRecoveryFile.delete(window);\n  this.recoveryFilesByWindow.get(window).delete();\n  this.recoveryFilesByFilePath.delete(window.filePath);\n}", "CodeBleu_score": 79.46999941443741}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t    return new Promise((resolve, reject) => {\n        mkdirp(Path.dirname(destination), err => {\n            if (err) return reject(err);\n\n            const readStream = fs.createReadStream(source);\n            const writeStream = fs.createWriteStream(destination, { mode });\n\n            readStream.on('error', reject);\n            writeStream.on('error', reject);\n\n            writeStream.on('open', () => readStream.pipe(writeStream));\n            writeStream.once('close', resolve);\n        });\n    });\n}", "CodeBleu_score": 63.66796686899098}, {"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    mkdirp(Path.dirname(destination), err => {\n      if (err) return reject(err);\n      const readStream = fs.createReadStream(source);\n      const writeStream = fs.createWriteStream(destination, { mode });\n      readStream.on('error', reject).once('open', () => readStream.pipe(writeStream));\n      writeStream.on('error', reject).once('open', resolve);\n    });\n  });\n}", "CodeBleu_score": 63.167215148779256}, {"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    mkdirp(Path.dirname(destination), err => {\n      if (err) {\n        return reject(err)\n      }\n      const readStream = fs.createReadStream(source)\n      const writeStream = fs.createWriteStream(destination, { mode })\n      readStream.on('error', reject)\n      writeStream.on('error', reject)\n      writeStream.on('open', () => readStream.pipe(writeStream))\n      writeStream.once('close', resolve)\n    })\n  })\n}", "CodeBleu_score": 61.189016944247484}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false\n  }\n\n  const SquirrelUpdate = require('../update/squirrel-update')\n  const squirrelCommand = process.argv[1]\n  SquirrelUpdate.handleStartupEvent(squirrelCommand)\n  return true\n}", "CodeBleu_score": 81.00259076511527}, {"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false\n  }\n\n  const SquirrelUpdate = require('../SquirrelUpdate')\n  const squirrelCommand = process.argv[1]\n  return SquirrelUpdate.handleStartupEvent(squirrelCommand)\n}", "CodeBleu_score": 85.52769724692672}, {"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false\n  }\n\n  const squirrelCommand = process.argv[1]\n  SquirrelUpdate.handleStartupEvent(squirrelCommand, app => {\n    return true\n  })\n}", "CodeBleu_score": 53.1014100719556}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform === 'win32' && filePath) {\n    const driveLetter = filePath.match(/^([a-zA-Z]):/)?.[1];\n    if (driveLetter) {\n      return filePath.replace(new RegExp(`^${driveLetter}:`), driveLetter.toUpperCase());\n    }\n  }\n  return filePath;\n}", "CodeBleu_score": 56.59887935362106}, {"code": "function normalizeDriveLetterName(filePath){\n\t    if (process.platform === 'win32' && filePath) {\n        const driveLetter = filePath.match(/^([a-zA-Z]):/);\n        if (driveLetter) {\n            const driveLetterUpper = driveLetter[1].toUpperCase();\n            filePath = filePath.replace(driveLetter[0], driveLetterUpper + ':');\n        }\n    }\n    return filePath;\n}", "CodeBleu_score": 51.682768440042246}, {"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform === 'win32' && filePath) {\n    const driveLetter = filePath.match(/^[a-zA-Z]:/)?.[0];\n    if (driveLetter) {\n      const uppercaseDriveLetter = driveLetter.toUpperCase();\n      filePath = filePath.replace(driveLetter, uppercaseDriveLetter);\n    }\n  }\n  return filePath;\n}", "CodeBleu_score": 59.61871274188134}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\t  let doneCount = this.parts.length;\n  this.parts.forEach(part => {\n    let reg = new Registry({\n      hive: 'HKCU',\n      key: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n    });\n    return reg.create(() =>\n      reg.set(part.name, Registry.REG_SZ, part.value, () => {\n        if (--doneCount === 0) return callback();\n      })\n    );\n  });\n}", "CodeBleu_score": 99.84241624848697}, {"code": "register(callback){\n\t    let doneCount = this.parts.length;\n    this.parts.forEach(part => {\n      let reg = new Registry({\n        hive: 'HKCU',\n        key: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n      });\n      return reg.create(() =>\n        reg.set(part.name, Registry.REG_SZ, part.value, () => {\n          if (--doneCount === 0) return callback();\n        })\n      );\n    });\n  }", "CodeBleu_score": 98.14143000181818}, {"code": "register(callback){\n\t    let doneCount = this.parts.length;\n    this.parts.forEach(part => {\n      let reg = new Registry({\n        hive: 'HKCU',\n        key: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n      });\n      return reg.create(() =>\n        reg.set(part.name, Registry.REG_SZ, part.value, () => {\n          if (--doneCount === 0) return callback();\n        })\n      );\n    });\n  }", "CodeBleu_score": 98.14143000181818}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\t    if (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.20367713541347}, {"code": "showSaveDialog(options, callback){\n\t    if (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.20367713541347}, {"code": "showSaveDialog(options, callback){\n\t    if (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.20367713541347}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\t  let dimensions = this.getWindowDimensions();\n  if (!this.isValidDimensions(dimensions)) {\n    dimensions = this.getDefaultWindowDimensions();\n    this.setWindowDimensions(dimensions);\n  }\n  return dimensions;\n}", "CodeBleu_score": 27.150480053468257}, {"code": "async restoreWindowDimensions(){\n\t    const dimensions = this.getWindowDimensions();\n    if (this.isValidDimensions(dimensions)) {\n      await this.setWindowDimensions(dimensions);\n      return dimensions;\n    } else {\n      const defaultDimensions = this.getDefaultWindowDimensions();\n      await this.setWindowDimensions(defaultDimensions);\n      return defaultDimensions;\n    }\n  }", "CodeBleu_score": 26.051534899066564}, {"code": "async restoreWindowDimensions(){\n\t  let { x, y, width, height } = this.getDefaultWindowDimensions();\n  const currentBounds = await this.getBounds();\n  if (!this.isValidDimensions(currentBounds)) {\n    x = y = 0;\n    width = currentBounds.width;\n    height = currentBounds.height;\n  }\n  await this.setWindowDimensions({ x, y, width, height });\n  return { x, y, width, height };\n}", "CodeBleu_score": 21.381167899505915}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t  const showErrorDialog = (title, message) => {\n    dialog.showMessageBox({\n      type: 'error',\n      title,\n      message,\n    });\n  };\n\n  const installAtomCommand = async () => {\n    try {\n      await this.applicationDelegate.installAtomCommand();\n    } catch (error) {\n      showErrorDialog('Atom Command Installation Failed', error.message);\n      return false;\n    }\n    return true;\n  };\n\n  const installApmCommand = async () => {\n    try {\n      await this.applicationDelegate.installApmCommand();\n    } catch (error) {\n      showErrorDialog('APM Command Installation Failed', error.message);\n      return false;\n    }\n    return true;\n  };\n\n  const installShellCommands = async () => {\n    const atomCommandInstalled = await installAtomCommand();\n    const apmCommandInstalled = await installApmCommand();\n\n    if (atomCommandInstalled && apmCommandInstalled) {\n      this.applicationDelegate.confirm({\n        message: 'Shell commands installed successfully.',\n        buttons: ['OK'],\n      });\n    }\n  };\n\n  installShellCommands();\n}", "CodeBleu_score": 38.47430130042976}, {"code": "installShellCommandsInteractively(){\n\t  const showErrorDialog = (error) => {\n    const dialog = new Dialog(\n      \"Failed to Install Shell Commands\",\n      `An error occurred while installing the shell commands: ${error.message}`,\n      [Dialog.cancelButton(\"OK\")]\n    );\n    dialog.show();\n  };\n\n  const installAtomCommand = async () => {\n    try {\n      const atomPath = this.applicationDelegate.atomPath;\n      await this.applicationDelegate.installShellCommand(\n        \"atom\",\n        atomPath,\n        \"Interactively Install Atom Command\"\n      );\n      console.log(`Atom command installed successfully: ${atomPath}`);\n    } catch (error) {\n      console.error(\"Failed to install Atom command:\", error);\n      throw error;\n    }\n  };\n\n  const installApmCommand = async () => {\n    try {\n      const apmPath = this.applicationDelegate.apmPath;\n      await this.applicationDelegate.installShellCommand(\n        \"apm\",\n        apmPath,\n        \"Interactively Install APM Command\"\n      );\n      console.log(`APM command installed successfully: ${apmPath}`);\n    } catch (error) {\n      console.error(\"Failed to install APM command:\", error);\n      throw error;\n    }\n  };\n\n  try {\n    await installAtomCommand();\n    await installApmCommand();\n\n    const dialog = new Dialog(\n      \"Shell Commands Installed\",\n      \"The shell commands have been installed successfully.\",\n      [Dialog.okButton(\"OK\")]\n    );\n    dialog.show();\n  } catch (error) {\n    showErrorDialog(error);\n  }\n}", "CodeBleu_score": 32.86055425691241}, {"code": "installShellCommandsInteractively(){\n\t  // Define a helper function to display an error dialog if installation fails\n  function showErrorDialog(error) {\n    const errorDialog = new ErrorDialog(error);\n    errorDialog.show();\n  }\n\n  // Install the Atom command interactively\n  this.installAtomCommandInteractively()\n    .then(() => {\n      // If Atom command installation is successful, install the APM command\n      return this.installAPMCommandInteractively();\n    })\n    .then(() => {\n      // If both commands are installed successfully, show a confirmation dialog\n      this.applicationDelegate.confirm({\n        message: 'Shell commands installed successfully.',\n        buttons: ['OK'],\n      });\n    })\n    .catch((error) => {\n      // If any installation fails, show an error dialog with the failure details\n      showErrorDialog(error);\n    });\n}", "CodeBleu_score": 23.571938510432812}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t    if (process.platform !== 'darwin') return callback();\n\n    const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n    fs.readlink(destinationPath, (error, realpath) => {\n      if (error && error.code !== 'ENOENT') return callback(error);\n      if (realpath === commandPath) return callback(null, commandName);\n      this.createSymlink(fs, commandPath, destinationPath, error => {\n        if (error && error.code === 'EACCES' && askForPrivilege) {\n          const fsAdmin = require('fs-admin');\n          this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n            callback(error, commandName);\n          });\n        } else {\n          callback(error);\n        }\n      });\n    });\n  }", "CodeBleu_score": 98.74033908955127}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t  if (process.platform !== 'darwin') return callback();\n\n  const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n  fs.readlink(destinationPath, (error, realpath) => {\n    if (error && error.code !== 'ENOENT') return callback(error);\n    if (realpath === commandPath) return callback(null, commandName);\n    this.createSymlink(fs, commandPath, destinationPath, error => {\n      if (error && error.code === 'EACCES' && askForPrivilege) {\n        const fsAdmin = require('fs-admin');\n        this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n          callback(error, commandName);\n        });\n      } else {\n        callback(error);\n      }\n    });\n  });\n}", "CodeBleu_score": 99.91905957965677}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t  if (process.platform !== 'darwin') return callback();\n\n  const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n  fs.readlink(destinationPath, (error, realpath) => {\n    if (error && error.code !== 'ENOENT') return callback(error);\n    if (realpath === commandPath) return callback(null, commandName);\n    this.createSymlink(fs, commandPath, destinationPath, error => {\n      if (error && error.code === 'EACCES' && askForPrivilege) {\n        const fsAdmin = require('fs-admin');\n        this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n          callback(error, commandName);\n        });\n      } else {\n        callback(error);\n      }\n    });\n  });\n}", "CodeBleu_score": 99.91905957965677}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    let row, column;\n    const range = this.marker.getScreenRange();\n    if (moveToEndOfSelection && !range.isEmpty()) {\n      ({ row, column } = range.start);\n    } else {\n      ({ row, column } = this.getScreenPosition());\n    }\n\n    if (this.goalColumn != null) column = this.goalColumn;\n    this.setScreenPosition(\n      { row: row - rowCount, column },\n      { skipSoftWrapIndentation: true }\n    );\n    this.goalColumn = column;\n  }", "CodeBleu_score": 98.17375034687622}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    let row, column;\n    const range = this.marker.getScreenRange();\n    if (moveToEndOfSelection && !range.isEmpty()) {\n      ({ row, column } = range.start);\n    } else {\n      ({ row, column } = this.getScreenPosition());\n    }\n\n    if (this.goalColumn != null) column = this.goalColumn;\n    this.setScreenPosition(\n      { row: row - rowCount, column },\n      { skipSoftWrapIndentation: true }\n    );\n    this.goalColumn = column;\n  }", "CodeBleu_score": 98.17375034687622}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    let row, column;\n    const range = this.marker.getScreenRange();\n    if (moveToEndOfSelection && !range.isEmpty()) {\n      ({ row, column } = range.start);\n    } else {\n      ({ row, column } = this.getScreenPosition());\n    }\n\n    if (this.goalColumn != null) column = this.goalColumn;\n    this.setScreenPosition(\n      { row: row - rowCount, column },\n      { skipSoftWrapIndentation: true }\n    );\n    this.goalColumn = column;\n  }", "CodeBleu_score": 98.17375034687622}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarkerId = {};\n    for (const layer of this.decorationCountsByLayer.keys()) {\n      for (const marker of layer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow]\n      })) {\n        const decorations = this.decorationsByMarker.get(marker);\n        if (decorations) {\n          decorationsByMarkerId[marker.id] = Array.from(decorations);\n        }\n      }\n    }\n    return decorationsByMarkerId;\n  }", "CodeBleu_score": 98.40391866377631}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarkerId = {};\n    for (const layer of this.decorationCountsByLayer.keys()) {\n      for (const marker of layer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow]\n      })) {\n        const decorations = this.decorationsByMarker.get(marker);\n        if (decorations) {\n          decorationsByMarkerId[marker.id] = Array.from(decorations);\n        }\n      }\n    }\n    return decorationsByMarkerId;\n  }", "CodeBleu_score": 98.40391866377631}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarkerId = {};\n    for (const layer of this.decorationCountsByLayer.keys()) {\n      for (const marker of layer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow]\n      })) {\n        const decorations = this.decorationsByMarker.get(marker);\n        if (decorations) {\n          decorationsByMarkerId[marker.id] = Array.from(decorations);\n        }\n      }\n    }\n    return decorationsByMarkerId;\n  }", "CodeBleu_score": 98.40391866377631}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      throw new Error('Cannot decorate a destroyed marker layer');\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (layerDecorations == null) {\n      layerDecorations = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n    }\n    layerDecorations.add(decoration);\n    this.observeDecoratedLayer(markerLayer, false);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 98.6688905101872}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      throw new Error('Cannot decorate a destroyed marker layer');\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (layerDecorations == null) {\n      layerDecorations = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n    }\n    layerDecorations.add(decoration);\n    this.observeDecoratedLayer(markerLayer, false);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 98.6688905101872}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      throw new Error('Cannot decorate a destroyed marker layer');\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (layerDecorations == null) {\n      layerDecorations = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n    }\n    layerDecorations.add(decoration);\n    this.observeDecoratedLayer(markerLayer, false);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 98.6688905101872}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t    const newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.24354725818874}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t    const newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.24354725818874}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t    const newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.24354725818874}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t    this.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n\n      this.loadStylesheets();\n      // Unfortunately some packages are accessing `@mainModulePath`, so we need\n      // to compute that variable eagerly also for preloaded packages.\n      this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 73.26622472248316}, {"code": "finishLoading(){\n\t    this.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n\n      this.loadStylesheets();\n      // Unfortunately some packages are accessing `@mainModulePath`, so we need\n      // to compute that variable eagerly also for preloaded packages.\n      this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 73.26622472248316}, {"code": "finishLoading(){\n\t    this.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n\n      this.loadStylesheets();\n      // Unfortunately some packages are accessing `@mainModulePath`, so we need\n      // to compute that variable eagerly also for preloaded packages.\n      this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 73.26622472248316}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t    // User preference deciding which action to take on a title bar double-click\n    switch (\n      this.applicationDelegate.getUserDefault(\n        'AppleActionOnDoubleClick',\n        'string'\n      )\n    ) {\n      case 'Minimize':\n        this.applicationDelegate.minimizeWindow();\n        break;\n      case 'Maximize':\n        if (this.applicationDelegate.isWindowMaximized()) {\n          this.applicationDelegate.unmaximizeWindow();\n        } else {\n          this.applicationDelegate.maximizeWindow();\n        }\n        break;\n    }\n  }", "CodeBleu_score": 72.99098094407736}, {"code": "dblclickHandler(){\n\t    // User preference deciding which action to take on a title bar double-click\n    switch (\n      this.applicationDelegate.getUserDefault(\n        'AppleActionOnDoubleClick',\n        'string'\n      )\n    ) {\n      case 'Minimize':\n        this.applicationDelegate.minimizeWindow();\n        break;\n      case 'Maximize':\n        if (this.applicationDelegate.isWindowMaximized()) {\n          this.applicationDelegate.unmaximizeWindow();\n        } else {\n          this.applicationDelegate.maximizeWindow();\n        }\n        break;\n    }\n  }", "CodeBleu_score": 72.99098094407736}, {"code": "dblclickHandler(){\n\t    // User preference deciding which action to take on a title bar double-click\n    switch (\n      this.applicationDelegate.getUserDefault(\n        'AppleActionOnDoubleClick',\n        'string'\n      )\n    ) {\n      case 'Minimize':\n        this.applicationDelegate.minimizeWindow();\n        break;\n      case 'Maximize':\n        if (this.applicationDelegate.isWindowMaximized()) {\n          this.applicationDelegate.unmaximizeWindow();\n        } else {\n          this.applicationDelegate.maximizeWindow();\n        }\n        break;\n    }\n  }", "CodeBleu_score": 72.99098094407736}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\t    const settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n    if (settingWins.length >= 1) {\n      // A setting window is already created\n      const browserSettingWindow = settingWins[0].win.browserWindow\n      browserSettingWindow.webContents.send('settings::change-tab', category)\n      if (isLinux) {\n        browserSettingWindow.focus()\n      } else {\n        browserSettingWindow.moveTop()\n      }\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 98.38961386113661}, {"code": "_openSettingsWindow (category){\n\t    const settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n    if (settingWins.length >= 1) {\n      // A setting window is already created\n      const browserSettingWindow = settingWins[0].win.browserWindow\n      browserSettingWindow.webContents.send('settings::change-tab', category)\n      if (isLinux) {\n        browserSettingWindow.focus()\n      } else {\n        browserSettingWindow.moveTop()\n      }\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 98.38961386113661}, {"code": "_openSettingsWindow (category){\n\t    const settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n    if (settingWins.length >= 1) {\n      // A setting window is already created\n      const browserSettingWindow = settingWins[0].win.browserWindow\n      browserSettingWindow.webContents.send('settings::change-tab', category)\n      if (isLinux) {\n        browserSettingWindow.focus()\n      } else {\n        browserSettingWindow.moveTop()\n      }\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 98.38961386113661}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t  if (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n  const { windows } = this\n  const lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n  if (this.windowCount <= 1) {\n    return [{ windowId: lastActiveEditorId, fileList }]\n  }\n\n  // Array of scores, same order like fileList.\n  let filePathScores = null\n  for (const window of windows.values()) {\n    if (window.type === WindowType.EDITOR) {\n      const scores = window.getCandidateScores(fileList)\n      if (!filePathScores) {\n        filePathScores = scores\n      } else {\n        const len = filePathScores.length\n        for (let i = 0; i < len; ++i) {\n          // Update score only if the file is not already opened.\n          if (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n            filePathScores[i] = scores[i]\n          }\n        }\n      }\n    }\n  }\n\n  const buf = []\n  const len = filePathScores.length\n  for (let i = 0; i < len; ++i) {\n    let { id: windowId, score } = filePathScores[i]\n\n    if (score === -1) {\n      // Skip files that already opened.\n      continue\n    } else if (score === 0) {\n      // There is no best window to open the file(s) in.\n      windowId = lastActiveEditorId\n    }\n\n    let item = buf.find(w => w.windowId === windowId)\n    if (!item) {\n      item = { windowId, fileList: [] }\n      buf.push(item)\n    }\n    item.fileList.push(fileList[i])\n  }\n  return buf\n}", "CodeBleu_score": 99.95377814502979}, {"code": "findBestWindowToOpenIn (fileList){\n\t  if (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n  const { windows } = this\n  const lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n  if (this.windowCount <= 1) {\n    return [{ windowId: lastActiveEditorId, fileList }]\n  }\n\n  // Array of scores, same order like fileList.\n  let filePathScores = null\n  for (const window of windows.values()) {\n    if (window.type === WindowType.EDITOR) {\n      const scores = window.getCandidateScores(fileList)\n      if (!filePathScores) {\n        filePathScores = scores\n      } else {\n        const len = filePathScores.length\n        for (let i = 0; i < len; ++i) {\n          // Update score only if the file is not already opened.\n          if (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n            filePathScores[i] = scores[i]\n          }\n        }\n      }\n    }\n  }\n\n  const buf = []\n  const len = filePathScores.length\n  for (let i = 0; i < len; ++i) {\n    let { id: windowId, score } = filePathScores[i]\n\n    if (score === -1) {\n      // Skip files that already opened.\n      continue\n    } else if (score === 0) {\n      // There is no best window to open the file(s) in.\n      windowId = lastActiveEditorId\n    }\n\n    let item = buf.find(w => w.windowId === windowId)\n    if (!item) {\n      item = { windowId, fileList: [] }\n      buf.push(item)\n    }\n    item.fileList.push(fileList[i])\n  }\n  return buf\n}", "CodeBleu_score": 99.95377814502979}, {"code": "findBestWindowToOpenIn (fileList){\n\t  if (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n  const { windows } = this\n  const lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n  if (this.windowCount <= 1) {\n    return [{ windowId: lastActiveEditorId, fileList }]\n  }\n\n  // Array of scores, same order like fileList.\n  let filePathScores = null\n  for (const window of windows.values()) {\n    if (window.type === WindowType.EDITOR) {\n      const scores = window.getCandidateScores(fileList)\n      if (!filePathScores) {\n        filePathScores = scores\n      } else {\n        const len = filePathScores.length\n        for (let i = 0; i < len; ++i) {\n          // Update score only if the file is not already opened.\n          if (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n            filePathScores[i] = scores[i]\n          }\n        }\n      }\n    }\n  }\n\n  const buf = []\n  const len = filePathScores.length\n  for (let i = 0; i < len; ++i) {\n    let { id: windowId, score } = filePathScores[i]\n\n    if (score === -1) {\n      // Skip files that already opened.\n      continue\n    } else if (score === 0) {\n      // There is no best window to open the file(s) in.\n      windowId = lastActiveEditorId\n    }\n\n    let item = buf.find(w => w.windowId === windowId)\n    if (!item) {\n      item = { windowId, fileList: [] }\n      buf.push(item)\n    }\n    item.fileList.push(fileList[i])\n  }\n  return buf\n}", "CodeBleu_score": 99.95377814502979}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n  for (const [encoding, bom] of BOM_ENCODINGS) {\n    if (checkSequence(buffer, bom)) {\n      return [encoding, true]\n    }\n  }\n  if (autoGuessEncoding) {\n    const guess = ced(buffer)\n    if (guess) {\n      encoding = guess.encoding\n      if (guess.confidence > 0.5) {\n        if (BOM_ENCODINGS.has(guess.encoding)) {\n          isBom = true\n        }\n      } else {\n        const lower = guess.encoding.toLowerCase()\n        if (BOM_ENCODINGS.has(lower)) {\n          encoding = lower\n          isBom = true\n        } else if (lower !== guess.encoding) {\n          encoding = guess.encoding.toLowerCase().replace(/[-_]/g, '')\n        }\n      }\n    }\n  }\n  return [encoding, isBom]\n}", "CodeBleu_score": 45.21215282623551}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8';\n  let isBom = false;\n\n  // Check for BOM encodings\n  for (const [encoding, sequence] of Object.entries(BOM_ENCODING_SEQUENCES)) {\n    if (checkSequence(buffer, sequence)) {\n      return [encoding, true];\n    }\n  }\n\n  // Guess encoding using ced and adjust based on map or lowercase\n  if (autoGuessEncoding) {\n    encoding = ced(buffer);\n    if (encoding === 'utf16be') {\n      encoding = 'utf16le';\n    } else if (encoding === 'utf16le') {\n      encoding = 'utf16be';\n    } else if (encoding === 'utf32be') {\n      encoding = 'utf32le';\n    } else if (encoding === 'utf32le') {\n      encoding = 'utf32be';\n    } else if (encoding === 'utf16') {\n      encoding = 'utf16be';\n    } else if (encoding === 'utf32') {\n      encoding = 'utf32be';\n    } else if (encoding === 'utf8') {\n      encoding = 'utf8';\n    } else {\n      encoding = encoding.toLowerCase().replace(/[^a-z0-9]/g, '');\n    }\n  }\n\n  return [encoding, isBom];\n}", "CodeBleu_score": 47.999961654611376}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8';\n  let isBom = false;\n\n  for (const [encodingName, bom] of Object.entries(boms)) {\n    if (checkSequence(buffer, bom)) {\n      encoding = encodingName;\n      isBom = true;\n      break;\n    }\n  }\n\n  if (autoGuessEncoding) {\n    const guessedEncoding = ced(buffer);\n    encoding = encodingMap[guessedEncoding] || guessedEncoding.toLowerCase().replace(/[^a-z0-9]/g, '');\n  }\n\n  return { encoding, isBom };\n}", "CodeBleu_score": 50.559689056931575}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const {\n    encoding = 'utf8',\n    bom = true,\n    lineEnding = 'LF',\n    ext = '.md'\n  } = options || {}\n\n  const lineEndingBuffer = convertLineEndings(content, lineEnding)\n  const encodedBuffer = iconv.encode(lineEndingBuffer, encoding, {\n    addBOM: bom\n  })\n  writeFile(pathname + (ext || ''), encodedBuffer)\n}", "CodeBleu_score": 33.753853175749256}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { encoding, bom, lineEndings } = options\n\n  const lineEndingsSetting = lineEndings || 'LF'\n\n  const lineEndingsAdjustment =\n    lineEndingsSetting !== 'LF' && lineEndingsSetting !== 'CRLF'\n      ? lineEndingsSetting\n      : lineEndingsSetting === 'CRLF'\n      ? '\\r\n'\n      : '\n'\n\n  const encodingSetting = encoding || 'UTF-8'\n\n  const bomSetting = bom || false\n\n  const fileExtension = path.extname(pathname)\n\n  const fileExtensionSetting = fileExtension ? fileExtension : '.md'\n\n  const filePath = pathname.endsWith(fileExtensionSetting)\n    ? pathname\n    : pathname + fileExtensionSetting\n\n  const contentBuffer = iconv.encode(\n    convertLineEndings(content, lineEndingsAdjustment),\n    encodingSetting,\n    bomSetting\n  )\n\n  writeFile(filePath, contentBuffer)\n}", "CodeBleu_score": 26.565707042966725}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { encoding, bom, lineEnding } = options\n  const ext = path.extname(pathname)\n  const lineEndingToUse = lineEnding || '\n'\n  const encodingToUse = encoding || 'utf8'\n  const bomToUse = bom || false\n\n  if (ext !== '.md') {\n    pathname += '.md'\n  }\n\n  const lineEndings = convertLineEndings(content, lineEndingToUse)\n  const encoded = iconv.encode(lineEndings, encodingToUse, bomToUse)\n  writeFile(pathname, encoded)\n}", "CodeBleu_score": 35.24934851983323}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('getKeyboardInfo', async () => {\n    const keyboardInfo = await getKeyboardInfo()\n    return keyboardInfo\n  })\n\n  ipcMain.on('dumpKeyboardInfo', async () => {\n    const keyboardInfo = await getKeyboardInfo()\n    const content = JSON.stringify(keyboardInfo, null, 2)\n    const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n    fsPromises.writeFile(dumpPath, content, 'utf8')\n      .then(() => {\n        console.log(`Keyboard information written to \"${dumpPath}\".`)\n        shell.openPath(dumpPath)\n      })\n      .catch(err => {\n        log.error(err)\n      })\n  })\n}", "CodeBleu_score": 66.59618375096241}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('getKeyboardInfo', () => {\n    return getKeyboardInfo()\n  })\n\n  ipcMain.on('dumpKeyboardInfo', () => {\n    const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n    const content = JSON.stringify(getKeyboardInfo(), null, 2)\n\n    fsPromises.writeFile(dumpPath, content, 'utf8')\n      .then(() => {\n        console.log(`Keyboard information written to \"${dumpPath}\".`)\n        shell.openPath(dumpPath)\n      })\n      .catch(log.error)\n  })\n}", "CodeBleu_score": 70.13263811521267}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('get-keyboard-info', () => {\n    return getKeyboardInfo()\n  })\n\n  ipcMain.on('dump-keyboard-info', () => {\n    const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n    const content = JSON.stringify(getKeyboardInfo())\n\n    fsPromises.writeFile(dumpPath, content, 'utf8')\n      .then(() => {\n        console.log(`Keyboard information written to \"${dumpPath}\".`)\n        shell.openPath(dumpPath)\n      })\n      .catch((err) => {\n        log.error(err)\n      })\n  })\n}", "CodeBleu_score": 68.33087932878044}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t    // Update the key mapper to prevent problems on non-US keyboards.\n    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n    // Notify key mapper when the keyboard layout was changed.\n    keyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n      if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n        console.log('[DEBUG] Keyboard layout changed:\n', layout)\n      }\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 87.91865202636015}, {"code": "_prepareKeyMapper (){\n\t    // Update the key mapper to prevent problems on non-US keyboards.\n    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n    // Notify key mapper when the keyboard layout was changed.\n    keyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n      if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n        console.log('[DEBUG] Keyboard layout changed:\n', layout)\n      }\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 87.91865202636015}, {"code": "_prepareKeyMapper (){\n\t    // Update the key mapper to prevent problems on non-US keyboards.\n    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n    // Notify key mapper when the keyboard layout was changed.\n    keyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n      if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n        console.log('[DEBUG] Keyboard layout changed:\n', layout)\n      }\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 87.91865202636015}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t  // Remove aria2c unrecognized options\n  const { others } = separateConfig(this.systemConfig.store)\n  if (others && Object.keys(others).length > 0) {\n    Object.keys(others).forEach(key => {\n      this.systemConfig.delete(key)\n    })\n  }\n\n  const proxy = this.getUserConfig('proxy', { enable: false })\n  const { enable, server, bypass, scope = [] } = proxy\n  if (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n    this.setSystemConfig('all-proxy', server)\n    this.setSystemConfig('no-proxy', bypass)\n  }\n\n  // Fix spawn ENAMETOOLONG on Windows\n  const tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\n  this.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 99.95857498877356}, {"code": "fixSystemConfig (){\n\t  // Remove aria2c unrecognized options\n  const { others } = separateConfig(this.systemConfig.store)\n  if (others && Object.keys(others).length > 0) {\n    Object.keys(others).forEach(key => {\n      this.systemConfig.delete(key)\n    })\n  }\n\n  const proxy = this.getUserConfig('proxy', { enable: false })\n  const { enable, server, bypass, scope = [] } = proxy\n  if (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n    this.setSystemConfig('all-proxy', server)\n    this.setSystemConfig('no-proxy', bypass)\n  }\n\n  // Fix spawn ENAMETOOLONG on Windows\n  const tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\n  this.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 99.95857498877356}, {"code": "fixSystemConfig (){\n\t  // Remove aria2c unrecognized options\n  const { others } = separateConfig(this.systemConfig.store)\n  if (others && Object.keys(others).length > 0) {\n    Object.keys(others).forEach(key => {\n      this.systemConfig.delete(key)\n    })\n  }\n\n  const proxy = this.getUserConfig('proxy', { enable: false })\n  const { enable, server, bypass, scope = [] } = proxy\n  if (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n    this.setSystemConfig('all-proxy', server)\n    this.setSystemConfig('no-proxy', bypass)\n  }\n\n  // Fix spawn ENAMETOOLONG on Windows\n  const tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\n  this.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 99.95857498877356}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\t  if (!client) {\n    return\n  }\n\n  try {\n    client.destroy(() => {\n      client = null\n    })\n  } catch (err) {\n    logger.warn('[Motrix] close UPnP client fail', err)\n  }\n}", "CodeBleu_score": 99.6766264907754}, {"code": "closeClient (){\n\t  if (!client) {\n    return\n  }\n\n  try {\n    client.destroy(() => {\n      client = null\n    })\n  } catch (err) {\n    logger.warn('[Motrix] close UPnP client fail', err)\n  }\n}", "CodeBleu_score": 99.6766264907754}, {"code": "closeClient (){\n\t  if (!client) {\n    return\n  }\n\n  try {\n    client.destroy(() => {\n      client = null\n    })\n  } catch (err) {\n    logger.warn('[Motrix] close UPnP client fail', err)\n  }\n}", "CodeBleu_score": 99.6766264907754}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\t    let bar = this.bars[page] || null\n    if (!bar) {\n      try {\n        const items = this.build(this.template)\n        bar = new TouchBar({ items })\n        this.bars[page] = bar\n      } catch (e) {\n        logger.info('getTouchBarByPage fail', e)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 97.64773456940084}, {"code": "getTouchBarByPage (page){\n\t    let bar = this.bars[page] || null\n    if (!bar) {\n      try {\n        const items = this.build(this.template)\n        bar = new TouchBar({ items })\n        this.bars[page] = bar\n      } catch (e) {\n        logger.info('getTouchBarByPage fail', e)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 97.64773456940084}, {"code": "getTouchBarByPage (page){\n\t    let bar = this.bars[page] || null\n    if (!bar) {\n      try {\n        const items = this.build(this.template)\n        bar = new TouchBar({ items })\n        this.bars[page] = bar\n      } catch (e) {\n        logger.info('getTouchBarByPage fail', e)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 97.64773456940084}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.willQuit) {\n      event.preventDefault()\n\n      // @see https://github.com/electron/electron/issues/20263\n      if (window.isFullScreen()) {\n        window.once('leave-full-screen', () => window.hide())\n\n        window.setFullScreen(false)\n      } else {\n        window.hide()\n      }\n    }\n    const bounds = window.getBounds()\n    this.emit('window-closed', { page, bounds })\n  })\n}", "CodeBleu_score": 99.8586518597948}, {"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.willQuit) {\n      event.preventDefault()\n\n      // @see https://github.com/electron/electron/issues/20263\n      if (window.isFullScreen()) {\n        window.once('leave-full-screen', () => window.hide())\n\n        window.setFullScreen(false)\n      } else {\n        window.hide()\n      }\n    }\n    const bounds = window.getBounds()\n    this.emit('window-closed', { page, bounds })\n  })\n}", "CodeBleu_score": 99.8586518597948}, {"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.willQuit) {\n      event.preventDefault()\n\n      // @see https://github.com/electron/electron/issues/20263\n      if (window.isFullScreen()) {\n        window.once('leave-full-screen', () => window.hide())\n\n        window.setFullScreen(false)\n      } else {\n        window.hide()\n      }\n    }\n    const bounds = window.getBounds()\n    this.emit('window-closed', { page, bounds })\n  })\n}", "CodeBleu_score": 99.8586518597948}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t    return new Promise((resolve, reject) => {\n        try {\n            const app = Application.currentApplication();\n            app.includeStandardAdditions = true;\n            const appName = app.name();\n            const appPath = app.path();\n            const appBundleId = app.bundleIdentifier();\n            const applicationsFolder = Path('/Applications');\n            const appBundlePath = applicationsFolder.concat(appName + '.app');\n\n            if (appPath.toString() === appBundlePath.toString()) {\n                resolve();\n            } else {\n                const result = app.moveToApplicationsFolder();\n                if (result) {\n                    resolve();\n                } else {\n                    reject(errorMsg);\n                }\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n}", "CodeBleu_score": 46.37719393472738}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    try {\n      const app = Application.currentApplication();\n      app.includeStandardAdditions = true;\n      const appName = app.name();\n      const appPath = app.path();\n      const applicationsFolderPath = '/Applications';\n      const appBundlePath = `${applicationsFolderPath}/${appName}.app`;\n\n      if (app.path().indexOf(applicationsFolderPath) !== -1) {\n        // App is already in the Applications folder\n        resolve();\n      } else {\n        // Move app to Applications folder\n        const moveApp = app.moveTo({\n          to: appBundlePath,\n          replacing: true,\n          suppressingEvents: true,\n        });\n\n        if (moveApp) {\n          // App moved successfully\n          resolve();\n        } else {\n          // App move failed\n          reject(errorMsg);\n        }\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}", "CodeBleu_score": 45.510946355136696}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    try {\n      const appPath = app.getAppPath()\n      const appName = app.getName()\n      const destPath = `/Applications/${appName}.app`\n      fs.rename(appPath, destPath, (err) => {\n        if (err) {\n          reject(new Error(errorMsg))\n        } else {\n          resolve()\n        }\n      })\n    } catch (error) {\n      reject(error)\n    }\n  })\n}", "CodeBleu_score": 56.306945546331896}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.debug('copying icons into application directory');\n\n  const icon = options.icon;\n  if (!icon) {\n    log.debug('no icon specified, skipping icon copying');\n    return;\n  }\n\n  if (process.platform === 'darwin' || process.platform === 'mas') {\n    if (options.tray !== 'false') {\n      log.debug('copying tray icon');\n      await fs.copy(icon, path.join(appPath, 'icon.png'));\n    }\n  } else {\n    log.debug('copying icon');\n    const extension = path.extname(icon);\n    const newIconName = `icon${extension}`;\n    await fs.copy(icon, path.join(appPath, newIconName));\n  }\n}", "CodeBleu_score": 36.29378456816653}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.debug('copying icons');\n\n  if (!options.icon) {\n    log.debug('no icon');\n    return;\n  }\n\n  if (\n    (process.platform === 'darwin' || process.platform === 'mas') &&\n    options.tray !== false\n  ) {\n    log.debug('copying tray icon');\n    await fs.copy(options.icon, path.join(appPath, 'icon.png'));\n  } else {\n    log.debug('copying icon');\n    await fs.copy(\n      options.icon,\n      path.join(appPath, `icon${path.extname(options.icon)}`),\n    );\n  }\n}", "CodeBleu_score": 28.95714380201284}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.debug('Copying icons into application folder');\n\n  if (!options.icon) {\n    log.debug('No icon specified, skipping');\n    return;\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== 'false') {\n      await fs.copy(\n        options.icon,\n        path.join(appPath, 'icon.png'),\n        { overwrite: true },\n      );\n    }\n  } else {\n    await fs.copy(\n      options.icon,\n      path.join(appPath, `icon${path.extname(options.icon)}`),\n      { overwrite: true },\n    );\n  }\n}", "CodeBleu_score": 29.882492511183372}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex').substring(0, 6);\n  const normalizedAppName = appName\n    .toLowerCase()\n    .replace(/[,:.]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/_/g, '-')\n    .concat(`-nativefier-${hash}`);\n  return normalizedAppName;\n}", "CodeBleu_score": 64.04569666528784}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex').substring(0, 6);\n  const normalizedAppName = appName\n    .toLowerCase()\n    .replace(/[,:.]/g, '')\n    .replace(/[ _]/g, '-')\n    .replace(/--+/g, '-');\n\n  return `${normalizedAppName}-nativefier-${hash}`;\n}", "CodeBleu_score": 66.26073114406749}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex').substring(0, 6);\n  return `${appName.toLowerCase().replace(/[,:.]/g, '').replace(/[ _]/g, '-')}-nativefier-${hash}`;\n}", "CodeBleu_score": 45.67900783880272}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  const {\n    appName,\n    appBundleId,\n    appVersion,\n    appCopyright,\n    appIcon,\n    appInjectionScripts,\n    appPackageJsonName,\n    appBookmarksMenu,\n  } = options;\n\n  const normalizedAppName = appName.replace(/\\s+/g, '-').toLowerCase();\n\n  log.debug(`Copying ${src} to ${dest}`);\n  try {\n    await fs.copy(src, dest);\n  } catch (err) {\n    log.error(err);\n    process.exit(1);\n  }\n\n  const appConfig = {\n    appName,\n    appBundleId,\n    appVersion,\n    appCopyright,\n    appIcon,\n    appInjectionScripts,\n    appPackageJsonName,\n    appBookmarksMenu,\n  };\n\n  const appConfigPath = path.join(dest, 'app-config.json');\n  fs.writeFileSync(appConfigPath, JSON.stringify(appConfig, null, 2));\n\n  if (appBookmarksMenu) {\n    log.debug('Copying bookmarks menu');\n    try {\n      await fs.copy(appBookmarksMenu, path.join(dest, 'bookmarks-menu.json'));\n    } catch (err) {\n      log.error(err);\n      process.exit(1);\n    }\n  }\n\n  maybeCopyScripts(src, dest, appInjectionScripts);\n\n  changeAppPackageJsonName(dest, normalizedAppName);\n\n  setAppBundleId(dest, appBundleId);\n}", "CodeBleu_score": 44.385101574529465}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  const { appName, appBundleId, copyBookmarksMenu, injectScripts } = options;\n\n  log.debug(`Copying ${src} to ${dest}`);\n\n  try {\n    await fs.copy(src, dest);\n  } catch (err) {\n    log.error(`Error copying ${src} to ${dest}: ${err}`);\n    return;\n  }\n\n  log.debug(`Writing app config to ${dest}/config.json`);\n\n  const appConfig = {\n    appName,\n    appBundleId,\n    appArgs: pickElectronAppArgs(options),\n  };\n\n  fs.writeFile(\n    path.join(dest, 'config.json'),\n    JSON.stringify(appConfig, null, 2),\n    (err) => {\n      if (err) {\n        log.error(`Error writing app config to ${dest}/config.json: ${err}`);\n      }\n    },\n  );\n\n  if (copyBookmarksMenu) {\n    log.debug(`Copying bookmarks menu to ${dest}/bookmarks-menu.json`);\n\n    try {\n      await fs.copy(\n        path.join(__dirname, '../resources/bookmarks-menu.json'),\n        path.join(dest, 'bookmarks-menu.json'),\n      );\n    } catch (err) {\n      log.error(`Error copying bookmarks menu: ${err}`);\n    }\n  }\n\n  maybeCopyScripts(injectScripts, dest);\n\n  changeAppPackageJsonName(dest, appName);\n\n  setAppBundleId(dest, appBundleId);\n}", "CodeBleu_score": 41.795318820605665}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  log.debug(`copying ${src} to ${dest}`)\n  try {\n    await fs.copy(src, dest, { overwrite: true })\n  } catch (err) {\n    log.error(`failed to copy ${src} to ${dest}`)\n    throw err\n  }\n\n  const appConfig = {\n    name: options.name,\n    main: options.main,\n    version: options.version,\n    description: options.description,\n    author: options.author,\n    license: options.license,\n    electron: options.electron,\n    bookmarksMenu: options.bookmarksMenu,\n    args: pickElectronAppArgs(options),\n  }\n\n  try {\n    await fs.writeFile(\n      path.join(dest, 'app.json'),\n      JSON.stringify(appConfig, null, 2),\n    )\n  } catch (err) {\n    log.error(`failed to write app.json`)\n    throw err\n  }\n\n  if (options.bookmarksMenu) {\n    try {\n      await fs.copy(\n        path.join(__dirname, '../assets/bookmarksMenu.js'),\n        path.join(dest, 'bookmarksMenu.js'),\n        { overwrite: true },\n      )\n    } catch (err) {\n      log.error(`failed to copy bookmarksMenu.js`)\n      throw err\n    }\n  }\n\n  maybeCopyScripts(dest, options)\n\n  changeAppPackageJsonName(dest, options.name)\n  setAppBundleId(dest, normalizeAppName(options.name))\n}", "CodeBleu_score": 47.82231867953885}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  console.log(`Downloading file from ${fileUrl}`);\n  return fetch(fileUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/octet-stream\",\n    },\n  })\n    .then((response) => response.arrayBuffer())\n    .then((data) => {\n      if (data) {\n        const ext = path.extname(fileUrl);\n        return { data, ext };\n      }\n      return undefined;\n    });\n}", "CodeBleu_score": 57.352995677888075}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  console.log(`Downloading file from ${fileUrl}`);\n  return fetch(fileUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/octet-stream\",\n    },\n  })\n    .then((response) => response.arrayBuffer())\n    .then((data) => {\n      if (data.byteLength > 0) {\n        return {\n          data,\n          ext: path.extname(fileUrl),\n        };\n      }\n      return undefined;\n    })\n    .catch((error) => {\n      console.error(`Error downloading file from ${fileUrl}: ${error}`);\n      return undefined;\n    });\n}", "CodeBleu_score": 54.35181477760004}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  console.log(\"downloading file:\", fileUrl);\n  return fetch(fileUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/octet-stream\",\n    },\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.arrayBuffer();\n      }\n      throw new Error(\"Failed to download file\");\n    })\n    .then((data) => {\n      if (data) {\n        const ext = path.extname(fileUrl);\n        return { data, ext };\n      }\n      return undefined;\n    });\n}", "CodeBleu_score": 54.56370112326535}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t  return str\n    .split(\"-\")\n    .filter((word) => word.length > 0)\n    .map((word, index) =>\n      index === 0 ? word : word[0].toUpperCase() + word.substring(1)\n    )\n    .join(\"\");\n}", "CodeBleu_score": 59.83174434787328}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split('-')\n    .filter((word) => word.length > 0)\n    .map((word, index) => {\n      if (index === 0) {\n        return word;\n      }\n      return word[0].toUpperCase() + word.substring(1);\n    })\n    .join('');\n}", "CodeBleu_score": 68.24529385487381}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split(\"-\")\n    .filter((word) => word.length > 0)\n    .map((word, index) => {\n      if (index === 0) {\n        return word;\n      }\n      return word[0].toUpperCase() + word.substring(1);\n    })\n    .join(\"\");\n}", "CodeBleu_score": 63.81941990641356}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  let sanitizedFilename = sanitize(filenameToSanitize, {\n    replacement: '-',\n  });\n\n  if (platform === 'linux') {\n    sanitizedFilename = sanitizedFilename.replace(/\\s+/g, '');\n    sanitizedFilename = sanitizedFilename.replace(/[^\\w\\s-]/gi, '');\n  }\n\n  if (sanitizedFilename === '') {\n    log.warn(\n      'The sanitized filename is empty. This may cause issues with the application.',\n    );\n    sanitizedFilename = 'application';\n  }\n\n  log.debug(`Sanitized filename: ${sanitizedFilename}`);\n  return sanitizedFilename;\n}", "CodeBleu_score": 47.58389557622402}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  let result = filenameToSanitize\n    .replace(/[^a-z0-9]/gi, '_')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9]/gi, '_')\n\n  if (platform === 'linux') {\n    result = result\n      .replace(/\\s+/g, ' ')\n      .replace(/[^a-z0-9\\s]/gi, '')\n      .replace(/\\s+/g, '_')\n  }\n\n  if (result.length === 0) {\n    result = 'application'\n    log.warn(\n      'The sanitized filename is empty. Falling back to default name: ' + result,\n    )\n  }\n\n  log.debug(`Sanitized filename: ${result}`)\n\n  return result\n}", "CodeBleu_score": 48.747826327531804}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  let sanitizedFilename = sanitize(filenameToSanitize, {\n    replacement: '-',\n  });\n\n  if (platform === 'linux') {\n    sanitizedFilename = sanitizedFilename.replace(/[<>:\"/\\\\|?*\\x00-\\x1F]/g, '');\n    sanitizedFilename = sanitizedFilename.replace(/\\s+/g, ' ');\n    sanitizedFilename = sanitizedFilename.replace(/^\\.+$/, '');\n  }\n\n  if (sanitizedFilename === '') {\n    const defaultAppName = 'MyApp';\n    sanitizedFilename = defaultAppName;\n    log.warn(\n      `Sanitized filename is empty. Using default app name: ${defaultAppName}`,\n    );\n  }\n\n  log.debug(`Sanitized filename: ${sanitizedFilename}`);\n  return sanitizedFilename;\n}", "CodeBleu_score": 45.971900084975836}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = parseInt(savedCache.duration);\n    return savedCache.timeStamp + duration < new Date().getTime();\n}", "CodeBleu_score": 25.20022710067963}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = parseInt(savedCache.duration);\n    return savedCache.time + duration < new Date().getTime();\n  }", "CodeBleu_score": 25.121020838067622}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t  const currentTime = new Date().getTime();\n  const duration = parseInt(savedCache.duration as string, 10);\n  return savedCache.timeStamp + duration < currentTime;\n}", "CodeBleu_score": 27.92642265975524}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument !== undefined) {\n        if (typeof timestampOptionArgument !== 'number' || timestampOptionArgument < 0) {\n            throw new TypeORMError(`ORM generation version must be a non-negative number.`);\n        }\n        return new Date(Number(timestampOptionArgument)).getTime();\n    }\n    return Date.now();\n}", "CodeBleu_score": 41.0914330230465}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument !== undefined) {\n        if (typeof timestampOptionArgument !== \"number\" || timestampOptionArgument < 0) {\n            throw new TypeORMError(\n                `ORM Configuration Error: Wrong type of the timestamp option. ` +\n                    `Its value must be a number (a timestamp) and must be positive.`\n            );\n        }\n        return timestampOptionArgument;\n    }\n    return Date.now();\n}", "CodeBleu_score": 49.33661490017892}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument !== undefined) {\n        if (typeof timestampOptionArgument !== \"number\" || timestampOptionArgument < 0) {\n            throw new TypeORMError(\n                `ORM Configuration Error: Wrong type of the timestamp option. ` +\n                    `Its value must be a number.`,\n            )\n        }\n        return new Date(Number(timestampOptionArgument)).getTime()\n    }\n    return Date.now()\n}", "CodeBleu_score": 50.88377276679101}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t", "CodeBleu_score": 1.7269913428206933}, {"code": " async dropDatabase(): Promise<void>{\n\t    const queryRunner = this.connection.createQueryRunner();\n    const databaseType = queryRunner.connection.driver.database;\n    const databaseNames = this.getDatabaseNames();\n\n    await queryRunner.connect();\n\n    if (databaseType === 'mysql' || databaseType === 'mariadb') {\n      await queryRunner.query(`DROP DATABASE IF EXISTS ${databaseNames.join(',')}`);\n    } else if (databaseType === 'postgres') {\n      await queryRunner.query(`DROP DATABASE IF EXISTS ${databaseNames.join('; DROP DATABASE IF EXISTS ')}`);\n    } else if (databaseType === 'sqlite') {\n      await queryRunner.query(`DROP DATABASE IF EXISTS ${databaseNames.join('; DROP DATABASE IF EXISTS ')}`);\n    } else if (databaseType === 'oracle') {\n      await queryRunner.query(`DROP DATABASE IF EXISTS ${databaseNames.join('; DROP DATABASE IF EXISTS ')}`);\n    } else if (databaseType === 'mssql') {\n      await queryRunner.query(`DROP DATABASE IF EXISTS ${databaseNames.join('; DROP DATABASE IF EXISTS ')}`);\n    } else {\n      throw new Error(`Database type ${databaseType} is not supported.`);\n    }\n\n    await queryRunner.release();\n  }", "CodeBleu_score": 38.78036866892661}, {"code": " async dropDatabase(): Promise<void>{\n\t    const queryRunner = this.connection.createQueryRunner();\n    const databaseType = queryRunner.connection.options.type;\n    const databaseName = queryRunner.connection.options.database;\n    const databaseNames = this.connection.entityMetadatas.reduce((names, entity) => {\n      return names.add(entity.database || databaseName);\n    }, new Set<string>());\n    try {\n      if (databaseType === 'postgres') {\n        // Need to close active connections to the database we are dropping\n        await queryRunner.query(\n          `SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${databaseName}'`,\n        );\n      }\n      for (const database of databaseNames) {\n        await queryRunner.dropDatabase(database, true);\n      }\n    } finally {\n      await queryRunner.release();\n    }\n  }", "CodeBleu_score": 39.87966317001632}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (InstanceChecker.isMongoEntityManager(this)) {\n            throw new Error(\n                'Query Builder is not supported by MongoDB. Please use the MongoRepository instead.',\n            );\n        }\n\n        if (alias) {\n            const metadata = this.connection.getMetadata(entityOrRunner as EntityTarget<Entity>);\n            return new SelectQueryBuilder(alias, metadata, this);\n        }\n\n        return new SelectQueryBuilder(entityOrRunner as EntityTarget<Entity>, this);\n    }", "CodeBleu_score": 37.61788357684024}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (this.isMongoEntityManager) {\n            throw new Error(\n                'Query Builder is not supported by MongoDB. Use MongoRepository instead.',\n            );\n        }\n        if (alias) {\n            const metadata = this.connection.getMetadata(entityOrRunner as EntityTarget<Entity>);\n            return new SelectQueryBuilder(entityOrRunner as EntityTarget<Entity>, alias, metadata, queryRunner);\n        }\n        return new SelectQueryBuilder(entityOrRunner as EntityTarget<Entity>, queryRunner);\n    }", "CodeBleu_score": 43.89210459547283}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (this.isMongoEntityManager) {\n            throw new Error(\n                `Query Builder is not supported by MongoDB.`,\n            );\n        }\n\n        if (alias) {\n            const metadata = this.connection.getMetadata(entityOrRunner as EntityTarget<Entity>);\n            return new SelectQueryBuilder<Entity>(alias, metadata, queryRunner);\n        } else {\n            return new SelectQueryBuilder<Entity>(entityOrRunner as EntityTarget<Entity>, queryRunner);\n        }\n    }", "CodeBleu_score": 50.15956340669207}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = this.connection.getMetadata(entityClass);\n        const transformer = new PlainObjectToDatabaseEntityTransformer(metadata);\n        const transformed = transformer.transform(entityLike);\n        if (transformed) {\n            return this.merge(entityClass, entityLike, transformed);\n        }\n        return undefined;\n    }", "CodeBleu_score": 45.62533385158065}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = this.connection.getMetadata(entityClass);\n        const transformer = new PlainObjectToDatabaseEntityTransformer(\n            this.connection,\n            metadata,\n        );\n        const transformed = transformer.transform(entityLike);\n        if (transformed) {\n            return this.merge(metadata.target, entityLike, transformed);\n        }\n        return undefined;\n    }", "CodeBleu_score": 49.9809986947177}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = this.connection.getMetadata(entityClass);\n        const transformer = new PlainObjectToDatabaseEntityTransformer(metadata);\n        const transformed = transformer.transform(entityLike);\n\n        if (transformed) {\n            return this.merge(entityClass, entityLike, transformed);\n        }\n\n        return undefined;\n    }", "CodeBleu_score": 45.62533385158065}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"flex items-center justify-between\">\n        <label htmlFor=\"compression\">Compression:</label>\n        <span>{compression}%</span>\n      </div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChange}\n        id=\"compression\"\n        className=\"w-full\"\n      />\n      {compression > 0 && (\n        <p className=\"text-sm\">\n          Note: PNG, JPG, and WebP compression are lossy, meaning that some\n          image data will be lost during compression.\n        </p>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 50.959863684230776}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"flex items-center justify-between\">\n        <label\n          htmlFor=\"compression\"\n          className=\"block text-sm font-medium text-gray-700\"\n        >\n          Compression\n        </label>\n        <span className=\"text-sm text-gray-500\">\n          {compression === 0 ? \"Lossless\" : compression + \"%\"}\n        </span>\n      </div>\n      <div className=\"mt-1\">\n        <input\n          type=\"range\"\n          min={0}\n          max={100}\n          value={compression}\n          onChange={handleCompressionChange}\n          className=\"w-full cursor-pointer appearance-none rounded-lg bg-gray-200\"\n        />\n      </div>\n      {compression > 0 && (\n        <p className=\"text-sm text-gray-500\">\n          PNG, JPG, and WebP compression are lossy.\n        </p>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 53.295162253878395}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-sm font-medium\">Compression</p>\n        <p className=\"text-sm text-gray-500\">{compression}%</p>\n      </div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChange}\n        className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n      />\n      {compression > 0 && (\n        <p className=\"text-xs text-gray-500\">\n          PNG, JPG, and WebP compression is lossy.\n        </p>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 51.648000054707346}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\t    const resArr = [];\n    const key = `${type}-${name}`;\n\n    for (const idx in this.attributeIndex) {\n        if (idx.startsWith(key)) {\n            resArr.push(this.attributeIndex[idx]);\n        }\n    }\n\n    return resArr.flat();\n}", "CodeBleu_score": 99.75853210342784}, {"code": "findAttributesWithPrefix(type, name){\n\t  const resArr = [];\n  const key = `${type}-${name}`;\n  for (const idx in this.attributeIndex) {\n    if (idx.startsWith(key)) {\n      resArr.push(this.attributeIndex[idx]);\n    }\n  }\n  return resArr.flat();\n}", "CodeBleu_score": 96.9634327315475}, {"code": "findAttributesWithPrefix(type, name){\n\t    const resArr = [];\n    const key = `${type}-${name}`;\n\n    for (const idx in this.attributeIndex) {\n        if (idx.startsWith(key)) {\n            resArr.push(this.attributeIndex[idx]);\n        }\n    }\n\n    return resArr.flat();\n}", "CodeBleu_score": 99.75853210342784}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t    let childNote = becca.notes.get(branchRow.noteId);\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n\n    let parentNote = becca.notes.get(branchRow.parentNoteId);\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 69.71001049076784}, {"code": "function branchUpdated(branchRow){\n\t    const childNote = becca.notes.getNote(branchRow.noteId)\n    if (childNote) {\n        childNote.flatTextCache = null\n        childNote.sortParents()\n        childNote.invalidateSubTree()\n    }\n\n    const parentNote = becca.notes.getNote(branchRow.parentNoteId)\n    if (parentNote) {\n        parentNote.sortChildren()\n    }\n}", "CodeBleu_score": 67.0955852954775}, {"code": "function branchUpdated(branchRow){\n\t  const childNote = becca.notes.findOne(branchRow.noteId);\n  if (childNote) {\n    childNote.flatTextCache = null;\n    childNote.sortParents();\n    childNote.invalidateSubTree();\n  }\n  const parentNote = becca.notes.findOne(branchRow.parentNoteId);\n  if (parentNote) {\n    parentNote.sortChildren();\n  }\n}", "CodeBleu_score": 76.01224353857076}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t  if (mime === null || mime === 'text/html') {\n    return mime;\n  }\n\n  if (!cache[mime]) {\n    const parts = mime.split('/');\n    const prefixes = ['text/', 'application/'];\n    const prefix = prefixes.find(p => mime.startsWith(p));\n    const suffix = mime.replace(prefix, '');\n    const trimmed = suffix.replace(/^-x-/, '');\n    cache[mime] = trimmed;\n  }\n\n  return cache[mime];\n}", "CodeBleu_score": 40.47088150494118}, {"code": "function trimMime(mime){\n\t  if (!mime || mime === 'text/html') {\n    return mime;\n  }\n\n  if (cache[mime]) {\n    return cache[mime];\n  }\n\n  const parts = mime.split('/');\n  const prefix = parts[0];\n  const suffix = parts[1];\n\n  if (prefix === 'text' || prefix === 'application') {\n    cache[mime] = suffix;\n    return suffix;\n  }\n\n  if (suffix.startsWith('x-')) {\n    cache[mime] = suffix.substr(2);\n    return suffix.substr(2);\n  }\n\n  cache[mime] = suffix;\n  return suffix;\n}", "CodeBleu_score": 46.181195122714925}, {"code": "function trimMime(mime){\n\t    if (mime == null || mime === 'text/html') {\n        return mime;\n    }\n\n    if (!trimMime.cache[mime]) {\n        var parts = mime.split('/');\n        var ignorePrefixes = ['text/', 'application/'];\n        var i = 0;\n        for (; i < ignorePrefixes.length; i++) {\n            if (mime.startsWith(ignorePrefixes[i])) {\n                parts[0] = parts[0].substr(ignorePrefixes[i].length);\n                break;\n            }\n        }\n        if (i === ignorePrefixes.length) {\n            parts = parts.slice(0, 1);\n        }\n        if (parts[0].startsWith('-x')) {\n            parts[0] = parts[0].substr(2);\n        }\n        trimMime.cache[mime] = parts.join('/');\n    }\n\n    return trimMime.cache[mime];\n}", "CodeBleu_score": 37.85257149056979}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t    const baseNoteDate = dateUtils.parseDateTime(baseNote.utcDateCreated);\n    const baseNoteDateTimestamp = baseNoteDate.getTime();\n\n    return {\n        minDate: dateUtils.utcDateTimeStr(baseNoteDateTimestamp - 1000 * 60 * 60 * 24),\n        minExcludedDate: dateUtils.utcDateTimeStr(baseNoteDateTimestamp - 1000 * 60 * 60 * 24 * 2),\n        maxExcludedDate: dateUtils.utcDateTimeStr(baseNoteDateTimestamp + 1000 * 60 * 60 * 24 * 2),\n        maxDate: dateUtils.utcDateTimeStr(baseNoteDateTimestamp + 1000 * 60 * 60 * 24),\n    };\n}", "CodeBleu_score": 36.47820345784897}, {"code": "function buildDateLimits(baseNote){\n\t    const creationDate = dateUtils.parseDateTime(baseNote.utcDateCreated);\n    const creationTimestamp = creationDate.getTime();\n\n    const minDate = new Date(creationTimestamp - 60 * 60 * 1000); // 1 hour before creation\n    const minExcludedDate = new Date(creationTimestamp - 24 * 60 * 60 * 1000); // 24 hours before creation\n    const maxExcludedDate = new Date(creationTimestamp + 24 * 60 * 60 * 1000); // 24 hours after creation\n    const maxDate = new Date(creationTimestamp + 60 * 60 * 1000); // 1 hour after creation\n\n    return {\n        minDate: dateUtils.utcDateTimeStr(minDate),\n        minExcludedDate: dateUtils.utcDateTimeStr(minExcludedDate),\n        maxExcludedDate: dateUtils.utcDateTimeStr(maxExcludedDate),\n        maxDate: dateUtils.utcDateTimeStr(maxDate),\n    };\n}", "CodeBleu_score": 32.55375169370163}, {"code": "function buildDateLimits(baseNote){\n\t  const minDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() - 1000);\n  const minExcludedDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() - 2000);\n  const maxExcludedDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() + 2000);\n  const maxDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() + 1000);\n  return { minDate, minExcludedDate, maxExcludedDate, maxDate };\n}", "CodeBleu_score": 41.1640603193506}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t    // client code asks to save entity even if blobId didn't change (something else was changed)\n    opts.forceSave = !!opts.forceSave;\n    opts.forceFrontendReload = !!opts.forceFrontendReload;\n\n    if (content === null || content === undefined) {\n        throw new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n    }\n\n    if (this.hasStringContent()) {\n        content = content.toString();\n    } else {\n        content = Buffer.isBuffer(content) ? content : Buffer.from(content);\n    }\n\n    const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n    if (this.isProtected) {\n        if (protectedSessionService.isProtectedSessionAvailable()) {\n            content = protectedSessionService.encrypt(content);\n        } else {\n            throw new Error(`Cannot update content of blob since protected session is not available.`);\n        }\n    }\n\n    sql.transactional(() => {\n        const newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n        const oldBlobId = this.blobId;\n\n        if (newBlobId !== oldBlobId || opts.forceSave) {\n            this.blobId = newBlobId;\n            this.save();\n\n            if (newBlobId !== oldBlobId) {\n                this.#deleteBlobIfNotUsed(oldBlobId);\n            }\n        }\n    });\n}", "CodeBleu_score": 99.98043052937537}, {"code": "_setContent(content, opts = {}){\n\t    // client code asks to save entity even if blobId didn't change (something else was changed)\n    opts.forceSave = !!opts.forceSave;\n    opts.forceFrontendReload = !!opts.forceFrontendReload;\n\n    if (content === null || content === undefined) {\n        throw new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n    }\n\n    if (this.hasStringContent()) {\n        content = content.toString();\n    } else {\n        content = Buffer.isBuffer(content) ? content : Buffer.from(content);\n    }\n\n    const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n    if (this.isProtected) {\n        if (protectedSessionService.isProtectedSessionAvailable()) {\n            content = protectedSessionService.encrypt(content);\n        } else {\n            throw new Error(`Cannot update content of blob since protected session is not available.`);\n        }\n    }\n\n    sql.transactional(() => {\n        const newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n        const oldBlobId = this.blobId;\n\n        if (newBlobId !== oldBlobId || opts.forceSave) {\n            this.blobId = newBlobId;\n            this.save();\n\n            if (newBlobId !== oldBlobId) {\n                this.#deleteBlobIfNotUsed(oldBlobId);\n            }\n        }\n    });\n}", "CodeBleu_score": 99.98043052937537}, {"code": "_setContent(content, opts = {}){\n\t    // client code asks to save entity even if blobId didn't change (something else was changed)\n    opts.forceSave = !!opts.forceSave;\n    opts.forceFrontendReload = !!opts.forceFrontendReload;\n\n    if (content === null || content === undefined) {\n        throw new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n    }\n\n    if (this.hasStringContent()) {\n        content = content.toString();\n    } else {\n        content = Buffer.isBuffer(content) ? content : Buffer.from(content);\n    }\n\n    const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n    if (this.isProtected) {\n        if (protectedSessionService.isProtectedSessionAvailable()) {\n            content = protectedSessionService.encrypt(content);\n        } else {\n            throw new Error(`Cannot update content of blob since protected session is not available.`);\n        }\n    }\n\n    sql.transactional(() => {\n        const newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n        const oldBlobId = this.blobId;\n\n        if (newBlobId !== oldBlobId || opts.forceSave) {\n            this.blobId = newBlobId;\n            this.save();\n\n            if (newBlobId !== oldBlobId) {\n                this.#deleteBlobIfNotUsed(oldBlobId);\n            }\n        }\n    });\n}", "CodeBleu_score": 99.98043052937537}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getInboxNote();\n\n    const { note } = await server.post('notes', {\n        parentNoteId: inboxNote.noteId,\n        title: 'New Note',\n        content: '',\n        type: 'text',\n        isProtected: false\n    });\n\n    await ws.waitForMaxKnownEntityChangeId();\n\n    appContext.tabManager.openTabWithNoteWithHoisting(note);\n\n    appContext.triggerEvent('focusNote', note);\n    appContext.triggerEvent('selectNote', note);\n}", "CodeBleu_score": 57.09060566794128}, {"code": "async createNoteIntoInboxCommand(){\n\t  const inboxNote = await dateNoteService.getInboxNote();\n\n  const { note } = await server.post(\n    \"notes/\" + inboxNote.noteId + \"/children\",\n    {\n      content: \"\",\n      type: \"text\",\n      title: \"Note \" + (new Date()).toLocaleString(),\n      isProtected: protectedSessionHolder.isProtectedSessionAvailable(),\n    }\n  );\n\n  await ws.waitForMaxKnownEntityChangeId();\n\n  appContext.tabManager.openTabWithNoteWithHoisting(note);\n\n  appContext.triggerEvent(\"focusAndSelectTitle\");\n}", "CodeBleu_score": 58.40679450773083}, {"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getInboxNote();\n\n    const { note } = await server.post('notes', {\n        parentNoteId: inboxNote.noteId,\n        title: 'New Note',\n        content: '',\n        type: 'text',\n        isProtected: false,\n    });\n\n    await ws.waitForMaxKnownEntityChangeId(note.entityChange.id);\n\n    appContext.tabManager.openTabWithNoteWithHoisting(note);\n\n    appContext.triggerEvent('focusNote', { noteId: note.noteId });\n    appContext.triggerEvent('selectNote', { noteId: note.noteId });\n}", "CodeBleu_score": 57.02363596605446}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t    const note = await froca.getNote(noteId);\n    const activeNoteContext = appContext.tabManager.getActiveContext();\n\n    if (activeNoteContext.isHoisted(noteId)) {\n        activeNoteContext.unhoist(noteId);\n    }\n    else {\n        if (note.type !== 'search') {\n            activeNoteContext.setHoistedNoteId(noteId);\n        }\n    }\n}", "CodeBleu_score": 70.32067829436629}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t    const note = await froca.getNote(noteId);\n    const activeNoteContext = appContext.tabManager.getActiveContext();\n\n    if (note.isHoisted) {\n        activeNoteContext.unhoist();\n    }\n    else {\n        if (note.type !== 'search') {\n            activeNoteContext.setHoistedNoteId(note.noteId);\n        }\n    }\n}", "CodeBleu_score": 70.70194697889013}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t    const note = await froca.getNote(noteId);\n    const activeNoteContext = appContext.tabManager.getActiveContext();\n\n    if (note.isHoisted) {\n        activeNoteContext.unhoist();\n    }\n    else if (note.type !== 'search') {\n        activeNoteContext.setHoistedNoteId(noteId);\n    }\n}", "CodeBleu_score": 72.65832373379183}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = utils.dynamicRequire('./utils/hash.js').calculateHash(notePath, hoistedNoteId, viewScope);\n\n    if (utils.isElectron()) {\n        await ipcRenderer.send('create-new-window', {hash});\n    }\n    else {\n        const url = `${window.location.origin}/#${hash}`;\n\n        window.open(url, '_blank', 'width=800,height=900');\n    }\n}", "CodeBleu_score": 47.176149799245024}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = await utils.isElectron()\n        ? await utils.dynamicRequire('electron').ipcRenderer.invoke('open-in-window', {notePath, hoistedNoteId, viewScope})\n        : await utils.dynamicRequire('crypto').calculateHash(notePath + hoistedNoteId + viewScope);\n\n    const url = utils.isElectron()\n        ? `trilium-window:${hash}`\n        : `${window.location.origin}/window/${hash}`;\n\n    const width = 1000;\n    const height = 800;\n\n    const left = window.screen.width / 2 - width / 2;\n    const top = window.screen.height / 2 - height / 2;\n\n    window.open(url, '_blank', `width=${width},height=${height},left=${left},top=${top}`);\n}", "CodeBleu_score": 43.723565218490116}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = await utils.isElectron() ? await utils.dynamicRequire('./ipc_utils').calculateHash(notePath, hoistedNoteId, viewScope) : utils.dynamicRequire('./hash_utils').calculateHash(notePath, hoistedNoteId, viewScope);\n\n    if (await utils.isElectron()) {\n        await utils.dynamicRequire('./ipc_utils').open(hash);\n    }\n    else {\n        const url = window.location.origin + window.location.pathname + \"#\" + hash;\n\n        window.open(url, \"_blank\", \"width=800,height=900\");\n    }\n}", "CodeBleu_score": 43.731207322506584}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t  const activeContext = appContext.tabManager.getActiveContext();\n  const ntxId = activeContext.ntxId;\n  const note = activeContext.note;\n\n  if (note.type !== 'code') {\n    return;\n  }\n\n  if (note.mime.endsWith('frontend')) {\n    const bundle = await bundleService.getAndExecuteBundle(ntxId);\n    if (bundle.hasErrors()) {\n      toastService.showError(bundle.getError());\n    }\n  }\n  else if (note.mime.endsWith('backend')) {\n    const script = note.content;\n    const response = await server.post('execute/script/' + ntxId, script);\n    if (response.error) {\n      toastService.showError(response.error);\n    }\n  }\n  else if (note.mime.endsWith('sql.schema')) {\n    const sql = note.content;\n    const response = await server.post('execute/sql/' + ntxId, sql);\n    if (response.error) {\n      toastService.showError(response.error);\n    }\n    else {\n      toastService.showMessage('SQL executed');\n      appContext.triggerEvent('sqlExecuted', {\n        sql: sql,\n        result: response.result,\n      });\n    }\n  }\n\n  toastService.showMessage('Note executed');\n}", "CodeBleu_score": 45.75819445092834}, {"code": "async runActiveNoteCommand(){\n\t    const { ntxId, note } = appContext.tabManager.getActiveContext();\n    if (note.type !== 'code') {\n        return;\n    }\n\n    if (note.mime.endsWith('/javascript')) {\n        const bundle = await bundleService.getAndExecuteBundle(ntxId);\n        if (!bundle) {\n            toastService.showError(\"Can't find bundle for note \" + note.title);\n            return;\n        }\n\n        await bundle.execute();\n    }\n    else if (note.mime.endsWith('/sql')) {\n        const query = await server.post('notes/' + note.noteId + '/sql');\n        if (query.error) {\n            toastService.showError(query.error);\n            return;\n        }\n\n        const result = await server.post('sql/execute', { query: query.query });\n        if (result.error) {\n            toastService.showError(result.error);\n            return;\n        }\n\n        appContext.triggerEvent('sql-executed', {\n            query: query.query,\n            rows: result.rows\n        });\n    }\n    else {\n        const script = await server.post('notes/' + note.noteId + '/script');\n        if (script.error) {\n            toastService.showError(script.error);\n            return;\n        }\n\n        await server.post('script/execute', { script: script.script });\n    }\n\n    toastService.showMessage(\"Note \" + note.title + \" executed.\");\n}", "CodeBleu_score": 47.0614121092973}, {"code": "async runActiveNoteCommand(){\n\t  const { ntxId, note } = appContext.tabManager.getActiveContext();\n\n  if (note.type !== 'code') {\n    return;\n  }\n\n  if (note.mime.endsWith('frontend')) {\n    await bundleService.getAndExecuteBundle(ntxId);\n  } else if (note.mime.endsWith('backend')) {\n    await server.post('notes/run/' + ntxId);\n  } else if (note.mime.endsWith('schema')) {\n    const { error, results } = await server.post('notes/run/' + ntxId);\n\n    if (error) {\n      toastService.showError(error);\n      return;\n    }\n\n    toastService.showMessage('Query executed successfully.');\n    appContext.triggerEvent('sqlResult', { results });\n  }\n\n  toastService.showMessage('Note executed.');\n}", "CodeBleu_score": 51.339665808458875}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t    if (this.options.getInt('readOnlyDisabled')) {\n        return false;\n    }\n\n    const note = this.note;\n\n    if (!note) {\n        return true;\n    }\n\n    if (note.type !== 'text' && note.type !== 'code') {\n        return true;\n    }\n\n    if (this.viewMode === 'source') {\n        return true;\n    }\n\n    const blob = await note.getBlob();\n\n    if (!blob) {\n        return true;\n    }\n\n    const sizeLimit = note.type === 'text' ? 10000 : 100000;\n\n    if (blob.content.length > sizeLimit && !note.isLabelTruthy('autoReadOnlyDisabled')) {\n        return true;\n    }\n\n    return note.isLabelTruthy('readOnly');\n}", "CodeBleu_score": 54.77032653615449}, {"code": "async isReadOnly(){\n\t    if (await options.getInt('disableReadOnlyTemporarily') === 1) {\n        return true;\n    }\n\n    const note = this.note;\n\n    if (!note) {\n        return false;\n    }\n\n    if (note.type !== 'text' && note.type !== 'code') {\n        return false;\n    }\n\n    if (note.isLabelTruthy('readOnly')) {\n        return true;\n    }\n\n    if (note.viewMode === 'source') {\n        return true;\n    }\n\n    const blob = note.getBlob();\n\n    if (!blob) {\n        return false;\n    }\n\n    const maxSize = note.type === 'text' ? 10000 : 100000;\n\n    if (blob.content.length > maxSize && !note.isLabelTruthy('autoReadOnlyDisabled')) {\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 50.48181164807248}, {"code": "async isReadOnly(){\n\t    if (froca.options.getInt(\"disableReadOnlyTemporarily\") > 0) {\n        return true;\n    }\n\n    const note = this.note;\n\n    if (!note || note.type !== 'text' && note.type !== 'code') {\n        return true;\n    }\n\n    if (note.hasLabel('readOnly')) {\n        return true;\n    }\n\n    if (froca.options.getInt(\"viewMode\") === 'source') {\n        return true;\n    }\n\n    const blob = await note.getBlob();\n\n    if (!blob) {\n        return true;\n    }\n\n    const limit = note.type === 'code' ? 100000 : 1000000;\n\n    if (blob.length > limit && !note.hasLabel('autoReadOnlyDisabled')) {\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 47.356265673638696}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t    const noteContext = new NoteContext({\n        ntxId,\n        hoistedNoteId,\n        mainNtxId\n    });\n\n    // check if similar note context already exists\n    let existingNoteContext;\n\n    if (utils.isMobile()) {\n        existingNoteContext = this.getActiveContext();\n    } else {\n        existingNoteContext = this.children.find(child => child.ntxId === ntxId);\n    }\n\n    if (existingNoteContext) {\n        existingNoteContext.setHoistedNoteId(hoistedNoteId);\n\n        return existingNoteContext;\n    } else {\n        this.children.push(noteContext);\n\n        this.triggerEvent('newNoteContextCreated', noteContext);\n\n        return noteContext;\n    }\n}", "CodeBleu_score": 63.48762679025574}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t    const existingNoteContext = this.isMobile\n        ? this.getActiveContext()\n        : this.children.find(child => child.ntxId === ntxId && child.hoistedNoteId === hoistedNoteId);\n\n    if (existingNoteContext) {\n        existingNoteContext.setHoistedNoteId(hoistedNoteId);\n\n        return existingNoteContext;\n    }\n\n    const noteContext = new NoteContext({\n        ntxId,\n        hoistedNoteId,\n        mainNtxId,\n        parent: this\n    });\n\n    this.children.push(noteContext);\n\n    this.triggerEvent('newNoteContextCreated', noteContext);\n\n    return noteContext;\n}", "CodeBleu_score": 50.43446597013862}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t        const existingNoteContext = this.getActiveContext();\n\n        if (existingNoteContext) {\n            existingNoteContext.setHoistedNoteId(hoistedNoteId);\n\n            return existingNoteContext;\n        }\n\n        const noteContext = new NoteContext({\n            ntxId,\n            hoistedNoteId,\n            mainNtxId\n        });\n\n        this.children.push(noteContext);\n\n        this.triggerEvent('newNoteContextCreated', { noteContext });\n\n        return noteContext;\n    }", "CodeBleu_score": 47.002970836351565}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\t    const branchIdPos = {};\n\n    for (const branchId of Object.values(this.childToBranch)) {\n        branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n    }\n\n    this.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 99.80190291693033}, {"code": "sortChildren(){\n\t        const branchIdPos = {};\n\n        for (const branchId of Object.values(this.childToBranch)) {\n            branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n        }\n\n        this.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n    }", "CodeBleu_score": 97.89243012934755}, {"code": "sortChildren(){\n\t    const branchIdPos = {};\n\n    for (const branchId of Object.values(this.childToBranch)) {\n        branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n    }\n\n    this.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 99.80190291693033}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (!newParentBranch) {\n        return;\n    }\n\n    const branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n    for (const branchId of branchIdsToMoveFiltered) {\n        const branchToMove = froca.getBranch(branchId);\n\n        if (!branchToMove) {\n            continue;\n        }\n\n        if (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()) {\n            continue;\n        }\n\n        const parentNote = branchToMove.getParentNote();\n\n        if (parentNote.type === 'search') {\n            continue;\n        }\n\n        try {\n            await server.put(`notes/${branchToMove.noteId}/move/to/${newParentBranch.noteId}`);\n        }\n        catch (e) {\n            toastService.showError(`Could not move note ${branchToMove.noteId} to parent ${newParentBranch.noteId}.`);\n            return;\n        }\n    }\n}", "CodeBleu_score": 53.557107820588534}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (!newParentBranch) {\n        return;\n    }\n\n    const branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n    for (const branchId of branchIdsToMoveFiltered) {\n        const branchToMove = froca.getBranch(branchId);\n\n        if (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()) {\n            continue;\n        }\n\n        const parentNote = branchToMove.getParentNote();\n\n        if (parentNote.type === 'search') {\n            continue;\n        }\n\n        try {\n            await server.put(`notes/${branchToMove.noteId}/move/to/${newParentBranch.noteId}`);\n        }\n        catch (e) {\n            toastService.showError(`Could not move ${branchToMove.noteTitle} to ${newParentBranch.noteTitle}.`);\n            return;\n        }\n    }\n}", "CodeBleu_score": 54.85443225435007}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (!newParentBranch) {\n        toastService.showError(\"Can't find new parent note.\");\n        return;\n    }\n\n    const branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n    for (const branchId of branchIdsToMoveFiltered) {\n        const branch = froca.getBranch(branchId);\n\n        if (!branch) {\n            continue;\n        }\n\n        if (branch.noteId === hoistedNoteService.getHoistedNoteId()) {\n            toastService.showError(\"Can't move the hoisted note.\");\n            return;\n        }\n\n        const parentNote = branch.getParentNote();\n\n        if (parentNote.type === 'search') {\n            continue; // can't move inside of search container\n        }\n\n        try {\n            await server.put(`notes/${branch.noteId}/move/to/${newParentBranch.noteId}`);\n        }\n        catch (e) {\n            toastService.showError(`Moving note to parent note failed with ${e.message}`);\n            return;\n        }\n    }\n}", "CodeBleu_score": 51.1430014941394}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t  const activeContext = appContext.tabManager.getActiveContext();\n  if (!activeContext) return;\n\n  const parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n  if (parentNotePathArr.length === 0) return;\n\n  await activeContext.setNote(parentNotePathArr.join('/'));\n}", "CodeBleu_score": 79.16923113301613}, {"code": "async function activateParentNotePath(){\n\t  const activeContext = appContext.tabManager.getActiveContext();\n  const parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n  if (parentNotePathArr.length > 0) {\n    await activeContext.setNote(parentNotePathArr.join(\"/\"));\n  }\n}", "CodeBleu_score": 90.91209047142456}, {"code": "async function activateParentNotePath(){\n\t  const activeContext = appContext.tabManager.getActiveContext();\n  const parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n  if (parentNotePathArr.length > 0) {\n    await activeContext.setNote(parentNotePathArr.join(\"/\"));\n  }\n}", "CodeBleu_score": 90.91209047142456}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t    clipboard.mode = 'copy';\n\n    if (utils.isElectron()) {\n        const { clipboard } = require('electron');\n\n        const htmlLinks = [];\n\n        for (const branchId of branchIds) {\n            const link = linkService.createLink({\n                type: 'reference',\n                branchId: branchId,\n                notePath: froca.getNotePath(branchId),\n                fromNoteId: froca.getNoteId(),\n                fromAttributeType: 'label',\n                fromAttributeId: 'title',\n                fromAttribute: froca.getNoteTitle(branchId),\n                toNoteId: froca.getNoteId(),\n                toAttributeType: 'label',\n                toAttributeId: 'title',\n                toAttribute: froca.getNoteTitle(branchId)\n            });\n\n            htmlLinks.push(link);\n        }\n\n        clipboard.writeHTML(htmlLinks.join(''));\n    }\n    else {\n        const htmlLinks = [];\n\n        for (const branchId of branchIds) {\n            const link = linkService.createLink({\n                type: 'reference',\n                branchId: branchId,\n                notePath: froca.getNotePath(branchId),\n                fromNoteId: froca.getNoteId(),\n                fromAttributeType: 'label',\n                fromAttributeId: 'title',\n                fromAttribute: froca.getNoteTitle(branchId),\n                toNoteId: froca.getNoteId(),\n                toAttributeType: 'label',\n                toAttributeId: 'title',\n                toAttribute: froca.getNoteTitle(branchId)\n            });\n\n            htmlLinks.push(link);\n        }\n\n        clipboard.writeHTML(htmlLinks.join(''));\n    }\n\n    toastService.showMessage('Branches copied to clipboard.');\n}", "CodeBleu_score": 48.26623709350205}, {"code": "async function copy(branchIds){\n\t  clipboard.setMode('copy');\n  if (utils.isElectron()) {\n    const clipboard = require('electron').clipboard;\n    const links = branchIds.map(branchId => linkService.createLink(branchId, true));\n    clipboard.writeHTML(links.join('\n'));\n  } else {\n    const links = branchIds.map(branchId => linkService.createLink(branchId, true));\n    clipboard.writeHTML(links.join('\n'));\n  }\n  toastService.showMessage('Copied to clipboard');\n}", "CodeBleu_score": 40.33686269916308}, {"code": "async function copy(branchIds){\n\t  const links = [];\n  for (const branchId of branchIds) {\n    const link = linkService.createLink(branchId);\n    links.push(link);\n  }\n  const html = links.join('\n');\n  if (utils.isElectron()) {\n    clipboard.writeHTML(html);\n  } else {\n    clipboard.writeText(html);\n  }\n  clipboard.setMode('copy');\n  toastService.showMessage('Copied to clipboard');\n}", "CodeBleu_score": 36.29303596063818}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  // Flatten the list\n  const flatList = data.flat();\n\n  // Iterate through each item\n  flatList.forEach((item) => {\n    // For items of type 'folder', initialize the children property as an empty array if it is not already an array\n    if (item.type === \"folder\" && !Array.isArray(item.children)) {\n      item.children = [];\n    }\n\n    // For items of type 'group', initialize the include property as an empty array if it is not already an array\n    if (item.type === \"group\" && !Array.isArray(item.include)) {\n      item.include = [];\n    }\n\n    // For items of type 'folder' or 'group', set the content property to an empty string\n    if (item.type === \"folder\" || item.type === \"group\") {\n      item.content = \"\";\n    }\n  });\n\n  // Return the modified data\n  return data;\n}", "CodeBleu_score": 61.69723445416068}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  data = data.flat();\n  data.forEach((item) => {\n    if (item.type === \"folder\") {\n      item.children = Array.isArray(item.children) ? item.children : [];\n    } else if (item.type === \"group\") {\n      item.include = Array.isArray(item.include) ? item.include : [];\n    }\n    item.content = \"\";\n  });\n  return data;\n}", "CodeBleu_score": 45.09193620071109}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  const flattenedData = data.flat();\n  flattenedData.forEach((item) => {\n    if (item.type === \"folder\") {\n      if (!Array.isArray(item.children)) {\n        item.children = [];\n      }\n      item.content = \"\";\n    } else if (item.type === \"group\") {\n      if (!Array.isArray(item.include)) {\n        item.include = [];\n      }\n      item.content = \"\";\n    }\n  });\n  return flattenedData;\n}", "CodeBleu_score": 49.49167141880714}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t  const id = uuid4();\n  await swhdb.collection.history.insert({\n    id,\n    content,\n    created_at: new Date().getTime(),\n  });\n  const limit = Number(await configGet('history_limit'));\n  if (limit && limit > 0) {\n    const history = await swhdb.collection.history.all;\n    if (history.length > limit) {\n      const deleteCount = history.length - limit;\n      await deleteHistory(deleteCount);\n    }\n  }\n}", "CodeBleu_score": 34.956776315158606}, {"code": "const addHistory = async (content: string) =>{\n\t  const id = uuid4();\n  await swhdb.collection.history.insert({\n    id,\n    content,\n    timestamp: new Date().getTime(),\n  });\n  const limit = configGet('historyLimit');\n  if (limit && Number.isInteger(limit) && limit > 0) {\n    const history = await swhdb.collection.history.all();\n    if (history.length > limit) {\n      const toDelete = history.length - limit;\n      for (let i = 0; i < toDelete; i++) {\n        await deleteHistory(history[i].id);\n      }\n    }\n  }\n}", "CodeBleu_score": 48.359846752365705}, {"code": "const addHistory = async (content: string) =>{\n\t  const id = uuid4();\n  await swhdb.collection.history.insert({ id, content, time: new Date().getTime() });\n  const limit = configGet(\"historyLimit\");\n  if (limit && Number.isInteger(limit) && limit > 0) {\n    const history = await swhdb.collection.history.all();\n    if (history.length > limit) {\n      const toDelete = history.length - limit;\n      const idsToDelete = history.slice(0, toDelete).map((record) => record.id);\n      await deleteHistory(idsToDelete);\n    }\n  }\n}", "CodeBleu_score": 38.20945355397434}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const dataFolder = getDataFolder();\n  const filename = 'hosts.json';\n  const filePath = path.join(dataFolder, filename);\n\n  const defaultData: IHostsBasicData = {\n    hosts: [],\n    lastUpdate: 0,\n  };\n\n  if (!fs.existsSync(filePath)) {\n    return defaultData;\n  }\n\n  try {\n    const fileContent = await fs.promises.readFile(filePath, 'utf-8');\n    const data = JSON.parse(fileContent);\n    return cleanHostsList(data);\n  } catch (error) {\n    console.error('Error reading or parsing hosts.json:', error);\n    return defaultData;\n  }\n}", "CodeBleu_score": 49.97240623810511}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const dataFolder = getDataFolder();\n  const filename = \"hosts.json\";\n  const filePath = path.join(dataFolder, filename);\n  const defaultData: IHostsBasicData = {\n    hosts: [],\n    timestamp: 0,\n  };\n\n  if (!fs.existsSync(filePath)) {\n    return defaultData;\n  }\n\n  try {\n    const data = await fs.promises.readFile(filePath, \"utf-8\");\n    const parsedData = JSON.parse(data);\n    const cleanedData = cleanHostsList(parsedData);\n    return cleanedData;\n  } catch (error) {\n    console.error(\"Error reading old data:\", error);\n    return defaultData;\n  }\n}", "CodeBleu_score": 47.08450740599648}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const filePath = getDataFolder(DATA_FILENAME);\n  if (!fs.existsSync(filePath)) {\n    return {\n      hosts: [],\n      updated: new Date(),\n    };\n  }\n  try {\n    const data = await fs.promises.readFile(filePath, 'utf8');\n    const oldData = JSON.parse(data);\n    return cleanHostsList(oldData);\n  } catch (error) {\n    console.error(error);\n    return {\n      hosts: [],\n      updated: new Date(),\n    };\n  }\n}", "CodeBleu_score": 44.884903803138634}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    global.data_dir = await getDataFolder();\n    global.swhdb = new PotDb(path.join(global.data_dir, 'swhdb'));\n    console.log('swhdb dir:', global.swhdb.dir);\n  }\n  return global.swhdb;\n}", "CodeBleu_score": 30.026835713916693}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    global.data_dir = await getDataFolder();\n    global.swhdb = new PotDb(path.join(global.data_dir, 'swhdb'));\n    console.log(`swhdb dir: ${global.swhdb.dir}`);\n  }\n  return global.swhdb;\n}", "CodeBleu_score": 30.525984015685914}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t    if (swhdb == null) {\n        data_dir = await getDataFolder();\n        localdb.dict.local.set('data_dir', data_dir);\n        db_dir = path.join(data_dir, 'swhdb');\n        console.log(`db_dir: ${db_dir}`);\n        swhdb = new PotDb(db_dir);\n    }\n    return swhdb;\n}", "CodeBleu_score": 33.42134909591959}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t    const { refreshInterval, url } = hosts;\n    const { lastRefreshTimestamp } = hosts.data;\n    if (!refreshInterval || !url) return false;\n    if (!lastRefreshTimestamp) return true;\n    const timeElapsed = new Date().getTime() - lastRefreshTimestamp;\n    return timeElapsed > refreshInterval;\n}", "CodeBleu_score": 33.16982307391275}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t  const { refreshInterval, lastRefreshTimestamp, url } = hosts;\n\n  if (!isValidUrl(url)) {\n    return false;\n  }\n\n  if (!lastRefreshTimestamp) {\n    return true;\n  }\n\n  const timeElapsed = new Date().getTime() - lastRefreshTimestamp;\n\n  if (timeElapsed > refreshInterval) {\n    return true;\n  }\n\n  return false;\n}", "CodeBleu_score": 34.72781235499617}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t    const { refreshInterval, url } = hosts;\n    if (!refreshInterval || !url) {\n      return false;\n    }\n    const lastRefresh = hosts.lastRefresh;\n    if (!lastRefresh) {\n      return true;\n    }\n    const timeElapsed = new Date().getTime() - lastRefresh;\n    return timeElapsed > refreshInterval;\n  }", "CodeBleu_score": 34.45725534781556}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t    return new Promise((resolve, reject) => {\n      // Generate a unique callback identifier\n      const callbackId = uuidv4();\n  \n      // Send a message with the action, parameters, and callback identifier\n      ipcRenderer.send('action', { action, params, callbackId });\n  \n      // Listen for a response using the callback identifier\n      ipcRenderer.once(callbackId, (event, arg) => {\n        if (arg.error) {\n          reject(arg.error);\n        } else {\n          resolve(arg.data);\n        }\n      });\n    });\n  }", "CodeBleu_score": 45.8525266756792}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t    return new Promise((resolve, reject) => {\n        const callbackId = generateCallbackId();\n        const message = {\n            action,\n            params,\n            callbackId,\n        };\n\n        ipcRenderer.once(callbackId, (event, response) => {\n            if (response.success) {\n                resolve(response.data);\n            } else {\n                reject(new Error(response.error));\n            }\n        });\n\n        ipcRenderer.send('action', message);\n    });\n}", "CodeBleu_score": 45.09165619795157}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  return new Promise((resolve, reject) => {\n    const callbackId = Math.random().toString(36).substr(2, 9);\n    ipcRenderer.send('action', { action, params, callbackId });\n    ipcRenderer.once(`action-response-${callbackId}`, (event, response) => {\n      if (response.success) {\n        resolve(response.data);\n      } else {\n        reject(response.error);\n      }\n    });\n  });\n}", "CodeBleu_score": 45.72902843608849}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t  let hosts_id = getHostsId();\n\n  if (hosts_id === null) {\n    return;\n  }\n\n  let editor = getEditor();\n\n  if (editor === null) {\n    setTimeout(loadContent, 500);\n    return;\n  }\n\n  let content = await actions.getHostsContent(hosts_id);\n\n  if (content === null) {\n    content = await actions.getSystemHosts();\n  }\n\n  editor.setValue(content);\n\n  if (is_new) {\n    editor.clearHistory();\n  }\n}", "CodeBleu_score": 50.60422249010067}, {"code": "const loadContent = async (is_new = false) =>{\n\t    // Check if the editor is available\n    if (!cm_editor) {\n        // Retry after a short delay\n        setTimeout(loadContent, 100);\n        return;\n    }\n\n    // Retrieve the content based on the hosts_id\n    let content;\n    if (hosts_id === 'system') {\n        content = await actions.getSystemHosts();\n    } else {\n        content = await actions.getHostsContent(hosts_id);\n    }\n\n    // Set the retrieved content and update the editor's value\n    cm_editor.setValue(content);\n\n    // Clear the editor's history if is_new is true\n    if (is_new) {\n        cm_editor.clearHistory();\n    }\n}", "CodeBleu_score": 55.73853594554288}, {"code": "const loadContent = async (is_new = false) =>{\n\t    if (!cm_editor) {\n        setTimeout(loadContent, 500);\n        return;\n    }\n\n    let content = await actions.getSystemHosts();\n    if (hosts_id !== \"system_hosts\") {\n        content = await actions.getHostsContent(hosts_id);\n    }\n\n    cm_editor.setValue(content);\n    cm_editor.updateValue();\n    if (is_new) {\n        cm_editor.clearHistory();\n    }\n}", "CodeBleu_score": 60.19306003083875}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t  const cm_editor = useCodeMirror();\n  if (!cm_editor || cm_editor.getOption('readOnly')) return;\n  const line = cm_editor.lineInfo(n);\n  if (/^\\s*$/.test(line.text)) return;\n  const s = line.text.startsWith('#')\n    ? line.text.slice(1)\n    : '#' + line.text;\n  cm_editor\n    .getDoc()\n    .replaceRange(s, { line: line.start, ch: 0 }, { line: line.end, ch: 0 });\n}", "CodeBleu_score": 46.628613418973906}, {"code": "const onGutterClick = (n: number) =>{\n\t  if (cm_editor.lineInfo(n).readOnly || !cm_editor) return;\n  const line = cm_editor.lineInfo(n).text;\n  if (/^\\s*$/.test(line)) return;\n  const newLine = /^#/.test(line)\n    ? line.replace(/^#/, \"\")\n    : `# ${line}`;\n  cm_editor.getDoc().replaceRange(newLine, { line: n, ch: 0 });\n}", "CodeBleu_score": 41.89968586467888}, {"code": "const onGutterClick = (n: number) =>{\n\t  if (cm_editor.isReadOnly() || !cm_editor) return;\n  const s = cm_editor.lineInfo(n).text;\n  if (/^\\s*$/.test(s)) return;\n  const c = /^#/.test(s) ? \"\" : \"# \";\n  cm_editor.getDoc().replaceRange(c + s, { line: n, ch: 0 });\n}", "CodeBleu_score": 32.50575970252713}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    m_foundOptions.clear();\n    m_foundArgs.clear();\n    bool ok = true;\n    // version option\n    if (m_withVersion && args.contains(versionOption.dashedNames().first())) {\n        if (args.length() == 1) {\n            printVersion();\n            return false;\n        } else {\n            err << \"Invalid arguments after the version option.\";\n            return false;\n        }\n    }\n    // help option\n    auto actualIt = args.cbegin();\n    auto actualNode = &m_root;\n    ok = processIfOptionIsHelp(args, actualIt, actualNode);\n    if (!ok) {\n        return ok;\n    }\n    // other options and arguments\n    while (actualIt != args.cend()) {\n        QString arg = *actualIt;\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n            if (!ok) {\n                break;\n            }\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n            if (!ok) {\n                break;\n            }\n        }\n        ++actualIt;\n    }\n    if (!ok) {\n        err << m_generalErrorMessage;\n    }\n    return ok;\n}", "CodeBleu_score": 55.741765043893466}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    // clear previous\n    m_foundArgs.clear();\n    m_foundOptions.clear();\n    // initialize\n    m_generalErrorMessage = QStringLiteral(\"Error parsing the arguments.\");\n    m_foundOptions.append(versionOption);\n    bool ok = true;\n    // check version\n    if (args.length() > 1 && versionOption.names().contains(args.at(1))) {\n        if (args.length() == 2) {\n            printVersion();\n            return ok;\n        } else {\n            err << QStringLiteral(\"The version option must be the only argument.\");\n            return false;\n        }\n    }\n    // check help\n    ok = processIfOptionIsHelp(args, args.cbegin(), m_rootNode);\n    if (!ok) {\n        return ok;\n    }\n    // process\n    Node* actualNode = m_rootNode;\n    for (auto actualIt = args.cbegin() + 1; actualIt != args.cend(); ++actualIt) {\n        QString argument = *actualIt;\n        if (argument.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n        }\n        if (!ok) {\n            err << m_generalErrorMessage;\n            return ok;\n        }\n    }\n    // check if all required options are found\n    for (const CommandOption& option : m_rootNode->options) {\n        if (option.isRequired() && !m_foundOptions.contains(option)) {\n            err << QStringLiteral(\"The option '%1' is required.\")\n                     .arg(option.names().first());\n            ok = false;\n            return ok;\n        }\n    }\n    return ok;\n}", "CodeBleu_score": 58.592848824886865}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    // clear previous\n    m_foundArgs.clear();\n    m_foundOptions.clear();\n    // init\n    bool ok = true;\n    Node* actualNode = &m_rootNode;\n    QStringList::const_iterator actualIt = args.cbegin();\n    // check version\n    if (m_withVersion && actualIt != args.cend() &&\n        versionOption.dashedNames().contains(*actualIt)) {\n        if (actualIt + 1 == args.cend()) {\n            m_foundOptions << versionOption;\n            printVersion();\n            actualIt++;\n        } else {\n            err << \"Invalid arguments after the version option.\";\n            ok = false;\n        }\n    }\n    // check help\n    ok = processIfOptionIsHelp(args, actualIt, actualNode);\n    if (!ok) {\n        return ok;\n    }\n    // check other args\n    while (actualIt != args.cend()) {\n        QString arg = *actualIt;\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n        }\n        if (!ok) {\n            break;\n        }\n        ++actualIt;\n    }\n    // check if there are missing arguments\n    if (ok) {\n        ok = checkMissingArguments(actualNode);\n    }\n    // check if there are missing options\n    if (ok) {\n        ok = checkMissingOptions(actualNode);\n    }\n    // general error\n    if (!ok) {\n        err << m_generalErrorMessage;\n    }\n    return ok;\n}", "CodeBleu_score": 67.33887314789911}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t    auto listTypes = ConfigHandler().buttons();\n    for (auto i = 0; i < m_listButtons.count(); ++i) {\n        auto item = m_listButtons.at(i);\n        auto type = static_cast<CaptureTool::Type>(i);\n        item->setCheckState(listTypes.contains(type) ? Qt::Checked : Qt::Unchecked);\n    }\n}", "CodeBleu_score": 45.902035998194}, {"code": "void ButtonListView::updateComponents(){\n\t    auto listTypes = CaptureToolButton::getIterableButtonTypes();\n    for (int i = 0; i < listTypes.size(); ++i) {\n        auto type = listTypes.at(i);\n        auto item = m_listButtons.at(i);\n        if (ConfigHandler().buttons().contains(type)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 62.74769045937823}, {"code": "void ButtonListView::updateComponents(){\n\t    QList<CaptureTool::Type> listTypes = ConfigHandler().buttons();\n    for (int i = 0; i < m_listButtons.count(); ++i) {\n        CaptureToolButton* item = m_listButtons.at(i);\n        if (listTypes.contains(static_cast<CaptureTool::Type>(i))) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 59.89518494913694}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t    QColor color = m_colorPicker->color();\n    if (m_colorList.contains(color)) {\n        return;\n    }\n    if (m_colorList.size() >= MAX_PRESETS) {\n        QMessageBox::critical(this, tr(\"Error\"), tr(\"Maximum number of presets reached.\"));\n        return;\n    }\n    m_colorList.append(color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 59.09483738491432}, {"code": "void ColorPickerEditor::addPreset(){\n\t    const QColor color = m_colorPicker->color();\n    if (m_colorList.contains(color)) {\n        return;\n    }\n    if (m_colorList.size() >= 17) {\n        QMessageBox::critical(this, tr(\"Error\"), tr(\"Maximum number of presets reached.\"));\n        return;\n    }\n    m_colorList.append(color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 58.2843020367553}, {"code": "void ColorPickerEditor::addPreset(){\n\t    QColor color = m_colorPicker->color();\n    if (m_colorList.contains(color)) {\n        return;\n    }\n    if (m_colorList.size() >= m_maxPresets) {\n        QMessageBox::critical(this, tr(\"Error\"), tr(\"Maximum number of presets reached.\"));\n        return;\n    }\n    m_colorList.append(color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 59.654316327523894}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout();\n    m_vLayout = new QVBoxLayout();\n    const int spacing = QApplication::fontMetrics().lineSpacing() + 5;\n    m_hLayout->setSpacing(spacing);\n    m_vLayout->setSpacing(spacing);\n    initButtons();\n    initColorWheel();\n    m_vLayout->addStretch();\n    m_hLayout->addLayout(m_vLayout);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 58.07120681207522}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout(this);\n    m_vLayout = new QVBoxLayout();\n    const int extraSize = GlobalValues::buttonBaseSize() / 3;\n    int frameSize = GlobalValues::buttonBaseSize() + extraSize;\n    m_vLayout->addSpacing(frameSize);\n    initButtons();\n    initColorWheel();\n    m_vLayout->addSpacing(frameSize);\n    m_hLayout->addLayout(m_vLayout);\n    m_hLayout->setAlignment(m_vLayout, Qt::AlignCenter);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 57.08731930998726}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout(this);\n    m_vLayout = new QVBoxLayout();\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    m_hLayout->addLayout(m_vLayout);\n\n    initButtons();\n    initColorWheel();\n\n    m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing() * 2);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 51.33306684295766}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QPixmap capture;\n    if (req.initialSelection().isNull()) {\n        capture = ScreenGrabber().grabEntireDesktop();\n    } else {\n        capture = ScreenGrabber().grab(req.initialSelection());\n    }\n\n    if (!capture.isNull()) {\n        exportCapture(capture, req.initialSelection(), req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 53.43437845722195}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QPixmap capture = ScreenGrabber().grabEntireDesktop();\n\n    if (!req.initialSelection().isNull()) {\n        capture = capture.copy(req.initialSelection());\n    }\n\n    if (!capture.isNull()) {\n        exportCapture(capture, req.initialSelection(), req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 48.961794675777504}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QPixmap capture = ScreenGrabber().grabEntireDesktop();\n    if (!capture.isNull()) {\n        if (!req.initialSelection().isNull()) {\n            capture = capture.copy(req.initialSelection());\n        }\n        exportCapture(capture, req.initialSelection(), req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 49.569796441592295}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (m_instance) {\n        m_instance->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray byteArray;\n        QBuffer buffer(&byteArray);\n        capture.save(&buffer, \"PNG\");\n        m << byteArray;\n        call(m);\n    }\n}", "CodeBleu_score": 63.02985225406324}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (m_instance) {\n        m_instance->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray data;\n        QBuffer buffer(&data);\n        buffer.open(QIODevice::WriteOnly);\n        capture.save(&buffer, \"PNG\");\n        m.setArguments({data});\n        call(m);\n    }\n}", "CodeBleu_score": 61.41881436936314}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray byteArray;\n        QBuffer buffer(&byteArray);\n        buffer.open(QIODevice::WriteOnly);\n        capture.save(&buffer, \"PNG\");\n        m << byteArray;\n        call(m);\n    }\n}", "CodeBleu_score": 71.02790171866495}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    qCDebug(lcFlameshotDaemon) << \"Attaching text to clipboard:\" << text;\n    if (!notification.isEmpty()) {\n        qCDebug(lcFlameshotDaemon) << notification;\n    }\n    m_clipboard->blockSignals(true);\n    m_clipboard->setText(text);\n    m_clipboard->blockSignals(false);\n}", "CodeBleu_score": 51.10157313904664}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    if (!notification.isEmpty()) {\n        Logger::instance().log(notification, Logger::DAEMON);\n    }\n    m_clipboard->blockSignals(true);\n    m_clipboard->setText(text);\n    m_clipboard->blockSignals(false);\n}", "CodeBleu_score": 53.40863980444529}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    if (m_clipboardHosting) {\n        return;\n    }\n    m_clipboardHosting = true;\n    auto clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    if (!notification.isEmpty()) {\n        qInfo() << notification;\n    }\n    clipboard->setText(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 64.35904287009893}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    context.request.tasks = geometry.topLeft();\n    context.request.addTask = true;\n    geometry.moveTopLeft(context.widgetOffset);\n    emit requestCapture(context);\n    emit requestClose(context);\n}", "CodeBleu_score": 39.66206811424463}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    context.request.tasks = geometry.topLeft();\n    context.request.addTask = [&](CaptureRequest::Task& task) {\n        task.geometry.moveTopLeft(geometry.topLeft());\n        task.type = CaptureRequest::Task::PIN;\n    };\n    context.request.emit();\n    context.request.close();\n}", "CodeBleu_score": 45.68461645549859}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    context.request.tasks.push_back(context.request.captureTask);\n    if (context.request.captureTask.type == TaskType::PIN) {\n        auto& geometry = context.request.tasks.back().geometry;\n        geometry.moveTopLeft(geometry.topLeft() - context.widgetOffset);\n        context.request.addTask = true;\n    }\n    context.request.closeGUI = true;\n    emit requestGenerated(context.request);\n}", "CodeBleu_score": 42.699932117336736}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    int oldLength = m_appList.length();\n    QStringList desktopFiles = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"));\n    for (const QString& fileName : desktopFiles) {\n        bool ok;\n        DesktopAppData data = parseDesktopFile(dir.absoluteFilePath(fileName), ok);\n        if (ok) {\n            m_appList.append(data);\n        }\n    }\n    return m_appList.length() - oldLength;\n}", "CodeBleu_score": 66.04589922017367}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    int initialLength = m_appList.length();\n    QStringList entryList = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"));\n    for (const QString& fileName : entryList) {\n        if (fileName.startsWith(QLatin1String(\".\"))) {\n            continue;\n        }\n        bool ok;\n        DesktopAppData appData = parseDesktopFile(dir.absoluteFilePath(fileName), ok);\n        if (ok) {\n            m_appList.append(appData);\n        }\n    }\n    return m_appList.length() - initialLength;\n}", "CodeBleu_score": 65.3813022317774}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    int initialLength = m_appList.length();\n    QStringList desktopFiles = dir.entryList({ QStringLiteral(\"*.desktop\") },\n                                             QDir::Files, QDir::Name);\n    for (const QString& desktopFile : desktopFiles) {\n        bool ok = false;\n        DesktopAppData appData = parseDesktopFile(dir.absoluteFilePath(desktopFile), ok);\n        if (ok) {\n            m_appList.append(appData);\n        }\n    }\n    return m_appList.length() - initialLength;\n}", "CodeBleu_score": 62.99477946674522}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n\n  for (const auto& category : categories) {\n    res[category] = {};\n  }\n\n  for (const auto& app : m_apps) {\n    for (const auto& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n\n  return res;\n}", "CodeBleu_score": 83.31281271815399}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n  for (auto& category : categories) {\n    res.insert(category, QVector<DesktopAppData>());\n  }\n\n  for (auto& app : m_apps) {\n    for (auto& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n\n  return res;\n}", "CodeBleu_score": 81.14183822941553}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n  for (const auto& category : categories) {\n    res[category] = QVector<DesktopAppData>();\n  }\n  for (const auto& app : m_appList) {\n    for (const auto& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n  return res;\n}", "CodeBleu_score": 82.9604413553109}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    auto err = AbstractLogger::error(AbstractLogger::Stderr);\n    auto info = AbstractLogger::info(AbstractLogger::Stderr);\n\n    QString completePath = FileNameHandler().properScreenshotPath(path);\n    QFile file(completePath);\n    if (!file.open(QIODevice::WriteOnly)) {\n        err << QObject::tr(\"Unable to save to file \") << completePath\n            << \": \" << file.errorString();\n        return false;\n    }\n\n    QString saveMessage = messagePrefix;\n    if (QFileInfo(completePath).suffix().toLower() == \"png\") {\n        saveMessage += QObject::tr(\"PNG image saved to \");\n    } else if (QFileInfo(completePath).suffix().toLower() == \"jpg\" ||\n               QFileInfo(completePath).suffix().toLower() == \"jpeg\") {\n        saveMessage += QObject::tr(\"JPEG image saved to \");\n    }\n    saveMessage += completePath;\n\n    bool ok = false;\n    if (QFileInfo(completePath).suffix().toLower() == \"png\") {\n        ok = capture.save(&file, \"PNG\");\n    } else if (QFileInfo(completePath).suffix().toLower() == \"jpg\" ||\n               QFileInfo(completePath).suffix().toLower() == \"jpeg\") {\n        ok = capture.save(&file,\n                          \"JPEG\",\n                          ConfigHandler().jpegQuality());\n    }\n\n    if (ok) {\n        info << saveMessage;\n    } else {\n        err << QObject::tr(\"Unable to save to file \") << completePath;\n    }\n\n    return ok;\n}", "CodeBleu_score": 52.502313105557754}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    auto err = AbstractLogger::error(AbstractLogger::Stderr);\n    auto completePath = FileNameHandler().properScreenshotPath(path);\n    QFile file(completePath);\n    if (file.open(QIODevice::WriteOnly)) {\n        QString saveMessage;\n        if (completePath.endsWith(QStringLiteral(\".png\"))) {\n            saveMessage = messagePrefix + \" \" + completePath;\n            if (capture.save(&file, \"PNG\")) {\n                AbstractLogger::info().attachNotificationPath(completePath);\n                AbstractLogger::info() << saveMessage;\n                return true;\n            }\n            saveMessage = messagePrefix + \" \" + completePath + \" \" +\n                           file.errorString();\n        } else if (completePath.endsWith(QStringLiteral(\".jpg\")) ||\n                   completePath.endsWith(QStringLiteral(\".jpeg\"))) {\n            saveMessage = messagePrefix + \" \" + completePath;\n            if (capture.save(&file,\n                             \"JPG\",\n                             ConfigHandler().jpegQuality())) {\n                AbstractLogger::info().attachNotificationPath(completePath);\n                AbstractLogger::info() << saveMessage;\n                return true;\n            }\n            saveMessage = messagePrefix + \" \" + completePath + \" \" +\n                           file.errorString();\n        } else {\n            saveMessage = messagePrefix + \" \" + completePath + \" \" +\n                           tr(\"Could not write file\");\n        }\n        AbstractLogger::error().attachNotificationPath(completePath);\n        AbstractLogger::error() << saveMessage;\n        return false;\n    } else {\n        AbstractLogger::error().attachNotificationPath(completePath);\n        AbstractLogger::error() << messagePrefix + \" \" + completePath + \" \" +\n                                  file.errorString();\n        return false;\n    }\n}", "CodeBleu_score": 45.24598512819622}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    auto completePath =\n      FileNameHandler().properScreenshotPath(path, messagePrefix);\n    QFile file(completePath);\n    if (!file.open(QIODevice::WriteOnly)) {\n        auto err = AbstractLogger::error(AbstractLogger::Stderr);\n        err << \"Error saving to filesystem: \" << file.errorString();\n        return false;\n    }\n\n    auto saveMessage = QStringLiteral(\"Screenshot saved to \");\n    saveMessage += completePath;\n    auto saveFormat = QFileInfo(completePath).suffix().toLower();\n    if (saveFormat == QStringLiteral(\"jpeg\") ||\n        saveFormat == QStringLiteral(\"jpg\")) {\n        saveMessage += QStringLiteral(\" with JPEG quality \");\n        saveMessage += QString::number(ConfigHandler().jpegQuality());\n    }\n\n    bool ok = capture.save(&file, saveFormat.toLocal8Bit().constData());\n    if (ok) {\n        AbstractLogger::info().attachNotificationPath(completePath);\n        AbstractLogger::info() << saveMessage;\n    } else {\n        AbstractLogger::error() << saveMessage << \": \" << file.errorString();\n    }\n    return ok;\n}", "CodeBleu_score": 48.89471774797752}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t    this->active.clear();\n    for (const auto &modpack_id : load_order) {\n        auto modpack = this->available.at(modpack_id);\n        this->active.emplace(modpack_id, modpack);\n        log::log(log::INFO, \"Activated modpack: \" + modpack_id);\n    }\n}", "CodeBleu_score": 66.81830151893425}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t    this->active.clear();\n    for (const auto &modpack_id : load_order) {\n        const auto &modpack = this->available.at(modpack_id);\n        this->active.emplace(modpack_id, modpack);\n        log::log(log::INFO, \"Activated modpack: \" + modpack->get_name());\n    }\n}", "CodeBleu_score": 65.33630601881524}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t    this->active.clear();\n    for (const auto &modpack_id : load_order) {\n        auto modpack = this->available.at(modpack_id);\n        this->active.emplace(modpack_id, modpack);\n        log::log(INFO, \"Activated modpack: {}\", modpack_id);\n    }\n}", "CodeBleu_score": 65.8492779382233}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t    std::set<std::string> requested;\n    for (const auto &modpack : load_order) {\n        if (!this->available.contains(modpack)) {\n            throw std::runtime_error(\"Requested modpack \" + modpack + \" is not available\");\n        }\n        requested.insert(modpack);\n        for (const auto &dependency : this->available[modpack].dependencies) {\n            if (!requested.contains(dependency)) {\n                throw std::runtime_error(\"Modpack \" + modpack + \" requires \" + dependency + \" which is not in the load order\");\n            }\n        }\n        for (const auto &conflict : this->available[modpack].conflicts) {\n            if (requested.contains(conflict)) {\n                throw std::runtime_error(\"Modpack \" + modpack + \" conflicts with \" + conflict + \" which is in the load order\");\n            }\n        }\n    }\n    this->load_order = load_order;\n}", "CodeBleu_score": 56.56967250149072}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t    std::set<std::string> requested;\n    for (const auto &modpack : load_order) {\n        if (!this->available.contains(modpack)) {\n            throw std::runtime_error(\"Modpack \" + modpack + \" is unavailable\");\n        }\n        requested.insert(modpack);\n    }\n    for (const auto &modpack : requested) {\n        for (const auto &dependency : this->available.at(modpack).dependencies) {\n            if (!requested.contains(dependency)) {\n                throw std::runtime_error(\"Modpack \" + modpack + \" requires \" + dependency + \" which is not in the load order\");\n            }\n        }\n        for (const auto &conflict : this->available.at(modpack).conflicts) {\n            if (requested.contains(conflict)) {\n                throw std::runtime_error(\"Modpack \" + modpack + \" conflicts with \" + conflict + \" which is in the load order\");\n            }\n        }\n    }\n    this->load_order = load_order;\n}", "CodeBleu_score": 55.90401792666213}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t    std::set<std::string> requested;\n    for (const auto &modpack : load_order) {\n        if (!this->available.contains(modpack)) {\n            throw std::runtime_error(\"Requested modpack \" + modpack + \" is unavailable\");\n        }\n        requested.insert(modpack);\n        for (const auto &dependency : this->available[modpack].dependencies) {\n            if (!this->available.contains(dependency)) {\n                throw std::runtime_error(\"Dependency \" + dependency + \" of modpack \" + modpack + \" is unavailable\");\n            }\n            if (!requested.contains(dependency)) {\n                throw std::runtime_error(\"Dependency \" + dependency + \" of modpack \" + modpack + \" is not requested\");\n            }\n        }\n        for (const auto &conflict : this->available[modpack].conflicts) {\n            if (requested.contains(conflict)) {\n                throw std::runtime_error(\"Conflict \" + conflict + \" of modpack \" + modpack + \" is requested\");\n            }\n        }\n    }\n    this->load_order = load_order;\n}", "CodeBleu_score": 53.82570595134174}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t    if (this->resources.empty()) {\n        for (const auto &sound_file : sound_files) {\n            std::string key = sound_file.category + \"_\" + std::to_string(sound_file.id);\n            auto it = this->resources.find(key);\n            if (it == this->resources.end()) {\n                auto resource = Resource::create_resource(sound_file.path);\n                this->resources.insert(std::make_pair(key, resource));\n            }\n        }\n    }\n}", "CodeBleu_score": 56.37926021220549}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t    if (!resources.empty()) {\n        return;\n    }\n\n    for (const auto &file : sound_files) {\n        std::string key = file.category + \"_\" + std::to_string(file.id);\n\n        if (resources.find(key) != std::end(resources)) {\n            continue;\n        }\n\n        resources.insert(std::make_pair(key, Resource::create_resource(file.path)));\n    }\n}", "CodeBleu_score": 56.08922557400149}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t    if (sound_files.empty()) {\n        return;\n    }\n\n    for (const auto &sound_file : sound_files) {\n        std::string key = sound_file.category + \"_\" + sound_file.id;\n\n        if (this->resources.find(key) != this->resources.end()) {\n            continue;\n        }\n\n        Resource resource = Resource::create_resource(sound_file.path);\n        this->resources.insert(std::make_pair(key, resource));\n    }\n}", "CodeBleu_score": 62.109632258341364}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t    if (!m_audio_manager) {\n        throw std::runtime_error(\"Audio manager not available.\");\n    }\n\n    auto resource = resources.find({category, id});\n    if (resource == resources.end()) {\n        throw std::runtime_error(\"Sound resource does not exist.\");\n    }\n\n    return Sound(m_audio_manager, std::make_shared<SoundImpl>(resource->second));\n}", "CodeBleu_score": 42.8397207753336}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t    if (!available) {\n        throw std::runtime_error(\"Audio manager not available.\");\n    }\n\n    auto it = resources.find(std::make_tuple(category, id));\n    if (it == resources.end()) {\n        throw std::runtime_error(\"Sound resource does not exist.\");\n    }\n\n    auto resource = it->second;\n    return Sound(std::make_shared<SoundImpl>(resource));\n}", "CodeBleu_score": 45.603947676591794}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t    if (!audio_manager_) {\n        throw std::runtime_error(\"Audio manager not available\");\n    }\n\n    auto it = resources.find(std::make_tuple(category, id));\n    if (it == std::end(resources)) {\n        throw std::runtime_error(\"Sound resource does not exist\");\n    }\n\n    return Sound(audio_manager_, std::make_shared<SoundImpl>(it->second));\n}", "CodeBleu_score": 47.71387184526457}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t    SoundCategory category = sound->get_category();\n    auto &playing_list = this->playing_sounds[category];\n    playing_list.push_back(sound);\n    // TODO: check if the sound already exists in the playing list before adding it\n}", "CodeBleu_score": 75.74404427699193}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t    SoundCategory category = sound->get_category();\n    auto &playing_list = this->playing_sounds[category];\n    playing_list.push_back(sound);\n\n    // TODO: Check if sound already exists in the playing list before adding it\n}", "CodeBleu_score": 75.74404427699193}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t    std::string category = sound->get_category();\n    auto it = this->playing_sounds.find(category);\n    if (it == this->playing_sounds.end()) {\n        this->playing_sounds[category] = std::vector<std::shared_ptr<SoundImpl>>();\n    }\n    this->playing_sounds[category].push_back(sound);\n}", "CodeBleu_score": 59.663550703483835}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t    std::unique_lock<std::mutex> lock(mutex_);\n    auto now = std::chrono::system_clock::now();\n    auto elapsed = now - last_check_;\n    if (elapsed == std::chrono::milliseconds(0)) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        return;\n    }\n    if (elapsed > std::chrono::milliseconds(max_tick_time_)) {\n        elapsed = std::chrono::milliseconds(max_tick_time_);\n    }\n    if (state_ == Clock::State::RUNNING) {\n        sim_time_ += std::chrono::duration_cast<std::chrono::milliseconds>(elapsed * speed_);\n        real_time_ += elapsed;\n    }\n    last_check_ = now;\n}", "CodeBleu_score": 49.37012517092195}, {"code": "void Clock::update_time(){\n\t    std::unique_lock<std::mutex> lck(mtx);\n    auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - last_check);\n    if (elapsed.count() == 0) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        return;\n    }\n    if (elapsed.count() > max_tick_time) {\n        elapsed = std::chrono::milliseconds(max_tick_time);\n    }\n    if (state == RUNNING) {\n        simulated_time += elapsed * speed;\n        real_time += elapsed;\n    }\n    last_check = std::chrono::steady_clock::now();\n}", "CodeBleu_score": 44.286590808748116}, {"code": "void Clock::update_time(){\n\t    std::unique_lock<std::mutex> lock(mutex_);\n    auto now = std::chrono::steady_clock::now();\n    auto elapsed = now - last_check_;\n    if (elapsed == std::chrono::milliseconds::zero()) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        return;\n    }\n    if (elapsed > std::chrono::milliseconds(max_tick_time_)) {\n        elapsed = std::chrono::milliseconds(max_tick_time_);\n    }\n    if (state_ == ClockState::RUNNING) {\n        auto adjusted_elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(elapsed * speed_);\n        sim_time_ += adjusted_elapsed;\n        real_time_ += elapsed;\n    }\n    last_check_ = now;\n}", "CodeBleu_score": 48.52899522029972}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t    float y_delta = scene_pos[1] - this->pos[1];\n    float xz_distance = std::sqrt(std::pow(scene_pos[0] - this->pos[0], 2) + std::pow(scene_pos[2] - this->pos[2], 2));\n    float new_x = this->pos[0] + (xz_distance * std::cos(this->yaw)) * std::cos(this->pitch);\n    float new_z = this->pos[2] + (xz_distance * std::sin(this->yaw)) * std::cos(this->pitch);\n    this->move_to(new_x, this->pos[1] + y_delta, new_z);\n}", "CodeBleu_score": 40.22568603824396}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t    float y_delta = scene_pos.y() - this->pos.y();\n    float xz_distance = sqrt(pow(scene_pos.x() - this->pos.x(), 2) + pow(scene_pos.z() - this->pos.z(), 2));\n    float new_x = this->pos.x() + (xz_distance * cos(this->yaw));\n    float new_z = this->pos.z() + (xz_distance * sin(this->yaw));\n    this->move_to(Eigen::Vector3f(new_x, this->pos.y() + y_delta, new_z));\n}", "CodeBleu_score": 31.94445663503703}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t    float y_delta = scene_pos.y() - this->position.y();\n    float xz_distance = sqrt(pow(scene_pos.x() - this->position.x(), 2) + pow(scene_pos.z() - this->position.z(), 2));\n    float new_x = this->position.x() + (xz_distance * cos(this->yaw)) - (y_delta * sin(this->yaw));\n    float new_z = this->position.z() + (xz_distance * sin(this->yaw)) + (y_delta * cos(this->yaw));\n    this->move_to(Eigen::Vector3f(new_x, scene_pos.y(), new_z));\n}", "CodeBleu_score": 34.32253392387378}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        QString filePath = url.toLocalFile();\n\n        if (muse::audio::synth::isSoundFont(filePath)) {\n            return DragTarget::SoundFont;\n        }\n\n        if (extensionInstaller()->isFileSupported(filePath)) {\n            return DragTarget::Extension;\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 86.7354472010569}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n    if (url.isLocalFile()) {\n        const QString filePath = url.toLocalFile();\n        if (muse::audio::synth::isSoundFont(filePath)) {\n            return DragTarget::SoundFont;\n        }\n        if (extensionInstaller()->isFileSupported(filePath)) {\n            return DragTarget::Extension;\n        }\n    }\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 86.79167751880621}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        QFileInfo fileInfo(url.toLocalFile());\n        if (muse::audio::synth::isSoundFont(fileInfo)) {\n            return DragTarget::SoundFont;\n        }\n        if (extensionInstaller()->isFileSupported(fileInfo)) {\n            return DragTarget::Extension;\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 80.01568238127096}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    auto& projects = configuration()->sessionProjectsPaths();\n    if (projects.empty()) {\n        return;\n    }\n    projects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n    configuration()->setSessionProjectsPaths(projects);\n}", "CodeBleu_score": 92.99391117982863}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    auto& projects = configuration()->sessionProjectsPaths();\n\n    if (!projects.empty()) {\n        projects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 80.28670607888277}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    auto projects = configuration()->sessionProjectsPaths();\n    if (!projects.empty()) {\n        auto it = std::remove(projects.begin(), projects.end(), projectPath);\n        if (it != projects.end()) {\n            projects.erase(it, projects.end());\n            configuration()->setSessionProjectsPaths(projects);\n        }\n    }\n}", "CodeBleu_score": 69.40066531377191}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n    for (const Theme &theme : uiConfiguration()->themes()) {\n        if (theme.code() == \"high-contrast-white\" || theme.code() == \"high-contrast-black\") {\n            result.append(ThemeConverter::toMap(theme));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 63.012104492556645}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n    for (const Theme& theme : allThemes()) {\n        if (theme.code() == Theme::HighContrastWhiteCode || theme.code() == Theme::HighContrastBlackCode) {\n            result << ThemeConverter::toMap(theme);\n        }\n    }\n    return result;\n}", "CodeBleu_score": 73.62135944834664}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const auto& theme : allThemes()) {\n        if (theme.code() == ThemeCode::HighContrastWhite || theme.code() == ThemeCode::HighContrastBlack) {\n            result << ThemeConverter::toMap(theme);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 73.59671479049389}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n    std::function<void(QStandardItem*)> childPages = [&](QStandardItem* item) {\n        for (int i = 0; i < item->rowCount(); ++i) {\n            QStandardItem* child = item->child(i);\n            QVariantMap page;\n            page[\"id\"] = child->id();\n            page[\"path\"] = child->path();\n            result << page;\n            childPages(child);\n        }\n    };\n\n    childPages(m_rootItem);\n\n    return result;\n}", "CodeBleu_score": 54.10282273806861}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n    std::function<void(const QStandardItem*)> childPages = [&result, &childPages](const QStandardItem* item) {\n        for (int i = 0; i < item->rowCount(); ++i) {\n            QStandardItem* child = item->child(i);\n            QVariantMap page;\n            page[\"id\"] = child->id();\n            page[\"path\"] = child->path();\n            result << page;\n            childPages(child);\n        }\n    };\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 58.64593202554137}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n    std::function<void(QStandardItem *)> childPages;\n    childPages = [&childPages, &result](QStandardItem *item) {\n        for (int i = 0; i < item->rowCount(); ++i) {\n            QStandardItem *child = item->child(i);\n            QVariantMap page;\n            page[\"id\"] = child->id();\n            page[\"path\"] = child->path();\n            result << page;\n            childPages(child);\n        }\n    };\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 56.63765880725299}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    const RecentFilesList recentFiles = recentFilesController()->recentFilesList();\n\n    for (int i = 0; i < recentFiles.size(); ++i) {\n        RecentFile file = recentFiles.at(i);\n        MenuItem* item = new MenuItem(makeId(ActionCode::Code::FileOpen, i),\n                                      TranslatableString::untranslatable(file.displayName),\n                                      MenuItem::ItemType::Action);\n        item->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n        item->setId(makeId(ActionCode::Code::FileOpen, i));\n        item->setState(MenuItem::State::Enabled);\n        item->setSelectable(true);\n\n        if (projectConfiguration()->isCloudProject()) {\n            item->setIcon(IconCode::Code::Cloud);\n        }\n\n        items << item;\n    }\n\n    return items;\n}", "CodeBleu_score": 58.11507018578583}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    const RecentFilesList& recentFiles = recentFilesController()->recentFilesList();\n\n    for (int i = 0; i < recentFiles.size(); ++i) {\n        const RecentFile& file = recentFiles.at(i);\n\n        MenuItem* item = new MenuItem(this);\n        item->setArgs(make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n        item->setId(makeId(ActionCode::Code::FileOpen, i));\n        item->setAction(actionsRegister()->action(ActionCode::Code::FileOpen));\n        item->setIcon(file.isCloud ? IconCode::Code::FileCloud : IconCode::Code::File);\n        item->setState(file.isCloud ? MenuItemState::Disabled : MenuItemState::Enabled);\n        item->setSelectable(true);\n\n        items << item;\n    }\n\n    return items;\n}", "CodeBleu_score": 56.715326468560725}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    const RecentFilesList& recentFiles = recentFilesController()->recentFilesList();\n\n    for (int i = 0; i < recentFiles.size(); ++i) {\n        const RecentFile& file = recentFiles.at(i);\n        MenuItem* item = new MenuItem(this);\n        item->setId(makeId(ActionCode::FileOpen, i));\n        item->setAction(actionsRegister()->action(item->id()));\n        item->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n        item->setIcon(file.isCloud ? IconCode::Code::FileCloud : IconCode::Code::File);\n        item->setSelectable(true);\n        item->setState(file.isCloud ? MenuItemState::EnabledAndChecked : MenuItemState::Enabled);\n        items << item;\n    }\n\n    return items;\n}", "CodeBleu_score": 56.65858597831046}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (isNavigationStarted()) {\n        if (isMenuOpened()) {\n            return;\n        }\n    } else {\n        if (isMenuOpened()) {\n            restoreMUNavigationSystemState();\n        } else {\n            saveMUNavigationSystemState();\n        }\n    }\n\n    if (!byHover && isMenuOpened()) {\n        return;\n    }\n\n    if (isNavigationStarted()) {\n        setHighlightedMenuId(menuId);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 59.192270754873945}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (isNavigationStarted()) {\n        if (isMenuOpened()) {\n            return;\n        }\n\n        if (!byHover) {\n            if (isNavigationStarted()) {\n                saveMUNavigationSystemState();\n            } else if (isMenuOpened()) {\n                restoreMUNavigationSystemState();\n            }\n        }\n\n        setHighlightedMenuId(menuId);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 57.408449242462844}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (isNavigationStarted()) {\n        return;\n    }\n\n    if (isMenuOpened() && m_openedMenuId != menuId) {\n        saveMUNavigationSystemState();\n    }\n\n    if (!byHover && isMenuOpened()) {\n        restoreMUNavigationSystemState();\n        return;\n    }\n\n    if (isNavigationStarted()) {\n        setHighlightedMenuId(menuId);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 60.05730004673111}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    INotationPtr notation = this->notation();\n    if (!notation) {\n        return QVariant();\n    }\n\n    ViewMode currentViewMode = notation->viewMode();\n    for (const MenuItem* item : m_viewModeItems) {\n        if (item->id().toStdString() == ALL_MODE_MAP[currentViewMode]) {\n            if (currentViewMode == ViewMode::LINE || currentViewMode == ViewMode::SYSTEM) {\n                item->setTitle(TranslatableString(\"notation\", \"Continuous view\"));\n            }\n            return QVariant::fromValue(item);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 62.99037393536891}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    if (!notation()) {\n        return QVariant();\n    }\n\n    ViewMode currentViewMode = notation()->viewMode();\n\n    for (const MenuItem* item: m_modeItems) {\n        if (item->id().toStdString() == ALL_MODE_MAP[currentViewMode]) {\n            if (currentViewMode == ViewMode::LINE || currentViewMode == ViewMode::SYSTEM) {\n                item->setTitle(TranslatableString(\"notation\", \"Continuous view\"));\n            }\n\n            return QVariant::fromValue(item);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 65.30401715498071}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    if (!notation()) {\n        return QVariant();\n    }\n\n    ViewMode currentViewMode = notation()->viewMode();\n\n    for (MenuItem* modeItem : m_availableViewModeList) {\n        if (modeItem->id().toStdString() == ALL_MODE_MAP.key(currentViewMode)) {\n            if (currentViewMode == ViewMode::LINE || currentViewMode == ViewMode::SYSTEM) {\n                modeItem->setTitle(TranslatableString(\"notation\", \"Continuous view\"));\n            }\n\n            return QVariant::fromValue(modeItem);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 70.23766522699833}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t", "CodeBleu_score": 6.212095447328747}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    make_ret(muse::Ret::Code::Ok);\n\n    if (!notation) {\n        return make_ret(muse::Ret::Code::ArgumentInvalid);\n    }\n\n    if (!notation->score()) {\n        return make_ret(muse::Ret::Code::ArgumentInvalid);\n    }\n\n    ByteArray buffer;\n    muse::Ret ret = write(notation, buffer);\n    if (!ret) {\n        return ret;\n    }\n\n    return destinationDevice.write(buffer);\n}", "CodeBleu_score": 38.8485721435331}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    using namespace notation;\n    using namespace muse;\n\n    IF_ASSERT_FAILED(notation) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    INotationWriterPtr writer = writers()->writer(muse::io::path(destinationDevice.name()).suffix());\n    if (!writer) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    return writer->write(notation, destinationDevice, Options());\n}", "CodeBleu_score": 44.68264651964853}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n\n    if (lines.empty()) {\n        return \"\";\n    }\n\n    std::string braille_txt = braille_translate(table_name, lines[0]);\n\n    for (size_t i = 1; i < lines.size(); i++) {\n        std::string braille_line = braille_translate(table_name, lines[i]);\n        braille_txt += \" \" + braille_line;\n    }\n\n    return braille_txt;\n}", "CodeBleu_score": 74.36520236596265}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n\n    if (lines.empty()) {\n        return \"\";\n    }\n\n    std::string braille = braille_translate(table_name, lines[0]);\n\n    for (size_t i = 1; i < lines.size(); i++) {\n        braille += \" \" + braille_translate(table_name, lines[i]);\n    }\n\n    return braille;\n}", "CodeBleu_score": 70.10020135699757}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n    if (lines.empty()) {\n        return std::string();\n    }\n\n    std::string buffer = braille_translate(table_name, lines.front());\n    for (auto it = lines.begin() + 1; it != lines.end(); ++it) {\n        buffer += \" \" + braille_translate(table_name, *it);\n    }\n\n    return buffer;\n}", "CodeBleu_score": 66.51766984067952}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    auto ent = std::make_shared<ProxyEntity>();\n    if (ent->Load(jsonPath)) {\n        auto entType = ent->GetEntityType();\n        auto entVersion = ent->GetEntityVersion();\n        if (entType == EntityType::ENTITY_TYPE_UNKNOWN) {\n            qWarning() << \"Entity type is unknown!\";\n            return nullptr;\n        }\n        if (entVersion == EntityVersion::ENTITY_VERSION_UNKNOWN) {\n            qWarning() << \"Entity version is unknown!\";\n            return nullptr;\n        }\n        auto ent0 = std::make_shared<ProxyEntity>();\n        ent0->SetEntityType(entType);\n        ent0->SetEntityVersion(entVersion);\n        ent0->SetLoadControl(true);\n        ent0->SetJsonPath(jsonPath);\n        if (ent0->Load()) {\n            return ent0;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 41.558517532064336}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    // Initialize a temporary ProxyEntity to check the validity and type of the JSON\n    std::shared_ptr<ProxyEntity> tmpEntity = std::make_shared<ProxyEntity>();\n    if (!tmpEntity->LoadFromJson(jsonPath)) {\n        return nullptr;\n    }\n\n    // Determine the type of the entity based on the \"type\" field in the JSON\n    QString type = tmpEntity->GetType();\n\n    // Create a new ProxyEntity of the determined type\n    std::shared_ptr<ProxyEntity> entity;\n    if (type == \"ProxyEntity\") {\n        entity = std::make_shared<ProxyEntity>();\n    } else if (type == \"ProxyEntity2\") {\n        entity = std::make_shared<ProxyEntity2>();\n    } else {\n        return nullptr;\n    }\n\n    // Check the version of the entity\n    if (!entity->IsCompatible(tmpEntity->GetVersion())) {\n        return nullptr;\n    }\n\n    // Set the load control flag, assign the JSON path, and load the entity\n    entity->SetLoadControl(true);\n    entity->SetJsonPath(jsonPath);\n    entity->LoadFromJson(jsonPath);\n\n    return entity;\n}", "CodeBleu_score": 43.91292688474141}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    // Initialize a temporary ProxyEntity to check the validity and type of the JSON\n    std::shared_ptr<ProxyEntity> tempEntity = std::make_shared<ProxyEntity>();\n    if (!tempEntity->LoadFromFile(jsonPath)) {\n        qDebug() << \"Failed to load proxy entity from JSON file.\";\n        return nullptr;\n    }\n\n    // Create a new ProxyEntity of the determined type\n    std::shared_ptr<ProxyEntity> entity;\n    switch (tempEntity->GetType()) {\n        case ProxyEntityType::kProxyEntityType_ProxyEntity:\n            entity = std::make_shared<ProxyEntity>();\n            break;\n        case ProxyEntityType::kProxyEntityType_ProxyEntity_New:\n            entity = std::make_shared<NewProxyEntity>();\n            break;\n        default:\n            qDebug() << \"Unknown proxy entity type.\";\n            return nullptr;\n    }\n\n    // Check the version of the entity\n    if (tempEntity->GetVersion() != entity->GetVersion()) {\n        qDebug() << \"Proxy entity version mismatch.\";\n        return nullptr;\n    }\n\n    // Set the load control flag, assign the JSON path, and load the entity\n    entity->SetLoadControl(true);\n    entity->SetJsonPath(jsonPath);\n    if (!entity->LoadFromFile(jsonPath)) {\n        qDebug() << \"Failed to load proxy entity from JSON file.\";\n        return nullptr;\n    }\n\n    return entity;\n}", "CodeBleu_score": 39.87733541833235}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    QUrl url(link);\n    if (!url.isValid())\n        return false;\n\n    if (url.scheme() != \"https\" && url.scheme() != \"quic\")\n        return false;\n\n    name = url.fragment().mid(1);\n    serverAddress = url.host();\n    port = url.port();\n    username = url.userName();\n    password = url.password();\n\n    return !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 56.86881613243939}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    QUrl url(link);\n    if (!url.isValid()) {\n        return false;\n    }\n    if (url.scheme() != \"https\" && url.scheme() != \"quic\") {\n        return false;\n    }\n    auto name = url.fragment(QUrl::FullyDecoded);\n    auto serverAddress = url.host();\n    auto port = url.port();\n    auto username = url.userName();\n    auto password = url.password();\n    if (username.isEmpty() || password.isEmpty() || serverAddress.isEmpty()) {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 48.05701649763254}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    QUrl url(link);\n    if (!url.isValid()) {\n        return false;\n    }\n    if (url.scheme() != \"https\" && url.scheme() != \"quic\") {\n        return false;\n    }\n    auto name = url.fragment().mid(1);\n    auto serverAddress = url.host();\n    auto port = url.port();\n    auto username = url.userName();\n    auto password = url.password();\n    return !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 48.85152425512221}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t  if (callback_before_save) {\n    callback_before_save();\n  }\n  if (!allow_save) {\n    return false;\n  }\n  auto json_bytes = ToJsonBytes();\n  if (json_bytes == last_saved_content) {\n    return false;\n  }\n  last_saved_content = json_bytes;\n  file.open(QIODevice::WriteOnly);\n  file.write(json_bytes);\n  file.close();\n  return true;\n}", "CodeBleu_score": 48.006274208753666}, {"code": "bool JsonStore::Save(){\n\t    bool has_changed = false;\n    if (callback_before_save) {\n        callback_before_save();\n    }\n    if (!allow_save) {\n        return has_changed;\n    }\n    QByteArray json_bytes = ToJsonBytes();\n    if (json_bytes != last_saved_content) {\n        has_changed = true;\n        last_saved_content = json_bytes;\n    }\n    if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {\n        file.write(json_bytes);\n        file.close();\n    }\n    return has_changed;\n}", "CodeBleu_score": 50.382416771822825}, {"code": "bool JsonStore::Save(){\n\t    if (callback_before_save != nullptr) {\n        callback_before_save();\n    }\n    if (save_enabled) {\n        QByteArray json_bytes = ToJsonBytes();\n        if (json_bytes != last_saved_content) {\n            last_saved_content = json_bytes;\n            file.open(QIODevice::WriteOnly | QIODevice::Text);\n            file.write(json_bytes);\n            file.close();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 55.32176000881319}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    QTimer *timer = new QTimer(obj);\n    timer->setSingleShot(true);\n    timer->setInterval(timeout);\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        callback();\n        timer->deleteLater();\n    });\n    timer->start();\n}", "CodeBleu_score": 64.8717885310015}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    QTimer *timer = new QTimer(obj);\n    timer->setSingleShot(true);\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        callback();\n        timer->deleteLater();\n    });\n    timer->start(timeout);\n}", "CodeBleu_score": 63.10023419062958}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    QTimer *timer = new QTimer(obj);\n    timer->setSingleShot(true);\n    QObject::connect(timer, &QTimer::timeout, [callback, timer]() {\n        callback();\n        timer->deleteLater();\n    });\n    timer->start(timeout);\n}", "CodeBleu_score": 62.83169711329458}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return QByteArray();\n    }\n\n    if (networkReply->rawHeader(GrpcStatusHeader).toInt() != GrpcStatusOk) {\n        QStringList errstr = QString::fromUtf8(networkReply->rawHeader(GrpcMessageHeader)).split('\n');\n        if (errstr.size() > 0) {\n            errstr.removeFirst();\n        }\n        MW_show_log(\"gRPC error: \" + errstr.join('\n'));\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return QByteArray();\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return networkReply->readAll().mid(GrpcMessageSizeHeaderSize);\n}", "CodeBleu_score": 64.65870350055258}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    statusCode = networkReply->error();\n    if (statusCode != QNetworkReply::NoError) {\n        return QByteArray();\n    }\n\n    QVariant statusCodeHeader = networkReply->rawHeader(GrpcStatusHeader);\n    if (!statusCodeHeader.isNull()) {\n        int statusCodeInt = statusCodeHeader.toInt();\n        if (statusCodeInt != GrpcOk) {\n            QString errstr = QString(\"gRPC error: %1\").arg(networkReply->rawHeader(GrpcMessageHeader));\n            qWarning() << errstr;\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return QByteArray();\n        }\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return networkReply->readAll().mid(GrpcMessageSizeHeaderSize);\n}", "CodeBleu_score": 57.00592870829675}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return QByteArray();\n    }\n\n    QByteArray response = networkReply->readAll();\n\n    // Check for server-side gRPC errors\n    if (networkReply->rawHeader(GrpcStatusHeader).toInt() != 0) {\n        QString errstr = QString::fromUtf8(networkReply->rawHeader(GrpcMessageHeader));\n        if (errstr.isEmpty()) {\n            errstr = QString(\"gRPC error %1\").arg(networkReply->rawHeader(GrpcStatusHeader).toInt());\n        }\n        qCWarning(grpc) << errstr;\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return QByteArray();\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return response.mid(GrpcMessageSize);\n}", "CodeBleu_score": 63.30851526373578}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    grpc::ClientContext context;\n    libcore::ErrorReply reply;\n    grpc::Status status = default_grpc_channel->Call(&context, request, &reply);\n    if (status.ok()) {\n        *rpcOK = true;\n    } else {\n        *rpcOK = false;\n    }\n    return reply.error();\n}", "CodeBleu_score": 60.040618098788}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    grpc::ClientContext ctx;\n    libcore::ErrorReply reply;\n    auto status = stub_->Start(&ctx, request, &reply);\n    if (status.ok()) {\n        *rpcOK = true;\n        return reply.error();\n    }\n    *rpcOK = false;\n    return \"\";\n}", "CodeBleu_score": 60.62397615333131}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    grpc::ClientContext context;\n    libcore::LoadConfigReply reply;\n    grpc::Status status = stub_->Start(&context, request, &reply);\n    *rpcOK = status.ok();\n    if (!status.ok()) {\n        return QString::fromStdString(status.error_message());\n    }\n    return QString::fromStdString(reply.error());\n}", "CodeBleu_score": 46.90962639460662}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\"));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\"));\n    }\n}", "CodeBleu_score": 68.29196706190531}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth()) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\"));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\"));\n    }\n}", "CodeBleu_score": 72.29510236257042}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\"));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\"));\n    }\n}", "CodeBleu_score": 68.29196706190531}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t", "CodeBleu_score": 3.3892240801453246}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    auto group = new NekoGui::Group();\n    auto dialog = new DialogEditGroup(group, this);\n    dialog->exec();\n    dialog->deleteLater();\n    if (dialog->result() == QDialog::Accepted) {\n        NekoGui::profileManager->AddGroup(group);\n        ui->listWidget->addItem(group->name);\n        MW_dialog_message(Dialog_Message_Info, tr(\"New group added.\"));\n    }\n}", "CodeBleu_score": 57.968813886250494}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    NekoGui::ProfileManager::NewGroup group;\n    if (group.AddGroupToListIfExist()) {\n        auto dialog = new DialogEditGroup(this, group);\n        dialog->exec();\n        dialog->deleteLater();\n        if (dialog->result() == QDialog::Accepted) {\n            NekoGui::profileManager->AddGroup(group);\n            emit refresh();\n            MW_dialog_message(\"Group added.\");\n        }\n    }\n}", "CodeBleu_score": 54.70444877690329}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t    SaveDisplayRouting(CACHE.routing);\n    //\n    if (CACHE.active_routing != ui->routeCombo->currentText()) {\n        CACHE.active_routing = ui->routeCombo->currentText();\n        ui->routeCombo->setCurrentText(CACHE.active_routing);\n        ui->routeCombo->setCurrentIndex(ui->routeCombo->findText(CACHE.active_routing));\n    }\n    //\n    CACHE.routing->name = \"route_\" + CACHE.active_routing;\n    CACHE.routing->Save();\n    //\n    if (CACHE.routing->name != CACHE.active_routing) {\n        ui->info_label->setText(\n                tr(\"Route \") + CACHE.active_routing + tr(\" is changed, please restart Nekoray to take effect.\"));\n    } else {\n        ui->info_label->setText(tr(\"Route \") + CACHE.active_routing + tr(\" is saved.\"));\n    }\n    //\n    emit D_C_SAVE_STRING(CACHE.active_routing);\n    this->close();\n}", "CodeBleu_score": 29.01987490808688}, {"code": "void DialogManageRoutes::accept(){\n\t    SaveDisplayRouting();\n    //\n    if (NekoGui::dataStore->routing.active != ui->listWidget->currentRow()) {\n        // update display\n        NekoGui::dataStore->routing.active = ui->listWidget->currentRow();\n        NekoGui::dataStore->routing->UpdateDisplay();\n        //\n        NekoGui::dataStore->routing->Save(NekoGui::dataStore->routing.active);\n        //\n        MW_dialog_message(\n                tr(\"Route changed to \") + NekoGui::dataStore->routing->DisplayName(NekoGui::dataStore->routing.active));\n    }\n    //\n    QDialog::accept();\n}", "CodeBleu_score": 36.53305765046287}, {"code": "void DialogManageRoutes::accept(){\n\t    SaveDisplayRouting();\n    //\n    if (CACHE.active_routing != ui->routingCombo->currentText()) {\n        CACHE.active_routing = ui->routingCombo->currentText();\n        ui->routingInfoLabel->setText(tr(\"(Active)\"));\n    }\n    //\n    auto name = \"routing_\" + ui->routingCombo->currentText();\n    //\n    NekoGui::dataStore->routing.set(name, *CACHE.custom_route);\n    //\n    if (CACHE.routing_change) {\n        ui->routingInfoLabel->setText(tr(\"(Changed)\"));\n        CACHE.routing_change = false;\n    }\n    //\n    emit D_C_SAVE_STRING(name);\n    //\n    QDialog::accept();\n}", "CodeBleu_score": 42.853730276238124}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    xml.setDevice(device);\n\n    if (xml.readNextStartElement()) {\n        if (xml.name() == QLatin1String(\"tileset\")) {\n            readTileset();\n        } else {\n            xml.raiseError(tr(\"This file is not a tileset.\"));\n        }\n    }\n\n    mPath = path;\n    mReadingExternalTileset = true;\n\n    if (xml.hasError()) {\n        mError = xml.errorString();\n        mTileset.reset();\n    }\n\n    mReadingExternalTileset = false;\n\n    return mTileset;\n}", "CodeBleu_score": 60.439248936654245}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    xml.setDevice(device);\n    mPath.setPath(path);\n\n    if (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n        readTileset();\n    } else {\n        xml.raiseError(tr(\"This file is not a tileset.\"));\n    }\n\n    mReadingExternalTileset = false;\n\n    return mTileset;\n}", "CodeBleu_score": 62.62354880054611}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    xml.setDevice(device);\n    mPath.setPath(path);\n\n    xml.readNextStartElement();\n    if (xml.name() == QLatin1String(\"tileset\"))\n        readTileset();\n    else\n        xml.raiseError(tr(\"The file is not a tileset.\"));\n\n    mReadingExternalTileset = false;\n    return mTileset;\n}", "CodeBleu_score": 57.99547345251408}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName != NULL) {\n        if (isImageBlacklistedW(lpLibFileName)) {\n            SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n            return NULL;\n        }\n    }\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 76.57953619953317}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n        SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n        return NULL;\n    }\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 93.90974589811448}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName) {\n        if (isImageBlacklistedW(lpLibFileName)) {\n            SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n            return NULL;\n        }\n    }\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 76.12892580161048}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    // Create an HTTP client for the specified computer\n    QNetworkAccessManager http;\n    http.setProxy(computer->proxy);\n\n    // Determine the cache path for the box art\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n\n    // Attempt to download the box art image\n    QNetworkReply* reply = http.get(http.getBoxArt(appId));\n    QEventLoop loop;\n    QObject::connect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n    loop.exec();\n\n    // If the image is successfully downloaded and is not null\n    QImage image;\n    if (reply->error() == QNetworkReply::NoError && !(image = QImage::fromData(reply->readAll())).isNull()) {\n        // Save the image to the cache path\n        if (image.save(cachePath)) {\n            // Return the local file URL of the cached image\n            return QUrl::fromLocalFile(cachePath);\n        }\n    }\n\n    // Ensure any zero-byte file is removed\n    QFile(cachePath).remove();\n\n    // If the image download fails, return an empty URL\n    return QUrl();\n}", "CodeBleu_score": 62.70150700367248}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    QUrl url = http.getBoxArt(computer, appId);\n    if (url.isEmpty()) {\n        return url;\n    }\n\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n    QImage image;\n    if (http.get(url, &image)) {\n        if (!image.isNull()) {\n            image.save(cachePath);\n            return QUrl::fromLocalFile(cachePath);\n        }\n    }\n\n    // If we failed to download the image, ensure the cached file is zero bytes\n    QFile(cachePath).remove();\n    return QUrl();\n}", "CodeBleu_score": 65.95245896171942}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    // Create an HTTP client for the specified computer\n    QNetworkAccessManager http;\n    http.setProxy(computer->proxy);\n\n    // Determine the cache path for the box art\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n\n    // Attempt to download the box art image\n    QNetworkReply* reply = http.get(QNetworkRequest(QUrl(QString(\"http://%1:%2/boxart/%3.png\").arg(computer->address).arg(computer->port).arg(appId))));\n    QEventLoop loop;\n    connect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n    loop.exec();\n\n    // If the image was downloaded successfully\n    if (reply->error() == QNetworkReply::NoError) {\n        // Read the image data\n        QByteArray data = reply->readAll();\n        QImage image;\n        image.loadFromData(data);\n\n        // If the image is not null\n        if (!image.isNull()) {\n            // Save the image to the cache path\n            image.save(cachePath);\n\n            // Return the local file URL of the cached image\n            return QUrl::fromLocalFile(cachePath);\n        }\n    }\n\n    // Ensure any zero-byte file is removed\n    QFile(cachePath).remove();\n\n    // If the image download failed, return an empty URL\n    return QUrl();\n}", "CodeBleu_score": 57.94337817067188}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t    // Get the best global IPv6 address\n    QHostAddress bestGlobalAddressV6 = getBestGlobalAddressV6(addresses);\n\n    bool addedHost = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            // IPv4\n            addNewHost(address, true, bestGlobalAddressV6);\n            addedHost = true;\n            break;\n        }\n    }\n\n    if (!addedHost) {\n        // Fall back to IPv6\n        if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n            // Link-local\n            addNewHost(bestGlobalAddressV6, true, bestGlobalAddressV6);\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n            qInfo() << \"Ignoring site-local address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n            qInfo() << \"Ignoring ULA:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n            qInfo() << \"Ignoring 6to4 address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n            qInfo() << \"Ignoring Teredo address:\" << bestGlobalAddressV6;\n        } else {\n            addNewHost(bestGlobalAddressV6, true, bestGlobalAddressV6);\n        }\n    }\n\n    // Remove the computer from the pending resolution list\n    m_PendingResolution.removeOne(computer);\n\n    // Schedule it for deletion\n    computer->deleteLater();\n}", "CodeBleu_score": 59.126109300901454}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t    QHostAddress bestGlobalAddressV6 = getBestGlobalAddressV6(addresses);\n    bool addedViaV4 = false;\n\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            addNewHost(NvAddress(address, computer->port()), true, bestGlobalAddressV6);\n            addedViaV4 = true;\n            break;\n        }\n    }\n\n    if (!addedViaV4) {\n        if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n            // Link-local\n            addNewHost(NvAddress(bestGlobalAddressV6, computer->port()), true, bestGlobalAddressV6);\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n            qInfo() << \"Ignoring site-local address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n            qInfo() << \"Ignoring ULA:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n            qInfo() << \"Ignoring 6to4 address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n            qInfo() << \"Ignoring Teredo address:\" << bestGlobalAddressV6;\n        } else {\n            addNewHost(NvAddress(bestGlobalAddressV6, computer->port()), true, bestGlobalAddressV6);\n        }\n    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 63.63199813314674}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t    QHostAddress bestGlobalAddressV6 = getBestGlobalAddressV6(addresses);\n\n    bool addedHost = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            addNewHost(address, true, bestGlobalAddressV6);\n            addedHost = true;\n            break;\n        }\n    }\n\n    if (!addedHost) {\n        if (bestGlobalAddressV6.isLinkLocal()) {\n            qInfo() << \"Ignoring link-local address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n            qInfo() << \"Ignoring link-local address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n            qInfo() << \"Ignoring site-local address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n            qInfo() << \"Ignoring ULA:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n            qInfo() << \"Ignoring 6to4 address:\" << bestGlobalAddressV6;\n        } else if (bestGlobalAddressV6.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n            qInfo() << \"Ignoring Teredo address:\" << bestGlobalAddressV6;\n        } else {\n            addNewHost(bestGlobalAddressV6, true, bestGlobalAddressV6);\n            addedHost = true;\n        }\n    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 57.804539118594136}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker lock(&m_LastSerializedHostsMutex);\n    QMutexLocker computerLock(&computer->m_Mutex);\n\n    if (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(computer)) {\n        return;\n    }\n\n    m_LastSerializedHosts.insert(computer->uuid, computer->serialize());\n    lock.unlock();\n    saveHosts();\n}", "CodeBleu_score": 61.811422967100214}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    if (computer == nullptr)\n        return;\n\n    QMutexLocker computerLock(&m_ComputerMutex);\n    QMutexLocker lock(&m_LastSerializedHostsMutex);\n\n    QByteArray serialized = computer->serialize();\n\n    if (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(serialized)) {\n        return;\n    }\n\n    m_LastSerializedHosts.insert(computer->uuid, SerializedHost(serialized));\n\n    computerLock.unlock();\n    lock.unlock();\n\n    saveHosts();\n}", "CodeBleu_score": 58.65365615073293}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker locker(&m_LastSerializedHostsMutex);\n\n    // Lock the mutex for the entire function to ensure thread safety\n    QMutexLocker computerLock(&computer->m_Mutex);\n\n    // Read the current serialized data for the computer\n    const QByteArray serializedData = computer->serialize();\n\n    // Check if the serialized data has changed since the last save\n    if (!m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(serializedData)) {\n        // Unlock the mutex to allow other threads to access the computer's data\n        computerLock.unlock();\n\n        // Queue a request to save the hosts to QSettings\n        QMutexLocker lock(&m_DelayedFlushMutex);\n        m_NeedsDelayedFlush = true;\n        m_DelayedFlushCondition.wakeOne();\n    }\n}", "CodeBleu_score": 56.40670003025504}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    if (appList == newAppList) {\n        return false;\n    }\n\n    for (int i = 0; i < appList.size(); ++i) {\n        for (int j = 0; j < newAppList.size(); ++j) {\n            if (appList[i].id == newAppList[j].id) {\n                newAppList[j].hidden = appList[i].hidden;\n                newAppList[j].directLaunch = appList[i].directLaunch;\n                break;\n            }\n        }\n    }\n\n    appList = newAppList;\n    sortAppList();\n    return true;\n}", "CodeBleu_score": 69.1323539149365}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    if (newAppList == appList)\n        return false;\n\n    for (int i = 0; i < appList.size(); i++) {\n        for (int j = 0; j < newAppList.size(); j++) {\n            if (appList[i].id == newAppList[j].id) {\n                newAppList[j].hidden = appList[i].hidden;\n                newAppList[j].directLaunch = appList[i].directLaunch;\n                break;\n            }\n        }\n    }\n\n    appList = newAppList;\n    sortAppList();\n    return true;\n}", "CodeBleu_score": 63.360514220351796}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    if (appList == newAppList) {\n        return false;\n    }\n\n    for (NvApp& newApp : newAppList) {\n        for (const NvApp& app : appList) {\n            if (app.id == newApp.id) {\n                newApp.hidden = app.hidden;\n                newApp.directLaunch = app.directLaunch;\n                break;\n            }\n        }\n    }\n\n    appList = newAppList;\n    sortAppList();\n    return true;\n}", "CodeBleu_score": 84.13997895307583}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t", "CodeBleu_score": 1.8585893029976277}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setApplicationDescription(QCoreApplication::translate(\"main\", \"Quit an app on a specified host\"));\n    parser.addPositionalArgument(\"quit\", QCoreApplication::translate(\"main\", \"Quit an app on a specified host\"));\n    parser.addPositionalArgument(\"host\", QCoreApplication::translate(\"main\", \"Host name or IP address\"));\n    parser.parse(args);\n    parser.handleUnknownOptions();\n    parser.handleHelpAndVersionOptions();\n\n    if (parser.positionalArguments().at(0) != \"quit\") {\n        parser.showError(QCoreApplication::translate(\"main\", \"Incorrect command provided\"));\n    }\n\n    if (parser.positionalArguments().size() != 2) {\n        parser.showError(QCoreApplication::translate(\"main\", \"Host name or IP address is not provided\"));\n    }\n\n    m_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 59.0330264547211}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setApplicationDescription(tr(\"Quit an app on a specified host\"));\n    parser.addPositionalArgument(\"quit\", tr(\"Quit an app on a specified host\"));\n    parser.addPositionalArgument(\"host\", tr(\"Host to quit the app on\"));\n\n    parser.process(args);\n    const QStringList posArgs = parser.positionalArguments();\n\n    if (parser.showError()) {\n        parser.showHelp(1);\n    }\n\n    if (parser.isSet(parser.helpOption())) {\n        parser.showHelp(0);\n    }\n\n    if (parser.isSet(parser.versionOption())) {\n        parser.showVersion();\n    }\n\n    if (posArgs.length() != 2) {\n        parser.showHelp(1);\n    }\n\n    m_Host = posArgs.at(1);\n}", "CodeBleu_score": 48.71098067536311}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  int years = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(years);\n  return QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date))});\n}", "CodeBleu_score": 64.51441777802816}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  int nyears = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(nyears);\n  return QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date))});\n}", "CodeBleu_score": 68.16358433953505}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    Napi::HandleScope scope(env);\n\n    int years = info[0].As<Napi::Number>().Int32Value();\n    QDate date = this->instance->addYears(years);\n\n    return QDateWrap::constructor.New({ Napi::External<QDate>::New(env, new QDate(date)) });\n}", "CodeBleu_score": 64.76727155048881}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t    Napi::Env env = info.Env();\n    QDate date = QDate::currentDate();\n    Napi::Object dateObject = Napi::Object::New(env);\n    dateObject.Set(\"year\", date.year());\n    dateObject.Set(\"month\", date.month());\n    dateObject.Set(\"day\", date.day());\n    return dateObject;\n}", "CodeBleu_score": 63.23818395822368}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t    Napi::Env env = info.Env();\n    QDate date = QDate::currentDate();\n    int year = date.year();\n    int month = date.month();\n    int day = date.day();\n    Napi::Object dateObj = QDateWrap::constructor.New({Napi::Number::New(env, year), Napi::Number::New(env, month), Napi::Number::New(env, day)});\n    return dateObj;\n}", "CodeBleu_score": 64.09323823315803}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  QDate date = QDate::currentDate();\n  int year = date.year();\n  int month = date.month();\n  int day = date.day();\n  Napi::Object dateObj = QDateWrap::constructor.New({ Napi::Number::New(env, year), Napi::Number::New(env, month), Napi::Number::New(env, day) });\n  return dateObj;\n}", "CodeBleu_score": 64.26177916079021}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    Napi::HandleScope scope(env);\n    int year = info[0].As<Napi::Number>().Int32Value();\n    bool result = QDate::isLeapYear(year);\n    return Napi::Value::From(env, result);\n}", "CodeBleu_score": 76.36181421310869}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    Napi::HandleScope scope(env);\n\n    int year = info[0].As<Napi::Number>().Int32Value();\n    bool result = QDate::isLeapYear(year);\n    return Napi::Value::From(env, result);\n}", "CodeBleu_score": 76.36181421310869}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    Napi::HandleScope scope(env);\n    int year = info[0].As<Napi::Number>().Int32Value();\n    bool result = QDate::isLeapYear(year);\n    return Napi::Value::From(env, result);\n}", "CodeBleu_score": 76.36181421310869}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    Napi::HandleScope scope(env);\n    Napi::Object otherWrap = info[0].As<Napi::Object>();\n    QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n    int result = this->instance->daysTo(*other->getInternalInstance());\n    return Napi::Value::From(env, result);\n}", "CodeBleu_score": 79.2066421494254}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  qint64 result = this->instance->daysTo(*other->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 81.24991331413531}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  int result = this->instance->daysTo(*other->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 79.79138932707068}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  Napi::Object otherObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n  qint64 msecs = this->instance->msecsTo(*otherWrap->getInternalInstance());\n\n  return Napi::Value::From(env, msecs);\n}", "CodeBleu_score": 87.18390993608007}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  qint64 result = this->instance->msecsTo(*other->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 84.77513080951668}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n  qint64 msecs = this->instance->msecsTo(*otherWrap->getInternalInstance());\n  return Napi::Value::From(env, msecs);\n}", "CodeBleu_score": 71.27062018347037}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t    // Check if the arguments are valid\n    Napi::Env env = info.Env();\n    if (info.Length() < 2) {\n        Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n        return env.Null();\n    }\n\n    // Retrieve the row number and parent index from the arguments\n    int row = info[0].As<Napi::Number>().Int32Value();\n    QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\n    QModelIndex* parent = parentWrap->getInternalInstance();\n\n    // Call the rowIntersectsSelection method on the internal instance\n    bool result = this->instance->rowIntersectsSelection(row, *parent);\n\n    // Return the result as a Napi::Boolean\n    return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 84.96924004678131}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t    Napi::Env env = info.Env();\n    int row = info[0].As<Napi::Number>().Int32Value();\n    Napi::Object parentObject = info[1].As<Napi::Object>();\n    QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n    QModelIndex* parent = parentWrap->getInternalInstance();\n    bool result = this->instance->rowIntersectsSelection(row, *parent);\n    return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 82.15757837679512}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  int row = info[0].As<Napi::Number>().Int32Value();\n  Napi::Object parentObject = info[1].As<Napi::Object>();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 82.60250824476117}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n  QSizeWrap* otherSizeWrapUnwrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n  QSize* otherSize = otherSizeWrapUnwrap->getInternalInstance();\n  QSize* expandedSize = new QSize(this->instance->expandedTo(*otherSize));\n  auto instance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, expandedSize)});\n  return instance;\n}", "CodeBleu_score": 68.49422589983175}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n  QSizeWrap* otherSize = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n  QSize* otherSizeInternal = otherSize->getInternalInstance();\n\n  QSize* result = new QSize(this->instance->expandedTo(*otherSizeInternal));\n  auto resultInstance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, result)});\n  return resultInstance;\n}", "CodeBleu_score": 72.8159567206765}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n  QSizeWrap* otherSize = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n  QSize result = this->instance->expandedTo(*otherSize->getInternalInstance());\n  auto resultInstance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, new QSize(result))});\n  return resultInstance;\n}", "CodeBleu_score": 80.8821902816678}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t  // Check if input arguments have correct data types and number\n  // Should be (string)\n  Napi::Env env = info.Env();\n  if(info.Length() != 1 || !info[0].IsString()) {\n    Napi::TypeError::New(env, \"String expected.\").ThrowAsJavaScriptException();\n  }\n\n  // Convert the input arguments to c++ types\n  QString desktopFileName = (std::string) info[0].As<Napi::String>().Utf8Value();\n\n  // Call the function with the correct arguments\n  QString result = QApplication::desktopFileName(desktopFileName);\n\n  // Convert the result to Napi::Value and return it\n  return Napi::String::New(env, result.toStdString());\n}", "CodeBleu_score": 61.9936809117353}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t  // Check if input arguments have correct data types.\n  Napi::Env env = info.Env();\n  if(!info[0].IsString()){\n    Napi::TypeError::New(env, \"String expected.\").ThrowAsJavaScriptException();\n  }\n  // Convert the input string to a QString.\n  QString desktopFileName = (std::string) info[0].As<Napi::String>();\n  // Call the QApplication::desktopFileName() method and convert the result to a standard string.\n  std::string result = QApplication::desktopFileName().toStdString();\n  // Return the result as a Napi::String.\n  return Napi::String::New(env, result);\n}", "CodeBleu_score": 58.12416711676307}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t    // Check the number of arguments passed.\n    if (info.Length() != 0) {\n        Napi::TypeError::New(env, \"Invalid number of arguments\").ThrowAsJavaScriptException();\n        return env.Null();\n    }\n\n    // Retrieve the desktop file name using QApplication::desktopFileName().\n    QString result = QApplication::desktopFileName();\n\n    // Convert the result to a standard string and return it as a Napi::String.\n    return Napi::String::New(env, result.toStdString());\n}", "CodeBleu_score": 65.19975746813489}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\n  QMimeData* mimeData = this->instance->mimeData(mode);\n  QMimeData* clonedMimeData = QMimeDataWrap::cloneFromMimeDataToData(mimeData);\n\n  Napi::Value mimeDataWrap = QMimeDataWrap::constructor.New({ Napi::External<QMimeData>::New(env, clonedMimeData) });\n  return mimeDataWrap;\n}", "CodeBleu_score": 64.48521360950657}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QClipboard::Mode mode = static_cast<QClipboard::Mode>(\n      info[0].As<Napi::Number>().Int32Value());\n  QMimeData* mimeData = this->instance->mimeData(mode);\n  QMimeData* newMimeData = QMimeDataWrap::cloneFromMimeDataToData(mimeData);\n  Napi::Value data = QMimeDataWrap::constructor.New(\n      {Napi::External<QMimeData>::New(env, newMimeData)});\n  return data;\n}", "CodeBleu_score": 65.32457753561422}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    if (info.Length() != 1) {\n        Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n        return env.Null();\n    }\n    if (!info[0].IsNumber()) {\n        Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n        return env.Null();\n    }\n    QClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\n    QMimeData* data = QApplication::clipboard()->mimeData(mode);\n    QMimeData* clonedData = QMimeDataWrap::cloneFromMimeDataToData(data);\n    Napi::Value dataWrap = QMimeDataWrap::constructor.New({ Napi::External<QMimeData>::New(env, clonedData) });\n    return dataWrap;\n}", "CodeBleu_score": 52.6863705466176}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  Napi::Object sourceObject = Napi::Object::New(env);\n  sourceObject.Set(\"source\", this->instance->source());\n  return sourceObject;\n}", "CodeBleu_score": 55.953295857063665}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    QObject* source = this->instance->source();\n    return QObjectWrap::constructor.New({ Napi::External<QObject>::New(env, source) });\n}", "CodeBleu_score": 73.33667646168543}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  return QObjectWrap::constructor.New(\n      {Napi::External<QObject>::New(env, source),\n       Napi::Boolean::New(env, true)});\n}", "CodeBleu_score": 76.34769936294941}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.5376086127673959}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n\n    if (e.X >= 0 && e.X <= this.Width && e.Y >= 0 && e.Y <= this.Height) {\n        selectIndex = GetSelectIndex(e.X, e.Y);\n\n        if (selectIndex != -1 && Bars.Count > 0) {\n            if (Bars[0][selectIndex].Tips.IsValid) {\n                if (Bars[0][selectIndex].Tips.Text != null) {\n                    toolTip.SetToolTip(this, Bars[0][selectIndex].Tips.Text);\n                }\n                if (Bars[0][selectIndex].Tips.Size != null) {\n                    toolTip.SetToolTip(this, Bars[0][selectIndex].Tips.Size);\n                }\n            }\n\n            toolTip.Show(Bars[0][selectIndex].Tips.Text, this, new Point(e.X, e.Y));\n        }\n    }\n    else {\n        toolTip.Hide(this);\n    }\n}", "CodeBleu_score": 24.555417326779605}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (e.X < 0 || e.Y < 0 || e.X >= Width || e.Y >= Height) {\n        return;\n    }\n    SelectIndex = GetSelectIndex(e.X, e.Y);\n    if (SelectIndex != -1 && Bars.Count > 0) {\n        try {\n            if (Bars[0][SelectIndex].Tips.IsValid) {\n                if (Bars[0][SelectIndex].Tips.Text != Bars[0][SelectIndex].Tips.Text || Bars[0][SelectIndex].Tips.Size != Bars[0][SelectIndex].Tips.Size) {\n                    Bars[0][SelectIndex].Tips.Text = Bars[0][SelectIndex].Tips.Text;\n                    Bars[0][SelectIndex].Tips.Size = Bars[0][SelectIndex].Tips.Size;\n                    Bars[0][SelectIndex].Tips.UpdateSize();\n                }\n                Bars[0][SelectIndex].Tips.Location = new Point(e.X, e.Y);\n                if (e.X + Bars[0][SelectIndex].Tips.Width > Width) {\n                    Bars[0][SelectIndex].Tips.Location = new Point(Width - Bars[0][SelectIndex].Tips.Width, e.Y);\n                }\n                if (e.Y + Bars[0][SelectIndex].Tips.Height > Height) {\n                    Bars[0][SelectIndex].Tips.Location = new Point(e.X, Height - Bars[0][SelectIndex].Tips.Height);\n                }\n                Bars[0][SelectIndex].Tips.Visible = true;\n            }\n            else {\n                Bars[0][SelectIndex].Tips.Visible = false;\n            }\n        }\n        catch (Exception ex) {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}", "CodeBleu_score": 37.13712545173509}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !Drawing) return;\n\n    if (Tooltip != null && Option.Tooltip.ShowShadowPointer) {\n        DrawTooltip(g, Tooltip);\n    }\n\n    DrawSeries(g, Series);\n    DrawAxis(g);\n    DrawTitle(g);\n\n    if (Tooltip != null && Option.Tooltip.ShowLinePointer) {\n        DrawTooltip(g, Tooltip);\n    }\n\n    DrawLegend(g);\n    DrawAxisScales(g);\n}", "CodeBleu_score": 45.76221510315762}, {"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !NeedDraw) return;\n    if (Option.Tooltip.Show && (Option.Tooltip.Pointer.Show || Option.Tooltip.Pointer.ShowLine)) {\n        DrawTooltip(g);\n    }\n    DrawSeries(g, Series);\n    DrawAxis(g);\n    DrawTitle(g);\n    if (Option.Tooltip.Show && Option.Tooltip.Pointer.ShowLine) {\n        DrawTooltip(g);\n    }\n    DrawLegend(g);\n    DrawAxisScales(g);\n}", "CodeBleu_score": 50.385452972413404}, {"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !Option.Show) return;\n    if (Option.Tooltip.Show && Option.Tooltip.Pointer.Show && Option.Tooltip.Pointer.Shadow) {\n        DrawTooltip(g);\n    }\n    DrawSeries(g);\n    DrawAxis(g);\n    DrawTitle(g);\n    if (Option.Tooltip.Show && Option.Tooltip.Pointer.Show && Option.Tooltip.Pointer.Line) {\n        DrawTooltip(g);\n    }\n    DrawLegend(g);\n    DrawAxisScales(g);\n}", "CodeBleu_score": 48.807330469227175}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (SelectedIndex == -1) return;\n    if (ToolTipType == ToolTipType.Line) {\n        g.DrawLine(Pens.Black, DrawingOrigin.X + BarWidth * SelectedIndex, DrawingOrigin.Y, DrawingOrigin.X + BarWidth * SelectedIndex, DrawingOrigin.Y + GridOptions.Height);\n    } else if (ToolTipType == ToolTipType.Shadow) {\n        g.FillRectangle(Brushes.Black, DrawingOrigin.X + BarWidth * SelectedIndex, DrawingOrigin.Y, BarWidth, GridOptions.Height);\n    }\n}", "CodeBleu_score": 31.284712539775256}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (SelectedIndex == -1) return;\n\n    if (ToolTipType == ToolTipType.Line) {\n        int x = DrawingOrigin.X + (int)(SelectedIndex * BarWidth + GridOptions.GridOffset);\n        g.DrawLine(ToolTipPen, x, DrawingOrigin.Y, x, DrawingOrigin.Y + Height);\n    } else if (ToolTipType == ToolTipType.Shadow) {\n        int x = DrawingOrigin.X + (int)(SelectedIndex * BarWidth + GridOptions.GridOffset);\n        int y = DrawingOrigin.Y + Height;\n        int w = (int)BarWidth;\n        int h = Height;\n        g.FillRectangle(ToolTipBrush, x, y, w, h);\n    }\n}", "CodeBleu_score": 31.6834606207285}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (SelectedIndex == -1) return;\n    if (ToolTipType == ToolTipType.Line) {\n        int x = DrawingOrigin.X + (int) (SelectedIndex * BarWidth + BarWidth / 2);\n        int y = DrawingOrigin.Y;\n        int w = 1;\n        int h = DrawingOrigin.Y + GridOptions.Height;\n        g.DrawLine(Pens.Black, x, y, x, h);\n    } else if (ToolTipType == ToolTipType.Shadow) {\n        int x = DrawingOrigin.X + (int) (SelectedIndex * BarWidth + BarWidth / 2);\n        int y = DrawingOrigin.Y;\n        int w = 1;\n        int h = DrawingOrigin.Y + GridOptions.Height;\n        g.FillRectangle(Brushes.Black, x, y, w, h);\n    }\n}", "CodeBleu_score": 29.33697745953461}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t    if (!title.Text.IsValid) return;\n    SizeF titleSize = g.MeasureString(title.Text, title.Font);\n    g.DrawString(title.Text, title.Font, title.Color.Brush, title.Position.X, title.Position.Y, title.TextAlign);\n    if (!title.SubText.IsValid) return;\n    Font subFont = title.Font.DPIScaleFont(title.SubText.FontSize);\n    SizeF subSize = g.MeasureString(title.SubText, subFont);\n    g.DrawString(title.SubText, subFont, title.SubText.Color.Brush, title.Position.X + title.TextAlign.GetOffset(titleSize.Width, subSize.Width), title.Position.Y + titleSize.Height + title.SubText.Offset, title.TextAlign);\n}", "CodeBleu_score": 36.020900877973496}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t            if (title == null || !title.Text.IsValid) return;\n\n            SizeF textSize = TextRenderer.MeasureText(title.Text, title.Font);\n            g.DrawString(title.Text, title.Font, title.TextColor, title.Position, title.TextAlignment);\n\n            if (title.SubText.IsValid) {\n                Font subFont = new Font(title.Font.FontFamily, title.Font.Size * 0.75f, FontStyle.Regular);\n                SizeF subTextSize = TextRenderer.MeasureText(title.SubText, subFont);\n                PointF subPosition = new PointF(title.Position.X, title.Position.Y + textSize.Height + subTextSize.Height);\n                g.DrawString(title.SubText, subFont, title.TextColor, subPosition, title.TextAlignment);\n            }\n        }", "CodeBleu_score": 36.529375145123936}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t\n  if (title == null || !title.Text.IsValid)\n   return;\n\n  SizeF titleSize = TextRenderer.MeasureText(g, title.Text, title.Font, title.Size, title.Style);\n\n  Font titleFont = title.Font.DPIScaleFont(title.Size);\n\n  g.DrawString(title.Text, titleFont, title.Color, new RectangleF(title.Position, titleSize), title.Align);\n\n  if (title.SubText.IsValid) {\n   Font subFont = title.Font.DPIScaleFont(title.SubSize);\n   SizeF subSize = TextRenderer.MeasureText(g, title.SubText, subFont, title.SubSize, title.SubStyle);\n   PointF subPos = new PointF(title.Position.X, title.Position.Y + titleSize.Height + title.SubOffset);\n   g.DrawString(title.SubText, subFont, title.SubColor, new RectangleF(subPos, subSize), title.SubAlign);\n  }\n }", "CodeBleu_score": 35.28946819871949}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t    if (emptyOption == null) {\n        emptyOption = new EChartsOption();\n        emptyOption.Title.Text = \"Doughnut Chart\";\n        emptyOption.Title.Subtext = \"Doughnut chart subtitle\";\n\n        EChartsOption.Series.Doughnut serie = new EChartsOption.Series.Doughnut();\n        serie.Name = \"Doughnut\";\n        serie.Center = new string[] { \"50%\", \"50%\" };\n        serie.Radius = new string[] { \"50%\", \"70%\" };\n        serie.AddData(\"Data 1\");\n        serie.AddData(\"Data 2\");\n        serie.AddData(\"Data 3\");\n        serie.AddData(\"Data 4\");\n        serie.AddData(\"Data 5\");\n\n        emptyOption.Series.Add(serie);\n    }\n    option = emptyOption;\n}", "CodeBleu_score": 34.09818214008907}, {"code": "protected override void CreateEmptyOption(){\n\t    if (emptyOption == null) {\n        emptyOption = new EChartsOption();\n        emptyOption.Title.Text(\"Empty\");\n        emptyOption.Title.Subtext(\"No data\");\n        EChartsOption.Series.DoughnutSeries serie = new EChartsOption.Series.DoughnutSeries();\n        serie.Name(\"Empty\");\n        serie.Center = new double[] { 50, 50 };\n        serie.Radius = new double[] { 0, 70 };\n        serie.AddData(\"Data1\");\n        serie.AddData(\"Data2\");\n        serie.AddData(\"Data3\");\n        serie.AddData(\"Data4\");\n        serie.AddData(\"Data5\");\n        emptyOption.Series.Add(serie);\n    }\n}", "CodeBleu_score": 29.175893838355123}, {"code": "protected override void CreateEmptyOption(){\n\t    emptyOption = new EChartsOption {\n        Title = new EChartsTitle {\n            Text = \"Doughnut Chart\"\n        },\n        Tooltip = new EChartsTooltip {\n            Trigger = EChartsTrigger.Item\n        },\n        Legend = new EChartsLegend {\n            Orient = EChartsOrient.Vertical,\n            Left = \"left\"\n        },\n        Series = new List<EChartsSeries> {\n            new EChartsSeries {\n                Name = \"Access From\",\n                Type = EChartsType.Pie,\n                Radius = new string[] { \"50%\", \"70%\" },\n                AvoidLabelOverlap = false,\n                Label = new EChartsLabel {\n                    Show = false,\n                    Position = EChartsPosition.Center\n                },\n                Emphasis = new EChartsEmphasis {\n                    Label = new EChartsLabel {\n                        Show = true,\n                        FontSize = 20,\n                        FontWeight = EChartsFontWeight.Bold\n                    }\n                },\n                LabelLine = new EChartsLabelLine {\n                    Show = false\n                },\n                Data = new List<EChartsSeriesData> {\n                    new EChartsSeriesData { Name = \"Search Engine\", Value = 1048 },\n                    new EChartsSeriesData { Name = \"Direct\", Value = 735 },\n                    new EChartsSeriesData { Name = \"Email\", Value = 580 },\n                    new EChartsSeriesData { Name = \"Union Ads\", Value = 484 },\n                    new EChartsSeriesData { Name = \"Video Ads\", Value = 250 }\n                }\n            }\n        }\n    };\n}", "CodeBleu_score": 15.326003934357635}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t\n    double[] labelValues = new double[Count + 1];\n\n    for (int i = 0; i <= Count; i++) {\n        if (AxisType == AxisType.DateTime) {\n            DateTimeInt64 dateTimeInt64 = new DateTimeInt64(Start);\n            labelValues[i] = dateTimeInt64.AddMilliseconds(Interval * i).ToOADate();\n        } else {\n            labelValues[i] = Start + Interval * i;\n        }\n    }\n\n    return labelValues;\n}", "CodeBleu_score": 66.19526749991216}, {"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n\n    for (int i = 0; i <= Count; i++) {\n        if (AxisType == AxisType.DateTime) {\n            DateTimeInt64 dateTime = new DateTimeInt64(Start);\n            values[i] = dateTime.AddMilliseconds(i * Interval).ToOADate();\n        } else {\n            values[i] = Start + i * Interval;\n        }\n    }\n\n    return values;\n}", "CodeBleu_score": 68.77549085525652}, {"code": "public double[] LabelValues(){\n\t\n    double[] values = new double[Count + 1];\n\n    for (int i = 0; i <= Count; i++) {\n        if (Type == AxisType.DateTime) {\n            DateTimeInt64 date = new DateTimeInt64(Start);\n            values[i] = date.AddMilliseconds(i * Interval).ToOADate();\n        } else {\n            values[i] = Start + i * Interval;\n        }\n    }\n\n    return values;\n}", "CodeBleu_score": 65.64472716689893}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t  Pen pen = new Pen(color, width);\n  IntPtr hDC = GetWindowDC(m.HWnd);\n  if (hDC.ToInt32() != 0) {\n    Graphics g = Graphics.FromHdc(hDC);\n    g.SmoothingMode = SmoothingMode.AntiAlias;\n    g.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n    ReleaseDC(m.HWnd, hDC);\n  }\n}", "CodeBleu_score": 55.14473240821576}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\n  Pen p = new Pen(color, width);\n  IntPtr hDC = GetWindowDC(m.HWnd);\n\n  if (hDC.ToInt32() != 0) {\n    Graphics g = Graphics.FromHdc(hDC);\n    g.SmoothingMode = SmoothingMode.AntiAlias;\n    g.DrawRectangle(p, 0, 0, control.Width - 1, control.Height - 1);\n    ReleaseDC(m.HWnd, hDC);\n  }\n}", "CodeBleu_score": 51.35552002128213}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    Pen pen = new Pen(color, width);\n    IntPtr hDC = GetWindowDC(m.HWnd);\n    if (hDC.ToInt32() != 0) {\n        using (Graphics g = Graphics.FromHdc(hDC)) {\n            g.SmoothingMode = SmoothingMode.AntiAlias;\n            g.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n        }\n        ReleaseDC(m.HWnd, hDC);\n    }\n}", "CodeBleu_score": 56.124728584688455}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    //\u83b7\u53d6\u63a7\u4ef6\u7684\u7a97\u53e3\u53e5\u67c4\n    IntPtr hWnd = ctrl.Handle;\n    //\u83b7\u53d6\u63a7\u4ef6\u7a97\u53e3\u7684\u8bbe\u5907\u4e0a\u4e0b\u6587\n    IntPtr hDC = Win32.User.GetWindowDC(hWnd);\n    //\u521b\u5efa\u4e0e\u8bbe\u5907\u4e0a\u4e0b\u6587\u517c\u5bb9\u7684\u4f4d\u56fe\n    IntPtr hBitmap = Win32.GDI.CreateCompatibleBitmap(hDC, ctrl.Width, ctrl.Height);\n    //\u521b\u5efa\u4e0e\u8bbe\u5907\u4e0a\u4e0b\u6587\u517c\u5bb9\u7684\u5185\u5b58\u8bbe\u5907\u4e0a\u4e0b\u6587\n    IntPtr hMemDC = Win32.GDI.CreateCompatibleDC(hDC);\n    //\u5c06\u4f4d\u56fe\u9009\u5165\u5185\u5b58\u8bbe\u5907\u4e0a\u4e0b\u6587\n    Win32.GDI.SelectObject(hMemDC, hBitmap);\n    //\u5c06\u63a7\u4ef6\u7a97\u53e3\u5185\u5bb9\u6253\u5370\u5230\u4f4d\u56fe\u4e2d\n    Win32.GDI.PrintWindow(hWnd, hMemDC, 0);\n    //\u521b\u5efaBitmap\u5bf9\u8c61\n    Bitmap bmp = Image.FromHbitmap(hBitmap);\n    //\u5220\u9664\u7528\u8fc7\u7684\u5bf9\u8c61\n    Win32.GDI.DeleteDC(hMemDC);\n    Win32.GDI.DeleteObject(hBitmap);\n    Win32.GDI.ReleaseDC(hWnd, hDC);\n    return bmp;\n}", "CodeBleu_score": 55.95294486363252}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t   //\u83b7\u53d6\u63a7\u4ef6\u7684\u8bbe\u5907\u4e0a\u4e0b\u6587\n   IntPtr hdcSrc = Win32.User.GetWindowDC(ctrl.Handle);\n   //\u521b\u5efa\u517c\u5bb9\u7684DC\n   IntPtr hdcDest = Win32.GDI.CreateCompatibleDC(hdcSrc);\n   //\u521b\u5efa\u517c\u5bb9\u7684\u4f4d\u56fe\n   IntPtr hBitmap = Win32.GDI.CreateCompatibleBitmap(hdcSrc, ctrl.Width, ctrl.Height);\n   //\u9009\u62e9\u4f4d\u56fe\u5230\u517c\u5bb9\u7684DC\u4e2d\n   IntPtr hOld = Win32.GDI.SelectObject(hdcDest, hBitmap);\n   //\u6253\u5370\u63a7\u4ef6\u7684\u7a97\u53e3\u5185\u5bb9\u5230\u517c\u5bb9\u7684DC\u4e2d\n   Win32.GDI.PrintWindow(ctrl.Handle, hdcDest, 0);\n   //\u521b\u5efaBitmap\u5bf9\u8c61\n   Bitmap bmp = Image.FromHbitmap(hBitmap);\n   //\u5220\u9664\u7528\u8fc7\u7684\u5bf9\u8c61\n   Win32.GDI.SelectObject(hdcDest, hOld);\n   Win32.GDI.DeleteDC(hdcDest);\n   Win32.GDI.DeleteObject(hBitmap);\n   Win32.User.ReleaseDC(ctrl.Handle, hdcSrc);\n   return bmp;\n}", "CodeBleu_score": 61.59527426492184}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    //\u83b7\u53d6\u63a7\u4ef6\u7684\u8bbe\u5907\u4e0a\u4e0b\u6587\n    IntPtr hdcSrc = Win32.User.GetWindowDC(ctrl.Handle);\n    //\u521b\u5efa\u4e0e\u8bbe\u5907\u4e0a\u4e0b\u6587\u517c\u5bb9\u7684\u4f4d\u56fe\n    IntPtr hBitmap = Win32.GDI.CreateCompatibleBitmap(hdcSrc, ctrl.Width, ctrl.Height);\n    //\u521b\u5efa\u4e0e\u8bbe\u5907\u4e0a\u4e0b\u6587\u517c\u5bb9\u7684\u5185\u5b58DC\n    IntPtr hdc = Win32.GDI.CreateCompatibleDC(hdcSrc);\n    //\u5c06\u4f4d\u56fe\u9009\u5165\u5185\u5b58DC\n    IntPtr hOld = Win32.GDI.SelectObject(hdc, hBitmap);\n    //\u6253\u5370\u5230\u5185\u5b58DC\n    Win32.GDI.PrintWindow(ctrl.Handle, hdc, 0);\n    //\u521b\u5efaBitmap\n    Bitmap bmp = Image.FromHbitmap(hBitmap);\n    //\u5220\u9664\u5185\u5b58\u5bf9\u8c61\n    Win32.GDI.SelectObject(hdc, hOld);\n    Win32.GDI.DeleteDC(hdc);\n    Win32.GDI.DeleteObject(hBitmap);\n    Win32.GDI.ReleaseDC(ctrl.Handle, hdcSrc);\n    return bmp;\n}", "CodeBleu_score": 63.425058319741225}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t    var pi = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (pi == null) return;\n    var key = pi.GetValue(button);\n    var list = button.GetType().GetProperty(\"Events\", BindingFlags.Instance | BindingFlags.NonPublic)?.GetValue(button, null) as EventHandlerList;\n    if (list != null) list?.RemoveHandler(key, list[key]);\n}", "CodeBleu_score": 38.51833423467635}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    Type controlType = typeof(Control);\n    FieldInfo eventClickField = controlType.GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (eventClickField != null) {\n        object eventClickKey = eventClickField.GetValue(null);\n        if (eventClickKey != null) {\n            PropertyInfo eventsProperty = button.GetType().GetProperty(\"Events\", BindingFlags.Instance | BindingFlags.NonPublic);\n            if (eventsProperty != null) {\n                object eventsObject = eventsProperty.GetValue(button, null);\n                if (eventsObject != null) {\n                    PropertyInfo eventClickProperty = eventsObject.GetType().GetProperty(\"EventClick\");\n                    if (eventClickProperty != null) {\n                        object eventClickHandler = eventClickProperty.GetValue(eventsObject, null);\n                        if (eventClickHandler != null) {\n                            button.Events.RemoveHandler(eventClickKey, eventClickHandler);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 38.16575385344324}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    // Get the EventClick field from the Control class using reflection\n    FieldInfo pi = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\n    // If the field is found, get the event handler's key object\n    if (pi != null) {\n        object key = pi.GetValue(button);\n\n        // Get the Events property of the Button\n        PropertyInfo list = button.GetType().GetProperty(\"Events\", BindingFlags.Instance | BindingFlags.NonPublic);\n\n        // If both the property and key object are valid, remove the click event handler from the event handler list\n        if (list != null && key != null) {\n            EventHandlerList el = (EventHandlerList)list.GetValue(button, null);\n            el.RemoveHandler(key, new EventHandler(button.OnClick));\n        }\n    }\n}", "CodeBleu_score": 59.414860330280575}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t    const string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return \".NET Framework Version: \" + CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        } else {\n            return \".NET Framework Version 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 87.24929037469111}, {"code": "public static string CheckVersion(){\n\t    const string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return \".NET Framework Version: \" + CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        } else {\n            return \".NET Framework Version 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 87.24929037469111}, {"code": "public static string CheckVersion(){\n\t    const string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return \".NET Framework Version: \" + CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        } else {\n            return \".NET Framework Version 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 87.24929037469111}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target)\n        throw new ArgumentException(\"Cannot copy pixels from and to the same bitmap.\");\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat)\n        return false;\n    var sourceData = source.LockBits(new Rectangle(Point.Empty, source.Size), ImageLockMode.ReadOnly, source.PixelFormat);\n    var targetData = target.LockBits(new Rectangle(Point.Empty, target.Size), ImageLockMode.WriteOnly, target.PixelFormat);\n    try {\n        memcpy(targetData.Scan0, sourceData.Scan0, sourceData.Stride * sourceData.Height);\n        return true;\n    } finally {\n        source.UnlockBits(sourceData);\n        target.UnlockBits(targetData);\n    }\n}", "CodeBleu_score": 59.74499384978055}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target) {\n        throw new ArgumentException(\"Cannot copy pixels from a bitmap to itself\");\n    }\n\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    var sourceData = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);\n    var targetData = target.LockBits(new Rectangle(0, 0, target.Width, target.Height), ImageLockMode.WriteOnly, target.PixelFormat);\n\n    memcpy(targetData.Scan0, sourceData.Scan0, sourceData.Stride * sourceData.Height);\n\n    source.UnlockBits(sourceData);\n    target.UnlockBits(targetData);\n\n    return true;\n}", "CodeBleu_score": 59.884809105675515}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target) {\n        throw new ArgumentException(\"Cannot copy pixels from and to the same bitmap.\");\n    }\n\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    var sourceData = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);\n    var targetData = target.LockBits(new Rectangle(0, 0, target.Width, target.Height), ImageLockMode.WriteOnly, target.PixelFormat);\n\n    try {\n        memcpy(targetData.Scan0, sourceData.Scan0, sourceData.Stride * sourceData.Height);\n    }\n    finally {\n        source.UnlockBits(sourceData);\n        target.UnlockBits(targetData);\n    }\n\n    return true;\n}", "CodeBleu_score": 60.025171307978276}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    PointF mousePosition = e.Location;\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(mousePosition.X);\n    }\n}", "CodeBleu_score": 40.43148266084107}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n\n    PointF mousePos = e.Location;\n\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(mousePos.X);\n    }\n}", "CodeBleu_score": 40.986925559651986}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    PointF mousePosition = new PointF(e.X, e.Y);\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(mousePosition.X);\n    }\n}", "CodeBleu_score": 55.47200395790022}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t    RectangleF r = GetColorBarRectangle();\n    if (m_colors.Count == 2)\n        UIColorUtil.Draw2ColorBar(dc, r, m_orientation, m_percentSet);\n    else if (m_colors.Count == 3)\n        UIColorUtil.Draw3ColorBar(dc, r, m_orientation, m_percentSet);\n    DrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 45.97286757877293}, {"code": "protected void DrawColorBar(Graphics dc){\n\t    RectangleF r = new RectangleF(0, 0, Width, Height);\n    if (m_orientation == Orientation.Vertical) {\n        r.Width -= 1;\n        r.Height -= 1;\n    } else {\n        r.X += 1;\n        r.Width -= 1;\n    }\n\n    if (m_colors.Count == 2) {\n        UIColorUtil.Draw2ColorBar(dc, r, m_orientation, m_percentSet);\n    } else if (m_colors.Count > 2) {\n        UIColorUtil.Draw3ColorBar(dc, r, m_orientation, m_percentSet);\n    }\n\n    DrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 26.564930164690548}, {"code": "protected void DrawColorBar(Graphics dc){\n\t    RectangleF r = new RectangleF(0, 0, this.Width, this.Height);\n    if (m_colors.Count == 2) {\n        UIColorUtil.Draw2ColorBar(dc, r, m_orientation, m_percentSet);\n    } else if (m_colors.Count >= 3) {\n        UIColorUtil.Draw3ColorBar(dc, r, m_orientation, m_percentSet);\n    }\n    DrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 44.54283304554087}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = SymbolNormal;\n    if (DroppedDown) {\n        dropSymbol = SymbolDropDown;\n    }\n    Invalidate();\n}", "CodeBleu_score": 83.39490622789617}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = SymbolNormal;\n    if (DroppedDown) {\n        dropSymbol = SymbolDropDown;\n    }\n    Invalidate();\n}", "CodeBleu_score": 83.39490622789617}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = SymbolNormal;\n    if (DroppedDown) {\n        dropSymbol = SymbolDropDown;\n    }\n    Invalidate();\n}", "CodeBleu_score": 83.39490622789617}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n\n    if (!edit.Visible) {\n        if (Text.IsValid) {\n            g.DrawString(Text, Font, GetForeColor(), new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), GetTextAlign());\n        } else {\n            g.DrawString(Watermark, Font, GetForeColor(), new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), GetTextAlign());\n        }\n    }\n\n    g.FillRectangle(GetFillColor(), edit.Left + edit.Width - RectSize, edit.Top, RectSize, RectSize);\n\n    if (ClearButtonNeed) {\n        g.DrawFontImage(FontImages.Clear, GetForeColor(), new RectangleF(edit.Left + edit.Width - RectSize - 1, edit.Top + 1, RectSize - 2, RectSize - 2), RectSize - 2, RectSize - 2);\n    } else {\n        g.DrawFontImage(FontImages.DropDown, GetForeColor(), new RectangleF(edit.Left + edit.Width - RectSize - 1, edit.Top + 1, RectSize - 2, RectSize - 2), RectSize - 2, RectSize - 2);\n    }\n}", "CodeBleu_score": 49.03916134048914}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n\n    if (!edit.Visible) {\n        if (Text.IsValid) {\n            g.DrawString(Text, Font, GetForeColor(), edit.Left, edit.Top, edit.Width, edit.Height, HorizontalAlignment.Left, VerticalAlignment.Middle);\n        } else if (Watermark.IsValid) {\n            g.DrawString(Watermark, Font, GetForeColor(), edit.Left, edit.Top, edit.Width, edit.Height, HorizontalAlignment.Left, VerticalAlignment.Middle);\n        }\n    }\n\n    g.FillRectangle(GetFillColor(), edit.Right, edit.Top, RectSize, edit.Height);\n\n    if (IsClearButtonVisible) {\n        g.DrawFontImage(FontImage.Clear, GetForeColor(), edit.Right + (RectSize - FontImage.Clear.Width) / 2, edit.Top + (edit.Height - FontImage.Clear.Height) / 2, FontImage.Clear.Width, FontImage.Clear.Height);\n    } else {\n        g.DrawFontImage(FontImage.DropDown, GetForeColor(), edit.Right + (RectSize - FontImage.DropDown.Width) / 2, edit.Top + (edit.Height - FontImage.DropDown.Height) / 2, FontImage.DropDown.Width, FontImage.DropDown.Height);\n    }\n}", "CodeBleu_score": 49.15805178985076}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n\n    if (!edit.Visible) {\n        if (Text.IsValid()) {\n            g.DrawString(Text, Font, GetForeColor(), 4 + Padding.Left, (Height - TextHeight) / 2, Width - 4 - Padding.Left - Padding.Right, TextHeight, TextAlign);\n        } else if (Watermark.IsValid()) {\n            g.DrawString(Watermark, Font, GetForeColor(), 4 + Padding.Left, (Height - TextHeight) / 2, Width - 4 - Padding.Left - Padding.Right, TextHeight, TextAlign);\n        }\n    }\n\n    g.FillRectangle(GetFillColor(), Width - RectSize - 1, 1, RectSize, RectSize);\n\n    if (HasClearButton) {\n        g.DrawFontImage(FontImages.Clear, GetForeColor(), Width - RectSize - 1, 1, RectSize, RectSize);\n    } else {\n        g.DrawFontImage(FontImages.Dropdown, GetForeColor(), Width - RectSize - 1, 1, RectSize, RectSize);\n    }\n}", "CodeBleu_score": 54.152563816231726}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (!ShowClearButton) {\n        NeedDrawClearButton = false;\n        return;\n    }\n    if (ClientRectangle.Contains(e.X, e.Y)) {\n        if (NeedDrawClearButton != Text.IsValid) {\n            NeedDrawClearButton = Text.IsValid;\n            Invalidate();\n        }\n    }\n    else {\n        NeedDrawClearButton = false;\n        Invalidate();\n    }\n}", "CodeBleu_score": 47.15951935729387}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n\n    if (!ShowClearButton) {\n        NeedDrawClearButton = false;\n        return;\n    }\n\n    if (ClientRectangle.Contains(e.X, e.Y)) {\n        if (NeedDrawClearButton != Text.IsValid) {\n            NeedDrawClearButton = Text.IsValid;\n            Invalidate();\n        }\n    } else {\n        if (NeedDrawClearButton) {\n            NeedDrawClearButton = false;\n            Invalidate();\n        }\n    }\n}", "CodeBleu_score": 45.42796235992333}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n\n    if (!ShowClearButton) {\n        NeedDrawClearButton = false;\n        return;\n    }\n\n    if (ClientRectangle.Contains(e.X, e.Y)) {\n        if (NeedDrawClearButton != (e.X >= ClientRectangle.Width - ClearButtonArea.Width && Text.IsValid)) {\n            NeedDrawClearButton = e.X >= ClientRectangle.Width - ClearButtonArea.Width && Text.IsValid;\n            Invalidate();\n        }\n    }\n    else {\n        if (NeedDrawClearButton) {\n            NeedDrawClearButton = false;\n            Invalidate();\n        }\n    }\n}", "CodeBleu_score": 45.55873146958252}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    // Calculate the preferred size of the component\n    Size preferredSize = GetPreferredSize(new Size(Width, Height));\n\n    // Adjust the size if AutoSize is enabled and the suggested size differs from the current size\n    if (AutoSize && (preferredSize.Width != Width || preferredSize.Height != Height)) {\n        Size = preferredSize;\n    }\n\n    // Set the items to be displayed\n    SetDisplayedItems();\n\n    // Trigger the layout completed event\n    OnLayoutCompleted(e);\n\n    // Invalidate the component to refresh its display\n    Invalidate();\n}", "CodeBleu_score": 36.40867425544128}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    Size preferredSize = GetPreferredSize();\n    if (AutoSize && (preferredSize != Size)) {\n        Size = preferredSize;\n    }\n    SetDisplayedItems();\n    OnLayoutCompleted();\n    Invalidate();\n    base.OnLayout(e);\n}", "CodeBleu_score": 38.19841468976225}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    Size preferredSize = GetPreferredSize(new Size(Width, Height));\n    if (AutoSize && preferredSize != Size) {\n        Size = preferredSize;\n    }\n    SetDisplayedItems();\n    OnLayoutCompleted(e);\n    Invalidate();\n}", "CodeBleu_score": 55.811472414132844}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    fillColor = Color.white;\n    foregroundColor = uiColor.dropdownPanelForeground;\n    rectangleColor = uiColor.dropdownPanelForeground;\n\n    foreach (UISymbolButton item in GetControls<UISymbolButton>()) {\n        item.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 55.90044594970011}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    fillColor = Color.white;\n    foregroundColor = uiColor.dropdownPanelForegroundColor;\n    rectangleColor = uiColor.dropdownPanelColor;\n\n    foreach (UISymbolButton item in this.GetControls<UISymbolButton>()) {\n        item.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 58.88424720488163}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    // Call the base class method to apply the base style\n    base.SetStyleColor(uiColor);\n\n    // Set the fill color to white\n    fillColor = Color.white;\n\n    // Set the foreground color to the dropdown panel foreground color\n    foregroundColor = uiColor.GetColor(UIBaseStyleColor.Foreground);\n\n    // Set the rectangle color from the provided style\n    rectangleColor = uiColor.GetColor(UIBaseStyleColor.Rectangle);\n\n    // Iterate through all UISymbolButton controls within the component\n    foreach (UISymbolButton item in this.GetControls<UISymbolButton>()) {\n        // Apply the style color to the control\n        item.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 59.85304668195786}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (AnalogMeter == null) return false;\n    Color bodyColor = AnalogMeter.GetColor(AnalogMeter.BodyColor);\n    Color bodyDarkColor = LBColorManager.StepColor(bodyColor, -20);\n    using (LinearGradientBrush lb = new LinearGradientBrush(rc, bodyColor, bodyDarkColor, LinearGradientMode.Vertical)) {\n        Gr.FillEllipse(lb, rc);\n    }\n    rc.Width *= AnalogMeter.DrawRatio;\n    rc.Height *= AnalogMeter.DrawRatio;\n    rc.X += (AnalogMeter.Width - rc.Width) / 2;\n    rc.Y += (AnalogMeter.Height - rc.Height) / 2;\n    using (LinearGradientBrush lb = new LinearGradientBrush(rc, bodyDarkColor, bodyColor, LinearGradientMode.Vertical)) {\n        Gr.FillEllipse(lb, rc);\n    }\n    return true;\n}", "CodeBleu_score": 42.27298786905703}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (this == null) return false;\n    Color c = this.AnalogMeter.GetColor(LBColorManager.StepColor(this.AnalogMeter.BodyColor, 0.5f));\n    Color c2 = this.AnalogMeter.GetColor(LBColorManager.StepColor(this.AnalogMeter.BodyColor, -0.5f));\n    using (LinearGradientBrush br = new LinearGradientBrush(rc, c, c2, 0f)) {\n        Gr.FillEllipse(br, rc);\n    }\n    rc.Inflate(-rc.Width * (1f - this.AnalogMeter.GetDrawRatio()), -rc.Height * (1f - this.AnalogMeter.GetDrawRatio()));\n    rc.Offset(rc.Width * (1f - this.AnalogMeter.GetDrawRatio()) / 2f, rc.Height * (1f - this.AnalogMeter.GetDrawRatio()) / 2f);\n    using (LinearGradientBrush br2 = new LinearGradientBrush(rc, c2, c, 0f)) {\n        Gr.FillEllipse(br2, rc);\n    }\n    return true;\n}", "CodeBleu_score": 41.13529776682901}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (this == null) return false;\n    Color bodyColor = this.AnalogMeter.GetColor(LBColorManager.StepColor(this.AnalogMeter.BodyColor, 2));\n    Color bodyColor2 = this.AnalogMeter.GetColor(LBColorManager.StepColor(this.AnalogMeter.BodyColor, 2));\n    LinearGradientBrush lgbr = new LinearGradientBrush(rc, bodyColor, bodyColor2, 0f);\n    Gr.FillEllipse(lgbr, rc);\n    float drawRatio = this.AnalogMeter.GetDrawRatio();\n    rc.Width *= drawRatio;\n    rc.Height *= drawRatio;\n    rc.X += (1 - drawRatio) * rc.Width / 2f;\n    rc.Y += (1 - drawRatio) * rc.Height / 2f;\n    lgbr = new LinearGradientBrush(rc, bodyColor2, bodyColor, 0f);\n    Gr.FillEllipse(lgbr, rc);\n    return true;\n}", "CodeBleu_score": 48.72233355974645}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    Invalidate();\n}", "CodeBleu_score": 33.93258044252809}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    if (this.AnalogMeter != null) {\n        this.AnalogMeter.Invalidate();\n    }\n}", "CodeBleu_score": 26.77352438813067}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n\n    // Invalidate the control to trigger a redraw\n    Invalidate();\n}", "CodeBleu_score": 33.93258044252809}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t    lock (_lock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n    }\n}", "CodeBleu_score": 68.83996390691942}, {"code": "public static void Load(){\n\t    lock (_lock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n    }\n}", "CodeBleu_score": 68.83996390691942}, {"code": "public static void Load(){\n\t    lock (_lock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n    }\n}", "CodeBleu_score": 68.83996390691942}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t    var proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (string.IsNullOrWhiteSpace(proxyOverride)) {\n        return;\n    }\n\n    var overrides = proxyOverride.Split(';');\n    foreach (var overrideItem in overrides) {\n        if (string.IsNullOrWhiteSpace(overrideItem)) {\n            continue;\n        }\n\n        var ignoreLocal = false;\n        if (overrideItem.StartsWith(\"<local>\")) {\n            ignoreLocal = true;\n        }\n\n        var overrideHost = overrideItem.Replace(\"<local>\", \"\");\n        if (!Overrides.Contains(overrideHost)) {\n            Overrides.Add(overrideHost);\n        }\n\n        if (ignoreLocal) {\n            IgnoreLocal = true;\n        }\n    }\n}", "CodeBleu_score": 52.81869009470189}, {"code": "private static void LoadOverrides(){\n\t    // Get the \"ProxyOverride\" value from a registry key\n    string proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\n    // Check if the value is null or empty\n    if (!string.IsNullOrWhiteSpace(proxyOverride)) {\n        // Split the override string into an array of individual overrides\n        string[] overrides = proxyOverride.Split(';');\n\n        // Iterate through each override\n        foreach (string o in overrides) {\n            // Set a flag if local traffic should be ignored\n            if (o.ToLower() == \"<local>\") {\n                _ignoreLocal = true;\n            }\n            // Add unique overrides to the Overrides list\n            else if (!Overrides.Contains(o)) {\n                Overrides.Add(o);\n            }\n        }\n    }\n}", "CodeBleu_score": 79.12243784865446}, {"code": "private static void LoadOverrides(){\n\t    var proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\n    if (string.IsNullOrWhiteSpace(proxyOverride)) {\n        return;\n    }\n\n    var overrides = proxyOverride.Split(';');\n\n    foreach (var overrideValue in overrides) {\n        if (string.IsNullOrWhiteSpace(overrideValue)) {\n            continue;\n        }\n\n        var overrideParts = overrideValue.Split('=');\n\n        if (overrideParts.Length != 2) {\n            continue;\n        }\n\n        var overrideKey = overrideParts[0];\n        var overrideConfig = overrideParts[1];\n\n        if (string.Equals(overrideKey, \"<local>\", StringComparison.OrdinalIgnoreCase)) {\n            IgnoreLocal = string.Equals(overrideConfig, \"true\", StringComparison.OrdinalIgnoreCase);\n        } else {\n            Overrides.Add(overrideValue);\n        }\n    }\n}", "CodeBleu_score": 56.17099235760937}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    string method = \"GET\";\n    List<string> headers = new List<string>();\n    Uri requestUri = null;\n\n    string command = await ReadNonBufferedLineAsync();\n    string[] commandParts = command.Split(' ');\n    if (commandParts.Length > 0) {\n        method = commandParts[0];\n        if (commandParts.Length > 1) {\n            requestUri = new Uri(baseUri, commandParts[1]);\n        }\n    }\n\n    string line;\n    while (!string.IsNullOrWhiteSpace(line = await ReadNonBufferedLineAsync())) {\n        headers.Add(line);\n    }\n\n    if (method == \"CONNECT\") {\n        baseUri = requestUri;\n        await SendResponseAsync(HttpStatusCode.OK, \"OK\", new WebHeaderCollection(), null);\n        if (SecureTunnel(requestUri.Host)) {\n            return await ReadRequestAsync(baseUri);\n        }\n    }\n\n    return CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 47.68228614524183}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    string method = string.Empty;\n    List<string> headers = new List<string>();\n    Uri requestUri = null;\n\n    string command = await ReadNonBufferedLineAsync();\n    string[] parts = command.Split(' ');\n    method = parts[0];\n    string path = parts[1];\n\n    while (true) {\n        string header = await ReadNonBufferedLineAsync();\n        if (string.IsNullOrWhiteSpace(header)) break;\n        headers.Add(header);\n    }\n\n    if (method == \"CONNECT\") {\n        if (baseUri == null) baseUri = new Uri(\"http://localhost\");\n        requestUri = new Uri(baseUri, path);\n        await SendResponseAsync(HttpStatusCode.OK, \"OK\", new WebHeaderCollection(), null);\n        if (SecureTunnel(requestUri.Host)) {\n            return await ReadRequestAsync(requestUri);\n        }\n    } else {\n        requestUri = new Uri(baseUri, path);\n    }\n\n    return CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 50.047015875384005}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    string command = await ReadNonBufferedLineAsync();\n    string[] commandParts = command.Split(' ');\n    string method = commandParts[0];\n    List<string> headers = new List<string>();\n    Uri requestUri = baseUri;\n\n    while (IsConnected) {\n        string header = await ReadNonBufferedLineAsync();\n        if (string.IsNullOrWhiteSpace(header)) break;\n        headers.Add(header);\n    }\n\n    if (method == \"CONNECT\") {\n        requestUri = new Uri(\"https://\" + commandParts[1]);\n        await SendResponseAsync(HttpStatusCode.OK, \"OK\", new WebHeaderCollection(), null);\n        if (SecureTunnel(requestUri.Host)) await ReadRequestAsync(requestUri);\n    }\n    else {\n        return CreateRequest(method, headers, requestUri);\n    }\n\n    return null;\n}", "CodeBleu_score": 46.70066154392215}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    string description = \"OK\";\n    var status = HttpStatusCode.OK;\n    if (response is HttpWebResponse httpResponse) {\n        status = httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 98.04838556514922}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    string description = \"OK\";\n    var status = HttpStatusCode.OK;\n    if (response is HttpWebResponse httpResponse) {\n        status = httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 98.04838556514922}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    string description = \"OK\";\n    var status = HttpStatusCode.OK;\n    if (response is HttpWebResponse httpResponse) {\n        status = httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 98.04838556514922}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t    try {\n        _certifier = new Certifier(host);\n        _secureStream = new SslStream(\n            _client.GetStream(),\n            false,\n            new RemoteCertificateValidationCallback(ValidateServerCertificate),\n            null\n        );\n\n        _secureStream.AuthenticateAsServer(\n            _certifier.GenerateCertificate(),\n            false,\n            SslProtocols.Tls,\n            false\n        );\n\n        return true;\n    } catch (Exception e) {\n        Console.WriteLine(e.Message);\n        return false;\n    }\n}", "CodeBleu_score": 42.84359185308852}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        // Generate an SSL certificate for the host\n        X509Certificate2 cert = _certifier.GenerateCertificate(host);\n\n        // Create an SSL stream using the generated certificate\n        _secureStream = new SslStream(\n            _client.GetStream(),\n            false,\n            (sender, certificate, chain, sslPolicyErrors) => true\n        );\n\n        // Authenticate the SSL stream as a server\n        _secureStream.AuthenticateAsServer(cert, false, SslProtocols.Tls, false);\n\n        return true;\n    }\n    catch (Exception e) {\n        // Handle any exceptions that occur during the process\n        Console.WriteLine(e.Message);\n        return false;\n    }\n}", "CodeBleu_score": 51.829609927912465}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        _certifier.GenerateCertificate(host);\n        _secureStream = new SslStream(\n            _client.GetStream(),\n            false,\n            new RemoteCertificateValidationCallback(ValidateServerCertificate),\n            null\n        );\n        _secureStream.AuthenticateAsServer(_certifier.GetCertificate(), false, SslProtocols.Tls, false);\n        return true;\n    } catch (Exception e) {\n        Console.WriteLine(e.Message);\n        return false;\n    }\n}", "CodeBleu_score": 52.833321932908284}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    Stream stream = response.GetResponseStream();\n    int bufferSize = response.ContentLength > 0 ? (int)response.ContentLength : 4096;\n    return new StreamContent(stream, bufferSize);\n}", "CodeBleu_score": 56.889093452015935}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    // Check if the response has content\n    if (response.ContentLength == 0) {\n        // If the response has no content, dispose of the response stream and return null\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n\n    // Get the response stream\n    Stream stream = response.GetResponseStream();\n\n    // Create a new StreamContent object with the response stream and a buffer size based on the content length or a default value of 4096\n    return new StreamContent(stream, (int)response.ContentLength > 0 ? (int)response.ContentLength : 4096);\n}", "CodeBleu_score": 74.63511964008369}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    return new StreamContent(response.GetResponseStream(), (int) response.ContentLength);\n}", "CodeBleu_score": 65.39361272794369}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (path == \"\") {\n        if (openFileDialog.ShowDialog() == DialogResult.OK) {\n            path = openFileDialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    try {\n        ActivityConfig.Load(path);\n        MessageBox.Show(\"OK\");\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.DialogTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 38.140535301584265}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        if (OpenFileDialog.ShowDialog() == DialogResult.OK) {\n            path = OpenFileDialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    try {\n        ActivityConfig.Load(path);\n        MessageBox.Show(\"OK\", Resource.MessageBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resource.MessageBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 50.770796728969245}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.Title = \"Select JSON file\";\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    try {\n        ActivityConfig.Load(path);\n        MessageBox.Show(\"Activity configuration loaded successfully.\");\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 43.49986542624601}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t    // Clear the existing items in the ListActivityConfigItems control\n    ListActivityConfigItems.Items.Clear();\n\n    // Load the activity configuration from the specified file path\n    List<ActivityConfigItem> activityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\n    // Assign the loaded activity configuration to the ActivityConfigItems property\n    ActivityConfigItems = activityConfigItems;\n\n    // Update the ListActivityConfigItems control by adding the loaded items and ending the update\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 49.03923466453143}, {"code": "private void LoadActivityConfig(string path){\n\t    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 67.41931683389465}, {"code": "private void LoadActivityConfig(string path){\n\t    // Deserialize the JSON content of the file into a list of ActivityConfigItem objects\n    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\n    // Update the ListActivityConfigItems control by clearing existing items, adding the newly loaded items, and ending the update to refresh the display\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 67.49889316679766}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        SaveFileDialog dialog = new SaveFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n        dialog.FileName = \"activity_config.json\";\n        dialog.DefaultExt = \"json\";\n        dialog.AddExtension = true;\n        dialog.CheckPathExists = true;\n        dialog.Title = \"Save Activity Config JSON\";\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        } else {\n            return;\n        }\n    }\n    try {\n        string json = JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented);\n        File.WriteAllText(path, json);\n        MessageBox.Show(\"Activity Config JSON saved successfully.\");\n    } catch (Exception ex) {\n        MessageBox.Show(\"Error saving Activity Config JSON: \" + ex.ToString());\n    }\n}", "CodeBleu_score": 40.18014700204543}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        SaveFileDialog dialog = new SaveFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.DefaultExt = \"json\";\n        dialog.FileName = \"ActivityConfigItems.json\";\n        dialog.RestoreDirectory = true;\n        dialog.ShowDialog();\n        path = dialog.FileName;\n        ActivityConfigJsonPath.Text = path;\n    }\n    if (string.IsNullOrEmpty(path)) {\n        return;\n    }\n    try {\n        string json = JsonConvert.SerializeObject(ActivityConfigItems);\n        File.WriteAllText(path, json);\n        MessageBox.Show(\"Configuration saved successfully.\");\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 40.08634155350758}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        SaveFileDialog dialog = new SaveFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.DefaultExt = \".json\";\n        dialog.AddExtension = true;\n        dialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        } else {\n            return;\n        }\n    }\n    try {\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\n        MessageBox.Show(\"Configuration saved successfully.\");\n    } catch (Exception ex) {\n        MessageBox.Show(\"Error saving configuration: \" + ex.ToString());\n    }\n}", "CodeBleu_score": 41.75351504713684}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\t    ListAllActivity.BeginUpdate();\n    foreach (ActivityGroup grp in GameData.Activity) {\n        ListViewGroup lvg = ListAllActivity.Groups.Add(grp.Value.Name, grp.Value.Name);\n        for (int i = 0; i < grp.Value.Ids.Count; i++) {\n            ListViewItem lvi = ListAllActivity.Items.Add(grp.Value.Ids[i].ToString(), lvg);\n            lvi.SubItems.Add(grp.Value.Names[i]);\n        }\n    }\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 50.10161696891501}, {"code": "private void LoadAllActivity(){\n\t    ListAllActivity.BeginUpdate();\n    foreach (ActivityGroup grp in GameData.Activity.Groups) {\n        ListAllActivity.Groups.Add(grp.Value.Name);\n        for (int i = 0; i < grp.Value.Ids.Count; i++) {\n            ListAllActivity.Items.Add(new ListViewItem(new string[] { grp.Value.Ids[i].ToString(), grp.Value.Names[i] }));\n        }\n    }\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 56.33100608881054}, {"code": "private void LoadAllActivity(){\n\t    ListAllActivity.BeginUpdate();\n    foreach (ActivityGroup grp in GameData.Activity) {\n        ListAllActivity.Groups.Add(grp.Value.Name);\n        for (int i = 0; i < grp.Value.Ids.Count; i++) {\n            ListAllActivity.Items.Add(new ListViewItem(new string[] { grp.Value.Ids[i].ToString(), grp.Value.Names[i] }));\n        }\n    }\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 57.59581917480134}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0) {\n            return;\n        }\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 64.40485346439802}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0)\n            return;\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 68.50851115186714}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0) {\n            return;\n        }\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 64.7170463956207}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = TxtDropJsonPath.Text.Trim();\n    if (path.Length == 0) {\n        var dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.Title = \"Select JSON file\";\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            TxtDropJsonPath.Text = path;\n        }\n    }\n\n    try {\n        var banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\n        if (banners != null) {\n            foreach (var banner in banners) {\n                var bannerObj = new BannerObject(banner);\n                bannerObj.LoadBanner();\n            }\n            MessageBox.Show(\"Successfully loaded banners from file.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 49.04456362280625}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = TxtDropJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.Title = \"Select a JSON file\";\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            TxtDropJsonPath.Text = path;\n        }\n    }\n    try {\n        _banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\n        MessageBox.Show(\"Loaded successfully!\");\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.LoadError, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 44.56608574312552}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    // Get the file path from the text box.\n    string path = TxtDropJsonPath.Text.Trim();\n\n    // If the path is empty, open a file dialog to select a JSON file.\n    if (string.IsNullOrEmpty(path)) {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.Title = \"Select a JSON file\";\n\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            TxtDropJsonPath.Text = path;\n        }\n    }\n\n    // Attempt to deserialize and load the banners from the specified file path.\n    try {\n        BannerManager.Load(path);\n        MessageBox.Show(\"Successfully loaded banners from \" + path, \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 43.28991619876392}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t  ta.BeginUpdate();\n  ta.Items.Clear();\n  if (dropList.Count > 0) {\n    ta.Items.AddRange(dropList.Select(it => it.ToString()).ToArray());\n    ta.SelectedIndex = 0;\n  }\n  ta.EndUpdate();\n}", "CodeBleu_score": 60.229695226742145}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    ta.Items.Clear();\n    ta.BeginUpdate();\n    if (dropList.Count > 0) {\n        ta.Items.AddRange(dropList.Select(it => it.ToString()).ToArray());\n        ta.SelectedIndex = 0;\n    }\n    ta.EndUpdate();\n}", "CodeBleu_score": 60.13912456458146}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    ta.BeginUpdate();\n    ta.Items.Clear();\n    if (dropList.Count > 0) {\n        foreach (var item in dropList) {\n            ta.Items.Add(item.ToString());\n        }\n        ta.SelectedIndex = 0;\n    }\n    ta.EndUpdate();\n}", "CodeBleu_score": 56.160949767844784}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t    DropList.Remove(data);\n}", "CodeBleu_score": 8.834034622293254}, {"code": "private void RemoveDrop(DropData data){\n\t    SelectedDropList.Remove(data);\n    dropList.Remove(data);\n}", "CodeBleu_score": 13.98458387022547}, {"code": "private void RemoveDrop(DropData data){\n\t    StopUpdates();\n    ListDrops.Items.Remove(data.ToString());\n    ResumeUpdates();\n}", "CodeBleu_score": 6.291274398344446}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t            Logger.I(TAG, \"FormClosed\");\n            foreach (Page p in pages) {\n                Logger.I(TAG, \"OnClosed \" + p.Name);\n                p.OnClosed();\n                Logger.I(TAG, \"OnClosed \" + p.Name + \" completed\");\n            }\n            Settings.Save();\n            Logger.I(TAG, \"FormClosed completed\");\n        }", "CodeBleu_score": 54.94067831358149}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormClosed\");\n    foreach (Page page in pages) {\n        Logger.I(TAG, \"FormClosed: \" + page.Name + \" OnClosed\");\n        page.OnClosed();\n        Logger.I(TAG, \"FormClosed: \" + page.Name + \" OnClosed Completed\");\n    }\n    Settings.SaveSettings();\n    Logger.I(TAG, \"FormClosed Completed\");\n}", "CodeBleu_score": 54.10336167109412}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormClosed\");\n    foreach (Page p in pages) {\n        Logger.I(TAG, \"FormClosed: \" + p.Name + \" OnClosed\");\n        p.OnClosed();\n        Logger.I(TAG, \"FormClosed: \" + p.Name + \" OnClosed Completed\");\n    }\n    Settings.Save();\n    Logger.I(TAG, \"FormClosed Completed\");\n}", "CodeBleu_score": 52.536430569385864}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\t", "CodeBleu_score": 0.7898236434181539}, {"code": " private void SaveSettings(){\n\t  try {\n   // Record the state of the UI\n   Settings.Default.AutoCopy = AutoCopyCheckBox.Checked;\n   Settings.Default.WindowState = WindowState;\n   Settings.Default.WindowPosition = WindowState == FormWindowState.Normal ? Location : RestoreBounds;\n   Settings.Default.SplitterDistance = NavigationContainer.SplitterDistance;\n\n   // Save the settings\n   Settings.Default.Save();\n  } catch (Exception ex) {\n   Logger.E(TAG, \"Error saving settings: \" + ex.Message);\n   MessageBox.Show(\"Error saving settings: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n  }\n }", "CodeBleu_score": 47.209769025763656}, {"code": " private void SaveSettings(){\n\t  try {\n   // Save the state of the UI\n   Settings.Default.AutoCopy = AutoCopyCheckbox.Checked;\n   Settings.Default.WindowState = WindowState;\n   Settings.Default.WindowPosition = WindowPosition;\n   Settings.Default.WindowSize = WindowSize;\n   Settings.Default.SplitterDistance = NavigationContainer.SplitterDistance;\n\n   // Save the settings\n   Settings.Default.Save();\n  } catch (Exception ex) {\n   Logger.E(TAG, \"Error saving settings: \" + ex.Message);\n   MessageBox.Show(\"Error saving settings: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n  }\n }", "CodeBleu_score": 44.61647383054947}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t  if (PageTabOrders != null) return PageTabOrders;\n\n  List<Tuple<string, bool>> orders = new List<Tuple<string, bool>>();\n\n  string[] pageOrders = Settings.GetSetting(\"PageTabOrders\").Split(',');\n\n  if (pageOrders.Length == 0) {\n    foreach (var page in Pages) {\n      orders.Add(new Tuple<string, bool>(page.Name, true));\n    }\n  } else {\n    foreach (var pageOrder in pageOrders) {\n      string[] order = pageOrder.Split(':');\n      if (order.Length != 2) continue;\n\n      string pageName = order[0];\n      bool isVisible = bool.Parse(order[1]);\n\n      orders.Add(new Tuple<string, bool>(pageName, isVisible));\n    }\n  }\n\n  PageTabOrders = orders;\n  return orders;\n}", "CodeBleu_score": 35.40645164724959}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t    if (PageTabOrders != null) return PageTabOrders;\n\n    var tabOrders = new List<Tuple<string, bool>>();\n\n    if (!Settings.Contains(\"PageTabOrders\")) {\n        foreach (var page in Pages) {\n            tabOrders.Add(new Tuple<string, bool>(page.Name, true));\n        }\n\n        return tabOrders;\n    }\n\n    var pageOrders = Settings.GetString(\"PageTabOrders\");\n    var orders = pageOrders.Split(',');\n\n    foreach (var order in orders) {\n        var sp = order.IndexOf(':');\n        if (sp == -1) continue;\n\n        var pageName = order.Substring(0, sp);\n        var isVisible = bool.Parse(order.Substring(sp + 1));\n\n        tabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n    }\n\n    return tabOrders;\n}", "CodeBleu_score": 42.401954945497735}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t    if (PageTabOrders != null) return PageTabOrders;\n\n    var PageTabOrders = new List<Tuple<string, bool>>();\n\n    var PageOrders = Settings.GetSetting(\"PageOrders\").Split(',');\n    if (PageOrders.Length == 1 && PageOrders[0] == \"\") {\n        foreach (var page in Pages) {\n            PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n        }\n        return PageTabOrders;\n    }\n\n    foreach (var pageOrder in PageOrders) {\n        var sp = pageOrder.IndexOf(':');\n        if (sp == -1) continue;\n        var pageName = pageOrder.Substring(0, sp);\n        var isVisible = bool.Parse(pageOrder.Substring(sp + 1));\n        PageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n    }\n\n    return PageTabOrders;\n}", "CodeBleu_score": 41.01463545716818}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t    System.Diagnostics.Debug.WriteLine($\"Saving frame {info.FrameNumber} with {info.Data.Length} bytes\");\n    System.Diagnostics.Debug.WriteLine($\"Current stream length: {_compressStream.Length}\");\n\n    _compressStream.WriteBytes(info.Data);\n    _compressStream.Flush();\n\n    info.Data = null;\n\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 57.98679911373856}, {"code": "public override void Save(FrameInfo info){\n\t    System.Diagnostics.Debug.WriteLine($\"Saving frame {info.FrameNumber} with {info.Data.Length} bytes\");\n    System.Diagnostics.Debug.WriteLine($\"Current stream length: {_compressStream.Length}\");\n    _compressStream.WriteBytes(info.Data);\n    _compressStream.Flush();\n    info.Data = null;\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 57.98679911373856}, {"code": "public override void Save(FrameInfo info){\n\t    System.Diagnostics.Debug.WriteLine(\"Frame length: \" + info.FrameData.Length);\n    System.Diagnostics.Debug.WriteLine(\"File stream length: \" + _fileStream.Length);\n    _compressStream.WriteBytes(info.FrameData);\n    _compressStream.Flush();\n    info.FrameData = null;\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 58.16905652308393}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    // Gets the surface interface for the texture.\n    var surface = texture.QueryInterface<Surface>();\n    // Maps the texture for CPU access.\n    var rect = surface.Map();\n\n    // If the cursor is monochrome, calls the DrawMonochromeCursor function.\n    if (info.Type == OutputDuplicatePointerShapeInformation.PointerType.Monochrome) {\n        DrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer, info.Height);\n    }\n    // If the cursor is color, calls the DrawColorCursor function.\n    else if (info.Type == OutputDuplicatePointerShapeInformation.PointerType.Color) {\n        DrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n    }\n    // If the cursor is masked color, calls the DrawMaskedColorCursor function.\n    else if (info.Type == OutputDuplicatePointerShapeInformation.PointerType.MaskedColor) {\n        DrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n    }\n\n    // Unmaps the surface to release the CPU access.\n    surface.Unmap();\n}", "CodeBleu_score": 61.50684451512441}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    var rect = texture.QueryInterface<Surface>().Map();\n    var pitch = rect.Pitch;\n\n    switch (info.Type) {\n        case OutputDuplicatePointerShapeType.Monochrome:\n            DrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer, info.Height);\n            break;\n        case OutputDuplicatePointerShapeType.Color:\n            DrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n            break;\n        case OutputDuplicatePointerShapeType.MaskedColor:\n            DrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n            break;\n    }\n\n    texture.QueryInterface<Surface>().Unmap();\n}", "CodeBleu_score": 66.58458301242445}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    var rect = texture.QueryInterface<Surface>().Map();\n\n    switch (info.Color)\n    {\n        case 0:\n            DrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n            break;\n        case 1:\n            DrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n            break;\n        case 2:\n            DrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer, info.ActualHeight);\n            break;\n    }\n\n    texture.QueryInterface<Surface>().Unmap();\n}", "CodeBleu_score": 65.08208324189621}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new Imgur();\n        case UploadDestinations.Yandex:\n            return new YandexDisk();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 82.78994661271675}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new Imgur();\n        case UploadDestinations.Yandex:\n            return new YandexDisk();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 82.78994661271675}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new ImgurUploader();\n        case UploadDestinations.YandexDisk:\n            return new YandexDiskUploader();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 73.35754771912465}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (!File.Exists(path))\n        {\n            throw new UploadException($\"File {path} does not exist.\");\n        }\n\n        var link = await GetUploadLinkAsync(preset, Path.GetFileName(path), cancellationToken);\n\n        if (link == null)\n        {\n            throw new UploadException($\"Could not get upload link for {path}.\");\n        }\n\n        using (var fileStream = File.OpenRead(path))\n        {\n            await PutAsync(preset, link.Href, new StreamContent(fileStream), cancellationToken);\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, Path.GetFileName(path), cancellationToken);\n\n        return new History\n        {\n            UploadDate = DateTime.Now,\n            FileName = Path.GetFileName(path),\n            FileSize = new FileInfo(path).Length,\n            DownloadLink = downloadLink.Href,\n            UploadLink = link.Href\n        };\n    }", "CodeBleu_score": 54.718784661908174}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (!File.Exists(path))\n            throw new UploadException(\"File not found\");\n\n        var link = await GetUploadLinkAsync(preset, Path.GetFileName(path), cancellationToken);\n\n        if (link == null)\n            throw new UploadException(\"Upload link is invalid\");\n\n        using (var fileStream = File.OpenRead(path))\n            await UploadFileAsync(preset, link, fileStream, cancellationToken, progressCallback);\n\n        var downloadLink = await GetDownloadLinkAsync(preset, Path.GetFileName(path), cancellationToken);\n\n        return new History(\n            preset.Id,\n            DateTime.Now,\n            path,\n            downloadLink,\n            link.Path\n        );\n    }", "CodeBleu_score": 50.59382846962275}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t            if (string.IsNullOrEmpty(path))\n            {\n                throw new ArgumentNullException(nameof(path));\n            }\n\n            var fileInfo = new FileInfo(path);\n            if (!fileInfo.Exists)\n            {\n                throw new FileNotFoundException(path);\n            }\n\n            var link = await GetUploadLinkAsync(preset, fileInfo.Name, cancellationToken);\n            if (link == null)\n            {\n                throw new UploadException(\"Upload link is invalid\");\n            }\n\n            using (var fileStream = fileInfo.OpenRead())\n            {\n                var content = new StreamContent(fileStream);\n                await PutAsync(preset, link.Href, content, cancellationToken);\n            }\n\n            var downloadLink = await GetDownloadLinkAsync(preset, fileInfo.Name, cancellationToken);\n            return new History\n            {\n                Id = downloadLink.Templated,\n                Name = fileInfo.Name,\n                Type = UploadType.File,\n                UploadDate = DateTime.UtcNow,\n                Size = fileInfo.Length,\n                UploadSpeed = 0,\n                UploadStatus = UploadStatus.Completed,\n                UploadProgress = 100\n            };\n        }", "CodeBleu_score": 52.33557832079511}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t    int interval = GetCaptureInterval();\n    if (HasFixedDelay()) {\n        interval = GetFixedDelay();\n    }\n    HasImpreciseCapture = false;\n    if (UserSettings.All.ForceGarbageCollection) {\n        GarbageTimer.Start(interval);\n    }\n    lock (UserSettings.All) {\n        CancellationTokenSource = new CancellationTokenSource();\n        Task.Run(() => CaptureLoop(interval), CancellationTokenSource.Token);\n    }\n}", "CodeBleu_score": 50.78386426887608}, {"code": "internal virtual void StartCapture(){\n\t    int interval = GetCaptureInterval();\n    if (HasFixedDelay()) {\n        interval = GetFixedDelay();\n    }\n    HasImpreciseCapture = false;\n    if (UserSettings.All.ForceGarbageCollection) {\n        GarbageTimer.Start();\n    }\n    lock (UserSettings.All) {\n        CancelToken = new CancellationTokenSource();\n        Task.Run(() => CaptureLoop(interval, CancelToken.Token));\n    }\n}", "CodeBleu_score": 53.39055319572964}, {"code": "internal virtual void StartCapture(){\n\t    FrameRate.Start();\n\n    int interval = HasFixedDelay() ? GetFixedDelay() : GetCaptureInterval();\n    HasImpreciseCapture = false;\n\n    if (UserSettings.All.ForceGarbageCollection)\n        GarbageTimer.Start();\n\n    using (UserSettings.All.Lock())\n    {\n        CancellationTokenSource = new CancellationTokenSource();\n\n        Task.Run(() =>\n        {\n            while (!CancellationTokenSource.IsCancellationRequested)\n                CaptureLoop(interval);\n        }, CancellationTokenSource.Token);\n    }\n}", "CodeBleu_score": 60.587636227647664}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\t    Stopwatch sw = new Stopwatch();\n    while (!captureToken.IsCancellationRequested) {\n        sw.Restart();\n        Frame frame = new Frame(CursorData);\n        KeyList.Clear();\n        Capture.CaptureFrame(frame);\n        frameCount++;\n        if (sw.ElapsedMilliseconds < interval) {\n            int sleepTime = interval - (int)sw.ElapsedMilliseconds;\n            for (int i = 0; i < sleepTime; i++) {\n                Thread.Sleep(1);\n            }\n        }\n        sw.Stop();\n    }\n}", "CodeBleu_score": 51.65725758095401}, {"code": "private void CaptureWithCursor(int interval){\n\t    Stopwatch sw = new Stopwatch();\n    sw.Start();\n    while (!_captureToken.IsCancellationRequested) {\n        sw.Restart();\n        Frame frame = new Frame(Cursor.Position, KeyList.ToArray());\n        KeyList.Clear();\n        Capture(frame);\n        FrameCount++;\n        if (sw.ElapsedMilliseconds < interval) {\n            while (sw.ElapsedMilliseconds < interval) {\n                Thread.Sleep(1);\n            }\n        }\n        sw.Stop();\n    }\n}", "CodeBleu_score": 54.16091399189615}, {"code": "private void CaptureWithCursor(int interval){\n\t    while (!captureToken.IsCancellationRequested) {\n        sw.Restart();\n        Frame frame = new Frame(true);\n        KeyList.Clear();\n        Capture.Capture(frame);\n        FrameCount++;\n        if (sw.ElapsedMilliseconds < interval) {\n            int sleepTime = (int)(interval - sw.ElapsedMilliseconds);\n            for (int i = 0; i < sleepTime; i++) {\n                Thread.Sleep(1);\n                if (captureToken.IsCancellationRequested) {\n                    break;\n                }\n            }\n        }\n        sw.Stop();\n    }\n}", "CodeBleu_score": 46.19852001343311}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) {\n        return arrangeSize;\n    }\n\n    var padding = Padding;\n    var childWidth = Math.Max(0.0, arrangeSize.Width - padding.HorizontalThickness);\n    var childHeight = Math.Max(0.0, arrangeSize.Height - padding.VerticalThickness);\n\n    child.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\n    return arrangeSize;\n}", "CodeBleu_score": 56.26262386567043}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) {\n        return arrangeSize;\n    }\n\n    var padding = Padding;\n    if (padding == null) {\n        padding = new Thickness(0);\n    }\n\n    var childWidth = Math.Max(0.0, arrangeSize.Width - padding.Left - padding.Right);\n    var childHeight = Math.Max(0.0, arrangeSize.Height - padding.Top - padding.Bottom);\n\n    child.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\n    return arrangeSize;\n}", "CodeBleu_score": 72.83533862110555}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Children[0];\n    var padding = Padding;\n    if (padding == null) {\n        padding = new Thickness(10);\n    }\n\n    var width = Math.Max(0, arrangeSize.Width - padding.Left - padding.Right);\n    var height = Math.Max(0, arrangeSize.Height - padding.Top - padding.Bottom);\n\n    child.Arrange(new Rect(padding.Left, padding.Top, width, height));\n    return arrangeSize;\n}", "CodeBleu_score": 54.43927735021086}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Text = \"0\";\n            return;\n        }\n\n        IgnoreChange = true;\n        decimal value = Convert.ToDecimal(Text);\n        Text = string.Format(\"{0:N2}\", value);\n        IgnoreChange = false;\n    }\n\n    if (UpdateOnInput) {\n        Text = string.Format(\"{0:N2}\", Value);\n    }\n}", "CodeBleu_score": 41.18470722691253}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Text = DefaultValue.ToString();\n            return;\n        }\n\n        IgnoreChanges = true;\n        decimal value = Convert.ToDecimal(Text);\n        Text = string.Format(\"{0:N2}\", value);\n        IgnoreChanges = false;\n    }\n\n    UpdateTextFormat();\n}", "CodeBleu_score": 40.31310056985929}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValue;\n            return;\n        }\n        IgnoreChange = true;\n        Value = Convert.ToDecimal(Text);\n        UpdateTextFormat();\n        IgnoreChange = false;\n    }\n    if (UpdateOnInput) {\n        UpdateTextFormat();\n    }\n}", "CodeBleu_score": 40.88078634074389}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return) {\n        e.Handled = true;\n        MoveFocus();\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 49.534445625520725}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return) {\n        e.Handled = true;\n        MoveFocus();\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 49.534445625520725}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 86.4567462503703}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (!IsCaptured || !IsLeftMouseButtonDown) return;\n\n    var current = GetBoundedCoordinates(e);\n\n    if (IsSelectionMode && (SelectedShapes.Count == 0 || Keyboard.IsKeyDown(Key.LeftCtrl)))\n    {\n        if (IsSelectionMode)\n        {\n            _selectionRectangle.Width = Math.Abs(current.X - _startPoint.X);\n            _selectionRectangle.Height = Math.Abs(current.Y - _startPoint.Y);\n            Canvas.SetLeft(_selectionRectangle, Math.Min(current.X, _startPoint.X));\n            Canvas.SetTop(_selectionRectangle, Math.Min(current.Y, _startPoint.Y));\n        }\n        return;\n    }\n\n    CalculateOrientation(_startPoint, current);\n\n    RenderRegion = new Rect(_mostDistantPoint, _currentPoint);\n\n    RenderShape();\n\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 41.66532647270492}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (!IsCaptured || !e.LeftButton == MouseButtonState.Pressed)\n        return;\n\n    if (CurrentMode == Modes.Selection && (SelectedShapes.Count == 0 || Keyboard.IsKeyDown(Key.LeftCtrl))) {\n        SelectionRectangle.Width = Math.Abs(e.GetPosition(this).X - SelectionStartPoint.X);\n        SelectionRectangle.Height = Math.Abs(e.GetPosition(this).Y - SelectionStartPoint.Y);\n\n        if (SelectionStartPoint.X > e.GetPosition(this).X) {\n            Canvas.SetLeft(SelectionRectangle, e.GetPosition(this).X);\n            SelectionRectangle.Width = Math.Abs(SelectionStartPoint.X - e.GetPosition(this).X);\n        }\n\n        if (SelectionStartPoint.Y > e.GetPosition(this).Y) {\n            Canvas.SetTop(SelectionRectangle, e.GetPosition(this).Y);\n            SelectionRectangle.Height = Math.Abs(SelectionStartPoint.Y - e.GetPosition(this).Y);\n        }\n\n        return;\n    }\n\n    if (CurrentMode == Modes.Shape) {\n        var current = GetBoundedCoordinates(e);\n        CalculateOrientation(SelectionStartPoint, current);\n        RenderRegion = new Rect(new Point(Math.Min(_mostDistantPoint.X, _currentPoint.X), Math.Min(_mostDistantPoint.Y, _currentPoint.Y)), new Point(Math.Max(_mostDistantPoint.X, _currentPoint.X), Math.Max(_mostDistantPoint.Y, _currentPoint.Y)));\n        RenderRegion.Inflate(StrokeThickness, StrokeThickness);\n        RenderShape();\n    }\n\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 42.639819039258406}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (!IsCaptured || !e.LeftButton.Equals(MouseButtonState.Pressed))\n        return;\n\n    if (Mode == SelectionMode.Shape && !SelectedShapes.Any() || (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))) {\n        var current = GetBoundedCoordinates(e);\n        var start = GetBoundedCoordinates(e.GetPosition(this));\n        var orientation = CalculateOrientation(start, current);\n        UpdateSelectionRectangle(orientation);\n        return;\n    }\n\n    var current = GetBoundedCoordinates(e);\n    var start = GetBoundedCoordinates(e.GetPosition(this));\n    CalculateOrientation(start, current);\n\n    RenderRegion = new Rect(\n        Math.Min(start.X, current.X),\n        Math.Min(start.Y, current.Y),\n        Math.Abs(current.X - start.X),\n        Math.Abs(current.Y - start.Y));\n\n    RenderShape();\n\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 48.882597472582944}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (sender is Thumb) {\n        e.Handled = true;\n\n        double newWidth = Math.Max(10, AdornedElement.DesiredSize.Width + e.HorizontalChange);\n        double newHeight = Math.Max(10, AdornedElement.DesiredSize.Height + e.VerticalChange);\n\n        newWidth = Math.Min(newWidth, Parent.DesiredSize.Width - AdornedElement.DesiredSize.Width);\n        newHeight = Math.Min(newHeight, Parent.DesiredSize.Height - AdornedElement.DesiredSize.Height);\n\n        RaiseManipulatedEvent(newWidth - AdornedElement.DesiredSize.Width, newHeight - AdornedElement.DesiredSize.Height);\n\n        AdornedElement.Width = newWidth;\n        AdornedElement.Height = newHeight;\n\n        AfterManipulation();\n    }\n}", "CodeBleu_score": 41.282590636870395}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (sender is Thumb) {\n        e.Handled = true;\n\n        double newWidth = Math.Max(AdornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n        double newHeight = Math.Max(AdornedElement.DesiredSize.Height + e.VerticalChange, 10);\n\n        if (newWidth > AdornedElement.Parent.DesiredSize.Width) {\n            newWidth = AdornedElement.Parent.DesiredSize.Width;\n        }\n\n        if (newHeight > AdornedElement.Parent.DesiredSize.Height) {\n            newHeight = AdornedElement.Parent.DesiredSize.Height;\n        }\n\n        RaiseManipulatedEvent(0);\n\n        AdornedElement.Width = newWidth;\n        AdornedElement.Height = newHeight;\n\n        AfterManipulation();\n    }\n}", "CodeBleu_score": 49.98370939271166}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (!(sender is Thumb))\n        return;\n\n    e.Handled = true;\n\n    double newWidth = Math.Max(10, _adornedElement.ActualWidth + e.HorizontalChange);\n    double newHeight = Math.Max(10, _adornedElement.ActualHeight + e.VerticalChange);\n\n    if (_adornedElement.Parent is Canvas parent) {\n        if (Canvas.GetLeft(_adornedElement) + newWidth > parent.ActualWidth)\n            newWidth = parent.ActualWidth - Canvas.GetLeft(_adornedElement);\n\n        if (Canvas.GetTop(_adornedElement) + newHeight > parent.ActualHeight)\n            newHeight = parent.ActualHeight - Canvas.GetTop(_adornedElement);\n    }\n\n    RaiseManipulatedEvent(0);\n\n    _adornedElement.Width = newWidth;\n    _adornedElement.Height = newHeight;\n\n    AfterManipulation();\n}", "CodeBleu_score": 47.29666935747147}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t    IntegerList = Enumerable.Range(0, 1000).ToList();\n    ShortStringList = new List<string> {\n        \"Windows\",\n        \"OS X\",\n        \"Linux\",\n        \"Android\",\n        \"iOS\"\n    };\n    SelectedValue = IntegerList[2];\n    SelectedText = null;\n    LongStringList = new List<string>();\n    for (int i = 0; i < 1000; i++) {\n        LongStringList.Add(Path.GetRandomFileName());\n    }\n}", "CodeBleu_score": 64.04441930882764}, {"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = Enumerable.Range(0, 1000).ToList();\n\tShortStringList = new List<string> { \"One\", \"Two\", \"Three\" };\n\tSelectedInteger = IntegerList[2];\n\tSelectedText = null;\n\tLongStringList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongStringList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 57.86142392721213}, {"code": "public ComboBoxesViewModel(){\n\t    IntegerList = Enumerable.Range(0, 1000).ToList();\n    ShortStringList = new List<string> { \"Lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\" };\n    SelectedValue = IntegerList[3];\n    SelectedText = null;\n    LongStringList = new List<string>();\n    for (int i = 0; i < 1000; i++) {\n        LongStringList.Add(Path.GetRandomFileName());\n    }\n}", "CodeBleu_score": 62.09516480925772}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t    var view = new SampleDialog();\n    view.DataContext = new SampleDialogViewModel();\n    var result = await DialogHost.Show(view, \"RootDialog\", (s, e) => {\n        if (e.Parameter is string param && param == \"Foo\") {\n            // Close the dialog with the specified CommandParameter\n            DialogHost.Close(\"RootDialog\", \"Foo\");\n        }\n    }, (s, e) => {\n        Debug.WriteLine($\"Dialog closed, CommandParameter used to close dialog: {e.Parameter ?? \"<null>\"}\");\n    });\n}", "CodeBleu_score": 28.935521109837982}, {"code": "private async Task RunDialog() {\n\t    var view = new SampleDialog();\n    view.DataContext = new SampleDialogViewModel();\n\n    var result = await DialogHost.Show(view, \"RootDialog\", (sender, args) =>\n    {\n        Debug.WriteLine($\"Closing dialog. CommandParameter: {args.Parameter?.ToString() ?? \"null\"}\");\n    }, (sender, args) =>\n    {\n        Debug.WriteLine($\"Closed dialog. CommandParameter: {args.Parameter?.ToString() ?? \"null\"}\");\n    });\n\n    Debug.WriteLine($\"Result: {result}\");\n}", "CodeBleu_score": 25.20748866312391}, {"code": "private async Task RunDialog() {\n\t    var dialog = new SampleDialog();\n    dialog.DataContext = new SampleDialogViewModel();\n\n    var result = await DialogHost.Show(dialog, \"RootDialog\",\n        new DialogClosingEventHandler((s, e) => {\n            Debug.WriteLine(\"Closing event. CommandParameter: \" + (e.Parameter ?? \"<NULL>\"));\n        }),\n        new DialogClosedEventHandler((s, e) => {\n            Debug.WriteLine(\"Closed event. DialogResult: \" + e.DialogResult);\n        }));\n\n    Debug.WriteLine(\"Result: \" + result);\n}", "CodeBleu_score": 22.39666053590568}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    PaletteHelper paletteHelper = new PaletteHelper();\n    ITheme theme = paletteHelper.GetTheme();\n\n    modificationAction?.Invoke(theme);\n\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 68.8323481082376}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    PaletteHelper paletteHelper = new PaletteHelper();\n    ITheme theme = paletteHelper.GetTheme();\n\n    modificationAction?.Invoke(theme);\n\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 68.8323481082376}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    var paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n\n    modificationAction?.Invoke(theme);\n\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.80807886702394}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t    if (ContentType is null) {\n        return null;\n    }\n\n    object? content = Activator.CreateInstance(ContentType);\n\n    if (DataContext is not null && content is FrameworkElement element) {\n        element.DataContext = DataContext;\n    }\n\n    return content;\n}", "CodeBleu_score": 70.47330693132568}, {"code": "private object? CreateContent(){\n\t    object? content = Activator.CreateInstance(ContentType);\n    if (content is FrameworkElement element) {\n        element.DataContext = DataContext;\n    }\n    return content;\n}", "CodeBleu_score": 52.69084661534909}, {"code": "private object? CreateContent(){\n\t    if (ContentType == null) {\n        return null;\n    }\n\n    var content = Activator.CreateInstance(ContentType);\n\n    if (DataContext != null && content is FrameworkElement element) {\n        element.DataContext = DataContext;\n    }\n\n    return content;\n}", "CodeBleu_score": 80.08536653309126}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(_ => {\n            Sample4Content.IsSample4DialogOpen = false;\n        }, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 51.58175261678639}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(_ => {\n            IsSample4DialogOpen = false;\n        }, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 54.280400896657454}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(_ => {\n            IsSample4DialogOpen = false;\n        }, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 54.280400896657454}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Option == option && trigger.DeviceId == device.Id) {\n            trigger.Triggered?.Invoke(device);\n        }\n    }\n}", "CodeBleu_score": 56.14207942885845}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.option == option && trigger.deviceID == device.id) {\n            trigger.Triggered?.Invoke();\n        }\n    }\n}", "CodeBleu_score": 49.912489425584205}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Option == option && trigger.DeviceId == device.Id) {\n            trigger.Triggered?.Invoke();\n        }\n    }\n}", "CodeBleu_score": 54.11080097499726}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n\n    var actions = Settings.Get<List<Action>>(ACTIONS_KEY);\n\n    if (actions == null) return;\n\n    actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 46.11263889897355}, {"code": "private void LoadAndRegister(){\n\t    // Clear the trigger manager\n    _triggerManager.Clear();\n\n    // Retrieve the actions from settings using a specified key\n    var actions = Settings.Get<List<Action>>(\"Actions\");\n\n    // Register each trigger from the loaded actions with the trigger manager\n    actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 46.659477122725086}, {"code": "private void LoadAndRegister(){\n\t    // Clear the trigger manager.\n    _triggerManager.Clear();\n\n    // Retrieve the actions from settings using the specified key.\n    var actions = Settings.Get<List<Action>>(ActionsKey);\n\n    // Register each trigger from the loaded actions with the trigger manager.\n    actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 46.848154254928694}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t    var action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger) && a.Conditions.All(c => ConditionProcessor.IsMet(c)));\n    if (action != null) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 50.93885363108897}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t    TriggerAction action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger) && a.Conditions.All(c => ConditionProcessor.IsMet(c)));\n    if (action != null) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 46.55429121803246}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t    var action = a.Triggers.Contains(trigger) && action.Conditions.All(ConditionProcessor.IsMet) ? Actions.FirstOrDefault() : null;\n    if (action != null) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 43.00507635248826}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let mentioning_vars = self.scope_graph.borrow().get_vars_mentioning(name);\n    let poll_vars = mentioning_vars.iter().filter_map(|v| {\n        if let Some(poll_var) = self.eww_config.get_script_var(v.name.clone()) {\n            Some(poll_var)\n        } else {\n            None\n        }\n    });\n    for poll_var in poll_vars {\n        if let Some(poll_var) = poll_var {\n            if let Ok(should_run) = self.scope_graph.borrow().evaluate_simplexpr_in_scope(\n                self.scope_graph.root_index,\n                &poll_var.run_while_expr,\n            ) {\n                if should_run.as_bool() {\n                    self.script_var_handler.add(poll_var.name.clone());\n                } else {\n                    self.script_var_handler.stop_for_variable(poll_var.name.clone());\n                }\n            } else {\n                self.error_handling_ctx.print_error(format_args::Error::new());\n            }\n        }\n    }\n}", "CodeBleu_score": 33.589521757883304}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let mentioning_vars = self\n        .scope_graph\n        .borrow()\n        .get_vars_mentioning(name)\n        .iter()\n        .filter_map(|v| self.eww_config.get_script_var(v));\n\n    for v in mentioning_vars {\n        if let Some(poll_var) = v.as_poll_var() {\n            let run_while_expr_result = self\n                .scope_graph\n                .borrow()\n                .evaluate_simplexpr_in_scope(\n                    self.scope_graph.root_index,\n                    &poll_var.run_while_expr,\n                )\n                .map(|v| v.as_bool());\n\n            if let Ok(should_run) = run_while_expr_result {\n                if should_run {\n                    self.script_var_handler.add(v.clone());\n                } else {\n                    self.script_var_handler.stop_for_variable(v.name.clone());\n                }\n            } else {\n                error_handling_ctx::print_error(run_while_expr_result.unwrap_err());\n            }\n        }\n    }\n}", "CodeBleu_score": 36.374206466866035}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let mentioning_vars = self.scope_graph.borrow().get_vars_mentioning(name);\n    for v in mentioning_vars.iter() {\n        if let Some(poll_var) = self.eww_config.get_script_var(v.name.clone()) {\n            if let Some(run_while_expr) = self.eww_config.get_run_while_mentions_of(&v.name) {\n                if let Some(expr_result) = self.scope_graph.borrow().evaluate_simplexpr_in_scope(self.scope_graph.root_index, &run_while_expr) {\n                    if expr_result.as_bool() {\n                        self.script_var_handler.add(poll_var.clone());\n                    } else {\n                        self.script_var_handler.stop_for_variable(v.name.clone());\n                    }\n                } else {\n                    error_handling_ctx::print_error(format_args![\n                        \"Error evaluating run-while expression for variable '{name}': {err}\",\n                        name = v.name,\n                        err = \"Expression evaluation failed\"\n                    ]);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 39.949471986159104}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    let mut unused_vars = vec![];\n    let mut old_abort_send = None;\n\n    if self.open_windows.contains_key(instance_id) {\n        let window = self.open_windows.get(instance_id).unwrap();\n        if let Some(abort_send) = self.window_close_timer_abort_senders.get(instance_id) {\n            old_abort_send = Some(abort_send.clone());\n        }\n        window.close();\n        self.scope_graph.borrow_mut().remove_scope(instance_id);\n    }\n\n    self.script_var_handler.stop_for_variable(\"unused_var\".to_string(), &mut unused_vars);\n    for unused_var in unused_vars {\n        unused_var.clone();\n    }\n\n    if let Some(abort_send) = old_abort_send {\n        abort_send.send(());\n    }\n\n    self.instance_id_to_args.remove(instance_id);\n    self.window_close_timer_abort_senders.remove(instance_id);\n\n    Ok(())\n}", "CodeBleu_score": 60.56140184343786}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    self.window_close_timer_abort_senders.remove(instance_id).unwrap_or_else(|_| {\n        // No timer found for the instance ID, so do nothing\n    });\n\n    let window = self.open_windows.remove(instance_id).with_context(|| {\n        format_err(\"Failed to close window with instance ID: {}\", instance_id)\n    })?;\n\n    window.close();\n\n    self.scope_graph.borrow_mut().remove_scope(instance_id);\n\n    // Identify and stop any unused global variables\n    let unused_vars = self.script_var_handler.stop_for_variable(None);\n\n    // Remove the instance ID from the arguments map\n    self.instance_id_to_args.remove(instance_id);\n\n    Ok(())\n}", "CodeBleu_score": 53.8598950097734}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    // Remove and abort any existing close timer for the window\n    if let Some(abort_send) = self.window_close_timer_abort_senders.remove(instance_id) {\n        abort_send.send();\n    }\n\n    // Retrieve and close the window\n    if let Some(eww_window) = self.open_windows.remove(instance_id).with_context(|| {\n        format_err![\n            \"Failed to remove window with instance ID: {}\",\n            instance_id\n        ]\n    })? {\n        eww_window.close();\n    }\n\n    // Remove the associated scope from the scope graph\n    self.scope_graph.borrow_mut().remove_scope(instance_id);\n\n    // Identify and stop any unused global variables\n    self.script_var_handler.stop_for_variable(\n        self.scope_graph.borrow().currently_unused_globals.clone(),\n    );\n\n    // Remove the instance ID from the arguments map\n    self.instance_id_to_args.remove(instance_id);\n\n    Ok(())\n}", "CodeBleu_score": 59.348745746781084}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\"Reloading config\");\n    self.script_var_handler.stop_all();\n    let old_handler = self.script_var_handler.clone();\n    self.script_var_handler = ScriptVarHandler::new(\n        self.app_evt_send.clone(),\n        config.clone(),\n    );\n    self.script_var_handler.start();\n    old_handler.join_thread();\n    log::info(\"Loaded new config\");\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.scope_graph.borrow_mut().update_initial_state(&self.eww_config);\n    let window_ids = self\n        .open_windows\n        .keys()\n        .cloned()\n        .chain(self.failed_windows.iter().cloned())\n        .dedup()\n        .collect::<Vec<_>>();\n    for instance_id in window_ids {\n        let args = self.instance_id_to_args.get(instance_id).unwrap();\n        self.open_window(args.with_context(instance_id, &self.eww_config));\n    }\n    Ok(())\n}", "CodeBleu_score": 63.235054070469076}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\"Reloading config\");\n    self.script_var_handler.stop_all();\n    let old_handler = std::mem::replace(&mut self.script_var_handler, config::ScriptVarHandler::new());\n    old_handler.join_thread();\n\n    log::info(\"New config: {:?}\", config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.open_window_initial_state(\n        self.open_windows\n            .keys()\n            .cloned()\n            .chain(self.failed_windows.iter().cloned())\n            .dedup()\n            .collect::<Vec<_>>(),\n    )?;\n\n    Ok(())\n}", "CodeBleu_score": 57.638301799583466}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\"Reloading config\");\n    self.script_var_handler.stop_all();\n    let old_handler = std::mem::replace(&mut self.script_var_handler, ScriptVarHandler::new());\n\n    log::info(\"New config: {:?}\", config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.scope_graph.borrow_mut().add_initial_state(self.eww_config.generate_initial_state());\n\n    let all_window_ids: Vec<_> = self\n        .open_windows\n        .keys()\n        .cloned()\n        .chain(self.failed_windows.iter().cloned())\n        .dedup()\n        .collect();\n\n    for instance_id in all_window_ids {\n        let args = self\n            .instance_id_to_args\n            .get(instance_id)\n            .with_context(|| format_args(\"Failed to get args for instance_id: {instance_id}\"))?;\n\n        self.open_window(instance_id, args.clone())?;\n    }\n\n    old_handler.join_thread().unwrap();\n\n    Ok(())\n}", "CodeBleu_score": 67.02579727992642}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    self.css_provider.load_from_data(css.as_bytes())?;\n    Ok(())\n}", "CodeBleu_score": 13.939564798874237}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    self.css_provider.load_from_data(css.as_bytes()).map_err(|err| {\n        let captures = PATTERN.captures(err.message())?;\n        let line = captures.get(1).unwrap().as_str().parse::<usize>().ok()?;\n        let msg = captures.get(3).unwrap().as_str();\n        let db = error_handling_ctx::FILE_DATABASE.read().ok()?;\n        let line_range = db.line_range(file_id, line - 1).ok()?;\n        let span = Span(line_range.start, line_range.end - 1, file_id);\n        Some(DiagError(gen_diagnostic(msg, span)))\n    })?;\n    Ok(())\n}", "CodeBleu_score": 44.76719957470067}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::default().expect(\"Failed to get default display\");\n    let monitor = match identifier {\n        Some(identifier) => match get_monitor_from_display(&display, &identifier) {\n            Some(monitor) => monitor,\n            None => {\n                let mut body = String::new();\n                body.push_str(\"No monitor found for identifier: \");\n                body.push_str(&identifier.to_string());\n                body.push_str(\"\nAvailable monitors:\n\");\n                for m in 0..display.n_monitors() {\n                    if let Some(model) = display.monitor(m).and_then(|x| x.model()) {\n                        body.push_str(&format_args(\"{}\\t[{}] {}\n\", m, model).to_string());\n                    }\n                }\n                return Err(Error::MonitorNotFound(body));\n            }\n        },\n        None => display.primary_monitor().context(\"Failed to get primary monitor\")?,\n    };\n    Ok(Monitor {\n        width: monitor.width(),\n        height: monitor.height(),\n    })\n}", "CodeBleu_score": 43.181825137605124}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::default().expect(\"failed to get default display\");\n    let monitor = match identifier {\n        Some(identifier) => {\n            get_monitor_from_display(&display, &identifier)\n                .ok_or_else(|| format_err(&display, &identifier))\n        }\n        None => Ok(display.primary_monitor()),\n    }?;\n    Ok(Monitor {\n        monitor,\n        context: monitor.with_context(),\n    })\n}", "CodeBleu_score": 21.678484264996772}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::default().expect(\"Unable to get default display\");\n    let monitor = match identifier {\n        Some(ident) => {\n            get_monitor_from_display(&display, &ident)\n                .ok_or_else(|| format_err(&display, &ident))\n        }\n        None => display.primary_monitor().ok_or(\"No primary monitor found\"),\n    }?;\n    Ok(monitor)\n}", "CodeBleu_score": 22.477079872499058}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let x = screen_rect.x + geometry.offset.relative_to.x + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\n    let y = screen_rect.y + geometry.offset.relative_to.y + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\n    let width = geometry.size.relative_to.width * screen_rect.width;\n    let height = geometry.size.relative_to.height * screen_rect.height;\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 59.95705932447058}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let x = screen_rect.x + geometry.offset.relative_to.x.alignment_to_coordinate(screen_rect.width) + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\n    let y = screen_rect.y + geometry.offset.relative_to.y.alignment_to_coordinate(screen_rect.height) + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\n    let width = geometry.size.relative_to.x.alignment_to_coordinate(screen_rect.width);\n    let height = geometry.size.relative_to.y.alignment_to_coordinate(screen_rect.height);\n\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 58.209360845921275}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let x = screen_rect.x + geometry.offset.relative_to(screen_rect.width) + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\n    let y = screen_rect.y + geometry.offset.relative_to(screen_rect.height) + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\n    let width = geometry.size.relative_to(screen_rect.width);\n    let height = geometry.size.relative_to(screen_rect.height);\n\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 61.2992586944797}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    let window = match window_init.backend {\n        Backend::X11 => Window::new(WindowType::Toplevel, Some(x), Some(y), None, None, None),\n        Backend::Wayland => Window::new(WindowType::TopLevel, Some(x), Some(y), None, None, None),\n    };\n\n    window.set_resizable(window_init.resizable);\n\n    if window_init.foreground {\n        window.set_keep_above(true);\n    } else {\n        window.set_keep_below(true);\n    }\n\n    if window_init.sticky {\n        window.stick();\n    }\n\n    Some(window)\n}", "CodeBleu_score": 51.47301993826071}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    let window_type = match window_init.backend_options.window_type {\n        WindowType::Normal => WindowType::Normal,\n        WindowType::Desktop => WindowType::Desktop,\n        WindowType::Dock => WindowType::Dock,\n        WindowType::Toolbar => WindowType::Toolbar,\n        WindowType::Menu => WindowType::Menu,\n        WindowType::Utility => WindowType::Utility,\n        WindowType::Splash => WindowType::Splash,\n        WindowType::Dialog => WindowType::Dialog,\n        WindowType::DropdownMenu => WindowType::DropdownMenu,\n        WindowType::PopupMenu => WindowType::PopupMenu,\n        WindowType::Tooltip => WindowType::Tooltip,\n        WindowType::Notification => WindowType::Notification,\n        WindowType::Combo => WindowType::Combo,\n        WindowType::Dnd => WindowType::Dnd,\n    };\n\n    let window = Window::new(window_type);\n    window.set_resizable(window_init.backend_options.resizable);\n\n    match window_init.backend_options.stacking_position {\n        StackingPosition::Foreground => window.set_keep_above(true),\n        StackingPosition::Background => window.set_keep_below(true),\n    }\n\n    match window_init.backend_options.stickiness {\n        Stickiness::Sticky => window.stick(),\n        Stickiness::NotSticky => window.unstick(),\n    }\n\n    Some(window)\n}", "CodeBleu_score": 48.18730639970449}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    let window = match window_init.backend {\n        Backend::Wayland => Window::new(WindowType::Toplevel, Some(x), Some(y), 0, 0, WindowTypeHints::default()),\n        Backend::X11 => {\n            let window = Window::new(WindowType::Toplevel, Some(x), Some(y), 0, 0, WindowTypeHints::default());\n            window.set_resizable(false);\n            window\n        }\n    };\n\n    window.set_keep_above(window_init.foreground);\n    window.set_keep_below(!window_init.foreground);\n    window.stick();\n\n    Some(window)\n}", "CodeBleu_score": 44.705239119581776}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t    let diagnostic = anyhow_err_to_diagnostic(&err);\n    if let Some(diagnostic) = diagnostic {\n        if let Ok(diagnostic) = stringify_diagnostic(diagnostic) {\n            eprintlnln(\"{}\", diagnostic);\n        } else {\n            eprintlnln(\"{}\", err);\n        }\n    } else {\n        eprintlnln(\"{}\", err);\n    }\n}", "CodeBleu_score": 31.363103117073244}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    let diagnostic = anyhow_err_to_diagnostic(&err).unwrap_or_else(|| {\n        anyhow::bail_with(anyhow::anyhow(format_args(\"Error: {:?}\", err)))\n    });\n    if let Err(err) = stringify_diagnostic(diagnostic) {\n        anyhow::bail_with(anyhow::anyhow(format_args(\"Error: {:?}\", err)))\n    } else {\n        eprintlnln(\"{}\", diagnostic);\n    }\n}", "CodeBleu_score": 28.164702681130382}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    if let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n        if let Ok(diagnostic) = stringify_diagnostic(diagnostic) {\n            eprintlnln(\"{}\", diagnostic);\n        } else {\n            eprintlnln(\"{}\", err);\n        }\n    } else {\n        eprintlnln(\"{}\", err);\n    }\n}", "CodeBleu_score": 33.06979335197079}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = UnixListener::bind(socket_path.as_ref()).await?;\n    log::info(\"Listening on {:?}\", socket_path.as_ref());\n    loop {\n        let (socket, _) = listener.accept().await?;\n        let socket = socket;\n        tokio::spawn(async move {\n            if let Err(e) = handle_connection(evt_send.clone(), socket).await {\n                log::error(\"Error handling connection: {:?}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 31.263388524406032}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = tokio::net::UnixListener::bind(socket_path.as_ref()).await?;\n    log::info(\"IPC server listening on {}\", socket_path.as_ref().display());\n    loop {\n        let (socket, _) = listener.accept().await?;\n        let evt_send = evt_send.clone();\n        tokio::spawn(async move {\n            if let Err(e) = handle_connection(evt_send, socket).await {\n                log::error(\"Error handling IPC connection: {:?}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 37.555805453543925}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = UnixListener::bind(socket_path.as_ref()).await?;\n    log::info(\"Listening on {}\", socket_path.as_ref().display());\n\n    loop {\n        let (stream, addr) = listener.accept().await?;\n        log::info(\"Accepted connection from {}\", addr);\n\n        tokio::spawn(async move {\n            let mut evt_send = evt_send.clone();\n            if let Err(e) = handle_connection(stream, evt_send).await {\n                log::error(\"Error handling connection: {}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 39.6757084490915}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut stream_read, mut stream_write) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    log::info(\"Received command: {:?}\", action);\n\n    let daemon_command = action.into_daemon_command();\n    evt_send.send(daemon_command).await?;\n\n    if let Some(response_recv) = &daemon_command.response_recv {\n        let response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv().await).await?;\n        let response_bytes = bincode::serialize(&response).context(\"Failed to serialize response\")?;\n        stream_write.write_all(&response_bytes).await.context(\"Failed to write response to stream\")?;\n    }\n\n    stream_write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 50.59609017254193}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (stream_read, stream_write) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    info_log_action(&action);\n\n    let command = action.into_daemon_command();\n    evt_send.send(command).await.context(\"Failed to send command to daemon\")?;\n\n    if let Some(response_recv) = command.response_recv() {\n        match tokio::time::timeout(Duration::from_millis(100), response_recv).await {\n            Ok(response) => {\n                let raw_response = bincode::serialize(&response).context(\"Failed to serialize response\")?;\n                let mut message_byte_length = [0u8; 4];\n                message_byte_length[0] = (raw_response.len() >> 24) as u8;\n                message_byte_length[1] = (raw_response.len() >> 16) as u8;\n                message_byte_length[2] = (raw_response.len() >> 8) as u8;\n                message_byte_length[3] = raw_response.len() as u8;\n                stream_write.write_all(&message_byte_length).await.context(\"Failed to write message size header in IPC message\")?;\n                stream_write.write_all(&raw_response).await.context(\"Failed to write actual IPC message\")?;\n            }\n            Err(_) => {\n                warn_log_action_timeout(&action);\n            }\n        }\n    }\n\n    stream_write.shutdown().await.context(\"Failed to shutdown write stream\")?;\n    Ok(())\n}", "CodeBleu_score": 54.167716434673586}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (stream_read, stream_write) = stream.split();\n\n    let action = read_action_from_stream(&mut stream_read).await?;\n    let action_with_server = action.into_daemon_command();\n    evt_send.send(action_with_server).await.context(\"Failed to send action to event loop\")?;\n\n    if action_with_server.expects_response() {\n        let response_recv = tokio::time::timeout(Duration::from_millis(100), evt_send.recv()).await.context(\"Failed to receive response from event loop\")?;\n        let response = response_recv.unwrap();\n        let response_bytes = bincode::serialize(&response).context(\"Failed to serialize response\")?;\n        let response_byte_length = response_bytes.len().to_be_bytes();\n        stream_write.write_all(&response_byte_length).await.context(\"Failed to write response size header\")?;\n        stream_write.write_all(&response_bytes).await.context(\"Failed to write response\")?;\n    }\n\n    stream_write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 45.788345468321694}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_byte_length = [0u8; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(\"Failed to read message size header\")?;\n    let message_byte_length = u32::from_be_bytes(message_byte_length);\n    let mut raw_message = Vec::<u8>::with_capacity(message_byte_length as usize);\n    loop {\n        let mut buffer = [0u8; 1024];\n        stream_read.read_buf(&mut buffer).await.context(\"Failed to read message\")?;\n        raw_message.extend(buffer.iter().take(buffer.len() - 1));\n        if raw_message.len() == message_byte_length as usize {\n            break;\n        }\n    }\n    bincode::deserialize(&raw_message).context(\"Failed to deserialize message\")\n}", "CodeBleu_score": 75.9665800594559}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_byte_length = [0u8; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(\"Failed to read message size header\")?;\n    let message_byte_length = u32::from_be_bytes(message_byte_length);\n    let mut raw_message = Vec::<u8>::with_capacity(message_byte_length as usize);\n    let mut received_bytes = 0;\n    while received_bytes < message_byte_length as usize {\n        let mut buffer = [0u8; 4096];\n        let read_bytes = stream_read.read_buf(&mut buffer).await.context(\"Failed to read message\")?;\n        raw_message.extend_from_slice(&buffer[..read_bytes]);\n        received_bytes += read_bytes;\n    }\n    bincode::deserialize(&raw_message).context(\"Failed to deserialize message\")\n}", "CodeBleu_score": 74.33065651345123}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_byte_length = [0u8; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(\"Failed to read message size header\")?;\n    let message_byte_length = u32::from_be_bytes(message_byte_length);\n    let mut raw_message = Vec::<u8>::with_capacity(message_byte_length as usize);\n    loop {\n        let mut buffer = [0u8; 1024];\n        let bytes_read = stream_read.read_buf(&mut buffer).await.context(\"Failed to read message\")?;\n        raw_message.extend_from_slice(&buffer[0..bytes_read]);\n        if raw_message.len() == message_byte_length as usize {\n            break;\n        }\n    }\n    bincode::deserialize(&raw_message).context(\"Failed to deserialize message\")\n}", "CodeBleu_score": 65.57670442910107}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let mut proxy = zbus::fdo::DBusProxy::new(con, service).await?;\n    if proxy.get_owner().is_none() {\n        return Ok(());\n    }\n\n    let mut owner_changes = proxy.track_signal::<zbus::fdo::SignalEvent<zbus::fdo::DBusProxy, zbus::fdo::NameOwnerChanged>>().await?;\n\n    while let Some(args) = owner_changes.next().await {\n        if args.new_owner().is_none() {\n            return Ok(());\n        }\n    }\n\n    Ok(())\n}", "CodeBleu_score": 64.59654454042098}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let proxy = zbus::fdo::DBusProxy::new(con, service).await?;\n    let mut owner_changes = proxy.signal_owner_changed().await?;\n    if let Ok(Some(owner)) = proxy.get_name_owner().await {\n        loop {\n            let sig = owner_changes.next().await?;\n            if sig.args.new_owner().is_none() {\n                break;\n            }\n        }\n    }\n    Ok(())\n}", "CodeBleu_score": 52.8995520128367}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let proxy = zbus::fdo::DBusProxy::new(con).await?;\n    let mut owner_changes = proxy.track_name_owner_changes(service).await?;\n    let mut owner = owner_changes.next().await?;\n    if owner.is_none() {\n        return Ok(());\n    }\n    loop {\n        let args = owner_changes.next().await?;\n        if args.new_owner().is_none() {\n            return Ok(());\n        }\n        owner = args.new_owner();\n    }\n}", "CodeBleu_score": 60.69205012961183}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow::Error::msg(format(\"Unsupported format: {}\", format)))\n    }\n}", "CodeBleu_score": 70.04120932677034}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow(format(\"Unsupported format: {}\", format))),\n    }\n}", "CodeBleu_score": 69.97845686458074}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    let format = format.to_lowercase();\n    match format.as_str() {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow(format::<&str>(\"Unsupported format: {}\", format))),\n    }\n}", "CodeBleu_score": 68.66787216727026}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension();\n    if let Some(ext) = ext {\n        if ext != expected_ext {\n            return Err(anyhow::anyhow![\n                \"Expected file extension \\\"{}\\\", found \\\"{}\\\"\",\n                expected_ext,\n                ext.to_str().unwrap()\n            ]);\n        }\n    } else {\n        return Err(anyhow::anyhow![\n            \"Expected file extension \\\"{}\\\", found none\",\n            expected_ext\n        ]);\n    }\n    Ok(())\n}", "CodeBleu_score": 40.747248971072224}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension().unwrap_or_else(|| panic::panic_any(anyhow::anyhow::anyhow));\n    let ext_str = ext.to_str().unwrap_or_else(|| panic::panic_any(anyhow::anyhow));\n    if ext_str != expected_ext {\n        return Err(anyhow::anyhow::anyhow(format_args(\n            \"Expected extension \\\"{}\\\", found \\\"{}\\\"\",\n            expected_ext,\n            ext_str,\n        )));\n    }\n    Ok(())\n}", "CodeBleu_score": 34.35991386134874}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension().and_then(|s| s.to_str());\n    if ext != Some(expected_ext) {\n        return Err(anyhow::anyhow(\n            \"Expected file extension \\\"{}\\\", found \\\"{:?}\\\"\",\n            expected_ext,\n            ext\n        ));\n    }\n    Ok(())\n}", "CodeBleu_score": 31.02140154066793}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  dp.emit();\n  thread_ = [this, id] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n}", "CodeBleu_score": 62.70023258192876}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t    label_.set_name(\"cpuusage\");\n    label_.set_id(id);\n    if (config[\"format\"]) {\n        label_.set_format(config[\"format\"].asString());\n    }\n    if (config[\"interval\"]) {\n        label_.set_interval(config[\"interval\"].asInt());\n    }\n\n    thread_ = [this] {\n        dp.emit();\n        thread_.sleep_for(interval_);\n    };\n}", "CodeBleu_score": 65.52334544885308}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  thread_ = [this, id] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n}", "CodeBleu_score": 53.85701634031902}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t    Tags *tags = static_cast<Tags *>(data);\n\n    if (std::strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(\n            wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface,\n                             std::min<uint32_t>(version, 1)));\n    } else if (std::strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(\n            wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    }\n}", "CodeBleu_score": 72.32662472923846}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t    Tags *tags = static_cast<Tags *>(data);\n\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(\n            wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface,\n                             std::min<uint32_t>(version, 1)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(\n            wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    }\n}", "CodeBleu_score": 67.10276595919272}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t  Tags *tags = static_cast<Tags *>(data);\n\n  if (std::strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n    tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(\n        wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface,\n                         std::min<uint32_t>(version, 1)));\n  } else if (std::strcmp(interface, wl_seat_interface.name) == 0) {\n    tags->seat_ = static_cast<struct wl_seat *>(\n        wl_registry_bind(registry, name, &wl_seat_interface, 1));\n  }\n}", "CodeBleu_score": 72.80275058439443}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t    std::string requestType = ev.substr(0, ev.find_first_of('>'));\n    std::unique_lock<std::mutex> lock(callbackMutex);\n    for (const auto& [name, handler] : callbacks) {\n        if (requestType == name) {\n            handler->onEvent(ev);\n        }\n    }\n}", "CodeBleu_score": 72.39938874966715}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t    std::string requestType = ev.substr(0, ev.find_first_of('>'));\n    std::lock_guard<std::mutex> lock(callbackMutex);\n    for (const auto& [eventName, handler] : callbacks) {\n        if (eventName == requestType) {\n            handler->onEvent(ev);\n        }\n    }\n}", "CodeBleu_score": 71.91186870118378}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t    std::string requestType = ev.substr(0, ev.find_first_of('>'));\n    std::unique_lock<std::mutex> lock(callbackMutex);\n    for (auto& handler : callbacks) {\n        if (handler->eventName == requestType) {\n            handler->onEvent(ev);\n        }\n    }\n}", "CodeBleu_score": 63.21453077148955}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t    if (ev_handler == nullptr) {\n        return;\n    }\n\n    std::unique_lock<std::mutex> lock(callback_mutex_);\n    for (auto it = callbacks_.begin(); it != callbacks_.end();) {\n        if (it->second == ev_handler) {\n            it = callbacks_.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 71.81367069074224}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t  if (ev_handler == nullptr) {\n    return;\n  }\n  std::unique_lock<std::mutex> lock(callbacks_mutex_);\n  for (auto it = callbacks_.begin(); it != callbacks_.end();) {\n    if (it->second == ev_handler) {\n      it = callbacks_.erase(it);\n    } else {\n      ++it;\n    }\n  }\n}", "CodeBleu_score": 72.45037823289431}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t    if (ev_handler == nullptr) {\n        return;\n    }\n\n    std::unique_lock<std::mutex> lock(callbacks_mutex_);\n    for (auto it = callbacks_.begin(); it != callbacks_.end();) {\n        if (it->second == ev_handler) {\n            it = callbacks_.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 71.75038254764469}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config.isMember(\"always-on\")) {\n    if (!config[\"always-on\"].isBool()) {\n      throw std::runtime_error(\"Submap::parseConfig: 'always-on' must be a boolean.\");\n    }\n    always_on_ = config[\"always-on\"].asBool();\n  }\n\n  if (config.isMember(\"default-submap\")) {\n    if (!config[\"default-submap\"].isString()) {\n      throw std::runtime_error(\"Submap::parseConfig: 'default-submap' must be a string.\");\n    }\n    default_submap_ = config[\"default-submap\"].asString();\n  }\n}", "CodeBleu_score": 40.240677516464146}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  // Check if the \"always-on\" key is a boolean and set the always_on_ member accordingly\n  if (config.isMember(\"always-on\") && config[\"always-on\"].isBool()) {\n    always_on_ = config[\"always-on\"].asBool();\n  }\n\n  // Check if the \"default-submap\" key is a string and set the default_submap_ member with its value\n  if (config.isMember(\"default-submap\") && config[\"default-submap\"].isString()) {\n    default_submap_ = config[\"default-submap\"].asString();\n  }\n}", "CodeBleu_score": 42.23601483821148}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config.isMember(\"always-on\")) {\n    if (config[\"always-on\"].isBool()) {\n      always_on_ = config[\"always-on\"].asBool();\n    }\n  }\n\n  if (config.isMember(\"default-submap\")) {\n    if (config[\"default-submap\"].isString()) {\n      default_submap_ = config[\"default-submap\"].asString();\n    }\n  }\n}", "CodeBleu_score": 40.57347170915098}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t    if (std::holds_alternative<Repr>(window_type)) {\n        return std::get<Repr>(window_type);\n    } else if (std::holds_alternative<ClassAndTitle>(window_type)) {\n        auto [window_class, window_title] = std::get<ClassAndTitle>(window_type);\n        return workspace_manager.getRewrite(window_class, window_title);\n    } else {\n        spdlog::error(\"WindowCreationPayload::repr: Unreachable code path\");\n        throw std::runtime_error(\"WindowCreationPayload::repr: Unreachable code path\");\n    }\n}", "CodeBleu_score": 73.87258329707345}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t    if (std::holds_alternative<Repr>(window_creation_payload)) {\n        return std::get<Repr>(window_creation_payload);\n    } else if (std::holds_alternative<ClassAndTitle>(window_creation_payload)) {\n        auto [window_class, window_title] = std::get<ClassAndTitle>(window_creation_payload);\n        return workspace_manager.getRewrite(window_class, window_title);\n    } else {\n        spdlog::error(\"Unreachable code path\");\n        throw std::runtime_error(\"Unreachable code path\");\n    }\n}", "CodeBleu_score": 73.11280447596633}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t    if (std::holds_alternative<Repr>(payload)) {\n        return std::get<Repr>(payload);\n    }\n    if (std::holds_alternative<ClassAndTitle>(payload)) {\n        auto [window_class, window_title] = std::get<ClassAndTitle>(payload);\n        return workspace_manager.getRewrite(window_class, window_title);\n    }\n    spdlog::error(\"Unreachable code path\");\n    throw std::runtime_error(\"Unreachable code path\");\n}", "CodeBleu_score": 77.73344283736519}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t  for (auto &workspace : m_workspacesToCreate) {\n    createWorkspace(workspace.first, workspace.second);\n  }\n  m_workspacesToCreate.clear();\n\n  if (!m_workspacesToCreate.empty()) {\n    updateWindowCount();\n    sortWorkspaces();\n  }\n}", "CodeBleu_score": 59.84466477772345}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t  for (auto const &workspace : m_workspacesToCreate) {\n    createWorkspace(workspace.first, workspace.second);\n  }\n  if (!m_workspacesToCreate.empty()) {\n    updateWindowCount();\n    sortWorkspaces();\n  }\n  m_workspacesToCreate.clear();\n}", "CodeBleu_score": 64.66552003869151}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t  for (auto &workspace : m_workspacesToCreate) {\n    createWorkspace(workspace.first, workspace.second);\n  }\n  m_workspacesToCreate.clear();\n  if (!m_workspacesToCreate.empty()) {\n    updateWindowCount();\n    sortWorkspaces();\n  }\n}", "CodeBleu_score": 59.84466477772345}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (mpris == nullptr) {\n    return;\n  }\n  spdlog::debug(\"player name {} vanished\", player_name->name);\n  if (g_strcmp0(player_name->name, mpris->player_name_.c_str()) == 0) {\n    mpris->player_ = nullptr;\n    mpris->event_box_.set_visible(false);\n    mpris->dp.emit();\n  }\n}", "CodeBleu_score": 75.88392071308145}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto mpris = static_cast<Mpris*>(data);\n  if (mpris == nullptr) {\n    return;\n  }\n\n  spdlog::debug(\"player name vanished: {}\", player_name->name);\n\n  if (player_name->name == mpris->player_) {\n    mpris->player_ = nullptr;\n    mpris->event_box_.set_visible(false);\n    mpris->dp.emit();\n  }\n}", "CodeBleu_score": 75.64908556583858}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto mpris = static_cast<Mpris*>(data);\n  if (mpris == nullptr) {\n    spdlog::error(\"mpris instance is null\");\n    return;\n  }\n  spdlog::debug(\"player name vanished: {}\", player_name->name);\n  if (player_name->name == mpris->player_) {\n    mpris->player_ = nullptr;\n    mpris->event_box_.set_visible(false);\n    mpris->dp.emit();\n  }\n}", "CodeBleu_score": 73.73142953343883}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t  auto mpris = static_cast<Mpris*>(data);\n  if (mpris == nullptr) {\n    return;\n  }\n  spdlog::debug(\"player pause\");\n  mpris->dp.emit();\n}", "CodeBleu_score": 70.54021773617255}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t    auto mpris = static_cast<Mpris*>(data);\n    if (mpris == nullptr) {\n        spdlog::error(\"Mpris::onPlayerPause: mpris is nullptr\");\n        return;\n    }\n    spdlog::debug(\"Mpris::onPlayerPause\");\n    mpris->dp.emit();\n}", "CodeBleu_score": 63.251944692991266}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t    auto mpris = static_cast<Mpris*>(data);\n    if (mpris == nullptr) {\n        spdlog::error(\"mpris is null\");\n        return;\n    }\n    spdlog::debug(\"player pause\");\n    mpris->dp.emit();\n}", "CodeBleu_score": 65.58856296702086}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  if (auto payload = res.getPayload(); payload.isObject()) {\n    if (auto success = payload[\"success\"]; success.isBool() && !success.asBool()) {\n      if (auto err = payload[\"error\"]; err.isString()) {\n        throw std::runtime_error(err.asString());\n      }\n    }\n    auto config = parseConfig(payload);\n    onConfigUpdate(config);\n  }\n}", "CodeBleu_score": 68.23679909464025}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  auto payload = res.getPayload();\n  if (auto success = payload[\"success\"]; !success.isBool() || !success.asBool()) {\n    auto err = payload[\"error\"];\n    if (err.isString()) {\n      throw std::runtime_error(err.asString());\n    } else {\n      throw std::runtime_error(\"unknown error\");\n    }\n  }\n  auto config = parseConfig(payload);\n  onConfigUpdate(config);\n}", "CodeBleu_score": 70.81064079002515}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  Json::Value payload;\n  if (!parser_.parse(res.payload, &payload)) {\n    throw std::runtime_error(\"Unable to parse ipc response\");\n  }\n  if (auto success = payload[\"success\"]; !success.isBool() || !success.asBool()) {\n    if (auto err = payload[\"error\"]; err.isString()) {\n      throw std::runtime_error(err.asString());\n    }\n    throw std::runtime_error(\"Unable to get config\");\n  }\n  auto config = parseConfig(payload);\n  onConfigUpdate(config);\n}", "CodeBleu_score": 64.73728880445347}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t    assert(this != nullptr);\n    if (!name.empty()) {\n        hooks_.doAction(this, name.c_str());\n    }\n}", "CodeBleu_score": 63.815149975889575}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t    assert(instance);\n    if (!name.empty()) {\n        hooks_.doAction(instance, name.c_str());\n    }\n}", "CodeBleu_score": 66.2007209524045}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t    assert(cffi_ != nullptr);\n    if (!name.empty()) {\n        hooks_.doAction(cffi_, name.c_str());\n    }\n}", "CodeBleu_score": 82.5227160422942}]}
