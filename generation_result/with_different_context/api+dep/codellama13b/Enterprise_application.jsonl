{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\tattachments = self.env['ir.attachment'].browse(self._get_attachment_ids(**args))\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    return request.make_response(\n        self._build_zip_from_attachments(attachments),\n        headers=self._get_zip_headers(\n            filename=_('%s.zip') % _('Documents'),\n            content=b''.join(\n                (\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',\n                    b'',", "CodeBleu_score": 15.662158734343452}, {"code": "def export_zip_documents(self, **args)\n\t# Retrieve attachment IDs from HTTP request arguments.\n    attachment_ids = self.get_ids(**args)\n\n    # Verify read access rights and rules for the attachments.\n    self.check_access_rights('read')\n    self.check_access_rule(attachment_ids)\n\n    # Build a zip file from the attachments' content.\n    zip_content = self._build_zip_from_attachments(attachment_ids)\n\n    # Prepare HTTP headers for the zip file.\n    filename = 'attachments.zip'\n    headers = self._get_zip_headers(zip_content, filename)\n\n    # Return the zip file as an HTTP response.\n    return self.make_response(zip_content, headers=headers)\n\n\n\n", "CodeBleu_score": 29.539701903254052}, {"code": "def export_zip_documents(self, **args)\n\t# retrieve attachment IDs from HTTP request arguments\n    attachment_ids = self._get_attachment_ids(**args)\n    # verify read access rights and rules for the attachments\n    attachments = self.env['ir.attachment'].sudo().browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    # build a zip file from the attachments' content\n    zip_content = self._build_zip_from_attachments(attachments)\n    # prepare HTTP headers for the zip file\n    zip_headers = self._get_zip_headers(zip_content, self._get_zip_filename(attachments))\n    # return the zip file as an HTTP response\n    return request.make_response(zip_content, headers=zip_headers)\n\n", "CodeBleu_score": 36.192863551937904}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(AccountDashboard, self)._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 80.73230344444951}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    # update the session history with the latest invoice IDs\n    session['history_invoice'] = [invoice.id for invoice in values['invoices'](0)]\n    return request.render(\"portal_my_invoices.portal_my_invoices\", values)", "CodeBleu_score": 34.7772910900673}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t# retrieve the values for the portal_my_invoices page\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n\n    # update the session history with the latest invoice IDs\n    self._update_session_history(values['invoices'])\n\n    # render the portal_my_invoices page with the prepared values\n    return request.render(\"portal_my_invoices.portal_my_invoices\", values)", "CodeBleu_score": 29.413876947769126}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t# check access rights\n    if not request.env.user._is_public():\n        return request.render(\"portal.portal_no_access\", {})\n\n    # retrieve the invoices\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, domain=kw.get('domain'))\n\n    # update the session history with the latest invoice IDs\n    session = request.session\n    session['history_invoice'] = [invoice.id for invoice in values['invoices'](0)]\n    session.save()\n\n    # render the invoices page with the prepared values\n    return request.render(\"portal_my_invoices.portal_my_invoices_page\", values)\n\n", "CodeBleu_score": 49.309385463108846}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.invoice'].browse(int(invoice_id))\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n\n    if not request.env['res.users'].has_group('account.group_account_invoice'):\n        raise werkzeug.exceptions.NotFound()\n\n    if not invoice.check_access_rights('read', raise_exception=True):\n        raise werkzeug.exceptions.NotFound()\n\n    if download and invoice.state == 'posted':\n        # retrieve legal documents\n        legal_documents = invoice.sudo()._get_invoice_legal_documents()\n        if not legal_documents:\n            raise werkzeug.exceptions.NotFound()\n\n        # create zip file if there are multiple attachments\n        if len(legal_documents) > 1:\n            zip_file = invoice.sudo()._build_zip_from_attachments(legal_documents)\n            return request.make_response(\n                zip_file.read(),\n                headers=invoice.sudo()._get_zip_headers(),\n                cookies=request.session.cookies,\n            )\n\n        # otherwise, return the attachment\n        return request.make_response(\n            legal_documents[0][1].read(),\n            headers=invoice.sudo()._get_attachment_headers(legal_documents[0][0]),\n            cookies=request.session.cookies,\n        )\n\n    # prepare and show report\n    if report_type:\n        report_type = report_type.lower()\n        if report_type not in ['html', 'pdf', 'text']:\n            raise werkzeug.exceptions.NotFound()\n\n        if report_type == 'html':\n            report = request.env['ir.actions.report']._get_report_from_name(\n                'account.report_invoice',\n                request.render_context,\n                request.context,\n                report_type=report_type,\n                attachments=False,\n            )\n            return request.make_response(\n                report.get_html(),\n                headers=report.get_headers(),", "CodeBleu_score": 40.05647742687412}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = self.env['account.move'].browse(invoice_id)\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n\n    if invoice.state == 'draft':\n        raise werkzeug.exceptions.NotFound()\n\n    if not self._document_check_access('read', invoice, invoice.partner_id):\n        raise werkzeug.exceptions.Forbidden()\n\n    if download:\n        if report_type == 'pdf':\n            return self._invoice_get_pdf_report(invoice, access_token, **kw)\n        elif report_type == 'html':\n            return self._invoice_get_html_report(invoice, access_token, **kw)\n        elif report_type == 'text':\n            return self._invoice_get_text_report(invoice, access_token, **kw)\n        else:\n            raise werkzeug.exceptions.NotFound()\n\n    return request.render(\"account.portal_my_invoice_detail\", self._invoice_get_page_view_values(invoice, access_token, **kw))", "CodeBleu_score": 26.42411280865526}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice_sudo = self.env['account.invoice'].browse(invoice_id).sudo()\n    if not invoice_sudo.exists():\n        raise werkzeug.exceptions.NotFound()\n    if invoice_sudo.type == 'out_invoice' and invoice_sudo.state == 'draft':\n        raise werkzeug.exceptions.NotFound()\n    if not self._document_check_access(invoice_sudo, access_token):\n        return request.redirect('/my')\n\n    if download and invoice_sudo.state == 'posted':\n        legal_documents = invoice_sudo._get_invoice_legal_documents()\n        if len(legal_documents) == 1:\n            return request.make_response(\n                legal_documents[0].datas,\n                headers=self._get_http_headers(legal_documents[0].datas, legal_documents[0].name),\n            )\n        else:\n            return request.make_response(\n                self._build_zip_from_attachments(legal_documents),\n                headers=self._get_http_headers(self._build_zip_from_attachments(legal_documents), invoice_sudo._get_invoice_report_filename(report_type)),\n            )\n\n    if report_type == 'html':\n        return request.render('account.report_invoice_document', self._invoice_get_page_view_values(invoice_sudo, access_token, **kw))\n    elif report_type == 'pdf':\n        report = self._show_report(invoice_sudo, access_token, **kw)\n        return request.make_response(\n            report.datas,\n            headers=self._get_http_headers(report.datas, report.name),\n        )\n    elif report_type == 'text':\n        report = self._show_report(invoice_sudo, access_token, **kw)\n        return request.make_response(\n            report.datas,\n            headers=self._get_http_headers(report.datas, report.name),\n        )\n    else:\n        return request.render('account.report_invoice", "CodeBleu_score": 39.68873681324639}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t# Get the company's domain\n    if company:\n        company_domain = company.domain\n    else:\n        company_domain = self.env.user.company_id.domain\n\n    # Search for product templates based on the company's domain\n    prod_templates = self.env['product.template'].search([('domain', '=', company_domain)])\n\n    # Update the sale taxes for the product templates if the company's account_sale_tax_id is set\n    if company and company.account_sale_tax_id:\n        prod_templates.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n\n    # Update the purchase taxes for the product templates if the company's account_purchase_tax_id is set\n    if company and company.account_purchase_tax_id:\n        prod_templates.write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})\n\n    return prod_templates", "CodeBleu_score": 33.53216753498019}, {"code": "def _get_demo_data_products(self, company=False)\n\tif not company:\n        company = self.env.company\n    if company.demo_data_company_id:\n        company = company.demo_data_company_id\n    if company.account_sale_tax_id:\n        self.env['product.template'].search([('domain', '=', company.domain)]).write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        self.env['product.template'].search([('domain', '=', company.domain)]).write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})", "CodeBleu_score": 25.913386428126795}, {"code": "def _get_demo_data_products(self, company=False)\n\tcompany_id = self.env.user.company_id.id\n    if company:\n        company_id = company\n    products = self.env['product.template'].search([('company_id', '=', company_id)])\n    if not products:\n        return False\n    company = self.env['res.company'].browse(company_id)\n    if company.account_sale_tax_id:\n        products.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return True\n\n\n\n\n", "CodeBleu_score": 33.2148004587178}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\tif company:\n        try:\n            return self.env['account.account'].sudo().search([('company_id', '=', company.id), ('id', '=', xml_id)], limit=1)\n        except ValueError:\n            pass\n        try:\n            return self.env['account.account'].sudo().search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n        except ValueError:\n            pass\n        try:\n            return self.env['account.account'].sudo().search([('company_id', '=', company.id)], limit=1)\n        except ValueError:\n            pass\n    return False\n\n", "CodeBleu_score": 50.75386066380282}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t# Check if the demo account has been created in the database\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)], limit=1)\n    if demo_account:\n        return demo_account\n\n    # Try to find the demo account using the xml_id\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)], limit=1)\n    if demo_account:\n        return demo_account\n\n    # Try to find the demo account using the account_type\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type)], limit=1)\n    if demo_account:\n        return demo_account\n\n    # Return the first account in the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 51.03172460697799}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\tself.ensure_one()\n    account_model = self.env['account.account']\n    demo_account_id = False\n    # First try to find the account using the company's ID and the xml_id in the 'ir.model.data' model.\n    try:\n        demo_account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id, raise_if_not_found=False)\n    except ValueError:\n        pass\n    # If not found, search for an account matching the account_type within the company's domain.\n    if not demo_account_id:\n        demo_account_id = account_model.search([('company_id', '=', company.id), ('type', '=', account_type)], limit=1).id\n    # If still not found, return the first account within the company's domain.\n    if not demo_account_id:\n        demo_account_id = account_model.search([('company_id', '=', company.id)], limit=1).id\n    return demo_account_id\n\n", "CodeBleu_score": 41.95329984869798}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self._read_group(\n        domain=[\n            ('company_id', '!=', False),\n            ('type', '=', 'current_year_earnings'),\n        ],\n        fields=['company_id'],\n        lazy=False,\n    )\n    for account in accounts:\n        if len(account['company_id']) > 1:\n            raise ValidationError(\n                _(\n                    'There should be only one account with the \"Current Year Earnings\" type for each company.'\n                )\n            )\n\n\n\n\n", "CodeBleu_score": 33.94105911816158}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self._read_group(\n        domain=[('type', '=', 'current_year_earnings')],\n        fields=['company_id'],\n        groupby=['company_id'],\n        lazy=False,\n    )\n    for company_id, group in accounts.items():\n        if len(group) > 1:\n            raise ValidationError(\n                _('There must be only one account with the \"Current Year Earnings\" type for each company.')\n            )\n\n", "CodeBleu_score": 32.82960908330028}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self._read_group(\n        domain=[\n            ('company_id', '=', self.company_id.id),\n            ('account_type', '=', 'current_year_earnings'),\n        ],\n        fields=['company_id'],\n        lazy=False,\n    )\n    if len(accounts) > 1:\n        raise ValidationError(\n            _(\n                'You can only have one account with the \"Current Year Earnings\" type for each company.'\n            )\n        )\n\n", "CodeBleu_score": 36.64404831932313}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name:\n        if self.env.context.get('partner_id'):\n            return self._order_accounts_by_frequency_for_partner(self.env.context.get('partner_id'), domain, order, limit)\n        else:\n            return self.search(domain, order=order, limit=limit)\n\n    name = name.split(' ')\n    if len(name) == 1:\n        domain = [('name', operator, name[0])]\n    else:\n        domain = [('name', operator, name[0]), ('name', operator, name[1])]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[1]\n\n    if domain and domain[0][2] == '':\n        domain = domain[", "CodeBleu_score": 34.513594635468614}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name:\n        if self.env.context.get('partner_id') and self.env.context.get('search_default_partner_id'):\n            return self._order_accounts_by_frequency_for_partner()\n        else:\n            return self.search(domain, limit=limit, order=order)\n    name = name.replace('%', '')\n    if operator == 'ilike' and not (name.startswith('%') or name.endswith('%')):\n        name = '%%%s%%' % name\n    return self.search([('name', operator, name)] + (domain and [('id', 'in', domain)] or []), limit=limit, order=order)\n\n", "CodeBleu_score": 33.184315142517484}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif name and not operator:\n        operator = 'ilike'\n\n    if not name and self._context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner(self._context['partner_id'])\n\n    if name:\n        if operator == 'ilike' and not name.startswith('%'):\n            name = '%%%s%%' % name\n        search_domain = [('name', operator, name)]\n    else:\n        search_domain = []\n\n    if domain:\n        search_domain = ['&', search_domain, domain]\n\n    return self.search(search_domain, limit=limit, order=order)\n\n", "CodeBleu_score": 38.1928997708997}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice').read()[0]\n    action['context'] = {\n        'default_type': 'in_invoice',\n        'default_partner_id': self.partner_id.id,\n        'default_journal_id': self.journal_id.id,\n        'default_date_invoice': self.date_order,\n        'default_invoice_date': self.date_order,\n        'default_invoice_origin': self.name,\n        'default_company_id': self.company_id.id,\n        'search_default_customer': self.partner_id.id,\n        'search_default_journal': self.journal_id.id,\n        'search_default_date_invoice': self.date_order,\n        'search_default_invoice_date': self.date_order,\n        'search_default_invoice_origin': self.name,\n        'search_default_company': self.company_id.id,\n    }\n    action['domain'] = [('id', 'in', self._query_analytic_accounts().ids)]\n    return action\n", "CodeBleu_score": 34.98170343310779}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    # search for account move lines related to sale types\n    sale_types = self.env['account.move.line']._query_analytic_accounts()\n    # add conditions for the current record's ID and analytic accounts\n    query = self.env['account.move.line'].with_context(active_test=False).search([('sale_id', '=', self.id)]).read(['move_id'])\n    query = self.env['account.move.line'].with_context(active_test=False).search([('sale_id', '=', self.id), ('move_id', 'in', [line.get('move_id') for line in query])])\n    query = query.filtered(lambda line: line.account_id.user_type_id.type in sale_types)\n    # execute the query to get distinct move IDs\n    move_ids = self._get_invoice_ids(query)\n    # return an action dictionary to display customer invoices in tree and form views with specific context and domain settings\n    return {\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'view_type': 'form',\n        'res_model': 'account.move',\n        'views': [(self.env.ref('account.view_move_tree').id, 'tree'), (self.env.ref('account.view_move_form').id, 'form')],\n        'name': _('Customer Invoices'),\n        'domain': [('id', 'in', move_ids)],\n        'context': {'default_type': 'out_invoice', 'default_partner_id': self.partner_id.id, 'default_journal_id': self.journal_id.id},\n    }", "CodeBleu_score": 34.46674260913215}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    move_lines = self.env['account.move.line'].search([\n        ('sale_id', '=', self.id),\n        ('sale_line_ids', 'in', self.mapped('line_ids').ids)\n    ])\n    if not move_lines:\n        return False\n    return {\n        'name': _('Customer Invoices'),\n        'view_mode': 'tree,form',\n        'domain': [('id', 'in', move_lines.mapped('move_id').ids)],\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': {\n            'sale_id': self.id,\n            'search_default_account_id': self.partner_id.property_account_receivable_id.id,\n            'search_default_analytic_account_id': self._query_analytic_accounts(),\n        },\n        'flags': {'search_view': False},\n    }", "CodeBleu_score": 31.419299002033263}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    move_lines = self.env['account.move.line'].search([('move_id.purchase_id', '=', self.id), ('move_id.state', '=', 'posted')])\n    move_ids = move_lines.mapped('move_id').ids\n    return {\n        'name': _('Vendor Bill'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids), ('type', '=', 'in_invoice')],\n        'context': {'default_type': 'in_invoice', 'default_purchase_id': self.id, 'create': False},\n        'help': _('''<p class=\"oe_view_nocontent_create\">\n                    Press <a href=\"#\" data-action=\"%s\">\n                    <span class=\"fa fa-plus\"></span> Add</a> to create a new vendor bill.\n                    </p>''') % (self.env.ref('account.action_move_in_invoice_type').id,),\n    }\n", "CodeBleu_score": 29.325797453329766}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    purchase_types = self.env['purchase.order.line']._get_purchase_types()\n    move_lines = self.env['account.move.line'].search([('purchase_line_id', 'in', purchase_types), ('purchase_id', '=', self.id)])\n    move_ids = list(set(move_lines.mapped('move_id').ids))\n    return {\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'default_move_type': 'in_invoice', 'default_purchase_id': self.id},\n    }\n\n\n\n\n", "CodeBleu_score": 26.28382388889338}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    action = self.env.ref('purchase_account.action_purchase_invoice_tree_view_form').read()[0]\n    action['domain'] = [('move_id.purchase_id', '=', self.id)]\n    action['context'] = {'default_type': 'in_invoice', 'default_purchase_id': self.id, 'default_journal_id': self.journal_id.id, 'default_move_type': 'in_invoice', 'default_company_id': self.company_id.id}\n    action['context']['default_move_ids'] = self.env['account.move.line'].search([('purchase_id', '=', self.id)]).mapped('move_id').ids\n    return action", "CodeBleu_score": 32.62747717237146}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].sudo()\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.partner_id.bank_account_id.acc_number),\n        ('partner_id', '=', self.partner_id.id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].sudo().create({\n            'acc_number': self.partner_id.bank_account_id.acc_number,\n            'partner_id': self.partner_id.id,\n            'bank_id': self.partner_id.bank_id.id,\n            'acc_type': self.partner_id.bank_account_id.acc_type,\n            'currency_id': self.partner_id.bank_account_id.currency_id.id,\n            'company_id': self.env.company.id,\n        })\n    return bank_account.filtered(lambda x: x.company_id.id == self.env.company.id)\n\n", "CodeBleu_score": 55.6579388783853}, {"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if not str2bool(self.env.context.get('skip_bank_account_creation')):\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.bank_account_number), ('partner_id', '=', self.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.bank_account_number,\n                'partner_id': self.id,\n                'bank_id': self.env['res.bank'].search([], limit=1).id,\n                'currency_id': self.env['res.currency'].search([], limit=1).id,\n            })\n    else:\n        bank_account = self.env['res.partner.bank']\n    return bank_account.filtered(lambda b: b.company_id == self.env.user.company_id)\n\n", "CodeBleu_score": 55.51090642833976}, {"code": "def _find_or_create_bank_account(self)\n\tif not self.ensure_one():\n        raise ValueError('_find_or_create_bank_account can only be called on a single record')\n    if not self.env.user.has_group('account.group_account_invoice'):\n        return False\n    if self.env.context.get('skip_bank_account_creation', False):\n        return False\n    self.ensure_one()\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.bank_account_number), ('partner_id', '=', self.id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.bank_account_number,\n            'partner_id': self.id,\n            'bank_id': self.bank_id.id,\n            'acc_type': self.bank_account_type,\n            'currency_id': self.currency_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 54.30777284379855}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\twith self.env.cr.savepoint():\n        self.ensure_one()\n        self.env.cr.execute(\"\"\"SELECT id, name, code FROM res_currency WHERE id IN %s\"\"\", (tuple(self.env.context.get('statement_currency_ids', [])),))\n        statement_currencies = self.env.cr.dictfetchall()\n        statement_currency_ids = [currency.id for currency in statement_currencies]\n        statement_currency_names = {currency.id: currency.name for currency in statement_currencies}\n        statement_currency_codes = {currency.id: currency.code for currency in statement_currencies}\n\n        # Get the transaction amount, journal amount and company amount with their corresponding currencies\n        # from the journal entry linked to the statement line.\n        # All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n        transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n\n        # If the currency is the company currency, the company amount is equal to the journal amount.\n        # If the currency is the transaction currency, the company amount is equal to the transaction amount.\n        # If the currency is a statement currency, the company amount is equal to the journal amount converted to the statement currency.\n        # In all cases, the company amount is positive for an inbound transaction, negative for an outbound one.\n        if currency.id == company_currency.id:\n            company_amount = journal_amount\n        elif currency.id == transaction_currency.id:\n            company_amount = transaction_amount\n        elif currency.id in statement_currency_ids:\n            company_amount = self.env['res.currency'].compute(journal_amount, journal_currency, currency)\n\n        # If the currency is the company currency, the journal amount is equal to the transaction amount.\n        # If the currency is the transaction currency, the journal amount is equal to the transaction amount.\n        # If the currency is a statement currency, the journal amount is equal to the transaction amount converted to the statement currency.\n        # In all cases, the journal amount is positive for an inbound", "CodeBleu_score": 26.21602091130632}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\twith self.env.cr.savepoint():\n        self.ensure_one()\n        transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n        if currency == transaction_currency:\n            return {\n                'transaction_amount': transaction_amount,\n                'journal_amount': journal_amount,\n                'company_amount': company_amount,\n            }\n        if currency == journal_currency:\n            return {\n                'transaction_amount': transaction_amount * transaction_currency.with_context(date=self.date).rate(currency),\n                'journal_amount': journal_amount,\n                'company_amount': company_amount * journal_currency.with_context(date=self.date).rate(currency),\n            }\n        if currency == company_currency:\n            return {\n                'transaction_amount': transaction_amount * transaction_currency.with_context(date=self.date).rate(currency) * journal_currency.with_context(date=self.date).rate(currency),\n                'journal_amount': journal_amount * journal_currency.with_context(date=self.date).rate(currency),\n                'company_amount': company_amount,\n            }\n        if currency == self.foreign_currency_id:\n            return {\n                'transaction_amount': transaction_amount,\n                'journal_amount': journal_amount * journal_currency.with_context(date=self.date).rate(currency),\n                'company_amount': company_amount * journal_currency.with_context(date=self.date).rate(currency) * company_currency.with_context(date=self.date).rate(currency),\n            }\n        if currency == self.currency_id:\n            return {\n                'transaction_amount': transaction_amount * transaction_currency.with_context(date=self.date).rate(currency),\n                'journal_amount': journal_amount,\n                'company_amount': company_amount * company_currency.with_context(date=self.date).rate(currency),\n            }\n\n        # Fallback: use the rate of the", "CodeBleu_score": 27.98499291669613}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\twith self.env.cr.savepoint():\n        self.ensure_one()\n        if not self.amount_currency:\n            # The statement line is in the company's currency, so we can't use the exchange rate.\n            return {\n                'transaction_amount': self.amount,\n                'journal_amount': self.amount,\n                'company_amount': self.amount,\n            }\n\n        # Get the amounts and currencies from the journal entry\n        transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n\n        # We need to adjust the transaction amount and balance in case of foreign currency\n        if currency == transaction_currency:\n            transaction_amount = self.amount\n        elif currency == journal_currency:\n            transaction_amount = self.amount_currency\n        elif currency == company_currency:\n            transaction_amount = company_amount\n        else:\n            transaction_amount = self.amount_currency\n\n        if currency == journal_currency:\n            balance = journal_amount\n        elif currency == company_currency:\n            balance = company_amount\n        elif currency == transaction_currency:\n            balance = transaction_amount\n        else:\n            balance = self.amount_currency\n\n        return {\n            'transaction_amount': transaction_amount,\n            'journal_amount': journal_amount,\n            'company_amount': company_amount,\n        }\n\n", "CodeBleu_score": 29.889460248262612}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids += [(0, 0, {\n                    'payment_method_id': method.id,\n                    'sequence': 10,\n                })]\n\n", "CodeBleu_score": 40.40729031184869}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ['bank', 'cash']:\n            for payment_method in journal._default_outbound_payment_methods():\n                payment_method_line_vals = {\n                    'journal_id': journal.id,\n                    'payment_method_id': payment_method.id,\n                }\n                journal.outbound_payment_method_line_ids += [(0, 0, payment_method_line_vals)]\n\n", "CodeBleu_score": 38.60883899914254}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = self.env['account.payment.method.line'].search([\n                ('payment_method_id', 'in', journal._default_outbound_payment_methods().ids),\n                ('journal_id', '=', journal.id)\n            ])\n        else:\n            journal.outbound_payment_method_line_ids = []\n\n", "CodeBleu_score": 37.15908849760415}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date:\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        elif not move.date:\n            move.date = fields.Date.context_today(self)", "CodeBleu_score": 25.769656788388808}, {"code": "def _compute_date(self)\n\tif not self.date and self.invoice_date:\n        self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n    if self.date and self.date != self.invoice_date:\n        self.invoice_date = self.date", "CodeBleu_score": 15.037724504097794}, {"code": "def _compute_date(self)\n\tif not self.invoice_date:\n        self.date = fields.Date.context_today(self)\n    else:\n        if self.is_sale_document(include_receipts=True):\n            self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n        else:\n            self.date = self.invoice_date", "CodeBleu_score": 24.338229705619437}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tif self.type == 'in_invoice':\n        if self.partner_id.property_payment_term:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.type == 'out_invoice':\n        if self.partner_id.property_supplier_payment_term:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term.id\n        else:\n            self.invoice_payment_term_id = False", "CodeBleu_score": 34.12894541174694}, {"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_sale_document(include_receipts=True):\n        if self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document(include_receipts=True):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 37.38699974944475}, {"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_sale_document():\n        if self.partner_id.property_payment_term.id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id.property_supplier_payment_term.id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False", "CodeBleu_score": 33.20895297041652}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\ttax_groups = self.env['account.tax.group'].search([('company_id', '=', self.company_id.id)])\n    tax_groups_by_country_company = defaultdict(list)\n    for tax in self.filtered(lambda tax: tax.company_id):\n        tax_groups_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n\n    for (country, company), taxes in tax_groups_by_country_company.items():\n        for tax in taxes:\n            if tax.tax_group_id:\n                continue\n            tax_group = tax_groups.filtered(lambda group: group.country_id == country and group.company_id == company)\n            if not tax_group:\n                tax_group = tax_groups.filtered(lambda group: group.country_id == False and group.company_id == company)\n            if not tax_group:\n                tax_group = tax_groups.filtered(lambda group: group.country_id == country and group.company_id == False)\n            if not tax_group:\n                tax_group = tax_groups.filtered(lambda group: group.country_id == False and group.company_id == False)\n            tax.tax_group_id = tax_group.id", "CodeBleu_score": 28.2640488709262}, {"code": " def _compute_tax_group_id(self)\n\tby_country_company = defaultdict(list)\n    for tax in self:\n        by_country_company[(tax.country_id, tax.company_id)].append(tax)\n\n    for taxes in by_country_company.values():\n        if len(taxes) > 1:\n            for tax in taxes:\n                tax.tax_group_id = False\n\n    for taxes in by_country_company.values():\n        if len(taxes) == 1:\n            tax = taxes[0]\n            tax.tax_group_id = self.env['account.tax.group'].search([\n                ('country_id', '=', tax.country_id.id),\n                ('company_id', '=', tax.company_id.id),\n                ('country_group_id', '=', False),\n            ], limit=1)\n\n    for taxes in by_country_company.values():\n        if len(taxes) == 1:\n            tax = taxes[0]\n            tax.tax_group_id = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', tax.company_id.id),\n                ('country_group_id', '=', False),\n            ], limit=1)\n\n    for taxes in by_country_company.values():\n        if len(taxes) > 1:\n            for tax in taxes:\n                tax.tax_group_id = self.env['account.tax.group'].search([\n                    ('country_id', '=', False),\n                    ('company_id', '=', tax.company_id.id),\n                    ('country_group_id', '=', False),\n                ], limit=1)\n\n    for taxes in by_country_company.values():\n        if len(taxes) == 1:\n            tax = taxes[0]\n            tax.tax_group_id = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', False),\n                ('country", "CodeBleu_score": 37.12768643842577}, {"code": " def _compute_tax_group_id(self)\n\ttaxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(_check_company_domain(tax.company_id), tax.country_id)].append(tax)\n\n    for (company, country), taxes in taxes_by_country_company.items():\n        for tax in taxes:\n            tax_group = self.search([('company_id', '=', company), ('country_id', '=', country)])\n            if not tax_group:\n                tax_group = self.search([('company_id', '=', company), ('country_id', '=', False)])\n            if tax_group:\n                tax.tax_group_id = tax_group.id\n            else:\n                raise UserError(_('You must define at least one tax group for each country and company.'))\n\n", "CodeBleu_score": 31.696098822787782}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session by accessing the login URL.\n    self.session.get(url + \"/login\")\n    # Prepare the POST request data, including login credentials, database name, and an optional force flag.\n    data = {\n        \"username\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force\n    }\n    # Read the module file.\n    with open(module_file, \"r\") as f:\n        module = f.read()\n    # Upload the module file to the server's 'base_import_module/login_upload' endpoint.\n    response = self.session.post(url + \"/base_import_module/login_upload\", data=data, files={\"module\": module})\n    # If the server does not have the required module installed or is outdated, it raises an exception.\n    if response.status_code != 200:\n        raise Exception(response.text)\n    # Return the server's response text.\n    return response.text\n\n\n\n\n", "CodeBleu_score": 40.55726388017296}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session by accessing the login URL.\n    self.session.get(url + '/login/' + login)\n    # Prepare the POST request data, including login credentials, database name, and an optional force flag.\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # Read the module file.\n    with open(module_file, 'rb') as f:\n        # Upload the module file to the server's 'base_import_module/login_upload' endpoint.\n        response = self.session.post(url + '/base_import_module/login_upload', data=data, files={'file': f})\n    # If the server does not have the required module installed or is outdated, it raises an exception.\n    if response.status_code == 400:\n        raise Exception(response.text)\n    # Return the server's response text.\n    return response.text\n\n\n\n\n", "CodeBleu_score": 43.51395088296894}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set database in session\n    self.session.get(url + 'base_import_module/login', auth=(login, password))\n    # Prepare POST data\n    data = {\n        'db': db,\n        'force': force,\n    }\n    # Read module file\n    with open(module_file, 'rb') as module_file:\n        module_file = module_file.read()\n    # Upload module file\n    r = self.session.post(url + 'base_import_module/login_upload', data=data, files={'module': module_file})\n    # Raise exception if server has not installed the module or it is outdated\n    if r.status_code == 400:\n        raise Exception(r.text)\n    # Return server response text\n    return r.text\n\n\n\n\n", "CodeBleu_score": 42.70000122739559}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t# Get configuration settings\n    db_name = get_database_name()\n    overwrite = get_overwrite_option()\n\n    # Create a new registry and cursor\n    registry = registry.Registry(db_name)\n    registry.cursor()\n\n    # Create a TranslationImporter object\n    importer = TranslationImporter(registry)\n\n    # Load translation files\n    importer.load_file('fr_FR', 'fr_FR', overwrite=overwrite)\n    importer.load_file('en_US', 'en_US', overwrite=overwrite)\n\n    # Save the translations\n    importer.save()\n\n", "CodeBleu_score": 22.102613427510775}, {"code": "def import_translation()\n\t# Retrieve configuration settings for the database name and whether to overwrite existing translations.\n    db_name = os.environ.get('DB_NAME', 'odoo_translations')\n    overwrite = os.environ.get('OVERWRITE', False)\n    overwrite = True if overwrite == 'True' else False\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter.\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, db_name, overwrite)\n\n    # Load translation files based on the specified configuration and save the translations, with the option to overwrite existing ones.\n    importer.load_file('./translations/fr.po')\n    importer.load_file('./translations/fr.mo')\n    importer.load_file('./translations/en.po')\n    importer.load_file('./translations/en.mo')\n    importer.save()\n\n\n\n\n", "CodeBleu_score": 42.88368202934763}, {"code": "def import_translation()\n\t# Retrieve configuration settings for the database name and whether to overwrite existing translations.\n    database_name = configuration.get('database_name')\n    overwrite_existing = configuration.get('overwrite_existing')\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter.\n    registry = registry.Registry(database_name)\n    cursor = registry.cursor()\n    importer = TranslationImporter(cursor, overwrite_existing=overwrite_existing)\n\n    # Load translation files based on the specified configuration and save the translations, with the option to overwrite existing ones.\n    importer.load_file('en_US')\n    importer.load_file('fr_FR')\n    importer.save()\n\n\n\n\n", "CodeBleu_score": 34.398698875556235}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t# create the new node\n    new_node = Node(name, info)\n\n    # set the depth\n    new_node.depth = self.depth + 1\n\n    # inherit some attributes from the parent\n    if hasattr(self, 'data'):\n        new_node.data = self.data\n    if hasattr(self, 'parent'):\n        new_node.parent = self.parent\n\n    # add the new node to the children list\n    if new_node not in self.children:\n        self.children.append(new_node)\n\n    # sort the children by name\n    self.children.sort(key=lambda x: x.name)\n\n    # return the new node\n    return new_node\n\n\n\n\n", "CodeBleu_score": 46.738615664897054}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        new_node = Node(name, info, self.depth + 1)\n        new_node.parent = self\n        new_node.children = self.children\n        new_node.children.sort(key=lambda x: x.name)\n        new_node.setattr(self.attr)\n        return new_node\n\n", "CodeBleu_score": 37.33275173290129}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, info, self.depth + 1)\n        child.set_attrs(self.attrs)\n        self.children[name] = child\n        self.children.sort(key=lambda x: x.name)\n        return child\n\n", "CodeBleu_score": 35.57181323918267}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\tresult = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"account\": account,\n    }\n    root_type = frappe.db.get_value(\n        \"Account\", account, \"root_type\", cache=True)\n    for entry in gl_entries:\n        if entry.account == account:\n            for i in range(len(dates)):\n                if dates[i] == entry.posting_date:\n                    result[\"balances\"][i] += entry.debit - entry.credit\n    if root_type not in (\"Asset\", \"Expense\"):\n        for i in range(len(result[\"balances\"])):\n            result[\"balances\"][i] *= -1\n    elif root_type == \"Asset\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n    return result\n\n", "CodeBleu_score": 34.41601588307115}, {"code": "def build_result(account, dates, gl_entries)\n\t# Initialize the result\n    result = []\n    for date in dates:\n        result.append({\n            \"date\": date,\n            \"balance\": 0\n        })\n\n    # Determine the root type of the account\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    # Iterate through the entries, updating the balances\n    for entry in gl_entries:\n        if entry.account == account:\n            for date in dates:\n                if entry.posting_date == date:\n                    result[dates.index(date)][\"balance\"] += entry.debit - entry.credit\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for date in dates:\n            result[dates.index(date)][\"balance\"] = -result[dates.index(date)][\"balance\"]\n\n    # For \"Asset,\" \"Liability,\" and \"Equity\" accounts, accumulate the balance over time\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(result)):\n            result[i][\"balance\"] += result[i - 1][\"balance\"]\n\n    return result\n\n", "CodeBleu_score": 34.38391963185825}, {"code": "def build_result(account, dates, gl_entries)\n\t# Initialize result with dates and zeros for balances\n    result = {date: 0 for date in dates}\n\n    # Determine the account's root type\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n\n    # Iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        if entry.account == account:\n            for date in dates:\n                if entry.posting_date == date:\n                    result[date] += entry.debit - entry.credit\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in dates:\n            result[date] = -result[date]\n\n    # For \"Asset,\" \"Liability,\" and \"Equity\" accounts, accumulate the balance over time\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for date in reversed(dates):\n            if date != dates[0]:\n                result[date] += result[dates[0]]\n\n    return result\n\n", "CodeBleu_score": 41.592350993096375}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t# get the account type before the save operation\n    doc_before_save = self.get_doc_before_save()\n    # get the account type after the save operation\n    account_type = self.account_type\n    # get the account name\n    account_name = self.name\n    # get the account number\n    account_number = self.account_number\n    # get the company name\n    company_name = self.company\n    # get the account type before the save operation\n    doc_before_save_account_type = doc_before_save.account_type\n    # get the account name before the save operation\n    doc_before_save_account_name = doc_before_save.name\n    # get the account number before the save operation\n    doc_before_save_account_number = doc_before_save.account_number\n    # get the company name before the save operation\n    doc_before_save_company_name = doc_before_save.company\n    # if the account type changes from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n    if (doc_before_save_account_type == \"Receivable\" or doc_before_save_account_type == \"Payable\") and (account_type != \"Receivable\" or account_type != \"Payable\"):\n        # get all general ledger entries for the account\n        gl_entries = frappe.get_all(\"GL Entry\", filters={\"account\": account_name, \"company\": company_name}, fields=[\"name\", \"account\", \"voucher_no\", \"voucher_type\", \"posting_date\", \"debit\", \"credit\", \"debit_in_account_currency\", \"credit_in_account_currency\", \"is_opening\", \"party_type\", \"party\", \"against\", \"account_currency\", \"account_type\", \"debit_in_account_currency\", \"credit_in_account_currency\", \"against_voucher_type\", \"against_voucher\", \"remarks\", \"reference_type\", \"reference_name\", \"reference_number\", \"against_account\", \"against_account_", "CodeBleu_score": 24.341836202161478}, {"code": "def validate_receivable_payable_account_type(self)\n\t# Get the account type before the save operation\n    doc_before_save = self.get_doc_before_save()\n    account_type_before_save = doc_before_save.account_type\n\n    # Get the account type after the save operation\n    account_type_after_save = self.account_type\n\n    # Compare the account types\n    if account_type_before_save != account_type_after_save:\n        if account_type_before_save == \"Receivable\" or account_type_before_save == \"Payable\":\n            # Get the account name\n            account_name = self.name\n\n            # Get all general ledger entries for the account\n            gl_entries = frappe.db.get_all(\"GL Entry\", filters={\"account\": account_name}, fields=[\"name\"])\n\n            # Check if there are any general ledger entries for the account\n            if gl_entries:\n                # Generate a warning message\n                frappe.msgprint(_(\"Warning: There are existing general ledger entries for {0}. Please check the 'Accounts' report for potential issues.\".format(account_name)), alert=True)\n\n                # Add a comment to the account record\n                self.add_comment(\"Comment\", _(\"The account type was changed from {0} to {1}. Please check the 'Accounts' report for potential issues.\".format(account_type_before_save, account_type_after_save)))\n\n\n\n\n", "CodeBleu_score": 38.04932574750728}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.doctype == \"Account\":\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.get_doc_before_save():\n                if self.get_doc_before_save().account_type != self.account_type:\n                    if frappe.db.count(\"GL Entry\", {\"account\": self.name, \"is_cancelled\": 0}) > 0:\n                        frappe.msgprint(_(\"Account {0} has existing general ledger entries. Please review the Accounts report for potential issues.\").format(self.name))\n                        self.add_comment(text=_(\"Account type changed from {0} to {1}. Please review the Accounts report for potential issues.\").format(self.get_doc_before_save().account_type, self.account_type))\n\n\n\n", "CodeBleu_score": 31.761994923906613}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\tif not self.account_currency:\n        self.account_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n\n    if self.account_currency:\n        self.flags.set_on_submit = True\n        self.flags.ignore_mandatory = True\n        self.flags.ignore_validate_update_after_submit = True\n        self.flags.ignore_validate = True\n\n        if self.is_group:\n            self.validate_account_currency_for_groups()\n        else:\n            self.validate_account_currency_for_accounts()\n\n    if not self.flags.ignore_mandatory:\n        self.flags.ignore_mandatory = True\n        self.validate_account_number()\n", "CodeBleu_score": 32.64404966887171}, {"code": "def validate_account_currency(self)\n\tif not self.get(\"account_currency\"):\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n\n    if self.get(\"account_currency\") != frappe.db.get_value(\n        \"Company\", self.company, \"default_currency\"\n    ):\n        self.flags.explicit_currency = True\n\n    if self.get(\"account_currency\") != frappe.db.get_value(\n        \"Currency\", self.account_currency, \"symbol\"\n    ):\n        frappe.throw(\n            _(\n                \"The currency of the account must be the same as the currency of the company. Please change the account currency.\"\n            )\n        )\n\n    if self.get(\"is_group\") == 0:\n        if frappe.db.get_value(\n            \"GL Entry\",\n            {\n                \"account\": self.name,\n                \"account_currency\": (\"!=\", self.account_currency),\n                \"company\": self.company,\n            },\n            \"name\",\n            as_list=1,\n        ):\n            frappe.throw(\n                _(\n                    \"The account currency cannot be changed as there are existing general ledger entries with a different currency.\"\n                )\n            )\n\n", "CodeBleu_score": 33.188180166055034}, {"code": "def validate_account_currency(self)\n\tif self.account_type == \"Receivable\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Payable\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Asset\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Expense\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Income\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Equity\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Fixed Asset\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Cash\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Bank\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Cost of Goods Sold\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Stock Received But Not Billed\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Stock Adjustment\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Stock Received But Not Billed\":\n        self.account_currency = \"INR\"\n        self.set_on_hold = 1\n    elif self.account_type == \"Stock", "CodeBleu_score": 14.912700165392856}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries.setdefault(key, key_values)\n            merged_entries[key][\"debit\"] = 0.0\n            merged_entries[key][\"credit\"] = 0.0\n            merged_entries[key][\"debit_in_account_currency\"] = 0.0\n            merged_entries[key][\"credit_in_account_currency\"] = 0.0\n\n        if entry.get(\"debit\"):\n            merged_entries[key][\"debit\"] += entry.get(\"debit\")\n            merged_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n        if entry.get(\"credit\"):\n            merged_entries[key][\"credit\"] += entry.get(\"credit\")\n            merged_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n\n    return merged_entries\n\n", "CodeBleu_score": 50.9166967528925}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries.setdefault(key, key_values)\n            merged_entries[key].update({\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"balance\": 0,\n                \"balance_in_account_currency\": 0,\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"debit_account_currency\": 0,\n                \"credit_account_currency\": 0,\n                \"exchange_rate\": 0,\n                \"voucher_type\": None,\n                \"voucher_no\": None,\n                \"against_voucher_type\": None,\n                \"against_voucher\": None,\n                \"cost_center\": entry.get(\"cost_center\"),\n                \"project\": entry.get(\"project\"),\n                \"finance_book\": entry.get(\"finance_book\"),\n                \"is_opening\": entry.get(\"is_opening\"),\n                \"is_closing\": entry.get(\"is_closing\"),\n                \"is_period_closing_voucher_entry\": entry.get(\"is_period_closing_voucher_entry\"),\n                \"is_advance\": entry.get(\"is_advance\"),\n                \"party_type\": None,\n                \"party\": None,\n                \"party_balance\": 0,\n                \"against_party_type\": None,\n                \"against_party\": None,\n                \"against_party_balance\": 0,\n                \"remarks\": None,\n                \"cheque_no\": None,\n                \"cheque_date\": None,\n                \"is_cancelled\": 0,\n                \"is_return\": 0,\n                \"is_advance_paid\": 0,\n                \"is_paid\": 0,\n                \"", "CodeBleu_score": 35.302998219227824}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, key_values)\n        merged_entries[key].update({\n            \"debit\": merged_entries[key].get(\"debit\") + entry.get(\"debit\"),\n            \"credit\": merged_entries[key].get(\"credit\") + entry.get(\"credit\"),\n            \"debit_in_account_currency\": merged_entries[key].get(\"debit_in_account_currency\") + entry.get(\"debit_in_account_currency\"),\n            \"credit_in_account_currency\": merged_entries[key].get(\"credit_in_account_currency\") + entry.get(\"credit_in_account_currency\"),\n        })\n\n    return merged_entries\n\n", "CodeBleu_score": 45.72061808749382}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in [\"Supplier Payment\", \"Payment Entry\"]:\n        supplier_type = \"on_hold\"\n    elif self.doctype in [\"Purchase Order\", \"Purchase Invoice\", \"Purchase Receipt\", \"Purchase Invoice Advance\"]:\n        supplier_type = \"blocked\"\n    else:\n        return\n    supplier = frappe.get_doc(\"Supplier\", self.supplier)\n    if supplier.get(supplier_type):\n        if supplier.get(supplier_type) == supplier_type:\n            if supplier.get(\"hold_type\") == self.doctype:\n                if supplier.get(\"release_date\") and supplier.get(\"release_date\") < getdate(nowdate()):\n                    frappe.throw(_(\"Supplier {0} is no longer blocked. Please select a new supplier.\").format(supplier.name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is still blocked. Please select a new supplier.\").format(supplier.name))", "CodeBleu_score": 29.321579884835568}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype == 'Supplier Payment':\n        supplier_hold_type = 'Supplier'\n    else:\n        supplier_hold_type = 'Customer'\n\n    if self.supplier and self.supplier_name:\n        supplier = frappe.get_doc('Supplier', self.supplier)\n        if supplier.on_hold and supplier.hold_type == supplier_hold_type:\n            if supplier.hold_type == 'Supplier' and supplier.release_date > getdate():\n                frappe.throw(_('Supplier {0} is on hold till {1}. Please release the supplier to make this transaction.').format(\n                    self.supplier_name, formatdate(supplier.release_date)))\n            elif supplier.hold_type == 'Customer' and supplier.release_date > getdate():\n                frappe.throw(_('Customer {0} is on hold till {1}. Please release the customer to make this transaction.').format(\n                    self.supplier_name, formatdate(supplier.release_date)))\n\n", "CodeBleu_score": 29.359024096146385}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.supplier:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold and supplier.hold_type == \"Payment\":\n            if self.doctype == \"Supplier Payment\":\n                if self.posting_date < supplier.release_date:\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold until {1}. Please try again after that date.\").format(\n                            self.supplier, supplier.release_date\n                        )\n                    )\n            elif self.doctype == \"Purchase Invoice\":\n                frappe.throw(\n                    _(\"Supplier {0} is on hold until {1}. Please try again after that date.\").format(\n                        self.supplier, supplier.release_date\n                    )\n                )\n\n", "CodeBleu_score": 26.97294869521279}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t# Identify the repost doctypes for the current document\n    repost_doctypes = [\n        d.parent\n        for d in frappe.get_all(\n            \"Repost Item\",\n            filters={\"voucher_type\": self.doctype, \"voucher_no\": self.name},\n            fields=[\"parent\"],\n        )\n    ]\n\n    # If no repost doctypes were found, return\n    if not repost_doctypes:\n        return\n\n    # Identify the relevant repost doctypes\n    repost_doctypes = [\n        d.parent\n        for d in frappe.get_all(\n            \"Repost Item\",\n            filters={\n                \"voucher_type\": self.doctype,\n                \"voucher_no\": self.name,\n                \"parent\": (\"in\", repost_doctypes),\n            },\n            fields=[\"parent\"],\n        )\n    ]\n\n    # If no repost doctypes were found, return\n    if not repost_doctypes:\n        return\n\n    # Identify the repost doctypes and their respective parents\n    references_map = frappe._dict()\n    for d in frappe.get_all(\n        \"Repost Item\",\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n            \"parent\": (\"in\", repost_doctypes),\n        },\n        fields=[\"parent\", \"parenttype\", \"parentfield\"],\n    ):\n        references_map.setdefault(d.parenttype, frappe._dict()).setdefault(\n            d.parent, frappe._dict()\n        )[d.parentfield] = d.parentfield\n\n    # For each parent, retrieve the parent document, remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype, set flags to ignore validation and links, and save the changes\n    for parenttype, parents in references_map.items():\n        for parent, fields in parents.items():\n            parent_doc = frappe.get_doc(parent", "CodeBleu_score": 23.84852842810258}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = [\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Payment Entry Reference\",\n        \"Purchase Invoice\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Order Item\",\n        \"Sales Invoice Item\",\n        \"Stock Entry\",\n        \"Stock Ledger Entry\",\n    ]\n\n    references_map = {}\n    for doctype in repost_doctypes:\n        repost_doc = frappe.get_doc(doctype)\n        rows = repost_doc.get(\"repost_vouchers\") or repost_doc.get(\"vouchers\")\n        if not rows:\n            continue\n\n        for row in rows:\n            if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                references_map.setdefault(doctype, []).append(row.parent)\n\n    for doctype, parents in references_map.items():\n        for parent in parents:\n            repost_doc = frappe.get_doc(doctype, parent)\n            rows = repost_doc.get(\"repost_vouchers\") or repost_doc.get(\"vouchers\")\n            if not rows:\n                continue\n\n            for row in rows:\n                if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                    if repost_doc.get(\"repost_vouchers\"):\n                        repost_doc.remove(row)\n                    else:\n                        row.flags.ignore_validate = True\n                        row.flags.ignore_links = True\n                        repost_doc.remove(row)\n\n            repost_doc.save()\n", "CodeBleu_score": 26.779267404257865}, {"code": "def _remove_references_in_repost_doctypes(self)\n\treferences_map = {}\n    for repost_doctype in self.get_repost_doctypes():\n        # get all rows where voucher type and voucher number match\n        repost_rows = frappe.db.sql(\n            \"\"\"\n            select\n                parent,\n                parenttype,\n                fieldname\n            from\n                `tab{0}`\n            where\n                voucher_type=%s\n                and voucher_no=%s\n            \"\"\".format(repost_doctype),\n            (self.doctype, self.name),\n            as_dict=1,\n        )\n        if not repost_rows:\n            continue\n        # organize rows by parent document type and parent\n        for row in repost_rows:\n            references_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(\n                row.fieldname\n            )\n        # get parent documents\n        parent_docs = frappe.get_all(\n            \"*\",\n            filters={\n                \"name\": (\"in\", list(references_map.keys())),\n                \"docstatus\": (\"<\", 2),\n            },\n        )\n        # remove rows from parent documents\n        for parent_doc in parent_docs:\n            repost_doc = frappe.get_doc(parent_doc.doctype, parent_doc.name)\n            if repost_doc.get(\"vouchers\"):\n                for voucher_fieldname in references_map.get(parent_doc.name, []):\n                    repost_doc.vouchers = [\n                        v\n                        for v in repost_doc.vouchers\n                        if v.voucher_type != self.doctype or v.voucher_no != self.name\n                    ]\n            if repost_doc.get(\"repost_vouchers\"):\n                for voucher_fieldname in references_map.get(parent_doc.name, []):\n                    repost_doc.repost_vouchers = [\n                        v\n                        for v in repost_doc.repost_vouchers", "CodeBleu_score": 27.357600844814527}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    start_date = start_date.strftime(\"%Y-%m-%d\")\n    end_date = end_date.strftime(\"%Y-%m-%d\")\n    options = {\n        \"count\": 500,\n        \"offset\": 0,\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n    }\n    if account_id:\n        options[\"account_ids\"] = [account_id]\n\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **options)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction retrieval error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n        else:\n            transactions.extend(response[\"transactions\"])\n            if response[\"total\"] <= len(transactions):\n                break\n            options[\"offset\"] = len(transactions)\n\n    return transactions\n\n", "CodeBleu_score": 39.37416308665465}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\tself.auth()\n\n    # Construct the query parameters\n    kwargs = {\"start_date\": start_date, \"end_date\": end_date}\n\n    if account_id:\n        kwargs[\"account_ids\"] = [account_id]\n\n    transactions = []\n\n    # Fetch transactions\n    while True:\n        try:\n            response = self.client.Transactions.get(**kwargs)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction retrieval error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n\n        # Append the transactions\n        transactions.extend(response[\"transactions\"])\n\n        # Check if there are more transactions\n        if response[\"total_transactions\"] <= len(transactions):\n            break\n\n        # Update the query parameters\n        kwargs[\"offset\"] = len(transactions)\n\n    return transactions\n\n", "CodeBleu_score": 40.81939262336249}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# Authenticate the client\n    self.auth()\n    # Construct the query parameters\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n    }\n    if account_id:\n        params[\"account_ids\"] = account_id\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(**params)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction retrieval error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n        else:\n            transactions.extend(response[\"transactions\"])\n            if response[\"total_transactions\"] == len(transactions):\n                break\n            params[\"offset\"] = len(transactions)\n    return transactions\n\n", "CodeBleu_score": 36.36246653154372}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\tinstitution_name = response[\"institution\"][\"name\"]\n    institution_type = response[\"institution\"][\"type\"]\n    institution_url = response[\"institution\"][\"url\"]\n    institution_logo = response[\"institution\"][\"logo\"]\n    institution_primary_color = response[\"institution\"][\"primary_color\"]\n    institution_country_codes = response[\"institution\"][\"country_codes\"]\n    institution_official = response[\"institution\"][\"official\"]\n    institution_products = response[\"institution\"][\"products\"]\n    institution_mfa = response[\"institution\"][\"mfa\"]\n    institution_id = response[\"institution_id\"]\n    institution_credentials = response[\"credentials\"]\n    institution_credentials_username = institution_credentials[\"username\"]\n    institution_credentials_password = institution_credentials[\"password\"]\n    institution_credentials_label = institution_credentials[\"label\"]\n    institution_credentials_type = institution_credentials[\"type\"]\n    institution_credentials_optional = institution_credentials[\"optional\"]\n    institution_credentials_value = institution_credentials[\"value\"]\n    institution_credentials_size = institution_credentials[\"size\"]\n    institution_credentials_mask = institution_credentials[\"mask\"]\n    institution_credentials_min_length = institution_credentials[\"min_length\"]\n    institution_credentials_max_length = institution_credentials[\"max_length\"]\n    institution_credentials_pattern = institution_credentials[\"pattern\"]\n    institution_credentials_secure = institution_credentials[\"secure\"]\n    institution_credentials_editable = institution_credentials[\"editable\"]\n    institution_credentials_error = institution_credentials[\"error\"]\n    institution_credentials_select = institution_credentials[\"select\"]\n    institution_credentials_options = institution_credentials[\"options\"]\n    institution_credentials_option_value = institution_credentials[\"option_value\"]\n    institution_credentials_option_label = institution_credentials[\"option_label\"]\n    institution_credentials_option_image = institution_credentials[\"option_image\"]\n    institution_credentials_option_disabled = institution_credentials[\"option_disabled\"]\n    institution", "CodeBleu_score": 8.53054057764486}, {"code": "def add_institution(token, response)\n\t# parse response\n    institution = response[\"institution\"]\n    # get access token\n    access_token = get_access_token(token)\n    # check if bank exists\n    bank = frappe.db.exists(\"Bank\", {\"name\": institution[\"name\"]})\n    if not bank:\n        # create bank\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"name\": institution[\"name\"],\n            \"plaid_access_token\": access_token,\n            \"plaid_institution_id\": institution[\"id\"],\n            \"plaid_institution_type\": institution[\"type\"],\n            \"plaid_institution_logo\": institution[\"logo\"],\n            \"plaid_institution_primary_color\": institution[\"primary_color\"],\n            \"plaid_institution_url\": institution[\"url\"],\n            \"plaid_institution_products\": institution[\"products\"],\n            \"plaid_institution_country_codes\": institution[\"country_codes\"],\n            \"plaid_institution_official\": institution[\"official\"],\n            \"plaid_institution_investments\": institution[\"investments\"],\n            \"plaid_institution_mfa\": institution[\"mfa\"],\n            \"plaid_institution_mfa_code_type\": institution[\"mfa_code_type\"],\n            \"plaid_institution_mfa_list\": institution[\"mfa_list\"],\n            \"plaid_institution_mfa_step\": institution[\"mfa_step\"],\n            \"plaid_institution_mfa_type\": institution[\"mfa_type\"],\n            \"plaid_institution_mfa_options\": institution[\"mfa_options\"],\n            \"plaid_institution_mfa_form_type\": institution[\"mfa_form_type\"],\n            \"plaid_institution_mfa_fields\": institution[\"mfa_fields\"],\n            \"plaid_institution_mfa_guid\": institution[\"mfa_guid\"],\n            \"plaid_institution_mfa_question\": institution[\"mfa_question\"],\n            \"plaid_institution_mfa_options_json\": institution[\"mfa_options_json\"],\n            \"", "CodeBleu_score": 16.562661521441377}, {"code": "def add_institution(token, response)\n\ttry:\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"bank_name\": response[\"institution\"][\"name\"],\n            \"bank_code\": response[\"institution\"][\"institution_id\"],\n            \"access_token\": token\n        })\n        bank.flags.ignore_mandatory = True\n        bank.insert()\n        bank.save()\n    except Exception as e:\n        frappe.log_error(f\"Plaid: {e}\")\n\n", "CodeBleu_score": 34.09985459395357}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\tinfo(_(\"Syncing transactions for {}\").format(bank_account))\n\n    # get the last integration date\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"plaid_last_integration_date\"\n    )\n\n    # get the start and end dates for the transaction retrieval\n    start_date = get_start_date(last_integration_date)\n    end_date = get_end_date(last_integration_date)\n\n    # fetch the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # update the last integration date\n    frappe.db.set_value(\n        \"Bank Account\", bank_account, \"plaid_last_integration_date\", end_date\n    )\n\n    # log the number of new transactions added\n    info(\n        _(\"Added {} new transactions\").format(\n            len(new_transactions)\n        )\n    )\n\n", "CodeBleu_score": 25.60126494209301}, {"code": "def sync_transactions(bank, bank_account)\n\tinfo(_(\"Syncing transactions for {}.\").format(bank_account))\n\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n    if not last_integration_date:\n        last_integration_date = add_months(today(), -1)\n\n    start_date = last_integration_date\n    end_date = today()\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions.extend(new_bank_transaction(transaction))\n\n    if len(new_transactions):\n        frappe.db.set_value(\n            \"Bank Account\", bank_account, \"last_integration_date\", formatdate(today())\n        )\n\n    info(_(\"Added {} new transactions.\").format(len(new_transactions)))\n\n", "CodeBleu_score": 30.31523107535389}, {"code": "def sync_transactions(bank, bank_account)\n\t# Get the last integration date for the bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Get the start and end dates for the transaction retrieval\n    start_date = None\n    end_date = None\n    if last_integration_date:\n        start_date = add_months(last_integration_date, -1)\n        end_date = last_integration_date\n    else:\n        end_date = today()\n\n    # Get the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if len(new_transactions) > 0:\n        new_transaction_date = frappe.db.get_value(\n            \"Bank Transaction\", new_transactions[0], \"date\"\n        )\n        frappe.db.set_value(\n            \"Bank Account\", bank_account, \"last_integration_date\", new_transaction_date\n        )\n\n    # Log the number of new transactions added\n    info(\n        \"{} new transactions added for bank account {}.\".format(\n            len(new_transactions), bank_account\n        )\n    )\n\n", "CodeBleu_score": 37.89806989430922}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t# Construct the query URI\n    uri = self._build_query_uri(entity)\n\n    # Determine the total number of entries\n    response = self._get(uri, params={\"page\": 1, \"per_page\": 1})\n    if response.status_code == 200:\n        total = response.json().get(\"total_count\")\n    else:\n        self._log_error(\n            execption=response.status_code,\n            data={\"uri\": uri, \"response\": response.text},\n        )\n        return\n\n    # Retrieve the entries in batches of 1000\n    for page in range(1, int(ceil(total / 1000.0)) + 1):\n        response = self._get(uri, params={\"page\": page, \"per_page\": 1000})\n        if response.status_code == 200:\n            entries = response.json().get(\"entries\")\n            if entries:\n                self._preprocess_entries(entity, entries)\n                self._save_entries(entity, entries)\n        else:\n            self._log_error(\n                execption=response.status_code,\n                data={\"uri\": uri, \"response\": response.text},\n            )\n\n", "CodeBleu_score": 27.50965022675014}, {"code": "def _migrate_entries(self, entity)\n\t# Construct the URI\n    uri = f\"{self.base_uri}/company/{self.realm_id}/{entity}?min_updated_time={self.start_date.strftime('%Y-%m-%d')}\"\n\n    # Determine the total number of entries\n    response = self._get(uri)\n    total = response.json()[\"total\"]\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Migrating {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total,\n        }\n    )\n\n    # Retrieve the entries in batches of 1000\n    for i in range(0, total, 1000):\n        response = self._get(uri, params={\"start_position\": i})\n        entries = response.json()[entity]\n        if entries:\n            entries = self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n\n", "CodeBleu_score": 24.623231035147075}, {"code": "def _migrate_entries(self, entity)\n\tself._publish({\"event\": \"progress\", \"message\": _(\"Fetching {0}\").format(entity)})\n    query_uri = self._get_query_uri(entity)\n    total = self._get_total_entries(query_uri)\n    for start_position in range(0, total, 1000):\n        entries = self._get_entries(query_uri, start_position)\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 21.26058748295232}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\ttry:\n        if invoice[\"InvoiceType\"] == \"StatementCharge\":\n            self._save_invoice_as_journal_entry(invoice, invoice[\"Id\"])\n        elif invoice[\"InvoiceType\"] == \"ReimburseCharge\":\n            self._save_invoice_as_journal_entry(invoice, invoice[\"Id\"])\n        else:\n            self._save_sales_invoice(invoice, invoice[\"Id\"])\n    except Exception as e:\n        self._log_error(e, [invoice])\n\n", "CodeBleu_score": 26.531904811402633}, {"code": "def _save_invoice(self, invoice)\n\tquickbooks_id = invoice[\"Id\"]\n    if invoice[\"TxnType\"] == \"StatementCharge\" or invoice[\"TxnType\"] == \"ReimburseCharge\":\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 42.06534524887697}, {"code": "def _save_invoice(self, invoice)\n\ttry:\n        if invoice[\"InvoiceType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n            self._save_invoice_as_journal_entry(invoice, self._generate_quickbooks_id(invoice))\n        else:\n            self._save_sales_invoice(invoice, self._generate_quickbooks_id(invoice))\n    except Exception as e:\n        self._log_error(e, [invoice])\n\n", "CodeBleu_score": 28.37289056177713}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tschedule_list = []\n    interval = (end_date - start_date).days / no_of_visit\n\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=interval * i)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 28.50678152940708}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# Calculate interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n    schedule_list = []\n\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n        schedule_list.append(schedule_date)\n\n    # Adjust dates to avoid holidays\n    for i in range(len(schedule_list)):\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_list[i], sales_person)\n        schedule_list[i] = schedule_date\n\n    return schedule_list\n\n", "CodeBleu_score": 27.720659648404215}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # initialize the schedule list\n    schedule_list = []\n\n    # iterate to create the schedule\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n        schedule_list.append(schedule_date)\n\n    # adjust dates to avoid holidays\n    for i in range(len(schedule_list)):\n        schedule_list[i] = self.validate_schedule_date_for_holiday_list(schedule_list[i], sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 26.923824709135857}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n    $handle = $this->actions[$method]['handle'] ?? 'update';\n    $url = route('bulk-actions.action', $this->path);\n\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $handle,\n        'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n\n    return response()->json([\n        'success' => true,\n        'error' => false,\n        'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 99.37966003017856}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, ['user']);\n\n    $contacts->each(function ($contact, $key) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    });\n\n    flash('Selected contacts have been deleted.')->success();\n\n    return redirect()->back();\n}", "CodeBleu_score": 62.74203122942813}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 88.85307380605111}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, ['addresses']);\n\n    if (!$contacts->count()) {\n        flash()->error(__('contacts.no_contacts_selected'));\n\n        return redirect()->route('contacts.index');\n    }\n\n    try {\n        $contacts->each(function ($contact) {\n            $this->dispatch(new DeleteContact($contact));\n        });\n\n        flash()->success(__('contacts.delete_success'));\n    } catch (Exception $e) {\n        flash()->error($e->getMessage());\n    }\n\n    return redirect()->route('contacts.index');\n}", "CodeBleu_score": 47.76793245057566}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 70.07348979891243}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 70.07348979891243}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 70.07348979891243}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t$request = $this->route()->parameters()['request'];\n    if (!class_exists($request) || !($request instanceof FormRequest)) {\n        return;\n    }\n    $data = $validator->getData();\n    $rules = $request->rules();\n    $rules = $request->prepareRules($rules);\n    foreach ($data as $key => $value) {\n        $request = new $request;\n        $request->initialize([], [], [], [], [], [], $data);\n        $request->setContainer($this->container);\n        $request->setRedirector($this->redirector);\n        $request->setUserResolver($this->getUserResolver());\n        $rules = $request->rules();\n        $rules = $request->prepareRules($rules);\n        try {\n            $request->validateResolved();\n        } catch (ValidationException $e) {\n            $validator->addFailures($e->validator->failed());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 47.57104002174171}, {"code": "<?\npublic function withValidator($validator){\n\t$request = $this->container->make(Request::class);\n\n    if (! $request instanceof FormRequest) {\n        return;\n    }\n\n    $request->initialize(\n        $this->query->all(), $this->request->all(), $this->attributes, $this->cookies, $this->files, $this->server, $this->content\n    );\n\n    $rules = $request->rules();\n\n    $request->setContainer($this->container);\n\n    $request->setRouteResolver($this->getRouteResolver());\n\n    $request->merge($this->input);\n\n    $validator->setRules($rules);\n\n    try {\n        $validator->validate();\n    } catch (ValidationException $e) {\n        $this->addValidationFailures($validator, $e->validator->failed());\n\n        throw $e;\n    }\n}", "CodeBleu_score": 36.74169963203005}, {"code": "<?\npublic function withValidator($validator){\n\t$request = $this->container->make($this->formRequest);\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n    $rules = $request->rules();\n    $rules = $request->prepareRules($rules);\n    $data = $validator->getData();\n    $validator->addFailure('form_request', 'form_request', 'form_request', $data, $rules);\n    try {\n        $request->setContainer($this->container);\n        $request->setRedirector($this->redirector);\n        $request->setUserResolver($this->userResolver);\n        $request->initialize($this->query->all(), $this->request->all(), $this->attributes->all(), $this->cookies->all(), $this->files->all(), $this->server->all(), $this->getContent());\n        $request->setJson($this->json());\n        $request->setRouteResolver($this->getRouteResolver());\n        $request->setValidator($validator);\n        $request->setErrorBag($this->errorBag);\n        $rules = $request->rules();\n        $rules = $request->prepareRules($rules);\n        $validator->addFailure('form_request', 'form_request', 'form_request', $data, $rules);\n        $validator->validate();\n    } catch (ValidationException $e) {\n        $e->validator->failed();\n        throw $e;\n    }\n}", "CodeBleu_score": 43.350193434462255}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (count($arguments) === 0) {\n        throw new \\InvalidArgumentException('You must provide at least one argument to the update method.');\n    }\n\n    if ($arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    if ($arguments[0] instanceof FormRequest) {\n        $this->request = $arguments[0];\n    }\n\n    if ($arguments[0] instanceof FormRequest && $arguments[1] instanceof Model) {\n        $this->model = $arguments[1];\n        $this->request = $arguments[0];\n    }\n\n    if ($arguments[0] instanceof Model && $arguments[1] instanceof FormRequest) {\n        $this->model = $arguments[0];\n        $this->request = $arguments[1];\n    }\n\n    if ($this->model instanceof Model && $this->request instanceof FormRequest) {\n        $this->setRequestInstance($this->request);\n\n        if ($this->model instanceof ShouldUpdate) {\n            $this->model->update($this->request->validated());\n        } else {\n            $this->model->update($this->request->all());\n        }\n    }\n}", "CodeBleu_score": 44.466568093136885}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        if (count($arguments) > 0 && $arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        }\n\n        if (count($arguments) > 1 && $arguments[1] instanceof Request) {\n            $this->setRequest($arguments[1]);\n        }\n\n        $this->update();\n    }\n}", "CodeBleu_score": 33.25397588528156}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (count($arguments) > 1) {\n        $this->setModel($arguments[0]);\n        $this->setRequest($arguments[1]);\n    } elseif (count($arguments) === 1) {\n        if ($arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        } elseif ($arguments[0] instanceof FormRequest) {\n            $this->setRequest($arguments[0]);\n        }\n    }\n\n    if ($this instanceof ShouldUpdate) {\n        $this->update();\n    }\n}", "CodeBleu_score": 32.88492037928156}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$query->usingSearchString()->sortable($sort);\n\n     if ($this->request->isNotApi() && $this->request->expectsJson()) {\n         return $query->get();\n     }\n\n     return $query->paginate(\n         $this->request->get('limit', config('app.pagination_limit'))\n     );\n }", "CodeBleu_score": 34.19528510295157}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$query->usingSearchString()->sortable($sort);\n\n    if ($this->request->expectsJson() && ! $this->request->isNotApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate(\n        $this->request->input('limit', config('admin.pagination.limit', 50))\n    );\n}", "CodeBleu_score": 33.66206449485417}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\tif ($search = request()->get('search')) {\n \t\t$query->usingSearchString($search);\n \t}\n\n \tif ($sort = request()->get('sort')) {\n \t\t$query->sortable($sort);\n \t}\n\n \tif ($this->request->isNotApi() && $this->request->expectsJson()) {\n \t\treturn $query->get();\n \t}\n\n \t$limit = $this->request->get('limit', 25);\n\n \treturn $query->paginate($limit);\n }", "CodeBleu_score": 48.233323771931914}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$amount_open = 0;\n    $amount_overdue = 0;\n\n    if ($model->getStatus() == 'paid') {\n        return [\n            'amount_open' => 0,\n            'amount_overdue' => 0,\n        ];\n    }\n\n    if ($model->getStatus() == 'partial') {\n        $transactions = $model->getTransactions();\n        foreach ($transactions as $transaction) {\n            $amount_open += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    if (Date::parse($model->getDueDate())->isPast()) {\n        $amount_overdue = $amount_open;\n        $amount_open = 0;\n    }\n\n    return [\n        'amount_open' => $amount_open,\n        'amount_overdue' => $amount_overdue,\n    ];\n}", "CodeBleu_score": 38.76856543213754}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return ['open' => 0, 'overdue' => 0];\n    }\n\n    if ($model->status == 'partial') {\n        $open_amount = $model->getAmountPaid();\n    }\n\n    if ($model->due_date->isPast()) {\n        $overdue_amount = $open_amount;\n        $open_amount = 0;\n    }\n\n    return ['open' => $open_amount, 'overdue' => $overdue_amount];\n}", "CodeBleu_score": 35.91880013186764}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n    $status = $model->getStatus();\n    $dueDate = $model->getDueDate();\n    $now = Date::now();\n\n    if ($status == 'paid') {\n        return [0, 0];\n    }\n\n    if ($status == 'partial') {\n        $openAmount = $model->getAmountPaid();\n    }\n\n    if ($status == 'unpaid') {\n        $transactions = $model->getTransactions();\n\n        foreach ($transactions as $transaction) {\n            $openAmount += $transaction->getAmount();\n        }\n    }\n\n    if ($dueDate->isPast()) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    } elseif ($dueDate->isToday()) {\n        $openAmount = $openAmount;\n        $overdueAmount = 0;\n    } elseif ($dueDate->isFuture()) {\n        $openAmount = 0;\n        $overdueAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 39.587502032695774}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->getCountForPagination();\n    $results = $this->forPage($page, $perPage)->get($columns);\n    return new Paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 75.31673074336456}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 80.66314482960586}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->getTotalCount();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 82.71881958509898}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\\DB::transaction(function () use ($request) {\n        $reconciliations = $this->getSelectedRecords($request);\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n            $this->markTransactions($reconciliation);\n        }\n    });\n}", "CodeBleu_score": 48.49024893295714}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                    $item->reconciled = true;\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 71.59749394757353}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $reconciliation->transactions()->where('account_id', $reconciliation->account_id)->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                $item->reconciled = true;\n                $item->save();\n            });\n        }\n    });\n}", "CodeBleu_score": 68.1070152760382}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\\DB::transaction(function () {\n        $invitation = UserInvitation::where('user_id', $this->user->id)->first();\n\n        if ($invitation) {\n            $invitation->delete();\n        }\n\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => \\Str::uuid(),\n        ]);\n\n        try {\n            $this->dispatch(new SendUserInvitationNotification($invitation));\n        } catch (Exception $e) {\n            throw new Exception(trans('exceptions.frontend.user.invite.error_user_not_notified'));\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 45.93841712376413}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->authorize('create', UserInvitation::class);\n\n    \\DB::transaction(function () {\n        UserInvitation::where('user_id', $this->user->id)->get()->each->delete();\n\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n        ]);\n\n        try {\n            $this->dispatch(new SendUserInvitationNotification($invitation, $this->getSourceName()));\n        } catch (Exception $exception) {\n            throw new InvitationNotificationFailedException(trans('exceptions.backend.access.users.cant_invite'));\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 39.03074927919165}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\\DB::transaction(function () {\n        UserInvitation::where('user_id', $this->user->id)->get()->each->delete();\n\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n            'source_name' => $this->getSourceName(),\n        ]);\n\n        try {\n            $this->dispatch(new SendUserInvitationNotification($invitation));\n        } catch (\\Throwable $e) {\n            throw new \\Exception(trans('user.invitation.error'));\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 38.54709421772273}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->isReconciled()) {\n        throw new Exception('The transaction has already been reconciled.');\n    }\n\n    if ($this->isTransferTransaction()) {\n        throw new UnauthorizedException();\n    }\n}", "CodeBleu_score": 27.043709781246207}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->isReconciled()) {\n        throw new \\Exception('This transaction has already been reconciled.');\n    }\n    if ($this->isTransferTransaction()) {\n        throw new \\Exception('This transaction is a transfer transaction.');\n    }\n}", "CodeBleu_score": 32.25743557362933}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->isReconciled()) {\n        throw new \\Exception('This transaction has already been reconciled.');\n    } elseif ($this->isTransferTransaction()) {\n        throw new \\UnauthorizedException();\n    }\n}", "CodeBleu_score": 31.333063647647275}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\tif (tableName == null) {\n        return false;\n    }\n\n    if (tableName.toLowerCase().startsWith(\"tenant\")) {\n        return true;\n    }\n\n    if (tableName.toLowerCase().startsWith(\"catalog\")) {\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 13.173753994065809}, {"code": "public boolean doTableFilter(String tableName){\n\tif (getHeader(Constants.AUTHORIZATION) != null) {\n        if (getTenantIdByToken(getHeader(Constants.AUTHORIZATION)) != 0) {\n            if (tableName.equals(\"TenantA\") || tableName.equals(\"TenantB\")) {\n                return true;\n            }\n            return false;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 17.97550910153148}, {"code": "public boolean doTableFilter(String tableName){\n\tif (getTenantIdByToken() != 0) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 2.108603373604661}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.3157593543147}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.3157593543147}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.3157593543147}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.01358572267596}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.01358572267596}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = getSystemConfig();\n        if (systemConfigList != null && !systemConfigList.isEmpty()) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        }\n    } catch (Exception e) {\n        log.error(\"Exception occurred while retrieving system configuration information.\", e);\n        response.setCode(500);\n        response.setMessage(\"An error occurred while retrieving system configuration information.\");\n    }\n    return response;\n}", "CodeBleu_score": 32.363753669852116}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n        List<SystemConfig> systemConfigList = getSystemConfig();\n\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setResponseCode(200);\n            response.setResponseData(systemConfigList.get(0));\n        } else {\n            response.setResponseCode(500);\n            response.setErrorMessage(\"Unable to retrieve system configuration.\");\n        }\n    } catch (Exception e) {\n        response.setResponseCode(500);\n        response.setErrorMessage(e.getMessage());\n        log.error(e.getMessage(), e);\n    }\n\n    return response;\n}", "CodeBleu_score": 34.39994447836096}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigs = getSystemConfig();\n\t\tif (systemConfigs != null && systemConfigs.size() > 0) {\n\t\t\tresponse.setData(systemConfigs.get(0));\n\t\t\tresponse.setResponseCode(200);\n\t\t} else {\n\t\t\tresponse.setResponseCode(500);\n\t\t\tresponse.setErrorMessage(\"No system configuration found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error getting system configuration\", e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 29.10142981564067}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    String filePath = request.getParameter(\"filePath\");\n    String fileName = request.getParameter(\"fileName\");\n    String fileType = request.getParameter(\"fileType\");\n    String fileId = request.getParameter(\"fileId\");\n    String fileSize = request.getParameter(\"fileSize\");\n    String fileMd5 = request.getParameter(\"fileMd5\");\n    String fileBucket = request.getParameter(\"fileBucket\");\n    String fileKey = request.getParameter(\"fileKey\");\n    String fileUrl = request.getParameter(\"fileUrl\");\n    String fileThumb = request.getParameter(\"fileThumb\");\n    String fileThumbMd5 = request.getParameter(\"fileThumbMd5\");\n    String fileThumbUrl = request.getParameter(\"fileThumbUrl\");\n    String fileThumbKey = request.getParameter(\"fileThumbKey\");\n    String fileThumbBucket = request.getParameter(\"fileThumbBucket\");\n    String fileThumbSize = request.getParameter(\"fileThumbSize\");\n    String fileThumbWidth = request.getParameter(\"fileThumbWidth\");\n    String fileThumbHeight = request.getParameter(\"fileThumbHeight\");\n    String fileExtension = request.getParameter(\"fileExtension\");\n    String fileCategory = request.getParameter(\"fileCategory\");\n    String fileDescription = request.getParameter(\"fileDescription\");\n    String fileTag = request.getParameter(\"fileTag\");\n    String fileOwner = request.getParameter(\"fileOwner\");\n    String fileStatus = request.getParameter(\"fileStatus\");\n    String fileSource = request.getParameter(\"fileSource\");\n    String fileOriginal = request.getParameter(\"fileOriginal\");\n    String fileOriginalMd5 = request.getParameter(\"fileOriginalMd5\");\n    String fileOriginalUrl = request.getParameter(\"fileOriginalUrl\");\n    String fileOriginalSize = request.getParameter(\"fileOriginalSize\");\n    String fileBusinessId = request.getParameter(\"fileBusinessId\");\n    String fileBusinessType = request.getParameter(\"fileBusinessType\");\n    String fileBusinessPath = request.getParameter(\"fileBusinessPath\");", "CodeBleu_score": 20.659031836346053}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    String filePath = \"\";\n    String fileKey = \"\";\n    String fileType = \"\";\n    String fileUrl = \"\";\n    String fileSize = \"\";\n    String fileMd5 = \"\";\n    String fileExtension = \"\";\n    String fileName = \"\";\n    String fileContentType = \"\";\n    String fileBase64 = \"\";\n    String fileLocalPath = \"\";\n    String fileLocalUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssPath = \"\";\n    String fileOssKey = \"\";\n    String fileOssName = \"\";\n    String fileOssSize = \"\";\n    String fileOssMd5 = \"\";\n    String fileOssExtension = \"\";\n    String fileOssContentType = \"\";\n    String fileOssBase64 = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";\n    String fileOssUrl = \"\";", "CodeBleu_score": 12.435057627826184}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // Get the business path from the request.\n        String businessPath = getParameter(request, \"businessPath\");\n        // Get the uploaded file from the request.\n        MultipartFile file = getFile(request);\n        // Check if the business path is empty.\n        if (isNotEmpty(businessPath)) {\n            // Check if the file is empty.\n            if (file != null) {\n                // Save the file to AliOss.\n                uploadAliOss(businessPath, file);\n            }\n        }\n        // Set the response code and data.\n        res.code = 200;\n        res.data = \"File uploaded successfully.\";\n    } catch (Exception e) {\n        // Set the response code and data.\n        res.code = 500;\n        res.data = \"File upload failed.\";\n        // Log the exception.\n        log.error(getMessage(e));\n    }\n    return res;\n}", "CodeBleu_score": 32.9980193624331}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = new Account();\n        account.setCreatedTime(new Date());\n        account.setUpdatedTime(new Date());\n        account.setCreatedUser(request.getHeader(\"userName\"));\n        account.setUpdatedUser(request.getHeader(\"userName\"));\n        account.setIsDefault(false);\n        account.setEnabled(true);\n        account.setInitialAmount(0.00);\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        int result = accountMapperEx.insertSelective(account);\n        logService.insertLog(\"\u8d26\u6237\",\n                new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getName()).toString(), request);\n        return result;\n    }", "CodeBleu_score": 43.62200301096074}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = new Account();\n        account.setCreatedTime(new Date());\n        account.setCreatedUser(LoginContext.getLoginUser().getId());\n        account.setUpdatedTime(new Date());\n        account.setUpdatedUser(LoginContext.getLoginUser().getId());\n        account.setIsDefault(false);\n        account.setEnabled(true);\n        account.setInitialAmount(getInitialAmount(obj));\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setTenantId(obj.getLong(\"tenantId\"));\n        account.setType(obj.getInteger(\"type\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setStatus(obj.getInteger(\"status\"));\n        account.setTenantId(obj.getLong(\"tenantId\"));\n        int result=0;\n        try{\n            result=accountMapperEx.insertSelective(account);\n            if(result>0){\n                insertLog(account, request);\n                setIsDefault(account);\n            }\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 44.19454073111175}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = new Account();\n        account.setInitialAmount(0.00);\n        account.setIsDefault(false);\n        account.setEnabled(true);\n        account.setCreator(Utility.getCurrentUser(request).getId());\n        account.setCreateTime(new Date());\n        account.setUpdater(Utility.getCurrentUser(request).getId());\n        account.setUpdateTime(new Date());\n        account.setRemark(\"\");\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setInitialAmount(obj.getDouble(\"initialAmount\"));\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n        account.setEnabled(obj.getBoolean(\"enabled\"));\n        account.setRemark(obj.getString(\"remark\"));\n        int result=0;\n        try{\n            result=accountMapperEx.insertAccount(account);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        logService.insertLog(\"\u8d26\u6237\",\n                new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getName()).toString(), request);\n        return result;\n    }", "CodeBleu_score": 50.79167858510114}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tLong count = null;\n    try {\n        count = mapper.countByAccount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error in listWithBalanceCount()\", e);\n    }\n    return count;\n}", "CodeBleu_score": 49.43103088368244}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tLong count = null;\n    try {\n        count = mapper.countByNameAndSerialNo(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Failed to get count of accounts with name '\" + name + \"' and serial no. '\" + serialNo + \"'\", e);\n    }\n    return count;\n}", "CodeBleu_score": 45.58497936999868}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error while getting the count of accounts with name {} and serial number {}.\", name, serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 29.286670656193014}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"Exception in DepotItemService.deleteDepotItem()\", e);\n        throw new Exception(\"Exception in DepotItemService.deleteDepotItem()\", e);\n    }\n    return result;\n}", "CodeBleu_score": 58.44289665422886}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        request.setAttribute(\"errorMsg\", e.getMessage());\n        return 0;\n    }\n    return result;\n}", "CodeBleu_score": 59.447986386191246}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\ttry {\n        int result = depotItemMapper.deleteByPrimaryKey(id);\n        return result;\n    } catch (Exception e) {\n        log.error(\"Exception: \", e);\n        throw e;\n    }\n}", "CodeBleu_score": 50.76834165216124}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\treturn processResponse(httpResponse);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 38.8718329799975}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tString response = readValue(httpResponse);\n\t\t\treturn response.contains(nodeKey);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 41.37458137178065}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + nodeType + \"/\" + nodeKey);\n\t\t\thttpGet.addHeader(\"accept\", \"application/json\");\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 43.75257734461361}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tURIBuilder uriBuilder = new URIBuilder(protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edge\");\n\t\t\turiBuilder.addParameter(\"type\", edgeType);\n\t\t\turiBuilder.addParameter(\"fromType\", fromType);\n\t\t\turiBuilder.addParameter(\"toType\", toType);\n\t\t\turiBuilder.addParameter(\"from\", from);\n\t\t\turiBuilder.addParameter(\"to\", to);\n\t\t\tHttpGet httpGet = new HttpGet(uriBuilder.build());\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString responseString = EntityUtils.toString(entity);\n\t\t\tJSONObject responseJSON = new JSONObject(responseString);\n\t\t\treturn responseJSON.has(\"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 50.04507414409151}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tStringBuilder endpoint = new StringBuilder(getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"edge\");\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tURIBuilder uriBuilder = new URIBuilder(endpoint.toString());\n\t\t\turiBuilder.addParameter(\"type\", edgeType);\n\t\t\turiBuilder.addParameter(\"fromType\", fromType);\n\t\t\turiBuilder.addParameter(\"toType\", toType);\n\t\t\turiBuilder.addParameter(\"from\", from);\n\t\t\turiBuilder.addParameter(\"to\", to);\n\t\t\tHttpGet httpGet = new HttpGet(uriBuilder.build());\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString json = EntityUtils.toString(entity);\n\t\t\t\tJSONObject jsonObject = new JSONObject(json);\n\t\t\t\treturn jsonObject.has(\"key\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 53.744638070518945}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + from + \"/\" + toType + \"/\" + to;\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpGet.setHeader(\"Accept\", \"application/json\");\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\treturn response.contains(\"key\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 48.67732968126226}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n\t\tSystem.out.println(\"Event or message is null\");\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString jsonString = event.writeValueAsString();\n\tString topic = (event.getTarget() == null) ? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 42.604522084201534}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString eventString = gson.toJson(event);\n\tString topic = event.getTarget();\n\tif (topic == null) {\n\t\ttopic = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, eventString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 43.69972691283448}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = writeValueAsString(event);\n    if (target == null) {\n        target = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(target, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 39.54433892532829}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\tOSS ossClient = new OSSClient(config);\n    try {\n        PutObjectResult result = ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n        String url = ossClient.generatePresignedUrl(config.getOssBucket(), objName, new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24)).toString();\n        ossClient.shutdown();\n        return url;\n    } catch (Exception e) {\n        e.printStackTrace();\n        ossClient.shutdown();\n        return null;\n    }\n}", "CodeBleu_score": 34.54880119123403}, {"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client.\n    OSS ossClient = new OSSClient(config);\n\n    // Upload the object.\n    PutObjectResult result = ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return result.getObjectUrl();\n}", "CodeBleu_score": 26.23766828628587}, {"code": "public String upload(String objName, byte[] content){\n\tString url = null;\n    try {\n        // Initialize the OSS client with the configuration\n        OSS ossClient = new OSSClient(config);\n\n        // Upload the file to the OSS bucket\n        PutObjectResult result = ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\n        // Shut down the OSS client\n        ossClient.shutdown();\n\n        // Generate the URL of the uploaded object\n        url = config.getEndpoint() + \"/\" + config.getBucketName() + \"/\" + objName;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return url;\n}", "CodeBleu_score": 37.62008944624844}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 26.27067021148933}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 27.550914887840104}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 27.550914887840104}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> httpHosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tRestClientBuilder builder = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()]));\n\t\t\tlowLevelClient = builder.build();\n\t\t\thighLevelClient = new RestHighLevelClient(lowLevelClient);\n\t\t}\n\t}", "CodeBleu_score": 64.94707637398362}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (restClient != null && restHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (restClient != null && restHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> httpHosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\t\trestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\trestHighLevelClient = new RestHighLevelClient(restClient);\n\t\t}\n\t}", "CodeBleu_score": 70.85141936657186}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (restClient != null && restHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (restClient != null && restHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> httpHosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\trestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\trestHighLevelClient = new RestHighLevelClient(restClient);\n\t\t}\n\t}", "CodeBleu_score": 66.11328911867682}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    if (clusterHostList == null) {\n        return hosts;\n    }\n    for (String host : clusterHostList.split(\",\")) {\n        String[] hostParts = host.split(\":\");\n        String hostName = hostParts[0];\n        int hostPort = clusterPort;\n        if (hostParts.length > 1) {\n            hostPort = Integer.parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(hostName, hostPort));\n    }\n    return hosts;\n}", "CodeBleu_score": 41.0190830518298}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n    if (clusterHostList != null) {\n        for (String host : clusterHostList.split(\",\")) {\n            String[] hostParts = host.split(\":\");\n            String hostName = hostParts[0];\n            int port = clusterPort;\n            if (hostParts.length > 1) {\n                port = Integer.parseInt(hostParts[1]);\n            }\n            httpHosts.add(new HttpHost(hostName, port));\n        }\n    }\n    return httpHosts;\n}", "CodeBleu_score": 42.459099369921056}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> httpHosts = new ArrayList<>();\n    String[] hosts = clusterHostList.split(\",\");\n    for (String host : hosts) {\n        String[] hostAndPort = host.split(\":\");\n        String hostname = hostAndPort[0];\n        int port = clusterPort;\n        if (hostAndPort.length > 1) {\n            port = Integer.parseInt(hostAndPort[1]);\n        }\n        httpHosts.add(new HttpHost(hostname, port));\n    }\n    return httpHosts;\n}", "CodeBleu_score": 45.05728381496633}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\ttry {\n\t\t\t\t// 1. Poll for a task from the queue.\n\t\t\t\tMap<String, Object> task = queueService.poll(QUEUE_NAME, 30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\t// 2. Check the task type.\n\t\t\t\t\tString taskType = (String) task.get(\"taskType\");\n\t\t\t\t\tif (taskType.equals(TASK_TYPE_SEND_PLAIN_TEXT_MESSAGE)) {\n\t\t\t\t\t\t// 3. Extract the recipient number and message data.\n\t\t\t\t\t\tString toNumber = (String) task.get(\"toNumber\");\n\t\t\t\t\t\tString message = (String) task.get(\"message\");\n\t\t\t\t\t\t// 4. Validate the data.\n\t\t\t\t\t\tif (toNumber != null && message != null && toNumber.length() > 0 && message.length() > 0) {\n\t\t\t\t\t\t\t// 5. Send the message.\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// 6. Log an error message.\n\t\t\t\t\t\t\tSystem.out.println(\"Invalid message data. toNumber: \" + toNumber + \", message: \" + message);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 7. Log an error message.\n\t\t\t\t\t\tSystem.out.println(\"Invalid task type: \" + taskType);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 44.12715986129957}, {"code": "protected void pollingWork() throws InterruptedException{\n\t// 30 seconds\n\t\tint timeout = 30000;\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\t// \u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u4e00\u4e2a\u4efb\u52a1\n\t\t\t\tTask task = getTaskFromQueue();\n\t\t\t\tif (task != null) {\n\t\t\t\t\t// \u4efb\u52a1\u7c7b\u578b\u4e3a\u77ed\u4fe1\n\t\t\t\t\tif (task.getTaskType().equals(TaskType.SEND_SMS)) {\n\t\t\t\t\t\t// \u83b7\u53d6\u77ed\u4fe1\u63a5\u6536\u8005\u53f7\u7801\n\t\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\t\t// \u83b7\u53d6\u77ed\u4fe1\u5185\u5bb9\n\t\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\t\t// \u9a8c\u8bc1\u53f7\u7801\u548c\u77ed\u4fe1\u5185\u5bb9\n\t\t\t\t\t\tif (isValidPhoneNumber(toNumber) && isValidMessage(message)) {\n\t\t\t\t\t\t\t// \u53d1\u9001\u77ed\u4fe1\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// \u77ed\u4fe1\u5185\u5bb9\u6216\u53f7\u7801\u65e0\u6548\n\t\t\t\t\t\t\tSystem.out.println(\"Invalid phone number or message data.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// \u4efb\u52a1\u7c7b\u578b\u65e0\u6548\n\t\t\t\t\t\tSystem.out.println(\"Invalid task type.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\t// \u53d1\u751f\u5f02\u5e38\n\t\t\t\te.printStackTrace();\n\t\t\t\t// \u53d1\u9001\u90ae\u4ef6\u901a\u77e5\n\t\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\t\tthis.getSmtpService().send(\"archerliyaqing@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5f02\u5e38\", e.getMessage());\n\t\t\t\t\tthis.getSmtpService", "CodeBleu_score": 24.513349428534813}, {"code": "protected void pollingWork() throws InterruptedException{\n\t// 30 seconds\n\t\tint timeout = 30000;\n\t\twhile (true) {\n\t\t\t// Poll for a new task\n\t\t\tTask task = this.getTaskQueue().poll(timeout, TimeUnit.MILLISECONDS);\n\t\t\tif (task != null) {\n\t\t\t\t// If a task was retrieved, check the type\n\t\t\t\tif (task.getTaskType().equals(TaskType.PLAIN_TEXT_MESSAGE)) {\n\t\t\t\t\t// If the task is a plain text message task, extract the recipient number and message data\n\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\t// Validate the data\n\t\t\t\t\tif (toNumber != null && !toNumber.isEmpty() && message != null && !message.isEmpty()) {\n\t\t\t\t\t\t// If the data is valid, send the message\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t// If an exception occurs, log an error message\n\t\t\t\t\t\t\tSystem.out.println(\"Error sending message to \" + toNumber);\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If the data is invalid, log an error message\n\t\t\t\t\t\tSystem.out.println(\"Invalid data for message to \" + toNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 31.200677867804348}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tSystem.out.println(content);\n\t\t\treturn content;\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t}", "CodeBleu_score": 67.99446261853723}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\thttpGet.addHeader(\"accept\", \"application/xml\");\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString responseContent = EntityUtils.toString(entity);\n\t\t\t\tSystem.out.println(responseContent);\n\t\t\t\treturn responseContent;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 55.72302889548604}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tString responseContent = null;\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\ttry {\n\t\t\tHttpResponse response = httpclient.execute(httpGet);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tresponseContent = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tSystem.out.println(responseContent);\n\t\t} catch (Exception e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\thttpclient.close();\n\t\t}\n\t\treturn responseContent;\n\t}", "CodeBleu_score": 52.17783149395508}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilder documentBuilder = newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tObject[] rootArray = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\tif (rootArray == null || rootArray.length != 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootArray[0], rootArray[1]);\n\treturn result;\n}", "CodeBleu_score": 52.16119108623721}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilder documentBuilder = newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(CHARSET)));\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tObject[] rootArray = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\tif (rootArray == null){\n\t\treturn null;\n\t}\n\tresult.put(rootArray[0], rootArray[1]);\n\treturn result;\n}", "CodeBleu_score": 46.715462239022365}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\tdocumentBuilderFactory.setNamespaceAware(true);\n\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tElement rootElement = document.getDocumentElement();\n\treturn decodeNodeToMap(rootElement, doTrim);\n}", "CodeBleu_score": 35.376842176961375}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing) {\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing. Enqueuing order for automatic shipping and invoicing.\");\n\t\tscheduleIfNotPostponed(orderRecord, TRX_NAME_AutoShipAndInvoice);\n\t}\n\telse {\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing. Enqueuing order for missing shipment schedule generation.\");\n\t\tscheduleIfNotPostponed(orderRecord, TRX_NAME_GenerateMissingSchedules);\n\t}\n}", "CodeBleu_score": 26.433864154927466}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (!isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\taddLog(orderRecord, MSG_AUTO_SHIP_AND_INVOICE_NOT_ELIGIBLE);\n\t\tscheduleIfNotPostponed(orderRecord);\n\t\treturn;\n\t}\n\n\taddLog(orderRecord, MSG_AUTO_SHIP_AND_INVOICE_ELIGIBLE);\n\tenqueueGenerateSchedules(orderRecord);\n}", "CodeBleu_score": 15.499241761643196}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tif (isEligibleForAutoProcessing) {\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing. Enqueuing for auto-processing.\");\n\t\tscheduleIfNotPostponed(orderRecord, getTrxName());\n\t} else {\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing. Enqueuing for missing shipment schedules.\");\n\t\tscheduleIfNotPostponed(orderRecord, X_C_Order.TRXNAME_CreateMissingShipmentSchedules);\n\t}\n}", "CodeBleu_score": 27.965011408676403}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 48.97051273215381}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->guard->getProvider()->retrieveByCredentials([\n        'email' => $request->email,\n    ]);\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, [\n        'password' => $request->password,\n    ])) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 56.22298163052346}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            $this->username() => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 49.52304173511525}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.39651022739653}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.39651022739653}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.39651022739653}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('login.id')\n        ? User::find($request->session()->get('login.id'))\n        : null;\n\n    $data = [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    if ($user) {\n        $data['publicKey'] = $user->createToken('webauthn')->publicKeyForWebauthn();\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 62.27857918515167}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('login.id');\n\n    $user = $user ? User::find($user) : null;\n\n    $data = $user ? [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n        'publicKey' => optional($user)->two_factor_secret\n            ? Webauthn::prepareAssertion()\n            : null,\n    ] : [];\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 65.43049311376072}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('login.id')\n        ? User::find($request->session()->get('login.id'))\n        : null;\n\n    $data = [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    if ($user) {\n        $data['publicKey'] = $user->createToken('webauthn')->publicKeyForWebauthn();\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 62.27857918515167}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tif ($token = UserToken::firstWhere('driver', $driver, 'driver_id', $socialite->getId())) {\n        $user = $token->user;\n\n        $this->checkUserAssociation($request, $user, $driver);\n\n        return $user;\n    }\n\n    return $this->getUserOrCreate($socialite);\n}", "CodeBleu_score": 38.72726706760147}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::firstWhere('driver', $driver)\n        ->firstWhere('driver_id', $socialite->getId());\n\n    if ($token) {\n        $user = $token->user;\n\n        $this->checkUserAssociation($request, $user, $driver);\n\n        return $user;\n    }\n\n    return $this->getUserOrCreate($socialite);\n}", "CodeBleu_score": 40.4352396635663}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$user = null;\n\n    // Check if the driver is already associated with a user\n    if ($userToken = UserToken::firstWhere('driver', $driver, 'driver_id', $socialite->getId())) {\n        // Retrieve the associated user\n        $user = $userToken->user;\n\n        // Check if the user is already associated with another account\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        // Create a new user\n        $user = $this->createUser($socialite);\n\n        // Associate the socialite token with the new user\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Authenticate the user\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 57.27800815865851}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n    if (! $this->webauthn->validateAssertion($credentials, $user)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 74.47128491679729}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    try {\n        $validated = WebauthnFacade::validateAssertion($credentials, $user);\n    } catch (WebAuthnException $e) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $validated;\n}", "CodeBleu_score": 67.40121676101397}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! WebauthnFacade::validateAssertion($credentials, $user)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 69.67651863149051}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n\n    if (! $email) {\n        $this->error('Please provide an email address.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $exception) {\n        $this->error(\"User with email {$email} not found.\");\n\n        return null;\n    }\n}", "CodeBleu_score": 73.2414362381372}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n    if (empty($email)) {\n        $this->error('No email provided.');\n        return null;\n    }\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"User with email {$email} not found.\");\n        return null;\n    }\n}", "CodeBleu_score": 70.71405480069993}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n\n    if (! $email) {\n        $this->error('Please provide an email.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (Exception $e) {\n        $this->error(\"User with email {$email} not found.\");\n\n        return null;\n    }\n}", "CodeBleu_score": 72.61076940530754}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (! config('scout.driver') === 'meilisearch') {\n        return;\n    }\n    if (! $this->option('flush')) {\n        return;\n    }\n    $this->artisan('scout:flush', ['--quiet' => true]);\n    $this->info('Flushed all Scout indexes.');\n}", "CodeBleu_score": 26.319128996741526}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.flush')) {\n        $this->artisan('scout:flush', ['model' => $this->option('model')]);\n        $this->info('Meilisearch indexes flushed.');\n    }\n}", "CodeBleu_score": 25.34410189061741}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush') && config('scout.driver') === 'meilisearch') {\n        $this->info('Flushing Scout indexes...');\n        $indexes = collect(config('scout.meilisearch.indexes'));\n        $indexes->each(function ($index) {\n            $this->artisan('scout:flush', [\n                'model' => (new $index)->getTable(),\n            ]);\n        });\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 48.95826001667886}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\n    $vcard->setUid($this->getUid($resource));\n\n    $this->exporters($resource->getType())\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 16.28808238384928}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\n    if ($vcard === null) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->exporters($resource::class)->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n    return $vcard;\n}", "CodeBleu_score": 19.116710476086173}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\n    if ($vcard === null) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->exporters($resource->getType())\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 18.52874758722598}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 82.58095522952158}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    if ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 85.57593883351498}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\n\n    if (!$obj) {\n        return false;\n    }\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    if ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 85.48135437652277}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'type' => 'file',\n        'description' => $data['description'],\n        'user_id' => auth()->guard()->user()->id,\n    ]);\n\n    $file = request()->file('file')->store('files');\n\n    return $this->create([\n        'activity_id' => $activity->id,\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => $file,\n    ]);\n}", "CodeBleu_score": 63.64682802455582}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard()->user()->id,\n        'type' => 'file',\n        'description' => $data['description'],\n    ]);\n\n    return $this->fileRepository->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('files'),\n        'activity_id' => $this->activityRepository->getLatest()->id,\n    ]);\n}", "CodeBleu_score": 41.61148075757836}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create($data);\n\n    $path = request()->file('file')->store('leads');\n\n    return $this->fileRepository->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => $path,\n        'lead_activity_id' => $this->activityRepository->getLatest()->id,\n        'user_id' => auth()->guard()->user()->id,\n    ]);\n}", "CodeBleu_score": 44.86177357052584}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    if (request()->routeIs('admin.*')) {\n        return $this->response('admin', $statusCode);\n    } else {\n        return redirect()->route('admin.session.index');\n    }\n}", "CodeBleu_score": 30.05941282723425}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n            $statusCode = $exception->getStatusCode();\n        } else {\n            $statusCode = 500;\n        }\n\n        $path = $this->getPath($exception);\n\n        if (in_array($statusCode, [404, 403])) {\n            return $this->response($path, $statusCode);\n        }\n\n        if ($exception instanceof ModelNotFoundException) {\n            return $this->response($path, 404);\n        }\n\n        if ($exception instanceof PDOException || $exception instanceof ParseError) {\n            return $this->response($path, 500);\n        }\n\n        return $this->response($path, $statusCode);\n    }", "CodeBleu_score": 55.91814900639221}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    $route = request()->route();\n\n    if ($route && $route->getName() == 'admin.session.create') {\n        return redirect()->route('admin.session.create');\n    }\n\n    if ($route && $route->getName() == 'customer.session.index') {\n        return redirect()->route('customer.session.index');\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->response('admin', 404);\n    }\n\n    if ($exception instanceof PDOException || $exception instanceof ParseError) {\n        return $this->response('admin', 500);\n    }\n\n    return $this->response('admin', $statusCode);\n}", "CodeBleu_score": 50.771090827800926}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('activity_ids');\n    $activityIds = explode(',', $activityIds);\n    $activityIds = array_filter($activityIds);\n\n    $updates = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        $event = new ActivityUpdated($activity);\n        Event::dispatch($event);\n\n        $this->activityRepository->update(['is_done' => request('is_done')], $activityId);\n\n        $event = new ActivityUpdated($activity);\n        Event::dispatch($event);\n\n        $updates++;\n    }\n\n    return response()->json(['success' => $updates > 0]);\n}", "CodeBleu_score": 47.41118472818474}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('activity_ids');\n    $isDone = request('is_done');\n    $updated = 0;\n    foreach ($activityIds as $activityId) {\n        event(new ActivityUpdating($activityId, $isDone));\n        $updated += $this->activityRepository->update($activityId, ['is_done' => $isDone]);\n        event(new ActivityUpdated($activityId, $isDone));\n    }\n    return response()->json(['updated' => $updated]);\n}", "CodeBleu_score": 37.34051603256191}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('activity_ids');\n    $isDone = request('is_done');\n\n    $updatedCount = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        event(new ActivityIsUpdating($activity, $isDone));\n\n        $updatedCount += $this->activityRepository->update($activity, ['is_done' => $isDone]);\n\n        event(new ActivityWasUpdated($activity, $isDone));\n    }\n\n    return response()->json([\n        'updatedCount' => $updatedCount,\n        'success' => $updatedCount > 0\n    ]);\n}", "CodeBleu_score": 40.75429108910381}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$activityIds = request('activityIds');\n     foreach ($activityIds as $activityId) {\n         Event::dispatch('activity.deleting', $activityId);\n         $this->activityRepository->delete($activityId);\n         Event::dispatch('activity.deleted', $activityId);\n     }\n     return response()->json([\n         'success' => true\n     ]);\n }", "CodeBleu_score": 40.95622241790247}, {"code": "<?\n public function massDestroy(){\n\t$activityIds = request('activityIds');\n     $activities = $this->activityRepository->findWhereIn('id', $activityIds);\n     foreach ($activities as $activity) {\n         Event::dispatch('activity.delete.before', $activity);\n         $this->activityRepository->delete($activity);\n         Event::dispatch('activity.delete.after', $activity);\n     }\n     return response()->json(['message' => trans('admin::app.activities.mass-delete-success')]);\n }", "CodeBleu_score": 38.51468960382838}, {"code": "<?\n public function massDestroy(){\n\t$ids = request()->get('ids');\n    $activities = $this->activityRepository->findWhereIn('id', $ids, ['id', 'name']);\n    foreach ($activities as $activity) {\n        event(new ActivityDeleting($activity));\n        $this->activityRepository->delete($activity->id);\n        event(new ActivityDeleted($activity));\n    }\n    return response()->json(['message' => trans('activities.mass_destroy_success')]);\n}", "CodeBleu_score": 32.05574390434388}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n    foreach ($cards as $card) {\n        if (request()->has($card['id'])) {\n            $card['selected'] = true;\n        } else {\n            $card['selected'] = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 38.431085694952905}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n     foreach (request()->all() as $card) {\n         foreach ($cards as $key => $value) {\n             if ($value['id'] == $card['id']) {\n                 $cards[$key]['selected'] = $card['selected'];\n             }\n         }\n     }\n\n     return response()->json($cards);\n }", "CodeBleu_score": 45.356609900781955}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n     foreach ($cards as $key => $card) {\n         if (request()->has($card['id'])) {\n             $cards[$key]['selected'] = true;\n         } else {\n             $cards[$key]['selected'] = false;\n         }\n     }\n     return response()->json($cards);\n }", "CodeBleu_score": 41.03098314300681}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\tevent(new ConfigurationStoring($this->configurationRepository));\n\n    $this->configurationRepository->create(request()->all());\n\n    event(new ConfigurationStored($this->configurationRepository));\n\n    session()->flash('success', trans('configuration.store.success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 40.8607348596836}, {"code": "<?\npublic function store(){\n\t$this->authorize('create', Configuration::class);\n\n    $data = $this->validateConfiguration();\n\n    $configuration = $this->configurationRepository->create($data);\n\n    event(new ConfigurationCreated($configuration));\n\n    session()->flash('success', trans('configuration.created'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 36.77294400906783}, {"code": "<?\npublic function store(){\n\tevent(new ConfigurationCreating($this->configurationRepository));\n\n    $this->configurationRepository->create(request()->all());\n\n    event(new ConfigurationCreated($this->configurationRepository));\n\n    session()->flash('success', trans('configuration.created'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 40.86156138371156}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/' . $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 90.36350647420629}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/' . $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 90.36350647420629}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tif(list == null || list.size() == 0) {\n        return badRequest(Utils.getErrorMessage(\"No models specified\"));\n    }\n\n    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for(String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setSort(\"name\");\n        adminModelSort.setType(\"asc\");\n        adminModelSorts.add(adminModelSort);\n    }\n\n    // Remove existing sort settings for the user\n    AdminModelSort.remove(getUserId());\n\n    // Save new sort settings in batch\n    AdminModelSort.saveBatch(adminModelSorts);\n\n    return ok(Utils.getSuccessMessage(\"Successfully set header model sort order\"));\n}", "CodeBleu_score": 40.757620118714286}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> modelSorts = new ArrayList<AdminModelSort>();\n  for (String modelName : list) {\n    AdminModelSort modelSort = new AdminModelSort();\n    modelSort.setModel(modelName);\n    modelSort.setSort(0);\n    modelSort.setType(0);\n    modelSorts.add(modelSort);\n  }\n  this.setSort(modelSorts);\n  return new SuccessResult();\n}", "CodeBleu_score": 25.93015290846058}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> modelSortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort modelSort = new AdminModelSort();\n        modelSort.setModel(model);\n        modelSort.setSort(1);\n        modelSortList.add(modelSort);\n    }\n    List<AdminModelSort> existingSortList = adminModelSortRepository.findByUserId(getUserId());\n    if (existingSortList != null) {\n        adminModelSortRepository.delete(existingSortList);\n    }\n    adminModelSortRepository.save(modelSortList);\n    return ok();\n}", "CodeBleu_score": 40.309661382650205}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if(userConfig != null) {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n    } else {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toJSONString());\n        userConfigService.save(userConfig);\n    }\n\n    return Result.ok();\n}", "CodeBleu_score": 62.99309343693675}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tJSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"key\",customKey);\n    jsonObject.put(\"value\",json);\n    UserConfig userConfig = userConfigService.queryUserConfigByName(jsonObject);\n    if (userConfig != null) {\n        userConfig.setValue(json);\n        userConfigService.updateById(userConfig);\n        return Result.success(\"success\");\n    }\n    UserConfig userConfig1 = new UserConfig();\n    userConfig1.setUserId(getUserId());\n    userConfig1.setName(customKey);\n    userConfig1.setValue(json);\n    userConfigService.save(userConfig1);\n    return Result.success(\"success\");\n}", "CodeBleu_score": 51.05954542653346}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tJSONObject result = new JSONObject();\n        try {\n            if (json.length() == 0) {\n                throw new Exception(\"JSON array is empty\");\n            }\n            String userId = getUserId();\n            UserConfig userConfig = queryUserConfigByName(customKey, userId);\n            if (userConfig == null) {\n                userConfig = new UserConfig();\n                userConfig.setName(customKey);\n                userConfig.setUserId(userId);\n                userConfig.setValue(json.toString());\n                userConfig.setStatus(UserConfig.STATUS_ACTIVE);\n                userConfig.setDescription(\"Custom setting\");\n                userConfigService.save(userConfig);\n            } else {\n                userConfig.setValue(json.toString());\n                userConfigService.updateById(userConfig);\n            }\n            result.put(\"success\", true);\n        } catch (Exception e) {\n            result.put(\"success\", false);\n            result.put(\"message\", e.getMessage());\n        }\n        return ok(result);\n    }", "CodeBleu_score": 48.99862742937895}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(ResultCode.USER_NOT_EXIST);\n    }\n    user.setDeptName(adminDeptService.getNameByDeptId(user.getDeptId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 43.61966180889094}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.fail(ResultCode.USER_NOT_EXIST);\n    }\n    user.setDeptName(adminDeptService.getNameByDeptId(user.getDeptId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 43.68694929166741}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        return Result.wrapFail(\"User does not exist\");\n    }\n    String deptName = adminDeptService.getNameByDeptId(adminUser.getDeptId());\n    adminUser.setDeptName(deptName);\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n    return Result.wrapSuccess(adminUser);\n}", "CodeBleu_score": 50.80592538590002}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\tString userId = getUserId();\n \tString query = \"SELECT * FROM readNotice WHERE userId = :userId\";\n \tList<ReadNotice> readNoticeList = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n \tif (readNoticeList.size() > 1) {\n \t\tfor (ReadNotice rn : readNoticeList) {\n \t\t\trn.status = 1;\n \t\t\trn.update();\n \t\t}\n \t} else {\n \t\tReadNotice rn = new ReadNotice();\n \t\trn.userId = userId;\n \t\trn.status = 1;\n \t\trn.save();\n \t}\n \treturn ok(\"Success\");\n }", "CodeBleu_score": 25.926149183881165}, {"code": " public Result readNotice() {\n\t", "CodeBleu_score": 0.7524317810107344}, {"code": " public Result readNotice() {\n\tString userId = getUserId();\n     List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n     if (readNotices.size() > 1) {\n         for (ReadNotice readNotice : readNotices) {\n             readNotice.status = 1;\n             readNotice.update();\n         }\n     } else if (readNotices.size() == 0) {\n         ReadNotice readNotice = new ReadNotice();\n         readNotice.user_id = userId;\n         readNotice.status = 1;\n         readNotice.save();\n     }\n     return ok(\"Success\");\n }", "CodeBleu_score": 25.326712760134956}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t// Retrieve the existing configuration with the name \"companyInfo\"\n    Configuration configuration = configurationRepository.lambdaQuery().eq(Configuration::getName, \"companyInfo\").one();\n\n    if (configuration == null) {\n        // If not found, create a new configuration with default values\n        configuration = new Configuration();\n        configuration.setName(\"companyInfo\");\n        configuration.setDescription(\"Company information\");\n        configuration.setStatus(Status.ACTIVE);\n    }\n\n    // Update the configuration's value with the provided company information in JSON format\n    configuration.setValue(JSON.toJSONString(adminCompanyBO));\n\n    // Save or update the configuration\n    configurationRepository.saveOrUpdate(configuration);\n}", "CodeBleu_score": 46.56574691049304}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfigBO adminConfigBO = adminConfigDAO.lambdaQuery()\n            .eq(AdminConfigBO::getName, \"companyInfo\")\n            .one();\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(\"companyInfo\");\n        adminConfigBO.setDescription(\"Company information\");\n        adminConfigBO.setStatus(AdminConfigBO.Status.ENABLED);\n    }\n    adminConfigBO.setValue(JSONObject.toJSONString(adminCompanyBO));\n    adminConfigDAO.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 48.46688928839398}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tString name = \"companyInfo\";\n    Configuration configuration = configurationService.getConfiguration(name);\n    if (configuration == null) {\n        configuration = new Configuration();\n        configuration.setName(name);\n        configuration.setDescription(\"Company Information\");\n        configuration.setStatus(Configuration.Status.ACTIVE);\n        configuration.setValue(\"{\\\"companyName\\\":\\\"\\\",\\\"companyAddress\\\":\\\"\\\",\\\"companyCity\\\":\\\"\\\",\\\"companyState\\\":\\\"\\\",\\\"companyZipCode\\\":\\\"\\\",\\\"companyCountry\\\":\\\"\\\",\\\"companyPhone\\\":\\\"\\\",\\\"companyEmail\\\":\\\"\\\"}\");\n        configurationService.saveOrUpdate(configuration);\n    }\n    JSONObject jsonObject = JSONObject.parseObject(configuration.getValue());\n    jsonObject.put(\"companyName\", adminCompanyBO.getCompanyName());\n    jsonObject.put(\"companyAddress\", adminCompanyBO.getCompanyAddress());\n    jsonObject.put(\"companyCity\", adminCompanyBO.getCompanyCity());\n    jsonObject.put(\"companyState\", adminCompanyBO.getCompanyState());\n    jsonObject.put(\"companyZipCode\", adminCompanyBO.getCompanyZipCode());\n    jsonObject.put(\"companyCountry\", adminCompanyBO.getCompanyCountry());\n    jsonObject.put(\"companyPhone\", adminCompanyBO.getCompanyPhone());\n    jsonObject.put(\"companyEmail\", adminCompanyBO.getCompanyEmail());\n    configuration.setValue(jsonObject.toJSONString());\n    configurationService.saveOrUpdate(configuration);\n}", "CodeBleu_score": 39.594314870697175}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString query = \"SELECT admin_config_key, admin_config_value FROM admin_config WHERE admin_config_key = 'admin_company_config'\";\n    List<Map<String, Object>> results = lambdaQuery(query);\n    if (results.size() > 0) {\n        String adminConfigValue = (String) results.get(0).get(\"admin_config_value\");\n        return parseObject(adminConfigValue, AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 34.89639576326344}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString query = \"SELECT * FROM admin_config WHERE key = 'admin_company'\";\n    List<Map<String, Object>> rows = jdbcTemplate.queryForList(query);\n    if (rows.size() > 0) {\n        Map<String, Object> row = rows.get(0);\n        String value = (String) row.get(\"value\");\n        return parseObject(value, AdminCompanyBO.class);\n    } else {\n        return new AdminCompanyBO();\n    }\n}", "CodeBleu_score": 33.108673675982935}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString key = \"admin.company\";\n    String value = null;\n    try {\n        value = getValue(key);\n    } catch (Exception e) {\n        log.error(\"Error getting admin configuration: \" + e.getMessage());\n        return new AdminCompanyBO();\n    }\n    if (value == null) {\n        return new AdminCompanyBO();\n    }\n    AdminCompanyBO adminCompany = new AdminCompanyBO();\n    try {\n        adminCompany = parseObject(value, AdminCompanyBO.class);\n    } catch (Exception e) {\n        log.error(\"Error parsing admin configuration: \" + e.getMessage());\n        return new AdminCompanyBO();\n    }\n    return adminCompany;\n}", "CodeBleu_score": 37.17317510315304}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t// Create a new AdminConfig object for each string in the list.\n   List<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n   for (String string : stringList) {\n     AdminConfig adminConfig = new AdminConfig();\n     adminConfig.setName(\"LogWelcomeSpeech\");\n     adminConfig.setValue(string);\n     adminConfigList.add(adminConfig);\n   }\n\n   // Remove any existing configurations with the same name.\n   List<AdminConfig> existingAdminConfigList = getLogWelcomeSpeech();\n   for (AdminConfig adminConfig : existingAdminConfigList) {\n     remove(adminConfig);\n   }\n\n   // Save the new configurations in batch.\n   saveBatch(adminConfigList);\n }", "CodeBleu_score": 40.1944740059224}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t// Create a list of AdminConfig objects\n\t\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n\n\t\t// Create a new AdminConfig object for each string in the list\n\t\tfor (String string : stringList) {\n\t\t\tAdminConfig config = new AdminConfig();\n\t\t\tconfig.setName(string);\n\t\t\tconfig.setStatus(AdminConfig.ACTIVE);\n\t\t\tconfig.setValue(\"\");\n\t\t\tconfig.setType(AdminConfig.TEXT);\n\t\t\tconfigList.add(config);\n\t\t}\n\n\t\t// Remove the existing configuration with the specified name\n\t\tAdminConfig[] configs = AdminConfig.list(AdminConfig.LOG_WELCOME_SPEECH);\n\t\tif (configs != null) {\n\t\t\tfor (AdminConfig config : configs) {\n\t\t\t\tif (config.getName().equals(LOG_WELCOME_SPEECH_NAME)) {\n\t\t\t\t\tconfig.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Save the new configuration in batch\n\t\tAdminConfig.save(configList.toArray(new AdminConfig[0]));\n\t}", "CodeBleu_score": 40.20124239964573}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\ttry {\n     AdminConfig.remove(getLogWelcomeSpeechName());\n     AdminConfig.save();\n\n     for (String string : stringList) {\n       AdminConfig config = AdminConfig.create(\"LogWelcomeSpeech\", getLogWelcomeSpeechName());\n       config.setValue(string);\n     }\n\n     AdminConfig.save();\n   } catch (Exception e) {\n     e.printStackTrace();\n   }\n }", "CodeBleu_score": 32.22898201123575}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Get the current user ID and user details.\n    Long userId = getUserId();\n    User user = getById(userId);\n    String username = user.getUsername();\n\n    // Check the provided password against the stored password.\n    String password = adminInitDataBO.getPassword();\n    String salt = user.getSalt();\n    String hashedPassword = getPassword(password, salt);\n    if (!hashedPassword.equals(user.getPassword())) {\n        throw new InvalidPasswordException();\n    }\n\n    // Generate a temporary access code.\n    String code = randomInt(100000, 999999) + \"\";\n\n    // Store the code in Redis with a 10-minute expiration.\n    getRedis().setex(username, 600, code);\n\n    // Return the code.\n    return code;\n}", "CodeBleu_score": 38.69205720950285}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Get the user ID and user details\n    String userId = getUserId(adminInitDataBO);\n    AdminInitDataBO user = getById(userId);\n    // Check the password\n    if (!verify(adminInitDataBO, user.getPassword(), user.getSalt())) {\n        throw new AuthenticationException(\"Invalid password\");\n    }\n    // Generate a temporary access code\n    String accessCode = randomInt(100000, 999999) + \"\";\n    // Store the access code in Redis with a 10-minute expiration\n    getRedis().setex(userId, accessCode, 600);\n    // Return the access code\n    return accessCode;\n}", "CodeBleu_score": 24.942203642638994}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Get the current user ID\n\tLong userId = getUserId();\n\t// Get the user details, including the username\n\tAdminInitDataBO user = getById(userId);\n\t// Check the provided password against the stored password using the username and salt\n\tif (!PasswordUtils.verify(adminInitDataBO.getPassword(), user.getPassword(), user.getSalt())) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\t// Generate a temporary access code\n\tString accessCode = RandomUtils.randomInt(100000, 999999) + \"\";\n\t// Store the access code in Redis with a 10-minute expiration\n\tgetRedis().setex(RedisConstants.ADMIN_ACCESS_CODE + accessCode, 600, userId + \"\");\n\t// Return the access code\n\treturn accessCode;\n}", "CodeBleu_score": 29.143933225932027}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tString userId = getUserId();\n    String key = \"unauth:\" + userId;\n    String unauthUrls = get(key);\n    if (unauthUrls == null) {\n        return false;\n    }\n    return unauthUrls.contains(getRequest().getRequestURI());\n}", "CodeBleu_score": 26.670853012407587}, {"code": "private boolean verifyInitAuth(){\n\tString userId = getUserId();\n    String key = \"unauth:\" + userId;\n    Set<String> urls = getRedis().smembers(key);\n    if (urls.contains(getRequest().getRequestURI())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 30.11271621616034}, {"code": "private boolean verifyInitAuth(){\n\tString userId = getUserId();\n    if (userId == null) {\n        return true;\n    }\n    String key = \"unauth:\" + userId;\n    List<String> unauthUrls = get(key);\n    if (unauthUrls == null) {\n        return false;\n    }\n    return contains(unauthUrls, getRequestURI());\n}", "CodeBleu_score": 30.53833971225123}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// Start a batch session\n    Session session = sessionFactory.openSession();\n    Transaction tx = null;\n    try {\n        tx = session.beginTransaction();\n        // Save role-menu associations in batches\n        int count = 0;\n        for (Integer menuId : menuIdList) {\n            AdminRoleMenu roleMenu = new AdminRoleMenu();\n            roleMenu.setRoleId(roleId);\n            roleMenu.setMenuId(menuId);\n            session.save(roleMenu);\n            if (++count % 20 == 0) { // 20, same as the JDBC batch size\n                // Flush a batch of inserts and release memory.\n                session.flush();\n                session.clear();\n            }\n        }\n        tx.commit();\n    } catch (Exception e) {\n        if (tx != null) {\n            tx.rollback();\n        }\n        e.printStackTrace();\n    } finally {\n        session.close();\n    }\n}", "CodeBleu_score": 38.5314949652016}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// Delete old role-menu associations\n\tadminRoleMenuDao.deleteByRoleId(roleId);\n\n\t// Assign new role-menu associations\n\tList<AdminRoleMenu> list = new ArrayList<>(menuIdList.size());\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu rm = new AdminRoleMenu();\n\t\trm.setRoleId(roleId);\n\t\trm.setMenuId(menuId);\n\n\t\tlist.add(rm);\n\t}\n\tadminRoleMenuDao.saveBatch(list);\n}", "CodeBleu_score": 48.374866964558514}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// Start a batch\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    // Assign each menu ID to the specified role ID\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    // Save the batch\n    adminRoleMenuMapper.insertList(roleMenuList);\n}", "CodeBleu_score": 57.62543106604956}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index).source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.384942784782254}, {"code": "public void saveSysLog(SysLog sysLog) {\n\ttry {\n            String index = getSysLogIndex();\n            Map<String, Object> map = beanToMap(sysLog);\n            map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n            remove(map, \"id\");\n            IndexRequest indexRequest = new IndexRequest(index).source(map);\n            restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n                @Override\n                public void onResponse(IndexResponse indexResponse) {\n                    log.info(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u6210\u529f,index:{},id:{},status:{},msg:{}\", index, indexResponse.getId(), indexResponse.status().getStatus(), indexResponse.status().getReasonPhrase());\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25,msg:{}\", e.getMessage());\n                }\n            });\n        } catch (Exception e) {\n            log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 46.76762807388606}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index).source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.384942784782254}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //\u6392\u5e8f\n        searchSourceBuilder.sort(new FieldSortBuilder(\"createTime\").order(SortOrder.DESC));\n        //\u6392\u9664\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"ip\", \"url\", \"method\", \"requestBody\", \"responseBody\", \"createTime\"}, null);\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n            return new BasePage<>();\n        }\n        SearchHits hits = searchResponse.getHits();\n        long totalHits = hits.getTotalHits().value;\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit hit : hits) {\n            SysLog sysLog = new SysLog();\n            sysLog.setId(hit.getId());\n            sysLog.setUserId(hit.getSourceAsMap().get(\"userId\").toString());\n            sysLog.setModel(hit.getSourceAsMap().get(\"model\").toString());\n            sysLog.setSubModelLabel(hit.getSourceAsMap().get(\"subModelLabel\").toString());\n            sysLog.setIp(hit.getSourceAsMap().get(\"ip\").toString());\n            sysLog.setUrl(hit.getSourceAsMap().get(\"url\").toString());\n            sysLog.setMethod(hit.getSourceAsMap().get(\"method\").toString());\n            sysLog.setRequestBody(hit.getSourceAsMap().get(\"requestBody\").toString());\n            sysLog.setResponseBody(hit.getSourceAsMap().get(\"responseBody\").toString());\n            sysLog.setCreateTime(hit.getSourceAsMap().get(\"createTime\").toString());\n            sysLogList.add(sysLog);\n        }", "CodeBleu_score": 52.20257686907729}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //sort\n        searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        //exclude\n        searchSourceBuilder.fetchSource(new String[]{\"id\",\"userId\",\"username\",\"ip\",\"model\",\"subModelLabel\",\"createTime\"}, null);\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = null;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        if (searchResponse == null) {\n            return null;\n        }\n        SearchHits searchHits = searchResponse.getHits();\n        SearchHit[] hits = searchHits.getHits();\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit hit : hits) {\n            SysLog sysLog = mapToBean(hit.getSourceAsMap(), SysLog.class);\n            sysLogList.add(sysLog);\n        }\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setList(sysLogList);\n        basePage.setTotal(searchHits.getTotalHits().value);\n        basePage.setPage(querySysLogBO.getPage());\n        basePage.setPageSize(querySysLogBO.getLimit());\n        return basePage;\n    }", "CodeBleu_score": 57.9408087222794}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// 1. Initialize the search criteria\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        // 2. Sort the results by creation time in descending order\n        searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        // 3. Exclude specific fields from the response\n        searchSourceBuilder.fetchSource(new String[]{\"userId\", \"username\", \"model\", \"subModelLabel\", \"ip\", \"action\", \"method\", \"params\", \"result\", \"createTime\"}, null);\n        // 4. Execute the search request using a REST client\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = null;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        // 5. Map the search results to SysLog objects\n        List<SysLog> sysLogList = null;\n        if (searchResponse != null) {\n            SearchHits hits = searchResponse.getHits();\n            sysLogList = Stream.of(hits.getHits()).map(SearchHit::getSourceAsMap).map(source -> {\n                SysLog sysLog = new SysLog();\n                sysLog.setUserId(Integer.parseInt(source.get(\"userId\").toString()));\n                sysLog.setUsername(source.get(\"username\").toString());\n                sysLog.setModel(source.get(\"model\").toString());\n                sysLog.setSubModelLabel(source.get(\"subModelLabel\").toString());\n                sysLog.setIp(source.get(\"ip\").toString());\n                sysLog.setAction(source.get(\"action\").toString());\n                sysLog.setMethod(source.get(\"method\").toString());\n                sysLog.setParams(source.get(\"params\").toString());\n                sysLog.setResult(source.get(\"result\").toString());\n                sysLog.setCreateTime(DateUtil.parse", "CodeBleu_score": 45.47521946167122}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n}", "CodeBleu_score": 77.80868032338827}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n}", "CodeBleu_score": 77.80868032338827}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest);\n        reject(err.message);\n      });\n  });\n}", "CodeBleu_score": 80.54922768880213}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn module.getDependentModuleIds().stream()\n      .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n      .map(moduleId -> {\n        circularDependencyCheckSet.add(moduleId);\n        return moduleId;\n      })\n      .flatMap(moduleId -> getModule(moduleId).onErrorContinue((error, o) -> {\n        warn(\"Could not retrieve module with ID \" + moduleId + \" for application module \" + module.getId() + \". Skipping.\");\n      }))\n      .collectList()\n      .flatMap(modules -> {\n        circularDependencyCheckSet.remove(module.getId());\n        return Flux.fromIterable(modules);\n      });\n}", "CodeBleu_score": 52.93459469034752}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn getLiveModules()\n                .filter(m -> !m.getId().equals(module.getId()))\n                .filter(m -> m.getDependencies().contains(module.getId()))\n                .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n                .doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n                .flatMapMany(m -> getDependentModules(m, circularDependencyCheckSet))\n                .onErrorContinue((err, obj) -> warn(\"Error while retrieving dependent modules for module {}: {}\", module.getId(), getMessage(err)))\n                .collectList()\n                .flatMapMany(modules -> fromIterable(modules));\n    }", "CodeBleu_score": 49.479376083924656}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn moduleRepository.findByDependentModuleId(module.getId())\n                .filter(application -> !circularDependencyCheckSet.contains(application.getId()))\n                .flatMap(application -> {\n                    circularDependencyCheckSet.add(application.getId());\n                    return getDependentModules(application, circularDependencyCheckSet);\n                })\n                .onErrorContinue((throwable, o) -> {\n                    logger.warn(getMessage(throwable));\n                    return null;\n                });\n    }", "CodeBleu_score": 48.420216021351926}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = null;\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        } else {\n            data = dataBuffer.asByteArray();\n        }\n        DataBufferUtils.release(dataBuffer);\n        Asset asset = new Asset();\n        asset.setData(data);\n        asset.setContentType(srcContentType.toString());\n        return asset;\n    }", "CodeBleu_score": 44.7136554511374}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tAsset asset = new Asset();\n        asset.setContentType(srcContentType.toString());\n        asset.setData(createThumbnail ? resizeImage(dataBuffer) : dataBuffer.asByteArray());\n        DataBufferUtils.release(dataBuffer);\n        return asset;\n    }", "CodeBleu_score": 28.206513357751096}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tAsset asset = new Asset();\n        asset.setContentType(srcContentType);\n        asset.setData(resizeImage(dataBuffer));\n        DataBufferUtils.release(dataBuffer);\n        return asset;\n    }", "CodeBleu_score": 24.403956513349094}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n            });\n}", "CodeBleu_score": 44.35318240794871}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                exchange.getResponse().getHeaders().setContentType(asset.getContentType());\n                return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n            });\n}", "CodeBleu_score": 35.81045382895447}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n            });\n}", "CodeBleu_score": 36.47715045446782}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getMode()\n\t\t.flatMapIterable(mode -> {\n\t\t\tif (mode == WorkspaceMode.SAAS) {\n\t\t\t\treturn Collections.emptyList();\n\t\t\t} else {\n\t\t\t\treturn getOrganizationInEnterpriseMode()\n\t\t\t\t\t.map(org -> org.getAuthConfigs())\n\t\t\t\t\t.collectList()\n\t\t\t\t\t.block();\n\t\t\t}\n\t\t})\n\t\t.flatMapIterable(authConfigs -> authConfigs)\n\t\t.map(authConfig -> {\n\t\t\treturn new FindAuthConfig()\n\t\t\t\t.setAuthConfig(authConfig)\n\t\t\t\t.setWorkspace(getWorkspace());\n\t\t});\n}", "CodeBleu_score": 28.035382850221914}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getMode()\n        .flatMapIterable { mode ->\n            if (mode == WorkspaceMode.ENTERPRISE) {\n                return getOrganizationInEnterpriseMode()\n                    .flatMap { organization ->\n                        getWorkspace(organization)\n                            .flatMap { workspace ->\n                                getAuthConfigs(workspace)\n                            }\n                    }\n                    .collectList()\n                    .map { authConfigs ->\n                        authConfigs.stream()\n                            .map { authConfig ->\n                                FindAuthConfig(\n                                    authConfig.name,\n                                    authConfig.config,\n                                    authConfig.organization,\n                                    authConfig.workspace,\n                                    authConfig.id\n                                )\n                            }\n                            .collect(Collectors.toList())\n                    }\n            } else {\n                return Flux.empty()\n            }\n        }\n}", "CodeBleu_score": 21.656073594513682}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (workspace.getMode() == WorkspaceMode.SAAS) {\n        return Flux.empty()\n    }\n\n    return getOrganizationInEnterpriseMode()\n        .flatMapIterable { it.getAuthConfigs() }\n        .map { FindAuthConfig.from(it) }\n}", "CodeBleu_score": 21.647721670996884}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.MongockApplicationRunner.builder()\n            .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n            .setSpringContext(springContext)\n            .addChangeLogsScanPackages(\"com.example.mongock.changelogs\")\n            .setReadConcern(ReadConcern.MAJORITY)\n            .setWriteConcern(WriteConcern.MAJORITY)\n            .setDefaultLockQuickConfig()\n            .buildApplicationRunner();\n}", "CodeBleu_score": 34.65587517113298}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.MongockApplicationRunner.builder()\n        .setDriver(mongoTemplate)\n        .setSpringContext(springContext)\n        .setReadConcern(ReadConcern.MAJORITY)\n        .setWriteConcern(WriteConcern.MAJORITY)\n        .addChangeLogsScanPackages(\"com.example.mongock.changelogs\")\n        .withJournal(true)\n        .buildApplicationRunner();\n}", "CodeBleu_score": 34.38155323418805}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n        .setDriver(mongoTemplate)\n        .setSpringContext(springContext)\n        .addChangeLogsScanPackages(\"com.example.changelogs\")\n        .buildApplicationRunner();\n}", "CodeBleu_score": 23.73323310164658}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory,\n            mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 76.21452909555282}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n}", "CodeBleu_score": 76.66112123305011}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 77.95915380666187}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQueryRecord::getDsl)\n                .switchIfEmpty(getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl)\n                        .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\")));\n    }", "CodeBleu_score": 56.25863543885837}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQueryRecord::getDsl)\n                .switchIfEmpty(getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl)\n                );\n    }", "CodeBleu_score": 60.78298951738839}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n            .flatMap(latestRecord -> {\n                if (latestRecord.getDsl() != null) {\n                    return Mono.just(latestRecord.getDsl());\n                } else {\n                    return getById(libraryQueryId)\n                            .map(LibraryQuery::getDsl);\n                }\n            });\n}", "CodeBleu_score": 52.28678940904716}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDuration timeout = getQueryTimeout(timeoutStr);\n\n        return Mono.defer(() -> {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            }\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        })\n                .timeout(timeout)\n                .onErrorMap(throwable -> {\n                    if (throwable instanceof TimeoutException) {\n                        return new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_TIMEOUT_ERROR,\n                                \"Query execution timed out.\"\n                        );\n                    }\n                    return throwable;\n                })\n                .onErrorResume(error -> {\n                    log.error(\"Error executing query: {}\", error.getMessage());\n                    return Mono.just(QueryExecutionResult.builder().error(error).build());\n                });\n    }", "CodeBleu_score": 53.62076803737129}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDuration timeout = timeoutStr != null ? Duration.ofMillis(Long.parseLong(timeoutStr)) : Duration.ofMillis(0);\n        Mono<QueryExecutionResult> queryExecutionResultMono = timeout.isZero()\n                ? executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                : executeLocally(datasource, queryConfig, requestParams, queryVisitorContext).timeout(timeout);\n        return queryExecutionResultMono\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof TimeoutException) {\n                        return Mono.just(QueryExecutionResult.builder().withExecutionTime(timeout).withTimeout(true).build());\n                    } else if (throwable instanceof AppsmithPluginException) {\n                        return Mono.error(throwable);\n                    } else {\n                        return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, throwable.getMessage()));\n                    }\n                });\n    }", "CodeBleu_score": 45.83849621783583}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tif (isJsDatasourcePlugin(datasource.getType())) {\n            return executeByNodeJs(datasource, queryConfig, requestParams);\n        }\n\n        return defer(() -> executeLocally(datasource, queryConfig, requestParams, queryVisitorContext))\n                .timeout(parseQueryTimeoutMs(timeoutStr))\n                .onErrorMap(throwable -> {\n                    if (throwable instanceof TimeoutException) {\n                        return new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_TIMEOUT_ERROR,\n                                \"Query execution timed out. Please try again with a shorter query.\"\n                        );\n                    }\n                    return throwable;\n                })\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof AppsmithPluginException) {\n                        return Mono.just(QueryExecutionResult.builder()\n                                .error(QueryExecutionError.builder()\n                                        .message(throwable.getMessage())\n                                        .type(QueryErrorType.PLUGIN_ERROR)\n                                        .build())\n                                .build());\n                    }\n                    return Mono.just(QueryExecutionResult.builder()\n                            .error(QueryExecutionError.builder()\n                                    .message(getMessage(throwable))\n                                    .type(QueryErrorType.GENERIC_PLUGIN_ERROR)\n                                    .build())\n                            .build());\n                });\n    }", "CodeBleu_score": 49.74657569478034}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn getQueryExecutor(datasource)\n                .flatMap(queryExecutor -> buildQueryExecutionContextMono(datasource, queryConfig, requestParams, queryExecutor))\n                .flatMap(queryExecutionContext -> getOrCreateConnection(datasource, queryExecutionContext))\n                .flatMap(connection -> getT1(connection, queryExecutionContext))\n                .flatMap(this::getDetailConfig)\n                .flatMap(queryExecutionContext -> doExecuteQuery(queryExecutionContext, connection))\n                .doOnError(throwable -> {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                })\n                .onErrorResume(throwable -> Mono.just(new QueryExecutionResult(throwable)));\n    }", "CodeBleu_score": 39.35479930818852}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// Get the query executor for the datasource type\n        QueryExecutor queryExecutor = getQueryExecutor(datasource.getDatasourceConfiguration());\n\n        // Build the query execution context\n        QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryExecutor, datasource, queryConfig, requestParams,\n                queryVisitorContext);\n\n        // Acquire a connection from the datasource connection pool\n        return getOrCreateConnection(datasource, queryExecutionContext)\n                .flatMap(connection -> {\n\n                    // Execute the query using the connection\n                    return doExecuteQuery(queryExecutionContext, connection)\n                            .zipWhen(result -> {\n\n                                // Release the connection back to the datasource connection pool\n                                return releaseConnection(datasource, connection);\n                            });\n                })\n                .onErrorResume(error -> {\n\n                    // Release the connection back to the datasource connection pool\n                    return releaseConnection(datasource, null)\n                            .then(Mono.error(error));\n                });\n    }", "CodeBleu_score": 45.37457579502272}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn getQueryExecutor(datasource)\n                .flatMap(queryExecutor -> buildQueryExecutionContextMono(queryExecutor, datasource, queryConfig, requestParams,\n                        queryVisitorContext))\n                .flatMap(queryExecutionContext -> getOrCreateConnection(datasource, queryExecutionContext)\n                        .flatMap(connection -> getT1(connection, queryExecutionContext)))\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap(this::getT2)\n                .flatMap", "CodeBleu_score": 21.702862267869357}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        timeoutStr = DEFAULT_QUERY_TIMEOUT_MS + \"ms\";\n    }\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    String valueStr = timeoutStr.substring(0, unitIndex);\n    double value = Double.parseDouble(valueStr);\n    int timeoutMs = convertToMs(value, unit);\n    if (timeoutMs < 1 || timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout must be between 1ms and \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n    }\n    return timeoutMs;\n}", "CodeBleu_score": 49.59596360917638}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    int value = Integer.parseInt(timeoutStr.substring(0, unitIndex));\n    int timeoutMs = convertToMs(value, unit);\n\n    if (timeoutMs < MIN_QUERY_TIMEOUT_MS || timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout must be between \" + MIN_QUERY_TIMEOUT_MS + \" and \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 48.20798705240713}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n      return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    String numericValue = timeoutStr.substring(0, unitIndex);\n    double value;\n    try {\n      value = Double.parseDouble(numericValue);\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"Invalid timeout value: \" + timeoutStr + \". The timeout value must be a valid number.\");\n    }\n    int timeoutMs = convertToMs(value, unit);\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n      throw new BadRequestException(\n          \"Invalid timeout value: \" + timeoutStr + \". The timeout value must be less than \" + MAX_QUERY_TIMEOUT_MS + \" ms.\");\n    }\n    return timeoutMs;\n  }", "CodeBleu_score": 55.62534960994907}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(currentOrganizationId, application.getId())\n                .flatMap(query -> {\n                    if (query.getDatasource() == null) {\n                        return Mono.error(new AppsmithException(AppsmithError.INVALID_PARAMETER, FieldName.DATASOURCE));\n                    }\n                    return Mono.just(query.getDatasource().getId());\n                })\n                .collectList()\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, application.getName()));\n                    }\n                    return Mono.zip(\n                            Mono.just(currentOrganizationId),\n                            Mono.just(visitorId),\n                            Flux.fromIterable(datasourceIds)\n                                    .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                                    .collectList()\n                    );\n                })\n                .map(objects -> {\n                    String currentOrganizationId = objects.getT1();\n                    String visitorId = objects.getT2();\n                    List<String> copiedDatasourceIds = objects.getT3();\n\n                    List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n                    for (int i = 0; i < datasourceIds.size(); i++) {\n                        datasourceIdPairs.add(Pair.of(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n                    }\n                    return datasourceIdPairs;\n                });\n    }", "CodeBleu_score": 43.43409339969661}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tfinal String templateOrganizationId = application.getOrganizationId();\n        final String templateApplicationId = application.getId();\n\n        return getLiveQueries(templateOrganizationId, templateApplicationId)\n                .flatMap(liveQueries -> {\n                    if (CollectionUtils.isEmpty(liveQueries)) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.LIVE_QUERIES, templateApplicationId));\n                    }\n\n                    return Flux.fromIterable(liveQueries)\n                            .flatMap(query -> {\n                                if (query.getDatasource() == null) {\n                                    return Mono.empty();\n                                }\n\n                                return doCopyDatasource(currentOrganizationId, query.getDatasource().getId(), visitorId)\n                                        .map(datasourceId -> new Pair<>(query.getDatasource().getId(), datasourceId));\n                            })\n                            .collectList();\n                });\n    }", "CodeBleu_score": 33.93089385581856}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n                .flatMap(query -> getDatasourceId(query))\n                .collectList()\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, application.getName()));\n                    }\n\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                            .collectList();\n                });\n    }", "CodeBleu_score": 37.61283055319493}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (isSystemStatic(datasource)) {\n                    return Mono.just(datasource.getId());\n                } else if (isLegacyQuickRestApi(datasource)) {\n                    return Mono.just(datasource.getId());\n                } else if (isLegacyOpenblocksApi(datasource)) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 51.60049578231642}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n\n            .flatMap(datasource -> {\n                if (isSystemStatic(datasource)) {\n                    return just(datasource.getId());\n                }\n\n                if (isLegacyQuickRestApi(datasource)) {\n                    return just(datasource.getId());\n                }\n\n                if (isLegacyOpenblocksApi(datasource)) {\n                    return just(datasource.getId());\n                }\n\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 61.10095455961774}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n\n            .flatMap(datasource -> {\n                if (isSystemStatic(datasource)) {\n                    return just(datasourceId);\n                } else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                    return just(getId(datasource));\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 42.847307997082765}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn upload(filePart)\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return remove(user.getAvatar())\n                                .then(updateUserAvatar(asset, user.getId()));\n                    } else {\n                        return updateUserAvatar(asset, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 26.441770872630833}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn upload(filePart, user.getId())\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return remove(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 28.487890529306597}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.upload(filePart)\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.remove(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    }\n                    return updateUserAvatar(newAvatar, user.getId());\n                });\n    }", "CodeBleu_score": 32.30658402003965}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setIsEnabled(true);\n    user.setAvatarLink(authUser.getAvatarLink());\n    if (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext() != null) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().getPassword()));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setIsNewUser(true);\n    return repository.save(user);\n}", "CodeBleu_score": 39.645550436332314}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSource.email) && authUser.getContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getContext().get(\"password\")));\n    }\n    user.setIsNewUser(true);\n    user.setConnections(authUser.getConnections());\n    return repository.save(user);\n}", "CodeBleu_score": 40.48549045180116}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n        user.setName(authUser.getName());\n        user.setState(UserState.NEW);\n        user.setIsEnabled(true);\n        user.setAvatar(authUser.getAvatar());\n        user.setConnections(authUser.getConnections());\n        user.setIsNewUser(true);\n        if (authUser.getSource().equals(AuthSource.email) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n            user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n        }\n        return repository.save(user);\n    }", "CodeBleu_score": 44.725076059820125}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn getConnections(user)\n            .flatMap(connections -> {\n                Optional<Connection> existingConnection = connections.stream()\n                        .filter(connection -> connection.getSource().equals(\"email\") && connection.getRawId().equals(email))\n                        .findFirst();\n\n                if (existingConnection.isPresent()) {\n                    return Mono.error(new DuplicateKeyException(\"Email already in use.\"));\n                }\n\n                return Mono.just(connections);\n            })\n            .flatMap(connections -> {\n                Connection connection = new Connection();\n                connection.setName(email);\n                connection.setSource(\"email\");\n                connection.setRawId(email);\n                connections.add(connection);\n                return save(user);\n            })\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 44.32758548196637}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn getConnections(user)\n            .flatMap(connections -> {\n                Connection connection = new Connection(email, \"email\");\n                return add(connections, connection)\n                        .flatMap(updatedConnections -> save(user, updatedConnections));\n            })\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 25.89068446385483}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn getConnections(user)\n            .flatMap(connections -> {\n                Connection connection = new Connection();\n                connection.setRawId(email);\n                connection.setSource(ConnectionSource.EMAIL);\n                connection.setJust(true);\n                connection.setName(email);\n                connections.add(connection);\n                return save(user);\n            })\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 33.61138142350053}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!encryptionService.matchPassword(oldPassword, user.getPassword())) {\n                    throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.OLD_PASSWORD);\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 32.1713873587978}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (encryptionService.matchPassword(oldPassword, user.getPassword())) {\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return user;\n                } else {\n                    throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n                }\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 34.00385858455624}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (encryptionService.matchPassword(oldPassword, user.getPassword())) {\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return user;\n                }\n                throw new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.PASSWORD);\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 32.35653340939489}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tif (isAdmin(orgMember)) {\n            return getAllGroups(orgMember.getOrgId(), withoutDynamicGroups)\n                    .filter(group -> !isAllUsersGroup(group))\n                    .map(group -> {\n                        Map<String, String> groupMap = new HashMap<>();\n                        groupMap.put(\"id\", group.getId());\n                        groupMap.put(\"name\", group.getName());\n                        return groupMap;\n                    })\n                    .collectList();\n        } else {\n            return getUserGroupIdsInOrg(userId, orgMember.getOrgId(), withoutDynamicGroups)\n                    .flatMapMany(groupIds -> Flux.fromIterable(groupIds)\n                            .flatMap(groupId -> getById(groupId, orgMember.getOrgId())\n                                    .map(group -> {\n                                        Map<String, String> groupMap = new HashMap<>();\n                                        groupMap.put(\"id\", group.getId());\n                                        groupMap.put(\"name\", group.getName());\n                                        return groupMap;\n                                    })))\n                    .collectList();\n        }\n    }", "CodeBleu_score": 28.724500736976932}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn getUserGroups(userId, withoutDynamicGroups)\n                .filter(userGroup -> !userGroup.isAllUsersGroup())\n                .map(userGroup -> {\n                    Map<String, String> group = new HashMap<>();\n                    group.put(\"id\", userGroup.getId());\n                    group.put(\"name\", userGroup.getName());\n                    return group;\n                })\n                .collectList();\n    }", "CodeBleu_score": 25.205215860346037}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tif (isAdmin(orgMember)) {\n            return getAllUserGroups()\n                    .filter(group -> !isAllUsersGroup(group))\n                    .map(group -> {\n                        Map<String, String> groupDetails = new HashMap<>();\n                        groupDetails.put(\"id\", group.getId());\n                        groupDetails.put(\"name\", group.getName());\n                        return groupDetails;\n                    })\n                    .collectList();\n        } else {\n            return getUserGroups(userId, orgMember.getOrgId(), withoutDynamicGroups)\n                    .filter(group -> !isAllUsersGroup(group))\n                    .map(group -> {\n                        Map<String, String> groupDetails = new HashMap<>();\n                        groupDetails.put(\"id\", group.getId());\n                        groupDetails.put(\"name\", group.getName());\n                        return groupDetails;\n                    })\n                    .collectList();\n        }\n    }", "CodeBleu_score": 27.108123253422296}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 32.420950477818636}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 32.420950477818636}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn Mono.just(UserStatus.builder()\n    .userId(userId)\n    .hasShowNewUserGuidance(true)\n    .build())\n    .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus));\n}", "CodeBleu_score": 34.76268043092329}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\trg := rungroup.Run(context.Background())\n\n\t// Enqueue partitions for processing.\n\tlen := len(c.partitions)\n\tfor i := 0; i < len; i++ {\n\t\tp := c.partitions[i]\n\t\tif predicatePartition(p.key, p) {\n\t\t\trg.Enqueue(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Wait for all tasks to complete before returning.\n\trg.Wait()\n}", "CodeBleu_score": 35.02145209401044}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\t// Create a run group to process clearing entries across multiple partitions concurrently.\n\trungroup, ctx := errgroup.WithContext(context.Background())\n\t// Clear entries from each partition that matches the partition predicate.\n\tfor _, partition := range c.partitions {\n\t\t// Enqueue the partition for processing.\n\t\trungroup.Enqueue(func() error {\n\t\t\t// Check if the partition matches the predicate.\n\t\t\tif predicatePartition(partition.Key(), partition) {\n\t\t\t\t// Clear entries from the partition that match the value predicate.\n\t\t\t\tpartition.clearMatching(ctx, predicateValue)\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\n\t// Wait for all tasks to complete.\n\tif err := rungroup.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 41.25477701875299}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\trungroup := &sync.WaitGroup{}\n\trungroup.Add(len(c.partitions))\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\tg.Enqueue(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\trungroup.Done()\n\t\t\t})\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 38.46904677717796}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Number of partitions and total weight quantity must be greater than zero\")\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) * averageWeightPerPartition))\n}", "CodeBleu_score": 52.484626425590484}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"invalid number of partitions or total weight quantity\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 49.76736123275649}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 {\n\t\tpanic(\"numPartitions must be greater than zero\")\n\t}\n\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"totalWeightQuantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) * avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 60.88475515678855}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\treturn this.getConnectionMetadata()\n        .map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            if (metadata != null) {\n                map.put(\"database.productName\", metadata.getDatabaseProductName());\n                map.put(\"database.version\", metadata.getDatabaseVersion());\n            }\n            return map;\n        })\n        .block();\n}", "CodeBleu_score": 40.2406008784652}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\n        this.getConnectionMetadata()\n            .map(ConnectionMetadata::getDatabaseProductName)\n            .filter(StringUtils::hasText)\n            .doOnNext(productName -> map.put(\"database.product.name\", productName))\n            .switchIfEmpty(Mono.empty())\n            .flatMap(productName -> this.getDatabaseVersion(productName))\n            .filter(StringUtils::hasText)\n            .doOnNext(version -> map.put(\"database.product.version\", version))\n            .switchIfEmpty(Mono.empty())\n            .then(Mono.just(map))\n            .block();\n        return map;\n    }", "CodeBleu_score": 36.416040541211736}, {"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata().map(metadata -> {\n        Map<String, Object> map = new HashMap<>();\n        if (metadata != null) {\n            map.put(\"database.product\", metadata.getDatabaseProductName());\n            map.put(\"database.version\", metadata.getDatabaseVersion());\n        }\n        return map;\n    }).defaultIfEmpty(Collections.emptyMap()).block();\n}", "CodeBleu_score": 41.85209464989747}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tUserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(userSetting.getAllowRegistration());\n        info.setMustVerifyEmailOnRegistration(userSetting.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 53.24787980207009}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tUserSettings userSettings = configMap.getUserSettings();\n    if (userSettings == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(userSettings.getAllowRegistration());\n        info.setMustVerifyEmailOnRegistration(userSettings.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 50.001373342270824}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tString userSetting = configMap.get(USER_SETTINGS);\n    if (userSetting == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        String[] userSettings = userSetting.split(\",\");\n        if (userSettings.length > 0) {\n            info.setAllowRegistration(Boolean.parseBoolean(userSettings[0]));\n        }\n        if (userSettings.length > 1) {\n            info.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(userSettings[1]));\n        }\n    }\n}", "CodeBleu_score": 55.312633675987946}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t// \u521b\u5efa\u7ebf\u7a0b\u7ec4\n    ThreadGroup threadGroup = new ThreadGroup(getClass().getName() + \" thread group\");\n    // \u521b\u5efa\u7ebf\u7a0b\n    Thread thread = new Thread(threadGroup, new Runnable() {\n        @Override\n        public void run() {\n            try {\n                // \u91cd\u542f\n                restart(threadGroup);\n            } catch (Exception e) {\n                // \u5f02\u5e38\u5904\u7406\n                logger.error(\"Error restarting application\", e);\n            }\n        }\n    }, \"restart-thread\");\n    // \u8bbe\u7f6e\u7ebf\u7a0b\u4e3a\u975e\u5b88\u62a4\u7ebf\u7a0b\n    thread.setDaemon(false);\n    // \u8bbe\u7f6e\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u7c7b\u52a0\u8f7d\u5668\n    thread.setContextClassLoader(getClassLoader());\n    // \u542f\u52a8\u7ebf\u7a0b\n    thread.start();\n    // \u8fd4\u56de\u6d88\u606f\n    return \"Restarting application in thread \" + thread.getName();\n}", "CodeBleu_score": 39.181433047817684}, {"code": "public Object restart(){\n\ttry {\n\t\tThreadGroup tg = new ThreadGroup(\"restart\");\n\t\tThread t = new Thread(tg, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tClassLoader cl = getClassLoader();\n\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t\tApplication.restart();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"restart\");\n\t\tt.setDaemon(false);\n\t\tt.start();\n\t\treturn \"Restarting...\";\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn \"Restart failed: \" + e.getMessage();\n\t}\n}", "CodeBleu_score": 39.67688103129222}, {"code": "public Object restart(){\n\tThreadGroup tg = new ThreadGroup(this.getClass().getName() + \" thread group\");\n    Thread t = new Thread(tg, \"restart thread\") {\n        public void run() {\n            try {\n                // \u542f\u52a8\u65b0\u7684\u7ebf\u7a0b\n                ClassLoader cl = getClassLoader();\n                Thread.currentThread().setContextClassLoader(cl);\n                String[] args = getArgs();\n                String mainClass = getMainClass();\n                Method mainMethod = getMainMethod();\n                Object app = getApplication();\n                // \u8c03\u7528\u542f\u52a8\u51fd\u6570\n                mainMethod.invoke(app, new Object[] { args });\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    };\n    t.setDaemon(false);\n    t.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 37.76688416275054}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tObjectMapper objectMapper = new ObjectMapper();\n  objectMapper.registerModule(new JavaTimeModule());\n  objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n\n  configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n  configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 44.52174408519468}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n    configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n}", "CodeBleu_score": 40.93773671768243}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n        configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n    }", "CodeBleu_score": 41.513659384285205}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.GET(\"/console/assets/**\").negate())\n                .and(RequestPredicates.HEADERS.header(\"Upgrade\", \"websocket\").negate()),\n            this::serveIndex);\n    }", "CodeBleu_score": 27.810821394124474}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n            RequestPredicates.path(\"/console/**\")\n                .and(RequestPredicates.path(\"/console/assets/**\", false))\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.method(HttpMethod.GET))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(HttpHeaders.UPGRADE)))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(HttpHeaders.SEC_WEBSOCKET_KEY))),\n            request -> serveIndex(getConsole().getIndexLocation()));\n    }", "CodeBleu_score": 25.854285443337847}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        RequestPredicates.all(\n            RequestPredicates.GET(\"/console/**\"),\n            RequestPredicates.accept(MediaType.TEXT_HTML),\n            RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\")),\n            RequestPredicates.not(RequestPredicates.accept(WebSocketHandler.WEBSOCKET_PROTOCOL)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.TEXT_EVENT_STREAM))\n        ),\n        request -> serveIndex(consoleIndexLocation)\n    );\n}", "CodeBleu_score": 20.990886994760295}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        RequestPredicates.all(\n            RequestPredicates.method(HttpMethod.GET),\n            RequestPredicates.path(\"/uc/**\"),\n            RequestPredicates.accept(MediaType.TEXT_HTML),\n            RequestPredicates.headers(headers -> !headers.containsKey(HttpHeaders.UPGRADE)),\n            RequestPredicates.path(path -> !path.startsWith(\"/uc/assets/\"))\n        ),\n        request -> serveIndex(ucIndexLocation)\n    );\n}", "CodeBleu_score": 20.33768130286843}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.accept(MediaType.TEXT_EVENT_STREAM))),\n        this::serveIndex);\n}", "CodeBleu_score": 21.107748827929957}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        RequestPredicates.all(\n            RequestPredicates.GET(\"/uc/**\"),\n            RequestPredicates.not(RequestPredicates.GET(\"/uc/assets/**\")),\n            RequestPredicates.accept(MediaType.TEXT_HTML),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.TEXT_EVENT_STREAM)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_STREAM_JSON)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_STREAM_JSON_VALUE)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_JSON_VALUE)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_NDJSON)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_NDJSON_VALUE)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_STREAM_JSON)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_STREAM_JSON_VALUE)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_JSON_UTF8)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_JSON_UTF8_VALUE)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_NDJSON_UTF8)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_NDJSON_UTF8_VALUE)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_STREAM_JSON_UTF8)),\n            RequestPredicates.not(RequestPredicates.accept(MediaType.APPLICATION_STREAM_JSON_UTF8_VALUE)),\n            RequestPredicates", "CodeBleu_score": 13.94932316463137}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tval repository = new ReactiveIndexedSessionRepository<MapSession>()\n\trepository.setDefaultMaxInactiveInterval(determineTimeout())\n\trepository.setSessionMap(new ConcurrentHashMap<String, MapSession>())\n\trepository\n}", "CodeBleu_score": 20.52702650575327}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tval repository = ReactiveIndexedSessionRepository<MapSession>()\n    repository.setDefaultMaxInactiveInterval(getSession().getTimeout())\n    repository.setReactiveSessionRepository(repository)\n    repository.setSessionMap(ConcurrentHashMap<String, MapSession>())\n    return repository\n}", "CodeBleu_score": 37.32173201433312}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tval sessionRepository = new ReactiveIndexedSessionRepository<MapSession>()\n    sessionRepository.setDefaultMaxInactiveInterval(determineTimeout())\n    sessionRepository.setReactiveIndexResolver(new DefaultReactiveIndexResolver())\n    sessionRepository.setSessionMap(new ConcurrentHashMap<String, MapSession>())\n    sessionRepository\n}", "CodeBleu_score": 24.25984400507452}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setTwoFactorAuth(haloProperties.getSecurity().isTwoFactorAuth());\n    return userDetailsService;\n}", "CodeBleu_score": 45.622815870627385}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    if (haloProperties.security.twoFactorAuth.enabled) {\n        userDetailsService.setTwoFactorAuthEnabled(true)\n    } else {\n        userDetailsService.setTwoFactorAuthDisabled(true)\n    }\n    return userDetailsService\n}", "CodeBleu_score": 33.846078271713694}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    userDetailsService.setTwoFactorAuth(haloProperties.security.twoFactorAuth.enabled)\n    return userDetailsService\n}", "CodeBleu_score": 33.604443247980385}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n  commentOwner.setKind(\"email\");\n  commentOwner.setEmail(email);\n  commentOwner.setDisplayName(name);\n  commentOwner.setAnnotations(new HashMap<String, String>());\n  if (avatar != null) {\n    commentOwner.getAnnotations().put(\"avatar\", avatar);\n  }\n  if (website != null) {\n    commentOwner.getAnnotations().put(\"website\", website);\n  }\n  return commentOwner;\n}", "CodeBleu_score": 45.27791234423928}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email);\n    owner.setDisplayName(displayName);\n    owner.setAnnotations(annotations);\n    return owner;\n}", "CodeBleu_score": 26.13912953379845}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(getEmail() == null ? \"\" : getEmail());\n    owner.setDisplayName(getDisplayName());\n    owner.setAnnotations(new HashMap<String, String>());\n    owner.getAnnotations().put(\"avatar\", getAvatar());\n    owner.getAnnotations().put(\"website\", getWebsite());\n    return owner;\n}", "CodeBleu_score": 33.274688113952486}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.kind == \"email\") {\n        User user = commentOwner.name.fetch();\n        return user.getEmail() == post.getOwner().getEmail();\n    } else {\n        return commentOwner.name == post.getOwner().getName();\n    }\n}", "CodeBleu_score": 27.55041340109839}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == \"email\") {\n    User user = commentOwner.getEmail().fetch();\n    return user.getName() == post.getOwner().getName();\n  }\n  return commentOwner.getName() == post.getOwner().getName();\n}", "CodeBleu_score": 29.562803719093267}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.kind == \"email\") {\n        User user = commentOwner.getUser();\n        return user.getEmail().equals(post.getOwner().getEmail());\n    } else {\n        return commentOwner.name.equals(post.getOwner().getName());\n    }\n}", "CodeBleu_score": 29.42399550081463}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions lo = new ListOptions();\n        String fieldSelector = getFieldSelector();\n        if (StringUtils.isNotBlank(fieldSelector)) {\n            lo.setFieldSelector(fieldSelector);\n        }\n        String keyword = getKeyword();\n        String ownerName = getOwnerName();\n        String ownerKind = getOwnerKind();\n        if (StringUtils.isNotBlank(keyword) || StringUtils.isNotBlank(ownerName)) {\n            String query = getQuery(keyword, ownerName, ownerKind);\n            lo.setLabelSelector(query);\n        }\n        return lo;\n    }", "CodeBleu_score": 35.94471608285217}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = getFieldSelector();\n        if (StringUtils.isNotBlank(fieldSelector)) {\n            listOptions.setFieldSelector(fieldSelector);\n        }\n        String keyword = getKeyword();\n        if (StringUtils.isNotBlank(keyword)) {\n            listOptions.setLabelSelector(labelAndFieldSelectorToListOptions(keyword, listOptions.getFieldSelector()));\n        }\n        String ownerName = getOwnerName();\n        if (StringUtils.isNotBlank(ownerName)) {\n            listOptions.setLabelSelector(labelAndFieldSelectorToListOptions(ownerName, listOptions.getFieldSelector()));\n        }\n        return listOptions;\n    }", "CodeBleu_score": 41.053313881281674}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = labelAndFieldSelectorToListOptions(listOptions);\n        if (isNotBlank(fieldSelector)) {\n            listOptions.setFieldSelector(fieldSelector);\n        }\n        String keyword = getKeyword();\n        if (isNotBlank(keyword)) {\n            listOptions.setLabelSelector(getLabelSelector(keyword));\n        }\n        String ownerName = getOwnerName();\n        if (isNotBlank(ownerName)) {\n            listOptions.setFieldSelector(getFieldSelector(ownerName));\n        }\n        return listOptions;\n    }", "CodeBleu_score": 35.92767582001494}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n            .filter(notNull())\n            .flatMap(nameOf)\n            .flatMap(getUpvote)\n            .map(upvote -> new CommentStats(upvote))\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 35.475591901692724}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n        .flatMap(this::getByName)\n        .flatMap(this::getUpvote)\n        .map(Counter::getCount)\n        .map(CommentStats::new);\n}", "CodeBleu_score": 26.873648093695166}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn getByName(commentName)\n            .map(this::upvote)\n            .notNull()\n            .map(CommentStats::new)\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 31.935580244012172}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    setReasonType(identity, subscriber, \"someone replied to you\");\n    setExpression(subscriber, \"replied.owner\", identity.name());\n    subscribe(subscriber);\n}", "CodeBleu_score": 39.37251955626485}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setReasonType(ReasonType.SOMEONE_REPLIED_TO_YOU);\n    subscription.setExpression(\"replied.owner = '\" + identity.name() + \"'\");\n    subscribe(subscription);\n}", "CodeBleu_score": 51.12596059339606}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    // Create the interest reason\n    InterestReason interestReason = new InterestReason();\n    interestReason.setType(InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    interestReason.setCondition(String.format(\"repliedOwner == '%s'\", identity.name()));\n\n    // Create the subscription\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(interestReason);\n\n    // Subscribe the user to the notification center\n    NotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 53.29521911797299}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 11.471433151592622}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> c.toBuilder()\n            .setApproved(true)\n            .setApprovedTime(now())\n            .build());\n}", "CodeBleu_score": 15.134597941762431}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(),\n        c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 11.818959555603248}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($this->getRecord() && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.765454589944405}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 65.38516000500059}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord && $this->getRecord()) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 60.002791974906714}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->redirectAfterSuccess) {\n        $this->redirect($this->redirectAfterSuccess);\n    }\n\n    return $this;\n}", "CodeBleu_score": 33.44952878186528}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->redirectOnSuccess) {\n        $this->redirect($this->redirectOnSuccess);\n    }\n\n    return $this;\n}", "CodeBleu_score": 33.19376152546546}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->successRedirectUrl) {\n        $this->redirect($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 35.10103118024519}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record && method_exists($record, 'tags')) {\n        $tagClassName = config('tags.models.tag');\n\n        $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten;\n\n        $record->tags()->sync($tags->pluck('id'));\n    }\n}", "CodeBleu_score": 76.71335224126612}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record && method_exists($record, 'tags')) {\n        $tagClassName = config('tags.models.tag');\n\n        $record->tags()->sync(\n            collect($state)->map(function ($tagName) use ($tagClassName) {\n                $locale = $tagClassName::getLocale();\n\n                $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n                if ($tag?->isEmpty() ?? true) {\n                    $tag = $tagClassName::create([\n                        'name' => [$locale => $tagName],\n                    ]);\n                }\n\n                return $tag;\n            })->flatten->pluck('id')->toArray()\n        );\n    }\n}", "CodeBleu_score": 65.49258166019284}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record && method_exists($record, 'tags')) {\n        $tagClassName = config('tags.models.tag');\n\n        $tagNames = collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten();\n\n        $record->tags()->sync($tagNames->pluck('id'));\n    }\n}", "CodeBleu_score": 76.57226477245592}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := auth.NewScope(repoName, spacePath, permission)\n\tresource := auth.NewResource(pipelineIdentifier, \"pipeline\", scope.ID)\n\n\t// Perform the permission check.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"permission denied: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 59.04074373869877}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\tscope := authz.ScopeFromString(fmt.Sprintf(\"repository:%s:%s\", spacePath, repoName))\n\tresource := authz.ResourceFromString(fmt.Sprintf(\"pipeline:%s\", pipelineIdentifier))\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission for pipeline: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 59.418917641345736}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tvar (\n\t\tspacePath string\n\t\trepoName string\n\t)\n\n\tif err := paths.DisectLeaf(repoPath, &spacePath, &repoName); err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect path %s: %w\", repoPath, err)\n\t}\n\n\tresource := &authz.Resource{\n\t\tType: \"pipeline\",\n\t\tName: pipelineIdentifier,\n\t}\n\n\tscope := &authz.Scope{\n\t\tType: \"repository\",\n\t\tName: repoName,\n\t}\n\n\tif err := authorizer.Check(ctx, session, permission, scope, resource); err != nil {\n\t\treturn fmt.Errorf(\"permission denied for pipeline %s: %w\", pipelineIdentifier, err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 58.98318784815588}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn nil\n\t}\n\n\tif space.ParentSpaceID == nil {\n\t\treturn nil\n\t}\n\n\tparentSpace, err := store.LookupSpaceByID(ctx, space.ParentSpaceID)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"lookup parent space: %w\", err)\n\t}\n\n\tif parentSpace == nil {\n\t\treturn nil\n\t}\n\n\tif parentSpace.Name == nil {\n\t\treturn nil\n\t}\n\n\tif parentSpace.Resource == nil {\n\t\treturn nil\n\t}\n\n\tif parentSpace.Resource.URN == nil {\n\t\treturn nil\n\t}\n\n\tscope := auth.NewScope(\n\t\tauth.ScopePrefixSpace,\n\t\t*parentSpace.Resource.URN,\n\t\t*parentSpace.Name,\n\t)\n\n\tresource := auth.NewResource(*parentSpace.Resource.URN, *parentSpace.Name)\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 52.22622877141381}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif session == nil {\n\t\treturn fmt.Errorf(\"session required\")\n\t}\n\n\tif space == nil {\n\t\treturn fmt.Errorf(\"space required\")\n\t}\n\n\tif permission == enum.None {\n\t\treturn fmt.Errorf(\"permission required\")\n\t}\n\n\tif space.Path == \"\" {\n\t\treturn fmt.Errorf(\"space path required\")\n\t}\n\n\t// Disect the space path to get the parent space and name.\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.NewScope(\n\t\tauthz.ScopeSpace,\n\t\tparentSpace,\n\t\tname,\n\t)\n\n\tresource := authz.NewResource(\n\t\tauthz.ResourceSpace,\n\t\tspace.ID,\n\t)\n\n\t// Check the session against the scope and resource.\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 56.09757269723141}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn nil\n\t}\n\n\tvar parentSpace *types.Space\n\tvar parentSpaceName string\n\tif space.ParentSpaceID > 0 {\n\t\tparentSpace, err := store.LookupSpaceByID(ctx, space.ParentSpaceID)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to lookup parent space: %w\", err)\n\t\t} else if parentSpace == nil {\n\t\t\treturn nil\n\t\t}\n\t\tparentSpaceName = parentSpace.Name\n\t}\n\n\tscope := auth.BuildScope(\n\t\tauth.ScopeSpace,\n\t\tparentSpaceName,\n\t\tspace.Name,\n\t)\n\tresource := auth.BuildResource(\n\t\tauth.ResourceSpace,\n\t\tspace.Name,\n\t)\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 49.36661322042769}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar decoder = json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar sanitized = new(bytes.Buffer)\n\tvar encoder = json.NewEncoder(sanitized)\n\tencoder.SetEscapeHTML(false)\n\n\terr := decoder.Decode(data)\n\tif err != nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid json: %s\", err.Error())\n\t}\n\n\terr = encoder.Encode(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized.Truncate(sanitized.Len() - 1)\n\treturn sanitized.Bytes(), nil\n}", "CodeBleu_score": 51.5996701630841}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar payload any\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\tif err := dec.Decode(&payload); err != nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid JSON: %v\", err)\n\t}\n\n\tvar b bytes.Buffer\n\tenc := json.NewEncoder(&b)\n\tenc.SetEscapeHTML(false)\n\tif err := enc.Encode(payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif b.Len() > 0 {\n\t\tb.Truncate(b.Len() - 1)\n\t}\n\n\treturn json.RawMessage(b.Bytes()), nil\n}", "CodeBleu_score": 48.81140642299149}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar payload interface{}\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&payload); err != nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid JSON: %s\", err)\n\t}\n\n\tvar result bytes.Buffer\n\tencoder := json.NewEncoder(&result)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(payload); err != nil {\n\t\treturn nil, usererror.BadRequestf(\"invalid JSON: %s\", err)\n\t}\n\n\tif result.Len() > 0 && result.Bytes()[result.Len()-1] == '\n' {\n\t\tresult.Truncate(result.Len() - 1)\n\t}\n\n\treturn result.Bytes(), nil\n}", "CodeBleu_score": 55.09494296025649}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\tif _, err := apiref.ParseRef(repoRef); err != nil {\n\t\treturn nil, usererror.BadRequest(\"Invalid repository reference: %v\", err)\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif repo == nil {\n\t\treturn nil, usererror.NotFound(\"Repository not found: %s\", repoRef)\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := apiauth.CheckRepo(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 62.64663445435452}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\tif repoRef == \"\" {\n\t\treturn nil, usererror.BadRequest.New(\"no repository specified\")\n\t}\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif repo == nil {\n\t\treturn nil, usererror.NotFound.New(\"repository not found\")\n\t}\n\n\tif err := apiauth.CheckRepo(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 57.26355961361872}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !c.sessionStore.HasAccess(session, repo, reqPermission) {\n\t\treturn nil, usererror.BadRequest(\"You do not have access to this repository\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 39.824650616776445}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:     createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.57202777268253}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 58.28687788091994}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.434039255653005}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tlocal state = self.state\n  if state.renderer then\n    if on_render then\n      state.on_render = on_render\n    end\n    return self\n  end\n  local renderer = self.renderer\n  if not renderer then\n    error('Cannot attach a buffer to a renderer if it does not have a renderer')\n  end\n  if not renderer.is_renderer then\n    error('Cannot attach a buffer to a non-renderer')\n  end\n  state.renderer = renderer\n  if state.parent == nil then\n    state.parent = renderer\n  end\n  state.on_render = on_render\n  if not state.attached then\n    self:attach()\n  end\n  return self", "CodeBleu_score": 60.18965741255343}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.renderer = self.renderer or Renderer()\n  self.renderer:attach_buffer(self)\n  self:set_on_render(on_render)\n  return self", "CodeBleu_score": 38.82073804588158}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.on_render = on_render\n  if not self.screen then\n    self.renderer:attach(self)\n  end\n  return self", "CodeBleu_score": 43.9513386167499}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tif self:is_valid() then\n    if callback then\n      callback()\n    end\n  else\n    local filename = self:get_filename()\n    if filename then\n      self.watcher = FileWatcher(filename, function(err)\n        if err then\n          console.debug.error(string.format(\"Error watching file '%s': %s\", filename, err))\n        else\n          if callback then\n            callback()\n          end\n        end\n      end)\n    end\n  end", "CodeBleu_score": 47.3861791986949}, {"code": "function Buffer:watch(callback)\n\tif self:is_valid() and callback then\n    self.watcher:watch_file(self.filename, function()\n      callback(self)\n    end, function(err)\n      console.debug.error(string.format(\"Error watching file: %s\", err))\n    end)\n  end", "CodeBleu_score": 39.9800100551367}, {"code": "function Buffer:watch(callback)\n\tif self:is_valid() then\n    if callback then\n      callback()\n    end\n    return\n  end\n  if self.watcher then\n    self.watcher:close()\n  end\n  if self.filename then\n    local watcher = vim.loop.new_fs_event()\n    local function on_event()\n      local stat = vim.loop.fs_stat(self.filename)\n      if stat then\n        self.watcher:close()\n        self.watcher = nil\n        self:watch(callback)\n      end\n    end\n    self.watcher = watcher\n    watcher:start(self.filename, {}, on_event)\n  end", "CodeBleu_score": 47.54139152011849}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n\n  local spec = self:get_specification()\n  local attr = self:get_attribute()\n  local highlight = vim.fn.synIDattr(vim.fn.synIDtrans(spec), attr)\n\n  if highlight then\n    self.hex = bit.tohex(highlight, 6)\n    return self.hex\n  end\n\n  return nil", "CodeBleu_score": 48.44667417996817}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n  local attr = self.fg and 'foreground' or 'background'\n  local highlight = vim.api.nvim_get_hl_by_name(attr, true)\n  if not highlight then\n    return nil\n  end\n  local hex = vim.fn.synIDattr(highlight.id, 'bg#') or vim.fn.synIDattr(highlight.id, 'fg#')\n  if not hex then\n    return nil\n  end\n  self.hex = hex\n  return self.hex", "CodeBleu_score": 55.34273667579635}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n\n  local attr = self.foreground and 'foreground' or 'background'\n  local hex = self.spec[attr]\n\n  if not hex then\n    local ok, hl = pcall(vim.api.nvim_get_hl_by_name, self.spec.name, true)\n\n    if ok then\n      hex = hl[attr]\n    end\n  end\n\n  if hex then\n    hex = bit.tohex(hex, 6)\n    self.hex = hex\n    return hex\n  end", "CodeBleu_score": 58.65033688145823}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local ns_id = self.id\n  local current_line = 1\n  local current_col = 0\n  local match_start_col = 0\n  local match_end_col = 0\n\n  for line in lines do\n    local start_col = 0\n    local end_col = -1\n\n    while true do\n      start_col, end_col = string.find(line, pattern, end_col + 1, true)\n\n      if start_col == nil then\n        break\n      end\n\n      match_start_col = current_col + start_col\n      match_end_col = current_col + end_col\n\n      vim.api.nvim_buf_add_highlight(buffer.bufnr, ns_id, hl, current_line - 1, match_start_col, match_end_col)\n    end\n\n    current_line = current_line + 1\n    current_col = current_col + string.len(line)\n  end\n\n  return self", "CodeBleu_score": 51.33881831651439}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  for i, line in ipairs(lines) do\n    local row = i - 1\n    for match in line:gmatch(pattern) do\n      local col_start = line:find(match)\n      local col_end = col_start + #match\n      buffer:add_highlight(hl, row, col_start, col_end)\n    end\n  end\n\n  return self", "CodeBleu_score": 50.04969631827553}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local start_row, start_col, end_row, end_col\n  local row = 0\n\n  for _, line in ipairs(lines) do\n    row = row + 1\n    local start_col, end_col = line:find(pattern)\n\n    if start_col then\n      buffer:add_highlight(hl, row, start_col, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 47.390585994085555}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format(\"%s:%s:%s\", buffer, row, col)\n    local ns = vim.api.nvim_create_namespace(\"\")\n    vim.api.nvim_buf_set_extmark(buffer, ns, row, col, {\n        id = id,\n        virt_text = {{text, hl}},\n        virt_text_pos = pos,\n        priority = priority\n    })\n    return id", "CodeBleu_score": 61.824565553249755}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format(\"%s:%s:%s\", row, col, text)\n\tlocal ns_id = vim.api.nvim_create_namespace(id)\n\tlocal opts = {\n\t\tid = ns_id,\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t}\n\tif row then\n\t\topts.line = row\n\tend\n\tif col then\n\t\topts.col = col\n\tend\n\tvim.api.nvim_buf_set_extmark(buffer, ns_id, row, col, opts)\n\treturn ns_id", "CodeBleu_score": 51.019937932369764}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format(\"%s:%s:%s\", buffer, row, col)\n  local ns = self:get()\n  vim.api.nvim_buf_set_extmark(buffer, ns, row, col, {\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    hl_mode = \"combine\",\n    priority = priority,\n  })\n  return id", "CodeBleu_score": 66.94540934817181}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n    local lines = {}\n    for _, char in ipairs(output) do\n        if char == \"", "CodeBleu_score": 12.889836429388335}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal result = \"\"\n  local line = \"\"\n  local i = 1\n\n  while i <= #output do\n    local c = output:sub(i, i)\n\n    if c == \"", "CodeBleu_score": 19.547127536606997}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal sub = string.sub\n    local concat = table.concat\n    local line = \"\"\n    local char\n    for i = 1, #output do\n        char = sub(output, i, i)\n        if char == \"", "CodeBleu_score": 30.300178828447294}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tlocal watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n\n  watcher = vim.loop.new_fs_event()\n  vim.loop.fs_event_start(watcher, path, {\n    recursive = true,\n  }, handler)\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 54.2658018045433}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watchers[path] then\n    return self.watchers[path]\n  end\n\n  local watcher = vim.loop.fs_event_new()\n  vim.loop.fs_event_start(watcher, path, {\n    recursive = false,\n    watch_entry = true\n  }, function(_, _, event, filename)\n    if event == 'rename' and filename then\n      handler(filename)\n    end\n  end)\n\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 51.430525465782374}, {"code": "function Watcher:watch_file(path, handler)\n\tif not self.watchers[path] then\n    self.watchers[path] = vim.loop.fs_event_new()\n    vim.loop.fs_event_start(self.watchers[path], path, {\n      -- watch_entry = true,\n      -- callback = function(_, _, event, filename)\n      callback = function(_, _, event, filename)\n        if filename then\n          handler(path, filename, event)\n        end\n      end,\n    })\n  end\n  return self.watchers[path]", "CodeBleu_score": 48.405053965480484}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  local hunks, err = self.git_object:live_hunks(lines)\n  if err then\n    return nil, err\n  end\n\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n\n  for _, hunk in ipairs(hunks) do\n    local sign_id = self.namespace:assign_sign_id()\n    for _, line in ipairs(hunk.lines) do\n      local sign_type = self.namespace:get_sign_type(line.type)\n      local sign_priority = self.namespace:get_sign_priority(line.type)\n      vim.fn.sign_place(sign_id, sign_ns_id, sign_type, 0, {lnum = line.number})\n      line.sign_id = sign_id\n      line.sign_type = sign_type\n      line.sign_priority = sign_priority\n    end\n  end\n\n  self.namespace:update_signs()\n\n  return hunks", "CodeBleu_score": 52.01169192577944}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines, err = self:get_lines()\n  if err then\n    return nil, err\n  end\n  local hunks, err = self.git_object:live_hunks(lines)\n  if err then\n    return nil, err\n  end\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n  local sign_ids = {}\n  local sign_priorities = {}\n  local sign_types = {}\n  local sign_lines = {}\n  for i, hunk in ipairs(hunks) do\n    for j, line in ipairs(hunk.lines) do\n      local sign_id = self.namespace:get_sign_id(hunk.id, j)\n      local priority = self.namespace:get_sign_priority(hunk.type, line.type)\n      local sign_type = self.namespace:get_sign_type(hunk.type, line.type)\n      sign_ids[#sign_ids + 1] = sign_id\n      sign_priorities[#sign_priorities + 1] = priority\n      sign_types[#sign_types + 1] = sign_type\n      sign_lines[#sign_lines + 1] = line.line\n    end\n  end\n  vim.fn.sign_unplace(sign_ns_id, {buffer = self.bufnr})\n  vim.fn.sign_place(sign_ids, sign_ns_id, sign_types, sign_lines, {buffer = self.bufnr})\n  vim.fn.sign_define(\"GitSignsAdd\", {text = signs_setting:get().add.text, texthl = signs_setting:get().add.hl, linehl = signs_setting:get().add.hl, numhl = signs_setting:get().add.hl})\n  vim.fn.sign_define(\"GitSignsChange\", {text = signs_setting:get().change.text, texthl = signs_setting:get().change.hl, linehl = signs_setting:get().change.hl, numhl = signs_setting:get().change.hl})\n  vim.fn.sign_", "CodeBleu_score": 45.458934080364415}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(lines)\n  if not hunks then\n    return nil, \"Failed to get hunks\"\n  end\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n  local sign_priority = 1000\n  for _, hunk in ipairs(hunks) do\n    local sign_type = self:get_sign_type(hunk.type)\n    for line_nr = hunk.start_line, hunk.end_line do\n      self.namespace:set_sign(sign_ns_id, line_nr, sign_type, sign_priority)\n      sign_priority = sign_priority + 1\n    end\n  end\n  self.namespace:set_signs(sign_ns_id)\n  return hunks", "CodeBleu_score": 42.392161373045454}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmp_file = fs.tmpname()\n\n  fs.write_file(tmp_file, patch)\n\n  local err = self.git:stage_hunk_from_file(tmp_file)\n\n  fs.remove_file(tmp_file)\n\n  return err", "CodeBleu_score": 48.17625541204831}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpfile = fs.tmpname()\n\n  fs.write_file(tmpfile, patch)\n\n  local err = self.git:stage_hunk_from_file(tmpfile)\n\n  fs.remove_file(tmpfile)\n\n  return err", "CodeBleu_score": 47.72596674098013}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpfile = fs.tmpname()\n\n  fs.write_file(tmpfile, patch)\n\n  local err = self.git:stage_hunk(tmpfile)\n\n  fs.remove_file(tmpfile)\n\n  return err", "CodeBleu_score": 46.649628188437134}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\ttry {\n        HttpRequest request = getAccessTokenEndpoint().createRequest();\n        request.addHeader(getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(\"grant_type\", \"authorization_code\");\n        request.addBodyParameter(\"code\", verifier.getValue());\n        request.addBodyParameter(\"redirect_uri\", config.getCallback());\n        request.addBodyParameter(\"client_id\", config.getApiKey());\n        request.addBodyParameter(\"client_secret\", config.getApiSecret());\n        request.addBodyParameter(\"scope\", config.getScope());\n        request.addBodyParameter(\"state\", verifier.getState());\n\n        Response response = send(request);\n        return getAccessTokenExtractor().extract(response.getBody());\n    } catch (Exception e) {\n        throw new AuthException(\"Failed to retrieve access token\", e);\n    }\n}", "CodeBleu_score": 38.7321969766396}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t// Create the request to the access token endpoint\n    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n    // Add the authentication header\n    request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\n    // Add the body parameters\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n\n    // Send the request\n    Response response = send(request);\n\n    // Extract the access token from the response\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 49.23406335837848}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tString endpoint = getAccessTokenEndpoint();\n        String verb = getAccessTokenVerb();\n        Map<String, String> bodyParams = getBody(requestToken, verifier);\n        String authHeader = getHttpBasicAuthHeaderValue();\n\n        String response = send(endpoint, verb, bodyParams, authHeader);\n        return extract(response);\n    }", "CodeBleu_score": 38.29116805183019}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    log.info(\"Added \" + host.getHostName() + \" to authentication cache\");\n}", "CodeBleu_score": 49.25055385771875}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n        new AuthScope(host.getHostName(), host.getPort()),\n        new UsernamePasswordCredentials(username, password));\n\n    // Create AuthCache instance\n    AuthCache authCache = new BasicAuthCache();\n    // Generate BASIC scheme object and add it to the local auth cache\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n\n    // Add AuthCache to the execution context\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n\n    logger.info(\"Adding host \" + host.getHostName() + \" to authentication cache\");\n}", "CodeBleu_score": 47.541392845142596}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    logger.info(\"Adding host \" + host.toURI() + \" to the auth cache\");\n}", "CodeBleu_score": 49.72139369304374}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String key = cache.getKey(source);\n    cache.seed(key, source);\n    String rootUrl = jenkins.getRootUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is null\");\n    }\n    try {\n        return rootUrl + ActionURI + '/' + URLEncoder.encode(key, \"UTF-8\") + '/' + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 52.46796083291861}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.get();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String key = cache.getDigestOf(source);\n    cache.seed(key, source);\n    try {\n        return jenkins.getRootUrlFromRequest() + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 53.21082603022687}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.get();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String key = cache.getKey(source);\n    cache.seed(key, source);\n    return jenkins.getRootUrlFromRequest() + ActionURI + \"/\" + key + \"/\" + size;\n}", "CodeBleu_score": 41.8232378482989}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    if (image != null) {\n        int width = image.getWidth();\n        int height = image.getHeight();\n        if (width > 128 || height > 128) {\n            image = scaleImage(image, 128);\n        }\n    }\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 61.97033546854546}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    } else {\n        this.lastModified = lastModified;\n    }\n}", "CodeBleu_score": 38.74943874435934}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    this.lastModified = (lastModified < 0 ? System.currentTimeMillis() : lastModified);\n}", "CodeBleu_score": 39.75091166598161}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tfuture = null;\n\t\t\tImageCacheEntry entry = future.get();\n\t\t\timage = entry.image;\n\t\t\tlastModified = entry.lastModified;\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\t// If an exception occurs, return true so that the image will be reloaded.\n\t\treturn true;\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.211562678622606}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\timage = future.get();\n\t\t\tlastModified = new Date();\n\t\t\tfuture = null;\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\t// TODO: log\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 39.865753871671295}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tlastModified = cacheEntry.getLastModified();\n\t\t\timage = cacheEntry.getImage();\n\t\t\tfuture = null;\n\t\t} catch (InterruptedException e) {\n\t\t\t// do nothing\n\t\t} catch (ExecutionException e) {\n\t\t\t// do nothing\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 45.46983917455309}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tif (node == null) {\n        rsp.sendError(SC_NOT_FOUND);\n        return;\n    }\n\n    // get the image\n    BufferedImage image = getImage(node);\n\n    // generate the image\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(image, \"png\", baos);\n\n    // set the response headers\n    rsp.setContentType(\"image/png\");\n    rsp.setContentLength(baos.size());\n    rsp.addHeader(\"Cache-Control\", \"max-age=\" + (60*60*24*30));\n    rsp.addHeader(\"Expires\", new Date(System.currentTimeMillis() + (60*60*24*30*1000L)).toString());\n\n    // write the image to the response output stream\n    baos.writeTo(rsp.getOutputStream());\n    rsp.getOutputStream().flush();\n}", "CodeBleu_score": 43.090777824063295}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// Get the image\n    BufferedImage img = getImage(node);\n\n    // Set the headers\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"max-age=604800\"); // 1 week\n    rsp.setHeader(\"Expires\", getExpires(req));\n    rsp.setHeader(\"Last-Modified\", getLastModified(req));\n    rsp.setContentLength(img.getWidth() * img.getHeight());\n\n    // Write the image\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(img, \"png\", baos);\n    baos.flush();\n    rsp.getOutputStream().write(baos.toByteArray());\n    baos.close();\n}", "CodeBleu_score": 47.115747983030694}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tif (node instanceof AbstractItem) {\n        AbstractItem item = (AbstractItem) node;\n        if (item.hasPermission(Item.READ)) {\n            // this is a workaround for the fact that Stapler doesn't like\n            // to serve images from inside the WEB-INF directory\n            String resourcePath = \"/plugin/workflow-cps-scm-step/images/\" + item.getIconFileName();\n            InputStream is = getClass().getResourceAsStream(resourcePath);\n            if (is != null) {\n                try {\n                    rsp.setContentType(\"image/png\");\n                    rsp.setHeader(\"Cache-Control\", \"public\");\n                    rsp.setDateHeader(\"Expires\", System.currentTimeMillis() + 3600000L);\n                    OutputStream os = rsp.getOutputStream();\n                    IOUtils.copy(is, os);\n                    os.flush();\n                    return;\n                } finally {\n                    IOUtils.closeQuietly(is);\n                }\n            }\n        }\n    }\n    rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n}", "CodeBleu_score": 39.415588532744394}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        configureContext();\n        configureBuilder();\n        if (authenticator != null) {\n            authenticator.configureContext(context, host);\n        }\n        configureBuilder();\n        setClientProxyParams(host, builder);\n        build();\n    }", "CodeBleu_score": 34.99149848367311}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        if (enableCache) {\n            // set expiration for team and repositories\n            teamCache = new Cache<>(teamCacheDuration);\n            repositoriesCache = new Cache<>(repositoriesCacheDuration);\n        }\n\n        configureBuilder();\n        configureContext();\n        configureAuthenticator();\n    }", "CodeBleu_score": 33.403391126551455}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        configureContext();\n        configureBuilder();\n        if (authenticator != null) {\n            authenticator.configureContext(context, host);\n        }\n        build();\n    }", "CodeBleu_score": 32.645496925858694}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\ttry {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranchName());\n        if (sourceBranch != null) {\n            pullRequest.getSource().setCommitClosure(new CommitClosure(getRawNode(sourceBranch.getCommit().getHash())));\n        }\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranchName());\n        if (destinationBranch != null) {\n            pullRequest.getDestination().setCommitClosure(new CommitClosure(getRawNode(destinationBranch.getCommit().getHash())));\n        }\n    } catch (IOException | InterruptedException e) {\n        logger.log(Level.WARNING, \"Could not retrieve branch information for pull request \" + pullRequest.getId() + \".\", e);\n    }\n}", "CodeBleu_score": 42.88451887306576}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tif (pullRequest.getSource() != null) {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n        if (sourceBranch != null) {\n            pullRequest.getSource().setClosure(new CommitClosure(sourceBranch.getRawNode()));\n        }\n    }\n    if (pullRequest.getDestination() != null) {\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n        if (destinationBranch != null) {\n            pullRequest.getDestination().setClosure(new CommitClosure(destinationBranch.getRawNode()));\n        }\n    }\n}", "CodeBleu_score": 47.70839405740246}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t// Set up the source branch\n    String sourceBranch = pullRequest.getSourceBranch();\n    BitbucketCloudBranch sourceBranchObj = getBranch(sourceBranch);\n    if (sourceBranchObj != null) {\n        String sourceBranchRawNode = sourceBranchObj.getRawNode();\n        if (sourceBranchRawNode != null) {\n            pullRequest.setSourceCommitClosure(new CommitClosure(sourceBranchRawNode));\n        }\n    }\n\n    // Set up the destination branch\n    String destinationBranch = pullRequest.getDestinationBranch();\n    BitbucketCloudBranch destinationBranchObj = getBranch(destinationBranch);\n    if (destinationBranchObj != null) {\n        String destinationBranchRawNode = destinationBranchObj.getRawNode();\n        if (destinationBranchRawNode != null) {\n            pullRequest.setDestinationCommitClosure(new CommitClosure(destinationBranchRawNode));\n        }\n    }\n}", "CodeBleu_score": 35.73355714730402}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null || location.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is not set\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 67.70404815719763}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    String rootURL = config.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 61.219890473525965}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    String rootUrl = config.getUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is not configured\");\n    }\n    return build.getParent().getDisplayUrl() + rootUrl;\n}", "CodeBleu_score": 54.60570697163148}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tURI uri = URI.create(url)\n    if (uri.getHost() == null) {\n        throw new IllegalStateException(\"The URL must contain a hostname\")\n    }\n    if (uri.getHost().equals(\"localhost\")) {\n        throw new IllegalStateException(\"The URL must not contain 'localhost' as the hostname\")\n    }\n    if (uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"The URL must not contain 'unconfigured-jenkins-location' as the hostname\")\n    }\n    if (bitbucket.isCloud() && !uri.getHost().contains(\".\")) {\n        throw new IllegalStateException(\"The URL must contain a fully qualified hostname\")\n    }\n    return url\n}", "CodeBleu_score": 49.59893092151182}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URI uri = new URI(url)\n        if (uri.getHost() == null) {\n            throw new IllegalStateException(\"Invalid URL: \" + url)\n        }\n        if (uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Invalid URL: \" + url)\n        }\n        if (bitbucket.getServerUrl().contains(\"bitbucket.org\") && uri.getHost().endsWith(\"bitbucket.org\")) {\n            throw new IllegalStateException(\"Invalid URL: \" + url)\n        }\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Invalid URL: \" + url)\n    }\n    return url\n}", "CodeBleu_score": 55.10570824409269}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url.contains(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"The Bitbucket Server URL is not configured in the global configuration. Please configure it in the Bitbucket Server settings page.\")\n    }\n    if (url.contains(\"localhost\")) {\n        throw new IllegalStateException(\"The Bitbucket Server URL must not contain 'localhost'. Please configure it in the Bitbucket Server settings page.\")\n    }\n    if (bitbucket instanceof BitbucketCloudApi) {\n        if (!url.contains(\"bitbucket.org\")) {\n            throw new IllegalStateException(\"The Bitbucket Server URL must be fully qualified. Please configure it in the Bitbucket Server settings page.\")\n        }\n    }\n    if (!isValidURL(url)) {\n        throw new IllegalStateException(\"The Bitbucket Server URL is malformed. Please configure it in the Bitbucket Server settings page.\")\n    }\n    return url\n}", "CodeBleu_score": 33.21489096276856}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t// Check if notifications are disabled\n        if (notificationsDisabled(source)) {\n            return;\n        }\n\n        // Get the revision and hash\n        SCMRevision revision = getRevision(build);\n        String hash = getHash(revision);\n\n        // Determine whether to share the build key between branch and PR\n        boolean shareBuildKeyBetweenBranchAndPR = shareBuildKeyBetweenBranchAndPR(source);\n\n        // Log notification type\n        String notificationType;\n        if (revision instanceof PullRequestSCMRevision) {\n            notificationType = \"Pull Request\";\n        } else if (revision instanceof BranchSCMRevision) {\n            notificationType = \"Branch\";\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Revision type is not supported. Notifications are disabled.\");\n            return;\n        }\n        listener.getLogger().println(String.format(\"[Bitbucket] Sending %s build notification\", notificationType));\n\n        // Construct the build key\n        String branch = getBranch(revision);\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        // Initialize the Bitbucket client\n        BitbucketApi bitbucket = buildBitbucketClient(source, listener);\n\n        // Create and send the build status notification\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 41.77759773935562}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled for this source\");\n            return;\n        }\n\n        SCMRevision revision = SCMRevisionAction.getRevision(build);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision information found for this build\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String branch = getBranch(revision);\n        if (branch == null) {\n            listener.getLogger().println(\"[Bitbucket] No branch information found for this build\");\n            return;\n        }\n\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        listener.getLogger().println(\"[Bitbucket] Build key is \" + key);\n\n        BitbucketApi bitbucket = createBitbucketClient(source, listener);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 50.874580731541016}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled, skipping...\");\n            return;\n        }\n\n        SCMRevision revision = SCMRevisionAction.getRevision(build);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No SCM revision found, skipping...\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String branch = getBranch(revision);\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = buildBitbucketClient(source, listener);\n        if (bitbucket == null) {\n            return;\n        }\n\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 51.024363312409385}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = getFolderName(build) + branch;\n    } else {\n        buildKey = build.getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 36.59814263956833}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tif (shareBuildKeyBetweenBranchAndPR) {\n        return getParent(build) + \"/\" + branch;\n    }\n    return build.getFullName();\n}", "CodeBleu_score": 22.946329188831033}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tif (shareBuildKeyBetweenBranchAndPR) {\n        return getFolderName(build) + branch;\n    } else {\n        return build.getFullName();\n    }\n}", "CodeBleu_score": 24.537887806679993}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = BitbucketScmNavigatorContext.resolveServerUrl(this)\n        if (serverUrl == null) {\n            log.warn \"Bitbucket SCM Navigator server URL is null. This is likely due to a configuration error.\"\n        }\n    }\n    if (traits == null) {\n        traits = new BitbucketScmNavigatorContext.Traits()\n        traits.add(new BitbucketScmNavigatorContext.CredentialsTrait(credentialsId))\n        traits.add(new BitbucketScmNavigatorContext.ForkTrait(forkMode))\n        traits.add(new BitbucketScmNavigatorContext.ProjectTrait(projectName))\n        traits.add(new BitbucketScmNavigatorContext.RepositoryTrait(repositoryName))\n        traits.add(new BitbucketScmNavigatorContext.RepositoryFilterTrait(repositoryFilter))\n        traits.add(new BitbucketScmNavigatorContext.TrustCertificateTrait(trustCertificate))\n        traits.add(new BitbucketScmNavigatorContext.Traits(traits))\n    }\n    return this\n}", "CodeBleu_score": 30.972491287522598}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DescriptorImpl.get().getServerUrl();\n        if (serverUrl == null) {\n            log.warning(\"Bitbucket SCM Navigator server URL is null. This is likely due to a configuration error in your Jenkins instance.\");\n        }\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (credentialsId != null) {\n            traits.add(new ForkPullRequestDiscoveryTrait(credentialsId));\n        }\n        if (strategyId != null) {\n            traits.add(new ForkPullRequestDiscoveryTrait(strategyId));\n        }\n        if (trustContributors != null) {\n            traits.add(new TrustContributorsTrait(trustContributors));\n        }\n        if (ignoreOnPushNotifications != null) {\n            traits.add(new IgnoreOnPushNotificationTrait(ignoreOnPushNotifications));\n        }\n        if (prTriggerPhrase != null) {\n            traits.add(new PRDiscoveryTrait(prTriggerPhrase));\n        }\n        if (buildStrategyId != null) {\n            traits.add(new BuildStrategyTrait(buildStrategyId));\n        }\n        if (prMergeStrategy != null) {\n            traits.add(new PRMergeStrategyTrait(prMergeStrategy));\n        }\n        if (prDestinationStrategy != null) {\n            traits.add(new PRDestinationTrait(prDestinationStrategy));\n        }\n        if (forkPRStrategies != null) {\n            for (ForkPullRequestDiscoveryTrait.Strategy strategy : forkPRStrategies) {\n                traits.add(new ForkPullRequestDiscoveryTrait(strategy));\n            }\n        }\n        if (originPRStrategies != null) {\n            for (OriginPullRequestDiscoveryTrait.Strategy strategy : originPRStrategies) {\n                traits.add(new OriginPullRequestDiscoveryTrait(strategy));\n            }\n        }", "CodeBleu_score": 43.885305889746185}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n    serverUrl = defaultIfBlank(get(traits, \"serverUrl\"), \"https://api.bitbucket.org\")\n  }\n  if (serverUrl == null) {\n    log.warn \"Bitbucket SCM Navigator plugin is configured with a null server URL. This will cause builds to fail.\"\n  }\n  if (traits == null) {\n    traits = [\n      credentialsId: credentialsId,\n      repoOwner: repoOwner,\n      repository: repository,\n      trustCertificate: trustCertificate,\n      traits: [\n        [\n          type: \"jenkins.scm.impl.trait.RegexSCMHeadFilterTrait\",\n          regex: regex\n        ],\n        [\n          type: \"jenkins.plugins.bitbucket.trait.BitbucketSCMSourceTrait\",\n          credentialsId: credentialsId,\n          repoOwner: repoOwner,\n          repository: repository,\n          trustCertificate: trustCertificate\n        ]\n      ]\n    ]\n  }\n  return this\n}", "CodeBleu_score": 27.655102265614122}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tif (isMatch) {\n        getLogger().info(format(\"Repository '%s' is proposed.\", getFullName(name)));\n        proposedCount++;\n    } else {\n        getLogger().info(format(\"Repository '%s' is ignored.\", getFullName(name)));\n    }\n}", "CodeBleu_score": 33.25701468084681}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tBitbucketRepository repo = getBitbucketRepository(name);\n    if (repo == null) {\n        getLogger().error(\"Unable to retrieve Bitbucket repository with name: \" + name);\n        return;\n    }\n    String fullName = getFullName(repo);\n    if (isMatch) {\n        getLogger().info(\"Proposed Bitbucket repository: \" + fullName);\n        count++;\n    } else {\n        getLogger().info(\"Ignored Bitbucket repository: \" + fullName);\n    }\n}", "CodeBleu_score": 46.96363631827576}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (repository == null) {\n\t\tgetLogger().warn(\"Unable to find repository {}\", name);\n\t\treturn;\n\t}\n\tString message = isMatch ? \"Proposed\" : \"Ignored\";\n\tgetLogger().info(\"{} {}\", message, getFullName(repository));\n\tif (isMatch) {\n\t\tcount++;\n\t}\n}", "CodeBleu_score": 46.12692341149764}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev instanceof Branch) {\n            try {\n                String sha1 = ((Branch) rev).getSHA1String();\n                if (commitExists(git, sha1)) {\n                    return rev;\n                }\n            } catch (GitException e) {\n                listener.getLogger().println(\"Failed to check if commit exists. Will try to fetch it.\");\n                listener.getLogger().println(e.getMessage());\n            }\n            List<RefSpec> refSpecs = new ArrayList<>();\n            for (Branch b : scm.getBranches()) {\n                if (b.getName().equals(rev.getBranches().get(0))) {\n                    refSpecs.add(new RefSpec(b.getSHA1String() + \":\" + b.getSHA1String()));\n                }\n            }\n            if (!refSpecs.isEmpty()) {\n                listener.getLogger().println(\"Fetching missing commit(s) from \" + scm.getUserRemoteConfigs().get(0).getUrl());\n                git.fetch_().from(scm.getUserRemoteConfigs().get(0).getUrl(), refSpecs).execute();\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 34.56530812938818}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// If the revision is a branch, and the branch is a hash, and the hash doesn't exist locally, then we need to fetch it.\n        if (rev.getBranches().isEmpty() && rev.getHash() != null) {\n            if (!commitExists(git, rev.getHash())) {\n                // Create a refspec for the branch.\n                List<RefSpec> refSpecs = new ArrayList<>();\n                refSpecs.add(new RefSpec(\"+refs/heads/*:refs/remotes/origin/*\"));\n                // Fetch the remote repository.\n                listener.getLogger().println(\"Fetching remote repository...\");\n                git.fetch_().from(scm.getUserRemoteConfigs().get(0).getUrl(), refSpecs).execute();\n                listener.getLogger().println(\"Finished fetching remote repository.\");\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 32.389885667547034}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// If the revision is not a branch, we don't need to do anything\n        if (!(rev instanceof Branch)) {\n            return rev;\n        }\n\n        // If the revision is a branch, we need to check whether it is a local branch\n        Branch branch = (Branch) rev;\n        String branchName = branch.getName();\n        try {\n            git.revParse(branchName);\n            return rev;\n        } catch (GitException e) {\n            // The branch is not local\n        }\n\n        // If the branch is not local, we need to check whether the commit exists\n        String commit = branch.getSHA1String();\n        if (commitExists(git, commit)) {\n            return rev;\n        }\n\n        // If the commit doesn't exist, we need to fetch the branch\n        listener.getLogger().format(\"Fetching %s%n\", branchName);\n        scm.getExtensions().get(GitSCMExtension.class).getRefSpecs().add(new RefSpec(branchName + \":\" + branchName));\n        scm.getExtensions().get(GitSCMExtension.class).getUserRemoteConfigs().add(new UserRemoteConfig(scm.getUserRemoteConfigs().get(0).getUrl(), scm.getUserRemoteConfigs().get(0).getName(), scm.getUserRemoteConfigs().get(0).getRefspec(), scm.getUserRemoteConfigs().get(0).getCredentialsId()));\n        scm.getExtensions().get(GitSCMExtension.class).getSubmoduleCfg().add(new SubmoduleConfig(false, null, null, null, null));\n        scm.getExtensions().get(GitSCMExtension.class).getRelativeTargetDir().add(\"\");\n        scm.getExtensions().get(GitSCMExtension.class).getTimeout().add(null);\n        scm.getExtensions().get(GitSCMExtension.class).getDisableRemotePoll().add(false);\n        scm.getExtensions().get(GitSCMExtension.class).getIgnoreNotifyCommit().add(false);\n        scm.getExtensions().get(GitSCMExtension.class).getPruneB", "CodeBleu_score": 29.33221355170516}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        newLinks.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return newLinks;\n}", "CodeBleu_score": 60.71109425582354}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n    return null;\n  }\n  Map<String, BitbucketHref> newLinks = new HashMap<>();\n  for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n    newLinks.put(entry.getKey(), entry.getValue().get(0));\n  }\n  return newLinks;\n}", "CodeBleu_score": 65.25375675774356}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref[]> entry : links.entrySet()) {\n        if (entry.getValue() != null && entry.getValue().length > 0) {\n            newLinks.put(entry.getKey(), entry.getValue()[0]);\n        }\n    }\n    return newLinks;\n}", "CodeBleu_score": 62.460004735206795}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resourceUri);\n\tconst groupedByRepo = groupBy(resources, this.mapToRepoName);\n\n\tfor (const repo of groupedByRepo.keys()) {\n\t\tconst resourceUris = groupedByRepo.get(repo)!;\n\t\tconst resourcePaths = resourceUris.map(uri => this.mapToPath(uri));\n\n\t\ttry {\n\t\t\tawait this.repositoryProvider.getRepository(repo)!.add(resourcePaths);\n\t\t} catch (e) {\n\t\t\tconst error = e.stderr || e;\n\t\t\tconst result = /No such file or directory/.test(error)\n\t\t\t\t? localize('no such file or directory', \"No such file or directory\")\n\t\t\t\t: error;\n\n\t\t\tconst message = localize('error adding', \"Error adding {0}: {1}\", resourcePaths.join(', '), result);\n\t\t\tthis.notificationService.error(message);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.66821916243876}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourcesByRepo = groupBy(resourceStates, s => s.resourceUri.authority);\n\tconst map = new Map<string, IResourceData[]>();\n\tfor (const [authority, resources] of resourcesByRepo) {\n\t\tconst repo = this.model.getRepository(authority);\n\t\tif (!repo) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst data = await repo.add(resources.map(s => s.resourceUri));\n\t\tmap.set(authority, data);\n\t}\n\n\tconst successCount = count(map.values(), d => d.success.length);\n\tconst failures = flatten(map.values()).filter(d => d.error);\n\tconst failureCount = failures.length;\n\n\tif (failureCount > 0) {\n\t\tconst message = localize('add all success', \"Successfully added {0} of {1} resources to source control.\n\nFollowing resources failed to add:\n{2}\", successCount, resourceStates.length, failures.map(f => f.resource).join('\n'));\n\t\tconst openOutputLink = localize('open log', \"Open Output\");\n\t\tconst result = await window.showErrorMessage(message, openOutputLink);\n\n\t\tif (result === openOutputLink) {\n\t\t\tthis.outputChannel.show();\n\t\t}\n\t} else {\n\t\tconst message = localize('add all success', \"Successfully added {0} resources to source control.\", resourceStates.length);\n\t\twindow.showInformationMessage(message);\n\t}\n}", "CodeBleu_score": 40.481417280917356}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resourceUri);\n\tconst resourceGroups = groupBy(resources, uri => this.uriIdentityService.extUri.getGitUri(uri).repoPath);\n\tconst added: URI[] = [];\n\tconst unsupported: URI[] = [];\n\tconst failed: URI[] = [];\n\tconst conflicts: URI[] = [];\n\n\tfor (const repoPath of Object.keys(resourceGroups)) {\n\t\tconst group = resourceGroups[repoPath];\n\t\tconst uris = group.map(r => this.uriIdentityService.extUri.getGitUri(r).fsPath);\n\n\t\ttry {\n\t\t\tconst result = await this.runByRepository(repoPath, uris);\n\n\t\t\tif (result.exitCode) {\n\t\t\t\tfor (const uri of group) {\n\t\t\t\t\tfailed.push(uri);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const uri of group) {\n\t\t\t\t\tadded.push(uri);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tfor (const uri of group) {\n\t\t\t\tfailed.push(uri);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst openDiff = (uri: URI) => {\n\t\tconst diffUris = this.getDiffUris(uri, this.uriIdentityService.extUri);\n\n\t\tif (diffUris.original && diffUris.modified) {\n\t\t\treturn this.editorService.openEditor({\n\t\t\t\toriginal: { resource: diffUris.original },\n\t\t\t\tmodified: { resource: diffUris.modified },\n\t\t\t\toptions: { pinned: true }\n\t\t\t});\n\t\t}\n\n\t\treturn this.editorService.openEditor({ resource: uri, options: { pinned: true } });\n\t};\n\n\tconst openConflict = (uri: URI) => {\n\t\tconst diffUris = this.getDiffUris", "CodeBleu_score": 42.33056928893728}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (!this.resourceStates || this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n        this.resourceStates = [await this.getSingleResource()];\n    }\n    return this.resourceStates.filter(r => r.resourceUri instanceof Uri) as Resource[];\n}", "CodeBleu_score": 25.903432240090083}, {"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\tthis.resourceStates = [await this.getSingleResource()];\n\t}\n\n\tthis.resourceStates = this.resourceStates.filter(r => r.resourceUri instanceof Uri);\n\n\treturn this.resourceStates;\n}", "CodeBleu_score": 22.844873595346215}, {"code": "protected async getResourceStates{\n\tif (!this.resourceStates || this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\tconst scmResource = await this.getSCMResource();\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resourceState => resourceState.resourceUri instanceof Uri);\n}", "CodeBleu_score": 41.648068080512566}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (uri?.scheme === \"svn\") {\n      uri = Uri.file(uri.fsPath);\n    }\n    if (uri?.scheme !== \"file\") {\n      return undefined;\n    }\n    const scm = await commands.executeCommand<SourceControl>(\"svn.getSCM\");\n    if (!scm) {\n      return undefined;\n    }\n    const repository = scm.repositories.find(\n      (repository) => repository.rootUri === uri\n    );\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 52.91128682828936}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (uri?.scheme === 'svn') {\n      uri = Uri.file(uri.path);\n    }\n    if (uri?.scheme === 'file') {\n      const scmResource = await this.getSCMResourceForFile(uri);\n      if (scmResource) {\n        return scmResource;\n      }\n    }\n    return undefined;\n  }", "CodeBleu_score": 26.933846993284803}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (uri) {\n      if (uri.scheme === 'svn') {\n        uri = uri.with({ scheme: 'file' });\n      }\n      const scmResource = await commands.executeCommand<Resource>(\n        'svn.getSCMResource',\n        uri\n      );\n      if (scmResource) {\n        return scmResource;\n      }\n    }\n    return undefined;\n  }", "CodeBleu_score": 29.570852335018884}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.status === Status.MODIFIED) {\n \t\tconst remoteRepository = await this.model.getRemoteRepository(element.resourceUri);\n \t\tconst diffArgs = [\n \t\t\t'-r', `${element.oldRevision}:${element.newRevision}`,\n \t\t\telement.resourceUri.fsPath,\n \t\t\t'--diff-cmd', this.diffCommand\n \t\t];\n\n \t\tif (remoteRepository) {\n \t\t\tdiffArgs.unshift('--diff-cmd-bin', remoteRepository.svnPath);\n \t\t}\n\n \t\treturn this.runDiff(diffArgs);\n \t} else if (element.status === Status.ADDED) {\n \t\tconst remoteRepository = await this.model.getRemoteRepository(element.resourceUri);\n \t\tconst diffArgs = [\n \t\t\t'-r', element.newRevision,\n \t\t\telement.resourceUri.fsPath,\n \t\t\t'--diff-cmd', this.diffCommand\n \t\t];\n\n \t\tif (remoteRepository) {\n \t\t\tdiffArgs.unshift('--diff-cmd-bin', remoteRepository.svnPath);\n \t\t}\n\n \t\treturn this.runDiff(diffArgs);\n \t}\n }", "CodeBleu_score": 41.56147553675621}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepo = await this.model.getRemoteRepository(element);\n    if (remoteRepo) {\n        if (element.changeType === Status.MODIFIED) {\n            this.openDiff(element, remoteRepo);\n        } else if (element.changeType === Status.ADDED) {\n            this.openFileRemote(element, remoteRepo);\n        }\n    }\n}", "CodeBleu_score": 40.99473869383144}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepo = await this.model.getRemoteRepository(element);\n        if (!remoteRepo) {\n            return;\n        }\n\n        if (element.status === Status.MODIFIED) {\n            this.openDiff(element.oldPath, element.oldRevision, element.newPath, element.newRevision, remoteRepo);\n        } else if (element.status === Status.ADDED) {\n            this.openFileRemote(element.newPath, element.newRevision, remoteRepo);\n        }\n    }", "CodeBleu_score": 43.60520437252292}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!clipboard.writeText) {\n    window.showErrorMessage(\n      \"Clipboard not supported. Please install the latest version of VS Code.\"\n    );\n    return;\n  }\n\n  if (item.type === \"commit\") {\n    let commitMessage: string;\n    if (what === \"message\") {\n      commitMessage = item.commit.message;\n    } else {\n      commitMessage = item.commit.revision;\n    }\n\n    await clipboard.writeText(commitMessage);\n  } else {\n    window.showErrorMessage(\n      \"This command is only available when a commit is selected.\"\n    );\n  }\n}", "CodeBleu_score": 32.2803932186134}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!clipboard.availableFormats().includes(clipboard.availableFormats().includes(\"public.utf8-plain-text\"))) {\n    window.showErrorMessage(\"Clipboard not available\");\n    return;\n  }\n\n  if (item.type === \"commit\") {\n    const commit = item.commit;\n    let commitMessage = \"\";\n    if (what === \"message\") {\n      commitMessage = commit.message;\n    } else if (what === \"revision\") {\n      commitMessage = commit.revision;\n    }\n    await clipboard.writeText(commitMessage);\n  }\n}", "CodeBleu_score": 38.22846596959993}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!vscode.env.clipboard.writeText) {\n    window.showErrorMessage(\n      \"Copying to clipboard is not supported on this platform.\"\n    );\n    return;\n  }\n\n  let message: string;\n  if (item.type === \"commit\") {\n    if (what === \"message\") {\n      message = item.commit.message;\n    } else if (what === \"revision\") {\n      message = item.commit.revision;\n    }\n  } else if (item.type === \"branch\") {\n    message = item.branch.name;\n  } else if (item.type === \"tag\") {\n    message = item.tag.name;\n  } else if (item.type === \"stash\") {\n    message = item.stash.name;\n  }\n\n  if (message) {\n    await vscode.env.clipboard.writeText(message);\n  } else {\n    window.showErrorMessage(\n      \"The selected item is not a commit, branch, tag or stash.\"\n    );\n  }\n}", "CodeBleu_score": 32.031949494376164}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tGitea gitea = getInstanceOrNull();\n    if (gitea != null) {\n        gitea.setClassLoader(getPluginManager().getClassLoader());\n    }\n    return gitea;\n}", "CodeBleu_score": 29.003345547558922}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        this.setClassLoader(jenkins.getPluginManager().getClassLoader());\n    } else {\n        this.setClassLoader(Gitea.class.getClassLoader());\n    }\n    return this;\n}", "CodeBleu_score": 37.2369506931743}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        classLoader = jenkins.pluginManager.getClassLoader();\n    } else {\n        classLoader = getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 50.17189615019557}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t", "CodeBleu_score": 12.653061224489798}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = trimToNull(displayName);\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? trimToNull(credentialsId) : null;\n        this.aliasUrl = trimToNull(aliasUrl);\n    }", "CodeBleu_score": 37.10440818670565}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    if (manageHooks) {\n        this.credentialsId = credentialsId;\n    }\n    this.aliasUrl = trimToNull(aliasUrl);\n}", "CodeBleu_score": 30.926667270552706}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (checkPermission(Item.CONFIGURE)) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        return includeMatchingAs(\n            ListBoxModel.class,\n            CredentialsMatchers.instanceOf(StandardCredentials.class),\n            GiteaAuth.lookupScanCredentials(serverUrl)\n        );\n    }\n    return new ListBoxModel();\n}", "CodeBleu_score": 36.46998022257519}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (serverUrl == null) {\n        return new StandardListBoxModel()\n                .includeEmptyValue()\n                .includeMatchingAs(\n                        ACL.SYSTEM,\n                        Jenkins.get(),\n                        StandardCredentials.class,\n                        Collections.<DomainRequirement>emptyList(),\n                        GiteaAuth.matcher(serverUrl)\n                );\n    } else {\n        return new StandardListBoxModel()\n                .includeEmptyValue()\n                .includeMatchingAs(\n                        ACL.SYSTEM,\n                        Jenkins.get(),\n                        StandardCredentials.class,\n                        Collections.<DomainRequirement>emptyList(),\n                        GiteaAuth.matcher(serverUrl)\n                );\n    }\n}", "CodeBleu_score": 27.854603847998362}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t// This is where you can check if the user has the right permissions to populate the credentials dropdown list.\n    // if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n    //     return new StandardListBoxModel();\n    // }\n\n    // Normalize the server URL.\n    serverUrl = normalizeServerUrl(serverUrl);\n\n    // Include any credentials that have been saved with a matching server URL.\n    return new StandardListBoxModel()\n        .includeMatchingAs(\n            StandardCredentials.class,\n            Jenkins.get(),\n            GiteaAuth.matcher(serverUrl),\n            Collections.emptyList()\n        );\n}", "CodeBleu_score": 28.702561229554103}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n    return null;\n  }\n  try {\n    URI uri = new URI(serverUrl);\n    String scheme = uri.getScheme();\n    if (scheme == null) {\n      return null;\n    }\n    scheme = scheme.toLowerCase();\n    int port = uri.getPort();\n    if (port == -1) {\n      if (\"http\".equals(scheme)) {\n        port = 80;\n      } else if (\"https\".equals(scheme)) {\n        port = 443;\n      }\n    }\n    String host = uri.getHost();\n    if (host == null) {\n      return null;\n    }\n    host = host.toLowerCase();\n    String path = uri.getPath();\n    if (path == null) {\n      path = \"/\";\n    }\n    String query = uri.getQuery();\n    if (query != null) {\n      query = query.replaceAll(\"&\", \"&amp;\").replaceAll(\"=\", \"&equals;\");\n    }\n    String fragment = uri.getFragment();\n    if (fragment != null) {\n      fragment = fragment.replaceAll(\"&\", \"&amp;\").replaceAll(\"=\", \"&equals;\");\n    }\n    String userInfo = uri.getUserInfo();\n    if (userInfo != null) {\n      userInfo = userInfo.replaceAll(\"&\", \"&amp;\").replaceAll(\"=\", \"&equals;\");\n    }\n    return String.format(\"%s://%s:%d%s%s?%s#%s\", scheme, host, port, path, path.endsWith(\"/\") ? \"\" : \"/\", query, fragment);\n  } catch (URISyntaxException e) {\n    return serverUrl.toLowerCase().replaceAll(\"&\", \"&amp;\").replaceAll(\"=\", \"&equals;\");\n  }\n}", "CodeBleu_score": 45.45637857958963}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        if (host == null) {\n            return null;\n        }\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        String query = uri.getQuery();\n        if (query == null) {\n            query = \"\";\n        }\n        String fragment = uri.getFragment();\n        if (fragment == null) {\n            fragment = \"\";\n        }\n        return String.format(\"%s://%s:%d%s?%s#%s\", scheme, host, port, path, query, fragment);\n    } catch (Exception e) {\n        return null;\n    }\n}", "CodeBleu_score": 42.22639347062929}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        String userInfo = uri.getUserInfo();\n\n        // If the scheme is not specified, default to http.\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n\n        // If the host is not specified, default to localhost.\n        if (host == null) {\n            host = \"localhost\";\n        }\n\n        // If the path is not specified, default to the root path.\n        if (path == null) {\n            path = \"/\";\n        }\n\n        // If the path ends with a slash, remove it.\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n\n        // If the port is not specified, default to the default port for the scheme.\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n\n        // If the port is the default port for the scheme, remove it.\n        if (port == 80 && scheme.equals(\"http\")) {\n            port = -1;\n        } else if (port == 443 && scheme.equals(\"https\")) {\n            port = -1;\n        }\n\n        // If the user info is not specified, remove it.\n        if (userInfo == null) {\n            userInfo = \"\";\n        }\n\n        // If the query is not specified, remove it.\n        if (query == null) {\n            query = \"\";\n        }\n\n        // If the fragment is not specified, remove it.\n        if (fragment == null) {\n            fragment = \"\";\n        }\n\n        // Build the normalized URL", "CodeBleu_score": 45.72272885253806}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    List<GiteaServer> servers = getServers();\n    for (GiteaServer server : servers) {\n        String name = server.getDisplayName();\n        if (StringUtils.isBlank(name)) {\n            name = server.getServerUrl();\n        }\n        items.add(name, server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 46.1362518210632}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName, server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.413321061753955}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName, server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.413321061753955}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tcheckPermission(GiteaServers.CONFIGURE);\n        servers = fixNull(servers);\n        servers = new ArrayList<>(new LinkedHashSet<>(servers));\n        servers.removeIf(GiteaServers::isBlank);\n        this.servers = servers;\n        save();\n    }", "CodeBleu_score": 21.958604171507705}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tcheckPermission(Jenkins.ADMINISTER);\n    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n    servers = new ArrayList<>(servers);\n    for (Iterator<GiteaServer> it = servers.iterator(); it.hasNext(); ) {\n        GiteaServer server = it.next();\n        if (server.getServerUrl() == null) {\n            it.remove();\n        }\n    }\n    servers = new ArrayList<>(new HashSet<>(servers));\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 42.274946095204676}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tcheckPermission(CONFIGURE);\n    servers = fixNull(servers);\n    servers = listIterator(servers).filter(GiteaServer::isValid).toList();\n    servers = listIterator(servers).filter(GiteaServer::isUnique).toList();\n    this.servers = Collections.unmodifiableList(new ArrayList<>(servers));\n    save();\n}", "CodeBleu_score": 26.841844889331934}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl = normalizeServerUrl(serverUrl);\n        if (serverUrl == null) {\n            return false;\n        }\n        boolean removed = false;\n        for (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (endpoint.getServerUrl().equals(serverUrl)) {\n                iterator.remove();\n                removed = true;\n            }\n        }\n        save();\n        return removed;\n    }", "CodeBleu_score": 46.46734366445564}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer endpoint : servers) {\n        if (!endpoint.getServerUrl().equals(serverUrl)) {\n            newServers.add(endpoint);\n        } else {\n            removed = true;\n        }\n    }\n    servers = newServers;\n    save();\n    return removed;\n}", "CodeBleu_score": 43.45077725634196}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n        serverUrl = normalizeServerUrl(serverUrl);\n        if (serverUrl == null) {\n            return false;\n        }\n        List<GiteaServer> eps = new ArrayList<>(servers);\n        boolean removed = false;\n        for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (serverUrl.equals(endpoint.getServerUrl())) {\n                iterator.remove();\n                removed = true;\n            }\n        }\n        if (removed) {\n            servers = eps;\n            save();\n        }\n        return removed;\n    }", "CodeBleu_score": 49.25622772082466}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n    if (el.getKind() == ElementKind.FIELD) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el);\n      descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n  }\n}", "CodeBleu_score": 48.12942112657426}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      if (el.getKind() != ElementKind.FIELD) {\n        throw new IllegalArgumentException(\"Annotation \" + annotation + \" can only be used on fields.\");\n      }\n\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el);\n\n      descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n  }", "CodeBleu_score": 47.17787047898505}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      if (el.getKind() == ElementKind.FIELD) {\n        Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\n        if (!attributes.containsKey(\"name\")) {\n          attributes.put(\"name\", el.getSimpleName().toString());\n        }\n\n        descriptorElements.add(new ConfigElement(asType(el.asType()), attributes));\n      }\n    }\n  }", "CodeBleu_score": 43.73871987959589}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String annotationName = annotation.getQualifiedName().toString();\n        if (annotationName.equals(annotationClass.getCanonicalName().replace(\"$\", \".\"))) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 46.2507245671292}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tString annotationClassName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 43.86604450997878}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 51.47137639164803}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n    }\n    if for_approval:\n        filters[\"status\"] = (\"in\", get_allowed_states_for_workflow(get_workflow(\"Leave Application\"), approver_id))\n        filters[\"name\"] = (\"!=\", employee)\n    else:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n    return filters\n\n", "CodeBleu_score": 30.256658156381377}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\"employee\": employee}\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"workflow_state\"] = get_allowed_states_for_workflow(\n            get_workflow(\"Leave Application\"), approver_id\n        )\n        filters[\"name\"] = (\"!=\", employee)\n    else:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n        filters[\"docstatus\"] = 1\n\n    return filters\n\n", "CodeBleu_score": 34.90891740452257}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = [\n        [\"Leave Application\", \"docstatus\", \"!=\", 2],\n        [\"Leave Application\", \"employee\", \"=\", employee],\n    ]\n\n    if for_approval:\n        filters.append([\"Leave Application\", \"status\", \"in\", get_allowed_states_for_workflow(get_workflow(\"Leave Application\"), approver_id)])\n        filters.append([\"Leave Application\", \"employee\", \"!=\", employee])\n\n    else:\n        filters.append([\"Leave Application\", \"status\", \"!=\", \"Cancelled\"])\n\n    return filters\n\n", "CodeBleu_score": 29.79390300841502}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tcurrent_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type.leave_type] = {\n            \"allocated\": leave_type.allocated_leaves,\n            \"balance\": leave_type.leaves_taken,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 39.009922106900746}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\ttoday = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n    return leave_balance_map\n\n\n\n\n", "CodeBleu_score": 37.78944188176785}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tleave_balance_map = {}\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail.leave_allocation,\n            \"balance\": leave_detail.leave_balance\n        }\n    return leave_balance_map\n\n\n\n\n", "CodeBleu_score": 40.663974261242956}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n        select\n            name, holiday_date, description\n        from\n            `tabHoliday`\n        where\n            parent = %(holiday_list)s and\n            holiday_date >= %(from_date)s and\n            holiday_date <= %(to_date)s and\n            repeat_this_holiday != 'Weekly Off'\n        order by\n            holiday_date\n        \"\"\",\n        values={\n            \"holiday_list\": holiday_list,\n            \"from_date\": frappe.utils.getdate(frappe.utils.today()),\n            \"to_date\": frappe.utils.getdate(frappe.utils.today()) + timedelta(days=365),\n        },\n        as_dict=True,\n    )\n    return [\n        {\n            \"name\": holiday.name,\n            \"holiday_date\": holiday.holiday_date,\n            \"description\": frappe.utils.strip_html(holiday.description),\n        }\n        for holiday in holidays\n    ]\n\n", "CodeBleu_score": 29.878364425172677}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n        select\n            name, holiday_date, description\n        from\n            `tabHoliday`\n        where\n            parent = %(holiday_list)s\n            and repeat_this_event = 0\n            and holiday_date >= %(from_date)s\n            and holiday_date <= %(to_date)s\n        order by\n            holiday_date\n        \"\"\",\n        values={\n            \"holiday_list\": holiday_list,\n            \"from_date\": getdate(frappe.local.nowdate()),\n            \"to_date\": getdate(add_months(frappe.local.nowdate(), 1)),\n        },\n        as_dict=1,\n    )\n    return [\n        {\n            \"name\": holiday.name,\n            \"holiday_date\": holiday.holiday_date,\n            \"description\": strip_html(holiday.description),\n        }\n        for holiday in holidays\n    ]\n\n", "CodeBleu_score": 29.284374237949084}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n        select\n            name,\n            description,\n            date,\n            from_date,\n            to_date,\n            half_day,\n            half_day_date,\n            is_lwp\n        from\n            `tabHoliday`\n        where\n            holiday_list = %(holiday_list)s\n            and is_lwp = 0\n            and weekly_off = 0\n            and docstatus = 1\n        order by\n            date asc\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=1,\n    )\n    return [\n        {\n            \"name\": holiday.name,\n            \"description\": strip_html(holiday.description),\n            \"date\": holiday.date,\n            \"from_date\": holiday.from_date,\n            \"to_date\": holiday.to_date,\n            \"half_day\": holiday.half_day,\n            \"half_day_date\": holiday.half_day_date,\n            \"is_lwp\": holiday.is_lwp,\n        }\n        for holiday in holidays\n    ]\n\n", "CodeBleu_score": 27.483641852014895}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\tsend_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.3235977382994575}, {"code": "def send_reminders_in_advance_weekly()\n\tsend_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.3235977382994575}, {"code": "def send_reminders_in_advance_weekly()\n\t# Check if the HR Settings specify to send reminders\n    send_reminders = frappe.db.get_single_value(\"HR Settings\", \"send_reminders\")\n    if not send_reminders:\n        return\n\n    # Check if the HR Settings specify to send reminders weekly\n    frequency = frappe.db.get_single_value(\"HR Settings\", \"frequency\")\n    if frequency != \"Weekly\":\n        return\n\n    # Call function to send reminders\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 52.2068466985022}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\tself.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.percentage_weightage * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 24.409139084755495}, {"code": "def calculate_self_appraisal_score(self)\n\tself.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += (rating.rating * rating.percentage) * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 24.99477210144487}, {"code": "def calculate_self_appraisal_score(self)\n\tself_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.weightage * 5\n    self.self_appraisal_score = flt(self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 22.772815594709066}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.use_formula:\n        data = {}\n        for employee_doc in self.employees:\n            data[employee_doc.employee] = employee_doc.as_dict()\n        sanitized_expr = sanitize_expression(appraisal_cycle_doc.formula)\n        final_score = flt(frappe.safe_eval(sanitized_expr, None, data))\n    else:\n        total_score = sum([employee_doc.total_score for employee_doc in self.employees])\n        avg_feedback_score = sum([employee_doc.avg_feedback_score for employee_doc in self.employees])\n        self_appraisal_score = sum([employee_doc.self_appraisal_score for employee_doc in self.employees])\n        final_score = (total_score + avg_feedback_score + self_appraisal_score) / 3\n    self.final_score = round(final_score, self.precision)\n\n", "CodeBleu_score": 37.05030991621576}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.final_score_calculation_method == \"Formula\":\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n\n        # Retrieve the formula from the appraisal cycle document\n        formula = appraisal_cycle_doc.final_score_formula\n\n        # Sanitize the formula\n        formula = sanitize_expression(formula)\n\n        # Evaluate the formula\n        final_score = frappe.safe_eval(formula, data)\n    else:\n        final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n\n    # Set the final score with the appropriate precision\n    self.final_score = flt(final_score, self.precision)\n\n", "CodeBleu_score": 37.19912709186099}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n            \"appraisal_cycle_doc\": appraisal_cycle_doc.as_dict(),\n            \"employee_doc\": self.employee.as_dict(),\n            \"appraisal_doc\": self.as_dict()\n        }\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        self.final_score = flt(frappe.safe_eval(formula, None, data), self.precision)\n    else:\n        self.final_score = flt((self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, self.precision)\n\n    self.db_set(\"final_score\", self.final_score)\n\n", "CodeBleu_score": 40.557147148208486}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif self.status != \"On Leave\" and getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n    if getdate(self.attendance_date) < getdate(self.employee_date_of_joining):\n        frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\"))\n", "CodeBleu_score": 30.89479791119113}, {"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is On Leave and there is no leave application\"))\n    if self.attendance_date < getdate(get_value(\"Employee\", self.employee, \"date_of_joining\")):\n        frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 25.83891186863457}, {"code": "def validate_attendance_date(self)\n\tif self.status != \"On Leave\" and self.attendance_date > getdate(nowdate()):\n        frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is On Leave and there is no leave application.\"))\n    if self.attendance_date < getdate(self.employee.date_of_joining):\n        frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\"))\n\n", "CodeBleu_score": 26.00373421393244}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Duplicate attendance record found for {0} on {1}. Please check <a href='{2}'>{2}</a>.\"\n            ).format(\n                frappe.bold(self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate),\n            )\n        )\n\n", "CodeBleu_score": 38.10762469599127}, {"code": "def validate_duplicate_record(self)\n\tduplicate_attendance_record = self.get_duplicate_attendance_record()\n\n    if duplicate_attendance_record:\n        frappe.throw(\n            _(\n                \"An attendance record already exists for {0} on {1}. Please <a href='{2}'>{3}</a> to update the record.\"\n            ).format(\n                frappe.bold(self.employee_name),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", duplicate_attendance_record),\n                duplicate_attendance_record,\n            )\n        )\n\n", "CodeBleu_score": 34.91127330456833}, {"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\"Attendance record already exists for employee {0} on {1}. <a href='{2}'>{2}</a>\").format(\n                frappe.bold(self.employee_name),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", duplicate),\n            )\n        )\n\n", "CodeBleu_score": 44.461829305305386}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t# get the message details\n    message_details = self.get_message_details()\n    # get the email addresses of users in the specified group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n    # send an email with the summary using a template\n    self.send_email(emails, message_details)\n    # update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 22.414991740098113}, {"code": "def send_summary(self)\n\tself.db_set(\"status\", \"Sent\")\n    message = self.get_message_details()\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n    frappe.sendmail(\n        recipients=emails,\n        sender=frappe.get_value(\"Email Account\", filters={\"default_outgoing\": 1}, fieldname=\"email_id\"),\n        subject=_(\"Work Summary for {0}\").format(global_date_format(self.creation)),\n        template=\"daily_work_summary\",\n        args=message,\n    )\n\n", "CodeBleu_score": 60.851084455800944}, {"code": "def send_summary(self)\n\t# Get message details\n    message_details = self.get_message_details()\n    # Get email addresses of users in group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n    # Send email\n    frappe.sendmail(\n        recipients=emails,\n        sender=frappe.session.user,\n        subject=message_details[\"title\"],\n        template=\"daily_work_summary\",\n        args=message_details,\n        header=[message_details[\"title\"], \"green\"],\n        reply_to=self.email_sent_to,\n        attachments=self.get_attachments(),\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n    # Update status\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 46.86436085607237}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\tif self.applicant:\n        interview_exists = frappe.db.sql(\"\"\"select name, applicant_name, applicant_id, interview_round, interview_date, status, job_applicant, interview_location\n                                            from `tabInterview`\n                                            where applicant = %s and interview_round = %s and docstatus < 2 and name != %s\"\"\", (self.applicant, self.interview_round, self.name))\n        if interview_exists:\n            frappe.throw(_(\"Job Applicant {0} is already scheduled for interview in round {1} on {2} at {3}. Interview Status: {4}. Please <a href='{5}'>{6}</a> to see the existing record.\").format(\n                get_link_to_form(\"Job Applicant\", self.applicant, self.applicant),\n                get_link_to_form(\"Interview Round\", self.interview_round, self.interview_round),\n                format(interview_exists[0][2]),\n                format(interview_exists[0][3]),\n                get_link_to_form(\"Interview\", interview_exists[0][0], interview_exists[0][0]),\n                interview_exists[0][0],\n                interview_exists[0][4]\n            ))\n", "CodeBleu_score": 39.33517216583691}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant:\n        if frappe.db.exists('Interview', {'job_applicant': self.job_applicant, 'interview_round': self.interview_round, 'name': ['!=', self.name]}):\n            existing_interview = frappe.db.get_value('Interview', {'job_applicant': self.job_applicant, 'interview_round': self.interview_round}, 'name')\n            frappe.throw(_('Job Applicant {0} has already been scheduled for the same interview round. Please edit the existing interview record {1} for this applicant.').format(\n                get_link_to_form('Job Applicant', self.job_applicant, self.job_applicant),\n                get_link_to_form('Interview', existing_interview, existing_interview)\n            ))\n\n", "CodeBleu_score": 43.811091363107494}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant and self.interview_round:\n        interview_exists = frappe.db.exists(\n            'Interview',\n            {\n                'job_applicant': self.job_applicant,\n                'interview_round': self.interview_round,\n                'name': ['!=', self.name]\n            }\n        )\n        if interview_exists:\n            interview = frappe.get_doc('Interview', interview_exists)\n            frappe.throw(\n                _('Job applicant {0} is already scheduled for interview in round {1}.').format(\n                    get_link_to_form('Job Applicant', self.job_applicant),\n                    get_link_to_form('Interview Round', self.interview_round)\n                )\n            )\n\n\n\n\n", "CodeBleu_score": 42.396212705531596}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\tassessments = self.get_assessments()\n    if len(assessments) == 0:\n        self.average_rating = 0\n    else:\n        total = 0\n        for assessment in assessments:\n            if assessment.rating is not None:\n                total += assessment.rating\n        self.average_rating = total / len(assessments)\n\n\n\n\n", "CodeBleu_score": 24.199105142433336}, {"code": "def calculate_average_rating(self)\n\tif len(self.assessments) > 0:\n        total = 0\n        for assessment in self.assessments:\n            if assessment.rating:\n                total += assessment.rating\n        self.average_rating = total / len(self.assessments)\n    else:\n        self.average_rating = 0\n\n\n\n\n", "CodeBleu_score": 35.16320654476343}, {"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0", "CodeBleu_score": 24.82453903493814}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t# Create a new Interview document\n    interview = frappe.new_doc(\"Interview\")\n\n    # Set the interview round and designation\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n\n    # Add interviewers to the interview details\n    for interviewer in doc.interviewers:\n        interview.append(\"interviewers\", {\n            \"interviewer\": interviewer.interviewer\n        })\n\n    # Save the Interview document\n    interview.save()\n\n    # Return the Interview document\n    return interview\n\n", "CodeBleu_score": 43.446896258393416}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 34.677124494039724}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interviewers = doc.interviewers\n    interview.save(ignore_permissions=True)\n    return interview\n", "CodeBleu_score": 35.729066874265364}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offer_list = frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and docstatus = 1 and date_of_creation between %s and %s\"\"\", (self.designation, self.company, from_date, to_date))\n    return job_offer_list\n\n\n\n\n", "CodeBleu_score": 34.464997351755905}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offer_list = []\n    for job_offer in frappe.get_all('Job Offer', filters={'designation': self.designation, 'company': self.company, 'docstatus': 1, 'creation': ['between', [from_date, to_date]]}, fields=['name']):\n        job_offer_list.append(job_offer.name)\n    return job_offer_list", "CodeBleu_score": 52.80534881629065}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offer = frappe.get_all(\"Job Offer\",\n                               filters={\"designation\": self.designation,\n                                        \"company\": self.company,\n                                        \"docstatus\": 1,\n                                        \"creation\": [\"between\", [from_date, to_date]]},\n                               fields=[\"name\"])\n    return job_offer\n\n", "CodeBleu_score": 55.72600944442845}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t# This is a function that calculates the offer acceptance rate for job offers, optionally filtered by company or department. It counts the total job offers with a docstatus of 1 and the accepted job offers within those filters. It then returns the acceptance rate as a percentage, along with the field type \"Percent.\"\n\n    # Get the total number of job offers\n    total_job_offers = frappe.db.sql(\n        \"\"\"\n        SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1\n        \"\"\"\n    )\n    # Get the total number of accepted job offers\n    accepted_job_offers = frappe.db.sql(\n        \"\"\"\n        SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted'\n        \"\"\"\n    )\n    # Get the total number of rejected job offers\n    rejected_job_offers = frappe.db.sql(\n        \"\"\"\n        SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Rejected'\n        \"\"\"\n    )\n\n    # Get the total number of job offers with a department filter\n    if department:\n        total_job_offers_dept = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND department = %(department)s\n            \"\"\",\n            {\"department\": department},\n        )\n        # Get the total number of accepted job offers with a department filter\n        accepted_job_offers_dept = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND department = %(department)s AND status = 'Accepted'\n            \"\"\",\n            {\"department\": department},\n        )\n        # Get the total number of rejected job offers with a department filter\n        rejected_job_offers_dept = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND department = %(department)s AND status = 'Rejected'\n            \"\"\",\n            {\"department\": department},", "CodeBleu_score": 18.17037201257085}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company and department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT COUNT(name)\n            FROM `tabJob Offer`\n            WHERE company = %(company)s\n            AND department = %(department)s\n            AND docstatus = 1\n        \"\"\", {\n            \"company\": company,\n            \"department\": department\n        })\n\n        accepted_job_offers = frappe.db.sql(\"\"\"\n            SELECT COUNT(name)\n            FROM `tabJob Offer`\n            WHERE company = %(company)s\n            AND department = %(department)s\n            AND docstatus = 1\n            AND status = \"Accepted\"\n        \"\"\", {\n            \"company\": company,\n            \"department\": department\n        })\n\n    elif company and not department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT COUNT(name)\n            FROM `tabJob Offer`\n            WHERE company = %(company)s\n            AND docstatus = 1\n        \"\"\", {\n            \"company\": company\n        })\n\n        accepted_job_offers = frappe.db.sql(\"\"\"\n            SELECT COUNT(name)\n            FROM `tabJob Offer`\n            WHERE company = %(company)s\n            AND docstatus = 1\n            AND status = \"Accepted\"\n        \"\"\", {\n            \"company\": company\n        })\n\n    elif not company and department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT COUNT(name)\n            FROM `tabJob Offer`\n            WHERE department = %(department)s\n            AND docstatus = 1\n        \"\"\", {\n            \"department\": department\n        })\n\n        accepted_job_offers = frappe.db.sql(\"\"\"\n            SELECT COUNT(name)\n            FROM `tabJob Offer`\n            WHERE department = %(department)s\n            AND docstatus = 1\n            AND status = \"Accepted\"\n        \"\"\", {\n            \"department\": department\n        })\n\n    elif not company and not department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT COUNT(", "CodeBleu_score": 19.7126039310339}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company and department:\n        job_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where company = %s and department = %s and docstatus = 1\"\"\", (company, department))\n        accepted_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where company = %s and department = %s and docstatus = 1 and status = 'Accepted'\"\"\", (company, department))\n    elif company:\n        job_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where company = %s and docstatus = 1\"\"\", (company))\n        accepted_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where company = %s and docstatus = 1 and status = 'Accepted'\"\"\", (company))\n    elif department:\n        job_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where department = %s and docstatus = 1\"\"\", (department))\n        accepted_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where department = %s and docstatus = 1 and status = 'Accepted'\"\"\", (department))\n    else:\n        job_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1\"\"\")\n        accepted_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1 and status = 'Accepted'\"\"\")\n    if job_offers[0][0] == 0:\n        return 0, \"Percent\"\n    else:\n        return flt(accepted_offers[0][0] / job_offers[0][0] * 100), \"Percent\"\n\n\n\n\n", "CodeBleu_score": 24.039772977196822}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.notFound);\n\t\t}\n\t\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()));\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tsave(companyStaff);\n\t\treturn new SuccessResult(Messages.updated);\n\t}", "CodeBleu_score": 43.850736589194355}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal var companyStaff = findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff.isEmpty()) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\t\tfinal var result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.get().getPassword());\n\t\tif (result.isSuccess()) {\n\t\t\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\tsave(companyStaff.get());\n\t\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 47.60498852445777}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.notFound);\n\t\t}\n\n\t\tif (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n\t\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setUpdated(new Date());\n\t\tsave(companyStaff);\n\t\treturn new SuccessResult(Messages.updated);\n\t}", "CodeBleu_score": 36.12354335150063}]}
