{"instance_id": "112855ce32e1", "generation_result": [{"code": "handleOpenMarketplace = (): void => {\n\tthis.props.actions.openModal({\n        modalId: ModalIdentifiers.PLUGIN_MARKETPLACE,\n        dialogType: MarketplaceDialog,\n        dialogProps: {\n            isRoot: true,\n            serverError: this.props.serverError,\n        },\n    });\n}", "CodeBleu_score": 26.05139957676264}, {"code": "handleOpenMarketplace = (): void => {\n\tthis.props.actions.openModal({\n        modalId: ModalIdentifiers.PLUGIN_MARKETPLACE,\n        dialogType: MarketplaceDialog,\n        dialogProps: {\n            isRootModal: true,\n            source: 'actions_menu',\n        },\n    });\n}", "CodeBleu_score": 28.021878011982}, {"code": "handleOpenMarketplace = (): void => {\n\tconst { actions } = this.props;\n  const { openModal } = actions;\n  openModal(\n    'MARKETPLACE_MODAL',\n    'MARKETPLACE_MODAL',\n    {\n      source: 'actions_menu',\n      modalProps: {\n        title: 'Marketplace',\n        subtitle: 'Explore and install new apps',\n        marketplaceUrl: 'https://marketplace.walletconnect.com/',\n      },\n    },\n  );\n}", "CodeBleu_score": 22.538849270148187}]}
{"instance_id": "421836df0bf0", "generation_result": [{"code": "onClickAppBinding = async (binding: AppBinding) =>{\n\tconst context = createCallContext(binding.location, this.props.channelId, this.props.teamId, this.props.post.id, this.props.post.root_id);\n    try {\n        const callResponse = await this.props.actions.handleBindingClick(binding, context, this.props.intl);\n        if (callResponse.type === 'OK') {\n            this.props.actions.postEphemeralCallResponseForPost(callResponse, this.props.post.id, this.props.intl);\n        } else if (callResponse.type === 'NAVIGATE') {\n            handleGotoLocation(callResponse.navigate_to_url, this.props.actions.openAppsModal);\n        } else if (callResponse.type === 'FORM') {\n            this.props.actions.openAppsModal(callResponse.form, context, this.props.intl);\n        } else {\n            this.props.actions.postEphemeralCallResponseForPost(callResponse, this.props.post.id, this.props.intl);\n        }\n    } catch (err) {\n        this.props.actions.postEphemeralCallResponseForPost(err, this.props.post.id, this.props.intl);\n    }\n}", "CodeBleu_score": 29.181737525296715}, {"code": "onClickAppBinding = async (binding: AppBinding) =>{\n\tconst {intl} = this.props;\n\n    let context = createCallContext(\n        binding.app_id,\n        binding.location,\n        this.props.channelId,\n        this.props.teamId,\n        this.props.post.id,\n        this.props.post.root_id,\n    );\n\n    let callResponse;\n    try {\n        callResponse = await this.props.actions.handleBindingClick(binding, context, intl);\n    } catch (error) {\n        this.props.actions.postEphemeralCallResponseForPost(error.message, this.props.post.id, this.props.channelId);\n        return;\n    }\n\n    if (callResponse.type === 'OK') {\n        this.props.actions.postEphemeralCallResponseForPost(callResponse.text, this.props.post.id, this.props.channelId);\n        return;\n    }\n\n    if (callResponse.type === 'NAVIGATE') {\n        this.props.actions.handleGotoLocation(binding.location, context);\n        return;\n    }\n\n    if (callResponse.type === 'FORM') {\n        this.props.actions.openAppsModal(binding, context);\n        return;\n    }\n\n    this.props.actions.postEphemeralCallResponseForPost(\n        intl.formatMessage(\n            {\n                id: 'apps.error.unsupported_type',\n                defaultMessage: 'App response type not supported. Response type: {type}',\n            },\n            {\n                type: callResponse.type,\n            },\n        ),\n        this.props.post.id,\n        this.props.channelId,\n    );\n}", "CodeBleu_score": 46.11778941705494}, {"code": "onClickAppBinding = async (binding: AppBinding) =>{\n\tconst {\n        intl,\n        post,\n        team,\n        channel,\n        actions,\n    } = this.props;\n    const callContext = createCallContext(binding.app_id, binding.location, channel.id, team.id, post.id, post.root_id);\n    let callResponse;\n    try {\n        callResponse = await actions.handleBindingClick(binding, callContext, intl);\n    } catch (error) {\n        actions.postEphemeralCallResponseForPost(error.message, post.id, callContext.location);\n        return;\n    }\n    switch (callResponse.type) {\n    case AppCallResponseTypes.OK:\n        actions.postEphemeralCallResponseForPost(callResponse.text || '', post.id, callContext.location);\n        break;\n    case AppCallResponseTypes.NAVIGATE:\n        handleNavigate(callResponse.navigate_to_url, callContext.location);\n        break;\n    case AppCallResponseTypes.FORM:\n        actions.openAppsModal(callResponse.form, callContext);\n        break;\n    default:\n        actions.postEphemeralCallResponseForPost(\n            intl.formatMessage(\n                {\n                    id: 'apps.error.responses.unknown_type',\n                    defaultMessage: 'App response type not supported. Response type: {type}',\n                },\n                {\n                    type: callResponse.type,\n                },\n            ),\n            post.id,\n            callContext.location,\n        );\n        break;\n    }\n}", "CodeBleu_score": 40.81482799565161}]}
{"instance_id": "7b2d58ae93e2", "generation_result": [{"code": "handleDropdownOpened = (open: boolean) =>{\n\tconst {\n    onDropdownOpen,\n    buttonRef,\n    dropdownRef,\n    dropdownPosition,\n    dropdownAlign,\n  } = this.props;\n\n  if (!open) {\n    return onDropdownOpen(false);\n  }\n\n  const buttonRect = buttonRef.current.getBoundingClientRect();\n  const dropdownRect = dropdownRef.current.getBoundingClientRect();\n  const windowHeight = window.innerHeight;\n  const spaceAbove = buttonRect.top;\n  const spaceBelow = windowHeight - buttonRect.bottom;\n  const align = dropdownAlign || (spaceAbove > spaceBelow ? 'top' : 'bottom');\n  const position = dropdownPosition || (align === 'top' ? 'above' : 'below');\n\n  onDropdownOpen(true);\n  this.setState({ align, position });\n}", "CodeBleu_score": 34.68838376108212}, {"code": "handleDropdownOpened = (open: boolean) =>{\n\tconst { onDropdownOpen, dropdownButton } = this.props;\n  if (!open) {\n    return;\n  }\n  const dropdownButtonRect = dropdownButton.current.getBoundingClientRect();\n  const dropdownButtonTop = dropdownButtonRect.top;\n  const dropdownButtonBottom = dropdownButtonRect.bottom;\n  const availableSpaceAbove = dropdownButtonTop;\n  const availableSpaceBelow = window.innerHeight - dropdownButtonBottom;\n  const direction = availableSpaceAbove > availableSpaceBelow ? 'up' : 'down';\n  this.setState({ direction });\n  onDropdownOpen(direction);\n}", "CodeBleu_score": 30.98604787090408}, {"code": "handleDropdownOpened = (open: boolean) =>{\n\tif (!open) {\n    this.setState({ isDropdownOpen: open });\n    return;\n  }\n\n  const { isDropdownOpen } = this.state;\n  const { isDropdownUpwards } = this.props;\n  const { currentTarget } = this.buttonRef;\n  const { top, bottom, height } = currentTarget.getBoundingClientRect();\n\n  const availableSpaceAbove = top;\n  const availableSpaceBelow = window.innerHeight - bottom;\n\n  const isDropdownUpwardsCalculated =\n    isDropdownUpwards || availableSpaceBelow < availableSpaceAbove;\n\n  this.setState({\n    isDropdownOpen,\n    isDropdownUpwards: isDropdownUpwardsCalculated,\n    dropdownTop: isDropdownUpwardsCalculated ? top - height : bottom,\n  });\n}", "CodeBleu_score": 26.615563613507298}]}
{"instance_id": "024f57c26061", "generation_result": [{"code": "function mapStateToProps(state: GlobalState, ownProps: Props){\n\tconst post = ownProps.post;\n    const isSystemMessage = isSystemMessageForPost(post);\n\n    let apps: AppBinding[] = [];\n    let appsEnabled = false;\n    let pluginPostTypes: PluginPostType[] = [];\n    let pluginComponents: JSX.Element[] = [];\n    let userRoles: string[] = [];\n\n    if (post && !isSystemMessage) {\n        const postType = post.type;\n\n        apps = getAppBindings(state, postType);\n        appsEnabled = areAppsEnabled(state);\n        pluginPostTypes = getPluginPostTypes(state);\n        pluginComponents = getPluginPostComponents(state, postType);\n        userRoles = getCurrentUserRoles(state);\n    }\n\n    const currentUser = getCurrentUser(state);\n    const isSystemAdmin = haveISystemPermission(currentUser.roles, {permission: Permissions.MANAGE_SYSTEM});\n\n    return {\n        apps,\n        appsEnabled,\n        isSystemMessage,\n        isSystemAdmin,\n        pluginPostTypes,\n        pluginComponents,\n        userRoles,\n        getPostOptionBinding,\n        getIsMobileView: (state: GlobalState) => state.views.channel.isMobileView,\n        isMarketplaceEnabled: isModalOpen(state, ModalIdentifiers.PLUGIN_MARKETPLACE),\n        haveICurrentTeamPermission: haveICurrentTeamPermission(state, Permissions.MANAGE_SYSTEM),\n        getCurrentTeamId: (state: GlobalState) => getCurrentTeamId(state),\n        isCombinedUserActivityPost: isCombinedUserActivityPost(post),\n        getCurrentUser: (state: GlobalState) => getCurrentUser(state),\n        appsEnabled: (state: GlobalState) => areAppsEnabled(state),\n        isSystemMessage: (state: GlobalState, post: Post) => isSystemMessageForPost(post),\n        isSystemAdmin: (state: GlobalState) => haveISystemPermission(getCurrentUser(state).roles, {permission: Permissions.MANAGE_SYSTEM}),\n    };\n}", "CodeBleu_score": 39.933627711780915}, {"code": "function mapStateToProps(state: GlobalState, ownProps: Props){\n\tconst post = ownProps.post;\n    const isEphemeral = isPostEphemeral(post);\n    const isSystemMessage = isSystemMessageForPost(post);\n    const isMobileView = isMobileView(state);\n    const isCombinedUserActivityPost = isCombinedUserActivityPostForPost(state, post.id);\n    const currentUser = getCurrentUser(state);\n    const appsEnabled = appsEnabled(state);\n    const isSystemAdmin = haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM});\n\n    let pluginPostTypes = [];\n    if (post.type === Posts.POST_TYPES.PLUGIN_POST) {\n        pluginPostTypes = getPluginPostTypes().map((pt) => pt.id);\n    }\n\n    const postType = post.type;\n    const postTypePluginComponent = getPostTypePluginComponent(postType);\n\n    let apps;\n    if (appsEnabled && !isEphemeral && !isSystemMessage && !isCombinedUserActivityPost) {\n        apps = getAppsBindings(state, post);\n    }\n\n    let currentTeamId = '';\n    if (post.type === Posts.POST_TYPES.CHANNEL_PURPOSE_UPDATE ||\n        post.type === Posts.POST_TYPES.CHANNEL_NAME_UPDATE ||\n        post.type === Posts.POST_TYPES.CHANNEL_DELETED) {\n        currentTeamId = getCurrentTeamId(state);\n    }\n\n    return {\n        apps,\n        appsEnabled,\n        currentTeamId,\n        isCombinedUserActivityPost,\n        isEphemeral,\n        isMobileView,\n        isSystemMessage,\n        isSystemAdmin,\n        postType,\n        postTypePluginComponent,\n        pluginPostTypes,\n        userRoles: getCurrentUserRoles(state),\n    };\n}", "CodeBleu_score": 41.86557137561985}, {"code": "function mapStateToProps(state: GlobalState, ownProps: Props){\n\tconst post = ownProps.post;\n    const isSystemMessage = post.type === PostTypes.ADD_TO_CHANNEL || post.type === PostTypes.JOIN_CHANNEL || post.type === PostTypes.LEAVE_CHANNEL || post.type === PostTypes.REMOVE_FROM_CHANNEL;\n\n    const appBindings = getAppBindings(state, post.channel_id, post.id);\n    const appsEnabled = state.entities.apps.enabled;\n\n    const pluginPostTypes = state.plugins.postTypes;\n\n    const isCombinedUserActivityPost = isCombinedSystemMessage(post.type);\n\n    const currentUser = getCurrentUser(state);\n    const isSystemAdmin = haveISystemPermission(currentUser.roles, {permission: Permissions.MANAGE_SYSTEM});\n\n    return {\n        appBindings,\n        appsEnabled,\n        isSystemMessage,\n        isSystemAdmin,\n        pluginPostTypes,\n        isCombinedUserActivityPost,\n        currentUser,\n        getCurrentTeamId: getCurrentTeamId(state),\n        getIsMobileView: getIsMobileView(state),\n        haveICurrentTeamPermission: haveICurrentTeamPermission(state),\n        isMarketplaceEnabled: isMarketplaceEnabled(state),\n    };\n}", "CodeBleu_score": 45.937106244078194}]}
{"instance_id": "ae0a07f4dbea", "generation_result": [{"code": "export default function DeviceIcon(props: Props){\n\tconst { devicePicture, deviceTitle } = props;\n  const intl = useIntl();\n  const title = isMessageDescriptor(deviceTitle)\n    ? intl.formatMessage(deviceTitle)\n    : deviceTitle;\n\n  return (\n    <Icon\n      className={devicePicture}\n      title={title}\n      {...props}\n    />\n  );\n}", "CodeBleu_score": 36.732120046668435}, {"code": "export default function DeviceIcon(props: Props){\n\tconst { deviceTitle, devicePicture } = props;\n  const { formatMessage } = useIntl();\n\n  const isMessageDescriptor = typeof deviceTitle === 'object';\n  const title = isMessageDescriptor\n    ? formatMessage(deviceTitle)\n    : deviceTitle;\n\n  return <Icon className={devicePicture} title={title} />;\n}", "CodeBleu_score": 26.16003497864986}, {"code": "export default function DeviceIcon(props: Props){\n\tconst { devicePicture, deviceTitle, ...rest } = props\n  const { formatMessage } = useIntl()\n\n  const title = isMessageDescriptor(deviceTitle)\n    ? formatMessage(deviceTitle)\n    : deviceTitle\n\n  return <Icon className={devicePicture} title={title} {...rest} />\n}", "CodeBleu_score": 22.60807143595435}]}
{"instance_id": "e0a805402908", "generation_result": [{"code": "function mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n\tconst searchTerm = state.entities.users.mySearhTerm;\n\n\n    const currentChannel = ownProps.channel || getCurrentChannel(state);\n\n\n    const currentChannelTeams = getMyTeams(state).filter((team) => {\n\n\n        return team.id === currentChannel.team_id;\n\n\n    });\n\n\n    let currentTeam = currentChannelTeams.length > 0 ? currentChannelTeams[0] : {};\n\n\n    let currentTeamName = '';\n\n\n    if (currentTeam.name) {\n\n\n        currentTeamName = currentTeam.name;\n\n\n    } else if (currentTeam.display_name) {\n\n\n        currentTeamName = currentTeam.display_name;\n\n\n    }\n\n\n    const groups = getGroupsNotAssociatedToChannel(state, currentChannel.id);\n\n\n    let filteredGroups = groups;\n\n\n    if (searchTerm) {\n\n\n        const searchTermLowerCase = searchTerm.toLowerCase();\n\n\n        filteredGroups = groups.filter((group) => {\n\n\n            const groupName = group.display_name.toLowerCase();\n\n\n            return groupName.startsWith(searchTermLowerCase);\n\n\n        });\n\n\n    }\n\n\n    return {\n\n\n        currentChannelName: currentChannel.display_name,\n\n\n        currentChannelId: currentChannel.id,\n\n\n        currentTeamId: currentChannel.team_id,\n\n\n        currentTeamName,\n\n\n        searchTerm,\n\n\n        filteredGroups,\n\n\n    };\n\n\n}", "CodeBleu_score": 47.12149581816819}, {"code": "function mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n\tconst channel = ownProps.channel || getCurrentChannel(state);\n    const searchTerm = state.views.channel.searchTerm;\n    const groups = getGroupsNotAssociatedToChannel(state, channel.id);\n\n    return {\n        channelName: channel.name,\n        channelId: channel.id,\n        teamId: channel.team_id,\n        searchTerm,\n        groups: searchTerm ? filterGroups(groups, searchTerm) : groups,\n    };\n}", "CodeBleu_score": 38.30685755547803}, {"code": "function mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n\tconst channel = ownProps.channel || getCurrentChannel(state);\n  const searchTerm = state.views.channel.searchTerm;\n  const groups = getAssociatedGroupsForReference(state, channel.id);\n\n  return {\n    channelName: channel.display_name,\n    channelId: channel.id,\n    teamId: channel.team_id,\n    currentChannelId: getCurrentChannelId(state),\n    groups: searchTerm ? filterGroups(groups, searchTerm) : groups,\n    searchTerm,\n    ...ownProps,\n  };\n}", "CodeBleu_score": 39.549146922392055}]}
{"instance_id": "a3412b1c0762", "generation_result": [{"code": "componentDidUpdate(prevProps: Props){\n\tif (this.props.searchTerm !== prevProps.searchTerm) {\n    clearTimeout(this.searchTimeoutId);\n\n    this.searchTimeoutId = setTimeout(() => {\n      this.setGroupsLoadingState(true);\n\n      this.props.actions.getGroupsNotAssociatedToChannel(\n        this.props.currentTeamId,\n        this.props.currentChannelId,\n        this.props.searchTerm,\n      ).then(\n        () => {\n          this.setGroupsLoadingState(false);\n        },\n      );\n    }, SEARCH_DEBOUNCE_DURATION);\n  }\n}", "CodeBleu_score": 36.80098624453609}, {"code": "componentDidUpdate(prevProps: Props){\n\tif (this.props.searchTerm !== prevProps.searchTerm) {\n        clearTimeout(this.searchTimeoutId);\n\n        this.searchTimeoutId = setTimeout(\n            () => {\n                this.setGroupsLoadingState(true);\n                this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannel.id, this.props.searchTerm, this.props.excludeGroups);\n                this.setGroupsLoadingState(false);\n            },\n            Constants.SEARCH_TIMEOUT_MILLISECONDS,\n        );\n    }\n}", "CodeBleu_score": 44.47101946853364}, {"code": "componentDidUpdate(prevProps: Props){\n\tif (this.props.searchTerm !== prevProps.searchTerm) {\n    clearTimeout(this.searchTimeoutId);\n    this.searchTimeoutId = setTimeout(\n      () => {\n        this.setGroupsLoadingState(true);\n        this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, 0, SEARCH_TIMEOUT_MILLISECONDS / 1000);\n        this.setGroupsLoadingState(false);\n      },\n      SEARCH_TIMEOUT_MILLISECONDS,\n    );\n  }\n}", "CodeBleu_score": 41.437929859545584}]}
{"instance_id": "0f47faf97411", "generation_result": [{"code": "function mapStateToProps(state: GlobalState, ownProps: OwnProps){\n\tconst searchTerm = state.views.channel.searchTerm;\n    const currentChannel = ownProps.currentChannel || getCurrentChannel(state);\n    const excludedGroups = getExcludedGroups(state, currentChannel);\n    const groups = getGroupsNotAssociatedToChannel(state, currentChannel);\n    const filteredGroups = searchTerm ? filterGroups(searchTerm, groups) : groups;\n    return {\n        currentChannel,\n        excludedGroups,\n        searchTerm,\n        filteredGroups,\n        actions: bindActionCreators({\n            searchAssociatedGroups,\n            searchNotAssociatedGroups,\n            excludeGroup,\n            unexcludeGroup,\n        }, ownProps.actions),\n    };\n}", "CodeBleu_score": 42.597245979377426}, {"code": "function mapStateToProps(state: GlobalState, ownProps: OwnProps){\n\tconst searchTerm = state.views.channel.sidebarFilter;\n    const currentChannel = getCurrentChannel(state);\n    const currentChannelTeammateIds = currentChannel && currentChannel.teammate_ids ? currentChannel.teammate_ids : [];\n    const excludedGroups = currentChannelTeammateIds.map((id) => state.entities.teams.groupsAssociatedToTeam[id]);\n\n    const groups = getGroupsNotAssociatedToChannel(state, ownProps.channel.id);\n\n    let filteredGroups = groups;\n    if (searchTerm) {\n        const regex = new RegExp(escapeRegex(searchTerm), 'i');\n        filteredGroups = groups.filter((group) => regex.test(group.display_name));\n    }\n\n    return {\n        currentChannel,\n        currentChannelTeammateIds,\n        excludedGroups,\n        searchTerm,\n        filteredGroups,\n        groups,\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToChannel,\n            getGroupsAssociatedToChannel,\n            getAllGroupsAssociatedToChannel,\n            getGroupsNotAssociatedToTeam,\n            getGroupsAssociatedToTeam,\n            getAllGroupsAssociatedToTeam,\n            getGroupSyncables,\n            getGroupMemberCount,\n            linkGroupSyncable,\n            unlinkGroupSyncable,\n            getGroup,\n            getGroupTeams,\n            getGroupChannels,\n            getGroupUsers,\n            getGroupStats,\n            getGroupMemberUsers,\n            getGroupMemberUsersInTeam,\n            getGroupMembers,\n            getGroupMembersInTeam,\n            getGroupMembersNotInChannel,\n            setGroupSyncable,\n            patchGroupSyncable,\n            removeGroupSyncable,\n            setGroupMemberSchemeRoles,\n            getGroupSyncables,\n            getGroupTeams,\n            getGroupChannels,\n            getGroupUsers,\n            getGroupStats,\n            getGroupMemberUsers,\n            getGroupMemberUsersInTeam,\n            getGroupMembers,\n            getGroupMembersInTeam,\n            getGroupMembersNotInChannel,\n            setGroupSyncable,\n            patchGroupSyncable,\n            removeGroupSyncable", "CodeBleu_score": 40.51222185813492}, {"code": "function mapStateToProps(state: GlobalState, ownProps: OwnProps){\n\tconst searchTerm = state.views.channel.sidebarFilter;\n    const currentChannel = ownProps.channel || getCurrentChannel(state);\n    const groups = getAllGroupsAssociatedToChannel(state, currentChannel.id);\n    const excludedGroups = getExcludedGroups(state, currentChannel.id);\n\n    return {\n        searchTerm,\n        currentChannel,\n        groups,\n        excludedGroups,\n        actions: bindActionCreators({\n            getGroupsAssociatedToChannel,\n            excludeGroup,\n            unexcludeGroup,\n            getChannelStats,\n        }, dispatch),\n    };\n}", "CodeBleu_score": 39.863343290246}]}
{"instance_id": "923c0c472c01", "generation_result": [{"code": "private handlePageChange = (page: number, prevPage: number): void => {\n\tif (page > prevPage) {\n        this.setUsersLoadingState(true);\n        if (this.props.groupId) {\n            this.props.fetchGroupUsers(this.props.groupId, page);\n        } else {\n            this.props.fetchUsers(page);\n        }\n    }\n}", "CodeBleu_score": 40.72170451449904}, {"code": "private handlePageChange = (page: number, prevPage: number): void => {\n\tif (page > prevPage) {\n      this.setUsersLoadingState(true);\n      if (this.props.groupId) {\n        this.fetchGroupUsers(this.props.groupId, page);\n      } else {\n        this.fetchUsers(page);\n      }\n    }\n  }", "CodeBleu_score": 38.707756238661545}, {"code": "private handlePageChange = (page: number, prevPage: number): void => {\n\tif (page > prevPage) {\n        this.setUsersLoadingState(true);\n        if (this.props.groupId) {\n            this.props.fetchGroupProfiles(this.props.groupId, page);\n        } else {\n            this.props.fetchProfiles(page);\n        }\n    }\n}", "CodeBleu_score": 41.212568265456696}]}
{"instance_id": "4614bb3319bb", "generation_result": [{"code": "public search = (searchTerm: string): void => {\n\tthis.clearTimeouts();\n\n    const trimmedTerm = searchTerm.trim();\n\n    this.setState({\n        searchTerm: trimmedTerm,\n    });\n\n    if (trimmedTerm === '') {\n        return;\n    }\n\n    this.setUsersLoadingState(true);\n\n    this.searchTimeoutId = setTimeout(\n        () => this.props.actions.searchProfiles(trimmedTerm),\n        General.SEARCH_TIMEOUT_MILLISECONDS,\n    );\n\n    this.searchTimeoutId = setTimeout(\n        () => this.setUsersLoadingState(false),\n        General.SEARCH_TIMEOUT_MILLISECONDS + 500,\n    );\n}", "CodeBleu_score": 57.5845330679875}, {"code": "public search = (searchTerm: string): void => {\n\tif (this.searchTimeout) {\n    clearTimeout(this.searchTimeout);\n  }\n\n  const trimmedTerm = searchTerm.trim();\n\n  this.setState({ searchTerm: trimmedTerm });\n\n  if (trimmedTerm.length > 0) {\n    this.setUsersLoadingState(true);\n\n    this.searchTimeout = setTimeout(\n      () => this.props.actions.searchProfiles(trimmedTerm),\n      Constants.SEARCH_DEBOUNCE_DELAY\n    );\n\n    this.searchTimeout.unref();\n  }\n}", "CodeBleu_score": 54.36456078365271}, {"code": "public search = (searchTerm: string): void => {\n\t// Clear any existing timeout\n  clearTimeout(this.searchTimeout);\n\n  // Trim whitespace and set the state\n  const trimmedTerm = searchTerm.trim();\n  this.setState({ searchTerm: trimmedTerm });\n\n  // If the search term is not empty, set the loading state to true\n  if (trimmedTerm) {\n    this.setUsersLoadingState(true);\n  }\n\n  // Set a timeout to search for user profiles\n  this.searchTimeout = setTimeout(async () => {\n    // If the search term is empty, set the loading state to false and return\n    if (!trimmedTerm) {\n      this.setUsersLoadingState(false);\n      return;\n    }\n\n    // Search for user profiles\n    const userProfiles = await this.props.actions.searchProfiles(trimmedTerm);\n\n    // If the search term has changed since the request was made, do nothing\n    if (trimmedTerm !== this.state.searchTerm) {\n      return;\n    }\n\n    // If the search returned no results, set the loading state to false\n    if (!userProfiles || !userProfiles.length) {\n      this.setUsersLoadingState(false);\n      return;\n    }\n\n    // Set the users state to the search results\n    this.setState({ users: userProfiles });\n\n    // Set the loading state to false\n    this.setUsersLoadingState(false);\n  }, 300);\n}", "CodeBleu_score": 55.043100387389266}]}
{"instance_id": "aeafe2d0ee11", "generation_result": [{"code": "visibleSections = () =>{\n\tconst result = [];\n\n  // Add the item to the result set if it has a schema and title, and if it is not hidden according to specific conditions.\n  const addItem = (item) => {\n    if (item.schema && item.title && !item.isHidden) {\n      result.push(item.url);\n    }\n  };\n\n  // Iterate through the sections and subsections, adding the URLs of visible items to the result set.\n  sections.forEach((section) => {\n    addItem(section);\n    if (section.subsections) {\n      section.subsections.forEach(addItem);\n    }\n  });\n\n  return result;\n}", "CodeBleu_score": 19.310664677633106}, {"code": "visibleSections = () =>{\n\tconst result = []\n    const { sections, license, buildEnterpriseReady, consoleAccess, adminDefinition, cloud } = this.props\n\n    sections.forEach(section => {\n        const { items, title } = section\n\n        if (!title) {\n            return\n        }\n\n        const sectionItems = items.filter(item => {\n            const { schema, isHidden } = item\n\n            if (!schema) {\n                return false\n            }\n\n            if (isHidden) {\n                return false\n            }\n\n            if (isHidden(license, buildEnterpriseReady, consoleAccess, adminDefinition, cloud)) {\n                return false\n            }\n\n            return true\n        })\n\n        if (sectionItems.length > 0) {\n            result.push(section)\n        }\n    })\n\n    return result\n}", "CodeBleu_score": 37.83764157091649}, {"code": "visibleSections = () =>{\n\tconst {\n    consoleAccess,\n    adminDefinition,\n    license,\n    buildEnterpriseReady,\n    cloud,\n    ...config\n  } = this.props;\n  const result = [];\n\n  if (!config.sections) {\n    return result;\n  }\n\n  config.sections.forEach((section) => {\n    if (!section.items) {\n      return;\n    }\n\n    section.items.forEach((item) => {\n      if (!item.schema || !item.title) {\n        return;\n      }\n\n      if (item.isHidden) {\n        if (item.isHidden === 'license') {\n          if (!license) {\n            return;\n          }\n        } else if (item.isHidden === 'enterpriseReady') {\n          if (!buildEnterpriseReady) {\n            return;\n          }\n        } else if (item.isHidden === 'consoleAccess') {\n          if (!consoleAccess) {\n            return;\n          }\n        } else if (item.isHidden === 'adminDefinition') {\n          if (!adminDefinition) {\n            return;\n          }\n        } else if (item.isHidden === 'cloud') {\n          if (!cloud) {\n            return;\n          }\n        } else if (item.isHidden === 'enterpriseCloud') {\n          if (!cloud || !buildEnterpriseReady) {\n            return;\n          }\n        } else if (item.isHidden === 'cloudOrTrial') {\n          if (!cloud && !buildEnterpriseReady) {\n            return;\n          }\n        } else if (item.isHidden === 'cloudOrEnterprise') {\n          if (!cloud && !buildEnterpriseReady) {\n            return;\n          }\n        } else if (item.isHidden === 'cloudOrTrialOrEnterprise') {\n          if (!cloud && !buildEnterpriseReady) {\n            return;\n          }\n        } else if (item.isHidden === 'notCloud') {\n          if (cloud) {\n            return;\n          }\n        } else if (item.isHidden === 'notEnterprise') {\n          if (buildEnterpriseReady) {\n            return;\n          }", "CodeBleu_score": 22.529809533256582}]}
{"instance_id": "e869682a1b2c", "generation_result": [{"code": "handleImageChange = () =>{\n\tif (this.imageInputRef.current && this.imageInputRef.current.files.length > 0) {\n    this.props.setSaveNeeded();\n    this.setState({\n      image: this.imageInputRef.current.files[0],\n      imageDelete: false\n    });\n  }\n}", "CodeBleu_score": 25.08900382566457}, {"code": "handleImageChange = () =>{\n\tconst { setSaveNeeded, setDeleteFlag } = this.props;\n  const { files } = this.imageInput.current;\n\n  if (this.imageInput.current.validity.valid) {\n    if (files.length > 0) {\n      setSaveNeeded(true);\n      this.setState({\n        image: files[0],\n        deleteImage: false,\n      });\n      setDeleteFlag(false);\n    }\n  }\n}", "CodeBleu_score": 35.56237715614734}, {"code": "handleImageChange = () =>{\n\tconst {\n    setSaveNeeded,\n  } = this.props;\n  const {\n    deleteImage,\n  } = this.state;\n  if (this.imageInputRef.current.files.length > 0) {\n    setSaveNeeded(true);\n    this.setState({\n      image: this.imageInputRef.current.files[0],\n      deleteImage: false,\n    });\n  }\n}", "CodeBleu_score": 36.122287264553044}]}
{"instance_id": "8bc13681a6b2", "generation_result": [{"code": "private removeChannel = (channel: ChannelWithTeamData) =>{\n\tif (channel.id === this.props.removing) {\n        return;\n    }\n\n    const page = this.state.page;\n    const perPage = this.props.perPage;\n    const totalCount = this.getVisibleTotalCount();\n\n    this.props.onRemoveCallback(channel);\n\n    if (page > 0 && totalCount - 1 <= perPage * (page - 1)) {\n        this.setStatePage(page - 1);\n    }\n}", "CodeBleu_score": 35.8618269539971}, {"code": "private removeChannel = (channel: ChannelWithTeamData) =>{\n\tif (this.state.removing) {\n        return;\n    }\n\n    this.setState({removing: true});\n\n    const state = this.getState();\n    const {page, pageSize} = this.getPaginationProps(state);\n    const {total} = this.getVisibleTotalCount(state);\n\n    this.props.onRemoveCallback(channel, () => {\n        if (total > 0 && total % pageSize === 1 && page > 0) {\n            this.setStatePage(page - 1);\n        }\n    });\n\n    this.setState({removing: false});\n}", "CodeBleu_score": 38.51714755219682}, {"code": "private removeChannel = (channel: ChannelWithTeamData) =>{\n\tif (channel.removing) {\n    return\n  }\n\n  const {\n    page,\n    pageSize,\n    totalCount,\n  } = this.getPaginationProps()\n\n  const visibleTotalCount = this.getVisibleTotalCount(page, pageSize, totalCount)\n\n  const endCount = page * pageSize\n\n  this.props.onRemoveCallback(channel)\n\n  if (endCount === visibleTotalCount) {\n    this.setStatePage(page - 1)\n  }\n}", "CodeBleu_score": 34.983605380559716}]}
{"instance_id": "ac41454927ac", "generation_result": [{"code": "addToRemovedChannels = (channel: ChannelWithTeamData) => {\n\tconst { removedChannels } = this.state;\n  const { channels } = this.props;\n\n  if (removedChannels.length >= 5) {\n    return;\n  }\n\n  if (!removedChannels.find(c => c.id === channel.id)) {\n    this.setState({\n      removedChannels: [...removedChannels, channel],\n    });\n  }\n\n  const newChannels = channels.filter(c => c.id !== channel.id);\n  this.props.actions.setChannels(newChannels);\n  this.props.actions.setNavigationBlocked(true);\n}", "CodeBleu_score": 37.37499328481577}, {"code": "addToRemovedChannels = (channel: ChannelWithTeamData) => {\n\tconst { removedChannels, newChannels } = this.state;\n    const { actions } = this.props;\n\n    if (removedChannels.indexOf(channel.id) === -1) {\n        this.setState({\n            removedChannels: [...removedChannels, channel.id],\n            removedChannelsCount: removedChannels.length + 1,\n        });\n    }\n\n    if (newChannels.indexOf(channel.id) !== -1) {\n        this.setState({\n            newChannels: newChannels.filter((id) => id !== channel.id),\n        });\n    }\n\n    actions.setNavigationBlocked(true);\n}", "CodeBleu_score": 39.596877625724616}, {"code": "addToRemovedChannels = (channel: ChannelWithTeamData) => {\n\tconst { removedChannels } = this.state;\n\n    // If the channel is not already in the removed channels list, update the count and add it to the list.\n    if (!removedChannels.includes(channel)) {\n        this.setState({\n            removedChannels: [...removedChannels, channel],\n            removedChannelsCount: this.state.removedChannelsCount + 1,\n        });\n    }\n\n    // If the channel is in the new channels list, remove it from there.\n    const { newChannels } = this.state;\n    const index = newChannels.findIndex((c) => c.id === channel.id);\n    if (index !== -1) {\n        newChannels.splice(index, 1);\n        this.setState({ newChannels });\n    }\n\n    // Block navigation\n    this.props.actions.setNavigationBlocked(true);\n}", "CodeBleu_score": 42.27163095098773}]}
{"instance_id": "bdc81f9a884e", "generation_result": [{"code": "private removeTeam = (team: Team) =>{\n\tif (this.props.onRemoveCallback) {\n        // If the team is already marked for removal, return\n        if (this.props.onRemoveCallback.isMarkedForRemoval(team)) {\n            return;\n        }\n\n        // Update pagination properties\n        const paginationProps = this.getPaginationProps();\n\n        // Remove the team\n        this.props.onRemoveCallback.removeTeam(team);\n\n        // If the removal affects the pagination, adjust the current page number\n        if (paginationProps.totalCount !== this.getVisibleTotalCount()) {\n            const newPage = Math.max(1, Math.min(paginationProps.totalPage, paginationProps.currentPage - 1));\n            this.setStatePage(newPage);\n        }\n\n        // Set the new page number in the state\n        this.setStatePage(paginationProps.currentPage);\n    }\n}", "CodeBleu_score": 32.12635624025161}, {"code": "private removeTeam = (team: Team) =>{\n\tif (this.props.onRemoveCallback) {\n    if (this.props.onRemoveCallback(team)) {\n      return;\n    }\n  }\n\n  const paginationProps = this.getPaginationProps();\n  const visibleTotalCount = this.getVisibleTotalCount(paginationProps);\n  const currentPage = this.state.page;\n\n  if (visibleTotalCount === 1) {\n    if (currentPage === 1) {\n      this.setStatePage(1);\n    } else {\n      this.setStatePage(currentPage - 1);\n    }\n  }\n\n  this.setStatePage(this.state.page);\n}", "CodeBleu_score": 34.347705003503684}, {"code": "private removeTeam = (team: Team) =>{\n\tif (this.props.onRemoveCallback == null) {\n    return;\n  }\n\n  if (this.props.onRemoveCallback(team)) {\n    this.setState({\n      page: this.getPaginationProps(this.props.teams, this.state.page).currentPage,\n    });\n  }\n}", "CodeBleu_score": 17.66042843462493}]}
{"instance_id": "e55dd105e5d2", "generation_result": [{"code": "async function loadListInPageNumber(page: number){\n\ttry {\n    const teams = await getPagedTeams(page);\n    if (page === 0) {\n      setList(teams.value.map(team => ({ ...team, isSelected: false })));\n    } else {\n      setList(prevList => [...prevList, ...teams.value.map(team => ({ ...team, isSelected: false }))]);\n    }\n    setPage(page + 1);\n  } catch (error) {\n    console.error(error);\n  }\n}", "CodeBleu_score": 22.185130005669627}, {"code": "async function loadListInPageNumber(page: number){\n\ttry {\n        const response = await fetch(`https://graph.microsoft.com/beta/groups?$filter=resourceProvisioningOptions/Any(x:x eq 'Team')&$orderby=displayName&$top=20&$skip=${page * 20}`);\n        if (response.ok) {\n            const responseJson = await response.json();\n            const teams = responseJson.value;\n            const sortedTeams = teams.map(team => {\n                return {\n                    id: team.id,\n                    displayName: team.displayName,\n                    description: team.description,\n                    visibility: team.visibility,\n                    createdDateTime: team.createdDateTime\n                };\n            }).sort((a, b) => a.displayName.localeCompare(b.displayName));\n            if (page === 0) {\n                setList(sortedTeams);\n            } else {\n                setList(list => [...list, ...sortedTeams]);\n            }\n            setPage(page + 1);\n        } else {\n            console.log(response.status);\n        }\n    } catch (e) {\n        console.log(e);\n    }\n}", "CodeBleu_score": 49.325292757186304}, {"code": "async function loadListInPageNumber(page: number){\n\ttry {\n    const response = await fetch(\n      `https://api.github.com/orgs/microsoft/teams?page=${page}`\n    );\n    const data = await response.json();\n    const teams = data.map((team: any) => ({\n      id: team.id,\n      name: team.name,\n      displayName: team.name.replace(/^microsoft-/, \"\"),\n    }));\n    teams.sort((a, b) => a.displayName.localeCompare(b.displayName));\n    if (page === 1) {\n      setList(teams);\n    } else {\n      setList(list.concat(teams));\n    }\n    setPageNumber(page);\n  } catch (error) {\n    console.error(error);\n  }\n}", "CodeBleu_score": 39.70045021619132}]}
{"instance_id": "2de31ed13207", "generation_result": [{"code": "async function searchInList(term: string, callBack: (options: OptionsType<{label: string; value: string}>) => void){\n\ttry {\n    const { data } = await searchTeams(term, {\n      page: 1,\n      pageSize: 100,\n    });\n    const { teams } = data;\n    const results = teams.map((team: TeamType) => ({\n      label: team.name,\n      value: team.id,\n    }));\n    callBack(results);\n  } catch (error) {\n    console.error(error);\n    callBack([]);\n  }\n}", "CodeBleu_score": 47.652730914539205}, {"code": "async function searchInList(term: string, callBack: (options: OptionsType<{label: string; value: string}>) => void){\n\tconst teams = await searchTeams(term, {\n        count: 10,\n        page: 0,\n    });\n    if (teams.error) {\n        console.error(teams.error);\n        callBack([]);\n        return;\n    }\n\n    const options = teams.data.map((team) => {\n        return {\n            label: team.displayName,\n            value: team.id,\n        };\n    });\n    callBack(options);\n}", "CodeBleu_score": 42.44211137975087}, {"code": "async function searchInList(term: string, callBack: (options: OptionsType<{label: string; value: string}>) => void){\n\tlet searchTeamsResponse = await searchTeams(term, {\n        page: 1,\n        pageSize: 10,\n        sortBy: 'name',\n        sortOrder: 'asc'\n    });\n\n    if (searchTeamsResponse.data.length > 0) {\n        let teams = searchTeamsResponse.data.map(team => {\n            return {\n                label: team.name,\n                value: team.id\n            };\n        });\n\n        callBack(teams);\n    } else {\n        console.log('No teams found');\n        callBack([]);\n    }\n}", "CodeBleu_score": 44.36929701729122}]}
{"instance_id": "845d63ff0f74", "generation_result": [{"code": "onChangeRoles = (id: string, type: string, schemeAdmin: boolean) =>{\n\tconst {\n        roles,\n        teams,\n        channels,\n    } = this.state;\n\n    let rolesToChange;\n    let groupTeams;\n    let groupChannels;\n    if (type === 'team') {\n        rolesToChange = teams;\n        groupTeams = teams;\n    } else {\n        rolesToChange = channels;\n        groupChannels = channels;\n    }\n\n    const rolesToChangeMap = rolesToChange.map((role) => {\n        if (role.id === id) {\n            return {...role, scheme_admin: schemeAdmin};\n        }\n        return role;\n    });\n\n    if (type === 'team') {\n        this.setState({\n            teams: rolesToChangeMap,\n            saving: true,\n        });\n    } else {\n        this.setState({\n            channels: rolesToChangeMap,\n            saving: true,\n        });\n    }\n\n    this.props.actions.updateTeamMemberSchemeRoles(this.props.teamId, id, schemeAdmin).then(async () => {\n        if (this.props.groupID) {\n            const {data: group} = await this.props.actions.getGroup(this.props.groupID);\n            const groupTeams = group.teams.map((team) => {\n                return {...team, scheme_admin: false};\n            });\n            const groupChannels = group.channels.map((channel) => {\n                return {...channel, scheme_admin: false};\n            });\n\n            this.setState({\n                groupTeams,\n                groupChannels,\n                saving: false,\n            });\n        }\n    });\n}", "CodeBleu_score": 37.61410479346048}, {"code": "onChangeRoles = (id: string, type: string, schemeAdmin: boolean) =>{\n\tconst {\n    rolesToChange,\n    groupTeams,\n    groupChannels,\n  } = this.state;\n\n  let newRolesToChange = rolesToChange;\n  let newGroupTeams = groupTeams;\n  let newGroupChannels = groupChannels;\n\n  if (type === 'teams') {\n    newGroupTeams = groupTeams.map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          scheme_admin: schemeAdmin,\n        };\n      }\n      return item;\n    });\n  } else if (type === 'channels') {\n    newGroupChannels = groupChannels.map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          scheme_admin: schemeAdmin,\n        };\n      }\n      return item;\n    });\n  } else {\n    newRolesToChange = rolesToChange.map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          scheme_admin: schemeAdmin,\n        };\n      }\n      return item;\n    });\n  }\n\n  this.setState({\n    rolesToChange: newRolesToChange,\n    groupTeams: newGroupTeams,\n    groupChannels: newGroupChannels,\n    saving: true,\n  });\n\n  this.props.actions.setNavigationBlocked(true);\n}", "CodeBleu_score": 34.23373759939843}, {"code": "onChangeRoles = (id: string, type: string, schemeAdmin: boolean) =>{\n\tconst {\n        roles,\n        groupsWithSchemeRoles,\n        myGroups,\n        groupsAssociatedToChannel,\n        groupsAssociatedToTeam,\n        groupsNotAssociatedToChannel,\n        groupsNotAssociatedToTeam,\n        channelSchemeRoles,\n        teamSchemeRoles,\n        channelRoles,\n        teamRoles,\n    } = this.props;\n\n    const {data} = this.state;\n\n    let groupsToChange;\n    let groupsNotToChange;\n    let groupsToChangeRoles;\n    let groupsNotToChangeRoles;\n    let groupsAssociatedToChannelOrTeam;\n    let groupsNotAssociatedToChannelOrTeam;\n\n    if (type === 'team') {\n        groupsToChange = groupsAssociatedToTeam;\n        groupsNotToChange = groupsNotAssociatedToTeam;\n        groupsToChangeRoles = teamSchemeRoles;\n        groupsNotToChangeRoles = teamRoles;\n        groupsAssociatedToChannelOrTeam = groupsAssociatedToTeam;\n        groupsNotAssociatedToChannelOrTeam = groupsNotAssociatedToTeam;\n    } else {\n        groupsToChange = groupsAssociatedToChannel;\n        groupsNotToChange = groupsNotAssociatedToChannel;\n        groupsToChangeRoles = channelSchemeRoles;\n        groupsNotToChangeRoles = channelRoles;\n        groupsAssociatedToChannelOrTeam = groupsAssociatedToChannel;\n        groupsNotAssociatedToChannelOrTeam = groupsNotAssociatedToChannel;\n    }\n\n    const currentRoles = groupsToChangeRoles.find((group) => group.id === id);\n    const currentNotRoles = groupsNotToChangeRoles.find((group) => group.id === id);\n\n    const newRoles = currentRoles ?\n        {\n            ...currentRoles,\n            scheme_admin: schemeAdmin,\n        } :\n        {\n            id,\n            scheme_admin: schemeAdmin,\n        };\n\n    const newNotRoles = currentNotRoles ?\n        {\n            ...currentNotRoles,\n            scheme_admin: schemeAdmin,\n        } :\n        {\n            id,\n            scheme_admin: schemeAdmin", "CodeBleu_score": 37.16652111705379}]}
{"instance_id": "02b54f0774f3", "generation_result": [{"code": "handleRolesToUpdate = async () =>{\n\tconst {\n    rolesToUpdate,\n    setError,\n    setRolesToUpdate\n  } = this.props;\n  const {\n    syncableIDs,\n    syncableTypes\n  } = rolesToUpdate;\n  const promises = [];\n\n  if (syncableIDs.length) {\n    for (const syncableID of syncableIDs) {\n      for (const syncableType of syncableTypes) {\n        promises.push(this.updateRole(syncableID, syncableType));\n      }\n    }\n  }\n\n  const results = await Promise.all(promises);\n  const errors = results.filter(result => result.error);\n  const success = errors.length === 0;\n\n  if (success) {\n    setRolesToUpdate({\n      syncableIDs: [],\n      syncableTypes: []\n    });\n  } else {\n    setError(errors.map(error => error.error).join(' '));\n  }\n\n  return success;\n}", "CodeBleu_score": 31.872892714961964}, {"code": "handleRolesToUpdate = async () =>{\n\tconst {\n    rolesToChange,\n    updateRolesToChange,\n    setErrorMessage,\n    setSuccessMessage,\n    setRolesToChange\n  } = this.props;\n  const {\n    syncableIDs,\n    syncableTypes\n  } = rolesToChange;\n  const updatePromises = [];\n\n  if (syncableIDs.length === 0) {\n    return true;\n  }\n\n  syncableIDs.forEach((syncableID, index) => {\n    const syncableType = syncableTypes[index];\n\n    if (syncableType === 'team') {\n      updatePromises.push(this.props.updateTeamMemberRoles(syncableID, rolesToChange.roleIDs));\n    } else {\n      updatePromises.push(this.props.updateChannelMemberRoles(syncableID, rolesToChange.roleIDs));\n    }\n  });\n  const updateResults = await Promise.all(updatePromises);\n  const errors = [];\n  updateResults.forEach(result => {\n    if (result.error) {\n      errors.push(result.error);\n    }\n  });\n\n  if (errors.length > 0) {\n    setErrorMessage(errors.join(', '));\n    return false;\n  }\n\n  setSuccessMessage('Roles updated successfully.');\n  updateRolesToChange({\n    syncableIDs: [],\n    syncableTypes: [],\n    roleIDs: []\n  });\n  return true;\n}", "CodeBleu_score": 29.633048673703787}, {"code": "handleRolesToUpdate = async () =>{\n\tconst {\n        rolesToChange,\n        setRolesToChange,\n        setErrorMessage,\n        setSuccessMessage,\n    } = this.props;\n\n    if (rolesToChange.length === 0) {\n        return false;\n    }\n\n    const promises = [];\n    for (const role of rolesToChange) {\n        const {\n            id,\n            type,\n            syncableID,\n            syncableType,\n            newRole,\n        } = role;\n\n        promises.push(\n            this.props.actions.updateRole(\n                id,\n                type,\n                syncableID,\n                syncableType,\n                newRole,\n            ),\n        );\n    }\n\n    const results = await Promise.all(promises);\n\n    let error = false;\n    for (const result of results) {\n        if (result.error) {\n            error = true;\n            break;\n        }\n    }\n\n    if (error) {\n        setErrorMessage(Utils.localizeMessage('admin.permissions.systemScheme.updateRoles.error', 'Error updating roles.'));\n    } else {\n        setSuccessMessage(Utils.localizeMessage('admin.permissions.systemScheme.updateRoles.success', 'Roles updated successfully.'));\n    }\n\n    setRolesToChange([]);\n\n    return !error;\n}", "CodeBleu_score": 34.307449416478576}]}
{"instance_id": "30463a7bcb15", "generation_result": [{"code": "nextPage = async () =>{\n\tconst { members, loading, total } = this.state;\n  if (members.length === total) return;\n  this.setState({ loading: true });\n  const newMembers = await fetchMembers(members.length);\n  this.setState({\n    members: [...members, ...newMembers],\n    loading: false,\n  });\n}", "CodeBleu_score": 16.64315435292025}, {"code": "nextPage = async () =>{\n\tif (this.state.members.length >= this.state.totalMembers) {\n    return;\n  }\n  this.setState({ loading: true });\n  const members = await this.props.getMembers(this.state.page);\n  this.setState({\n    members: [...this.state.members, ...members],\n    loading: false,\n  });\n}", "CodeBleu_score": 15.03675491971827}, {"code": "nextPage = async () =>{\n\tif (this.state.members.length < this.state.totalMembers) {\n    this.setState({ loading: true });\n    const response = await fetch(\n      `https://api.github.com/orgs/${this.props.organization}/members?page=${\n        this.state.page\n      }`\n    );\n    const members = await response.json();\n    this.setState({\n      members: this.state.members.concat(members),\n      page: this.state.page + 1,\n      loading: false\n    });\n  }\n}", "CodeBleu_score": 24.105372423160038}]}
{"instance_id": "d6aba286f65f", "generation_result": [{"code": "public handleGroupSearchKeyUp(e: any){\n\tif (e.keyCode === 13) {\n    this.setState({\n      page: 0,\n    });\n    this.props.searchGroups(this.state.searchString);\n    const newState = {\n      searchString: this.state.searchString,\n      sortBy: this.state.sortBy,\n      sortOrder: this.state.sortOrder,\n      page: this.state.page,\n      pageSize: this.state.pageSize,\n      totalGroups: this.props.totalGroups,\n      totalPages: this.props.totalPages,\n    };\n    if (this.regex(this.state.searchString).test('[0-9]+')) {\n      newState.sortBy = 'id';\n    } else if (this.regex(this.state.searchString).test('[a-zA-Z]+')) {\n      newState.sortBy = 'name';\n    } else {\n      newState.sortBy = 'created_at';\n    }\n    this.setState(newState);\n  }\n}", "CodeBleu_score": 29.58591859487747}, {"code": "public handleGroupSearchKeyUp(e: any){\n\tif (e.keyCode === 13) {\n    this.setState({\n      page: 0,\n    }, () => {\n      this.props.searchGroups(this.state.searchString, this.state.page);\n    });\n\n    const state = {\n      searchString: this.state.searchString,\n      searchStringLength: this.state.searchStringLength,\n      searchStringValid: this.state.searchStringValid,\n      searchStringError: this.state.searchStringError,\n    };\n\n    if (this.state.searchStringLength > 0) {\n      if (this.state.searchStringLength >= 3) {\n        state.searchStringValid = true;\n      } else {\n        state.searchStringValid = false;\n        state.searchStringError = 'Search string must be at least 3 characters.';\n      }\n    }\n\n    this.setState(state);\n  }\n}", "CodeBleu_score": 27.43777787847934}, {"code": "public handleGroupSearchKeyUp(e: any){\n\tif (e.keyCode === 13) {\n    this.setState({\n      pageState: 0,\n      groupSearch: true\n    });\n\n    this.props.searchGroups(\n      this.props.user.id,\n      this.props.user.token,\n      this.props.groupSearchString,\n      this.props.groupSearchString\n    );\n\n    const state = {\n      groupSearch: true,\n      groupSearchString: this.props.groupSearchString,\n      groupSearchError: this.props.groupSearchError,\n      groupSearchLoading: this.props.groupSearchLoading,\n      groupSearchResults: this.props.groupSearchResults\n    };\n\n    if (this.regex(this.props.groupSearchString).test(/^[0-9]*$/)) {\n      state.groupSearchResults = this.props.groupSearchResults.filter(\n        group => group.id === parseInt(this.props.groupSearchString)\n      );\n    } else if (this.regex(this.props.groupSearchString).test(/^[a-zA-Z]*$/)) {\n      state.groupSearchResults = this.props.groupSearchResults.filter(\n        group => group.name.toLowerCase().indexOf(this.props.groupSearchString.toLowerCase()) !== -1\n      );\n    } else {\n      state.groupSearchResults = this.props.groupSearchResults;\n    }\n\n    this.setState(state);\n  }\n}", "CodeBleu_score": 24.33975963817667}]}
{"instance_id": "f0ab31c8ac4b", "generation_result": [{"code": "reloadPercentage = async () => {\n\ttry {\n        const { upgradePercentage, error } = await this.props.actions.upgradeToE0Status();\n        if (upgradePercentage === 100) {\n            clearInterval(this.interval);\n            trackEvent('cloud_upgrade', 'finished_upgrade');\n            this.setState({\n                upgradePercentage,\n                error: null,\n            });\n        } else if (error) {\n            clearInterval(this.interval);\n            this.setState({\n                upgradePercentage,\n                error,\n            });\n        } else if (upgradePercentage > 0 && !this.interval) {\n            this.interval = setInterval(this.reloadPercentage, 2000);\n            this.setState({\n                upgradePercentage,\n                error: null,\n            });\n        }\n    } catch (error) {\n        this.setState({\n            error,\n        });\n    }\n}", "CodeBleu_score": 58.783206792647235}, {"code": "reloadPercentage = async () => {\n\ttry {\n    const { data, error } = await this.props.actions.upgradeToE0Status();\n\n    if (data && data.percentage === 100) {\n      clearInterval(this.interval);\n      this.props.trackEvent('Successfully Upgraded to E0');\n      this.setState({\n        percentage: 100,\n        error: null,\n      });\n    } else if (error) {\n      clearInterval(this.interval);\n      this.props.trackEvent('Failed to Upgrade to E0');\n      this.setState({\n        percentage: 0,\n        error: error.message,\n      });\n    } else if (data && data.percentage > 0 && !this.interval) {\n      this.interval = setInterval(this.reloadPercentage, 2000);\n      this.setState({\n        percentage: data.percentage,\n        error: null,\n      });\n    }\n  } catch (error) {\n    clearInterval(this.interval);\n    this.props.trackEvent('Failed to Upgrade to E0');\n    this.setState({\n      percentage: 0,\n      error: error.message,\n    });\n  }\n}", "CodeBleu_score": 56.08225795750783}, {"code": "reloadPercentage = async () => {\n\tlet upgradeStatus = await this.props.actions.upgradeToE0Status();\n  if (upgradeStatus.percentage === 100) {\n    clearInterval(this.interval);\n    trackEvent('Upgrade to E0', 'Upgrade Complete');\n    this.setState({\n      percentage: upgradeStatus.percentage,\n      error: null,\n    });\n  } else if (upgradeStatus.error) {\n    clearInterval(this.interval);\n    trackEvent('Upgrade to E0', 'Upgrade Error');\n    this.setState({\n      percentage: upgradeStatus.percentage,\n      error: upgradeStatus.error,\n    });\n  } else if (upgradeStatus.percentage > 0 && !this.interval) {\n    this.interval = setInterval(this.reloadPercentage, 2000);\n    this.setState({\n      percentage: upgradeStatus.percentage,\n      error: null,\n    });\n  }\n}", "CodeBleu_score": 47.04767213983857}]}
{"instance_id": "f91ab43e6fe1", "generation_result": [{"code": "const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\te.preventDefault();\n    const { setIsUploading, setServerError, setFileObj, uploadLicense, setUploadSuccessful, getLicenseConfig } = props;\n\n    setIsUploading(true);\n\n    try {\n        const fileObj = getFileObj();\n\n        if (fileObj) {\n            await uploadLicense(fileObj);\n            setUploadSuccessful(true);\n            await getLicenseConfig();\n            setFileObj(null);\n            setServerError('');\n        } else {\n            throw new Error('No file selected');\n        }\n    } catch (err) {\n        setServerError(err.message);\n    }\n\n    setIsUploading(false);\n}", "CodeBleu_score": 44.224524908128814}, {"code": "const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\te.preventDefault();\n  if (fileObj) {\n    setIsUploading(true);\n    dispatch(uploadLicense(fileObj));\n  }\n}", "CodeBleu_score": 18.19728035023474}, {"code": "const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\te.preventDefault();\n\n    if (!fileObj) return;\n\n    setIsUploading(true);\n\n    try {\n        await uploadLicense(fileObj);\n\n        dispatch({ type: 'GET_LICENSE_CONFIG' });\n\n        setFileObj(null);\n        setServerError(null);\n        setIsUploading(false);\n        setUploadSuccessful(true);\n    } catch (err) {\n        setFileObj(null);\n        setServerError(err.message);\n        setIsUploading(false);\n    }\n}", "CodeBleu_score": 53.776818996579145}]}
{"instance_id": "840d965d4dcc", "generation_result": [{"code": "handleSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent> | React.FormEvent<HTMLFormElement>) =>{\n\te.preventDefault();\n\n  if (this.state.confirm) {\n    this.setState({ confirm: false });\n    return;\n  }\n\n  this.setState({ saving: true, error: undefined });\n\n  if (this.state.saveNeeded) {\n    const settings = this.state.settings;\n    const role = this.props.editRole;\n\n    // Map settings to role bindings\n    const roleBindings = settings.map(setting => {\n      return {\n        role,\n        resource: setting.resource,\n        resource_type: setting.resource_type,\n        resource_name: setting.resource_name,\n        permissions: setting.permissions,\n      };\n    });\n\n    // Update roles\n    try {\n      await this.props.updateRoles(role, roleBindings);\n      this.setState({ saving: false, error: undefined });\n    } catch (error) {\n      this.setState({ saving: false, error: error });\n    }\n  } else {\n    this.props.reset();\n    this.setState({ saving: false, error: undefined });\n  }\n}", "CodeBleu_score": 28.130705817625255}, {"code": "handleSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent> | React.FormEvent<HTMLFormElement>) =>{\n\te.preventDefault();\n  if (this.state.confirm) {\n    this.setState({ confirm: false });\n    return;\n  }\n  this.setState({ saving: true });\n  this.setState({ error: null });\n  let settings = this.props.settings;\n  let saveNeeded = false;\n  if (this.props.editRole) {\n    if (this.state.permissionsChanged) {\n      saveNeeded = true;\n      settings = this.state.permissions;\n    }\n  } else {\n    if (this.state.configurationChanged) {\n      saveNeeded = true;\n      settings = this.state.configuration;\n    }\n  }\n  if (saveNeeded) {\n    try {\n      await this.props.saveSettings(settings);\n      this.setState({ saving: false });\n      this.props.onSave();\n    } catch (err) {\n      this.setState({ error: err.message });\n      this.setState({ saving: false });\n    }\n  } else {\n    this.setState({ saving: false });\n    this.props.onSave();\n  }\n}", "CodeBleu_score": 23.38654141939499}, {"code": "handleSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent> | React.FormEvent<HTMLFormElement>) =>{\n\te.preventDefault();\n    const { editRole, handleCancel, handleError } = this.props;\n    const { confirmation, saving } = this.state;\n    if (confirmation) {\n        this.setState({ confirmation: false });\n        return;\n    }\n    this.setState({ saving: true });\n    try {\n        const { settings } = this.state;\n        const { name, permissions } = editRole;\n        const roleBindings = settings.map((s) => ({\n            roleName: name,\n            subjects: s.subjects.map((subject) => ({\n                kind: subject.kind,\n                name: subject.name,\n                namespace: subject.namespace,\n            })),\n        }));\n        await Promise.all([\n            this.props.updateRole({ roleName: name, roleBindings }),\n            this.props.updateRolePermissions({ roleName: name, permissions }),\n        ]);\n        this.setState({ saving: false });\n        handleCancel();\n    } catch (err) {\n        this.setState({ saving: false });\n        handleError(err);\n    }\n}", "CodeBleu_score": 31.19885123444068}]}
{"instance_id": "86453b2860e5", "generation_result": [{"code": "const ContactUsButton: React.FC<Props> = (props: Props) =>{\n\tconst { openContactSales } = useSalesLink();\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    trackEvent(\n      'clicked_button',\n      {\n        label: 'contact_us_button',\n      },\n      { nonInteraction: true },\n    );\n    openContactSales();\n  };\n\n  return (\n    <button\n      className={props.className}\n      onClick={handleClick}\n      type=\"button\"\n    >\n      {props.text}\n    </button>\n  );\n}", "CodeBleu_score": 35.244700830877086}, {"code": "const ContactUsButton: React.FC<Props> = (props: Props) =>{\n\tconst {\n    buttonText = 'Contact Us',\n    className = 'btn btn-primary',\n    eventCategory = 'Contact Us',\n    eventAction = 'Click',\n    eventLabel = 'Contact Us',\n    url = 'https://www.khanacademy.org/contact-us',\n  } = props;\n\n  const openContactSales = () => {\n    window.open(url, '_blank');\n  };\n\n  const trackEvent = () => {\n    trackEvent(eventCategory, eventAction, eventLabel);\n  };\n\n  return (\n    <button\n      className={className}\n      onClick={(e) => {\n        e.preventDefault();\n        trackEvent();\n        openContactSales();\n      }}\n    >\n      {buttonText}\n    </button>\n  );\n}", "CodeBleu_score": 34.525154825031656}, {"code": "const ContactUsButton: React.FC<Props> = (props: Props) =>{\n\tconst {\n    buttonText,\n    className,\n    eventName,\n    eventCategory,\n    eventLabel,\n  } = props;\n\n  const { openContactSales } = useContactSales();\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    trackEvent(eventName, eventCategory, eventLabel);\n    openContactSales();\n  };\n\n  return (\n    <button\n      className={className}\n      onClick={handleClick}\n    >\n      {buttonText}\n    </button>\n  );\n}", "CodeBleu_score": 31.705212282917117}]}
{"instance_id": "49713e95ae2e", "generation_result": [{"code": "const RenewalLink = (props: RenewalLinkProps) => {\n\tconst { openContactSales } = useRenewalLink();\n    const { disabled, intl } = props;\n    const message = intl.formatMessage({\n        id: 'renewalLink.contactSales',\n        defaultMessage: 'Contact Sales',\n        description: 'Button text to open a contact sales link',\n    });\n\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        openContactSales();\n    };\n\n    return (\n        <button\n            className=\"renewal-link\"\n            disabled={disabled}\n            onClick={handleClick}\n        >\n            {message}\n        </button>\n    );\n}", "CodeBleu_score": 48.35006054186403}, {"code": "const RenewalLink = (props: RenewalLinkProps) => {\n\tconst {\n    disabled,\n    intl,\n    openContactSales,\n  } = props;\n  const handleClick = (e: SyntheticEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    openContactSales();\n  };\n  const buttonText = intl.formatMessage(messages.renewalLinkText);\n  return (\n    <Button\n      disabled={disabled}\n      onClick={handleClick}\n    >\n      {buttonText}\n    </Button>\n  );\n}", "CodeBleu_score": 33.506708912851025}, {"code": "const RenewalLink = (props: RenewalLinkProps) => {\n\tconst openContactSales = useOpenContactSales();\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    openContactSales();\n  };\n\n  const {\n    isDisabled,\n    message,\n    values,\n  } = props;\n\n  return (\n    <button\n      className=\"renewal-link\"\n      disabled={isDisabled}\n      onClick={handleClick}\n    >\n      <FormattedMessage {...message} values={values} />\n    </button>\n  );\n}", "CodeBleu_score": 41.79825429702204}]}
{"instance_id": "23618eba67aa", "generation_result": [{"code": "updateErrors = (elements: DialogElement[], fieldErrors?: {[x: string]: string}, formError?: string): boolean =>{\n\tconst { intl } = this.props\n    const fieldErrorKeys = Object.keys(fieldErrors || {})\n    const fieldErrorMatchesElements = checkIfErrorsMatchElements(fieldErrorKeys, elements)\n\n    const formErrorMessage = formError ? intl.formatMessage(messages.formError, { message: formError }) : ''\n\n    const unknownFieldErrors = fieldErrorKeys.filter(key => !fieldErrorMatchesElements.includes(key))\n    const unknownFieldErrorMessage = unknownFieldErrors.length > 0 ? intl.formatMessage(messages.unknownFieldError, { fieldNames: unknownFieldErrors.join(', ') }) : ''\n\n    const fieldErrorMessages = fieldErrorMatchesElements.map(key => fieldErrors && fieldErrors[key])\n\n    const errorMessages = [\n        ...fieldErrorMessages,\n        formErrorMessage,\n        unknownFieldErrorMessage,\n    ]\n\n    const errorMessage = errorMessages.join('\n\n')\n\n    if (errorMessage.length > 0) {\n        this.setState({\n            errorMessage,\n            errorMessageMarkdown: errorMessage.split('\n\n').map(message => {\n                return message.length > 0 ? <p>{message}</p> : null\n            }),\n        })\n        return true\n    }\n\n    this.setState({\n        errorMessage: '',\n        errorMessageMarkdown: [],\n    })\n\n    return false\n}", "CodeBleu_score": 32.885752311321085}, {"code": "updateErrors = (elements: DialogElement[], fieldErrors?: {[x: string]: string}, formError?: string): boolean =>{\n\tconst { intl } = this.props\n  const { errors } = this.state\n  let hasErrors = false\n\n  // Check for form error\n  if (formError) {\n    this.setState({\n      formError: formError,\n      formErrorMarkdown: intl.formatMessage(formErrorMarkdownMessages[formError]),\n    })\n    hasErrors = true\n  } else {\n    this.setState({\n      formError: undefined,\n      formErrorMarkdown: undefined,\n    })\n  }\n\n  // Check for field errors\n  if (fieldErrors) {\n    const newErrors = { ...errors }\n    Object.entries(fieldErrors).forEach(([fieldName, error]) => {\n      // Check if field error matches an element\n      const element = elements.find(element => element.name === fieldName)\n      if (element) {\n        newErrors[fieldName] = error\n        hasErrors = true\n      } else {\n        // Unknown field error\n        newErrors[fieldName] = intl.formatMessage(errorMessages.unknownFieldError, { fieldName })\n        hasErrors = true\n      }\n    })\n    this.setState({ errors: newErrors })\n  } else {\n    this.setState({ errors: {} })\n  }\n\n  return hasErrors\n}", "CodeBleu_score": 34.40343649919097}, {"code": "updateErrors = (elements: DialogElement[], fieldErrors?: {[x: string]: string}, formError?: string): boolean =>{\n\tlet hasErrors = false;\n  if (fieldErrors) {\n    const errors = checkIfErrorsMatchElements(fieldErrors, elements);\n    if (errors) {\n      hasErrors = true;\n      this.setState({\n        fieldErrors: errors,\n        formError: null\n      });\n    }\n  }\n  if (formError) {\n    hasErrors = true;\n    this.setState({\n      formError,\n      fieldErrors: null\n    });\n  }\n  return hasErrors;\n}", "CodeBleu_score": 24.63885886786088}]}
{"instance_id": "10be7e79f7e0", "generation_result": [{"code": "loadDynamicChannelOptions = async (userInput: string): Promise<AppSelectOption[]> =>{\n\tconst lowercaseInput = userInput.toLowerCase();\n  const autocompleteResult = await autocompleteChannels(lowercaseInput);\n  const channelOptions = autocompleteResult.channels.map((channel: Channel) => ({\n    label: channel.display_name,\n    value: channel.id,\n  }));\n  return channelOptions;\n}", "CodeBleu_score": 39.52540561787782}, {"code": "loadDynamicChannelOptions = async (userInput: string): Promise<AppSelectOption[]> =>{\n\tconst channels = await autocompleteChannels(userInput.toLowerCase());\n  return channels.map((channel) => ({\n    label: channel.display_name,\n    value: channel.id,\n  }));\n}", "CodeBleu_score": 36.194765898115136}, {"code": "loadDynamicChannelOptions = async (userInput: string): Promise<AppSelectOption[]> =>{\n\t// Convert the user input to lowercase and remove any leading/trailing whitespace\n  const input = userInput.toLowerCase().trim();\n\n  // Search for channels matching the user input\n  const results = await autocompleteChannels(input);\n\n  // Transform the search results into a format suitable for selection options\n  return results.map(({ name, id }) => ({\n    label: name,\n    value: id\n  }));\n}", "CodeBleu_score": 30.676186219023393}]}
{"instance_id": "b44d060ba306", "generation_result": [{"code": "handleJoin = async (channel: Channel, done: () => void) => {\n\tconst {actions, currentUserId, teamId, teamName} = this.props;\n    if (!this.isMemberOfChannel(channel)) {\n        const {error} = await actions.joinChannel(currentUserId, teamId, channel.id);\n        if (error) {\n            this.setState({serverError: error.message});\n            return;\n        }\n        actions.getChannelsMemberCount(teamId);\n        browserHistory.push(`/${teamName}/channels/${channel.name}`);\n        this.closeEditRHS();\n        this.setState({serverError: ''});\n        if (done) {\n            done();\n        }\n    }\n}", "CodeBleu_score": 65.19753323654919}, {"code": "handleJoin = async (channel: Channel, done: () => void) => {\n\tconst {actions, currentUserId, teamId, teamName} = this.props;\n    if (!this.isMemberOfChannel(channel)) {\n        const {error} = await actions.joinChannel(currentUserId, teamId, channel.id);\n        if (error) {\n            this.setState({serverError: error.message});\n            return;\n        }\n\n        actions.getChannelsMemberCount(teamId);\n        browserHistory.push(`/${teamName}/channels/${channel.name}`);\n        this.closeEditRHS();\n        this.setState({serverError: ''});\n        done();\n    }\n}", "CodeBleu_score": 62.497204860542986}, {"code": "handleJoin = async (channel: Channel, done: () => void) => {\n\tconst {\n        actions,\n        currentUserId,\n        teamId,\n        teamName,\n    } = this.props;\n\n    if (!this.isMemberOfChannel(channel)) {\n        const {error} = await actions.joinChannel(currentUserId, teamId, channel.id);\n        if (error) {\n            this.setState({serverError: error.message});\n            return;\n        }\n\n        actions.getChannelsMemberCount(teamId);\n        browserHistory.push(`${getRelativeChannelURL(teamName, channel.name)}`);\n        this.closeEditRHS();\n        this.setState({serverError: ''});\n        done();\n    }\n}", "CodeBleu_score": 55.662802923534386}]}
{"instance_id": "c6636f0c9c0b", "generation_result": [{"code": "const CardHeader: React.FC<Props> = (props: Props) =>{\n\tconst {\n    children,\n    isExpanded,\n    onClick,\n  } = props;\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    onClick(e);\n  };\n\n  const className = isExpanded ? 'card-header expanded' : 'card-header';\n\n  return (\n    <div className={className} onClick={handleClick}>\n      {children}\n      {isExpanded && <hr />}\n    </div>\n  );\n}", "CodeBleu_score": 38.581868197086536}, {"code": "const CardHeader: React.FC<Props> = (props: Props) =>{\n\tconst { children, onClick, isExpanded, ...rest } = props;\n\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    <div\n      className={`card-header ${isExpanded ? 'card-header-expanded' : ''}`}\n      onClick={handleClick}\n      {...rest}\n    >\n      {children}\n      {isExpanded && <hr />}\n    </div>\n  );\n}", "CodeBleu_score": 36.63346127301927}, {"code": "const CardHeader: React.FC<Props> = (props: Props) =>{\n\tconst {\n    children,\n    onClick,\n    expanded,\n  } = props;\n\n  return (\n    <div\n      className={`card-header ${expanded ? 'expanded' : ''}`}\n      onClick={onClick}\n    >\n      {children}\n      {expanded && <hr />}\n    </div>\n  );\n}", "CodeBleu_score": 36.71661779725846}]}
{"instance_id": "230cb3cd6dd5", "generation_result": [{"code": "const TitleAndButtonCardHeader: React.FC<Props> = (props: Props) =>{\n\tconst {\n    title,\n    subtitle,\n    buttonText,\n    onClick,\n    isDisabled,\n  } = props;\n  return (\n    <div className=\"title-and-button-card-header\">\n      <div className=\"title-and-button-card-header-title\">\n        {title}\n      </div>\n      {subtitle && (\n        <div className=\"title-and-button-card-header-subtitle\">\n          {subtitle}\n        </div>\n      )}\n      {buttonText && (\n        <button\n          className=\"title-and-button-card-header-button\"\n          onClick={onClick}\n          disabled={isDisabled}\n        >\n          {buttonText}\n        </button>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 23.198313716383872}, {"code": "const TitleAndButtonCardHeader: React.FC<Props> = (props: Props) =>{\n\tconst { title, subtitle, buttonText, onClick, isDisabled } = props;\n    return (\n        <div className=\"card-header\">\n            <div className=\"card-header-title\">\n                <h3 className=\"card-header-title-text\">{title}</h3>\n                {subtitle && <h5 className=\"card-header-title-subtitle\">{subtitle}</h5>}\n            </div>\n            {buttonText && onClick && (\n                <button className=\"card-header-button\" onClick={onClick} disabled={isDisabled}>\n                    {buttonText}\n                </button>\n            )}\n        </div>\n    );\n}", "CodeBleu_score": 23.83633002123741}, {"code": "const TitleAndButtonCardHeader: React.FC<Props> = (props: Props) =>{\n\tconst { title, subtitle, buttonText, onClick, isDisabled } = props;\n\n    return (\n        <div className=\"card-header\">\n            <h5 className=\"card-title\">{title}</h5>\n            {subtitle && <p className=\"card-subtitle\">{subtitle}</p>}\n            {buttonText && (\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={onClick}\n                    disabled={isDisabled}\n                >\n                    {buttonText}\n                </button>\n            )}\n        </div>\n    );\n}", "CodeBleu_score": 24.501327035452576}]}
{"instance_id": "eb5c7946fd59", "generation_result": [{"code": "export const createNotifications = (services: KibanaServices): KibanaReactNotifications => {{\n\tconst { notifications } = services;\n  if (!notifications) {\n    throw new Error('Notifications service is unavailable.');\n  }\n  const show: KibanaReactNotifications['show'] = (\n    title: string,\n    body: string,\n    config: KibanaReactNotifications['show']['config'] = {}\n  ) => {\n    const {\n      color = 'primary',\n      iconType = 'bell',\n      lifetime = 5000,\n      onClose = () => {},\n    } = config;\n    const toast = {\n      title,\n      text: body,\n      color,\n      iconType,\n      toastLifeTimeMs: lifetime,\n      onClose,\n    };\n    notifications.toasts.add(toast);\n  };\n  const success: KibanaReactNotifications['success'] = (\n    title: string,\n    body: string,\n    config: KibanaReactNotifications['show']['config'] = {}\n  ) => {\n    const { color = 'success', iconType = 'check' } = config;\n    show(title, body, { color, iconType });\n  };\n  const warning: KibanaReactNotifications['warning'] = (\n    title: string,\n    body: string,\n    config: KibanaReactNotifications['show']['config'] = {}\n  ) => {\n    const { color = 'warning', iconType = 'alert' } = config;\n    show(title, body, { color, iconType });\n  };\n  const danger: KibanaReactNotifications['danger'] = (\n    title: string,\n    body: string,\n    config: KibanaReactNotifications['show']['config'] = {}\n  ) => {\n    const { color = 'danger', iconType = 'alert' } = config;\n    show(title, body, { color, iconType });\n  };\n  return {\n    show,\n    success,\n    warning,\n    danger,\n  };\n}", "CodeBleu_score": 32.82540935199903}, {"code": "export const createNotifications = (services: KibanaServices): KibanaReactNotifications => {{\n\tconst { notifications } = services;\n  if (!notifications) {\n    throw new Error('Notifications system is unavailable');\n  }\n  const { toasts } = notifications;\n  const show = (options: NotificationOptions) => {\n    const {\n      title,\n      body,\n      color = 'primary',\n      iconType = 'bell',\n      lifetime = 5000,\n      onClose,\n    } = options;\n    const toast = toasts.add({\n      title,\n      text: body,\n      color,\n      iconType,\n      toastLifeTimeMs: lifetime,\n      onClose,\n    });\n    return {\n      remove: () => {\n        toasts.remove(toast);\n      },\n    };\n  };\n  return {\n    show,\n    success: (options: NotificationOptions) => {\n      const {\n        title,\n        body,\n        lifetime = 5000,\n        onClose,\n      } = options;\n      return show({\n        title,\n        body,\n        color: 'success',\n        iconType: 'check',\n        lifetime,\n        onClose,\n      });\n    },\n    warning: (options: NotificationOptions) => {\n      const {\n        title,\n        body,\n        lifetime = 5000,\n        onClose,\n      } = options;\n      return show({\n        title,\n        body,\n        color: 'warning',\n        iconType: 'alert',\n        lifetime,\n        onClose,\n      });\n    },\n    danger: (options: NotificationOptions) => {\n      const {\n        title,\n        body,\n        lifetime = 5000,\n        onClose,\n      } = options;\n      return show({\n        title,\n        body,\n        color: 'danger',\n        iconType: 'alert',\n        lifetime,\n        onClose,\n      });\n    },\n  };\n}", "CodeBleu_score": 24.843913578815158}, {"code": "export const createNotifications = (services: KibanaServices): KibanaReactNotifications => {{\n\tconst { notifications } = services;\n\n  if (!notifications) {\n    throw new Error('Notifications unavailable');\n  }\n\n  const show = (\n    title: string,\n    body: string,\n    color: string,\n    icon: string,\n    lifetime: number,\n    onClose?: () => void,\n  ) => {\n    notifications.toasts.add({\n      title,\n      text: body,\n      color,\n      iconType: icon,\n      toastLifeTimeMs: lifetime,\n      onClose,\n    });\n  };\n\n  const success = (title: string, body: string, lifetime: number, onClose?: () => void) => {\n    show(title, body, 'success', 'check', lifetime, onClose);\n  };\n\n  const warning = (title: string, body: string, lifetime: number, onClose?: () => void) => {\n    show(title, body, 'warning', 'alert', lifetime, onClose);\n  };\n\n  const danger = (title: string, body: string, lifetime: number, onClose?: () => void) => {\n    show(title, body, 'danger', 'alert', lifetime, onClose);\n  };\n\n  return {\n    show,\n    success,\n    warning,\n    danger,\n  };\n}", "CodeBleu_score": 29.259055203040834}]}
{"instance_id": "e8c4d43e5232", "generation_result": [{"code": "const openFlyout: KibanaReactOverlays['openFlyout'] = (node, options?) =>{\n\tconst core = services.core;\n  if (core.overlay.openFlyout) {\n    return core.overlay.openFlyout(node, options);\n  }\n  const theme = core.uiSettings.get('theme:darkMode') ? darkTheme : lightTheme;\n  return services.overlays!.openFlyout(toMountPoint(node, theme), options);\n}", "CodeBleu_score": 37.89846381357777}, {"code": "const openFlyout: KibanaReactOverlays['openFlyout'] = (node, options?) =>{\n\tcheckCoreService('overlays');\n  return services.overlays!.openFlyout(toMountPoint(node), options);\n}", "CodeBleu_score": 39.043453423462736}, {"code": "const openFlyout: KibanaReactOverlays['openFlyout'] = (node, options?) =>{\n\tcheckCoreService(services.overlays);\n  return services.overlays!.openFlyout(toMountPoint(node), options);\n}", "CodeBleu_score": 41.156426136268855}]}
{"instance_id": "89d99efaa3c9", "generation_result": [{"code": "export const reactRouterOnClickHandler =\n  (history: ScopedHistory | History, to: string | LocationObject, onClickCallback?: Function) =>\n  (event: MouseEvent) =>{\n\tif (onClickCallback) {\n      onClickCallback(event);\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (event.target as unknown as { getAttribute: (a: string) => unknown })?.getAttribute('target')\n    ) {\n      return;\n    }\n\n    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    history.push(to);\n  }", "CodeBleu_score": 84.87581220876177}, {"code": "export const reactRouterOnClickHandler =\n  (history: ScopedHistory | History, to: string | LocationObject, onClickCallback?: Function) =>\n  (event: MouseEvent) =>{\n\tif (onClickCallback) onClickCallback(event);\n\n    if (event.defaultPrevented) return;\n\n    // Check if link is modified, see https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/isModified\n    if (isModifiedEvent(event)) return;\n\n    // If target prop is set (e.g. to \"_blank\"), let browser handle link.\n    if (isLeftClickEvent(event) && isValidAnchor(event.currentTarget)) {\n      event.preventDefault();\n\n      history.push(toLocationObject(to));\n    }\n  }", "CodeBleu_score": 44.53575891958613}, {"code": "export const reactRouterOnClickHandler =\n  (history: ScopedHistory | History, to: string | LocationObject, onClickCallback?: Function) =>\n  (event: MouseEvent) =>{\n\t// execute callback if provided\n    onClickCallback && onClickCallback(event);\n\n    // check if the event's default action was prevented\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // ensure the event target does not have a 'target' attribute\n    const target = (event.target as unknown as { getAttribute: (a: string) => unknown })?.getAttribute(\n      'target'\n    );\n    if (target) {\n      return;\n    }\n\n    // verify the event is a left-click and not modified\n    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n      return;\n    }\n\n    // prevent default action and navigate to location\n    event.preventDefault();\n    history.push(to);\n  }", "CodeBleu_score": 73.80085054461966}]}
{"instance_id": "8d8e28c04bbd", "generation_result": [{"code": "export const useGlobalUiSetting$ = <T>(key: string, defaultValue?: T): [T, Setter<T>] => {\n\tconst [value, setValue] = useState<T>(defaultValue as T);\n\n  const set = useCallback((newValue: T) => {\n    setValue(newValue);\n    settings!.globalClient.set(key, newValue);\n  }, [key]);\n\n  useEffect(() => {\n    let subscription: Subscription;\n    const get = settings!.globalClient.get$.bind(settings!.globalClient);\n\n    get(key).subscribe(setValue).add((sub) => {\n      subscription = sub;\n    });\n\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [key]);\n\n  return [value, set];\n}", "CodeBleu_score": 46.74954132290746}, {"code": "export const useGlobalUiSetting$ = <T>(key: string, defaultValue?: T): [T, Setter<T>] => {\n\tconst [value, setValue] = useState<T>(defaultValue as T);\n  const { settings } = useKibana().services;\n\n  useEffect(() => {\n    if (!settings) {\n      throw new Error('Settings service is unavailable');\n    }\n\n    const subscription = settings.get$<T>(key).subscribe(setValue);\n\n    return () => subscription.unsubscribe();\n  }, [key, settings]);\n\n  const setter = useCallback(\n    (value: T) => {\n      if (!settings) {\n        throw new Error('Settings service is unavailable');\n      }\n\n      settings.set(key, value);\n    },\n    [key, settings]\n  );\n\n  return [value, setter];\n}", "CodeBleu_score": 43.66848027095349}, {"code": "export const useGlobalUiSetting$ = <T>(key: string, defaultValue?: T): [T, Setter<T>] => {\n\tconst [value, setValue] = useState<T>(defaultValue as T);\n  const [, setValueFromService] = useState<T>(defaultValue as T);\n\n  const settings = useContext(KibanaContext).services.settings;\n\n  useEffect(() => {\n    if (!settings) {\n      throw new Error('Settings service is unavailable.');\n    }\n\n    const subscription = settings\n      .get$<T>(key)\n      .subscribe((value) => {\n        setValue(value);\n        setValueFromService(value);\n      });\n\n    return () => subscription.unsubscribe();\n  }, [key, settings]);\n\n  const setter = useCallback(\n    (value: T) => {\n      if (!settings) {\n        throw new Error('Settings service is unavailable.');\n      }\n\n      settings.set(key, value);\n    },\n    [key, settings]\n  );\n\n  return [value, setter];\n}", "CodeBleu_score": 40.20286243956709}]}
{"instance_id": "7da631faf620", "generation_result": [{"code": "const wrapMainPanelItemsIntoSubmenu = (panels: Record<string, PanelDescriptor>, id: string) =>{\n\tconst panel = panels[id];\n  if (panel && panel.items.length > 5) {\n    const visibleItems = panel.items.slice(0, 5);\n    const submenuItems = panel.items.slice(5);\n    visibleItems.push({\n      type: 'submenu',\n      title: 'More',\n      path: `/${id}/submenu`,\n      panel: {\n        type: 'submenu',\n        title: 'More',\n        items: submenuItems,\n      },\n    });\n    panels[id] = {\n      ...panel,\n      items: visibleItems,\n    };\n  }\n}", "CodeBleu_score": 32.95799727850678}, {"code": "const wrapMainPanelItemsIntoSubmenu = (panels: Record<string, PanelDescriptor>, id: string) =>{\n\tconst panel = panels[id];\n  if (panel && panel.items.length > 10) {\n    const visibleItems = panel.items.slice(0, 10);\n    const submenuItems = panel.items.slice(10);\n    const moreItem: PanelItem = {\n      id: 'more',\n      title: 'More...',\n      panel: {\n        id: `${id}_submenu`,\n        items: submenuItems,\n      },\n    };\n    panels[id] = {\n      ...panel,\n      items: visibleItems,\n    };\n    panels[`${id}_submenu`] = {\n      id: `${id}_submenu`,\n      title: 'More...',\n      items: submenuItems,\n    };\n    return {\n      panel: {\n        ...panel,\n        items: [...visibleItems, moreItem],\n      },\n      panels: panels,\n    };\n  }\n  return {\n    panel,\n    panels,\n  };\n}", "CodeBleu_score": 40.51829389175244}, {"code": "const wrapMainPanelItemsIntoSubmenu = (panels: Record<string, PanelDescriptor>, id: string) =>{\n\tconst panel = panels[id]\n\n  if (panel && panel.items.length > 3) {\n    const visibleItems = panel.items.slice(0, 3)\n    const submenuItems = panel.items.slice(3)\n\n    visibleItems.push({\n      type: 'more',\n      path: submenuItems[0].path,\n      label: 'More',\n      icon: 'more',\n    })\n\n    panels[id] = {\n      ...panel,\n      items: visibleItems,\n    }\n\n    panels[`${id}-submenu`] = {\n      type: 'submenu',\n      items: submenuItems,\n      icon: 'more',\n      label: 'More',\n      path: submenuItems[0].path,\n    }\n  }\n}", "CodeBleu_score": 34.15123966538425}]}
{"instance_id": "7a1a98211380", "generation_result": [{"code": "private scheduleFlush(){\n\tif (!this.flushTimer) {\n    this.flushTimer = setTimeout(() => {\n      this.flushTimer = null;\n      if (this.batchingQueue.length) {\n        const tasks = this.batchingQueue.slice();\n        this.batchingQueue.length = 0;\n        const alwaysTasks = tasks.filter(task => task.alwaysShow);\n        if (alwaysTasks.length) {\n          this.showPopup(alwaysTasks);\n        } else {\n          const singleTask = tasks.length === 1 ? tasks[0] : null;\n          if (singleTask) {\n            singleTask.execute();\n          } else {\n            this.showPopup(tasks);\n          }\n        }\n      }\n    }, 100);\n  }\n}", "CodeBleu_score": 45.09904036443584}, {"code": "private scheduleFlush(){\n\tif (this.flushTimeout) {\n\t\tclearTimeout(this.flushTimeout);\n\t}\n\tthis.flushTimeout = setTimeout(this.flush, 100);\n}", "CodeBleu_score": 3.4051527428173625}, {"code": "private scheduleFlush(){\n\tif (this.flushTimer) {\n\t\treturn;\n\t}\n\tthis.flushTimer = setTimeout(() => {\n\t\tthis.flushTimer = null;\n\t\tconst tasks = this.batchingQueue.slice(0);\n\t\tthis.batchingQueue.length = 0;\n\t\tif (tasks.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst alwaysShow = tasks.filter(task => task.alwaysShow);\n\t\tif (alwaysShow.length > 0) {\n\t\t\tthis.showPopup(alwaysShow);\n\t\t\treturn;\n\t\t}\n\t\tif (tasks.length === 1) {\n\t\t\ttasks[0].run();\n\t\t\treturn;\n\t\t}\n\t\tthis.showPopup(tasks);\n\t}, 100);\n}", "CodeBleu_score": 36.82126265111504}]}
{"instance_id": "702779fd9f4a", "generation_result": [{"code": "public async execute(context: Context, alwaysShowPopup?: boolean){\n\tconst actions = await this.getCompatibleActions(context);\n  if (actions.length === 0) {\n    return;\n  }\n  const executions = actions.map((action) => {\n    return this.service.executionService.execute(action, context, alwaysShowPopup);\n  });\n  await Promise.all(executions);\n}", "CodeBleu_score": 44.74879940437938}, {"code": "public async execute(context: Context, alwaysShowPopup?: boolean){\n\tconst actions = await this.getCompatibleActions(context);\n    const promises = actions.map(action => this.service.executionService.execute(action, context, this, alwaysShowPopup));\n    return Promise.all(promises);\n}", "CodeBleu_score": 41.45648312741888}, {"code": "public async execute(context: Context, alwaysShowPopup?: boolean){\n\tconst actions = await this.actionService.getCompatibleActions(context);\n  await Promise.all(actions.map(async (action) => {\n    const actionExecution = await this.executionService.execute(action, context, alwaysShowPopup);\n    if (actionExecution.error) {\n      this.logger.error(`Error executing action ${action.name}: ${actionExecution.error}`);\n    }\n  }));\n}", "CodeBleu_score": 46.18842648517491}]}
{"instance_id": "16fd1e46a9be", "generation_result": [{"code": "function readImages(chunk: Chunk, frameCount: number): Uint8Array[] {\n\tconst images: Uint8Array[] = [];\n    let offset = 0;\n    for (let i = 0; i < frameCount; i++) {\n        const subChunk = chunk.subChunks[i];\n        if (subChunk.type !== 'icon') {\n            throw new Error(`Expected icon sub-chunk, got ${subChunk.type}`);\n        }\n        const image = subChunk.data.slice(offset, offset + subChunk.length);\n        images.push(image);\n        offset += subChunk.length;\n    }\n    return images;\n}", "CodeBleu_score": 43.98352581525633}, {"code": "function readImages(chunk: Chunk, frameCount: number): Uint8Array[] {\n\tconst images: Uint8Array[] = [];\n  let i = 0;\n  while (i < frameCount) {\n    const subChunk = chunk.subChunks[i];\n    if (subChunk.type !== 'icon') {\n      throw new Error(`Unexpected sub-chunk type '${subChunk.type}'`);\n    }\n    images.push(subChunk.data);\n    i++;\n  }\n  return images;\n}", "CodeBleu_score": 44.4252280538868}, {"code": "function readImages(chunk: Chunk, frameCount: number): Uint8Array[] {\n\tconst images = [];\n  let index = 0;\n  while (index < frameCount) {\n    const subChunk = chunk.subChunks[index];\n    if (subChunk.type !== 'icon') {\n      throw new Error(`Unexpected sub-chunk type: ${subChunk.type}`);\n    }\n    images.push(subChunk.data);\n    index++;\n  }\n  return images;\n}", "CodeBleu_score": 47.88782866537012}]}
{"instance_id": "6b6f91239073", "generation_result": [{"code": "function readAni(contents: Uint8Array): AniCursorImage{\n\tlet frameIdx = 0;\n  let frameCount = 0;\n  let totalDuration = 0;\n  const frames = [];\n  const imageMap = new Map();\n  const gif = new GIF();\n\n  gif.parse(contents);\n\n  const {\n    width,\n    height,\n    globalPalette,\n    frames: gifFrames,\n  } = gif;\n\n  const displayRate = 1000 / gif.frameRate;\n\n  gifFrames.forEach((gifFrame) => {\n    const {\n      frame,\n      delay,\n    } = gifFrame;\n\n    if (frame.disposal === 2) {\n      frameIdx = 0;\n    }\n\n    const {\n      left,\n      top,\n      width: frameWidth,\n      height: frameHeight,\n    } = frame;\n\n    const image = new Image();\n\n    image.src = frame.getImage().src;\n    image.width = frameWidth;\n    image.height = frameHeight;\n\n    const imageData = image.getImageData();\n\n    imageMap.set(frameIdx, imageData);\n\n    frames[frameIdx] = {\n      imageData,\n      percents: [],\n      image,\n    };\n\n    totalDuration += delay;\n\n    frameIdx += 1;\n    frameCount += 1;\n  });\n\n  frames.forEach((frame, idx) => {\n    const {\n      imageData,\n      percents,\n    } = frame;\n\n    const {\n      width,\n      height,\n    } = imageData;\n\n    const percentWidth = width / gif.width;\n    const percentHeight = height / gif.height;\n\n    for (let x = 0; x < width; x += 1) {\n      for (let y = 0; y < height; y += 1) {\n        const pixelIdx = (y * width + x) * 4;\n        const r = imageData.data[pixelIdx];\n        const g = imageData.data[pixelIdx + 1];", "CodeBleu_score": 23.132377722558108}, {"code": "function readAni(contents: Uint8Array): AniCursorImage{\n\tconst frameCount = contents[0];\n    const displayRate = contents[1];\n    const frames: Frame[] = [];\n    let totalDuration = 0;\n\n    for (let i = 0; i < frameCount; i++) {\n        const frame: Frame = {\n            url: `data:image/gif;base64,${btoa(String.fromCharCode(...contents.subarray(i * 2 + 2, i * 2 + 2 + 2)))}`,\n            percents: []\n        };\n        frames.push(frame);\n\n        const duration = contents[i * 2 + 4];\n        totalDuration += duration;\n        frame.percents.push(0);\n        for (let j = 1; j < duration; j++) {\n            frame.percents.push(Math.floor((100 * j) / duration));\n        }\n        frame.percents.push(100);\n    }\n\n    return {\n        displayRate: displayRate,\n        totalDuration: totalDuration,\n        frames: frames\n    };\n}", "CodeBleu_score": 31.205761966284072}, {"code": "function readAni(contents: Uint8Array): AniCursorImage{\n\tconst header = new Uint8Array(contents.buffer, 0, 8);\n    const version = header[0];\n    const fileSize = readUint32(header, 1);\n    const frames = readUint32(header, 5);\n\n    const frameRate = readUint16(contents, 8);\n    const displayRate = readUint16(contents, 10);\n    const totalDuration = readUint32(contents, 12);\n    const totalFrames = readUint32(contents, 16);\n    const totalImages = readUint32(contents, 20);\n    const totalColors = readUint32(contents, 24);\n    const transparentColor = readUint32(contents, 28);\n    const flags = readUint32(contents, 32);\n\n    const imageOffsets = new Uint32Array(contents.buffer, 36, totalImages);\n    const imageSizes = new Uint32Array(contents.buffer, 36 + 4 * totalImages, totalImages);\n    const frameOffsets = new Uint32Array(contents.buffer, 36 + 2 * 4 * totalImages, totalFrames);\n    const frameSizes = new Uint32Array(contents.buffer, 36 + 3 * 4 * totalImages, totalFrames);\n    const frameDurations = new Uint32Array(contents.buffer, 36 + 4 * 4 * totalImages, totalFrames);\n\n    const frameData: AniCursorImage[\"frames\"] = [];\n\n    for (let i = 0; i < totalFrames; i++) {\n        const frameIdx = i;\n        const frameOffset = frameOffsets[i];\n        const frameSize = frameSizes[i];\n        const frameDuration = frameDurations[i];\n        const frameData = new Uint8Array(contents.buffer, frameOffset, frameSize);\n\n        const imageIndex = readUint16(frameData, 0);\n        const imageOffset = imageOffsets[imageIndex];\n        const imageSize =", "CodeBleu_score": 26.634344113677766}]}
{"instance_id": "f059427111a8", "generation_result": [{"code": "export async function checkInternetArchiveMetadata(): Promise<void>{\n\t// Query the database for items with non-empty metadata.\n  const itemsWithMetadata = await getItemsWithMetadata();\n\n  // Iterate through each item and parse and filter the metadata files.\n  const tooManyFiles: string[] = [];\n  const tooFewFiles: string[] = [];\n  const missingSkinFile: string[] = [];\n  for (const item of itemsWithMetadata) {\n    const metadata = await getMetadata(item.id);\n    const filteredMetadata = filterMetadata(metadata);\n    if (filteredMetadata.length > 1) {\n      tooManyFiles.push(item.id);\n    } else if (filteredMetadata.length < 1) {\n      tooFewFiles.push(item.id);\n    } else if (filteredMetadata[0].name.toLowerCase().includes('skin')) {\n      missingSkinFile.push(item.id);\n    }\n  }\n\n  // Log a table summarizing the results of the categorization.\n  const table = new Table({\n    head: ['Issue', 'Count'],\n    colWidths: [20, 10]\n  });\n  table.push(['Too many files', tooManyFiles.length]);\n  table.push(['Too few files', tooFewFiles.length]);\n  table.push(['Missing skin file', missingSkinFile.length]);\n  console.log(table.toString());\n}", "CodeBleu_score": 32.933088616692615}, {"code": "export async function checkInternetArchiveMetadata(): Promise<void>{\n\t// Get all items with non-empty metadata\n    const items = await getAllItemsWithMetadata();\n\n    // Create arrays to hold categorized items\n    const tooManyFiles = [];\n    const tooFewFiles = [];\n    const missingSkin = [];\n\n    // Iterate through each item\n    for (const item of items) {\n\n        // Get the metadata file\n        const metadata = await getMetadata(item.identifier);\n\n        // Parse the metadata file\n        const metadataObject = JSON.parse(metadata);\n\n        // Get the files array from the metadata file\n        const files = metadataObject.files;\n\n        // Get the number of files in the files array\n        const fileCount = files.length;\n\n        // Check if the number of files is greater than 1\n        if (fileCount > 1) {\n            // Add the item to the tooManyFiles array\n            tooManyFiles.push(item);\n        }\n\n        // Check if the number of files is less than 1\n        if (fileCount < 1) {\n            // Add the item to the tooFewFiles array\n            tooFewFiles.push(item);\n        }\n\n        // Check if the files array contains a file with the name 'skin.json'\n        if (!files.some(file => file.name === 'skin.json')) {\n            // Add the item to the missingSkin array\n            missingSkin.push(item);\n        }\n    }\n\n    // Log a table summarizing the results of the categorization\n    console.table([\n        {\n            'Too Many Files': tooManyFiles.length,\n            'Too Few Files': tooFewFiles.length,\n            'Missing Skin': missingSkin.length,\n            'Total': items.length\n        }\n    ]);\n}", "CodeBleu_score": 31.243990336179273}, {"code": "export async function checkInternetArchiveMetadata(): Promise<void>{\n\tconst db = await getDb();\n    const items = await db.collection(\"items\").find({\n        \"metadata.files\": { $exists: true, $ne: [] }\n    }).toArray();\n\n    const tooManyFiles: Item[] = [];\n    const tooFewFiles: Item[] = [];\n    const missingSkin: Item[] = [];\n\n    for (const item of items) {\n        const files = item.metadata.files;\n        const fileCount = files.length;\n        if (fileCount > 1) {\n            tooManyFiles.push(item);\n        } else if (fileCount < 1) {\n            tooFewFiles.push(item);\n        } else {\n            const file = files[0];\n            if (file.name.toLowerCase().indexOf(\"skin\") === -1) {\n                missingSkin.push(item);\n            }\n        }\n    }\n\n    console.log(`\nItems with too many files: ${tooManyFiles.length}`);\n    console.table(tooManyFiles);\n    console.log(`\nItems with too few files: ${tooFewFiles.length}`);\n    console.table(tooFewFiles);\n    console.log(`\nItems with missing skin file: ${missingSkin.length}`);\n    console.table(missingSkin);\n}", "CodeBleu_score": 35.41572335789952}]}
{"instance_id": "9d9b04763521", "generation_result": [{"code": "function useSkinKeyboardControls(){\n\tconst {\n    actions: {\n      selectNextSkin,\n      selectPreviousSkin\n    },\n    state: {\n      skinIndex\n    }\n  } = useContext(SkinToneContext);\n  const [, setIsKeyboardControlsActive] = useContext(KeyboardControlsContext);\n  const [isKeyboardControlsActive, setIsKeyboardControlsActiveState] = useState(false);\n  const [, setIsKeyboardControlsActiveTimeout] = useState(null);\n  const isKeyboardControlsActiveRef = useRef(isKeyboardControlsActive);\n  const isKeyboardControlsActiveTimeoutRef = useRef(null);\n  isKeyboardControlsActiveRef.current = isKeyboardControlsActive;\n  isKeyboardControlsActiveTimeoutRef.current = isKeyboardControlsActiveTimeout;\n  const setIsKeyboardControlsActiveRef = useRef(setIsKeyboardControlsActive);\n  setIsKeyboardControlsActiveRef.current = setIsKeyboardControlsActive;\n  const skinIndexRef = useRef(skinIndex);\n  skinIndexRef.current = skinIndex;\n  const selectNextSkinRef = useRef(selectNextSkin);\n  selectNextSkinRef.current = selectNextSkin;\n  const selectPreviousSkinRef = useRef(selectPreviousSkin);\n  selectPreviousSkinRef.current = selectPreviousSkin;\n  const unsubscribe = useRef(null);\n  useEffect(() => {\n    unsubscribe.current = subscribe(KeyboardControlsContext, ({\n      isKeyboardControlsActive: isKeyboardControlsActiveContext\n    }) => {\n      setIsKeyboardControlsActiveState(isKeyboardControlsActiveContext);\n    });\n    return () => {\n      unsubscribe.current();\n    };\n  }, []);\n  useEffect(() => {\n    if (isKeyboardControlsActiveRef.current) {\n      const handleKeydown = event => {\n        if (event.key === 'ArrowRight') {\n          if (skinIndexRef.current < 5) {\n            selectNextSkinRef.current();\n          }\n        } else if (event.key === 'ArrowLeft') {\n          if (skinIndexRef.current >", "CodeBleu_score": 27.04973068314782}, {"code": "function useSkinKeyboardControls(){\n\tconst {\n    skinTone,\n    setSkinTone,\n    setShowSkinTonePalette,\n    setShowSkinTonePaletteId\n  } = useContext(SkinTonePaletteContext);\n  const {\n    setShowEmojiPicker,\n    setShowEmojiPickerId\n  } = useContext(EmojiPickerContext);\n  const {\n    setShowFrequentlyUsed,\n    setShowFrequentlyUsedId\n  } = useContext(FrequentlyUsedContext);\n  const {\n    setShowSearch,\n    setShowSearchId\n  } = useContext(SearchContext);\n  const {\n    setShowHistory,\n    setShowHistoryId\n  } = useContext(HistoryContext);\n  const {\n    setShowPreview,\n    setShowPreviewId\n  } = useContext(PreviewContext);\n  const {\n    setShowCategories,\n    setShowCategoriesId\n  } = useContext(CategoriesContext);\n  const {\n    setShowRecents,\n    setShowRecentsId\n  } = useContext(RecentsContext);\n  const {\n    setShowVariants,\n    setShowVariantsId\n  } = useContext(VariantsContext);\n  const {\n    setShowCustom,\n    setShowCustomId\n  } = useContext(CustomContext);\n  const {\n    setShowAnchors,\n    setShowAnchorsId\n  } = useContext(AnchorsContext);\n  const {\n    setShowShortcuts,\n    setShowShortcutsId\n  } = useContext(ShortcutsContext);\n  const {\n    setShowCategory,\n    setShowCategoryId\n  } = useContext(CategoryContext);\n  const {\n    setShowPreviewModal,\n    setShowPreviewModalId\n  } = useContext(PreviewModalContext);\n  const {\n    setShowCustomCategory,\n    setShowCustomCategoryId\n  } = useContext(CustomCategoryContext);\n  const {\n    setShowCustomEmoji,\n    setShowCustomEmojiId\n  } = useContext(CustomEmojiContext);\n  const {", "CodeBleu_score": 15.474974410275792}, {"code": "function useSkinKeyboardControls(){\n\tconst {\n    setSkin,\n    skin\n  } = useSkinContext();\n  const {\n    setIsOpen\n  } = useMenuContext();\n  const {\n    setIsOpen: setIsOpen2\n  } = useControlsContext();\n  const {\n    setIsOpen: setIsOpen3\n  } = useSettingsContext();\n  const {\n    setIsOpen: setIsOpen4\n  } = useHelpContext();\n  const {\n    setIsOpen: setIsOpen5\n  } = useAboutContext();\n  const {\n    setIsOpen: setIsOpen6\n  } = useShareContext();\n  const {\n    setIsOpen: setIsOpen7\n  } = useCreditsContext();\n  const {\n    setIsOpen: setIsOpen8\n  } = useLicenseContext();\n  const {\n    setIsOpen: setIsOpen9\n  } = useFeedbackContext();\n  const {\n    setIsOpen: setIsOpen10\n  } = useProfileContext();\n  const {\n    setIsOpen: setIsOpen11\n  } = usePrivacyContext();\n  const {\n    setIsOpen: setIsOpen12\n  } = useTermsContext();\n  const {\n    setIsOpen: setIsOpen13\n  } = useSupportContext();\n  const {\n    setIsOpen: setIsOpen14\n  } = useDonateContext();\n  const {\n    setIsOpen: setIsOpen15\n  } = useEmbedContext();\n  const {\n    setIsOpen: setIsOpen16\n  } = useDownloadContext();\n  const {\n    setIsOpen: setIsOpen17\n  } = useUploadContext();\n  const {\n    setIsOpen: setIsOpen18\n  } = useSettingsSkinContext();\n  const {\n    setIsOpen: setIsOpen19\n  } = useSettingsColorContext();\n  const {\n    setIsOpen: setIsOpen20\n  } = useSettingsBackgroundContext();\n  const {\n    setIsOpen: setIsOpen21\n  } = useSettingsAccessibilityContext();\n  const {", "CodeBleu_score": 16.5595375430947}]}
{"instance_id": "c49e878d86ad", "generation_result": [{"code": "function _openFileDialog(\n  accept: string | null,\n  expectedType: \"SKIN\" | \"MEDIA\" | \"EQ\"\n): Thunk{\n\treturn (dispatch: Dispatch, getState: GetState): void => {\n    const state = getState();\n    const { fileReferences } = state.fileReferences;\n    const { files } = state.files;\n    const { selectedFile } = state.files;\n    const { selectedSkin } = state.skins;\n\n    const { dialog } = remote;\n    const { showOpenDialog } = dialog;\n\n    const options = {\n      properties: [\"openFile\", \"multiSelections\"],\n      filters: [\n        {\n          name: \"MIDI Files\",\n          extensions: [\"mid\", \"midi\"]\n        },\n        {\n          name: \"All Files\",\n          extensions: [\"*\"]\n        }\n      ]\n    };\n\n    if (accept) {\n      options.filters[0].extensions = [accept];\n    }\n\n    showOpenDialog(options, async (filePaths: string[]): Promise<void> => {\n      if (filePaths) {\n        const fileNames = filePaths.map((filePath: string): string =>\n          path.basename(filePath)\n        );\n        const fileType = path.extname(filePaths[0]).replace(\".\", \"\");\n\n        const fileReferencesToAdd = fileNames.map(\n          (fileName: string): FileReference => ({\n            fileName,\n            filePath: path.join(path.dirname(filePaths[0]), fileName)\n          })\n        );\n\n        const fileReferencesToDelete = fileReferences.filter(\n          (fileReference: FileReference): boolean =>\n            !fileNames.includes(fileReference.fileName)\n        );\n\n        const filesToAdd = fileNames.map(\n          (fileName: string): File => ({\n            fileName,\n            filePath: path.join(path.dirname(filePaths[0]), fileName),\n            fileType\n          })\n        );\n\n        const filesToDelete = files.filter(\n          (file: File): boolean => !fileNames.includes(file.fileName)\n        );\n\n        dispatch(\n          addFileReferences(fileReferencesToAdd, fileReferencesToDelete)\n        );\n        dispatch(add", "CodeBleu_score": 34.63225661757983}, {"code": "function _openFileDialog(\n  accept: string | null,\n  expectedType: \"SKIN\" | \"MEDIA\" | \"EQ\"\n): Thunk{\n\treturn (dispatch, getState) => {\n    const fileInput = document.createElement(\"input\");\n    fileInput.type = \"file\";\n    fileInput.multiple = true;\n    fileInput.accept = accept;\n    fileInput.onchange = () => {\n      const fileList = fileInput.files;\n      if (!fileList) return;\n      const fileNames = Array.from(fileList).map(f => f.name);\n      const fileCount = fileNames.length;\n      const firstFileName = fileNames[0];\n      const fileType = getFileType(firstFileName);\n      if (fileType !== expectedType) {\n        dispatch(\n          error(\n            `The file type of the first file (${fileType}) is not the expected type (${expectedType}).`\n          )\n        );\n        return;\n      }\n      dispatch(\n        openFileDialog(\n          fileType,\n          fileCount,\n          firstFileName,\n          fileNames,\n          fileList\n        )\n      );\n    };\n    fileInput.click();\n  };\n}", "CodeBleu_score": 42.46958265903803}, {"code": "function _openFileDialog(\n  accept: string | null,\n  expectedType: \"SKIN\" | \"MEDIA\" | \"EQ\"\n): Thunk{\n\treturn (dispatch, getState) => {\n    const { fileReferences } = getState();\n    const { fileDialog } = fileReferences;\n\n    const fileDialogOptions = {\n      type: \"openFile\",\n      nwd: {\n        title: \"Open File\",\n        defaultId: 1,\n        defaultType: \"openFile\",\n        action: \"open\",\n      },\n      mswd: {\n        title: \"Open File\",\n        defaultId: 1,\n        defaultType: \"openFile\",\n        action: \"open\",\n      },\n    };\n\n    if (accept) {\n      fileDialogOptions.nwd.filters = [\n        {\n          name: \"Files\",\n          extensions: [accept],\n        },\n      ];\n      fileDialogOptions.mswd.filters = [\n        {\n          name: \"Files\",\n          extensions: [accept],\n        },\n      ];\n    }\n\n    const fileDialogResult = fileDialog(fileDialogOptions);\n\n    if (fileDialogResult) {\n      const {\n        filePaths,\n        canceled,\n      } = fileDialogResult;\n\n      if (!canceled && filePaths.length > 0) {\n        dispatch({\n          type: \"SET_FILE_REFERENCES\",\n          fileReferences: {\n            expectedType,\n            filePaths,\n          },\n        });\n        dispatch(loadFilesFromReferences(expectedType));\n      }\n    }\n  };\n}", "CodeBleu_score": 37.23721278445885}]}
{"instance_id": "afa715d20f88", "generation_result": [{"code": "export function loadMedia(\n  e: React.DragEvent<HTMLDivElement>,\n  loadStyle: LoadStyle = LOAD_STYLE.NONE,\n  atIndex = 0\n): Thunk{\n\tconst files = loadFilesFromReferences(e);\n  const handleTrackDropEvent = getHandleTrackDropEvent(e);\n  return (dispatch, getState) => {\n    if (handleTrackDropEvent) {\n      handleTrackDropEvent(files, loadStyle, atIndex, dispatch, getState);\n    } else {\n      dispatch(loadMediaFiles(files, loadStyle, atIndex));\n    }\n  };\n}", "CodeBleu_score": 47.10757394480519}, {"code": "export function loadMedia(\n  e: React.DragEvent<HTMLDivElement>,\n  loadStyle: LoadStyle = LOAD_STYLE.NONE,\n  atIndex = 0\n): Thunk{\n\tconst { dataTransfer } = e\n  const { files } = dataTransfer\n  const { handleTrackDropEvent, loadFilesFromReferences } = this.props\n  const { dispatch } = this\n  return async (dispatch: Dispatch) => {\n    if (handleTrackDropEvent) {\n      const { style, index } = await handleTrackDropEvent(e)\n      dispatch(loadMediaFiles(files, style, index))\n    } else {\n      dispatch(loadFilesFromReferences(files, loadStyle, atIndex))\n    }\n  }\n}", "CodeBleu_score": 49.49327305065695}, {"code": "export function loadMedia(\n  e: React.DragEvent<HTMLDivElement>,\n  loadStyle: LoadStyle = LOAD_STYLE.NONE,\n  atIndex = 0\n): Thunk{\n\tconst { files } = e.dataTransfer\n  const fileList = Array.from(files)\n  const { handleTrackDropEvent } = getState()\n  return async (dispatch: Dispatch) => {\n    if (handleTrackDropEvent) {\n      const {\n        track,\n        index,\n        style,\n        references,\n        atIndex: droppedAtIndex,\n      } = await handleTrackDropEvent(e)\n      dispatch(\n        loadFilesFromReferences(\n          track,\n          references,\n          style,\n          index,\n          droppedAtIndex || atIndex\n        )\n      )\n    } else {\n      dispatch(loadFilesFromReferences(undefined, fileList, loadStyle, atIndex))\n    }\n  }\n}", "CodeBleu_score": 44.1450155269543}]}
{"instance_id": "0faea0aa350c", "generation_result": [{"code": "export function fetchMediaTags(file: string | Blob, id: number): Thunk {\n  return async (dispatch, getState, { requireMusicMetadata }) =>{\n\tdispatch(actions.fetchMediaTagsStarted(id));\n    try {\n      const { artist, title, album, picture } = await requireMusicMetadata.fetchFromFile(file);\n      dispatch(actions.fetchMediaTagsSucceeded(id, artist, title, album, picture));\n    } catch (err) {\n      dispatch(actions.fetchMediaTagsFailed(id, err));\n    }\n  }", "CodeBleu_score": 16.231809681822952}, {"code": "export function fetchMediaTags(file: string | Blob, id: number): Thunk {\n  return async (dispatch, getState, { requireMusicMetadata }) =>{\n\tdispatch(mediaTagsRequest(id));\n\n    try {\n      const { artist, title, album, picture } = await requireMusicMetadata.fetchFromFile(file);\n      const mediaTags = { artist, title, album, picture };\n      dispatch(mediaTagsSuccess(id, mediaTags));\n    } catch (error) {\n      dispatch(mediaTagsFailure(id, error));\n    }\n  }", "CodeBleu_score": 16.29078941486878}, {"code": "export function fetchMediaTags(file: string | Blob, id: number): Thunk {\n  return async (dispatch, getState, { requireMusicMetadata }) =>{\n\tdispatch({ type: 'FETCH_MEDIA_TAGS_START', id });\n\n    try {\n      const { artist, title, album, picture } = await requireMusicMetadata(file);\n\n      const mediaTags = {\n        artist,\n        title,\n        album,\n        picture,\n      };\n\n      dispatch({ type: 'FETCH_MEDIA_TAGS_SUCCESS', id, mediaTags });\n    } catch (error) {\n      dispatch({ type: 'FETCH_MEDIA_TAGS_FAILURE', id, error });\n    }\n  }", "CodeBleu_score": 18.80874939933226}]}
{"instance_id": "02174213852f", "generation_result": [{"code": "export function playTrack(id: number): Thunk {{\n\treturn (dispatch: Dispatch, getState: GetState): Promise<void> => {\n    const state = getState();\n    if (Selectors.getMediaStatus(state) === MediaStatus.STOPPED) {\n      dispatch(Actions.bufferTrack(id));\n    } else {\n      dispatch(Actions.playTrack(id));\n    }\n  };\n}", "CodeBleu_score": 40.0999958977426}, {"code": "export function playTrack(id: number): Thunk {{\n\treturn (dispatch: Dispatch, getState: GetState) => {\n    const state = getState();\n    const { mediaStatus } = state.core;\n    if (mediaStatus === 'stopped') {\n      dispatch(actions.bufferTrack(id));\n    } else {\n      dispatch(actions.playTrack(id));\n    }\n  };\n}", "CodeBleu_score": 43.28672242653835}, {"code": "export function playTrack(id: number): Thunk {{\n\treturn (dispatch, getState) => {\n    const { mediaStatus } = getState().media;\n    if (mediaStatus === 'stopped') {\n      dispatch(bufferTrack(id));\n    } else {\n      dispatch(playTrack(id));\n    }\n  };\n}", "CodeBleu_score": 34.43742875974915}]}
{"instance_id": "643b829015d2", "generation_result": [{"code": "export function scrollVolume(e: React.WheelEvent<HTMLDivElement>): Thunk{\n\te.preventDefault();\n  return (dispatch, getState) => {\n    const { volume } = getState().player;\n    dispatch(setVolume(volume + e.deltaY));\n  };\n}", "CodeBleu_score": 68.4650388960739}, {"code": "export function scrollVolume(e: React.WheelEvent<HTMLDivElement>): Thunk{\n\te.preventDefault();\n  return (dispatch: Dispatch, getState: GetState) => {\n    const { volume } = getState().player;\n    const delta = e.deltaY;\n    dispatch(setVolume(volume + delta));\n  };\n}", "CodeBleu_score": 49.84640477338874}, {"code": "export function scrollVolume(e: React.WheelEvent<HTMLDivElement>): Thunk{\n\te.preventDefault();\n  return (dispatch, getState) => {\n    const state = getState();\n    const volume = state.volume;\n    const delta = e.deltaY;\n    dispatch(setVolume(volume + delta));\n  };\n}", "CodeBleu_score": 62.7579590250234}]}
{"instance_id": "d97c127090ce", "generation_result": [{"code": "function FullScreen(props: Props){\n\tconst { children, enabled, onEnter, onExit, onError } = props;\n  const ref = useRef<HTMLDivElement>(null);\n  const [fullScreen, setFullScreen] = useState(false);\n\n  const enterFullScreen = () => {\n    if (ref.current) {\n      const element = ref.current;\n      const requestFullScreen =\n        element.requestFullscreen ||\n        element.webkitRequestFullscreen ||\n        element.mozRequestFullScreen ||\n        element.msRequestFullscreen;\n\n      if (requestFullScreen) {\n        requestFullScreen.call(element);\n      } else {\n        onError && onError(new Error('Fullscreen API is not supported'));\n      }\n    }\n  };\n\n  const leaveFullScreen = () => {\n    const exitFullScreen =\n      document.exitFullscreen ||\n      document.webkitExitFullscreen ||\n      document.mozCancelFullScreen ||\n      document.msExitFullscreen;\n\n    if (exitFullScreen) {\n      exitFullScreen.call(document);\n    } else {\n      onError && onError(new Error('Fullscreen API is not supported'));\n    }\n  };\n\n  const handleFullScreenChange = () => {\n    if (fullScreen !== document.fullscreenElement) {\n      setFullScreen(document.fullscreenElement);\n    }\n  };\n\n  useEffect(() => {\n    if (enabled) {\n      enterFullScreen();\n    } else {\n      leaveFullScreen();\n    }\n  }, [enabled]);\n\n  useEffect(() => {\n    if (enabled && !fullScreen) {\n      enterFullScreen();\n    } else if (!enabled && fullScreen) {\n      leaveFullScreen();\n    }\n  }, [enabled, fullScreen]);\n\n  useEffect(() => {\n    const onFullScreenChange = () => {\n      handleFullScreenChange();\n    };\n    document.addEventListener('fullscreenchange', onFullScreenChange);\n    document.addEventListener('webkitfullscreenchange', onFullScreenChange);\n    document.addEventListener('mozfullscreenchange', onFullScreenChange);\n    document.addEventListener('MSFullscreenChange', onFullScreenChange);\n\n    return ()", "CodeBleu_score": 36.39493821985316}, {"code": "function FullScreen(props: Props){\n\tconst { children, enabled } = props;\n  const targetRef = useRef<HTMLDivElement>(null);\n  const [isFullScreen, setIsFullScreen] = useState(false);\n\n  useEffect(() => {\n    const target = targetRef.current;\n    if (!target) {\n      return;\n    }\n    const onFullScreenChange = () => {\n      setIsFullScreen(isFullScreen);\n    };\n    document.addEventListener(\"fullscreenchange\", onFullScreenChange);\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", onFullScreenChange);\n    };\n  }, [targetRef]);\n\n  useLayoutEffect(() => {\n    const target = targetRef.current;\n    if (!target) {\n      return;\n    }\n    if (enabled && !isFullScreen) {\n      target.requestFullscreen();\n    } else if (!enabled && isFullScreen) {\n      document.exitFullscreen();\n    }\n  }, [enabled, isFullScreen, targetRef]);\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 100000,\n      }}\n      ref={targetRef}\n    >\n      {children}\n    </div>\n  );\n}", "CodeBleu_score": 43.72100826472478}, {"code": "function FullScreen(props: Props){\n\tconst { children, enabled, onFullScreenChange } = props;\n  const targetRef = useRef<HTMLDivElement>(null);\n  const isFullScreen = useRef(false);\n\n  useEffect(() => {\n    if (enabled) {\n      enterFullScreen();\n    } else {\n      leaveFullScreen();\n    }\n  }, [enabled]);\n\n  useEffect(() => {\n    const handleFullScreenChange = () => {\n      if (onFullScreenChange) {\n        onFullScreenChange(isFullScreen.current);\n      }\n    };\n\n    if (targetRef.current) {\n      targetRef.current.addEventListener(\"fullscreenchange\", handleFullScreenChange);\n    }\n\n    return () => {\n      if (targetRef.current) {\n        targetRef.current.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\n      }\n    };\n  }, [onFullScreenChange]);\n\n  const enterFullScreen = () => {\n    if (targetRef.current) {\n      isFullScreen.current = true;\n      targetRef.current.requestFullscreen();\n    }\n  };\n\n  const leaveFullScreen = () => {\n    if (document.fullscreenElement) {\n      isFullScreen.current = false;\n      document.exitFullscreen();\n    }\n  };\n\n  return (\n    <div ref={targetRef} style={styles.fullScreenContainer}>\n      {children}\n    </div>\n  );\n}", "CodeBleu_score": 42.1438380452101}]}
{"instance_id": "d333738337a8", "generation_result": [{"code": "const getClipPaths = createSelector(Selectors.getSkinRegion, (skinRegion) =>{\n\tconst clipPaths = {};\n  Object.entries(skinRegion).forEach(([key, value]) => {\n    if (value.polygon) {\n      clipPaths[key] = value.id;\n    }\n  });\n  return clipPaths;\n}", "CodeBleu_score": 20.767276564029522}, {"code": "const getClipPaths = createSelector(Selectors.getSkinRegion, (skinRegion) =>{\n\tconst clipPaths = {};\n  for (const region in skinRegion) {\n    if (skinRegion[region].polygons) {\n      clipPaths[region] = skinRegion[region].id;\n    }\n  }\n  return clipPaths;\n}", "CodeBleu_score": 24.39843967432215}, {"code": "const getClipPaths = createSelector(Selectors.getSkinRegion, (skinRegion) =>{\n\tconst clipPaths = {};\n  if (skinRegion) {\n    Object.entries(skinRegion).forEach(([regionName, regionData]) => {\n      if (regionData.polygons) {\n        clipPaths[regionName] = regionData.id;\n      }\n    });\n  }\n  return clipPaths;\n}", "CodeBleu_score": 27.39494389595263}]}
{"instance_id": "6d30b280ffbe", "generation_result": [{"code": "function octaveBucketsForBufferLength(bufferLength: number): number[]{\n\tconst octaveBuckets: number[] = new Array(NUM_BARS).fill(0);\n  const frequencySteps = [];\n  let minHz = 20;\n  let maxHz = 20000;\n  for (let i = 0; i < NUM_BARS; i++) {\n    frequencySteps[i] = Math.pow(2, i + 1) * minHz;\n  }\n  const maxIndex = bufferLength - 1;\n  for (let i = 0; i < NUM_BARS; i++) {\n    octaveBuckets[i] = Math.floor((frequencySteps[i] / maxHz) * maxIndex);\n  }\n  return octaveBuckets;\n}", "CodeBleu_score": 41.75944788062465}, {"code": "function octaveBucketsForBufferLength(bufferLength: number): number[]{\n\tconst octaveBuckets: number[] = new Array(NUM_BARS).fill(0);\n  const minHz: number = 20;\n  const maxHz: number = 20000;\n  const frequencyStep: number = Math.pow(maxHz / minHz, 1 / NUM_BARS);\n  for (let i: number = 0; i < NUM_BARS; i++) {\n    const frequency: number = minHz * Math.pow(frequencyStep, i);\n    const index: number = Math.round(bufferLength * frequency / sampleRate);\n    octaveBuckets[i] = index;\n  }\n  return octaveBuckets;\n}", "CodeBleu_score": 44.1878979892207}, {"code": "function octaveBucketsForBufferLength(bufferLength: number): number[]{\n\t// Initialize the buckets with an array of 0s.\n  const buckets = new Array(NUM_BARS).fill(0);\n\n  // Calculate the frequency steps.\n  const frequencySteps = [];\n  for (let i = 0; i < NUM_BARS + 1; i++) {\n    const freq = Math.pow(2, i / NUM_BARS) * minHz;\n    frequencySteps.push(freq);\n  }\n\n  // Map the frequencies to indices in the buckets array.\n  for (let i = 0; i < bufferLength; i++) {\n    const freq = frequencyForIndex(i, bufferLength, sampleRate);\n    // Find the index of the closest frequency step to the current frequency.\n    const index = frequencySteps.reduce((prev, curr, i) => {\n      return Math.abs(curr - freq) < Math.abs(prev - freq) ? i : prev;\n    });\n    // Add the current frequency to the corresponding bucket.\n    buckets[index] += freq;\n  }\n\n  return buckets;\n}", "CodeBleu_score": 44.98802549362119}]}
{"instance_id": "e7c399fb0db4", "generation_result": [{"code": "function EqGraph(){\n\t// select the canvas element\n  const canvasEl = useRef(document.querySelector('canvas'));\n\n  // set the dimensions of the canvas\n  const [width, height] = [200, 200];\n\n  // create a canvas context\n  const canvasCtx = useMemo(() => canvasEl.current.getContext('2d'), []);\n\n  // create an image object\n  const img = useMemo(() => new Image(), []);\n\n  // set the image source\n  img.src = 'https://i.imgur.com/K8J1FJM.png';\n\n  // create a color pattern\n  const colorPattern = useMemo(() => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = 1;\n    canvas.height = 1;\n    ctx.fillStyle = '#000';\n    ctx.fillRect(0, 0, 1, 1);\n    return ctx.createPattern(canvas, 'repeat');\n  }, []);\n\n  // create a node\n  const node = useMemo(() => document.createElement('div'), []);\n\n  // set the node dimensions\n  node.style.width = '100%';\n  node.style.height = '100%';\n\n  // create a state variable for the canvas element\n  const [canvas, setCanvas] = useState(canvasEl.current);\n\n  // create a state variable for the canvas context\n  const [ctx, setCtx] = useState(canvasCtx);\n\n  // create a state variable for the image\n  const [imgSrc, setImgSrc] = useState(img.src);\n\n  // create a state variable for the color pattern\n  const [color, setColor] = useState(colorPattern);\n\n  // create a state variable for the node\n  const [nodeEl, setNodeEl] = useState(node);\n\n  // create a state variable for the canvas dimensions\n  const [canvasDimensions, setCanvasDimensions] = useState([width, height]);\n\n  // create a state variable for the slider values\n  const [sliderValues, setSl", "CodeBleu_score": 32.921655027855984}, {"code": "function EqGraph(){\n\t// get the canvas element and context\n  const canvasRef = useRef();\n  const canvasCtx = useRef();\n  // get the image and slider values\n  const img = useSelector(selectEqGraphImage);\n  const values = useSelector(selectEqGraphValues);\n  // set the canvas dimensions\n  const [width, height] = [200, 100];\n  // set the canvas context\n  useEffect(() => {\n    if (canvasRef.current) {\n      canvasCtx.current = canvasRef.current.getContext(\"2d\");\n    }\n  }, [canvasRef]);\n  // set the canvas dimensions\n  useLayoutEffect(() => {\n    if (canvasRef.current) {\n      canvasRef.current.width = width;\n      canvasRef.current.height = height;\n    }\n  }, [canvasRef, width, height]);\n  // draw the equalizer line\n  useLayoutEffect(() => {\n    if (canvasCtx.current) {\n      // clear the canvas\n      canvasCtx.current.clearRect(0, 0, width, height);\n      // draw the equalizer line\n      drawEqLine(canvasCtx.current, values, img, width, height);\n    }\n  }, [canvasCtx, values, img, width, height]);\n  // return the canvas element\n  return <canvas ref={canvasRef} />;\n}", "CodeBleu_score": 26.03489097407941}, {"code": "function EqGraph(){\n\tconst canvasRef = useRef(null);\n  const imgRef = useRef(null);\n  const [canvas, setCanvas] = useState(null);\n  const [ctx, setCtx] = useState(null);\n  const [node, setNode] = useState(null);\n  const [image, setImage] = useState(null);\n  const [colors, setColors] = useState([]);\n  const [colorIndex, setColorIndex] = useState(0);\n  const [colorPattern, setColorPattern] = useState([]);\n  const [colorPatternIndex, setColorPatternIndex] = useState(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const node = canvas.parentNode;\n    const image = imgRef.current;\n\n    setCanvas(canvas);\n    setCtx(ctx);\n    setNode(node);\n    setImage(image);\n  }, []);\n\n  useEffect(() => {\n    const colors = [\n      \"#000000\",\n      \"#0000FF\",\n      \"#00FF00\",\n      \"#00FFFF\",\n      \"#FF0000\",\n      \"#FF00FF\",\n      \"#FFFF00\",\n      \"#FFFFFF\",\n    ];\n\n    setColors(colors);\n  }, []);\n\n  useEffect(() => {\n    const colorPattern = [\n      \"#000000\",\n      \"#0000FF\",\n      \"#00FF00\",\n      \"#00FFFF\",\n      \"#FF0000\",\n      \"#FF00FF\",\n      \"#FFFF00\",\n      \"#FFFFFF\",\n    ];\n\n    setColorPattern(colorPattern);\n  }, []);\n\n  useLayoutEffect(() => {\n    if (canvas && ctx && node && image) {\n      const width = node.clientWidth;\n      const height = node.clientHeight;\n      const padding = 10;\n      const barWidth = 10;\n      const barHeight = 10;\n      const barSpacing = 10", "CodeBleu_score": 23.81408721959824}]}
{"instance_id": "b858f410c3f3", "generation_result": [{"code": "const ClutterBar = memo(() =>{\n\tconst doubled = useTypedSelector(state => state.doubled);\n  const dispatch = useDispatch();\n  const setFocus = useActionCreator(actions.setFocus);\n  const setDoubled = useActionCreator(actions.setDoubled);\n\n  const onMouseUp = (e) => {\n    dispatch(setFocus(e.target.id));\n    dispatch(setDoubled(false));\n  };\n\n  const onMouseDown = (e) => {\n    dispatch(setFocus(e.target.id));\n    dispatch(setDoubled(true));\n  };\n\n  return (\n    <div className=\"clutter-bar\">\n      <button\n        className={`clutter-bar__button ${doubled ? 'clutter-bar__button--doubled' : ''}`}\n        id=\"button-1\"\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n      >\n        <span className=\"clutter-bar__button-text\">Button 1</span>\n      </button>\n      <button\n        className={`clutter-bar__button ${doubled ? 'clutter-bar__button--doubled' : ''}`}\n        id=\"button-2\"\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n      >\n        <span className=\"clutter-bar__button-text\">Button 2</span>\n      </button>\n      <button\n        className={`clutter-bar__button ${doubled ? 'clutter-bar__button--doubled' : ''}`}\n        id=\"button-3\"\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n      >\n        <span className=\"clutter-bar__button-text\">Button 3</span>\n      </button>\n      <button\n        className={`clutter-bar__button ${doubled ? 'clutter-bar__button--doubled' : ''}`}\n        id=\"button-4\"\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n      >\n        <span className=\"clutter-bar__button-text\">Button 4</span>", "CodeBleu_score": 26.24715898806052}, {"code": "const ClutterBar = memo(() =>{\n\tconst [doubled, setDoubled] = useState(false);\n  const dispatch = useDispatch();\n  const isDoubled = useTypedSelector(state => state.clutter.doubled);\n\n  const handleMouseUp = (e: React.MouseEvent<HTMLButtonElement>) => {\n    dispatch(setDoubledMode(e.currentTarget.value === 'doubled'));\n  };\n\n  const handleMouseEnter = (e: React.MouseEvent<HTMLButtonElement>) => {\n    dispatch(setFocus(e.currentTarget.value));\n  };\n\n  return (\n    <div className=\"clutter-bar\">\n      <button\n        className={`clutter-button ${isDoubled ? 'doubled' : ''}`}\n        value=\"doubled\"\n        onMouseUp={handleMouseUp}\n        onMouseEnter={handleMouseEnter}\n      >\n        <div className=\"clutter-button-icon\">\n          <img src={doubled ? doubledIcon : doubledIcon} alt=\"doubled\" />\n        </div>\n        <div className=\"clutter-button-label\">\n          <span>Doubled</span>\n        </div>\n      </button>\n      <button\n        className={`clutter-button ${isDoubled ? '' : 'doubled'}`}\n        value=\"single\"\n        onMouseUp={handleMouseUp}\n        onMouseEnter={handleMouseEnter}\n      >\n        <div className=\"clutter-button-icon\">\n          <img src={singleIcon} alt=\"single\" />\n        </div>\n        <div className=\"clutter-button-label\">\n          <span>Single</span>\n        </div>\n      </button>\n      <button\n        className={`clutter-button ${isDoubled ? '' : 'doubled'}`}\n        value=\"uncluttered\"\n        onMouseUp={handleMouseUp}\n        onMouseEnter={handleMouseEnter}\n      >\n        <div className=\"clutter-button-icon\">\n          <img src={unclutteredIcon} alt=\"uncluttered\" />\n        </div>\n        <div className=\"clutter-button-label\">\n          <span>Unclutter", "CodeBleu_score": 26.13782107308651}, {"code": "const ClutterBar = memo(() =>{\n\tconst doubled = useTypedSelector(state => state.doubled);\n  const dispatch = useDispatch();\n\n  const handleMouseUp = useActionCreator(mouseUp);\n  const handleMouseDown = useActionCreator(mouseDown);\n  const handleMouseEnter = useActionCreator(mouseEnter);\n  const handleMouseLeave = useActionCreator(mouseLeave);\n\n  return (\n    <div className=\"clutter-bar\">\n      <button\n        className={`clutter-button ${doubled ? 'doubled' : ''}`}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <img src=\"./images/clutter-button-1.png\" alt=\"Clutter Button 1\" />\n      </button>\n      <button\n        className={`clutter-button ${doubled ? 'doubled' : ''}`}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <img src=\"./images/clutter-button-2.png\" alt=\"Clutter Button 2\" />\n      </button>\n      <button\n        className={`clutter-button ${doubled ? 'doubled' : ''}`}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <img src=\"./images/clutter-button-3.png\" alt=\"Clutter Button 3\" />\n      </button>\n      <button\n        className={`clutter-button ${doubled ? 'doubled' : ''}`}\n        onMouseUp={handleMouseUp}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <img src=\"./images/clutter-button-4.png\" alt=\"Clutter Button 4\" />\n      </button>", "CodeBleu_score": 26.108224110595213}]}
{"instance_id": "5946b13d68ba", "generation_result": [{"code": "const PlaylistToggleButton = memo(() =>{\n\tconst isOpen = useTypedSelector(Selectors.getWindowOpen);\n  const dispatch = useDispatch();\n  const togglePlaylist = useActionCreator(Actions.togglePlaylist);\n\n  return (\n    <button\n      id=\"playlistToggle\"\n      className={`${isOpen ? \"open\" : \"closed\"}`}\n      onClick={togglePlaylist}\n      title=\"Toggle playlist\"\n    />\n  );\n}", "CodeBleu_score": 34.28516472489985}, {"code": "const PlaylistToggleButton = memo(() =>{\n\tconst playlistOpen = useTypedSelector(Selectors.getWindowOpen)\n  const togglePlaylist = useActionCreator(Actions.togglePlaylist)\n\n  return (\n    <button\n      id=\"playlist-toggle-button\"\n      className={`playlist-toggle-button ${playlistOpen ? 'open' : ''}`}\n      onClick={togglePlaylist}\n      title=\"Toggle Playlist\"\n    >\n      <Icon icon=\"list\" />\n    </button>\n  )\n}", "CodeBleu_score": 31.018361185894506}, {"code": "const PlaylistToggleButton = memo(() =>{\n\tconst isPlaylistOpen = useTypedSelector(Selectors.getWindowOpen)('playlist')\n  const togglePlaylist = useActionCreator(Actions.toggleWindow)\n\n  return (\n    <button\n      id=\"playlist-toggle\"\n      className={isPlaylistOpen ? 'selected' : ''}\n      onClick={() => togglePlaylist('playlist')}\n      title=\"Playlist\"\n    >\n      <i className=\"fas fa-list\"></i>\n    </button>\n  )\n}", "CodeBleu_score": 31.878103918674412}]}
{"instance_id": "39ecf0db7a99", "generation_result": [{"code": "const Desktop = React.memo(({ children }: Props) =>{\n\tconst [desktop, setDesktop] = React.useState<HTMLElement | null>(null);\n\n  React.useEffect(() => {\n    const div = document.createElement('div');\n    div.className = 'webamp-desktop';\n    document.body.appendChild(div);\n    setDesktop(div);\n    return () => {\n      document.body.removeChild(div);\n    };\n  }, []);\n\n  return desktop ? ReactDOM.createPortal(children, desktop) : null;\n}", "CodeBleu_score": 42.42092568436789}, {"code": "const Desktop = React.memo(({ children }: Props) =>{\n\tconst [ref] = usePortal(children);\n  return <div className=\"webamp-desktop\" ref={ref} />;\n}", "CodeBleu_score": 10.411590069855327}, {"code": "const Desktop = React.memo(({ children }: Props) =>{\n\tconst ref = React.useRef(null);\n  React.useEffect(() => {\n    const div = document.createElement('div');\n    div.className = 'webamp-desktop';\n    document.body.appendChild(div);\n    ref.current = div;\n    return () => {\n      document.body.removeChild(div);\n    };\n  }, []);\n  return ReactDOM.createPortal(children, ref.current);\n}", "CodeBleu_score": 40.965583183847976}]}
{"instance_id": "41be320578a4", "generation_result": [{"code": "export default function PlaylistScrollBar(){\n\tconst dispatch = useDispatch();\n  const playlistHeight = useSelector(selectPlaylistHeight);\n  const playlistScrollPosition = useSelector(selectPlaylistScrollPosition);\n  const tracks = useSelector(selectTracks);\n  const {\n    playlist,\n    scrollbar,\n  } = useStyles();\n\n  const handleChange = useCallback(\n    (event, newValue) => {\n      dispatch(setPlaylistScrollPosition(newValue));\n    },\n    [dispatch],\n  );\n\n  const handleDragEnd = useCallback(\n    (event, newValue) => {\n      dispatch(setPlaylistScrollPosition(newValue));\n    },\n    [dispatch],\n  );\n\n  const scrollbarHeight = useMemo(() => {\n    const playlistTracks = tracks.filter(track => track.playlistId === playlistId);\n    const playlistTracksHeight = playlistTracks.reduce(\n      (acc, track) => acc + track.height,\n      0,\n    );\n    const scrollbarHeight = playlistHeight - playlistTracksHeight;\n    return scrollbarHeight;\n  }, [playlistHeight, tracks]);\n\n  const scrollbarVisible = useMemo(() => {\n    const playlistTracks = tracks.filter(track => track.playlistId === playlistId);\n    const playlistTracksHeight = playlistTracks.reduce(\n      (acc, track) => acc + track.height,\n      0,\n    );\n    const scrollbarVisible = playlistHeight < playlistTracksHeight;\n    return scrollbarVisible;\n  }, [playlistHeight, tracks]);\n\n  const scrollbarHeightPercent = useMemo(() => {\n    const playlistTracks = tracks.filter(track => track.playlistId === playlistId);\n    const playlistTracksHeight = playlistTracks.reduce(\n      (acc, track) => acc + track.height,\n      0,\n    );\n    const scrollbarHeightPercent = playlistHeight / playlistTracksHeight;\n    return scrollbarHeightPercent;\n  }, [playlistHeight, tracks]);\n\n  const scrollbarPosition = useMemo(() => {\n    const playlistTra", "CodeBleu_score": 22.59233370225669}, {"code": "export default function PlaylistScrollBar(){\n\tconst dispatch = useDispatch();\n  const playlistHeight = useSelector(getPlaylistHeight);\n  const playlistScrollPosition = useSelector(getPlaylistScrollPosition);\n  const playlistTrackCount = useSelector(getPlaylistTrackCount);\n  const playlistTrackHeight = useSelector(getPlaylistTrackHeight);\n  const playlistVisibleTrackCount = useSelector(getPlaylistVisibleTrackCount);\n  const isPlaylistScrollBarVisible = useSelector(getIsPlaylistScrollBarVisible);\n  const isPlaylistScrollBarDisabled = useSelector(getIsPlaylistScrollBarDisabled);\n  const isPlaylistScrollBarAtTop = useSelector(getIsPlaylistScrollBarAtTop);\n  const isPlaylistScrollBarAtBottom = useSelector(getIsPlaylistScrollBarAtBottom);\n\n  const handleScroll = useCallback(\n    (e) => {\n      const { value } = e.target;\n      dispatch(setPlaylistScrollPosition(value));\n    },\n    [dispatch]\n  );\n\n  const handleDrag = useCallback(\n    (e) => {\n      const { value } = e.target;\n      dispatch(setPlaylistScrollPosition(value));\n    },\n    [dispatch]\n  );\n\n  const handleClick = useCallback(\n    (e) => {\n      const { value } = e.target;\n      dispatch(setPlaylistScrollPosition(value));\n    },\n    [dispatch]\n  );\n\n  const handleMouseDown = useCallback(\n    (e) => {\n      const { value } = e.target;\n      dispatch(setPlaylistScrollPosition(value));\n    },\n    [dispatch]\n  );\n\n  const handleMouseUp = useCallback(\n    (e) => {\n      const { value } = e.target;\n      dispatch(setPlaylistScrollPosition(value));\n    },\n    [dispatch]\n  );\n\n  const handleTouchStart = useCallback(\n    (e) => {\n      const { value } = e.target;\n      dispatch(setPlaylistScrollPosition(value));\n    },\n    [dispatch]\n  );\n\n  const handleTouchEnd = useCallback(\n    (e) => {\n      const", "CodeBleu_score": 24.63789254753427}, {"code": "export default function PlaylistScrollBar(){\n\tconst {\n    playlistHeight,\n    playlistScrollPosition,\n    playlistVisibleTracks,\n    playlistVisibleTracksCount,\n  } = useSelector(selectors.getPlaylistScrollInfo);\n\n  const dispatch = useDispatch();\n\n  const handleChange = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleDragEnd = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleDragStart = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleDrag = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleScroll = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleKeyDown = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleMouseDown = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleMouseUp = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleWheel = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]\n  );\n\n  const handleTouchEnd = useCallback(\n    (_, newValue) => {\n      dispatch(actions.setPlaylistScrollPosition(newValue));\n    },\n    [dispatch]", "CodeBleu_score": 28.762950890288362}]}
{"instance_id": "fccf51432007", "generation_result": [{"code": "export function genMediaDuration(url: string): Promise<number>{\n\treturn new Promise((resolve, reject) => {\n    const audio = document.createElement('audio')\n    audio.crossOrigin = 'anonymous'\n    audio.addEventListener('durationchange', () => {\n      resolve(audio.duration)\n    })\n    audio.addEventListener('error', (err) => {\n      reject(err)\n    })\n    audio.src = url\n  })\n}", "CodeBleu_score": 36.16466756512169}, {"code": "export function genMediaDuration(url: string): Promise<number>{\n\treturn new Promise((resolve, reject) => {\n    const audio = new Audio();\n    audio.crossOrigin = 'anonymous';\n    audio.addEventListener('durationchange', () => {\n      resolve(audio.duration);\n    });\n    audio.addEventListener('error', reject);\n    audio.src = url;\n  });\n}", "CodeBleu_score": 31.516499978177936}, {"code": "export function genMediaDuration(url: string): Promise<number>{\n\treturn new Promise((resolve, reject) => {\n    const audio = document.createElement('audio');\n    audio.crossOrigin = 'anonymous';\n    audio.addEventListener('durationchange', () => {\n      resolve(audio.duration);\n    });\n    audio.addEventListener('error', () => {\n      reject(new Error(`Error loading ${url}`));\n    });\n    audio.src = url;\n  });\n}", "CodeBleu_score": 36.79198573896143}]}
{"instance_id": "8055da9c9425", "generation_result": [{"code": "export async function genArrayBufferFromFileReference(\n  fileReference: File\n): Promise<any>{\n\tif (!fileReference) {\n    throw new Error(\"No file reference provided.\");\n  }\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      resolve(e.target.result);\n    };\n    reader.onerror = (e) => {\n      reject(e);\n    };\n    reader.readAsArrayBuffer(fileReference);\n  });\n}", "CodeBleu_score": 56.00451977290363}, {"code": "export async function genArrayBufferFromFileReference(\n  fileReference: File\n): Promise<any>{\n\tif (!fileReference) {\n    throw new Error('No file reference provided');\n  }\n\n  const fileReader = new FileReader();\n  fileReader.onerror = () => {\n    throw new Error('Error reading file');\n  };\n  fileReader.onload = () => {\n    return fileReader.result;\n  };\n  fileReader.readAsArrayBuffer(fileReference);\n\n  return new Promise((resolve, reject) => {\n    fileReader.onloadend = () => {\n      if (fileReader.error) {\n        reject(fileReader.error);\n      } else {\n        resolve(fileReader.result);\n      }\n    };\n  });\n}", "CodeBleu_score": 49.03598390081755}, {"code": "export async function genArrayBufferFromFileReference(\n  fileReference: File\n): Promise<any>{\n\tif (!fileReference) {\n    return Promise.reject(new Error(\"No file reference provided\"));\n  }\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n    reader.readAsArrayBuffer(fileReference);\n  });\n}", "CodeBleu_score": 57.3089296770516}]}
{"instance_id": "b3dc12d7d309", "generation_result": [{"code": "export function usePromiseValueOrNull<T>(propValue: Promise<T>): T | null{\n\tconst [value, setValue] = useState<T | null>(null);\n  const [disposed, setDisposed] = useState(false);\n\n  useEffect(() => {\n    if (disposed) {\n      return;\n    }\n\n    propValue.then(\n      (resolvedValue) => {\n        if (!disposed) {\n          setValue(resolvedValue);\n        }\n      },\n      (error) => {\n        if (!disposed) {\n          setValue(null);\n        }\n        console.error(error);\n      }\n    );\n\n    return () => {\n      setDisposed(true);\n    };\n  }, [propValue, disposed]);\n\n  return value;\n}", "CodeBleu_score": 60.94430566405293}, {"code": "export function usePromiseValueOrNull<T>(propValue: Promise<T>): T | null{\n\tconst [value, setValue] = useState<T | null>(null);\n  const [disposed, setDisposed] = useState(false);\n\n  useEffect(() => {\n    if (disposed) return;\n\n    propValue.then((resolvedValue) => {\n      if (disposed) return;\n      setValue(resolvedValue);\n    });\n\n    return () => {\n      setDisposed(true);\n    };\n  }, [propValue, disposed]);\n\n  return value;\n}", "CodeBleu_score": 65.02712117565778}, {"code": "export function usePromiseValueOrNull<T>(propValue: Promise<T>): T | null{\n\tconst [value, setValue] = useState<T | null>(null);\n  const [disposed, setDisposed] = useState(false);\n\n  useEffect(() => {\n    if (disposed) {\n      return;\n    }\n\n    propValue.then(newValue => {\n      if (disposed) {\n        return;\n      }\n\n      setValue(newValue);\n    });\n\n    return () => {\n      setDisposed(true);\n    };\n  }, [propValue, disposed]);\n\n  return value;\n}", "CodeBleu_score": 65.35650345900422}]}
{"instance_id": "7fc14a50df16", "generation_result": [{"code": "export default function regionParser(regionStr: string): RegionData{\n\tconst regionData: RegionData = {};\n  const regionSections = regionStr.split(/\n\\[/);\n\n  for (let i = 1; i < regionSections.length; i++) {\n    const section = regionSections[i];\n    const sectionName = section.split(/\\]\\s*/)[0];\n    const sectionPoints = section.split(/\\]\\s*/)[1].split(/\n/);\n    const points: Point[] = [];\n\n    for (let j = 0; j < sectionPoints.length; j++) {\n      const point = sectionPoints[j].split(/,/);\n      const x = parseFloat(point[0]);\n      const y = parseFloat(point[1]);\n\n      if (isNaN(x) || isNaN(y)) {\n        continue;\n      }\n\n      points.push({\n        x,\n        y,\n      });\n    }\n\n    if (points.length >= 3) {\n      regionData[sectionName] = points;\n    }\n  }\n\n  return regionData;\n}", "CodeBleu_score": 19.742548731525513}, {"code": "export default function regionParser(regionStr: string): RegionData{\n\tconst regionData = new RegionData();\n  const sections = regionStr.split(\"\n\n\");\n  for (const section of sections) {\n    const lines = section.split(\"\n\");\n    const sectionName = lines[0].replace(\"[\", \"\").replace(\"]\", \"\");\n    const points = [];\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i];\n      const point = line.split(\",\");\n      if (point.length === 2) {\n        points.push(new Point(parseFloat(point[0]), parseFloat(point[1])));\n      }\n    }\n    if (points.length > 2) {\n      const polygon = new Polygon(points);\n      if (polygon.isValid()) {\n        regionData.addPolygon(sectionName, polygon);\n      }\n    }\n  }\n  return regionData;\n}", "CodeBleu_score": 24.06866443207495}, {"code": "export default function regionParser(regionStr: string): RegionData{\n\t// Split the string into sections\n  const sections = regionStr.split(/[\\r\n]+(?=\\[)/);\n\n  // Parse each section\n  const parsedSections: RegionData = {};\n  sections.forEach((section) => {\n    const [name, ...points] = section.split('\n');\n    if (name && points.length > 0) {\n      // Parse the points\n      const parsedPoints = points.map((point) => {\n        const [x, y] = point.split(',').map((coord) => parseInt(coord, 10));\n        return { x, y };\n      });\n\n      // Filter out invalid polygons\n      const validPolygons = parsedPoints.filter((polygon) => {\n        const { x, y } = polygon[0];\n        const { x: x2, y: y2 } = polygon[polygon.length - 1];\n        return x === x2 && y === y2;\n      });\n\n      // Store the valid polygons\n      if (validPolygons.length > 0) {\n        parsedSections[name] = validPolygons;\n      }\n    }\n  });\n\n  return parsedSections;\n}", "CodeBleu_score": 31.6978367799856}]}
{"instance_id": "6e97ec2706cf", "generation_result": [{"code": "export const getCurrentlyPlayingTrackIdIfLoaded = createSelector({\n\tgetCurrentlyPlayingTrack,\n  getMedia,\n  getMediaTags,\n  getMediaTagsInitialized,\n}", "CodeBleu_score": 1.4785588977163442}, {"code": "export const getCurrentlyPlayingTrackIdIfLoaded = createSelector({\n\tgetMediaPlaying,\n  getCurrentTrack,\n  getMediaTags,\n}", "CodeBleu_score": 0.5324225740644282}, {"code": "export const getCurrentlyPlayingTrackIdIfLoaded = createSelector({\n\tgetIsMediaPlaying,\n  getCurrentTrackId,\n  getCurrentTrackMediaTags,\n}", "CodeBleu_score": 1.0655516225077155}]}
{"instance_id": "5dbbdd07f829", "generation_result": [{"code": " async renderWhenReady(node: HTMLElement): Promise<void>{\n\tif (this._disposed) {\n      throw new Error('Cannot render a disposed instance.');\n    }\n\n    if (this._rendered) {\n      throw new Error('Cannot render an already rendered instance.');\n    }\n\n    if (!node) {\n      throw new Error('Cannot render without a valid HTML element.');\n    }\n\n    await this._dispatch(centerWindows());\n\n    if (this._disposed) {\n      throw new Error('Cannot render a disposed instance.');\n    }\n\n    await this._skinLoaded;\n\n    if (this._disposed) {\n      throw new Error('Cannot render a disposed instance.');\n    }\n\n    this._root = createRoot(node);\n    this._root.render(\n      <Provider store={this._store}>\n        <Application\n          mediaClientConfig={this._mediaClientConfig}\n          config={this._config}\n          cardClientConfig={this._cardClientConfig}\n          contextIdentifierProvider={this._contextIdentifierProvider}\n          dispatchAnalyticsEvent={this._dispatchAnalyticsEvent}\n          pickerFacadeInstance={this._pickerFacadeInstance}\n          pickerFacadeProvider={this._pickerFacadeProvider}\n          pickerFacadeOptions={this._pickerFacadeOptions}\n          onComplete={this._onComplete}\n          onError={this._onError}\n          onCancel={this._onCancel}\n          onChange={this._onChange}\n          onUploadsStart={this._onUploadsStart}\n          onUploadPreviewUpdate={this._onUploadPreviewUpdate}\n          onUploadEnd={this._onUploadEnd}\n          onUploadError={this._onUploadError}\n          onDragEnter={this._onDragEnter}\n          onDragLeave={this._onDragLeave}\n          onDrop={this._onDrop}\n          onBrowse={this._onBrowse}\n          onBrowseError={this._onBrowseError}\n          onBeforeUpload={this._onBeforeUpload}\n          onBeforeUploadPreviewUpdate={this._onBeforeUploadPreviewUpdate}\n          onBeforeUploadEnd={this._onBeforeUploadEnd}\n          onBeforeUploadError={this", "CodeBleu_score": 42.667090192269306}, {"code": " async renderWhenReady(node: HTMLElement): Promise<void>{\n\tconst {\n    dispatch,\n    instanceId,\n    mediaClient,\n    fileId,\n    collectionName,\n    onComplete,\n    onError,\n    onExternalImageLoaded,\n    onPreviewUpdate,\n    onPreviewFailed,\n    onPreviewUploading,\n    onPreviewEnd,\n    onPreviewClick,\n    onPreviewScroll,\n    onPreviewResize,\n    onPreviewDrop,\n    onPreviewDragEnter,\n    onPreviewDragLeave,\n    onPreviewDragOver,\n    onPreviewReflow,\n    onPreviewAnalyticsEvent,\n    onPreviewEdit,\n    onPreviewLoad,\n    onPreviewError,\n    onPreviewBlur,\n    onPreviewFocus,\n    onPreviewMouseDown,\n    onPreviewMouseUp,\n    onPreviewMouseMove,\n    onPreviewTouchStart,\n    onPreviewTouchEnd,\n    onPreviewTouchMove,\n    onPreviewKeyDown,\n    onPreviewSelection,\n    onPreviewScaleChange,\n    onPreviewStageChange,\n    onPreviewStageUnmount,\n    onPreviewStageMount,\n    onPreviewStageRef,\n    onPreviewStageResolutionChange,\n    onPreviewStageDimensionsChange,\n    onPreviewStageReady,\n    onPreviewStageCanvasRef,\n    onPreviewStageCanvasResize,\n    onPreviewStageCanvasZoomChange,\n    onPreviewStageCanvasDrag,\n    onPreviewStageCanvasDrop,\n    onPreviewStageCanvasClick,\n    onPreviewStageCanvasDoubleClick,\n    onPreviewStageCanvasMouseLeave,\n    onPreviewStageCanvasMouseMove,\n    onPreviewStageCanvasMouseDown,\n    onPreviewStageCanvasMouseUp,\n    onPreviewStageCanvasTouchStart,\n    onPreviewStageCanvasTouchEnd,\n    onPreviewStageCanvasTouchMove,\n    onPreviewStageCanvasKeyDown,\n    onPreviewStageCanvasKeyUp,\n    onPreviewStageCanvasWheel,\n    onPreviewStageCanvasContextMenu,\n    onPreviewStageCanvasPointerDown,\n    onPreviewStageCanvasPointerMove,", "CodeBleu_score": 29.330949735714434}, {"code": " async renderWhenReady(node: HTMLElement): Promise<void>{\n\tif (this._disposed) {\n    return;\n  }\n\n  if (this._root) {\n    throw new Error('The instance has already been rendered.');\n  }\n\n  this._root = createRoot(node);\n\n  // Wait for the skin to load\n  await this._skin.load();\n\n  this._root.render(\n    <Provider store={this._store}>\n      <SkinContext.Provider value={this._skin}>\n        <FilePickerProvider options={this._filePickerOptions}>\n          <FileInputProvider>\n            <MediaProvider options={this._mediaOptions}>\n              <CenterWindows>\n                <App />\n              </CenterWindows>\n            </MediaProvider>\n          </FileInputProvider>\n        </FilePickerProvider>\n      </SkinContext.Provider>\n    </Provider>,\n  );\n\n  this._root.dispatchEvent(new Event('render'));\n}", "CodeBleu_score": 52.8044356548509}]}
{"instance_id": "2598a3bbc50d", "generation_result": [{"code": "handleContextMenu(e: any){\n\tlet sel = window.getSelection();\n    let isBlank = sel?.toString() === \"\";\n    let activeElem = document.activeElement;\n    if (activeElem.getAttribute(\"type\") === \"text\" && activeElem.classList.contains(\"input-field\")) {\n        this.isNonTerminalInput = true;\n    } else {\n        this.isNonTerminalInput = false;\n    }\n    if (isBlank || this.isNonTerminalInput) {\n        this.GlobalModel.contextEditMenu(e, this.isNonTerminalInput);\n    }\n}", "CodeBleu_score": 35.9270260472995}, {"code": "handleContextMenu(e: any){\n\tconst sel = window.getSelection();\n  if (sel?.toString() && !this.isBlank(this.activeElem.getAttribute('data-type'))) {\n    this.activeElem.classList.add('selected');\n    this.GlobalModel.contextEditMenu(e, {\n      cut: true,\n      copy: true,\n      paste: true,\n    });\n  } else {\n    this.GlobalModel.contextEditMenu(e, {\n      cut: false,\n      copy: false,\n      paste: false,\n    });\n  }\n}", "CodeBleu_score": 24.727172279097122}, {"code": "handleContextMenu(e: any){\n\tlet sel = window.getSelection();\n  if (sel?.toString() && !this.isBlank(this.activeElem.getAttribute('data-input-type'))) {\n    this.contextEditMenu(e, {\n      cut: true,\n      copy: true,\n      paste: true,\n      delete: true,\n      selectAll: true\n    });\n  } else {\n    this.contextEditMenu(e, {\n      cut: false,\n      copy: false,\n      paste: false,\n      delete: false,\n      selectAll: false\n    });\n  }\n}", "CodeBleu_score": 24.362740063358387}]}
{"instance_id": "9a7475588195", "generation_result": [{"code": "handleChangeFontSize(fontSize: string): void{\n\t// Convert the font size to a number\n    const newFontSize = Number(fontSize);\n    // If the font size is different from the current font size\n    if (newFontSize !== GlobalModel.getTermFontSize()) {\n        // Set the new font size\n        GlobalCommandRunner.setTermFontSize(newFontSize);\n        // Handle the command's return value\n        commandRtnHandler(GlobalCommandRunner.getCommandRtn());\n    }\n}", "CodeBleu_score": 44.82171953810695}, {"code": "handleChangeFontSize(fontSize: string): void{\n\tconst newFontSize = Number(fontSize);\n    if (newFontSize !== GlobalModel.getTermFontSize()) {\n        GlobalCommandRunner.setTermFontSize(newFontSize);\n        commandRtnHandler(\n            GlobalCommandRunner.setTermFontSize(newFontSize),\n            \"Font size set to \" + newFontSize\n        );\n    }\n}", "CodeBleu_score": 47.4497452979815}, {"code": "handleChangeFontSize(fontSize: string): void{\n\tconst newFontSize = Number(fontSize);\n    if (newFontSize !== GlobalModel.getTermFontSize()) {\n        GlobalCommandRunner.setTermFontSize(newFontSize);\n        commandRtnHandler(\n            GlobalCommandRunner.setTermFontSize(newFontSize),\n            \"Error: Could not change font size.\",\n            () => {\n                GlobalModel.setTermFontSize(newFontSize);\n            }\n        );\n    }\n}", "CodeBleu_score": 45.85932436283163}]}
{"instance_id": "d4d74a9c8035", "generation_result": [{"code": "handleChangeTermTheme(theme: string): void{\n\t// Get the current theme\n    const currentTheme = GlobalModel.getTermThemeSettings();\n\n    // If the current theme is the same as the new theme, return without making changes\n    if (currentTheme.theme === theme) {\n        return;\n    }\n\n    // Set the new theme\n    GlobalModel.setTermThemeSettings(theme);\n\n    // Handle the command return value\n    const rtn = GlobalCommandRunner.setRootTermTheme(theme);\n    this.commandRtnHandler(rtn);\n}", "CodeBleu_score": 47.183457525238346}, {"code": "handleChangeTermTheme(theme: string): void{\n\tconst currentTheme = GlobalModel.getTermThemeSettings().theme;\n\tif (currentTheme === theme) {\n\t\treturn;\n\t}\n\tGlobalCommandRunner.setRootTermTheme(theme);\n\tconst commandRtn = GlobalModel.getTermThemeSettings().commandRtn;\n\tthis.commandRtnHandler(commandRtn);\n}", "CodeBleu_score": 44.055850079525975}, {"code": "handleChangeTermTheme(theme: string): void{\n\tconst currentTheme = GlobalModel.getTermThemeSettings().theme;\n    if (currentTheme === theme) {\n        return;\n    }\n    GlobalCommandRunner.setRootTermTheme(theme);\n    const commandRtn = GlobalModel.getCommandRtn();\n    this.commandRtnHandler(commandRtn);\n}", "CodeBleu_score": 49.55715994165055}]}
{"instance_id": "329444949255", "generation_result": [{"code": "const ModalHeader: React.FC<ModalHeaderProps> = ({ onClose, keybindings, title }) => {\n\tconst { t } = useTranslation();\n\n    const closeModal = () => {\n        if (onClose) {\n            onClose();\n        }\n    };\n\n    return (\n        <div className=\"modal-header\">\n            <div className=\"modal-title\">\n                {title}\n            </div>\n            {onClose &&\n                <button className=\"modal-close\" onClick={closeModal}>\n                    <i className=\"fas fa-times\" />\n                </button>\n            }\n            {keybindings &&\n                <ModalKeybindings keybindings={keybindings} />\n            }\n        </div>\n    );\n}", "CodeBleu_score": 41.56618443371604}, {"code": "const ModalHeader: React.FC<ModalHeaderProps> = ({ onClose, keybindings, title }) => {\n\tconst { t } = useTranslation();\n\n    return (\n        <div className=\"modal-header\">\n            <div className=\"modal-title\">{title}</div>\n            {onClose &&\n                <button type=\"button\" className=\"close\" aria-label={t('close')} onClick={onClose}>\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            }\n            {keybindings && <ModalKeybindings keybindings={keybindings} />}\n        </div>\n    );\n}", "CodeBleu_score": 44.05744468785411}, {"code": "const ModalHeader: React.FC<ModalHeaderProps> = ({ onClose, keybindings, title }) => {\n\tconst closeModal = () => {\n        if (onClose) {\n            onClose();\n        }\n    }\n\n    return (\n        <div className=\"modal-header\">\n            <div className=\"modal-title\">\n                {title}\n            </div>\n            {\n                onClose &&\n                <button className=\"modal-close-button\" onClick={closeModal}>\n                    <i className=\"fas fa-times\"></i>\n                </button>\n            }\n            {\n                keybindings &&\n                <ModalKeybindings keybindings={keybindings} />\n            }\n        </div>\n    )\n}", "CodeBleu_score": 42.224794286435355}]}
{"instance_id": "1da69d707d33", "generation_result": [{"code": "function formatRemoteName(rnames: Record<string, string>, rptr: RemotePtrType): string{\n\tif (!rptr || isBlank(rptr.remoteid)) {\n    return '';\n  }\n  const rname = rnames[rptr.remoteid] || rptr.remoteid.substring(0, 8);\n  if (isBlank(rptr.name)) {\n    return `[${rname}]`;\n  }\n  return `[${rname}:${rptr.name}]`;\n}", "CodeBleu_score": 44.569692769848565}, {"code": "function formatRemoteName(rnames: Record<string, string>, rptr: RemotePtrType): string{\n\tif (rptr === null || rptr.remoteid === null || isBlank(rptr.remoteid)) {\n        return \"\";\n    }\n\n    let rname = rnames[rptr.remoteid] || rptr.remoteid.substring(0, 8);\n    if (rptr.name !== null && !isBlank(rptr.name)) {\n        rname += \":\" + rptr.name;\n    }\n\n    return \"[\" + rname + \"]\";\n}", "CodeBleu_score": 65.67034171628953}, {"code": "function formatRemoteName(rnames: Record<string, string>, rptr: RemotePtrType): string{\n\tif (isBlank(rptr.remoteid)) {\n        return \"\";\n    }\n    let name = rnames[rptr.remoteid] || rptr.remoteid.substring(0, 8);\n    if (!isBlank(rptr.name)) {\n        name += \":\" + rptr.name;\n    }\n    return \"[\" + name + \"]\";\n}", "CodeBleu_score": 56.471581861367156}]}
{"instance_id": "757ee5b9626f", "generation_result": [{"code": "adjustTextAreaHeight(){\n\tconst textarea = this.textarea;\n  const lineHeight = parseInt(getComputedStyle(textarea).lineHeight, 10);\n  const fontSize = parseInt(getComputedStyle(textarea).fontSize, 10);\n  const minHeight = lineHeight;\n  const maxHeight = this.maxLines * lineHeight;\n  const height = Math.min(Math.max(textarea.scrollHeight, minHeight), maxHeight);\n  textarea.style.height = `${height}px`;\n}", "CodeBleu_score": 32.000925783628496}, {"code": "adjustTextAreaHeight(){\n\tconst textarea = this.textarea;\n    const fontSize = parseInt(window.getComputedStyle(textarea).fontSize, 10);\n    const lineHeight = fontSize * 1.4;\n    const maxLines = 10;\n    const minHeight = lineHeight;\n    const maxHeight = lineHeight * maxLines;\n    textarea.style.height = `${minHeight}px`;\n    const scrollHeight = textarea.scrollHeight;\n    const newHeight = Math.min(Math.max(scrollHeight, minHeight), maxHeight);\n    textarea.style.height = `${newHeight}px`;\n}", "CodeBleu_score": 41.65572909333521}, {"code": "adjustTextAreaHeight(){\n\tconst textarea = this.textarea;\n    const fontSize = parseFloat(window.getComputedStyle(textarea).fontSize);\n    const lineHeight = Math.ceil(fontSize * 1.5);\n    const minLines = this.minLines || 1;\n    const maxLines = this.maxLines || 5;\n    const maxHeight = Math.max(lineHeight, fontSize) * maxLines;\n    const minHeight = Math.max(lineHeight, fontSize) * minLines;\n\n    // Reset height\n    textarea.style.height = '1px';\n    // Calculate new height\n    const height = Math.min(Math.max(textarea.scrollHeight, minHeight), maxHeight);\n    // Set new height\n    textarea.style.height = `${height}px`;\n}", "CodeBleu_score": 36.99040396463305}]}
{"instance_id": "c0fa6e5d0067", "generation_result": [{"code": "onEnterKeyPressed(){\n\tconst selectedIdx = GlobalModel.sidebarchatModel.getSelectedCodeBlockIndex();\n    if (selectedIdx >= 0) {\n        this.onSetCmdInputValue();\n        return true;\n    }\n    const messageStr = this.value.get();\n    this.submitChatMessage(messageStr);\n    this.value.set(\"\");\n    GlobalModel.sidebarchatModel.resetCmdAndOutput();\n    return true;\n}", "CodeBleu_score": 87.29580194986725}, {"code": "onEnterKeyPressed(){\n\tif (GlobalModel.sidebarchatModel.isCodeBlockSelected()) {\n        this.onSetCmdInputValue();\n    } else {\n        const messageStr = this.value.get();\n        if (messageStr) {\n            this.submitChatMessage(messageStr);\n            this.value.set(\"\");\n        }\n    }\n    return true;\n}", "CodeBleu_score": 54.302856863134394}, {"code": "onEnterKeyPressed(){\n\tif (GlobalModel.sidebarchatModel.isCodeBlockSelected()) {\n        this.onSetCmdInputValue();\n        return true;\n    }\n    const messageStr = this.value.get();\n    this.submitChatMessage(messageStr);\n    this.value.set(\"\");\n    GlobalModel.sidebarchatModel.resetCmdAndOutput();\n    return true;\n}", "CodeBleu_score": 68.41797128336317}]}
{"instance_id": "a022487e54ff", "generation_result": [{"code": "function readAuthKey(): string{\n\tconst homeDir = os.homedir()\n  const authKeyFile = path.join(homeDir, '.auth_key')\n  if (!fs.existsSync(authKeyFile)) {\n    const key = uuid.v4()\n    fs.writeFileSync(authKeyFile, key, { mode: 0o600 })\n    return key\n  }\n  const key = fs.readFileSync(authKeyFile, 'utf8')\n  if (!uuid.validate(key)) {\n    throw new Error(`Invalid auth key in ${authKeyFile}`)\n  }\n  return key\n}", "CodeBleu_score": 23.872382267981397}, {"code": "function readAuthKey(): string{\n\tconst homeDir = os.homedir();\n  const authKeyPath = path.join(homeDir, '.auth_key');\n\n  if (!fs.existsSync(authKeyPath)) {\n    const newAuthKey = uuidv4();\n    fs.writeFileSync(authKeyPath, newAuthKey, { mode: 0o600 });\n    return newAuthKey;\n  }\n\n  const authKey = fs.readFileSync(authKeyPath, 'utf8');\n  if (!uuidValidate(authKey)) {\n    throw new Error('Invalid auth key');\n  }\n  return authKey;\n}", "CodeBleu_score": 27.038719415687538}, {"code": "function readAuthKey(): string{\n\tconst homeDir = app.getPath('home');\n  const authKeyPath = path.join(homeDir, '.config', 'electron-auth-key.txt');\n\n  if (!fs.existsSync(authKeyPath)) {\n    const authKey = uuidv4();\n    fs.writeFileSync(authKeyPath, authKey, { mode: 0o600 });\n    return authKey;\n  }\n\n  const authKey = fs.readFileSync(authKeyPath, 'utf8');\n  if (!authKey.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/)) {\n    throw new Error('Invalid auth key');\n  }\n  return authKey;\n}", "CodeBleu_score": 29.361937597051824}]}
{"instance_id": "9c3e2f93e1c1", "generation_result": [{"code": "handleDataFromRenderer(data: string, renderer: RendererModel): void{\n\t// If the system is not running, return immediately.\n    if (!this.isRunning) {\n        return;\n    }\n\n    // Iterate through the data in increments of a defined chunk size, slicing the data into chunks, and processing each chunk using another function.\n    for (let i = 0; i < data.length; i += this.inputChunkSize) {\n        this.handleInputChunk(data.slice(i, i + this.inputChunkSize), renderer);\n    }\n}", "CodeBleu_score": 47.15475872266267}, {"code": "handleDataFromRenderer(data: string, renderer: RendererModel): void{\n\t// If the system is not running, return immediately.\n  if (!this.isRunning) {\n    return;\n  }\n\n  // Iterate through the data in increments of a defined chunk size, slicing the data into chunks, and process each chunk using another function.\n  for (let i = 0; i < data.length; i += this.chunkSize) {\n    this.handleInputChunk(data.slice(i, i + this.chunkSize), renderer);\n  }\n}", "CodeBleu_score": 43.804302841466715}, {"code": "handleDataFromRenderer(data: string, renderer: RendererModel): void{\n\tif (!this.isRunning) {\n    return;\n  }\n  const chunkSize = 100000;\n  for (let i = 0; i < data.length; i += chunkSize) {\n    const chunk = data.slice(i, i + chunkSize);\n    this.handleInputChunk(chunk, renderer);\n  }\n}", "CodeBleu_score": 50.64957105047216}]}
{"instance_id": "37ad09d7b939", "generation_result": [{"code": "function checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}", "CodeBleu_score": 83.15466866578535}, {"code": "function checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}", "CodeBleu_score": 83.15466866578535}, {"code": "function checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // No internet connection found. App is running in offline mode.\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}", "CodeBleu_score": 79.548786318744}]}
{"instance_id": "27dabe0c40aa", "generation_result": [{"code": "function areAllRequiredElementsHighlighted{\n\t/**\n * This function, areAllRequiredElementsHighlighted, determines the state of highlighted elements.", "CodeBleu_score": 5.891879828553289}, {"code": "function areAllRequiredElementsHighlighted{\n\t/**\n * This function, areAllRequiredElementsHighlighted, determines the state of highlighted elements.", "CodeBleu_score": 5.891879828553289}, {"code": "function areAllRequiredElementsHighlighted{\n\t/**\n * This function, areAllRequiredElementsHighlighted, determines the state of highlighted elements.", "CodeBleu_score": 5.891879828553289}]}
{"instance_id": "c60e532809af", "generation_result": [{"code": "const createHandlers = (actionsFn: (...arg: any[]) => object, ...handles: any[]) => {\n\tconst actions = actionsFn(...handles);\n  const entries = Object.entries(actions);\n  const handlers = entries.map(([key, value]) => {\n    const [eventName, selector] = parseKey(key);\n    const handler = createHandler(eventName, selector, value);\n    return { eventName, handler };\n  });\n  return handlers;\n}", "CodeBleu_score": 39.02027296805306}, {"code": "const createHandlers = (actionsFn: (...arg: any[]) => object, ...handles: any[]) => {\n\tconst actions = actionsFn(...handles);\n  return Object.entries(actions).map(([key, value]) => {\n    const [event, selector] = key.split(':');\n    const handler = (e: Event) => {\n      if (selector && !hasMatchInAncestry(e, selector)) return;\n      value(e);\n    };\n    return {\n      event,\n      handler,\n    };\n  });\n}", "CodeBleu_score": 47.0568645888059}, {"code": "const createHandlers = (actionsFn: (...arg: any[]) => object, ...handles: any[]) => {\n\tconst actions = actionsFn(...handles);\n  return Object.entries(actions).map(([action, handler]) => {\n    const [eventName, selector] = parseAction(action);\n    const handlerFn = typeof handler === 'function' ? handler : handler.action;\n    const eventHandler = (e: any) => {\n      const target = e.target;\n      if (!selector || hasMatchInAncestry(target, selector)) {\n        handlerFn(e);\n      }\n    };\n    return { eventName, eventHandler };\n  });\n}", "CodeBleu_score": 47.59565139422778}]}
{"instance_id": "8c81ca953249", "generation_result": [{"code": "const applyEventHandlers = (actionsFn: any, ...handles: any[]) =>{\n\tconst root = document.getElementById('storybook-root');\n  if (!root) {\n    return;\n  }\n\n  const actions = actionsFn();\n\n  const handle = (e: any) => {\n    const { type } = e;\n    const handler = actions[type];\n    if (!handler) {\n      return;\n    }\n\n    const { target } = e;\n    const { dataset } = target;\n    const { key } = dataset;\n    if (!key) {\n      return;\n    }\n\n    handler(key);\n  };\n\n  const handleKeys = handles.map((handle: any) => handle.key);\n\n  const handleKeysSet = new Set(handleKeys);\n\n  const handleKeysSetSize = handleKeysSet.size;\n\n  const handleKeysSetHasKey = (key: any) => handleKeysSet.has(key);\n\n  const handleKeysSetAdd = (key: any) => handleKeysSet.add(key);\n\n  const handleKeysSetDelete = (key: any) => handleKeysSet.delete(key);\n\n  const handleKeysSetClear = () => handleKeysSet.clear();\n\n  const handleKeysSetValues = () => handleKeysSet.values();\n\n  const handleKeysSetEntries = () => handleKeysSet.entries();\n\n  const handleKeysSetForEach = (callbackfn: any, thisArg?: any) => handleKeysSet.forEach(callbackfn, thisArg);\n\n  const handleKeysSetValuesArray = () => Array.from(handleKeysSetValues());\n\n  const handleKeysSetEntriesArray = () => Array.from(handleKeysSetEntries());\n\n  const handleKeysSetForEachCallback = (value: any, key: any, set: any) => {\n    const handle = handles.find((handle: any) => handle.key === key);\n    if (!handle) {\n      return;\n    }\n\n    const { event } = handle;\n    if (!event) {\n      return;\n    }\n\n    root.removeEventListener(event, handle);\n  };\n\n  const handleKeysSetForEachCallbackArray = (value: any, key: any, set: any) => {\n    const handle", "CodeBleu_score": 28.74471348070896}, {"code": "const applyEventHandlers = (actionsFn: any, ...handles: any[]) =>{\n\tconst [root, setRoot] = useState<HTMLElement | null>(null);\n  const actions = actionsFn();\n\n  useEffect(() => {\n    if (!root) {\n      return;\n    }\n\n    const eventListeners = handles.map(handle => {\n      const handler = actions[handle];\n      if (!handler) {\n        return null;\n      }\n\n      return root.addEventListener(handle, handler);\n    });\n\n    return () => {\n      eventListeners.forEach(listener => {\n        if (!listener) {\n          return;\n        }\n\n        root.removeEventListener(handle, listener);\n      });\n    };\n  }, [root, actions, handles]);\n\n  return setRoot;\n}", "CodeBleu_score": 37.925157337778614}, {"code": "const applyEventHandlers = (actionsFn: any, ...handles: any[]) =>{\n\tconst root = document.getElementById('storybook-root');\n\n  if (root) {\n    const actions = actionsFn();\n    const handlers = handles.map((handle) => handle(actions));\n\n    root.addEventListener('click', handlers[0]);\n    root.addEventListener('mouseover', handlers[1]);\n    root.addEventListener('mouseout', handlers[2]);\n\n    return () => {\n      root.removeEventListener('click', handlers[0]);\n      root.removeEventListener('mouseover', handlers[1]);\n      root.removeEventListener('mouseout', handlers[2]);\n    };\n  }\n}", "CodeBleu_score": 41.452160821291166}]}
{"instance_id": "3b9dc9070ef1", "generation_result": [{"code": "addAction = (action: ActionDisplay) =>{\n\tconst { actions, limit } = this.state;\n  const { count, data } = action;\n  const lastAction = actions[actions.length - 1];\n  const lastActionData = lastAction && lastAction.data;\n  if (count === 1 && lastAction && safeDeepEqual(data, lastActionData)) {\n    lastAction.count++;\n    this.setState({ actions: actions.slice(0, limit) });\n  } else {\n    this.setState({ actions: actions.concat(action).slice(0, limit) });\n  }\n}", "CodeBleu_score": 36.958430256941824}, {"code": "addAction = (action: ActionDisplay) =>{\n\tconst { actions, options } = this.state;\n  const { limit } = options;\n  const lastAction = actions[actions.length - 1];\n  const lastActionMatch = safeDeepEqual(lastAction, action);\n  const newActions = lastActionMatch ? actions.slice(0, actions.length - 1) : actions;\n  const newAction = lastActionMatch ? { ...lastAction, count: lastAction.count + 1 } : { ...action, count: 1 };\n  this.setState({ actions: [...newActions, newAction].slice(-limit) });\n}", "CodeBleu_score": 31.24397147467094}, {"code": "addAction = (action: ActionDisplay) =>{\n\tconst { actions, options } = this.state;\n  const lastAction = actions[actions.length - 1];\n\n  if (lastAction && safeDeepEqual(lastAction.data, action.data)) {\n    lastAction.count++;\n  } else {\n    actions.push({ ...action, count: 1 });\n  }\n\n  this.setState({ actions: actions.slice(0, options.maxActions) });\n}", "CodeBleu_score": 37.62272075614828}]}
{"instance_id": "c58b95bdb84e", "generation_result": [{"code": "export const addGridStyle = (selector: string, css: string) => {\n\tconst style = document.createElement('style');\n  style.id = selector;\n  style.type = 'text/css';\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n  document.head.appendChild(style);\n}", "CodeBleu_score": 43.935699899408945}, {"code": "export const addGridStyle = (selector: string, css: string) => {\n\tlet styleElement = document.getElementById(selector);\n  if (styleElement) {\n    if (styleElement.textContent !== css) {\n      styleElement.textContent = css;\n    }\n  } else {\n    styleElement = document.createElement('style');\n    styleElement.id = selector;\n    styleElement.textContent = css;\n    document.head.appendChild(styleElement);\n  }\n}", "CodeBleu_score": 50.20414484353031}, {"code": "export const addGridStyle = (selector: string, css: string) => {\n\tconst style = document.createElement('style');\n  style.setAttribute('id', selector);\n  style.appendChild(document.createTextNode(css));\n  const head = document.head;\n  const existingStyle = document.getElementById(selector);\n  if (existingStyle) {\n    if (existingStyle.textContent !== css) {\n      existingStyle.textContent = css;\n    }\n  } else {\n    head.appendChild(style);\n  }\n}", "CodeBleu_score": 59.804682774956454}]}
{"instance_id": "882d870a20b2", "generation_result": [{"code": "export const addBackgroundStyle = (selector: string, css: string, storyId: string | null) =>{\n\tconst existingStyle = document.getElementById(selector);\n\n  if (existingStyle) {\n    if (existingStyle.innerHTML === css) {\n      return;\n    }\n    existingStyle.innerHTML = css;\n  } else {\n    const style = document.createElement('style');\n    style.setAttribute('id', selector);\n    style.innerHTML = css;\n    document.head.appendChild(style);\n  }\n\n  const existingGridStyle = document.getElementById(storyId);\n  if (existingGridStyle) {\n    existingGridStyle.parentElement?.insertBefore(document.getElementById(selector), existingGridStyle);\n  } else {\n    document.head.appendChild(document.getElementById(selector));\n  }\n}", "CodeBleu_score": 57.10369648740503}, {"code": "export const addBackgroundStyle = (selector: string, css: string, storyId: string | null) =>{\n\t// Check if a style element with the given selector ID already exists.\n  const existingStyle = document.getElementById(selector);\n\n  // If the style element with the given selector ID already exists and its content differs from the provided CSS, update the content.\n  if (existingStyle && existingStyle.innerHTML !== css) {\n    existingStyle.innerHTML = css;\n  }\n  // If the style element with the given selector ID doesn't exist, create a new style element with the given CSS and ID.\n  else if (!existingStyle) {\n    const style = document.createElement('style');\n    style.id = selector;\n    style.innerHTML = css;\n    document.head.appendChild(style);\n  }\n\n  // Check for an existing grid style element based on the story ID to insert the new style before it or append it to the document head if no such grid style exists.\n  const existingGridStyle = document.getElementById(`${selector}-grid`);\n\n  if (existingGridStyle && existingGridStyle.innerHTML !== css) {\n    existingGridStyle.innerHTML = css;\n  } else if (!existingGridStyle) {\n    const style = document.createElement('style');\n    style.id = `${selector}-grid`;\n    style.innerHTML = css;\n\n    if (storyId) {\n      const existingGrid = document.getElementById(`${storyId}-grid`);\n      if (existingGrid) {\n        existingGrid.parentElement?.insertBefore(style, existingGrid);\n      } else {\n        document.head.appendChild(style);\n      }\n    } else {\n      document.head.appendChild(style);\n    }\n  }\n}", "CodeBleu_score": 57.69199030033935}, {"code": "export const addBackgroundStyle = (selector: string, css: string, storyId: string | null) =>{\n\tconst existingStyle = document.querySelector(`style[data-selector=\"${selector}\"]`);\n\n  if (existingStyle) {\n    const existingStyleContent = existingStyle.textContent;\n\n    if (existingStyleContent !== css) {\n      existingStyle.textContent = css;\n    }\n  } else {\n    const style = document.createElement('style');\n    style.setAttribute('data-selector', selector);\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n\n  const existingGridStyle = storyId ? document.querySelector(`style[data-story-id=\"${storyId}\"]`) : null;\n\n  if (existingGridStyle) {\n    existingGridStyle.parentElement?.insertBefore(document.querySelector(`style[data-selector=\"${selector}\"]`), existingGridStyle);\n  } else if (storyId) {\n    const style = document.createElement('style');\n    style.setAttribute('data-story-id', storyId);\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n}", "CodeBleu_score": 53.26132453888239}]}
{"instance_id": "c17e647327b5", "generation_result": [{"code": "const onSubmitForm = async (event: React.FormEvent<HTMLFormElement>) =>{\n\tevent.preventDefault();\n\n  if (isSaving) {\n    return;\n  }\n\n  setErrorMessage('');\n  setSaving(true);\n\n  try {\n    const sanitizedStoryName = storyName.replace(/^[^a-z]/i, '').replaceAll(' ', '-');\n    await createStory(sanitizedStoryName);\n  } catch (error) {\n    setErrorMessage(error.message);\n  }\n\n  setSaving(false);\n}", "CodeBleu_score": 54.208996717916904}, {"code": "const onSubmitForm = async (event: React.FormEvent<HTMLFormElement>) =>{\n\tevent.preventDefault();\n\n  if (isCreating) {\n    return;\n  }\n\n  setErrorMessage('');\n  setSaving(true);\n\n  try {\n    const storyName = (event.target as any).elements.storyName.value;\n    const sanitizedStoryName = storyName.replace(/^[^a-z]/i, '').replaceAll(' ', '-');\n\n    await createStory(sanitizedStoryName);\n\n    setCreating(false);\n    setSaving(false);\n  } catch (error) {\n    setErrorMessage(error.message);\n    setSaving(false);\n  }\n}", "CodeBleu_score": 55.15993466632063}, {"code": "const onSubmitForm = async (event: React.FormEvent<HTMLFormElement>) =>{\n\tevent.preventDefault();\n\n  if (saving) {\n    return;\n  }\n\n  setErrorMessage('');\n  setSaving(true);\n\n  try {\n    const storyName = (event.target as any).elements.storyName.value;\n    const sanitizedStoryName = storyName.replace(/^[^a-z]/i, '').replaceAll(' ', '-');\n    const story = await createStory(sanitizedStoryName);\n\n    setCreating(false);\n    setSaving(false);\n    setErrorMessage('');\n    setStory(story);\n  } catch (error) {\n    setSaving(false);\n    setErrorMessage(error.message);\n  }\n}", "CodeBleu_score": 52.169101528028946}]}
{"instance_id": "2d58c69eda27", "generation_result": [{"code": "function Title(){\n\tconst {\n    argTypes,\n    args\n  } = useArgTypes();\n  const count = Object.values(argTypes).filter(({\n    control\n  }) => control && !control.disable).length;\n  const hasControls = count > 0;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontSize: '1.2em',\n      fontWeight: 'bold',\n      marginRight: 10\n    }\n  }, \"Controls\"), hasControls && /*#__PURE__*/React.createElement(Badge, {\n    color: \"secondary\",\n    badgeContent: count\n  }));\n}", "CodeBleu_score": 21.63203912030084}, {"code": "function Title(){\n\tconst {\n    argTypes,\n    args\n  } = useArgTypes();\n  const count = Object.values(argTypes).filter(argType => !argType.hidden).filter(argType => !argType.disable).length;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sb-controls-title\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"Controls\"), count > 0 && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sb-controls-badge\"\n  }, count));\n}", "CodeBleu_score": 23.23660113792498}, {"code": "function Title(){\n\tconst {\n    args\n  } = useArgTypes();\n  const count = args.filter(arg => arg.type.name === 'control' && !arg.type.control.disable).length;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'flex-start'\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"Controls\"), count ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginLeft: 8\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    status: \"neutral\",\n    color: \"#333\",\n    badge: count\n  })) : null);\n}", "CodeBleu_score": 19.69959091854345}]}
{"instance_id": "b8fba20204d6", "generation_result": [{"code": "const highlight = (infos: HighlightInfo) =>{\n\t// Reset any existing highlights\n  resetHighlights();\n\n  // Ensure no duplicate selectors in the elements array\n  const elements = new Set(infos.elements);\n\n  // Create a new style element\n  const style = document.createElement('style');\n  style.id = 'highlight-style';\n  document.head.appendChild(style);\n\n  // Define CSS rules for each element based on the provided highlight information\n  const cssRules = infos.elements.map((element) => {\n    const {\n      color,\n      backgroundColor,\n      outlineColor,\n      outlineStyle,\n      outlineWidth,\n      outlineOffset,\n      textDecoration,\n      textDecorationColor,\n      textDecorationStyle,\n      textDecorationThickness,\n      textShadow,\n      textStroke,\n      textStrokeColor,\n      textStrokeWidth,\n      textFillColor,\n      textAlign,\n      textIndent,\n      textTransform,\n      textDecorationLine,\n      textDecorationSkip,\n      textDecorationSkipInk,\n      textDecorationThickness,\n      textEmphasis,\n      textEmphasisColor,\n      textEmphasisPosition,\n      textEmphasisStyle,\n      textOrientation,\n      textRendering,\n      textUnderlinePosition,\n      textSizeAdjust,\n      textJustify,\n      textOutline,\n      textShadow,\n      textSpacing,\n      textWrap,\n      textOverflow,\n      textOverflowEllipsis,\n      textOverflowWrap,\n      textOverflowMultiline,\n      textOverflowFade,\n      textOverflowClip,\n      textOverflowFadeLength,\n      textOverflowFadeGap,\n      textOverflowFadeSpread,\n      textOverflowFadeColor,\n      textOverflowFadeEdge,\n      textOverflowFadeRadius,\n      textOverflowFadeRotate,\n      textOverflowFadeBounds,\n      textOverflowFadeRepeat,\n      textOverflowFadeType,\n      textOverflowFadeOrigin,\n      textOverflowFadeMode,\n      textOverflowFadeTarget,\n      textOverflowFadeTimingFunction,\n      text", "CodeBleu_score": 22.63277783607669}, {"code": "const highlight = (infos: HighlightInfo) =>{\n\tconst {\n    elements,\n    highlightStyle: {\n      backgroundColor,\n      borderColor,\n      borderStyle,\n      borderWidth,\n      fontWeight,\n      textDecoration,\n    },\n  } = infos;\n  const selector = elements.map(({ selector }) => selector).join(',');\n  const existingHighlight = document.getElementById(selector);\n  if (existingHighlight) {\n    existingHighlight.remove();\n  }\n  const highlight = document.createElement('style');\n  highlight.id = selector;\n  highlight.innerHTML = `\n    ${selector} {\n      background-color: ${backgroundColor};\n      border-color: ${borderColor};\n      border-style: ${borderStyle};\n      border-width: ${borderWidth};\n      font-weight: ${fontWeight};\n      text-decoration: ${textDecoration};\n    }\n  `;\n  document.head.appendChild(highlight);\n}", "CodeBleu_score": 37.20860240569112}, {"code": "const highlight = (infos: HighlightInfo) =>{\n\t// Reset any existing highlights\n  const existingHighlights = document.querySelectorAll(\n    '[data-highlight-style-id]'\n  )\n  existingHighlights.forEach((el) => {\n    const styleId = el.getAttribute('data-highlight-style-id')\n    if (styleId) {\n      const styleEl = document.querySelector(`#${styleId}`)\n      if (styleEl) {\n        styleEl.remove()\n      }\n    }\n  })\n  // Remove duplicate selectors from elements\n  const selectorSet = new Set()\n  const uniqueElements = infos.elements.filter((el) => {\n    const selector = el.selector\n    if (selectorSet.has(selector)) {\n      return false\n    }\n    selectorSet.add(selector)\n    return true\n  })\n  // Create a new style element\n  const styleEl = document.createElement('style')\n  styleEl.id = `highlight-${Date.now()}`\n  styleEl.setAttribute('data-highlight-style-id', styleEl.id)\n  // Define CSS rules for each element\n  const rules = uniqueElements\n    .map((el) => {\n      const selector = el.selector\n      const style = el.style\n      return `${selector} {${style}}`\n    })\n    .join('\n')\n  styleEl.textContent = rules\n  // Append the style element to the document head\n  document.head.appendChild(styleEl)\n}", "CodeBleu_score": 37.25517668272107}]}
{"instance_id": "08a3fb827e48", "generation_result": [{"code": "const resetHighlight = () =>{\n\tconst sheetToBeRemoved = document.getElementById('highlight-stylesheet');\n  sheetToBeRemoved.parentNode?.removeChild(sheetToBeRemoved);\n}", "CodeBleu_score": 38.57188465548371}, {"code": "const resetHighlight = () =>{\n\tconst sheetToBeRemoved = document.getElementById('highlight-stylesheet');\n  sheetToBeRemoved?.parentNode?.removeChild(sheetToBeRemoved);\n}", "CodeBleu_score": 34.78346186358306}, {"code": "const resetHighlight = () =>{\n\tconst sheetToBeRemoved = document.getElementById('highlight-stylesheet');\n  sheetToBeRemoved.parentNode?.removeChild(sheetToBeRemoved);\n}", "CodeBleu_score": 38.57188465548371}]}
{"instance_id": "1287df4e99b3", "generation_result": [{"code": "function parseQuery(queryString: string){\n\tconst query = {};\n    if (queryString[0] === '?') {\n        queryString = queryString.substring(1);\n    }\n    queryString.split('&').forEach(pair => {\n        if (pair) {\n            const keyValue = pair.split('=');\n            query[decodeURIComponent(keyValue[0])] =\n                keyValue.length > 1 ? decodeURIComponent(keyValue[1]) : '';\n        }\n    });\n    return query;\n}", "CodeBleu_score": 33.979258722768165}, {"code": "function parseQuery(queryString: string){\n\tconst query = {};\n    const pairs = (queryString[0] === '?' ? queryString.substring(1) : queryString)\n        .split('&');\n    for (let i = 0; i < pairs.length; i++) {\n        const pair = pairs[i].split('=');\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n    }\n    return query;\n}", "CodeBleu_score": 74.05089647631456}, {"code": "function parseQuery(queryString: string){\n\tlet query = {};\n    let pairs = (queryString[0] === '?' ? queryString.substring(1) : queryString).split('&');\n    for (let i = 0; i < pairs.length; i++) {\n        let pair = pairs[i].split('=');\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n    }\n    return query;\n}", "CodeBleu_score": 69.39200484130525}]}
{"instance_id": "83c4f520b99a", "generation_result": [{"code": "const linksListener = (e: Event) =>{\n\tconst target = e.target as HTMLElement;\n  const kind = target.dataset.sbKind;\n  const story = target.dataset.sbStory;\n\n  if (kind || story) {\n    e.preventDefault();\n    navigate(kind, story);\n  }\n}", "CodeBleu_score": 37.45941336641786}, {"code": "const linksListener = (e: Event) =>{\n\tconst target = e.target as HTMLElement;\n\n  if (target.nodeName === 'A' && target.dataset.sbKind && target.dataset.sbStory) {\n    e.preventDefault();\n    navigate(target.dataset.sbKind, target.dataset.sbStory);\n  }\n}", "CodeBleu_score": 30.013897315795536}, {"code": "const linksListener = (e: Event) =>{\n\tconst target = e.target as HTMLElement;\n  const { sbKind, sbStory } = target.dataset;\n  if (sbKind || sbStory) {\n    e.preventDefault();\n    navigate(sbKind, sbStory);\n  }\n}", "CodeBleu_score": 30.25612420094319}]}
{"instance_id": "8b8e277eb593", "generation_result": [{"code": "const crawlShadows = (node: HTMLElement): HTMLElement =>{\n\tconst shadowRoot = (node.shadowRoot as any);\n  if (shadowRoot) {\n    const nestedElement = shadowRoot.elementFromPoint(0, 0);\n    if (nestedElement === node) {\n      return node;\n    } else if (nestedElement.shadowRoot) {\n      return crawlShadows(nestedElement);\n    } else {\n      return nestedElement;\n    }\n  } else {\n    return node;\n  }\n}", "CodeBleu_score": 59.131298118345086}, {"code": "const crawlShadows = (node: HTMLElement): HTMLElement =>{\n\tif (node.shadowRoot) {\n    const nestedElement = (node.shadowRoot as any).elementFromPoint(0, 0);\n    if (nestedElement === node) {\n      return node;\n    } else if (nestedElement.shadowRoot) {\n      return crawlShadows(nestedElement);\n    } else {\n      return nestedElement;\n    }\n  } else {\n    return node;\n  }\n}", "CodeBleu_score": 60.85110423332629}, {"code": "const crawlShadows = (node: HTMLElement): HTMLElement =>{\n\tif (node.shadowRoot) {\n    const nestedElement = (node.shadowRoot as any).elementFromPoint(0, 0);\n    if (nestedElement === node) {\n      return node;\n    }\n    if (nestedElement.shadowRoot) {\n      return crawlShadows(nestedElement);\n    }\n    return nestedElement;\n  }\n  return node;\n}", "CodeBleu_score": 66.81530292849513}]}
{"instance_id": "2fa298c35659", "generation_result": [{"code": "function createCanvas(): CanvasState{\n\tconst canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    const context: CanvasRenderingContext2D | null = canvas.getContext(\"2d\");\n    invariant(context, \"Could not obtain canvas context\");\n    const { width, height } = getDocumentWidthAndHeight();\n    canvas.id = \"canvas\";\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.position = \"absolute\";\n    canvas.style.top = \"0px\";\n    canvas.style.left = \"0px\";\n    canvas.style.zIndex = \"1000\";\n    canvas.style.pointerEvents = \"none\";\n    document.body.appendChild(canvas);\n    return { canvas, context, width, height };\n}", "CodeBleu_score": 52.677145098300485}, {"code": "function createCanvas(): CanvasState{\n\tconst canvas = document.createElement(\"canvas\");\n  canvas.id = \"canvas\";\n  const context = canvas.getContext(\"2d\");\n  invariant(context, \"context is null\");\n  const { width, height } = getDocumentWidthAndHeight();\n  canvas.width = width;\n  canvas.height = height;\n  canvas.style.position = \"absolute\";\n  canvas.style.top = \"0px\";\n  canvas.style.left = \"0px\";\n  canvas.style.zIndex = \"1000\";\n  canvas.style.pointerEvents = \"none\";\n  document.body.appendChild(canvas);\n  return { canvas, context, width, height };\n}", "CodeBleu_score": 56.80379348214027}, {"code": "function createCanvas(): CanvasState{\n\tconst canvas = document.createElement(\"canvas\");\n  canvas.id = \"canvas\";\n  const context = canvas.getContext(\"2d\");\n  invariant(context, \"Unable to obtain 2D context\");\n  const { width, height } = getDocumentWidthAndHeight();\n  setCanvasWidthAndHeight(canvas, width, height);\n  canvas.style.position = \"absolute\";\n  canvas.style.top = \"0\";\n  canvas.style.left = \"0\";\n  canvas.style.zIndex = \"999999\";\n  canvas.style.pointerEvents = \"none\";\n  document.body.appendChild(canvas);\n  return {\n    canvas,\n    context,\n    width,\n    height,\n  };\n}", "CodeBleu_score": 55.969846007446165}]}
{"instance_id": "0484eaeba359", "generation_result": [{"code": "export const experimental_serverChannel = async (channel: Channel, options: Options) =>{\n\tconst {\n    telemetry: telemetryOptions,\n    version\n  } = options;\n  const telemetryEnabled = await checkTelemetry(telemetryOptions);\n  const serverChannel = createServerChannel(channel);\n\n  if (!telemetryEnabled) {\n    return serverChannel;\n  }\n\n  const addonVersion = await getAddonVersion();\n  const onEvent = (event: TelemetryEvent) => {\n    serverChannel.emit(EVENTS.TELEMETRY, {\n      event,\n      version: addonVersion\n    });\n  };\n\n  serverChannel.on(EVENTS.REQUEST, async (request: TelemetryRequest) => {\n    const {\n      event,\n      version: addonVersion\n    } = request;\n    onEvent({\n      event,\n      version: addonVersion\n    });\n  });\n  serverChannel.emit(EVENTS.INIT, {\n    version,\n    version: addonVersion\n  });\n  return serverChannel;\n}", "CodeBleu_score": 32.622791002331965}, {"code": "export const experimental_serverChannel = async (channel: Channel, options: Options) =>{\n\tconst {\n    telemetry: telemetryOptions\n  } = options;\n  const {\n    telemetry,\n    telemetryTag,\n    telemetryUrl\n  } = await checkTelemetry(telemetryOptions);\n  const serverChannel = telemetry ? createTelemetryServerChannel(channel, telemetryUrl, telemetryTag) : channel;\n  return serverChannel;\n}", "CodeBleu_score": 14.229719673602222}, {"code": "export const experimental_serverChannel = async (channel: Channel, options: Options) =>{\n\tconst {\n    telemetry,\n    version\n  } = options;\n  const isTelemetryEnabled = telemetry && telemetry.enabled;\n\n  if (!isTelemetryEnabled) {\n    return channel;\n  }\n\n  const onboardingVersion = await getVersion('@storybook/addon-onboarding');\n  const onboardingPackageVersion = onboardingVersion ? `^${onboardingVersion}` : 'latest';\n  channel.on('addon:telemetry', async (event: Event) => {\n    const {\n      eventType,\n      eventData\n    } = event;\n    const {\n      version: sbVersion,\n      refId: sbRefId\n    } = await getVersions(version);\n    const {\n      version: addonVersion,\n      refId: addonRefId\n    } = await getVersions(onboardingPackageVersion);\n    const data = {\n      eventType,\n      eventData,\n      sbVersion,\n      sbRefId,\n      addonVersion,\n      addonRefId\n    };\n    channel.emit('telemetry', data);\n  });\n  return channel;\n}", "CodeBleu_score": 32.44369323258724}]}
{"instance_id": "8552de1f8368", "generation_result": [{"code": "export const addOutlineStyles = (selector: string, css: string) => {\n\tconst existingStyleElement = document.getElementById(selector);\n\n  if (existingStyleElement) {\n    if (existingStyleElement.textContent === css) return;\n    existingStyleElement.textContent = css;\n  } else {\n    const styleElement = document.createElement('style');\n    styleElement.setAttribute('id', selector);\n    styleElement.textContent = css;\n    document.head.appendChild(styleElement);\n  }\n}", "CodeBleu_score": 50.65727444794654}, {"code": "export const addOutlineStyles = (selector: string, css: string) => {\n\tconst style = global.document.getElementById(selector);\n  if (style) {\n    if (style.innerHTML !== css) {\n      style.innerHTML = css;\n    }\n  } else {\n    const newStyle = global.document.createElement('style');\n    newStyle.id = selector;\n    newStyle.innerHTML = css;\n    global.document.head.appendChild(newStyle);\n  }\n}", "CodeBleu_score": 63.85487844147024}, {"code": "export const addOutlineStyles = (selector: string, css: string) => {\n\tconst style = document.createElement('style');\n  style.type = 'text/css';\n  style.id = selector;\n  style.textContent = css;\n  const existingStyle = document.getElementById(selector);\n  if (existingStyle) {\n    if (existingStyle.textContent === css) return;\n    existingStyle.textContent = css;\n  } else {\n    document.head.appendChild(style);\n  }\n}", "CodeBleu_score": 52.51876515142114}]}
{"instance_id": "2472b6d48b9a", "generation_result": [{"code": "export async function loadActiveTranslations(\n  context: BuilderContext,\n  i18n: NormalizedApplicationBuildOptions['i18nOptions'],\n){\n\tif (!i18n) {\n    return;\n  }\n\n  const {\n    locales,\n    defaultLocale,\n    inlineLocales,\n    missingTranslation,\n    duplicateTranslations,\n    translation,\n    logger,\n  } = i18n;\n\n  const loaders = await Promise.all(\n    locales.map(async (locale) => {\n      if (locale === defaultLocale || !inlineLocales.includes(locale)) {\n        return;\n      }\n\n      const translationLoader = await getTranslationLoader(\n        translation,\n        locale,\n        context.workspaceRoot,\n      );\n\n      if (!translationLoader) {\n        return;\n      }\n\n      return translationLoader;\n    }),\n  );\n\n  const translations = await Promise.all(\n    loaders.map(async (loader) => {\n      if (!loader) {\n        return;\n      }\n\n      try {\n        return await loader.loadTranslations();\n      } catch (e) {\n        logger.error(`Failed to load translations for locale \"${loader.locale}\"`);\n        throw e;\n      }\n    }),\n  );\n\n  const translationsMap = translations.reduce((acc, translations, i) => {\n    if (!translations) {\n      return acc;\n    }\n\n    const locale = locales[i];\n\n    if (!acc[locale]) {\n      acc[locale] = {};\n    }\n\n    Object.keys(translations).forEach((key) => {\n      const translation = translations[key];\n      const existingTranslation = acc[locale][key];\n\n      if (existingTranslation) {\n        if (duplicateTranslations === 'warning') {\n          logger.warn(\n            `Duplicate translation found for key \"${key}\" for locale \"${locale}\".", "CodeBleu_score": 27.226339553039335}, {"code": "export async function loadActiveTranslations(\n  context: BuilderContext,\n  i18n: NormalizedApplicationBuildOptions['i18nOptions'],\n){\n\tconst { locales, sourceLocale, missingTranslation, duplicateTranslations } = i18n;\n  const activeTranslations = new Map<string, Map<string, string>>();\n\n  for (const locale of locales) {\n    if (locale === sourceLocale) {\n      continue;\n    }\n\n    const translationLoader = await createTranslationLoader(context, locale);\n    if (!translationLoader) {\n      continue;\n    }\n\n    try {\n      const translations = await translationLoader.loadTranslations();\n      activeTranslations.set(locale, translations);\n    } catch (e) {\n      if (e instanceof MissingTranslationError) {\n        if (missingTranslation === 'error') {\n          throw e;\n        }\n\n        context.logger.warn(e.message);\n      } else if (e instanceof DuplicateTranslationError) {\n        if (duplicateTranslations === 'error') {\n          throw e;\n        }\n\n        context.logger.warn(e.message);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return activeTranslations;\n}", "CodeBleu_score": 34.049314067862234}, {"code": "export async function loadActiveTranslations(\n  context: BuilderContext,\n  i18n: NormalizedApplicationBuildOptions['i18nOptions'],\n){\n\tconst { logger, options } = context;\n  const {\n    locales,\n    sourceLocale,\n    translation,\n    missingTranslation,\n    duplicateTranslation,\n    warnDuplicateTranslation,\n  } = i18n;\n  const activeTranslations: Record<string, Record<string, string>> = {};\n\n  const loaders = new Map<string, TranslationLoader>();\n  for (const [locale, localeOptions] of Object.entries(locales)) {\n    if (locale === sourceLocale || !localeOptions.translation) {\n      continue;\n    }\n\n    const loader = loaders.get(localeOptions.translation);\n    if (loader) {\n      activeTranslations[locale] = await loader.loadTranslations(locale, localeOptions, context);\n      continue;\n    }\n\n    const loaderOptions = {\n      ...translation,\n      ...localeOptions.translation,\n    };\n    const loaderClass = getTranslationLoaderClass(loaderOptions.format);\n    const loaderInstance = new loaderClass(logger, loaderOptions);\n    loaders.set(localeOptions.translation, loaderInstance);\n    activeTranslations[locale] = await loaderInstance.loadTranslations(locale, localeOptions, context);\n  }\n\n  const translations = new Map<string, Map<string, string>>();\n  for (const [locale, activeTranslation] of Object.entries(activeTranslations)) {\n    const translationMap = new Map<string, string>();\n    for (const [key, value] of Object.entries(activeTranslation)) {\n      if (translationMap.has(key)) {\n        if (duplicateTranslation === 'error') {\n          throw new Error(\n            `Duplicate translations found for key \"${key}\" in locale \"${locale}\".", "CodeBleu_score": 29.83914561696743}]}
{"instance_id": "24579c798101", "generation_result": [{"code": "export function buildApplication(\n  options: ApplicationBuilderOptions,\n  context: BuilderContext,\n  pluginsOrExtensions?: Plugin[] | ApplicationBuilderExtensions,\n): AsyncIterable<ApplicationBuilderOutput>{\n\tconst plugins = normalizePlugins(pluginsOrExtensions);\n  const {\n    rootDir,\n    sourceRoot,\n    projectRoot,\n    tsConfig,\n    watch,\n    logger,\n  } = options;\n\n  const tsConfigPath = tsConfig || ts.findConfigFile(rootDir, ts.sys.fileExists);\n  if (!tsConfigPath) {\n    throw new Error('Could not find a valid \"tsconfig.json\"');\n  }\n\n  const tsConfigJson = readTsConfig(tsConfigPath, context.workspaceRoot);\n  const tsConfigDir = path.dirname(tsConfigPath);\n  const tsConfigParseResult = ts.parseJsonConfigFileContent(\n    tsConfigJson,\n    ts.sys,\n    tsConfigDir,\n    undefined,\n    tsConfigPath,\n  );\n\n  const { options: tsCompilerOptions } = tsConfigParseResult;\n  const { options: compilerOptions } = tsConfigParseResult;\n  const { fileNames: entryFilePaths } = tsConfigParseResult;\n\n  const {\n    options: {\n      declaration = false,\n      declarationDir = undefined,\n      emitDeclarationOnly = false,\n      outDir = undefined,\n      outFile = undefined,\n      rootDir: tsCompilerRootDir = undefined,\n      baseUrl = undefined,\n      paths = undefined,\n    },\n  } = tsConfigParseResult;\n\n  const tsCompilerRootDirPath = tsCompilerRootDir\n    ? path.resolve(tsConfigDir, tsCompilerRootDir)\n    : tsConfigDir;\n  const outDirPath = outDir ? path.resolve(tsConfigDir, outDir) : undefined;\n  const outFilePath = outFile ? path.resolve(tsConfigDir, outFile) : undefined;\n  const declarationDirPath = declarationDir\n    ? path.resolve(tsConfigDir, declarationDir)\n    : undefined;\n  const declarationDirExists = declarationDirPath\n    ? fs.existsSync(declarationDirPath)\n    : false;\n  const declarationDirIsOutDir =\n    declarationDirPath && outDirPath && declarationDirPath === outDirPath;\n\n  const rootDirPath = rootDir\n    ? path.resolve(", "CodeBleu_score": 30.434769356672586}, {"code": "export function buildApplication(\n  options: ApplicationBuilderOptions,\n  context: BuilderContext,\n  pluginsOrExtensions?: Plugin[] | ApplicationBuilderExtensions,\n): AsyncIterable<ApplicationBuilderOutput>{\n\tconst {\n    rootDir,\n    sourceRoot,\n    tsConfig,\n    entryFile,\n    fileReplacements,\n    assets,\n    webpackConfig,\n    budgets,\n    progress,\n    logger,\n  } = options;\n  const { workspaceRoot, currentDirectory, root } = context;\n  const projectRoot = path.resolve(root, rootDir);\n\n  const tsConfigPath = path.resolve(root, tsConfig);\n  const projectTs = readTsConfig(tsConfigPath);\n  const tsConfigExtends = projectTs.extends;\n\n  // Add support for using `NODE_PATH` environment variable.\n  const nodePath = process.env['NODE_PATH'];\n  if (nodePath) {\n    // Ensure that `NODE_PATH` is set before any modules are required.\n    // This allows users to control the location of node modules and lets us hook into node's module resolution\n    // without having to change any configuration.\n    // We don't run `require('module')._initPaths()` because there are cases where it's called before our shim is loaded.\n    // We don't want to modify the search paths in those cases.\n    // This method is called in a tight loop, so we're careful not to call `process.env.NODE_PATH` multiple times.\n    const nodePathValue = process.env['NODE_PATH'];\n    if (!nodePathValue) {\n      process.env['NODE_PATH'] = '';\n    } else if (nodePathValue.indexOf(projectRoot) == -1) {\n      process.env['NODE_PATH'] = `${projectRoot}${path.delimiter}${nodePathValue}`;\n    }\n  }\n\n  const entryModule = normalizeEntryModule(entryFile, sourceRoot);\n  const normalizedFileReplacements: NormalizedFileReplacements = normalizeFileReplacements(\n    fileReplacements,\n    root,\n    sourceRoot,\n  );\n\n  // Check if the build is being run with the --watch flag\n  const isWatch = !!context.getBuilderNameForTarget({\n    project: context.target.project,\n    target", "CodeBleu_score": 29.59275393129584}, {"code": "export function buildApplication(\n  options: ApplicationBuilderOptions,\n  context: BuilderContext,\n  pluginsOrExtensions?: Plugin[] | ApplicationBuilderExtensions,\n): AsyncIterable<ApplicationBuilderOutput>{\n\tconst plugins = normalizePlugins(pluginsOrExtensions);\n  const {\n    rootDir,\n    inputFiles,\n    tsConfigPath,\n    watch,\n    incremental,\n    emitFlags,\n    emitDecoratorMetadata,\n    tsBuildInfoFile,\n    tsCompilerOptions,\n    absWorkingDir,\n    emitBuildInfo,\n    buildInfoDir,\n  } = options;\n\n  const tsCompilerOptionsWithRootDir = {\n    ...tsCompilerOptions,\n    rootDir,\n  };\n\n  const tsCompilerOptionsWithRootDirAndOutDir = {\n    ...tsCompilerOptionsWithRootDir,\n    outDir: path.join(absWorkingDir, tsCompilerOptions.outDir),\n  };\n\n  const tsConfigPathOrDefault = tsConfigPath ?? path.join(absWorkingDir, 'tsconfig.json');\n  const tsConfig = ts.readConfigFile(tsConfigPathOrDefault, ts.sys.readFile);\n\n  const tsCompilerOptionsFromTsConfig = ts.parseJsonConfigFileContent(\n    tsConfig.config,\n    ts.sys,\n    path.dirname(tsConfigPathOrDefault),\n    tsCompilerOptionsWithRootDir,\n  );\n\n  const tsCompilerOptionsWithRootDirAndOutDirAndTsConfig = {\n    ...tsCompilerOptionsFromTsConfig.options,\n    ...tsCompilerOptionsWithRootDirAndOutDir,\n  };\n\n  const tsCompilerOptionsWithRootDirAndOutDirAndTsConfigAndEmitFlags = {\n    ...tsCompilerOptionsWithRootDirAndOutDirAndTsConfig,\n    ...emitFlags,\n  };\n\n  const tsCompilerOptionsWithRootDirAndOutDirAndTsConfigAndEmitFlagsAndEmitDecoratorMetadata = {\n    ...tsCompilerOptionsWithRootDirAndOutDirAndTsConfigAndEmitFlags,\n    ...emitDecoratorMetadata,\n  };\n\n  const tsCompilerOptionsWithRootDirAndOutDirAndTsConfigAndEmitFlagsAndEmitDecoratorMetadataAndBuildInfo = {\n    ...tsCompilerOptionsWithRootDirAndOutDirAndTsConfigAndEmitFlagsAndEmitDecoratorMetadata,\n    tsBuildInfoFile,\n  };", "CodeBleu_score": 30.214910953365703}]}
{"instance_id": "126e9e9e4010", "generation_result": [{"code": "const diagnostics = checkDuplicateMessages{\n\tcheckFileSystem: any\n  messages: any\n  level: any\n  basePath: any\n}", "CodeBleu_score": 12.07778490995785}, {"code": "const diagnostics = checkDuplicateMessages{\n\tcheckFileSystem: fs,\n  messages: extractionResult.messages,\n  kind: 'warning',\n  basePath: extractionResult.basePath,\n}", "CodeBleu_score": 31.163045769505658}, {"code": "const diagnostics = checkDuplicateMessages{\n\tcheckFileSystem: any\n  messages: any\n  type: any\n  basePath: any\n}", "CodeBleu_score": 11.951237148727895}]}
{"instance_id": "349518a072df", "generation_result": [{"code": "function isTslibHelperName(name: string): boolean{\n\tconst parts = name.split('$');\n  if (parts.length !== 2) {\n    return false;\n  }\n  const [, number] = parts;\n  if (!/^\\d+$/.test(number)) {\n    return false;\n  }\n  return tslibHelpers.has(parts[0]);\n}", "CodeBleu_score": 48.8704058244491}, {"code": "function isTslibHelperName(name: string): boolean{\n\tconst parts = name.split('$');\n  if (parts.length !== 3) {\n    return false;\n  }\n  const [, helper, index] = parts;\n  if (isNaN(parseInt(index, 10))) {\n    return false;\n  }\n  return tslibHelpers.has(helper);\n}", "CodeBleu_score": 48.954050296164546}, {"code": "function isTslibHelperName(name: string): boolean{\n\tconst parts = name.split('$');\n    if (parts.length !== 3) {\n        return false;\n    }\n    const [, index, originalName] = parts;\n    if (isNaN(Number(index))) {\n        return false;\n    }\n    return tslibHelpers.has(originalName);\n}", "CodeBleu_score": 52.73579849137078}]}
{"instance_id": "0a9b3093b5bc", "generation_result": [{"code": "async bundle(): Promise<BundleContextResult>{\n\tconst cachedResult = this.#cachedResult;\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const result = await this.#performBundle();\n  if (this.#cacheResult) {\n    this.#cachedResult = result;\n  }\n  return result;\n}", "CodeBleu_score": 60.11655717708708}, {"code": "async bundle(): Promise<BundleContextResult>{\n\tif (this.#cachingEnabled && this.#cachedResult) {\n    return this.#cachedResult;\n  }\n\n  const result = await this.#performBundle();\n\n  if (this.#cachingEnabled) {\n    this.#cachedResult = result;\n  }\n\n  return result;\n}", "CodeBleu_score": 77.6489338982761}, {"code": "async bundle(): Promise<BundleContextResult>{\n\tconst {\n    #cache,\n    #cacheKey,\n    #cacheKeyPrefix,\n    #cacheKeySuffix,\n    #cacheTTL,\n    #cacheTTLType,\n    #cacheType,\n    #cacheValue,\n    #cachingEnabled,\n    #cachingStrategy,\n    #cacheValuePrefix,\n    #cacheValueSuffix,\n    #cachingStrategyOptions,\n    #performBundle,\n    #performBundleOptions,\n    #performBundleResult,\n    #performBundleResultCached,\n    #performBundleResultCachedKey,\n    #performBundleResultCachedValue,\n    #performBundleResultCachedValuePrefix,\n    #performBundleResultCachedValueSuffix,\n    #performBundleResultCachedValueType,\n    #performBundleResultKey,\n    #performBundleResultKeyPrefix,\n    #performBundleResultKeySuffix,\n    #performBundleResultKeyType,\n    #performBundleResultValue,\n    #performBundleResultValuePrefix,\n    #performBundleResultValueSuffix,\n    #performBundleResultValueType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueType,\n    #performBundleResultValueType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,\n    #performBundleResultValueTTLType,\n    #performBundleResultValueTTL,", "CodeBleu_score": 4.912644757205637}]}
{"instance_id": "f4fe3e6ac648", "generation_result": [{"code": "findChangedFiles(previousOutputHashes: Map<string, string>): Set<string> {\n\tconst changed = new Set<string>();\n\n  for (const [filePath, hash] of this.outputHashes) {\n    const previousHash = previousOutputHashes.get(filePath);\n    if (previousHash === undefined || previousHash !== hash) {\n      changed.add(filePath);\n    }\n  }\n\n  return changed;\n}", "CodeBleu_score": 74.19678628493978}, {"code": "findChangedFiles(previousOutputHashes: Map<string, string>): Set<string> {\n\tconst changed = new Set<string>();\n  for (const [filePath, hash] of this.outputHashes) {\n    const previousHash = previousOutputHashes.get(filePath);\n    if (previousHash === undefined || previousHash !== hash) {\n      changed.add(filePath);\n    }\n  }\n  return changed;\n}", "CodeBleu_score": 74.19678628493978}, {"code": "findChangedFiles(previousOutputHashes: Map<string, string>): Set<string> {\n\tconst changed = new Set<string>();\n\n  for (const [filePath, hash] of this.outputHashes.entries()) {\n    const previousHash = previousOutputHashes.get(filePath);\n    if (previousHash === undefined || previousHash !== hash) {\n      changed.add(filePath);\n    }\n  }\n\n  return changed;\n}", "CodeBleu_score": 73.3556143015317}]}
{"instance_id": "8969b8ce5198", "generation_result": [{"code": "async function loadLocalizeTools(): Promise<LocalizeUtilityModule> {\n\treturn localizeTools ??= await loadEsmModule<LocalizeUtilityModule>(\n    '@angular/localize/tools',\n  );\n}", "CodeBleu_score": 54.18545317551376}, {"code": "async function loadLocalizeTools(): Promise<LocalizeUtilityModule> {\n\t// await loadEsmModule: )\n  return await import('@angular/localize/tools')\n    .then(async (m) => m.localizeTools)\n    .catch((error) => {\n      throw new Error(\n        `Could not load the localize tools. ${error.message}`,\n      );\n    });\n}", "CodeBleu_score": 23.987674814234275}, {"code": "async function loadLocalizeTools(): Promise<LocalizeUtilityModule> {\n\treturn await (\n    (localizeToolsModule ??= (\n      await import('@angular/localize/tools')\n    ).LocalizeCompiler)\n  );\n}", "CodeBleu_score": 42.11342783873956}]}
{"instance_id": "d7c4df80e1ac", "generation_result": [{"code": "async function createI18nPlugins(locale: string, translation: Record<string, unknown> | undefined){\n\tconst {\n    diagnostics,\n    loadTranslations,\n    replaceLocaleConstant,\n  } = await import('./babel-plugins');\n  const plugins = [\n    loadTranslations(translation),\n    replaceLocaleConstant(locale),\n  ];\n  return {\n    diagnostics,\n    plugins,\n  };\n}", "CodeBleu_score": 21.66869504948035}, {"code": "async function createI18nPlugins(locale: string, translation: Record<string, unknown> | undefined){\n\tconst diagnostics = createDiagnostics();\n  const {\n    createI18nPlugin,\n    createI18nDiagnosticsPlugin,\n    createLocalePlugin,\n    createReplacePlugin,\n    createDiagnosticCategory,\n  } = await import('@intlify/vite-plugin-vue-i18n');\n  const i18nDiagnostics = createDiagnosticCategory();\n  const i18nDiagnosticPlugin = createI18nDiagnosticsPlugin({\n    diagnostics,\n    category: i18nDiagnostics,\n  });\n  const localePlugin = createLocalePlugin({\n    locale,\n    localeDir: 'locales',\n    legacy: false,\n  });\n  const i18nPlugin = createI18nPlugin({\n    legacy: false,\n    locale,\n    localeDir: 'locales',\n    translation,\n  });\n  const replacePlugin = createReplacePlugin({\n    replace: [\n      {\n        __LOCALE__: JSON.stringify(locale),\n      },\n    ],\n  });\n  return {\n    diagnostics,\n    plugins: [\n      i18nDiagnosticPlugin,\n      localePlugin,\n      i18nPlugin,\n      replacePlugin,\n    ],\n  };\n}", "CodeBleu_score": 28.540532107311417}, {"code": "async function createI18nPlugins(locale: string, translation: Record<string, unknown> | undefined){\n\tconst {\n    getTranslation,\n    getLocale,\n    getDiagnostics,\n    getTranslationKeys,\n  } = await import('./lib/i18n');\n\n  const diagnostics = getDiagnostics(locale);\n  const translationKeys = getTranslationKeys(translation);\n\n  const plugins = [\n    getTranslation(locale, translation),\n    getLocale(locale),\n    getTranslationKeys(translation),\n  ];\n\n  return {\n    diagnostics,\n    plugins,\n  };\n}", "CodeBleu_score": 26.77372206338279}]}
{"instance_id": "9486259c4631", "generation_result": [{"code": "const readAsset = async function (filePath: string): Promise<string>{\n\tconst relativePath = filePath.replace(/^\\//, '');\n  const matchingFile = browserOutputFiles.find(file => file.path === relativePath);\n  if (matchingFile) {\n    return matchingFile.text;\n  }\n  throw new Error(`Asset not found: ${filePath}`);\n}", "CodeBleu_score": 50.068716360892026}, {"code": "const readAsset = async function (filePath: string): Promise<string>{\n\t// Convert file path to a relative path by removing the leading directory separator.\n  const relativeFilePath = filePath.replace(/^\\//, '');\n\n  // Search for the file in the browserOutputFiles array by matching the path.\n  const file = browserOutputFiles.find(file => file.path === relativeFilePath);\n\n  // If the file is found, return its text content.\n  if (file) {\n    return file.text;\n  }\n\n  // If the file is not found, throw an error indicating the file does not exist.\n  throw new Error(`${filePath} does not exist.`);\n}", "CodeBleu_score": 57.782577135924164}, {"code": "const readAsset = async function (filePath: string): Promise<string>{\n\tconst relativePath = filePath.replace(/^\\//, '');\n  const asset = browserOutputFiles.find(\n    (assetFile) => assetFile.relativePath === relativePath\n  );\n  if (!asset) {\n    throw new Error(`File ${filePath} does not exist`);\n  }\n  return asset.text;\n}", "CodeBleu_score": 48.82230173490625}]}
{"instance_id": "2206ca03c7ec", "generation_result": [{"code": "async put(path: string, result: OnLoadResult): Promise<void>{\n\tthis.#loadResults.set(path, result);\n\n    if (result.watchFiles) {\n        const watchFiles = await Promise.all(result.watchFiles.map(async (watchFile) => {\n            const normalized = await this.#normalize(watchFile);\n            this.#fileDependencies.set(normalized, path);\n            return normalized;\n        }));\n        result.watchFiles = watchFiles;\n    }\n}", "CodeBleu_score": 56.434828381932434}, {"code": "async put(path: string, result: OnLoadResult): Promise<void>{\n\tthis.#loadResults.set(path, result);\n    if (result.watchFiles) {\n        for (const watchFile of result.watchFiles) {\n            const normalizedPath = normalize(watchFile);\n            this.#fileDependencies.set(normalizedPath, this.#fileDependencies.get(normalizedPath) || []);\n            this.#fileDependencies.get(normalizedPath)!.push(path);\n        }\n    }\n}", "CodeBleu_score": 55.19781572625811}, {"code": "async put(path: string, result: OnLoadResult): Promise<void>{\n\tthis.#loadResults.set(path, result);\n\n    if (result.watchFiles) {\n        const normalizedWatchFiles = await Promise.all(\n            result.watchFiles.map(async (watchFile) => {\n                const normalizedPath = await this.#normalize(watchFile);\n                this.#fileDependencies.add(normalizedPath);\n                return normalizedPath;\n            }),\n        );\n        this.#fileDependencies.add(path);\n        this.#fileDependencies.set(path, normalizedWatchFiles);\n    }\n}", "CodeBleu_score": 55.944673468601856}]}
{"instance_id": "a261d85630d0", "generation_result": [{"code": "invalidate(path: string): boolean{\n\tlet deleted = false;\n  const paths = this.#fileDependencies.get(path);\n  if (paths) {\n    for (const path of paths) {\n      deleted = this.#loadResults.delete(path) || deleted;\n    }\n  }\n  this.#fileDependencies.delete(path);\n  return deleted;\n}", "CodeBleu_score": 53.24524333715834}, {"code": "invalidate(path: string): boolean{\n\tconst loadResults = this.#loadResults;\n\tconst fileDependencies = this.#fileDependencies;\n\tconst deleted = fileDependencies.delete(path);\n\tif (deleted) {\n\t\tconst affectedPaths = fileDependencies.get(path);\n\t\tif (affectedPaths) {\n\t\t\tfor (const affectedPath of affectedPaths) {\n\t\t\t\tloadResults.delete(affectedPath);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 43.55221692022768}, {"code": "invalidate(path: string): boolean{\n\tconst paths = this.#fileDependencies.get(path);\n  if (paths === undefined) return false;\n  let deleted = false;\n  for (const p of paths) {\n    if (this.#loadResults.delete(p)) deleted = true;\n  }\n  this.#fileDependencies.delete(path);\n  return deleted;\n}", "CodeBleu_score": 61.97777762423875}]}
{"instance_id": "8fa6dee0ba79", "generation_result": [{"code": "function recordDuration(name: string, startTime: bigint, cumulative?: boolean): void{\n\tconst duration = process.hrtime.bigint() - startTime;\n  if (cumulative) {\n    cumulativeDurations.set(name, (cumulativeDurations.get(name) || 0n) + duration);\n  } else {\n    console.log(`${name} took ${duration.toFixed(9)} seconds`);\n  }\n}", "CodeBleu_score": 35.138813225054456}, {"code": "function recordDuration(name: string, startTime: bigint, cumulative?: boolean): void{\n\tconst duration = process.hrtime.bigint() - startTime;\n    if (cumulative) {\n        let durations = cumulativeDurations.get(name);\n        if (!durations) {\n            durations = [];\n            cumulativeDurations.set(name, durations);\n        }\n        durations.push(duration);\n    } else {\n        console.log(`${name}: ${duration.toFixed(9)}s`);\n    }\n}", "CodeBleu_score": 47.098648083506916}, {"code": "function recordDuration(name: string, startTime: bigint, cumulative?: boolean): void{\n\tconst duration = process.hrtime.bigint() - startTime;\n    if (cumulative) {\n        const durations = cumulativeDurations.get(name);\n        if (durations) {\n            durations.push(duration);\n        } else {\n            cumulativeDurations.set(name, [duration]);\n        }\n    } else {\n        console.log(`${name}: ${duration.toFixed(9)}s`);\n    }\n}", "CodeBleu_score": 45.16993261869357}]}
{"instance_id": "0c530cbeb386", "generation_result": [{"code": "export function ensureSourceFileVersions(program: ts.Program): void{\n\tconst baseGetSourceFiles = program.getSourceFiles;\n  program.getSourceFiles = () => {\n    const sourceFiles = baseGetSourceFiles();\n    for (const sourceFile of sourceFiles) {\n      if (!sourceFile.version) {\n        sourceFile.version = createHash('sha256').update(sourceFile.text).digest('hex');\n      }\n    }\n    return sourceFiles;\n  };\n}", "CodeBleu_score": 49.10779705573473}, {"code": "export function ensureSourceFileVersions(program: ts.Program): void{\n\tconst baseGetSourceFiles = program.getSourceFiles;\n  program.getSourceFiles = function getSourceFiles(): ts.SourceFile[] {\n    const files = baseGetSourceFiles.call(program);\n    const seen = new Set<ts.SourceFile>();\n    for (const file of files) {\n      if (!seen.has(file)) {\n        seen.add(file);\n        ensureSourceFileVersion(file);\n      }\n    }\n    return files;\n  };\n}", "CodeBleu_score": 48.62059855275771}, {"code": "export function ensureSourceFileVersions(program: ts.Program): void{\n\tconst baseGetSourceFiles = program.getSourceFiles;\n  program.getSourceFiles = () => {\n    const files = baseGetSourceFiles();\n    const existingVersions = new Set(files.map(f => f.version));\n    const newVersions = files.filter(f => !f.version).map(file => {\n      const version = createHash('sha256').update(file.text).digest('hex');\n      return { file, version };\n    });\n    return [...files, ...newVersions.map(({ file, version }) => ({ ...file, version }))];\n  };\n}", "CodeBleu_score": 48.40548136425521}]}
{"instance_id": "3faf480d56ae", "generation_result": [{"code": "const tryReplace = (resolvedModule: ts.ResolvedModule | undefined) =>{\n\tif (!resolvedModule) {\n    return undefined\n  }\n\n  const replacement = replacements.get(resolvedModule.resolvedFileName)\n  if (!replacement) {\n    return resolvedModule\n  }\n\n  return {\n    ...resolvedModule,\n    resolvedFileName: replacement.file,\n    isExternalLibraryImport: replacement.isExternal,\n  }\n}", "CodeBleu_score": 44.65813831222397}, {"code": "const tryReplace = (resolvedModule: ts.ResolvedModule | undefined) =>{\n\tif (!resolvedModule) {\n    return undefined;\n  }\n\n  const resolvedFileName = resolvedModule.resolvedFileName;\n  if (!resolvedFileName) {\n    return undefined;\n  }\n\n  const replacement = getReplacement(resolvedFileName);\n  if (!replacement) {\n    return resolvedModule;\n  }\n\n  return {\n    resolvedFileName: replacement,\n    extension: path.extname(replacement),\n    isExternalLibraryImport: resolvedModule.isExternalLibraryImport,\n  };\n}", "CodeBleu_score": 45.156171801692636}, {"code": "const tryReplace = (resolvedModule: ts.ResolvedModule | undefined) =>{\n\tif (!resolvedModule) {\n    return undefined;\n  }\n\n  const { resolvedFileName } = resolvedModule;\n\n  if (!resolvedFileName) {\n    return undefined;\n  }\n\n  const normalizedFileName = normalizePath(resolvedFileName);\n\n  const replacement = replacements[normalizedFileName];\n\n  if (replacement) {\n    return {\n      resolvedFileName: normalizePath(replacement),\n      isExternalLibraryImport: true,\n    };\n  }\n\n  return resolvedModule;\n}", "CodeBleu_score": 48.065389228532005}]}
{"instance_id": "382672b61228", "generation_result": [{"code": "get waitUntilReady(): Promise<boolean>{\n\tif (!this._readyPromise) {\n    this._readyPromise = new Promise((resolve, reject) => {\n      this._readyCallback = resolve;\n      this._failedCallback = reject;\n    });\n  }\n\n  return this._readyPromise;\n}", "CodeBleu_score": 20.200595911835492}, {"code": "get waitUntilReady(): Promise<boolean>{\n\tif (this.compilationReadyPromise) {\n    return this.compilationReadyPromise;\n  }\n  this.compilationReadyPromise = new Promise((resolve, reject) => {\n    this.compilationReadyResolve = resolve;\n    this.compilationReadyReject = reject;\n  });\n  return this.compilationReadyPromise;\n}", "CodeBleu_score": 23.800997101774623}, {"code": "get waitUntilReady(): Promise<boolean>{\n\treturn this._waitUntilReady();\n}", "CodeBleu_score": 4.425877106216171}]}
{"instance_id": "27f631043b39", "generation_result": [{"code": "const bundlerContext = await this.#inlineContexts.getOrCreate(entry, () =>{\n\tconst context = new BundlerContext(\n    this.#workspaceRoot,\n    {\n      incremental: true,\n    },\n  );\n  const options = new StylesheetBundleOptions();\n  options.namespace = 'angular:styles/component';\n  options.entry = entry;\n  options.loader = 'css';\n  options.resolveDir = this.#workspaceRoot;\n  context.addBundle(options);\n  context.addPlugin(\n    new StylesheetBundlePlugin({\n      resolve: (path) => {\n        return {\n          path,\n          namespace: 'angular:styles/component',\n          content: fs.readFileSync(path, 'utf-8'),\n          loader: 'css',\n          resolveDir: this.#workspaceRoot,\n        };\n      },\n    }),\n  );\n  return context;\n}", "CodeBleu_score": 23.394483363350155}, {"code": "const bundlerContext = await this.#inlineContexts.getOrCreate(entry, () =>{\n\tconst context = new BundlerContext(this.#workspaceRoot, {\n    incremental: true,\n  });\n\n  const stylesheetBundleOptions = {\n    namespace: 'angular:styles/component',\n    loader: {\n      mimeType: 'text/css',\n    },\n  };\n\n  context.setEntryPoints([entry]);\n  context.setBundleOptions(stylesheetBundleOptions, {\n    type: 'stylesheet',\n  });\n\n  context.addPlugin(\n    {\n      name: 'angular:component-styles',\n      setup: (build) => {\n        const stylesheetResolveDir = path.dirname(entry);\n        const stylesheetPath = path.basename(entry);\n\n        build.onResolve({ filter: /\\.css$/ }, (args) => {\n          return {\n            path: args.path,\n            namespace: stylesheetBundleOptions.namespace,\n          };\n        });\n\n        build.onLoad({ filter: /\\.css$/, namespace: stylesheetBundleOptions.namespace }, async (args) => {\n          const content = await fs.promises.readFile(args.path);\n          return {\n            contents: content,\n            loader: stylesheetBundleOptions.loader,\n            resolveDir: stylesheetResolveDir,\n          };\n        });\n\n        build.onResolve({ filter: /.*/ }, async (args) => {\n          const filePath = path.join(stylesheetResolveDir, args.path);\n          if (await fs.promises.stat(filePath).then((stat) => stat.isFile())) {\n            return {\n              path: args.path,\n              namespace: stylesheetBundleOptions.namespace,\n            };\n          }\n        });\n\n        build.onLoad({ filter: /.*/, namespace: stylesheetBundleOptions.namespace }, async (args) => {\n          const content = await fs.promises.readFile(args.path);\n          return {\n            contents: content,\n            loader: stylesheetBundleOptions.loader,\n            resolveDir: stylesheetResolveDir,\n          };\n        });\n\n        build.onResolve({ filter: /.*/ }, (args) => {\n          return {\n            path:", "CodeBleu_score": 30.700574314805017}, {"code": "const bundlerContext = await this.#inlineContexts.getOrCreate(entry, () =>{\n\tconst context = new BundlerContext(this.#workspaceRoot, {\n        incremental: this.#incremental,\n        namespace: 'angular:styles/component',\n    });\n    const stylesheetBundleOptions = {\n        entry: entry,\n        namespace: 'angular:styles/component',\n        loader: 'css',\n        resolveDir: this.#workspaceRoot,\n    };\n    context.addEntryPoint(entry, stylesheetBundleOptions);\n    context.addPlugin({\n        name: 'angular:styles/component',\n        async setup(build) {\n            const stylesheetBundle = await build.getBundles(stylesheetBundleOptions);\n            const stylesheet = stylesheetBundle.getFirstOutput();\n            const stylesheetContent = stylesheet.contents;\n            const stylesheetPath = stylesheet.entryAsset.name;\n            const stylesheetLoader = stylesheet.entryAsset.options.loader;\n            const stylesheetResolveDir = stylesheet.entryAsset.options.resolveDir;\n            const stylesheetUrl = build.getRelativePath(stylesheet.entryAsset.name);\n            const stylesheetId = build.getAssetId(stylesheet.entryAsset);\n            return {\n                name: 'angular:styles/component',\n                async buildStart() {\n                    const stylesheetAsset = await build.assets.get(stylesheetId);\n                    const stylesheetSource = await stylesheetAsset.getBuffer();\n                    const stylesheetMap = await stylesheetAsset.getMap();\n                    const stylesheetSourceWithMap = new SourceMap(stylesheetSource, stylesheetMap);\n                    const stylesheetSourceWithMapAndMap = new SourceMap(stylesheetSourceWithMap.source(), stylesheetSourceWithMap.map(), stylesheetMap);\n                    const stylesheetAssetWithMapAndMap = new Asset(stylesheet.entryAsset.name, stylesheetSourceWithMapAndMap, stylesheet.entryAsset.options);\n                    await build.assets.set(stylesheetId, stylesheetAssetWithMapAndMap);\n                },\n                async generateBundle(options, bundle, isWrite) {\n                    const stylesheetAsset = await build.assets.get(stylesheetId);\n                    const stylesheetSource = await stylesheetAsset.getBuffer();\n                    const stylesheetMap", "CodeBleu_score": 30.64755874129427}]}
{"instance_id": "b89b44b794a7", "generation_result": [{"code": "invalidate(files: Iterable<string>) {\n\tconst normalizedFiles = [...files].map(f => this.normalize(f));\n\n  this.#fileContexts.values().forEach(context => {\n    context.invalidate(normalizedFiles);\n  });\n\n  this.#inlineContexts.values().forEach(context => {\n    context.invalidate(normalizedFiles);\n  });\n}", "CodeBleu_score": 52.86307145196252}, {"code": "invalidate(files: Iterable<string>) {\n\tif (!this.#incremental) {\n    return;\n  }\n\n  const normalizedFiles = [...files].map(file =>\n    normalizePath(file),\n  );\n\n  for (const context of this.#inlineContexts.values()) {\n    context.invalidate(normalizedFiles);\n  }\n\n  for (const context of this.#fileContexts.values()) {\n    context.invalidate(normalizedFiles);\n  }\n}", "CodeBleu_score": 66.44221955687655}, {"code": "invalidate(files: Iterable<string>) {\n\tfiles = [...files].map(file => this.normalizePath(file));\n\n    this.#fileContexts.values().forEach(context => context.invalidate(files));\n    this.#inlineContexts.values().forEach(context => context.invalidate(files));\n}", "CodeBleu_score": 30.889553388677005}]}
{"instance_id": "aa3aa0817adf", "generation_result": [{"code": "export function convertTypeScriptDiagnostic(\n  typescript: typeof ts,\n  diagnostic: ts.Diagnostic,\n): PartialMessage {\n\tlet code = diagnostic.code;\n  let messageText = typescript.flattenDiagnosticMessageText(diagnostic.messageText, '\n');\n  let source = diagnostic.source;\n  let relatedInformation = diagnostic.relatedInformation;\n\n  if (source === 'ng') {\n    code = `NG${code}`;\n  } else if (source === 'ts') {\n    code = `TS${code}`;\n  }\n\n  let message = convertTypeScriptDiagnosticInfo(code, messageText);\n\n  if (relatedInformation) {\n    relatedInformation.forEach(info => {\n      message.notes.push(convertTypeScriptDiagnosticInfo(info.code, info.messageText));\n    });\n  }\n\n  return message;\n}", "CodeBleu_score": 43.76550796619375}, {"code": "export function convertTypeScriptDiagnostic(\n  typescript: typeof ts,\n  diagnostic: ts.Diagnostic,\n): PartialMessage {\n\tlet code = diagnostic.code;\n  let message = diagnostic.messageText;\n  let source = typescript.flattenDiagnosticMessageText(diagnostic.messageText, '", "CodeBleu_score": 15.79583198869105}, {"code": "export function convertTypeScriptDiagnostic(\n  typescript: typeof ts,\n  diagnostic: ts.Diagnostic,\n): PartialMessage {\n\tconst info = convertTypeScriptDiagnosticInfo(typescript, diagnostic);\n\n  const message = {\n    code: info.code,\n    message: info.message,\n    notes: info.relatedInformation ? info.relatedInformation.map(convertTypeScriptDiagnosticInfo) : undefined,\n  };\n\n  return message;\n}", "CodeBleu_score": 34.34678891430589}]}
{"instance_id": "0cd0285018f1", "generation_result": [{"code": "add(containingFile: string, referencedFiles: Iterable<string>): void{\n\tcontainingFile = normalize(containingFile);\n  referencedFiles = normalize(referencedFiles);\n  if (containingFile === referencedFiles) {\n    return;\n  }\n  let referencingFiles = this.#referencingFiles.get(referencedFiles);\n  if (referencingFiles === undefined) {\n    referencingFiles = new Set();\n    this.#referencingFiles.set(referencedFiles, referencingFiles);\n  }\n  referencingFiles.add(containingFile);\n}", "CodeBleu_score": 42.32805536174721}, {"code": "add(containingFile: string, referencedFiles: Iterable<string>): void{\n\tconst containingFilePath = this.#normalizePath(containingFile);\n  const referencedFilePaths = Array.from(referencedFiles).map(this.#normalizePath);\n  if (referencedFilePaths.includes(containingFilePath)) return;\n  const referencingFiles = this.#referencingFiles.get(containingFilePath);\n  if (referencingFiles) {\n    for (const referencedFilePath of referencedFilePaths) {\n      referencingFiles.add(referencedFilePath);\n    }\n  } else {\n    this.#referencingFiles.set(containingFilePath, new Set(referencedFilePaths));\n  }\n}", "CodeBleu_score": 47.77330993422479}, {"code": "add(containingFile: string, referencedFiles: Iterable<string>): void{\n\tconst normalizedContainingFile = this.normalize(containingFile);\n    if (normalizedContainingFile === undefined) {\n        return;\n    }\n    for (const referencedFile of referencedFiles) {\n        const normalizedReferencedFile = this.normalize(referencedFile);\n        if (normalizedReferencedFile === undefined) {\n            continue;\n        }\n        if (normalizedReferencedFile === normalizedContainingFile) {\n            continue;\n        }\n        const referencingFiles = this.#referencingFiles.get(normalizedReferencedFile);\n        if (referencingFiles === undefined) {\n            this.#referencingFiles.set(normalizedReferencedFile, new Set([normalizedContainingFile]));\n        } else {\n            referencingFiles.add(normalizedContainingFile);\n        }\n    }\n}", "CodeBleu_score": 68.67721468409574}]}
{"instance_id": "e22be1916b33", "generation_result": [{"code": "static async loadCompilerCli(): Promise<typeof ng> {\n\treturn (ng = await import('@angular/compiler-cli')).ng;\n}", "CodeBleu_score": 20.144406279616483}, {"code": "static async loadCompilerCli(): Promise<typeof ng> {\n\treturn (loadCompilerCli = loadCompilerCli ?? (async () => (await import('@angular/compiler-cli')).ng))();\n}", "CodeBleu_score": 25.911747103853454}, {"code": "static async loadCompilerCli(): Promise<typeof ng> {\n\treturn (\n    loadCompilerCli ??= (\n      await import('@angular/compiler-cli')\n    ).ng\n  )\n}", "CodeBleu_score": 34.74829070178852}]}
{"instance_id": "64e42342101f", "generation_result": [{"code": "export async function createAngularCompilation(jit: boolean): Promise<AngularCompilation>{\n\tlet AngularCompilation: any;\n  if (jit) {\n    AngularCompilation = await import('@angular/compiler-cli/src/transformers/program');\n  } else {\n    AngularCompilation = await import('@angular/compiler-cli/src/transformers/program');\n  }\n\n  return new AngularCompilation.ProgramTransformer();\n}", "CodeBleu_score": 25.232059017640818}, {"code": "export async function createAngularCompilation(jit: boolean): Promise<AngularCompilation>{\n\tif (jit) {\n    const { JitCompilation } = await import('./jit-compilation');\n    return new JitCompilation();\n  }\n  const { AotCompilation } = await import('./aot-compilation');\n  return new AotCompilation();\n}", "CodeBleu_score": 56.457874785951276}, {"code": "export async function createAngularCompilation(jit: boolean): Promise<AngularCompilation>{\n\tconst { AngularCompilation, JitCompilation, AotCompilation, ParallelCompilation } = await import(\n    '@angular/compiler-cli'\n  );\n\n  if (jit) {\n    return new JitCompilation();\n  }\n\n  const { useParallelTs } = await import('./tsconfig');\n\n  if (useParallelTs) {\n    return new ParallelCompilation();\n  }\n\n  return new AotCompilation();\n}", "CodeBleu_score": 50.63162654310268}]}
{"instance_id": "37804d74eb2d", "generation_result": [{"code": "function sourceMapToUrlComment(\n  sourceMap: Exclude<CompileResult['sourceMap'], undefined>,\n  root: string,\n): string{\n\tconst map = { ...sourceMap };\n  map.sources = map.sources.map((source) => relative(root, source));\n  return `//# sourceMappingURL=data:application/json;base64,${Buffer.from(\n    JSON.stringify(map),\n  ).toString('base64')}`;\n}", "CodeBleu_score": 39.14763189394748}, {"code": "function sourceMapToUrlComment(\n  sourceMap: Exclude<CompileResult['sourceMap'], undefined>,\n  root: string,\n): string{\n\t// Update the source map's sources to be relative paths.\n  const sourceMapWithRelativeSources = {\n    ...sourceMap,\n    sources: sourceMap.sources.map((source) => relative(root, source)),\n  };\n\n  // Serialize the source map to a JSON string.\n  const sourceMapJson = JSON.stringify(sourceMapWithRelativeSources);\n\n  // Base64-encode the JSON string.\n  const sourceMapBase64 = Buffer.from(sourceMapJson).toString('base64');\n\n  // Return a source map URL comment containing the encoded source map.\n  return `//# sourceMappingURL=data:application/json;charset=utf-8;base64,${sourceMapBase64}`;\n}", "CodeBleu_score": 53.628336736485394}, {"code": "function sourceMapToUrlComment(\n  sourceMap: Exclude<CompileResult['sourceMap'], undefined>,\n  root: string,\n): string{\n\tconst relative = (fileURLToPath(sourceMap.fileURL) + '/').replace(root, '');\n  const relativeSourceMap = {\n    ...sourceMap,\n    fileURL: relative,\n    sources: sourceMap.sources.map(source =>\n      pathToFileURL(path.join(root, source)).href,\n    ),\n  };\n  const base64 = Buffer.from(JSON.stringify(relativeSourceMap)).toString(\n    'base64',\n  );\n  return `//# sourceMappingURL=data:application/json;charset=utf-8;base64,${base64}`;\n}", "CodeBleu_score": 49.16319606078422}]}
{"instance_id": "bccb5eeb4c4d", "generation_result": [{"code": "function* extractFilesFromStack(stack: string): Iterable<string>{\n\tconst lines = stack.split('\n')\n  for (let line of lines) {\n    line = line.trim()\n    const segments = line.split(/[/\\\\]/)\n    let filePath = ''\n    let isInFile = false\n    for (let segment of segments) {\n      if (segment === '') {\n        continue\n      }\n      if (isInFile) {\n        filePath += `/${segment}`\n      } else if (segment.match(/^[A-Za-z0-9]+\\.js/)) {\n        filePath = segment\n        isInFile = true\n      }\n    }\n    if (filePath !== '') {\n      yield filePath\n    }\n  }\n}", "CodeBleu_score": 39.36956921313228}, {"code": "function* extractFilesFromStack(stack: string): Iterable<string>{\n\tconst lines = stack.split('\n');\n  for (const line of lines) {\n    const segments = line.split(' ');\n    let filePath = '';\n    let isFile = false;\n    for (const segment of segments) {\n      if (segment.endsWith(':')) {\n        isFile = true;\n        break;\n      }\n      if (isFile) {\n        filePath += segment;\n      }\n    }\n    if (isFile) {\n      if (filePath.startsWith('/')) {\n        filePath = filePath.slice(1);\n      }\n      if (filePath.startsWith('./')) {\n        filePath = filePath.slice(2);\n      }\n      if (filePath.startsWith('../')) {\n        filePath = filePath.slice(3);\n      }\n      const cwd = Deno.cwd();\n      if (filePath.startsWith(cwd)) {\n        filePath = filePath.slice(cwd.length + 1);\n      }\n      yield filePath;\n    }\n  }\n}", "CodeBleu_score": 44.915581817105775}, {"code": "function* extractFilesFromStack(stack: string): Iterable<string>{\n\tconst lines = stack.split('\n');\n  const cwd = process.cwd();\n  const match = /^(?<file>.*?):(?<line>\\d+):(?<column>\\d+)$/;\n  for (const line of lines) {\n    const { file, line, column } = match.exec(line).groups;\n    if (file) {\n      const filePath = file.replace(/^.*[\\\\/]/, '');\n      const relativeFilePath = filePath.replace(cwd, '.');\n      yield relativeFilePath;\n    }\n  }\n}", "CodeBleu_score": 43.103939990831684}]}
{"instance_id": "e73986d88a00", "generation_result": [{"code": "function hasTailwindKeywords(contents: string | Uint8Array): boolean{\n\tif (typeof contents === 'string') {\n    return contents.includes('@apply') || contents.includes('@screen') || contents.includes('@variants')\n  } else {\n    return Buffer.from(contents).includes(Buffer.from('@apply')) || Buffer.from(contents).includes(Buffer.from('@screen')) || Buffer.from(contents).includes(Buffer.from('@variants'))\n  }\n}", "CodeBleu_score": 43.73770425332197}, {"code": "function hasTailwindKeywords(contents: string | Uint8Array): boolean{\n\tif (typeof contents === 'string') {\n    return contents.includes('@apply') || contents.includes('@screen');\n  }\n\n  if (contents instanceof Uint8Array) {\n    return Buffer.from(contents).includes(Buffer.from('@apply') || Buffer.from('@screen'));\n  }\n\n  return false;\n}", "CodeBleu_score": 44.491771910787335}, {"code": "function hasTailwindKeywords(contents: string | Uint8Array): boolean{\n\tif (typeof contents === 'string') {\n    return contents.includes('@tailwind');\n  } else {\n    return Buffer.from(contents).includes('@tailwind');\n  }\n}", "CodeBleu_score": 28.880846340778383}]}
{"instance_id": "ff27dc4f1deb", "generation_result": [{"code": "export function appendServerConfiguredHeaders(\n  server: ViteDevServer,\n  res: ServerResponse<IncomingMessage>,\n): void{\n\tconst headers = server.config.server.headers;\n  if (headers) {\n    for (const [key, value] of Object.entries(headers)) {\n      if (value !== undefined) {\n        res.setHeader(key, value);\n      }\n    }\n  }\n}", "CodeBleu_score": 80.92982475798732}, {"code": "export function appendServerConfiguredHeaders(\n  server: ViteDevServer,\n  res: ServerResponse<IncomingMessage>,\n): void{\n\tconst { config } = server;\n  const headers = config.server?.headers;\n\n  if (!headers) return;\n\n  Object.entries(headers).forEach(([key, value]) => {\n    if (value !== undefined) {\n      res.setHeader(key, value);\n    }\n  });\n}", "CodeBleu_score": 61.60611645275055}, {"code": "export function appendServerConfiguredHeaders(\n  server: ViteDevServer,\n  res: ServerResponse<IncomingMessage>,\n): void{\n\tconst headers = server.config.server?.headers;\n  if (headers) {\n    for (const [key, value] of Object.entries(headers)) {\n      if (value !== undefined) {\n        res.setHeader(key, value);\n      }\n    }\n  }\n}", "CodeBleu_score": 76.83671516471573}]}
{"instance_id": "1d547de72724", "generation_result": [{"code": "export async function createTranslationLoader(): Promise<TranslationLoader>{\n\tconst parsers = await importParsers()\n  const diagnostics = await importDiagnostics()\n  return async function loadTranslation(filePath: string): Promise<Translation> {\n    const content = fs.readFileSync(filePath, 'utf-8')\n    const hash = createHash('sha256').update(content).digest('hex')\n    const messages: string[] = []\n    const unusedParsers = new Map(parsers.entries())\n    for (const [parserName, parser] of unusedParsers.entries()) {\n      try {\n        const analysis = parser.analyze(content)\n        if (analysis.diagnostics.length > 0) {\n          messages.push(`${filePath}: ${diagnostics.formatDiagnostics(analysis.diagnostics)}`)\n        }\n        if (analysis.format) {\n          unusedParsers.delete(parserName)\n          const translations = parser.parse(analysis.content)\n          return {\n            format: analysis.format,\n            locale: analysis.locale,\n            translations,\n            diagnostics: analysis.diagnostics,\n            hash,\n          }\n        }\n      } catch (error) {\n        messages.push(`${filePath}: ${error}`)\n      }\n    }\n    throw new Error(messages.join('\n'))\n  }\n}", "CodeBleu_score": 47.03792358762164}, {"code": "export async function createTranslationLoader(): Promise<TranslationLoader>{\n\tconst parsers = new Map<string, Parser>();\n  const diagnostics = new Map<string, Diagnostic>();\n  const unusedParsers = new Set<string>();\n  const messages: string[] = [];\n\n  const files = await readdir(join(__dirname, 'parsers'));\n  for (const file of files) {\n    const { name, ext } = parse(file);\n    if (ext !== '.js') {\n      continue;\n    }\n\n    const parser = (await import(join(__dirname, 'parsers', file))).default;\n    if (parser.type === 'parser') {\n      parsers.set(name, parser);\n    } else if (parser.type === 'diagnostic') {\n      diagnostics.set(name, parser);\n    }\n  }\n\n  return async function loadTranslation(filePath: string): Promise<Translation> {\n    const content = readFileSync(filePath);\n    const hash = createHash('sha256').update(content).digest('hex');\n    const parser = Array.from(parsers.entries()).find(([_, p]) => p.canParse(content));\n    if (!parser) {\n      const diagnosticsEntries = Array.from(diagnostics.entries());\n      for (const [name, parser] of diagnosticsEntries) {\n        const diagnostics = parser.analyze(content);\n        if (diagnostics.length) {\n          unusedParsers.add(name);\n          messages.push(diagnostics.formatDiagnostics());\n        }\n      }\n\n      throw new Error(messages.join('\n\n'));\n    }\n\n    const [_, parser] = parser;\n    const analysis = parser.analyze(content);\n    if (analysis.diagnostics.length) {\n      messages.push(analysis.diagnostics.formatDiagnostics());\n    }\n\n    const translations = parser.parse(analysis.source);\n    return {\n      format: parser.format,\n      locale: analysis.locale,\n      translations,\n      diagnostics: analysis.diagnostics,\n      hash,\n    };\n  };\n}", "CodeBleu_score": 42.555456841563846}, {"code": "export async function createTranslationLoader(): Promise<TranslationLoader>{\n\tconst parsers = await Promise.all(\n    Object.entries(parsersConfig).map(async ([format, { module }]) => {\n      const { default: Parser } = await import(module);\n      return new Parser();\n    })\n  );\n\n  const unusedParsers = new Set(parsers);\n\n  return async function loadTranslation(filePath: string): Promise<Translation> {\n    const content = fs.readFileSync(filePath);\n    const hash = createHash('sha256').update(content).digest('hex');\n\n    const messages: string[] = [];\n    const analysis: TranslationAnalysis = {\n      format: undefined,\n      locale: undefined,\n      translations: [],\n      diagnostics: [],\n      hash,\n    };\n\n    for (const parser of parsers) {\n      try {\n        const { format, locale, translations, diagnostics } = parser.analyze(\n          filePath,\n          content\n        );\n\n        analysis.format = format;\n        analysis.locale = locale;\n        analysis.translations = translations;\n        analysis.diagnostics = diagnostics;\n        unusedParsers.delete(parser);\n        break;\n      } catch (e) {\n        messages.push(e.message);\n      }\n    }\n\n    if (unusedParsers.size) {\n      for (const parser of unusedParsers) {\n        messages.push(\n          ...parser.parse(filePath, content).diagnostics.formatDiagnostics()\n        );\n      }\n\n      throw new Error(messages.join('\n'));\n    }\n\n    return analysis;\n  };\n}", "CodeBleu_score": 43.966267936343364}]}
{"instance_id": "0c0d3dcf983c", "generation_result": [{"code": "toggleSidebar(): boolean{\n\tthis.sidebarService.toggle(false, true);\n  this.layoutService.changeLayoutSize();\n  return false;\n}", "CodeBleu_score": 47.586927010370786}, {"code": "toggleSidebar(): boolean{\n\tthis.sidebarService.toggle(false, true);\n  this.layoutService.changeLayoutSize();\n  return false;\n}", "CodeBleu_score": 47.586927010370786}, {"code": "toggleSidebar(): boolean{\n\tthis.sidebarService.toggle(false, 'compact');\n  this.layoutService.changeLayoutSize();\n  return false;\n}", "CodeBleu_score": 49.073019015238486}]}
{"instance_id": "c5ebbdd1dadf", "generation_result": [{"code": "loadNext(cardData){\n\tif (this.loading) {\n        return;\n    }\n    this.loading = true;\n    this.placeholders = Array.from(Array(this.pageSize).keys());\n    this.newsService.getNews(this.page + 1).subscribe(news => {\n        this.placeholders = [];\n        cardData.news.push(...news);\n        this.loading = false;\n        this.page++;\n    });\n}", "CodeBleu_score": 31.034075490661152}, {"code": "loadNext(cardData){\n\tif (!cardData.loading) {\n    cardData.loading = true;\n    cardData.news.push(\n      {\n        title: 'Loading...',\n        body: 'Loading...',\n        date: 'Loading...'\n      },\n      {\n        title: 'Loading...',\n        body: 'Loading...',\n        date: 'Loading...'\n      },\n      {\n        title: 'Loading...',\n        body: 'Loading...',\n        date: 'Loading...'\n      }\n    );\n    this.newsService.getNews(cardData.page + 1).subscribe(\n      data => {\n        cardData.news.splice(cardData.news.length - 3, 3);\n        cardData.news = cardData.news.concat(data);\n        cardData.loading = false;\n        cardData.page++;\n      },\n      error => {\n        cardData.loading = false;\n        cardData.news.splice(cardData.news.length - 3, 3);\n      }\n    );\n  }\n}", "CodeBleu_score": 33.216916691342604}, {"code": "loadNext(cardData){\n\tif (!cardData.loading) {\n        cardData.loading = true;\n        cardData.news.push(\n            {\n                title: 'Loading...',\n                description: 'Loading...',\n                image: 'https://via.placeholder.com/300x150',\n                date: 'Loading...',\n                source: 'Loading...'\n            },\n            {\n                title: 'Loading...',\n                description: 'Loading...',\n                image: 'https://via.placeholder.com/300x150',\n                date: 'Loading...',\n                source: 'Loading...'\n            },\n            {\n                title: 'Loading...',\n                description: 'Loading...',\n                image: 'https://via.placeholder.com/300x150',\n                date: 'Loading...',\n                source: 'Loading...'\n            }\n        );\n        this.newsService.loadNext(cardData.page).subscribe(\n            (data: any) => {\n                cardData.news.splice(cardData.news.length - 3, 3);\n                cardData.news.push(...data.articles);\n                cardData.loading = false;\n                cardData.page++;\n            },\n            error => {\n                cardData.news.splice(cardData.news.length - 3, 3);\n                cardData.news.push(\n                    {\n                        title: 'Error loading news',\n                        description: 'Error loading news',\n                        image: 'https://via.placeholder.com/300x150',\n                        date: 'Error loading news',\n                        source: 'Error loading news'\n                    }\n                );\n                cardData.loading = false;\n                cardData.page++;\n            }\n        );\n    }\n}", "CodeBleu_score": 29.06717169894297}]}
{"instance_id": "1bd87ab8efa2", "generation_result": [{"code": "backToTop(){\n\tif (this.isMoving) return\n  const start = window.pageYOffset\n  let i = 0\n  this.isMoving = true\n  this.interval = setInterval(() => {\n    const next = Math.floor(this.easeInOutQuad(10 * i, start, -start, 500))\n    if (next <= this.backPosition) {\n      window.scrollTo(0, this.backPosition)\n      clearInterval(this.interval)\n      this.isMoving = false\n    } else {\n      window.scrollTo(0, next)\n    }\n    i++\n  }, 16.7)\n}", "CodeBleu_score": 98.41024313848449}, {"code": "backToTop(){\n\tif (this.isMoving) return;\n  const start = window.pageYOffset;\n  let i = 0;\n  this.isMoving = true;\n  this.interval = setInterval(() => {\n    const next = Math.floor(this.easeInOutQuad(10 * i, start, -start, 500));\n    if (next <= this.backPosition) {\n      window.scrollTo(0, this.backPosition);\n      clearInterval(this.interval);\n      this.isMoving = false;\n    } else {\n      window.scrollTo(0, next);\n    }\n    i++;\n  }, 16.7);\n}", "CodeBleu_score": 79.67779383817673}, {"code": "backToTop(){\n\tif (this.isMoving) return;\n  const start = window.pageYOffset;\n  let i = 0;\n  this.isMoving = true;\n  this.interval = setInterval(() => {\n    const next = Math.floor(this.easeInOutQuad(10 * i, start, -start, 500));\n    if (next <= this.backPosition) {\n      window.scrollTo(0, this.backPosition);\n      clearInterval(this.interval);\n      this.isMoving = false;\n    } else {\n      window.scrollTo(0, next);\n    }\n    i++;\n  }, 16.7);\n}", "CodeBleu_score": 79.67779383817673}]}
{"instance_id": "0ef728b56235", "generation_result": [{"code": "getBreadcrumb(){\n\t// only show routes with meta.title\n      let matched = this.$route.matched.filter(item => item.meta && item.meta.title)\n      const first = matched[0]\n\n      if (!this.isDashboard(first)) {\n        matched = [{ path: '/dashboard', meta: { title: 'Dashboard' }}].concat(matched)\n      }\n\n      this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb !== false)\n    }", "CodeBleu_score": 96.44132888063854}, {"code": "getBreadcrumb(){\n\t// only show routes with meta.title\n  let matched = this.$route.matched.filter(item => item.meta && item.meta.title)\n  const first = matched[0]\n\n  if (!this.isDashboard(first)) {\n    matched = [{ path: '/dashboard', meta: { title: 'Dashboard' }}].concat(matched)\n  }\n\n  this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb !== false)\n}", "CodeBleu_score": 98.3303958083076}, {"code": "getBreadcrumb(){\n\t// only show routes with meta.title\n      let matched = this.$route.matched.filter(item => item.meta && item.meta.title)\n      const first = matched[0]\n\n      if (!this.isDashboard(first)) {\n        matched = [{ path: '/dashboard', meta: { title: 'Dashboard' }}].concat(matched)\n      }\n\n      this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb !== false)\n    }", "CodeBleu_score": 96.44132888063854}]}
{"instance_id": "4431fde0a559", "generation_result": [{"code": "destroyListener(){\n\twindow.removeEventListener('resize', this.$_resizeHandler)\n  this.$_resizeHandler = null\n\n  this.$_sidebarElm && this.$_sidebarElm.removeEventListener('transitionend', this.$_sidebarResizeHandler)\n}", "CodeBleu_score": 69.74077408945885}, {"code": "destroyListener(){\n\twindow.removeEventListener('resize', this.$_resizeHandler)\n  this.$_resizeHandler = null\n\n  this.$_sidebarElm && this.$_sidebarElm.removeEventListener('transitionend', this.$_sidebarResizeHandler)\n}", "CodeBleu_score": 69.74077408945885}, {"code": "destroyListener(){\n\twindow.removeEventListener('resize', this.$_resizeHandler);\n    this.$_resizeHandler = null;\n    if (this.$_sidebarElm) {\n      this.$_sidebarElm.removeEventListener('transitionend', this.$_sidebarResizeHandler);\n    }\n  }", "CodeBleu_score": 42.294685331298325}]}
{"instance_id": "7215170e04cd", "generation_result": [{"code": "deleteEle(ele){\n\tfor (const item of this.list1) {\n    if (item.id === ele.id) {\n      const index = this.list1.indexOf(item)\n      this.list1.splice(index, 1)\n      break\n    }\n  }\n  if (this.isNotInList2(ele)) {\n    this.list2.unshift(ele)\n  }\n}", "CodeBleu_score": 97.23689339538122}, {"code": "deleteEle(ele){\n\tfor (const item of this.list1) {\n    if (item.id === ele.id) {\n      const index = this.list1.indexOf(item)\n      this.list1.splice(index, 1)\n      break\n    }\n  }\n  if (this.isNotInList2(ele)) {\n    this.list2.unshift(ele)\n  }\n}", "CodeBleu_score": 97.23689339538122}, {"code": "deleteEle(ele){\n\tfor (const item of this.list1) {\n    if (item.id === ele.id) {\n      const index = this.list1.indexOf(item)\n      this.list1.splice(index, 1)\n      break\n    }\n  }\n  if (this.isNotInList2(ele)) {\n    this.list2.unshift(ele)\n  }\n}", "CodeBleu_score": 97.23689339538122}]}
{"instance_id": "b2acc5757074", "generation_result": [{"code": "generateRoutes(routes, basePath = '/', prefixTitle = []){\n\tlet res = []\n\n  for (const router of routes) {\n    // skip hidden router\n    if (router.hidden) { continue }\n\n    const data = {\n      path: path.resolve(basePath, router.path),\n      title: [...prefixTitle]\n    }\n\n    if (router.meta && router.meta.title) {\n      data.title = [...data.title, router.meta.title]\n\n      if (router.redirect !== 'noRedirect') {\n        // only push the routes with title\n        // special case: need to exclude parent router without redirect\n        res.push(data)\n      }\n    }\n\n    // recursive child routes\n    if (router.children) {\n      const tempRoutes = this.generateRoutes(router.children, data.path, data.title)\n      if (tempRoutes.length >= 1) {\n        res = [...res, ...tempRoutes]\n      }\n    }\n  }\n  return res\n}", "CodeBleu_score": 98.79944364315347}, {"code": "generateRoutes(routes, basePath = '/', prefixTitle = []){\n\tlet res = [];\n\n    for (const router of routes) {\n      // skip hidden router\n      if (router.hidden) {\n        continue;\n      }\n\n      const data = {\n        path: path.resolve(basePath, router.path),\n        title: [...prefixTitle]\n      };\n\n      if (router.meta && router.meta.title) {\n        data.title = [...data.title, router.meta.title];\n\n        if (router.redirect !== 'noRedirect') {\n          // only push the routes with title\n          // special case: need to exclude parent router without redirect\n          res.push(data);\n        }\n      }\n\n      // recursive child routes\n      if (router.children) {\n        const tempRoutes = this.generateRoutes(router.children, data.path, data.title);\n        if (tempRoutes.length >= 1) {\n          res = [...res, ...tempRoutes];\n        }\n      }\n    }\n    return res;\n  }", "CodeBleu_score": 81.38014849998875}, {"code": "generateRoutes(routes, basePath = '/', prefixTitle = []){\n\tlet res = []\n\n  for (const router of routes) {\n    // skip hidden router\n    if (router.hidden) { continue }\n\n    const data = {\n      path: path.resolve(basePath, router.path),\n      title: [...prefixTitle]\n    }\n\n    if (router.meta && router.meta.title) {\n      data.title = [...data.title, router.meta.title]\n\n      if (router.redirect !== 'noRedirect') {\n        // only push the routes with title\n        // special case: need to exclude parent router without redirect\n        res.push(data)\n      }\n    }\n\n    // recursive child routes\n    if (router.children) {\n      const tempRoutes = this.generateRoutes(router.children, data.path, data.title)\n      if (tempRoutes.length >= 1) {\n        res = [...res, ...tempRoutes]\n      }\n    }\n  }\n  return res\n}", "CodeBleu_score": 98.79944364315347}]}
{"instance_id": "c4e47c376d30", "generation_result": [{"code": "closeSidebar(evt){\n\tconst parent = evt.target.closest('.rightPanel')\n  if (!parent) {\n    this.show = false\n    window.removeEventListener('click', this.closeSidebar)\n  }\n}", "CodeBleu_score": 95.55322020763275}, {"code": "closeSidebar(evt){\n\tconst parent = evt.target.closest('.rightPanel')\n  if (!parent) {\n    this.show = false\n    window.removeEventListener('click', this.closeSidebar)\n  }\n}", "CodeBleu_score": 95.55322020763275}, {"code": "closeSidebar(evt){\n\tconst parent = evt.target.closest('.rightPanel')\n  if (!parent) {\n    this.show = false\n    window.removeEventListener('click', this.closeSidebar)\n  }\n}", "CodeBleu_score": 95.55322020763275}]}
{"instance_id": "ab91e02736a1", "generation_result": [{"code": "click(){\n\tif (!screenfull.enabled) {\n      this.$message({\n        message: 'you browser can not work',\n        type: 'warning'\n      })\n      return false\n    }\n    screenfull.toggle()\n  }", "CodeBleu_score": 69.2272376112519}, {"code": "click(){\n\tif (!screenfull.enabled) {\n      this.$message({\n        message: 'you browser can not work',\n        type: 'warning'\n      })\n      return false\n    }\n    screenfull.toggle()\n  }", "CodeBleu_score": 69.2272376112519}, {"code": "click(){\n\tif (!screenfull.enabled) {\n      this.$message({\n        message: 'you browser can not work',\n        type: 'warning'\n      })\n      return false\n    }\n    screenfull.toggle()\n  }", "CodeBleu_score": 69.2272376112519}]}
{"instance_id": "3f27cb09d8c2", "generation_result": [{"code": "function checkPermission(el, binding) {\n\tconst roles = store.state.user.roles\n  const permissionRoles = binding.value\n  if (permissionRoles && permissionRoles.length > 0) {\n    const hasPermission = roles.some(role => permissionRoles.includes(role))\n    if (!hasPermission) {\n      el.parentNode && el.parentNode.removeChild(el)\n    }\n  } else {\n    throw new Error('need roles! Like v-permission=\"[\\'admin\\',\\'editor\\']\"')\n  }\n}", "CodeBleu_score": 49.031380322831765}, {"code": "function checkPermission(el, binding) {\n\tconst roles = store.getters['auth/roles'];\n    const permissionRoles = binding.value;\n\n    if (permissionRoles.length > 0) {\n        if (!roles.some(role => permissionRoles.includes(role))) {\n            el.parentNode.removeChild(el);\n        }\n    } else {\n        throw new Error('[vue-access-control] v-permission directive requires roles.');\n    }\n}", "CodeBleu_score": 30.510212496993}, {"code": "function checkPermission(el, binding) {\n\tconst roles = store.getters['auth/permissionRoles'];\n    const permissionRoles = binding.value;\n    if (permissionRoles && permissionRoles.length > 0) {\n        const hasPermission = roles.some((role) => permissionRoles.includes(role));\n        if (!hasPermission) {\n            el.parentNode && el.parentNode.removeChild(el);\n        }\n    }\n    else {\n        throw new Error('[vue-role-directive] You must specify a roles array!');\n    }\n}", "CodeBleu_score": 46.20914480792036}]}
{"instance_id": "04e47e771281", "generation_result": [{"code": "async inviteNewUser(\n    @GqlUser() adminUser: AuthUser,\n    @Args({\n      name: 'inviteeEmail',\n      description: 'invitee email',\n    })\n    inviteeEmail: string,\n  ): Promise<InvitedUser>{\n\tconst inviteUserResult = await this.adminService.inviteUserToSignInViaEmail(\n      adminUser,\n      inviteeEmail,\n    );\n\n    if (E.isLeft(inviteUserResult)) {\n      throw new Error(inviteUserResult.left.message);\n    }\n\n    return inviteUserResult.right;\n  }", "CodeBleu_score": 54.004643494670425}, {"code": "async inviteNewUser(\n    @GqlUser() adminUser: AuthUser,\n    @Args({\n      name: 'inviteeEmail',\n      description: 'invitee email',\n    })\n    inviteeEmail: string,\n  ): Promise<InvitedUser>{\n\tconst invitee = await this.userService.findOneByEmail(inviteeEmail);\n    if (invitee) {\n      throw new Error(`User with email ${inviteeEmail} already exists`);\n    }\n    const inviteeUser = await this.userService.createUser(\n      {\n        email: inviteeEmail,\n        password: '',\n        firstName: '',\n        lastName: '',\n        role: UserRole.INVITED,\n        status: UserStatus.INVITED,\n      },\n      true,\n    );\n    const inviteeUserId = inviteeUser.id;\n    const inviteeUserEmail = inviteeUser.email;\n    const inviteeUserRole = inviteeUser.role;\n    const inviteeUserStatus = inviteeUser.status;\n    const inviteeUserCreatedAt = inviteeUser.createdAt;\n    const inviteeUserUpdatedAt = inviteeUser.updatedAt;\n    const inviteeUserCreatedBy = adminUser.id;\n    const inviteeUserUpdatedBy = adminUser.id;\n    const inviteeUserCreatedByIp = adminUser.ipAddress;\n    const inviteeUserUpdatedByIp = adminUser.ipAddress;\n    const inviteeUserInvitedBy = adminUser.id;\n    const inviteeUserInvitedByIp = adminUser.ipAddress;\n    const inviteeUserInvitedAt = new Date();\n    const inviteeUserInvitedByEmail = adminUser.email;\n    const inviteeUserInvitedByName = adminUser.name;\n    const inviteeUserInvitedByRole = adminUser.role;\n    const inviteeUserInvitedByStatus = adminUser.status;\n    const inviteeUserInvitedByCreatedAt = adminUser.createdAt;\n    const inviteeUserInvitedByUpdatedAt = adminUser.updatedAt;\n    const inviteeUserInvitedByCreatedBy = adminUser.createdBy;\n    const inviteeUserInvitedByUpdatedBy = adminUser.updatedBy;\n    const inviteeUserInvitedByCreatedByIp = adminUser.createdBy", "CodeBleu_score": 40.24177027567233}, {"code": "async inviteNewUser(\n    @GqlUser() adminUser: AuthUser,\n    @Args({\n      name: 'inviteeEmail',\n      description: 'invitee email',\n    })\n    inviteeEmail: string,\n  ): Promise<InvitedUser>{\n\tconst inviteUserResult = await this.adminService.inviteUserToSignInViaEmail(\n      adminUser,\n      inviteeEmail,\n    );\n    if (E.isLeft(inviteUserResult)) {\n      throw new Error(inviteUserResult.left.description);\n    }\n    return inviteUserResult.right;\n  }", "CodeBleu_score": 53.7779351568054}]}
{"instance_id": "3f25736bfbcd", "generation_result": [{"code": "async googleAuthRedirect(@Request() req, @Res() res){\n\tconst { code } = req.query;\n  const { user } = await this.authService.generateAuthTokens(code);\n  this.authService.setAuthCookies(res, user);\n  res.redirect(this.configService.get('FRONTEND_URL'));\n}", "CodeBleu_score": 38.571510106746544}, {"code": "async googleAuthRedirect(@Request() req, @Res() res){\n\tconst result = await this.authService.generateAuthTokens(req.user)\n  if (E.isLeft(result)) {\n    throw new Error(result.value)\n  }\n  const { accessToken, refreshToken } = result.value\n  this.authService.setAuthCookies(res, accessToken, refreshToken)\n  res.redirect(process.env.GOOGLE_REDIRECT_URI)\n}", "CodeBleu_score": 46.37298482926118}, {"code": "async googleAuthRedirect(@Request() req, @Res() res){\n\ttry {\n    const { tokens, user } = await this.authService.generateAuthTokens(req.user as User);\n    this.authService.setAuthCookies(res, tokens);\n    res.redirect(process.env.GOOGLE_REDIRECT_URL);\n  } catch (err) {\n    throwHTTPErr(err, res);\n  }\n}", "CodeBleu_score": 46.71944106989184}]}
{"instance_id": "52aa108e3521", "generation_result": [{"code": "const mousewheel = function(element, callback){\n\tlet normalizeWheel = function(event) {\n        let normalized;\n        if (event.wheelDelta) {\n            normalized = event.wheelDelta / 120;\n        } else if (event.detail) {\n            normalized = -event.detail / 3;\n        } else {\n            // This is the IE case.\n            normalized = 0;\n        }\n        return normalized;\n    };\n\n    let handleMouseWheel = function(event) {\n        let normalizedDelta = normalizeWheel(event);\n        callback(event, normalizedDelta);\n    };\n\n    if (element.addEventListener) {\n        // IE9, Chrome, Safari, Opera\n        element.addEventListener('mousewheel', handleMouseWheel, false);\n        // Firefox\n        element.addEventListener('DOMMouseScroll', handleMouseWheel, false);\n    } else {\n        // IE 6/7/8\n        element.attachEvent('onmousewheel', handleMouseWheel);\n    }\n}", "CodeBleu_score": 34.20581050859066}, {"code": "const mousewheel = function(element, callback){\n\t// Create a callback function that will be called whenever the mouse wheel is scrolled.\n  const handleMouseWheel = function(event) {\n    // Normalize the wheel event.\n    const normalizedEvent = normalizeWheel(event);\n    // Call the callback function with the normalized event and the normalized wheel values.\n    callback(normalizedEvent, normalizedEvent.pixelY);\n  };\n\n  // Add the mouse wheel event listener to the given element.\n  element.addEventListener('DOMMouseScroll', handleMouseWheel);\n  element.addEventListener('mousewheel', handleMouseWheel);\n}", "CodeBleu_score": 42.611668814706086}, {"code": "const mousewheel = function(element, callback){\n\t// Add mouse wheel listener\n  element.addEventListener('DOMMouseScroll', function(event) {\n    // Normalize the wheel event\n    normalizeWheel(event);\n    // Call the callback\n    callback.apply(element, [event, event.detail]);\n  });\n  element.addEventListener('mousewheel', function(event) {\n    // Normalize the wheel event\n    normalizeWheel(event);\n    // Call the callback\n    callback.apply(element, [event, event.detail]);\n  });\n}", "CodeBleu_score": 42.13047337917138}]}
{"instance_id": "bb9e14122636", "generation_result": [{"code": "let i18nHandler = function(){\n\tlet vuei18n = Object.getPrototypeOf(this || Vue).$t;\n  if (typeof vuei18n === 'function' && Object.prototype.hasOwnProperty.call(Vue, 'locale')) {\n    if (!this.$_vee_locale_merged) {\n      Vue.locale(this.$_vee_locale, deepmerge(vuei18n.apply(this, ['$v']), this.$_vee_locale_data));\n      this.$_vee_locale_merged = true;\n    }\n    return vuei18n.apply(this, arguments);\n  }\n}", "CodeBleu_score": 54.0363405622816}, {"code": "let i18nHandler = function(){\n\tlet vuei18n = Object.getPrototypeOf(this || Vue).$t;\n  if (typeof vuei18n === 'function' && Object.prototype.hasOwnProperty.call(Vue, 'locale')) {\n    if (!this.$_vee_locale_merged) {\n      this.$_vee_locale_merged = true;\n      Vue.locale(\n        this.$_vee_locale || this.$_vee_locale_fallback || this.$locale || this.$i18n.locale || 'en',\n        deepmerge(\n          {\n            messages: this.$_vee_locale_data || {}\n          },\n          this.$i18n.messages[this.$_vee_locale || this.$_vee_locale_fallback || this.$locale || this.$i18n.locale || 'en']\n        )\n      );\n    }\n    return vuei18n.apply(this, arguments);\n  }\n}", "CodeBleu_score": 51.46034356610885}, {"code": "let i18nHandler = function(){\n\tconst vuei18n = Object.getPrototypeOf(this || Vue).$t;\n  if (typeof vuei18n === 'function' && typeof Vue.locale === 'function') {\n    if (!this.merged) {\n      this.merged = true;\n      Vue.locale(\n        Vue.config.lang,\n        deepmerge(Vue.locale(Vue.config.lang), this.data)\n      );\n    }\n    return vuei18n.apply(this, arguments);\n  }\n}", "CodeBleu_score": 65.27808568357526}]}
{"instance_id": "b0608b85127a", "generation_result": [{"code": "function broadcast(componentName, eventName, params){\n\tthis.$children.forEach(child => {\n    var name = child.$options.componentName;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}", "CodeBleu_score": 89.52832496527148}, {"code": "function broadcast(componentName, eventName, params){\n\tthis.$children.forEach(child => {\n    var name = child.$options.componentName;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}", "CodeBleu_score": 89.52832496527148}, {"code": "function broadcast(componentName, eventName, params){\n\tthis.$children.forEach(child => {\n    var name = child.$options.componentName;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}", "CodeBleu_score": 89.52832496527148}]}
{"instance_id": "da57b9dc5023", "generation_result": [{"code": "aria.Utils.focusFirstDescendant = function(element){\n\tvar childNodes = element.childNodes;\n  var childCount = childNodes.length;\n  var node;\n  for (var i = 0; i < childCount; i++) {\n    node = childNodes[i];\n    if (node.nodeType == 1 && aria.Utils.attemptFocus(node) || aria.Utils.focusFirstDescendant(node)) {\n      return true;\n    }\n  }\n  return false;\n}", "CodeBleu_score": 53.499065158293476}, {"code": "aria.Utils.focusFirstDescendant = function(element){\n\tvar child, tabindex, i, childNodes;\n\n  childNodes = element.childNodes;\n  for (i = 0; i < childNodes.length; i++) {\n    child = childNodes[i];\n    tabindex = child.getAttribute(\"tabindex\");\n    if (tabindex && tabindex >= 0 && aria.Utils.attemptFocus(child)) {\n      return true;\n    }\n    if (aria.Utils.focusFirstDescendant(child)) {\n      return true;\n    }\n  }\n  return false;\n}", "CodeBleu_score": 45.88890775916485}, {"code": "aria.Utils.focusFirstDescendant = function(element){\n\tvar child = element.firstChild;\n  while (child) {\n    if (aria.Utils.attemptFocus(child) || aria.Utils.focusFirstDescendant(child)) {\n      return true;\n    }\n    child = child.nextSibling;\n  }\n  return false;\n}", "CodeBleu_score": 49.0037481687495}]}
{"instance_id": "a029702e104d", "generation_result": [{"code": "highlight(index){\n\tif (!this.suggestionVisible || this.loading) { return; }\n    if (index < 0) {\n      this.highlightedIndex = -1;\n      return;\n    }\n    if (index >= this.suggestions.length) {\n      index = this.suggestions.length - 1;\n    }\n    const suggestion = this.$refs.suggestions.$el.querySelector('.el-autocomplete-suggestion__wrap');\n    const suggestionList = suggestion.querySelectorAll('.el-autocomplete-suggestion__list li');\n\n    let highlightItem = suggestionList[index];\n    let scrollTop = suggestion.scrollTop;\n    let offsetTop = highlightItem.offsetTop;\n\n    if (offsetTop + highlightItem.scrollHeight > (scrollTop + suggestion.clientHeight)) {\n      suggestion.scrollTop += highlightItem.scrollHeight;\n    }\n    if (offsetTop < scrollTop) {\n      suggestion.scrollTop -= highlightItem.scrollHeight;\n    }\n    this.highlightedIndex = index;\n    let $input = this.getInput();\n    $input.setAttribute('aria-activedescendant', `${this.id}-item-${this.highlightedIndex}`);\n  }", "CodeBleu_score": 97.93716163164956}, {"code": "highlight(index){\n\tif (!this.suggestionVisible || this.loading) {\n    return;\n  }\n  if (index < 0) {\n    this.highlightedIndex = -1;\n    return;\n  }\n  if (index >= this.suggestions.length) {\n    index = this.suggestions.length - 1;\n  }\n  const suggestion = this.$refs.suggestions.$el.querySelector('.el-autocomplete-suggestion__wrap');\n  const suggestionList = suggestion.querySelectorAll('.el-autocomplete-suggestion__list li');\n\n  let highlightItem = suggestionList[index];\n  let scrollTop = suggestion.scrollTop;\n  let offsetTop = highlightItem.offsetTop;\n\n  if (offsetTop + highlightItem.scrollHeight > (scrollTop + suggestion.clientHeight)) {\n    suggestion.scrollTop += highlightItem.scrollHeight;\n  }\n  if (offsetTop < scrollTop) {\n    suggestion.scrollTop -= highlightItem.scrollHeight;\n  }\n  this.highlightedIndex = index;\n  let $input = this.getInput();\n  $input.setAttribute('aria-activedescendant', `${this.id}-item-${this.highlightedIndex}`);\n}", "CodeBleu_score": 98.9668929573675}, {"code": "highlight(index){\n\tif (!this.suggestionVisible || this.loading) { return; }\n  if (index < 0) {\n    this.highlightedIndex = -1;\n    return;\n  }\n  if (index >= this.suggestions.length) {\n    index = this.suggestions.length - 1;\n  }\n  const suggestion = this.$refs.suggestions.$el.querySelector('.el-autocomplete-suggestion__wrap');\n  const suggestionList = suggestion.querySelectorAll('.el-autocomplete-suggestion__list li');\n\n  let highlightItem = suggestionList[index];\n  let scrollTop = suggestion.scrollTop;\n  let offsetTop = highlightItem.offsetTop;\n\n  if (offsetTop + highlightItem.scrollHeight > (scrollTop + suggestion.clientHeight)) {\n    suggestion.scrollTop += highlightItem.scrollHeight;\n  }\n  if (offsetTop < scrollTop) {\n    suggestion.scrollTop -= highlightItem.scrollHeight;\n  }\n  this.highlightedIndex = index;\n  let $input = this.getInput();\n  $input.setAttribute('aria-activedescendant', `${this.id}-item-${this.highlightedIndex}`);\n}", "CodeBleu_score": 99.0599994897085}]}
{"instance_id": "2db32f7ad18f", "generation_result": [{"code": "translateItem(index, activeIndex, oldIndex){\n\tconst parentType = this.$parent.type;\n  const parentDirection = this.parentDirection;\n  const length = this.$parent.items.length;\n  if (parentType !== 'card' && oldIndex !== undefined) {\n    this.animating = index === activeIndex || index === oldIndex;\n  }\n  if (index !== activeIndex && length > 2 && this.$parent.loop) {\n    index = this.processIndex(index, activeIndex, length);\n  }\n  if (parentType === 'card') {\n    if (parentDirection === 'vertical') {\n      console.warn('[Element Warn][Carousel]vertical direction is not supported in card mode');\n    }\n    this.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n    this.active = index === activeIndex;\n    this.translate = this.calcCardTranslate(index, activeIndex);\n    this.scale = this.active ? 1 : CARD_SCALE;\n  } else {\n    this.active = index === activeIndex;\n    const isVertical = parentDirection === 'vertical';\n    this.translate = this.calcTranslate(index, activeIndex, isVertical);\n    this.scale = 1;\n  }\n  this.ready = true;\n}", "CodeBleu_score": 99.20766485487468}, {"code": "translateItem(index, activeIndex, oldIndex){\n\tconst parentType = this.$parent.type;\n  const parentDirection = this.parentDirection;\n  const length = this.$parent.items.length;\n  if (parentType !== 'card' && oldIndex !== undefined) {\n    this.animating = index === activeIndex || index === oldIndex;\n  }\n  if (index !== activeIndex && length > 2 && this.$parent.loop) {\n    index = this.processIndex(index, activeIndex, length);\n  }\n  if (parentType === 'card') {\n    if (parentDirection === 'vertical') {\n      console.warn('[Element Warn][Carousel]vertical direction is not supported in card mode');\n    }\n    this.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n    this.active = index === activeIndex;\n    this.translate = this.calcCardTranslate(index, activeIndex);\n    this.scale = this.active ? 1 : CARD_SCALE;\n  } else {\n    this.active = index === activeIndex;\n    const isVertical = parentDirection === 'vertical';\n    this.translate = this.calcTranslate(index, activeIndex, isVertical);\n    this.scale = 1;\n  }\n  this.ready = true;\n}", "CodeBleu_score": 99.20766485487468}, {"code": "translateItem(index, activeIndex, oldIndex){\n\tconst parentType = this.$parent.type;\n        const parentDirection = this.parentDirection;\n        const length = this.$parent.items.length;\n        if (parentType !== 'card' && oldIndex !== undefined) {\n          this.animating = index === activeIndex || index === oldIndex;\n        }\n        if (index !== activeIndex && length > 2 && this.$parent.loop) {\n          index = this.processIndex(index, activeIndex, length);\n        }\n        if (parentType === 'card') {\n          if (parentDirection === 'vertical') {\n            console.warn('[Element Warn][Carousel]vertical direction is not supported in card mode');\n          }\n          this.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n          this.active = index === activeIndex;\n          this.translate = this.calcCardTranslate(index, activeIndex);\n          this.scale = this.active ? 1 : CARD_SCALE;\n        } else {\n          this.active = index === activeIndex;\n          const isVertical = parentDirection === 'vertical';\n          this.translate = this.calcTranslate(index, activeIndex, isVertical);\n          this.scale = 1;\n        }\n        this.ready = true;\n      }", "CodeBleu_score": 96.12650619660754}]}
{"instance_id": "49b9aa91f62e", "generation_result": [{"code": "handleButtonEnter(arrow){\n\tif (this.direction === 'vertical') return;\n  this.items.forEach((item, index) => {\n    if (arrow === this.itemInStage(item, index)) {\n      item.hover = true;\n    }\n  });\n}", "CodeBleu_score": 96.44057263089454}, {"code": "handleButtonEnter(arrow){\n\tif (this.direction === 'vertical') return;\n  this.items.forEach((item, index) => {\n    if (arrow === this.itemInStage(item, index)) {\n      item.hover = true;\n    }\n  });\n}", "CodeBleu_score": 96.44057263089454}, {"code": "handleButtonEnter(arrow){\n\tif (this.direction === 'vertical') return;\n      this.items.forEach((item, index) => {\n        if (arrow === this.itemInStage(item, index)) {\n          item.hover = true;\n        }\n      });\n    }", "CodeBleu_score": 93.888416301182}]}
{"instance_id": "85cdf6991b1f", "generation_result": [{"code": "scrollIntoView(){\n\tif (this.$isServer) return;\n\n  const menus = this.$refs.menu || [];\n  menus.forEach(menu => {\n    const menuElement = menu.$el;\n    if (menuElement) {\n      const container = menuElement.querySelector('.el-scrollbar__wrap');\n      const activeNode = menuElement.querySelector('.el-cascader-node.is-active') ||\n        menuElement.querySelector('.el-cascader-node.in-active-path');\n      scrollIntoView(container, activeNode);\n    }\n  });\n}", "CodeBleu_score": 97.98666928982229}, {"code": "scrollIntoView(){\n\tif (this.$isServer) return;\n\n  const menus = this.$refs.menu || [];\n  menus.forEach(menu => {\n    const menuElement = menu.$el;\n    if (menuElement) {\n      const container = menuElement.querySelector('.el-scrollbar__wrap');\n      const activeNode = menuElement.querySelector('.el-cascader-node.is-active') ||\n        menuElement.querySelector('.el-cascader-node.in-active-path');\n      scrollIntoView(container, activeNode);\n    }\n  });\n}", "CodeBleu_score": 97.98666928982229}, {"code": "scrollIntoView(){\n\tif (this.$isServer) return;\n\n  const menus = this.$refs.menu || [];\n  menus.forEach(menu => {\n    const menuElement = menu.$el;\n    if (menuElement) {\n      const container = menuElement.querySelector('.el-scrollbar__wrap');\n      const activeNode = menuElement.querySelector('.el-cascader-node.is-active') ||\n        menuElement.querySelector('.el-cascader-node.in-active-path');\n      scrollIntoView(container, activeNode);\n    }\n  });\n}", "CodeBleu_score": 97.98666928982229}]}
{"instance_id": "fc6784c79aa5", "generation_result": [{"code": "const rgb2hsv = function(r, g, b){\n\t// normalize RGB values to a range of 0 to 1\n  let normR = r / 255;\n  let normG = g / 255;\n  let normB = b / 255;\n\n  // find the max and min RGB values\n  let max = Math.max(normR, normG, normB);\n  let min = Math.min(normR, normG, normB);\n\n  // calculate the value (v)\n  let v = max;\n\n  // calculate the saturation (s)\n  let s = 0;\n  if (max !== 0) {\n    s = (max - min) / max;\n  }\n\n  // calculate the hue (h)\n  let h = 0;\n  if (s !== 0) {\n    if (max === normR) {\n      h = (normG - normB) / (max - min);\n    } else if (max === normG) {\n      h = 2 + (normB - normR) / (max - min);\n    } else {\n      h = 4 + (normR - normG) / (max - min);\n    }\n  }\n\n  // return the HSV values\n  return [h * 60, s * 100, v * 100];\n}", "CodeBleu_score": 30.0534969276156}, {"code": "const rgb2hsv = function(r, g, b){\n\tr = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = (max + min) / 2;\n  let s = (max + min) / 2;\n  const v = max;\n\n  const d = max - min;\n  s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return { h: h * 360, s: s * 100, v: v * 100 };\n}", "CodeBleu_score": 83.40472063187376}, {"code": "const rgb2hsv = function(r, g, b){\n\tconst max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = (max + min) / 2;\n  let s = (max + min) / 2;\n  let v = (max + min) / 2;\n\n  if (max === min) {\n    h = 0;\n    s = 0;\n  } else {\n    const d = max - min;\n    s = (max === r) ? d / (2 * max) : (max === g) ? d / (2 * g) : d / (2 * b);\n    h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;\n    h = Math.round(h * 60);\n  }\n\n  return {\n    h: h,\n    s: Math.round(s * 100),\n    v: Math.round(v * 100)\n  };\n}", "CodeBleu_score": 46.52547225228908}]}
{"instance_id": "37b868b6a5cc", "generation_result": [{"code": "handleDrag(event){\n\tconst rect = this.$el.getBoundingClientRect();\n    const { thumb } = this.$refs;\n\n    if (!this.vertical) {\n      let left = event.clientX - rect.left;\n      left = Math.max(thumb.offsetWidth / 2, left);\n      left = Math.min(left, rect.width - thumb.offsetWidth / 2);\n\n      this.color.set('alpha', Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));\n    } else {\n      let top = event.clientY - rect.top;\n      top = Math.max(thumb.offsetHeight / 2, top);\n      top = Math.min(top, rect.height - thumb.offsetHeight / 2);\n\n      this.color.set('alpha', Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));\n    }\n  }", "CodeBleu_score": 98.19083699731563}, {"code": "handleDrag(event){\n\tconst rect = this.$el.getBoundingClientRect();\n    const { thumb } = this.$refs;\n\n    if (!this.vertical) {\n      let left = event.clientX - rect.left;\n      left = Math.max(thumb.offsetWidth / 2, left);\n      left = Math.min(left, rect.width - thumb.offsetWidth / 2);\n\n      this.color.set('alpha', Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));\n    } else {\n      let top = event.clientY - rect.top;\n      top = Math.max(thumb.offsetHeight / 2, top);\n      top = Math.min(top, rect.height - thumb.offsetHeight / 2);\n\n      this.color.set('alpha', Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));\n    }\n  }", "CodeBleu_score": 98.19083699731563}, {"code": "handleDrag(event){\n\tconst rect = this.$el.getBoundingClientRect();\n  const { thumb } = this.$refs;\n\n  if (!this.vertical) {\n    let left = event.clientX - rect.left;\n    left = Math.max(thumb.offsetWidth / 2, left);\n    left = Math.min(left, rect.width - thumb.offsetWidth / 2);\n\n    this.color.set('alpha', Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));\n  } else {\n    let top = event.clientY - rect.top;\n    top = Math.max(thumb.offsetHeight / 2, top);\n    top = Math.min(top, rect.height - thumb.offsetHeight / 2);\n\n    this.color.set('alpha', Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));\n  }\n}", "CodeBleu_score": 99.02584191193593}]}
{"instance_id": "a3b2c61b5a1e", "generation_result": [{"code": "displayValue(){\n\tconst formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);\n  if (Array.isArray(this.userInput)) {\n    return [\n      this.userInput[0] || (formattedValue && formattedValue[0]) || '',\n      this.userInput[1] || (formattedValue && formattedValue[1]) || ''\n    ];\n  } else if (this.userInput !== null) {\n    return this.userInput;\n  } else if (formattedValue) {\n    return (this.type === 'dates' || this.type === 'years' || this.type === 'months')\n      ? formattedValue.join(', ')\n      : formattedValue;\n  } else {\n    return '';\n  }\n}", "CodeBleu_score": 98.74201874757095}, {"code": "displayValue(){\n\tconst formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);\n  if (Array.isArray(this.userInput)) {\n    return [\n      this.userInput[0] || (formattedValue && formattedValue[0]) || '',\n      this.userInput[1] || (formattedValue && formattedValue[1]) || ''\n    ];\n  } else if (this.userInput !== null) {\n    return this.userInput;\n  } else if (formattedValue) {\n    return (this.type === 'dates' || this.type === 'years' || this.type === 'months')\n      ? formattedValue.join(', ')\n      : formattedValue;\n  } else {\n    return '';\n  }\n}", "CodeBleu_score": 98.74201874757095}, {"code": "displayValue(){\n\tconst formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);\n  if (Array.isArray(this.userInput)) {\n    return [\n      this.userInput[0] || (formattedValue && formattedValue[0]) || '',\n      this.userInput[1] || (formattedValue && formattedValue[1]) || ''\n    ];\n  } else if (this.userInput !== null) {\n    return this.userInput;\n  } else if (formattedValue) {\n    return (this.type === 'dates' || this.type === 'years' || this.type === 'months')\n      ? formattedValue.join(', ')\n      : formattedValue;\n  } else {\n    return '';\n  }\n}", "CodeBleu_score": 98.74201874757095}]}
{"instance_id": "305dba2399e1", "generation_result": [{"code": "handleStartChange(event){\n\tconst value = this.parseString(this.userInput && this.userInput[0]);\n  if (value) {\n    this.userInput = [this.formatToString(value), this.displayValue[1]];\n    const newValue = [value, this.picker.value && this.picker.value[1]];\n    this.picker.value = newValue;\n    if (this.isValidValue(newValue)) {\n      this.emitInput(newValue);\n      this.userInput = null;\n    }\n  }\n}", "CodeBleu_score": 97.99890869036535}, {"code": "handleStartChange(event){\n\tconst value = this.parseString(this.userInput && this.userInput[0]);\n  if (value) {\n    this.userInput = [this.formatToString(value), this.displayValue[1]];\n    const newValue = [value, this.picker.value && this.picker.value[1]];\n    this.picker.value = newValue;\n    if (this.isValidValue(newValue)) {\n      this.emitInput(newValue);\n      this.userInput = null;\n    }\n  }\n}", "CodeBleu_score": 97.99890869036535}, {"code": "handleStartChange(event){\n\tconst value = this.parseString(this.userInput && this.userInput[0]);\n      if (value) {\n        this.userInput = [this.formatToString(value), this.displayValue[1]];\n        const newValue = [value, this.picker.value && this.picker.value[1]];\n        this.picker.value = newValue;\n        if (this.isValidValue(newValue)) {\n          this.emitInput(newValue);\n          this.userInput = null;\n        }\n      }\n    }", "CodeBleu_score": 95.82274323095822}]}
{"instance_id": "0f76d5fb83b3", "generation_result": [{"code": "bindScrollEvent(){\n\tconst bindFunction = (element, type) => {\n    element.wrap.onscroll = (event) => {\n      this.handleScroll(type, event);\n    };\n  };\n  bindFunction(this.hours, 'hours');\n  bindFunction(this.minutes, 'minutes');\n  bindFunction(this.seconds, 'seconds');\n}", "CodeBleu_score": 51.16369919893672}, {"code": "bindScrollEvent(){\n\tconst bindFunction = (element) => {\n    element.wrap.onscroll = (event) => {\n      this.handleScroll(element.type, event);\n    };\n  };\n  this.hours.forEach(bindFunction);\n  this.minutes.forEach(bindFunction);\n  this.seconds.forEach(bindFunction);\n}", "CodeBleu_score": 41.287180837631496}, {"code": "bindScrollEvent(){\n\tconst bindFunction = (element) => {\n        element.wrap.onscroll = (event) => {\n            this.handleScroll(element.type, event);\n        }\n    }\n    bindFunction(this.hours);\n    bindFunction(this.minutes);\n    bindFunction(this.seconds);\n}", "CodeBleu_score": 41.2203019827872}]}
{"instance_id": "fe8ad366d911", "generation_result": [{"code": "scrollDown(step){\n\tif (!this.activeScrollbar) {\n    this.emitSelectRange('hours')\n    return\n  }\n  let {\n    value,\n    list,\n    index,\n    step,\n    scrollbar\n  } = this\n  let newIndex = index + step\n  let newValue = value\n  let newList = list\n  let newScrollbar = scrollbar\n  if (scrollbar === 'hours') {\n    newList = list.filter(hour => !this.isDisabled(hour))\n    newIndex = newList.indexOf(list[index]) + step\n    newValue = newList[newIndex]\n    newScrollbar = 'hours'\n  } else {\n    newValue = value + step * 60\n    if (newValue < 0) {\n      newValue = 0\n    } else if (newValue >= 1440) {\n      newValue = 1439\n    }\n  }\n  this.modifyDateField(newValue)\n  this.adjustSpinner(newValue)\n  this.$nextTick(() => {\n    this.emitSelectRange(newScrollbar)\n  })\n}", "CodeBleu_score": 25.607046199840806}, {"code": "scrollDown(step){\n\tif (!this.activeScrollbar) {\n    this.emitSelectRange('hours');\n    return;\n  }\n\n  if (this.activeScrollbar === 'hours') {\n    const hours = this.date.getHours();\n    const newHours = hours + step;\n    const hoursList = this.getHoursList();\n\n    for (let i = 0; i < hoursList.length; i++) {\n      const hour = hoursList[i];\n      if (hour.value === hours) {\n        if (i + step >= hoursList.length) {\n          this.date.setHours(hoursList[0].value);\n        } else if (i + step < 0) {\n          this.date.setHours(hoursList[hoursList.length - 1].value);\n        } else {\n          this.date.setHours(hoursList[i + step].value);\n        }\n        break;\n      }\n    }\n  } else {\n    const minutes = this.date.getMinutes();\n    const newMinutes = minutes + step;\n    if (newMinutes >= 60) {\n      this.date.setMinutes(0);\n    } else if (newMinutes < 0) {\n      this.date.setMinutes(59);\n    } else {\n      this.date.setMinutes(newMinutes);\n    }\n  }\n\n  this.modifyDateField();\n  this.adjustSpinner();\n  this.emitSelectRange(this.activeScrollbar);\n}", "CodeBleu_score": 33.786241442815026}, {"code": "scrollDown(step){\n\tif (this.activeScrollbar === '') {\n        this.emitSelectRange('hours');\n        return;\n    }\n\n    let value = this.getScrollbarValue(this.activeScrollbar);\n    let newValue = value + step;\n\n    if (this.activeScrollbar === 'hours') {\n        let hours = this.getHours();\n        for (let i = 0; i < hours.length; i++) {\n            let hour = hours[i];\n            if (hour.value === value) {\n                if (i + 1 < hours.length) {\n                    newValue = hours[i + 1].value;\n                }\n                break;\n            }\n        }\n    } else {\n        if (newValue > 59) {\n            newValue = 0;\n        }\n    }\n\n    this.setScrollbarValue(this.activeScrollbar, newValue);\n    this.modifyDateField();\n    this.adjustSpinner();\n    this.emitSelectRange(this.activeScrollbar);\n}", "CodeBleu_score": 31.842447277125814}]}
{"instance_id": "9b22163fdfde", "generation_result": [{"code": "imgStyle(){\n\tlet style = {\n    transform: `scale(${this.state.scale}) rotate(${this.state.rotation}deg)`,\n    transition: this.state.transition ? 'transform 0.2s ease' : 'none',\n    position: 'absolute',\n    left: this.state.offsetX,\n    top: this.state.offsetY,\n    maxWidth: this.state.mode === 'CONTAIN' ? '100%' : 'none',\n    maxHeight: this.state.mode === 'CONTAIN' ? '100%' : 'none' };\n\n  return style;\n}", "CodeBleu_score": 36.60929774614703}, {"code": "imgStyle(){\n\tlet style = {\n    transform: 'scale(' + this.props.scale + ') rotate(' + this.props.rotate + 'deg)',\n    transition: this.props.enableTransition ? 'transform 1s ease-out' : 'none',\n    position: 'relative',\n    maxWidth: this.props.mode === 'CONTAIN' ? '100%' : 'initial',\n    maxHeight: this.props.mode === 'CONTAIN' ? '100%' : 'initial',\n    marginLeft: this.props.offsetX,\n    marginTop: this.props.offsetY };\n\n  return style;\n}", "CodeBleu_score": 33.07524661238467}, {"code": "imgStyle(){\n\tconst {\n    maxWidth,\n    maxHeight,\n    mode,\n    offsetX,\n    offsetY,\n    rotation,\n    scale,\n    transition,\n    transitionDuration,\n    transitionTimingFunction,\n    transitionDelay } = this.props;\n\n  let style = {\n    position: 'absolute',\n    transformOrigin: '0 0',\n    transition: transition ?\n    `${transitionDuration}ms ${transitionTimingFunction} ${transitionDelay}ms` :\n    'none',\n    transform: `scale(${scale}) rotate(${rotation}deg)`,\n    maxWidth: mode === 'CONTAIN' ? '100%' : maxWidth,\n    maxHeight: mode === 'CONTAIN' ? '100%' : maxHeight,\n    left: offsetX,\n    top: offsetY };\n\n\n  return style;\n}", "CodeBleu_score": 38.17531944975984}]}
{"instance_id": "3bf2230ab870", "generation_result": [{"code": "addLazyLoadListener(){\n\tif (this.$isServer) return;\n\n  const { scrollContainer } = this;\n  let _scrollContainer = null;\n\n  if (isHtmlElement(scrollContainer)) {\n    _scrollContainer = scrollContainer;\n  } else if (isString(scrollContainer)) {\n    _scrollContainer = document.querySelector(scrollContainer);\n  } else {\n    _scrollContainer = getScrollContainer(this.$el);\n  }\n\n  if (_scrollContainer) {\n    this._scrollContainer = _scrollContainer;\n    this._lazyLoadHandler = throttle(200, this.handleLazyLoad);\n    on(_scrollContainer, 'scroll', this._lazyLoadHandler);\n    this.handleLazyLoad();\n  }\n}", "CodeBleu_score": 98.49591016076185}, {"code": "addLazyLoadListener(){\n\tif (this.$isServer) return;\n\n  const { scrollContainer } = this;\n  let _scrollContainer = null;\n\n  if (isHtmlElement(scrollContainer)) {\n    _scrollContainer = scrollContainer;\n  } else if (isString(scrollContainer)) {\n    _scrollContainer = document.querySelector(scrollContainer);\n  } else {\n    _scrollContainer = getScrollContainer(this.$el);\n  }\n\n  if (_scrollContainer) {\n    this._scrollContainer = _scrollContainer;\n    this._lazyLoadHandler = throttle(200, this.handleLazyLoad);\n    on(_scrollContainer, 'scroll', this._lazyLoadHandler);\n    this.handleLazyLoad();\n  }\n}", "CodeBleu_score": 98.49591016076185}, {"code": "addLazyLoadListener(){\n\tif (this.$isServer) return;\n\n        const { scrollContainer } = this;\n        let _scrollContainer = null;\n\n        if (isHtmlElement(scrollContainer)) {\n          _scrollContainer = scrollContainer;\n        } else if (isString(scrollContainer)) {\n          _scrollContainer = document.querySelector(scrollContainer);\n        } else {\n          _scrollContainer = getScrollContainer(this.$el);\n        }\n\n        if (_scrollContainer) {\n          this._scrollContainer = _scrollContainer;\n          this._lazyLoadHandler = throttle(200, this.handleLazyLoad);\n          on(_scrollContainer, 'scroll', this._lazyLoadHandler);\n          this.handleLazyLoad();\n        }\n      }", "CodeBleu_score": 95.02745299075616}]}
{"instance_id": "7180fba29076", "generation_result": [{"code": "function transformQueryOrMutationCacheErrors<\n  TState extends\n    | DehydratedState['mutations'][0]\n    | DehydratedState['queries'][0],\n>(result: TState): TState {\n\tif (result.state === 'error' && result.error instanceof TRPCClientError) {\n    return {\n      ...result,\n      error: new TRPCClientError({\n        message: result.error.message,\n        data: result.error.data,\n        shape: result.error.shape,\n      }),\n    };\n  }\n  return result;\n}", "CodeBleu_score": 32.9761588513103}, {"code": "function transformQueryOrMutationCacheErrors<\n  TState extends\n    | DehydratedState['mutations'][0]\n    | DehydratedState['queries'][0],\n>(result: TState): TState {\n\tconst { error } = result;\n  if (!error) {\n    return result;\n  }\n\n  if (error instanceof TRPCClientError) {\n    const newError = new TRPCClientError({\n      message: error.message,\n      data: error.data,\n      code: error.code,\n      path: error.path,\n      shape: error.shape,\n    });\n    return { ...result, error: newError };\n  }\n\n  return result;\n}", "CodeBleu_score": 53.08545244240893}, {"code": "function transformQueryOrMutationCacheErrors<\n  TState extends\n    | DehydratedState['mutations'][0]\n    | DehydratedState['queries'][0],\n>(result: TState): TState {\n\tif (!result.error) return result;\n  if (!(result.error instanceof TRPCClientError)) return result;\n  return {\n    ...result,\n    error: {\n      ...result.error,\n      shape: result.error.shape,\n      data: result.error.data,\n      message: result.error.message,\n    },\n  };\n}", "CodeBleu_score": 28.308239419821067}]}
{"instance_id": "b0ff12e8aa0d", "generation_result": [{"code": "WithTRPC.getInitialProps = async (appOrPageCtx: AppContextType) => {\n\tconst { ctx, AppTree } = appOrPageCtx\n  const appProps = await App.getInitialProps(appOrPageCtx)\n  const trpcProps = await getTRPCInitialProps(ctx, AppTree)\n  return {\n    ...appProps,\n    ...trpcProps,\n  }\n}", "CodeBleu_score": 15.457776641952142}, {"code": "WithTRPC.getInitialProps = async (appOrPageCtx: AppContextType) => {\n\tconst { ctx, AppTree, Component, router } = appOrPageCtx;\n    const trpcContext = createTRPCContext(ctx, appOrPageCtx.trpcState);\n    const appOrPageProps = Component.getInitialProps ? await Component.getInitialProps(appOrPageCtx) : {};\n    const pageProps = await getTRPCInitialProps(trpcContext, appOrPageProps);\n    return {\n        ...appOrPageProps,\n        ...pageProps,\n        trpcState: trpcContext.trpcState,\n        pageProps: pageProps.pageProps,\n        initialZoom: pageProps.initialZoom,\n        initialUrl: pageProps.initialUrl,\n    };\n}", "CodeBleu_score": 28.65104170403877}, {"code": "WithTRPC.getInitialProps = async (appOrPageCtx: AppContextType) => {\n\tconst { ctx, AppTree, Component } = appOrPageCtx;\n  const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n  const trpcState = await getTRPCStateFromPageTree({\n    AppTree,\n    ctx,\n    trpcClientOptions: {\n      url: '/api/trpc',\n    },\n  });\n  return {\n    ...pageProps,\n    trpcState,\n  };\n}", "CodeBleu_score": 23.65462376175413}]}
{"instance_id": "b46c87572278", "generation_result": [{"code": "export function formDataToObject(formData: FormData){\n\tconst result: any = {};\n  formData.forEach((value, key) => {\n    const parts = key.split(/[\\.\\[\\]]/).filter(Boolean);\n    const last = parts.pop();\n    let target = result;\n    for (const part of parts) {\n      if (part in target) {\n        target = target[part];\n      } else {\n        target = target[part] = {};\n      }\n    }\n    if (Array.isArray(target[last])) {\n      target[last].push(value);\n    } else {\n      target[last] = value;\n    }\n  });\n  return result;\n}", "CodeBleu_score": 50.21641402975987}, {"code": "export function formDataToObject(formData: FormData){\n\tconst result: any = {};\n  for (const [key, value] of formData.entries()) {\n    let parts = key.split(/[\\.\\[\\]]/).filter(Boolean);\n    let last = parts.pop();\n    let target = result;\n    for (const part of parts) {\n      if (!(part in target)) {\n        target[part] = {};\n      }\n      target = target[part];\n    }\n    target[last] = value;\n  }\n  return result;\n}", "CodeBleu_score": 59.041359156450504}, {"code": "export function formDataToObject(formData: FormData){\n\tconst object = {};\n  for (const [key, value] of formData.entries()) {\n    const parts = key.split(/[\\.\\[\\]]/).filter(part => part.length);\n    const lastPart = parts.pop();\n    let current = object;\n    for (const part of parts) {\n      current = current[part] = current[part] || {};\n    }\n    current[lastPart] = value;\n  }\n  return object;\n}", "CodeBleu_score": 55.82381566983952}]}
{"instance_id": "b63467546c58", "generation_result": [{"code": "export async function experimental_revalidateEndpoint(req: Request){\n\tconst body = await req.json();\n  const cacheTag = body.cacheTag;\n  if (typeof cacheTag !== 'string') {\n    return {\n      status: 400,\n      body: {\n        error: 'cacheTag must be a string',\n      },\n    };\n  }\n  await revalidateTag(cacheTag);\n  return {\n    status: 200,\n    body: {\n      success: true,\n      timestamp: Date.now(),\n    },\n  };\n}", "CodeBleu_score": 53.08889774013578}, {"code": "export async function experimental_revalidateEndpoint(req: Request){\n\tconst body = await req.json();\n  const cacheTag = body.cacheTag;\n\n  if (typeof cacheTag !== 'string') {\n    return new Response(\n      JSON.stringify({\n        error: 'The request body must contain a cacheTag property that is a string.',\n      }),\n      {\n        status: 400,\n      }\n    );\n  }\n\n  const revalidateTagResult = await revalidateTag(cacheTag);\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      timestamp: Date.now(),\n      revalidateTagResult,\n    }),\n    {\n      status: 200,\n    }\n  );\n}", "CodeBleu_score": 53.28733394784888}, {"code": "export async function experimental_revalidateEndpoint(req: Request){\n\tconst { cacheTag } = req.json\n  if (typeof cacheTag !== 'string') {\n    return {\n      status: 400,\n      body: `Invalid cacheTag: ${cacheTag}`,\n    }\n  }\n  await revalidateTag(cacheTag)\n  return {\n    status: 200,\n    body: `Revalidated ${cacheTag} at ${Date.now()}`,\n  }\n}", "CodeBleu_score": 37.035936133671534}]}
{"instance_id": "4cc5d9754d1f", "generation_result": [{"code": "export function createUseProxy<TRouter extends AnyRouter>{\n\t(opts: UseProxyOptions<TRouter>): UseProxyResult<TRouter>\n}", "CodeBleu_score": 4.577173618373326}, {"code": "export function createUseProxy<TRouter extends AnyRouter>{\n\t(\n    client: TRPCClient<TRouter>,\n    opts: UseProxyOptions<TRouter>\n  ): TRouter;\n}", "CodeBleu_score": 13.59797484745566}, {"code": "export function createUseProxy<TRouter extends AnyRouter>{\n\t(client: TRPCClient<TRouter>, opts: {\n    path: {\n      join: (...paths: string[]) => string;\n    };\n  }): TRouter;\n}", "CodeBleu_score": 11.508083379043033}]}
{"instance_id": "ec07b15792dd", "generation_result": [{"code": "const Accordion = ({ child, name }: AccordionProps) =>{\n\tconst [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <AccordionPrimitive\n      isOpen={isOpen}\n      onToggle={setIsOpen}\n      trigger={\n        <AccordionTrigger>\n          <AccordionTriggerButton>\n            {name}\n            <AccordionTriggerIcon\n              transform={isOpen ? \"rotate(180deg)\" : \"rotate(0deg)\"}\n              transition=\"transform 0.2s ease\"\n            >\n              <ChevronDownIcon />\n            </AccordionTriggerIcon>\n          </AccordionTriggerButton>\n        </AccordionTrigger>\n      }\n    >\n      <AccordionContent>\n        <AccordionPanel>{child}</AccordionPanel>\n      </AccordionContent>\n    </AccordionPrimitive>\n  );\n}", "CodeBleu_score": 23.834807438564003}, {"code": "const Accordion = ({ child, name }: AccordionProps) =>{\n\tconst [isOpen, setIsOpen] = useState(false);\n  const toggleOpen = () => setIsOpen(!isOpen);\n\n  return (\n    <AccordionPrimitive\n      open={isOpen}\n      onOpenChange={setIsOpen}\n      trigger={\n        <AccordionTrigger className=\"accordion-trigger\">\n          <Button\n            className=\"accordion-trigger-button\"\n            onClick={toggleOpen}\n            variant=\"ghost\"\n            size=\"small\"\n            iconRight={\n              <ChevronDownIcon\n                className=\"accordion-trigger-chevron\"\n                style={{\n                  transform: `rotate(${isOpen ? 180 : 0}deg)`,\n                  transition: `transform 100ms ease-out`,\n                }}\n              />\n            }\n          >\n            {name}\n          </Button>\n        </AccordionTrigger>\n      }\n    >\n      <AccordionPanel className=\"accordion-panel\">{child}</AccordionPanel>\n    </AccordionPrimitive>\n  );\n}", "CodeBleu_score": 36.11809920110625}, {"code": "const Accordion = ({ child, name }: AccordionProps) =>{\n\tconst [isOpen, setIsOpen] = useState(false);\n  return (\n    <AccordionPrimitive\n      open={isOpen}\n      onOpenChange={setIsOpen}\n      sx={{\n        border: '1px solid',\n        borderColor: 'gray',\n        borderRadius: 4,\n        backgroundColor: 'white',\n        boxShadow: '0px 2px 2px rgba(0, 0, 0, 0.25)',\n        '&:hover': {\n          boxShadow: '0px 2px 2px rgba(0, 0, 0, 0.25)',\n        },\n      }}\n    >\n      {({ open }) => (\n        <>\n          <AccordionPrimitive.Button\n            sx={{\n              backgroundColor: 'white',\n              color: 'gray',\n              fontWeight: 'bold',\n              fontSize: 1,\n              border: '1px solid',\n              borderColor: 'gray',\n              borderRadius: 4,\n              borderTop: 'none',\n              borderLeft: 'none',\n              borderRight: 'none',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              padding: 3,\n              '&:hover': {\n                backgroundColor: 'gray',\n                color: 'white',\n              },\n            }}\n          >\n            {name}\n            <ChevronDownIcon\n              sx={{\n                transition: 'all 0.2s ease',\n                transform: open ? 'rotate(180deg)' : 'rotate(0deg)',\n              }}\n            />\n          </AccordionPrimitive.Button>\n          <AccordionPrimitive.Panel\n            sx={{\n              border: '1px solid',\n              borderColor: 'gray',\n              borderRadius: 4,\n              borderTop: 'none',\n              backgroundColor: 'white',\n              boxShadow: '0px 2px 2px rgba(0, 0, 0, 0.25)',\n              '&:hover': {\n                boxShadow: '0px 2px", "CodeBleu_score": 24.347729421222088}]}
{"instance_id": "728fa96ca3cf", "generation_result": [{"code": "function Menu({ icon, name, items, chevron, buttonPosition = \"top\" }: MenuProps){\n\tconst menu = useMenuState();\n  return (\n    <div className=\"relative\">\n      <MenuButton\n        {...menu}\n        className={`${\n          buttonPosition === \"top\"\n            ? \"text-left\"\n            : buttonPosition === \"right\"\n            ? \"text-right\"\n            : \"text-center\"\n        }\n        bg-white dark:bg-gray-800\n        border border-gray-300 dark:border-gray-700\n        rounded-md shadow-sm\n        px-4 py-2 inline-flex items-center\n        text-sm font-medium text-gray-700 dark:text-gray-300\n        hover:bg-gray-50 dark:hover:bg-gray-700\n        focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500`}\n      >\n        {icon}\n        {name && (\n          <span className=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">\n            {name}\n          </span>\n        )}\n        {chevron && (\n          <ChevronDownIcon\n            className=\"ml-2 h-5 w-5 text-gray-400\"\n            aria-hidden=\"true\"\n          />\n        )}\n      </MenuButton>\n      <MenuItems\n        {...menu}\n        static\n        className=\"origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\"\n      >\n        {items.map((item) => (\n          <MenuItem\n            {...item}\n            className={({ active }) =>\n              `${active ? \"bg-gray-100\" : \"\"}\n              block px-4 py-2 text-sm text-gray-700 dark:text-gray-300`\n            }\n          />\n        ))}\n      </MenuItems>\n    </div>\n  );\n}", "CodeBleu_score": 21.001640700679676}, {"code": "function Menu({ icon, name, items, chevron, buttonPosition = \"top\" }: MenuProps){\n\tconst menu = useMenuState();\n  const buttonRef = useRef(null);\n\n  return (\n    <>\n      <MenuButton\n        ref={buttonRef}\n        {...menu}\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n          gap: \"0.5rem\",\n          padding: \"0.5rem\",\n          borderRadius: \"0.5rem\",\n          backgroundColor: \"white\",\n          color: \"black\",\n          boxShadow: \"0 0 0 1px rgba(0,0,0,0.05), 0 8px 24px rgba(0,0,0,0.1)\",\n        }}\n      >\n        {icon}\n        {name}\n        {chevron && (\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            fill=\"currentColor\"\n            viewBox=\"0 0 16 16\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"\n            />\n          </svg>\n        )}\n      </MenuButton>\n      <MenuItems\n        {...menu}\n        style={{\n          backgroundColor: \"white\",\n          color: \"black\",\n          boxShadow: \"0 0 0 1px rgba(0,0,0,0.05), 0 8px 24px rgba(0,0,0,0.1)\",\n          borderRadius: \"0.5rem\",\n        }}\n      >\n        {items", "CodeBleu_score": 20.073803450342545}, {"code": "function Menu({ icon, name, items, chevron, buttonPosition = \"top\" }: MenuProps){\n\tconst menu = useMenuState();\n  const ref = useRef<HTMLButtonElement>(null);\n  const open = useOpenClosed();\n  const [buttonRef, { height }] = useCombinedRefs(ref);\n  const [buttonHeight, setButtonHeight] = useState<number | undefined>();\n  const [buttonWidth, setButtonWidth] = useState<number | undefined>();\n\n  useLayoutEffect(() => {\n    if (buttonRef.current && !buttonHeight) {\n      const { height, width } = buttonRef.current.getBoundingClientRect();\n      setButtonHeight(height);\n      setButtonWidth(width);\n    }\n  }, [buttonRef, buttonHeight, buttonWidth]);\n\n  return (\n    <MenuPrimitive.Root {...menu} aria-label=\"Menu\">\n      <Button\n        {...menu.button}\n        ref={buttonRef}\n        onPointerUp={(event) => {\n          if (buttonRef.current) {\n            const { height, width } = buttonRef.current.getBoundingClientRect();\n            setButtonHeight(height);\n            setButtonWidth(width);\n          }\n          menu.button.onPointerUp(event);\n        }}\n      >\n        {icon && (\n          <Icon\n            icon={icon}\n            style={{\n              marginRight: \"0.5rem\",\n              marginBottom: \"0.25rem\",\n            }}\n          />\n        )}\n        {name && <span>{name}</span>}\n        {chevron && (\n          <Icon\n            icon={chevron}\n            style={{\n              marginLeft: \"0.5rem\",\n              marginBottom: \"0.25rem\",\n            }}\n          />\n        )}\n      </Button>\n      <Portal>\n        <MenuPrimitive.Overlay\n          data-testid=\"menu-overlay\"\n          style={{\n            zIndex: open ? 100 : 0,\n          }}\n        />\n        {open && (\n          <MenuPrimitive.Positioner\n            style={{\n              position: \"fixed\",\n              top: 0,\n              bottom: 0,\n              left: 0,", "CodeBleu_score": 22.61141742395232}]}
{"instance_id": "a2733fb19224", "generation_result": [{"code": "const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {\n\tconst { scrollTop, scrollHeight, clientHeight } = event.currentTarget;\n    const threshold = 10;\n    const hasUserScrolled = scrollTop + clientHeight + threshold < scrollHeight;\n    setHasUserScrolled(hasUserScrolled);\n}", "CodeBleu_score": 64.03808623707516}, {"code": "const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {\n\tconst {\n        target: {\n            scrollTop,\n            scrollHeight,\n            clientHeight\n        }\n    } = event;\n    const hasUserScrolled = (scrollTop + clientHeight) >= (scrollHeight - 10);\n    setHasUserScrolled(hasUserScrolled);\n}", "CodeBleu_score": 47.34628211640104}, {"code": "const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {\n\tconst {scrollTop, scrollHeight, clientHeight} = event.currentTarget;\n  const hasUserScrolled = scrollTop + clientHeight < scrollHeight - 10;\n  setHasUserScrolled(hasUserScrolled);\n}", "CodeBleu_score": 59.16011047007005}]}
{"instance_id": "128baf9be3e8", "generation_result": [{"code": "const handleScrollToBottom = (behaviour: \"instant\" | \"smooth\") =>{\n\tif (scrollRef.current) {\n    scrollRef.current.scrollTo({\n      top: scrollRef.current.scrollHeight,\n      behavior: behaviour,\n    });\n  }\n}", "CodeBleu_score": 62.428659408387766}, {"code": "const handleScrollToBottom = (behaviour: \"instant\" | \"smooth\") =>{\n\tif (scrollRef.current) {\n    scrollRef.current.scrollTo({\n      top: scrollRef.current.scrollHeight,\n      behavior: behaviour,\n    });\n  }\n}", "CodeBleu_score": 62.428659408387766}, {"code": "const handleScrollToBottom = (behaviour: \"instant\" | \"smooth\") =>{\n\tif (scrollRef.current) {\n    scrollRef.current.scrollTo({\n      top: scrollRef.current.scrollHeight,\n      behavior: behaviour,\n    });\n  }\n}", "CodeBleu_score": 62.428659408387766}]}
{"instance_id": "070c4b1ac0b5", "generation_result": [{"code": "const saveElementAsImage = (elementId: string) =>{\n\tconst element = document.getElementById(elementId);\n  if (element === null) {\n    alert(\"Error: Element not found\");\n    return;\n  }\n  const style = getComputedStyle(element);\n  const html2canvas = require(\"html2canvas\");\n  html2canvas(element, {\n    allowTaint: true,\n    useCORS: true,\n    backgroundColor: style.backgroundColor,\n    height: style.height,\n    width: style.width,\n    scrollY: -window.scrollY,\n    scrollX: -window.scrollX\n  })\n    .then(canvas => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const link = document.createElement(\"a\");\n      link.download = \"agent-gpt-output.png\";\n      link.href = imgData;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    })\n    .catch(error => {\n      alert(\"Error: Saving the image failed\");\n      console.error(error);\n    });\n}", "CodeBleu_score": 48.7588895340309}, {"code": "const saveElementAsImage = (elementId: string) =>{\n\tconst element = document.getElementById(elementId);\n  if (element) {\n    htmlToImage\n      .toJpeg(element, {\n        backgroundColor: '#ffffff',\n        style: {\n          margin: '0px',\n          padding: '0px',\n          width: '100%',\n          height: '100%',\n          overflow: 'hidden',\n          'font-family': 'Arial, Helvetica, sans-serif',\n          'font-size': '16px',\n          'font-weight': 'normal',\n          'line-height': '1.5',\n          'letter-spacing': 'normal',\n          'word-spacing': 'normal',\n          'text-align': 'left',\n          'text-decoration': 'none',\n          'text-indent': '0px',\n          'text-shadow': 'none',\n          'text-transform': 'none',\n          'white-space': 'normal',\n          'word-break': 'normal',\n          'word-wrap': 'normal',\n          'vertical-align': 'baseline',\n          'list-style-type': 'none',\n          'list-style-position': 'outside',\n          'list-style-image': 'none',\n          'pointer-events': 'auto',\n          'cursor': 'default',\n          'background-color': 'transparent',\n          'border-style': 'none',\n          'border-width': '0px',\n          'border-color': 'transparent',\n          'border-image': 'none',\n          'border-radius': '0px',\n          'box-shadow': 'none',\n          'box-sizing': 'border-box',\n          'tab-size': '8',\n          'float': 'none',\n          'clear': 'none',\n          'overflow-wrap': 'normal',\n          'overflow-overflow': 'visible',\n          'opacity': '1',\n          'color': '#000000',\n          'outline-style': 'none',\n          'outline-width': '0px',\n          'outline-color': 'transparent',\n          'outline-offset':", "CodeBleu_score": 18.127639414147442}, {"code": "const saveElementAsImage = (elementId: string) =>{\n\tconst element = document.getElementById(elementId);\n  if (element) {\n    htmlToImage\n      .toJpeg(element, {\n        quality: 1,\n        bgcolor: '#ffffff',\n        width: element.clientWidth,\n        height: element.clientHeight,\n        style: {\n          transform: 'scale(1)',\n          transformOrigin: 'top left',\n          width: `${element.clientWidth}px`,\n          height: `${element.clientHeight}px`,\n        },\n      })\n      .then((dataUrl) => {\n        const link = document.createElement('a');\n        link.download = 'agent-gpt-output.png';\n        link.href = dataUrl;\n        link.click();\n      })\n      .catch((error) => {\n        alert('Saving image failed: ' + error);\n      });\n  } else {\n    alert('Element not found: ' + elementId);\n  }\n}", "CodeBleu_score": 53.969090064115456}]}
{"instance_id": "346ea48343da", "generation_result": [{"code": "const copyElementText = (elementId: string) =>{\n\tconst text = document.getElementById(elementId)?.innerText;\n  if (!text) return;\n\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(text);\n  } else {\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n    textArea.style.position = \"fixed\";\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    try {\n      document.execCommand(\"copy\");\n    } catch (err) {\n      console.error(err);\n    }\n    document.body.removeChild(textArea);\n  }\n}", "CodeBleu_score": 66.72627578468608}, {"code": "const copyElementText = (elementId: string) =>{\n\tconst text = document.getElementById(elementId)?.innerText;\n  if (!text) {\n    return;\n  }\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(text).then(\n      () => {\n        console.log(`Copied ${text} to clipboard`);\n      },\n      (err) => {\n        console.error('Failed to copy text to clipboard', err);\n      }\n    );\n  } else {\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n    console.log(`Copied ${text} to clipboard`);\n  }\n}", "CodeBleu_score": 62.639481580306054}, {"code": "const copyElementText = (elementId: string) =>{\n\tconst element = document.getElementById(elementId)\n  if (!element) return\n  const text = element.innerText\n  if (!text) return\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(text)\n  } else {\n    const textArea = document.createElement('textarea')\n    textArea.value = text\n    textArea.focus()\n    textArea.select()\n    document.execCommand('copy')\n    document.body.removeChild(textArea)\n  }\n}", "CodeBleu_score": 49.51933037313888}]}
{"instance_id": "25f193a0eddf", "generation_result": [{"code": "const CustomCodeBlock = ({ inline, className, children }: CustomCodeBlockProps) => {\n\tconst match = /language-(\\w+)/.exec(className || '')\n  return !inline && match ? (\n    <pre className={`${className} ${styles.codeBlock}`}>\n      <code className={`hljs ${match[1]}`}>\n        {children}\n      </code>\n    </pre>\n  ) : (\n    <code className={className}>\n      {children}\n    </code>\n  )\n}", "CodeBleu_score": 36.45055286624435}, {"code": "const CustomCodeBlock = ({ inline, className, children }: CustomCodeBlockProps) => {\n\tconst match = /language-(\\w+)/.exec(className || '')\n    return !inline && match ? (\n        <pre className={className}>\n            <code className={className} dangerouslySetInnerHTML={{ __html: highlight(children, match[1]) }} />\n        </pre>\n    ) : (\n        <code className={className}>{children}</code>\n    )\n}", "CodeBleu_score": 21.773207003918365}, {"code": "const CustomCodeBlock = ({ inline, className, children }: CustomCodeBlockProps) => {\n\tconst match = /language-(\\w+)/.exec(className || '')\n    return !inline && match ? (\n        <pre className={`${className} ${styles.codeBlock}`}>\n            <code className={`hljs ${match[1]}`}>\n                {children}\n            </code>\n        </pre>\n    ) : (\n        <code className={styles.inlineCode} data-language={match ? match[1] : undefined}>\n            {children}\n        </code>\n    )\n}", "CodeBleu_score": 34.95687675443485}]}
{"instance_id": "7ba7dfdc0ab6", "generation_result": [{"code": "const extractTextFromNode = (node: React.ReactNode): string =>{\n\tif (typeof node === 'string') {\n    return node;\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(extractTextFromNode).join('');\n  }\n\n  if (React.isValidElement(node)) {\n    return extractTextFromNode(node.props.children);\n  }\n\n  return '';\n}", "CodeBleu_score": 86.07764202082564}, {"code": "const extractTextFromNode = (node: React.ReactNode): string =>{\n\tif (typeof node === 'string') {\n    return node;\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(extractTextFromNode).join('');\n  }\n\n  if (React.isValidElement(node)) {\n    return extractTextFromNode(node.props.children);\n  }\n\n  return '';\n}", "CodeBleu_score": 86.07764202082564}, {"code": "const extractTextFromNode = (node: React.ReactNode): string =>{\n\tif (typeof node === \"string\") {\n    return node;\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(extractTextFromNode).join(\"\");\n  }\n\n  if (React.isValidElement(node)) {\n    return extractTextFromNode(node.props.children);\n  }\n\n  return \"\";\n}", "CodeBleu_score": 93.72563845761664}]}
{"instance_id": "a67cb8d31dde", "generation_result": [{"code": "const Summarize = () =>{\n\tconst [summary, setSummary] = useState(false);\n  const { agent, agentStatus } = useAgent();\n  const { tasks } = useTasks();\n  const { lifecycle } = useLifecycle();\n\n  const summarize = () => {\n    setSummary(true);\n    agent?.summarize();\n  };\n\n  if (\n    agentStatus === \"available\" &&\n    lifecycle === \"stopped\" &&\n    tasks.some((task) => task.completed && task.result) &&\n    !summary\n  ) {\n    return (\n      <div className=\"summarize\">\n        <p>\n          <strong>Would you like to summarize this conversation?</strong>\n        </p>\n        <button onClick={summarize}>Summarize</button>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}", "CodeBleu_score": 25.078072653099625}, {"code": "const Summarize = () =>{\n\tconst { agent, setSummary } = useContext(AgentContext);\n\n  const summarize = () => {\n    if (agent?.summarize) {\n      agent.summarize();\n      setSummary(true);\n    }\n  };\n\n  if (agent?.summarize && agent.lifecycle === \"stopped\" && agent.tasks.length > 0 && !agent.summary) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-4 bg-gray-100\">\n        <p className=\"text-lg font-bold\">Ready to summarize?</p>\n        <button className=\"mt-2 px-4 py-2 text-lg font-semibold text-white bg-blue-500 rounded-lg hover:bg-blue-700\" onClick={summarize}>\n          Summarize\n        </button>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}", "CodeBleu_score": 32.3185448504564}, {"code": "const Summarize = () =>{\n\tconst { agent, lifecycle, tasks, summary } = useContext(AgentContext);\n\n  if (!agent || lifecycle !== \"stopped\" || !tasks.length || summary) return null;\n\n  const summarize = () => {\n    setSummary(true);\n    agent?.summarize();\n  };\n\n  return (\n    <div className=\"summarize\">\n      <p>\n        <strong>Would you like to summarize this conversation?</strong>\n      </p>\n      <button onClick={summarize}>Summarize</button>\n    </div>\n  );\n}", "CodeBleu_score": 28.384065166010675}]}
{"instance_id": "983031b20224", "generation_result": [{"code": "export default function DashboardLayout({ children }: PropsWithChildren){\n\treturn (\n    <ClerkProvider\n      frontendApi={process.env.NEXT_PUBLIC_CLERK_FRONTEND_API}\n      theme={{\n        logo: 'https://next-ecommerce-boilerplate.vercel.app/logo.svg',\n        primaryColor: '#000000',\n        secondaryColor: '#ffffff',\n        tertiaryColor: '#ffffff',\n        accentColor: '#ffffff',\n        backgroundColor: '#ffffff',\n        textColor: '#000000',\n        linkColor: '#000000',\n        fontFamily: 'sans-serif',\n        headlineFontFamily: 'sans-serif',\n        headlineFontWeight: 400,\n        headlineFontSize: 28,\n        headlineLineHeight: 1.2,\n        headlineLetterSpacing: 0,\n        headlineMarginTop: 0,\n        headlineMarginBottom: 0,\n        paragraphFontFamily: 'sans-serif',\n        paragraphFontWeight: 400,\n        paragraphFontSize: 16,\n        paragraphLineHeight: 1.5,\n        paragraphLetterSpacing: 0,\n        paragraphMarginTop: 0,\n        paragraphMarginBottom: 0,\n        inputBorderRadius: 4,\n        inputBorderWidth: 1,\n        inputBorderColor: '#d9d9d9',\n        inputBorderStyle: 'solid',\n        inputFontFamily: 'sans-serif',\n        inputFontWeight: 400,\n        inputFontSize: 16,\n        inputLineHeight: 1.5,\n        inputLetterSpacing: 0,\n        inputPaddingTop: 12,\n        inputPaddingRight: 12,\n        inputPaddingBottom: 12,\n        inputPaddingLeft: 12,\n        inputMarginTop: 8,\n        inputMarginBottom: 16,\n        inputPlaceholderColor: '#999999',\n        buttonBorderRadius: 4,\n        buttonBorderWidth: 1", "CodeBleu_score": 11.601686191179734}, {"code": "export default function DashboardLayout({ children }: PropsWithChildren){\n\treturn (\n    <ClerkProvider\n      frontendApi={process.env.NEXT_PUBLIC_CLERK_FRONTEND_API}\n      theme={clerkTheme}\n    >\n      <TRPCReactProvider>\n        <div className=\"flex flex-col min-h-screen\">\n          <Header />\n          <main className=\"flex-1\">{children}</main>\n          <Footer />\n        </div>\n      </TRPCReactProvider>\n    </ClerkProvider>\n  );\n}", "CodeBleu_score": 48.94767399305337}, {"code": "export default function DashboardLayout({ children }: PropsWithChildren){\n\treturn (\n    <ClerkProvider\n      frontendApi={process.env.NEXT_PUBLIC_CLERK_FRONTEND_API}\n      theme={{\n        logo: 'https://nextjs.org/static/favicon/favicon-32x32.png',\n        primaryColor: '#000000',\n        primaryTextColor: '#FFFFFF',\n        primaryBackgroundColor: '#FFFFFF',\n        primaryHoverColor: '#FFFFFF',\n        primaryHoverTextColor: '#000000',\n        primaryHoverBackgroundColor: '#000000',\n        primaryActiveColor: '#FFFFFF',\n        primaryActiveTextColor: '#000000',\n        primaryActiveBackgroundColor: '#000000',\n        secondaryColor: '#FFFFFF',\n        secondaryTextColor: '#000000',\n        secondaryBackgroundColor: '#000000',\n        secondaryHoverColor: '#000000',\n        secondaryHoverTextColor: '#FFFFFF',\n        secondaryHoverBackgroundColor: '#FFFFFF',\n        secondaryActiveColor: '#FFFFFF',\n        secondaryActiveTextColor: '#FFFFFF',\n        secondaryActiveBackgroundColor: '#FFFFFF',\n        dangerColor: '#FF0000',\n        dangerTextColor: '#FFFFFF',\n        dangerBackgroundColor: '#FFFFFF',\n        dangerHoverColor: '#FFFFFF',\n        dangerHoverTextColor: '#FF0000',\n        dangerHoverBackgroundColor: '#FF0000',\n        dangerActiveColor: '#FFFFFF',\n        dangerActiveTextColor: '#FF0000',\n        dangerActiveBackgroundColor: '#FF0000',\n        successColor: '#00FF00',\n        successTextColor: '#FFFFFF',\n        successBackgroundColor: '#FFFFFF',\n        successHoverColor: '#FFFFFF',\n        successHoverTextColor: '#00FF00',\n        successHoverBackgroundColor: '#00FF00',\n        successActiveColor: '#FFFFFF',\n        successActiveTextColor: '#00FF00',\n        successActiveBackgroundColor: '#", "CodeBleu_score": 10.955475908838416}]}
{"instance_id": "0ba912ee94c7", "generation_result": [{"code": "export function ActiveButton({ href, label, icon }: Props){\n\tconst pathname = usePathname()\n\n  return (\n    <Link href={href}>\n      <a className={pathname === href ? 'active' : ''}>\n        <Icon icon={icon} />\n        <span className=\"truncate\">{label}</span>\n      </a>\n    </Link>\n  )\n}", "CodeBleu_score": 45.76608228480907}, {"code": "export function ActiveButton({ href, label, icon }: Props){\n\tconst pathname = usePathname();\n\n  const isActive = pathname.startsWith(href);\n\n  return (\n    <Button\n      className={isActive ? 'active' : undefined}\n      variant=\"ghost\"\n      href={href}\n      size=\"small\"\n      leftIcon={icon}\n    >\n      {label}\n    </Button>\n  );\n}", "CodeBleu_score": 48.16345251856469}, {"code": "export function ActiveButton({ href, label, icon }: Props){\n\tconst pathname = usePathname();\n  const isActive = pathname === href;\n  return (\n    <Button\n      className={classNames(\n        'flex items-center justify-center',\n        isActive ? 'bg-gray-100 dark:bg-gray-700' : 'bg-gray-50 dark:bg-gray-800'\n      )}\n      href={href}\n      variant=\"ghost\"\n    >\n      <Icon\n        icon={icon}\n        className={classNames(\n          'w-5 h-5',\n          isActive ? 'text-gray-900 dark:text-gray-100' : 'text-gray-400 dark:text-gray-500'\n        )}\n      />\n      <span className=\"ml-2 text-sm font-medium truncate\">{label}</span>\n    </Button>\n  );\n}", "CodeBleu_score": 48.85224696125158}]}
{"instance_id": "1fd5b7fdcc9b", "generation_result": [{"code": "export default function RootLayout({ children }: PropsWithChildren) {\n\treturn (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossOrigin=\"anonymous\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/fonts/bootstrap-icons.woff\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/fonts/bootstrap-icons.woff2\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/fonts/bootstrap-icons.ttf\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/fonts/bootstrap-icons.svg\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/fonts/bootstrap-icons.eot\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/fonts/bootstrap-icons.woff\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm", "CodeBleu_score": 12.11917677892575}, {"code": "export default function RootLayout({ children }: PropsWithChildren) {\n\treturn (\n    <Html lang=\"en\">\n      <Head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n        <link rel=\"apple-touch-icon\" href=\"/icon.png\" />\n        <meta name=\"theme-color\" content={theme.palette.primary.main} />\n        <meta name=\"description\" content=\"A web application for managing a list of tasks.\" />\n      </Head>\n      <body className=\"bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-50\">\n        <ThemeProvider theme={theme}>\n          <Toaster />\n          <Analytics />\n          <SpeedInsights />\n          {children}\n        </ThemeProvider>\n      </body>\n    </Html>\n  );\n}", "CodeBleu_score": 28.68206826126527}, {"code": "export default function RootLayout({ children }: PropsWithChildren) {\n\treturn (\n    <html lang=\"en\" className=\"h-full w-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n        <link rel=\"icon\" href=\"/favicon.svg\" type=\"image/svg+xml\" />\n        <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />\n        <link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#000000\" />\n        <meta name=\"msapplication-TileColor\" content=\"#000000\" />\n        <meta name=\"theme-color\" content=\"#000000\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap\" rel=\"stylesheet\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/katex.min.css\" integrity=\"sha384-Um5gpz1odJg5Z4HAmzPtgZKdTBHZdw8S29IecapCSB31ligYPhHQZMIlWLYQGVoc\" crossOrigin=\"anonymous\" />\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/copy-tex.min.css\" integrity=\"sha384-2BKtIUFXfqLnOlKk1koG8KXq4RGddTQU4gk1r3qTvkRBfc7vHawiyyP0rk/FAr\" crossOrigin=\"anonymous\" />\n        <link", "CodeBleu_score": 14.062066905100817}]}
{"instance_id": "390ef9405b57", "generation_result": [{"code": "export function Button({ className, intent, size, underline, ...props }: ButtonProps){\n\tconst classes = twMerge(\n    \"inline-flex items-center justify-center border rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n    className,\n    tw`text-white`,\n    size === \"small\" && tw`px-2.5 py-1.5 text-xs leading-4`,\n    size === \"medium\" && tw`px-3 py-2 text-sm leading-5`,\n    size === \"large\" && tw`px-4 py-2 text-base leading-6`,\n    intent === \"primary\" && tw`bg-primary-600 hover:bg-primary-500 focus:ring-primary-500`,\n    intent === \"secondary\" && tw`bg-white border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-primary-500`,\n    intent === \"danger\" && tw`bg-red-600 hover:bg-red-500 focus:ring-red-500`,\n    underline && tw`border-b-2 border-transparent hover:border-current`,\n  )\n\n  return <a {...props} className={classes} />\n}", "CodeBleu_score": 10.30351310658714}, {"code": "export function Button({ className, intent, size, underline, ...props }: ButtonProps){\n\tconst classes = twMerge(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n    className,\n    intent && `text-${intent}-700 hover:text-${intent}-800 disabled:text-${intent}-500`,\n    size && `px-${size} py-${size / 2}`,\n    underline && `underline`\n  )\n\n  return (\n    <a {...props} className={classes}>\n      {props.children}\n    </a>\n  )\n}", "CodeBleu_score": 20.102757865537704}, {"code": "export function Button({ className, intent, size, underline, ...props }: ButtonProps){\n\tconst { tw } = useTheme();\n  return (\n    <a\n      className={twMerge(\n        \"tw-inline-flex tw-items-center tw-justify-center tw-border tw-border-transparent tw-text-white tw-font-medium tw-rounded-md tw-shadow-sm tw-transition-colors tw-duration-150 tw-focus-within-ring-2 tw-focus-within-ring-offset-2 tw-focus-within-ring-primary-500\",\n        tw`tw-px-4 tw-py-2 tw-text-sm`,\n        tw`tw-bg-primary-600 hover:tw-bg-primary-700 focus:tw-outline-none focus:tw-ring-2 focus:tw-ring-offset-2 focus:tw-ring-primary-500`,\n        intent && tw`tw-${intent}-600 hover:tw-${intent}-700 focus:tw-ring-${intent}-500`,\n        size && tw`tw-${size}-px`,\n        underline && tw`tw-underline`,\n        className\n      )}\n      {...props}\n    />\n  );\n}", "CodeBleu_score": 11.297602695011308}]}
{"instance_id": "aa655671cb7e", "generation_result": [{"code": "export function middleware(request: NextRequest){\n\tif (\n    request.headers?.get(\"host\")?.includes(\"next-enterprise.vercel.app\")\n  ) {\n    return NextResponse.redirect(\n      \"https://blazity.com/open-source/nextjs-enterprise-boilerplate\",\n      301\n    );\n  }\n}", "CodeBleu_score": 37.81551161024922}, {"code": "export function middleware(request: NextRequest){\n\tif (\n    request.headers?.get(\"host\")?.includes(\n      \"next-enterprise.vercel.app\"\n    )\n  ) {\n    return NextResponse.redirect(\n      \"https://blazity.com/open-source/nextjs-enterprise-boilerplate\",\n      301\n    );\n  }\n}", "CodeBleu_score": 36.43724910238897}, {"code": "export function middleware(request: NextRequest){\n\tif (\n    request.headers?.get(\"host\")?.includes(\n      \"next-enterprise.vercel.app\"\n    )\n  ) {\n    return NextResponse.redirect(\n      \"https://blazity.com/open-source/nextjs-enterprise-boilerplate\",\n      301\n    );\n  }\n}", "CodeBleu_score": 36.43724910238897}]}
{"instance_id": "b33fa69187fb", "generation_result": [{"code": "app.lazyrouter = function lazyrouter(){\n\tif (!this._router) {\n    const router = new Router({\n      caseSensitive: this.enabled('case sensitive routing'),\n      strict: this.enabled('strict routing')\n    });\n\n    // default not found handler\n    router.use((req, res, next) => {\n      res.status(404).format({\n        text: () => {\n          res.type('text').send('Not Found');\n        },\n        html: () => {\n          res.type('html').send('<p>Not Found</p>');\n        },\n        json: () => {\n          res.json({\n            error: 'Not Found'\n          });\n        }\n      });\n    });\n\n    // setup locals for all requests\n    router.use((req, res, next) => {\n      res.locals = res.locals || {};\n      res.locals.settings = this.settings;\n      next();\n    });\n\n    // setup query parser\n    router.use(this.query());\n\n    // setup initialization middleware\n    router.use(this.init());\n\n    this._router = router;\n  }\n\n  return this._router;\n}", "CodeBleu_score": 37.17280407634813}, {"code": "app.lazyrouter = function lazyrouter(){\n\tif (!this._router) {\n    var router = this._router = new Router({\n      caseSensitive: this.enabled('case sensitive routing'),\n      strict: this.enabled('strict routing')\n    });\n\n    // default not found handler\n    router.use(function _defaultNotFoundHandler(req, res) {\n      res.status(404).format({\n        html: function () {\n          res.render('404', {\n            url: req.originalUrl,\n            error: 'Not found'\n          });\n        },\n        json: function () {\n          res.json({\n            error: 'Not found'\n          });\n        },\n        default: function () {\n          res.type('txt').send('Not found');\n        }\n      });\n    });\n\n    // default error handler\n    router.use(function _defaultErrorHandler(err, req, res, next) {\n      if (err.status) {\n        res.status(err.status);\n      }\n\n      if (err.status === 404) {\n        return next(err);\n      }\n\n      if (err.status === 403) {\n        return next(err);\n      }\n\n      if (err.status === 401) {\n        return next(err);\n      }\n\n      // set locals, only providing error in development\n      res.locals.message = err.message;\n      res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n      // render the error page\n      res.format({\n        html: function () {\n          res.render('error');\n        },\n        json: function () {\n          res.json({\n            error: err.message\n          });\n        },\n        default: function () {\n          res.type('txt').send(err.message);\n        }\n      });\n    });\n\n    // assign the app's locals to the router\n    router.locals = this.locals;\n\n    // assign the app's settings to the router\n    router.settings = this.settings;\n\n    // initialize router middleware\n    this._initMiddle", "CodeBleu_score": 34.63977675644846}, {"code": "app.lazyrouter = function lazyrouter(){\n\tif (!this._router) {\n    const router = new Router(this.settings.caseSensitive, this.settings.strict);\n    router.use(query(this.settings.queryParser));\n    router.use(middleware.init(this));\n    this._router = router;\n  }\n}", "CodeBleu_score": 28.385973751188313}]}
{"instance_id": "7aadf79801c0", "generation_result": [{"code": "function createApplication(){\n\tvar app = Object.create(EventEmitter.prototype);\n\n  mixin(app, proto);\n  mixin(app.request, req);\n  mixin(app.response, res);\n\n  app.init();\n\n  return app;\n}", "CodeBleu_score": 18.921850682159775}, {"code": "function createApplication(){\n\tlet app = Object.create(EventEmitter.prototype);\n\n  app.handle = function(req, res) {\n    let route = this.router.match(req.url);\n    if (route) {\n      route.fn(req, res);\n    } else {\n      res.statusCode = 404;\n      res.end('Not Found');\n    }\n  };\n\n  app.init = function() {\n    this.router = new Router();\n    this.use(router.routes());\n    this.use(router.allowedMethods());\n  };\n\n  app.use = function(middleware) {\n    this.middleware.push(middleware);\n  };\n\n  app.middleware = [];\n\n  app.Request = Object.create(Request.prototype);\n  app.Response = Object.create(Response.prototype);\n\n  app.init();\n\n  return app;\n}", "CodeBleu_score": 28.60394500560566}, {"code": "function createApplication(){\n\tlet app = Object.create(EventEmitter.prototype);\n\n  mixin(app, proto);\n  mixin(app.request, req);\n  mixin(app.response, res);\n\n  app.init();\n\n  return app;\n}", "CodeBleu_score": 17.847486389975202}]}
{"instance_id": "2b4af4a14e81", "generation_result": [{"code": "res.sendFile = function sendFile(path, options, callback) {\n\tvar done = false;\n  var streaming;\n\n  // request aborted\n  function onaborted() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('Request aborted');\n    err.code = 'ECONNABORTED';\n    callback(err);\n  }\n\n  // directory\n  function ondirectory() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('EISDIR, read');\n    err.code = 'EISDIR';\n    callback(err);\n  }\n\n  // errors\n  function onerror(err) {\n    if (done) return;\n    done = true;\n    callback(err);\n  }\n\n  // ended\n  function onend() {\n    if (done) return;\n    done = true;\n    callback();\n  }\n\n  // file\n  function onfile() {\n    streaming = false;\n  }\n\n  // finished\n  function onfinish(err) {\n    if (err && err.code === 'ECONNRESET') return onaborted();\n    if (err) return onerror(err);\n    if (done) return;\n\n    setImmediate(function () {\n      if (streaming !== false && !done) {\n        onaborted();\n        return;\n      }\n\n      if (done) return;\n      done = true;\n      callback();\n    });\n  }\n\n  // streaming\n  function onstream() {\n    streaming = true;\n  }\n\n  file.on('directory', ondirectory);\n  file.on('end', onend);\n  file.on('error', onerror);\n  file.on('file', onfile);\n  file.on('stream', onstream);\n  onFinished(res, onfinish);\n\n  if (options.headers) {\n    // set headers on successful transfer\n    file.on('headers', function headers(res) {\n      var obj = options.headers;\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        var k =", "CodeBleu_score": 36.1027029674536}, {"code": "res.sendFile = function sendFile(path, options, callback) {\n\tvar done = false;\n  var streaming;\n\n  // request aborted\n  function onaborted() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('Request aborted');\n    err.code = 'ECONNABORTED';\n    callback(err);\n  }\n\n  // directory\n  function ondirectory() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('EISDIR, read');\n    err.code = 'EISDIR';\n    callback(err);\n  }\n\n  // errors\n  function onerror(err) {\n    if (done) return;\n    done = true;\n    callback(err);\n  }\n\n  // ended\n  function onend() {\n    if (done) return;\n    done = true;\n    callback();\n  }\n\n  // file\n  function onfile() {\n    streaming = false;\n  }\n\n  // finished\n  function onfinish(err) {\n    if (err && err.code === 'ECONNRESET') return onaborted();\n    if (err) return onerror(err);\n    if (done) return;\n\n    setImmediate(function () {\n      if (streaming !== false && !done) {\n        onaborted();\n        return;\n      }\n\n      if (done) return;\n      done = true;\n      callback();\n    });\n  }\n\n  // streaming\n  function onstream() {\n    streaming = true;\n  }\n\n  file.on('directory', ondirectory);\n  file.on('end', onend);\n  file.on('error', onerror);\n  file.on('file', onfile);\n  file.on('stream', onstream);\n  onFinished(res, onfinish);\n\n  if (options.headers) {\n    // set headers on successful transfer\n    file.on('headers', function headers(res) {\n      var obj = options.headers;\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        var k =", "CodeBleu_score": 36.1027029674536}, {"code": "res.sendFile = function sendFile(path, options, callback) {\n\tvar done = false;\n  var streaming;\n\n  // request aborted\n  function onaborted() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('Request aborted');\n    err.code = 'ECONNABORTED';\n    callback(err);\n  }\n\n  // directory\n  function ondirectory() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('EISDIR, read');\n    err.code = 'EISDIR';\n    callback(err);\n  }\n\n  // errors\n  function onerror(err) {\n    if (done) return;\n    done = true;\n    callback(err);\n  }\n\n  // ended\n  function onend() {\n    if (done) return;\n    done = true;\n    callback();\n  }\n\n  // file\n  function onfile() {\n    streaming = false;\n  }\n\n  // finished\n  function onfinish(err) {\n    if (err && err.code === 'ECONNRESET') return onaborted();\n    if (err) return onerror(err);\n    if (done) return;\n\n    setImmediate(function () {\n      if (streaming !== false && !done) {\n        onaborted();\n        return;\n      }\n\n      if (done) return;\n      done = true;\n      callback();\n    });\n  }\n\n  // streaming\n  function onstream() {\n    streaming = true;\n  }\n\n  file.on('directory', ondirectory);\n  file.on('end', onend);\n  file.on('error', onerror);\n  file.on('file', onfile);\n  file.on('stream', onstream);\n  onFinished(res, onfinish);\n\n  if (options.headers) {\n    // set headers on successful transfer\n    file.on('headers', function headers(res) {\n      var obj = options.headers;\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        var k =", "CodeBleu_score": 36.1027029674536}]}
{"instance_id": "24ba2258749d", "generation_result": [{"code": "View.prototype.lookup = function lookup(name){\n\tvar self = this;\n  var root;\n  var path;\n  var dir;\n  var file;\n\n  // Iterate through the root directories, attempting to resolve the file path.\n  for (var i = 0, len = self.roots.length; i < len; i++) {\n    root = self.roots[i];\n    path = self.resolve(root, name);\n    dir = dirname(path);\n    file = basename(path);\n\n    // If the file exists, return the resolved path.\n    if (self.fs.existsSync(path)) {\n      return path;\n    }\n\n    // If the directory exists, return the resolved path.\n    if (self.fs.existsSync(dir)) {\n      return dir;\n    }\n\n    // If the file exists in the root directory, return the resolved path.\n    if (self.fs.existsSync(root + '/' + file)) {\n      return root + '/' + file;\n    }\n  }\n\n  // If the file was not found, return the original name.\n  return name;\n}", "CodeBleu_score": 32.303659226204026}, {"code": "View.prototype.lookup = function lookup(name){\n\tvar file, root, roots, _i, _len;\n  roots = this.root;\n  if (!(roots instanceof Array)) {\n    roots = [roots];\n  }\n  for (_i = 0, _len = roots.length; _i < _len; _i++) {\n    root = roots[_i];\n    file = this.resolve(root, name);\n    if (file) {\n      return file;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 25.27903891169539}, {"code": "View.prototype.lookup = function lookup(name){\n\tvar path = null;\n  var dir = null;\n  var file = null;\n\n  for (var i = 0, len = this.root.length; i < len; ++i) {\n    path = this.resolve(name);\n    dir = dirname(path);\n    file = basename(path);\n\n    if (debug.enabled) {\n      debug('lookup \"%s\" in \"%s\"', file, dir);\n    }\n\n    if (this.exists(path)) {\n      if (debug.enabled) {\n        debug('found \"%s\"', path);\n      }\n\n      return path;\n    }\n  }\n\n  return null;\n}", "CodeBleu_score": 30.603919635473638}]}
{"instance_id": "4a3a45242878", "generation_result": [{"code": "module.exports = function query(options){\n\tvar opts = options || {};\n\n  // default to enabling prototype properties\n  if (typeof opts.allowPrototypes === 'undefined') {\n    opts.allowPrototypes = true;\n  }\n\n  // allow custom query string parser\n  var parser = opts.parser || parseUrl;\n\n  // allow custom parameter parser\n  var parameterParser = opts.parameterParser || parseParameter;\n\n  return function queryParser(req, res, next) {\n    if (!req.query) {\n      var query = parser.parse(req).query;\n      req.query = query ? parameterParser(query, opts) : {};\n    }\n\n    next();\n  };\n}", "CodeBleu_score": 47.97568405857032}, {"code": "module.exports = function query(options){\n\tvar opts = options || {};\n  var queryparse = opts.queryparse || parseUrl;\n  var allowPrototypes = opts.allowPrototypes || false;\n\n  return function query(req, res, next) {\n    if (req.query) {\n      return next();\n    }\n\n    var query = queryparse(req.url);\n    req.query = query.query;\n    if (allowPrototypes) {\n      return next();\n    }\n\n    delete req.query.__proto__;\n    return next();\n  };\n}", "CodeBleu_score": 38.74207681843299}, {"code": "module.exports = function query(options){\n\tvar opts = options || {}\n\n  // NOTE: The querystring module has been deprecated in Node.js v0.11.12\n  // and will be removed in a future version. In the meantime, we'll use\n  // the deprecated API to maintain compatibility with Connect and Express.\n  var parse = opts.parse || querystring.parse\n\n  return function query(req, res, next) {\n    if (!req.query) {\n      var val = parse(req.url.split('?')[1])\n\n      req.query = opts.allowPrototypes ? val : removePrototypes(val)\n    }\n\n    next()\n  }\n}", "CodeBleu_score": 40.06405662267027}]}
{"instance_id": "786ae7051b03", "generation_result": [{"code": "const App: React.FC<AppProps> = ({framework, designSystem}) =>{\n\tconst [modals, setModals] = useState<ModalState[]>([]);\n  const [modal, setModal] = useState<ModalState | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const [, setFramework] = useFramework();\n  const [, setDesignSystem] = useDesignSystem();\n\n  useEffect(() => {\n    setFramework(framework);\n    setDesignSystem(designSystem);\n  }, [framework, designSystem]);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(undefined);\n\n    const fetchModals = async () => {\n      const modals = await getModals();\n      setModals(modals);\n    };\n\n    fetchModals()\n      .then(() => setLoading(false))\n      .catch((err) => {\n        setError(err);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleModal = (modal: ModalState | undefined) => {\n    setModal(modal);\n  };\n\n  return (\n    <div className={`${framework.className} ${designSystem.className}`}>\n      {loading && <Loading />}\n      {error && <Error error={error} />}\n      {!loading && !error && (\n        <FrameworkProvider framework={framework}>\n          <DesignSystemProvider designSystem={designSystem}>\n            <RoutingProvider\n              basePath=\"/activitypub\"\n              modals={modals}\n              modal={modal}\n              onModal={handleModal}\n            >\n              <DesignSystemApp>\n                <AppHeader />\n                <AppContent />\n              </DesignSystemApp>\n            </RoutingProvider>\n          </DesignSystemProvider>\n        </FrameworkProvider>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 35.12963255679417}, {"code": "const App: React.FC<AppProps> = ({framework, designSystem}) =>{\n\tconst [appState, setAppState] = React.useState<AppState>({\n    // TODO: Add initial state\n  });\n\n  const setAppStateCallback = React.useCallback((state: Partial<AppState>) => {\n    setAppState((prevState) => ({...prevState, ...state}));\n  }, []);\n\n  return (\n    <FrameworkProvider framework={framework}>\n      <RoutingProvider basePath=\"/activitypub\" modals={modals}>\n        <DesignSystemProvider designSystem={designSystem}>\n          <AppContext.Provider value={{appState, setAppState: setAppStateCallback}}>\n            <AppContent />\n          </AppContext.Provider>\n        </DesignSystemProvider>\n      </RoutingProvider>\n    </FrameworkProvider>\n  );\n}", "CodeBleu_score": 49.34848475070063}, {"code": "const App: React.FC<AppProps> = ({framework, designSystem}) =>{\n\treturn (\n    <FrameworkProvider framework={framework}>\n      <RoutingProvider basePath=\"activitypub\" modals={modals}>\n        <DesignSystemProvider designSystem={designSystem}>\n          <div className=\"app\">\n            <div className=\"app-content\">\n              <ActivityPub />\n            </div>\n          </div>\n        </DesignSystemProvider>\n      </RoutingProvider>\n    </FrameworkProvider>\n  );\n}", "CodeBleu_score": 59.84757174063419}]}
{"instance_id": "8100930f7ce7", "generation_result": [{"code": "const darkMode = () =>{\n\tconst colorScheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  if (colorScheme === 'light') return false;\n  if (colorScheme === 'dark') return true;\n  const el = document.getElementById('container');\n  const containerColor = getComputedStyle(el.parentElement).getPropertyValue('background-color');\n  const rgb = containerColor.substring(containerColor.indexOf('(') + 1, containerColor.lastIndexOf(')')).split(',');\n  const r = parseInt(rgb[0].trim());\n  const g = parseInt(rgb[1].trim());\n  const b = parseInt(rgb[2].trim());\n  const contrast = (r * 299 + g * 587 + b * 114) / 1000;\n  return contrast < 5;\n}", "CodeBleu_score": 46.45535284447199}, {"code": "const darkMode = () =>{\n\tconst el = document.querySelector('[data-theme]')\n  const containerColor = getComputedStyle(el.parentElement).getPropertyValue('background-color')\n  const colorScheme = el.getAttribute('data-theme')\n  if (colorScheme === 'light') return false\n  if (colorScheme === 'dark') return true\n  const contrast = parseInt(\n    containerColor.substring(containerColor.indexOf('(') + 1, containerColor.lastIndexOf(')')).split(',')[0],\n    10\n  )\n  return contrast < 5\n}", "CodeBleu_score": 35.57216935243114}, {"code": "const darkMode = () =>{\n\tconst el = document.getElementById('text');\n  const containerColor = getComputedStyle(el.parentElement).getPropertyValue('background-color');\n  const colorScheme = getComputedStyle(document.documentElement).getPropertyValue('color-scheme');\n  if (colorScheme === 'light') {\n    return false;\n  } else if (colorScheme === 'dark') {\n    return true;\n  } else {\n    const contrast = parseInt(\n      containerColor.substring(containerColor.indexOf('(') + 1, containerColor.lastIndexOf(')')).split(',')[0],\n      10\n    );\n    return contrast < 5;\n  }\n}", "CodeBleu_score": 47.86121276775015}]}
{"instance_id": "7da55fac8ceb", "generation_result": [{"code": "const ContentTitle: React.FC<ContentTitleProps> = ({title, showCount, count}) =>{\n\tif (!title || !showCount) {\n        return null;\n    }\n\n    return (\n        <div className=\"content-title\">\n            <div className=\"title\">\n                {title}\n            </div>\n            <div className=\"count\">\n                {count}\n            </div>\n        </div>\n    );\n}", "CodeBleu_score": 39.934632992720296}, {"code": "const ContentTitle: React.FC<ContentTitleProps> = ({title, showCount, count}) =>{\n\tif (title === null && !showCount) {\n        return null;\n    }\n\n    return (\n        <div className=\"content-title\">\n            <div className=\"content-title__title\">\n                {title}\n            </div>\n            {showCount && (\n                <div className=\"content-title__count\">\n                    {count}\n                </div>\n            )}\n        </div>\n    );\n}", "CodeBleu_score": 29.5451353309086}, {"code": "const ContentTitle: React.FC<ContentTitleProps> = ({title, showCount, count}) =>{\n\tif (title == null && !showCount) {\n        return null;\n    }\n\n    return (\n        <div className=\"content-title\">\n            <h2>{title}</h2>\n            {showCount && <span>{count}</span>}\n        </div>\n    );\n}", "CodeBleu_score": 35.87469750277549}]}
{"instance_id": "1d104e0b7fc7", "generation_result": [{"code": "def union_queryset(*args, base_queryset=None)\n\tif base_queryset is None:\n        base_queryset = args[0].model.objects.all()\n\n    if len(args) == 1:\n        return args[0]\n\n    if len(args) == 0:\n        raise ValueError('Must provide at least one queryset.')\n\n    q = args[0]\n    for arg in args[1:]:\n        q = q.union(arg)\n\n    q = q.order_by()\n\n    ids = [id for id in q.values_list('id', flat=True)]\n\n    return base_queryset.filter(pk__in=ids)", "CodeBleu_score": 52.70413204418134}, {"code": "def union_queryset(*args, base_queryset=None)\n\tif len(args) == 0:\n        raise ValueError(\"union_queryset requires at least one queryset.\")\n    elif len(args) == 1:\n        return args[0]\n    else:\n        q = args[0]\n        for queryset in args[1:]:\n            q = q | queryset\n        sub_query = q.order_by(\"id\").values_list(\"id\", flat=True)\n        if base_queryset is None:\n            return base_queryset.filter(id__in=sub_query)\n        else:\n            return base_queryset.filter(id__in=sub_query)", "CodeBleu_score": 42.41831063230108}, {"code": "def union_queryset(*args, base_queryset=None)\n\tif not args:\n        raise ValueError(\"union_queryset requires at least one queryset\")\n\n    if base_queryset is None:\n        base_queryset = args[0].model.objects\n\n    union_ids = set()\n    for q in args:\n        union_ids.update(q.order_by().values_list(\"id\", flat=True))\n\n    return base_queryset.filter(id__in=union_ids)\n\n\n\n\n", "CodeBleu_score": 32.60116397180217}]}
{"instance_id": "96fe55f8e114", "generation_result": [{"code": "def record_logs(self, ids, action, detail, model=None, **kwargs)\n\tif not isinstance(ids, list):\n        ids = [ids]\n    if not model:\n        model = self.model\n    if not model:\n        raise Exception(\"Could not determine model for %s\" % self)\n    if not model._meta.app_label:\n        raise Exception(\"Could not determine app_label for %s\" % model)\n    if not model._meta.module_name:\n        raise Exception(\"Could not determine module_name for %s\" % model)\n    if not model._meta.verbose_name:\n        raise Exception(\"Could not determine verbose_name for %s\" % model)\n    if not model._meta.verbose_name_plural:\n        raise Exception(\"Could not determine verbose_name_plural for %s\" % model)\n    if not model._meta.object_name:\n        raise Exception(\"Could not determine object_name for %s\" % model)\n    if not model._meta.db_table:\n        raise Exception(\"Could not determine db_table for %s\" % model)\n    if not model._meta.managed:\n        raise Exception(\"Could not determine if %s is managed\" % model)\n    if not model._meta.proxy:\n        raise Exception(\"Could not determine if %s is a proxy model\" % model)\n    if not model._meta.auto_created:\n        raise Exception(\"Could not determine if %s is an auto-created model\" % model)\n    if not model._meta.abstract:\n        raise Exception(\"Could not determine if %s is an abstract model\" % model)\n    if not model._meta.swapped:\n        raise Exception(\"Could not determine if %s is a swapped model\" % model)\n    if not model._meta.order_with_respect_to:\n        raise Exception(\"Could not determine order_with_respect_to for %s\" % model)\n    if not model._meta.order_with_respect_to_name:\n        raise Exception(\"Could not determine order_with_respect_to_name for %s\" % model)\n    if not model._meta.get_latest_by:\n        raise Exception(\"Could not determine get_latest_by for %s\" % model)\n    if not", "CodeBleu_score": 20.77647629785414}, {"code": "def record_logs(self, ids, action, detail, model=None, **kwargs)\n\tif not isinstance(ids, (list, tuple)):\n        ids = [ids]\n    if not model:\n        model = self.model\n    if not model._meta.has_field('organization'):\n        return\n    language = translation.get_language()\n    translation.activate('en')\n    try:\n        resource_type = model._meta.verbose_name\n    finally:\n        translation.activate(language)\n    action_flag = getattr(ActivityLog.Action, action.upper())\n    if action_flag is None:\n        raise ValueError('Invalid action: %s' % action)\n    if not kwargs.get('organization'):\n        kwargs['organization'] = self.organization\n    if not kwargs.get('user'):\n        kwargs['user'] = self.user\n    if not kwargs.get('modified_by'):\n        kwargs['modified_by'] = self.user\n    if not kwargs.get('description'):\n        kwargs['description'] = ''\n    if not kwargs.get('start_date'):\n        kwargs['start_date'] = timezone.now()\n    if not kwargs.get('end_date'):\n        kwargs['end_date'] = timezone.now()\n    if not kwargs.get('modified_date'):\n        kwargs['modified_date'] = timezone.now()\n    if not kwargs.get('created_date'):\n        kwargs['created_date'] = timezone.now()\n    if not kwargs.get('action'):\n        kwargs['action'] = action_flag\n    if not kwargs.get('detail'):\n        kwargs['detail'] = detail\n    if not kwargs.get('resource_type'):\n        kwargs['resource_type'] = resource_type\n    if not kwargs.get('resource_id'):\n        kwargs['resource_id'] = ids\n    if not kwargs.get('resource_name'):\n        kwargs['resource_name'] = model.objects.filter(pk__in=ids).values_list('name', flat=True)\n    if not kwargs.get('resource_description'):\n        kwargs['resource_description'] = model.objects", "CodeBleu_score": 36.42022856311592}, {"code": "def record_logs(self, ids, action, detail, model=None, **kwargs)\n\tif not self.user:\n        return\n\n    if model is None:\n        model = self.model\n\n    if not model:\n        return\n\n    if not isinstance(ids, (list, tuple)):\n        ids = [ids]\n\n    if not ids:\n        return\n\n    # Determine the resource type from the model's metadata\n    resource_type = model._meta.verbose_name\n\n    # Create or update an operation log with the given action and additional keyword arguments\n    self.create_or_update_operate_log(action, resource_type, **kwargs)\n\n    # Construct a list of ActivityLog instances for each resource ID\n    logs = []\n    for id in ids:\n        log = ActivityLog(user=self.user, resource_type=resource_type, resource_id=id, action=action, details=detail)\n        log.organization = getattr(self.user, 'organization', None)\n        log.save()\n        logs.append(log)\n\n    # Bulk create these ActivityLog entries in the database\n    ActivityLog.objects.bulk_create(logs)", "CodeBleu_score": 43.223154422014666}]}
{"instance_id": "9e851c424f45", "generation_result": [{"code": "def prepare_django_request(self, request)\n\t# If the request object has an attribute named 'is_secure', use that to set\n    # the secure flag. Otherwise, assume that the connection is not secure.\n    if hasattr(request, 'is_secure'):\n        self.is_secure = request.is_secure()\n    else:\n        self.is_secure = False\n    # Set the HTTP host.\n    self.host = request.get_host()\n    # Set the script name.\n    self.script_name = request.META.get('SCRIPT_NAME', '')\n    # Copy the GET data.\n    self.get = request.GET.copy()\n    # Copy the POST data.\n    self.post = request.POST.copy()\n    # Return the dictionary.\n    return self\n\n\n\n\n", "CodeBleu_score": 40.256742807768205}, {"code": "def prepare_django_request(self, request)\n\t# Is the connection secure?\n    if request.is_secure():\n        is_secure = True\n    else:\n        is_secure = False\n    # Get the HTTP host.\n    http_host = request.META.get('HTTP_HOST')\n    # Get the script name.\n    script_name = request.META.get('SCRIPT_NAME')\n    # Copy the GET and POST data.\n    get = request.GET.copy()\n    post = request.POST.copy()\n    # Return the dictionary.\n    return {\n        'is_secure': is_secure,\n        'http_host': http_host,\n        'script_name': script_name,\n        'get': get,\n        'post': post,\n    }\n\n\n\n\n", "CodeBleu_score": 40.34012697666567}, {"code": "def prepare_django_request(self, request)\n\tself.is_secure = request.is_secure()\n    self.http_host = request.get_host()\n    self.script_name = request.path_info\n    self.get_data = request.GET.copy()\n    self.post_data = request.POST.copy()\n    return {\n        'is_secure': self.is_secure,\n        'http_host': self.http_host,\n        'script_name': self.script_name,\n        'get_data': self.get_data,\n        'post_data': self.post_data\n    }\n\n\n\n\n", "CodeBleu_score": 23.95443335566652}]}
{"instance_id": "dcea4bd482c4", "generation_result": [{"code": "function getUserLang() {\n\tvar cookie = document.cookie;\n    var lang = cookie.indexOf('django_language=en') > -1 ? 'en-US' : 'zh-CN';\n    return lang;\n}", "CodeBleu_score": 40.2251376286628}, {"code": "function getUserLang() {\n\tvar lang = document.cookie.indexOf('django_language=en');\n    if (lang != -1) {\n        return 'en-US';\n    } else {\n        return 'zh-CN';\n    }\n}", "CodeBleu_score": 71.97589515376073}, {"code": "function getUserLang() {\n\tvar cookie = document.cookie;\n    if (cookie.indexOf(\"django_language=en\") != -1) {\n        return 'en-US';\n    } else {\n        return 'zh-CN';\n    }\n}", "CodeBleu_score": 46.27974009798496}]}
{"instance_id": "fd6824a005d5", "generation_result": [{"code": "function reloadPage(){\n\tsetTimeout(window.location.reload, 300);\n}", "CodeBleu_score": 18.33547387690706}, {"code": "function reloadPage(){\n\tsetTimeout(function() {\n    window.location.reload();\n  }, 300);\n}", "CodeBleu_score": 58.55456702276813}, {"code": "function reloadPage(){\n\tsetTimeout(window.location.reload, 300);\n}", "CodeBleu_score": 18.33547387690706}]}
{"instance_id": "b32d5862b6b1", "generation_result": [{"code": "function fillKey(key){\n\tvar keyBuffer = Buffer.alloc(16);\n  var keyLength = key.length;\n\n  if (keyLength > 16) {\n    key = key.slice(0, 16);\n  }\n\n  key.copy(keyBuffer);\n  return keyBuffer;\n}", "CodeBleu_score": 23.883306519327473}, {"code": "function fillKey(key){\n\tvar length = key.length;\n  var buffer = Buffer.alloc(16);\n  if (length > 16) {\n    key.slice(0, 16).copy(buffer);\n  } else {\n    key.copy(buffer);\n  }\n  return buffer;\n}", "CodeBleu_score": 23.54631847290638}, {"code": "function fillKey(key){\n\tif (key.length > 16) {\n    key = key.slice(0, 16);\n  } else if (key.length < 16) {\n    const temp = Buffer.alloc(16);\n    key.copy(temp);\n    key = temp;\n  }\n  return key;\n}", "CodeBleu_score": 28.189195666590027}]}
{"instance_id": "c839d19e0833", "generation_result": [{"code": "function rsaEncrypt(text, pubKey){\n\tif (text === '') {\n    return text;\n  }\n  const encryptor = new JSEncrypt();\n  encryptor.setPublicKey(pubKey);\n  return encryptor.encrypt(text);\n}", "CodeBleu_score": 63.876848848943645}, {"code": "function rsaEncrypt(text, pubKey){\n\tif (text === \"\") {\n        return text;\n    }\n    var encrypt = new JSEncrypt();\n    encrypt.setPublicKey(pubKey);\n    return encrypt.encrypt(text);\n}", "CodeBleu_score": 64.30648260443856}, {"code": "function rsaEncrypt(text, pubKey){\n\tif (text === \"\") {\n        return text;\n    }\n    var encrypt = new JSEncrypt();\n    encrypt.setPublicKey(pubKey);\n    return encrypt.encrypt(text);\n}", "CodeBleu_score": 64.30648260443856}]}
{"instance_id": "c73bc91399b9", "generation_result": [{"code": "function checkAll(id, name){\n\tvar checkboxes = document.getElementsByName(name);\n    var checked = document.getElementById(id).checked;\n    for (var i = 0; i < checkboxes.length; i++) {\n        checkboxes[i].checked = checked;\n    }\n}", "CodeBleu_score": 39.43460273710629}, {"code": "function checkAll(id, name){\n\tvar checkboxes = document.getElementsByName(name);\n    var checkBox = document.getElementById(id);\n    for (var i = 0; i < checkboxes.length; i++) {\n        checkboxes[i].checked = checkBox.checked;\n    }\n}", "CodeBleu_score": 43.53224748842454}, {"code": "function checkAll(id, name){\n\tvar checkboxes = document.getElementsByName(name);\n  for (var i = 0; i < checkboxes.length; i++) {\n    checkboxes[i].checked = document.getElementById(id).checked;\n  }\n}", "CodeBleu_score": 38.02964440817188}]}
{"instance_id": "5164f2c2d67e", "generation_result": [{"code": "function getCookie(name){\n\tif (document.cookie) {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = jQuery.trim(cookies[i]);\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        return decodeURIComponent(cookie.substring(name.length + 1));\n      }\n    }\n  }\n  return null;\n}", "CodeBleu_score": 62.012063816779204}, {"code": "function getCookie(name){\n\tvar nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i=0;i < ca.length;i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return decodeURIComponent(c.substring(nameEQ.length,c.length));\n    }\n    return null;\n}", "CodeBleu_score": 32.870309476400536}, {"code": "function getCookie(name){\n\tvar cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n        var cookie = jQuery.trim(cookies[i]);\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) == (name + \"=\")) {\n            var cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n            return cookieValue;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 61.54803107715557}]}
{"instance_id": "7ce6dc0f1f24", "generation_result": [{"code": "def post(self, request)\n\tself.model = get_image_model()\n    form = self.get_creation_form()\n\n    if form.is_valid():\n        image = self.save_form(form)\n\n        # Check for duplicates\n        duplicates = find_image_duplicates(\n            image, self.request.user, self.permission_policy\n        )\n\n        if duplicates.exists():\n            return self.render_duplicate_found_response(request, image, duplicates.first())\n\n        # Check for format selection\n        if request.GET.get(\"select_format\"):\n            return self.render_select_format_response(image, form)\n\n        return self.get_chosen_response(image)\n\n    return self.get_reshow_creation_form_response()\n\n", "CodeBleu_score": 30.352929841915437}, {"code": "def post(self, request)\n\tself.model = get_image_model()\n    form = self.get_creation_form()\n\n    if form.is_valid():\n        image = self.save_form(form)\n        if self.request.GET.get(\"select_format\"):\n            return self.render_select_format_response(image, form)\n        else:\n            return self.get_chosen_response(image)\n    else:\n        return self.get_reshow_creation_form_response()", "CodeBleu_score": 21.777541049898332}, {"code": "def post(self, request)\n\tself.model = get_image_model()\n    form = self.get_creation_form()\n    if form.is_valid():\n        image = self.save_form(form)\n        duplicates = find_image_duplicates(image, request.user, self.permission_policy)\n        if duplicates.exists():\n            return self.render_duplicate_found_response(request, image, duplicates.first())\n\n        if request.GET.get(\"select_format\"):\n            return self.render_select_format_response(image, form)\n\n        return self.get_chosen_response(image)\n\n    return self.get_reshow_creation_form_response()\n\n", "CodeBleu_score": 28.78179302178372}]}
{"instance_id": "2ee66e343cd1", "generation_result": [{"code": "def _annotate_queryset(self, pages)\n\tpages = pages.annotate_site_root_state()\n    pages = pages.defer_streamfields()\n    pages = pages.prefetch_related()\n    pages = annotate_approved_schedule(pages)\n    pages = pages.values_list(\n        \"id\",\n        \"content_type_id\",\n        \"title\",\n        \"live\",\n        \"has_unpublished_changes\",\n        \"owner\",\n        \"latest_revision_created_at\",\n        \"expire_at\",\n        \"expired\",\n        \"locked\",\n        \"locked_by\",\n        \"locked_at\",\n        \"first_published_at\",\n        \"last_published_at\",\n        \"go_live_at\",\n        \"expire_at\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",\n        \"expired\",", "CodeBleu_score": 6.799112308645674}, {"code": "def _annotate_queryset(self, pages)\n\t# Prefetch related content types and site roots\n    pages = pages.prefetch_related(\"content_type\", \"site_root\")\n    # Filter pages based on explorable instances\n    pages = pages.explorable_instances()\n    # Defer streamfield values\n    pages = pages.defer_streamfields()\n    # Prefetch workflow states\n    if self.workflow_enabled:\n        pages = pages.prefetch_workflow_states()\n    # Annotate site root state and approved schedule\n    pages = pages.annotate_site_root_state()\n    # Annotate approved schedule\n    pages = pages.annotate_approved_schedule()\n    return pages", "CodeBleu_score": 38.60448224422296}, {"code": "def _annotate_queryset(self, pages)\n\tpages = pages.annotate_approved_schedule()\n    pages = pages.annotate_site_root_state()\n    pages = pages.defer_streamfields()\n    pages = pages.prefetch_related('content_type')\n    pages = pages.prefetch_related('site_root')\n    pages = pages.filter(\n        content_type__in=self.explorable_content_types\n    )\n    pages = pages.filter(\n        Q(expire_at__isnull=True) | Q(expire_at__gt=timezone.now())\n    )\n    pages = pages.filter(\n        Q(publish_at__isnull=True) | Q(publish_at__lte=timezone.now())\n    )\n    pages = pages.filter(\n        Q(unpublish_at__isnull=True) | Q(unpublish_at__gte=timezone.now())\n    )\n    pages = pages.filter(\n        Q(expired_at__isnull=True) | Q(expired_at__gte=timezone.now())\n    )\n    pages = pages.filter(\n        Q(unpublished_at__isnull=True) | Q(unpublished_at__gte=timezone.now())\n    )\n    if self.user.has_perm('wagtailadmin.access_admin'):\n        return pages\n    pages = pages.filter(\n        Q(owner=self.user) | Q(editors_group__user=self.user)\n    )\n    if self.workflow_enabled:\n        pages = pages.prefetch_workflow_states()\n    return pages", "CodeBleu_score": 42.22623060080363}]}
{"instance_id": "970bf123b037", "generation_result": [{"code": "def search_queryset(self, queryset)\n\tif self.is_searching:\n        if self.query_string:\n            queryset = queryset.autocomplete(self.query_string)\n        else:\n            queryset = queryset.none()\n        if not self.ordered:\n            queryset = queryset.order_by('-relevance')\n    return queryset\n\n\n\n\n", "CodeBleu_score": 45.200143020121295}, {"code": "def search_queryset(self, queryset)\n\tif self.is_searching:\n        queryset = queryset.autocomplete(self.query_string)\n        if not self.order_by:\n            queryset = queryset.order_by(\"-relevance\")\n    return queryset\n\n\n\n\n", "CodeBleu_score": 55.97056710123462}, {"code": "def search_queryset(self, queryset)\n\tif self.is_searching:\n        if self.query_string:\n            queryset = queryset.autocomplete(self.query_string)\n        if not self.order_by:\n            queryset = queryset.order_by('-relevance')\n    return queryset\n\n\n\n\n", "CodeBleu_score": 48.30911133457454}]}
{"instance_id": "b2058bd51dfa", "generation_result": [{"code": "def user_can_access_snippets(user)\n\tfor model in get_snippet_models():\n        if user.has_perm(f\"{model._meta.app_label}.add_{model._meta.model_name}\"):\n            return True\n        if user.has_perm(f\"{model._meta.app_label}.change_{model._meta.model_name}\"):\n            return True\n        if user.has_perm(f\"{model._meta.app_label}.delete_{model._meta.model_name}\"):\n            return True\n        if user.has_perm(f\"{model._meta.app_label}.view_{model._meta.model_name}\"):\n            return True\n    return False\n\n", "CodeBleu_score": 24.091028021604348}, {"code": "def user_can_access_snippets(user)\n\tsnippet_models = get_snippet_models()\n    for model in snippet_models:\n        if user_has_any_permission(user, model):\n            return True\n    return False\n\n", "CodeBleu_score": 32.16743824507221}, {"code": "def user_can_access_snippets(user)\n\tfor model in get_snippet_models():\n        if user_has_any_permission(user, model):\n            return True\n    return False\n\n", "CodeBleu_score": 17.436747063856743}]}
{"instance_id": "bf09fb693900", "generation_result": [{"code": "def get_auth_backends(self, request)\n\tauth_backends = []\n\n    for backend in settings.AUTHENTICATION_BACKENDS:\n        if isinstance(backend, str):\n            backend = import_string(backend)\n\n        if issubclass(backend, BaseAuthenticationBackend):\n            name = backend.name\n            url = reverse('plugins:netbox_rbac:login')\n            params = {\n                'backend': name,\n            }\n\n            if request.GET.get('next'):\n                params['next'] = request.GET['next']\n\n            if name == 'netbox.authentication.SAML2Backend':\n                # SAML2Backend has multiple IDPs, so we need to generate separate URLs for each\n                idps = get_saml_idps()\n                for idp in idps:\n                    params['idp'] = idp.get('entity_id')\n                    auth_backends.append(self.gen_auth_data(name, url, params))\n            else:\n                auth_backends.append(self.gen_auth_data(name, url, params))\n\n    return auth_backends\n\n", "CodeBleu_score": 42.2978516184648}, {"code": "def get_auth_backends(self, request)\n\tauth_backends = []\n\n    for name in settings.AUTHENTICATION_BACKENDS:\n        backend = load_backend(name)\n        if not isinstance(backend, BaseAuthenticationBackend):\n            continue\n\n        url, params = backend.login_url(request)\n        if 'next' in request.GET:\n            params['next'] = request.GET['next']\n\n        if isinstance(backend, SAML2Backend):\n            idps = backend.get_saml_idps()\n            for idp in idps:\n                display_name = idp.get('display_name', idp['name'])\n                auth_backends.append(self.gen_auth_data(name, url, params, display_name))\n        else:\n            auth_backends.append(self.gen_auth_data(name, url, params))\n\n    return auth_backends\n\n", "CodeBleu_score": 39.60560438634217}, {"code": "def get_auth_backends(self, request)\n\tauth_backends = []\n        for name, url, params in self.get_saml_idps(request):\n            display_name, icon_source = get_auth_backend_display(name)\n\n            icon_name = None\n            icon_img = None\n            if icon_source:\n                if '://' in icon_source:\n                    icon_img = icon_source\n                else:\n                    icon_name = icon_source\n\n            auth_backends.append({\n                'display_name': display_name,\n                'icon_name': icon_name,\n                'icon_img': icon_img,\n                'url': f'{url}?{urlencode(params)}',\n            })\n\n        for name in settings.AUTHENTICATION_BACKENDS:\n            if name == 'netbox.authentication.SAML2Backend':\n                continue\n            backend = load_backend(name)\n            backend.request = request\n            auth_backends.append(self.gen_auth_data(name, backend.get_login_url(), backend.get_login_url_params()))\n\n        return auth_backends\n\n\n", "CodeBleu_score": 26.155263172811793}]}
{"instance_id": "ea59163b25cc", "generation_result": [{"code": "def as_sql(self, qn, connection)\n\tlhs, lhs_params = self.process_lhs(qn, connection)\n    rhs, rhs_params = self.process_rhs(qn, connection)\n    params = lhs_params + rhs_params\n    return '(%s::inet << %s::inet)' % (lhs, rhs), params", "CodeBleu_score": 59.367190759166135}, {"code": "def as_sql(self, qn, connection)\n\tlhs, lhs_params = self.process_lhs(qn, connection)\n    rhs, rhs_params = self.process_rhs(qn, connection)\n    params = lhs_params + rhs_params\n    return '(%s::inet << %s)' % (lhs, rhs), params\n\n", "CodeBleu_score": 59.3455223338886}, {"code": "def as_sql(self, qn, connection)\n\tlhs, lparams = self.process_lhs(qn, connection)\n    rhs, rparams = self.process_rhs(qn, connection)\n    params = lparams + rparams\n    return '(%s::inet >> %s) & (%s::inet >> %s) = %s::inet' % (\n        lhs,\n        rhs,\n        lhs,\n        rhs,\n        rhs,\n    ), params\n\n\n\n\n", "CodeBleu_score": 40.02870455750376}]}
{"instance_id": "6658ddec6820", "generation_result": [{"code": "def get_model_urls(app_label, model_name)\n\tview_configs = get_view_configs(app_label, model_name)\n    if not view_configs:\n        return []\n    urls = []\n    for view_config in view_configs:\n        view = import_string(view_config['view'])\n        view_name = view_config['name']\n        view_kwargs = view_config['kwargs']\n        if issubclass(view, type):\n            view = view.as_view()\n        if view_kwargs:\n            view_kwargs = '&'.join(\n                [\n                    '{}={}'.format(k, v)\n                    for k, v in view_kwargs.items()\n                ]\n            )\n        else:\n            view_kwargs = ''\n        url_name = ':'.join(\n            [\n                app_label,\n                model_name.lower(),\n                view_name.lower(),\n                view_kwargs,\n            ]\n        )\n        urls.append(\n            path(\n                '{}'.format(view_config['url']),\n                view,\n                name=url_name,\n            )\n        )\n    return urls\n\n\n\n\n", "CodeBleu_score": 32.31519997213468}, {"code": "def get_model_urls(app_label, model_name)\n\tfrom django.conf.urls import url\n    from django.contrib.contenttypes.models import ContentType\n    from django.core.exceptions import ImproperlyConfigured\n    from django.db.models.loading import get_model\n    from django.utils.encoding import force_text\n    from django.utils.translation import ugettext_lazy as _\n    from django.views.generic import DetailView, ListView\n    from django.views.generic.detail import SingleObjectMixin\n    from django.views.generic.edit import CreateView, DeleteView, UpdateView\n    from django.views.generic.list import MultipleObjectMixin\n    from django.views.generic.base import ContextMixin\n    from django.views.generic.dates import (ArchiveIndexView, YearArchiveView, MonthArchiveView, WeekArchiveView, DayArchiveView, TodayArchiveView, DateDetailView,\n                                           BaseDateListView, DateDetailView, YearArchiveView, MonthArchiveView, WeekArchiveView, DayArchiveView, TodayArchiveView)\n    from django.views.generic.detail import DetailView\n    from django.views.generic.edit import CreateView, DeleteView, UpdateView\n    from django.views.generic.list import ListView\n    from django.views.generic.dates import (ArchiveIndexView, YearArchiveView, MonthArchiveView, WeekArchiveView, DayArchiveView, TodayArchiveView, DateDetailView,\n                                           BaseDateListView, DateDetailView, YearArchiveView, MonthArchiveView, WeekArchiveView, DayArchiveView, TodayArchiveView)\n    from django.views.generic.detail import DetailView\n    from django.views.generic.edit import CreateView, DeleteView, UpdateView\n    from django.views.generic.list import ListView\n    from django.views.generic.dates import (ArchiveIndexView, YearArchiveView, MonthArchiveView, WeekArchiveView, DayArchiveView, TodayArchiveView, DateDetailView,\n                                           BaseDateListView, DateDetailView, YearArchiveView, MonthArchiveView, WeekArchiveView, DayArchiveView, TodayArchiveView)\n    from django.views.generic.", "CodeBleu_score": 12.224294326212826}, {"code": "def get_model_urls(app_label, model_name)\n\tview_configs = get_view_configs(app_label, model_name)\n    if not view_configs:\n        return []\n    view_classes = [\n        import_string(view_config.view) for view_config in view_configs\n    ]\n    return [\n        path(\n            view_config.url_path,\n            view_.as_view(**view_config.kwargs),\n            name=view_config.name,\n        )\n        for view_, view_config in zip(view_classes, view_configs)\n    ]\n\n", "CodeBleu_score": 18.129181510302082}]}
{"instance_id": "9f4c69dfe312", "generation_result": [{"code": "def run_validators(instance, validators)\n\trequest = current_request.get()\n    for validator in validators:\n        if isinstance(validator, str):\n            validator = getattr(importlib.import_module(validator.rsplit(\".\", 1)[0]), validator.rsplit(\".\", 1)[1])\n        elif isinstance(validator, dict):\n            validator = CustomValidator(**validator)\n        if not issubclass(validator, CustomValidator):\n            raise ImproperlyConfigured(\n                \"Validators must be subclasses of CustomValidator. Received %s.\" % type(validator)\n            )\n        validator(instance, request)\n\n\n\n\n", "CodeBleu_score": 43.25195821036964}, {"code": "def run_validators(instance, validators)\n\tcurrent_request = getattr(instance, \"current_request\", None)\n    for validator in validators:\n        if isinstance(validator, str):\n            validator = validator.rsplit(\".\", 1)[-1]\n            validator = importlib.import_module(validator)\n            validator = getattr(validator, validator)\n        elif isinstance(validator, dict):\n            validator = CustomValidator(**validator)\n        if not issubclass(validator, CustomValidator):\n            raise ImproperlyConfigured(\n                \"The validator {} is not a subclass of CustomValidator.\".format(\n                    type(validator)\n                )\n            )\n        validator(instance, current_request=current_request.get(\"request\"))", "CodeBleu_score": 35.14440986330705}, {"code": "def run_validators(instance, validators)\n\trequest = current_request.get()\n    for validator in validators:\n        if isinstance(validator, str):\n            validator = importlib.import_module(validator)\n        if isinstance(validator, dict):\n            validator = CustomValidator(**validator)\n        if not issubclass(validator, CustomValidator):\n            raise ImproperlyConfigured(\n                f\"{validator} is not a subclass of CustomValidator\"\n            )\n        validator.apply(instance, request)\n\n", "CodeBleu_score": 35.34475427401686}]}
{"instance_id": "0b2ff7fe76f6", "generation_result": [{"code": "export function playMedia(destiny){\n\tvar panel = document.getElementById(destiny);\n    var media = panel.querySelectorAll('video[data-autoplay], audio[data-autoplay]');\n    var youtube = panel.querySelectorAll('iframe[data-autoplay][src*=\"youtube\"]');\n    for (var i = 0; i < media.length; i++) {\n        if (media[i].play) {\n            media[i].play();\n        }\n    }\n    for (var i = 0; i < youtube.length; i++) {\n        playYoutube(youtube[i]);\n        youtube[i].onload = function() {\n            playYoutube(this);\n        };\n    }\n}", "CodeBleu_score": 35.26681213410552}, {"code": "export function playMedia(destiny){\n\t// Get the panel with the given destiny\n    let panel = document.querySelector('[data-destiny=\"' + destiny + '\"]');\n    // If the panel is found\n    if (panel) {\n        // Select all video and audio elements with the 'data-autoplay' attribute\n        let media = panel.querySelectorAll('video[data-autoplay], audio[data-autoplay]');\n        // For each media element\n        for (let i = 0; i < media.length; i++) {\n            // If the media element has a play method\n            if (media[i].play) {\n                // Play the media element\n                media[i].play();\n            }\n        }\n        // Select all YouTube iframes with the 'data-autoplay' attribute\n        let iframes = panel.querySelectorAll('iframe[data-autoplay][src*=\"youtube.com\"]');\n        // For each iframe\n        for (let i = 0; i < iframes.length; i++) {\n            // If the iframe has the 'data-autoplay' attribute\n            if (iframes[i].hasAttribute('data-autoplay')) {\n                // If the iframe is not already playing\n                if (!iframes[i].hasAttribute('data-playing')) {\n                    // Play the YouTube iframe\n                    playYoutube(iframes[i]);\n                    // Set the 'data-playing' attribute on the iframe\n                    iframes[i].setAttribute('data-playing', 'true');\n                    // Set an onload handler for the iframe\n                    iframes[i].onload = function () {\n                        // Play the YouTube iframe\n                        playYoutube(iframes[i]);\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 28.544366165150347}, {"code": "export function playMedia(destiny){\n\tvar panel = document.getElementById(destiny);\n    if (panel) {\n        var videos = panel.querySelectorAll('video[data-autoplay]');\n        for (var i = 0; i < videos.length; i++) {\n            var video = videos[i];\n            if (video.play) {\n                video.play();\n            }\n        }\n        var audios = panel.querySelectorAll('audio[data-autoplay]');\n        for (var i = 0; i < audios.length; i++) {\n            var audio = audios[i];\n            if (audio.play) {\n                audio.play();\n            }\n        }\n        var iframes = panel.querySelectorAll('iframe[data-autoplay]');\n        for (var i = 0; i < iframes.length; i++) {\n            var iframe = iframes[i];\n            if (iframe.contentWindow) {\n                if (iframe.src.indexOf('youtube.com') > -1) {\n                    if (iframe.hasAttribute('data-autoplay')) {\n                        iframe.onload = function () {\n                            playYoutube(this);\n                        };\n                    }\n                } else if (iframe.src.indexOf('vimeo.com') > -1) {\n                    if (iframe.hasAttribute('data-autoplay')) {\n                        iframe.onload = function () {\n                            playVimeo(this);\n                        };\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 31.29129306364893}]}
{"instance_id": "12d28719c647", "generation_result": [{"code": "export function stopMedia(destiny){\n\tvar panel = getSlideOrSection(destiny);\n\n  // If the panel is the current one, it won't be visible so we need to select it again\n  if (panel.classList.contains('present')) {\n    var parentSection = destiny.closest('.section');\n    var index = utils.indexh(parentSection);\n    panel = document.querySelectorAll('.reveal .slides > section')[index - 1];\n  }\n\n  utils.$('video, audio', panel).forEach(function(element) {\n    if (!element.hasAttribute('data-keepplaying')) {\n      element.pause();\n    }\n  });\n\n  utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function(element) {\n    if (!element.hasAttribute('data-keepplaying')) {\n      var videoId = /[\\\\?\\\\&]v=([^\\\\?\\\\&]+)/.exec(element.src);\n      videoId = videoId ? videoId[1] : null;\n\n      if (videoId) {\n        element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n      }\n    }\n  });\n}", "CodeBleu_score": 54.43232315009546}, {"code": "export function stopMedia(destiny){\n\tvar panel = getSlideOrSection(destiny);\n    if (panel) {\n        utils.$('video, audio', panel).forEach(function (element) {\n            if (!utils.getAttr(element, 'data-keepplaying')) {\n                element.pause();\n            }\n        });\n        utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function (element) {\n            if (!utils.getAttr(element, 'data-keepplaying')) {\n                if (element.hasAttribute('data-autoplay')) {\n                    element.removeAttribute('data-autoplay');\n                }\n                if (element.contentWindow) {\n                    element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n                }\n            }\n        });\n    }\n}", "CodeBleu_score": 62.255524427958434}, {"code": "export function stopMedia(destiny){\n\tvar panel = getSlideOrSection(destiny);\n\n    // Select all videos and audios\n    utils.$('video, audio', panel).forEach(function(element) {\n        // Pause the media element\n        if (!utils.getAttr(element, 'data-keepplaying')) {\n            element.pause();\n        }\n    });\n\n    // YouTube videos\n    utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function(element) {\n        if (!utils.getAttr(element, 'data-keepplaying')) {\n            element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n        }\n    });\n}", "CodeBleu_score": 64.88636506182665}]}
{"instance_id": "e0d58d76f87e", "generation_result": [{"code": "export function createSlideArrows(section){\n\tconst sectionIndex = section.getAttribute('data-section-index');\n  const sectionId = section.getAttribute('id');\n  const sectionHash = section.getAttribute('data-section-hash');\n  const options = getOptions();\n  const loopBottom = options.loopBottom;\n  const loopTop = options.loopTop;\n  const cssClass = options.navigation.cssClass;\n  const showSlideArrows = options.navigation.showSlideArrows;\n  const hidePrev = options.navigation.hidePrev;\n  const hideNext = options.navigation.hideNext;\n  const showPrev = !hidePrev;\n  const showNext = !hideNext;\n  const prevArrow = utils.createElementFromHTML(\n    `<div class=\"${cssClass}-prev ${cssClass}-arrow-${sectionId} ${cssClass}-prev-${sectionId} ${cssClass}-prev-${sectionIndex} ${cssClass}-prev-${sectionHash} ${cssClass}-prev-${sectionIndex}-${sectionHash} ${cssClass}-prev-${sectionIndex}-${sectionId} ${cssClass}-prev-${sectionHash}-${sectionId} ${cssClass}-prev-${sectionId}-${sectionIndex} ${cssClass}-prev-${sectionId}-${sectionHash} ${cssClass}-prev-${sectionHash}-${sectionIndex} ${cssClass}-prev-${sectionIndex}-${sectionId} ${cssClass}-prev-${sectionHash}-${sectionId} ${cssClass}-arrow-prev ${cssClass}-arrow-prev-${sectionIndex} ${cssClass}-arrow-prev-${sectionHash} ${cssClass}-arrow-prev-${sectionIndex}-${sectionHash} ${cssClass}-arrow-prev-${sectionIndex}-${sectionId} ${cssClass}-arrow-prev-${sectionHash}-${sectionId} ${cssClass}-arrow-prev-${sectionId}-${sectionIndex} ${cssClass}-arrow-prev-${sectionId}-${sectionHash} ${cssClass}-arrow-prev-${sectionHash}-${sectionIndex} ${cssClass}-arrow-prev-${sectionIndex}-${sectionId} ${cssClass}-arrow-prev-${sectionHash}-${sectionId} ${cssClass}-arrow-prev-${sectionId}-${sectionIndex} ${cssClass", "CodeBleu_score": 22.165616759555522}, {"code": "export function createSlideArrows(section){\n\tconst wrapper = section.slides[0].querySelector('.reveal .slides');\n  const prev = utils.createElementFromHTML(\n    `<div class=\"navigator-arrow navigator-prev\">\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z\"></path>\n    </svg>\n  </div>`\n  );\n  const next = utils.createElementFromHTML(\n    `<div class=\"navigator-arrow navigator-next\">\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z\" transform=\"translate(100, 100) rotate(180) \"></path>\n    </svg>\n  </div>`\n  );\n  wrapper.appendChild(prev);\n  wrapper.appendChild(next);\n\n  const options = getOptions(section);\n  if (!options.loop) {\n    utils.hide(prev);\n  }\n\n  if (options.navigationArrows === 'solid') {\n    utils.addClass(prev, 'navigator-arrow--solid');\n    utils.addClass(next, 'navigator-arrow--solid');\n  }\n\n  if (options.navigationArrowsColor) {\n    utils.css(prev, {\n      fill: options.navigationArrowsColor,\n    });\n    utils.css(next, {\n      fill: options.navigationArrowsColor,\n    });\n  }\n}", "CodeBleu_score": 28.126831381475014}, {"code": "export function createSlideArrows(section){\n\tconst wrapper = section.querySelector(`.${SLIDES_CONTAINER_CLASS}`);\n  const options = getOptions(section);\n  const arrows = {\n    next: utils.createElementFromHTML(\n      `<button class=\"${SLIDES_ARROW_NEXT_CLASS}\"></button>`\n    ),\n    prev: utils.createElementFromHTML(\n      `<button class=\"${SLIDES_ARROW_PREV_CLASS}\"></button>`\n    ),\n  };\n\n  wrapper.appendChild(arrows.prev);\n  wrapper.appendChild(arrows.next);\n\n  if (!options.loop) {\n    utils.hide(arrows.prev);\n  }\n\n  utils.css(arrows.next, {\n    background: options.navigation.nextColor,\n  });\n\n  utils.css(arrows.prev, {\n    background: options.navigation.prevColor,\n  });\n\n  return arrows;\n}", "CodeBleu_score": 26.240703941785497}]}
{"instance_id": "09898985b216", "generation_result": [{"code": "function slideArrowHandler(){\n\tconst slideArrow = event.target;\n  const slideSection = utils.closest(slideArrow, SLIDE_SECTION_SELECTOR);\n  const slideSectionIndex = slideSections.indexOf(slideSection);\n\n  if (utils.hasClass(slideArrow, SLIDES_PREV) && getIsScrollAllowed(slideSectionIndex - 1)) {\n    setState({ slideSectionIndex: slideSectionIndex - 1 });\n    EventEmitter.emit(EVENTS.MOVE_SLIDE_LEFT);\n  } else if (!utils.hasClass(slideArrow, SLIDES_PREV) && getIsScrollAllowed(slideSectionIndex + 1)) {\n    setState({ slideSectionIndex: slideSectionIndex + 1 });\n    EventEmitter.emit(EVENTS.MOVE_SLIDE_RIGHT);\n  }\n}", "CodeBleu_score": 30.9997742850105}, {"code": "function slideArrowHandler(){\n\tconst { slideArrow } = this.state;\n  const { slideIndex } = this.state;\n  const { slideCount } = this.state;\n  const { getIsScrollAllowed } = this;\n\n  const slide = slideArrow.closest(`.${SLIDES_CONTAINER_CLASS}`);\n  const slideArrowClassList = slideArrow.classList;\n  const slideArrowClassListContains = slideArrowClassList.contains(SLIDES_PREV);\n\n  const isScrollAllowed = getIsScrollAllowed(slideIndex, slideCount);\n\n  if (slideArrowClassListContains && isScrollAllowed.left) {\n    this.setState({ slideIndex: slideIndex - 1 });\n    EventEmitter.emit(MOVE_SLIDE_LEFT);\n  } else if (!slideArrowClassListContains && isScrollAllowed.right) {\n    this.setState({ slideIndex: slideIndex + 1 });\n    EventEmitter.emit(MOVE_SLIDE_RIGHT);\n  }\n}", "CodeBleu_score": 21.217239385275715}, {"code": "function slideArrowHandler(){\n\t// 1. Get the closest section to the clicked arrow\n  const closestSection = utils.closest(this, 'section');\n\n  // 2. Check if the arrow has the class SLIDES_PREV\n  if (utils.hasClass(this, 'slides-prev')) {\n    // 3. If true, and left scroll is allowed, update the state and trigger the moveSlideLeft event\n    if (getIsScrollAllowed('left')) {\n      setState({\n        currentSlide: closestSection.dataset.slide,\n      });\n      EventEmitter.emit('moveSlideLeft');\n    }\n  } else {\n    // 4. If false, and right scroll is allowed, update the state and trigger the moveSlideRight event\n    if (getIsScrollAllowed('right')) {\n      setState({\n        currentSlide: closestSection.dataset.slide,\n      });\n      EventEmitter.emit('moveSlideRight');\n    }\n  }\n}", "CodeBleu_score": 47.13261152508703}]}
{"instance_id": "69ef3030fb15", "generation_result": [{"code": "export function addSlidesNavigation(section){\n\tconst slides = section.querySelectorAll('.slide');\n  const navigation = utils.createElementFromHTML(\n    `<div class=\"navigation\"></div>`\n  );\n  const bullet = utils.createElementFromHTML(\n    `<span class=\"bullet\"></span>`\n  );\n\n  utils.css(navigation, {\n    position: 'absolute',\n    bottom: '20px',\n    left: '50%',\n    WebkitTransform: 'translateX(-50%)',\n    msTransform: 'translateX(-50%)',\n    transform: 'translateX(-50%)'\n  });\n\n  if (getOptions().navigation) {\n    section.appendChild(navigation);\n  }\n\n  for (let i = 0; i < slides.length; i++) {\n    const link = utils.createElementFromHTML(\n      `<a href=\"#${getBulletLinkName(section, i)}\">${bullet.outerHTML}</a>`\n    );\n\n    link.addEventListener('click', e => {\n      e.preventDefault();\n      const slide = section.querySelectorAll('.slide')[i];\n      const dest = slide.offsetTop - section.offsetTop;\n\n      if (getOptions().animateAnchor === true) {\n        utils.animateAnchor(slide, dest);\n      } else {\n        window.scrollTo(window.scrollX, dest + window.scrollY);\n      }\n    });\n\n    navigation.appendChild(link);\n  }\n\n  if (getOptions().navigation) {\n    utils.css(navigation, {\n      display: 'block'\n    });\n  }\n\n  utils.addClass(navigation.querySelectorAll('a')[section.activeSlide.index], 'active');\n}", "CodeBleu_score": 29.499737096762484}, {"code": "export function addSlidesNavigation(section){\n\tconst slides = section.querySelectorAll('.slide');\n  const navigation = utils.createElementFromHTML(`<div class=\"navigation\"></div>`);\n  const navigationBullets = [];\n  let navigationBullet;\n  let i;\n\n  // Section must have at least two slides for the navigation to work\n  if (slides.length > 1) {\n    // Looping over the slides and creating a bullet for each one\n    for (i = 0; i < slides.length; i += 1) {\n      navigationBullet = utils.createElementFromHTML(`<a class=\"navigation-bullet\" href=\"#${slides[i].id}\"></a>`);\n\n      navigationBullets.push(navigationBullet);\n      navigation.appendChild(navigationBullet);\n    }\n\n    // Adding the navigation to the section\n    section.appendChild(navigation);\n\n    // Centering the navigation\n    navigation.style.cssText = `\n      position: absolute;\n      top: 50%;\n      width: 100%;\n      transform: translateY(-50%);\n    `;\n\n    // Setting the active bullet\n    navigationBullets[section.activeSlide.index].classList.add('active');\n\n    // Adding navigation bullets styles\n    utils.css(navigationBullets, {\n      display: 'inline-block',\n      width: '12px',\n      height: '12px',\n      borderRadius: '50%',\n      margin: '0 10px',\n      background: 'rgba(255, 255, 255, 0.5)',\n      cursor: 'pointer',\n      transition: 'all 0.2s ease-in-out',\n    });\n\n    // Adding navigation bullets hover styles\n    utils.css(navigationBullets, {\n      ':hover': {\n        background: 'rgba(255, 255, 255, 0.8)',\n      },\n    });\n\n    // Adding navigation bullets active styles\n    utils.css(navigationBullets, {\n      '.active': {", "CodeBleu_score": 23.735598215144954}, {"code": "export function addSlidesNavigation(section){\n\tconst slides = section.querySelectorAll('.slide');\n  const nav = document.createElement('div');\n  const navItems = [];\n\n  nav.className = 'nav';\n  nav.innerHTML = '<span class=\"nav-item\"></span>';\n\n  if (slides.length > 1) {\n    section.appendChild(nav);\n  }\n\n  slides.forEach((slide, index) => {\n    const slideClasses = slide.className.split(' ');\n    const slideData = slide.dataset;\n    const bullet = nav.querySelector('.nav-item');\n    const bulletClasses = bullet.className.split(' ');\n    const bulletData = bullet.dataset;\n\n    slideClasses.forEach((slideClass) => {\n      if (slideClass !== 'slide') {\n        bulletClasses.push(slideClass);\n      }\n    });\n\n    if (slideData.nav) {\n      bulletData.nav = slideData.nav;\n    }\n\n    bullet.className = bulletClasses.join(' ');\n    bullet.dataset = bulletData;\n    bullet.innerHTML = getBulletLinkName(slide);\n\n    navItems.push(bullet);\n\n    if (index < slides.length - 1) {\n      nav.appendChild(bullet.cloneNode(true));\n    }\n  });\n\n  const navPosition = getOptions(section).navigation.position;\n\n  if (navPosition === 'left' || navPosition === 'right') {\n    utils.css(nav, {\n      top: '50%',\n      transform: 'translateY(-50%)',\n      left: navPosition === 'left' ? 0 : 'auto',\n      right: navPosition === 'right' ? 0 : 'auto',\n    });\n  }\n\n  utils.css(nav, {\n    opacity: getOptions(section).navigation.show ? 1 : 0,\n  });\n\n  navItems.forEach((item, index) => {\n    const slide = slides[index];\n    const slideClasses = slide.className.split(' ');\n    const slideData = slide.dataset;\n    const itemClasses = item.className.split(' ');\n    const itemData =", "CodeBleu_score": 25.68212727991511}]}
{"instance_id": "d86cd1fd918a", "generation_result": [{"code": "function menuItemsHandler(e){\n\tconst anchor = this.getAttribute('href');\n  const state = this.getAttribute('data-state');\n  const options = this.getOptions();\n  const anchors = options.anchors;\n  const menu = options.menu;\n\n  if (anchors.length && state === 'menu') {\n    e.preventDefault();\n\n    this.setState('locked');\n\n    if (menu) {\n      this.emit('onMenuClick', anchor);\n    }\n  }\n}", "CodeBleu_score": 32.881812838156286}, {"code": "function menuItemsHandler(e){\n\tif (this.state.scrollTrigger === 'menu') {\n    e.preventDefault();\n    return;\n  }\n\n  this.setState({\n    scrollTrigger: 'menu',\n  });\n\n  if (this.menu && !this.options.anchorsLock) {\n    e.preventDefault();\n    const anchor = this.menu.querySelector(`.${this.options.anchorClass}[href=\"#${e.target.hash.slice(1)}\"]`);\n    if (anchor) {\n      EventEmitter.emit('onMenuClick', anchor);\n    }\n  }\n}", "CodeBleu_score": 40.23131514684417}, {"code": "function menuItemsHandler(e){\n\tconst state = this.state;\n  const options = this.options;\n  const $target = utils.$(e.target);\n  const $menuItem = utils.closest($target, options.menuItemSelector);\n  const $anchor = utils.getAttr($menuItem, 'href');\n  const $anchorTarget = utils.$($anchor);\n  const isLocked = state.isLocked;\n\n  if (options.menu && !isLocked && $anchorTarget) {\n    e.preventDefault();\n    this.setState({\n      scrollTrigger: 'menu',\n    });\n    this.emit('onMenuClick', $anchorTarget);\n  }\n}", "CodeBleu_score": 34.70884375694603}]}
{"instance_id": "19fb16a46144", "generation_result": [{"code": "export function setScrolling(element, val){\n\tif (this.settings.autoScrolling && !this.hasScrollbar(element)) {\n        element.style.top = val + 'px';\n    } else if (this.hasClass(element, SLIDES_WRAPPER)) {\n        element.scrollLeft = val;\n    } else {\n        this.scrollTo(element, val, 0);\n    }\n}", "CodeBleu_score": 39.98534225959761}, {"code": "export function setScrolling(element, val){\n\tif (this.options.autoScrolling && !this.hasScrollbar(element)) {\n    element.style.top = val + 'px';\n  } else {\n    if (element.classList.contains(SLIDES_WRAPPER)) {\n      element.scrollLeft = val;\n    } else {\n      element.scrollTo(0, val);\n    }\n  }\n}", "CodeBleu_score": 37.881262325230075}, {"code": "export function setScrolling(element, val){\n\tvar options = getOptions();\n  var utils = getUtils();\n  var element = element;\n  var val = val;\n  if (options.autoScrolling && !utils.isMobile && element.className.indexOf(SLIDES_WRAPPER_CLASS) !== -1) {\n    element.scrollLeft = val;\n  } else {\n    if (options.autoScrolling && !utils.isMobile) {\n      element.style.top = val + 'px';\n    } else {\n      utils.scrollTo(element, val, 0);\n    }\n  }\n}", "CodeBleu_score": 40.94942223369005}]}
{"instance_id": "09a10e1f1af9", "generation_result": [{"code": "function activateMenuElement(name){\n\tif (getOptions().menu) {\n    if (getOptions().menu.length > 0) {\n      utils.$(getOptions().menu).forEach(function(element) {\n        var menuAnchor = element.getAttribute('data-menuanchor');\n        if (menuAnchor === name) {\n          utils.removeClass(element, 'active');\n          utils.addClass(element, 'active');\n        }\n      });\n    }\n  }\n}", "CodeBleu_score": 49.52485816841947}, {"code": "function activateMenuElement(name){\n\t// Check if the menu options exist and are not empty.\n  if (getOptions().menu && getOptions().menu.length > 0) {\n    // For each menu, remove the active class from the currently active element and add the active class to the element with the corresponding data-menuanchor attribute matching the provided name.\n    utils.$(getOptions().menu).forEach(function(menu) {\n      utils.$(menu).find('li.active').removeClass('active');\n      utils.$(menu).find('li[data-menuanchor=\"' + name + '\"]').addClass('active');\n    });\n  }\n}", "CodeBleu_score": 44.59463189687083}, {"code": "function activateMenuElement(name){\n\t// If the menu options exist and are not empty\n  if (getOptions().menu && getOptions().menu.length) {\n    // For each menu\n    utils.$(getOptions().menu).forEach(function(menu) {\n      // Remove the active class from the currently active element\n      utils.$(menu).find(getOptions().menuActiveClass).removeClass(getOptions().menuActiveClass);\n      // Add the active class to the element with the corresponding data-menuanchor attribute matching the provided name\n      utils.$(menu).find('[data-menuanchor=\"' + name + '\"]').addClass(getOptions().menuActiveClass);\n    });\n  }\n}", "CodeBleu_score": 46.384637499312205}]}
{"instance_id": "4556a956fd7c", "generation_result": [{"code": "export function lazyLoadOthers(){\n\tif (!state.lazyLoading) return;\n\n    //if there are auto-height sections and the window width is larger than 768px (responsive)\n    if (state.autoHeight && state.responsive) {\n        //then lazy load sections in viewport\n        lazyLoadInViewport();\n    }\n\n    //if there are auto-height sections and the window width is less than 768px (not responsive)\n    else if (state.autoHeight && !state.responsive) {\n        //then lazy load sections in viewport\n        lazyLoadInViewport();\n    }\n\n    //if there are auto-height sections and the window width is less than 768px (not responsive)\n    else if (!state.autoHeight && !state.responsive) {\n        //then lazy load sections in viewport\n        lazyLoadInViewport();\n    }\n\n    //if there are no auto-height sections and the window width is larger than 768px (responsive)\n    else if (!state.autoHeight && state.responsive) {\n        //then lazy load sections in viewport\n        lazyLoadInViewport();\n    }\n}", "CodeBleu_score": 18.723004867298886}, {"code": "export function lazyLoadOthers(){\n\tif (state.lazyLoading && (state.autoHeight || isResponsiveMode())) {\n        //check if there are any sections in the viewport\n        var sectionsInViewport = [];\n        var sections = utils.$(SECTION_SEL + ':not(' + ACTIVE_SEL + ')');\n        var sectionsNumber = sections.length;\n\n        for (var i = 0; i < sectionsNumber; ++i) {\n            var section = sections[i];\n            if (isSectionInViewport(section)) {\n                sectionsInViewport.push(section);\n            }\n        }\n\n        //if there are sections in the viewport, check if there are any in lazyload\n        if (sectionsInViewport.length) {\n            var lazyloadSections = utils.$(SECTION_SEL + '.' + LAZY_LOADING_SEL);\n            var lazyloadSectionsNumber = lazyloadSections.length;\n\n            for (var i = 0; i < sectionsInViewport.length; ++i) {\n                var section = sectionsInViewport[i];\n                var isLazyLoadSection = false;\n\n                for (var j = 0; j < lazyloadSectionsNumber; ++j) {\n                    var lazyloadSection = lazyloadSections[j];\n                    if (section == lazyloadSection) {\n                        isLazyLoadSection = true;\n                        break;\n                    }\n                }\n\n                //if it's not already lazyloading, lazyload it!\n                if (!isLazyLoadSection) {\n                    lazyloadSection(section);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 38.8432601678294}, {"code": "export function lazyLoadOthers(){\n\tif (state.lazyLoading && (state.autoHeight || isResponsiveMode())) {\n        var sections = utils.$(SECTION_SEL + ':not(' + ACTIVE_SEL + ')');\n\n        //looping through all the sections that are not active\n        sections.forEach(function (section) {\n            //if the section is not active but in the viewport\n            if (isSectionInViewport(section)) {\n                //getting the section's index\n                var index = sections.indexOf(section);\n                //getting the section's height\n                var height = getSectionHeight(section);\n                //setting the height to the section\n                setSectionHeight(section, height);\n                //setting the height to the section's container\n                setContainerHeight(section, height);\n                //setting the height to the section's parent\n                setParentHeight(section);\n                //setting the height to the section's parent's container\n                setParentContainerHeight(section);\n                //setting the height to the section's parent's parent\n                setParentParentHeight(section);\n                //setting the height to the section's parent's parent's container\n                setParentParentContainerHeight(section);\n                //setting the height to the section's parent's parent's parent\n                setParentParentParentHeight(section);\n                //setting the height to the section's parent's parent's parent's container\n                setParentParentParentContainerHeight(section);\n                //setting the height to the section's parent's parent's parent's parent\n                setParentParentParentParentHeight(section);\n                //setting the height to the section's parent's parent's parent's parent's container\n                setParentParentParentParentContainerHeight(section);\n                //setting the height to the section's parent's parent's parent's parent's parent\n                setParentParentParentParentParentHeight(section);\n                //setting the height to the section's parent's parent's parent's parent's parent's container\n                setParentParentParentParentParentContainerHeight(section);\n                //setting the height to the section's parent's parent's parent's parent's parent's parent", "CodeBleu_score": 38.19796389665259}]}
{"instance_id": "a4324e094376", "generation_result": [{"code": "function keepSlidesPosition(){\n\tvar slides = utils.$('.slide.active, .slide.present');\n\n  for (var i = 0; i < slides.length; i++) {\n    silentLandscapeScroll(slides[i], 'internal');\n  }\n}", "CodeBleu_score": 54.31315523539747}, {"code": "function keepSlidesPosition(){\n\tvar activeSlides = utils.getActiveSlides();\n  activeSlides.each(function(index, slide) {\n    utils.silentLandscapeScroll(slide, 'internal');\n  });\n}", "CodeBleu_score": 31.261332176259}, {"code": "function keepSlidesPosition(){\n\t// Select all active slides\n  var activeSlides = utils.$(\n    'section.active, section.active-next, section.active-prev'\n  );\n\n  // Iterate through all active slides\n  activeSlides.each(function () {\n    // Call silentLandscapeScroll with the slide element and 'internal' as arguments\n    silentLandscapeScroll(this, 'internal');\n  });\n}", "CodeBleu_score": 33.70451769616496}]}
{"instance_id": "9eb664182655", "generation_result": [{"code": "export function updateStructuralState(){\n\tvar container = getContainer();\n    var allSections = Array.from(container.querySelectorAll(SELECTORS.SECTION));\n    var allSectionItems = Array.from(container.querySelectorAll(SELECTORS.SECTION_ITEM));\n    var allSlides = Array.from(container.querySelectorAll(SELECTORS.SLIDE));\n    var allPanels = Array.from(container.querySelectorAll(SELECTORS.PANEL));\n    var state = getState();\n    var activeSection = getActiveSection();\n    var activeSlide = getActiveSlide();\n    var prevActiveSectionIndex = getPrevActiveSectionIndex(activeSection);\n    var prevActiveSlideIndex = getPrevActiveSlideIndex(activeSlide);\n    var prevActivePanelIndex = getPrevActivePanelIndex(activeSlide);\n    var visibleSections = allSections.filter(utils.$visible);\n    var visibleSectionItems = Array.from(container.querySelectorAll(SELECTORS.SECTION_ITEM)).filter(utils.$visible);\n    var visibleSlides = allSlides.filter(utils.$visible);\n    var visiblePanels = allPanels.filter(utils.$visible);\n    var sections = visibleSections.reduce(function (acc, section) {\n        var sectionItems = Array.from(section.querySelectorAll(SELECTORS.SECTION_ITEM)).filter(utils.$visible);\n        var slides = sections.concat(sectionItems).map(function (item) {\n            return getPanelByElement(allPanels, item);\n        }).filter(utils.$visible);\n        var sectionPanel = new SectionPanel(section, sectionItems, slides);\n        return acc.concat(sectionPanel);\n    }, []);\n    var slides = visibleSlides.map(function (slide) {\n        return getPanelByElement(allPanels, slide);\n    }).filter(utils.$visible);\n    var panels = visiblePanels.map(function (panel) {\n        return getPanelByElement(allPanels, panel);\n    }).filter(utils.$visible);\n    var options = getOptions();\n    state.sections = sections;\n    state.slides = slides;\n    state.panels = panels;\n    state", "CodeBleu_score": 40.43888585687788}, {"code": "export function updateStructuralState(){\n\tvar state = this.state;\n    var allSectionItems = this.getSectionItems();\n    var allSections = Array.from(allSectionItems).map(function (sectionItem) {\n        return new SectionPanel(sectionItem, state.container);\n    });\n    var visibleSections = allSections.filter(function (section) {\n        return utils.$(section.item).isVisible();\n    });\n    var visibleSlides = Array.from(visibleSections).reduce(function (acc, section) {\n        return acc.concat(section.slides);\n    }, []);\n    var prevActiveSectionIndex = getPrevActivePanelIndex(state.activeSection);\n    var prevActiveSlideIndex = getPrevActivePanelIndex(state.activeSlide);\n    state.sections = visibleSections;\n    state.slides = visibleSlides;\n    state.sectionsIncludingHidden = allSections;\n    state.slidesIncludingHidden = Array.from(allSectionItems).reduce(function (acc, sectionItem) {\n        return acc.concat(Array.from(sectionItem.querySelectorAll(SLIDE_SELECTOR)));\n    }, []);\n    state.activeSection = state.sections[0];\n    state.activeSlide = state.slides[0];\n    state.prevActiveSectionIndex = prevActiveSectionIndex;\n    state.prevActiveSlideIndex = prevActiveSlideIndex;\n}", "CodeBleu_score": 48.620556257852876}, {"code": "export function updateStructuralState(){\n\tvar sections = Array.from(utils.$(state.container).children);\n\n  state.sections = sections.reduce(function (acc, section) {\n    var sectionPanel = new SectionPanel(section);\n    if (sectionPanel.isVisible()) {\n      acc.push(sectionPanel);\n    }\n    return acc;\n  }, []);\n\n  state.sectionsIncludingHidden = Array.from(state.sections);\n\n  state.slides = Array.from(allSections.filter(function (section) {\n    return section.isVisible();\n  }).reduce(function (acc, section) {\n    return acc.concat(section.slides);\n  }, []));\n\n  state.slidesIncludingHidden = Array.from(allSections.reduce(function (acc, section) {\n    return acc.concat(section.slidesIncludingHidden);\n  }, []));\n\n  state.panels = Array.from(allSections.filter(function (section) {\n    return section.isVisible();\n  }).reduce(function (acc, section) {\n    return acc.concat(section.panels);\n  }, []));\n\n  state.panelsIncludingHidden = Array.from(allSections.reduce(function (acc, section) {\n    return acc.concat(section.panelsIncludingHidden);\n  }, []));\n\n  state.prevActiveSectionIndex = getPrevActiveSectionIndex(state.activeSection);\n  state.prevActiveSlideIndex = getPrevActiveSlideIndex(state.activeSlide);\n  state.prevActivePanelIndex = getPrevActivePanelIndex(state.activePanel);\n}", "CodeBleu_score": 33.04710879624498}]}
{"instance_id": "2b3c1077db45", "generation_result": [{"code": "function performHorizontalMove(slides, v, fireCallback){\n\t//if the movement is not continuous, we need to verify if it's possible to slide at all\n    if(!getOptions().continuousHorizontal){\n        if(v.destiny < 0 || v.destiny >= slides.length){\n            return;\n        }\n    }\n\n    //if the movement is not continuous, we need to verify if it's possible to slide at all\n    if(!getOptions().continuousVertical){\n        if(v.destinyY < 0 || v.destinyY >= slides.length){\n            return;\n        }\n    }\n\n    //if it's not possible to slide, we stop here\n    if(!v.canScroll){\n        return;\n    }\n\n    //preventing from scrolling while the animation is not finished\n    setState({slideMoving: true});\n\n    //if css3 is not supported and there is no need to change the slide, we stop here\n    if(!v.support && v.destiny === v.current){\n        return;\n    }\n\n    //if the movement is not continuous, we need to verify if it's possible to slide at all\n    if(!getOptions().continuousHorizontal){\n        if(v.destiny < 0 || v.destiny >= slides.length){\n            return;\n        }\n    }\n\n    //if the movement is not continuous, we need to verify if it's possible to slide at all\n    if(!getOptions().continuousVertical){\n        if(v.destinyY < 0 || v.destinyY >= slides.length){\n            return;\n        }\n    }\n\n    //if it's not possible to slide, we stop here\n    if(!v.canScroll){\n        return;\n    }\n\n    //preventing from scrolling while the animation is not finished\n    setState({slideMoving: true});\n\n    //if css3 is not supported and there is no need to change the slide, we stop here\n    if(!v.support && v.destiny === v.current){\n        return;\n    }\n\n    //setting the new position\n    setState({\n        current: v.destiny,\n        currentY: v.destinyY", "CodeBleu_score": 25.240619194664493}, {"code": "function performHorizontalMove(slides, v, fireCallback){\n\t//if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().continuousVertical) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().continuousHorizontal) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().continuous) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().scrollHorizontally) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().scrollVertically) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().scrollHorizontally && !getOptions().scrollVertically) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().scrollHorizontally && !getOptions().scrollVertically) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().scrollHorizontally && !getOptions().scrollVertically) {\n        v.destiny = slides.eq(v.destiny).index();\n    }\n\n    //if the movement is not continuous, we need to get the index of the current slide\n    if(!getOptions().scrollHorizontally && !getOptions().scrollVertically) {\n        v.", "CodeBleu_score": 23.49539607110399}, {"code": "function performHorizontalMove(slides, v, fireCallback){\n\t//the slide we are moving to\n    var destiny = v.destiny;\n\n    //the slide we are moving from\n    var origin = v.origin;\n\n    //the direction of the movement\n    var direction = v.direction;\n\n    //the destination position\n    var destinyPos = -v.destiny * v.slideWidth;\n\n    //the distance we need to move\n    var distance = v.slideWidth;\n\n    //the origin position\n    var originPos = -v.origin * v.slideWidth;\n\n    //if the origin was passed, we need to keep it in mind while moving\n    var keepOrigin = false;\n\n    //if the origin was passed, we need to keep it in mind while moving\n    var keepOrigin = false;\n\n    //the slide we are moving to\n    var destiny = v.destiny;\n\n    //the slide we are moving from\n    var origin = v.origin;\n\n    //the direction of the movement\n    var direction = v.direction;\n\n    //the destination position\n    var destinyPos = -v.destiny * v.slideWidth;\n\n    //the distance we need to move\n    var distance = v.slideWidth;\n\n    //the origin position\n    var originPos = -v.origin * v.slideWidth;\n\n    //if the origin was passed, we need to keep it in mind while moving\n    var keepOrigin = false;\n\n    //if the origin was passed, we need to keep it in mind while moving\n    var keepOrigin = false;\n\n    //the slide we are moving to\n    var destiny = v.destiny;\n\n    //the slide we are moving from\n    var origin = v.origin;\n\n    //the direction of the movement\n    var direction = v.direction;\n\n    //the destination position\n    var destinyPos = -v.destiny * v.slideWidth;\n\n    //the distance we need to move\n    var distance = v.slideWidth;\n\n    //the origin position\n    var originPos = -v.origin * v.slideWidth;\n\n    //if the origin was passed, we need to keep it in mind while moving\n    var keepOrigin = false;", "CodeBleu_score": 22.021639514903534}]}
{"instance_id": "82491a251576", "generation_result": [{"code": "buildLink (name: string, params: Record<string, any>): string{\n\tconst url = new URL(name, window.location.origin);\n  const searchParams = new URLSearchParams();\n\n  Object.keys(params).sort().forEach(key => {\n    searchParams.append(key, params[key]);\n  });\n\n  url.search = searchParams.toString();\n  return url.href;\n}", "CodeBleu_score": 30.811198870126045}, {"code": "buildLink (name: string, params: Record<string, any>): string{\n\tconst sortedKeys = Object.keys(params).sort()\n  const queryString = sortedKeys\n    .map((key) => {\n      return `${key}=${encodeURIComponent(params[key])}`\n    })\n    .join('&')\n  return `${name}?${queryString}`\n}", "CodeBleu_score": 48.78707674212851}, {"code": "buildLink (name: string, params: Record<string, any>): string{\n\tlet url = name\n  let paramKeys = Object.keys(params)\n  paramKeys.sort()\n  let paramString = ''\n  for (let i = 0; i < paramKeys.length; i++) {\n    let key = paramKeys[i]\n    let value = params[key]\n    if (typeof value === 'object') {\n      value = JSON.stringify(value)\n    }\n    paramString += `${key}=${encodeURIComponent(value)}&`\n  }\n  paramString = paramString.slice(0, -1)\n  url += `?${paramString}`\n  return url\n}", "CodeBleu_score": 35.56835874460674}]}
{"instance_id": "89f175570176", "generation_result": [{"code": "function showLoading (options: Taro.showLoading.Option): Promise<TaroGeneral.CallbackResult> {\n\tconst isObject = shouldBeObject(options)\n  if (!isObject.res) {\n    const res = { errMsg: `showLoading${isObject.msg}` }\n    console.error(res.errMsg)\n    return Promise.reject(res)\n  }\n\n  let { title = '', mask = false, success, fail, complete } = options || {} // eslint-disable-line\n\n  const res = { errMsg: 'showLoading:ok' }\n\n  const maskStyle = mask ? styles.container : styles.noMaskContainer\n\n  const ToastView = <WXLoading title={title} mask={mask} />\n\n  return render(ToastView, maskStyle, res, success, fail, complete)\n}", "CodeBleu_score": 72.4281250048635}, {"code": "function showLoading (options: Taro.showLoading.Option): Promise<TaroGeneral.CallbackResult> {\n\tconst isObject = shouldBeObject(options)\n  if (!isObject.res) {\n    const res = { errMsg: `showLoading${isObject.msg}` }\n    console.error(res.errMsg)\n    return Promise.reject(res)\n  }\n\n  let { title = '', mask = false, success, fail, complete } = options || {} // eslint-disable-line\n\n  const res = { errMsg: 'showLoading:ok' }\n\n  const maskStyle = mask ? styles.container : styles.noMaskContainer\n\n  let ToastView\n\n  ToastView = <WXLoading title={title} mask={mask} />\n\n  return new Promise((resolve, reject) => {\n    showToast({\n      title,\n      icon: 'loading',\n      duration: 0,\n      mask,\n      success: (res: TaroGeneral.CallbackResult) => {\n        if (success) success(res)\n        resolve(res)\n      },\n      fail: (res: TaroGeneral.CallbackResult) => {\n        if (fail) fail(res)\n        reject(res)\n      },\n      complete: (res: TaroGeneral.CallbackResult) => {\n        if (complete) complete(res)\n      }\n    })\n  })\n}", "CodeBleu_score": 60.1065344251483}, {"code": "function showLoading (options: Taro.showLoading.Option): Promise<TaroGeneral.CallbackResult> {\n\tconst isObject = shouldBeObject(options)\n  if (!isObject.res) {\n    const res = { errMsg: `showLoading${isObject.msg}` }\n    console.error(res.errMsg)\n    return Promise.reject(res)\n  }\n\n  let { title = '', mask = false, success, fail, complete } = options || {} // eslint-disable-line\n\n  const res = { errMsg: 'showLoading:ok' }\n\n  const maskStyle = mask ? styles.container : styles.noMaskContainer\n\n  const ToastView = <WXLoading title={title} mask={mask} />\n\n  return showToast({\n    title,\n    icon: 'loading',\n    duration: 0,\n    mask,\n    success,\n    fail,\n    complete\n  })\n}", "CodeBleu_score": 79.96982822182193}]}
{"instance_id": "7d41757a0645", "generation_result": [{"code": "export function HomepageTweets(){\n\treturn (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <h1 className=\"text-center\">Tweets</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        {TweetList.map((tweet) => (\n          <Tweet\n            key={tweet.id}\n            id={tweet.id}\n            username={tweet.username}\n            content={tweet.content}\n            date={tweet.date}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}", "CodeBleu_score": 56.39396871055504}, {"code": "export function HomepageTweets(){\n\treturn (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <h2 className=\"text-center\">\n            My Latest Tweets\n          </h2>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <Tweet\n            id=\"1048344332863563776\"\n            username=\"GregorySchier\"\n            tweet=\"I am a software engineer. I love building things that make people's lives better.\"\n            date=\"2018-03-01T14:12:49.000Z\"\n            imageUrl=\"https://pbs.twimg.com/profile_images/937541113008455680/h2QJqv2z_400x400.jpg\"\n          />\n          <Tweet\n            id=\"1048344332863563776\"\n            username=\"GregorySchier\"\n            tweet=\"I am a software engineer. I love building things that make people's lives better.\"\n            date=\"2018-03-01T14:12:49.000Z\"\n            imageUrl=\"https://pbs.twimg.com/profile_images/937541113008455680/h2QJqv2z_400x400.jpg\"\n          />\n          <Tweet\n            id=\"1048344332863563776\"\n            username=\"GregorySchier\"\n            tweet=\"I am a software engineer. I love building things that make people's lives better.\"\n            date=\"2018-03-01T14:12:49.000Z\"\n            imageUrl=\"https://pbs.twimg.com/profile_images/9375411130084", "CodeBleu_score": 41.62971672983796}, {"code": "export function HomepageTweets(){\n\treturn (\n    <div className=\"container\">\n      <div className=\"centered-heading\">\n        <h2>Latest Tweets</h2>\n      </div>\n      <div className=\"row\">\n        {TweetList.map((tweet) => (\n          <Tweet\n            key={tweet.id}\n            id={tweet.id}\n            username={tweet.username}\n            userImage={tweet.userImage}\n            text={tweet.text}\n            date={tweet.date}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}", "CodeBleu_score": 56.84894689869866}]}
