{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\treturn (\n        max(2, self.loop_wait - 2) * 1000,\n        self._orig_kazoo_connect(*args)\n    )\n\n\n\n\n", "CodeBleu_score": 51.20016229133777}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t# Call the original method with the given arguments.\n    return_value = self._orig_kazoo_connect(*args)\n    # Return a tuple of the wait time and the second element of the original method's return value.\n    return (max(2, self.loop_wait - 2) * 1000, return_value[1])\n\n", "CodeBleu_score": 52.809408931269445}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\twait_time = self._orig_kazoo_connect(*args)\n    if self.loop_wait > 2:\n        wait_time = (self.loop_wait - 2) * 1000\n    else:\n        wait_time = 2000\n    return wait_time, wait_time", "CodeBleu_score": 50.227421944674}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\tif isinstance(config, dict):\n        config = Config(config)\n\n    if config.ttl is not None:\n        if self.set_ttl(config.ttl):\n            self.logger.info('TTL has been changed to {}'.format(config.ttl))\n\n    if config.retry_timeout is not None:\n        self.set_retry_timeout(config.retry_timeout)\n\n    if config.loop_wait is not None:\n        self.set_loop_wait(config.loop_wait)\n\n    if config.connect_timeout is not None:\n        self.set_connect_timeout(config.connect_timeout)\n\n", "CodeBleu_score": 33.45601580627772}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\tif isinstance(config, dict):\n        config = Config(config)\n    if config.ttl:\n        if self.set_ttl(config.ttl):\n            self.logger.warning('TTL has been changed to %d seconds', config.ttl)\n    if config.retry_timeout:\n        self.set_retry_timeout(config.retry_timeout)\n    if config.loop_wait:\n        self.set_loop_wait(config.loop_wait)\n        if isinstance(self._client.handler, PatroniSequentialThreadingHandler):\n            self.set_connect_timeout(config.loop_wait)\n\n", "CodeBleu_score": 38.73861812636733}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\tif isinstance(config, Config):\n        config = config.data\n    if 'retry_timeout' in config:\n        self.set_retry_timeout(config['retry_timeout'])\n    if 'ttl' in config:\n        if self.set_ttl(config['ttl']):\n            self._client.handler.close()\n    if 'loop_wait' in config:\n        self._client.handler.set_connect_timeout(config['loop_wait'])", "CodeBleu_score": 38.27941614880118}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t# Load the initialization state\n    init_state = self.get_node(path + self._INIT_STATE)\n    if init_state is not None:\n        init_state = InitState.from_node(init_state[0])\n    else:\n        init_state = InitState.from_node('')\n\n    # Load the configuration\n    config = self.get_node(path + self._CONFIG)\n    if config is not None:\n        config = ClusterConfig.from_node(config[0])\n    else:\n        config = ClusterConfig.from_node('')\n\n    # Load the timeline history\n    timeline_history = self.get_node(path + self._TIMELINE_HISTORY)\n    if timeline_history is not None:\n        timeline_history = TimelineHistory.from_node(timeline_history[0])\n    else:\n        timeline_history = TimelineHistory.from_node('')\n\n    # Load the synchronization state\n    sync_state = self.get_node(path + self._SYNC_STATE)\n    if sync_state is not None:\n        sync_state = SyncState.from_node(sync_state[0])\n    else:\n        sync_state = SyncState.from_node('')\n\n    # Load the members\n    members = self.load_members(path)\n\n    # Load the leader\n    leader = self.get_node(path + self._LEADER)\n    if leader is not None:\n        leader = Leader.from_node(leader[0])\n    else:\n        leader = Leader.from_node('')\n\n    # Load the status\n    status = self.get_status(path, leader)\n\n    # Load the failover state\n    failover = self.get_node(path + self._FAILOVER)\n    if failover is not None:\n        failover = Failover.from_node(failover[0])\n    else:\n        failover = Failover.from_node('')\n\n    return Cluster(\n        init_state=init_state,\n        config=config,\n        timeline_history=timeline", "CodeBleu_score": 33.186693517125896}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\tself._client.add_listener(self)\n    self.get_children(path)\n    self._client.remove_listener(self)\n    return Cluster(\n        self.get_node(path + self._INIT),\n        self.get_node(path + self._CONFIG),\n        self.get_node(path + self._TLI),\n        self.load_members(path),\n        self.get_status(path, self.get_leader(path)),\n        self.get_node(path + self._FAILOVER),\n        self.get_node(path + self._FAILSAFE),\n    )\n\n", "CodeBleu_score": 10.028484396453981}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t# Check if the cluster is initialized\n    if self.get_node(path + self._INIT_STATE) is None:\n        raise ClusterNotInitializedError(path)\n    # Load the cluster configuration\n    config = self.get_node(path + self._CONFIG)\n    if config is None:\n        raise ClusterNotInitializedError(path)\n    config = ClusterConfig.from_node(config[0])\n    # Load the timeline history\n    timeline_history = self.get_node(path + self._TIMELINE_HISTORY)\n    if timeline_history is None:\n        raise ClusterNotInitializedError(path)\n    timeline_history = TimelineHistory.from_node(timeline_history[0])\n    # Load the synchronization state\n    sync_state = self.get_node(path + self._SYNC_STATE)\n    if sync_state is None:\n        raise ClusterNotInitializedError(path)\n    sync_state = SyncState.from_node(sync_state[0])\n    # Load the members\n    members = self.load_members(path)\n    # Load the leader\n    leader = self.get_node(path + self._LEADER)\n    if leader is None:\n        raise ClusterNotInitializedError(path)\n    leader = Leader.from_node(leader[0])\n    # Load the cluster status\n    status = self.get_status(path, leader)\n    # Load the failover state\n    failover = self.get_node(path + self._FAILOVER)\n    if failover is None:\n        raise ClusterNotInitializedError(path)\n    failover = Failover.from_node(failover[0])\n    # Load the failsafe configuration\n    failsafe = self.get_node(path + self._FAILSAFE)\n    if failsafe is None:\n        raise ClusterNotInitializedError(path)\n    failsafe = json.loads(failsafe[0])\n    return Cluster(config, timeline_history, sync_state, members, leader, status, failover, failsafe)\n\n", "CodeBleu_score": 33.999409256373866}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\ttry:\n        retry(\n            self.client.create,\n            self.lock_path,\n            makepath=True,\n            ephemeral=True,\n            sequence=True,\n        )\n        logger.info(\n            f\"{self.name} acquired leader lock {self.lock_path} at {self.client.server}\"\n        )\n        return True\n    except ZooKeeperError as e:\n        if isinstance(e, ConnectionClosedError):\n            raise\n        logger.error(f\"{self.name} failed to acquire leader lock: {e}\")\n        return False\n    except NodeExistsError:\n        logger.info(f\"{self.name} failed to acquire leader lock: another instance has it\")\n        return False\n\n\n\n\n", "CodeBleu_score": 38.134539359375836}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t# Retry the operation if a transient issue occurs.\n    @retry(\n        stop=stop_after_attempt(self.config.max_acquire_leader_retries),\n        wait=wait_fixed(self.config.acquire_leader_retry_wait_seconds),\n        retry=retry_if_exception_type(ZooKeeperError),\n    )\n    def _attempt_to_acquire_leader() -> bool:\n        # Create an ephemeral node in ZooKeeper.\n        try:\n            self.zk.create(\n                self.config.leader_path,\n                b\"\",\n                acl=[ZOO_OPEN_ACL_UNSAFE],\n                ephemeral=True,\n            )\n        except NoNodeError:\n            # If the parent node doesn't exist, create it.\n            self.zk.create(\n                self.config.leader_path,\n                b\"\",\n                acl=[ZOO_OPEN_ACL_UNSAFE],\n                ephemeral=False,\n            )\n            self.zk.create(\n                self.config.leader_path,\n                b\"\",\n                acl=[ZOO_OPEN_ACL_UNSAFE],\n                ephemeral=True,\n            )\n        except NodeExistsError:\n            # If the node already exists, another instance has the lock.\n            return False\n        return True\n\n    try:\n        return _attempt_to_acquire_leader()\n    except ZooKeeperError as e:\n        # If the connection to ZooKeeper is closed, raise an error.\n        if isinstance(e, ConnectionClosedError):\n            raise\n        # Otherwise, log an error.\n        logger.error(\n            \"An error occurred while attempting to acquire the leader lock: %s\", e\n        )\n        raise\n\n\n\n\n", "CodeBleu_score": 44.40707390362293}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t# Retry mechanism to handle transient issues\n    for attempt in range(1, self.max_retries + 1):\n        try:\n            # Create an ephemeral node in ZooKeeper at a specified path\n            self.zk.create(self.path, self.data, ephemeral=True)\n        except (ConnectionClosedError, SessionExpiredError):\n            # If the connection to ZooKeeper is closed or retries fail, raise a ZooKeeperError\n            raise ZooKeeperError(\"Connection to ZooKeeper closed or session expired\")\n        except NoNodeError:\n            # If the parent node does not exist, create it\n            self.zk.create(self.path[: self.path.rfind(\"/\")], makepath=True)\n        except NodeExistsError:\n            # If the node already exists, return False\n            logger.info(\"Another instance has the leader lock\")\n            return False\n        except Exception as e:\n            # If the lock cannot be acquired, log an error unless the exception is a NodeExistsError\n            if isinstance(e, NodeExistsError):\n                logger.info(\"Another instance has the leader lock\")\n                return False\n            else:\n                logger.error(\n                    \"Failed to acquire leader lock. Attempt %d of %d\",\n                    attempt,\n                    self.max_retries,\n                )\n                if attempt == self.max_retries:\n                    # If the lock cannot be acquired, raise a ZooKeeperError\n                    raise ZooKeeperError(\"Failed to acquire leader lock\")\n        else:\n            # If successful, return True\n            return True\n\n\n\n\n", "CodeBleu_score": 49.63594177459507}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\tif leader.id != self.client_id:\n        logger.warning(\n            \"Leader's session ID does not match current client ID. \"\n            \"Deleting leader ZNode and trying to create a new one.\"\n        )\n        try:\n            self.client.delete(leader.znode)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            logger.error(\"Failed to delete leader ZNode.\")\n            return False\n\n        try:\n            self.client.create(\n                leader.znode,\n                self.client_id.encode(\"utf-8\"),\n                acl=[_make_acl()],\n                makepath=True,\n            )\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            logger.error(\"Failed to create leader ZNode.\")\n            return False\n\n        return True\n\n    return False", "CodeBleu_score": 38.81860217525011}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\tif leader.session != self.client_id:\n        logger.warning(\n            f\"Leader session ({leader.session}) does not match current client ID ({self.client_id}).\"\n        )\n        try:\n            self.delete(leader.path)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            logger.error(\n                f\"Error deleting leader ZNode ({leader.path}) for client ID ({self.client_id}).\"\n            )\n            return False\n\n    try:\n        self.create(\n            leader.path,\n            encode(self.client_id),\n            acl=[make_digest_acl(self.client_id, self.client_secret, all=True)],\n        )\n    except (NodeExistsError, ConnectionClosedError, RetryFailedError):\n        logger.error(\n            f\"Error creating leader ZNode ({leader.path}) for client ID ({self.client_id}).\"\n        )\n        return False\n\n    return True", "CodeBleu_score": 34.17303671160043}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\tif leader.session_id != self.session_id:\n        self.logger.warning(\"Leader session ID mismatch: %s != %s\", leader.session_id, self.session_id)\n        try:\n            self.client.delete(leader.path)\n        except NoNodeError:\n            pass\n        except ConnectionClosedError:\n            self.logger.error(\"Leader session closed\")\n            raise ZooKeeperError(\"Leader session closed\")\n        except RetryFailedError:\n            self.logger.error(\"Leader session closed\")\n            raise ZooKeeperError(\"Leader session closed\")\n        else:\n            try:\n                self.client.create(leader.path, leader.name.encode(\"utf-8\"))\n            except NodeExistsError:\n                pass\n            except ConnectionClosedError:\n                self.logger.error(\"Leader session closed\")\n                raise ZooKeeperError(\"Leader session closed\")\n            except RetryFailedError:\n                self.logger.error(\"Leader session closed\")\n                raise ZooKeeperError(\"Leader session closed\")\n            else:\n                return True\n    return False\n\n", "CodeBleu_score": 43.938756753804775}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\tif self._next_poll_time > time.time():\n        return False\n    self._next_poll_time = time.time() + self.POLL_INTERVAL\n    exhibitors = self._query_exhibitors(self._exhibitors)\n    if not exhibitors:\n        return False\n    exhibitors = sorted(exhibitors)\n    if self._exhibitors != exhibitors:\n        self._exhibitors = exhibitors\n        self._update_connection_string(exhibitors)\n        return True\n    return False\n\n", "CodeBleu_score": 28.815775584406705}, {"code": "def poll(self) -> bool\n\tif not self._last_poll or time.time() - self._last_poll >= self._poll_interval:\n        exhibitors = self._query_exhibitors(self._exhibitors)\n        if exhibitors and isinstance(exhibitors, dict):\n            if 'servers' in exhibitors and isinstance(exhibitors['servers'], list):\n                servers = sorted(exhibitors['servers'])\n                if servers != self._servers:\n                    self._servers = servers\n                    self._last_poll = time.time()\n                    self._update_connection_string()\n                    return True\n        self._last_poll = time.time()\n    return False\n\n", "CodeBleu_score": 36.62920383791392}, {"code": "def poll(self) -> bool\n\tif time.time() - self._last_poll_time < self._poll_interval:\n        return False\n    self._last_poll_time = time.time()\n    exhibitors = self._query_exhibitors(self._exhibitors)\n    if exhibitors is None:\n        return False\n    new_servers = sorted(exhibitors['servers'])\n    if self._servers == new_servers:\n        return False\n    self._servers = new_servers\n    self._zookeeper_hosts = [':'.join((server, str(exhibitors['port']))) for server in self._servers]\n    logging.info('ZooKeeper hosts changed to %s', self._zookeeper_hosts)\n    return True\n\n", "CodeBleu_score": 37.60935029296498}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\tif self._ensemble_provider.poll():\n        self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 97.36568541552093}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\tif self._ensemble_provider.poll():\n        self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 97.36568541552093}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\tif self._ensemble_provider.poll():\n        self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 97.36568541552093}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 78.51700357174724}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\tthis.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 80.2370284474588}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\tlog.info(\"initializing zookeeper listener with nodecache and nodecachelistener\");\n}", "CodeBleu_score": 20.632003434810787}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\tif (zookeeperListener == null) {\n        return;\n    }\n    String group = getGroup();\n    String dataId = getDataId();\n    logUnsubscribeStarted(group, dataId);\n    try {\n        zookeeperListener.unsubscribe(group, dataId);\n    } catch (NacosException e) {\n        logUnsubscribeFailed(group, dataId, e);\n    }\n}", "CodeBleu_score": 77.290565977507}, {"code": "public void destroy(){\n\tif (null == zookeeperListener) {\n        return;\n    }\n    String group = getGroup();\n    String dataId = getDataId();\n    logUnsubscribeStarted(dataId);\n    try {\n        zookeeperListener.unsubscribe(group, dataId);\n    } catch (NacosException e) {\n        logUnsubscribeFailed(dataId, e);\n    }\n}", "CodeBleu_score": 59.59739364907668}, {"code": "public void destroy(){\n\tif (null == zookeeperListener) {\n        return;\n    }\n    String group = getGroup();\n    String dataId = getDataId();\n    logUnsubscribeStarted(group, dataId);\n    try {\n        zookeeperListener.unsubscribe(group, dataId);\n    } catch (NacosException e) {\n        logUnsubscribeFailed(group, dataId, e);\n    }\n}", "CodeBleu_score": 58.133507642825656}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\tMap<String, String> metadata = new HashMap<>();\n    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zkServer = (ZookeeperServer) server;\n        metadata.put(ZOOKEEPER_SERVER_ID, String.valueOf(zkServer.getServerId()));\n        metadata.put(ZOOKEEPER_SERVER_TYPE, zkServer.getServerType().toString());\n        metadata.put(ZOOKEEPER_SERVER_STATE, zkServer.getServerState().toString());\n        metadata.put(ZOOKEEPER_SERVER_ENDPOINT, zkServer.getServerEndpoint());\n        metadata.put(ZOOKEEPER_SERVER_LEADER_ENDPOINT, zkServer.getLeaderEndpoint());\n        metadata.put(ZOOKEEPER_SERVER_LEADER_ID, String.valueOf(zkServer.getLeaderId()));\n        metadata.put(ZOOKEEPER_SERVER_LEADER_ZXID, String.valueOf(zkServer.getLeaderZxid()));\n        metadata.put(ZOOKEEPER_SERVER_MODE, zkServer.getMode().toString());\n        metadata.put(ZOOKEEPER_SERVER_VERSION, zkServer.getVersion());\n        metadata.put(ZOOKEEPER_SERVER_ENDPOINTS, zkServer.getEndpoints());\n        metadata.put(ZOOKEEPER_SERVER_LEADER_ENDPOINTS, zkServer.getLeaderEndpoints());\n        metadata.put(ZOOKEEPER_SERVER_PEER_ENDPOINTS, zkServer.getPeerEndpoints());\n        metadata.put(ZOOKEEPER_SERVER_OBSERVER_ENDPOINTS, zkServer.getObserverEndpoints());\n        metadata.put(ZOOKEEPER_SERVER_OBSERVER_INFO, zkServer.getObserverInfo());\n        metadata.put(ZOOKEEPER_SERVER_FOLLOWER_INFO, zkServer.getFollowerInfo());\n        metadata.put(ZOOKEEPER_SERVER_LE", "CodeBleu_score": 38.20284800082081}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\tMap<String, String> metadata = new HashMap<>();\n  if (server instanceof ZookeeperServer) {\n    metadata = ((ZookeeperServer) server).getPayload();\n  }\n  return metadata;\n}", "CodeBleu_score": 48.21089944207508}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\tif (server instanceof ZookeeperServer) {\n    return ((ZookeeperServer) server).getPayload().getMetadata();\n  }\n  return new HashMap<>();\n}", "CodeBleu_score": 37.939214137342}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\treturn subscribeConfig(curatorFramework, group, serviceId, zookeeperSubscribeCallback);\n}", "CodeBleu_score": 7.253405956323217}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\tString path = ZookeeperPathUtils.getServiceConfigPath(group, serviceId);\n    return subscribeConfig(path, zookeeperSubscribeCallback);\n}", "CodeBleu_score": 14.245168015415416}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\treturn subscribeConfig(group, serviceId, zookeeperSubscribeCallback, null);\n}", "CodeBleu_score": 7.636279883305893}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\tServerList<?> serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n    serverList.initWithNiwsConfig(config);\n    serverList.setLoadBalanceListenerExecutor(config.getPropertyAsInt(CommonClientConfigKey.ServerListRefreshInterval, 1000));\n    serverList.setServiceId(getClientName(config));\n    return serverList;\n}", "CodeBleu_score": 63.43276186493567}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\tZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(config, serviceDiscovery);\n    serverList.initWithNiwsConfig(config);\n    serverList.setLoadBalanceListenerExecutor(config.getLoadBalancerListenerExecutor());\n    serverList.setServiceId(getClientName(config));\n    return serverList;\n}", "CodeBleu_score": 74.87804750028495}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\tRibbonServerList serverList = new RibbonServerList(serviceDiscovery);\n    serverList.initWithNiwsConfig(config);\n    serverList.setLoadBalanceListenerExecutor(config.get(CommonClientConfigKey.LoadBalancerExecutor));\n    serverList.setServiceId(getClientName(config));\n    return serverList;\n}", "CodeBleu_score": 58.17702944562152}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.09638065942949}, {"code": "public void register(ZookeeperRegistration registration){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.09638065942949}, {"code": "public void register(ZookeeperRegistration registration){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.09638065942949}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.10458663952991}, {"code": "public void deregister(ZookeeperRegistration registration){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.10458663952991}, {"code": "public void deregister(ZookeeperRegistration registration){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.10458663952991}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.3595927181432}, {"code": "public void close(){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.3595927181432}, {"code": "public void close(){\n\ttry {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.3595927181432}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\tString group = globalConfig ? null : getGroup();\n    String dataId = globalConfig ? getDataId() : getDataId(group);\n    if (dataId == null) {\n        return null;\n    }\n    logger.info(\"Subscribing to configuration {}\", dataId);\n    try {\n        return zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperListener() {\n            @Override\n            public void receiveConfigInfo(String configInfo) {\n                callbackConfig(configInfo);\n            }\n        });\n    } catch (Exception e) {\n        logger.error(\"Failed to subscribe to configuration {}\", dataId, e);\n        return null;\n    }\n}", "CodeBleu_score": 49.70071307934607}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\tString group = null;\n    String dataId = null;\n    if (globalConfig) {\n        group = config.getGlobalGroup();\n        dataId = config.getGlobalDataId();\n    } else {\n        group = config.getGroup();\n        dataId = config.getDataId();\n    }\n    if (group == null || group.isEmpty()) {\n        throw new IllegalArgumentException(\"group cannot be null or empty\");\n    }\n    if (dataId == null || dataId.isEmpty()) {\n        throw new IllegalArgumentException(\"dataId cannot be null or empty\");\n    }\n    logger.info(\"Subscribing to configuration with group: \" + group + \", dataId: \" + dataId);\n    try {\n        return zookeeperOperation.subscribeDataChanges(group, dataId, new ConfigurationChangeListener(globalConfig));\n    } catch (Exception e) {\n        logger.error(\"Failed to subscribe to configuration with group: \" + group + \", dataId: \" + dataId, e);\n    }\n    return null;\n}", "CodeBleu_score": 36.0798380875736}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\tString group = null;\n\tString dataId = null;\n\tif (globalConfig) {\n\t\tgroup = this.globalGroup;\n\t\tdataId = this.globalDataId;\n\t} else {\n\t\tgroup = this.group;\n\t\tdataId = this.dataId;\n\t}\n\t\n\tlogger.info(\"[subscribeConfig] {} - {}\", group, dataId);\n\t\n\ttry {\n\t\tZookeeperListener listener = zookeeperOperation.subscribeConfig(group, dataId, new ConfigChangeListenerImpl());\n\t\tlogger.info(\"[subscribeConfig] {} - {} - {}\", group, dataId, listener);\n\t\treturn listener;\n\t} catch (NacosException e) {\n\t\tlogger.error(\"[subscribeConfig] {} - {} - {}\", group, dataId, e);\n\t}\n\treturn null;\n}", "CodeBleu_score": 33.10988426902158}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\tString connectString = getProperty(ZOOKEEPER_CONNECT_STRING);\n    if (StringUtils.isBlank(connectString)) {\n        throw new DiscoveryException(\"Zookeeper connect string not found in environment\");\n    }\n\n    int retryCount = Integer.parseInt(getProperty(ZOOKEEPER_RETRY_COUNT));\n    int sleepTime = Integer.parseInt(getProperty(ZOOKEEPER_SLEEP_TIME));\n\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(sleepTime, retryCount);\n\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(connectString)\n            .retryPolicy(retryPolicy)\n            .build();\n\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 46.221260626734626}, {"code": "public CuratorFramework curatorFramework(){\n\tif (StringUtils.isBlank(getProperty(ZOOKEEPER_CONNECTION_STRING))) {\n        throw new DiscoveryException(\"Zookeeper connection string is empty\");\n    }\n    final int baseSleepTimeMs = getProperty(ZOOKEEPER_RETRY_SLEEP_TIME_MS, Integer.class);\n    final int maxRetries = getProperty(ZOOKEEPER_RETRY_COUNT, Integer.class);\n    final RetryPolicy retryPolicy = new ExponentialBackoffRetry(baseSleepTimeMs, maxRetries);\n    final CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n        .connectString(getProperty(ZOOKEEPER_CONNECTION_STRING))\n        .retryPolicy(retryPolicy)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 40.46612843218834}, {"code": "public CuratorFramework curatorFramework(){\n\tString connectString = getProperty(CONNECT_STRING);\n    if (connectString == null || connectString.isEmpty()) {\n        throw new DiscoveryException(\"Zookeeper connection string not set\");\n    }\n\n    int retryCount = Integer.parseInt(getProperty(RETRY_COUNT, \"3\"));\n    int sleepTime = Integer.parseInt(getProperty(SLEEP_TIME, \"1000\"));\n\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(sleepTime, retryCount);\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(connectString, retryPolicy);\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 39.32362183831948}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t/**\n\t * The bean method, which returns a new instance of GatewayStrategyRouteZookeeperProcessor.\n\t * @return a new instance of GatewayStrategyRouteZookeeperProcessor.\n\t */\n\t@Bean\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n\t\treturn new GatewayStrategyRouteZookeeperProcessor();\n\t}\n\n\t/**\n\t * The bean method, which returns a new instance of GatewayStrategyRouteZookeeperLocator.\n\t * @return a new instance of GatewayStrategyRouteZookeeperLocator.\n\t */\n\t@Bean\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyRouteZookeeperLocator gatewayStrategyRouteZookeeperLocator() {\n\t\treturn new GatewayStrategyRouteZookeeperLocator();\n\t}\n\n\t/**\n\t * The bean method, which returns a new instance of GatewayRouteZookeeperRefreshListener.\n\t * @param gatewayStrategyRouteZookeeperLocator the GatewayStrategyRouteZookeeperLocator instance.\n\t * @param gatewayStrategyRouteZookeeperProcessor the GatewayStrategyRouteZookeeperProcessor instance.\n\t * @return a new instance of GatewayRouteZookeeperRefreshListener.\n\t */\n\t@Bean\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayRouteZookeeperRefreshListener gatewayRouteZookeeperRefreshListener(GatewayStrategyRouteZookeeperLocator gatewayStrategyRouteZookeeperLocator,\n\t\t\tGatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor) {\n\t\treturn new GatewayRouteZookeeperRefreshListener(gatewayStrategyRouteZookeeperLocator,\n\t\t\t\tgatewayStrategyRouteZookeeperProcessor);\n\t}\n\n\t/**\n\t * The bean method, which", "CodeBleu_score": 43.99102671776159}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t@Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(\n            GatewayStrategyRouteLocator gatewayStrategyRouteLocator,\n            GatewayStrategyRouteDefinitionLocator gatewayStrategyRouteDefinitionLocator,\n            GatewayStrategyRoutePredicateFactory gatewayStrategyRoutePredicateFactory,\n            GatewayStrategyRouteFilterFactory gatewayStrategyRouteFilterFactory,\n            GatewayStrategyRouteDefinitionLocator.DiscoveryLocatorProperties discoveryLocatorProperties) {\n        return new GatewayStrategyRouteZookeeperProcessor(gatewayStrategyRouteLocator,\n                gatewayStrategyRouteDefinitionLocator, gatewayStrategyRoutePredicateFactory,\n                gatewayStrategyRouteFilterFactory, discoveryLocatorProperties);\n    }\n\n}", "CodeBleu_score": 32.52524235597997}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t@Bean\n\t@ConditionalOnMissingBean(name = \"gatewayStrategyRouteLocator\")\n\t@ConditionalOnProperty(prefix = \"spring.cloud.gateway.discovery.locator\", name = \"enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(\n\t\t\tGatewayStrategyRouteLocatorProperties gatewayStrategyRouteLocatorProperties,\n\t\t\tZookeeperRouteDefinitionRepository zookeeperRouteDefinitionRepository) {\n\t\treturn new GatewayStrategyRouteZookeeperProcessor(\n\t\t\t\tgatewayStrategyRouteLocatorProperties, zookeeperRouteDefinitionRepository);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = \"gatewayStrategyRouteLocator\")\n\t@ConditionalOnProperty(prefix = \"spring.cloud.gateway.discovery.locator\", name = \"enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyRouteLocator gatewayStrategyRouteLocator(\n\t\t\tGatewayStrategyRouteLocatorProperties gatewayStrategyRouteLocatorProperties,\n\t\t\tGatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor) {\n\t\treturn new GatewayStrategyRouteLocator(gatewayStrategyRouteLocatorProperties,\n\t\t\t\tgatewayStrategyRouteZookeeperProcessor);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = \"gatewayStrategyRouteLocator\")\n\t@ConditionalOnProperty(prefix = \"spring.cloud.gateway.discovery.locator\", name = \"enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic RouteDefinitionLocator gatewayStrategyRouteDefinitionLocator(\n\t\t\tGatewayStrategyRouteLocatorProperties gatewayStrategyRouteLocatorProperties,\n\t\t\tGatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor) {\n\t\treturn new GatewayStrategyRouteLocator(gatewayStrategyRouteLocatorProperties,\n\t\t\t\tgatewayStrategyRouteZookeeperProcessor);\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = \"gatewayStrategyRouteLocator\")\n\t@ConditionalOnProperty(", "CodeBleu_score": 23.116140824753238}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\tjava.lang.String zkHosts = getZkHosts ()  ;\n  java.lang.String namespace = getNamespace ()  ;\n  int sessionTimeoutMs = getSessionTimeout ()  ;\n  org.apache.curator.retry.RetryPolicy retryPolicy = getRetryPolicy ()  ;\n  org.apache.curator.framework.CuratorFrameworkFactory.Builder builder = org.apache.curator.framework.CuratorFrameworkFactory.builder ()  ;\n  builder.connectString (zkHosts)  ;\n  builder.sessionTimeoutMs (sessionTimeoutMs)  ;\n  builder.namespace (namespace)  ;\n  builder.retryPolicy (retryPolicy)  ;\n  org.apache.curator.framework.CuratorFramework curator = builder.build ()  ;\n  curator.start ()  ;\n  return curator ;\n}", "CodeBleu_score": 31.81135711462345}, {"code": "public  CuratorFramework createCuratorFramework(){\n\tjava.lang.String namespace = getNamespace ()  ;\n  org.apache.curator.RetryPolicy retryPolicy = getRetryPolicy ()  ;\n  org.apache.curator.framework.CuratorFramework curatorFramework = org.apache.curator.framework.CuratorFrameworkFactory.builder ().namespace (namespace).retryPolicy (retryPolicy).connectString (getZkHosts ()).sessionTimeoutMs (getSessionTimeout ()).build ()  ;\n  curatorFramework.start ()  ;\n  return curatorFramework ;\n}", "CodeBleu_score": 43.29628378727399}, {"code": "public  CuratorFramework createCuratorFramework(){\n\torg.apache.curator.framework.CuratorFramework curatorFramework = new org.apache.curator.framework.CuratorFrameworkFactory.builder ()\n    .connectString (getZkHosts ())\n    .sessionTimeoutMs (getSessionTimeout ())\n    .retryPolicy (getRetryPolicy ())\n    .namespace (getNamespace ())\n    .build ()\n  curatorFramework.start ()\n  return curatorFramework\n}", "CodeBleu_score": 34.90086827466391}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\ttry {\n        InterProcessMutex lock = getLock(path);\n        if (lock == null) {\n            throw new DistributedLockException(\"Lock not found for path: \" + path);\n        }\n        lock.acquire();\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 20.51505643700715}, {"code": "public void lock(String path) throws DistributedLockException{\n\tInterProcessMutex lock = locksMap.get(path);\n    if (lock == null) {\n        try {\n            lock = new InterProcessMutex(client, path);\n            lock.acquire();\n            locksMap.put(path, lock);\n        } catch (Exception e) {\n            throw new DistributedLockException(e);\n        }\n    } else {\n        try {\n            lock.acquire();\n        } catch (Exception e) {\n            throw new DistributedLockException(e);\n        }\n    }\n}", "CodeBleu_score": 33.725294483475324}, {"code": "public void lock(String path) throws DistributedLockException{\n\tInterProcessMutex lock = null;\n    try {\n        if (!locksMap.containsKey(path)) {\n            lock = new InterProcessMutex(client, path);\n            lock.acquire();\n            locksMap.put(path, lock);\n        } else {\n            lock = locksMap.get(path);\n            lock.acquire();\n        }\n    } catch (Exception e) {\n        throw new DistributedLockException(\"Unable to acquire lock for path: \" + path, e);\n    }\n}", "CodeBleu_score": 30.07073666520527}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\tCuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n        String nodePath = nodePath(dtpProperties);\n        if (DtpProperties.ConfigType.PROPERTIES.equals(dtpProperties.getConfigType())) {\n            return genPropertiesTypeMap(nodePath, curatorFramework);\n        }\n        String configKey = dtpProperties.getConfigKey();\n        String path = ZKPaths.makePath(nodePath, configKey);\n        String value = getVal(path, curatorFramework);\n        Map<Object, Object> properties = ConfigHandler.parseConfig(value, dtpProperties.getConfigType());\n        return properties;\n    }", "CodeBleu_score": 52.27960672903941}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\tif (curatorFramework == null) {\n        getCuratorFramework(dtpProperties);\n    }\n    DtpProperties.Zookeeper zookeeper = dtpProperties.getZookeeper();\n    String nodePath = ZKPaths.makePath(ZKPaths.makePath(zookeeper.getRootNode(),\n            zookeeper.getConfigVersion()), zookeeper.getNode());\n    if (dtpProperties.getConfigType().equalsIgnoreCase(DtpProperties.ConfigType.PROPERTIES.name())) {\n        return genPropertiesTypeMap(nodePath, curatorFramework);\n    } else {\n        String configKey = getConfigKey(dtpProperties);\n        String path = ZKPaths.makePath(nodePath, configKey);\n        String value = getVal(path, curatorFramework);\n        return ConfigHandler.parseConfig(value, dtpProperties.getConfigType());\n    }\n}", "CodeBleu_score": 50.88037482904749}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\tCuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n    DtpProperties.Zookeeper zookeeper = dtpProperties.getZookeeper();\n    String nodePath = ZKPaths.makePath(zookeeper.getRootNode(), zookeeper.getNode());\n    if (dtpProperties.getConfigType().equalsIgnoreCase(DtpProperties.ConfigType.PROPERTIES.name())) {\n        return genPropertiesTypeMap(nodePath, curatorFramework);\n    } else {\n        String configKey = getConfigKey(dtpProperties);\n        String path = ZKPaths.makePath(nodePath, configKey);\n        String value = getVal(path, curatorFramework);\n        return ConfigHandler.parseConfig(value, dtpProperties.getConfigType());\n    }\n}", "CodeBleu_score": 51.078387048197314}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\tDtpProperties dtpProperties = getInstance();\n        bindDtpProperties(environment, dtpProperties);\n        Map<Object, Object> properties = genPropertiesMap(dtpProperties);\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, properties);\n        }\n    }", "CodeBleu_score": 65.73388369855053}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\tDtpProperties dtpProperties = getInstance(environment);\n        bindDtpProperties(environment, dtpProperties);\n        Map<Object, Object> properties = genPropertiesMap(dtpProperties);\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, properties);\n        }\n    }", "CodeBleu_score": 66.12241295304248}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\tDtpProperties properties = getInstance();\n        bindDtpProperties(environment, properties);\n        Map<Object, Object> propertiesMap = genPropertiesMap(properties);\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, propertiesMap);\n        }\n    }", "CodeBleu_score": 53.87137498183298}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\tbuilder.RegisterInstance(configInfo).SingleInstance();\n  builder.RegisterType<ZooKeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperClientProvider>().As<IZookeeperClientProvider>().SingleInstance();\n  builder.RegisterAdapter<IServiceRouteManager, ServiceRouteManager>(c => c.Resolve<ZooKeeperServiceRouteManager>()).InstancePerLifetimeScope();\n  builder.RegisterAdapter<IZookeeperClientProvider, ZookeeperClientProvider>(c => c.Resolve<ZookeeperClientProvider>()).InstancePerLifetimeScope();\n  return this;\n}", "CodeBleu_score": 37.80288158003565}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\tbuilder.RegisterAdapter<ZooKeeperServiceRouteManager>(\n        (sp, manager) => {\n            var config = GetConfigInfo(configInfo);\n            var logger = sp.Resolve<ILogger<ZooKeeperServiceRouteManager>>();\n            var serializer = sp.Resolve<ISerializer<byte[]>>();\n            var routeFactory = sp.Resolve<IServiceRouteFactory>();\n            var stringSerializer = sp.Resolve<ISerializer<string>>();\n            var clientProvider = sp.Resolve<IZookeeperClientProvider>();\n            return new ZooKeeperServiceRouteManager(config, logger, serializer, routeFactory, stringSerializer, clientProvider);\n        }).InstancePerLifetimeScope();\n    return this;\n}", "CodeBleu_score": 47.41787024894223}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\tbuilder.RegisterAdapter<IServiceRouteManager>(\n        (sp, p) =>\n        {\n            var logger = sp.Resolve<ILogger<ZooKeeperServiceRouteManager>>();\n            var serializer = sp.Resolve<ISerializer<byte[]>>();\n            var factory = sp.Resolve<IServiceRouteFactory>();\n            var stringSerializer = sp.Resolve<ISerializer<string>>();\n            var clientProvider = sp.Resolve<IZookeeperClientProvider>();\n            var config = GetConfigInfo(configInfo);\n            return new ZooKeeperServiceRouteManager(logger, serializer, factory, stringSerializer, clientProvider, config);\n        }\n    ).InstancePerLifetimeScope();\n    return this;\n}", "CodeBleu_score": 47.675234048498524}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\tbuilder.RegisterAdapter<IServiceCommandManager>(x => new ZookeeperServiceCommandManager(x.Resolve<ISerializer<byte[]>>(), x.Resolve<ISerializer<string>>(), x.Resolve<ILogger<ZookeeperServiceCommandManager>>(), x.Resolve<IServiceRouteManager>(), x.Resolve<IZookeeperClientProvider>(), configInfo));\n            return this;\n        }", "CodeBleu_score": 50.03053025937474}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\tif (configInfo == null)\n            throw new ArgumentNullException(nameof(configInfo));\n        builder.RegisterAdapter<IServiceCommandManager>((ctx, p) => {\n            var config = GetConfigInfo(configInfo);\n            var loggerFactory = ctx.Resolve<ILoggerFactory>();\n            var logger = loggerFactory.CreateLogger<ZookeeperServiceCommandManager>();\n            var serializer = ctx.Resolve<ISerializer<string>>();\n            var zookeeperClientProvider = ctx.Resolve<IZookeeperClientProvider>();\n            return new ZookeeperServiceCommandManager(config, zookeeperClientProvider, serializer, logger);\n        }).InstancePerLifetimeScope();\n        return this;\n    }", "CodeBleu_score": 50.12820516586497}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\treturn UseZooKeeperCommandManager(builder, configInfo, (provider, config) => new ZookeeperServiceCommandManager(provider, config));\n    }", "CodeBleu_score": 24.655595703690146}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\tif (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"Path must be a non-empty string.\", nameof(path));\n    }\n\n    if (!Path.IsPathRooted(path) && provider == null) {\n        throw new ArgumentException(\"A non-rooted path requires a non-null provider.\", nameof(path));\n    }\n\n    if (provider == null && !Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n    }\n\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n\n    builder.Add(source);\n    return builder;\n}", "CodeBleu_score": 63.291685273923946}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\tif (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(Resources.Error_InvalidFilePath, nameof(path));\n    }\n\n    if (provider == null && !Path.IsPathRooted(path)) {\n        throw new ArgumentException(Resources.Error_InvalidFilePath, nameof(path));\n    }\n\n    builder.Add(new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    });\n\n    return builder;\n}", "CodeBleu_score": 52.64714587854486}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\tCheck.NotNull(builder, nameof(builder));\n    Check.CheckCondition(string.IsNullOrEmpty(path), nameof(path), \"path is required\");\n    Check.CheckCondition(builder.Properties.ContainsKey(ZookeeperConfigurationProvider.ZookeeperConfigurationKey), \"Can't add ZookeeperConfigurationSource because a ZookeeperConfigurationSource already exists\");\n    builder.Properties.Add(ZookeeperConfigurationProvider.ZookeeperConfigurationKey, true);\n    if (Path.IsPathRooted(path) && provider == null) {\n        builder.Add(new PhysicalFileProvider(Path.GetDirectoryName(path)));\n    }\n    builder.Add(new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    });\n    return builder;\n}", "CodeBleu_score": 52.54700947349917}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\tvar routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        route.Address.Except(Address);\n    }\n    await SetRoutesAsync(routes);\n}", "CodeBleu_score": 57.35450463247022}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\tvar routes = await GetRoutesAsync();\n    var newRoutes = new List<ServiceRoute>();\n    foreach (var route in routes)\n    {\n        var newAddress = new List<AddressModel>();\n        foreach (var address in route.Address)\n        {\n            if (!Address.Contains(address))\n                newAddress.Add(address);\n        }\n        if (newAddress.Count > 0)\n            newRoutes.Add(new ServiceRoute { Address = newAddress, ServiceDescriptor = route.ServiceDescriptor });\n    }\n    await SetRoutesAsync(newRoutes);\n}", "CodeBleu_score": 53.753386904435004}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\tvar routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        route.Address.RemoveAll(a => Address.Any(a1 => a1.Equals(a)));\n    }\n    await SetRoutesAsync(routes);\n}", "CodeBleu_score": 54.9554122401253}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\tstring[] oldRouteIds = _routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n    string[] newRouteIds = routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var deletedRouteIds = oldRouteIds.Except(newRouteIds).ToArray();\n    var zooKeeperClients = _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeeperClients) {\n        var path = _routePath + \"/\" + zooKeeper.Item1;\n        var addresses = await zooKeeper.Item2.getChildrenAsync(path);\n        var deletedRoutes = _routes.Where(p => p.ServiceDescriptor.Id == deletedRouteId).Select(p => p.Address).FirstOrDefault();\n        if (deletedRoutes.Contains(hostAddr)) {\n            await zooKeeper.Item2.deleteAsync(path);\n        }\n    }\n}", "CodeBleu_score": 48.67785195396382}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\tvar path = $\"{_options.RoutePath}/{hostAddr.Environment}/{hostAddr.Region}/{hostAddr.Address}\";\n    var zooKeeperClients = _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeeperClients) {\n        var oldRoutes = await zooKeeper.Item2.getChildrenAsync(path);\n        var oldRouteIds = oldRoutes.Select(p => p.Substring(0, p.LastIndexOf(\"-\", StringComparison.Ordinal))).ToArray();\n        var newRouteIds = routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n        var deletedRouteIds = oldRouteIds.Except(newRouteIds).ToArray();\n        foreach (var deletedRouteId in deletedRouteIds) {\n            var addresses = _routes.Where(p => p.ServiceDescriptor.Id == deletedRouteId).Select(p => p.Address).ToArray();\n            if (addresses.Contains(hostAddr.Address)) {\n                var nodePath = $\"{path}/{deletedRouteId}-{hostAddr.Port}\";\n                await zooKeeper.Item2.deleteAsync(nodePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 59.49404185307723}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\tvar path = $\"{_options.RoutePath}/{hostAddr.Environment}/{hostAddr.Region}/{hostAddr.Address}\";\n    var zooKeeperClients = _zookeeperClientProvider.GetZooKeepers();\n    var oldRouteIds = _routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var newRouteIds = routes.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var deletedRouteIds = oldRouteIds.Except(newRouteIds).ToArray();\n    foreach (var zooKeeper in zooKeeperClients) {\n        var addresses = await zooKeeper.Item2.getChildrenAsync(path);\n        var routesToBeDeleted = _routes.Where(p => p.ServiceDescriptor.Id == deletedRouteId).Select(p => p.Address).FirstOrDefault();\n        if (addresses.Contains(routesToBeDeleted)) {\n            await zooKeeper.Item2.deleteAsync(path);\n        }\n    }\n}", "CodeBleu_score": 51.68294384021195}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\tif (data == null) {\n        return null;\n    }\n\n    _logger.LogDebug($\"Deserializing route data: {Encoding.UTF8.GetString(data)}\u3002\");\n\n    if (data.Length == 0) {\n        return null;\n    }\n\n    var descriptor = _serviceRouteFactory.CreateServiceRoute(data);\n\n    _logger.LogDebug($\"Creating service route: {JsonSerializer.Serialize(\ndescriptor, _jsonSerializerOptions\n)}\u3002\");\n\n    return (await CreateServiceRoutesAsync(new[] { descriptor })).First();\n}", "CodeBleu_score": 50.39657756054163}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t_logger.LogDebug(\"Getting route from data.\");\n\n    if (data == null) {\n        return null;\n    }\n\n    ServiceRouteDescriptor descriptor = await DeserializeAsync(data);\n    return (await CreateServiceRoutesAsync(new[] { descriptor })).First();\n}", "CodeBleu_score": 35.833829306114175}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t_logger.LogDebug(\"Deserializing the service route data.\");\n    if (data == null) {\n        _logger.LogDebug(\"The route data is null, so the service route is null.\");\n        return null;\n    }\n    ServiceRouteDescriptor descriptor = await _serializer.DeserializeAsync<\nServiceRouteDescriptor>(data);\n    _logger.LogDebug($\"The service route data was deserialized into the following descriptor: {JsonSerializer.Serialize(descriptor, _jsonOptions.JsonSerializerOptions)}.\");\n    return (await CreateServiceRoutesAsync(new[] { descriptor })).First();\n}", "CodeBleu_score": 43.20211156064314}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\tif (oldData == null && newData == null) {\n        return;\n    }\n    if (oldData == null || newData == null) {\n        return;\n    }\n    if (DataEquals(oldData, newData)) {\n        return;\n    }\n    var newRoute = await GetRoute(newData);\n    if (newRoute == null) {\n        return;\n    }\n    lock (_routes) {\n        var oldRoute = _routes.FirstOrDefault(i => i.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id);\n        if (oldRoute == null) {\n            return;\n        }\n        _routes = _routes.Where(i => i.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id)\n            .Concat(new[] { newRoute }).ToArray();\n    }\n    OnChanged(newRoute, oldRoute);\n}", "CodeBleu_score": 73.75765877248168}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\tif (DataEquals(oldData, newData)) {\n        return;\n    }\n\n    var newRoute = await GetRoute(newData);\n    if (newRoute == null) {\n        return;\n    }\n\n    lock (_routes) {\n        var oldRoute = _routes.FirstOrDefault(i => i.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id);\n        if (oldRoute == null) {\n            _routes = _routes.Concat(new[] { newRoute }).ToArray();\n        }\n        else {\n            _routes = _routes.Where(i => i.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id).Concat(new[] { newRoute }).ToArray();\n        }\n    }\n\n    OnChanged(newRoute, oldRoute);\n}", "CodeBleu_score": 74.09007153981332}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\tif (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    if (newRoute == null)\n        return;\n\n    lock (_routes) {\n        var oldRoute = _routes.FirstOrDefault(i => i.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id);\n        if (oldRoute == null)\n            return;\n\n        _routes = _routes.Where(i => i.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id)\n            .Concat(new[] { newRoute }).ToArray();\n    }\n\n    // Trigger the route change event.\n    OnChanged?.Invoke(newRoute, oldRoute);\n}", "CodeBleu_score": 80.15203359427908}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\tvar rootPath = _configInfo.SubscriberPath;\n            if (!rootPath.EndsWith(\"/\"))\n                rootPath += \"/\";\n\n            var childrens = await _zkClient.GetChildrenAsync(rootPath);\n            var serviceSubscribers = await GetSubscribers(childrens);\n            foreach (var subscriber in subscribers)\n            {\n                var serviceSubscriber = serviceSubscribers.Where(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id).FirstOrDefault();\n                if (serviceSubscriber != null)\n                {\n                    serviceSubscriber.Address = subscriber.Address.Concat(serviceSubscriber.Address).Except(serviceSubscriber.Address).ToList();\n                }\n            }\n            await base.SetSubscribersAsync(serviceSubscribers);\n        }", "CodeBleu_score": 66.12713085453397}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\tif (subscribers == null)\n        throw new ArgumentNullException(nameof(subscribers));\n\n    if (!subscribers.Any())\n        return;\n\n    var rootPath = _configInfo.SubscriberPath;\n    if (!rootPath.EndsWith(\"/\"))\n        rootPath += \"/\";\n\n    var serviceSubscribers = await GetSubscribers(rootPath);\n    var subscriberList = new List<ServiceSubscriber>(subscribers.Count());\n\n    foreach (var subscriber in subscribers)\n    {\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\"\u51c6\u5907\u66f4\u65b0\u8ba2\u9605\u8005\uff1a{subscriber.ServiceDescriptor.Id}\u3002\");\n\n        var nodePath = $\"{rootPath}{subscriber.ServiceDescriptor.Id}\";\n        var serviceSubscriber = serviceSubscribers.Where(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id).FirstOrDefault();\n        if (serviceSubscriber != null)\n        {\n            subscriber.Address = subscriber.Address.Concat(serviceSubscriber.Address).Except(serviceSubscriber.Address).ToArray();\n            subscriberList.Add(subscriber);\n        }\n        else\n        {\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug($\"\u8ba2\u9605\u8005\uff1a{subscriber.ServiceDescriptor.Id}\u4e0d\u5b58\u5728\uff0c\u51c6\u5907\u521b\u5efa\u3002\");\n\n            await _zkClient.CreateRecursiveAsync(nodePath, subscriber.ToJsonString());\n        }\n    }\n\n    await base.SetSubscribersAsync(subscriberList);\n}", "CodeBleu_score": 61.23204014038246}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\tif (subscribers == null)\n        throw new ArgumentNullException(nameof(subscribers));\n\n    var rootPath = _configInfo.SubscriberPath;\n    if (!rootPath.EndsWith(\"/\"))\n        rootPath += \"/\";\n\n    var serviceSubscribers = await GetSubscribersAsync();\n    foreach (var subscriber in subscribers)\n    {\n        var nodePath = $\"{rootPath}{subscriber.ServiceDescriptor.Id}\";\n        var serviceSubscriber = serviceSubscribers.Where(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id).FirstOrDefault();\n        if (serviceSubscriber != null)\n        {\n            var addresses = subscriber.Address.Concat(serviceSubscriber.Address).Except(serviceSubscriber.Address);\n            subscriber.Address = addresses.ToArray();\n        }\n        await SetSubscriberAsync(nodePath, subscriber);\n    }\n\n    await base.SetSubscribersAsync(subscribers);\n}", "CodeBleu_score": 58.47477756962108}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\tvar subscribers = new List<ServiceSubscriber>();\n    var rootPath = $\"{_options.RootPath}/subscribers\";\n    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug(\"Getting subscribers for children {children}\", childrens);\n    foreach (var child in childrens) {\n        var path = $\"{rootPath}/{child}\";\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug(\"Getting subscriber for child {child}\", child);\n        var subscriber = await _client.GetAsync<ServiceSubscriber>(path);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 57.21080064095714}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\tvar subscribers = new List<ServiceSubscriber>();\n    var rootPath = $\"{_options.RootPath}/{_options.SubscriberPath}\";\n    _logger.LogDebug(\"Getting subscribers for children {children}\", childrens);\n    foreach (var child in childrens) {\n        var nodePath = $\"{rootPath}/{child}\";\n        _logger.LogDebug(\"Getting subscriber for child {child}\", child);\n        var subscriber = await GetSubscriber(nodePath).ConfigureAwait(false);\n        if (subscriber != null) {\n            subscribers.Add(subscriber);\n        }\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 51.319323115643776}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\tvar subscribers = new List<ServiceSubscriber>();\n            var rootPath = _config.GetValue<string>(\"ServiceSubscriber:Path\");\n            if (rootPath.EndsWith(\"/\")) {\n                rootPath = rootPath.Substring(0, rootPath.Length - 1);\n            }\n            _logger.LogDebug(\"Getting subscribers for children: {0}\", childrens.ToArray());\n            foreach (var child in childrens) {\n                var path = $\"{rootPath}/{child}\";\n                _logger.LogDebug(\"Getting subscribers for path: {0}\", path);\n                var subscriber = await _subscriberRepository.GetAsync(path);\n                subscribers.Add(subscriber);\n            }\n            return subscribers.ToArray();\n        }", "CodeBleu_score": 52.94651986749109}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\tif (_subscribers != null) return;\n    var zooKeeper = await GetZooKeeper();\n    if (zooKeeper.Item2 == null)\n    {\n        _logger.LogWarning(\"\u65e0\u6cd5\u83b7\u53d6ZooKeeper\u5ba2\u6237\u7aef\u3002\");\n        _subscribers = new ServiceSubscriber[0];\n        return;\n    }\n    var watcher = new SubscriberWatcher(_logger, zooKeeper.Item2, _configInfo.SubscriberPath, async () => await EnterSubscribers());\n    zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath, watcher);\n    await zooKeeper.Item1.WaitOneAsync();\n    if (watcher.IsSet)\n    {\n        _subscribers = watcher.Subscribers;\n    }\n    else\n    {\n        _logger.LogWarning($\"\u8282\u70b9\uff1a{_configInfo.SubscriberPath}\u4e0d\u5b58\u5728\u3002\");\n        _subscribers = new ServiceSubscriber[0];\n    }\n}", "CodeBleu_score": 55.97051670139963}, {"code": "private async Task EnterSubscribers(){\n\tif (_subscribers != null) return;\n\n    var zooKeeper = await GetZooKeeper();\n    var result = await zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath);\n\n    if (result.Stat != null) {\n        var children = await zooKeeper.Item2.getChildrenAsync(_configInfo.SubscriberPath);\n        _subscribers = await GetSubscribers(children.Children.ToArray());\n    } else {\n        _logger.LogWarning($\"\u8ba2\u9605\u8005\u8def\u5f84\u4e0d\u5b58\u5728\uff1a{_configInfo.SubscriberPath}\");\n        _subscribers = new ServiceSubscriber[0];\n    }\n}", "CodeBleu_score": 60.4958163112853}, {"code": "private async Task EnterSubscribers(){\n\tif (_subscribers != null) return;\n\n    var zooKeeper = await GetZooKeeper();\n    var result = await zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath);\n\n    if (result.Stat != null) {\n        var children = await zooKeeper.Item2.getChildrenAsync(_configInfo.SubscriberPath);\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\"\u51c6\u5907\u4ece\u8282\u70b9\uff1a{_configInfo.SubscriberPath}\u4e2d\u83b7\u53d6\u8ba2\u9605\u8005\u4fe1\u606f\u3002\");\n\n        _subscribers = await GetSubscribers(children.Children.ToArray());\n    } else {\n        if (_logger.IsEnabled(LogLevel.Warning))\n            _logger.LogWarning($\"\u8282\u70b9\uff1a{_configInfo.SubscriberPath}\u4e0d\u5b58\u5728\uff0c\u8bf7\u786e\u8ba4\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u4e86\u8ba2\u9605\u8005\u3002\");\n\n        _subscribers = new ServiceSubscriber[0];\n    }\n\n    zooKeeper.Item1.WaitOne();\n}", "CodeBleu_score": 65.99432077001705}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t// If the data is null, return.\n  if (oldData == null) {\n    return;\n  }\n  // If the data is not null, get the new command.\n  var newCommand = GetServiceCommand(newData);\n  // If the new command is null, return.\n  if (newCommand == null) {\n    return;\n  }\n  // If the old command is null, add the new command to the list.\n  if (_commands == null) {\n    _commands = new[] { newCommand };\n  } else {\n    // If the old command is not null, replace the old command with the new one for the same service ID.\n    _commands = _commands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n  }\n  // Trigger the OnChanged event with the new and old commands.\n  OnChanged?.Invoke(newCommand, GetServiceCommand(oldData));\n}", "CodeBleu_score": 52.75010763061883}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\tvar oldCommand = GetServiceCommand(oldData);\n    var newCommand = GetServiceCommand(newData);\n    if (oldCommand == null || newCommand == null || oldCommand.ServiceId != newCommand.ServiceId) {\n        _commands = _commands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n    }\n    // Trigger service command changed event.\n}", "CodeBleu_score": 53.514489430563614}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\tvar oldCommand = GetServiceCommand(oldData);\n  var newCommand = GetServiceCommand(newData);\n  if (newCommand == null) {\n    // The node was deleted.\n    // \u8282\u70b9\u88ab\u5220\u9664\u3002\n    if (oldCommand != null) {\n      _commands = _commands.Where(i => i.ServiceId != oldCommand.ServiceId).ToArray();\n    }\n  } else if (oldCommand == null) {\n    // The node was created.\n    // \u8282\u70b9\u88ab\u521b\u5efa\u3002\n    _commands = _commands.Concat(new[] { newCommand }).ToArray();\n  } else if (!DataEquals(oldData, newData)) {\n    // The node data was changed.\n    // \u8282\u70b9\u6570\u636e\u88ab\u66f4\u6539\u3002\n    _commands = _commands.Where(i => i.ServiceId != oldCommand.ServiceId)\n                         .Concat(new[] { newCommand }).ToArray();\n  }\n  // Trigger the OnChanged event with the new and old commands.\n  // \u89e6\u53d1 OnChanged \u4e8b\u4ef6\uff0c\u4f20\u5165\u65b0\u65e7\u547d\u4ee4\u3002\n  OnChanged?.Invoke(newCommand, oldCommand);\n}", "CodeBleu_score": 65.74681095819838}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\tif (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        var zooKeeper = await _zooKeeperCall();\n        var newData = await zooKeeper.Item2.getDataAsync(_path);\n        var action = _action;\n        _action = null;\n        action(newData, _currentData);\n        _currentData = newData;\n        _watcher.SetCurrentData(newData);\n    }\n}", "CodeBleu_score": 49.49473719397639}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\tif (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        var zooKeeper = this.zooKeeper.Item2;\n        var data = await zooKeeper.getDataAsync(this.path, this, null);\n        var action = this.action;\n        if (action != null) {\n            await action(this.path, this.currentData, data);\n        }\n        this.SetCurrentData(data);\n    }\n}", "CodeBleu_score": 28.09166556795639}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\tvar zooKeeper = this.zooKeeperCall.Value;\n    var action = this.action;\n    var watcher = this.watcher;\n    var nodePath = this.nodePath;\n    var nodeData = this.nodeData;\n    var nodeDataChanged = watchedEvent.get_Type() == EventType.NodeDataChanged;\n    if (nodeDataChanged) {\n        var newData = await zooKeeper.Item2.getDataAsync(nodePath);\n        await action(nodeData, newData);\n        watcher.SetCurrentData(newData);\n    } else {\n        await action(nodeData, nodeData);\n    }\n}", "CodeBleu_score": 31.509618162389064}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\tvar config = GetConfigInfo(configInfo);\n    builder.Services.Register(provider =>\n        new DefaultZookeeperClientProvider(\n            config,\n            provider.Resolve<IHealthCheckService>(),\n            provider.Resolve<IZookeeperAddressSelector>(),\n            provider.Resolve<ILogger<DefaultZookeeperClientProvider>>())).As<IZookeeperClientProvider>().SingleInstance();\n    return builder;\n}", "CodeBleu_score": 78.77681241008729}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\tbuilder.Services.AddSingleton<IZookeeperClientProvider>(provider =>\n        new DefaultZookeeperClientProvider(\n            GetConfigInfo(configInfo),\n            provider.Resolve<IHealthCheckService>(),\n            provider.Resolve<IZookeeperAddressSelector>(),\n            provider.Resolve<ILogger<DefaultZookeeperClientProvider>>()));\n    return builder;\n}", "CodeBleu_score": 74.5733228467635}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\tif (builder == null)\n        throw new ArgumentNullException(nameof(builder));\n    builder.Services.Register(provider =>\n        new DefaultZookeeperClientProvider(\n            GetConfigInfo(configInfo),\n            provider.Resolve<IHealthCheckService>(),\n            provider.Resolve<IZookeeperAddressSelector>(),\n            provider.Resolve<ILogger<DefaultZookeeperClientProvider>>())).As<IZookeeperClientProvider>().SingleInstance;\n    return builder;\n}", "CodeBleu_score": 64.0109802450534}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\tvar zooKeepers = await _zookeeperProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        if (!await zooKeeper.ExistsAsync(_conf.RoutePath)) {\n            _logger.LogInformation(\"\u521b\u5efa\u8def\u7531\u8282\u70b9\uff1a{routePath}\", _conf.RoutePath);\n            await zooKeeper.CreateAsync(_conf.RoutePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        foreach (var serviceRoute in routes) {\n            var nodePath = $\"{_conf.RoutePath}/{serviceRoute.Id}\";\n            if (!await zooKeeper.ExistsAsync(nodePath)) {\n                _logger.LogInformation(\"\u521b\u5efa\u8282\u70b9\uff1a{nodePath}\", nodePath);\n                await zooKeeper.CreateAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            var data = JsonSerializer.Serialize(serviceRoute);\n            if (await DataEquals(nodePath, data, zooKeeper)) {\n                continue;\n            }\n            _logger.LogInformation(\"\u66f4\u65b0\u8282\u70b9\uff1a{nodePath}\uff0c\u6570\u636e\uff1a{data}\", nodePath, data);\n            await zooKeeper.SetDataAsync(nodePath, Encoding.UTF8.GetBytes(data));\n        }\n        _logger.LogInformation(\"\u8def\u7531\u6dfb\u52a0\u6210\u529f\");\n    }\n}", "CodeBleu_score": 58.07228281962541}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t_logger.LogInformation(\"Setting MQTT routes...\");\n    var zooKeepers = await _zookeeperProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        if (!await zooKeeper.ExistsAsync(ZooKeeperPath)) {\n            _logger.LogInformation(\"Creating ZooKeeper path {path}...\", ZooKeeperPath);\n            await zooKeeper.CreateAsync(ZooKeeperPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        if (!await zooKeeper.ExistsAsync(ZooKeeperPath + \"/\" + MqttRoutePath)) {\n            _logger.LogInformation(\"Creating ZooKeeper path {path}...\", ZooKeeperPath + \"/\" + MqttRoutePath);\n            await zooKeeper.CreateAsync(ZooKeeperPath + \"/\" + MqttRoutePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        foreach (var serviceRoute in routes) {\n            var nodePath = ZooKeeperPath + \"/\" + MqttRoutePath + \"/\" + serviceRoute.ServiceId;\n            if (!await zooKeeper.ExistsAsync(nodePath)) {\n                _logger.LogInformation(\"Creating ZooKeeper node {nodePath}...\", nodePath);\n                await zooKeeper.CreateAsync(nodePath, JsonConvert.SerializeObject(serviceRoute), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            } else {\n                _logger.LogInformation(\"Updating ZooKeeper node {nodePath}...\", nodePath);\n                await zooKeeper.setDataAsync(nodePath, JsonConvert.SerializeObject(serviceRoute));\n            }\n        }\n\n        _logger.LogInformation(\"MQTT routes set.\");\n    }\n}", "CodeBleu_score": 54.79289774813627}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t_logger.LogInformation(\"Setting MQTT service routes...\");\n\n    var zooKeepers = _zooKeeperProvider.GetZooKeepers();\n    if (!zooKeepers.Any()) {\n        _logger.LogInformation(\"No ZooKeeper clients available.\");\n        return;\n    }\n\n    foreach (var zooKeeper in zooKeepers) {\n        if (!zooKeeper.IsConnected()) {\n            _logger.LogInformation(\"ZooKeeper client not connected.\");\n            continue;\n        }\n\n        var serviceRoute = $\"{_config.ZooKeeperRoutePath}/{_config.ServiceName}\";\n        var nodePath = $\"{serviceRoute}/{_config.ServiceId}\";\n\n        if (!await zooKeeper.ExistsAsync(serviceRoute)) {\n            _logger.LogInformation(\"Service route path does not exist. Creating...\");\n            await zooKeeper.CreateAsync(serviceRoute, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        if (!await zooKeeper.ExistsAsync(nodePath)) {\n            _logger.LogInformation(\"Service route node does not exist. Creating...\");\n            await zooKeeper.CreateAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n\n        foreach (var route in routes) {\n            var routePath = $\"{nodePath}/{route.Topic}\";\n            var data = Serialize(route);\n\n            if (await zooKeeper.ExistsAsync(routePath)) {\n                _logger.LogInformation(\"Route node exists. Updating...\");\n                await zooKeeper.setDataAsync(routePath, data);\n            } else {\n                _logger.LogInformation(\"Route node does not exist. Creating...\");\n                await zooKeeper.CreateAsync(routePath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        }\n\n        _logger.LogInformation", "CodeBleu_score": 51.61969147964962}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\tvar oldRouteTopics = _routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n    var newRouteTopics = routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n    var deletedRouteTopics = oldRouteTopics.Except(newRouteTopics).ToArray();\n    foreach (var zooKeeper in _zookeeperClientProvider.GetZooKeepers()) {\n        if (zooKeeper.Item2.addresses.Contains(hostAddr.Address)) {\n            foreach (var deletedRouteTopic in deletedRouteTopics) {\n                var oldRoutes = _routes.Where(p => p.MqttDescriptor.Topic == deletedRouteTopic).Select(p => p.MqttEndpoint).FirstOrDefault();\n                if (oldRoutes != null) {\n                    var oldRoutePath = $\"{_options.RoutePath}/{deletedRouteTopic}\";\n                    await zooKeeper.Item2.deleteAsync(oldRoutePath);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 62.89993048344991}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\tvar routePath = $\"{_options.RoutePath}/{hostAddr.Address}:{hostAddr.Port}\";\n    var zooKeeperClients = _zookeeperClientProvider.GetZooKeepers();\n    var oldRouteTopics = _routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n    var newRouteTopics = routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n    var deletedRouteTopics = oldRouteTopics.Except(newRouteTopics).ToArray();\n    foreach (var zooKeeper in zooKeeperClients) {\n        foreach (var deletedRouteTopic in deletedRouteTopics) {\n            var addresses = _routes.Where(p => p.MqttDescriptor.Topic == deletedRouteTopic).Select(p => p.MqttEndpoint).FirstOrDefault();\n            if (addresses.Contains(hostAddr)) {\n                await zooKeeper.Item2.deleteAsync(routePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 60.9500729609569}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\tvar routePath = $\"{_options.RoutePath}/{hostAddr.ToString()}\";\n    var zooKeeperClients = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeeperClients) {\n        var oldRouteTopics = (await zooKeeper.Item2.getChildrenAsync(routePath)).Children.Select(i => i.Replace(\"$\", string.Empty));\n        var newRouteTopics = routes.Select(i => i.MqttDescriptor.Topic).ToArray();\n        var deletedRouteTopics = oldRouteTopics.Except(newRouteTopics).ToArray();\n        foreach (var deletedRouteTopic in deletedRouteTopics) {\n            var addresses = _routes.Select(i => i.MqttEndpoint).Where(i => i.MqttDescriptor.Topic == deletedRouteTopic).Select(i => i.Address.ToString()).ToArray();\n            if (addresses.Contains(hostAddr.ToString())) {\n                await zooKeeper.Item2.deleteAsync($\"{routePath}/{deletedRouteTopic}\");\n            }\n        }\n    }\n}", "CodeBleu_score": 57.52927245385224}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t_logger.LogInformation(\"Setting service caches in Zookeeper.\");\n    var cachePath = _config.GetZookeeperCachePath();\n    var zookeepers = _zookeeperProvider.GetZooKeepers();\n    foreach (var zookeeper in zookeepers) {\n        await zookeeper.EnsureExistsAsync(cachePath);\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var nodePath = $\"{cachePath}/{cacheDescriptor.ServiceDescriptor.Id}\";\n            var data = cacheDescriptor.ToJsonString();\n            if (!await zookeeper.ExistsAsync(nodePath)) {\n                await zookeeper.CreateAsync(nodePath, data);\n            } else {\n                var currentData = await zookeeper.GetDataAsync(nodePath);\n                if (!DataEquals(currentData, data)) {\n                    await zookeeper.SetDataAsync(nodePath, data);\n                }\n            }\n        }\n    }\n    _logger.LogInformation(\"Service caches set in Zookeeper.\");\n}", "CodeBleu_score": 36.23440279158323}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t_logger.LogInformation(\"Adding service caches to Zookeeper.\");\n    var cachePath = $\"{_config.ZookeeperPath}/{_config.CachePath}\";\n    var zooKeeperClients = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeeperClients) {\n        await zooKeeper.EnsureExistsAsync(cachePath);\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var cacheNodePath = $\"{cachePath}/{cacheDescriptor.ServiceDescriptor.Id}\";\n            if (!await zooKeeper.ExistsAsync(cacheNodePath)) {\n                var cacheData = _serializer.Serialize(cacheDescriptor);\n                await zooKeeper.CreateAsync(cacheNodePath, cacheData);\n            } else {\n                var cacheData = _serializer.Serialize(cacheDescriptor);\n                var zooKeeperData = await zooKeeper.GetDataAsync(cacheNodePath);\n                if (!DataEquals(cacheData, zooKeeperData)) {\n                    await zooKeeper.SetDataAsync(cacheNodePath, cacheData);\n                }\n            }\n        }\n    }\n    _logger.LogInformation(\"Service caches added to Zookeeper.\");\n}", "CodeBleu_score": 39.5002492503211}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\tif (cacheDescriptors == null) {\n        throw new ArgumentNullException(nameof(cacheDescriptors));\n    }\n\n    if (cacheDescriptors.Any(cacheDescriptor => cacheDescriptor == null)) {\n        throw new ArgumentException($\"{nameof(cacheDescriptors)} cannot contain null elements.\", nameof(cacheDescriptors));\n    }\n\n    _logger.LogInformation(\"Updating service caches in Zookeeper.\");\n\n    var cachePath = _conf.GetString(ConfigurationKeys.CachePath);\n    var zooKeeperClients = _zooKeeperProvider.GetZooKeepers();\n\n    foreach (var zooKeeper in zooKeeperClients) {\n        var cachePathExists = await zooKeeper.ExistsAsync(cachePath);\n\n        if (cachePathExists == null) {\n            await zooKeeper.CreateAsync(cachePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n        }\n\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var nodePath = Path.Combine(cachePath, cacheDescriptor.Name);\n            var nodeExists = await zooKeeper.ExistsAsync(nodePath);\n\n            if (nodeExists == null) {\n                await zooKeeper.CreateAsync(nodePath, Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(cacheDescriptor)), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n            } else {\n                var nodeData = await zooKeeper.GetDataAsync(nodePath);\n                var nodeDataString = Encoding.UTF8.GetString(nodeData);\n                var nodeDescriptor = JsonConvert.DeserializeObject<ServiceCacheDescriptor>(nodeDataString);\n\n                if (!DataEquals(nodeDescriptor, cacheDescriptor)) {\n                    await zooKeeper.setDataAsync(nodePath, Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(cacheDescriptor)));\n                }\n            }\n        }\n    }\n\n    _logger.LogInformation(\"Successfully updated service caches.\");\n}", "CodeBleu_score": 49.540852614702}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\tif (zooKeeper.Item1.WaitOne(TimeSpan.FromSeconds(10)) && zooKeeper.Item2.existsAsync(path).GetAwaiter().GetResult() == null)\n    {\n        _logger.LogInformation(\"Creating Zookeeper node path: {path}\", path);\n        var pathFragments = path.Split('/');\n        var currentPath = string.Empty;\n        foreach (var pathFragment in pathFragments)\n        {\n            if (pathFragment == string.Empty)\n            {\n                continue;\n            }\n            currentPath = string.IsNullOrEmpty(currentPath) ? pathFragment : $\"{currentPath}/{pathFragment}\";\n            if (zooKeeper.Item2.existsAsync(currentPath).GetAwaiter().GetResult() == null)\n            {\n                await zooKeeper.Item2.createAsync(currentPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                _logger.LogInformation(\"Created Zookeeper node path: {path}\", currentPath);\n            }\n        }\n    }\n}", "CodeBleu_score": 47.883800927656026}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t_logger.LogInformation(\"Creating Zookeeper node: {0}\", path);\n    _manualResetEvent.WaitOne();\n    if (await zooKeeper.Item2.existsAsync(path) == null) {\n        _logger.LogInformation(\"Creating Zookeeper node: {0}\", path);\n        var subdirectories = path.Split('/');\n        var subdirectory = \"\";\n        foreach (var subdirectoryName in subdirectories) {\n            if (subdirectoryName.Length > 0) {\n                subdirectory += \"/\" + subdirectoryName;\n                if (await zooKeeper.Item2.existsAsync(subdirectory) == null) {\n                    await zooKeeper.Item2.createAsync(subdirectory, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                    _logger.LogInformation(\"Created Zookeeper node: {0}\", subdirectory);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 52.64112682994628}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t_logger.LogInformation(\"Creating Zookeeper node: {0}\", path);\n    _logger.LogInformation(\"Waiting for manual reset event...\");\n    zooKeeper.Item1.WaitOne();\n    if (zooKeeper.Item2.existsAsync(path).GetAwaiter().GetResult() == null) {\n        var nodePaths = path.Split('/');\n        var nodePath = \"\";\n        foreach (var node in nodePaths) {\n            if (node != \"\") {\n                nodePath += \"/\" + node;\n                if (zooKeeper.Item2.existsAsync(nodePath).GetAwaiter().GetResult() == null) {\n                    _logger.LogInformation(\"Creating node: {0}\", nodePath);\n                    zooKeeper.Item2.createAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT).GetAwaiter().GetResult();\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 51.40161996837635}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\tvar result = new List<(ManualResetEvent, ZooKeeper)>();\n  foreach (var ipAddress in _config.Addresses) {\n    if (await _healthCheckService.IsHealth(ipAddress)) {\n      result.Add(CreateZooKeeper(ipAddress));\n    }\n  }\n  return result;\n}", "CodeBleu_score": 75.5169904183989}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\tvar result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var ipAddress in _config.IpAddresses)\n    {\n        if (_healthCheckService.IsHealth(ipAddress))\n        {\n            var (connectionWait, zooKeeper) = CreateZooKeeper(ipAddress);\n            result.Add((connectionWait, zooKeeper));\n        }\n    }\n    return await Task.FromResult(result);\n}", "CodeBleu_score": 70.0525310698591}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\tvar result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var ipAddress in _config.Addresses)\n    {\n        if (await _healthCheckService.IsHealth(ipAddress))\n        {\n            result.Add(CreateZooKeeper(ipAddress));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 78.83548359413423}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\tsynchronized (this) {\n        if (zk == null) {\n            zk = newZooKeeper();\n        }\n        return zk;\n    }\n}", "CodeBleu_score": 16.55477575497463}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\tsynchronized (this) {\n            if (zk == null) {\n                zk = newZooKeeper();\n            }\n            return zk;\n        }\n    }", "CodeBleu_score": 18.315066156223132}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\tsynchronized (this) {\n            if (zk == null) {\n                zk = newZooKeeper();\n            }\n            return zk;\n        }\n    }", "CodeBleu_score": 18.315066156223132}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\tif (zk != null) {\n        try {\n            if (waitForShutdownTimeoutMs > 0) {\n                zk.register(new ZKShutdownHandler());\n                zk.close(waitForShutdownTimeoutMs);\n            } else {\n                zk.close();\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        zk = null;\n    }\n}", "CodeBleu_score": 29.901129590959354}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\ttry {\n        if (waitForShutdownTimeoutMs < 0) {\n            throw new IllegalArgumentException(\"waitForShutdownTimeoutMs must be >= 0\");\n        }\n        if (waitForShutdownTimeoutMs == 0) {\n            if (zk != null) {\n                zk.close();\n            }\n            return;\n        }\n        if (zk == null) {\n            return;\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Waiting for shutdown of ZooKeeper connection to \" + zk.getServers());\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Exception> exception = new AtomicReference<Exception>();\n        final Watcher watcher = new Watcher() {\n            @Override\n            public void process(WatchedEvent event) {\n                if (event.getState() == KeeperState.CLOSED) {\n                    latch.countDown();\n                }\n            }\n        };\n        zk.register(ZKPaths.makePath(ZKPaths.BASE_ZNODE, \"dummy\"), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL, watcher, new AsyncCallback.StringCallback() {\n            @Override\n            public void processResult(int rc, String path, Object ctx, String name) {\n                if (rc != KeeperException.Code.OK.intValue() && rc != KeeperException.Code.NODEEXISTS.intValue()) {\n                    exception.set(KeeperException.create(KeeperException.Code.get(rc)));\n                    latch.countDown();\n                }\n            }\n        }, null);\n        boolean success = false;\n        try {\n            success = latch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            exception.set(e);\n        } finally {\n            if (!success) {", "CodeBleu_score": 46.93399595013433}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\tif (waitForShutdownTimeoutMs < 0) {\n\t\tthrow new IllegalArgumentException(\"The waitForShutdownTimeoutMs must be >= 0.\");\n\t}\n\tif (waitForShutdownTimeoutMs == 0) {\n\t\tclose();\n\t}\n\telse {\n\t\ttry {\n\t\t\tZooKeeper zooKeeper = getZooKeeper();\n\t\t\tif (zooKeeper != null) {\n\t\t\t\tzooKeeper.register(new Watcher() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\t\t// nothing to do here\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tzooKeeper.close(waitForShutdownTimeoutMs);\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t}\n}", "CodeBleu_score": 44.81986702039439}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\ttry {\n            internalBlockUntilConnectedOrTimedOut();\n            return true;\n        } catch (InterruptedException e) {\n            return false;\n        }\n    }", "CodeBleu_score": 12.133833308406128}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\ttry {\n        OperationTrace trace = startAdvancedTracer(\"ZooKeeper.blockUntilConnectedOrTimedOut\");\n        internalBlockUntilConnectedOrTimedOut();\n        trace.setReturnCode(ReturnCode.OK);\n        trace.setResultCode(Code.OK.intValue());\n        return true;\n    } catch (KeeperException e) {\n        LOG.warn(\"Ignoring unexpected KeeperException while checking connection\", e);\n        return false;\n    }\n}", "CodeBleu_score": 32.87274768214954}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\tif (!state.isStarted()) {\n            throw new IllegalStateException(\"The client is not started.\");\n        }\n        if (state.isConnected()) {\n            return true;\n        }\n        internalBlockUntilConnectedOrTimedOut();\n        return state.isConnected();\n    }", "CodeBleu_score": 23.71226698606503}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\tif (started) {\n        log.info(\"Shutting down service\");\n        started = false;\n        try {\n            if (waitForShutdownTimeoutMs > 0) {\n                shutdownLatch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n            } else {\n                shutdownLatch.await();\n            }\n        } catch (InterruptedException e) {\n            log.error(\"Interrupted while waiting for shutdown\", e);\n            Thread.currentThread().interrupt();\n        } finally {\n            shutdownLatch.countDown();\n        }\n    }\n}", "CodeBleu_score": 28.504170995429533}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\tif (started) {\n        started = false;\n        log.info(\"Shutting down service\");\n        try {\n            service.close(waitForShutdownTimeoutMs);\n        } catch (IOException e) {\n            if (Thread.currentThread().isInterrupted()) {\n                log.info(\"Interrupted during shutdown, exiting uncleanly\");\n            } else {\n                log.error(\"Error during service shutdown\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 45.293688928745645}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\tif (started.compareAndSet(true, false)) {\n        try {\n            LOG.info(\"Shutting down \" + getClass().getSimpleName() + \".\");\n            closeState(waitForShutdownTimeoutMs);\n        } catch (IOException e) {\n            if (Thread.currentThread().isInterrupted()) {\n                LOG.debug(\"Interrupted while closing \" + getClass().getSimpleName() + \".\");\n            } else {\n                LOG.error(\"Error while closing \" + getClass().getSimpleName() + \".\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 49.15288409706544}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\tlong remainingWaitTime = connectionTimeout;\n\twhile (true) {\n\t\tif (state == State.CONNECTED) {\n\t\t\treturn;\n\t\t}\n\t\tif (remainingWaitTime <= 0) {\n\t\t\tthrow new InterruptedException(\"Timed out waiting for connection\");\n\t\t}\n\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\tWatcher watcher = new Watcher() {\n\t\t\t@Override\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\tif (event.getType() == Event.EventType.None) {\n\t\t\t\t\tswitch (event.getState()) {\n\t\t\t\t\t\tcase SyncConnected:\n\t\t\t\t\t\tcase ConnectedReadOnly:\n\t\t\t\t\t\t\tconnectedLatch.countDown();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Disconnected:\n\t\t\t\t\t\t\tlatch.countDown();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tzooKeeper.register(watcher);\n\t\t\tlatch.await(remainingWaitTime, TimeUnit.MILLISECONDS);\n\t\t} catch (InterruptedException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception e) {\n\t\t\t// Ignore\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tzooKeeper.removeWatcher(watcher);\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t\tremainingWaitTime = connectionTimeout - (System.currentTimeMillis() - startTime);\n\t}\n}", "CodeBleu_score": 42.814099297852685}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\tif (connectionState == ConnectionState.CONNECTED) {\n        return;\n    }\n    long startTime = System.currentTimeMillis();\n    long waitTime = connectionTimeout;\n    CountDownLatch connectedSignal = new CountDownLatch(1);\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getState() == KeeperState.SyncConnected) {\n                connectedSignal.countDown();\n            }\n        }\n    };\n    try {\n        while (true) {\n            connectionState = zooKeeper.getConnectionState();\n            if (connectionState == ConnectionState.CONNECTED) {\n                return;\n            }\n            if (waitTime <= 0) {\n                throw new ZkTimeoutException(\"Unable to connect to zookeeper server within timeout: \" + connectionTimeout + \"ms, \" +\n                        \"connection state is: \" + connectionState);\n            }\n            zooKeeper.register(watcher);\n            connectedSignal.await(waitTime, TimeUnit.MILLISECONDS);\n            zooKeeper.removeWatcher(watcher);\n            long elapsedTime = System.currentTimeMillis() - startTime;\n            waitTime = connectionTimeout - elapsedTime;\n        }\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw e;\n    } catch (KeeperException e) {\n        throw new ZkInterruptedException(e);\n    }\n}", "CodeBleu_score": 41.36633021721825}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\tlong remainingWaitMs = connectionTimeoutMs;\n    long start = System.currentTimeMillis();\n\n    while (true) {\n        if (state == State.CONNECTED) {\n            return;\n        }\n\n        if (state == State.DISCONNECTED) {\n            throw new ConnectException(\"Connection timed out.\");\n        }\n\n        if (remainingWaitMs <= 0) {\n            throw new ConnectException(\"Connection timed out.\");\n        }\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        Watcher watcher = new Watcher() {\n            @Override\n            public void process(WatchedEvent event) {\n                if (event.getType() == Event.EventType.None) {\n                    latch.countDown();\n                }\n            }\n        };\n        zk.register(watcher);\n\n        latch.await(remainingWaitMs, TimeUnit.MILLISECONDS);\n\n        zk.", "CodeBleu_score": 47.151492792922376}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\tif (doProtected() && isEphemeral(createMode)) {\n        long sessionId = getSessionId(client);\n        if (sessionId != protectedId) {\n            LOG.info(\"Protected mode: sessionId has changed, deleting old node and creating new one\");\n            getFailedDeleteManager().delete(client, foundNode, -1);\n            protectedId = sessionId;\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 29.355335834953284}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\tif (createMode == CreateMode.EPHEMERAL) {\n        if (doProtected()) {\n            if (client.getZooKeeper() != null) {\n                long sessionId = client.getZooKeeper().getSessionId();\n                if (sessionId != protectedId.getSessionId()) {\n                    if (LOG.isDebugEnabled()) {\n                        LOG.debug(\"Session ID has changed. Deleting old node: \" + protectedId.getPath());\n                    }\n                    client.delete().guaranteed().forPath(protectedId.getPath());\n                    protectedId = new ProtectedId(sessionId, foundNode);\n                }\n            }\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 48.63958667026864}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\tif (doProtected()) {\n        if (isEphemeral()) {\n            if (client.getZooKeeper().getSessionId() != protectedId.getSessionId()) {\n                LOG.info(\"Client session changed, deleting old ephemeral node\");\n                getFailedDeleteManager().delete(client, protectedId.getPath(), -1);\n                protectedId = null;\n            }\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 28.80650219184499}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t// Start an advanced trace for the operation\n    AdvancedTracer tracer = AdvancedTracer.startSpan(path, \"ZooKeeper.pathInForeground\");\n    try {\n        // Set the ACL for the path in a retry loop\n        Stat stat = retryLoop.callWithRetry(new Callable<Stat>() {\n            public Stat call() throws Exception {\n                return getZooKeeper().setACL(path, aclList, -1);\n            }\n        });\n        // Record the result in the trace\n        tracer.record(\"result\", stat);\n        // Commit the trace\n        tracer.commit();\n        // Return the status of the operation\n        return stat;\n    } catch (Exception e) {\n        // Record the exception in the trace\n        tracer.error(e);\n        // Commit the trace\n        tracer.commit();\n        // Rethrow the exception\n        throw e;\n    }\n}", "CodeBleu_score": 52.89333001187902}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\tfinal String traceName = \"Set ACL: \" + path;\n    final TraceScope trace = Trace.startSpan(traceName);\n    try {\n        final RetryLoop retryLoop = new RetryLoop(trace, this, RetryLoop.Mode.SET_ACL, path);\n        final Stat stat = retryLoop.callWithRetry(new Callable<Stat>() {\n            @Override\n            public Stat call() throws Exception {\n                return zooKeeper.setACL(path, aclList, -1);\n            }\n        });\n        trace.record(Annotation.localOperationLatency(System.nanoTime() - trace.getStartTimeNanos()));\n        trace.record(Annotation.aclSet(path));\n        trace.record(Annotation.statusCode(KeeperException.Code.OK.intValue()));\n        trace.commit();\n        return stat;\n    } catch (KeeperException e) {\n        trace.record(Annotation.statusCode(e.code().intValue()));\n        trace.record(Annotation.localOperationLatency(System.nanoTime() - trace.getStartTimeNanos()));\n        trace.commit();\n        throw e;\n    } catch (Exception e) {\n        trace.record(Annotation.statusCode(KeeperException.Code.APIERROR.intValue()));\n        trace.record(Annotation.localOperationLatency(System.nanoTime() - trace.getStartTimeNanos()));\n        trace.commit();\n        throw e;\n    }\n}", "CodeBleu_score": 48.5960777589581}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\tfinal String traceName = \"pathInForeground-\" + path;\n    final TraceScope trace = Trace.startSpan(traceName);\n    try {\n        final Set<ACL> aclSet = new HashSet<ACL>(aclList);\n        final RetryLoop retryLoop = new RetryLoop(trace, retryPolicy, this);\n        Stat stat = retryLoop.callWithRetry(new Callable<Stat>() {\n            @Override\n            public Stat call() throws Exception {\n                return zooKeeper.setACL(path, aclSet, -1);\n            }\n        });\n        trace.record(Annotation.localOperationLatency(retryLoop.getRetryCount()));\n        trace.record(Annotation.keyValue(\"path\", path));\n        trace.record(Annotation.keyValue(\"status\", stat.getAversion()));\n        trace.commit();\n        return stat;\n    } catch (Exception e) {\n        trace.record(Annotation.keyValue(\"error\", e.toString()));\n        trace.record(Annotation.keyValue(\"errorClass\", e.getClass().getName()));\n        trace.record(Annotation.keyValue(\"errorStack\", ExceptionUtils.getStackTrace(e)));\n        trace.abort();\n        throw e;\n    } finally {\n        trace.close();\n    }\n}", "CodeBleu_score": 49.04117930292584}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\tcheckNotNull(client, \"client cannot be null\");\n    checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    checkNotNull(thisId, \"thisId cannot be null\");\n    checkNotNull(payload, \"payload cannot be null\");\n\n    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    try {\n        this.cache = CuratorCache.build(client, membershipPath);\n        this.cache.start();\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Could not start CuratorCache\", e);\n    }\n\n    try {\n        this.node = PersistentNode.builder(client, makePath(membershipPath, thisId), payload).ephemeral().build();\n        this.node.start();\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Could not start PersistentNode\", e);\n    }\n}", "CodeBleu_score": 46.18452437291779}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\tif (thisId == null) {\n    throw new NullPointerException(\"thisId cannot be null\");\n  }\n  if (thisId.contains(\"/\")) {\n    throw new IllegalArgumentException(\"thisId cannot contain a '/'\");\n  }\n  if (payload == null) {\n    throw new NullPointerException(\"payload cannot be null\");\n  }\n  this.client = client;\n  this.membershipPath = membershipPath;\n  this.thisId = thisId;\n  this.payload = payload;\n  this.cache = CuratorCache.build(client, membershipPath);\n  this.cache.start();\n  this.node = makePath(client, membershipPath, thisId, payload);\n  this.node.start();\n}", "CodeBleu_score": 40.3165061254802}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\tcheckNotNull(client, \"client cannot be null\");\n    checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    checkNotNull(thisId, \"thisId cannot be null\");\n    checkNotNull(payload, \"payload cannot be null\");\n\n    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    this.cache = CuratorCache.build(client, membershipPath);\n    this.cache.start();\n\n    this.memberNode = PersistentNode.builder(client, ZKPaths.makePath(membershipPath, thisId)).ephemeral().data(payload).build();\n    this.memberNode.start();\n}", "CodeBleu_score": 49.283429065445794}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\tAsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n            handleWatchedStage(async.watched().forPath(path));\n        }\n    });\n}", "CodeBleu_score": 81.30691025914821}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\tAsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n\n            // set up a watch on the node\n            async.checkExists().watched().forPath(name).whenComplete((watchedEvent, watchedException) -> {\n                if (watchedException != null) {\n                    // there was a problem\n                    watchedException.printStackTrace();\n                } else {\n                    System.out.println(\"Watched event: \" + watchedEvent);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 77.72001676472422}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\tAsyncCuratorFramework async = wrap(client);\n\n    async.create().forPath(path, new byte[0]).whenComplete((name, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n\n            // set up a watcher on the node\n            async.checkExists().watched().forPath(path).whenComplete((event, watchException) -> {\n                if (watchException != null) {\n                    // there was a problem\n                    watchException.printStackTrace();\n                } else {\n                    System.out.println(\"Event: \" + event);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 68.03293960573953}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\tList<OpResult> results = client.processTxn(transaction);\n    OpResult firstResult = results.get(0);\n    if (firstResult.getErr() != 0) {\n        throw KeeperException.create(Code.get(firstResult.getErr()));\n    }\n    return results;\n}", "CodeBleu_score": 25.26992182079761}, {"code": "private List<OpResult> doOperation() throws Exception{\n\tList<OpResult> results = client.processTxn(transaction);\n    if (results.isEmpty()) {\n        throw new IllegalStateException(\"No results returned from server\");\n    }\n    OpResult firstResult = results.get(0);\n    if (firstResult.getErr() != 0) {\n        throw KeeperException.create(KeeperException.Code.get(firstResult.getErr()));\n    }\n    return results;\n}", "CodeBleu_score": 32.545782851203256}, {"code": "private List<OpResult> doOperation() throws Exception{\n\tList<OpResult> results = transaction.commit();\n    if (results.size() > 0) {\n        OpResult firstResult = results.get(0);\n        if (firstResult.getType() == OpResult.ERROR) {\n            throw KeeperException.create(KeeperException.Code.get(firstResult.getErr()));\n        }\n    }\n    return results;\n}", "CodeBleu_score": 32.21205348814799}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\tSystem.out.println(\"Listing instances:\");\n        List<String> serviceNames = serviceDiscovery.queryForNames();\n        for (String serviceName : serviceNames) {\n            System.out.println(serviceName + \":\");\n            List<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                outputInstance(instance);\n            }\n        }\n        System.out.println();\n        serviceDiscovery.closeQuietly();\n    }", "CodeBleu_score": 55.44246881371242}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\tSystem.out.println(\"Listing instances...\");\n    try {\n        for (String name : serviceDiscovery.queryForNames()) {\n            System.out.println(\"Service \" + name + \":\");\n            for (ServiceInstance<InstanceDetails> instance : serviceDiscovery.queryForInstances(name)) {\n                outputInstance(instance);\n            }\n        }\n    } catch (NoNodeException e) {\n        System.out.println(\"No instances found.\");\n    }\n    serviceDiscovery.closeQuietly();\n}", "CodeBleu_score": 43.45215560710861}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\tSystem.out.println(\"Instances:\");\n        for (String serviceName : serviceDiscovery.queryForNames()) {\n            for (ServiceInstance<InstanceDetails> instance : serviceDiscovery.queryForInstances(serviceName)) {\n                outputInstance(instance);\n            }\n        }\n        serviceDiscovery.closeQuietly();\n    }", "CodeBleu_score": 32.74073108156492}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\tList<String> filtered = new ArrayList<String>();\n    for (String child : children) {\n        if (!child.equals(READY_NODE)) {\n            filtered.add(child);\n        }\n    }\n    Collections.sort(filtered);\n    return filtered;\n}", "CodeBleu_score": 31.301179401504303}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\treturn children.findAll { !(it == READY_NODE) }.sort()\n}", "CodeBleu_score": 10.318567828525874}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\treturn children.findAll { it != READY_NODE }.sort()\n}", "CodeBleu_score": 9.094963650883026}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\tif (zk != null) {\n        System.out.println(\"Closing active ZooKeeper connection.\");\n        zk.close();\n    }\n    System.out.println(\"Connecting to ZooKeeper ensemble at \" + newHost);\n    zk = new ZooKeeper(newHost, timeout, this);\n    if (readOnly) {\n        System.out.println(\"Setting ZooKeeper connection to read-only mode.\");\n        zk.setReadOnly();\n    }\n}", "CodeBleu_score": 33.47793849533961}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\tif (zk != null) {\n        zk.close();\n    }\n    zk = new ZooKeeper(newHost, timeout, this);\n    if (readOnly) {\n        zk.addAuthInfo(\"digest\", \"ben:passwd\".getBytes());\n        zk.setReadOnly();\n    }\n}", "CodeBleu_score": 32.17002021149094}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\tif (zk != null && zk.getState() != ZooKeeper.States.CLOSED) {\n        zk.close();\n    }\n    zk = new ZooKeeper(newHost, 15000, this);\n    if (readOnly) {\n        zk.setReadOnly();\n    }\n}", "CodeBleu_score": 33.39627603277589}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\tList<ACL> aclList = new ArrayList<ACL>();\n        String[] aclArray = aclString.split(\",\");\n        for (String acl : aclArray) {\n            String[] aclSplit = acl.split(\":\");\n            if (aclSplit.length != 3) {\n                outputStream.write((\"Invalid ACL string: \" + acl).getBytes());\n                continue;\n            }\n            try {\n                ACL newAcl = new ACL();\n                newAcl.setId(new Id(aclSplit[0], aclSplit[1]));\n                newAcl.setPerms(getPermFromString(aclSplit[2]));\n                aclList.add(newAcl);\n            } catch (Exception e) {\n                outputStream.write((\"Invalid ACL string: \" + acl).getBytes());\n            }\n        }\n        return aclList;\n    }", "CodeBleu_score": 38.01195122583781}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\tList<ACL> aclList = new ArrayList<ACL>();\n        String[] aclArray = aclString.split(\",\");\n        for (String acl : aclArray) {\n            ACL newAcl = new ACL();\n            String[] aclSegments = acl.split(\":\");\n            if (aclSegments.length != 3) {\n                outputStream.write((\"Invalid ACL specification: \" + acl).getBytes());\n                continue;\n            }\n            try {\n                newAcl.setPerms(getPermFromString(aclSegments[2]));\n            } catch (IOException e) {\n                outputStream.write((\"Invalid permission specification: \" + aclSegments[2]).getBytes());\n                continue;\n            }\n            newAcl.setId(new Id(aclSegments[0], aclSegments[1]));\n            aclList.add(newAcl);\n        }\n        return aclList;\n    }", "CodeBleu_score": 36.03337973290596}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\tList<ACL> aclList = new ArrayList<ACL>();\n        String[] aclArray = aclString.split(\",\");\n        for (String acl : aclArray) {\n            String[] parts = acl.split(\":\");\n            if (parts.length == 3) {\n                try {\n                    ACL aclObj = new ACL();\n                    aclObj.setId(new Id(parts[0], parts[1]));\n                    aclObj.setPerms(getPermFromString(parts[2]));\n                    aclList.add(aclObj);\n                } catch (Exception e) {\n                    outputStream.write((\"Invalid ACL specification: \" + acl + \" -- \" + e.getMessage()).getBytes());\n                }\n            } else {\n                outputStream.write((\"Invalid ACL specification: \" + acl).getBytes());\n            }\n        }\n        return aclList;\n    }", "CodeBleu_score": 33.40671059986042}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\tObjects.requireNonNull(pathList);\n    assertZookeeperExists(serverId);\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).delete(path);\n        }\n    } else {\n        zookeeperMap.get(serverId).deleteAsync(pathList);\n    }\n}", "CodeBleu_score": 99.45743761910349}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\tObjects.requireNonNull(pathList);\n    assertZookeeperExists(serverId);\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).delete(path);\n        }\n    } else {\n        zookeeperMap.get(serverId).deleteAsync(pathList);\n    }\n}", "CodeBleu_score": 99.45743761910349}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\tObjects.requireNonNull(pathList);\n        assertZookeeperExists(serverId);\n        if (pathList.size() < 20) {\n            for (String path : pathList) {\n                zookeeperMap.get(serverId).delete(path);\n            }\n        } else {\n            zookeeperMap.get(serverId).deleteAsync(pathList);\n        }\n    }", "CodeBleu_score": 97.22945493315514}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t// write connecting message\n        writer.write(\"Connecting to Zookeeper...\n\");\n        // create connection\n        var factory = new CuratorZookeeperConnectionFactory();\n        var params = ZookeeperParams.builder()\n                .id(id)\n                .url(url)\n                .maxRetries(3)\n                .connectionTimeout(1000)\n                .retryIntervalTime(1000)\n                .sessionTimeout(1000)\n                .build();\n        var client = factory.create(params);\n        // write success message\n        writer.write(\"Successfully connected to Zookeeper.\n\");\n        // create ZooKeeperMain\n        var main = new ZooKeeperMain(client);\n        // return terminal\n        return new Terminal(id, url, client, main);\n    }", "CodeBleu_score": 59.121934141021214}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\twriter.write(\"Connecting to \" + id + \" at \" + url + \"...\");\n        writer.flush();\n        var factory = new CuratorZookeeperConnectionFactory();\n        var params = ZookeeperParams.builder()\n                .id(id)\n                .url(url)\n                .build();\n        var connection = factory.create(params);\n        writer.write(\"Success!\n\");\n        writer.flush();\n        var zooKeeperMain = new ZooKeeperMain(connection);\n        return new Terminal(id, url, connection, zooKeeperMain);\n    }", "CodeBleu_score": 60.4194773372575}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\twriter.write(\"Connecting to \" + url + \"...\n\");\n    var connection = createConnection(id, url);\n    writer.write(\"Connected!\n\");\n    var main = new ZooKeeperMain(connection.getZookeeperClient());\n    return new Terminal(id, url, connection, main);\n}", "CodeBleu_score": 31.29808682663465}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\tint attempts = 0;\n        while (true) {\n            try {\n                sshClient.connect();\n                break;\n            } catch (Exception e) {\n                attempts++;\n                if (attempts == 6) {\n                    close();\n                    throw new IllegalStateException(\"Unable to connect to SSH server: \" + e.getMessage());\n                }\n                logger.error(\"Unable to connect to SSH server. Attempt \" + attempts + \" of 6: \" + e.getMessage());\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }", "CodeBleu_score": 38.76481483128518}, {"code": "public void blockUntilConnected(){\n\tint retries = 0;\n        while (!sshClient.isConnected()) {\n            try {\n                sshClient.connect();\n            } catch (IOException e) {\n                if (retries < 6) {\n                    LOGGER.log(Level.WARNING, \"SSH connection failed on attempt \" + (retries + 1) + \" of 6.  Retrying in 1 second.\", e);\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException ie) {\n                        LOGGER.log(Level.WARNING, \"SSH connection failed on attempt \" + (retries + 1) + \" of 6.  Retrying in 1 second.\", ie);\n                    }\n                } else {\n                    LOGGER.log(Level.WARNING, \"SSH connection failed on attempt \" + (retries + 1) + \" of 6.  Giving up.\", e);\n                    close();\n                    throw new IllegalStateException(\"SSH connection failed.\", e);\n                }\n            }\n            retries++;\n        }\n        LOGGER.log(Level.INFO, \"SSH connection successful.\");\n    }", "CodeBleu_score": 33.794317371389994}, {"code": "public void blockUntilConnected(){\n\tint retries = 6;\n        for (int i = 0; i < retries; i++) {\n            try {\n                if (sshClient.isConnected()) {\n                    return;\n                }\n                sshClient.connect();\n                return;\n            } catch (IOException e) {\n                log.error(\"Attempt \" + (i + 1) + \" to connect to SSH tunnel failed. Retrying...\", e);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    throw new IllegalStateException(e1);\n                }\n            }\n        }\n        close();\n        throw new IllegalStateException(\"Failed to connect to SSH tunnel after \" + retries + \" attempts.\");\n    }", "CodeBleu_score": 36.921895818862424}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\ttry {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"Error deleting node from zookeeper: \" + e.getMessage());\n        throw new IllegalStateException(\"Error deleting node from zookeeper: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 57.76869461031896}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\ttry {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"Error deleting node: \" + e.getMessage());\n        throw new IllegalStateException(\"Error deleting node: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 59.34899627759279}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\ttry {\n\t\tzookeeperDomainService.deleteNode(serverId, pathList);\n\t} catch (Exception e) {\n\t\tString msg = \"Error deleting node \" + pathList + \" from Zookeeper instance \" + serverId + \": \" + e.getMessage();\n\t\tlog.error(msg, e);\n\t\tthrow new IllegalStateException(msg, e);\n\t}\n}", "CodeBleu_score": 58.47115891126325}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\tPlatform.runLater(() -> {\n        ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfiguration.getId());\n        treeItemCache.remove(id);\n    });\n}", "CodeBleu_score": 92.2321062355902}, {"code": "public void disconnect(String id){\n\tPlatform.runLater(() -> {\n        ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfiguration.getId());\n        treeItemCache.remove(id);\n    });\n}", "CodeBleu_score": 92.2321062355902}, {"code": "public void disconnect(String id){\n\tPlatform.runLater(() -> {\n        ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfiguration.getId());\n        treeItemCache.remove(id);\n    });\n}", "CodeBleu_score": 92.2321062355902}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\tServer server = getById(serverId);\n    String host = getHost(server);\n    int port = getPort(server);\n    boolean sshTunnelEnabled = getSshTunnelEnabled(server);\n    String connectionUrl = sshTunnelEnabled ? host : orElseThrow(server, () -> \"Unable to determine connection URL\");\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 34.288872857410944}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\tServer server = getById(serverId)\n            .orElseThrow(() -> new IllegalArgumentException(\"Server with ID \" + serverId + \" does not exist\"));\n    String host = getHost(server);\n    int port = getPort(server);\n    boolean sshTunnelEnabled = getSshTunnelEnabled(server);\n    String connectionUrl = sshTunnelEnabled ? \"localhost:\" + port : host + \":\" + port;\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 37.57038315172418}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\tServer server = serverService.getById(serverId).orElseThrow(\n    () -> new ResourceNotFoundException(\"Server not found with id \" + serverId)\n  );\n\n  String url = getUrl(server);\n\n  zookeeperDomainService.startTerminal(serverId, url, stream);\n}", "CodeBleu_score": 32.72638231300699}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\ttry {\n        // Get the Zookeeper server identified by the given ID\n        ZookeeperServer server = getZookeeperServer(id);\n\n        // Execute the given command on the Zookeeper server\n        server.executeCommand(command);\n    } catch (Exception e) {\n        // Log the error with the server ID and command\n        LOG.error(\"Failed to execute command '\" + command + \"' on Zookeeper server '\" + id + \"'\", e);\n\n        // Display an error message indicating that the command execution failed and should be retried\n        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, \"Command Execution Failed\", \"Failed to execute command '\" + command + \"' on Zookeeper server '\" + id + \"'. Please try again.\"));\n    }\n}", "CodeBleu_score": 37.1448888254451}, {"code": "public void executeCommand(String id, String command){\n\ttry {\n        String result = executeCommand(id, command);\n        if (result != null) {\n            System.out.println(result);\n        }\n    } catch (Exception e) {\n        System.out.println(\"Error executing command: \" + command);\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 46.853012254797314}, {"code": "public void executeCommand(String id, String command){\n\ttry {\n        CommandExecutor commandExecutor = new CommandExecutor(id);\n        commandExecutor.execute(command);\n    } catch (Exception e) {\n        log.error(\"Failed to execute command: \" + command + \" on server: \" + id, e);\n        String errorMessage = \"Failed to execute command: \" + command + \" on server: \" + id + \".\n\"\n                + \"Please check the server logs for more details.\n\"\n                + \"Please retry the command execution.\";\n        throw new RuntimeException(errorMessage, e);\n    }\n}", "CodeBleu_score": 41.6037820128521}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\tProperties props = new Properties();\n  String zookeeperPropertiesFile = System.getProperty(\"zookeeper.properties.file\");\n  if (zookeeperPropertiesFile != null) {\n    File f = new File(zookeeperPropertiesFile);\n    if (f.exists()) {\n      try {\n        props.load(new FileInputStream(f));\n        LOG.info(\"Loaded zookeeper.properties from \" + f.getAbsolutePath());\n      } catch (IOException e) {\n        LOG.warn(\"Unable to load zookeeper.properties from \" + f.getAbsolutePath(), e);\n      }\n    } else {\n      LOG.warn(\"Unable to load zookeeper.properties from \" + f.getAbsolutePath() + \" (file does not exist)\");\n    }\n  }\n  return props;\n}", "CodeBleu_score": 39.474148010618315}, {"code": "public Properties loadZookeeperSystemProperties(){\n\tProperties props = new Properties();\n    try {\n        File file = new File(System.getProperty(\"zookeeper.system.properties\"));\n        if (file.exists()) {\n            props.load(new FileInputStream(file));\n            LOG.info(\"Loaded system properties from \" + file.getAbsolutePath());\n        } else {\n            LOG.warn(\"zookeeper.system.properties file \" + file.getAbsolutePath() + \" does not exist.\");\n        }\n    } catch (IOException e) {\n        LOG.warn(\"Error loading system properties from \" + System.getProperty(\"zookeeper.system.properties\") + \": \" + e.getMessage());\n    }\n    return props;\n}", "CodeBleu_score": 41.34171997528039}, {"code": "public Properties loadZookeeperSystemProperties(){\n\tProperties props = new Properties();\n    try {\n        if (zookeeperSystemPropertiesFile.exists()) {\n            props.load(new FileInputStream(zookeeperSystemPropertiesFile));\n            logger.info(\"Loaded zookeeper system properties from \" + zookeeperSystemPropertiesFile);\n        } else {\n            logger.info(\"Zookeeper system properties file \" + zookeeperSystemPropertiesFile + \" does not exist.\");\n        }\n    } catch (IOException e) {\n        logger.error(\"Error loading zookeeper system properties from \" + zookeeperSystemPropertiesFile + \".\");\n        logger.error(e);\n        return new Properties();\n    }\n    return props;\n}", "CodeBleu_score": 40.550812504754624}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\ttry {\n\t\tProperties props = new Properties();\n\t\tprops.load(new StringReader(content));\n\t\tFileOutputStream fos = new FileOutputStream(SYS_PROP_PATH);\n\t\tprops.store(fos, \"Zookeeper system properties\");\n\t\tfos.close();\n\t\tSystem.setProperties(props);\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error saving Zookeeper system properties\", e);\n\t\tshowNotification(\"Error saving Zookeeper system properties\", \"Please check the log for details.\", NotificationType.ERROR_MESSAGE);\n\t}\n}", "CodeBleu_score": 27.034996636303216}, {"code": "public void saveZookeeperSystemProperties(String content){\n\ttry {\n\t\tProperties props = new Properties();\n\t\tprops.load(new StringReader(content));\n\t\tsaveZookeeperSystemProperties(props);\n\t} catch (IOException e) {\n\t\tlog.error(\"Error saving Zookeeper system properties\", e);\n\t\tshowNotification(\"Error saving Zookeeper system properties\", e.getMessage(), NotificationType.ERROR_MESSAGE);\n\t}\n}", "CodeBleu_score": 19.066788187544258}, {"code": "public void saveZookeeperSystemProperties(String content){\n\ttry {\n        Properties props = new Properties();\n        props.load(new StringReader(content));\n        try {\n            FileOutputStream fos = new FileOutputStream(SYS_PROP_PATH);\n            props.store(fos, \"Zookeeper system properties\");\n            fos.close();\n        } catch (IOException e) {\n            log.error(\"Failed to save Zookeeper system properties\", e);\n            Notification notification = new Notification(\"Zookeeper system properties\", \"Failed to save Zookeeper system properties\", \"Failed to save Zookeeper system properties to \" + SYS_PROP_PATH, NotificationType.ERROR_MESSAGE);\n            notification.setPosition(Position.MIDDLE_CENTER);\n            notification.show(Page.getCurrent());\n        }\n    } catch (IOException e) {\n        log.error(\"Failed to load Zookeeper system properties\", e);\n        Notification notification = new Notification(\"Zookeeper system properties\", \"Failed to load Zookeeper system properties\", \"Failed to load Zookeeper system properties from \" + SYS_PROP_PATH, NotificationType.ERROR_MESSAGE);\n        notification.setPosition(Position.MIDDLE_CENTER);\n        notification.show(Page.getCurrent());\n    }\n}", "CodeBleu_score": 40.41772103007818}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\tStringBuilder response = new StringBuilder();\n        BufferedReader in = null;\n        try {\n            in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            String line;\n            while ((line = in.readLine()) != null) {\n                response.append(line);\n            }\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        } finally {\n            cleanup(in);\n            cleanup(client);\n        }\n        return response.toString();\n    }", "CodeBleu_score": 55.170655594679864}, {"code": "private String response(Socket client){\n\tBufferedReader in = null;\n        StringBuilder response = new StringBuilder();\n        try {\n            in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            String line;\n            while ((line = in.readLine()) != null) {\n                response.append(line);\n            }\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Error reading from client\", e);\n        } finally {\n            cleanup(in);\n            cleanup(client);\n        }\n        return response.toString();\n    }", "CodeBleu_score": 50.51631690755589}, {"code": "private String response(Socket client){\n\tBufferedReader in = null;\n    StringBuilder sb = new StringBuilder();\n    try {\n        in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        String line;\n        while ((line = in.readLine()) != null) {\n            sb.append(line);\n        }\n        return sb.toString();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    } finally {\n        cleanup(in);\n    }\n}", "CodeBleu_score": 57.08371940933611}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\tfinal CuratorFramework client = curatorFramework(params);\n    try {\n        client.start();\n        if (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n            throw new TimeoutException(\"Zookeeper connection timed out\");\n        }\n    } catch (Exception e) {\n        client.close();\n        throw new RuntimeException(\"Could not connect to Zookeeper\", e);\n    }\n    return new CuratorZookeeperConnection(client, params);\n}", "CodeBleu_score": 75.74934092953049}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\tCuratorFramework curatorFramework = curatorFramework(params);\n        try {\n            curatorFramework.start();\n            curatorFramework.blockUntilConnected(5, TimeUnit.SECONDS);\n            return new CuratorZookeeperConnection(curatorFramework, params.getUrl());\n        } catch (Exception e) {\n            curatorFramework.close();\n            throw new ZookeeperConnectionException(\"Failed to connect to Zookeeper\", e);\n        }\n    }", "CodeBleu_score": 45.47831949719847}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\tCuratorFramework client = curatorFramework(params);\n    client.start();\n\n    try {\n        client.blockUntilConnected(5, TimeUnit.SECONDS);\n    } catch (InterruptedException e) {\n        client.close();\n        throw new ZookeeperException(\"Zookeeper connection interrupted\", e);\n    }\n\n    if (!client.getZookeeperClient().isConnected()) {\n        client.close();\n        throw new ZookeeperException(\"Zookeeper connection failed\");\n    }\n\n    return new CuratorZookeeperConnection(client, params);\n}", "CodeBleu_score": 71.17793624550262}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\tif (isSync.compareAndSet(false, true)) {\n        String connectionString = getCurrentConnectionString();\n        if (connectionString != null) {\n            log.info(\"Starting synchronization of Zookeeper nodes for connection string: \" + connectionString);\n            CuratorTreeCacheListener listener = new CuratorTreeCacheListener(listeners);\n            treeCache.getListenable().addListener(listener);\n            try {\n                treeCache.start();\n            } catch (Exception e) {\n                log.error(\"Failed to start synchronization of Zookeeper nodes\", e);\n                treeCache.getListenable().removeListener(listener);\n                treeCache.close();\n            }\n        } else {\n            log.info(\"Skipping synchronization of Zookeeper nodes. No connection string available.\");\n        }\n    } else {\n        log.info(\"Skipping synchronization of Zookeeper nodes. Already in progress.\");\n    }\n}", "CodeBleu_score": 48.11776773811787}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\tif (isSync.compareAndSet(false, true)) {\n        String connectionString = getCurrentConnectionString();\n        log.info(\"Starting synchronization with Zookeeper: {}\", connectionString);\n        try {\n            treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n            treeCache.start();\n        } catch (Exception e) {\n            log.error(\"Error while synchronizing with Zookeeper: {}\", connectionString, e);\n            close();\n        }\n    } else {\n        log.info(\"Synchronization with Zookeeper already in progress: {}\", getCurrentConnectionString());\n    }\n}", "CodeBleu_score": 42.30736387977178}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\tString connectionString = getZookeeperClient().getCurrentConnectionString();\n    if (isSync.compareAndSet(false, true)) {\n        logger.info(\"Starting sync for {}\", connectionString);\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        try {\n            treeCache.start();\n            logger.info(\"Sync complete for {}\", connectionString);\n        } catch (Exception e) {\n            logger.error(\"Error syncing for {}\", connectionString, e);\n            close();\n        }\n    } else {\n        logger.info(\"Sync already in progress for {}\", connectionString);\n    }\n}", "CodeBleu_score": 52.50237138289447}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t// Create a PathChildrenCache for the given path\n    PathChildrenCache cache = new PathChildrenCache(zk, path, true);\n\n    // Start the cache in BUILD_INITIAL_CACHE mode\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n\n    // Add a listener to the cache to handle child node events\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 61.04884588741876}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\tPathChildrenCache cache = new PathChildrenCache(client, path, true);\n    cache.getListenable().addListener(listener);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCacheMap.put(path, cache);\n}", "CodeBleu_score": 72.99321364467194}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\tif (path == null || listener == null) {\n        throw new Exception(\"Invalid arguments for watchPathChildrenNode\");\n    }\n    PathChildrenCache childrenCache = new PathChildrenCache(zkClient, path, true);\n    childrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    childrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 63.181511052513926}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\tLOGGER.info(\"Unregistering service...\");\n\ttry {\n\t\tfor (String path : paths) {\n\t\t\tdeletePath(path);\n\t\t}\n\t\tclose();\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Error unregistering service: \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 43.5527803627157}, {"code": "public void unregisterService(){\n\tlog.info(\"Unregistering services\");\n    try {\n        for (String path : servicePaths) {\n            client.delete().forPath(path);\n        }\n    } catch (Exception e) {\n        log.error(\"Error unregistering services: \" + e.getMessage());\n    } finally {\n        close();\n    }\n}", "CodeBleu_score": 54.65102684602405}, {"code": "public void unregisterService(){\n\ttry {\n        logger.info(\"Unregistering service\");\n        for (String path : paths) {\n            try {\n                curator.delete().forPath(path);\n            } catch (Exception e) {\n                logger.error(\"Error deleting path: \" + path + \" \" + e.getMessage());\n            }\n        }\n    } catch (Exception e) {\n        logger.error(\"Error unregistering service: \" + e.getMessage());\n    } finally {\n        try {\n            curator.close();\n        } catch (Exception e) {\n            logger.error(\"Error closing Curator client: \" + e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 55.06852223499878}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\tCompletableFuture<ZkClient> future = new CompletableFuture<>();\n        future.whenComplete(this::makeClientReady);\n        client.subscribeStateChanges(listener);\n    }", "CodeBleu_score": 27.949033923498806}, {"code": "public void addListener(IZkStateListener listener){\n\tif (client != null) {\n            client.subscribeStateChanges(listener);\n        } else {\n            CompletableFuture.runAsync(this::makeClientReady, executor);\n        }\n    }", "CodeBleu_score": 31.25608241443633}, {"code": "public void addListener(IZkStateListener listener){\n\tCompletableFuture<Void> future = new CompletableFuture<>();\n        try {\n            future.thenAccept(this::makeClientReady);\n        } catch (Exception e) {\n            logger.error(\"Got an exception when trying to create zkclient instance, can not connect to zookeeper server, please check!\", e);\n        }\n        future.complete(null);\n        this.client.subscribeStateChanges(listener);\n    }", "CodeBleu_score": 22.63991942406417}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\tthis.client = CuratorFrameworkFactory.builder()\n            .connectString(serverAddr)\n            .authority(authority)\n            .retryPolicy(new RetryOneTime(1))\n            .connectionTimeoutMs(1000)\n            .build();\n\n    this.client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState state) {\n            if (state == ConnectionState.LOST) {\n                CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);\n            } else if (state == ConnectionState.CONNECTED) {\n                CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);\n            } else if (state == ConnectionState.RECONNECTED) {\n                CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);\n            }\n        }\n    });\n\n    try {\n        this.client.start();\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Unable to start Curator client\", e);\n    }\n}", "CodeBleu_score": 66.90341565755524}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\tthis.serverAddr = serverAddr;\n    this.authority = authority;\n    this.client = CuratorFrameworkFactory.builder()\n            .connectString(serverAddr)\n            .retryPolicy(new RetryOneTime(0))\n            .connectionTimeoutMs(CONNECTION_TIMEOUT_MS)\n            .authorization(authority)\n            .build();\n    this.client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState state) {\n            if (state == ConnectionState.LOST) {\n                CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);\n            } else if (state == ConnectionState.CONNECTED) {\n                CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);\n            } else if (state == ConnectionState.RECONNECTED) {\n                CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);\n            }\n        }\n    });\n    try {\n        this.client.start();\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Unable to start Curator client\", e);\n    }\n}", "CodeBleu_score": 69.7568559722378}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\tthis(serverAddr, authority, new ExponentialBackoffRetry(1000, 3));\n}", "CodeBleu_score": 3.6881789001515566}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\tif (listener == null) {\n        throw new NullPointerException(\"listener must not be null\");\n    }\n    if (path == null) {\n        throw new NullPointerException(\"path must not be null\");\n    }\n    Map<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners != null) {\n        listeners.remove(listener);\n        if (listeners.isEmpty()) {\n            childListeners.remove(path);\n            removeTargetChildListener(path, createTargetChildListener(path));\n        }\n    }\n}", "CodeBleu_score": 54.02326253386225}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\tif (listener == null) {\n        throw new NullPointerException(\"listener is null\");\n    }\n    if (path == null) {\n        throw new NullPointerException(\"path is null\");\n    }\n    if (path.length() == 0) {\n        throw new IllegalArgumentException(\"path is empty\");\n    }\n    ReentrantLock lock = this.lock.writeLock();\n    lock.lock();\n    try {\n        Map<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n        if (listeners != null) {\n            TargetChildListener targetListener = listeners.remove(listener);\n            if (targetListener != null) {\n                removeTargetChildListener(path, targetListener);\n            }\n            if (listeners.isEmpty()) {\n                childListeners.remove(path);\n            }\n        }\n    } finally {\n        lock.unlock();\n    }\n}", "CodeBleu_score": 73.12825002389508}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\tif (listener == null) {\n        return;\n    }\n    if (path == null) {\n        throw new NullPointerException(\"Path must not be null\");\n    }\n    if (path.length() == 0) {\n        throw new IllegalArgumentException(\"Path must not be empty\");\n    }\n    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners != null) {\n        TargetChildListener targetListener = listeners.remove(listener);\n        if (targetListener != null) {\n            removeTargetChildListener(path, targetListener);\n        }\n    }\n}", "CodeBleu_score": 85.4441708756837}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\tint ret = QCONF_ERR_OTHER;\n    char idc_host_str[QCONF_HOST_STR_LENGTH] = {0};\n    char *idc_host_ptr = NULL;\n    char *host_ptr = NULL;\n    char *port_ptr = NULL;\n    char *endptr = NULL;\n    char *idc_ptr = NULL;\n    char *host_ptr_tmp = NULL;\n    char *port_ptr_tmp = NULL;\n    char *idc_ptr_tmp = NULL;\n    char *idc_host_ptr_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *idc_host_ptr_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp", "CodeBleu_score": 12.232127830192109}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\tif (!zh) {\n        LOG_ERR(\"ZooKeeper handle is null\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // get the host and IDC information\n    string host;\n    string idc;\n    int ret = deserialize_from_idc_host(zh, host, idc);\n    if (ret != QCONF_OK) {\n        LOG_ERR(\"Deserialize IDC and host information failed\");\n        return ret;\n    }\n\n    // close the old handle\n    zookeeper_close(zh);\n\n    // deserialize the IDC and host information and initialize a new ZooKeeper handle\n    zhandle_t *new_zh = NULL;\n    ret = zookeeper_init(host.c_str(), NULL, 10000, &new_zh);\n    if (ret != ZOK) {\n        LOG_ERR(\"Initialize a new ZooKeeper handle failed\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // initialize the environment for the new handle\n    ret = init_env_for_zk(new_zh, idc);\n    if (ret != QCONF_OK) {\n        LOG_ERR(\"Initialize the environment for the new ZooKeeper handle failed\");\n        return ret;\n    }\n\n    // reset the table watcher\n    ret = zoo_wget_children(new_zh, \"/qconf/table\", watcher_table_children_fn, NULL);\n    if (ret != ZOK) {\n        LOG_ERR(\"Reset the table watcher failed\");\n        return QCONF_ERR_OTHER;\n    }\n\n    return QCONF_OK;\n}", "CodeBleu_score": 43.99796926805015}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\tint ret = QCONF_ERR_OTHER;\n    if (zh == NULL) {\n        QCONF_LOG_ERROR(QCONF_LOG_ERR, \"ZooKeeper handle is null\");\n        return QCONF_ERR_OTHER;\n    }\n    // get and delete idc host info\n    string idc_host_info;\n    if (lock_ht_find(idc_host_info_ht, idc_host_info_ht_mu, zh, idc_host_info) != QCONF_OK) {\n        QCONF_LOG_ERROR(QCONF_LOG_ERR, \"Failed to get IDC host info for ZooKeeper handle\");\n        return QCONF_ERR_OTHER;\n    }\n    lock_ht_delete(idc_host_info_ht, idc_host_info_ht_mu, zh);\n\n    // close old handle\n    zookeeper_close(zh);\n\n    // deserialize idc host info and init new handle\n    string idc, host;\n    if (deserialize_from_idc_host(idc_host_info, idc, host) != QCONF_OK) {\n        QCONF_LOG_ERROR(QCONF_LOG_ERR, \"Failed to deserialize IDC host info\");\n        return QCONF_ERR_OTHER;\n    }\n    zh = zookeeper_init(host.c_str(), watcher_global_watcher, 10000, 0, 0, 0);\n    if (zh == NULL) {\n        QCONF_LOG_ERROR(QCONF_LOG_ERR, \"Failed to init ZooKeeper handle\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // init env and reset table watcher\n    if (init_env_for_zk(zh, idc) != QCONF_OK) {\n        QCONF_LOG_ERROR(QCONF_LOG_ERR, \"Failed to init environment for ZooKeeper handle\");\n        return QCONF_ERR_OTHER;\n    }\n    if (reset_table_", "CodeBleu_score": 47.01327006521354}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\tif (zh == NULL) {\n        LOG_FATAL_ERR(\"Zookeeper handle is NULL\");\n        return;\n    }\n\n    if (zh->state != ZOO_CONNECTED_STATE) {\n        return;\n    }\n\n    lock_ht_update(zk_handle_ht, mu_zk_handle_ht, zh, idc_host);\n    lock_ht_update(zk_idc_host_ht, mu_zk_idc_host_ht, idc, idc_host);\n\n    if (zk_register_ephemeral(zh, watch_notify_node, idc) != ZOK) {\n        add_gray_idc(idc);\n        LOG_INFO(\"Zookeeper handle for IDC %s is not connected\", idc.c_str());\n    }\n}", "CodeBleu_score": 43.155632586596596}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\tif (zh == NULL) {\n        LOG_FATAL_ERR(\"init_env_for_zk: zh is NULL\");\n        return;\n    }\n    if (zh->state != ZOO_CONNECTED_STATE) {\n        LOG_INFO(\"init_env_for_zk: zh is not connected\");\n        return;\n    }\n    lock_ht_update(zk_map, mu, reinterpret_cast<unsigned long>(zh), idc_host);\n    add_gray_idc(idc);\n    if (zk_register_ephemeral(zh, notify_node, notify_node, NULL, 0) != ZOK) {\n        LOG_INFO(\"init_env_for_zk: failed to set watcher for notify node\");\n        return;\n    }\n    LOG_INFO(\"init_env_for_zk: init env for zk %p, idc %s, idc_host %s\", zh, idc.c_str(), idc_host.c_str());\n}", "CodeBleu_score": 48.562335773940305}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t// 1. update ht_zk_handle_info\n    lock_ht_update(ht_zk_handle_info, mu_zk_handle_info, zh, idc_host);\n\n    // 2. check connection state\n    if (zoo_state(zh) != ZOO_CONNECTED_STATE) {\n        LOG_INFO(\"zookeeper handle %p is not connected\", zh);\n        return;\n    }\n\n    // 3. register current host\n    if (!register_current_host(zh, idc)) {\n        LOG_FATAL_ERR(\"failed to register current host on zookeeper server %s\", idc_host.c_str());\n        return;\n    }\n\n    // 4. set watcher on notify node\n    if (zoo_wexists(zh, ZK_NOTIFY_NODE, watch_notify_node, reinterpret_cast<void*>(zh)) != ZOK) {\n        LOG_FATAL_ERR(\"failed to set watcher on zookeeper node %s\", ZK_NOTIFY_NODE);\n        return;\n    }\n\n    // 5. add idc to gray list if necessary\n    if (zoo_state(zh) != ZOO_CONNECTED_STATE) {\n        lock_ht_update(ht_zk_gray_idc, mu_zk_gray_idc, idc, 1);\n    }\n}", "CodeBleu_score": 53.0546023617401}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\tcred_hash = base64.b64encode(hashlib.sha1(f\"{username}:{password}\".encode()).digest())\n    return f\"{username}:{cred_hash.decode().strip()}\"\n\n", "CodeBleu_score": 18.648989025091424}, {"code": "def make_digest_acl_credential(username, password)\n\tcred_hash = hashlib.sha1(username.encode('utf-8') + b':' + password.encode('utf-8')).digest()\n    return username + ':' + base64.b64encode(cred_hash).decode('utf-8').strip()\n\n", "CodeBleu_score": 34.07567366787955}, {"code": "def make_digest_acl_credential(username, password)\n\tcred_hash = hashlib.sha1(username.encode('utf-8') + b\":\" + password.encode('utf-8')).digest()\n    return username + \":\" + base64.b64encode(cred_hash).decode('utf-8').strip()\n\n", "CodeBleu_score": 41.19304605357994}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\tif not self._processing_element:\n        return False\n\n    lock_path = self._processing_element.lock_path\n    try:\n        self._client.sync(lock_path)\n        lock_value, _ = self._client.get(lock_path)\n        return lock_value == self._instance_id\n    except NoNodeError:\n        return False\n\n", "CodeBleu_score": 40.33924550428004}, {"code": "def holds_lock(self)\n\tif self.process_element is None:\n        return False\n    lock_path = self.process_element.get_lock_path()\n    if lock_path is None:\n        return False\n    self.zookeeper_client.sync(lock_path)\n    data, _ = self.zookeeper_client.get(lock_path)\n    return data.decode() == self.instance_id", "CodeBleu_score": 42.42762454169845}, {"code": "def holds_lock(self)\n\tif self.processing_element is None:\n        return False\n\n    lock_path = self.processing_element.lock_path\n    if lock_path is None:\n        return False\n\n    try:\n        lock_value = self.zk.get(lock_path)[0]\n        return lock_value == self.instance_id\n    except Exception as e:\n        logger.error(\"Exception while checking lock: {}\".format(e))\n        return False\n\n", "CodeBleu_score": 42.639118238214756}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\tif self.processing_element is None:\n        return False\n    lock_id, entry = self.processing_element\n    lock_path = \"{path}/{id}\".format(path=self._lock_path, id=lock_id)\n    entry_path = \"{path}/{id}\".format(path=self._entry_path, id=entry)\n    try:\n        self.client.transaction(\n            lambda txn: txn.delete(lock_path) and txn.delete(entry_path)\n        )\n    except Exception:\n        return False\n    self.processing_element = None\n    return True\n\n", "CodeBleu_score": 54.24795279812176}, {"code": "def consume(self)\n\tif self.processing_element is None:\n        return False\n    lock_id, lock_path = self.processing_element\n    self.client.sync(lock_path)\n    try:\n        self.client.transaction(\n            self.client.delete,\n            lock_path,\n            self.client.delete,\n            self._path,\n            self.client.delete,\n            self._lock_path,\n        )\n        self.processing_element = None\n        return True\n    except NoNodeError:\n        return False\n\n", "CodeBleu_score": 47.412526108685086}, {"code": "def consume(self)\n\tif self.processing_element is None:\n        return False\n    lock_id, lock_path = self.processing_element\n    self.client.sync(lock_path)\n    value, stat = self.client.retry(self.client.get, lock_path)\n    if value != self.id:\n        return False\n    self.client.retry(self.client.delete, lock_path)\n    self.client.retry(self.client.delete, self.path)\n    self.processing_element = None\n    return True\n\n", "CodeBleu_score": 43.25497583844592}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\ttry:\n        header, buffer, offset = self._read_header(read_timeout)\n    except Exception as exc:\n        self.logger.exception(\"Exception raised during read_header\")\n        raise\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping response\")\n        self.client._outstanding_ping = False\n    elif header.xid == AUTH_XID:\n        self._read_auth(header, buffer, offset)\n    elif header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n    else:\n        self.logger.log(BLATHER, \"Received response: %r\", header)\n        self._read_response(header, buffer, offset)\n\n", "CodeBleu_score": 50.79786272683423}, {"code": "def _read_socket(self, read_timeout)\n\tself.logger.log(BLATHER, \"Reading socket\")\n    try:\n        header, buffer, offset = self._read_header(read_timeout)\n    except socket.timeout:\n        return\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping\")\n        self.clear_outstanding_ping()\n        return\n    elif header.xid == AUTH_XID:\n        self.logger.log(BLATHER, \"Received auth response\")\n        self._read_auth_response(header, buffer, offset)\n        return\n    elif header.xid == WATCH_XID:\n        self.logger.log(BLATHER, \"Received watch event\")\n        self._read_watch_event(buffer, offset)\n        return\n    else:\n        self.logger.log(BLATHER, \"Received response\")\n        self._read_response(header, buffer, offset)\n        return\n\n", "CodeBleu_score": 57.105236429847906}, {"code": "def _read_socket(self, read_timeout)\n\ttry:\n        header, buffer, offset = self._read_header(read_timeout)\n    except Exception as exc:\n        self.logger.exception(\"Error reading header\")\n        if isinstance(exc, socket.timeout):\n            return\n        raise\n\n    # Handle ping responses\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping response\")\n        self._outstanding_ping = False\n        return\n\n    # Handle auth responses\n    if header.xid == AUTH_XID:\n        self.logger.log(BLATHER, \"Received auth response\")\n        if header.err:\n            exc = EXCEPTIONS[header.err]()\n            self.logger.exception(\"Authentication failed: %r\", exc)\n            self._auth_failed.set()\n            self.close()\n            return\n\n        self.logger.log(BLATHER, \"Authentication successful\")\n        self._auth_failed.set()\n        return\n\n    # Handle watch events\n    if header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n        return\n\n    # Handle all other requests\n    self._read_response(header, buffer, offset)\n\n", "CodeBleu_score": 50.986246677750934}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\tself.log.info(\"Starting Zookeeper loop\")\n    self.connection_stopped.clear()\n    self.retry.reset()\n    while not self.connection_stopped.is_set():\n        try:\n            self.log.info(\"Connecting to Zookeeper\")\n            self.client.start()\n            self.client.add_listener(self.session_callback)\n            self.client.wait_until_connected()\n            self.log.info(\"Connected to Zookeeper\")\n            self.connection_stopped.set()\n            self.session_callback(self.client, KeeperState.CLOSED)\n            self.log.info(\"Stopping Zookeeper loop\")\n            return\n        except Exception as e:\n            self.log.warning(\"Failed to connect to Zookeeper: %s\", e)\n            self.connection_stopped.wait(self.retry.next_delay())\n    self.log.info(\"Stopping Zookeeper loop\")\n\n", "CodeBleu_score": 45.56396445041126}, {"code": "def zk_loop(self)\n\tself.log.info(\"Starting Zookeeper loop\")\n    self.connection_stopped.clear()\n    while not self.stopped.is_set():\n        try:\n            self.retry.call_with_retry(self.connect)\n            break\n        except Exception as e:\n            self.log.warning(\"Failed to connect to Zookeeper: %s\", e)\n    self.connection_stopped.set()\n    self.log.info(\"Stopping Zookeeper loop\")\n\n", "CodeBleu_score": 36.75632484140035}, {"code": "def zk_loop(self)\n\tself.log.info(\"Starting Zookeeper loop\")\n    self.connection_stopped.clear()\n    while not self.stopped.is_set():\n        if self.connect(self.retry):\n            self.log.info(\"Zookeeper connection established\")\n            self.session_callback(self.zk, self.zk.CONNECTED_STATE)\n            self.connection_stopped.wait()\n            self.log.info(\"Zookeeper connection closed\")\n        else:\n            self.log.warning(\"Failed to connect to Zookeeper\")\n            self.session_callback(self.zk, self.zk.CONNECTED_STATE)\n            self.connection_stopped.wait()\n            self.log.info(\"Zookeeper connection closed\")\n\n", "CodeBleu_score": 42.24636082916936}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\tmembers = sorted(members)\n    partitions = sorted(partitions)\n    partition_index = members.index(identifier)\n    return partitions[partition_index::len(members)]", "CodeBleu_score": 37.54884099336152}, {"code": "def _partitioner(self, identifier, members, partitions)\n\tsorted_members = sorted(members)\n    sorted_partitions = sorted(partitions)\n    try:\n        index = sorted_members.index(identifier)\n    except ValueError:\n        raise ValueError(f\"{identifier} is not in the list of members.\")\n    return [sorted_partitions[i] for i in range(index, len(sorted_partitions), len(sorted_members))]", "CodeBleu_score": 44.5253193055278}, {"code": "def _partitioner(self, identifier, members, partitions)\n\tmembers = sorted(members)\n    partitions = sorted(partitions)\n    index = members.index(identifier)\n    return [partitions[i] for i in range(index, len(partitions), len(members))]", "CodeBleu_score": 37.55259129196625}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\tself._best_effort_cleanup()\n    self.participating = False", "CodeBleu_score": 19.01796510638808}, {"code": "def leave(self)\n\tif not self.participating:\n        raise BarrierError('Node is not participating in the barrier')\n\n    try:\n        self.client.retry(self.client.delete, self.create_path)\n    except NoNodeError:\n        pass\n\n    self.participating = False\n\n", "CodeBleu_score": 40.58134047388233}, {"code": "def leave(self)\n\tself._best_effort_cleanup()\n    self._participating = False\n\n", "CodeBleu_score": 13.006324368384186}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\tResult result = new Result();\n\ttry {\n\t\tif (statusServer.isRunning()) {\n\t\t\tresult.setSuccess(true);\n\t\t\tresult.setMessage(\"The server is already running.\");\n\t\t} else {\n\t\t\tstatusServer.start();\n\t\t\tresult.setSuccess(true);\n\t\t\tresult.setMessage(\"The server has been started.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(e.getMessage());\n\t}\n\treturn result;\n}", "CodeBleu_score": 31.488921439123345}, {"code": "public Result start(){\n\tResult result = new Result();\n\tif (statusServer.equals(\"running\")) {\n\t\tresult.setMessage(\"The server is already running.\");\n\t} else {\n\t\ttry {\n\t\t\tstartServer();\n\t\t\tresult.setMessage(\"The server started successfully.\");\n\t\t} catch (Exception e) {\n\t\t\tresult.setMessage(e.getMessage());\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 32.339283574016406}, {"code": "public Result start(){\n\tif (isRunning()) {\n    return Result.successResult(\"The server is already running.\");\n  }\n  try {\n    server.start();\n    return Result.successResult(\"The server has started.\");\n  } catch (Exception e) {\n    return Result.errorResult(e.getMessage());\n  }\n}", "CodeBleu_score": 31.85010913285233}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\tif (statusServer.isRunning()) {\n    stopServer();\n    return Result.success(\"Server stopped successfully\");\n  }\n  return Result.failure(\"Server is not running\");\n}", "CodeBleu_score": 18.74971220882046}, {"code": "public Result stop(){\n\ttry {\n        if (server.isRunning()) {\n            server.stop();\n            return new Result(Result.OK, \"FTP server stopped successfully.\");\n        } else {\n            return new Result(Result.ERROR, \"FTP server is not running.\");\n        }\n    } catch (Exception e) {\n        log.error(\"Error stopping FTP server.\", e);\n        return new Result(Result.ERROR, \"Error stopping FTP server.\");\n    }\n}", "CodeBleu_score": 34.75881718316681}, {"code": "public Result stop(){\n\tif (server == null) {\n\t\treturn Result.error(\"The server is not running\");\n\t}\n\n\ttry {\n\t\tserver.stop();\n\t\treturn Result.success(\"The server has been stopped\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn Result.error(\"The server could not be stopped\");\n\t}\n}", "CodeBleu_score": 29.836503796947255}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\tList<Authority> authorities = getAuthorities();\n\n\t\t// check for no authorities at all\n\t\tif (authorities == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tboolean someoneCouldAuthorize = false;\n\t\tfor (Authority authority : authorities) {\n\t\t\tif (authority.canAuthorize(request)) {\n\t\t\t\tsomeoneCouldAuthorize = true;\n\n\t\t\t\trequest = authority.authorize(request);\n\n\t\t\t\t// authorization failed, return null\n\t\t\t\tif (request == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (someoneCouldAuthorize) {\n\t\t\treturn request;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 79.04373091584561}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\tList<Authority> authorities = getAuthorities();\n\n\t\t// check for no authorities at all\n\t\tif (authorities == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tboolean someoneCouldAuthorize = false;\n\t\tfor (Authority authority : authorities) {\n\t\t\tif (authority.canAuthorize(request)) {\n\t\t\t\tsomeoneCouldAuthorize = true;\n\n\t\t\t\trequest = authority.authorize(request);\n\n\t\t\t\t// authorization failed, return null\n\t\t\t\tif (request == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (someoneCouldAuthorize) {\n\t\t\treturn request;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 79.04373091584561}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\tList<Authority> authorities = getAuthorities();\n\n\t\t// check for no authorities at all\n\t\tif (authorities == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tboolean someoneCouldAuthorize = false;\n\t\tfor (Authority authority : authorities) {\n\t\t\tif (authority.canAuthorize(request)) {\n\t\t\t\tsomeoneCouldAuthorize = true;\n\n\t\t\t\trequest = authority.authorize(request);\n\n\t\t\t\t// authorization failed, return null\n\t\t\t\tif (request == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (someoneCouldAuthorize) {\n\t\t\treturn request;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 79.04373091584561}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\tFileSystem fs = getDfs();\n    try {\n        fs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 69.04006778252581}, {"code": "public boolean mkdir(){\n\tFileSystem fs = getDfs();\n  try {\n    return fs.mkdirs(fullPath);\n  } catch (IOException e) {\n    printStackTrace(e);\n    return false;\n  }\n}", "CodeBleu_score": 53.07678508297955}, {"code": "public boolean mkdir(){\n\ttry {\n        FileSystem fs = getDfs();\n        fs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 70.58845468132749}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\ttry {\n\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\tdfs.delete(fullPath, true);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 96.17758097021823}, {"code": "public boolean delete(){\n\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tdfs.delete(fullPath, true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 95.2710922600356}, {"code": "public boolean delete(){\n\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tdfs.delete(fullPath, true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 95.2710922600356}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\ttry {\n\t\t\tFileSystem fs = FileSystem.get(conf);\n\t\t\tfs.rename(new Path(ftpFile.getPath()), new Path(ftpFile.getParent() + \"/\" + ftpFile.getName()));\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 66.88709983955752}, {"code": "public boolean move(FtpFile ftpFile){\n\ttry {\n\t\t\tFileSystem fs = FileSystem.get(conf);\n\t\t\tfs.rename(path, new Path(ftpFile.getParent() + \"/\" + ftpFile.getName()));\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 66.94397970465945}, {"code": "public boolean move(FtpFile ftpFile){\n\ttry {\n\t\t\t\tFileSystem fs = FileSystem.get(conf);\n\t\t\t\tfs.rename(new Path(ftpFile.getPath()), new Path(ftpFile.getParent() + \"/\" + ftpFile.getName()));\n\t\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn false;\n\t\t}\n}", "CodeBleu_score": 66.65789932929256}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\tList<FtpFile> files = null;\n\n\t\ttry {\n\t\t\tFileSystem fs = getFileSystem();\n\t\t\tFileStatus[] status = fs.listStatus(path);\n\n\t\t\tfiles = new ArrayList<FtpFile>();\n\t\t\tfor (FileStatus file : status) {\n\t\t\t\tfiles.add(new FtpFile(file, this));\n\t\t\t}\n\t\t\tfiles = Collections.unmodifiableList(files);\n\t\t} catch (IOException ex) {\n\t\t\tlog.error(\"listFiles\", ex);\n\t\t}\n\n\t\treturn files;\n\t}", "CodeBleu_score": 19.781101116519352}, {"code": "public List<FtpFile> listFiles(){\n\t// get the HDFS file system instance\n\t\tFileSystem fs = getFs();\n\t\tif (fs == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// get the status of files in the directory\n\t\tFileStatus[] fileStatus = null;\n\t\ttry {\n\t\t\tfileStatus = fs.listStatus(path);\n\t\t} catch (IOException e) {\n\t\t\tLOG.error(\"listFiles: \", e);\n\t\t\treturn null;\n\t\t}\n\n\t\t// construct virtual file names based on the base directory's virtual path\n\t\tList<FtpFile> files = new ArrayList<FtpFile>();\n\t\tfor (FileStatus status : fileStatus) {\n\t\t\tString name = status.getPath().getName();\n\t\t\tif (name.equals(\".\") || name.equals(\"..\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tFtpFile file = new FtpFile(this, name, status.getLen(), status.getModificationTime());\n\t\t\tfiles.add(file);\n\t\t}\n\n\t\treturn Collections.unmodifiableList(files);\n\t}", "CodeBleu_score": 32.37185454339413}, {"code": "public List<FtpFile> listFiles(){\n\tList<FtpFile> files = null;\n\n\t\ttry {\n\t\t\tFileStatus[] statuses = fs.listStatus(path);\n\t\t\tfiles = new ArrayList<FtpFile>();\n\t\t\tfor (FileStatus status : statuses) {\n\t\t\t\tfiles.add(new FtpFile(status));\n\t\t\t}\n\t\t\tfiles = Collections.unmodifiableList(files);\n\t\t} catch (IOException e) {\n\t\t\tLOG.error(\"Error listing files\", e);\n\t\t}\n\n\t\treturn files;\n\t}", "CodeBleu_score": 19.681516791124768}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\tif (isConfigured()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetConfigured(true);\n\n\t\tuserDataProp = new Properties();\n\n\t\tif (userDataFile.exists()) {\n\t\t\ttry {\n\t\t\t\tloadUserData();\n\t\t\t} catch (FtpException e) {\n\t\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\t\"Failed to load user data from file: \" + userDataFile, e);\n\t\t\t}\n\t\t}\n\n\t\tconvertDeprecatedPropertyNames();\n\t}", "CodeBleu_score": 25.872967249891264}, {"code": "public void configure(){\n\tsetConfigurationState(true);\n\t\tuserDataProp = new Properties();\n\n\t\ttry {\n\t\t\tif (getAbsolutePath().exists()) {\n\t\t\t\tload();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\"Failed to load user data from file: \" + getAbsolutePath(), e);\n\t\t}\n\n\t\tconvertDeprecatedPropertyNames();\n\t}", "CodeBleu_score": 26.17714965265922}, {"code": "public void configure(){\n\tif (isConfigured()) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tuserDataProp = new Properties();\n\n\t\t\tif (userDataFile.exists()) {\n\t\t\t\tload();\n\t\t\t}\n\n\t\t\tconvertDeprecatedPropertyNames();\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\"Failed to load user data file: \" + userDataFile, e);\n\t\t}\n\n\t\tsetConfigured(true);\n\t}", "CodeBleu_score": 28.080357115459098}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\ttry {\n\t\tFile userDataFile = getAbsoluteFile(user.getHomeDirectory(), user.getDataConnectionConfiguration().getFile());\n\t\tFile userDataDirectory = userDataFile.getParentFile();\n\t\tif (!userDataDirectory.exists()) {\n\t\t\tif (!userDataDirectory.mkdirs()) {\n\t\t\t\tthrow new ConfigurationException(\"Unable to create user data directory: \" + userDataDirectory.getAbsolutePath());\n\t\t\t}\n\t\t}\n\t\tFileOutputStream fos = new FileOutputStream(userDataFile);\n\t\ttry {\n\t\t\tfos.write(user.getDataConnectionConfiguration().getData());\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\tfos.close();\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tlog.error(\"Unable to close file output stream\", e);\n\t\t\t\tthrow new FtpException(\"Unable to close file output stream\", e);\n\t\t\t}\n\t\t}\n\t}\n\tcatch (IOException e) {\n\t\tlog.error(\"Unable to store user data\", e);\n\t\tthrow new FtpException(\"Unable to store user data\", e);\n\t}\n}", "CodeBleu_score": 44.782155487004374}, {"code": "private void saveUserData() throws FtpException{\n\tFile userDataFile = getAbsoluteFile(user.getUserDataFile());\n\tFile parentDir = userDataFile.getParentFile();\n\tif (!parentDir.exists()) {\n\t\tif (!parentDir.mkdirs()) {\n\t\t\tthrow new FtpException(\"Failed to create directory: \" + parentDir.getAbsolutePath());\n\t\t}\n\t}\n\ttry {\n\t\tFileOutputStream fos = new FileOutputStream(userDataFile);\n\t\tstore(userDataFile, fos);\n\t\tfos.close();\n\t} catch (IOException e) {\n\t\terror(\"Failed to write user data file: \" + userDataFile.getAbsolutePath(), e);\n\t\tthrow new FtpException(\"Failed to write user data file: \" + userDataFile.getAbsolutePath());\n\t}\n}", "CodeBleu_score": 43.63627652445864}, {"code": "private void saveUserData() throws FtpException{\n\tFile parent = getAbsolutePath().getParentFile();\n\tif (parent != null && !parent.exists()) {\n\t\tif (!parent.mkdirs()) {\n\t\t\tthrow new FtpException(\"Failed to create directory \" + parent.getAbsolutePath());\n\t\t}\n\t}\n\tFileOutputStream fos = null;\n\ttry {\n\t\tfos = new FileOutputStream(getAbsolutePath());\n\t\tstore(fos);\n\t} catch (IOException e) {\n\t\terror(\"Failed to write user data to \" + getAbsolutePath().getAbsolutePath(), e);\n\t\tthrow new FtpException(\"Failed to write user data to \" + getAbsolutePath().getAbsolutePath());\n\t} finally {\n\t\tif (fos != null) {\n\t\t\ttry {\n\t\t\t\tfos.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\terror(\"Failed to close FileOutputStream for \" + getAbsolutePath().getAbsolutePath(), e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.26027181774512}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\ttry {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    }catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 84.58771483281748}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\ttry {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    }catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 84.58771483281748}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\ttry {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    }catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 84.58771483281748}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\tdebug(\"opening file for reading: \" + path + \" with buffer size: \" + bufferSize);\n        Path qualifiedPath = qualify(path);\n        try {\n            return new FSDataInputStream(new BufferedInputStream(new SeaweedReadable(store.getInputStream(qualifiedPath.toUri().getPath()), bufferSize)));\n        } catch (Exception e) {\n            warn(\"failed to open file for reading: \" + qualifiedPath + \" with buffer size: \" + bufferSize, e);\n            return null;\n        }\n    }", "CodeBleu_score": 32.23443759618203}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\tlog.debug(\"open path={} bufferSize={}\", path, bufferSize);\n    Path qualifiedPath = qualify(path);\n    try {\n        SeaweedReadableFile file = fileStore.openFileForRead(qualifiedPath.toUri().getPath(), bufferSize);\n        return new FSDataInputStream(new BufferedInputStream(new SeaweedInputStream(file)));\n    } catch (IOException e) {\n        log.warn(\"open file {} bufferSize {} failed\", path, bufferSize, e);\n        return null;\n    }\n}", "CodeBleu_score": 50.15314630992358}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\tdebug(\"open path: \" + path + \" bufferSize: \" + bufferSize);\n    Path qualified = qualify(path);\n    try {\n        return new FSDataInputStream(new BufferedInputStream(new FileInputStream(new File(qualified.toUri().getPath())), bufferSize));\n    } catch (FileNotFoundException e) {\n        warn(\"open: \" + qualified + \" \" + e);\n        return null;\n    }\n}", "CodeBleu_score": 28.06743051075429}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\tLOG.debug(\"rename path: {} => {}\", src, dst);\n    if (src.isRoot()) {\n        return false;\n    }\n    if (src.equals(dst)) {\n        return true;\n    }\n    FilerProto.Entry entry = lookupEntry(dst);\n    Path adjustedDst = dst;\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n    rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 82.69934235754319}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\tLOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n    FilerProto.Entry entry = lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 82.69934235754319}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\tLOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n    FilerProto.Entry entry = lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 82.69934235754319}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\tif (capability.toLowerCase().equals(\"hsync\")) {\n\t\treturn supportFlush;\n\t} else if (capability.toLowerCase().equals(\"hflush\")) {\n\t\treturn supportFlush;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 28.18474344244457}, {"code": "public boolean hasCapability(String capability){\n\tif (capability.toLowerCase().equals(\"hflush\")) {\n    return supportFlush;\n  } else if (capability.toLowerCase().equals(\"hsync\")) {\n    return true;\n  } else {\n    return false;\n  }\n}", "CodeBleu_score": 30.624925652175094}, {"code": "public boolean hasCapability(String capability){\n\tif (capability.toLowerCase().equals(\"hflush\")) {\n\t\treturn supportFlush;\n\t} else if (capability.toLowerCase().equals(\"hsync\")) {\n\t\treturn supportSync;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 36.526613059392865}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\tif (offset < 0) {\n        throw new IllegalArgumentException(\"Offset must be >= 0\");\n    }\n    if (offset > this.lastFlushOffset) {\n        throw new IllegalArgumentException(\"Offset must be <= \" + this.lastFlushOffset);\n    }\n    if (offset == this.lastFlushOffset) {\n        return;\n    }\n    if (offset < this.lastFlushOffset) {\n        throw new IllegalArgumentException(\"Offset must be >= \" + this.lastFlushOffset);\n    }\n    if (this.lastFlushOffset > 0) {\n        long newBytes = offset - this.lastFlushOffset;\n        if (newBytes > 0) {\n            this.bytesWritten += newBytes;\n        }\n    }\n    if (this.bytesWritten > 0) {\n        this.lastFlushOffset = offset;\n        this.writeMeta();\n    }\n}", "CodeBleu_score": 32.30747346979301}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\tif (offset == lastFlushOffset) {\n            return;\n        }\n        if (offset > lastFlushOffset) {\n            if (offset > fileSize) {\n                throw new IOException(\"Invalid flush offset: \" + offset + \" > \" + fileSize);\n            }\n            final long length = offset - lastFlushOffset;\n            final byte[] data = new byte[(int)length];\n            synchronized (this) {\n                System.arraycopy(buffer, (int)lastFlushOffset, data, 0, (int)length);\n            }\n            try {\n                filerClient.write(path, data, lastFlushOffset, length, isCreate, isExclusive);\n            } catch (Exception e) {\n                throw new IOException(\"Failed to flush to \" + path + \" from \" + lastFlushOffset + \" to \" + offset, e);\n            }\n            lastFlushOffset = offset;\n        } else {\n            throw new IOException(\"Invalid flush offset: \" + offset + \" < \" + lastFlushOffset);\n        }\n    }", "CodeBleu_score": 31.778811709620808}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\tif (offset <= lastFlushOffset) {\n        return;\n    }\n    final long lastFlushOffset = this.lastFlushOffset;\n    if (lastFlushOffset < 0) {\n        throw new IOException(\"lastFlushOffset is not set\");\n    }\n    if (lastFlushOffset >= offset) {\n        throw new IOException(\"lastFlushOffset \" + lastFlushOffset + \" is already larger than \" + offset);\n    }\n    if (offset > fileSize) {\n        throw new IOException(\"offset \" + offset + \" is larger than fileSize \" + fileSize);\n    }\n    try {\n        if (offset > lastFlushOffset) {\n            long startTime = System.currentTimeMillis();\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"flushWrittenBytesToServiceInternal: start to flush from offset {} to offset {}\", lastFlushOffset, offset);\n            }\n            byte[] metadata = writeMeta(lastFlushOffset, offset);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"flushWrittenBytesToServiceInternal: writeMeta took {} ms\", System.currentTimeMillis() - startTime);\n            }\n            startTime = System.currentTimeMillis();\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"flushWrittenBytesToServiceInternal: start to flush to filer\");\n            }\n            filerClient.updateFile(fileId, metadata, lastFlushOffset, offset - lastFlushOffset);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"flushWrittenBytesToServiceInternal: filerClient.updateFile took {} ms\", System.currentTimeMillis() - startTime);\n            }\n            this.lastFlushOffset = offset;\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"flushWrittenBytesToServiceInternal: flush from offset {} to offset {}\", lastFlushOffset, offset);\n            }\n        }\n    } catch (Exception e) {\n        throw new IOException(\"flushWrittenBytesToServiceInternal failed\", e);\n    }\n}", "CodeBleu_score": 36.2082581294943}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t// flip the buffer to prepare for reading\n        bufferToWrite.flip();\n        final int length = bufferToWrite.remaining();\n\n        // ensure the task queue is not overloaded\n        if (writeOperations.size() > MAX_WRITE_OPERATIONS) {\n            shrinkWriteOperationQueue();\n        }\n\n        // submit a write task to the completion service\n        final Future<Integer> task = completionService.submit(new Callable<Integer>() {\n            @Override\n            public Integer call() throws Exception {\n                // write the data and release the buffer\n                return writeData(bufferToWrite, writePosition);\n            }\n        });\n\n        // record the write operation\n        writeOperations.add(new WriteOperation(task, length));\n\n        // return the number of bytes written\n        return length;\n    }", "CodeBleu_score": 37.4828550372302}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t// flip the buffer to prepare for reading\n        bufferToWrite.flip();\n        int length = bufferToWrite.limit();\n        // ensure the task queue is not overloaded\n        while (writeOperations.size() >= maxConcurrentWrites) {\n            shrinkWriteOperationQueue();\n        }\n        // submit a write task\n        final CompletableFuture<Void> task = completionService.submit(() -> {\n            try {\n                // write the data\n                writeData(bufferToWrite, writePosition);\n            } catch (IOException e) {\n                lastError = e;\n                throw lastError;\n            } finally {\n                // release the buffer\n                bufferToWrite.clear();\n            }\n            return null;\n        });\n        // record the write operation\n        writeOperations.add(new WriteOperation(task, length));\n        return length;\n    }", "CodeBleu_score": 43.32589251758652}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\tbufferToWrite.flip();\n        final int length = bufferToWrite.remaining();\n        if (length > 0) {\n            if (writeOperations.size() >= maxWriteQueueLength) {\n                throw new IOException(\"Write queue is full\");\n            }\n            final WriteOperation writeOperation = new WriteOperation(bufferToWrite, writePosition, length);\n            writeOperations.add(writeOperation);\n            completionService.submit(writeOperation.task);\n            shrinkWriteOperationQueue();\n        }\n        return length;\n    }", "CodeBleu_score": 32.18673582928292}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\ttry {\n        Future<String> future = completionService.take();\n        String result = future.get();\n        if (result != null) {\n            System.out.println(result);\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for task to complete\", e);\n    } catch (ExecutionException e) {\n        throw new IOException(\"Exception while waiting for task to complete\", e);\n    }\n}", "CodeBleu_score": 35.071285029424445}, {"code": "private void waitForTaskToComplete() throws IOException{\n\ttry {\n        while (completionService.poll() == null) {\n            // Wait for the next task to finish\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for task to complete\", e);\n    }\n}", "CodeBleu_score": 22.572062107155684}, {"code": "private void waitForTaskToComplete() throws IOException{\n\ttry {\n        while (true) {\n            Future<String> future = completionService.take();\n            if (future.isDone()) {\n                return;\n            }\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 29.73229797770496}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\tlong totalOffset = 0;\n    while (!writeOperationQueue.isEmpty()) {\n        WriteOperation writeOperation = writeOperationQueue.peek();\n        if (writeOperation.isDone()) {\n            writeOperationQueue.remove();\n            totalOffset += writeOperation.getLength();\n        } else {\n            break;\n        }\n    }\n    if (totalOffset > 0) {\n        appendOffset += totalOffset;\n    }\n}", "CodeBleu_score": 34.88808016259919}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\twhile (!writeOperationQueue.isEmpty()) {\n        WriteOperation op = writeOperationQueue.peek();\n        if (!op.isDone()) {\n            break;\n        }\n\n        writeOperationQueue.remove();\n        totalAppendOffset += op.getLength();\n    }\n}", "CodeBleu_score": 29.41288895485371}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\twhile (!writeOperationQueue.isEmpty()) {\n    WriteOperation operation = writeOperationQueue.peek();\n    if (operation.isDone()) {\n      writeOperationQueue.remove();\n      totalAppendOffset += operation.getLength();\n    } else {\n      return;\n    }\n  }\n}", "CodeBleu_score": 30.351130386400815}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\tif (user == null) {\n\t\t\tthrow new IllegalArgumentException(\"user must not be null\");\n\t\t}\n\t\tif (user.getHomeDirectory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"user's home directory must not be null\");\n\t\t}\n\t\tthis.homePath = user.getHomeDirectory();\n\t\tthis.user = user;\n\t}", "CodeBleu_score": 76.01695054239474}, {"code": "protected HdfsFileSystemView(User user){\n\tif (user == null) {\n\t\tthrow new IllegalArgumentException(\"user cannot be null\");\n\t}\n\tif (user.getHomeDirectory() == null) {\n\t\tthrow new IllegalArgumentException(\"user home directory cannot be null\");\n\t}\n\tthis.homePath = user.getHomeDirectory();\n\tthis.user = user;\n}", "CodeBleu_score": 75.71703411037049}, {"code": "protected HdfsFileSystemView(User user){\n\tif (user == null) {\n\t\tthrow new IllegalArgumentException(\"user cannot be null\");\n\t}\n\tif (user.getHomeDirectory() == null) {\n\t\tthrow new IllegalArgumentException(\"user home directory cannot be null\");\n\t}\n\tthis.homePath = user.getHomeDirectory();\n\tthis.user = user;\n}", "CodeBleu_score": 75.71703411037049}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\tif (dir.startsWith(\"/\")) {\n        currentPath = new Path(dir);\n    } else {\n        currentPath = currentPath.resolve(dir);\n    }\n    if (currentPath.isDirectory()) {\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 22.09344067221804}, {"code": "public boolean changeWorkingDirectory(String dir){\n\tif(dir.startsWith(\"/\")){\n\t\tif(dir.length() > 1){\n\t\t\tif(dir.endsWith(\"/\")){\n\t\t\t\tif(dir.substring(1, dir.length() - 1).equals(\"\")){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcurrentPath = new Path(dir);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcurrentPath = new Path(dir);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse{\n\t\tif(dir.endsWith(\"/\")){\n\t\t\tif(dir.substring(0, dir.length() - 1).equals(\"\")){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcurrentPath = new Path(currentPath.toString() + \"/\" + dir);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tcurrentPath = new Path(currentPath.toString() + \"/\" + dir);\n\t\t\treturn true;\n\t\t}\n\t}\n}", "CodeBleu_score": 30.341439480504402}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t// TODO\n    if (dir.equals(\"..\")) {\n        if (currentPath.getParent() == null) {\n            return false;\n        }\n        currentPath = currentPath.getParent();\n        return true;\n    }\n    if (dir.startsWith(\"/\")) {\n        if (dir.length() == 1) {\n            currentPath = new Path(\"/\");\n            return true;\n        }\n        Path newPath = new Path(dir);\n        if (newPath.isDirectory()) {\n            currentPath = newPath;\n            return true;\n        }\n        return false;\n    }\n    Path newPath = new Path(currentPath.toString() + \"/\" + dir);\n    if (newPath.isDirectory()) {\n        currentPath = newPath;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 36.36999903347352}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\tthis.host = host;\n  this.port = port;\n  this.grpcPort = grpcPort;\n  this.filerGrpcAddress = host + \":\" + grpcPort;\n  this.filerAddress = host + \":\" + port;\n  this.filerClient = new FilerClient(filerGrpcAddress, conf);\n  this.conf = conf;\n  this.accessMode = conf.get(ACCESS_VOLUME_SERVER_BY_PROXY, \"filerProxy\");\n  if (accessMode.equals(\"publicUrl\")) {\n    this.accessMode = \"publicUrl\";\n  } else if (accessMode.equals(\"filerProxy\")) {\n    this.accessMode = \"filerProxy\";\n  } else {\n    this.accessMode = \"direct\";\n  }\n}", "CodeBleu_score": 40.69111553854549}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\tthis(host, port, grpcPort, conf, null);\n}", "CodeBleu_score": 13.303718783283053}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\tthis(host, port, grpcPort, conf, true);\n}", "CodeBleu_score": 13.303748150859587}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\tLOG.debug(\"openFileForRead: {}\", path);\n    FilerProto.Entry entry = lookupEntry(path);\n    if (entry == null) {\n        throw new FileNotFoundException(\"File not found: \" + path);\n    }\n    return new SeaweedHadoopInputStream(filerClient, statistics, path, entry);\n}", "CodeBleu_score": 78.22485699814669}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\tLOG.debug(\"openFileForRead: {}\", path);\n        FilerProto.Entry entry = lookupEntry(path);\n        if (entry == null) {\n            throw new FileNotFoundException(\"File not found: \" + path);\n        }\n        return new SeaweedHadoopInputStream(filerClient, statistics, path, entry);\n    }", "CodeBleu_score": 80.05033685389375}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\tLOG.debug(\"openFileForRead: \" + path);\n\n        final FilerProto.Entry entry = lookupEntry(path);\n\n        if (entry == null) {\n\n            throw new FileNotFoundException(path.toString());\n\n        }\n\n        return new SeaweedHadoopInputStream(filerClient, statistics, path, entry);\n\n    }", "CodeBleu_score": 63.738966470950295}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\tthis.conf = conf;\n    try {\n        hostname = InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException uhe) {\n        LOG.warn(\"Unable to determine the hostname of this machine.\", uhe);\n        hostname = \"localhost\";\n    }\n    numThreadsPerMap = conf.getInt(\"mapred.tasktracker.map.tasks.maximum\", 2);\n    numFilesPerThread = conf.getInt(\"mapred.tasktracker.map.tasks.files\", 1);\n    threadPool = Executors.newFixedThreadPool(numThreadsPerMap);\n    for (int i = 0; i < numThreadsPerMap; i++) {\n        threadPool.execute(new Thread(new MapTaskRunner(i)));\n    }\n}", "CodeBleu_score": 42.60540292827252}, {"code": "public void configure(JobConf conf){\n\tthis.conf = conf;\n  try {\n    hostName = InetAddress.getLocalHost().getHostName();\n  } catch (UnknownHostException e) {\n    hostName = \"localhost\";\n  }\n  numThreads = conf.getInt(\"mapred.tasktracker.map.tasks.maximum\", 2);\n  filesPerThread = conf.getInt(\"mapred.tasktracker.map.tasks.filesperthread\", 10);\n  threadPool = Executors.newFixedThreadPool(numThreads);\n  for (int i = 0; i < numThreads; i++) {\n    threadPool.execute(new MapTaskRunner());\n  }\n}", "CodeBleu_score": 50.9538058042722}, {"code": "public void configure(JobConf conf){\n\tsetConf(conf);\n  setHostName(getHostName());\n  setNumThreadsPerMap(conf.getInt(NUM_THREADS_PER_MAP, 1));\n  setFilesPerThread(conf.getInt(FILES_PER_THREAD, 1));\n  setThreadPool(newFixedThreadPool(getNumThreadsPerMap()));\n}", "CodeBleu_score": 13.719414989368167}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\tif (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\",e);\n    }\n  }", "CodeBleu_score": 98.83865927400906}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\tif (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\",e);\n    }\n  }", "CodeBleu_score": 98.83865927400906}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\tif (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\",e);\n    }\n  }", "CodeBleu_score": 98.83865927400906}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\tif (context == null) {\n        throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    if (context.length() == 0) {\n        throw new IllegalArgumentException(\"Context must not be empty\");\n    }\n\n    String current = getCurrent();\n    if (current == null) {\n        // No current context, so create a new one\n        current = context;\n    } else {\n        if (!isContextValid(current)) {\n            throw new Exception(\"Invalid caller context\");\n        }\n        if (current.indexOf(context) == -1) {\n            // Append the new context to the existing one\n            current = current + \":\" + context;\n        }\n    }\n    setCurrent(current);\n}", "CodeBleu_score": 28.14296273808091}, {"code": "public static void setContext(String context) throws Exception{\n\t// Get the current context\n    String currentContext = getContext();\n\n    // If the current context is null or invalid, create and set a new context\n    if (currentContext == null || !isContextValid(currentContext)) {\n        setCurrent(build(context));\n        return;\n    }\n\n    // If the current context is valid and does not already contain the provided context, append the new context to the existing one and set it\n    if (!currentContext.contains(context)) {\n        setCurrent(currentContext + context);\n    }\n}", "CodeBleu_score": 21.80188853112547}, {"code": "public static void setContext(String context) throws Exception{\n\tif (context == null) {\n\t\tthrow new Exception(\"Context is null\");\n\t}\n\tif (context.length() == 0) {\n\t\tthrow new Exception(\"Context is empty\");\n\t}\n\tif (context.length() > 1024) {\n\t\tthrow new Exception(\"Context is too long\");\n\t}\n\t\n\tCallerContext current = getCurrent();\n\tif (current == null) {\n\t\tthrow new Exception(\"Current caller context is null\");\n\t}\n\tif (!current.isValid()) {\n\t\tthrow new Exception(\"Current caller context is invalid\");\n\t}\n\t\n\tif (current.getSignature() == null) {\n\t\tcurrent.setSignature(context);\n\t} else if (!current.getSignature().endsWith(context)) {\n\t\tcurrent.setSignature(current.getSignature() + context);\n\t}\n\t\n\tsetCurrent(current);\n}", "CodeBleu_score": 30.274921566807212}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\tRETURN_NOT_OK(libhdfs_->status());\n  if (hdfs_ == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Not connected to HDFS namenode\"));\n  }\n  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_path().c_str());\n  if (rc != 0) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot delete file '\") + uri.to_string() + \"'\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 58.67877186621205}, {"code": "Status HDFS::remove_file(const URI& uri){\n\tRETURN_NOT_OK(libhdfs_->status());\n  if (hdfs_ == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Not connected to HDFS namenode\"));\n  }\n\n  // Get the file system and path\n  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n  const char* path = uri.to_path().c_str();\n\n  // Delete the file\n  int rc = hdfsDelete(fs, path, 0);\n  if (rc != 0) {\n    std::stringstream errmsg;\n    errmsg << \"Failed to delete file \" << uri.to_string() << \" from HDFS\";\n    return LOG_STATUS(Status_HDFSError(errmsg.str().c_str()));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 54.152206393991264}, {"code": "Status HDFS::remove_file(const URI& uri){\n\thdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n  if (hdfsDelete(fs, uri.to_path().c_str()) == -1) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot delete file '\") + uri.c_str() + \"': \" +\n        hdfsGetLastError()));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 57.47587454489995}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\thdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    hdfsFile file = libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), O_WRONLY, 0, 0, 0);\n    if (file == NULL) {\n      return LOG_STATUS(Status_HDFSError(\"Cannot open file for writing: \" + uri.to_string()));\n    }\n    if (libhdfs_->hdfsHFlush(fs, file) == -1) {\n      libhdfs_->hdfsCloseFile(fs, file);\n      return LOG_STATUS(Status_HDFSError(\"Cannot flush file: \" + uri.to_string()));\n    }\n    if (libhdfs_->hdfsCloseFile(fs, file) == -1) {\n      return LOG_STATUS(Status_HDFSError(\"Cannot close file: \" + uri.to_string()));\n    }\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 52.93289461590375}, {"code": "Status HDFS::sync(const URI& uri){\n\thdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    hdfsFile file = libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n    if (file == nullptr) {\n      return LOG_STATUS(Status_HDFSError(\n          std::string(\"Cannot open file '\") + uri.to_string() + \"' for writing\"));\n    }\n    if (libhdfs_->hdfsHFlush(fs, file) == -1) {\n      libhdfs_->hdfsCloseFile(fs, file);\n      return LOG_STATUS(Status_HDFSError(\n          std::string(\"Cannot flush file '\") + uri.to_string() + \"'\"));\n    }\n    if (libhdfs_->hdfsCloseFile(fs, file) == -1) {\n      return LOG_STATUS(Status_HDFSError(\n          std::string(\"Cannot close file '\") + uri.to_string() + \"'\"));\n    }\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 72.31651800996922}, {"code": "Status HDFS::sync(const URI& uri){\n\thdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    hdfsFile file = libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), O_WRONLY, 0, 0, 0);\n    if (file == nullptr) {\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot open file for syncing; file may be closed or not exist\"));\n    }\n    ret = libhdfs_->hdfsHFlush(fs, file);\n    if (ret != 0) {\n      libhdfs_->hdfsCloseFile(fs, file);\n      return LOG_STATUS(Status_HDFSError(\n          \"Cannot flush file for syncing; file may be closed or not exist\"));\n    }\n    libhdfs_->hdfsCloseFile(fs, file);\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 48.11871266467147}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\thdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n  hdfsFileInfo* info = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (info == nullptr)\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info for HDFS path '\") + uri.to_string() +\n        \"'\"));\n  if (info->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(info, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size for HDFS path '\") + uri.to_string() +\n        \"'; Path is not a file\"));\n  }\n  *nbytes = static_cast<uint64_t>(info->mSize);\n  libhdfs_->hdfsFreeFileInfo(info, 1);\n  return Status::Ok();\n}", "CodeBleu_score": 66.1736470652459}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\thdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n  hdfsFileInfo* info = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        \"Cannot get file info for file: \" + uri.to_string()));\n  }\n  if (info->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(info, 1);\n    return LOG_STATUS(Status_HDFSError(\n        \"Cannot get file size; \" + uri.to_string() + \" is not a file\"));\n  }\n  *nbytes = static_cast<uint64_t>(info->mSize);\n  libhdfs_->hdfsFreeFileInfo(info, 1);\n  return Status::Ok();\n}", "CodeBleu_score": 65.40419193813703}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\tRETURN_NOT_OK(libhdfs_->status());\n  if (hdfs_ == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Not connected to HDFS namenode\"));\n  }\n  hdfsFileInfo* info = libhdfs_->hdfsGetPathInfo(hdfs_, uri.to_path().c_str());\n  if (info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info for '\") + uri.to_string() + \"'\"));\n  }\n  if (info->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(info, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size; '\") + uri.to_string() +\n        \"' is not a file\"));\n  }\n  *nbytes = static_cast<uint64_t>(info->mSize);\n  libhdfs_->hdfsFreeFileInfo(info, 1);\n  return Status::Ok();\n}", "CodeBleu_score": 58.95132208343112}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t// Parse the HBase configuration string.\n    Properties hbaseCfgProps = parseObject(hbaseCfgString);\n\n    // Extract the Zookeeper quorum.\n    String zkQuorum = hbaseCfgProps.getProperty(\"hbase.zookeeper.quorum\");\n\n    // Extract the znode parent.\n    String znodeParent = hbaseCfgProps.getProperty(\"zookeeper.znode.parent\");\n\n    // If the Zookeeper quorum is not provided, throw an exception.\n    if (isEmpty(zkQuorum)) {\n        throw new IllegalArgumentException(\"HBase configuration string does not contain a Zookeeper quorum value.\");\n    }\n\n    // If the znode parent is not provided, use a default value.\n    if (isEmpty(znodeParent)) {\n        znodeParent = \"/hbase\";\n    }\n\n    // Ensure the Zookeeper quorum includes the port number, defaulting to 2181 if not specified.\n    if (!zkQuorum.contains(\":\")) {\n        zkQuorum += \":2181\";\n    }\n\n    // Return a pair containing the Zookeeper quorum and znode parent.\n    return Pair.of(zkQuorum, znodeParent);\n}", "CodeBleu_score": 29.615800888932352}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\tString hbaseCfg = hbaseCfgString.trim();\n    String[] hbaseCfgParts = hbaseCfg.split(\":\");\n    String hbaseQuorum = hbaseCfgParts[0];\n    String hbaseZnodeParent = \"/hbase\";\n    if (hbaseCfgParts.length > 1) {\n        hbaseZnodeParent = hbaseCfgParts[1];\n    }\n    if (hbaseQuorum.indexOf(\":\") < 0) {\n        hbaseQuorum = hbaseQuorum + \":2181\";\n    }\n    return new Pair<String, String>(hbaseQuorum, hbaseZnodeParent);\n}", "CodeBleu_score": 30.874202354879536}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\tif (hbaseCfgString == null) {\n    throw new IllegalArgumentException(\"HBase configuration string is null\");\n  }\n\n  String[] parts = hbaseCfgString.split(\",\");\n  if (parts.length < 1 || parts.length > 2) {\n    throw new IllegalArgumentException(\n        \"HBase configuration string is not in the form <zookeeper quorum>,<znode parent>\");\n  }\n\n  String quorum = parts[0];\n  String znodeParent = DEFAULT_ZNODE_PARENT;\n  if (parts.length == 2) {\n    znodeParent = parts[1];\n  }\n\n  if (!quorum.contains(\":\")) {\n    quorum += \":2181\";\n  }\n\n  return new Pair<String, String>(quorum, znodeParent);\n}", "CodeBleu_score": 30.842392618956495}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\tConnection conn = getJdbcConnection(cfg);\n    String tableName = cfg.getTable();\n    String namespace = cfg.getNamespace();\n    boolean isThinClient = cfg.isThinClient();\n    checkTable(conn, namespace, tableName, isThinClient);\n    PTable table = getTableSchema(conn, tableName);\n    List<String> columns = cfg.getColumns();\n    List<String> columnNames = new ArrayList<>(columns.size());\n    for (String column : columns) {\n        columnNames.add(getColumnName(column));\n    }\n    for (String columnName : columnNames) {\n        PColumn column = getColumnForColumnName(table, columnName);\n        if (column == null) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                    \"The column [\" + columnName + \"] does not exist in the table [\" + tableName + \"].\");\n        }\n    }\n    try {\n        conn.close();\n    }\n    catch (SQLException e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.CONNECTION_FAILED,\n                \"Unable to close connection to hbase cluster, please check the configuration and cluster status \", e);\n    }\n}", "CodeBleu_score": 42.24283720376769}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\tConnection conn = getJdbcConnection(cfg);\n    String namespace = cfg.getNamespace();\n    String tableName = cfg.getTableName();\n    boolean isThinClient = cfg.isThinClient();\n    checkTable(conn, namespace, tableName, isThinClient);\n    PTable tableSchema = getTableSchema(conn, tableName);\n    List<String> columnNames = cfg.getColumnNames();\n    List<String> columnTypes = cfg.getColumnTypes();\n    if (columnNames.size() != columnTypes.size()) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE, \"The number of columns does not match the number of column types.\");\n    }\n    if (columnNames.size() == 0) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE, \"The number of columns is 0.\");\n    }\n    for (int i = 0; i < columnNames.size(); i++) {\n        String columnName = columnNames.get(i);\n        String columnType = columnTypes.get(i);\n        checkColumn(tableSchema, columnName, columnType);\n    }\n    conn.close();\n}", "CodeBleu_score": 37.37285044454815}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\tConnection conn = getJdbcConnection(cfg);\n    String namespace = cfg.getNamespace();\n    String tableName = cfg.getTableName();\n    boolean isThinClient = cfg.isThinClient();\n    checkTable(conn, namespace, tableName, isThinClient);\n    List<String> columnNames = cfg.getColumnNames();\n    PTable table = getTableSchema(conn, tableName);\n    List<PColumn> columns = table.getColumns();\n    List<String> columnNamesInTable = new ArrayList<>();\n    for (PColumn column : columns) {\n        columnNamesInTable.add(column.getName().getString());\n    }\n    for (String columnName : columnNames) {\n        if (!columnNamesInTable.contains(columnName)) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                    String.format(\"The column [%s] does not exist in the table [%s].\", columnName, tableName));\n        }\n    }\n    conn.close();\n}", "CodeBleu_score": 34.27357324089528}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\tif (isKerberosEnabled() && isNotBlank(kerberosPrincipal) && isNotBlank(kerberosKeytabFilePath)) {\n        UserGroupInformation.setConfiguration(getConfiguration());\n        try {\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\"Kerberos authentication failed for principal: {} and keytab file: {}.\", kerberosPrincipal, kerberosKeytabFilePath);\n            throw DataXException.asAddaxException(HdfsWriterErrorCode.KERBEROS_LOGIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 47.10965505055561}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\tif (kerberosPrincipal == null || kerberosPrincipal.isEmpty()) {\n        return\n    }\n\n    if (kerberosKeytabFilePath == null || kerberosKeytabFilePath.isEmpty()) {\n        throw new IllegalArgumentException(\"kerberosKeytabFilePath cannot be null or empty\")\n    }\n\n    Configuration conf = new Configuration()\n    UserGroupInformation.setConfiguration(conf)\n\n    try {\n        UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath)\n    } catch (Exception e) {\n        LOG.error(\"Kerberos authentication failed for ${kerberosPrincipal} using keytab file ${kerberosKeytabFilePath}\", e)\n        throw new AddaxException(AddaxException.RUNTIME_ERROR,\n                String.format(\"Kerberos authentication failed for %s using keytab file %s\", kerberosPrincipal, kerberosKeytabFilePath), e)\n    }\n}", "CodeBleu_score": 44.79850359363382}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\tif (kerberosPrincipal != null && !kerberosPrincipal.isEmpty() && kerberosKeytabFilePath != null && !kerberosKeytabFilePath.isEmpty()) {\n        UserGroupInformation.setConfiguration(HadoopConfTool.getConfiguration())\n        UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath)\n    }\n}", "CodeBleu_score": 18.72141533687466}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\tMap<String, ThinClientPTable.ThinClientPColumn> colMap = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int columnCount = rsmd.getColumnCount();\n        for (int i = 1; i <= columnCount; i++) {\n            String columnName = rsmd.getColumnName(i);\n            String columnType = rsmd.getColumnTypeName(i);\n            if (columnName == null || columnType == null) {\n                throw new SQLException(\"Column name or type is null\");\n            }\n            ThinClientPTable.ThinClientPColumn column = new ThinClientPTable.ThinClientPColumn(columnName, columnType);\n            colMap.put(columnName, column);\n        }\n        return colMap;\n    }", "CodeBleu_score": 44.79718931150136}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\tMap<String, ThinClientPTable.ThinClientPColumn> columns = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            String colType = rsmd.getColumnTypeName(i);\n            if (colName == null || colType == null) {\n                throw new SQLException(\"Column name or type is null\");\n            }\n            ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn(colName, colType);\n            columns.put(colName, col);\n        }\n        return columns;\n    }", "CodeBleu_score": 45.166607722869735}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\tMap<String, ThinClientPTable.ThinClientPColumn> pColumns = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int numColumns = rsmd.getColumnCount();\n        for (int i = 1; i <= numColumns; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            String colType = rsmd.getColumnTypeName(i);\n            if (colName == null || colType == null) {\n                throw new SQLException(\"Column name or type is null\");\n            }\n            pColumns.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n        }\n        return pColumns;\n    }", "CodeBleu_score": 42.990723618659395}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\tPhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    }\n    catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    }\n    finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 99.14280301511259}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\tPhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.789877320245}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\tPhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.789877320245}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\tString specifiedFileType = this.readerOriginConfig.getString(Key.FILE_TYPE);\n    if (!checkHdfsFileType(filePath, specifiedFileType)) {\n        String message = String.format(\"The file [%s] is not a file of type [%s].\", filePath, specifiedFileType);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message);\n    }\n    LOG.info(\"[FILE PATH]: [{}] [FILE TYPE]: [{}]\", filePath, specifiedFileType);\n    this.sourceFiles.add(filePath);\n}", "CodeBleu_score": 43.90580040106193}, {"code": "private void addSourceFileByType(String filePath){\n\tif (checkHdfsFileType(filePath, fileType)) {\n        LOG.info(\"[FILE FILTER] File [{}] pass the file type filter [{}]\", filePath, fileType);\n        sourceFileList.add(filePath);\n    }\n    else {\n        String message = String.format(\"[FILE FILTER] File [{}] does not match the file type filter [{}]\", filePath, fileType);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.ILLEGAL_VALUE, message);\n    }\n}", "CodeBleu_score": 36.975378901874464}, {"code": "private void addSourceFileByType(String filePath){\n\tif (checkHdfsFileType(filePath, specifiedFileType)) {\n            LOG.info(\"[FILE PATH]: [{}] [FILE TYPE]: [{}]\", filePath, specifiedFileType);\n            sourceFiles.add(filePath);\n        }\n    }", "CodeBleu_score": 12.830873727176767}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\tLOG.info(\"start read sequence file [{}]...\", sourceSequenceFilePath);\n        SequenceFile.Reader reader = null;\n        try {\n            reader = new SequenceFile.Reader(FileSystem.get(readerSliceConfig), new Path(sourceSequenceFilePath), readerSliceConfig);\n            Writable key = (Writable) reader.getKeyClass().newInstance();\n            Writable value = (Writable) reader.getValueClass().newInstance();\n            while (reader.next(key, value)) {\n                if (StringUtils.isNotBlank(value.toString())) {\n                    StorageReaderUtil.transportOneRecord(recordSender,\n                            readerSliceConfig, value.toString(), getKeyClass().getName(), taskPluginCollector);\n                }\n            }\n        } catch (Exception e) {\n            LOG.error(\"read sequence file [{}] error:\", sourceSequenceFilePath, e);\n            throw DataXException.asAddaxException(HdfsReaderErrorCode.READ_SEQUENCEFILE_ERROR, e);\n        } finally {\n            IOUtils.closeStream(reader);\n        }\n        LOG.info(\"finish read sequence file [{}]...\", sourceSequenceFilePath);\n    }", "CodeBleu_score": 54.72355236701658}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\tLOG.info(\"start read sequence file [{}].\", sourceSequenceFilePath);\n        Path path = new Path(sourceSequenceFilePath);\n        FileSystem fs;\n        try {\n            fs = FileSystem.get(path.toUri(), readerSliceConfig);\n            FSDataInputStream fileIn = fs.open(path);\n            SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, readerSliceConfig);\n            Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), readerSliceConfig);\n            Writable value = (Writable) ReflectionUtils.newInstance(reader.getValueClass(), readerSliceConfig);\n            while (reader.next(key, value)) {\n                if (StringUtils.isNotBlank(value.toString())) {\n                    transportOneRecord(recordSender, readerSliceConfig, value.toString());\n                }\n            }\n            fileIn.close();\n            reader.close();\n        }\n        catch (Exception e) {\n            String message = String.format(\"\u8bfb\u53d6\u6587\u4ef6[%s]\u65f6\u51fa\u9519\uff0c\u8bf7\u786e\u8ba4\u6587\u4ef6\u662fSequenceFile<Text, Text>\u683c\u5f0f\uff0c\u4e14\u6587\u4ef6\u4e2d\u4e0d\u5305\u542b\u4e2d\u6587\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\", sourceSequenceFilePath);\n            LOG.error(message);\n            throw DataXException.asAddaxException(HdfsReaderErrorCode.READ_SEQUENCEFILE_ERROR, e);\n        }\n    }", "CodeBleu_score": 57.05357544753211}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\tLOG.info(\"start read sequence file [{}]...\", sourceSequenceFilePath);\n    Path path = new Path(sourceSequenceFilePath);\n    FileSystem fs;\n    try {\n        fs = FileSystem.get(path.toUri(), readerSliceConfig);\n        FSDataInputStream fileIn = fs.open(path);\n        SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, readerSliceConfig);\n        Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), readerSliceConfig);\n        Writable value = (Writable) ReflectionUtils.newInstance(reader.getValueClass(), readerSliceConfig);\n        long counter = 0;\n        while (reader.next(key, value)) {\n            if (StringUtils.isNotBlank(value.toString())) {\n                transportOneRecord(recordSender, value.toString(), readerSliceConfig, taskPluginCollector);\n                counter++;\n            }\n        }\n        reader.close();\n        fileIn.close();\n        LOG.info(\"read sequence file [{}] successfully, read record count: [{}]\", sourceSequenceFilePath, counter);\n    } catch (Exception e) {\n        LOG.error(\"read sequence file [{}] error:\", sourceSequenceFilePath, e);\n        throw DataXException.asAddaxException(HdfsReaderErrorCode.READ_SEQUENCEFILE_ERROR, e);\n    }\n}", "CodeBleu_score": 54.36435077195456}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\ttry {\n        FileSystem fs = FileSystem.get(hadoopConf);\n        Path file = new Path(filepath);\n        FSDataInputStream in = fs.open(file);\n        switch (specifiedFileType.toLowerCase()) {\n            case \"orc\":\n                return isORCFile(file, fs, in);\n            case \"rc\":\n                return isRCFile(filepath, in);\n            case \"sequence\":\n                return isSequenceFile(file, in);\n            case \"parquet\":\n                return isParquetFile(file);\n            case \"csv\":\n                return isCsvFile(file, fs, in);\n            case \"text\":\n                return isTextFile(file, fs, in);\n            default:\n                throw AddaxException.asAddaxException(HdfsReaderErrorCode.ILLEGAL_VALUE,\n                        String.format(\"The file type specified is invalid. Supported file types are ORC, RC, Sequence, Parquet, CSV, and Text. The file type specified is [%s]\", specifiedFileType));\n        }\n    }\n    catch (Exception e) {\n        String message = String.format(\"An exception occurred while checking the file type. The file path is [%s] and the specified file type is [%s].\", filepath, specifiedFileType);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, e);\n    }\n}", "CodeBleu_score": 47.69916273276842}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t// \u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf\n    FileSystem fs = FileSystem.get(hadoopConf);\n    // \u83b7\u53d6\u6587\u4ef6\u8f93\u5165\u6d41\n    FSDataInputStream in = null;\n    try {\n        in = fs.open(new Path(filepath));\n        // \u5224\u65ad\u6587\u4ef6\u7c7b\u578b\n        boolean isRCFile = isRCFile(filepath, in);\n        boolean isSequenceFile = isSequenceFile(new Path(filepath), in);\n        boolean isParquetFile = isParquetFile(new Path(filepath));\n        boolean isORCFile = isORCFile(new Path(filepath), fs, in);\n        boolean isCSVFile = isCSVFile(filepath);\n        boolean isTextFile = isTextFile(filepath);\n        // \u6839\u636e\u7528\u6237\u6307\u5b9a\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5339\u914d\n        if (specifiedFileType.equalsIgnoreCase(\"ORC\")) {\n            return isORCFile;\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"RC\")) {\n            return isRCFile;\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"Sequence\")) {\n            return isSequenceFile;\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"Parquet\")) {\n            return isParquetFile;\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"CSV\")) {\n            return isCSVFile;\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"Text\")) {\n            return isTextFile;\n        }\n        else {\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.ILLEGAL_VALUE,\n                    String.format(\"The file type you specified [%s] is not supported.\", specifiedFileType));\n        }\n    }\n    catch (IOException e) {\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.OPEN_FILE_ERROR,\n                String.format(\"Failed to open file [%s] for checking file type.\", filepath), e);\n    }\n    finally {\n        IOUtils.closeQuietly(in);\n    }", "CodeBleu_score": 40.8489307658421}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\tFileSystem fs = null;\n    FSDataInputStream in = null;\n    Path file = new Path(filepath);\n    try {\n        fs = FileSystem.get(hadoopConf);\n        in = fs.open(file);\n        if (specifiedFileType.equalsIgnoreCase(\"orc\")) {\n            return isORCFile(file, fs, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"rc\")) {\n            return isRCFile(filepath, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"sequence\")) {\n            return isSequenceFile(file, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"parquet\")) {\n            return isParquetFile(file);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"csv\")) {\n            return isCSVFile(filepath, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"text\")) {\n            return isTextFile(filepath, in);\n        }\n        else {\n            return false;\n        }\n    }\n    catch (IOException e) {\n        LOG.error(\"Failed to check the file type of the file [{}]\", filepath);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, e);\n    }\n    finally {\n        IOUtils.closeStream(in);\n    }\n}", "CodeBleu_score": 53.7423638653958}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\ttry {\n\t\tif (hConnection != null) {\n\t\t\thConnection.close();\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new AddaxException(AddaxException.HBASE_16, e);\n\t}\n}", "CodeBleu_score": 48.73824225758444}, {"code": "public static void closeConnection(Connection hConnection){\n\tif (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw new AddaxException(Hbase11xHelper.class.getSimpleName() + \" close connection error: \" + e.getMessage(), e);\n        }\n    }\n}", "CodeBleu_score": 48.4842324938629}, {"code": "public static void closeConnection(Connection hConnection){\n\tif (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw new AddaxException(AddaxException.HBASE_0002, e.getMessage(), e);\n        }\n    }\n}", "CodeBleu_score": 51.0281086829538}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\tif (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw new AddaxException(AddaxException.ADMIN_CLOSE_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 52.94040629419262}, {"code": "public static void closeAdmin(Admin admin){\n\tif (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw new AddaxException(Hbase11xHelper.class.getSimpleName() + \" close admin failed. IOException. \" + e.getMessage(), e);\n        }\n    }\n}", "CodeBleu_score": 47.94000567662982}, {"code": "public static void closeAdmin(Admin admin){\n\ttry {\n        if (admin != null) {\n            admin.close();\n        }\n    } catch (IOException e) {\n        throw new AddaxException(Hbase11xHelper.class.getSimpleName() + \" close admin failed. \" + e.getMessage(), e);\n    }\n}", "CodeBleu_score": 52.26485958646933}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\tString rowKey = Bytes.toString(CellUtil.cloneRow(cell));\n        String family = Bytes.toString(CellUtil.cloneFamily(cell));\n        String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n        String value = Bytes.toString(CellUtil.cloneValue(cell));\n        long timestamp = cell.getTimestamp();\n\n        // Get the data type and format for the row key and column value.\n        DataType rowKeyType = getRowKeyType(family, qualifier);\n        DataType valueType = getValueType(family, qualifier);\n        String rowKeyFormat = getRowKeyFormat(family, qualifier);\n        String valueFormat = getValueFormat(family, qualifier);\n\n        // Convert the row key to the appropriate type.\n        Object convertedRowKey = convertBytesToAssignType(rowKey, rowKeyType, rowKeyFormat);\n\n        // Convert the column value to the appropriate type.\n        Object convertedValue = convertBytesToAssignType(value, valueType, valueFormat);\n\n        // Add the converted row key and column value to the record.\n        record.add(rowKeyColumnName, convertedRowKey);\n        record.add(family + \":\" + qualifier, convertedValue);\n        record.add(timestampColumnName, timestamp);\n    }", "CodeBleu_score": 33.43113277800916}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\tString rowKey = Bytes.toString(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());\n        String family = Bytes.toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());\n        String qualifier = Bytes.toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());\n        String value = Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n        String timestamp = String.valueOf(cell.getTimestamp());\n\n        if (rowKeyType != null) {\n            record.setField(rowKeyFieldName, convertBytesToAssignType(rowKey, rowKeyType));\n        }\n        if (familyType != null) {\n            record.setField(familyFieldName, convertBytesToAssignType(family, familyType));\n        }\n        if (qualifierType != null) {\n            record.setField(qualifierFieldName, convertBytesToAssignType(qualifier, qualifierType));\n        }\n        if (valueType != null) {\n            record.setField(valueFieldName, convertBytesToAssignType(value, valueType));\n        }\n        if (timestampType != null) {\n            record.setField(timestampFieldName, convertBytesToAssignType(timestamp, timestampType));\n        }\n    }", "CodeBleu_score": 26.035523030516288}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\tString rowKey = Bytes.toString(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());\n        String family = Bytes.toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());\n        String qualifier = Bytes.toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());\n        String value = Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n        long timestamp = cell.getTimestamp();\n\n        //Add the row key to the record\n        record.add(rowKeyFieldName, rowKey);\n\n        //Add the timestamp to the record\n        record.add(timestampFieldName, timestamp);\n\n        //Add the column family to the record\n        record.add(familyFieldName, family);\n\n        //Add the qualifier to the record\n        record.add(qualifierFieldName, qualifier);\n\n        //Add the value to the record\n        record.add(valueFieldName, value);\n    }", "CodeBleu_score": 22.529370731612207}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\tString startRowkey = configuration.get(HBaseConfiguration.START_ROW_KEY);\n    if (isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    else {\n        boolean isBinaryRowkey = configuration.getBoolean(HBaseConfiguration.IS_BINARY_ROWKEY, false);\n        return stringToBytes(startRowkey, isBinaryRowkey);\n    }\n}", "CodeBleu_score": 63.74555035006424}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\tString startRowkey = configuration.get(HBaseConfiguration.START_ROW_KEY);\n    if (isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    boolean isBinaryRowkey = configuration.getBoolean(HBaseConfiguration.IS_BINARY_ROWKEY, false);\n    return stringToBytes(startRowkey, isBinaryRowkey);\n}", "CodeBleu_score": 56.22476410309372}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\tString startRowkey = configuration.get(HBaseConfiguration.START_ROW_KEY);\n    if (isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    else {\n        boolean isBinaryRowkey = configuration.getBoolean(HBaseConfiguration.BINARY_ROWKEY, false);\n        return stringToBytes(startRowkey, isBinaryRowkey);\n    }\n}", "CodeBleu_score": 63.458328704815926}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\tString startRowKey = configuration.get(INNER_START_ROWKEY);\n\tif (isBlank(startRowKey)) {\n\t\treturn new byte[0];\n\t}\n\treturn startRowKey.toBytesBinary();\n}", "CodeBleu_score": 35.27066800697184}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\tString startRowkey = configuration.get(INNER_START_ROWKEY);\n  if (StringUtils.isBlank(startRowkey)) {\n    return new byte[0];\n  } else {\n    return startRowkey.getBytes(StandardCharsets.UTF_8);\n  }\n}", "CodeBleu_score": 53.683600268464325}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\tString startRowkey = configuration.getString(INNER_START_ROWKEY);\n\tif (isBlank(startRowkey)) {\n\t\treturn new byte[0];\n\t}\n\treturn toBytesBinary(startRowkey);\n}", "CodeBleu_score": 44.13487422991068}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\tthis(record.key(), record.headers(), record.value());\n}", "CodeBleu_score": 13.000322708657858}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\tthis.key = UUID.fromString(record.key());\n    this.headers = new TbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 42.86026510833241}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\tthis.key = UUID.fromString(record.key());\n    this.headers = new TbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 42.86026510833241}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\treturn createProducer(getNotificationsTopic(), getServiceId(), settings.getTopic());\n}", "CodeBleu_score": 11.12954647747931}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\treturn createProducer(getNotificationsTopic(),\n            getServiceId().replace('-', '.') + \"TransportNotificationsMsg\");\n}", "CodeBleu_score": 10.142187495782515}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\treturn createProducer(getNotificationsTopic(), getServiceId());\n}", "CodeBleu_score": 8.512387905981338}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\tlog.info(\"Creating ToCoreNotificationMsg consumer.\");\n    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> builder = TbKafkaConsumerTemplate.builder();\n    builder.settings(settings);\n    builder.topic(getFullTopicName(getNotificationsTopic()));\n    builder.clientId(\"ttn-\" + getServiceId() + \"-\" + getKey());\n    builder.groupId(getKey());\n    builder.decoder(msg -> ToCoreNotificationMsg.parseFrom(msg.getData()));\n    builder.admin(admin);\n    builder.statsService(statsService);\n    return builder.build();\n}", "CodeBleu_score": 43.47446156535424}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\treturn new TbKafkaConsumerTemplate<>(getConsumerConfigs(), getTopic(), clientId, groupId,\n            msg -> msg.getEntityId().getId(),\n            new TbKafkaJsonDeserializer<>(ToCoreNotificationMsg.class),\n            getConsumerStat());\n}", "CodeBleu_score": 13.564554832675732}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\tTbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> consumer = new TbKafkaConsumerTemplate<>(getConsumerConfig(), getTopic(), getConsumerGroup(),\n            getKey(), getData(), getHeaders(), getClientId(), getGroupId(), getTopicPartitions(), getMaxPollRecords(), getDecoder(), getAdmin(), getStatsService());\n    consumer.init();\n    return consumer;\n}", "CodeBleu_score": 24.02576408339717}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\tif (topicNames.isEmpty()) {\n        logger.info(\"No topics provided for subscription. Unsubscribing from all existing topics.\");\n        unsubscribe();\n    } else {\n        for (String topicName : topicNames) {\n            ensureTopicExists(topicName);\n        }\n        subscribe(topicNames);\n    }\n}", "CodeBleu_score": 53.97622879578212}, {"code": "protected void doSubscribe(List<String> topicNames){\n\tif (topicNames.isEmpty()) {\n        logger.info(\"No topics to subscribe to.\");\n        consumer.unsubscribe();\n    } else {\n        logger.info(\"Subscribing to topics: {}\", topicNames);\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 61.8434843225262}, {"code": "protected void doSubscribe(List<String> topicNames){\n\tif (topicNames.isEmpty()) {\n        log.info(\"Consumer {} is unsubscribed from all topics\", consumerId);\n        consumer.unsubscribe();\n    } else {\n        log.info(\"Consumer {} is subscribed to topics {}\", consumerId, topicNames);\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 56.04577935223328}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\tStopwatch stopwatch = Stopwatch.createStarted();\n    log.trace(\"Polling {} for {}ms\", getTopic(), durationInMillis);\n    List<ConsumerRecord<String, byte[]>> records = new ArrayList<>();\n    ConsumerRecords<String, byte[]> consumerRecords = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopwatch.stop();\n    log.trace(\"Polled {} for {}ms. Total time: {}ms\", getTopic(), durationInMillis, stopwatch.elapsed(TimeUnit.MILLISECONDS));\n    if (!consumerRecords.isEmpty()) {\n        for (ConsumerRecord<String, byte[]> consumerRecord : consumerRecords) {\n            records.add(consumerRecord);\n        }\n    }\n    return records;\n}", "CodeBleu_score": 53.93538135657582}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\tlong startTime = System.currentTimeMillis();\n    Stopwatch stopwatch = Stopwatch.createStarted();\n    LOG.trace(\"Polling for records from topic {} for {} milliseconds\", topic, durationInMillis);\n    List<ConsumerRecord<String, byte[]>> records = new ArrayList<>();\n    try {\n        ConsumerRecords<String, byte[]> consumerRecords = consumer.poll(Duration.ofMillis(durationInMillis));\n        if (!consumerRecords.isEmpty()) {\n            consumerRecords.forEach(records::add);\n        }\n    } catch (Exception e) {\n        LOG.error(\"Error polling for records from topic {}\", topic, e);\n    }\n    stopwatch.stop();\n    long elapsedTime = System.currentTimeMillis() - startTime;\n    LOG.trace(\"Polling for records from topic {} took {} milliseconds\", topic, elapsedTime);\n    return records;\n}", "CodeBleu_score": 48.88422502272294}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\tStopwatch stopwatch = Stopwatch.createStarted();\n    logger.info(\"Polling topic {} for {} ms\", getTopic(), durationInMillis);\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopwatch.stop();\n    logger.info(\"Polling topic {} took {} ms\", getTopic(), stopwatch.elapsed(TimeUnit.MILLISECONDS));\n    if (records.isEmpty()) {\n        return emptyList();\n    }\n    return new ArrayList<>(records);\n}", "CodeBleu_score": 54.6632874912461}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\tif (initError != null) {\n        log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, initError);\n        tellFailure(ctx, msg);\n    } else {\n        String topic = getTopicPattern(msg);\n        String key = getKeyPattern(msg);\n        publish(ctx, msg, topic, key);\n    }\n}", "CodeBleu_score": 21.623804734032436}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\tif (initError) {\n        log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, initError);\n        ctx.tellFailure(msg, initError);\n    } else {\n        String topic = getTopicPattern(ctx, msg);\n        String key = getKeyPattern(ctx, msg);\n        if (topic != null && key != null) {\n            log.debug(\"[{}] Publishing message: {} to topic: {}, key: {}\", ctx.getSelfId(), msg, topic, key);\n            publish(ctx, msg, topic, key);\n        } else {\n            log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg);\n            ctx.tellFailure(msg, new IllegalArgumentException(\"Failed to determine topic or key!\"));\n        }\n    }\n}", "CodeBleu_score": 32.953621132281036}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\tif (initError != null) {\n            tellFailure(ctx, msg, initError);\n            return;\n        }\n        try {\n            String topic = getTopicPattern(ctx, msg);\n            String key = getKeyPattern(ctx, msg);\n            if (isEmpty(topic) || isEmpty(key)) {\n                tellFailure(ctx, msg, \"Topic or key pattern is empty!\");\n            } else {\n                publish(ctx, msg, topic, key);\n            }\n        } catch (Exception e) {\n            log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, e);\n        }\n    }", "CodeBleu_score": 35.32666723796887}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\tif (metadataKeys.isEmpty()) {\n        send(ctx, msg, topic, key);\n    } else {\n        Map<String, String> metadata = getMetaData(msg);\n        Map<String, String> headers = new HashMap<>();\n        metadata.forEach((k, v) -> {\n            if (metadataKeys.contains(k)) {\n                headers.put(k, v);\n            }\n        });\n        send(ctx, msg, topic, key, headers, this::processRecord);\n    }\n}", "CodeBleu_score": 33.0236584664545}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\tboolean addMetadata = Boolean.parseBoolean(getMetaData(msg).getOrDefault(\"addMetadata\", \"false\"));\n    if (!addMetadata) {\n        producer.send(new ProducerRecord<>(topic, key, msg.getData()), (recordMetadata, e) -> processRecord(ctx, msg, recordMetadata, e));\n    } else {\n        Map<String, String> metadata = getMetaData(msg);\n        Map<String, String> headers = new HashMap<>();\n        metadata.forEach((k, v) -> headers.put(k, v));\n        producer.send(new ProducerRecord<>(topic, key, msg.getData(), new RecordHeaders(headers.entrySet().stream().map(e -> new RecordHeader(e.getKey(), e.getValue().getBytes())).collect(Collectors.toList()))), (recordMetadata, e) -> processRecord(ctx, msg, recordMetadata, e));\n    }\n}", "CodeBleu_score": 48.80402474092747}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\tif (addMetadataAsHeaders) {\n        Map<String, String> metadata = msg.getMetaData().getData();\n        Map<String, String> headers = new HashMap<>(metadata.size());\n        for (Map.Entry<String, String> entry : metadata.entrySet()) {\n            headers.put(entry.getKey(), entry.getValue());\n        }\n        ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(topic, key.getBytes(), getBytes(msg.getData()), headers);\n        producer.send(record, (metadata1, e) -> processRecord(ctx, msg, metadata1, e));\n    } else {\n        producer.send(new ProducerRecord<>(topic, key.getBytes(), getBytes(msg.getData())), (metadata1, e) -> processRecord(ctx, msg, metadata1, e));\n    }\n}", "CodeBleu_score": 43.844116599395925}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\tif (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            logger.error(\"Failed to close Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 67.75803780356739}, {"code": "public void destroy(){\n\tif (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            logger.error(\"Failed to close Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 67.75803780356739}, {"code": "public void destroy(){\n\tif (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            logger.error(\"Failed to close the Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 67.97789431687255}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\tTbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> builder = TbKafkaProducerTemplate.builder();\n    builder.settings(getKafkaSettings());\n    builder.clientId(getServiceId());\n    builder.defaultTopic(getTopic(TbServiceQueueConfig.MAIN_RULE_ENGINE_QUEUE));\n    builder.admin(getAdmin());\n    return builder.build();\n}", "CodeBleu_score": 55.06949166711017}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\tTbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> builder = TbKafkaProducerTemplate.builder();\n    builder.settings(getKafkaSettings());\n    builder.clientId(getServiceId());\n    builder.defaultTopic(tbKafkaSettings.getTopic());\n    builder.admin(admin);\n    return builder.build();\n}", "CodeBleu_score": 59.56742473821102}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\tTbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> builder = TbKafkaProducerTemplate.builder();\n    builder.settings(getKafkaSettings());\n    builder.clientId(\"TB-\" + getServiceId() + \"-\" + \"rule-engine\");\n    builder.defaultTopic(tbKafkaSettings.getTopic());\n    builder.admin(admin);\n    return new TbKafkaProducerTemplate<>(builder.build());\n}", "CodeBleu_score": 59.18481756939595}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\tint printIntervalMs = getPrintIntervalMs();\n        if (printIntervalMs > 0) {\n            log.info(\"Starting Kafka consumer group statistics scheduling with interval [{}] ms\", printIntervalMs);\n            logScheduler.scheduleWithFixedDelay(() -> {\n                if (isStatsPrintRequired()) {\n                    try {\n                        Map<String, Map<TopicPartition, OffsetAndMetadata>> groupOffsets = getGroupOffsets();\n                        Map<TopicPartition, Long> endOffsets = getEndOffsets();\n                        for (String groupId : groupOffsets.keySet()) {\n                            List<GroupTopicStats> consumerGroupStats = getTopicsStatsWithLag(groupOffsets.get(groupId), endOffsets);\n                            if (!consumerGroupStats.isEmpty()) {\n                                log.info(\"Kafka consumer group [{}] has topics with lag: {}\", groupId, consumerGroupStats);\n                            }\n                        }\n                    } catch (Exception e) {\n                        log.warn(\"Failed to print Kafka consumer group statistics\", e);\n                    }\n                }\n            }, 0, printIntervalMs, TimeUnit.MILLISECONDS);\n        }\n    }", "CodeBleu_score": 35.23026612101872}, {"code": "private void startLogScheduling(){\n\tif (isStatsPrintRequired()) {\n            log.info(\"Scheduling Kafka consumer group statistics logging with interval [{}] ms\", getPrintIntervalMs());\n            kafkaScheduler.scheduleWithFixedDelay(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        if (isStatsPrintRequired()) {\n                            logConsumerGroupStats();\n                        }\n                    } catch (Exception e) {\n                        log.warn(\"[{}] Failed to log consumer group stats\", groupId, e);\n                    }\n                }\n            }, 0, getPrintIntervalMs(), TimeUnit.MILLISECONDS);\n        }\n    }", "CodeBleu_score": 16.003013889975033}, {"code": "private void startLogScheduling(){\n\tlong printIntervalMs = getPrintIntervalMs();\n        if (isStatsPrintRequired()) {\n            log.info(\"Scheduling Kafka consumer group statistics logging every {} ms\", printIntervalMs);\n            statsScheduler = Executors.newSingleThreadScheduledExecutor();\n            statsScheduler.scheduleWithFixedDelay(this::logStats, 0, printIntervalMs, TimeUnit.MILLISECONDS);\n        } else {\n            log.info(\"Kafka consumer group statistics logging is disabled\");\n        }\n    }", "CodeBleu_score": 12.998573991513615}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\tProperties props = toProps();\n\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n\n    return props;\n}", "CodeBleu_score": 91.65226058011727}, {"code": "protected Properties toAdminProps(){\n\tProperties props = toProps();\n\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n\n        return props;\n    }", "CodeBleu_score": 90.14885306759078}, {"code": "protected Properties toAdminProps(){\n\tProperties props = toProps();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n        return props;\n    }", "CodeBleu_score": 90.14885306759078}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\tString scopedName = getScopedName(metricName, group);\n\t\tMap<String, String> tags = getTags(group);\n\t\tif (metric instanceof Counter) {\n\t\t\tCounter counter = (Counter) metric;\n\t\t\tCounterEvent counterEvent = new CounterEvent(scopedName, tags, counter.getCount());\n\t\t\tcounters.put(scopedName, counterEvent);\n\t\t\tcounterEvents.add(counterEvent);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tGauge<?> gauge = (Gauge<?>) metric;\n\t\t\tGaugeEvent<?> gaugeEvent = new GaugeEvent<>(scopedName, tags, gauge.getValue());\n\t\t\tgauges.put(scopedName, gaugeEvent);\n\t\t\tgaugeEvents.add(gaugeEvent);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\tHistogramEvent histogramEvent = new HistogramEvent(scopedName, tags, histogram.getStatistics());\n\t\t\thistograms.put(scopedName, histogramEvent);\n\t\t\thistogramEvents.add(histogramEvent);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMeter meter = (Meter) metric;\n\t\t\tMeterEvent meterEvent = new MeterEvent(scopedName, tags, meter.getRate());\n\t\t\tmeters.put(scopedName, meterEvent);\n\t\t\tmeterEvents.add(meterEvent);\n\t\t} else {\n\t\t\twarn(\"The metric type \" + metric.getClass().getName() + \" is not supported.\");\n\t\t}\n\t}", "CodeBleu_score": 44.75444900821929}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t// Create the scoped name for the metric and the tags.\n\t\tString scopedName = getScopedName(metricName, group);\n\t\tMap<String, String> tags = getTags(group);\n\n\t\t// Add the metric to the corresponding collection.\n\t\tif (metric instanceof Counter) {\n\t\t\taddCounter((Counter) metric, scopedName, tags);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\taddGauge((Gauge<?>) metric, scopedName, tags);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\taddHistogram((Histogram) metric, scopedName, tags);\n\t\t} else if (metric instanceof Meter) {\n\t\t\taddMeter((Meter) metric, scopedName, tags);\n\t\t} else {\n\t\t\tLOG.warn(\"Unknown metric type: {}.\", metric.getClass().getName());\n\t\t}\n\t}", "CodeBleu_score": 53.26440165452044}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\tString scopedName = getScopedName(metricName, group);\n\t\tMap<String, String> tags = getTags(group);\n\t\tMetricEvent event = new MetricEvent(scopedName, tags);\n\n\t\tif (metric instanceof Counter) {\n\t\t\tCounter counter = (Counter) metric;\n\t\t\tcounters.add(counter);\n\t\t\tcounterEvents.add(event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tGauge<?> gauge = (Gauge<?>) metric;\n\t\t\tgauges.add(gauge);\n\t\t\tgaugeEvents.add(event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\thistograms.add(histogram);\n\t\t\thistogramEvents.add(event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMeter meter = (Meter) metric;\n\t\t\tmeters.add(meter);\n\t\t\tmeterEvents.add(event);\n\t\t} else {\n\t\t\tLOG.warn(\"Metric type {} is not supported.\", metric.getClass().getSimpleName());\n\t\t}\n\t}", "CodeBleu_score": 47.89716906229367}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\tNumber value = gauge.getValue();\n    Map<String, Object> fields = metricEvent.getFields();\n    if (fields != null) {\n        fields.put(field, value);\n    } else {\n        fields = new HashMap<>();\n        fields.put(field, value);\n        metricEvent.setFields(fields);\n    }\n    return metricEvent;\n}", "CodeBleu_score": 44.06907921832743}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\tObject value = gauge.getValue();\n    Map<String, Object> fields = metricEvent.getFields();\n    if (fields == null) {\n        fields = new HashMap<String, Object>();\n    }\n    fields.put(field, value);\n    metricEvent.setFields(fields);\n    return metricEvent;\n}", "CodeBleu_score": 38.78620213054814}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\tObject value = gauge.getValue();\n    Map<String, Object> fields = metricEvent.getFields();\n    if (fields != null) {\n        fields.put(field, value);\n        return metricEvent;\n    } else {\n        Map<String, Object> newFields = new HashMap<String, Object>();\n        newFields.put(field, value);\n        return metricEvent.setFields(newFields);\n    }\n}", "CodeBleu_score": 47.07492305589408}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\tMap<String, String> tags = metricEvent.getTags();\n\t\tString topic = tags.get(\"topic\");\n\t\tString groupId = tags.get(\"group_id\");\n\t\tString taskName = tags.get(\"task_name\");\n\t\tString subtaskIndex = tags.get(\"subtask_index\");\n\t\tString metricName = metricEvent.getName();\n\n\t\tif (topic == null || groupId == null || taskName == null || subtaskIndex == null || metricName == null) {\n\t\t\tLOG.warn(\"Failed to add Kafka lag metric fields due to missing required fields\");\n\t\t\treturn null;\n\t\t}\n\n\t\t// Extract the Kafka lag metric value from the Gauge object.\n\t\tString metricValue = gauge.getValue().toString();\n\n\t\t// Split the metric value into its components.\n\t\tString[] metricComponents = metricValue.split(\":\");\n\n\t\t// Check if the Kafka lag metric value is valid.\n\t\tif (metricComponents.length != 4) {\n\t\t\tLOG.warn(\"Failed to add Kafka lag metric fields due to invalid metric value\");\n\t\t\treturn null;\n\t\t}\n\n\t\t// Get the current offset, data timestamp, and committed offset.\n\t\tlong currentOffset = Long.parseLong(metricComponents[0]);\n\t\tlong dataTimestamp = Long.parseLong(metricComponents[1]);\n\t\tlong committedOffset = Long.parseLong(metricComponents[3]);\n\n\t\t// Check if the Kafka lag metric value has changed.\n\t\tif (kafkaLagTimes.containsKey(topic) && kafkaLagTimes.get(topic).containsKey(groupId) && kafkaLagTimes.get(topic).get(groupId).containsKey(taskName) && kafkaLagTimes.get(topic).get(groupId).get(taskName).containsKey(subtaskIndex) && kafkaLagTimes.get(topic).get(groupId).get(taskName).get(subtaskIndex).containsKey(metricName)) {\n\t\t\tif (kafkaLagTimes.get(topic).get(groupId).get(taskName).get(subtaskIndex).get(metricName).equals(currentOffset))", "CodeBleu_score": 39.500833039536786}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t// Extract the Kafka lag metric's value.\n\t\tString value = gauge.getValue().toString();\n\t\t// Split the value into components.\n\t\tString[] values = value.split(\",\");\n\t\t// Update the MetricEvent's fields with the current offsets.\n\t\tmetricEvent.setCurrentOffset(Long.parseLong(values[0]));\n\t\tmetricEvent.setDataTimestamp(Long.parseLong(values[1]));\n\t\tmetricEvent.setCommittedOffset(Long.parseLong(values[2]));\n\t\t// Update the kafkaLagTimes map with the current timestamp.\n\t\tkafkaLagTimes.put(metricEvent.getMetricName(), timestamp);\n\t\t// Set the MetricEvent's timestamp to the current timestamp.\n\t\tmetricEvent.setTimestamp(timestamp);\n\t\treturn metricEvent;\n\t}", "CodeBleu_score": 27.693076716135813}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\tString[] fields = ((String) gauge.getValue()).split(\",\");\n\t\tif (fields.length != 3) {\n\t\t\tLOG.warn(\"Invalid Kafka lag metric: \" + gauge.getValue());\n\t\t\treturn metricEvent;\n\t\t}\n\n\t\tString topic = fields[0];\n\t\tString groupId = fields[1];\n\t\tString metricName = fields[2];\n\n\t\tString key = topic + \".\" + groupId;\n\t\tlong currentOffset = Long.parseLong(metricName.split(\"\\\\.\")[1]);\n\t\tlong committedOffset = Long.parseLong(metricName.split(\"\\\\.\")[3]);\n\n\t\t// If the current offset is less than the committed offset, the metric is no longer valid.\n\t\tif (currentOffset < committedOffset) {\n\t\t\treturn metricEvent;\n\t\t}\n\n\t\t// If the current offset is the same as the committed offset, the metric is no longer valid.\n\t\tif (currentOffset == committedOffset) {\n\t\t\treturn metricEvent;\n\t\t}\n\n\t\t// If the current offset is greater than the committed offset, the metric is valid.\n\t\tif (currentOffset > committedOffset) {\n\t\t\tlong lag = currentOffset - committedOffset;\n\n\t\t\t// If the current offset is the same as the previous offset, the metric is no longer valid.\n\t\t\tif (kafkaLagTimes.containsKey(key)) {\n\t\t\t\tif (kafkaLagTimes.get(key) == currentOffset) {\n\t\t\t\t\treturn metricEvent;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the current offset is greater than the previous offset, the metric is valid.\n\t\t\tif (kafkaLagTimes.containsKey(key)) {\n\t\t\t\tif (kafkaLagTimes.get(key) < currentOffset) {\n\t\t\t\t\tmetricEvent.setMetric(KAFKA_LAG_METRIC_NAME);\n\t\t\t\t\tmetricEvent.setValue(lag);\n\t\t\t\t\tmetricEvent.setTimestamp(timestamp);\n\t\t\t\t\tkafkaLagTimes.put(key, currentOffset);", "CodeBleu_score": 37.20892585348305}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\tProperties props = buildKafkaProps();\n        ParameterTool parameterTool = getGlobalJobParameters(env);\n        Map<KafkaTopicPartition, Long> partitionOffset = buildOffsetByTime(props, parameterTool, time);\n        setStartFromSpecificOffsets(props, partitionOffset);\n        return addSource(env, props, topic);\n    }", "CodeBleu_score": 40.57535753638162}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\tParameterTool parameterTool = getConfig(env);\n        Properties props = buildKafkaProps();\n        Map<KafkaTopicPartition, Long> partitionOffset = buildOffsetByTime(props, parameterTool, time);\n        setStartFromSpecificOffsets(props, partitionOffset);\n        return addSource(env, topic, props);\n    }", "CodeBleu_score": 41.74536643257778}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\tParameterTool parameterTool = getConfig(env);\n        Properties props = buildKafkaProps(parameterTool);\n        FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(\n                topic,\n                new MetricEventSchema(),\n                props);\n        if (time != null) {\n            Map<KafkaTopicPartition, Long> partitionOffset = buildOffsetByTime(props, parameterTool, time);\n            setStartFromSpecificOffsets(consumer, partitionOffset);\n        }\n        return env.addSource(consumer);\n    }", "CodeBleu_score": 73.78539648375109}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\tString topic = parameterTool.get(\"topic\");\n    String groupId = \"kafka-streams-offset-\" + time;\n    props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n    KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props);\n    Map<String, List<PartitionInfo>> topicList = consumer.listTopics();\n    List<PartitionInfo> partitions = topicList.get(topic);\n    Map<KafkaTopicPartition, Long> partitionOffsetMap = new HashMap<>();\n    for (PartitionInfo partition : partitions) {\n        TopicPartition tp = new TopicPartition(topic, partition.partition());\n        consumer.assign(Collections.singletonList(tp));\n        consumer.seekToBeginning(Collections.singletonList(tp));\n        long offset = consumer.position(tp);\n        KafkaTopicPartition ktp = new KafkaTopicPartition(topic, partition.partition());\n        partitionOffsetMap.put(ktp, offset);\n    }\n    consumer.close();\n    return partitionOffsetMap;\n}", "CodeBleu_score": 45.34868085027185}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\tString groupId = parameterTool.getRequired(\"groupId\");\n    String topic = parameterTool.getRequired(\"topic\");\n    props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    Map<String, Object> adminConfigs = new HashMap<>();\n    adminConfigs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, props.getProperty(\"bootstrap.servers\"));\n    AdminClient adminClient = AdminClient.create(adminConfigs);\n    List<PartitionInfo> partitionInfos = adminClient.describeTopics(Collections.singletonList(topic)).all().get().get(topic).getPartitions();\n    Map<KafkaTopicPartition, Long> topicPartitionOffsets = new HashMap<>();\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        KafkaTopicPartition topicPartition = new KafkaTopicPartition(topic, partitionInfo.partition());\n        topicPartitionOffsets.put(topicPartition, time);\n    }\n    Map<KafkaTopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(topicPartitionOffsets);\n    for (Map.Entry<KafkaTopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n        OffsetAndTimestamp offsetAndTimestamp = entry.getValue();\n        if (offsetAndTimestamp != null) {\n            topicPartitionOffsets.put(entry.getKey(), offsetAndTimestamp.offset());\n        }\n    }\n    consumer.close();\n    return topicPartitionOffsets;\n}", "CodeBleu_score": 46.325481294196265}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t// set the group id\n\tprops.setProperty(\"group.id\", \"timestamp-\" + time);\n\n\t// create the consumer\n\tKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\n\t// get the topic and partition info\n\tString topic = parameterTool.getRequired(\"topic\");\n\tMap<KafkaTopicPartition, Long> topicPartitionOffsets = new HashMap<>();\n\ttry {\n\t\t// get the partitions for the topic\n\t\tList<PartitionInfo> partitions = consumer.partitionsFor(topic);\n\n\t\t// create a map of the partitions and the specified timestamp\n\t\tfor (PartitionInfo partition : partitions) {\n\t\t\ttopicPartitionOffsets.put(new KafkaTopicPartition(topic, partition.partition()), time);\n\t\t}\n\n\t\t// fetch the offsets for the given times\n\t\tMap<KafkaTopicPartition, Long> offsets = consumer.offsetsForTimes(topicPartitionOffsets);\n\n\t\t// close the consumer\n\t\tconsumer.close();\n\n\t\t// return the map of partition offsets\n\t\treturn offsets;\n\t} catch (Exception e) {\n\t\tSystem.err.println(\"Error while building offset by time: \" + e.getMessage());\n\t\tconsumer.close();\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 48.90411393786942}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\tProperties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"acks\", \"all\");\n    props.put(\"retries\", 0);\n    props.put(\"batch.size\", 16384);\n    props.put(\"linger.ms\", 1);\n    props.put(\"buffer.memory\", 33554432);\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    KafkaProducer<String, String> producer = new KafkaProducer<String, String>(props);\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setName(\"my.metric\");\n    metricEvent.setTimestamp(System.currentTimeMillis());\n    metricEvent.setTags(new HashMap<String, String>(){{put(\"host\", \"localhost\");}});\n    metricEvent.setFields(new HashMap<String, Object>(){{put(\"value\", 42);}});\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(\"my-topic\", metricEvent.toJson());\n    producer.send(record);\n    producer.flush();\n    System.out.println(\"sent: \" + metricEvent.toJson());\n}", "CodeBleu_score": 57.62782695116413}, {"code": "public static void writeToKafka() throws InterruptedException{\n\tProperties properties = new Properties();\n    properties.put(\"bootstrap.servers\", \"localhost:9092\");\n    properties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    properties.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    KafkaProducer<String, String> producer = new KafkaProducer<>(properties);\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setName(\"myMetric\");\n    metricEvent.setTimestamp(currentTimeMillis());\n    metricEvent.setTags(new HashMap<String, String>() {{\n        put(\"tag1\", \"value1\");\n        put(\"tag2\", \"value2\");\n    }});\n    metricEvent.setFields(new HashMap<String, Object>() {{\n        put(\"field1\", 123);\n        put(\"field2\", 456);\n    }});\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"myTopic\", metricEvent.toJson());\n    producer.send(record);\n    producer.flush();\n    println(\"Sent data: \" + metricEvent.toJson());\n}", "CodeBleu_score": 45.37587139090613}, {"code": "public static void writeToKafka() throws InterruptedException{\n\tProperties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n    MetricEvent event = new MetricEvent();\n    event.setName(\"cpu.usage\");\n    event.setTimestamp(System.currentTimeMillis());\n    event.setTags(new HashMap<String, String>() {\n        {\n            put(\"host\", \"host1\");\n        }\n    });\n    event.setFields(new HashMap<String, Object>() {\n        {\n            put(\"value\", 10);\n        }\n    });\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"metrics\", event.toJson());\n    producer.send(record);\n    producer.flush();\n    System.out.println(\"Sent: \" + record.value());\n}", "CodeBleu_score": 49.25597417468515}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\tif (event.getLevel().isMoreSpecificThan(level) && !event.getLoggerName().contains(loggerName)) {\n            try {\n                producer.send(new ProducerRecord<>(topic, subAppend(event)));\n            } catch (Exception e) {\n                log.warn(\"Failed to send log event to kafka topic({})\", topic, e);\n            }\n        }\n    }", "CodeBleu_score": 50.574256822706886}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\tif (event.getLevel().isMoreSpecificThan(Level.DEBUG) && !event.getLoggerName().contains(\"xxx\")) {\n        try {\n            producer.send(new ProducerRecord<>(topic, subAppend(event)));\n        } catch (Exception e) {\n            logger.warn(\"Error sending log event to Kafka topic({})\", topic, e);\n        }\n    }\n}", "CodeBleu_score": 48.62405564958344}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\tif (event.getLevel().isMoreSpecificThan(level) && !event.getLoggerName().contains(excludeLoggerName)) {\n            try {\n                String logMessage = subAppend(event);\n                if (logMessage != null) {\n                    producer.send(new ProducerRecord<>(topic, logMessage));\n                }\n            } catch (Exception e) {\n                log.warn(\"Error occurred while appending log event to the Kafka topic({})\", topic, e);\n            }\n        }\n    }", "CodeBleu_score": 45.84719113366592}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\tfor _, m := range validTopicSuffixMethods {\n\t\tif m == method {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 78.70740280358251}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\tfor _, m := range ValidTopicSuffixMethods {\n\t\tif m == method {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 81.18407319800458}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\tvalidMethods := []string{\n\t\t\"\",\n\t\t\"first\",\n\t\t\"last\",\n\t\t\"random\",\n\t}\n\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 79.40748129925176}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\tif k.RoutingTag != \"\" {\n\t\tif value, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn value, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tu, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn u.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 86.8926737029127}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\tif k.RoutingTag != \"\" {\n\t\tif v, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn v, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tu, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn u.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 86.92115694080843}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\tif k.RoutingTag != \"\" {\n\t\tkey, ok := metric.GetTag(k.RoutingTag)\n\t\tif ok {\n\t\t\treturn key, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\treturn uuid.NewV4().String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 64.93612697084188}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t// Initialize the regexps slice based on the length of the TopicRegexps list.\n\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\t// Loop through each regular expression string.\n\tfor i, r := range k.TopicRegexps {\n\t\t// Attempt to compile the regular expression.\n\t\tregexp, err := regexp.Compile(r)\n\t\t// If compilation fails, return an error with details about the specific regular expression.\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic regexp %s: %s\", r, err)\n\t\t}\n\t\t// If successful, add the compiled regular expression to the regexps slice.\n\t\tk.regexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 62.76521413754465}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\tk.topicRegexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, r := range k.TopicRegexps {\n\t\tre, err := regexp.Compile(r)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic regexp %q: %v\", r, err)\n\t\t}\n\t\tk.topicRegexps[i] = re\n\t}\n\treturn nil\n}", "CodeBleu_score": 63.73047364150326}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\tk.topicRegexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, r := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(r)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic regexp %q: %w\", r, err)\n\t\t}\n\t\tk.topicRegexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 62.1119489142226}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\th.mu.Lock()\n\tmsg, ok := h.undelivered[track.ID]\n\tif !ok {\n\t\th.mu.Unlock()\n\t\treturn\n\t}\n\tdelete(h.undelivered, track.ID)\n\th.mu.Unlock()\n\n\tmsg.session.MarkMessage(msg, track)\n\tif track.Delivered() {\n\t\th.log.Errorf(\"Message delivery failed: %s\", track.Error())\n\t}\n\n\th.sem <- struct{}{}\n}", "CodeBleu_score": 62.0054424930975}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\th.mu.Lock()\n\tmsg, ok := h.undelivered[track.ID]\n\tif !ok {\n\t\th.mu.Unlock()\n\t\treturn\n\t}\n\n\tdelete(h.undelivered, track.ID)\n\th.semaphore.Release(1)\n\th.mu.Unlock()\n\n\tif msg.session.MarkMessage(msg.message, track.Delivery) {\n\t\ttrack.Delivered()\n\t} else {\n\t\th.log.Errorf(\"Failed to mark message delivered: %v\", track.Error)\n\t}\n}", "CodeBleu_score": 59.95216579687819}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\th.mu.Lock()\n\tmsg, ok := h.undelivered[track.ID]\n\tif ok {\n\t\tdelete(h.undelivered, track.ID)\n\t\th.semaphore <- struct{}{}\n\t}\n\th.mu.Unlock()\n\n\tif ok {\n\t\terr := msg.session.MarkMessage(msg.message, \"\")\n\t\tif err != nil {\n\t\t\th.log.Errorf(\"Failed to mark message as delivered: %v\", err)\n\t\t}\n\t}\n}", "CodeBleu_score": 57.4328518432348}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\tctx := session.Context()\n\n\t// Loop until the context is done or the claim is closed.\n\tfor {\n\t\t// Check if the context is done.\n\t\tif ctx.Err() != nil {\n\t\t\treturn ctx.Err()\n\t\t}\n\n\t\t// Check if the claim is closed.\n\t\tif claim.Closed() {\n\t\t\treturn nil\n\t\t}\n\n\t\t// Attempt to reserve capacity to process a message.\n\t\tif err := h.Reserve(ctx); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Wait for a message or context cancellation.\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase message := <-claim.Messages():\n\t\t\t// Handle the message.\n\t\t\tif err := h.Handle(ctx, message); err != nil {\n\t\t\t\th.acc.AddError(err)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 72.16949338750777}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\tctx := session.Context()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase message := <-claim.Messages():\n\t\t\tif err := h.Reserve(ctx, message); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif err := h.Handle(ctx, message); err != nil {\n\t\t\t\th.acc.AddError(err)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 69.91514686821822}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\tctx := h.Context(session)\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase msg, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif err := h.Handle(ctx, msg); err != nil {\n\t\t\t\th.acc.AddError(err)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 62.32265396375709}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\tcheckCondition(logkafka_id != null, IllegalCharacterInLogkafkaId)\n  checkCondition(logkafka_id != \"\", IllegalCharacterInLogkafkaId)\n  checkCondition(!logkafka_id.equals(\".\"), IllegalCharacterInLogkafkaId)\n  checkCondition(!logkafka_id.equals(\"..\"), IllegalCharacterInLogkafkaId)\n  checkCondition(logkafka_id.length <= 255, IllegalCharacterInLogkafkaId)\n  val rgx = \"\"\"^[A-Za-z0-9._-]+$\"\"\".r\n  checkCondition(rgx.findFirstIn(logkafka_id).isDefined, IllegalCharacterInLogkafkaId)\n}", "CodeBleu_score": 41.02114743742666}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\tval rgx = \"\"\"^[a-zA-Z0-9_-]+$\"\"\".r\n  val t = rgx.findFirstIn(logkafka_id)\n  if (t.isEmpty) {\n    checkCondition(false, IllegalCharacterInLogkafkaId(logkafka_id))\n  } else if (logkafka_id.equals(\".\")) {\n    checkCondition(false, IllegalLogkafkaId(logkafka_id))\n  } else if (logkafka_id.equals(\"..\")) {\n    checkCondition(false, IllegalLogkafkaId(logkafka_id))\n  } else if (logkafka_id.length > 255) {\n    checkCondition(false, LogkafkaIdTooLong(logkafka_id))\n  } else {\n    checkCondition(true, NoError)\n  }\n}", "CodeBleu_score": 33.85412063399836}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\tval rgx = \"\"\"^[a-zA-Z0-9\\._\\-]+$\"\"\".r\n    val t = rgx.findFirstIn(logkafka_id)\n    checkCondition(t.equals(logkafka_id), IllegalCharacterInLogkafkaId)\n    checkCondition(!logkafka_id.equals(\".\"), IllegalCharacterInLogkafkaId)\n    checkCondition(!logkafka_id.equals(\"..\"), IllegalCharacterInLogkafkaId)\n    checkCondition(logkafka_id.length <= 255, IllegalCharacterInLogkafkaId)\n  }", "CodeBleu_score": 27.70419905985903}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\tsystem.actorSelection(kafkaManagerActor).ask(msg).map {\n        case err: ActorErrorResponse => \n          error(s\"Failed on input : $msg\")\n          -\\/(ApiError.from(err))\n        case o: Output =>\n          Try {\n            fn(o)\n          } match {\n            case Failure(t) => \n              error(s\"Failed on input : $msg\")\n              -\\/(ApiError.fromThrowable(t))\n            case Success(foutput) => \\/-(foutput)\n          }\n      }.recover", "CodeBleu_score": 67.60113755241548}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\tsystem.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse => \n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        Try {\n          fn(o)\n        } match {\n          case Failure(t) => \n            error(s\"Failed on input : $msg\")\n            -\\/(ApiError.fromThrowable(t))\n          case Success(foutput) => \\/-(foutput)\n        }\n    }.recover\n    {\n      case t: Throwable =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 81.44267003075895}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\tsystem.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse => \n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        Try {\n          fn(o)\n        } match {\n          case Failure(t) => \n            error(s\"Failed on input : $msg\")\n            -\\/(ApiError.fromThrowable(t))\n          case Success(foutput) => \\/-(foutput)\n        }\n    }.recover", "CodeBleu_score": 67.35222040981212}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\tsystem.actorSelection(kafkaManagerActor).ask(msg).flatMap {\n      case err: ActorErrorResponse => Future.successful(-\\/(ApiError.from(err)))\n      case o: Output =>\n        fn(o)\n    }.recover {\n      case t: Throwable => -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 74.89469154020098}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\tsystem.actorSelection(kafkaManagerActor).ask(msg).flatMap {\n      case err: ActorErrorResponse => Future.successful(-\\/(ApiError.from(err)))\n      case o: Output =>\n        fn(o)\n    }.recover {\n      case t: Throwable => -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 74.89469154020098}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\tsystem.actorSelection(kafkaManagerActor).ask(msg).flatMap {\n      case err: ActorErrorResponse => Future.successful(-\\/(ApiError.from(err)))\n      case o: Output =>\n        fn(o)\n    }.recover {\n      case t: Throwable => -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 74.89469154020098}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\tval kmCommandRequest = KMClusterCommandRequest(clusterName, KMClusterCommandRequest.RunPreferredLeaderElection(topics))\n    kafkaManagerActor.ask(kmCommandRequest).mapTo[KMCommandResult[ApiError, ClusterContext]] map {\n      case KMCommandSuccess(result) => \\/-(result)\n      case KMCommandFailure(error) => -\\/(error)\n    }\n  }", "CodeBleu_score": 21.816153369937002}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\tval command = PreferredReplicaLeaderElectionCommand(clusterName, topics)\n    val request = KMCommandRequest(command, KMCommandRequest.RunPreferredLeaderElection)\n    sendCommandRequest(request)\n  }", "CodeBleu_score": 20.01120084090943}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\tval request = KMClusterCommandRequest(clusterName, KMCommandRequest.RunPreferredLeaderElection(topics))\n    kafkaManagerActor.ask(request).mapTo[ApiError \\/ ClusterContext]\n  }", "CodeBleu_score": 20.11638742043593}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\timplicit val ec = apiExecutionContext\n    getTopicList(clusterName).flatMap(errorOrTopicList => errorOrTopicList.fold(\n      error => Future.successful(-\\/(error)),\n      topicList => runPreferredLeaderElection(clusterName, topicList.list.toSet)\n    ))\n  }", "CodeBleu_score": 69.53447864717887}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\timplicit val ec = apiExecutionContext\n    getTopicList(clusterName).flatMap { errorOrTopicList =>\n      errorOrTopicList.fold(\n        error => Future.successful(-\\/(error)),\n        topicList => runPreferredLeaderElection(clusterName, topicList.list.toSet)\n      )\n    }\n  }", "CodeBleu_score": 74.96740967245462}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\timplicit val ec = apiExecutionContext\n    getTopicList(clusterName).flatMap {\n      errorOrTopicList =>\n        errorOrTopicList.fold(\n          error => Future.successful(-\\/(error)),\n          topicList => runPreferredLeaderElection(clusterName, topicList.list.toSet)\n        )\n    }\n  }", "CodeBleu_score": 73.92357299856425}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\timplicit val ec = apiExecutionContext\n    val results = tryWithKafkaManagerActor(\n      KMClusterCommandRequest (\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    )\n    results.map {\n      case \\/-(r) =>\n        r.result.collect {\n          case Left(e) => e\n        }.headOption.map(e => ApiError.from(e)).getOrElse(ApiError.from(KMError.KMErrorUnknown()))\n      case -\\/(e) => e\n    }\n  }", "CodeBleu_score": 47.58788130958678}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\timplicit val ec = apiExecutionContext\n  val results = tryWithKafkaManagerActor(\n      KMClusterCommandRequest (\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    )\n    {\n      case CMCommandResult(result) =>\n        result.result.collect {\n          case Left(err) => err\n        }.headOption\n    }\n    .map(_.toList)\n  results.map {\n    case Nil => ApiError.Unit\n    case errors => ApiError.from(errors.head)\n  }\n}", "CodeBleu_score": 49.701659077370195}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\timplicit val ec = apiExecutionContext\n    system.actorSelection(kafkaManagerActor).ask(\n      KMClusterCommandRequest (\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    ).map {\n      case err: ActorErrorResponse => \n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        Try {\n          fn(o)\n        } match {\n          case Failure(t) => \n            error(s\"Failed on input : $msg\")\n            -\\/(ApiError.fromThrowable(t))\n          case Success(foutput) => \\/-(foutput)\n        }\n    }.recover { case t: Throwable =>\n      error(s\"Failed on input : $msg\", t)\n      -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 36.033440553997956}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t// Describe the cluster to get the available nodes\n  DescribeClusterResult describeClusterResult = admin.describeCluster();\n  // Wait up to 10 seconds for the result\n  Collection<Node> nodes = describeClusterResult.nodes().get(10, TimeUnit.SECONDS);\n  // If no nodes are available, throw an exception\n  if (nodes.isEmpty()) {\n    throw new ConnectException(\"No Kafka nodes found in cluster.\");\n  }\n  // Select the first node's ID\n  int nodeId = nodes.iterator().next().id();\n  // Request the configuration for the node\n  Config config = admin.describeConfigs(Collections.singleton(new Node(nodeId, \"localhost\"))).all().get().values().iterator().next().get();\n  // If no configurations are received, throw an exception\n  if (config.entries().isEmpty()) {\n    throw new ConnectException(\"No Kafka broker configuration found for node \" + nodeId + \".\");\n  }\n  return config;\n}", "CodeBleu_score": 53.55130497416853}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\tfinal List<Node> nodes = describeCluster(admin, 10000);\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"Couldn't find any nodes\");\n    }\n    final Config config = getBrokerConfig(admin, nodes.get(0).id());\n    if (config.isEmpty()) {\n        throw new ConnectException(\"Couldn't find any configs\");\n    }\n    return config;\n}", "CodeBleu_score": 31.20396266997243}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\tlog.info(\"describing cluster to get broker ids\");\n}", "CodeBleu_score": 3.90090095839508}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\treturn new Validator() {\n    @Override\n    public ValidationResult validate(final String name, final Map<String, Object> parsedConfig) {\n      if (isKafkaSchemaHistory(parsedConfig)) {\n        return validator.validate(name, parsedConfig);\n      }\n      return new ValidationResult();\n    }\n  };\n}", "CodeBleu_score": 24.210287171757084}, {"code": "private static Validator forKafka(final Validator validator){\n\treturn (name, value) -> {\n        if (SchemaHistory.forName(getString(name, value)).equals(SchemaHistory.KAFKA)) {\n            return validator.validate(name, value);\n        }\n        return Collections.emptyList();\n    };\n}", "CodeBleu_score": 27.0108882070898}, {"code": "private static Validator forKafka(final Validator validator){\n\treturn (config, originals) -> {\n    final String schemaHistory = config.getString(SCHEMA_HISTORY_CLASS_CONFIG);\n    if (KafkaSchemaHistory.class.getName().equals(schemaHistory)) {\n      return validator.validate(config, originals);\n    }\n    return Collections.emptyList();\n  };\n}", "CodeBleu_score": 44.16136916584773}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\tif (topicCreationEnabled == null) {\n            topicCreationEnabled = true;\n            String version = getVersion();\n            if (version != null) {\n                Version kafkaVersion = Version.parseVersion(version);\n                if (kafkaVersion.compareTo(MIN_TOPIC_CREATION_VERSION) < 0) {\n                    topicCreationEnabled = false;\n                }\n            }\n            if (config != null) {\n                Object topicCreationEnableObj = config.get(TOPIC_CREATION_ENABLE_CONFIG);\n                if (topicCreationEnableObj != null) {\n                    topicCreationEnabled = parseBoolean(topicCreationEnableObj);\n                }\n            }\n        }\n        return topicCreationEnabled;\n    }", "CodeBleu_score": 35.970996267606054}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\tif (topicCreationEnabled == null) {\n        topicCreationEnabled = Boolean.valueOf(getString(config, \"topic.creation.enable\", \"true\"));\n    }\n    return topicCreationEnabled;\n}", "CodeBleu_score": 23.772583078670596}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\tif (topicCreationEnabled == null) {\n        topicCreationEnabled = true;\n        if (config.containsKey(TOPIC_CREATION_ENABLE_CONFIG)) {\n            topicCreationEnabled = parseBoolean(config.get(TOPIC_CREATION_ENABLE_CONFIG).toString(), true);\n        }\n        if (topicCreationEnabled) {\n            String version = getVersion();\n            if (version != null) {\n                Version connectVersion = parseVersion(version);\n                if (connectVersion.compareTo(MINIMUM_TOPIC_CREATION_VERSION) < 0) {\n                    topicCreationEnabled = false;\n                }\n            }\n        }\n    }\n    return topicCreationEnabled;\n}", "CodeBleu_score": 40.342451851369894}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\tfinal String clientId = \"kafka-connect-offset-backing-store\";\n        final Map<String, Object> adminConfig = new HashMap<>(config);\n        adminConfig.put(AdminClientConfig.CLIENT_ID_CONFIG, clientId);\n        final SharedTopicAdmin admin = new SharedTopicAdmin(adminConfig);\n        return new KafkaOffsetBackingStore(admin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 30.68246727321671}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\tfinal String clientId = config.getOrDefault(OFFSET_STORE_CLIENT_ID_CONFIG, \"kafka-connect-offset-backend\");\n        final Map<String, Object> adminConfig = new HashMap<>(config);\n        adminConfig.put(AdminClientConfig.CLIENT_ID_CONFIG, clientId);\n        final SharedTopicAdmin admin = new SharedTopicAdmin(adminConfig);\n        final Converter converter = converterForOffsetStore();\n        return new KafkaOffsetBackingStore(admin, clientId, converter);\n    }", "CodeBleu_score": 35.15252332191022}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\tfinal String clientId = config.get(KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG);\n        if (clientId == null)\n            throw new ConfigException(KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG, \"Missing required configuration \\\"\" + KafkaOffsetBackingStoreConfig.CLIENT_ID_CONFIG + \"\\\".\");\n\n        final Map<String, Object> adminConfig = new HashMap<>(config);\n        adminConfig.put(AdminClientConfig.CLIENT_ID_CONFIG, clientId + \"-admin\");\n\n        final String groupId = config.get(KafkaOffsetBackingStoreConfig.GROUP_ID_CONFIG);\n        if (groupId == null)\n            throw new ConfigException(KafkaOffsetBackingStoreConfig.GROUP_ID_CONFIG, \"Missing required configuration \\\"\" + KafkaOffsetBackingStoreConfig.GROUP_ID_CONFIG + \"\\\".\");\n        adminConfig.put(AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, config.get(KafkaOffsetBackingStoreConfig.OFFSET_COMMIT_TIMEOUT_MS_CONFIG));\n\n        final String topic = config.get(KafkaOffsetBackingStoreConfig.OFFSET_TOPIC_CONFIG);\n        if (topic == null)\n            throw new ConfigException(KafkaOffsetBackingStoreConfig.OFFSET_TOPIC_CONFIG, \"Missing required configuration \\\"\" + KafkaOffsetBackingStoreConfig.OFFSET_TOPIC_CONFIG + \"\\\".\");\n\n        final String offsetTopicReplicationFactor = config.get(KafkaOffsetBackingStoreConfig.OFFSET_TOPIC_REPLICATION_FACTOR_CONFIG);\n        if (offsetTopicReplicationFactor == null)\n            throw new ConfigException(KafkaOffsetBackingStoreConfig.OFFSET_TOPIC_REPLICATION_FACTOR_CONFIG, \"Missing required configuration \\\"\" + KafkaOffsetBackingStoreConfig.OFFSET_TOPIC_REPLICATION_FACTOR_CONFIG + \"\\\".\");\n\n        final String offsetTopicNumPartitions = config.get(KafkaOffsetBackingStoreConfig.OFFSET_TOPIC_NUM_PARTITIONS_CONFIG);\n        if (offsetTopicNum", "CodeBleu_score": 36.24580239268717}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\tJsonNode payload = node.get(PAYLOAD_FIELD);\n\n            // Schema + payload format\n            if (payload != null) {\n                node = payload;\n            }\n            // Debezium envelope\n            if (config.asEnvelope()) {\n                return reader.readValue(node);\n            }\n            // Extracted format\n            else {\n                JsonNode keyNode = node.get(config.keyField());\n                if (keyNode != null) {\n                    if (keyNode.isObject()) {\n                        Iterator<String> fieldNames = keyNode.fieldNames();\n                        if (fieldNames.hasNext()) {\n                            String fieldName = fieldNames.next();\n                            if (fieldNames.hasNext()) {\n                                throw new IOException(\"The key field is a composite key, but only a single field is expected\");\n                            }\n                            return reader.readValue(keyNode.get(fieldName));\n                        }\n                        else {\n                            throw new IOException(\"The key field is an object, but it doesn't contain any fields\");\n                        }\n                    }\n                    else {\n                        return reader.readValue(keyNode);\n                    }\n                }\n                else {\n                    throw new IOException(\"The key field is not present in the record\");\n                }\n            }\n        }", "CodeBleu_score": 39.5968394837176}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t// Schema + payload format\n        if (node.has(PAYLOAD_FIELD)) {\n            node = node.get(PAYLOAD_FIELD);\n        }\n\n        // Debezium envelope\n        if (config.asEnvelope()) {\n            return reader.readValue(node);\n        }\n        // Extracted format\n        else {\n            Iterator<String> fieldNames = node.fieldNames();\n            if (!fieldNames.hasNext()) {\n                throw new IllegalArgumentException(\"Invalid key: \" + node);\n            }\n            String fieldName = fieldNames.next();\n            if (!fieldNames.hasNext()) {\n                return reader.readValue(node.get(fieldName));\n            }\n            else {\n                return reader.readValue(node);\n            }\n        }\n    }", "CodeBleu_score": 47.855175886930525}, {"code": "private T readKey(JsonNode node) throws IOException{\n\tJsonNode payload = node.get(PAYLOAD_FIELD);\n\n        // Schema + payload format\n        if (payload != null) {\n            node = payload;\n        }\n        // Debezium envelope\n        if (config.asEnvelope()) {\n            return reader.readValue(node);\n        }\n        // Extracted format\n        else {\n            if (node.isObject()) {\n                Iterator<String> fieldNames = node.fieldNames();\n                if (fieldNames.hasNext()) {\n                    String fieldName = fieldNames.next();\n                    if (fieldNames.hasNext()) {\n                        return reader.readValue(node);\n                    }\n                    else {\n                        return reader.readValue(node.get(fieldName));\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return reader.readValue(node);\n            }\n        }\n    }", "CodeBleu_score": 41.40232962933928}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\tString topicName = topicNameFor(id, prefix, delimiter);\n    StringBuilder sanitizedTopicName = new StringBuilder();\n    boolean replaced = false;\n    for (int i = 0; i < topicName.length(); i++) {\n        char c = topicName.charAt(i);\n        if (isValidTopicNameCharacter(c)) {\n            sanitizedTopicName.append(c);\n        } else {\n            replaced = true;\n            sanitizedTopicName.append(replacementCharacter);\n        }\n    }\n    if (replaced) {\n        warn(\"The topic name \\\"\" + topicName + \"\\\" contains invalid characters and will be sanitized to \\\"\" + sanitizedTopicName + \"\\\"\");\n        return sanitizedTopicName.toString();\n    }\n    return topicName;\n}", "CodeBleu_score": 52.15953176658954}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\tString topicName = topicNameFor(id, prefix, delimiter);\n    StringBuilder sanitizedTopicName = new StringBuilder();\n    boolean replaced = false;\n    for (int i = 0; i < topicName.length(); i++) {\n        char c = topicName.charAt(i);\n        if (isValidTopicNameCharacter(c)) {\n            sanitizedTopicName.append(c);\n        } else {\n            replaced = true;\n            sanitizedTopicName.append(REPLACEMENT_CHARACTER);\n        }\n    }\n    if (replaced) {\n        warn(\"Sanitized topic name: \" + sanitizedTopicName);\n        return sanitizedTopicName.toString();\n    }\n    return topicName;\n}", "CodeBleu_score": 51.80054835566374}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\tString topicName = topicNameFor(id, prefix, delimiter);\n    StringBuilder sanitizedTopicName = new StringBuilder();\n    boolean replacementsMade = false;\n    for (int i = 0; i < topicName.length(); i++) {\n        char c = topicName.charAt(i);\n        if (isValidTopicNameCharacter(c)) {\n            sanitizedTopicName.append(c);\n        } else {\n            sanitizedTopicName.append(replacementChar);\n            replacementsMade = true;\n        }\n    }\n    if (replacementsMade) {\n        warn(\"Sanitizing topic name [\" + topicName + \"] to [\" + sanitizedTopicName + \"]\");\n        return sanitizedTopicName.toString();\n    }\n    return topicName;\n}", "CodeBleu_score": 53.691473848703474}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\tthis.connectorType = connectorType;\n        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.replacedErrorHandler = replacedErrorHandler;\n        this.producerThrowable = new AtomicReference<>();\n        this.retries = replacedErrorHandler != null ? replacedErrorHandler.getRetries() : getMaxRetriesOnError();\n    }", "CodeBleu_score": 56.09918655986732}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\tthis.connectorType = connectorType;\n        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.producerThrowable = new AtomicReference<>();\n        this.maxRetries = getMaxRetriesOnError(connectorConfig, replacedErrorHandler);\n    }", "CodeBleu_score": 49.58371391105329}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\tthis.connectorType = connectorType;\n        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.producerThrowable = new AtomicReference<>();\n        this.maxRetries = getMaxRetriesOnError(connectorConfig);\n        if (replacedErrorHandler != null) {\n            this.retries = replacedErrorHandler.retries;\n        }\n    }", "CodeBleu_score": 63.007455779427126}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\tMap<String, ConfigValue> validations = configuration.validate(fields);\n    for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n        if (!entry.getValue().errorMessages().isEmpty()) {\n            final ConfigValue value = entry.getValue();\n            throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 89.19656178059539}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\tMap<String, ConfigValue> validations = configuration.validate(fields);\n        for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n            if (!entry.getValue().errorMessages().isEmpty()) {\n                final ConfigValue value = entry.getValue();\n                throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n            }\n        }\n    }", "CodeBleu_score": 87.97814390228109}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\tMap<String, ConfigValue> validations = configuration.validate(fields);\n        for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n            if (!entry.getValue().errorMessages().isEmpty()) {\n                final ConfigValue value = entry.getValue();\n                throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n            }\n        }\n    }", "CodeBleu_score": 87.97814390228109}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\tif (oldSchema.type().isPrimitive()) {\n            return oldSchema;\n        }\n\n        // Get fields from original schema\n        SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n        for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n            if (isContainedIn(field.name(), nestedFields)) {\n\n                newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n            }\n            else {\n                newSchemabuilder.field(field.name(), field.schema());\n            }\n        }\n\n        LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n        for (int i = 0; i < headers.size(); i++) {\n\n            Header currentHeader = headerToProcess.get(headers.get(i));\n            Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n            LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n            if (currentFieldName.isPresent() && currentHeader != null) {\n                newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n            }\n        }\n        LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n        return newSchemabuilder.build();\n    }", "CodeBleu_score": 98.08193396445047}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\tif (oldSchema.type().isPrimitive()) {\n            return oldSchema;\n        }\n\n        // Get fields from original schema\n        SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n        for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n            if (isContainedIn(field.name(), nestedFields)) {\n\n                newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n            }\n            else {\n                newSchemabuilder.field(field.name(), field.schema());\n            }\n        }\n\n        LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n        for (int i = 0; i < headers.size(); i++) {\n\n            Header currentHeader = headerToProcess.get(headers.get(i));\n            Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n            LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n            if (currentFieldName.isPresent() && currentHeader != null) {\n                newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n            }\n        }\n        LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n        return newSchemabuilder.build();\n    }", "CodeBleu_score": 98.08193396445047}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\tif (oldSchema.type().isPrimitive()) {\n            return oldSchema;\n        }\n\n        // Get fields from original schema\n        SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n        for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n            if (isContainedIn(field.name(), nestedFields)) {\n\n                newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n            }\n            else {\n                newSchemabuilder.field(field.name(), field.schema());\n            }\n        }\n\n        LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n        for (int i = 0; i < headers.size(); i++) {\n\n            Header currentHeader = headerToProcess.get(headers.get(i));\n            Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n            LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n            if (currentFieldName.isPresent() && currentHeader != null) {\n                newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n            }\n        }\n        LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n        return newSchemabuilder.build();\n    }", "CodeBleu_score": 98.08193396445047}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\tif (source.schema().field(SNAPSHOT_KEY) == null) {\n    return null;\n  }\n  if (!source.schema().field(SNAPSHOT_KEY).schema().name().equals(SNAPSHOT_KEY)) {\n    return null;\n  }\n  String snapshotString = source.get(SNAPSHOT_KEY).toString();\n  if (snapshotString == null) {\n    return null;\n  }\n  return valueOf(snapshotString.toUpperCase());\n}", "CodeBleu_score": 44.57479695167744}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\tif (source == null) {\n        return null;\n    }\n    Schema schema = source.schema();\n    if (schema == null) {\n        return null;\n    }\n    Field field = schema.field(SNAPSHOT_KEY);\n    if (field == null) {\n        return null;\n    }\n    Object snapshotString = source.get(field);\n    if (snapshotString == null) {\n        return null;\n    }\n    return fromString(snapshotString.toString().toUpperCase());\n}", "CodeBleu_score": 38.85147890611832}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\tif (source == null) {\n        return null;\n    }\n    Field snapshotField = source.schema().field(SNAPSHOT_KEY);\n    if (snapshotField == null) {\n        return null;\n    }\n    Schema.Type type = snapshotField.schema().type();\n    if (type != Schema.Type.STRING) {\n        return null;\n    }\n    String snapshotString = source.getString(snapshotField.name());\n    if (snapshotString == null) {\n        return null;\n    }\n    return SnapshotRecord.fromString(snapshotString.toUpperCase());\n}", "CodeBleu_score": 44.70777770670179}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\tString[] parts = version.split(\"\\\\.\");\n  if (parts.length > 2) {\n    parts = Arrays.copyOf(parts, 2);\n  }\n  parts[0] = parts[0].split(\"-\")[0];\n  return Optional.of(Float.parseFloat(parts[0]));\n}", "CodeBleu_score": 52.755103035591375}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\ttry {\n        String[] parts = version.split(\"\\\\.\");\n        if (parts.length > 2) {\n            parts = Arrays.copyOf(parts, 2);\n        }\n        String[] hyphenParts = parts[1].split(\"-\");\n        return Optional.of(Float.parseFloat(hyphenParts[0]));\n    } catch (Exception e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 66.92687171089983}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t// Split the version by periods\n    String[] parts = version.split(\"\\\\.\");\n    // If there are more than two parts, only consider the first two\n    if (parts.length > 2) {\n        parts = Arrays.copyOf(parts, 2);\n    }\n    // Split the first part by hyphens\n    String[] subparts = parts[0].split(\"-\");\n    // Parse the first part as a Float\n    return Optional.of(Float.parseFloat(subparts[0]));\n}", "CodeBleu_score": 54.50144524589847}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\tvar context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.58555586174032}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\tvar context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.58555586174032}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\tvar context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.58555586174032}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\tvar context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.85009720428593}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\tvar context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 95.9811136499287}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\tvar context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.85009720428593}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\tConnectAction[] connectActions;\n  if (RESTART_ACTIONS.contains(action)) {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n  } else {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n  }\n\n  var context = AccessContext.builder()\n      .cluster(clusterName)\n      .connect(connectName)\n      .connectActions(connectActions)\n      .operationName(\"updateConnectorState\")\n      .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n      .build();\n\n  return validateAccess(context).then(\n      kafkaConnectService\n          .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n          .map(ResponseEntity::ok)\n  ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 99.30137884843364}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\tConnectAction[] connectActions;\n  if (RESTART_ACTIONS.contains(action)) {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n  } else {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n  }\n\n  var context = AccessContext.builder()\n      .cluster(clusterName)\n      .connect(connectName)\n      .connectActions(connectActions)\n      .operationName(\"updateConnectorState\")\n      .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n      .build();\n\n  return validateAccess(context).then(\n      kafkaConnectService\n          .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n          .map(ResponseEntity::ok)\n  ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 99.30137884843364}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\tConnectAction[] connectActions;\n  if (RESTART_ACTIONS.contains(action)) {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n  } else {\n    connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n  }\n\n  var context = AccessContext.builder()\n      .cluster(clusterName)\n      .connect(connectName)\n      .connectActions(connectActions)\n      .operationName(\"updateConnectorState\")\n      .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n      .build();\n\n  return validateAccess(context).then(\n      kafkaConnectService\n          .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n          .map(ResponseEntity::ok)\n  ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 99.30137884843364}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\treturn kafkaConnectService\n        .validateConnectorPluginConfig(\n            getCluster(clusterName), connectName, pluginName, requestBody)\n        .map(ResponseEntity::ok);\n  }", "CodeBleu_score": 46.08786320395695}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\treturn kafkaConnectService\n    .validateConnectorPluginConfig(\n      getCluster(clusterName), connectName, pluginName, requestBody)\n    .map(ResponseEntity::ok);\n}", "CodeBleu_score": 44.46334829416079}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\treturn kafkaConnectService\n      .validateConnectorPluginConfig(\n          getCluster(clusterName), connectName, pluginName, requestBody)\n      .map(ResponseEntity::ok);\n}", "CodeBleu_score": 45.37897689694335}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\treturn new SpringApplicationBuilder(KafkaUiApplication.class)\n        .initializers(dynamicConfigPropertiesInitializer())\n        .run(args);\n}", "CodeBleu_score": 43.293697626194536}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\tSpringApplicationBuilder builder = new SpringApplicationBuilder(KafkaUiApplication.class);\n    builder.initializers(new DynamicConfigPropertiesInitializer());\n    return builder.run(args);\n}", "CodeBleu_score": 45.28298385821009}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\tSpringApplicationBuilder builder = new SpringApplicationBuilder(KafkaUiApplication.class);\n    builder.initializers(dynamicConfigPropertiesInitializer());\n    return builder.run(args);\n}", "CodeBleu_score": 45.579862250733214}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\tif (search == null) {\n      return x -> true;\n    }\n    return x -> anyMatch(getStringsForSearch(x), s -> containsIgnoreCase(s, search));\n  }", "CodeBleu_score": 60.78497086506975}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\tif (search == null) {\n      return anyMatch;\n    }\n\n    return connector -> getStringsForSearch(connector).anyMatch(s -> s.containsIgnoreCase(search));\n  }", "CodeBleu_score": 57.66610913420593}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\tif (search == null) {\n      return anyMatch;\n    }\n    return fullConnectorInfo -> getStringsForSearch(fullConnectorInfo).anyMatch(s -> s.containsIgnoreCase(search));\n  }", "CodeBleu_score": 54.727900527508375}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\tMap<String, Object> flattenedProperties = new HashMap<>();\n    if (propertiesMap != null) {\n      for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n        String key = entry.getKey();\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n          flattenedProperties.putAll(flattenClusterProperties(prefix == null ? key : prefix + \".\" + key, (Map<String, Object>) value));\n        } else {\n          flattenedProperties.put((prefix == null ? key : prefix + \".\" + key), value);\n        }\n      }\n    }\n    return flattenedProperties;\n  }", "CodeBleu_score": 49.99661709501383}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\tMap<String, Object> flattenedMap = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattenedMap;\n    }\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (prefix == null) {\n        key = key.replaceAll(\"^[\\\\.]\", \"\");\n      } else {\n        key = prefix + \".\" + key;\n      }\n      if (value instanceof Map) {\n        flattenedMap.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        flattenedMap.put(key, value);\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 50.37202456406358}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\tif (propertiesMap == null) {\n      return null;\n    }\n\n    Map<String, Object> flattened = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      String newPrefix = prefix == null ? key : prefix + \".\" + key;\n\n      if (value instanceof Map) {\n        flattened.putAll(flattenClusterProperties(newPrefix, (Map<String, Object>) value));\n      } else {\n        flattened.put(newPrefix, value);\n      }\n    }\n\n    return flattened;\n  }", "CodeBleu_score": 56.91225843779853}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\tdef configDef = new ConfigDef()\n  configDef.define(SSL_KEY_PASSWORD_CONFIG, Type.PASSWORD, Importance.HIGH, null)\n  configDef.define(SSL_KEYSTORE_PASSWORD_CONFIG, Type.PASSWORD, Importance.HIGH, null)\n  configDef.define(SSL_TRUSTSTORE_PASSWORD_CONFIG, Type.PASSWORD, Importance.HIGH, null)\n  configDef.define(SASL_JAAS_CONFIG, Type.PASSWORD, Importance.HIGH, null)\n  configDef.configKeys().findAll { it.type() == Type.PASSWORD }.collect { it.name() }\n}", "CodeBleu_score": 32.27401023585914}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\tConfigDef configDef = new ConfigDef();\n        addClientSslSupport(configDef);\n        addClientSaslSupport(configDef);\n        return configDef.configKeys().entrySet().stream().filter(e -> e.getValue().type == ConfigDef.Type.PASSWORD).map(e -> e.getKey()).collect(Collectors.toSet());\n    }", "CodeBleu_score": 64.9821933533835}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\tfinal ConfigDef configDef = new ConfigDef();\n  addClientSslSupport(configDef);\n  addClientSaslSupport(configDef);\n  return configDef.configKeys().entrySet().stream()\n    .filter(e -> e.getValue().type == ConfigDef.Type.PASSWORD)\n    .map(e -> e.getKey())\n    .collect(Collectors.toSet());\n}", "CodeBleu_score": 71.03492756022402}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\treturn adminClient.getAuthorizedOperations(clusterDescription.nodes().get(0).idString())\n        .map(authorizedOperations -> {\n            if (authorizedOperations.contains(AuthorizedOperations.ALTER) && authorizedOperations.contains(AuthorizedOperations.ALL)) {\n                return ClusterFeature.KAFKA_ACL_EDIT;\n            }\n            return null;\n        }).filter(Objects::nonNull);\n}", "CodeBleu_score": 31.90099514085635}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\treturn Mono.just(adminClient.getAuthorizedOperations(clusterDescription.getAuthorizedOperations()))\n            .filter(authorizedOperations -> aclViewEnabled(adminClient))\n            .filter(authorizedOperations -> authorizedOperations.contains(AuthorizedOperations.ALTER) || authorizedOperations.contains(AuthorizedOperations.ALL))\n            .map(authorizedOperations -> ClusterFeature.KAFKA_ACL_EDIT);\n}", "CodeBleu_score": 36.57571375963326}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\treturn Mono.just(clusterDescription.getAuthorizedOperations())\n        .filter(authorizedOperations -> authorizedOperations.contains(AclOperation.ALTER) || authorizedOperations.contains(AclOperation.ALL))\n        .filter(authorizedOperations -> aclViewEnabled(adminClient))\n        .map(authorizedOperations -> ClusterFeature.KAFKA_ACL_EDIT);\n  }", "CodeBleu_score": 39.37399001401376}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t", "CodeBleu_score": 3.709413387662834}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\tTreeMap<TopicPartition, FromToOffset> range = new TreeMap<>();\n  // initialize the range with the previous range\n  range.putAll(prevRange);\n  // initialize the range with the offsets from seek operations\n  for (SeekOperation seekOperation : seekOperations) {\n    range.put(seekOperation.getTopicPartition(), new FromToOffset(seekOperation.getOffset(), seekOperation.getOffset()));\n  }\n  // calculate the number of messages to poll per partition\n  int numMessagesToPoll = (int) Math.ceil(\n      (double) getBatchSize() / (double) range.size());\n  // for each topic partition, determine the start offset and adjust it based on the number of messages to poll\n  for (TopicPartition topicPartition : range.keySet()) {\n    FromToOffset fromToOffset = range.get(topicPartition);\n    long beginOffset = fromToOffset.getBeginOffset();\n    long endOffset = fromToOffset.getEndOffset();\n    long adjustedBeginOffset = beginOffset;\n    long adjustedEndOffset = endOffset;\n    if (beginOffset == 0) {\n      // if the beginning offset is 0, then we need to determine the beginning offset\n      adjustedBeginOffset = getBeginOffsets(Collections.singleton(topicPartition)).get(topicPartition);\n    }\n    if (numMessagesToPoll > 0) {\n      // if the number of messages to poll is greater than 0, then we need to adjust the end offset\n      adjustedEndOffset = Math.min(adjustedBeginOffset + numMessagesToPoll, endOffset);\n    }\n    range.put(topicPartition, new FromToOffset(adjustedBeginOffset, adjustedEndOffset));\n  }\n  return range;\n}", "CodeBleu_score": 35.20211720889045}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t// Initialize the map of topic partitions to poll from\n    Map<TopicPartition, FromToOffset> pollingRange = new HashMap<>(prevRange);\n    // For each topic partition, calculate the number of messages to poll and adjust the start offset accordingly\n    for (Map.Entry<TopicPartition, FromToOffset> entry : pollingRange.entrySet()) {\n        TopicPartition topicPartition = entry.getKey();\n        FromToOffset prevOffsetRange = entry.getValue();\n        // Get the number of messages to poll for this topic partition\n        long messagesToPoll = getMessagesToPoll(topicPartition);\n        // If we have a previous range, get the start offset from it\n        long startOffset = prevOffsetRange.getFrom();\n        // If we don't have a previous range, get the start offset from the seek operations\n        if (startOffset == 0) {\n            startOffset = seekOperations.getOffsetsForSeek(topicPartition).getFrom();\n        }\n        // Adjust the start offset to ensure we don't go below the beginning offset\n        long adjustedStartOffset = Math.max(startOffset, getBeginOffsets(topicPartition).getFrom());\n        // Calculate the end offset to poll to\n        long endOffset = adjustedStartOffset + messagesToPoll - 1;\n        // If the end offset is greater than the end offset of the topic partition, adjust it to the end offset of the partition\n        if (endOffset > getEndOffsets(topicPartition).getTo()) {\n            endOffset = getEndOffsets(topicPartition).getTo();\n        }\n        // Set the polling range for this topic partition\n        pollingRange.put(topicPartition, new FromToOffset(adjustedStartOffset, endOffset));\n    }\n    return new TreeMap<>(pollingRange);\n}", "CodeBleu_score": 34.5054182260292}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t// check if legacy mode is enabled\n        if (configuration.getBoolean(CK_LEGACY_MODE)) {\n            LOG.warn(\"Legacy mode is enabled, please migrate to the new consumer mode.\");\n            if (configuration.has(CK_ZOOKEEPER)) {\n                // check if the legacy mode is enabled and a zookeeper server is specified\n                // this is an error\n                throw new IllegalArgumentException(\n                        \"Legacy mode is enabled, but a ZooKeeper server is specified. Please remove the ZooKeeper server setting.\");\n            }\n            if (!configuration.has(CK_BOOTSTRAP)) {\n                // check if the legacy mode is enabled and a bootstrap server is not specified\n                // this is an error\n                throw new IllegalArgumentException(\n                        \"Legacy mode is enabled, but a bootstrap server is not specified. Please specify a bootstrap server.\");\n            }\n            doLaunchLegacy(input);\n        } else {\n            // check if the legacy mode is enabled and a bootstrap server is specified\n            // this is an error\n            if (configuration.has(CK_ZOOKEEPER)) {\n                throw new IllegalArgumentException(\n                        \"Legacy mode is not enabled, but a ZooKeeper server is specified. Please remove the ZooKeeper server setting.\");\n            }\n            if (!configuration.has(CK_BOOTSTRAP)) {\n                // check if the legacy mode is enabled and a bootstrap server is not specified\n                // this is an error\n                throw new IllegalArgumentException(\n                        \"Legacy mode is not enabled, but a bootstrap server is not specified. Please specify a bootstrap server.\");\n            }\n            doLaunchConsumer(input);\n        }\n\n        // wait for the server to be running\n        awaitRunning();\n\n        // register for lifecycle events\n        lifecycle.register(this);\n\n        // schedule a task to update the last second bytes read every second\n        scheduledExecutor.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead = lastSecBytesReadTmp.getAndSet(0);\n            }\n        }, 1, 1, TimeUnit.SE", "CodeBleu_score": 37.644895809313795}, {"code": "public void doLaunch(final MessageInput input){\n\tif (isLegacyMode()) {\n            if (configuration.getString(CK_BOOTSTRAP).isEmpty()) {\n                throw new IllegalStateException(\n                        \"Bootstrap servers must be specified when using legacy mode.\");\n            }\n            doLaunchLegacy(input);\n        } else {\n            if (configuration.getString(CK_ZOOKEEPER).isEmpty()) {\n                throw new IllegalStateException(\"Zookeeper must be specified when not using legacy mode.\");\n            }\n            doLaunchConsumer(input);\n        }\n\n        // wait for the server to be running, then register for lifecycle events\n        try {\n            serverLatch.await();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"Interrupted while waiting for server to start.\", e);\n        }\n        server.register(this);\n\n        // schedule the last second bytes read update\n        final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n        scheduler.scheduleAtFixedRate(\n                new Runnable() {\n                    @Override\n                    public void run() {\n                        lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n                    }\n                },\n                1,\n                1,\n                TimeUnit.SECONDS);\n    }", "CodeBleu_score": 37.11565851535184}, {"code": "public void doLaunch(final MessageInput input){\n\tif (configuration.getBoolean(CK_LEGACY_MODE)) {\n        if (configuration.getString(CK_BOOTSTRAP) != null) {\n            throw new IllegalArgumentException(\"Bootstrap servers cannot be set when legacy mode is enabled.\");\n        }\n        if (configuration.getString(CK_ZOOKEEPER) == null) {\n            throw new IllegalArgumentException(\"Zookeeper must be set when legacy mode is enabled.\");\n        }\n\n        doLaunchLegacy(input);\n    } else {\n        if (configuration.getString(CK_ZOOKEEPER) != null) {\n            throw new IllegalArgumentException(\"Zookeeper cannot be set when legacy mode is disabled.\");\n        }\n        if (configuration.getString(CK_BOOTSTRAP) == null) {\n            throw new IllegalArgumentException(\"Bootstrap servers must be set when legacy mode is disabled.\");\n        }\n\n        doLaunchConsumer(input);\n    }\n\n    // wait for the server to be running\n    awaitRunning();\n\n    // register for lifecycle events\n    lifecycle.register(this);\n\n    // schedule a task to update the last second bytes read every second\n    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n    scheduler.scheduleAtFixedRate(new Runnable() {\n        @Override\n        public void run() {\n            lastSecBytesRead = lastSecBytesReadTmp.getAndSet(0);\n        }\n    }, 1, 1, TimeUnit.SECONDS);\n}", "CodeBleu_score": 46.880610294259824}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\tString customProperties = System.getProperty(\"com.sun.management.jmxremote.custom.properties\");\n    if (customProperties != null) {\n        try {\n            Properties customProps = new Properties();\n            customProps.load(new StringReader(customProperties));\n            props.putAll(customProps);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"Failed to load custom properties\", e);\n        }\n    }\n}", "CodeBleu_score": 45.27224557316568}, {"code": "private void insertCustomProperties(Properties props){\n\ttry {\n        Properties customProps = new Properties();\n        String customPropsString = System.getProperty(CUSTOM_PROPERTIES_STRING);\n        if (customPropsString != null) {\n            customProps.load(new ByteArrayInputStream(customPropsString.getBytes(StandardCharsets.UTF_8)));\n        }\n        props.putAll(customProps);\n    } catch (IOException e) {\n        logger.error(\"Unable to load custom properties from string\", e);\n    }\n}", "CodeBleu_score": 45.91108752755547}, {"code": "private void insertCustomProperties(Properties props){\n\ttry {\n        Properties customProps = new Properties();\n        customProps.load(new ByteArrayInputStream(getBytes(getCustomProperties())));\n        props.putAll(customProps);\n    } catch (IOException e) {\n        error(\"Error while loading custom properties: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 37.740898348031116}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\tif (entries.isEmpty()) {\n        return;\n    }\n\n    final long startTime = System.nanoTime();\n    final long startBytes = getTotalMessageBytes(entries);\n    final List<Journal.Entry> journalEntries = toJournalEntries(entries);\n\n    LOG.debug(\"Writing batch to journal, batch size: {}, total message bytes: {}.\",\n            journalEntries.size(), startBytes);\n\n    boolean success = false;\n    int attempt = 0;\n    while (!success) {\n        try {\n            writeToJournal(journalEntries);\n            success = true;\n        } catch (JournalException e) {\n            LOG.error(\"Failed to write batch to journal, retrying.\", e);\n            attempt++;\n            if (attempt >= RETRY_LIMIT) {\n                throw new MessageQueueException(String.format(\"Failed to write batch to journal after %d attempts.\",\n                        attempt), e);\n            }\n            try {\n                Thread.sleep(RETRY_BACKOFF_MS * attempt);\n            } catch (InterruptedException e1) {\n                Thread.currentThread().interrupt();\n                throw new MessageQueueException(\"Interrupted while writing to journal.\", e1);\n            }\n        }\n    }\n\n    final long endTime = System.nanoTime();\n    final long endBytes = getTotalMessageBytes(entries);\n    final long duration = TimeUnit.NANOSECONDS.toMillis(endTime - startTime);\n\n    LOG.debug(\"Successfully wrote batch to journal, batch size: {}, total message bytes: {}, duration: {}.\",\n            journalEntries.size(), endBytes, duration);\n\n    writtenMessages.mark(journalEntries.size());\n    writtenBytes.mark(endBytes - startBytes);\n}", "CodeBleu_score": 36.383000737364604}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\tif (entries.isEmpty()) {\n            LOG.debug(\"No entries to write, skipping.\");\n            return;\n        }\n\n        long totalMessageBytes = 0;\n        final List<Journal.Entry> journalEntries = new ArrayList<Journal.Entry>(entries.size());\n        for (RawMessageEvent entry : entries) {\n            if (entry == null) {\n                continue;\n            }\n            final byte[] messageBytes = entry.getEncodedRawMessage();\n            final Journal.Entry journalEntry = new Journal.Entry(\n                    entry.getEncodedRawMessage(),\n                    entry.getMessageIdBytes());\n            journalEntries.add(journalEntry);\n            totalMessageBytes += messageBytes.length;\n        }\n\n        // Attempt to write the entries to the journal.\n        final long startTime = System.nanoTime();\n        boolean success = false;\n        int retries = 0;\n        while (!success) {\n            try {\n                writeToJournal(journalEntries);\n                success = true;\n            } catch (JournalException e) {\n                if (retries >= MAX_RETRIES) {\n                    throw new MessageQueueException(\"Failed to write to journal after \" + retries + \" retries.\", e);\n                }\n                final long backoff = (long) Math.pow(2, retries) * BACKOFF_MS;\n                LOG.warn(\"Failed to write to journal, retrying in \" + backoff + \"ms.\", e);\n                try {\n                    Thread.sleep(backoff);\n                } catch (InterruptedException e1) {\n                    Thread.currentThread().interrupt();\n                    throw new MessageQueueException(\"Interrupted while waiting to retry writing to journal.\", e);\n                }\n                retries++;\n            }\n        }\n\n        // Update the metrics.\n        final long elapsedTime = System.nanoTime() - startTime;\n        final double elapsedTimeMs = (double) elapsedTime / 1000000.0;\n        final double messagesPerSecond = (double) entries.size() / elapsedTimeMs * 1000.0;\n        final double bytesPer", "CodeBleu_score": 39.415178974929354}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t// \u8fc7\u6ee4null\n    entries = filter(entries);\n    // \u8ba1\u7b97\u6d88\u606f\u5b57\u8282\n    final int totalMessageBytes = map(entries, RawMessageEvent::getMessageBytes).sum();\n    // \u6784\u9020journal.Entry\n    final List<Journal.Entry> journalEntries = map(entries, this::toJournalEntry);\n    // \u5199\u5165journal\n    writeToJournal(journalEntries);\n    // \u66f4\u65b0metrics\n    metrics.writtenMessages(entries.size());\n    metrics.writtenBytes(totalMessageBytes);\n}", "CodeBleu_score": 25.610598588909866}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\tif (messages.isEmpty()) {\n        return;\n    }\n    Long max = messages.stream().map(Message::getQueueID).max(Long::compareTo).orElse(0L);\n    if (max > 0) {\n        acknowledge(max);\n    }\n    acknowledgedMessages.mark(messages.size());\n}", "CodeBleu_score": 38.92672775846844}, {"code": "public void acknowledge(List<Message> messages){\n\tlong max = 0;\n    for (Message message : messages) {\n        if (message.getId() > max) {\n            max = message.getId();\n        }\n    }\n\n    if (max > 0) {\n        if (max > this.max) {\n            this.max = max;\n        }\n\n        this.acknowledgedMessages.mark();\n    }\n}", "CodeBleu_score": 23.593715093062652}, {"code": "public void acknowledge(List<Message> messages){\n\t// TODO: Implement this method\n\t\t\n\t\tint max = -1;\n\t\tfor (Message message : messages) {\n\t\t\tif (message.getId() > max) {\n\t\t\t\tmax = message.getId();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max >= 0) {\n\t\t\tacknowledgedMessages.add(max);\n\t\t\tsize.decrementAndGet();\n\t\t}\n\t\t\n\t\tmetrics.mark(MessageQueue.ACKNOWLEDGED_MESSAGES);\n\t}", "CodeBleu_score": 18.92670374455456}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\tfinal MetricRegistry registry = metricRegistry();\n    final String prefix = getClass().getName() + \".\";\n    for (final Map.Entry<MetricName, Metric> entry : registry.getMetrics().entrySet()) {\n        final MetricName name = entry.getKey();\n        if (name.getGroup().equals(getClass().getName())) {\n            final MetricName legacyName = new MetricName(name.getName(), prefix + name.getType(), name.getDescription());\n            try {\n                registry.register(legacyName, entry.getValue());\n            } catch (final IllegalArgumentException e) {\n                log.warn(\"Failed to register legacy metric {}: {}\", legacyName, e.getMessage());\n            }\n        }\n    }\n}", "CodeBleu_score": 37.469627843609274}, {"code": "private void registerLegacyMetrics(){\n\tfinal MetricRegistry registry = getMetricRegistry();\n    final String className = LocalKafkaJournal.class.getName();\n    for (final Map.Entry<MetricName, Metric> entry : registry.getMetrics().entrySet()) {\n        final MetricName metricName = entry.getKey();\n        if (metricName.getGroup().equals(className)) {\n            final String legacyName = metricName.getMBeanName();\n            try {\n                registry.register(legacyName, entry.getValue());\n            } catch (final IllegalArgumentException e) {\n                log.warn(\"Failed to register legacy metric: {}\", legacyName, e);\n            }\n        }\n    }\n}", "CodeBleu_score": 40.55721394675265}, {"code": "private void registerLegacyMetrics(){\n\tfor (final Map.Entry<String, Metric> entry : this.metrics.entrySet()) {\n        final String legacyName = getLegacyName(entry.getKey());\n        if (!legacyName.equals(entry.getKey())) {\n            try {\n                this.registry.register(legacyName, entry.getValue());\n            } catch (final IllegalArgumentException e) {\n                this.logger.warn(\"Unable to register legacy metric {}: {}\", legacyName, e.getMessage());\n            }\n        }\n    }\n}", "CodeBleu_score": 34.8655966031345}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\ttry {\n    return metricRegistry.register(metricName, new Timer());\n  } catch (IllegalArgumentException e) {\n    return metricRegistry.getTimers().get(metricName);\n  }\n}", "CodeBleu_score": 21.31227173420729}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\ttry {\n    return metricRegistry.timer(metricName);\n  } catch (IllegalArgumentException e) {\n    return metricRegistry.getTimers().get(metricName);\n  }\n}", "CodeBleu_score": 20.40619448908669}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\ttry {\n    return metricRegistry.timer(metricName);\n  } catch (IllegalArgumentException e) {\n    return metricRegistry.getTimers().get(metricName);\n  }\n}", "CodeBleu_score": 20.40619448908669}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\ttry {\n            metricRegistry.register(name, new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    long logEndOffset = getLogEndOffset();\n                    long committedOffset = kafkaLog.highWatermark();\n                    if (committedOffset == kafkaLog.logStartOffset()) {\n                        return logEndOffset - logStartOffset;\n                    } else if (committedOffset == kafkaLog.logEndOffset()) {\n                        return 0;\n                    } else {\n                        return logEndOffset - committedOffset;\n                    }\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // Ignore the exception if the gauge is already registered.\n        }\n    }", "CodeBleu_score": 46.711985011041776}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\ttry {\n            metricRegistry.register(name, new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    long logEndOffset = kafkaLog.logEndOffset();\n                    long logStartOffset = kafkaLog.logStartOffset();\n                    long uncommitted = logEndOffset - logStartOffset;\n                    if (uncommitted < 0) {\n                        return 0L;\n                    }\n                    if (committedOffset.get() == null) {\n                        return uncommitted;\n                    } else {\n                        return uncommitted - (committedOffset.get() - logStartOffset);\n                    }\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // ignore\n        }\n    }", "CodeBleu_score": 51.25862764206618}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\ttry {\n            metricRegistry.register(name, new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    long uncommitted = 0;\n                    if (size() > 0) {\n                        if (committedOffset == kafkaLog.logEndOffset()) {\n                            uncommitted = getLogEndOffset() - getLogStartOffset();\n                        } else {\n                            uncommitted = getLogEndOffset() - committedOffset;\n                        }\n                    }\n                    return uncommitted;\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // Ignore\n        }\n    }", "CodeBleu_score": 46.26532674097315}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\tif (messages.isEmpty()) {\n            logger.debug(\"Attempt to flushMessages with empty message list\");\n            return kafkaLog.lastOffset();\n        }\n        logger.debug(\"Flushing {} messages to log {}\", messages.size(), kafkaLog.name());\n        ByteBufferMessageSet messageSet = new ByteBufferMessageSet(compressionCodec, messages.toArray(new Message[messages.size()]));\n        logger.debug(\"Flushing {} byte message set to log {}\", messageSet.sizeInBytes(), kafkaLog.name());\n        long lastOffset = kafkaLog.append(messageSet);\n        logger.debug(\"Flushed messages to offset {} for log {}\", lastOffset, kafkaLog.name());\n        numMessages += messages.size();\n        return lastOffset;\n    }", "CodeBleu_score": 47.36127219683562}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\tif (messages.isEmpty()) {\n            logger.debug(\"Flushing {} messages.\", messages.size());\n            return kafkaLog.lastOffset();\n        }\n        ByteBufferMessageSet messageSet = new ByteBufferMessageSet(compressionCodec, messages.toArray(new Message[messages.size()]));\n        logger.trace(\"Flushing {} messages of {} bytes.\", messages.size(), payloadSize);\n        long lastOffset = kafkaLog.append(messageSet);\n        logger.trace(\"Flushed messages to offset {}.\", lastOffset);\n        numMessages += messages.size();\n        return lastOffset;\n    }", "CodeBleu_score": 44.12033782556042}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\tif (messages.isEmpty()) {\n            logger.debug(\"Attempt to write no messages to the log.\");\n            return logEndOffset.get();\n        }\n        ByteBufferMessageSet messageSet = new ByteBufferMessageSet(compressionCodec, messages.toArray(new Message[messages.size()]));\n        logger.trace(\"Writing {} uncompressed bytes to log.\", messageSet.sizeInBytes());\n        long start = time.nanoseconds();\n        long lastOffset = logEndOffset.get();\n        try {\n            log.append(messageSet);\n        } catch (KafkaStorageException e) {\n            logger.error(\"Error appending message set with offset \" + lastOffset + \" to log \" + name, e);\n            throw e;\n        }\n        long end = time.nanoseconds();\n        logger.trace(\"Logged {} message set with offset {} in {} ms\",\n                     messageSet.size(), lastOffset, (end - start) / 1000000);\n        logger.trace(\"Logged {} uncompressed bytes in offset {}\", payloadSize, lastOffset);\n        numLogged.getAndAdd(messageSet.sizeInBytes());\n        numLoggedMessages.getAndAdd(messages.size());\n        return lastOffset;\n    }", "CodeBleu_score": 51.558457885053656}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\tList<AdminClient> adminClientList = null;\n        try {\n            adminClientList = this.kafkaAdminClientMap.get(clusterPhyId);\n        } catch (Exception e) {\n            LOGGER.error(\"get kafka AdminClient list failed, clusterPhyId:{}\", clusterPhyId, e);\n            return;\n        }\n\n        if (adminClientList == null) {\n            return;\n        }\n\n        LOGGER.info(\"begin to close kafka AdminClient, clusterPhyId:{}\", clusterPhyId);\n        boolean allSuccess = this.closeAdminClientList(clusterPhyId, adminClientList);\n        if (allSuccess) {\n            LOGGER.info(\"close kafka AdminClient success, clusterPhyId:{}\", clusterPhyId);\n        } else {\n            LOGGER.error(\"close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId);\n        }\n    }", "CodeBleu_score": 68.91654103837054}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\tList<AdminClient> adminClientList = null;\n        try {\n            // \u52a0\u9501\uff0c\u9632\u6b62\u5e76\u53d1\u5173\u95ed\n            this.kafkaAdminClientLock.lock();\n\n            // \u4ecemap\u4e2d\u83b7\u53d6\u5ba2\u6237\u7aef\u5217\u8868\n            adminClientList = this.kafkaAdminClientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n\n            // \u6253\u5370\u5173\u95ed\u5f00\u59cb\u65e5\u5fd7\n            LOGGER.info(\"[closeKafkaAdminClient] begin close kafka admin client, clusterPhyId:{}\", clusterPhyId);\n\n            // \u5faa\u73af\u5173\u95ed\u5ba2\u6237\u7aef\n            for (AdminClient adminClient: adminClientList) {\n                try {\n                    // \u5173\u95ed\u5ba2\u6237\u7aef\uff0c\u8d85\u65f6\u65f6\u95f4\u4e3a30\u79d2\n                    adminClient.close(Duration.ofSeconds(30));\n                } catch (Exception e) {\n                    // ignore\n                    LOGGER.error(\"[closeKafkaAdminClient] close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId, e);\n                }\n            }\n\n            // \u6253\u5370\u5173\u95ed\u6210\u529f\u65e5\u5fd7\n            LOGGER.info(\"[closeKafkaAdminClient] close kafka admin client success, clusterPhyId:{}\", clusterPhyId);\n        } finally {\n            // \u91ca\u653e\u9501\n            this.kafkaAdminClientLock.unlock();\n        }\n    }", "CodeBleu_score": 48.27551593351009}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\tList<AdminClient> adminClientList = null;\n        try {\n            adminClientMapLock.lock();\n            adminClientList = adminClientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n            LOGGER.info(\"start to close kafka admin client, clusterPhyId:{}\", clusterPhyId);\n            if (closeAdminClientList(clusterPhyId, adminClientList)) {\n                LOGGER.info(\"close kafka admin client success, clusterPhyId:{}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"close kafka admin client failed, clusterPhyId:{}\", clusterPhyId);\n            }\n            adminClientMap.remove(clusterPhyId);\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka admin client failed, clusterPhyId:{}\", clusterPhyId, e);\n        } finally {\n            adminClientMapLock.unlock();\n        }\n    }", "CodeBleu_score": 63.487843455218915}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\tif (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(ofSeconds(30));\n        } catch (Exception e) {\n            success = false;\n            log.error(\"Failed to close AdminClient for cluster {}\", clusterPhyId, e);\n        }\n    }\n    return success;\n}", "CodeBleu_score": 63.74626532231661}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\tboolean success = true;\n    if (adminClientList == null) {\n        return true;\n    }\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(30, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            LOGGER.error(\"Error closing AdminClient for cluster \" + clusterPhyId, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 66.10219334799172}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\tif (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(30, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            success = false;\n            logger.error(\"Error closing AdminClient for cluster \" + clusterPhyId, e);\n        }\n    }\n    return success;\n}", "CodeBleu_score": 63.43333214173701}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\tif (app != null) {\n\t\tapp.stop();\n\t\tint attempts = 5;\n\t\twhile (app.isRunning() && attempts > 0) {\n\t\t\tattempts = attempts - 1;\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t\tcatch (InterruptedException e) {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t}\n\t\t}\n\t\tapp = null;\n\t}\n}", "CodeBleu_score": 94.80760094260697}, {"code": "public void stop() {\n\tif (app != null) {\n\t\t\tapp.stop();\n\t\t\tint attempts = 5;\n\t\t\twhile (app.isRunning() && attempts > 0) {\n\t\t\t\tattempts = attempts - 1;\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException e) {\n\t\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tapp = null;\n\t\t}\n\t}", "CodeBleu_score": 93.77787567660884}, {"code": "public void stop() {\n\tif (app != null) {\n\t\t\tapp.stop();\n\t\t\tint attempts = 5;\n\t\t\twhile (app.isRunning() && attempts > 0) {\n\t\t\t\tattempts = attempts - 1;\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException e) {\n\t\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tapp = null;\n\t\t}\n\t}", "CodeBleu_score": 93.77787567660884}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\tEurekaServerRunner eurekaServer = new EurekaServerRunner(config)\n    eurekaServer.enableTls()\n    eurekaServer.setTrustStore(trustStore, trustStorePassword)\n    eurekaServer.setKeyStore(keyStore, keyStorePassword)\n    eurekaServer.start()\n    return eurekaServer\n}", "CodeBleu_score": 34.97151847137983}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\tEurekaServerRunner runner = new EurekaServerRunner(config)\n    runner.setTrustStore(trustStore, trustStorePassword)\n    runner.setKeyStore(keyStore, keyStorePassword)\n    runner.enableTls()\n    runner.start()\n    return runner\n}", "CodeBleu_score": 36.70727702993165}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\tEurekaServerRunner runner = new EurekaServerRunner(config)\n    runner.enableTls()\n    setKeyStore(runner)\n    setTrustStore(runner)\n    runner.start()\n    return runner\n}", "CodeBleu_score": 36.03737307117335}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\tEurekaClientRunner runner = new EurekaClientRunner(config, server.getServiceUrl(), \"testservice\");\n\tenableTlsClient(runner);\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 52.67313225654385}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\tEurekaClientRunner runner = new EurekaClientRunner(server.getServiceUrl(), \"testservice\", config);\n\t\tenableTlsClient(runner);\n\t\trunner.start();\n\t\treturn runner;\n\t}", "CodeBleu_score": 51.53059053128038}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\tEurekaClientRunner runner = new EurekaClientRunner(\n\t\t\t\tserver.getServiceUrl(),\n\t\t\t\tconfig,\n\t\t\t\t\"testservice\");\n\t\tenableTlsClient(runner);\n\t\trunner.start();\n\t\treturn runner;\n\t}", "CodeBleu_score": 46.971380783615935}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t// Create the CA certificate\n\t\tKeyAndCert caKeyAndCert = createCA();\n\t\tFile caCertFile = saveCert(caKeyAndCert);\n\t\tSystem.out.println(\"CA certificate saved in \" + caCertFile);\n\n\t\t// Create the server certificate\n\t\tKeyAndCert serverKeyAndCert = sign(caKeyAndCert, \"server\");\n\t\tFile serverCertFile = saveCert(serverKeyAndCert);\n\t\tSystem.out.println(\"Server certificate saved in \" + serverCertFile);\n\n\t\t// Create the client certificate\n\t\tKeyAndCert clientKeyAndCert = sign(caKeyAndCert, \"client\");\n\t\tFile clientCertFile = saveCert(clientKeyAndCert);\n\t\tSystem.out.println(\"Client certificate saved in \" + clientCertFile);\n\n\t\t// Create a second CA certificate\n\t\tKeyAndCert secondCaKeyAndCert = createCA();\n\t\tFile secondCaCertFile = saveCert(secondCaKeyAndCert);\n\t\tSystem.out.println(\"Second CA certificate saved in \" + secondCaCertFile);\n\n\t\t// Create a client certificate for the second CA\n\t\tKeyAndCert secondClientKeyAndCert = sign(secondCaKeyAndCert, \"client\");\n\t\tFile secondClientCertFile = saveCert(secondClientKeyAndCert);\n\t\tSystem.out.println(\"Second client certificate saved in \" + secondClientCertFile);\n\n\t\t// Create the server certificate for the second CA\n\t\tKeyAndCert secondServerKeyAndCert = sign(secondCaKeyAndCert, \"server\");\n\t\tFile secondServerCertFile = saveCert(secondServerKeyAndCert);\n\t\tSystem.out.println(\"Second server certificate saved in \" + secondServerCertFile);\n\n\t\t// Save the server key and certificate\n\t\tFile serverKeyAndCertFile = saveKeyAndCert(serverKeyAndCert);\n\t\tSystem.out.println(\"Server key and certificate saved in \" + serverKeyAndCertFile);\n\n\t\t// Save the client key and certificate\n\t\tFile clientKeyAndCertFile = saveKeyAndCert(clientKeyAndCert);\n\t\tSystem.out.println(\"Client key and certificate saved in \" + clientKeyAndCertFile);", "CodeBleu_score": 25.46894755160639}, {"code": "static void createCertificates() throws Exception{\n\t// Create the CA certificate\n\t\tKeyAndCert caCert = createCA();\n\t\t// Save the CA certificate\n\t\tFile caCertFile = saveCert(caCert);\n\t\t// Sign a server certificate with the CA certificate\n\t\tKeyAndCert serverCert = sign(caCert, \"server\");\n\t\t// Save the server certificate\n\t\tFile serverCertFile = saveCert(serverCert);\n\t\t// Sign a client certificate with the CA certificate\n\t\tKeyAndCert clientCert = sign(caCert, \"client\");\n\t\t// Save the client certificate\n\t\tFile clientCertFile = saveKeyAndCert(clientCert);\n\t\t// Create a second CA certificate\n\t\tKeyAndCert caCert2 = createCA();\n\t\t// Save the second CA certificate\n\t\tFile caCert2File = saveCert(caCert2);\n\t\t// Sign a client certificate with the second CA certificate\n\t\tKeyAndCert clientCert2 = sign(caCert2, \"client2\");\n\t\t// Save the client certificate\n\t\tFile clientCert2File = saveKeyAndCert(clientCert2);\n\t\t// Print the results\n\t\tSystem.out.println(\"CA certificate: \" + caCertFile);\n\t\tSystem.out.println(\"Server certificate: \" + serverCertFile);\n\t\tSystem.out.println(\"Client certificate: \" + clientCertFile);\n\t\tSystem.out.println(\"Second CA certificate: \" + caCert2File);\n\t\tSystem.out.println(\"Second client certificate: \" + clientCert2File);\n\t}", "CodeBleu_score": 29.281871078878112}, {"code": "static void createCertificates() throws Exception{\n\tKeyAndCert caKeyAndCert = createCA();\n\t\tsaveCert(caKeyAndCert);\n\t\tKeyAndCert serverKeyAndCert = sign(caKeyAndCert, \"server\");\n\t\tsaveKeyAndCert(serverKeyAndCert);\n\t\tKeyAndCert clientKeyAndCert = sign(caKeyAndCert, \"client\");\n\t\tsaveKeyAndCert(clientKeyAndCert);\n\t\tKeyAndCert ca2KeyAndCert = createCA();\n\t\tsaveCert(ca2KeyAndCert);\n\t\tKeyAndCert client2KeyAndCert = sign(ca2KeyAndCert, \"client\");\n\t\tsaveKeyAndCert(client2KeyAndCert);\n\t}", "CodeBleu_score": 29.929981941671713}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\tlong startTime = System.currentTimeMillis();\n    long stopTime = startTime + (seconds * 1000);\n    while (System.currentTimeMillis() < stopTime) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        yield();\n    }\n    throw new RuntimeException(\"Assertion not satisfied within \" + seconds + \" seconds\");\n}", "CodeBleu_score": 44.682714443887136}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\tlong startTime = System.currentTimeMillis();\n  long endTime = startTime + seconds * 1000;\n  while (System.currentTimeMillis() < endTime) {\n    if (assertion.getAsBoolean()) {\n      return;\n    }\n  }\n  throw new RuntimeException(\"assertion failed within \" + seconds + \" seconds\");\n}", "CodeBleu_score": 46.517957115578156}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\tlong startTime = System.currentTimeMillis();\n    long limit = startTime + seconds * 1000;\n    while (System.currentTimeMillis() < limit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n    throw new RuntimeException(\"Assertion not met in \" + seconds + \" seconds.\");\n}", "CodeBleu_score": 43.69294509453366}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\tPublicKey publicKey = keyPair.getPublic();\n\t\tPrivateKey privateKey = keyPair.getPrivate();\n\n\t\tJcaX509v3CertificateBuilder builder = certBuilder(publicKey, ca, \"\");\n\t\taddExtension(builder, KEY_USAGE, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\t\taddExtension(builder, BASIC_CONSTRAINTS, true, new BasicConstraints(true));\n\n\t\treturn signCert(builder, privateKey);\n\t}", "CodeBleu_score": 48.695369864016925}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\tPublicKey publicKey = keyPair.getPublic();\n\t\tPrivateKey privateKey = keyPair.getPrivate();\n\n\t\tJcaX509v3CertificateBuilder builder = certBuilder(publicKey, ca, \"\");\n\t\taddExtension(builder, KeyUsage.keyCertSign, true);\n\t\taddExtension(builder, KeyUsage.digitalSignature, true);\n\t\taddExtension(builder, KeyUsage.keyEncipherment, true);\n\t\taddExtension(builder, BasicConstraints.getInstance(true), true);\n\n\t\treturn signCert(builder, privateKey);\n\t}", "CodeBleu_score": 42.71797286894865}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\tPublicKey publicKey = keyPair.getPublic();\n\t\tPrivateKey privateKey = keyPair.getPrivate();\n\n\t\tJcaX509v3CertificateBuilder builder = certBuilder(publicKey, ca, ca);\n\t\taddExtension(builder, KeyUsage.keyCertSign, true);\n\t\taddExtension(builder, KeyUsage.cRLSign, true);\n\t\taddExtension(builder, KeyUsage.digitalSignature, true);\n\t\taddExtension(builder, KeyUsage.keyEncipherment, true);\n\t\taddExtension(builder, KeyUsage.dataEncipherment, true);\n\n\t\taddExtension(builder, BasicConstraints.getInstance(), true, new BasicConstraints(true));\n\n\t\treturn signCert(builder, privateKey);\n\t}", "CodeBleu_score": 46.50357233225391}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\tif (eurekaHttpClient == null) {\n        try {\n            Field registrationClientField = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n            registrationClientField.setAccessible(true);\n            eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            logger.error(\"Unable to get registrationClient field from eurekaTransport\", e);\n        }\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 47.268606229093486}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\tif (eurekaHttpClient == null) {\n    try {\n      Field registrationClientField = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n      registrationClientField.setAccessible(true);\n      eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n      log.error(\"Error retrieving EurekaHttpClient\", e);\n    }\n  }\n  return eurekaHttpClient;\n}", "CodeBleu_score": 47.655381500966676}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\tif (eurekaHttpClient == null) {\n        try {\n            Field registrationClientField = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n            registrationClientField.setAccessible(true);\n            eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            log.error(\"Error while accessing registrationClient field from eurekaTransport object\", e);\n        }\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 47.679526828860034}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\tList<Application> applications = getApplications();\n\tif (applications == null) {\n\t\treturn emptyList();\n\t}\n\tList<String> services = new ArrayList<>();\n\tfor (Application application : applications) {\n\t\tif (!application.getInstances().isEmpty()) {\n\t\t\tservices.add(application.getName().toLowerCase());\n\t\t}\n\t}\n\treturn services;\n}", "CodeBleu_score": 44.596550013657975}, {"code": "public List<String> getServices(){\n\tList<Application> applications = this.eurekaClient.getApplications().getRegisteredApplications();\n    if (applications == null) {\n        return Collections.emptyList();\n    }\n    List<String> services = new ArrayList<String>();\n    for (Application application : applications) {\n        if (application.getInstances() != null && !application.getInstances().isEmpty()) {\n            services.add(application.getName().toLowerCase());\n        }\n    }\n    return services;\n}", "CodeBleu_score": 59.81237458819722}, {"code": "public List<String> getServices(){\n\tList<Application> applications = this.eurekaClient.getApplications().getRegisteredApplications();\n\tif (applications == null || applications.isEmpty()) {\n\t\treturn Collections.emptyList();\n\t}\n\tList<String> services = new ArrayList<>();\n\tfor (Application application : applications) {\n\t\tif (application.getInstances() != null && !application.getInstances().isEmpty()) {\n\t\t\tservices.add(application.getName().toLowerCase());\n\t\t}\n\t}\n\treturn services;\n}", "CodeBleu_score": 61.717628995766624}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\thealthContributors.entrySet().forEach {\n        if (it.getValue() instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = it.getValue() as DiscoveryCompositeHealthContributor\n            discoveryCompositeHealthContributor.getIndicators().forEach {\n                if (!(it.getValue() instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(it.getKey(), it.getValue())\n                }\n            }\n        } else {\n            healthContributors.put(it.getKey(), it.getValue())\n        }\n    }\n}", "CodeBleu_score": 31.39756204781432}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\thealthContributors.forEach(\n        (key, value) -> {\n            if (value instanceof DiscoveryCompositeHealthContributor) {\n                DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) value;\n                discoveryCompositeHealthContributor.getIndicators().forEach(\n                    (name, indicator) -> {\n                        if (!(indicator instanceof EurekaHealthIndicator)) {\n                            healthContributors.put(name, indicator);\n                        }\n                    }\n                );\n            } else {\n                healthContributors.put(key, value);\n            }\n        }\n    );\n}", "CodeBleu_score": 32.657266293952105}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\thealthContributors.entrySet().forEach { entry ->\n        if (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = entry.getValue()\n            discoveryCompositeHealthContributor.getHealthContributors().forEach { healthContributor ->\n                if (healthContributor instanceof EurekaHealthIndicator) {\n                    return\n                }\n                healthContributors.put(healthContributor.getClass().getSimpleName(), healthContributor)\n            }\n        } else {\n            healthContributors.put(entry.getKey(), entry.getValue())\n        }\n    }\n}", "CodeBleu_score": 31.883998328944056}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\tList<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No provider-application service instance found.\");\n    }\n    ServiceInstance instance = instances.get(0);\n    String uri = instance.getUri().toString();\n    RestTemplate restTemplate = new RestTemplate();\n    String response = restTemplate.postForObject(uri + \"/echo\", \"Hello\", String.class);\n    return response;\n}", "CodeBleu_score": 60.979581868153865}, {"code": "public String hello(){\n\tList<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No instances found for provider-application\");\n    }\n    String url = instances.get(0).getUri().toString() + \"/echo\";\n    return restTemplate.postForObject(url, \"Hello from consumer-application\", String.class);\n}", "CodeBleu_score": 44.30940665456669}, {"code": "public String hello(){\n\tList<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No service instance found for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    String uri = instance.getUri().toString();\n    RestTemplate restTemplate = new RestTemplate();\n    String response = restTemplate.postForObject(uri + \"/echo\", \"Hello World\", String.class);\n    return response;\n}", "CodeBleu_score": 63.026396428030026}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t// Retrieve an instance of the \"provider-application\" service using the load balancer client\n    ServiceInstance instance = this.loadBalancerClient.choose(\"provider-application\");\n    URI uri = null;\n    if (instance == null) {\n        throw new RuntimeException(\"No service instance found for provider-application\");\n    }\n    // Construct a URI for the \"provider-application\" service\n    uri = URI.create(String.format(\"http://%s:%s/echo\", instance.getHost(), instance.getPort()));\n    // Send a POST request to \"/echo\" endpoint of the chosen instance\n    return this.restTemplate.postForObject(uri, \"Hello\", String.class);\n}", "CodeBleu_score": 56.10020217735603}, {"code": "public String world(){\n\tRestTemplate restTemplate = new RestTemplate();\n    ServiceInstance instance = this.loadBalancerClient.choose(\"provider-application\");\n    String url = String.format(\"http://%s:%s/echo\", instance.getHost(), instance.getPort());\n    return restTemplate.postForObject(url, \"Hello World!\", String.class);\n}", "CodeBleu_score": 40.83076839978991}, {"code": "public String world(){\n\tServiceInstance instance = this.loadBalancerClient.choose(\"provider-application\");\n    String url = String.format(\"http://%s:%s/echo\", instance.getHost(), instance.getPort());\n    RestTemplate restTemplate = new RestTemplate();\n    return restTemplate.postForObject(url, \"Hello World!\", String.class);\n}", "CodeBleu_score": 40.93678586613369}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\tif (serviceName == null || serviceName.isBlank()) {\n        return false;\n    }\n    if (ip == null || ip.isBlank()) {\n        return false;\n    }\n    if (port == null) {\n        return false;\n    }\n    logger.info(\"Received registration request for \" + serviceName + \" with IP \" + ip + \" and port \" + port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        servers = Collections.synchronizedSet(new HashSet<>());\n        serverMap.put(serviceName, servers);\n    }\n    servers.add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 49.421443489843}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\tlogger.info(\"Received registration request for service: \" + serviceName + \" with IP: \" + ip + \" and port: \" + port);\n    Set<Server> servers = serverMap.synchronizedSet(serviceName);\n    if (servers == null) {\n        servers = new HashSet<>();\n        serverMap.putIfAbsent(serviceName, servers);\n    }\n    servers.add(new Server(ip, port));\n    logger.info(\"Registration successful\");\n    return true;\n}", "CodeBleu_score": 51.62703837743089}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t// TODO: Implement this function\n    boolean result = false;\n    if (serverMap.containsKey(serviceName)) {\n        serverMap.get(serviceName).add(new Server(ip, port));\n        result = true;\n    } else {\n        Set<Server> serverSet = Collections.synchronizedSet(new HashSet<Server>());\n        serverSet.add(new Server(ip, port));\n        serverMap.put(serviceName, serverSet);\n        result = true;\n    }\n    return result;\n}", "CodeBleu_score": 46.441983426741565}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\tlogger.info(\"Deregistering service \" + serviceName + \" at \" + ip + \":\" + port);\n    Server server = new Server(ip, port);\n    if (serverMap.get(serviceName) != null) {\n        serverMap.get(serviceName).remove(server);\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 51.33737481831832}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\tString key = serviceName + \":\" + ip + \":\" + port;\n    Server server = serverMap.get(key);\n    if (server == null) {\n        return false;\n    }\n    log.info(\"Deregistering server: \" + server.getServiceName() + \":\" + server.getIp() + \":\" + server.getPort());\n    serverMap.remove(key);\n    return true;\n}", "CodeBleu_score": 45.42511463397037}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\tif (serviceName == null || ip == null || port == null) {\n        return false;\n    }\n    if (serverMap.containsKey(serviceName)) {\n        if (serverMap.get(serviceName).remove(new Server(ip, port))) {\n            logger.info(\"Deregistered \" + serviceName + \" with ip \" + ip + \" and port \" + port);\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 39.23885429577663}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\tMap<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n        if (attributes != null) {\n            List<?> configurations = (List<?>) attributes.get(\"value\");\n            if (configurations != null) {\n                for (Object configuration : configurations) {\n                    if (configuration instanceof AnnotationMetadata) {\n                        registerClientConfiguration(registry,\n                                ((AnnotationMetadata) configuration).getClassName(), configuration);\n                    }\n                    else if (configuration instanceof Class) {\n                        registerClientConfiguration(registry, ((Class<?>) configuration).getName(),\n                                configuration);\n                    }\n                    else if (configuration instanceof String) {\n                        registerClientConfiguration(registry, (String) configuration, configuration);\n                    }\n                }\n            }\n        }\n    }", "CodeBleu_score": 39.38673978782947}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\tMap<String, Object> clientConfigurations = metadata.getAnnotationAttributes(\n                EnableRibbonClients.class.getName(), true);\n        if (clientConfigurations != null) {\n            for (Map.Entry<String, Object> entry : clientConfigurations.entrySet()) {\n                String name = entry.getKey();\n                if (name.endsWith(DEFAULT_CONFIGURATION_SUFFIX)) {\n                    name = name.substring(0, name.length() - DEFAULT_CONFIGURATION_SUFFIX.length());\n                    registerClientConfiguration(registry, name, entry.getValue());\n                }\n            }\n        }\n    }", "CodeBleu_score": 43.55894042900268}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\tMap<String, Object> attributes = metadata.getAnnotationAttributes(EnableRibbonClients.class.getName());\n        if (attributes != null) {\n            String[] clients = (String[]) attributes.get(\"clients\");\n            if (clients.length > 0) {\n                registerDefaultConfiguration(attributes, registry);\n                for (String client : clients) {\n                    registerClientConfiguration(registry, client, attributes.get(\"defaultConfiguration\"));\n                }\n            }\n        }\n    }", "CodeBleu_score": 49.23015120520354}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\tif (serviceId == null) {\n        throw new IllegalArgumentException(\"Service ID must not be null\");\n    }\n    if (request == null) {\n        throw new IllegalArgumentException(\"Request must not be null\");\n    }\n    return choose(serviceId, request, null);\n}", "CodeBleu_score": 26.420107241985118}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\treturn choose(serviceId, request, null);\n}", "CodeBleu_score": 13.372315990061301}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t// 1. get service instances\n\tList<ServiceInstance> serviceInstances = getServiceInstances(serviceId);\n\n\t// 2. choose a server\n\tServiceInstance serviceInstance = chooseServer(serviceInstances);\n\n\t// 3. return a TutuServiceInstance\n\treturn new TutuServiceInstance(serviceInstance);\n}", "CodeBleu_score": 26.510604441066498}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\ttry {\n        return new URI(\n                original.getScheme(),\n                original.getUserInfo(),\n                server.getHost(),\n                server.getPort(),\n                original.getPath(),\n                original.getQuery(),\n                original.getFragment()\n        );\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 31.87986091789806}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\ttry {\n    String host = server.getHost();\n    int port = server.getPort();\n    String scheme = original.getScheme();\n\n    // if the scheme is null, default to \"http\"\n    if (scheme == null) {\n      scheme = \"http\";\n    }\n\n    // we know that the default port for \"http\" is 80 and that the default port for \"https\" is 443\n    // so we don't need to include those default ports when constructing the URI\n    if (port == 80 && \"http\".equals(scheme)) {\n      port = -1;\n    } else if (port == 443 && \"https\".equals(scheme)) {\n      port = -1;\n    }\n\n    String path = original.getRawPath();\n    String query = original.getRawQuery();\n    String fragment = original.getRawFragment();\n\n    URI constructed = new URI(scheme, null, host, port, path, query, fragment);\n    return constructed;\n  } catch (URISyntaxException e) {\n    throw new RuntimeException(e);\n  }\n}", "CodeBleu_score": 44.04973624524866}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\tString host = server.getHost();\n    int port = server.getPort();\n    String scheme = original.getScheme();\n    String query = original.getRawQuery();\n    String path = original.getRawPath();\n    try {\n        // Note that we use \"path\" and not \"original.getPath()\" here because the path returned from \"original.getPath()\" is decoded,\n        // which causes problems with URI templating.\n        URI uri = new URI(scheme, null, host, port, path, query, null);\n        return uri;\n    }\n    catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 38.46713156937504}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\tdef serverList = []\n    def serverAddr = getServerAddr()\n    def http = new HTTPBuilder(serverAddr)\n    http.request(Method.GET, ContentType.JSON) { req ->\n        response.success = { resp, json ->\n            json.each {\n                def ip = it.ip\n                def port = it.port\n                def server = new TutuServer(ip, port)\n                serverList.add(server)\n            }\n        }\n        response.failure = { resp ->\n            println \"Unexpected error: ${resp.statusLine}\"\n        }\n    }\n    return serverList\n}", "CodeBleu_score": 28.246576296976787}, {"code": "private List<TutuServer> getServer(){\n\t// 1. Get the server address from the config file\n    String serverAddr = getServerAddr();\n\n    // 2. Construct the request URL\n    String requestUrl = serverAddr + \"/list\";\n\n    // 3. Send a GET request to the server\n    String response = getString(requestUrl);\n\n    // 4. Parse the JSON array into a list of TutuServer objects\n    return parseArray(response);\n}", "CodeBleu_score": 12.885909740722731}, {"code": "private List<TutuServer> getServer(){\n\tString serverAddr = getServerAddr();\n    String url = serverAddr + \"/list\";\n    String json = getString(url);\n    List<TutuServer> servers = parseArray(json);\n    return servers;\n}", "CodeBleu_score": 14.983888346136204}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t// Iterate through the routes and find a matching route for the given path\n    for (ZuulRoute route : this.getRoutes()) {\n        // Create a new PathMatcher instance\n        PathMatcher pathMatcher = new AntPathMatcher();\n        // Check if the route's pattern matches the path\n        if (pathMatcher.match(route.getPath(), path)) {\n            // Extract the target path from the original path\n            String targetPath = pathMatcher.extractPathWithinPattern(route.getPath(), path);\n            // Create a new Route object with the target path and the service ID\n            Route matchedRoute = new Route(targetPath, route.getServiceId());\n            return matchedRoute;\n        }\n    }\n    // If no match is found, return null\n    return null;\n}", "CodeBleu_score": 35.403640549767715}, {"code": "public Route getMatchingRoute(String path){\n\tfor (Route route : getRoutes()) {\n        if (pathMatcher.match(route.getPath(), path)) {\n            String targetPath = pathMatcher.extractPathWithinPattern(route.getPath(), path);\n            return new Route(route.getId(), targetPath, route.getServiceId());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 35.47652081484905}, {"code": "public Route getMatchingRoute(String path){\n\tRoute matchedRoute = null;\n    for (Map.Entry<String, ZuulProperties.ZuulRoute> entry : this.getRoutes().entrySet()) {\n        String pattern = entry.getKey();\n        ZuulProperties.ZuulRoute route = entry.getValue();\n        if (this.pathMatcher.match(pattern, path)) {\n            String matchedPath = this.pathMatcher.extractPathWithinPattern(pattern, path);\n            matchedRoute = new Route(matchedPath, route.getId());\n            break;\n        }\n    }\n    return matchedRoute;\n}", "CodeBleu_score": 44.552225454265376}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t// \u83b7\u53d6\u6ce8\u89e3\u5143\u6570\u636e\n    AnnotationAttributes attributes = AnnotationAttributes.fromMap(\n            importingClassMetadata.getAnnotationAttributes(EnableFeignClients.class.getName(), false));\n    // \u83b7\u53d6\u6ce8\u89e3\u4e2d\u7684\u5c5e\u6027\u503c\n    Class<?>[] clients = attributes.getClassArray(\"clients\");\n    Class<?>[] defaultClients = attributes.getClassArray(\"defaultClients\");\n    Class<?>[] configuration = attributes.getClassArray(\"configuration\");\n    // \u83b7\u53d6\u6ce8\u89e3\u4e2d\u7684\u5305\u540d\n    String[] basePackages = attributes.getStringArray(\"basePackages\");\n    String[] basePackageClasses = attributes.getStringArray(\"basePackageClasses\");\n\n    // \u83b7\u53d6\u6ce8\u89e3\u4e2d\u7684\u626b\u63cf\u8def\u5f84\n    ClassPathScanningCandidateComponentProvider scanner = getScanner();\n    // \u6dfb\u52a0\u626b\u63cf\u8def\u5f84\n    scanner.addIncludeFilter(new AnnotationTypeFilter(FeignClient.class));\n    // \u6dfb\u52a0\u626b\u63cf\u8def\u5f84\n    scanner.addIncludeFilter(new AnnotationTypeFilter(FeignClientsRegistrar.class, false));\n    // \u6dfb\u52a0\u626b\u63cf\u8def\u5f84\n    scanner.addIncludeFilter(new AnnotationTypeFilter(EnableFeignClients.class, false));\n    // \u6dfb\u52a0\u626b\u63cf\u8def\u5f84\n    scanner.addIncludeFilter(new AnnotationTypeFilter(EnableFeignClients.class, false));\n\n    // \u626b\u63cf\u8def\u5f84\n    Set<String> basePackagesToScan = new HashSet<>();\n    // \u626b\u63cf\u8def\u5f84\n    for (String pkg : basePackages) {\n        if (StringUtils.hasText(pkg)) {\n            basePackagesToScan.add(pkg);\n        }\n    }\n    // \u626b\u63cf\u8def\u5f84\n    for (Class<?> clazz : defaultClients) {\n        basePackagesToScan.add(ClassUtils.getPackageName(clazz));\n    }\n    // \ufffd", "CodeBleu_score": 37.77187144924618}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t// \u83b7\u53d6\u5305\u540d\n    String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u5305\u540d\n    String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b\u540d\n    String className = ClassUtils.getShortName(importingClassMetadata.getClassName());\n    // \u83b7\u53d6\u7c7b", "CodeBleu_score": 23.183922626862046}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t// \u83b7\u53d6\u5f53\u524d\u7c7b\u7684\u5305\u540d\n\tString packageName = getPackageName(importingClassMetadata);\n\t// \u626b\u63cf\u5305\u4e0b\u7684\u6240\u6709\u7c7b\n\tSet<BeanDefinition> candidateComponents = ScannedGenericBeanDefinition.scan(registry, packageName, new ComponentFilter() {\n\t\t@Override\n\t\tpublic boolean matches(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) {\n\t\t\t// \u5224\u65ad\u7c7b\u4e0a\u662f\u5426\u6709FeignClient\u6ce8\u89e3\n\t\t\treturn metadataReader.getAnnotationMetadata().hasAnnotation(FeignClient.class.getName());\n\t\t}\n\t});\n\n\tfor (BeanDefinition candidateComponent : candidateComponents) {\n\t\tif (candidateComponent instanceof AnnotatedBeanDefinition) {\n\t\t\tAnnotatedBeanDefinition beanDefinition = (AnnotatedBeanDefinition) candidateComponent;\n\t\t\tAnnotationMetadata annotationMetadata = beanDefinition.getMetadata();\n\t\t\tMap<String, Object> attributes = annotationMetadata.getAnnotationAttributes(FeignClient.class.getName());\n\t\t\tString className = annotationMetadata.getClassName();\n\t\t\tString contextId = getContextId(attributes);\n\t\t\tif (!StringUtils.hasText(contextId)) {\n\t\t\t\tcontextId = className;\n\t\t\t}\n\t\t\tbeanDefinition.setAttribute(CLIENT_NAME_ATTRIBUTE, contextId);\n\t\t\tbeanDefinition.setAttribute(FEIGN_CLASS_ATTRIBUTE, className);\n\t\t\tbeanDefinition.setBeanClassName(FeignClientFactoryBean.class.getName());\n\t\t\tbeanDefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);\n\t\t\tString alias = contextId + \"FeignClient\";\n\t\t\tboolean isPrimary = Boolean.parseBoolean(attributes.get(PRIMARY_ATTRIBUTE).toString());\n\t\t\tBeanDefinitionHolder holder = new BeanDefinitionHolder(beanDefinition, className,\n\t\t\t\t\tnew String[] { alias });\n\t\t\tBeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);\n\t\t\tif (isPrimary) {\n\t\t\t\tif (log.isDebugEnabled()) {", "CodeBleu_score": 33.69243962432938}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.51924881462398}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.51924881462398}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.51924881462398}]}
