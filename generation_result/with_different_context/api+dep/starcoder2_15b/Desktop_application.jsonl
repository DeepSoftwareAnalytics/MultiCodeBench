{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (index, item in template) {\n\t\tif (item.command == null) {\n\t\t\titem.command := \"application:do-nothing\"\n\t\t}\n\t\tif (item.label == null) {\n\t\t\titem.label := item.command\n\t\t}\n\t\tif (item.keystrokes == null) {\n\t\t\titem.keystrokes := keystrokesByCommand[item.command]\n\t\t}\n\t\tif (item.keystrokes!= null) {\n\t\t\tif (InStr(item.keystrokes, \" \")) {\n\t\t\t\titem.label.= \" (\". item.keystrokes. \")\"\n\t\t\t} else {\n\t\t\t\titem.accelerator := item.keystrokes\n\t\t\t}\n\t\t}\n\t\tif (item.click == null) {\n\t\t\titem.click := Func(\"sendCommand\").Bind(item.command)\n\t\t}\n\t\tif (item.windowSpecific == null) {\n\t\t\titem.windowSpecific :=!(InStr(item.command, \"application:\") == 1)\n\t\t}\n\t\tif (item.submenu!= null) {\n\t\t\titem.submenu := this.translateTemplate(item.submenu, keystrokesByCommand)\n\t\t}\n\t}\n\treturn template\n}", "CodeBleu_score": 32.58196137527016}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (item, i) in template {\n\t\tif (!item.label) {\n\t\t\titem.label := item.title\n\t\t}\n\t\tif (!item.command) {\n\t\t\titem.command := item.title\n\t\t}\n\t\tif (!item.keystrokes) {\n\t\t\titem.keystrokes := keystrokesByCommand[item.command]\n\t\t}\n\t\tif (item.keystrokes) {\n\t\t\tif (InStr(item.keystrokes, \" \")) {\n\t\t\t\titem.label.= \" (\" item.keystrokes \")\"\n\t\t\t} else {\n\t\t\t\titem.accelerator := item.keystrokes\n\t\t\t}\n\t\t}\n\t\tif (item.command) {\n\t\t\titem.click := Func(\"sendCommand\").Bind(item.command)\n\t\t\tif (!InStr(item.command, \"application:\")) {\n\t\t\t\titem.windowSpecific := true\n\t\t\t}\n\t\t}\n\t\tif (item.submenu) {\n\t\t\titem.submenu := this.translateTemplate(item.submenu, keystrokesByCommand)\n\t\t}\n\t}\n\treturn template\n}", "CodeBleu_score": 30.150240649371835}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor item in template {\n\t\tif (item.label == \"-\") {\n\t\t\tcontinue\n\t\t}\n\t\tif (item.label == undefined) {\n\t\t\titem.label := item.command\n\t\t\titem.accelerator := keystrokesByCommand[item.command]\n\t\t}\n\t\tif (item.accelerator == undefined) {\n\t\t\titem.accelerator := keystrokesByCommand[item.command]\n\t\t}\n\t\tif (item.accelerator!= undefined) {\n\t\t\tif (InStr(item.accelerator, \" \")) {\n\t\t\t\titem.label := item.accelerator \" \" item.label\n\t\t\t\titem.accelerator := \"\"\n\t\t\t} else {\n\t\t\t\titem.accelerator := \"CmdOrCtrl+\" item.accelerator\n\t\t\t}\n\t\t}\n\t\tif (item.command!= undefined) {\n\t\t\tif (InStr(item.command, \"application:\")) {\n\t\t\t\titem.windowSpecific := false\n\t\t\t} else {\n\t\t\t\titem.windowSpecific := true\n\t\t\t}\n\t\t\titem.click := Func(\"sendCommand\").Bind(item.command)\n\t\t}\n\t\tif (item.submenu!= undefined) {\n\t\t\titem.submenu := this.translateTemplate(item.submenu, keystrokesByCommand)\n\t\t}\n\t}\n\treturn template\n}", "CodeBleu_score": 30.751335906549134}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\nconst item = object[index];\nitems.push(item);\nif (item.submenu)\nitems = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 95.57498943568349}, {"code": "flattenMenuItems(menu){\n\t\tconst object = menu.items || {};\n\tlet items = [];\n\tfor (let index in object) {\n\t\tconst item = object[index];\n\t\titems.push(item);\n\t\tif (item.submenu)\n\t\t\titems = items.concat(this.flattenMenuItems(item.submenu));\n\t}\n\treturn items;\n}", "CodeBleu_score": 95.68511089229261}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\n  const item = object[index];\n  items.push(item);\n  if (item.submenu)\n    items = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 97.24802033803455}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tconst encrypted = Buffer.concat([cipher.update(JSON.stringify(options), 'utf8'), cipher.final()]);\n\tconst tag = cipher.getAuthTag();\n\treturn JSON.stringify({\n\t\tdata: encrypted.toString('hex'),\n\t\ttag: tag.toString('hex'),\n\t\tiv: iv.toString('hex')\n\t});\n}", "CodeBleu_score": 50.4970856425763}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv(\"aes-256-gcm\", secret, iv);\n\tconst encrypted = Buffer.concat([cipher.update(JSON.stringify(options)), cipher.final()]);\n\tconst tag = cipher.getAuthTag();\n\treturn JSON.stringify({\n\t\tdata: encrypted.toString(\"hex\"),\n\t\ttag: tag.toString(\"hex\"),\n\t\tiv: iv.toString(\"hex\"),\n\t});\n}", "CodeBleu_score": 47.8560262126326}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16)\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv)\n\tconst encrypted = Buffer.concat([cipher.update(JSON.stringify(options), 'utf8'), cipher.final()])\n\tconst tag = cipher.getAuthTag()\n\treturn JSON.stringify({\n\t\tiv: iv.toString('hex'),\n\t\ttag: tag.toString('hex'),\n\t\tcontent: encrypted.toString('hex')\n\t})\n}", "CodeBleu_score": 48.313803863154185}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t\tfor (item of template) {\n\t\tif (item.command) {\n\t\t\tif (!item.commandDetail) {\n\t\t\t\titem.commandDetail = {}\n\t\t\t}\n\t\t\titem.commandDetail.contextCommand = true\n\t\t\titem.click = (menuItem) => {\n\t\t\t\tif (menuItem.commandDetail.contextCommand) {\n\t\t\t\t\tsendCommandToWindow(menuItem.commandDetail.command, menuItem.commandDetail.commandDetail)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu.items)\n\t\t}\n\t}\n}", "CodeBleu_score": 54.38209311673046}, {"code": "createClickHandlers(template){\n\t\tfor (item of template) {\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command.split(':')\n\t\t\titem.contextCommand = true\n\t\t\titem.click = (menuItem, browserWindow, event) => {\n\t\t\t\tglobal.atomApplication.sendCommandToWindow(item.commandDetail[0], item.commandDetail[1], browserWindow)\n\t\t\t}\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu.items)\n\t\t}\n\t}\n}", "CodeBleu_score": 48.35672962457163}, {"code": "createClickHandlers(template){\n\t\tfor (let item of template) {\n\t\tif (item.command) {\n\t\t\tif (!item.commandDetail) {\n\t\t\t\titem.commandDetail = item.command\n\t\t\t}\n\t\t\titem.contextCommand = true\n\t\t\titem.click = (menuItem, browserWindow, event) => {\n\t\t\t\tif (item.commandDetail) {\n\t\t\t\t\tglobal.atomApplication.sendCommandToWindow(browserWindow, item.commandDetail)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tcreateClickHandlers(item.submenu.items)\n\t\t}\n\t}\n}", "CodeBleu_score": 49.56000098767082}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\n\tif (!recoveryFile) return;\n\ttry {\n\t\tawait recoveryFile.release();\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n\tif (recoveryFile.isReleased()) {\n\t\tthis.recoveryFilesByFilePath.delete(path);\n\t\tthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\n\t\tthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\n\t}\n}", "CodeBleu_score": 66.33318552732368}, {"code": "async didSavePath(window, path){\n\t\tconst recoveryFile = this.windowsByRecoveryFile.get(window);\n\tif (!recoveryFile) return;\n\ttry {\n\t\tawait recoveryFile.release();\n\t} catch (err) {\n\t\tconsole.log('Error releasing recovery file:', err);\n\t}\n\tthis.recoveryFilesByFilePath.get(path).delete(recoveryFile);\n\tthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\n\tthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\n}", "CodeBleu_score": 55.745659465829256}, {"code": "async didSavePath(window, path){\n\t\t// Get the recovery file from the map.\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\n\t// Attempt to release the recovery file.\n\ttry {\n\t\tawait recoveryFile.release();\n\t} catch (error) {\n\t\t// Log the error details.\n\t\tconsole.log(\n\t\t\t`Failed to release recovery file for path ${path}: ${error.message}`\n\t\t);\n\t}\n\t// Remove the file from the maps.\n\tthis.recoveryFilesByFilePath.delete(path);\n\tthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\n\tthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\n}", "CodeBleu_score": 62.08671298321854}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\t", "CodeBleu_score": 2.7930095370516357}, {"code": "async didCrashWindow(window){\n\t", "CodeBleu_score": 2.7930095370516357}, {"code": "async didCrashWindow(window){\n\tromises = [];\nfor (const recoveryFile of this.recoveryFilesByWindow.get(window)) {\npromises.push(\nrecoveryFile\n         .recover()\n         .catch(error => {\n            const message = 'A file that Atom was saving could be corrupted';\n            const detail =\n              `Error ${error.code}. There was a crash while saving \"${\n                recoveryFile.originalPath\n              }\", so this file might be blank or corrupted.\n` +\n              `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n                recoveryFile.recoveryPath\n              }\".`;\n            console.log(detail);\n            dialog.showMessageBox(window, {\n              type: 'info',\n              buttons: ['OK'],\n              message,\n              detail\n            });\n          })\n);\n}\nawait Promise.all(promises);\nthis.windowsByRecoveryFile.get(recoveryFile).delete(recoveryFile);\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.recoveryFilesByFilePath.delete(recoveryFile.originalPath);\nthis.recoveryFilesByWindow.has(window) &&\nthis.recoveryFilesByWindow.get(window).size === 0 &&\nthis.recoveryFilesByWindow.delete(window);\n}", "CodeBleu_score": 76.19852052909621}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t", "CodeBleu_score": 2.0136510171862327}, {"code": "async function copyFile(source, destination, mode){\n\t new Promise((resolve, reject) => {\nfs.createReadStream(source)\n         .on('error', reject)\n         .pipe(fs.createWriteStream(destination, {mode}))\n         .on('error', reject)\n         .on('close', resolve);\n});\n}", "CodeBleu_score": 22.30053126008689}, {"code": "async function copyFile(source, destination, mode){\n\treadStream = fs.createReadStream(source)\nconst\nwriteStream = fs.createWriteStream(destination, {\nmode\n})\ntry {\nawait\nmkdirp(Path.dirname(destination))\nawait\nnew Promise((resolve, reject) => {\nreadStream\n         .on('error', reject)\n         .once\nwriteStream\n         .on('error', reject)\n         .on\nmkdirp\nwriteStream\n         .on('error', reject)\n         .on('open', () => readStream.pipe(writeStream))\n         .once\nreadStream.on\nresolve\nfs.createWriteStream\nreject\nwriteStream\n         .on\nfs.createReadStream\nPath.dirname\nreadStream.pipe\n}\n)\n} catch (error) {\nawait\nfs.promises.unlink(destination)\nthrow\nerror\n}\n}", "CodeBleu_score": 53.320222931630944}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform!== 'win32') {\n\t\treturn false;\n\t}\n\tconst SquirrelUpdate = require('electron-squirrel-startup');\n\tconst cmd = process.argv[1];\n\treturn SquirrelUpdate.handleStartupEvent(cmd);\n}", "CodeBleu_score": 79.47530974969614}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform!== 'win32') {\n\t\treturn false;\n\t}\n\n\tconst SquirrelUpdate = require('electron-squirrel-startup');\n\tconst command = process.argv[1];\n\n\treturn SquirrelUpdate.handleStartupEvent(command);\n}", "CodeBleu_score": 80.60202969294565}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform!== 'win32') {\n\t\treturn false\n\t}\n\n\tconst SquirrelUpdate = require('electron-squirrel-startup')\n\n\tconst command = process.argv[1]\n\treturn SquirrelUpdate.handleStartupEvent(command)\n}", "CodeBleu_score": 73.38116691936901}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32' && filePath) {\n\t\treturn filePath.replace(/^([a-z]):/, function(match, p1) {\n\t\t\treturn p1.toUpperCase() + ':';\n\t\t});\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 63.67774381388449}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32' && filePath) {\n\t\tconst driveLetter = filePath.charAt(0);\n\t\tif (driveLetter && driveLetter.toLowerCase()!== driveLetter.toUpperCase()) {\n\t\t\treturn filePath.replace(driveLetter, driveLetter.toUpperCase());\n\t\t}\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 51.85317875112803}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === \"win32\" && filePath) {\n\t\tconst driveLetter = filePath.match(/^[a-z]:/i);\n\t\tif (driveLetter) {\n\t\t\treturn filePath.replace(driveLetter[0], driveLetter[0].toUpperCase());\n\t\t}\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 48.51471406588709}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\tet doneCount = this.parts.length;\n\tthis.parts.forEach(part => {\n\t\tlet reg = new Registry({\n\t\t\thive: 'HKCU',\n\t\t\tkey: part.key!= null? `${this.key}\\\\${part.key}` : this.key\n\t\t});\n\t\treturn reg.create(() =>\n\t\t\treg.set(part.name, Registry.REG_SZ, part.value, () => {\n\t\t\t\tif (--doneCount === 0) return callback();\n\t\t\t})\n\t\t);\n\t});\n}", "CodeBleu_score": 77.62915642621408}, {"code": "register(callback){\n\tet doneCount = this.parts.length;\n\tthis.parts.forEach(part => {\n\t\tlet reg = new Registry({\n\t\t\thive: 'HKCU',\n\t\t\tkey: part.key!= null? `${this.key}\\\\${part.key}` : this.key\n\t\t});\n\t\treturn reg.create(() =>\n\t\t\treg.set(part.name, Registry.REG_SZ, part.value, () => {\n\t\t\t\tif (--doneCount === 0) return callback();\n\t\t\t})\n\t\t);\n\t});\n}", "CodeBleu_score": 77.62915642621408}, {"code": "register(callback){\n\tet doneCount = this.parts.length;\n\tthis.parts.forEach(part => {\n\t\tlet reg = new Registry({\n\t\t\thive: 'HKCU',\n\t\t\tkey: part.key!= null? `${this.key}\\\\${part.key}` : this.key\n\t\t});\n\t\treturn reg.create(() =>\n\t\t\treg.set(part.name, Registry.REG_SZ, part.value, () => {\n\t\t\t\tif (--doneCount === 0) return callback();\n\t\t\t})\n\t\t);\n\t});\n}", "CodeBleu_score": 77.62915642621408}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\tf (typeof callback === 'function') {\n\t\t// Async\n\t\tthis.getCurrentWindow().showSaveDialog(options, callback);\n\t} else {\n\t\t// Sync\n\t\tif (typeof options ==='string') {\n\t\t\toptions = { defaultPath: options };\n\t\t}\n\t\treturn this.getCurrentWindow().showSaveDialog(options);\n\t}\n}", "CodeBleu_score": 84.36329348200246}, {"code": "showSaveDialog(options, callback){\n\tf (typeof callback === 'function') {\n\t\t// Async\n\t\tthis.getCurrentWindow().showSaveDialog(options, callback);\n\t} else {\n\t\t// Sync\n\t\tif (typeof options ==='string') {\n\t\t\toptions = { defaultPath: options };\n\t\t}\n\t\treturn this.getCurrentWindow().showSaveDialog(options);\n\t}\n}", "CodeBleu_score": 84.36329348200246}, {"code": "showSaveDialog(options, callback){\n\tf (typeof callback === 'function') {\n\t\t// Async\n\t\tthis.getCurrentWindow().showSaveDialog(options, callback);\n\t} else {\n\t\t// Sync\n\t\tif (typeof options ==='string') {\n\t\t\toptions = { defaultPath: options };\n\t\t}\n\t\treturn this.getCurrentWindow().showSaveDialog(options);\n\t}\n}", "CodeBleu_score": 84.36329348200246}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\tt { x, y, width, height } = this.getWindowDimensions();\n    if (!this.isValidDimensions({ x, y, width, height })) {\n      const defaultWindowDimensions = this.getDefaultWindowDimensions();\n      this.setWindowDimensions(defaultWindowDimensions);\n      return defaultWindowDimensions;\n    } else {\n      return { x, y, width, height };\n    }\n  }", "CodeBleu_score": 24.13752924386847}, {"code": "async restoreWindowDimensions(){\n\tst currentWindowDimensions = this.getWindowDimensions();\n\tif (!this.isValidDimensions(currentWindowDimensions)) {\n\t\tawait this.setWindowDimensions(this.getDefaultWindowDimensions());\n\t}\n\treturn this.getWindowDimensions();\n}", "CodeBleu_score": 26.56588737641869}, {"code": "async restoreWindowDimensions(){\n\t(this.isWindowDimensionsSet() && this.isValidDimensions(this.getWindowDimensions())) {\n\t\tawait this.setWindowDimensions(this.getWindowDimensions());\n\t\treturn this.getWindowDimensions();\n\t} else {\n\t\tconst dimensions = this.getDefaultWindowDimensions();\n\t\tawait this.setWindowDimensions(dimensions);\n\t\treturn dimensions;\n\t}\n}", "CodeBleu_score": 25.266708621545504}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t\t// TODO: Implement this.applicationDelegate.installShellCommandsInteractively\n}", "CodeBleu_score": 2.1294330533997723}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}, {"code": "installShellCommandsInteractively(){\n\t\t// TODO: Implement this function\n}", "CodeBleu_score": 2.1294330533997723}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t(process.platform!== 'darwin') return callback();\n\nconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\nfs.readlink(destinationPath, (error, realpath) => {\nif (error && error.code!== 'ENOENT') return callback(error);\nif (realpath === commandPath) return callback(null, commandName);\nthis.createSymlink(fs, commandPath, destinationPath, error => {\nif (error && error.code === 'EACCES' && askForPrivilege) {\nconst fsAdmin = require('fs-admin');\nthis.createSymlink(fsAdmin, commandPath, destinationPath, error => {\ncallback(error, commandName);\n});\n} else {\ncallback(error);\n}\n});\n});\n}", "CodeBleu_score": 91.15616731116603}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t(process.platform!== 'darwin') return callback();\n\nconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\nfs.readlink(destinationPath, (error, realpath) => {\n  if (error && error.code!== 'ENOENT') return callback(error);\n  if (realpath === commandPath) return callback(null, commandName);\n  this.createSymlink(fs, commandPath, destinationPath, error => {\n    if (error && error.code === 'EACCES' && askForPrivilege) {\n      const fsAdmin = require('fs-admin');\n      this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n        callback(error, commandName);\n      });\n    } else {\n      callback(error);\n    }\n  });\n});\n}", "CodeBleu_score": 93.81994537631297}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t(process.platform!== 'darwin') return callback();\n\nconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\nfs.readlink(destinationPath, (error, realpath) => {\n  if (error && error.code!== 'ENOENT') return callback(error);\n  if (realpath === commandPath) return callback(null, commandName);\n  this.createSymlink(fs, commandPath, destinationPath, error => {\n    if (error && error.code === 'EACCES' && askForPrivilege) {\n      const fsAdmin = require('fs-admin');\n      this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n        callback(error, commandName);\n      });\n    } else {\n      callback(error);\n    }\n  });\n});\n}", "CodeBleu_score": 93.81994537631297}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tet row, column;\n\tconst range = this.marker.getScreenRange();\n\tif (moveToEndOfSelection &&!range.isEmpty()) {\n\t\t({ row, column } = range.start);\n\t} else {\n\t\t({ row, column } = this.getScreenPosition());\n\t}\n\n\tif (this.goalColumn!= null) column = this.goalColumn;\n\tthis.setScreenPosition(\n\t\t{ row: row - rowCount, column },\n\t\t{ skipSoftWrapIndentation: true }\n\t);\n\tthis.goalColumn = column;\n}", "CodeBleu_score": 89.7262025560361}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tet row, column;\n\tconst range = this.marker.getScreenRange();\n\tif (moveToEndOfSelection &&!range.isEmpty()) {\n\t\t({ row, column } = range.start);\n\t} else {\n\t\t({ row, column } = this.getScreenPosition());\n\t}\n\n\tif (this.goalColumn!= null) column = this.goalColumn;\n\tthis.setScreenPosition(\n\t\t{ row: row - rowCount, column },\n\t\t{ skipSoftWrapIndentation: true }\n\t);\n\tthis.goalColumn = column;\n}", "CodeBleu_score": 89.7262025560361}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tet row, column;\n\tconst range = this.marker.getScreenRange();\n\tif (moveToEndOfSelection &&!range.isEmpty()) {\n\t\t({ row, column } = range.start);\n\t} else {\n\t\t({ row, column } = this.getScreenPosition());\n\t}\n\n\tif (this.goalColumn!= null) column = this.goalColumn;\n\tthis.setScreenPosition(\n\t\t{ row: row - rowCount, column },\n\t\t{ skipSoftWrapIndentation: true }\n\t);\n\tthis.goalColumn = column;\n}", "CodeBleu_score": 89.7262025560361}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\nfor (const layer of this.decorationCountsByLayer.keys()) {\nfor (const marker of layer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow]\n})) {\nconst decorations = this.decorationsByMarker.get(marker);\nif (decorations) {\ndecorationsByMarkerId[marker.id] = Array.from(decorations);\n}\n}\n}\nreturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.68935133939671}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\nfor (const layer of this.decorationCountsByLayer.keys()) {\nfor (const marker of layer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow]\n})) {\nconst decorations = this.decorationsByMarker.get(marker);\nif (decorations) {\ndecorationsByMarkerId[marker.id] = Array.from(decorations);\n}\n}\n}\nreturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.68935133939671}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t\tconst decorationsByMarkerId = {};\n\tfor (const layer of this.decorationCountsByLayer.keys()) {\n\t\tfor (const marker of layer.findMarkers({\n\t\t\tintersectsScreenRowRange: [startScreenRow, endScreenRow]\n\t\t})) {\n\t\t\tconst decorations = this.decorationsByMarker.get(marker);\n\t\t\tif (decorations) {\n\t\t\t\tdecorationsByMarkerId[marker.id] = Array.from(decorations);\n\t\t\t}\n\t\t}\n\t}\n\treturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.82565299797736}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\nthrow new Error('Cannot decorate a destroyed marker layer');\n}\nmarkerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\nconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\nlet layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\nif (layerDecorations == null) {\nlayerDecorations = new Set();\nthis.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n}\nlayerDecorations.add(decoration);\nthis.observeDecoratedLayer(markerLayer, false);\nthis.emitDidUpdateDecorations();\nreturn decoration;\n}", "CodeBleu_score": 97.72423113370415}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\n}", "CodeBleu_score": 1.8269894317795843}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\tif (markerLayer.isDestroyed()) {\n\t\tthrow new Error('Cannot decorate a destroyed marker layer');\n\t}\n\tmarkerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n\tconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\n\tlet layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n\tif (layerDecorations == null) {\n\t\tlayerDecorations = new Set();\n\t\tthis.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n\t}\n\tlayerDecorations.add(decoration);\n\tthis.observeDecoratedLayer(markerLayer, false);\n\tthis.emitDidUpdateDecorations();\n\treturn decoration;\n}", "CodeBleu_score": 97.75056672056172}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n\tthis.decorationCountsByLayer.set(layer, newCount);\n\tif (newCount === 1) {\n\t\tthis.layerUpdateDisposablesByLayer.set(\n\t\t\tlayer,\n\t\t\tlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n\t\t);\n\t}\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n}", "CodeBleu_score": 95.80301962795797}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n\tthis.decorationCountsByLayer.set(layer, newCount);\n\tif (newCount === 1) {\n\t\tthis.layerUpdateDisposablesByLayer.set(\n\t\t\tlayer,\n\t\t\tlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n\t\t);\n\t}\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n}", "CodeBleu_score": 95.80301962795797}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n\tthis.decorationCountsByLayer.set(layer, newCount);\n\tif (newCount === 1) {\n\t\tthis.layerUpdateDisposablesByLayer.set(\n\t\t\tlayer,\n\t\t\tlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n\t\t);\n\t}\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n}", "CodeBleu_score": 95.80301962795797}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\ts.measure('loadTime', () => {\nthis.path = path.join(this.packageManager.resourcePath, this.path);\nModuleCache.add(this.path, this.metadata);\nthis.loadStylesheets();\nthis.getMainModulePath();\n});\n}", "CodeBleu_score": 65.04355839970819}, {"code": "finishLoading(){\n\ts.measure('loadTime', () => {\nthis.path = path.join(this.packageManager.resourcePath, this.path);\nModuleCache.add(this.path, this.metadata);\n\nthis.loadStylesheets();\n// Unfortunately some packages are accessing `@mainModulePath`, so we need\n// to compute that variable eagerly also for preloaded packages.\nthis.getMainModulePath();\n});\n}", "CodeBleu_score": 65.04355839970819}, {"code": "finishLoading(){\n\ts.measure('loadTime', () => {\nthis.path = path.join(this.packageManager.resourcePath, this.path);\nModuleCache.add(this.path, this.metadata);\n\nthis.loadStylesheets();\n// Unfortunately some packages are accessing `@mainModulePath`, so we need\n// to compute that variable eagerly also for preloaded packages.\nthis.getMainModulePath();\n});\n}", "CodeBleu_score": 65.04355839970819}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t/ User preference deciding which action to take on a title bar double-click\nswitch (this.applicationDelegate.getUserDefault('AppleActionOnDoubleClick','string')) {\n  case 'Minimize':\n    this.applicationDelegate.minimizeWindow();\n    break;\n  case 'Maximize':\n    if (this.applicationDelegate.isWindowMaximized()) {\n      this.applicationDelegate.unmaximizeWindow();\n    } else {\n      this.applicationDelegate.maximizeWindow();\n    }\n    break;\n}\n}", "CodeBleu_score": 61.73226381943785}, {"code": "dblclickHandler(){\n\t}", "CodeBleu_score": 4.157945160502452}, {"code": "dblclickHandler(){\n\t/ User preference deciding which action to take on a title bar double-click\nswitch (this.applicationDelegate.getUserDefault('AppleActionOnDoubleClick','string')) {\ncase 'Minimize':\nthis.applicationDelegate.minimizeWindow();\nbreak;\ncase 'Maximize':\nif (this.applicationDelegate.isWindowMaximized()) {\nthis.applicationDelegate.unmaximizeWindow();\n} else {\nthis.applicationDelegate.maximizeWindow();\n}\nbreak;\n}\n}", "CodeBleu_score": 59.737465841175045}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\t", "CodeBleu_score": 1.6816268623315624}, {"code": "_openSettingsWindow (category){\n\t\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n\tif (settingWins.length >= 1) {\n\t\t// A setting window is already created\n\t\tconst browserSettingWindow = settingWins[0].win.browserWindow\n\t\tbrowserSettingWindow.webContents.send('settings::change-tab', category)\n\t\tif (isLinux) {\n\t\t\tbrowserSettingWindow.focus()\n\t\t} else {\n\t\t\tbrowserSettingWindow.moveTop()\n\t\t}\n\t\treturn\n\t}\n\tthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.25706267515326}, {"code": "_openSettingsWindow (category){\n\t\n}", "CodeBleu_score": 2.3393965650481676}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t!fileList ||!Array.isArray(fileList) ||!fileList.length) return []\nconst { windows } = this\nconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\nif (this.windowCount <= 1) {\nreturn [{ windowId: lastActiveEditorId, fileList }]\n}\n\n// Array of scores, same order like fileList.\nlet filePathScores = null\nfor (const window of windows.values()) {\nif (window.type === WindowType.EDITOR) {\nconst scores = window.getCandidateScores(fileList)\nif (!filePathScores) {\nfilePathScores = scores\n} else {\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\n// Update score only if the file is not already opened.\nif (filePathScores[i].score!== -1 && filePathScores[i].score < scores[i].score) {\nfilePathScores[i] = scores[i]\n}\n}\n}\n}\n}\n\nconst buf = []\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\nlet { id: windowId, score } = filePathScores[i]\n\nif (score === -1) {\n// Skip files that already opened.\ncontinue\n} else if (score === 0) {\n// There is no best window to open the file(s) in.\nwindowId = lastActiveEditorId\n}\n\nlet item = buf.find(w => w.windowId === windowId)\nif (!item) {\nitem = { windowId, fileList: [] }\nbuf.push(item)\n}\nitem.fileList.push(fileList[i])\n}\nreturn buf\n}", "CodeBleu_score": 76.32689198068739}, {"code": "findBestWindowToOpenIn (fileList){\n\t!fileList ||!Array.isArray(fileList) ||!fileList.length) return []\nconst { windows } = this\nconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\nif (this.windowCount <= 1) {\nreturn [{ windowId: lastActiveEditorId, fileList }]\n}\n\n// Array of scores, same order like fileList.\nlet filePathScores = null\nfor (const window of windows.values()) {\nif (window.type === WindowType.EDITOR) {\nconst scores = window.getCandidateScores(fileList)\nif (!filePathScores) {\nfilePathScores = scores\n} else {\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\n// Update score only if the file is not already opened.\nif (filePathScores[i].score!== -1 && filePathScores[i].score < scores[i].score) {\nfilePathScores[i] = scores[i]\n}\n}\n}\n}\n}\n\nconst buf = []\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\nlet { id: windowId, score } = filePathScores[i]\n\nif (score === -1) {\n// Skip files that already opened.\ncontinue\n} else if (score === 0) {\n// There is no best window to open the file(s) in.\nwindowId = lastActiveEditorId\n}\n\nlet item = buf.find(w => w.windowId === windowId)\nif (!item) {\nitem = { windowId, fileList: [] }\nbuf.push(item)\n}\nitem.fileList.push(fileList[i])\n}\nreturn buf\n}", "CodeBleu_score": 76.32689198068739}, {"code": "findBestWindowToOpenIn (fileList){\n\t(!fileList ||!Array.isArray(fileList) ||!fileList.length) return []\n\tconst { windows } = this\n\tconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n\tif (this.windowCount <= 1) {\n\t\treturn [{ windowId: lastActiveEditorId, fileList }]\n\t}\n\n\t// Array of scores, same order like fileList.\n\tlet filePathScores = null\n\tfor (const window of windows.values()) {\n\t\tif (window.type === WindowType.EDITOR) {\n\t\t\tconst scores = window.getCandidateScores(fileList)\n\t\t\tif (!filePathScores) {\n\t\t\t\tfilePathScores = scores\n\t\t\t} else {\n\t\t\t\tconst len = filePathScores.length\n\t\t\t\tfor (let i = 0; i < len; ++i) {\n\t\t\t\t\t// Update score only if the file is not already opened.\n\t\t\t\t\tif (filePathScores[i].score!== -1 && filePathScores[i].score < scores[i].score) {\n\t\t\t\t\t\tfilePathScores[i] = scores[i]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst buf = []\n\tconst len = filePathScores.length\n\tfor (let i = 0; i < len; ++i) {\n\t\tlet { id: windowId, score } = filePathScores[i]\n\n\t\tif (score === -1) {\n\t\t\t// Skip files that already opened.\n\t\t\tcontinue\n\t\t} else if (score === 0) {\n\t\t\t// There is no best window to open the file(s) in.\n\t\t\twindowId = lastActiveEditorId\n\t\t}\n\n\t\tlet item = buf.find(w => w.windowId === windowId)\n\t\tif (!item) {\n\t\t\titem = { windowId, fileList: [] }\n\t\t\tbuf.push(item)\n\t\t}\n\t\titem.fileList.push(fileList[i])\n\t}\n\treturn buf\n}", "CodeBleu_score": 76.42189252342456}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8';\n\tlet isBom = false;\n\tfor (const [encodingName, sequence] of Object.entries(BOM_ENCODING_SEQUENCE)) {\n\t\tif (checkSequence(buffer, sequence)) {\n\t\t\tencoding = encodingName;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer);\n\t\tencoding = MAP_ENCODING[guessedEncoding] || guessedEncoding.toLowerCase();\n\t}\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 43.68529375115887}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8'\n\tlet isBom = false\n\tfor (const [sequence, enc] of Object.entries(bomEncodings)) {\n\t\tif (checkSequence(buffer, sequence)) {\n\t\t\tencoding = enc\n\t\t\tisBom = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (autoGuessEncoding) {\n\t\tconst ced = ced(buffer)\n\t\tencoding = ced.encoding\n\t\tif (ced.confidence < 0.95) {\n\t\t\tencoding = encoding.toLowerCase().replace(/[-_]/g, '')\n\t\t}\n\t}\n\treturn { encoding, isBom }\n}", "CodeBleu_score": 52.77250249534241}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8';\n\tlet isBom = false;\n\n\tfor (const [bomEncoding, bomSequence] of Object.entries(BOM_ENCODING_SEQUENCE)) {\n\t\tif (checkSequence(buffer, bomSequence)) {\n\t\t\tencoding = bomEncoding;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (autoGuessEncoding) {\n\t\tconst cedEncoding = ced(buffer);\n\t\tencoding = ENCODING_MAP[cedEncoding] || cedEncoding.toLowerCase().replace(/[^a-z0-9]/g, '');\n\t}\n\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 49.851692373517885}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst {\n\t\tlineEndings,\n\t\tencoding,\n\t\tbom,\n\t} = options;\n\tconst ext = path.extname(pathname) || '.md';\n\tconst lineEnding = lineEndings || getLineEnding(content);\n\tconst buffer = iconv.encode(content, encoding, bom);\n\treturn writeFile(pathname, buffer, lineEnding, ext);\n}", "CodeBleu_score": 36.00535038533227}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst {\n\t\tencoding = 'utf8',\n\t\tlineEndings = 'auto',\n\t\tbom = false,\n\t\t...rest\n\t} = options || {};\n\n\tconst ext = path.extname(pathname);\n\tif (!ext) {\n\t\tpathname += '.md';\n\t}\n\n\tconst buffer = convertLineEndings(content, lineEndings);\n\n\treturn writeFile(pathname, encode(buffer, encoding, bom), rest);\n}", "CodeBleu_score": 31.03567974504411}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst { lineEndings, encoding, bom } = options || {};\n\tconst ext = path.extname(pathname);\n\tif (!ext) {\n\t\tpathname += '.md';\n\t}\n\tconst buffer = iconv.encode(content, encoding, bom);\n\twriteFile(pathname, buffer, { lineEndings });\n}", "CodeBleu_score": 32.41942109378703}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t", "CodeBleu_score": 1.4014791665343247}, {"code": "export const registerKeyboardListeners = () =>{\n\t", "CodeBleu_score": 1.4014791665343247}, {"code": "export const registerKeyboardListeners = () =>{\n\t", "CodeBleu_score": 1.4014791665343247}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\nif (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\nconsole.log('[DEBUG] Keyboard layout changed:\n', layout)\n}\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 86.44524569209217}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n  if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n    console.log('[DEBUG] Keyboard layout changed:\n', layout)\n  }\n  electronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 87.51800024591708}, {"code": "_prepareKeyMapper (){\n\t\n}", "CodeBleu_score": 3.4588146509825073}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t}", "CodeBleu_score": 1.0107397220095637}, {"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\n\tconst { others } = separateConfig(this.systemConfig.store)\n\tif (others && Object.keys(others).length > 0) {\n\t\tObject.keys(others).forEach(key => {\n\t\t\tthis.systemConfig.delete(key)\n\t\t})\n\t}\n\n\tconst proxy = this.getUserConfig('proxy', { enable: false })\n\tconst { enable, server, bypass, scope = [] } = proxy\n\tif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n\t\tthis.setSystemConfig('all-proxy', server)\n\t\tthis.setSystemConfig('no-proxy', bypass)\n\t}\n\n\t// Fix spawn ENAMETOOLONG on Windows\n\tconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\n\tthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 97.43680550421237}, {"code": "fixSystemConfig (){\n\t/ Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\nObject.keys(others).forEach(key => {\nthis.systemConfig.delete(key)\n})\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\nthis.setSystemConfig('all-proxy', server)\nthis.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 96.22720534670547}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\t\tif (!client) {\n\t\treturn\n\t}\n\n\ttry {\n\t\tclient.destroy(() => {\n\t\t\tclient = null\n\t\t})\n\t} catch (err) {\n\t\tlogger.warn('[Motrix] close UPnP client fail', err)\n\t}\n}", "CodeBleu_score": 93.04971875731651}, {"code": "closeClient (){\n\tif (!client) {\nreturn\n}\n\ntry {\nclient.destroy(() => {\nclient = null\n})\n} catch (err) {\nlogger.warn('[Motrix] close UPnP client fail', err)\n}\n}", "CodeBleu_score": 92.76670811853336}, {"code": "closeClient (){\n\t\tif (!client) {\n\t\treturn\n\t}\n\n\ttry {\n\t\tclient.destroy(() => {\n\t\t\tclient = null\n\t\t})\n\t} catch (err) {\n\t\tlogger.warn('[Motrix] close UPnP client fail', err)\n\t}\n}", "CodeBleu_score": 93.04971875731651}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\t", "CodeBleu_score": 1.3214943682368832}, {"code": "getTouchBarByPage (page){\n\t", "CodeBleu_score": 1.3214943682368832}, {"code": "getTouchBarByPage (page){\n\tet bar = this.bars[page] || null\n\tif (!bar) {\n\t\ttry {\n\t\t\tconst items = this.build(this.template)\n\t\t\tbar = new TouchBar({ items })\n\t\t\tthis.bars[page] = bar\n\t\t} catch (e) {\n\t\t\tlogger.info('getTouchBarByPage fail', e)\n\t\t}\n\t}\n\treturn bar\n}", "CodeBleu_score": 74.6503736718015}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\tindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide &&!this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 92.51806400869373}, {"code": "handleWindowClose (pageOptions, page, window){\n\tindow.on('close', (event) => {\nif (pageOptions.bindCloseToHide &&!this.willQuit) {\nevent.preventDefault()\n\n// @see https://github.com/electron/electron/issues/20263\nif (window.isFullScreen()) {\nwindow.once('leave-full-screen', () => window.hide())\n\nwindow.setFullScreen(false)\n} else {\nwindow.hide()\n}\n}\nconst bounds = window.getBounds()\nthis.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 88.59718524164786}, {"code": "handleWindowClose (pageOptions, page, window){\n\tindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide &&!this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 92.51806400869373}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = app.getPath('exe')\n\t\tconst appFolder = path.dirname(appPath)\n\t\tconst appName = path.basename(appPath)\n\t\tconst appsFolder = path.join(appFolder, '..', 'Applications')\n\t\tconst newAppPath = path.join(appsFolder, appName)\n\n\t\tif (appFolder === appsFolder) {\n\t\t\t// The app is already in the Applications folder\n\t\t\tresolve()\n\t\t} else {\n\t\t\tfs.rename(appPath, newAppPath, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (errorMsg) {\n\t\t\t\t\t\treject(errorMsg)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n}", "CodeBleu_score": 38.3746432422838}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\t// Check if the application is already in the Applications folder\n\t\tconst appPath = app.getPath('exe');\n\t\tconst appFolder = path.dirname(appPath);\n\t\tconst appName = path.basename(appPath);\n\t\tconst applicationsFolder = path.join(os.homedir(), 'Applications');\n\t\tif (appFolder === applicationsFolder) {\n\t\t\t// The application is already in the Applications folder\n\t\t\tresolve();\n\t\t} else {\n\t\t\t// Move the application to the Applications folder\n\t\t\tconst destPath = path.join(applicationsFolder, appName);\n\t\t\tfs.rename(appPath, destPath, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\t// Handle the error\n\t\t\t\t\treject(errorMsg || err);\n\t\t\t\t} else {\n\t\t\t\t\t// The move was successful\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 38.46639389793678}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = app.getAppPath()\n\t\tconst appFolder = path.dirname(appPath)\n\t\tconst appName = path.basename(appPath)\n\t\tconst appFolderName = path.basename(appFolder)\n\t\tconst appInApplicationsFolder = appFolderName === 'Applications'\n\n\t\tif (appInApplicationsFolder) {\n\t\t\tresolve()\n\t\t\treturn\n\t\t}\n\n\t\tconst applicationsFolder = path.join(os.homedir(), 'Applications')\n\t\tconst appInApplicationsFolder = path.dirname(appPath) === applicationsFolder\n\n\t\tif (appInApplicationsFolder) {\n\t\t\tresolve()\n\t\t\treturn\n\t\t}\n\n\t\tconst appPathInApplicationsFolder = path.join(applicationsFolder, appName)\n\n\t\tfs.rename(appPath, appPathInApplicationsFolder, (error) => {\n\t\t\tif (error) {\n\t\t\t\treject(error)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tapp.moveToApplicationsFolder()\n\t\t\tresolve()\n\t\t})\n\t})\n}", "CodeBleu_score": 37.88808531193983}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t", "CodeBleu_score": 4.689580994804317}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t", "CodeBleu_score": 4.689580994804317}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tg.debug('Copying icons if necessary')\nif (!options.icon) {\nlog.debug('No icon specified, skipping')\nreturn\n}\n\nif (isDarwinOrMasPlatform(options) && options.tray!== false) {\nawait fs.copy(\noptions.tray,\npath.join(appPath, 'tray.png'),\n)\n}\n\nif (isWindowsPlatform(options)) {\nawait fs.copy(\noptions.icon,\npath.join(appPath, `${options.name}.ico`),\n)\n} else if (isLinuxPlatform(options)) {\nawait fs.copy(\noptions.icon,\npath.join(appPath, `${options.name}${path.extname(options.icon)}`),\n)\n}\n}", "CodeBleu_score": 26.53999081778324}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\t hash = crypto.createHash('md5')\n\thash.update(url)\n\tconst hashStr = hash.digest('hex').substring(0, 6)\n\tconst normalizedAppName = appName\n\t\t.toLowerCase()\n\t\t.replace(/[,:.]/g, '')\n\t\t.replace(/[_\\s]/g, '-')\n\t\t.replace(/-+/g, '-')\n\treturn `${normalizedAppName}-nativefier-${hashStr}`\n}", "CodeBleu_score": 61.98330803108352}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t hash = crypto.createHash('md5')\n\thash.update(url)\n\treturn appName\n\t\t.toLowerCase()\n\t\t.replace(/[,:.]/g, '')\n\t\t.replace(/[_ ]/g, '-')\n\t\t.replace(/[^a-z0-9-]/g, '') +\n\t\t'-nativefier-' +\n\t\thash.digest('hex').substring(0, 6)\n}", "CodeBleu_score": 36.8421721319075}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\thash = crypto.createHash('md5')\nhash.update(url)\nreturn appName\n   .toLowerCase()\n   .replace(/[,:.]/g, '')\n   .replace(/[ _]/g, '-')\n   .replace(/-+/g, '-') +\n    '-nativefier-' +\n    hash.digest('hex').substring(0, 6)\n}", "CodeBleu_score": 38.73026562774678}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t}", "CodeBleu_score": 6.584793506668511}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\tlog.debug(`Copying app from ${src} to ${dest}`);\n\ttry {\n\t\tawait fs.copy(src, dest);\n\t} catch (err) {\n\t\tlog.error(`Failed to copy app from ${src} to ${dest}`);\n\t\tthrow err;\n\t}\n\n\tconst appConfig = {\n\t\tname: options.normalizedAppName,\n\t\tbundleId: options.normalizedAppName,\n\t\tversion: options.version,\n\t\tbuildNumber: options.buildNumber,\n\t\t...pickElectronAppArgs(options),\n\t};\n\n\tconst appConfigPath = path.join(dest, 'app.json');\n\tlog.debug(`Writing app config to ${appConfigPath}`);\n\ttry {\n\t\tawait fs.writeFile(appConfigPath, JSON.stringify(appConfig, null, 2));\n\t} catch (err) {\n\t\tlog.error(`Failed to write app config to ${appConfigPath}`);\n\t\tthrow err;\n\t}\n\n\tif (options.bookmarksMenu) {\n\t\tconst bookmarksMenuPath = path.join(dest, 'BookmarksMenu.js');\n\t\tlog.debug(`Copying bookmarks menu to ${bookmarksMenuPath}`);\n\t\ttry {\n\t\t\tawait fs.copy(options.bookmarksMenu, bookmarksMenuPath);\n\t\t} catch (err) {\n\t\t\tlog.error(`Failed to copy bookmarks menu to ${bookmarksMenuPath}`);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tif (options.injectScripts) {\n\t\tconst scriptsPath = path.join(dest,'scripts');\n\t\tlog.debug(`Copying injection scripts to ${scriptsPath}`);\n\t\ttry {\n\t\t\tawait maybeCopyScripts(scriptsPath, options.injectScripts);\n\t\t} catch (err) {\n\t\t\tlog.error(`Failed to copy injection scripts to ${scriptsPath}`);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tlog.debug(`Changing app package JSON name to ${options.normalizedAppName}`);\n\ttry {\n\t\tchangeAppPackageJsonName(path.join(dest, 'package.json'), options.normalizedAppName);\n\t} catch (err) {\n\t\tlog.error(`Failed to change app package JSON name to ${options.normalizedAppName}`);\n\t\tthrow err;\n\t}\n}", "CodeBleu_score": 48.487342251555695}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\nlog.debug('prepareElectronApp', src, dest, options)\n\nconst appConfig = {\n ...options,\n  name: options.name,\n  version: options.version,\n  description: options.description,\n  author: options.author,\n  main: options.main,\n  icon: options.icon,\n  scripts: options.scripts,\n  dependencies: options.dependencies,\n  devDependencies: options.devDependencies,\n  isDev: options.isDev,\n}\n\nlog.debug('prepareElectronApp', appConfig)\n\nconst appPackageJsonName = changeAppPackageJsonName(appConfig.name)\n\nlog.debug('prepareElectronApp', appPackageJsonName)\n\nconst appPackageJson = {\n ...appConfig,\n  name: appPackageJsonName,\n  bundleId: appConfig.bundleId || normalizeName(appConfig.name),\n}\n\nlog.debug('prepareElectronApp', appPackageJson)\n\nconst appPackageJsonPath = path.join(dest, 'package.json')\n\nlog.debug('prepareElectronApp', appPackageJsonPath)\n\ntry {\n  await fs.writeFile(appPackageJsonPath, JSON.stringify(appPackageJson, null, 2))\n} catch (e) {\n  log.error('prepareElectronApp', e)\n  throw e\n}\n\nlog.debug('prepareElectronApp', 'package.json written')\n\nif (options.menu) {\n  try {\n    await fs.copy(options.menu, path.join(dest,'menu.json'))\n  } catch (e) {\n    log.error('prepareElectronApp', e)\n  }\n}\n\nlog.debug('prepareElectronApp','menu.json copied')\n\nconst scripts = pickElectronAppArgs(options)\n\nlog.debug('prepareElectronApp', scripts)\n\nif (scripts) {\n  try {\n    await maybeCopyScripts(dest, scripts)\n  } catch (e) {\n    log.error('prepareElectronApp', e)\n    throw e\n  }\n}\n\nlog.debug('prepareElectronApp','scripts copied')\n}", "CodeBleu_score": 39.58151698662585}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\tconsole.log(`Downloading ${fileUrl}...`)\n\treturn fetch(fileUrl, {\n\t\tmethod: 'GET',\n\t\tresponseType: 'arraybuffer',\n\t})\n\t\t.then((response) => {\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = response.arrayBuffer()\n\t\t\t\tconst ext = path.extname(fileUrl)\n\t\t\t\treturn { data, ext }\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(`Error downloading ${fileUrl}: ${error}`)\n\t\t})\n}", "CodeBleu_score": 53.989475790221974}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\n}", "CodeBleu_score": 29.86584669194794}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\tconsole.log(`Downloading ${fileUrl}...`);\n\treturn fetch(fileUrl, {\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/octet-stream\",\n\t\t},\n\t})\n\t\t.then((res) => {\n\t\t\tif (res.ok) {\n\t\t\t\treturn res.arrayBuffer();\n\t\t\t} else {\n\t\t\t\tconsole.log(`Download failed: ${res.statusText}`);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})\n\t\t.then((data) => {\n\t\t\tif (data) {\n\t\t\t\treturn {\n\t\t\t\t\tdata,\n\t\t\t\t\text: path.extname(fileUrl),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 51.18628336103104}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t\treturn str\n\t\t.split('-')\n\t\t.filter((word) => word!== '')\n\t\t.map((word, index) => {\n\t\t\tif (index === 0) return word;\n\t\t\treturn word[0].toUpperCase() + word.substring(1);\n\t\t})\n\t\t.join('');\n}", "CodeBleu_score": 64.55852848704794}, {"code": "export function camelCased(str: string): string{\n\t\treturn str\n\t\t.split('-')\n\t\t.filter((word) => word!== '')\n\t\t.map((word, index) => {\n\t\t\tif (index === 0) {\n\t\t\t\treturn word\n\t\t\t}\n\n\t\t\treturn word[0].toUpperCase() + word.substring(1)\n\t\t})\n\t\t.join('')\n}", "CodeBleu_score": 59.02269277322758}, {"code": "export function camelCased(str: string): string{\n\t\treturn str\n\t\t.split('-')\n\t\t.filter((word) => word!== '')\n\t\t.map((word, index) => {\n\t\t\tif (index === 0) return word\n\t\t\treturn word[0].toUpperCase() + word.substring(1)\n\t\t})\n\t\t.join('')\n}", "CodeBleu_score": 60.137661784690586}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tlog.debug(`sanitizeFilename(platform=${platform}, filenameToSanitize=${filenameToSanitize})`);\n\n  const sanitizedFilename = sanitize(filenameToSanitize);\n  if (sanitizedFilename === '') {\n    log.warn('sanitizeFilename: sanitizedFilename is empty');\n  }\n\n  if (platform === 'linux') {\n    const sanitizedFilenameWithoutSpaces = sanitizedFilename.replace(/ /g, '');\n    const sanitizedFilenameWithoutUnicode = sanitizedFilenameWithoutSpaces.replace(\n      /[^\\x00-\\x7F]/g,\n      '',\n    );\n    if (sanitizedFilenameWithoutUnicode === '') {\n      log.warn(\n       'sanitizeFilename: sanitizedFilenameWithoutUnicode is empty',\n      );\n    }\n    log.debug(\n      `sanitizeFilename: sanitizedFilenameWithoutUnicode=${sanitizedFilenameWithoutUnicode}`,\n    );\n    return sanitizedFilenameWithoutUnicode;\n  }\n\n  log.debug(`sanitizeFilename: sanitizedFilename=${sanitizedFilename}`);\n  return sanitizedFilename;\n}", "CodeBleu_score": 42.110713255512145}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tconst sanitizedFilename = sanitize(filenameToSanitize);\n\tlet result = sanitizedFilename;\n\tif (platform === 'linux') {\n\t\tresult = result.replace(/[<>:\"/\\\\|?*]/g, '');\n\t\tif (result.length === 0) {\n\t\t\tlog.warn('The sanitized filename is empty. Assigning default application name.');\n\t\t\tresult = 'Application';\n\t\t}\n\t}\n\tlog.debug('Sanitized filename:'+ result);\n\treturn result;\n}", "CodeBleu_score": 55.32404767613534}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tlog.debug(\n\t\t`sanitizeFilename: platform=${platform}, filenameToSanitize=${filenameToSanitize}`,\n\t);\n\n\tconst sanitizedFilename = sanitize(filenameToSanitize);\n\n\tlet filename = sanitizedFilename;\n\n\tif (platform === 'linux') {\n\t\tfilename = sanitizedFilename.replace(/[\\\\\\/\\:\\*\\?\\\"\\<\\>\\|]/g, '');\n\t}\n\n\tif (filename.length === 0) {\n\t\tfilename = 'app';\n\t\tlog.warn(\n\t\t\t`sanitizeFilename: platform=${platform}, filenameToSanitize=${filenameToSanitize}, filename=${filename}`,\n\t\t);\n\t}\n\n\tlog.debug(\n\t\t`sanitizeFilename: platform=${platform}, filenameToSanitize=${filenameToSanitize}, filename=${filename}`,\n\t);\n\n\treturn filename;\n}", "CodeBleu_score": 45.81288482278346}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tconst { cacheTime } = savedCache;\n\tconst cacheDuration = typeof cacheTime ==='string'? parseInt(cacheTime, 10) : cacheTime;\n\treturn cacheDuration + savedCache.cacheTime < new Date().getTime();\n}", "CodeBleu_score": 27.440261725892125}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tconst duration = typeof savedCache.duration ==='string'? parseInt(savedCache.duration) : savedCache.duration;\n\treturn duration + savedCache.time < new Date().getTime();\n}", "CodeBleu_score": 45.8336744379158}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tconst cacheTime = savedCache.cacheTime;\n\tconst cacheDuration = savedCache.cacheDuration;\n\tconst currentTime = new Date().getTime();\n\tconst cacheTimeInt = parseInt(cacheTime);\n\tconst cacheDurationInt = parseInt(cacheDuration);\n\tconst cacheTimeIntIsNaN = isNaN(cacheTimeInt);\n\tconst cacheDurationIntIsNaN = isNaN(cacheDurationInt);\n\tif (cacheTimeIntIsNaN || cacheDurationIntIsNaN) {\n\t\treturn false;\n\t}\n\tconst cacheDurationInMilliseconds = cacheDurationInt * 1000;\n\tconst cacheTimeInMilliseconds = cacheTimeInt * 1000;\n\tconst sumOfCacheTimeAndDuration = cacheTimeInMilliseconds + cacheDurationInMilliseconds;\n\treturn sumOfCacheTimeAndDuration < currentTime;\n}", "CodeBleu_score": 24.666806210824227}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (isNaN(timestampOptionArgument) || timestampOptionArgument < 0) {\n\t\tthrow new TypeORMError(\n\t\t\t`Invalid timestamp option argument given: ${timestampOptionArgument}.\n` +\n\t\t\t`Timestamp option argument must be a positive number or a string representing a positive number.`\n\t\t);\n\t}\n\n\treturn Number(timestampOptionArgument);\n}", "CodeBleu_score": 43.2304127704469}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (timestampOptionArgument === undefined) {\n\t\treturn Date.now();\n\t}\n\n\tif (isNaN(timestampOptionArgument) || timestampOptionArgument < 0) {\n\t\tthrow new TypeORMError(\n\t\t\t`Provided timestamp argument \"${timestampOptionArgument}\" is not a valid number or is negative. Please provide a valid number or leave the argument empty.`\n\t\t);\n\t}\n\n\treturn Number(timestampOptionArgument);\n}", "CodeBleu_score": 47.10033341707853}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (isNaN(timestampOptionArgument) || timestampOptionArgument < 0) {\n\t\tthrow new TypeORMError(\n\t\t\t`Timestamp value \"${timestampOptionArgument}\" is invalid. ` +\n\t\t\t`It must be a positive number.`,\n\t\t);\n\t}\n\n\treturn Number(timestampOptionArgument);\n}", "CodeBleu_score": 39.65040119594283}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t\tconst queryRunner = this.connection.createQueryRunner();\n\tconst driver = queryRunner.connection.driver;\n\tconst databaseNames = driver.buildDatabaseNames(\n\t\tdriver.databaseNames,\n\t\tdriver.defaultDatabase,\n\t\tqueryRunner.connection.options\n\t);\n\ttry {\n\t\tawait queryRunner.connect();\n\t\tif (databaseNames.length > 0) {\n\t\t\tfor (const databaseName of databaseNames) {\n\t\t\t\tawait queryRunner.clearDatabase(databaseName);\n\t\t\t}\n\t\t} else {\n\t\t\tawait queryRunner.clearDatabase(driver.defaultDatabase);\n\t\t}\n\t} finally {\n\t\tawait queryRunner.release();\n\t}\n}", "CodeBleu_score": 36.147107957338775}, {"code": " async dropDatabase(): Promise<void>{\n\t\tconst queryRunner = this.connection.createQueryRunner();\n\tconst driver = queryRunner.driver;\n\tconst databases = await driver.getDatabases();\n\tif (!databases.length) {\n\t\tawait queryRunner.release();\n\t\tawait driver.dropDatabase(driver.database);\n\t\treturn;\n\t}\n\tfor (const database of databases) {\n\t\tawait queryRunner.clearDatabase(database);\n\t}\n\tawait queryRunner.release();\n}", "CodeBleu_score": 27.459756117573725}, {"code": " async dropDatabase(): Promise<void>{\n\t\tconst queryRunner = this.connection.createQueryRunner();\n\tconst databaseDriver = queryRunner.driver;\n\tconst databases = await databaseDriver.getDatabases();\n\tconst databaseName = databases.length === 1? databases[0] : databaseDriver.database;\n\tawait queryRunner.clearDatabase(databaseName);\n\tawait queryRunner.release();\n}", "CodeBleu_score": 23.519212763720397}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t", "CodeBleu_score": 12.635054021608644}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t", "CodeBleu_score": 12.635054021608644}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t", "CodeBleu_score": 12.635054021608644}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\treturn (\n\t\t<div className=\"CompressionInput\">\n\t\t\t<div className=\"CompressionInput__label\">\n\t\t\t\t<label htmlFor=\"compression\">Compression</label>\n\t\t\t\t<span className=\"CompressionInput__value\">{compression}%</span>\n\t\t\t</div>\n\t\t\t<input\n\t\t\t\tid=\"compression\"\n\t\t\t\ttype=\"range\"\n\t\t\t\tmin=\"0\"\n\t\t\t\tmax=\"100\"\n\t\t\t\tvalue={compression}\n\t\t\t\tonChange={(e) => handleCompressionChange(e.target.value)}\n\t\t\t/>\n\t\t\t{compression > 0 && (\n\t\t\t\t<div className=\"CompressionInput__note\">\n\t\t\t\t\tPNG, JPG, and WebP compression are lossy.\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}", "CodeBleu_score": 35.087071892384685}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\treturn (\n\t\t<div className=\"compression-input\">\n\t\t\t<div className=\"compression-input__label\">\n\t\t\t\t<label htmlFor=\"compression\">Compression</label>\n\t\t\t\t<div className=\"compression-input__value\">{compression}%</div>\n\t\t\t</div>\n\t\t\t<input\n\t\t\t\tid=\"compression\"\n\t\t\t\ttype=\"range\"\n\t\t\t\tmin=\"0\"\n\t\t\t\tmax=\"100\"\n\t\t\t\tstep=\"1\"\n\t\t\t\tvalue={compression}\n\t\t\t\tonChange={handleCompressionChange}\n\t\t\t/>\n\t\t\t<div className=\"compression-input__note\">\n\t\t\t\tPNG, JPG, and WebP are lossy formats. The higher the compression, the more artifacts will appear.\n\t\t\t</div>\n\t\t</div>\n\t);\n}", "CodeBleu_score": 43.82562172334516}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\treturn (\n\t\t<div className=\"compression\">\n\t\t\t<label htmlFor=\"compression\">Compression</label>\n\t\t\t<div className=\"compression__input\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tid=\"compression\"\n\t\t\t\t\tname=\"compression\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"100\"\n\t\t\t\t\tstep=\"1\"\n\t\t\t\t\tvalue={compression}\n\t\t\t\t\tonChange={handleCompressionChange}\n\t\t\t\t/>\n\t\t\t\t<div className=\"compression__value\">{compression}%</div>\n\t\t\t</div>\n\t\t\t<div className=\"compression__note\">\n\t\t\t\t<strong>Note:</strong> PNG, JPG, and WebP compression is lossy.\n\t\t\t\t<br />\n\t\t\t\tHigher compression values result in lower quality images.\n\t\t\t</div>\n\t\t</div>\n\t);\n}", "CodeBleu_score": 45.3951901791582}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\nif (idx.startsWith(key)) {\nresArr.push(this.attributeIndex[idx]);\n}\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 93.03868818200118}, {"code": "findAttributesWithPrefix(type, name){\n\t\tconst resArr = [];\n\tconst key = `${type}-${name}`;\n\n\tfor (const idx in this.attributeIndex) {\n\t\tif (idx.startsWith(key)) {\n\t\t\tresArr.push(this.attributeIndex[idx]);\n\t\t}\n\t}\n\n\treturn resArr.flat();\n}", "CodeBleu_score": 93.2764422468637}, {"code": "findAttributesWithPrefix(type, name){\n\t\tconst resArr = [];\n\tconst key = `${type}-${name}`;\n\n\tfor (const idx in this.attributeIndex) {\n\t\tif (idx.startsWith(key)) {\n\t\t\tresArr.push(this.attributeIndex[idx]);\n\t\t}\n\t}\n\n\treturn resArr.flat();\n}", "CodeBleu_score": 93.2764422468637}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t\tconst childNote = Notes.findOne(branchRow.noteId);\n\tif (childNote) {\n\t\tchildNote.resetFlatTextCache();\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\tconst parentNote = Notes.findOne(branchRow.parentNoteId);\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 63.673920432449336}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne(branchRow.noteId);\n\tif (childNote) {\n\t\tchildNote.flatTextCache = null;\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\tvar parentNote = becca.notes.findOne(branchRow.parentNoteId);\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 65.59400549229805}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne({noteId: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = \"\";\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\tvar parentNote = becca.notes.findOne({noteId: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 62.77224584631842}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t\tif (mime == null || mime == 'text/html') return mime;\n\tif (mime in trimMime.cache) return trimMime.cache[mime];\n\tvar parts = mime.split('/');\n\tvar type = parts[0];\n\tif (type == 'text' || type == 'application') parts.shift();\n\tvar subtype = parts.join('-');\n\tvar dash = subtype.indexOf('-');\n\tif (dash > 0) subtype = subtype.substr(dash + 1);\n\ttrimMime.cache[mime] = subtype;\n\treturn subtype;\n}", "CodeBleu_score": 30.29725824318943}, {"code": "function trimMime(mime){\n\t\tif (mime === null || mime === 'text/html') {\n\t\treturn mime;\n\t}\n\tif (!trimMime.cache) {\n\t\ttrimMime.cache = {};\n\t}\n\tif (!trimMime.cache[mime]) {\n\t\tlet parts = mime.split('/');\n\t\tlet type = parts[0];\n\t\tlet subtype = parts[1];\n\t\tif (type === 'text' || type === 'application') {\n\t\t\tsubtype = subtype.substr(subtype.indexOf('-') + 1);\n\t\t}\n\t\ttrimMime.cache[mime] = subtype;\n\t}\n\treturn trimMime.cache[mime];\n}", "CodeBleu_score": 34.45909516090554}, {"code": "function trimMime(mime){\n\t\tif (!mime || mime == 'text/html') return;\n\tvar cache = trimMime.cache = trimMime.cache || {};\n\tif (cache[mime]) return cache[mime];\n\tvar parts = mime.split('/');\n\tvar type = parts[0];\n\tvar subtype = parts[1];\n\tif (type == 'text' || type == 'application') subtype = subtype.replace(/^x-/, '');\n\treturn cache[mime] = type + '/' + subtype;\n}", "CodeBleu_score": 37.10260111948171}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t\tvar utcDateCreated = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime());\n\tvar minDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() - 24*60*60*1000);\n\tvar minExcludedDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() - 24*60*60*1000 + 1);\n\tvar maxExcludedDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() + 24*60*60*1000 - 1);\n\tvar maxDate = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated).getTime() + 24*60*60*1000);\n\treturn {\n\t\tminDate: minDate,\n\t\tminExcludedDate: minExcludedDate,\n\t\tmaxExcludedDate: maxExcludedDate,\n\t\tmaxDate: maxDate\n\t};\n}", "CodeBleu_score": 37.26093701250773}, {"code": "function buildDateLimits(baseNote){\n\t\tvar date = dateUtils.parseDateTime(baseNote.utcDateCreated);\n\tvar minDate = dateUtils.utcDateTimeStr(dateUtils.addDays(date, -1));\n\tvar minExcludedDate = dateUtils.utcDateTimeStr(dateUtils.addDays(date, -2));\n\tvar maxExcludedDate = dateUtils.utcDateTimeStr(dateUtils.addDays(date, 1));\n\tvar maxDate = dateUtils.utcDateTimeStr(dateUtils.addDays(date, 2));\n\treturn {\n\t\tminDate: minDate,\n\t\tminExcludedDate: minExcludedDate,\n\t\tmaxExcludedDate: maxExcludedDate,\n\t\tmaxDate: maxDate\n\t};\n}", "CodeBleu_score": 35.097768715000925}, {"code": "function buildDateLimits(baseNote){\n\t\tvar utcDateCreated = dateUtils.utcDateTimeStr(dateUtils.parseDateTime(baseNote.utcDateCreated));\n\treturn {\n\t\tminDate: dateUtils.addDays(utcDateCreated, -1),\n\t\tminExcludedDate: dateUtils.addDays(utcDateCreated, -2),\n\t\tmaxExcludedDate: dateUtils.addDays(utcDateCreated, 2),\n\t\tmaxDate: dateUtils.addDays(utcDateCreated, 1)\n\t};\n}", "CodeBleu_score": 34.262105130119366}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\tasks to save entity even if blobId didn't change (something else was changed)\n\topts.forceSave =!!opts.forceSave;\n\topts.forceFrontendReload =!!opts.forceFrontendReload;\n\n\tif (content === null || content === undefined) {\n\t\tthrow new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n\t}\n\n\tif (this.hasStringContent()) {\n\t\tcontent = content.toString();\n\t} else {\n\t\tcontent = Buffer.isBuffer(content)? content : Buffer.from(content);\n\t}\n\n\tconst unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n\tif (this.isProtected) {\n\t\tif (protectedSessionService.isProtectedSessionAvailable()) {\n\t\t\tcontent = protectedSessionService.encrypt(content);\n\t\t} else {\n\t\t\tthrow new Error(`Cannot update content of blob since protected session is not available.`);\n\t\t}\n\t}\n\n\tsql.transactional(() => {\n\t\tconst newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n\t\tconst oldBlobId = this.blobId;\n\n\t\tif (newBlobId!== oldBlobId || opts.forceSave) {\n\t\t\tthis.blobId = newBlobId;\n\t\t\tthis.save();\n\n\t\t\tif (newBlobId!== oldBlobId) {\n\t\t\t\tthis.#deleteBlobIfNotUsed(oldBlobId);\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 90.03859896819392}, {"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}, {"code": "_setContent(content, opts = {}){\n\tasks to save entity even if blobId didn't change (something else was changed)\n\topts.forceSave =!!opts.forceSave;\n\topts.forceFrontendReload =!!opts.forceFrontendReload;\n\n\tif (content === null || content === undefined) {\n\t\tthrow new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n\t}\n\n\tif (this.hasStringContent()) {\n\t\tcontent = content.toString();\n\t} else {\n\t\tcontent = Buffer.isBuffer(content)? content : Buffer.from(content);\n\t}\n\n\tconst unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n\tif (this.isProtected) {\n\t\tif (protectedSessionService.isProtectedSessionAvailable()) {\n\t\t\tcontent = protectedSessionService.encrypt(content);\n\t\t} else {\n\t\t\tthrow new Error(`Cannot update content of blob since protected session is not available.`);\n\t\t}\n\t}\n\n\tsql.transactional(() => {\n\t\tconst newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n\t\tconst oldBlobId = this.blobId;\n\n\t\tif (newBlobId!== oldBlobId || opts.forceSave) {\n\t\t\tthis.blobId = newBlobId;\n\t\t\tthis.save();\n\n\t\t\tif (newBlobId!== oldBlobId) {\n\t\t\t\tthis.#deleteBlobIfNotUsed(oldBlobId);\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 90.03859896819392}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await this.dateNoteService.getInboxNote()\n\tconst newNote = await this.server.post(inboxNote.url + '/children', {\n\t\tcontent: '',\n\t\ttype: 'Note',\n\t\tprotection: {\n\t\t\tprotected: false,\n\t\t\tprotectedBy: null,\n\t\t\tprotectedFrom: null,\n\t\t},\n\t})\n\tawait this.waitForMaxKnownEntityChangeId()\n\tthis.appContext.tabManager.openTabWithNoteWithHoisting(newNote)\n\tthis.appContext.triggerEvent('focus-and-select-title')\n}", "CodeBleu_score": 45.72296117585755}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await this.dateNoteService.getInboxNote();\n\tconst newNote = await this.server.post(inboxNote.id, {\n\t\tcontent: 'New Note',\n\t\ttype: 'note',\n\t\tprotected: false,\n\t});\n\tawait this.protectedSessionHolder.isProtectedSessionAvailable();\n\tawait this.ws.waitForMaxKnownEntityChangeId();\n\tthis.tabManager.openTabWithNoteWithHoisting(newNote);\n\tthis.appContext.triggerEvent('focus-and-select-title');\n}", "CodeBleu_score": 41.297949674817744}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await this.dateNoteService.getInboxNote();\n\tconst newNote = await this.server.post({\n\t\turl: `${inboxNote.id}/children`,\n\t\tdata: {\n\t\t\tcontent: '',\n\t\t\ttype: 'note',\n\t\t\tprotection: {\n\t\t\t\tstatus: 'unlocked'\n\t\t\t}\n\t\t}\n\t});\n\tawait this.ensureEntityChangeIsKnown(newNote.id);\n\tthis.tabManager.openTabWithNoteWithHoisting(newNote.id);\n\tthis.triggerEvent('focusAndSelectTitle', { noteId: newNote.id });\n}", "CodeBleu_score": 45.99815304559373}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst activeNoteContext = appContext.tabManager.getActiveContext()\n\tconst hoistedNoteId = activeNoteContext.getHoistedNoteId()\n\tconst note = await this.getNote(noteId)\n\tif (hoistedNoteId === noteId) {\n\t\tactiveNoteContext.unhoist()\n\t} else if (note.type!=='search') {\n\t\tactiveNoteContext.setHoistedNoteId(noteId)\n\t}\n}", "CodeBleu_score": 50.81224144453902}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst note = await appContext.noteManager.getNote(noteId)\n\tconst activeNoteContext = appContext.tabManager.getActiveContext()\n\tif (note.hoisted) {\n\t\tactiveNoteContext.unhoist()\n\t} else if (note.type!=='search') {\n\t\tactiveNoteContext.setHoistedNoteId(noteId)\n\t}\n}", "CodeBleu_score": 50.483844771977516}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst note = await appContext.tabManager.getNote(noteId)\n\tconst activeNoteContext = appContext.tabManager.getActiveContext()\n\tif (activeNoteContext.hoistedNoteId === noteId) {\n\t\tactiveNoteContext.unhoist()\n\t} else {\n\t\tif (note.type!=='search') {\n\t\t\tactiveNoteContext.setHoistedNoteId(noteId)\n\t\t}\n\t}\n}", "CodeBleu_score": 48.592075077380386}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await linkService.calculateHash({\n\t\tnotePath,\n\t\thoistedNoteId,\n\t\tviewScope,\n\t})\n\n\tif (utils.isElectron) {\n\t\tipcRenderer.send('open-in-window', hash)\n\t} else {\n\t\tconst url = `${window.location.origin}/#${hash}`\n\t\tconst windowOptions = 'width=1200,height=800,resizable,scrollbars=yes,status=1'\n\t\twindow.open(url, '_blank', windowOptions)\n\t}\n}", "CodeBleu_score": 39.95642528151544}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await linkService.calculateHash({notePath, hoistedNoteId, viewScope});\n\n\tif (utils.isElectron()) {\n\t\tipcRenderer.send('open-window', hash);\n\t} else {\n\t\tconst url = `${window.location.origin}/#${hash}`;\n\t\tconst width = 1200;\n\t\tconst height = 800;\n\t\tconst left = window.screenX + (window.outerWidth / 2) - (width / 2);\n\t\tconst top = window.screenY + (window.outerHeight / 2) - (height / 2);\n\t\twindow.open(url, '', `width=${width},height=${height},left=${left},top=${top}`);\n\t}\n}", "CodeBleu_score": 52.57520175546495}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await linkService.calculateHash({\n\t\tnotePath,\n\t\thoistedNoteId,\n\t\tviewScope,\n\t})\n\tconst url = `${window.location.origin}/#${hash}`\n\tif (utils.isElectron()) {\n\t\tipcRenderer.send('open-window', {\n\t\t\turl,\n\t\t})\n\t} else {\n\t\tconst width = 1000\n\t\tconst height = 800\n\t\tconst left = screen.width / 2 - width / 2\n\t\tconst top = screen.height / 2 - height / 2\n\t\twindow.open(\n\t\t\turl,\n\t\t\t'noteWindow',\n\t\t\t`width=${width},height=${height},left=${left},top=${top}`\n\t\t)\n\t}\n}", "CodeBleu_score": 45.259643688317695}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t\tconst context = await appContext.tabManager.getActiveContext();\n\tif (!context) {\n\t\treturn;\n\t}\n\tconst { ntxId, note } = context;\n\tif (!note) {\n\t\treturn;\n\t}\n\tif (note.type!== 'code') {\n\t\treturn;\n\t}\n\tif (note.mime.endsWith('frontend')) {\n\t\tawait bundleService.getAndExecuteBundle(ntxId, note.id);\n\t} else if (note.mime.endsWith('backend')) {\n\t\tconst script = note.body;\n\t\tappContext.triggerEvent('note-script-execute', { ntxId, noteId: note.id, script });\n\t\tawait server.post('/api/ntx/execute', { ntxId, noteId: note.id, script });\n\t} else if (note.mime.endsWith('sqlite')) {\n\t\tconst query = note.body;\n\t\ttry {\n\t\t\tconst response = await server.post('/api/ntx/execute', { ntxId, noteId: note.id, query });\n\t\t\tif (response.error) {\n\t\t\t\tthrow new Error(response.error);\n\t\t\t}\n\t\t\tappContext.triggerEvent('note-script-executed', { ntxId, noteId: note.id, query, response });\n\t\t} catch (error) {\n\t\t\ttoastService.showError(error);\n\t\t}\n\t}\n\ttoastService.showMessage('Note executed');\n}", "CodeBleu_score": 42.343991616023445}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext()\n\tif (!activeContext) {\n\t\treturn\n\t}\n\tconst { ntxId, note } = activeContext\n\tif (note.type!== 'code') {\n\t\treturn\n\t}\n\tconst { mime } = note\n\tif (mime.endsWith('javascript')) {\n\t\tawait bundleService.getAndExecuteBundle(ntxId)\n\t} else if (mime.endsWith('sql')) {\n\t\ttry {\n\t\t\tconst result = await server.post('/api/sql', {\n\t\t\t\tntxId,\n\t\t\t\tsql: note.text,\n\t\t\t})\n\t\t\tif (result.error) {\n\t\t\t\tthrow new Error(result.error)\n\t\t\t}\n\t\t\tappContext.triggerEvent('sql-result', {\n\t\t\t\tntxId,\n\t\t\t\tresult,\n\t\t\t})\n\t\t} catch (err) {\n\t\t\ttoastService.showError(err.message)\n\t\t}\n\t} else {\n\t\tconst result = await server.post('/api/run-code', {\n\t\t\tntxId,\n\t\t\tcode: note.text,\n\t\t})\n\t\tif (result.error) {\n\t\t\ttoastService.showError(result.error)\n\t\t} else {\n\t\t\ttoastService.showMessage('Code executed')\n\t\t}\n\t}\n}", "CodeBleu_score": 41.46972283719235}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst { ntxId, note } = activeContext;\n\tif (note.type!== 'code') return;\n\n\tconst { mime } = note;\n\tif (mime.endsWith('javascript')) {\n\t\tconst bundle = await bundleService.getAndExecuteBundle(ntxId, note);\n\t\tif (bundle.error) {\n\t\t\ttoastService.showError(bundle.error);\n\t\t}\n\t} else if (mime.endsWith('sql')) {\n\t\tconst { results, error } = await server.post({\n\t\t\tpath: '/api/sql/run',\n\t\t\tbody: {\n\t\t\t\tntxId,\n\t\t\t\tsql: note.text,\n\t\t\t},\n\t\t});\n\t\tif (error) {\n\t\t\ttoastService.showError(error);\n\t\t} else {\n\t\t\tappContext.triggerEvent('sql-results', results);\n\t\t\ttoastService.showMessage('Executed successfully');\n\t\t}\n\t} else if (mime.endsWith('sqlite-schema')) {\n\t\tconst { results, error } = await server.post({\n\t\t\tpath: '/api/sql/schema',\n\t\t\tbody: {\n\t\t\t\tntxId,\n\t\t\t\tschema: note.text,\n\t\t\t},\n\t\t});\n\t\tif (error) {\n\t\t\ttoastService.showError(error);\n\t\t} else {\n\t\t\tappContext.triggerEvent('sql-results', results);\n\t\t\ttoastService.showMessage('Executed successfully');\n\t\t}\n\t} else {\n\t\ttoastService.showError('Unsupported MIME type');\n\t}\n}", "CodeBleu_score": 37.24709170887402}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t(this.isReadOnlyTemporarilyDisabled()) {\n\t\treturn false;\n\t}\n\n\tconst note = this.note;\n\tif (!note) {\n\t\treturn true;\n\t}\n\n\tif (note.isLabelTruthy('readOnly')) {\n\t\treturn true;\n\t}\n\n\tif (this.viewMode ==='source') {\n\t\treturn true;\n\t}\n\n\tconst blob = await note.getBlob();\n\tif (!blob) {\n\t\treturn true;\n\t}\n\n\tconst sizeLimit = note.isType('code')? 1024 : 2048;\n\tif (blob.content.length > sizeLimit &&!note.isLabelTruthy('autoReadOnlyDisabled')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 42.35515752346689}, {"code": "async isReadOnly(){\n\t(this.note.isLabelTruthy('readOnly')) {\n\t\treturn true;\n\t}\n\n\tif (this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n\t\treturn false;\n\t}\n\n\tconst blob = await this.note.getBlob();\n\n\tif (!blob) {\n\t\treturn false;\n\t}\n\n\tconst contentLength = blob.contentLength;\n\n\tif (contentLength > 10000000) {\n\t\treturn true;\n\t}\n\n\tif (this.note.type === 'text' && contentLength > 1000000) {\n\t\treturn true;\n\t}\n\n\tif (this.note.type === 'code' && contentLength > 100000) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 47.244867984794425}, {"code": "async isReadOnly(){\n\t(this.options.readOnlyDisabled) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!this.note ||\n\t\tthis.note.type!== 'text' && this.note.type!== 'code'\n\t) {\n\t\treturn false;\n\t}\n\n\tif (this.note.isLabelTruthy('readOnly')) {\n\t\treturn true;\n\t}\n\n\tif (this.options.viewMode ==='source') {\n\t\treturn true;\n\t}\n\n\tconst blob = await this.note.getBlob();\n\tconst sizeLimit = this.note.type === 'text'? 100000 : 1000000;\n\tif (blob.content.length > sizeLimit &&!this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 62.431012261258864}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\tif (utils.isMobile) {\n\t\treturn this.getActiveContext;\n\t}\n\n\tconst existingNoteContext = this.children.find(\n\t\t(child) => child.ntxId === ntxId && child.mainNtxId === mainNtxId\n\t);\n\n\tif (existingNoteContext) {\n\t\texistingNoteContext.setHoistedNoteId(hoistedNoteId);\n\t\treturn existingNoteContext;\n\t}\n\n\tconst newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n\tthis.children.push(newNoteContext);\n\tthis.triggerEvent('newNoteContextCreated', {\n\t\tnewNoteContext,\n\t});\n\n\treturn newNoteContext;\n}", "CodeBleu_score": 46.66721079888189}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t// Check if a similar note context already exists\n\tlet existingNoteContext = null;\n\tif (utils.isMobile) {\n\t\texistingNoteContext = this.getActiveContext;\n\t} else {\n\t\texistingNoteContext = this.children.find(\n\t\t\t(ntx) =>\n\t\t\t\tntx.ntxId === ntxId &&\n\t\t\t\tntx.hoistedNoteId === hoistedNoteId &&\n\t\t\t\tntx.mainNtxId === mainNtxId\n\t\t);\n\t}\n\n\t// If an existing context is found, update the hoistedNoteId and return the existing context\n\tif (existingNoteContext) {\n\t\texistingNoteContext.setHoistedNoteId(hoistedNoteId);\n\t\treturn existingNoteContext;\n\t}\n\n\t// If no existing context is found, create a new context, add it as a child, trigger a 'newNoteContextCreated' event, and return the new context\n\tconst newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n\tthis.addChild(newNoteContext);\n\tthis.triggerEvent('newNoteContextCreated', newNoteContext);\n\treturn newNoteContext;\n}", "CodeBleu_score": 50.46203241375963}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\tif (utils.isMobile) {\n\t\treturn this.getActiveContext;\n\t}\n\tconst existingNoteContext = this.children.find(\n\t\t(child) =>\n\t\t\tchild.ntxId === ntxId &&\n\t\t\tchild.hoistedNoteId === hoistedNoteId &&\n\t\t\tchild.mainNtxId === mainNtxId\n\t);\n\tif (existingNoteContext) {\n\t\texistingNoteContext.setHoistedNoteId(hoistedNoteId);\n\t\treturn existingNoteContext;\n\t}\n\tconst newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n\tthis.children.push(newNoteContext);\n\tthis.triggerEvent('newNoteContextCreated', newNoteContext);\n\treturn newNoteContext;\n}", "CodeBleu_score": 45.62150081338822}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\t\tconst branchIdPos = {};\n\n\tfor (const branchId of Object.values(this.childToBranch)) {\n\t\tbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n\t}\n\n\tthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.14186072237196}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\n\nfor (const branchId of Object.values(this.childToBranch)) {\nbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\n\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.10497917881968}, {"code": "sortChildren(){\n\t\tconst branchIdPos = {};\n\n\tfor (const branchId of Object.values(this.childToBranch)) {\n\t\tbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n\t}\n\n\tthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.14186072237196}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tnst newParentBranch = froca.getBranch(newParentBranchId);\n\tconst newParentNote = froca.getNote(newParentBranch.noteId);\n\n\tif (!newParentNote) {\n\t\treturn;\n\t}\n\n\tif (!newParentNote.isEditable) {\n\t\ttoastService.showError(\n\t\t\t'Cannot move branch to this note because it is a search note.'\n\t\t);\n\t\treturn;\n\t}\n\n\tconst branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n\tfor (const branchId of branchIdsToMoveFiltered) {\n\t\tconst branchToMove = froca.getBranch(branchId);\n\n\t\tif (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (branchToMove.getParentNote().type ==='search') {\n\t\t\tcontinue;\n\t\t}\n\n\t\ttry {\n\t\t\tawait server.put(\n\t\t\t\t'branch',\n\t\t\t\t{\n\t\t\t\t\tbranchId: branchToMove.id,\n\t\t\t\t\tnewParentNoteId: newParentBranch.noteId,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tloading: true,\n\t\t\t\t\tloadingMessage: 'Moving branch...',\n\t\t\t\t}\n\t\t\t);\n\t\t} catch (e) {\n\t\t\ttoastService.showError(\n\t\t\t\t`Failed to move branch ${branchToMove.name} to note ${newParentNote.name}.`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.4803362105843}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tnst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (!newParentBranch) {\n\t\treturn;\n\t}\n\n\tif (!newParentBranch.isNote) {\n\t\ttoastService.showError('Invalid move destination.');\n\t\treturn;\n\t}\n\n\tconst branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n\tfor (const branchId of branchIdsToMoveFiltered) {\n\t\tconst branchToMove = froca.getBranch(branchId);\n\n\t\tif (branchToMove.noteId === hoistedNoteService.getHoistedNoteId() || branchToMove.getParentNote().type ==='search') {\n\t\t\tcontinue;\n\t\t}\n\n\t\ttry {\n\t\t\tawait server.put(`branches/${branchToMove.id}/parent/${newParentBranch.id}`);\n\t\t} catch (error) {\n\t\t\ttoastService.showError(error.message);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 48.13362204510231}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tnst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (!newParentBranch) {\n\t\treturn;\n\t}\n\n\tif (newParentBranch.noteId === 'root') {\n\t\ttoastService.showError('You cannot move a branch to the root note.');\n\t\treturn;\n\t}\n\n\tconst branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n\tfor (const branchIdToMove of branchIdsToMoveFiltered) {\n\t\tconst branchToMove = froca.getBranch(branchIdToMove);\n\n\t\tif (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (branchToMove.getParentNote().type ==='search') {\n\t\t\tcontinue;\n\t\t}\n\n\t\ttry {\n\t\t\tawait server.put('branch/move', {\n\t\t\t\tbranchId: branchToMove.id,\n\t\t\t\tnewParentBranchId: newParentBranch.id,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\ttoastService.showError('Could not move branch.');\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 49.7173769101234}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n\tif (parentNotePathArr.length > 0) {\n\t\tactiveContext.setNote(parentNotePathArr.join(\"/\"));\n\t}\n}", "CodeBleu_score": 96.60102503386312}, {"code": "async function activateParentNotePath(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n\tif (parentNotePathArr.length > 0) {\n\t\tactiveContext.setNote(parentNotePathArr.join(\"/\"));\n\t}\n}", "CodeBleu_score": 96.60102503386312}, {"code": "async function activateParentNotePath(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n\tif (parentNotePathArr.length) {\n\t\tconst parentNotePath = parentNotePathArr.join();\n\t\tactiveContext.setNote(parentNotePath);\n\t}\n}", "CodeBleu_score": 73.60982228764459}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t\tlet links = [];\n\tfor (const branchId of branchIds) {\n\t\tconst link = await linkService.createLink(branchId);\n\t\tlinks.push(link);\n\t}\n\tif (utils.isElectron) {\n\t\tclipboard.writeHTML(links.join('\n'));\n\t} else {\n\t\tnavigator.clipboard.writeText(links.join('\n'));\n\t}\n\ttoastService.showMessage(`Copied ${branchIds.length} branches to the clipboard.`);\n}", "CodeBleu_score": 24.155004148839904}, {"code": "async function copy(branchIds){\n\t\tconst links = [];\n\tfor (const branchId of branchIds) {\n\t\tconst link = await linkService.createLink(branchId);\n\t\tlinks.push(link);\n\t}\n\tconst html = require('html-escaper').escape(links.join('\n'));\n\tif (utils.isElectron) {\n\t\tconst { clipboard } = require('electron');\n\t\tclipboard.writeHTML(html);\n\t} else {\n\t\tawait navigator.clipboard.writeText(html);\n\t}\n\ttoastService.showMessage('Copied to clipboard');\n}", "CodeBleu_score": 41.560119533239835}, {"code": "async function copy(branchIds){\n\t\tif (utils.isElectron()) {\n\t\tconst clipboard = require('electron').clipboard\n\t\tconst toastService = require('./toastService')\n\t\tconst linkService = require('./linkService')\n\t\tconst froca = require('./froca')\n\t\tconst utils = require('./utils')\n\n\t\tconst links = []\n\t\tfor (const branchId of branchIds) {\n\t\t\tconst link = await linkService.createLink(branchId, 'copy')\n\t\t\tlinks.push(link)\n\t\t}\n\t\tclipboard.writeHTML(links.join('\n'))\n\t\ttoastService.showMessage(`Copied ${branchIds.length} branch${branchIds.length > 1? 'es' : ''} to clipboard`)\n\t} else {\n\t\tconst toastService = require('./toastService')\n\t\tconst linkService = require('./linkService')\n\t\tconst froca = require('./froca')\n\t\tconst utils = require('./utils')\n\n\t\tconst links = []\n\t\tfor (const branchId of branchIds) {\n\t\t\tconst link = await linkService.createLink(branchId, 'copy')\n\t\t\tlinks.push(link)\n\t\t}\n\t\tutils.copyToClipboard(links.join('\n'))\n\t\ttoastService.showMessage(`Copied ${branchIds.length} branch${branchIds.length > 1? 'es' : ''} to clipboard`)\n\t}\n}", "CodeBleu_score": 38.35287685488255}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tif (!data ||!data.length) {\n\t\treturn [];\n\t}\n\n\tconst clean = (item: IHostBasicData): IHostBasicData => {\n\t\tif (!item) {\n\t\t\treturn item;\n\t\t}\n\n\t\tif (item.type === 'folder') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = [];\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = [];\n\t\t\t}\n\t\t} else if (item.type === 'host') {\n\t\t\titem.content = '';\n\t\t}\n\n\t\treturn item;\n\t};\n\n\treturn data.reduce((result, item) => {\n\t\tif (item.type === 'folder' || item.type === 'group') {\n\t\t\tresult.push(clean(item));\n\t\t\tif (Array.isArray(item.children)) {\n\t\t\t\tresult.push(...item.children.map(clean));\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(clean(item));\n\t\t}\n\t\treturn result;\n\t}, []);\n}", "CodeBleu_score": 48.840097163456306}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tconst result: IHostsBasicData = [];\n\tif (data && Array.isArray(data)) {\n\t\tdata.forEach((item) => {\n\t\t\tif (item) {\n\t\t\t\tconst { type, children, include, content } = item;\n\t\t\t\tif (type === 'folder') {\n\t\t\t\t\tif (!Array.isArray(children)) {\n\t\t\t\t\t\titem.children = [];\n\t\t\t\t\t}\n\t\t\t\t\titem.content = '';\n\t\t\t\t} else if (type === 'group') {\n\t\t\t\t\tif (!Array.isArray(include)) {\n\t\t\t\t\t\titem.include = [];\n\t\t\t\t\t}\n\t\t\t\t\titem.content = '';\n\t\t\t\t}\n\t\t\t\tresult.push(item);\n\t\t\t}\n\t\t});\n\t}\n\treturn result;\n}", "CodeBleu_score": 36.61284121398483}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tif (!Array.isArray(data)) {\n\t\tdata = [data];\n\t}\n\n\tdata = data.reduce((acc, item) => {\n\t\tif (item.type === 'folder') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = [];\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = [];\n\t\t\t}\n\t\t\titem.content = '';\n\t\t}\n\t\tacc.push(item);\n\t\treturn acc;\n\t}, []);\n\n\treturn data;\n}", "CodeBleu_score": 45.10042493632477}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t\t// Generate a unique ID for the history entry\n\tconst id = uuid4();\n\n\t// Insert the new entry into the history collection\n\tawait swhdb.collection.history.insert({\n\t\tid,\n\t\tcontent,\n\t\ttimestamp: new Date().getTime()\n\t});\n\n\t// Retrieve the history limit configuration\n\tconst historyLimit = await configGet(\"historyLimit\");\n\n\t// Check if the history limit is a valid number greater than zero\n\tif (typeof historyLimit === \"number\" && historyLimit > 0) {\n\t\t// Retrieve all history entries\n\t\tconst history = await swhdb.collection.history.all();\n\n\t\t// If the number of history entries exceeds the limit, delete the oldest entries until the limit is met\n\t\tif (history.length > historyLimit) {\n\t\t\tconst deleteCount = history.length - historyLimit;\n\t\t\tawait deleteHistory(deleteCount);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.25794323873941}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst uuid = await uuid4();\n\tconst historyLimit = await configGet(\"historyLimit\");\n\tif (historyLimit && typeof historyLimit === \"string\") {\n\t\tconst historyLimitNumber = parseInt(historyLimit);\n\t\tif (historyLimitNumber > 0) {\n\t\t\tconst history = await swhdb.collection.history.all();\n\t\t\tif (history.length > historyLimitNumber) {\n\t\t\t\tconst oldestEntries = history.slice(0, history.length - historyLimitNumber);\n\t\t\t\tawait deleteHistory(oldestEntries);\n\t\t\t}\n\t\t}\n\t}\n\tawait swhdb.collection.history.insert({\n\t\tid: uuid,\n\t\tcontent,\n\t\ttimestamp: new Date().getTime(),\n\t});\n}", "CodeBleu_score": 37.71740181341232}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = await configGet('historyLimit');\n\tif (Number.isInteger(historyLimit) && historyLimit > 0) {\n\t\tconst history = await swhdb.collection.history.all();\n\t\tif (history.length >= historyLimit) {\n\t\t\tconst historyToDelete = history.slice(0, history.length - historyLimit + 1);\n\t\t\tfor (const entry of historyToDelete) {\n\t\t\t\tawait deleteHistory(entry.id);\n\t\t\t}\n\t\t}\n\t}\n\treturn swhdb.collection.history.insert({\n\t\tid: uuid4(),\n\t\tcontent,\n\t\ttimestamp: new Date().getTime(),\n\t});\n}", "CodeBleu_score": 40.784713249492285}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = getDataFolder()\n\tconst dataPath = path.join(dataFolder, 'hosts.json')\n\tconst defaultData: IHostsBasicData = {\n\t\thosts: [],\n\t\tversion: 0,\n\t}\n\n\tif (fs.existsSync(dataPath)) {\n\t\ttry {\n\t\t\tconst data = await fs.promises.readFile(dataPath, 'utf8')\n\t\t\tconst parsedData = JSON.parse(data)\n\t\t\treturn cleanHostsList(parsedData)\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to read old data:', err)\n\t\t\treturn defaultData\n\t\t}\n\t} else {\n\t\treturn defaultData\n\t}\n}", "CodeBleu_score": 47.380133433571494}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = getDataFolder();\n\tconst filePath = path.join(dataFolder, 'hosts.json');\n\n\tconst defaultData: IHostsBasicData = {\n\t\thosts: [],\n\t\tlastUpdate: 0,\n\t};\n\n\tif (!fs.existsSync(filePath)) {\n\t\treturn defaultData;\n\t}\n\n\tlet data: IHostsBasicData;\n\n\ttry {\n\t\tconst fileContent = await fs.promises.readFile(filePath, 'utf8');\n\t\tdata = JSON.parse(fileContent) as IHostsBasicData;\n\t} catch (e) {\n\t\tconsole.error('Error parsing hosts.json file:', e);\n\t\treturn defaultData;\n\t}\n\n\treturn cleanHostsList(data);\n}", "CodeBleu_score": 49.150769189532}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst filePath = path.join(getDataFolder(), 'hosts.json')\n\tconst defaultData: IHostsBasicData = {\n\t\tdata: [],\n\t\tversion: 1,\n\t}\n\tif (!fs.existsSync(filePath)) {\n\t\treturn defaultData\n\t}\n\tconst fileContent = await fs.promises.readFile(filePath, 'utf8')\n\ttry {\n\t\tconst data = JSON.parse(fileContent)\n\t\treturn cleanHostsList(data)\n\t} catch (error) {\n\t\tconsole.error(`Error parsing hosts.json file: ${error}`)\n\t\treturn defaultData\n\t}\n}", "CodeBleu_score": 52.15299740626105}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) {\n\t\treturn swhdb;\n\t}\n\tconst data_dir = await getDataFolder();\n\tconst db_dir = path.join(data_dir,'swhdb');\n\tawait fs.mkdir(db_dir, { recursive: true });\n\tconsole.log('db_dir', db_dir);\n\tswhdb = new PotDb(db_dir);\n\treturn swhdb;\n}", "CodeBleu_score": 42.01224862925061}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb === null) {\n\t\tlet data_dir = await getDataFolder();\n\t\tlet db_dir = path.join(data_dir,'swhdb');\n\t\tif (!fs.existsSync(db_dir)) {\n\t\t\tfs.mkdirSync(db_dir);\n\t\t}\n\t\tswhdb = new PotDb(db_dir);\n\t\tconsole.log('swhdb dir:'+ db_dir);\n\t}\n\treturn swhdb;\n}", "CodeBleu_score": 40.60168264404479}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) return swhdb;\n\tconst data_dir = await getDataFolder();\n\tconst db_dir = path.join(data_dir, \"swhdb\");\n\tswhdb = new PotDb(db_dir);\n\tconsole.log(\"swhdb directory: \" + db_dir);\n\treturn swhdb;\n}", "CodeBleu_score": 41.194083703106074}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\t// check if the refresh interval is valid\n\tif (hosts.interval === undefined || hosts.interval < 1) {\n\t\treturn false;\n\t}\n\n\t// check if the URL is valid\n\tif (hosts.url === undefined || hosts.url.length < 1) {\n\t\treturn false;\n\t}\n\n\t// check if there is a last refresh timestamp\n\tif (hosts.lastRefresh === undefined) {\n\t\treturn true;\n\t}\n\n\t// calculate the time elapsed since the last refresh\n\tconst now = new Date().getTime();\n\tconst elapsed = now - hosts.lastRefresh;\n\n\t// check if the time elapsed exceeds the refresh interval\n\tif (elapsed > hosts.interval * 60 * 1000) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 32.004436796026916}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { url, interval, lastRefresh } = hosts;\n\n\tif (interval === 0 ||!url) {\n\t\treturn false;\n\t}\n\n\tif (!lastRefresh) {\n\t\treturn true;\n\t}\n\n\tconst now = new Date().getTime();\n\tconst elapsed = now - lastRefresh;\n\n\treturn elapsed > interval;\n}", "CodeBleu_score": 32.839649483646845}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tif (hosts.refreshInterval === undefined || hosts.refreshInterval === 0) {\n\t\treturn false;\n\t}\n\tif (hosts.url === undefined || hosts.url === '') {\n\t\treturn false;\n\t}\n\tif (hosts.lastRefreshTimestamp === undefined) {\n\t\treturn true;\n\t}\n\tconst now = new Date().getTime();\n\tconst elapsed = now - hosts.lastRefreshTimestamp;\n\treturn elapsed > hosts.refreshInterval;\n}", "CodeBleu_score": 32.558636443778795}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\teturn new Promise((resolve, reject) => {\n\t\tconst callbackId = uuidv4();\n\t\tconst callback = (event: IpcRendererEvent, data: any) => {\n\t\t\tipcRenderer.removeListener(callbackId, callback);\n\t\t\tif (data.error) {\n\t\t\t\treject(data.error);\n\t\t\t} else {\n\t\t\t\tresolve(data.result);\n\t\t\t}\n\t\t};\n\t\tipcRenderer.on(callbackId, callback);\n\t\tipcRenderer.send('action', {\n\t\t\taction,\n\t\t\tcallbackId,\n\t\t\tparams\n\t\t});\n\t});\n}", "CodeBleu_score": 40.350156164951215}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t", "CodeBleu_score": 3.5543274478432982}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\tonst callbackId = uuidv4();\n\tconst callback = (event: IpcRendererEvent, response: any) => {\n\t\tif (response.callbackId === callbackId) {\n\t\t\tif (response.error) {\n\t\t\t\treject(response.error);\n\t\t\t} else {\n\t\t\t\tresolve(response.data);\n\t\t\t}\n\t\t\tipcRenderer.removeListener('action-response', callback);\n\t\t}\n\t};\n\tipcRenderer.on('action-response', callback);\n\tipcRenderer.send('action-request', {\n\t\tcallbackId,\n\t\taction,\n\t\tparams,\n\t});\n\treturn new Promise((resolve, reject) => {\n\t\t//\n\t});\n}", "CodeBleu_score": 41.80603916118256}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t\tif (!cm_editor) {\n\t\tawait new Promise((resolve) => setTimeout(resolve, 100));\n\t\treturn loadContent(is_new);\n\t}\n\tlet content = '';\n\tif (hosts_id ==='system') {\n\t\tcontent = await actions.getSystemHosts();\n\t} else {\n\t\tcontent = await actions.getHostsContent(hosts_id);\n\t}\n\tif (is_new) {\n\t\tcm_editor.clearHistory();\n\t}\n\tsetContent(content);\n}", "CodeBleu_score": 51.92025351474512}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (cm_editor) {\n\t\tconst content = await actions.getHostsContent(hosts_id);\n\t\tcm_editor.setValue(content);\n\t\tif (is_new) {\n\t\t\tcm_editor.clearHistory();\n\t\t}\n\t} else {\n\t\tawait sleep(100);\n\t\tloadContent(is_new);\n\t}\n}", "CodeBleu_score": 36.45879918225401}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (cm_editor) {\n\t\tif (is_new) {\n\t\t\tcm_editor.clearHistory();\n\t\t}\n\t\tlet content = '';\n\t\tif (hosts_id == 0) {\n\t\t\tcontent = await actions.getSystemHosts();\n\t\t} else {\n\t\t\tcontent = await actions.getHostsContent(hosts_id);\n\t\t}\n\t\tsetContent(content);\n\t\tcm_editor.setValue(content);\n\t} else {\n\t\tsetTimeout(loadContent, 100);\n\t}\n}", "CodeBleu_score": 52.465770049846114}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\tm_editor.getOption(\"readOnly\") ||!cm_editor) return;\n\tconst info = cm_editor.lineInfo(n);\n\tif (/^\\s*$/.test(info.text)) return;\n\tconst line = cm_editor.getLine(n);\n\tif (/^#/.test(line)) {\n\t\tcm_editor.getDoc().replaceRange(line.replace(/^#/, \"\"), { line: n, ch: 0 });\n\t} else {\n\t\tcm_editor.getDoc().replaceRange(\"#\" + line, { line: n, ch: 0 });\n\t}\n}", "CodeBleu_score": 44.464934733957875}, {"code": "const onGutterClick = (n: number) =>{\n\tm_editor.getOption(\"readOnly\") ||!cm_editor) return;\n\tconst info = cm_editor.lineInfo(n);\n\tif (!info || /^\\s*$/.test(info.text)) return;\n\tcm_editor.getDoc().replaceRange(\n\t\t/^#/.test(info.text)? info.text.slice(1) : `# ${info.text}`,\n\t\t{ line: n, ch: 0 },\n\t\t{ line: n, ch: info.text.length }\n\t);\n}", "CodeBleu_score": 40.44556505492174}, {"code": "const onGutterClick = (n: number) =>{\n\tm_editor.getOption(\"readOnly\") ||!cm_editor) return;\n\tconst info = cm_editor.lineInfo(n);\n\tif (!info || /^\\s*$/.test(info.text)) return;\n\tconst line = info.text;\n\tif (/^#/.test(line)) {\n\t\tcm_editor.getDoc().replaceRange(line.replace(/^#/, \"\"), { line: n, ch: 0 });\n\t} else {\n\t\tcm_editor.getDoc().replaceRange(\"#\" + line, { line: n, ch: 0 });\n\t}\n}", "CodeBleu_score": 46.242969596165686}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t.clear();\n\tm_foundOptions.clear();\n\tQStringList::const_iterator actualIt = args.cbegin();\n\tNode* actualNode = &m_rootNode;\n\tif (m_withVersion) {\n\t\tif (args.length() == 1) {\n\t\t\tprintVersion();\n\t\t\treturn true;\n\t\t} else if (args.length() > 1) {\n\t\t\tQString arg = *actualIt;\n\t\t\tbool isDoubleDashed = arg.startsWith(QLatin1String(\"--\"));\n\t\t\tif (isDoubleDashed) {\n\t\t\t\targ = arg.remove(0, 2);\n\t\t\t} else {\n\t\t\t\targ = arg.remove(0, 1);\n\t\t\t}\n\t\t\tif (versionOption.dashedNames().contains(arg)) {\n\t\t\t\tprintVersion();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (m_withHelp) {\n\t\terr.enableMessageHeader(false);\n\t\tif (!m_generalErrorMessage.isEmpty()) {\n\t\t\terr << m_generalErrorMessage;\n\t\t}\n\t}\n\tbool ok = true;\n\twhile (actualIt!= args.cend()) {\n\t\tQString arg = *actualIt;\n\t\tif (arg.startsWith(QLatin1String(\"-\"))) {\n\t\t\tok = processOptions(args, actualIt, actualNode);\n\t\t} else {\n\t\t\tok = processArgs(args, actualIt, actualNode);\n\t\t}\n\t\tif (!ok) {\n\t\t\tbreak;\n\t\t}\n\t\t++actualIt;\n\t}\n\tif (!ok) {\n\t\tif (m_withHelp) {\n\t\t\tprintHelp(args, actualNode);\n\t\t} else {\n\t\t\terr << \"Invalid arguments.\";\n\t\t}\n\t}\n\treturn ok;\n}", "CodeBleu_score": 57.40459306920498}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\tons.clear();\n\tm_foundArgs.clear();\n\tm_generalErrorMessage.clear();\n\terr.enableMessageHeader(false);\n\tif (m_withVersion && args.contains(versionOption.dashedNames().first())) {\n\t\tif (args.size() == 1) {\n\t\t\tprintVersion();\n\t\t\treturn true;\n\t\t} else {\n\t\t\tm_generalErrorMessage = QStringLiteral(\"Invalid arguments after the version option.\");\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (m_withHelp && args.contains(helpOption.dashedNames().first())) {\n\t\tif (args.size() == 1) {\n\t\t\tprintHelp(args, &m_rootNode);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tm_generalErrorMessage = QStringLiteral(\"Invalid arguments after the help option.\");\n\t\t\treturn false;\n\t\t}\n\t}\n\tNode* actualNode = &m_rootNode;\n\tQStringList::const_iterator actualIt = args.cbegin();\n\twhile (actualIt!= args.cend()) {\n\t\tQString arg = *actualIt;\n\t\tif (arg.startsWith(QLatin1String(\"-\"))) {\n\t\t\tbool ok = processOptions(args, actualIt, actualNode);\n\t\t\tif (!ok) {\n\t\t\t\tm_generalErrorMessage = err.message();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tbool ok = processArgs(args, actualIt, actualNode);\n\t\t\tif (!ok) {\n\t\t\t\tm_generalErrorMessage = err.message();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t++actualIt;\n\t}\n\treturn true;\n}", "CodeBleu_score": 44.64988671022018}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t", "CodeBleu_score": 1.6015576757374008}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t\tQList<CaptureTool::Type> listTypes = ConfigHandler().buttons;\n\tfor (QList<CaptureTool::Type>::const_iterator it = getIterableButtonTypes().constBegin(); it!= getIterableButtonTypes().constEnd(); it++) {\n\t\tCaptureTool::Type type = *it;\n\t\tQList<QListWidgetItem*> items = this->findItems(CaptureToolButton::toString(type), Qt::MatchExactly);\n\t\tif (items.count() > 0) {\n\t\t\tQListWidgetItem* item = items.at(0);\n\t\t\tif (listTypes.contains(type)) {\n\t\t\t\titem->setCheckState(Qt::Checked);\n\t\t\t} else {\n\t\t\t\titem->setCheckState(Qt::Unchecked);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.81240762084324}, {"code": "void ButtonListView::updateComponents(){\n\t\tConfigHandler config;\n\tconst QList<CaptureTool::Type> listTypes = config.buttons();\n\tconst QList<CaptureTool::Type> iterableButtonTypes = CaptureToolButton::getIterableButtonTypes();\n\tfor (QListWidgetItem* item : m_listButtons) {\n\t\tif (iterableButtonTypes.contains(static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt()))) {\n\t\t\titem->setCheckState(listTypes.contains(static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt()))? Qt::Checked : Qt::Unchecked);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.45727781597578}, {"code": "void ButtonListView::updateComponents(){\n\t\tQList<CaptureTool::Type> listTypes = ConfigHandler().buttons();\n\tfor (int i = 0; i < this->count(); i++) {\n\t\tauto item = this->item(i);\n\t\tif (listTypes.contains(static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt()))) {\n\t\t\titem->setCheckState(Qt::Checked);\n\t\t} else {\n\t\t\titem->setCheckState(Qt::Unchecked);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.1909227143954}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t\tif (m_colorList.contains(m_color))\n\t\treturn;\n\n\tif (m_colorList.size() >= 17) {\n\t\tQMessageBox::critical(this, tr(\"Error\"), tr(\"You can only add 17 colors to the preset list.\"));\n\t\treturn;\n\t}\n\n\tm_colorList.append(m_color);\n\tm_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 50.07121239371799}, {"code": "void ColorPickerEditor::addPreset(){\n\t\tif (m_colorList.contains(m_color)) {\n\t\treturn;\n\t}\n\tif (m_colorList.size() >= 17) {\n\t\tQMessageBox::critical(this, tr(\"Error\"), tr(\"The maximum number of presets has been reached.\"));\n\t\treturn;\n\t}\n\tm_colorList.append(m_color);\n\tm_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 56.16559476830973}, {"code": "void ColorPickerEditor::addPreset(){\n\t\tif (m_colorList.contains(m_color)) {\n\t\treturn;\n\t}\n\n\tif (m_colorList.size() >= 17) {\n\t\tQMessageBox::critical(this, tr(\"Error\"), tr(\"You have reached the maximum number of presets\"));\n\t\treturn;\n\t}\n\n\tm_colorList.append(m_color);\n\tm_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 55.57046303495805}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t#ifdef Q_OS_MAC\n    setWindowFlags(Qt::WindowStaysOnTopHint | Qt::CustomizeWindowHint |\n                   Qt::WindowTitleHint | Qt::WindowCloseButtonHint);\n#endif\n    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout();\n    m_vLayout = new QVBoxLayout();\n    m_hLayout->setSpacing(QApplication::fontMetrics().lineSpacing());\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    initButtons();\n    initColorWheel();\n    m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing() * 2);\n    m_hLayout->addLayout(m_vLayout);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 56.344978465502734}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\n#ifdef Q_OS_WIN\n    m_buttonIconType = CaptureToolButton::IconType::WinIcon;\n#else\n    m_buttonIconType = CaptureToolButton::IconType::LinuxIcon;\n#endif\n\n    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n    m_hLayout = new QHBoxLayout(this);\n    m_hLayout->setContentsMargins(0, 0, 0, 0);\n    m_vLayout = new QVBoxLayout();\n    m_vLayout->setContentsMargins(0, 0, 0, 0);\n    m_vLayout->setSpacing(QApplication::fontMetrics().lineSpacing());\n    m_vLayout->setAlignment(Qt::AlignCenter);\n\n    initButtons();\n    initColorWheel();\n\n    m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing() * 2);\n\n    m_hLayout->addLayout(m_vLayout);\n\n    setLayout(m_hLayout);\n\n    updateComponents();\n}", "CodeBleu_score": 57.16146532673616}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t#ifdef Q_OS_WIN\n    m_buttonIconType = CaptureToolButton::IconType::Windows;\n#else\n    m_buttonIconType = CaptureToolButton::IconType::Linux;\n#endif\n\n    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout(this);\n    m_vLayout = new QVBoxLayout();\n    m_hLayout->setSpacing(QApplication::fontMetrics().lineSpacing());\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    initButtons();\n    initColorWheel();\n    m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing());\n    m_hLayout->addLayout(m_vLayout);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 56.87065467446447}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\n\t\treturn;\n\t}\n\tQPixmap capture = ScreenGrabber().grabEntireDesktop();\n\tif (capture.isNull()) {\n\t\temit captureFailed();\n\t\treturn;\n\t}\n\tif (!req.region().isNull()) {\n\t\tcapture = capture.copy(req.region());\n\t}\n\texportCapture(capture, req.region(), req);\n}", "CodeBleu_score": 36.60367816542283}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\n\t\treturn;\n\t}\n\n\tQPixmap capture = ScreenGrabber().grabEntireDesktop();\n\tif (!capture.isNull()) {\n\t\tQRect selection = req.region();\n\t\tif (!selection.isNull()) {\n\t\t\tcapture = capture.copy(selection);\n\t\t}\n\t\texportCapture(capture, selection, req);\n\t} else {\n\t\temit captureFailed(tr(\"Failed to capture full screen.\"));\n\t}\n}", "CodeBleu_score": 53.71345002461633}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\n\t\treturn;\n\t}\n\tQPixmap capture = ScreenGrabber().grabEntireDesktop();\n\tif (!capture.isNull()) {\n\t\tif (req.initialSelection().isNull()) {\n\t\t\texportCapture(capture, req);\n\t\t} else {\n\t\t\texportCapture(capture.copy(req.initialSelection()), req);\n\t\t}\n\t} else {\n\t\temit captureFailed(tr(\"Failed to capture screenshot.\"));\n\t}\n}", "CodeBleu_score": 42.72337938234179}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t\tif (instance()) {\n\t\tinstance()->attachScreenshotToClipboard(capture);\n\t} else {\n\t\tQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n\t\tQByteArray data;\n\t\tQDataStream stream(&data, QIODevice::WriteOnly);\n\t\tstream << capture;\n\t\tm.setArguments(QList<QVariant>() << data);\n\t\tcall(m);\n\t}\n}", "CodeBleu_score": 81.64856930306635}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#ifdef FLAMESHOT_DEBUG\n    qDebug() << \"FlameshotDaemon::copyToClipboard\";\n#endif\n    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(\"attachScreenshotToClipboard\");\n        QByteArray ba;\n        QDataStream stream(&ba, QIODevice::WriteOnly);\n        stream << capture;\n        m.setArguments({ba});\n        call(m);\n    }\n}", "CodeBleu_score": 68.47457985775975}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#if defined(Q_OS_WIN) || defined(Q_OS_MACOS)\n    QApplication::clipboard()->setPixmap(capture);\n#else\n    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray data;\n        QDataStream stream(&data, QIODevice::WriteOnly);\n        stream << capture;\n        m.setArguments({data});\n        call(m);\n    }\n#endif\n}", "CodeBleu_score": 78.6249497207383}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t\tif (!notification.isEmpty()) {\n\t\tAbstractLogger::info(notification);\n\t}\n\n\tQApplication::clipboard()->blockSignals(true);\n\tQApplication::clipboard()->setText(text);\n\tQApplication::clipboard()->blockSignals(false);\n}", "CodeBleu_score": 49.31683605849417}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t\tif (!notification.isEmpty()) {\n\t\tAbstractLogger::info(notification);\n\t}\n\n\tQApplication::clipboard()->blockSignals(true);\n\tQApplication::clipboard()->setText(text);\n\tQApplication::clipboard()->blockSignals(false);\n}", "CodeBleu_score": 49.31683605849417}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t\tif (!notification.isEmpty()) {\n\t\tAbstractLogger::info(notification);\n\t}\n\tQApplication::clipboard()->blockSignals(true);\n\tQApplication::clipboard()->setText(text);\n\tQApplication::clipboard()->blockSignals(false);\n}", "CodeBleu_score": 49.31683605849417}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\t// Emit a request to indicate the capture is done\n\tcontext.request.done = true;\n\n\t// If the capture request includes a PIN task, adjust the selection geometry based on the widget offset and add the PIN task to the request\n\tif (context.request.tasks.contains(Task::Pin)) {\n\t\tQRectF selectionGeometry = context.request.geometry;\n\t\tselectionGeometry.moveTopLeft(context.request.geometry.topLeft() + context.widgetOffset);\n\t\tcontext.request.geometry = selectionGeometry;\n\t\tcontext.request.addTask(Task::Pin);\n\t}\n\n\t// Emit a request to close the GUI\n\tcontext.request.close = true;\n}", "CodeBleu_score": 44.06196994256213}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tcontext.request.captureDone = true;\n\tif (context.request.tasks.contains(Task::PIN)) {\n\t\tQRectF& geometry = context.request.tasks[Task::PIN];\n\t\tgeometry.moveTopLeft(geometry.topLeft() + context.widget->offset());\n\t\tcontext.request.addTask(Task::PIN, geometry);\n\t}\n\tcontext.request.closeGUI = true;\n}", "CodeBleu_score": 44.98475135457006}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\t// If the capture request includes a PIN task, adjust the selection geometry based on the widget offset and add the PIN task to the request.\n\tif (context.request.hasTask(Task::PIN)) {\n\t\t// Adjust the selection geometry based on the widget offset.\n\t\tgeometry.moveTopLeft(geometry.topLeft() - widgetOffset);\n\t\t// Add the PIN task to the request.\n\t\tcontext.request.addTask(Task::PIN, geometry);\n\t}\n\t// Emit a request to indicate the capture is done.\n\tcontext.request.emitDone();\n\t// Emit a request to close the GUI.\n\tcontext.request.emitClose();\n}", "CodeBleu_score": 42.145371044130975}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t   qDebug() << \"processDirectory\";\n    int newEntries = 0;\n    QStringList desktopFiles = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"), QDir::Files);\n    int initialSize = m_appList.length();\n    for (int i = 0; i < desktopFiles.length(); i++) {\n        QString fileName = dir.absoluteFilePath(desktopFiles[i]);\n        bool ok = false;\n        DesktopAppData data = parseDesktopFile(fileName, ok);\n        if (ok) {\n            m_appList.append(data);\n            newEntries++;\n        }\n    }\n    return newEntries - initialSize;\n}", "CodeBleu_score": 52.99498412494713}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tt newEntries = 0;\n\t// get a list of all desktop files in the directory\n\tQStringList desktopFiles = dir.entryList(QStringList(QStringLiteral(\"*.desktop\")), QDir::Files);\n\t// iterate through each desktop file\n\tfor (const QString& desktopFile : desktopFiles) {\n\t\t// parse the desktop file\n\t\tbool ok = false;\n\t\tDesktopAppData data = parseDesktopFile(dir.absoluteFilePath(desktopFile), ok);\n\t\t// if parsing was successful, add the application data to the list\n\t\tif (ok) {\n\t\t\tm_appList.append(data);\n\t\t\tnewEntries++;\n\t\t}\n\t}\n\treturn newEntries;\n}", "CodeBleu_score": 48.75347264094724}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tileInfoList fileList = dir.entryInfoList(QStringList() << \"*.desktop\", QDir::Files);\n\tint initialLength = m_appList.length();\n\tfor (int i = 0; i < fileList.length(); i++) {\n\t\tQFileInfo fileInfo = fileList.at(i);\n\t\tQString fileName = fileInfo.absoluteFilePath();\n\t\tbool ok;\n\t\tDesktopAppData data = parseDesktopFile(fileName, ok);\n\t\tif (ok) {\n\t\t\tm_appList.append(data);\n\t\t}\n\t}\n\treturn m_appList.length() - initialLength;\n}", "CodeBleu_score": 57.486702423590216}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> res;\n\tfor (const DesktopAppData& app : m_apps) {\n\t\tfor (const QString& category : categories) {\n\t\t\tif (app.categories.contains(category)) {\n\t\t\t\tres[category].append(app);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", "CodeBleu_score": 82.14948256095653}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> res;\n\tfor (const auto& app : m_apps) {\n\t\tfor (const auto& category : categories) {\n\t\t\tif (app.categories.contains(category)) {\n\t\t\t\tres[category].append(app);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", "CodeBleu_score": 78.34319799413889}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> res;\n\tfor (const auto& app : m_appList) {\n\t\tfor (const auto& category : categories) {\n\t\t\tif (app.categories.contains(category)) {\n\t\t\t\tres[category].append(app);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", "CodeBleu_score": 75.70501304096638}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t", "CodeBleu_score": 1.951405616144113}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t\tauto err = AbstractLogger::error(AbstractLogger::Stderr);\n    auto info = AbstractLogger::info(AbstractLogger::Stderr);\n    const QString completePath = FileNameHandler().properScreenshotPath(path);\n    const QString fileExtension = QFileInfo(completePath).suffix().toLower();\n    const QString saveFormat = fileExtension == \"jpg\"? \"jpg\" : \"png\";\n    const int quality = fileExtension == \"jpg\"? ConfigHandler().jpegQuality : -1;\n\n    QFile file(completePath);\n    const QString saveMessage = QString(\"%1 %2 %3\").arg(messagePrefix).arg(completePath).arg(file.open(QIODevice::WriteOnly)? \"successfully\" : \"with error\");\n    if (capture.save(&file, saveFormat.toUtf8().data(), quality)) {\n        info << saveMessage;\n        return true;\n    } else {\n        err << saveMessage << \" (\" << file.errorString() << \")\";\n        return false;\n    }\n}", "CodeBleu_score": 38.46815690033303}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t\t// Get the complete file path using properScreenshotPath\n\tconst auto completePath = FileNameHandler().properScreenshotPath(path);\n\n\t// Open the file for writing\n\tQFile file(completePath);\n\tif (!file.open(QIODevice::WriteOnly)) {\n\t\tAbstractLogger::error(AbstractLogger::Stderr) << file.errorString();\n\t\treturn false;\n\t}\n\n\t// Determine the save format based on the file extension\n\tconst auto format = QFileInfo(completePath).suffix().toLower();\n\tconst auto quality = ConfigHandler().jpegQuality();\n\n\t// Construct a save message\n\tconst auto saveMessage = messagePrefix + \" \" + completePath;\n\n\t// Save the capture to the file\n\tif (capture.save(&file, format.toUtf8(), quality)) {\n\t\tAbstractLogger::info(AbstractLogger::Stdout) << saveMessage;\n\t} else {\n\t\tAbstractLogger::error(AbstractLogger::Stderr) << saveMessage;\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 33.037814437661886}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->set_load_order(load_order);\n\tthis->active.clear();\n\tfor (const auto &id : load_order) {\n\t\tconst auto modpack = this->available.at(id);\n\t\tthis->active.emplace(id, modpack);\n\t\tlog::log(\"Activated modpack: \" + modpack->get_name());\n\t}\n}", "CodeBleu_score": 61.52075576698437}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (const std::string &modpack_id : load_order) {\n\t\tauto modpack = this->available.at(modpack_id);\n\t\tthis->active.emplace(modpack_id, std::make_shared<Modpack>(*modpack));\n\t\tlog::log(log::Level::DEBUG, \"Activated modpack \" + modpack_id);\n\t}\n}", "CodeBleu_score": 64.08419224376522}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (const auto &id : load_order) {\n\t\tif (auto modpack = this->available.at(id); modpack) {\n\t\t\tthis->active.emplace(id, modpack);\n\t\t\tlog::log(log::Level::INFO, \"Activated modpack '%s'\", id.c_str());\n\t\t}\n\t}\n}", "CodeBleu_score": 54.48821432573112}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested;\n\tfor(auto &modpack: load_order) {\n\t\tif(!this->available.contains(modpack)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" is not available.\");\n\t\t}\n\t\tif(!this->available.at(modpack).dependencies_satisfied(this->available)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" has unsatisfied dependencies.\");\n\t\t}\n\t\tif(!this->available.at(modpack).conflicts_satisfied(this->available)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" conflicts with another modpack.\");\n\t\t}\n\t\trequested.insert(modpack);\n\t}\n\tif(requested.size()!= this->available.size()) {\n\t\tthrow std::runtime_error(\"Not all modpacks are included in the load order.\");\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 40.46366528806424}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested;\n\tfor (const auto &modpack : load_order) {\n\t\tif (!this->available.contains(modpack)) {\n\t\t\tthrow std::runtime_error(\n\t\t\t\t\"Modpack \" + modpack + \" is not available\");\n\t\t}\n\t\tconst auto &modpack_info = this->available.at(modpack);\n\t\tif (!modpack_info.dependencies.empty()) {\n\t\t\tfor (const auto &dependency : modpack_info.dependencies) {\n\t\t\t\tif (!requested.contains(dependency)) {\n\t\t\t\t\tthrow std::runtime_error(\n\t\t\t\t\t\t\"Modpack \" + modpack +\n\t\t\t\t\t\t\" has an unsatisfied dependency: \" + dependency);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!modpack_info.conflicts.empty()) {\n\t\t\tfor (const auto &conflict : modpack_info.conflicts) {\n\t\t\t\tif (requested.contains(conflict)) {\n\t\t\t\t\tthrow std::runtime_error(\n\t\t\t\t\t\t\"Modpack \" + modpack +\n\t\t\t\t\t\t\" conflicts with modpack: \" + conflict);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trequested.insert(modpack);\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 56.41968846618638}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested;\n\tfor (auto it = load_order.begin(); it!= load_order.end(); ++it) {\n\t\tif (this->available.contains(*it)) {\n\t\t\trequested.insert(*it);\n\t\t} else {\n\t\t\tthrow std::runtime_error(std::string(\"Modpack '\") + *it + \"' is not available\");\n\t\t}\n\t}\n\tstd::vector<std::string> conflicts;\n\tfor (auto it = requested.begin(); it!= requested.end(); ++it) {\n\t\tif (!this->available.at(*it)->dependencies_satisfied(requested)) {\n\t\t\tthrow std::runtime_error(std::string(\"Dependencies of modpack '\") + *it + \"' are not satisfied\");\n\t\t}\n\t\tif (this->available.at(*it)->conflicts_with(requested, conflicts)) {\n\t\t\tstd::string message = std::string(\"Modpack '\") + *it + \"' conflicts with modpack '\";\n\t\t\tfor (auto it = conflicts.begin(); it!= conflicts.end(); ++it) {\n\t\t\t\tmessage += *it + \"' \";\n\t\t\t}\n\t\t\tmessage += \"'\";\n\t\t\tthrow std::runtime_error(message);\n\t\t}\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 49.318878192677154}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\t// Check if resources are available.\n\tif (this->resources.empty()) {\n\t\t// Iterate through the provided sound files.\n\t\tfor (const auto &sound_file : sound_files) {\n\t\t\t// Create a unique key for each file based on its category and ID.\n\t\t\tconst auto key = std::make_tuple(sound_file.category, sound_file.id);\n\t\t\t// Skip loading if the sound is already loaded.\n\t\t\tif (this->resources.find(key)!= this->resources.end()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Create the resource and insert it into the resources map.\n\t\t\tthis->resources.insert({key, Resource::create_resource(sound_file)});\n\t\t}\n\t}\n}", "CodeBleu_score": 60.092778563127766}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (!this->resources.empty()) {\n\t\treturn;\n\t}\n\tfor (const auto &sound_file : sound_files) {\n\t\tconst auto key = std::make_tuple(sound_file.category, sound_file.id);\n\t\tif (this->resources.find(key)!= this->resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis->resources.insert(std::make_pair(key, create_resource(sound_file)));\n\t}\n}", "CodeBleu_score": 62.14132353737186}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (this->resources.empty()) {\n\t\tfor (const auto &sound_file : sound_files) {\n\t\t\tconst auto key = std::make_tuple(sound_file.category, sound_file.id);\n\t\t\tif (this->resources.find(key) == this->resources.end()) {\n\t\t\t\tthis->resources.insert({key, Resource::create_resource(sound_file)});\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 58.900927321166186}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!audio_manager)\n\t\tthrow std::runtime_error(\"Audio manager not initialized\");\n\n\tauto resources = audio_manager->get_resources();\n\tauto it = resources.find(std::make_tuple(category, id));\n\tif (it == resources.end())\n\t\tthrow std::runtime_error(\"Sound resource does not exist\");\n\n\treturn Sound(audio_manager, std::make_shared<SoundImpl>(it->second));\n}", "CodeBleu_score": 42.495624268063544}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!audio_manager)\n\t\tthrow std::runtime_error(\"Audio manager not available\");\n\n\tauto it = resources.find(std::make_tuple(category, id));\n\tif (it == resources.end())\n\t\tthrow std::runtime_error(\"Sound resource does not exist\");\n\n\treturn Sound(audio_manager, std::make_shared<SoundImpl>(it->second));\n}", "CodeBleu_score": 40.876847389312864}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!available)\n\t\tthrow std::runtime_error(\"AudioManager not available\");\n\tauto it = resources.find(std::make_tuple(category, id));\n\tif (it == resources.end())\n\t\tthrow std::runtime_error(\"Sound resource does not exist\");\n\treturn Sound(this, std::make_shared<SoundImpl>(it->second));\n}", "CodeBleu_score": 36.10858319398748}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto it = this->playing_sounds.find(category);\n\tif (it == this->playing_sounds.end()) {\n\t\tthis->playing_sounds[category] = std::vector<std::shared_ptr<SoundImpl>>();\n\t}\n\tthis->playing_sounds[category].push_back(sound);\n}", "CodeBleu_score": 67.80647283627724}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\t// TODO: check if sound already exists in the playing list before adding it\n\tauto category = sound->get_category();\n\tauto it = this->playing_sounds.find(category);\n\tif (it == this->playing_sounds.end()) {\n\t\tthis->playing_sounds.insert(std::make_pair(category, std::vector<std::shared_ptr<SoundImpl>>()));\n\t\tit = this->playing_sounds.find(category);\n\t}\n\tit->second.push_back(sound);\n}", "CodeBleu_score": 66.49536722659674}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto &playing_sounds = this->playing_sounds.find(category)->second;\n\tplaying_sounds.push_back(sound);\n}", "CodeBleu_score": 84.72984112416975}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tstd::unique_lock<std::mutex> lock(mutex);\n\tauto now = std::chrono::steady_clock::now();\n\tauto elapsed = now - last_check;\n\tif (elapsed < std::chrono::milliseconds(1)) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\tif (elapsed > max_tick_time) {\n\t\tsim_time += max_tick_time * speed;\n\t\treal_time += max_tick_time;\n\t} else {\n\t\tsim_time += elapsed * speed;\n\t\treal_time += elapsed;\n\t}\n\tlast_check = now;\n}", "CodeBleu_score": 44.75189490252481}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock<std::mutex> lck(mtx);\n\tstd::chrono::milliseconds elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(simclock_t::now() - last_check);\n\tif (elapsed.count() == 0) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\tif (elapsed.count() > max_tick_time.count()) {\n\t\telapsed = max_tick_time;\n\t}\n\tsim_time += elapsed * speed;\n\tlast_check = simclock_t::now();\n}", "CodeBleu_score": 40.11327712308243}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock<std::mutex> lock(mutex);\n\tauto now = std::chrono::system_clock::now();\n\tauto elapsed = now - last_check;\n\tif (elapsed.count() == 0) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\tif (elapsed.count() > max_tick_time.count()) {\n\t\tsim_time += max_tick_time * speed;\n\t\treal_time += max_tick_time;\n\t} else {\n\t\tsim_time += elapsed * speed;\n\t\treal_time += elapsed;\n\t}\n\tlast_check = now;\n}", "CodeBleu_score": 49.29899531112965}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = scene_pos.y() - this->position.y();\n\tfloat xz_distance = sqrt(this->position.x() * this->position.x() + this->position.z() * this->position.z());\n\tfloat x_delta = xz_distance * (scene_pos.x() / scene_pos.z());\n\tfloat z_delta = xz_distance * (scene_pos.z() / scene_pos.x());\n\tif (scene_pos.x() < 0) {\n\t\tx_delta *= -1;\n\t}\n\tif (scene_pos.z() < 0) {\n\t\tz_delta *= -1;\n\t}\n\tthis->move_to(Eigen::Vector3f(this->position.x() + x_delta, this->position.y() + y_delta, this->position.z() + z_delta));\n}", "CodeBleu_score": 40.03281991311234}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = scene_pos.y() - this->position.y();\n\tfloat xz_distance = sqrt(pow(scene_pos.x() - this->position.x(), 2) + pow(scene_pos.z() - this->position.z(), 2));\n\tEigen::Vector3f new_pos = this->position;\n\tnew_pos.x() = this->position.x() + xz_distance * cos(this->rotation.y());\n\tnew_pos.z() = this->position.z() + xz_distance * sin(this->rotation.y());\n\tthis->move_to(new_pos);\n}", "CodeBleu_score": 31.574676567445202}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = scene_pos(1) - this->position(1);\n\tfloat xz_distance = sqrt(pow(this->position(0) - scene_pos(0), 2) + pow(this->position(2) - scene_pos(2), 2));\n\n\tthis->position(0) = scene_pos(0) - xz_distance * sin(this->yaw);\n\tthis->position(2) = scene_pos(2) + xz_distance * cos(this->yaw);\n\n\tthis->move_to(this->position);\n}", "CodeBleu_score": 27.2299358826815}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\tif (url.isLocalFile()) {\n\t\tconst auto& localFile = url.toLocalFile();\n\t\tif (muse::audio::synth::isSoundFont(localFile)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t}\n\t\tif (extensionInstaller()->isFileSupported(localFile)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 75.11401696132992}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t} else if (url.isLocalFile()) {\n\t\tconst auto path = url.toLocalFile();\n\t\tif (muse::audio::synth::isSoundFont(path)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t} else if (extensionInstaller()->isFileSupported(path)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 81.62345766650354}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\tif (url.isLocalFile()) {\n\t\tconst auto path = url.toLocalFile();\n\t\tif (muse::audio::synth::isSoundFont(path)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t}\n\t\tif (extensionInstaller()->isFileSupported(path)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 75.63940917136705}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\t// Get the list of project paths from the session configuration\n\tauto& projects = configuration()->sessionProjectsPaths();\n\n\t// If the list is not empty, remove the specified project path from the list\n\tif (!projects.empty()) {\n\t\tprojects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n\n\t\t// Update the session configuration with the modified list\n\t\tconfiguration()->setSessionProjectsPaths(projects);\n\t}\n}", "CodeBleu_score": 77.26019412679943}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tauto& projects = configuration()->sessionProjectsPaths();\n\tif (!projects.empty()) {\n\t\tprojects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n\t\tconfiguration()->setSessionProjectsPaths(projects);\n\t}\n}", "CodeBleu_score": 77.27180228902829}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tif (projectPath.empty()) return;\n\n\tauto& projects = configuration()->sessionProjectsPaths();\n\tif (!projects.empty()) {\n\t\tprojects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n\t\tconfiguration()->setSessionProjectsPaths(projects);\n\t}\n}", "CodeBleu_score": 79.6445414933474}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\tQVariantList result;\n\tfor (const auto &theme : allThemes()) {\n\t\tif (theme.code() == Theme::HighContrastWhite || theme.code() == Theme::HighContrastBlack) {\n\t\t\tresult.append(ThemeConverter::toMap(theme));\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 60.174784758281696}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\tQVariantList result;\n\n\tfor (const Theme &theme : allThemes()) {\n\t\tif (theme.code() == Theme::HighContrastWhite || theme.code() == Theme::HighContrastBlack) {\n\t\t\tresult.append(ThemeConverter::toMap(theme));\n\t\t}\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 60.27919845325669}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\n}", "CodeBleu_score": 5.546442679425771}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tauto childPages = [this](const QStandardItem *item, QVariantList &result) {\n\t\tfor (int i = 0; i < item->rowCount(); ++i) {\n\t\t\tauto child = item->child(i);\n\t\t\tif (child->data(ItemRole::IsPage).toBool()) {\n\t\t\t\tQVariantMap page;\n\t\t\t\tpage[\"id\"] = child->data(ItemRole::Id).toString();\n\t\t\t\tpage[\"path\"] = child->data(ItemRole::Path).toStringList();\n\t\t\t\tresult.append(page);\n\t\t\t}\n\t\t\tchildPages(child, result);\n\t\t}\n\t};\n\n\tQVariantList result;\n\tchildPages(rootItem(), result);\n\treturn result;\n}", "CodeBleu_score": 45.94343326247591}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tauto childPages = [this](const QStandardItem *item, QVariantList &result) -> void {\n\t\tfor (int i = 0; i < item->rowCount(); ++i) {\n\t\t\tauto child = item->child(i, 0);\n\t\t\tif (!child)\n\t\t\t\tcontinue;\n\t\t\tQVariantMap childPage;\n\t\t\tchildPage[\"id\"] = child->id();\n\t\t\tchildPage[\"path\"] = child->path();\n\t\t\tresult << childPage;\n\t\t\tchildPages(child, result);\n\t\t}\n\t};\n\n\tQVariantList result;\n\tchildPages(rootItem(), result);\n\treturn result;\n}", "CodeBleu_score": 48.14327534748263}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tQVariantList result;\n\tauto childPages = [&](const QStandardItem *item, QString path) -> void {\n\t\tfor (int i = 0; i < item->rowCount(); ++i) {\n\t\t\tauto child = item->child(i);\n\t\t\tQVariantMap page;\n\t\t\tpage[\"id\"] = child->id();\n\t\t\tpage[\"path\"] = path + \"/\" + child->id();\n\t\t\tresult.append(page);\n\t\t\tchildPages(child, page[\"path\"].toString());\n\t\t}\n\t};\n\tchildPages(invisibleRootItem(), QString());\n\treturn result;\n}", "CodeBleu_score": 46.290414683345475}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList menuItems;\n\tfor (const auto& file : recentFilesController()->recentFilesList()) {\n\t\tauto item = std::make_shared<MenuItem>();\n\t\titem->setActionCode(\"file-open\");\n\t\titem->setDisplayName(file.displayName);\n\t\tif (projectConfiguration()->isCloudProject) {\n\t\t\titem->setIcon(IconName::Cloud);\n\t\t}\n\t\titem->setId(makeId(item->actionCode, menuItems.size()));\n\t\titem->setEnabled(true);\n\t\titem->setSelectable(true);\n\t\titem->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n\t\tmenuItems.push_back(item);\n\t}\n\treturn menuItems;\n}", "CodeBleu_score": 31.15750601524598}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList items;\n\tconst auto recentFiles = recentFilesController()->recentFilesList();\n\tfor (const auto& file : recentFiles) {\n\t\tMenuItem item;\n\t\titem.actionCode = \"file-open\";\n\t\titem.displayName = file.displayName;\n\t\tif (projectConfiguration()->isCloudProject(file.path)) {\n\t\t\titem.icon = QIcon::fromTheme(\"cloud-sync\");\n\t\t}\n\t\titem.setId(makeId(item.actionCode, items.size()));\n\t\titem.setEnabled(true);\n\t\titem.setSelectable(true);\n\t\titem.setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n\t\titems.push_back(item);\n\t}\n\treturn items;\n}", "CodeBleu_score": 39.43791964254232}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList items;\n\tfor (const auto& file : recentFilesController()->recentFilesList()) {\n\t\tMenuItem* item = new MenuItem;\n\t\titem->setActionCode(\"file-open\");\n\t\titem->setDisplayName(file.displayName);\n\t\tif (projectConfiguration()->isCloudProject) {\n\t\t\titem->setIcon(IconName::CLOUD);\n\t\t}\n\t\titem->setId(makeId(item->actionCode(), items.size()));\n\t\titem->setEnabled(true);\n\t\titem->setSelectable(true);\n\t\titem->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n\t\titems.append(item);\n\t}\n\treturn items;\n}", "CodeBleu_score": 34.16041103588008}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tf QT_DEBUG\n    qDebug() << \"NavigableAppMenuModel::openMenu\" << menuId << byHover;\n#endif\n    if (isNavigationStarted()) {\n        if (isMenuOpened() &&!byHover) {\n            return;\n        }\n        if (isMenuOpened() && byHover) {\n            restoreMUNavigationSystemState();\n        }\n    } else {\n        if (isMenuOpened()) {\n            saveMUNavigationSystemState();\n        }\n    }\n\n    setHighlightedMenuId(menuId);\n    emit openMenuRequested(menuId, byHover);\n}", "CodeBleu_score": 60.43558963185266}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t qDebug() << \"NavigableAppMenuModel::openMenu\" << menuId << byHover;\n    if (isNavigationStarted() || isMenuOpened()) {\n        return;\n    }\n\n    if (!byHover &&!isMenuOpened()) {\n        if (isNavigationStarted()) {\n            saveMUNavigationSystemState();\n        } else {\n            restoreMUNavigationSystemState();\n        }\n    }\n\n    if (!byHover &&!isMenuOpened()) {\n        setHighlightedMenuId(menuId);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 65.94741650509944}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tisNavigationStarted() &&!isMenuOpened()) {\n\t\tif (!byHover &&!isMenuOpened()) {\n\t\t\tif (isNavigationStarted()) {\n\t\t\t\tsaveMUNavigationSystemState();\n\t\t\t} else {\n\t\t\t\trestoreMUNavigationSystemState();\n\t\t\t}\n\t\t}\n\t\tsetHighlightedMenuId(menuId);\n\t}\n\temit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 53.05598701451948}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tViewMode currentViewMode = ViewMode::PAGE;\n\tif (notation()) {\n\t\tcurrentViewMode = notation()->viewMode();\n\t}\n\tfor (const ViewMode& viewMode: ALL_MODE_MAP.keys()) {\n\t\tif (currentViewMode == viewMode && (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM)) {\n\t\t\treturn QVariant::fromValue(MenuItem(muse::TranslatableString(\"Continuous view\"), this));\n\t\t}\n\t}\n\treturn {};\n}", "CodeBleu_score": 52.122486667752064}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tif (!notation()) {\n\t\treturn QVariant();\n\t}\n\n\tViewMode currentViewMode = notation()->viewMode();\n\n\tfor (const ViewMode& viewMode: makeAvailableViewModeList()) {\n\t\tif (viewMode == currentViewMode && (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM)) {\n\t\t\tviewMode.setTitle(muse::TranslatableString(\"Continuous view\"));\n\t\t}\n\t\tif (viewMode == currentViewMode) {\n\t\t\treturn QVariant::fromValue(viewMode);\n\t\t}\n\t}\n\n\treturn QVariant();\n}", "CodeBleu_score": 55.530404968104996}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tif (!notation()) {\n\t\treturn {};\n\t}\n\n\tViewMode currentViewMode = notation()->viewMode();\n\n\tfor (const ViewMode& viewMode: ALL_MODE_MAP.keys()) {\n\t\tif (viewMode == currentViewMode) {\n\t\t\tif (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM) {\n\t\t\t\treturn QVariant::fromValue(muse::TranslatableString(\"Continuous view\"));\n\t\t\t}\n\t\t\treturn QVariant::fromValue(muse::TranslatableString(ALL_MODE_MAP[viewMode]));\n\t\t}\n\t}\n\n\treturn {};\n}", "CodeBleu_score": 54.652982900563075}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tmuse::Ret ret = muse::Ret::ok();\n\tif (notation == nullptr) {\n\t\tret = muse::Ret::fail(\"Notation is null\");\n\t\treturn ret;\n\t}\n\tif (notation->score() == nullptr) {\n\t\tret = muse::Ret::fail(\"Score is null\");\n\t\treturn ret;\n\t}\n\tmuse::io::Buffer buffer;\n\tret = write(notation, buffer);\n\tif (ret.ok()) {\n\t\tmuse::ByteArray byteArray = buffer.toByteArray();\n\t\tret = destinationDevice.write(byteArray);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 38.93969644990312}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tmuse::Ret ret;\n\tif (!notation) {\n\t\tret.setError(muse::Ret::Error::NotationInvalid);\n\t\treturn ret;\n\t}\n\tif (!notation->getScore()) {\n\t\tret.setError(muse::Ret::Error::ScoreInvalid);\n\t\treturn ret;\n\t}\n\n\tmuse::ByteArray buffer;\n\tret = write(notation, buffer);\n\tif (ret.isSuccess()) {\n\t\tret = destinationDevice.write(buffer);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 31.554426034755313}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tmuse::Ret ret = MUSE_OK;\n\tif (notation == NULL) {\n\t\tret = MUSE_ERR_INVALID_ARGUMENT;\n\t\treturn ret;\n\t}\n\tif (notation->getScore() == NULL) {\n\t\tret = MUSE_ERR_INVALID_ARGUMENT;\n\t\treturn ret;\n\t}\n\tmuse::ByteArray byteArray;\n\tret = write(notation, byteArray);\n\tif (ret == MUSE_OK) {\n\t\tret = destinationDevice.write(byteArray);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 34.16256375128784}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::vector<std::string> lines = split_string(txt, 256);\n\tif (lines.size() == 0) {\n\t\treturn std::string();\n\t}\n\tstd::string buffer = braille_translate(table_name, lines.front());\n\tfor (int i = 1; i < lines.size(); i++) {\n\t\tbuffer.append(\" \");\n\t\tbuffer.append(braille_translate(table_name, lines[i]));\n\t}\n\treturn buffer;\n}", "CodeBleu_score": 73.08184978909377}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::vector<std::string> lines = split_string(txt, 256);\n\tif (lines.empty()) {\n\t\treturn std::string();\n\t}\n\tstd::string buffer = braille_translate(table_name, lines.front());\n\tfor (auto it = lines.begin() + 1; it!= lines.end(); ++it) {\n\t\tbuffer.append(braille_translate(table_name, *it));\n\t\tbuffer.append(\" \");\n\t}\n\treturn buffer;\n}", "CodeBleu_score": 63.081046773045244}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::vector<std::string> lines = split_string(txt, 256);\n\tif (lines.size() == 0) {\n\t\treturn \"\";\n\t}\n\tstd::string buffer = braille_translate(table_name, lines.front());\n\tfor (size_t i = 1; i < lines.size(); i++) {\n\t\tbuffer.append(\" \");\n\t\tbuffer.append(braille_translate(table_name, lines[i]));\n\t}\n\treturn buffer;\n}", "CodeBleu_score": 79.16033738237167}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\tstd::shared_ptr<ProxyEntity> proxyEntity = std::make_shared<ProxyEntity>();\n\tproxyEntity->SetType(ProxyEntity::Type::Unknown);\n\tproxyEntity->SetPath(jsonPath);\n\tif (!proxyEntity->Load(jsonPath)) {\n\t\treturn nullptr;\n\t}\n\n\tstd::shared_ptr<ProxyEntity> newProxyEntity = nullptr;\n\tswitch (proxyEntity->GetType()) {\n\t\tcase ProxyEntity::Type::Entity:\n\t\t\tnewProxyEntity = std::make_shared<Entity>();\n\t\t\tbreak;\n\t\tcase ProxyEntity::Type::EntityGroup:\n\t\t\tnewProxyEntity = std::make_shared<EntityGroup>();\n\t\t\tbreak;\n\t\tcase ProxyEntity::Type::EntityTemplate:\n\t\t\tnewProxyEntity = std::make_shared<EntityTemplate>();\n\t\t\tbreak;\n\t\tcase ProxyEntity::Type::EntityTemplateGroup:\n\t\t\tnewProxyEntity = std::make_shared<EntityTemplateGroup>();\n\t\t\tbreak;\n\t\tcase ProxyEntity::Type::Unknown:\n\t\tdefault:\n\t\t\treturn nullptr;\n\t}\n\n\tnewProxyEntity->SetLoadControl(true);\n\tnewProxyEntity->SetPath(jsonPath);\n\tif (!newProxyEntity->Load(jsonPath)) {\n\t\treturn nullptr;\n\t}\n\n\treturn newProxyEntity;\n}", "CodeBleu_score": 37.800547876160934}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\tstd::shared_ptr<ProxyEntity> proxyEntity = std::make_shared<ProxyEntity>();\n\tproxyEntity->Load(jsonPath);\n\tif (proxyEntity->IsValid()) {\n\t\tstd::shared_ptr<ProxyEntity> newProxyEntity = std::make_shared<ProxyEntity>();\n\t\tnewProxyEntity->SetLoadControl(true);\n\t\tnewProxyEntity->SetJsonPath(jsonPath);\n\t\tif (newProxyEntity->Load()) {\n\t\t\treturn newProxyEntity;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 31.571554162668015}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\tstd::shared_ptr<ProxyEntity> ent = std::make_shared<ProxyEntity>();\n\tif (ent->Load(jsonPath)) {\n\t\tif (ent->GetVersion() == 1) {\n\t\t\tstd::shared_ptr<ProxyEntity> ent0 = std::make_shared<ProxyEntity>();\n\t\t\tent0->SetLoadControl(true);\n\t\t\tent0->SetJsonPath(jsonPath);\n\t\t\tif (ent0->Load()) {\n\t\t\t\treturn ent0;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::shared_ptr<ProxyEntity>();\n}", "CodeBleu_score": 31.472409441704563}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\tif (!url.isValid()) {\n\t\treturn false;\n\t}\n\tQString protocol = url.scheme();\n\tif (protocol!= \"https\" && protocol!= \"quic\") {\n\t\treturn false;\n\t}\n\tQString name = url.host();\n\tQString serverAddress = url.host();\n\tint port = url.port();\n\tif (port == -1) {\n\t\tif (protocol == \"https\") {\n\t\t\tport = 443;\n\t\t} else {\n\t\t\tport = 443;\n\t\t}\n\t}\n\tQString username = url.userName();\n\tQString password = url.password();\n\tif (username.isEmpty() || password.isEmpty() || serverAddress.isEmpty()) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 49.574376666964866}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\tif (!url.isValid()) {\n\t\treturn false;\n\t}\n\tconst auto protocol = url.scheme().replace(QStringLiteral(\"://\"), QString());\n\tif (protocol!= QStringLiteral(\"https\") && protocol!= QStringLiteral(\"quic\")) {\n\t\treturn false;\n\t}\n\tconst auto name = url.userName();\n\tconst auto serverAddress = url.host();\n\tconst auto port = url.port();\n\tconst auto username = url.userName();\n\tconst auto password = url.password();\n\tif (username.isEmpty() || password.isEmpty() || serverAddress.isEmpty()) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 50.22061282055028}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\tif (!url.isValid()) {\n\t\treturn false;\n\t}\n\n\tQString protocol = url.scheme().replace(\"://\", \"\");\n\tif (protocol!= \"https\" && protocol!= \"quic\") {\n\t\treturn false;\n\t}\n\n\tQString name = url.host();\n\tQString serverAddress = url.host();\n\tint port = url.port();\n\tQString username = url.userName();\n\tQString password = url.password();\n\n\tif (username.isEmpty() || password.isEmpty() || serverAddress.isEmpty()) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 51.510761288354736}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t\tif (callback_before_save &&!callback_before_save()) {\n\t\treturn false;\n\t}\n\tQByteArray content = ToJsonBytes();\n\tif (content!= last_saved_content) {\n\t\tlast_saved_content = content;\n\t\tfile.open(QIODevice::WriteOnly);\n\t\tfile.write(content);\n\t\tfile.close();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 43.50875116606427}, {"code": "bool JsonStore::Save(){\n\t\tif (callback_before_save &&!callback_before_save()) {\n\t\treturn false;\n\t}\n\tif (file.fileName().isEmpty()) {\n\t\treturn false;\n\t}\n\tQByteArray bytes = ToJsonBytes();\n\tif (bytes == last_saved_content) {\n\t\treturn false;\n\t}\n\tlast_saved_content = bytes;\n\tfile.open(QIODevice::WriteOnly);\n\tfile.write(bytes);\n\tfile.close();\n\treturn true;\n}", "CodeBleu_score": 43.54389743402025}, {"code": "bool JsonStore::Save(){\n\t\tif (callback_before_save) {\n\t\tif (!callback_before_save()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Convert current state to JSON bytes\n\tauto json_bytes = ToJsonBytes();\n\n\t// Check if there are changes\n\tbool changed = false;\n\tif (last_saved_content!= json_bytes) {\n\t\tchanged = true;\n\t\tlast_saved_content = json_bytes;\n\t}\n\n\t// Save the file if there are changes\n\tif (changed) {\n\t\tfile.open(file.getFileName(), \"w\");\n\t\tfile.write(json_bytes.data(), json_bytes.size());\n\t\tfile.close();\n\t}\n\n\treturn changed;\n}", "CodeBleu_score": 50.75168654905422}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *t = new QTimer(obj);\n\tt->setSingleShot(true);\n\tt->setInterval(timeout);\n\tQObject::connect(t, &QTimer::timeout, callback);\n\tt->start();\n\tt->deleteLater();\n}", "CodeBleu_score": 59.02579155678935}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *t = new QTimer(obj);\n\tt->setSingleShot(true);\n\tt->setInterval(timeout);\n\tQObject::connect(t, &QTimer::timeout, callback);\n\tt->start();\n\tt->deleteLater();\n}", "CodeBleu_score": 59.02579155678935}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *t = new QTimer(obj);\n\tt->setSingleShot(true);\n\tt->setInterval(timeout);\n\tQObject::connect(t, &QTimer::timeout, callback);\n\tt->start();\n\tt->deleteLater();\n}", "CodeBleu_score": 59.02579155678935}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tQByteArray data;\n\tif (networkReply->error()!= QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn data;\n\t}\n\n\tif (networkReply->hasRawHeader(GrpcStatusHeader)) {\n\t\tQString errstr = QString::fromUtf8(networkReply->rawHeader(GrpcStatusHeader));\n\t\tMW_show_log(\"gRPC error: \" + errstr);\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn data;\n\t}\n\n\tstatusCode = QNetworkReply::NoError;\n\treturn data.mid(4);\n}", "CodeBleu_score": 48.251581919381046}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\t// Check for network errors and update the status code if an error is found\n\tif (networkReply->error()!= QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn QByteArray();\n\t}\n\n\t// Check for server-side gRPC errors using custom headers\n\tQByteArray grpcStatusHeader = networkReply->rawHeader(GrpcStatusHeader);\n\tif (!grpcStatusHeader.isEmpty()) {\n\t\tQString errstr = QString::fromUtf8(networkReply->readAll());\n\t\tMW_show_log(QString(\"gRPC error: %1\").arg(errstr));\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\t// No errors found, set the status code to NoError and return the response data\n\tstatusCode = QNetworkReply::NoError;\n\tQByteArray responseData = networkReply->readAll().mid(GrpcMessageSizeHeaderSize);\n\treturn responseData;\n}", "CodeBleu_score": 55.10989955328394}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t// Check for network errors\nif (networkReply->error()!= QNetworkReply::NoError)  {\nstatusCode = networkReply->error();\nreturn QByteArray();\n}\n// Check for server-side gRPC errors\nQByteArray grpcStatus = networkReply->rawHeader(GrpcStatusHeader);\nif (!grpcStatus.isEmpty())  {\nQString errstr = QString::fromUtf8(networkReply->readAll());\nMW_show_log\nstatusCode = QNetworkReply::ProtocolUnknownError;\nreturn QByteArray();\n}\n// No errors found, return response data\nstatusCode = QNetworkReply::NoError;\nreturn networkReply->readAll().mid(4);\n}", "CodeBleu_score": 50.20837299382629}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tlibcore::StartReply reply;\n\tgrpc::ClientContext context;\n\tgrpc::Status status = stub_->Start(&context, request, &reply);\n\tif (status.ok()) {\n\t\t*rpcOK = true;\n\t\treturn QString::fromStdString(reply.error());\n\t} else {\n\t\t*rpcOK = false;\n\t\treturn \"\";\n\t}\n}", "CodeBleu_score": 57.76673380746193}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\t*rpcOK = false;\n\tlibcore::LoadConfigReply reply;\n\tgrpc::ClientContext context;\n\tgrpc::Status status = stub_->Start(&context, request, &reply);\n\tif (status.ok()) {\n\t\t*rpcOK = true;\n\t\treturn reply.error().c_str();\n\t}\n\treturn QString();\n}", "CodeBleu_score": 54.995295758986316}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tlibcore::StartReq req;\n\tlibcore::StartReply reply;\n\n\treq.mutable_config()->CopyFrom(request);\n\tgrpc::Status status = stub_->Start(&context_, req, &reply);\n\tif (status.ok()) {\n\t\t*rpcOK = true;\n\t\treturn QString::fromStdString(reply.error());\n\t} else {\n\t\t*rpcOK = false;\n\t\treturn QString();\n\t}\n}", "CodeBleu_score": 54.131564122624134}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t\tui->inbound_auth->setText(\"\");\n\tif (NekoGui::dataStore->inbound_auth->NeedAuth) {\n\t\tui->inbound_auth->setIcon(Icon::GetMaterialIcon(Icon::LOCK));\n\t} else {\n\t\tui->inbound_auth->setIcon(Icon::GetMaterialIcon(Icon::LOCK_OPEN));\n\t}\n}", "CodeBleu_score": 53.91575115307653}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\tui->inbound_auth->setText(\"\");\n\tif (NekoGui::dataStore->inbound_auth->NeedAuth) {\n\t\tui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"vpn_key\"));\n\t} else {\n\t\tui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"vpn_key\", QColor(255, 255, 255, 128)));\n\t}\n}", "CodeBleu_score": 63.29320508703522}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\tui->inbound_auth->setText(\"\");\n\tif (NekoGui::dataStore->inbound_auth->NeedAuth) {\n\t\tui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\"));\n\t} else {\n\t\tui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\"));\n\t}\n}", "CodeBleu_score": 64.32514051359844}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t\tauto group = std::make_shared<NekoGui::ProfileGroup>();\n\tauto dialog = new DialogEditGroup(group, this);\n\tconnect(dialog, &QDialog::accepted, this, &DialogManageGroups::AddGroupToListIfExist);\n\tconnect(dialog, &QDialog::accepted, this, &DialogManageGroups::MW_dialog_message);\n\tdialog->exec();\n\tdialog->deleteLater();\n}", "CodeBleu_score": 47.94034540045512}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tNekoGui::Group *group = new NekoGui::Group;\n\tDialogEditGroup *dialog = new DialogEditGroup(group, this);\n\tdialog->exec();\n\tdelete dialog;\n\tif (dialog->result() == QDialog::Accepted) {\n\t\tNekoGui::profileManager->AddGroup(group);\n\t\tUpdateGroupList();\n\t\tMW_dialog_message(tr(\"Group added successfully.\"));\n\t}\n}", "CodeBleu_score": 43.41195913501258}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tNekoGui::Group* group = new NekoGui::Group(this);\n\tDialogEditGroup* dialog = new DialogEditGroup(this);\n\tdialog->setGroup(group);\n\tdialog->exec();\n\tdelete dialog;\n\tif (dialog->result() == QDialog::Accepted) {\n\t\tNekoGui::profileManager->AddGroup(group);\n\t\tUpdateGroupList();\n\t\tMW_dialog_message(\"Group added\", \"The group has been added to the list\");\n\t}\n}", "CodeBleu_score": 43.46564014131694}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t\t//\n\tSaveDisplayRouting(NekoGui::dataStore->routing);\n\t//\n\tif (NekoGui::dataStore->routing->CheckRoutingChange()) {\n\t\t//\n\t\tNekoGui::dataStore->routing->SetRoutingFunction(CACHE.custom_route? \"custom_route\" : \"default_route\");\n\t\t//\n\t\tNekoGui::dataStore->routing->Save();\n\t\t//\n\t\tMW_dialog_message(tr(\"Route change\"), tr(\"The route has been changed.\nPlease restart the program for the changes to take effect.\"));\n\t}\n\t//\n\tNekoGui::dataStore->SendUpdate();\n\t//\n\tQDialog::accept();\n}", "CodeBleu_score": 36.73576483750218}, {"code": "void DialogManageRoutes::accept(){\n\t\tSaveDisplayRouting(CACHE.custom_route);\n\tif (CACHE.custom_route->GetActiveRouting()!= CACHE.routing->GetActiveRouting()) {\n\t\tCACHE.routing->SetRouting(CACHE.custom_route->GetActiveRouting());\n\t\tCACHE.info = \"Route changed to \" + CACHE.routing->GetActiveRouting();\n\t}\n\tCACHE.dataStore->routing->Save();\n\tMW_dialog_message(tr(\"Settings saved\"), tr(\"The settings have been saved.\"), QMessageBox::Information);\n\taccept();\n}", "CodeBleu_score": 24.809864416914316}, {"code": "void DialogManageRoutes::accept(){\n\t\tSaveDisplayRouting(conf);\n\tif (conf->name!= ui->routing_name->currentText()) {\n\t\tconf->name = ui->routing_name->currentText();\n\t\tif (conf->name.startsWith(\"custom_\")) {\n\t\t\tconf->name = \"custom_\" + conf->name;\n\t\t}\n\t}\n\tif (conf->name!= CACHE.active_routing) {\n\t\tCACHE.active_routing = conf->name;\n\t\tMW_dialog_message(tr(\"Active routing changed to %1\").arg(conf->name), tr(\"Routing\"), QMessageBox::Information);\n\t}\n\tNekoGui::dataStore->routing->Save(conf->name, conf);\n\tNekoGui::dataStore->routing->UpdateDataStore();\n\tQDialog::accept();\n}", "CodeBleu_score": 39.11308697872436}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\txml.setDevice(device);\n\tmReadingExternalTileset = true;\n\tif (xml.readNextStartElement() && xml.name() == \"tileset\") {\n\t\treturn readTileset();\n\t}\n\txml.raiseError(tr(\"The file is not a tileset.\"));\n\tmReadingExternalTileset = false;\n\treturn SharedTileset();\n}", "CodeBleu_score": 61.927185958761214}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\txml.setDevice(device);\n\tmExternal = true;\n\tif (xml.readNextStartElement() && xml.name() == \"tileset\") {\n\t\treadTileset();\n\t} else {\n\t\txml.raiseError(tr(\"The file is not a tileset.\"));\n\t}\n\tmExternal = false;\n\treturn mTileset;\n}", "CodeBleu_score": 58.1370373298974}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\txml.setDevice(device);\n\tmIsExternal = true;\n\tif (xml.readNextStartElement() && xml.name() == \"tileset\") {\n\t\treturn readTileset();\n\t} else {\n\t\txml.raiseError(tr(\"The file is not a tileset\"));\n\t}\n\tmIsReading = false;\n\treturn SharedTileset();\n}", "CodeBleu_score": 55.23165974411787}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_INVALID_PARAMETER);\n\t\treturn NULL;\n\t}\n\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn NULL;\n\t}\n\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 72.38265893123666}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_INVALID_PARAMETER);\n\t\treturn NULL;\n\t}\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn NULL;\n\t}\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 72.38265893123666}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tHMODULE result;\n\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_INVALID_PARAMETER);\n\t\treturn NULL;\n\t}\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn NULL;\n\t}\n\tresult = s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n\tSetLastError(ERROR_SUCCESS);\n\treturn result;\n}", "CodeBleu_score": 59.15429360578484}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\tQUrl url;\n\tQNetworkAccessManager* http = new QNetworkAccessManager(this);\n\tQString cachePath = getFilePathForBoxArt(computer, appId);\n\tQNetworkRequest request(QUrl(QString(\"http://cdn.akamai.steamstatic.com/steam/apps/%1/header.jpg\").arg(appId)));\n\tQNetworkReply* reply = http->get(request);\n\tQEventLoop loop;\n\tQObject::connect(reply, SIGNAL(finished()), &loop, SLOT(quit()));\n\tloop.exec();\n\tQImage image;\n\timage.loadFromData(reply->readAll());\n\tif (!image.isNull()) {\n\t\timage.save(cachePath);\n\t\treturn QUrl::fromLocalFile(cachePath);\n\t}\n\tQFile(cachePath).remove();\n\treturn url;\n}", "CodeBleu_score": 51.012545833076025}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t//    QUrl url = getBoxArtUrl(computer, appId);\n//    if (url.isEmpty()) {\n//        return QUrl();\n//    }\n//    QNetworkAccessManager* http = new QNetworkAccessManager(this);\n//    connect(http, SIGNAL(finished(QNetworkReply*)), this, SLOT(onBoxArtDownloadFinished(QNetworkReply*)));\n//    QString cachePath = getFilePathForBoxArt(computer, appId);\n//    http->get(QNetworkRequest(url), new QFile(cachePath));\n//    return QUrl::fromLocalFile(cachePath);\n}", "CodeBleu_score": 3.7042099853068624}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\t// Create an HTTP client for the specified computer\n\tQNetworkAccessManager* http = new QNetworkAccessManager(this);\n\n\t// Determine the cache path for the box art\n\tQString cachePath = getFilePathForBoxArt(computer, appId);\n\n\t// Attempt to download the box art image\n\tQNetworkReply* reply = http->get(QNetworkRequest(QUrl(QString(\"https://cdn.cloudflare.steamstatic.com/steam/apps/%1/header.jpg\").arg(appId))));\n\n\t// Wait for the image download to complete\n\tQEventLoop loop;\n\tconnect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n\tloop.exec();\n\n\t// If the image download was successful, save it to the cache path\n\tif (reply->error() == QNetworkReply::NoError) {\n\t\tQImage image;\n\t\timage.loadFromData(reply->readAll());\n\n\t\tif (!image.isNull()) {\n\t\t\tif (image.save(cachePath)) {\n\t\t\t\treturn QUrl::fromLocalFile(cachePath);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If saving fails, ensure any zero-byte file is removed\n\tQFile(cachePath).remove();\n\n\t// If the image download failed, return an empty URL\n\treturn QUrl();\n}", "CodeBleu_score": 60.6128237477573}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t\tQHostAddress address = getBestGlobalAddressV6(addresses);\n\tbool ipv4 = false;\n\n\tfor (const QHostAddress& address : addresses) {\n\t\tif (address.protocol() == QAbstractSocket::IPv4Protocol) {\n\t\t\taddNewHost(address, true, QHostAddress());\n\t\t\tipv4 = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!ipv4) {\n\t\tif (address.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n\t\t\t// Link-local\n\t\t\taddNewHost(address, true, QHostAddress());\n\t\t} else if (address.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n\t\t\tqInfo() << \"Ignoring site-local address:\" << address;\n\t\t} else if (address.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n\t\t\tqInfo() << \"Ignoring ULA:\" << address;\n\t\t} else if (address.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n\t\t\tqInfo() << \"Ignoring 6to4 address:\" << address;\n\t\t} else if (address.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n\t\t\tqInfo() << \"Ignoring Teredo address:\" << address;\n\t\t} else {\n\t\t\taddNewHost(address, true, QHostAddress());\n\t\t}\n\t}\n\n\tm_PendingResolution.removeOne(computer);\n\tcomputer->deleteLater();\n}", "CodeBleu_score": 56.169047302245}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t//    QHostAddress bestGlobalV6 = getBestGlobalAddressV6(addresses);\n//    bool ipv4Added = false;\n//    for (const QHostAddress& address : addresses) {\n//        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n//            addNewHost(address, true, bestGlobalV6);\n//            ipv4Added = true;\n//            break;\n//        }\n//    }\n\n//    if (!ipv4Added) {\n//        if (bestGlobalV6.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n//            // Link-local\n//            addNewHost(bestGlobalV6, true, bestGlobalV6);\n//        } else if (bestGlobalV6.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n//            qInfo() << \"Ignoring site-local address:\" << bestGlobalV6;\n//        } else if (bestGlobalV6.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n//            qInfo() << \"Ignoring ULA:\" << bestGlobalV6;\n//        } else if (bestGlobalV6.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n//            qInfo() << \"Ignoring 6to4 address:\" << bestGlobalV6;\n//        } else if (bestGlobalV6.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n//            qInfo() << \"Ignoring Teredo address:\" << bestGlobalV6;\n//        } else {\n//            addNewHost(bestGlobalV6, true, bestGlobalV6);\n//        }\n//    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 12.645543058818998}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t\tQHostAddress address = getBestGlobalAddressV6(addresses);\n\tbool added = false;\n\n\tfor (const QHostAddress& address : addresses) {\n\t\tif (address.protocol() == QAbstractSocket::IPv4Protocol) {\n\t\t\taddNewHost(address, true, QHostAddress());\n\t\t\tadded = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!added) {\n\t\tif (address.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n\t\t\t// Link-local\n\t\t\taddNewHost(address, true, QHostAddress());\n\t\t} else if (address.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n\t\t\tqInfo() << \"Ignoring site-local address:\" << address;\n\t\t} else if (address.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n\t\t\tqInfo() << \"Ignoring ULA:\" << address;\n\t\t} else if (address.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n\t\t\tqInfo() << \"Ignoring 6to4 address:\" << address;\n\t\t} else if (address.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n\t\t\tqInfo() << \"Ignoring Teredo address:\" << address;\n\t\t} else {\n\t\t\taddNewHost(address, true, QHostAddress());\n\t\t}\n\t}\n\n\tm_PendingResolution.removeOne(computer);\n\tcomputer->deleteLater();\n}", "CodeBleu_score": 58.589453157877344}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQMutexLocker locker(&m_LastSerializedHostsMutex);\n\tconst QString serialized = computer->toSerialized();\n\tif (!m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(serialized)) {\n\t\tlocker.unlock();\n\t\tsaveHosts();\n\t}\n}", "CodeBleu_score": 53.07222674336525}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQMutexLocker locker(&m_Mutex);\n\nQByteArray serialized = computer->serialize();\nif (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(serialized)) {\n    return;\n}\n\nm_LastSerializedHosts.insert(computer->uuid, serialized);\n\nlocker.unlock();\n\nsaveHosts();\n}", "CodeBleu_score": 55.31442974622618}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t//    qDebug() << \"ComputerManager::saveHost\";\n\n    QMutexLocker computerLock(&computer->mutex);\n    QMutexLocker lock(&m_DelayedFlushMutex);\n\n    if (computer->m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(computer)) {\n        return;\n    }\n\n    computerLock.unlock();\n    saveHosts();\n    lock.unlock();\n}", "CodeBleu_score": 64.22110152686365}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (appList.size()!= newAppList.size()) {\n\t\tappList = newAppList;\n\t\tsortAppList();\n\t\treturn true;\n\t}\n\tfor (int i = 0; i < appList.size(); i++) {\n\t\tif (appList[i].id!= newAppList[i].id) {\n\t\t\tappList = newAppList;\n\t\t\tsortAppList();\n\t\t\treturn true;\n\t\t}\n\t}\n\tfor (int i = 0; i < appList.size(); i++) {\n\t\tappList[i].hidden = newAppList[i].hidden;\n\t\tappList[i].directLaunch = newAppList[i].directLaunch;\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.440346033323024}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (newAppList == appList) {\n\t\treturn false;\n\t}\n\n\tfor (NvApp& newApp : newAppList) {\n\t\tfor (NvApp& app : appList) {\n\t\t\tif (newApp.id == app.id) {\n\t\t\t\tnewApp.hidden = app.hidden;\n\t\t\t\tnewApp.directLaunch = app.directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tappList = newAppList;\n\tsortAppList();\n\treturn true;\n}", "CodeBleu_score": 70.00861350583126}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (newAppList == appList) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < newAppList.size(); i++) {\n\t\tfor (int j = 0; j < appList.size(); j++) {\n\t\t\tif (newAppList[i].id == appList[j].id) {\n\t\t\t\tnewAppList[i].hidden = appList[j].hidden;\n\t\t\t\tnewAppList[i].directLaunch = appList[j].directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tappList = newAppList;\n\tsortAppList();\n\treturn true;\n}", "CodeBleu_score": 60.515146580245926}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setApplicationDescription(tr(\"Quit an app on a specified host.\"));\n\tparser.addPositionalArgument(tr(\"quit\"), tr(\"The name of the app to quit.\"));\n\tparser.addPositionalArgument(tr(\"host\"), tr(\"The host to quit the app on.\"));\n\tparser.setupCommonOptions();\n\n\tif (!parser.parse(args)) {\n\t\tparser.showError();\n\t\treturn;\n\t}\n\n\tparser.handleHelpAndVersionOptions();\n\tparser.handleUnknownOptions();\n\n\tif (parser.positionalArguments().length() < 2) {\n\t\tparser.showError(tr(\"You must specify a quit and a host.\"));\n\t\treturn;\n\t}\n\n\tm_Quit = parser.positionalArguments().at(0);\n\tm_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 60.609749785594694}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setApplicationDescription(\"The quit command quits an app on a specified host.\");\n\tparser.addPositionalArgument(\"quit\", \"The name of the app to quit.\");\n\tparser.addPositionalArgument(\"host\", \"The name of the host to quit the app on.\");\n\tif (!parser.parse(args)) {\n\t\tparser.showError();\n\t\treturn;\n\t}\n\tparser.handleHelpAndVersionOptions();\n\tparser.handleUnknownOptions();\n\tif (parser.positionalArguments().at(1).isEmpty()) {\n\t\tparser.showError(\"No host specified.\");\n\t\treturn;\n\t}\n\tm_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 55.536765993890256}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tm_Host = QString();\n\n\tCommandLineParser parser;\n\tparser.setApplicationDescription(QCoreApplication::translate(\"main\", \"Quits an app on a specified host.\"));\n\tparser.addPositionalArgument(QCoreApplication::translate(\"main\", \"quit\"), QCoreApplication::translate(\"main\", \"The name of the app to quit.\"));\n\tparser.addPositionalArgument(QCoreApplication::translate(\"main\", \"host\"), QCoreApplication::translate(\"main\", \"The host to quit the app on.\"));\n\tparser.setupCommonOptions();\n\n\tif (!parser.parse(args)) {\n\t\tparser.showError();\n\t\treturn;\n\t}\n\n\tparser.handleUnknownOptions();\n\tparser.handleHelpAndVersionOptions();\n\n\tif (parser.positionalArguments().length() < 2) {\n\t\tparser.showError(QCoreApplication::translate(\"main\", \"No host specified.\"));\n\t\treturn;\n\t}\n\n\tm_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 44.7420076402306}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tint years = info[0].As<Napi::Number>().Int32Value();\n\tQDate* date = new QDate(this->instance->addYears(years));\n\tNapi::External<QDate> dateExt = Napi::External<QDate>::New(env, date);\n\tNapi::Object obj = QDateWrap::constructor.New({ dateExt });\n\treturn obj;\n}", "CodeBleu_score": 62.4546080536831}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tint years = info[0].As<Napi::Number>().Int32Value();\n\tQDateWrap* obj = new QDateWrap(this->instance->addYears(years));\n\treturn WrapQDate::constructor.New( { Napi::External<QDate>::New(env, obj->instance) });\n}", "CodeBleu_score": 58.51910229541066}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\tint years = info[0].As<Napi::Number>().Int32Value();\n\tQDateWrap* obj = Napi::ObjectWrap<QDateWrap>::Unwrap(info.Holder());\n\tQDate* instance = obj->instance;\n\tQDate* date = new QDate(instance->addYears(years));\n\tNapi::External<QDate> external = Napi::External<QDate>::New(env, date);\n\treturn QDateWrap::constructor.New({external});\n}", "CodeBleu_score": 58.73930414805888}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDate date = QDate::currentDate();\n\tQDateWrap* dateWrap = new QDateWrap(date.year(), date.month(), date.day());\n\treturn Napi::External<QDateWrap>::New(env, dateWrap);\n}", "CodeBleu_score": 70.94021181353631}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDate date = QDate::currentDate();\n\tQDateWrap* dateWrap = new QDateWrap(env, date);\n\treturn External<QDateWrap>::New(env, dateWrap);\n}", "CodeBleu_score": 60.906614290235716}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDate date = QDate::currentDate();\n\tQDateWrap* dateWrap = new QDateWrap(env, date.year(), date.month(), date.day());\n\treturn External<QDateWrap>::New(env, dateWrap);\n}", "CodeBleu_score": 68.70080036189327}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tbool isLeapYear = QDate::isLeapYear(year);\n\treturn Napi::Boolean::New(env, isLeapYear);\n}", "CodeBleu_score": 80.91089893931927}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tif (info.Length()!= 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tbool isLeapYear = QDate::isLeapYear(year);\n\treturn Napi::Boolean::New(env, isLeapYear);\n}", "CodeBleu_score": 66.1170592757599}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tbool isLeapYear = QDate::isLeapYear(year);\n\treturn Napi::Value::From(env, isLeapYear);\n}", "CodeBleu_score": 83.32294947379741}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tint result = this->instance->daysTo(*otherWrap->getInternalInstance());\n\treturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 73.07203623591082}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tint result = this->instance->daysTo(*otherWrap->getInternalInstance());\n\treturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 73.07203623591082}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tint result = this->instance->daysTo(*otherWrap->getInternalInstance());\n\treturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 73.07203623591082}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::Object other = info[0].As<Napi::Object>();\n\tQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(other);\n\tint result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n\treturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 86.15845830051623}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::Object otherObject = info[0].As<Napi::Object>();\n\tQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n\tint64_t result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n\treturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 92.43674386702558}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tint64_t msecs = this->instance->msecsTo(*otherWrap->getInternalInstance());\n\treturn Napi::Value::From(env, msecs);\n}", "CodeBleu_score": 69.18055971313235}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t", "CodeBleu_score": 2.6251384921487797}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t\n}", "CodeBleu_score": 2.7403609297099734}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t", "CodeBleu_score": 2.6251384921487797}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::Object otherSizeWrap = info[0].As<Napi::Object>();\n\tQSizeWrap* otherSizeWrapInstance = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n\tQSize otherSize = otherSizeWrapInstance->getInternalInstance();\n\tQSize expandedSize = this->instance->expandedTo(otherSize);\n\tauto result = QSizeWrap::constructor.New({ Napi::External<QSize>::New(env, new QSize(expandedSize)) });\n\treturn result;\n}", "CodeBleu_score": 69.07616191449006}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::Object otherObject = info[0].As<Napi::Object>();\n\tQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherObject);\n\tQSize otherSize = otherSizeWrap->getInternalInstance();\n\tQSize result = this->instance->expandedTo(otherSize);\n\tNapi::Object instance = QSizeWrap::constructor.New( { Napi::External<QSize>::New(env, new QSize(result)) } );\n\treturn instance;\n}", "CodeBleu_score": 73.37879545471569}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::Object otherSizeWrap = info[0].As<Napi::Object>();\n\tQSizeWrap* otherSizeWrapInstance = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n\tQSize otherSize = otherSizeWrapInstance->getInternalInstance();\n\tQSize result = this->instance->expandedTo(otherSize);\n\tNapi::Object obj = QSizeWrap::constructor.New( { Napi::External<QSize>::New(env, new QSize(result)) } );\n\treturn obj;\n}", "CodeBleu_score": 69.17054784805023}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t\tNapi::Env env = info.Env();\n\tNapi::String result = Napi::String::New(env, QApplication::desktopFileName().toStdString());\n\treturn result;\n}", "CodeBleu_score": 57.00901642384628}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t", "CodeBleu_score": 5.096067326623026}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t\tNapi::Env env = info.Env();\n\tNapi::String result = Napi::String::New(env, QApplication::desktopFileName());\n\treturn result;\n}", "CodeBleu_score": 54.770876998839626}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tQClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\n\tQMimeData* mimeData = this->instance->mimeData(mode);\n\tQMimeData* clonedMimeData = new QMimeData(*mimeData);\n\tQMimeDataWrap* wrappedMimeData = new QMimeDataWrap(env, clonedMimeData);\n\treturn Napi::External<QMimeDataWrap>::New(env, wrappedMimeData);\n}", "CodeBleu_score": 59.806750420624844}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\nQMimeData* data = this->instance->mimeData(mode);\nQMimeData* clonedData = new QMimeData(*data);\nNapi::Object obj = QMimeDataWrap::constructor.New( { Napi::External<QMimeData>::New(env, clonedData) });\nreturn obj;\n}", "CodeBleu_score": 56.07684277936673}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nQClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\nQMimeData* data = this->instance->mimeData(mode);\n\nNapi::External<QMimeData> external = Napi::External<QMimeData>::New(env, data);\n\nreturn QMimeDataWrap::constructor.New({ external });\n}", "CodeBleu_score": 52.58295288156704}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQObject* source = this->instance->source();\n\tQObjectWrap* obj = new QObjectWrap(env, source);\n\treturn obj->instance;\n}", "CodeBleu_score": 66.2389391348499}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQObject *source = this->instance->source();\n\tQObjectWrap *sourceWrap = new QObjectWrap(env, source);\n\treturn sourceWrap->instance;\n}", "CodeBleu_score": 60.649101865244404}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::Object instance = info.This().As<Napi::Object>();\n\tQObjectWrap* source = new QObjectWrap(env, this->instance->source());\n\treturn source->instance;\n}", "CodeBleu_score": 60.82947160037936}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\n\tif (Bars.Count == 0 ||!Bars[0].IsValid) {\n\t\treturn;\n\t}\n\n\tint selectIndex = -1;\n\tif (e.X >= 0 && e.X < Width && e.Y >= 0 && e.Y < Height) {\n\t\tselectIndex = e.X / BarWidth;\n\t\tif (selectIndex >= Bars.Count) {\n\t\t\tselectIndex = -1;\n\t\t}\n\t}\n\n\tif (selectIndex!= -1 && Bars[selectIndex].IsValid) {\n\t\tif (Bars[selectIndex].Tips.Text!= Bars[selectIndex].Tips.Text) {\n\t\t\tBars[selectIndex].Tips.Text = Bars[selectIndex].Tips.Text;\n\t\t\tBars[selectIndex].Tips.Size = TextRenderer.MeasureText(Bars[selectIndex].Tips.Text, TipsFont);\n\t\t}\n\n\t\tBars[selectIndex].Tips.Position = new Point(e.X + 10, e.Y + 10);\n\t\tif (Bars[selectIndex].Tips.Position.X + Bars[selectIndex].Tips.Size.Width > Width) {\n\t\t\tBars[selectIndex].Tips.Position.X = e.X - Bars[selectIndex].Tips.Size.Width - 10;\n\t\t}\n\t\tif (Bars[selectIndex].Tips.Position.Y + Bars[selectIndex].Tips.Size.Height > Height) {\n\t\t\tBars[selectIndex].Tips.Position.Y = e.Y - Bars[selectIndex].Tips.Size.Height - 10;\n\t\t}\n\n\t\tBars[selectIndex].Tips.Visible = true;\n\t} else {\n\t\tforeach (Bar bar in Bars) {\n\t\t\tbar.Tips.Visible = false;\n\t\t}\n\t}\n}", "CodeBleu_score": 31.411099217032735}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (Bars!= null && Bars.Length > 0 && Bars[0].Length > 0) {\n\t\tint selectIndex = GetSelectIndex(e.Location);\n\t\tif (selectIndex!= -1) {\n\t\t\tif (Bars[0][selectIndex].Tips.IsValid) {\n\t\t\t\tif (Bars[0][selectIndex].Tips.Text!= ToolTip.GetToolTip(this)) {\n\t\t\t\t\tToolTip.SetToolTip(this, Bars[0][selectIndex].Tips.Text);\n\t\t\t\t}\n\t\t\t\tif (Bars[0][selectIndex].Tips.Size!= ToolTip.Size) {\n\t\t\t\t\tToolTip.Size = Bars[0][selectIndex].Tips.Size;\n\t\t\t\t}\n\t\t\t\tint x = e.Location.X - ToolTip.Size.Width / 2;\n\t\t\t\tint y = e.Location.Y - ToolTip.Size.Height - 10;\n\t\t\t\tif (x < 0) {\n\t\t\t\t\tx = 0;\n\t\t\t\t} else if (x + ToolTip.Size.Width > Width) {\n\t\t\t\t\tx = Width - ToolTip.Size.Width;\n\t\t\t\t}\n\t\t\t\tif (y < 0) {\n\t\t\t\t\ty = 0;\n\t\t\t\t} else if (y + ToolTip.Size.Height > Height) {\n\t\t\t\t\ty = Height - ToolTip.Size.Height;\n\t\t\t\t}\n\t\t\t\tToolTip.Location = new Point(x, y);\n\t\t\t\tToolTip.Visible = true;\n\t\t\t} else {\n\t\t\t\tToolTip.Visible = false;\n\t\t\t}\n\t\t} else {\n\t\t\tToolTip.Visible = false;\n\t\t}\n\t}\n}", "CodeBleu_score": 34.291958434462344}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (GridBounds.Contains(e.Location)) {\n\t\tint selectIndex = (int)Math.Round((double)(e.X - GridBounds.X) / (double)GridBounds.Width * (double)Bars.Count);\n\t\tif (selectIndex >= 0 && selectIndex < Bars.Count) {\n\t\t\tif (Bars[0][selectIndex].Tips.IsValid) {\n\t\t\t\tif (Bars[0][selectIndex].Tips.Text!= this.ToolTip.GetToolTip(this)) {\n\t\t\t\t\tthis.ToolTip.SetToolTip(this, Bars[0][selectIndex].Tips.Text);\n\t\t\t\t}\n\t\t\t\tif (Bars[0][selectIndex].Tips.Size!= this.ToolTip.GetToolTipSize(this)) {\n\t\t\t\t\tthis.ToolTip.SetToolTip(this, Bars[0][selectIndex].Tips.Text);\n\t\t\t\t}\n\t\t\t}\n\t\t\tPoint tipLocation = new Point(GridBounds.X + (int)Math.Round((double)selectIndex / (double)Bars.Count * (double)GridBounds.Width), GridBounds.Y + GridBounds.Height + 10);\n\t\t\tif (tipLocation.X + this.ToolTip.GetToolTipSize(this).Width > GridBounds.X + GridBounds.Width) {\n\t\t\t\ttipLocation.X = GridBounds.X + GridBounds.Width - this.ToolTip.GetToolTipSize(this).Width;\n\t\t\t}\n\t\t\tif (tipLocation.X < GridBounds.X) {\n\t\t\t\ttipLocation.X = GridBounds.X;\n\t\t\t}\n\t\t\tthis.ToolTip.SetToolTip(this, Bars[0][selectIndex].Tips.Text);\n\t\t\tthis.ToolTip.Active = Bars[0][selectIndex].Tips.IsValid;\n\t\t}\n\t}\n}", "CodeBleu_score": 28.66511866933901}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null ||!NeedDraw) return;\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow)\n{\nDrawToolTip(g);\n}\nDrawSeries(g, Option.Series);\nDrawAxis(g);\nif (Option.Title.Show)\n{\nDrawTitle(g);\n}\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line)\n{\nDrawToolTip(g);\n}\nif (Option.Legend.Show)\n{\nDrawLegend(g);\n}\nif (Option.YAxisScaleLines.Count > 0)\n{\nDrawAxisScales(g);\n}\n}", "CodeBleu_score": 65.03594659260163}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null) return;\nif (!Option.NeedDraw) return;\n\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow)\n{\nDrawToolTip(g);\n}\n\nDrawSeries(g, Option.Series);\nDrawAxis(g);\nDrawTitle(g);\n\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line)\n{\nDrawToolTip(g);\n}\n\nDrawLegend(g);\nDrawAxisScales(g);\n}", "CodeBleu_score": 56.15291558231073}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null ||!DrawNeeded) return;\nDrawToolTip(g);\nDrawSeries(g, Option.Series);\nDrawAxis(g);\nDrawTitle(g);\nDrawToolTip(g);\nDrawLegend(g);\nDrawAxisScales(g);\n}", "CodeBleu_score": 30.67610404528377}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (SelectedIndex < 0) return;\n\tif (ToolTipType == ToolTipType.Line) {\n\t\tg.DrawLine(Pens.Black, DrawingOrigin.X + SelectedIndex * BarWidth, DrawingOrigin.Y, DrawingOrigin.X + SelectedIndex * BarWidth, DrawingOrigin.Y + Height);\n\t} else {\n\t\tg.FillRectangle(Brushes.Black, DrawingOrigin.X + SelectedIndex * BarWidth, DrawingOrigin.Y, BarWidth, Height);\n\t}\n}", "CodeBleu_score": 27.748020085108184}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (this.SelectedIndex < 0) return;\n\tif (this.ToolTipType == ToolTipType.None) return;\n\tint x = this.DrawingOrigin.X + this.SelectedIndex * this.BarWidth;\n\tint y = this.DrawingOrigin.Y;\n\tint width = this.BarWidth;\n\tint height = this.DrawingOrigin.Y + this.DrawingSize.Height;\n\tif (this.ToolTipType == ToolTipType.Line) {\n\t\tg.DrawLine(this.ToolTipPen, x + width / 2, y, x + width / 2, height);\n\t}\n\telse if (this.ToolTipType == ToolTipType.Shadow) {\n\t\tg.FillRectangle(this.ToolTipBrush, x, y, width, height);\n\t}\n}", "CodeBleu_score": 31.799248306987117}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (SelectedIndex == -1)\n\t\treturn;\n\tif (ToolTipType == ToolTipType.Line) {\n\t\tg.DrawLine(Pens.Black, DrawingOrigin.X + SelectedIndex * BarWidth, DrawingOrigin.Y, DrawingOrigin.X + SelectedIndex * BarWidth, DrawingOrigin.Y + Height);\n\t}\n\telse if (ToolTipType == ToolTipType.Shadow) {\n\t\tg.FillRectangle(Brushes.Black, DrawingOrigin.X + SelectedIndex * BarWidth, DrawingOrigin.Y, BarWidth, Height);\n\t}\n}", "CodeBleu_score": 27.250550543757555}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t\tif (!title.Text.IsValid)\n\t\treturn;\n\n\tFont font = title.Font;\n\tColor color = title.Color;\n\n\tSizeF textSize = TextRenderer.MeasureText(title.Text, font);\n\tg.DrawString(title.Text, font, new SolidBrush(color), title.GetTitleRect(textSize));\n\n\tif (title.SubText.IsValid) {\n\t\tFont scaledFont = Font.DPIScaleFont(title.SubFont, g);\n\t\tg.DrawString(title.SubText, scaledFont, new SolidBrush(title.SubColor), title.GetSubTitleRect(textSize));\n\t}\n}", "CodeBleu_score": 29.306017437249515}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t if (title.Text.IsValid) {\n SizeF size = TextRenderer.MeasureText(title.Text, title.Font);\n g.DrawString(title.Text, title.Font, title.TextColor.GetBrush(g), title.GetTitlePosition(size), title.StringFormat);\n if (title.SubText.IsValid) {\n using (Font font = new Font(title.Font.FontFamily, title.Font.Size * 0.75f)) {\n g.DrawString(title.SubText, font, title.TextColor.GetBrush(g), title.GetSubTitlePosition(size), title.StringFormat);\n }\n }\n }\n }", "CodeBleu_score": 28.419655687748204}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t\tif (title.Text.IsValid) {\n\t\tSizeF size = TextRenderer.MeasureText(title.Text, title.Font);\n\t\tif (title.Alignment == UITitleAlignment.Left) {\n\t\t\tg.DrawString(title.Text, title.Font, title.TextColor, new PointF(title.X, title.Y));\n\t\t\tif (title.SubText.IsValid) {\n\t\t\t\tFont scaledFont = Font.DPIScaleFont(title.SubFont);\n\t\t\t\tg.DrawString(title.SubText, scaledFont, title.SubTextColor, new PointF(title.X, title.Y + size.Height + 3));\n\t\t\t}\n\t\t} else if (title.Alignment == UITitleAlignment.Center) {\n\t\t\tg.DrawString(title.Text, title.Font, title.TextColor, new PointF(title.X - size.Width / 2, title.Y));\n\t\t\tif (title.SubText.IsValid) {\n\t\t\t\tFont scaledFont = Font.DPIScaleFont(title.SubFont);\n\t\t\t\tg.DrawString(title.SubText, scaledFont, title.SubTextColor, new PointF(title.X - size.Width / 2, title.Y + size.Height + 3));\n\t\t\t}\n\t\t} else if (title.Alignment == UITitleAlignment.Right) {\n\t\t\tg.DrawString(title.Text, title.Font, title.TextColor, new PointF(title.X - size.Width, title.Y));\n\t\t\tif (title.SubText.IsValid) {\n\t\t\t\tFont scaledFont = Font.DPIScaleFont(title.SubFont);\n\t\t\t\tg.DrawString(title.SubText, scaledFont, title.SubTextColor, new PointF(title.X - size.Width, title.Y + size.Height + 3));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.699905057147433}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\temptyOption = new DoughnutChartOptions();\nemptyOption.Title.Text = \"Doughnut Chart\";\nemptyOption.Title.SubText = \"with legend\";\nemptyOption.Legend.Show = true;\nemptyOption.Legend.Data.Add(\"name1\");\nemptyOption.Legend.Data.Add(\"name2\");\nemptyOption.Legend.Data.Add(\"name3\");\nemptyOption.Legend.Data.Add(\"name4\");\nemptyOption.Legend.Data.Add(\"name5\");\n\nSeries serie = new Series(\"serie1\");\nserie.Center = new List<string> { \"50%\", \"50%\" };\nserie.Radius = \"60%\";\nserie.AddData(\"Data1\");\nserie.AddData(\"Data2\");\nserie.AddData(\"Data3\");\nserie.AddData(\"Data4\");\nserie.AddData(\"Data5\");\nemptyOption.Series.Add(serie\n}", "CodeBleu_score": 28.776701830514778}, {"code": "protected override void CreateEmptyOption(){\n\temptyOption = new ChartOption();\nemptyOption.Title.Text = \"Doughnut Chart\";\nemptyOption.Title.SubText = \"Example\";\nemptyOption.Series.Add(new Series {\nName = \"Doughnut\",\nCenter = new List<string> { \"50%\", \"50%\" },\nRadius = \"50%\",\nType = \"Doughnut\"\n});\nemptyOption.Series[0].Data.Add(new Data { Name = \"Data 1\", Value = 10 });\nemptyOption.Series[0].Data.Add(new Data { Name = \"Data 2\", Value = 20 });\nemptyOption.Series[0].Data.Add(new Data { Name = \"Data 3\", Value = 30 });\nemptyOption.Series[0].Data.Add(new Data { Name = \"Data 4\", Value = 40 });\nemptyOption.Series[0].Data.Add(new Data { Name = \"Data 5\", Value = 50 });\n}", "CodeBleu_score": 29.00506691007214}, {"code": "protected override void CreateEmptyOption(){\n\t\nvar option = new ChartOption() {\nTitle = new Title() {\nText = \"Empty Doughnut Chart\",\nSubtext = \"with empty data\"\n},\nTooltip = new Tooltip() {\nTrigger = \"item\",\nFormatter = \"{a} <br/>{b}: {c} ({d}%)\"\n},\nLegend = new Legend() {\nOrient = \"vertical\",\nLeft = \"left\",\nData = new List<string>() { \"A\", \"B\", \"C\", \"D\", \"E\" }\n},\nSeries = new List<Series>() {\nnew Series() {\nName = \"Data\",\nType = \"pie\",\nRadius = \"55%\",\nCenter = new List<string>() { \"50%\", \"60%\" },\nData = new List<object>() {\nnew { Value = 10, Name = \"A\" },\nnew { Value = 20, Name = \"B\" },\nnew { Value = 30, Name = \"C\" },\nnew { Value = 40, Name = \"D\" },\nnew { Value = 50, Name = \"E\" }\n}\n}\n}\n};\n\nemptyOption = option;\n}", "CodeBleu_score": 14.011340028017615}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t\treturn _base.CallFunction<double[]>(\"LabelValues\");\n}", "CodeBleu_score": 2.879131113583208}, {"code": "public double[] LabelValues(){\n\t\treturn null;\n}", "CodeBleu_score": 2.8651077478570417}, {"code": "public double[] LabelValues(){\n\t\treturn _base.LabelValues();\n}", "CodeBleu_score": 4.228804293932241}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tusing (Pen pen = new Pen(color, width)) {\n\t\tIntPtr hDC = Win32.GetDC(m.HWnd);\n\t\tif (hDC.ToInt32()!= 0) {\n\t\t\tusing (Graphics g = Graphics.FromHdc(hDC)) {\n\t\t\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\t\t\tg.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n\t\t\t}\n\t\t\tWin32.ReleaseDC(m.HWnd, hDC);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.61941485252143}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tPen pen = new Pen(color, width);\nIntPtr hDC = Win32.GetWindowDC(m.HWnd);\nif (hDC.ToInt32()!= 0) {\nGraphics g = Graphics.FromHdc(hDC);\ng.SmoothingMode = SmoothingMode.AntiAlias;\ng.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\ng.Dispose();\n}\nWin32.ReleaseDC(m.HWnd, hDC);\n}", "CodeBleu_score": 54.06604005454329}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\nPen pen = new Pen(color, width);\n\nIntPtr hDC = Win32.GetWindowDC(m.HWnd);\n\nif (hDC.ToInt32()!= 0) {\n\nGraphics g = Graphics.FromHdc(hDC);\n\ng.SmoothingMode = SmoothingMode.AntiAlias;\n\ng.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n\ng.Dispose();\n\n}\n\nWin32.ReleaseDC(m.HWnd, hDC);\n\n}", "CodeBleu_score": 54.041262318165316}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\tvar bitmap = new Bitmap(ctrl.Width, ctrl.Height, PixelFormat.Format32bppArgb);\n\tusing (var gr = Graphics.FromImage(bitmap)) {\n\t\tvar hdc = gr.GetHdc();\n\t\ttry {\n\t\t\tvar teDC = Win32.GDI.CreateCompatibleDC(hdc);\n\t\t\ttry {\n\t\t\t\tvar hBitmap = Win32.GDI.CreateCompatibleBitmap(hdc, ctrl.Width, ctrl.Height);\n\t\t\t\ttry {\n\t\t\t\t\tvar hOldBitmap = Win32.GDI.SelectObject(teDC, hBitmap);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tWin32.User.GetWindowDC(ctrl.Handle);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tWin32.GDI.PrintWindow(ctrl.Handle, teDC, 0);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tWin32.User.ReleaseDC(ctrl.Handle);\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tWin32.GDI.SelectObject(teDC, hOldBitmap);\n\t\t\t\t\t}\n\t\t\t\t\tbitmap = Image.FromHbitmap(hBitmap);\n\t\t\t\t} finally {\n\t\t\t\t\tWin32.GDI.DeleteObject(hBitmap);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tWin32.GDI.DeleteDC(teDC);\n\t\t\t}\n\t\t} finally {\n\t\t\tgr.ReleaseHdc(hdc);\n\t\t}\n\t}\n\treturn bitmap;\n}", "CodeBleu_score": 48.33924458834464}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\tIntPtr hDC = Win32.User.GetWindowDC(ctrl.Handle);\n\tusing (Graphics g = Graphics.FromHdc(hDC)) {\n\t\tusing (Bitmap bitmap = new Bitmap(ctrl.Width, ctrl.Height, g)) {\n\t\t\tGraphics bitmapGraphics = Graphics.FromImage(bitmap);\n\t\t\tIntPtr teDC = Win32.GDI.CreateCompatibleDC(hDC);\n\t\t\tWin32.GDI.SelectObject(teDC, bitmap.GetHbitmap());\n\t\t\tWin32.GDI.PrintWindow(ctrl.Handle, teDC, 0);\n\t\t\tbitmapGraphics.Dispose();\n\t\t\tWin32.GDI.DeleteDC(teDC);\n\t\t\treturn bitmap;\n\t\t}\n\t}\n}", "CodeBleu_score": 42.19320169688582}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\tIntPtr hDC = Win32.User.GetWindowDC(ctrl.Handle);\n\tusing (Graphics g = Graphics.FromHdc(hDC)) {\n\t\tusing (Bitmap bmp = new Bitmap(ctrl.Width, ctrl.Height, g)) {\n\t\t\tGraphics bmpGraphics = Graphics.FromImage(bmp);\n\t\t\tIntPtr hMemDC = Win32.GDI.CreateCompatibleDC(hDC);\n\t\t\tIntPtr hBitmap = bmp.GetHbitmap();\n\t\t\tIntPtr hOldBitmap = Win32.GDI.SelectObject(hMemDC, hBitmap);\n\t\t\tWin32.GDI.PrintWindow(ctrl.Handle, hMemDC, 0);\n\t\t\tWin32.GDI.SelectObject(hMemDC, hOldBitmap);\n\t\t\tWin32.GDI.DeleteObject(hBitmap);\n\t\t\tWin32.GDI.DeleteDC(hMemDC);\n\t\t\tbmpGraphics.Dispose();\n\t\t\treturn bmp;\n\t\t}\n\t}\n}", "CodeBleu_score": 46.83039215515712}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t\t// Get the EventClick field from the Control class using reflection\n\tFieldInfo eventClickField = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\n\t// If the field is found, retrieve the event handler's key object\n\tif (eventClickField!= null) {\n\t\tobject eventClickKey = eventClickField.GetValue(null);\n\n\t\t// Get the Events property of the Button\n\t\tPropertyDescriptorCollection events = TypeDescriptor.GetProperties(button)[\"Events\"];\n\n\t\t// If the property and key object are valid, remove the click event handler from the event handler list\n\t\tif (events!= null && eventClickKey!= null) {\n\t\t\tEventHandlerList eventHandlerList = events.GetValue(button) as EventHandlerList;\n\t\t\tif (eventHandlerList!= null) {\n\t\t\t\teventHandlerList.RemoveHandler(eventClickKey, button.Click);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.51848631191185}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\t// Get the EventClick field from the Control class using reflection\n\tFieldInfo eventClickField = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\t// If the field is found\n\tif (eventClickField!= null) {\n\t\t// Obtain the event handler's key object\n\t\tobject eventClickKey = eventClickField.GetValue(null);\n\t\t// Get the Events property of the Button\n\t\tEventHandlerList events = button.Events;\n\t\t// Remove the click event handler from the event handler list if both the property and key object are valid\n\t\tif (events!= null && eventClickKey!= null) {\n\t\t\tevents.RemoveHandler(eventClickKey, events[eventClickKey]);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.79355120597388}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\t// Get the EventClick field from the Control class using reflection\n\tFieldInfo fi = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\tif (fi!= null) {\n\t\t// Get the event handler's key object\n\t\tobject key = fi.GetValue(null);\n\t\t// Get the Events property of the Button\n\t\tMethodInfo mi = typeof(Control).GetMethod(\"GetEvents\", BindingFlags.Instance | BindingFlags.NonPublic);\n\t\tEventHandlerList list = mi.Invoke(button, new object[] { }) as EventHandlerList;\n\t\tif (list!= null && key!= null) {\n\t\t\t// Remove the click event handler from the event handler list\n\t\t\tlist.RemoveHandler(key, list[key]);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.44945835308174}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\tpens the registry key for the.NET Framework entry.\n\tusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\")) {\n\t\t// Gets the.NET Framework version value from the registry key.\n\t\tint releaseKey = (int)ndpKey.GetValue(\"Release\");\n\t\t// Checks the version using the CheckFor45PlusVersion function.\n\t\tif (releaseKey >= 528040)\n\t\t\treturn \"4.8 or later\";\n\t\tif (releaseKey >= 461808)\n\t\t\treturn \"4.7.2\";\n\t\tif (releaseKey >= 461308)\n\t\t\treturn \"4.7.1\";\n\t\tif (releaseKey >= 460798)\n\t\t\treturn \"4.7\";\n\t\tif (releaseKey >= 394802)\n\t\t\treturn \"4.6.2\";\n\t\tif (releaseKey >= 394254)\n\t\t\treturn \"4.6.1\";\n\t\tif (releaseKey >= 393295)\n\t\t\treturn \"4.6\";\n\t\tif (releaseKey >= 379893)\n\t\t\treturn \"4.5.2\";\n\t\tif (releaseKey >= 378675)\n\t\t\treturn \"4.5.1\";\n\t\tif (releaseKey >= 378389)\n\t\t\treturn \"4.5\";\n\t\t// This code should never execute. A non-null release key should mean\n\t\t// that 4.5 or later is installed.\n\t\treturn \"No 4.5 or later version detected\";\n\t}\n}", "CodeBleu_score": 47.0681942760917}, {"code": "public static string CheckVersion(){\n\t{\n\t\tusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(@\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\")) {\n\t\t\tif (ndpKey!= null && ndpKey.GetValue(\"Release\")!= null)\n\t\t\t\treturn CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n\t\t\telse\n\t\t\t\treturn \".NET Framework 4.5 or later is not detected.\";\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\treturn ex.Message;\n\t}\n}", "CodeBleu_score": 62.80911188543461}, {"code": "public static string CheckVersion(){\n\tng version = \"No 4.5 or later version detected\";\n\tusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\")) {\n\t\tif (ndpKey!= null && ndpKey.GetValue(\"Release\")!= null) {\n\t\t\tversion = CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n\t\t}\n\t}\n\treturn version;\n}", "CodeBleu_score": 54.99861167437183}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new ArgumentException(\"Source and target bitmaps cannot be the same.\", \"source\");\n\t}\n\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\n\tBitmapData sourceData = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);\n\tBitmapData targetData = target.LockBits(new Rectangle(0, 0, target.Width, target.Height), ImageLockMode.WriteOnly, target.PixelFormat);\n\n\tint bytes = sourceData.Stride * sourceData.Height;\n\n\tunsafe {\n\t\tbyte* sourcePointer = (byte*)sourceData.Scan0.ToPointer();\n\t\tbyte* targetPointer = (byte*)targetData.Scan0.ToPointer();\n\n\t\tmemcpy(targetPointer, sourcePointer, bytes);\n\t}\n\n\tsource.UnlockBits(sourceData);\n\ttarget.UnlockBits(targetData);\n\n\treturn true;\n}", "CodeBleu_score": 49.29446215065211}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new ArgumentException(\"The source and target bitmaps must be different.\");\n\t}\n\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\n\tBitmapData sourceData = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);\n\tBitmapData targetData = target.LockBits(new Rectangle(0, 0, target.Width, target.Height), ImageLockMode.WriteOnly, target.PixelFormat);\n\n\tMarshal.Copy(sourceData.Scan0, targetData.Scan0, sourceData.Stride * source.Height);\n\n\tsource.UnlockBits(sourceData);\n\ttarget.UnlockBits(targetData);\n\n\treturn true;\n}", "CodeBleu_score": 50.18581631892049}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new Exception(\"Source and target are the same bitmap.\");\n\t}\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\tsource.FastLock();\n\ttarget.FastLock();\n\tunsafe {\n\t\tbyte* sourcePtr = (byte*)source.FastLockPtr.ToPointer();\n\t\tbyte* targetPtr = (byte*)target.FastLockPtr.ToPointer();\n\t\tint size = source.Width * source.Height * 4;\n\t\tmemcpy(targetPtr, sourcePtr, size);\n\t}\n\tsource.FastUnlock();\n\ttarget.FastUnlock();\n\treturn true;\n}", "CodeBleu_score": 53.45262375516048}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tPointF pt = new PointF(e.X, e.Y);\n\tif (e.Button == MouseButtons.Left) {\n\t\tSetPercent(pt);\n\t}\n}", "CodeBleu_score": 53.123657746773134}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tPointF currentMousePosition = new PointF(e.X, e.Y);\n\tif (e.Button == MouseButtons.Left) {\n\t\tSetPercent(currentMousePosition);\n\t}\n}", "CodeBleu_score": 53.07765634906326}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tPointF point = new PointF(e.X, e.Y);\n\tif (e.Button == MouseButtons.Left) {\n\t\tSetPercent(point);\n\t}\n}", "CodeBleu_score": 54.56509756269591}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t\tif (m_colorBarRect == RectangleF.Empty)\n\t\treturn;\n\n\tusing Pen pen = new Pen(Color.CadetBlue);\n\tusing Brush brush = new SolidBrush(Color.CadetBlue);\n\tusing Brush brush2 = new SolidBrush(Color.CadetBlue);\n\tusing Brush brush3 = new SolidBrush(Color.CadetBlue);\n\n\tif (m_colorBarOrientation == Orientation.Vertical) {\n\t\tif (m_colorBarColors.Count == 2) {\n\t\t\tDraw2ColorBar(dc, m_colorBarRect, m_colorBarColors[0], m_colorBarColors[1]);\n\t\t} else if (m_colorBarColors.Count > 2) {\n\t\t\tDraw3ColorBar(dc, m_colorBarRect, m_colorBarColors[0], m_colorBarColors[1], m_colorBarColors[2]);\n\t\t}\n\t\tDrawSelector(dc, m_colorBarRect, m_colorBarOrientation, m_percentSet);\n\t} else if (m_colorBarOrientation == Orientation.Horizontal) {\n\t\tRectangleF r = m_colorBarRect;\n\t\tr.Width = r.Height;\n\t\tr.Height = m_colorBarRect.Width;\n\t\tr.X = m_colorBarRect.X + m_colorBarRect.Width / 2 - r.Width / 2;\n\t\tr.Y = m_colorBarRect.Y + m_colorBarRect.Height / 2 - r.Height / 2;\n\t\tif (m_colorBarColors.Count == 2) {\n\t\t\tDraw2ColorBar(dc, r, m_colorBarColors[0], m_colorBarColors[1]);\n\t\t} else if (m_colorBarColors.Count > 2) {\n\t\t\tDraw3ColorBar(dc, r, m_colorBarColors[0], m_colorBarColors[1], m_colorBarColors[2]);\n\t\t}\n\t\tDrawSelector(dc, r, m_colorBarOrientation, m_percentSet);\n\t}\n}", "CodeBleu_score": 44.794264122673994}, {"code": "protected void DrawColorBar(Graphics dc){\n\t\tRectangleF r = new RectangleF(m_colorBarBounds.X, m_colorBarBounds.Y, m_colorBarBounds.Width, m_colorBarBounds.Height);\n\tif (m_colorBarBounds.Width > m_colorBarBounds.Height) {\n\t\tr.Y += (m_colorBarBounds.Height - m_colorBarBounds.Width) / 2;\n\t\tr.Height = m_colorBarBounds.Width;\n\t} else {\n\t\tr.X += (m_colorBarBounds.Width - m_colorBarBounds.Height) / 2;\n\t\tr.Width = m_colorBarBounds.Height;\n\t}\n\n\tif (m_colors.Count == 2)\n\t\tDraw2ColorBar(dc, r, m_colors[0], m_colors[1]);\n\telse if (m_colors.Count > 2)\n\t\tDraw3ColorBar(dc, r, m_colors[0], m_colors[1], m_colors[2]);\n\n\tDrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 28.98699499243263}, {"code": "protected void DrawColorBar(Graphics dc){\n\t\tRectangleF r = GetColorBarRect();\n\tif (m_colors.Length == 2)\n\t\tDraw2ColorBar(dc, r);\n\telse\n\t\tDraw3ColorBar(dc, r);\n\tDrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 26.860708606065977}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (this.Visible) {\n\t\tdropSymbol = SymbolNormal;\n\t} else {\n\t\tdropSymbol = SymbolDropDown;\n\t}\n\tthis.Invalidate();\n}", "CodeBleu_score": 52.530506389483755}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (this.Visible) {\n\t\tthis.dropSymbol = SymbolNormal;\n\t\tif (this.DroppedDown) {\n\t\t\tthis.dropSymbol = SymbolDropDown;\n\t\t}\n\t\tthis.Invalidate();\n\t}\n}", "CodeBleu_score": 37.391622133095495}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (this.Visible) {\n\t\tthis.dropSymbol = SymbolNormal;\n\t} else {\n\t\tthis.dropSymbol = SymbolDropDown;\n\t}\n\tthis.Invalidate();\n}", "CodeBleu_score": 37.0939624536087}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\n\tif (!edit.Visible) {\n\t\tif (Text.IsValid()) {\n\t\t\tg.DrawString(Text, Font, GetForeColor(), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height), GetStringFormat(TextAlign));\n\t\t} else if (Watermark.IsValid()) {\n\t\t\tg.DrawString(Watermark, Font, GetForeColor(), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height), GetStringFormat(TextAlign));\n\t\t}\n\t}\n\tg.FillRectangle(GetFillColor(), new Rectangle(edit.Right + 1, 0, 1, Height));\n\tif (ClearButton) {\n\t\tg.DrawFontImage(GetRectColor(), new Rectangle(edit.Right - 16, (Height - 16) / 2, 16, 16), \"e13\");\n\t} else {\n\t\tg.DrawFontImage(GetRectColor(), new Rectangle(edit.Right - 16, (Height - 16) / 2, 16, 16), \"e14\");\n\t}\n}", "CodeBleu_score": 42.86051629900116}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\n\tif (!edit.Visible) {\n\t\tif (Text.IsValid()) {\n\t\t\tg.DrawString(Text, Font, GetForeColor(), new Rectangle(Padding.Left, 0, Width - Padding.Left - Padding.Right, Height), GetStringFormat());\n\t\t} else if (Watermark.IsValid()) {\n\t\t\tg.DrawString(Watermark, Font, GetForeColor(), new Rectangle(Padding.Left, 0, Width - Padding.Left - Padding.Right, Height), GetStringFormat());\n\t\t}\n\t}\n\tg.FillRectangle(GetFillColor(), new Rectangle(Width - Padding.Right - RectSize - 2, (Height - RectSize) / 2, RectSize, RectSize));\n\tif (NeedClear) {\n\t\tg.DrawFontImage(GetRectColor(), new Rectangle(Width - Padding.Right - RectSize - 2, (Height - RectSize) / 2, RectSize, RectSize), FontImages.Clear);\n\t} else {\n\t\tg.DrawFontImage(GetRectColor(), new Rectangle(Width - Padding.Right - RectSize - 2, (Height - RectSize) / 2, RectSize, RectSize), FontImages.DropDown);\n\t}\n}", "CodeBleu_score": 54.69620444489605}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tbase.OnPaintFore(g, path);\n\tSizeChange();\n\tif (edit.Visible) {\n\t\tedit.Invalidate();\n\t\treturn;\n\t}\n\tif (Text.IsValid()) {\n\t\tg.DrawString(Text, Font, GetForeColor(), Padding.Left + 4, (Height - Font.Height) / 2);\n\t} else if (Watermark.IsValid()) {\n\t\tg.DrawString(Watermark, Font, GetForeColor(), Padding.Left + 4, (Height - Font.Height) / 2);\n\t}\n\tg.FillRectangle(GetFillColor(), Width - 16 - Padding.Right, (Height - 16) / 2, 16, 16);\n\tif (NeedClear) {\n\t\tg.DrawFontImage(GetRectColor(), \"clear\", Width - 16 - Padding.Right, (Height - 16) / 2, 16, 16);\n\t} else {\n\t\tg.DrawFontImage(GetRectColor(), \"dropdown\", Width - 16 - Padding.Right, (Height - 16) / 2, 16, 16);\n\t}\n}", "CodeBleu_score": 41.10060993591358}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (e.X >= ClientRectangle.Right - ClearButtonSize.Width && e.X <= ClientRectangle.Right && e.Y >= ClientRectangle.Top && e.Y <= ClientRectangle.Bottom) {\n\t\tif (NeedDrawClearButton && Text.IsValid()) {\n\t\t\tNeedDrawClearButton = false;\n\t\t\tInvalidate();\n\t\t}\n\t} else {\n\t\tif (!NeedDrawClearButton && Text.IsValid()) {\n\t\t\tNeedDrawClearButton = true;\n\t\t\tInvalidate();\n\t\t}\n\t}\n}", "CodeBleu_score": 46.12975735890487}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tbool needDraw = e.X >= Width - 20;\n\tif (NeedDrawClearButton!= needDraw && Text.IsValid()) {\n\t\tNeedDrawClearButton = needDraw;\n\t\tInvalidate();\n\t}\n}", "CodeBleu_score": 54.00617569429578}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!this.ShowClearButton) {\n\t\tthis.NeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (this.Text.IsValid()) {\n\t\tthis.NeedDrawClearButton = this.ClientRectangle.Contains(e.Location) && this.ClientRectangle.Right - this.ClientRectangle.Width / 4 <= e.Location.X;\n\t\tif (this.NeedDrawClearButton!= this.lastNeedDrawClearButton) {\n\t\t\tthis.lastNeedDrawClearButton = this.NeedDrawClearButton;\n\t\t\tthis.Invalidate();\n\t\t}\n\t}\n}", "CodeBleu_score": 30.918207610237026}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\tbase.OnLayout(e);\n\tif (this.AutoSize) {\n\t\tSize preferredSize = this.GetPreferredSize(new Size(this.Width, this.Height));\n\t\tif (this.Width!= preferredSize.Width || this.Height!= preferredSize.Height) {\n\t\t\tthis.Size = preferredSize;\n\t\t}\n\t}\n\tthis.SetDisplayedItems();\n\tthis.OnLayoutCompleted(EventArgs.Empty);\n\tthis.Invalidate();\n}", "CodeBleu_score": 34.41279464641126}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\tbase.OnLayout(e);\n\n\t// Calculate the preferred size of the component\n\tSize preferredSize = GetPreferredSize(new Size(int.MaxValue, int.MaxValue));\n\n\t// Adjust the size if AutoSize is enabled and the suggested size differs from the current size\n\tif (AutoSize && (Size!= preferredSize)) {\n\t\tSize = preferredSize;\n\t}\n\n\t// Set the items to be displayed\n\tSetDisplayedItems();\n\n\t// Trigger the layout completed event\n\tOnLayoutCompleted(EventArgs.Empty);\n\n\t// Invalidate the component to refresh its display\n\tInvalidate();\n}", "CodeBleu_score": 46.15428862845427}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\t// Calculate preferred size\n\tSize preferredSize = GetPreferredSize(new Size(int.MaxValue, int.MaxValue));\n\n\t// Adjust size if auto-size is enabled and the suggested size differs from the current size\n\tif (AutoSize && (Size!= preferredSize)) {\n\t\tSize = preferredSize;\n\t}\n\n\t// Set displayed items\n\tSetDisplayedItems();\n\n\t// Trigger layout completed event\n\tOnLayoutCompleted(EventArgs.Empty);\n\n\t// Invalidate the component to refresh its display\n\tInvalidate();\n}", "CodeBleu_score": 47.42445549163561}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.fillColor = Color.white;\n\tthis.foregroundColor = uiColor.dropdownPanel.foregroundColor;\n\tthis.rectangleColor = uiColor.dropdownPanel.rectangleColor;\n\tthis.GetControls<UISymbolButton>().ForEach(item => item.SetStyleColor(uiColor));\n}", "CodeBleu_score": 44.93087700679118}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.SetStyleColor(uiColor.FillColor, uiColor.ForegroundColor, uiColor.RectangleColor);\n\tforeach (UISymbolButton item in this.GetControls<UISymbolButton>()) {\n\t\titem.SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 41.82840540531673}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.m_fillColor = Color.white;\n\tthis.m_foregroundColor = uiColor.m_dropdownPanelForegroundColor;\n\tthis.m_rectColor = uiColor.m_dropdownPanelBackgroundColor;\n\tthis.GetControls<UISymbolButton>().ForEach(item => item.SetStyleColor(uiColor));\n}", "CodeBleu_score": 41.90402567847109}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (this.AnalogMeter == null) {\nreturn false;\n}\nColor bodyColor = this.AnalogMeter.BodyColor;\nColor darkColor = Color.FromArgb(bodyColor.R - 20, bodyColor.G - 20, bodyColor.B - 20);\nLinearGradientBrush br = new LinearGradientBrush(rc, bodyColor, darkColor, LinearGradientMode.Horizontal);\nGr.FillEllipse(br, rc);\nrc.Inflate(-this.AnalogMeter.GetDrawRatio, -this.AnalogMeter.GetDrawRatio);\nbr = new LinearGradientBrush(rc, darkColor, bodyColor, LinearGradientMode.Horizontal);\nGr.FillEllipse(br, rc);\nreturn true;\n}", "CodeBleu_score": 42.15022666830911}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (this.AnalogMeter == null)\n\t\treturn false;\n\n\tColor BodyColor = this.AnalogMeter.GetBodyColor;\n\tColor DarkBodyColor = Color.FromArgb(BodyColor.A, BodyColor.R / 2, BodyColor.G / 2, BodyColor.B / 2);\n\n\tLinearGradientBrush lgb = new LinearGradientBrush(rc, BodyColor, DarkBodyColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(lgb, rc);\n\tlgb.Dispose();\n\n\trc.Inflate(-this.AnalogMeter.GetDrawRatio, -this.AnalogMeter.GetDrawRatio);\n\tlgb = new LinearGradientBrush(rc, DarkBodyColor, BodyColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(lgb, rc);\n\tlgb.Dispose();\n\n\treturn true;\n}", "CodeBleu_score": 41.36249082827985}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (this.AnalogMeter == null)\n\t\treturn false;\n\n\tColor BodyColor = this.AnalogMeter.GetBodyColor();\n\tColor DarkColor = Color.FromArgb(BodyColor.R / 2, BodyColor.G / 2, BodyColor.B / 2);\n\n\tLinearGradientBrush Brush = new LinearGradientBrush(rc, BodyColor, DarkColor, LinearGradientMode.ForwardDiagonal);\n\tGr.FillEllipse(Brush, rc);\n\n\trc.Inflate(-this.AnalogMeter.GetDrawRatio(), -this.AnalogMeter.GetDrawRatio());\n\tBrush.LinearColors = new Color[] { DarkColor, BodyColor };\n\tGr.FillEllipse(Brush, rc);\n\n\treturn true;\n}", "CodeBleu_score": 39.65660390738076}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n\tif (this.Meter!= null) {\n\t\tthis.Meter.MouseEnter();\n\t}\n}", "CodeBleu_score": 23.67268560137397}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n\tif (this.IsMouseOver) {\n\t\tthis.Invalidate();\n\t}\n}", "CodeBleu_score": 27.723589107010888}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n}", "CodeBleu_score": 18.539744119425283}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\tlock (_lock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n\t}\n}", "CodeBleu_score": 61.06112302201069}, {"code": "public static void Load(){\n\tlock (_lock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n\t}\n}", "CodeBleu_score": 61.06112302201069}, {"code": "public static void Load(){\n\tlock (_lock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n\t}\n}", "CodeBleu_score": 61.06112302201069}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t\tstring proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\tif (!string.IsNullOrWhiteSpace(proxyOverride)) {\n\t\tforeach (string overrideItem in proxyOverride.Split(';')) {\n\t\t\tbool ignoreLocal = false;\n\t\t\tif (overrideItem.StartsWith(\"!\")) {\n\t\t\t\tignoreLocal = true;\n\t\t\t\toverrideItem = overrideItem.Substring(1);\n\t\t\t}\n\t\t\tif (!Overrides.Contains(overrideItem)) {\n\t\t\t\tOverrides.Add(new OverrideItem(overrideItem, ignoreLocal));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.783476357749656}, {"code": "private static void LoadOverrides(){\n\t\tRegistryKey _proxyKey = Registry.CurrentUser.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\", false);\n\tstring proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\n\tif (!string.IsNullOrWhiteSpace(proxyOverride)) {\n\t\tforeach (string proxy in proxyOverride.Split(';')) {\n\t\t\tbool ignoreLocal = proxy.StartsWith(\"<-loopback>\");\n\t\t\tstring overrideAddress = proxy.Replace(\"<-loopback>\", \"\");\n\t\t\tif (!string.IsNullOrWhiteSpace(overrideAddress) &&!Overrides.Contains(overrideAddress)) {\n\t\t\t\tOverrides.Add(new ProxyOverride(overrideAddress, ignoreLocal));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.69343638016651}, {"code": "private static void LoadOverrides(){\n\t\tstring proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\tif (!string.IsNullOrWhiteSpace(proxyOverride)) {\n\t\tforeach (string overrideItem in proxyOverride.Split(';')) {\n\t\t\tbool ignoreLocal = overrideItem.StartsWith(\"!\");\n\t\t\tstring overrideUrl = ignoreLocal? overrideItem.Substring(1) : overrideItem;\n\t\t\tif (!Overrides.Contains(overrideUrl)) {\n\t\t\t\tOverrides.Add(new OverrideItem(ignoreLocal, new Uri(overrideUrl)));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.68887540583149}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\ttring method = string.Empty;\nList<string> headers = new List<string>();\nUri requestUri = baseUri;\n\nstring command = await ReadNonBufferedLine();\nif (string.IsNullOrWhiteSpace(command)) return null;\n\nstring[] tokens = command.Split(' ');\nif (tokens.Length > 0) method = tokens[0];\nif (tokens.Length > 1)\n{\nstring url = tokens[1];\nif (url.StartsWith(\"http://\"))\n{\nrequestUri = new Uri(url);\n}\nelse\n{\nif (baseUri == null) return null;\nrequestUri = new Uri(baseUri, url);\n}\n}\n\nwhile (true)\n{\nstring header = await ReadNonBufferedLine();\nif (header.Length == 0) break;\nheaders.Add(header);\n}\n\nif (method == \"CONNECT\")\n{\nif (!SecureTunnel(requestUri.Host)) return null;\n\nawait SendResponseAsync(HttpStatusCode.OK).ConfigureAwait(false);\nreturn await ReadRequestAsync(new Uri(\"https://\" + requestUri.Host)).ConfigureAwait(false);\n}\n\nreturn CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 54.46261811445544}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\tstring method = string.Empty;\n\tList<string> headers = new List<string>();\n\tUri requestUri = baseUri;\n\tstring command = ReadNonBufferedLine();\n\tif (string.IsNullOrWhiteSpace(command)) return null;\n\tstring[] commandParts = command.Split(' ');\n\tif (commandParts.Length > 0) method = commandParts[0].ToUpper();\n\tif (commandParts.Length > 1) requestUri = new Uri(baseUri, commandParts[1]);\n\twhile (Client.Connected) {\n\t\tcommand = ReadNonBufferedLine();\n\t\tif (string.IsNullOrWhiteSpace(command)) break;\n\t\theaders.Add(command);\n\t}\n\tif (method == \"CONNECT\") {\n\t\tbaseUri = requestUri;\n\t\tawait SendResponseAsync(HttpStatusCode.OK).ConfigureAwait(false);\n\t\tif (SecureTunnel(baseUri.Host)) return await ReadRequestAsync(baseUri).ConfigureAwait(false);\n\t}\n\telse {\n\t\treturn CreateRequest(method, headers, requestUri);\n\t}\n\treturn null;\n}", "CodeBleu_score": 60.439959635223204}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\tstring method = \"GET\";\n\tList<string> headers = new List<string>();\n\tUri requestUri = baseUri;\n\n\tstring command = await ReadNonBufferedLineAsync();\n\tif (command.Length == 0) return null;\n\n\tstring[] commandParts = command.Split(' ');\n\tif (commandParts.Length > 0) method = commandParts[0];\n\tif (commandParts.Length > 1) requestUri = new Uri(commandParts[1]);\n\n\twhile (true) {\n\t\tstring line = await ReadNonBufferedLineAsync();\n\t\tif (line.Length == 0) break;\n\t\theaders.Add(line);\n\t}\n\n\tif (method == \"CONNECT\") {\n\t\tif (requestUri.Scheme == \"https\") {\n\t\t\tif (SecureTunnel(requestUri.Host)) {\n\t\t\t\tawait SendResponseAsync(HttpStatusCode.OK).ConfigureAwait(false);\n\t\t\t\treturn await ReadRequestAsync(requestUri).ConfigureAwait(false);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\treturn CreateRequest(method, headers, requestUri);\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 48.64274042747574}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\treturn SendResponseAsync(response, content);\n}", "CodeBleu_score": 13.462962453178978}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\n}", "CodeBleu_score": 5.663230839945438}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\n}", "CodeBleu_score": 5.663230839945438}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\ttry {\n\t\t// Generate the certificate for the host\n\t\t_certificate = _certifier.GenerateCertificate(host);\n\t\t// Create the secure stream\n\t\t_secureStream = new SslStream(_client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n\t\t// Authenticate as server using the generated certificate\n\t\t((SslStream)_secureStream).AuthenticateAsServer(_certificate, false, SslProtocols.Tls, false);\n\t\treturn true;\n\t} catch (Exception e) {\n\t\t// Log the exception\n\t\tLog.Error(e.Message);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 54.205275259706}, {"code": "private bool SecureTunnel(string host){\n\ttry {\n\t\t// Generate a certificate for the host\n\t\t_certificate = _certifier.GenerateCertificate(host);\n\n\t\t// Create a secure stream using the generated certificate\n\t\t_secureStream = new SslStream(_client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n\n\t\t// Authenticate the secure stream as a server using the certificate and support TLS protocols\n\t\t((SslStream)_secureStream).AuthenticateAsServer(_certificate, false, SslProtocols.Tls, false);\n\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 59.68146273917616}, {"code": "private bool SecureTunnel(string host){\n\ttry {\n\t\t// Create a new certificate generator.\n\t\tCertificateGenerator certGen = new CertificateGenerator();\n\t\t// Generate a certificate for the host.\n\t\tX509Certificate2 cert = certGen.GenerateCertificate(host);\n\t\t// Create a new SSL stream using the certificate.\n\t\t_secureStream = new SslStream(_client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n\t\t// Authenticate the SSL stream as a server.\n\t\t_secureStream.AuthenticateAsServer(cert, false, SslProtocols.Tls, false);\n\t\treturn true;\n\t} catch (Exception e) {\n\t\t// Return false if an exception occurs.\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 54.875242023998716}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response == null) throw new ArgumentNullException(\"response\");\n\tStream stream = response.GetResponseStream();\n\tif (stream == null) {\n\t\tresponse.Dispose();\n\t\treturn null;\n\t}\n\tlong contentLength = response.ContentLength;\n\tif (contentLength <= 0) contentLength = 4096;\n\treturn new StreamContent(stream, (int)contentLength);\n}", "CodeBleu_score": 32.30285336734218}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response == null) {\n\t\tthrow new ArgumentNullException(\"response\");\n\t}\n\n\tStream responseStream = response.GetResponseStream();\n\tif (responseStream == null) {\n\t\treturn null;\n\t}\n\n\tlong contentLength = response.ContentLength;\n\tif (contentLength > 0) {\n\t\treturn new StreamContent(responseStream, (int)contentLength);\n\t} else {\n\t\tresponseStream.Dispose();\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 27.568947991003935}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response == null) {\n\t\tthrow new ArgumentNullException(\"response\");\n\t}\n\tif (response.ContentLength == 0) {\n\t\tresponse.GetResponseStream().Dispose();\n\t\treturn null;\n\t}\n\treturn new StreamContent(response.GetResponseStream(), (int)response.ContentLength);\n}", "CodeBleu_score": 63.74690191615343}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (path.Length == 0) {\nOpenFileDialog ofd = new OpenFileDialog();\nofd.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\nif (ofd.ShowDialog() == DialogResult.OK) {\npath = ofd.FileName;\nActivityConfigJsonPath.Text = path;\n}\n}\nif (path.Length > 0) {\ntry {\nActivityConfig ac = LoadActivityConfig(path);\nox.Show(\"OK\", Reso\n} catch (Exception ex) {\nox.Show(ex.ToString(), Reso\n}\n}\n}", "CodeBleu_score": 33.73640550419782}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tvar path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nvar dialog = new OpenFileDialog {\nFilter = \"JSON file (*.json)|*.json\",\nTitle = \"Select activity configuration JSON file\"\n};\nif (dialog.ShowDialog() == DialogResult.OK) {\npath = dialog.FileName;\nActivityConfigJsonPath.Text = path;\n}\n}\ntry {\nLoadActivityConfig(path);\nox.Show(\"OK\", Reso\nurces.ActivityConfigLoaded);\n} catch (Exception ex) {\nox.Show(ex.ToSt\nring(), Reso\nurces.Error);\n}\n}", "CodeBleu_score": 48.3017477482493}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (path.Length == 0) {\nOpenFileDialog dialog = new OpenFileDialog();\ndialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\ndialog.FilterIndex = 1;\ndialog.RestoreDirectory = true;\nif (dialog.ShowDialog() == DialogResult.OK) {\npath = dialog.FileName;\nActivityConfigJsonPath.Text = path;\n}\n}\ntry {\nLoadActivityConfig(path);\nox.Show(\"OK\", Reso\n} catch (Exception ex) {\nox.Show(ex.ToSt\ning(), Reso\n}\n}", "CodeBleu_score": 33.39968969564626}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t\t// Load the activity configuration from the specified file path\n\tActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\n\t// Update the ListActivityConfigItems control\n\tListActivityConfigItems.BeginUpdate();\n\tListActivityConfigItems.Items.Clear();\n\tListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 65.49504500873104}, {"code": "private void LoadActivityConfig(string path){\n\t\tActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\tListActivityConfigItems.BeginUpdate();\n\tListActivityConfigItems.Items.Clear();\n\tListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 65.50501521757288}, {"code": "private void LoadActivityConfig(string path){\n\t\tList<ActivityConfigItem> items = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\tListActivityConfigItems.BeginUpdate();\n\tListActivityConfigItems.Items.Clear();\n\tListActivityConfigItems.Items.AddRange(items.Select(Convert).ToArray());\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 44.66537870021655}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nSaveFileDialog dialog = new SaveFileDialog();\ndialog.ShowDialog();\npath = dialog.FileName;\nActivityConfigJsonPath.Text = path;\n}\nif (string.IsNullOrEmpty(path)) return;\ntry {\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\nMessageBox.Show(\"OK\", \"Save\");\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"Error\");\n}\n}", "CodeBleu_score": 43.055202049035834}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nSaveFileDialog dialog = new SaveFileDialog();\ndialog.Filter = \"JSON file (*.json)|*.json\";\ndialog.ShowDialog();\npath = dialog.FileName;\nActivityConfigJsonPath.Text = path;\n}\nif (string.IsNullOrEmpty(path)) {\nreturn;\n}\ntry {\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\nMessageBox.Show(\"OK\");\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString());\n}\n}", "CodeBleu_score": 34.12236326288278}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nSaveFileDialog dialog = new SaveFileDialog();\ndialog.Filter = \"JSON files (*.json)|*.json\";\ndialog.ShowDialog();\npath = dialog.FileName;\nActivityConfigJsonPath.Text = path;\n}\nif (string.IsNullOrEmpty(path)) {\nreturn;\n}\ntry {\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\nMessageBox.Show(\"OK\");\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString());\n}\n}", "CodeBleu_score": 38.77080474088398}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\tListAllActivity.BeginUpdate();\nListAllActivity.Groups.Clear();\nListAllActivity.Items.Clear();\nforeach (var grp in GameData.Activity) {\nvar grpControl = new ListViewGroup(grp.Key, grp.Key);\nListAllActivity.Groups.Add(grpControl);\nforeach (var id in grp.Value.Ids) {\nvar item = new ListViewItem(id.ToString(), grpControl);\nitem.SubItems.Add(GameData.Activity[id].Name);\nListAllActivity.Items.Add(item);\n}\n}\nListAllActivity.EndUpdate();\n}", "CodeBleu_score": 52.27277789289681}, {"code": "private void LoadAllActivity(){\n\t\tListAllActivity.BeginUpdate();\n\tListAllActivity.Groups.Clear();\n\tforeach (var grp in GameData.Activity) {\n\t\tvar group = ListAllActivity.Groups.Add(grp.Value.Name, grp.Value.Name);\n\t\tforeach (var id in grp.Value.Ids) {\n\t\t\tListAllActivity.Items.Add(new ListViewItem(id.ToString(), group) {\n\t\t\t\tSubItems = {\n\t\t\t\t\tnew ListViewItem.ListViewSubItem(this, GameData.Activity[id].Name)\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tListAllActivity.EndUpdate();\n}", "CodeBleu_score": 45.8432646563933}, {"code": "private void LoadAllActivity(){\n\t\tListAllActivity.BeginUpdate();\n\tListAllActivity.Groups.Clear();\n\tListAllActivity.Items.Clear();\n\tforeach (var grp in GameData.Activity) {\n\t\tvar group = ListAllActivity.Groups.Add(grp.Key.ToString(), grp.Key.ToString());\n\t\tfor (var i = 0; i < grp.Value.Ids.Count; i++) {\n\t\t\tvar item = new ListViewItem(grp.Value.Ids[i].ToString(), group);\n\t\t\titem.SubItems.Add(grp.Value.Names[i]);\n\t\t\tListAllActivity.Items.Add(item);\n\t\t}\n\t}\n\tListAllActivity.EndUpdate();\n}", "CodeBleu_score": 57.08717093220116}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\tif (ListAllActivity.SelectedIndex == -1) {\nreturn;\n}\n\nNUDActivityId.Text = ListAllActivity.SelectedItem.ToString();\n}", "CodeBleu_score": 27.838145393713155}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\tif (ListAllActivity.SelectedIndex == -1)\nreturn;\nNUDActivityId.Text = ListAllActivity.SelectedItem.ToString();\n}", "CodeBleu_score": 28.229188232114254}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\tif (ListAllActivity.SelectedIndex == -1) {\nreturn;\n}\nNUDActivityId.Text = ListAllActivity.SelectedItem.ToString();\n}", "CodeBleu_score": 27.838145393713155}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = TxtDropJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nvar dialog = new OpenFileDialog();\ndialog.Filter = \"JSON files (*.json)|*.json\";\nif (dialog.ShowDialog() == DialogResult.OK) {\npath = dialog.FileName;\nTxtDropJsonPath.Text = path;\n}\n}\n\ntry {\nvar banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\nMessageBox.Show(\"OK\", \"Loaded\");\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"Error\");\n}\n}", "CodeBleu_score": 38.92638918030693}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t", "CodeBleu_score": 3.464990510405845}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = TxtDropJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nOpenFileDialog dialog = new OpenFileDialog();\ndialog.Filter = \"JSON files (*.json)|*.json\";\ndialog.FilterIndex = 2;\ndialog.RestoreDirectory = true;\nif (dialog.ShowDialog() == DialogResult.OK) {\npath = dialog.FileName;\nTxtDropJsonPath.Text = path;\n}\n}\ntry {\nusing (StreamReader r = new StreamReader(path)) {\nstring json = r.ReadToEnd();\nBanners = JsonConvert.DeserializeObject<List<Banner>>(json);\nMessageBox.Show(\"OK\", \"Loaded\");\n}\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"Error\");\n}\n}", "CodeBleu_score": 36.19423066267939}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\tta.BeginUpdate();\nta.Items.Clear();\nif (dropList.Count > 0) {\nta.Items.AddRange(dropList.Select(it => it.ToString()).ToArray());\nta.SelectedIndex = 0;\n}\nta.EndUpdate();\n}", "CodeBleu_score": 58.00272480514976}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\t// Update the drop list\n\tdropList.ForEach(it => it.Update());\n\n\t// Clear the list\n\tta.Items.Clear();\n\n\t// Check if there are elements in the drop list\n\tif (dropList.Count > 0) {\n\t\t// Add the elements to the list\n\t\tta.Items.AddRange(dropList.Select(it => it.ToString()).ToArray());\n\n\t\t// Select the first item\n\t\tta.SelectedIndex = 0;\n\t}\n\n\t// End the update process\n\tta.EndUpdate();\n}", "CodeBleu_score": 67.29353753166771}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t", "CodeBleu_score": 2.817738648739861}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t\tdropList.Remove(data);\n\tUpdateDropList();\n}", "CodeBleu_score": 10.3974290677467}, {"code": "private void RemoveDrop(DropData data){\n\t\tdropList.Remove(data);\n\tShowDropList(dropList);\n}", "CodeBleu_score": 8.891660371333975}, {"code": "private void RemoveDrop(DropData data){\n\t\tif (dropList.Contains(data)) {\n\t\tdropList.Remove(data);\n\t\tSelectedDropList.Remove(data);\n\t\tShowDropList(dropList);\n\t}\n}", "CodeBleu_score": 16.060293529448817}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\tLogger.I(TAG, \"FormMain_FormClosed\");\nforeach (Page page in pages) {\nLogger.I(TAG, \"Page \" + page.Name + \" OnClosed\");\npage.OnClosed();\nLogger.I(TAG, \"Page \" + page.Name + \" OnClosed completed\");\n}\nLogger.I(TAG, \"FormMain_FormClosed\");\nLogger.I(TAG, \"Saving settings\");\nProperties.Settings.Default.Save();\nLogger.I(TAG, \"Saving settings completed\");\n}", "CodeBleu_score": 52.52800118023874}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\tLogger.I(TAG, \"FormClosed\");\n\tforeach (TabPage page in tabControl1.TabPages) {\n\t\tLogger.I(TAG, \"Page: \" + page.Text + \" OnCl\");\n\t\t((IPage)page.Controls[0]).OnCl\n\t}\n\tProperties.Settings.Default.Save();\n\tLogger.I(TAG, \"FormClosed\");\n}", "CodeBleu_score": 34.57728075549964}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\t// Log the form closed event\n\tLogger.I(TAG, \"FormClosed\");\n\n\t// Iterate through each page, logging the start and completion of their OnClosed method\n\tforeach (FormPage page in pages) {\n\t\tLogger.I(TAG, \"Page \" + page.Name + \" OnClosed\");\n\t\tpage.OnClosed();\n\t\tLogger.I(TAG, \"Page \" + page.Name + \" OnClosed completed\");\n\t}\n\n\t// Save the current settings\n\tSettings.Save();\n\n\t// Log the completion of the form closed event\n\tLogger.I(TAG, \"FormClosed completed\");\n}", "CodeBleu_score": 50.76846688231929}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\ttry {\nif (this.WindowState == FormWindowState.\n      Normal) {\nthis.Settings.WindowLocation = this.Location;\nthis.Settings.WindowSize = this.Size;\n}\nelse {\nthis.Settings.WindowLocation = this.RestoreBounds.Location;\nthis.Settings.WindowSize = this.RestoreBounds.Size;\n}\nthis.Settings.WindowState = this.WindowState;\nthis.Settings.SplitterDistance = this.splitContainer1.SplitterDistance;\nthis.Settings.AutoCopy = this.autoCopyToolStripMenuItem.Checked;\nthis.Settings.Save();\n}\ncatch (Exception ex) {\nthis.ShowError(ex);\n}\n}", "CodeBleu_score": 26.090430526734607}, {"code": " private void SaveSettings(){\n\t", "CodeBleu_score": 0.7898236434181539}, {"code": " private void SaveSettings(){\n\t", "CodeBleu_score": 0.7898236434181539}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t if (PageTabOrders!= null) return PageTabOrders;\n\n PageTabOrders = new List<Tuple<string, bool>>();\n\n var pageOrders = Properties.Settings.Default.PageTabOrders;\n if (string.IsNullOrEmpty(pageOrders)) {\n foreach (var page in Pages)\n PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n } else {\n var pageOrderList = pageOrders.Split(new[] { '|' }, StringSplitOptions.RemoveEmptyEntries);\n foreach (var pageOrder in pageOrderList) {\n var sp = pageOrder.IndexOf('=');\n var page = pageOrder.Substring(0, sp);\n var isVisible = pageOrder.Substring(sp + 1) == \"1\";\n PageTabOrders.Add(new Tuple<string, bool>(page, isVisible));\n }\n }\n\n return PageTabOrders;\n}", "CodeBleu_score": 38.45010917826372}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (PageTabOrders!= null) return PageTabOrders;\n\tPageTabOrders = new List<Tuple<string, bool>>();\n\tvar tabOrders = Settings.Default.PageTabOrders;\n\tif (tabOrders == null || tabOrders.Length == 0) {\n\t\tforeach (var page in Pages) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Key, true));\n\t\t}\n\t} else {\n\t\tforeach (var tabOrder in tabOrders.Split(';')) {\n\t\t\tvar tabOrderParts = tabOrder.Split(':');\n\t\t\tvar pageName = tabOrderParts[0];\n\t\t\tvar isVisible = tabOrderParts[1] == \"1\";\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n\t\t}\n\t}\n\treturn PageTabOrders;\n}", "CodeBleu_score": 31.441762049125156}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t if (PageTabOrders!= null) return PageTabOrders;\n\n PageTabOrders = new List<Tuple<string, bool>>();\n\n if (!Settings.Default.PageTabOrders.Contains(\":\")) {\n foreach (var page in Pages)\n PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n } else {\n var pageOrders = Settings.Default.PageTabOrders.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);\n foreach (var pageOrder in pageOrders) {\n var pageOrderSplit = pageOrder.Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);\n if (pageOrderSplit.Length == 2) {\n var pageName = pageOrderSplit[0];\n var isVisible = pageOrderSplit[1] == \"1\";\n PageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n }\n }\n }\n\n return PageTabOrders;\n}", "CodeBleu_score": 34.2582039508591}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t\tSystem.Diagnostics.Debug.WriteLine(\"Frame length: \" + info.FrameData.Length);\n\tSystem.Diagnostics.Debug.WriteLine(\"File length: \" + _fileStream.Length);\n\t_compressStream.WriteBytes(info.FrameData);\n\t_compressStream.Flush();\n\tinfo.FrameData = null;\n\t_project.Frames.Add(info);\n}", "CodeBleu_score": 53.237375149219176}, {"code": "public override void Save(FrameInfo info){\n\t\tSystem.Diagnostics.Debug.WriteLine(info.FrameData.Length.ToString());\n\tSystem.Diagnostics.Debug.WriteLine(_compressStream.Length.ToString());\n\t_compressStream.WriteBytes(info.FrameData);\n\t_compressStream.Flush();\n\tinfo.FrameData = null;\n\t_project.Frames.Add(info);\n}", "CodeBleu_score": 48.734327032686885}, {"code": "public override void Save(FrameInfo info){\n\t\tSystem.Diagnostics.Debug.WriteLine(\"Frame length: \" + info.FrameData.Length);\n\tSystem.Diagnostics.Debug.WriteLine(\"File length: \" + _compressStream.Length);\n\t_compressStream.WriteBytes(info.FrameData);\n\t_compressStream.Flush();\n\tinfo.FrameData = null;\n\t_project.Frames.Add(info);\n}", "CodeBleu_score": 51.53399701890153}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\txture == null) {\n\t\treturn;\n\t}\n\n\tvar surface = texture.QueryInterface<Surface>();\n\tvar rect = surface.Map(MapFlags.None);\n\n\ttry {\n\t\tif (info.Type == OutputDuplicatePointerShapeType.Color) {\n\t\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n\t\t} else if (info.Type == OutputDuplicatePointerShapeType.Monochrome) {\n\t\t\tDrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer, info.Height);\n\t\t} else {\n\t\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n\t\t}\n\t} finally {\n\t\tsurface.Unmap();\n\t}\n}", "CodeBleu_score": 57.69271641748289}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t(var surface = texture.QueryInterface<Surface>()) {\n\t\tvar rect = surface.Map(MapFlags.Write);\n\n\t\tswitch (info.Type) {\n\t\t\tcase OutputDuplicatePointerShapeType.Monochrome:\n\t\t\t\tDrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer, info.Height);\n\t\t\t\tbreak;\n\n\t\t\tcase OutputDuplicatePointerShapeType.Color:\n\t\t\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase OutputDuplicatePointerShapeType.MaskedColor:\n\t\t\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tsurface.Unmap();\n\t}\n}", "CodeBleu_score": 75.25964229888248}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\tvar surface = texture.QueryInterface<Surface>();\n\tvar rect = surface.Map(MapFlags.WriteDiscard);\n\n\t//ImageUtil.ImageMethods.SavePixelArrayToFile(buffer, cursorWidth, cursorHeight, 4, System.IO.Path.GetFullPath(\".\\\\Cursor.png\"));\n\n\tif (info.Type == OutputDuplicatePointerShapeType.Monochrome)\n\t\tDrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer, info.Height);\n\telse if (info.Type == OutputDuplicatePointerShapeType.Color)\n\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n\telse if (info.Type == OutputDuplicatePointerShapeType.MaskedColor)\n\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n\n\tsurface.Unmap();\n}", "CodeBleu_score": 58.31118157307217}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new Imgur();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDisk();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 77.66140185208756}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new Imgur();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDisk();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 77.66140185208756}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 72.27642249746378}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t#if NETSTANDARD2_0\n        if (!File.Exists(path))\n        {\n            throw new UploadException(\"The provided file path is invalid.\");\n        }\n#else\n        if (!File.Exists(path))\n        {\n            throw new UploadException(\"The provided file path is invalid.\");\n        }\n#endif\n\n        var link = await GetUploadLinkAsync(preset, cancellationToken);\n        if (link == null)\n        {\n            throw new UploadException(\"The upload link is invalid.\");\n        }\n\n        using (var fileStream = File.OpenRead(path))\n        {\n            await UploadFileAsync(link, fileStream, cancellationToken, progressCallback);\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, cancellationToken);\n        if (downloadLink == null)\n        {\n            throw new UploadException(\"The download link is invalid.\");\n        }\n\n        var fileName = Path.GetFileName(path);\n        var history = new History(fileName, downloadLink, preset.Folder, DateTime.Now, HistoryType.Upload);\n        await AddHistoryAsync(history, cancellationToken);\n        return history;\n    }", "CodeBleu_score": 56.02167030533439}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\tif (IsCapturing) return;\n\tIsCapturing = true;\n\tHasImpreciseCapture = false;\n\n\tif (UserSettings.All.ForcedGarbageCollection)\n\t\tGarbageTimer.Start();\n\n\tUserSettings.Lock();\n\n\tusing (var tokenSource = new CancellationTokenSource())\n\t{\n\t\tCancellationToken = tokenSource.Token;\n\t\tTask.Run(() => PrepareCaptureLoop(GetCaptureInterval()), tokenSource.Token);\n\t}\n}", "CodeBleu_score": 48.25358265177677}, {"code": "internal virtual void StartCapture(){\n\tif (IsCapturing)\n\t\treturn;\n\n\tIsCapturing = true;\n\n\tif (UserSettings.All.FixedFrameRate)\n\t\tStartFixedFrameRate();\n\telse\n\t\tStartVariableFrameRate();\n\n\tHasImpreciseCapture = false;\n\n\tif (UserSettings.All.ForceGarbageCollection)\n\t\tGarbageTimer.Start();\n\n\tUserSettings.All.Lock();\n\t_cancellationTokenSource = new CancellationTokenSource();\n\tTask.Run(() => CaptureLoop(GetCaptureInterval()), _cancellationTokenSource.Token);\n}", "CodeBleu_score": 57.31791204354436}, {"code": "internal virtual void StartCapture(){\n\tif (UserSettings.All.FixedFrameRate) {\n\t\tSetFixedFrameRate(UserSettings.All.FixedFrameRateValue);\n\t} else {\n\t\tSetVariableFrameRate(UserSettings.All.LatestFps);\n\t}\n\tHasImpreciseCapture = false;\n\n\tif (UserSettings.All.ForceGarbageCollection) {\n\t\tGarbageTimer.Start();\n\t}\n\n\tUserSettings.Lock();\n\tCancellationTokenSource = new CancellationTokenSource();\n\tTask.Run(() => PrepareCaptureLoop(GetCaptureInterval()), CancellationTokenSource.Token);\n}", "CodeBleu_score": 61.268735000822815}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\tsw.Restart();\nwhile (!token.IsCancellationRequested) {\nsw.Restart();\nFrame frame = new Frame(true);\nKeyList.Clear();\nCapture.Capture(frame);\nframeCount++;\nif (sw.ElapsedMilliseconds < interval)\nThread.Sleep(1);\nsw.Stop();\n}\n}", "CodeBleu_score": 37.565313159996386}, {"code": "private void CaptureWithCursor(int interval){\n\t\tStopwatch sw = new Stopwatch();\n\tsw.Start();\n\twhile (!token.IsCancellationRequested) {\n\t\tsw.Restart();\n\t\tvar frame = new Frame(true);\n\t\tKeyList.Clear();\n\t\tCapture(frame);\n\t\tframe.Count++;\n\t\twhile (sw.ElapsedMilliseconds < interval) {\n\t\t\tThread.Sleep(1);\n\t\t}\n\t\tsw.Stop();\n\t}\n}", "CodeBleu_score": 43.9111920426644}, {"code": "private void CaptureWithCursor(int interval){\n\t\tsw.Restart();\n\twhile (!token.IsCancellationRequested) {\n\t\tsw.Restart();\n\t\tvar frame = new FrameWithCursor(this);\n\t\tKeyList.Clear();\n\t\tCapture(frame);\n\t\tInterlocked.Increment(ref FrameCount);\n\t\tif (sw.ElapsedMilliseconds < interval) {\n\t\t\twhile (sw.ElapsedMilliseconds < interval) {\n\t\t\t\tThread.Sleep(1);\n\t\t\t}\n\t\t}\n\t\tsw.Stop();\n\t}\n}", "CodeBleu_score": 49.21457075314276}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\tvar child = (UIElement)InternalChildren[0];\n\tvar padding = Padding?? new Thickness(5);\n\tvar childWidth = arrangeSize.Width - padding.Left - padding.Right;\n\tvar childHeight = arrangeSize.Height - padding.Top - padding.Bottom;\n\tchild.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\treturn arrangeSize;\n}", "CodeBleu_score": 46.55321205689069}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\tvar child = Child;\n\tif (child == null) {\n\t\treturn arrangeSize;\n\t}\n\tvar padding = Padding?? DefaultPadding;\n\tvar childWidth = arrangeSize.Width - padding.Left - padding.Right;\n\tvar childHeight = arrangeSize.Height - padding.Top - padding.Bottom;\n\tchild.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\treturn arrangeSize;\n}", "CodeBleu_score": 51.85240467557786}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t} else {\n\t\tUIElement child = InternalChildren[0];\n\t\tThickness padding = Padding;\n\t\tif (padding == null) {\n\t\t\tpadding = new Thickness(5);\n\t\t}\n\t\tdouble width = Math.Max(0, arrangeSize.Width - padding.Left - padding.Right);\n\t\tdouble height = Math.Max(0, arrangeSize.Height - padding.Top - padding.Bottom);\n\t\tchild.Arrange(new Rect(padding.Left, padding.Top, width, height));\n\t\treturn arrangeSize;\n\t}\n}", "CodeBleu_score": 47.61852349124198}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t\tbase.OnLostFocus(e);\n\tif (!UpdateOnInput) {\n\t\tif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\n\t\t\tValue = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\telse {\n\t\tUpdateTextFormat();\n\t}\n\tIgnoreChanges = true;\n\tValue = decimal.Parse(Text, CultureInfo.InvariantCulture);\n\tUpdateTextFormat();\n\tIgnoreChanges = false;\n}", "CodeBleu_score": 35.79838298166355}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t\tbase.OnLostFocus(e);\n\tif (UpdateOnInput) {\n\t\tUpdateTextFormat();\n\t} else {\n\t\tif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\n\t\t\tValue = DefaultValue;\n\t\t\treturn;\n\t\t}\n\t\tIsIgnoringChanges = true;\n\t\tValue = Convert.ToDecimal(Text);\n\t\tUpdateTextFormat();\n\t\tIsIgnoringChanges = false;\n\t}\n}", "CodeBleu_score": 29.24012245615818}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t\tbase.OnLostFocus(e);\n\tif (!UpdateOnInput) {\n\t\tif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\n\t\t\tValue = DefaultValue;\n\t\t\treturn;\n\t\t}\n\t\tIgnoreChanges = true;\n\t\tValue = Convert.ToDecimal(Text);\n\t\tText = Value.ToString(Format);\n\t\tIgnoreChanges = false;\n\t} else {\n\t\tText = Value.ToString(Format);\n\t}\n}", "CodeBleu_score": 36.183483525761275}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n\t\te.Handled = true;\n\t\tMoveFocus();\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 58.07149755356774}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n\t\te.Handled = true;\n\t\tMoveFocus();\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 58.07149755356774}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.Key == Key.Return || e.Key == Key.Enter) {\n\t\te.Handled = true;\n\t\tMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 73.19732609778106}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t current = GetBoundedCoordinates(e);\n\n\tif (!IsCaptured || e.LeftButton!= MouseButtonState.Pressed)\n\t\treturn;\n\n\tif (IsInSelectionMode && (SelectedShapes.Count == 0 || Keyboard.IsKeyDown(Key.LeftCtrl))) {\n\t\tSelectionRectangle.Width = Math.Abs(current.X - _mostDistantPoint.X);\n\t\tSelectionRectangle.Height = Math.Abs(current.Y - _mostDistantPoint.Y);\n\n\t\tCanvas.SetLeft(SelectionRectangle, Math.Min(current.X, _mostDistantPoint.X));\n\t\tCanvas.SetTop(SelectionRectangle, Math.Min(current.Y, _mostDistantPoint.Y));\n\n\t\treturn;\n\t}\n\n\tif (IsInDrawingMode) {\n\t\tCalculateOrientation(_mostDistantPoint, current);\n\n\t\tRenderRegion = new Rect(_mostDistantPoint, current);\n\n\t\tRenderShape();\n\t}\n\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 39.17263438452691}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.7201224411392697}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t(e.LeftButton == MouseButtonState.Pressed && IsMouseCaptured) {\n\t\tif (CurrentShape == Shapes.Selection && (SelectedShapes.Count == 0 || Keyboard.IsKeyDown(Key.LeftCtrl))) {\n\t\t\tvar current = e.GetPosition(this);\n\t\t\tvar x = Math.Min(current.X, _initialPoint.X);\n\t\t\tvar y = Math.Min(current.Y, _initialPoint.Y);\n\t\t\tvar width = Math.Abs(current.X - _initialPoint.X);\n\t\t\tvar height = Math.Abs(current.Y - _initialPoint.Y);\n\t\t\tSelectionRectangle.Margin = new Thickness(x, y, 0, 0);\n\t\t\tSelectionRectangle.Width = width;\n\t\t\tSelectionRectangle.Height = height;\n\t\t} else {\n\t\t\tvar current = GetBoundedCoordinates(e);\n\t\t\tRenderRegion = new Rect(_initialPoint, current);\n\t\t\tCalculateOrientation(_initialPoint, current);\n\t\t\tRenderShape();\n\t\t}\n\t}\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 38.26917606021265}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t\tif (sender is not Thumb) return;\n\te.Handled = true;\n\n\t// Get the current position of the adorned element\n\tdouble left = Canvas.GetLeft(AdornedElement);\n\tdouble top = Canvas.GetTop(AdornedElement);\n\tdouble width = AdornedElement.Width;\n\tdouble height = AdornedElement.Height;\n\n\t// Calculate the new width and height based on the drag amount\n\twidth += e.HorizontalChange;\n\theight += e.VerticalChange;\n\n\t// Ensure the new width and height are not less than the minimum dimensions\n\twidth = Math.Max(width, 10);\n\theight = Math.Max(height, 10);\n\n\t// Adjust the width and height to not exceed the parent's dimensions\n\tif (width > AdornedElement.Parent.Width - left)\n\t\twidth = AdornedElement.Parent.Width - left;\n\tif (height > AdornedElement.Parent.Height - top)\n\t\theight = AdornedElement.Parent.Height - top;\n\n\t// Raise a manipulation event with the change in dimensions\n\tRaiseManipulatedEvent(0, 0, width - AdornedElement.Width, height - AdornedElement.Height);\n\n\t// Update the adorned element's size and call AfterManipulation() to finalize the resize\n\tAdornedElement.Width = width;\n\tAdornedElement.Height = height;\n\tAfterManipulation();\n}", "CodeBleu_score": 45.25184747168666}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t\tif (!(sender is Thumb))\n\t\treturn;\n\n\te.Handled = true;\n\n\tdouble width = Math.Max(AdornedElement.Width + e.HorizontalChange, 10);\n\tdouble height = Math.Max(AdornedElement.Height + e.VerticalChange, 10);\n\n\tif (AdornedElement.Parent is FrameworkElement parent) {\n\t\twidth = Math.Min(width, parent.ActualWidth - Canvas.GetLeft(AdornedElement));\n\t\theight = Math.Min(height, parent.ActualHeight - Canvas.GetTop(AdornedElement));\n\t}\n\n\tRaiseManipulatedEvent(0);\n\n\tAdornedElement.Width = width;\n\tAdornedElement.Height = height;\n\n\tAfterManipulation();\n}", "CodeBleu_score": 42.8420261307479}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t\tif (sender is not Thumb thumb) return;\n\te.Handled = true;\n\tvar width = Math.Max(AdornedElement.Width + e.HorizontalChange, 10);\n\tvar height = Math.Max(AdornedElement.Height + e.VerticalChange, 10);\n\tif (AdornedElement.Parent is FrameworkElement parent) {\n\t\twidth = Math.Min(width, parent.ActualWidth - Canvas.GetLeft(AdornedElement));\n\t\theight = Math.Min(height, parent.ActualHeight - Canvas.GetTop(AdornedElement));\n\t}\n\tRaiseManipulatedEvent(0);\n\tAdornedElement.Width = width;\n\tAdornedElement.Height = height;\n\tAfterManipulation();\n}", "CodeBleu_score": 46.42737059543932}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = Enumerable.Range(0, 1000).ToList();\n\tShortStringList = new List<string>() { \"One\", \"Two\", \"Three\" };\n\tSelectedInteger = IntegerList[100];\n\tSelectedText = null;\n\tLongStringList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongStringList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 57.95662296655155}, {"code": "public ComboBoxesViewModel(){\n\t\t// Create a list of integers ranging from 0 to 999.\n\tIntegerList = Enumerable.Range(0, 1000).ToList();\n\t// Create a short list of string items.\n\tStringList = new List<string>() { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\" };\n\t// Set the selected value from the integer list.\n\tSelectedInteger = 200;\n\t// Initialize the selected text to null.\n\tSelectedText = null;\n\t// Create a long list of random string values by generating random file names in a loop running 1000 times.\n\tLongStringList = Enumerable.Range(0, 1000).Select(i => Path.GetRandomFileName()).ToList();\n}", "CodeBleu_score": 43.71444321168381}, {"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = Enumerable.Range(0, 1000).ToList();\n\tSelectedValue = 500;\n\tShortStringList = new List<string>() { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\" };\n\tLongStringList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongStringList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 56.051699853701066}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t\tvar view = new SampleDialog();\n\tview.DataContext = new SampleDialogViewModel();\n\tawait DialogHost.Show(view, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n\tDebug.WriteLine(\"Dialog was closed, the CommandParameter used to close it was: \" + (view.DataContext as SampleDialogViewModel).DialogResult);\n}", "CodeBleu_score": 39.04265387361321}, {"code": "private async Task RunDialog() {\n\t\tvar view = new SampleDialog();\n\tview.DataContext = new SampleDialogViewModel();\n\tvar result = await DialogHost.Show(view, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n\tDebug.WriteLine(\"Dialog was closed, the CommandParameter used to close it was: \" + (result?? \"\"));\n}", "CodeBleu_score": 41.331876664750865}, {"code": "private async Task RunDialog() {\n\t\tSampleDialog view = new SampleDialog();\n\tview.DataContext = new SampleDialogViewModel();\n\tvar result = await DialogHost.Show(view, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n\tDebug.WriteLine($\"Dialog was closed, the CommandParameter used to close it was: {result}\");\n}", "CodeBleu_score": 37.3169419003903}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tmodificationAction?.Invoke(theme);\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 72.861664522851}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tmodificationAction?.Invoke(theme);\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 72.861664522851}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tmodificationAction?.Invoke(theme);\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 72.861664522851}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t\tobject? content = null;\n\n\tif (ContentType!= null) {\n\t\ttry {\n\t\t\tcontent = Activator.CreateInstance(ContentType);\n\t\t} catch (Exception ex) {\n\t\t\tDebug.WriteLine(ex.Message);\n\t\t}\n\t}\n\n\tif (content is FrameworkElement element) {\n\t\telement.DataContext = DataContext;\n\t}\n\n\treturn content;\n}", "CodeBleu_score": 43.93301367710463}, {"code": "private object? CreateContent(){\n\t\tif (Content is null) {\n\t\tif (DataContext is not null) {\n\t\t\tif (DataContext is FrameworkElement frameworkElement) {\n\t\t\t\tContent = (object)Activator.CreateInstance(ContentTemplate.DataType)!;\n\t\t\t\tframeworkElement.DataContext = DataContext;\n\t\t\t} else {\n\t\t\t\tContent = (object)Activator.CreateInstance(ContentTemplate.DataType)!;\n\t\t\t}\n\t\t} else {\n\t\t\tContent = (object)Activator.CreateInstance(ContentTemplate.DataType)!;\n\t\t}\n\t}\n\treturn Content;\n}", "CodeBleu_score": 30.095334341008094}, {"code": "private object? CreateContent(){\n\t\tobject? content = null;\n\tif (ContentType!= null) {\n\t\tcontent = Activator.CreateInstance(ContentType);\n\t\tif (content is FrameworkElement fe && DataContext!= null) {\n\t\t\tfe.DataContext = DataContext;\n\t\t}\n\t}\n\treturn content;\n}", "CodeBleu_score": 41.60345024837167}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\n\tIsSample4DialogOpen = true;\n\tTask.Delay(TimeSpan.FromSeconds(3))\n\t\t.ContinueWith(\n\t\t\tt => IsSample4DialogOpen = false,\n\t\t\tTaskScheduler.FromCurrentSynchronizationContext()\n\t\t);\n}", "CodeBleu_score": 51.28839805825922}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\n\tTask.Delay(TimeSpan.FromSeconds(3))\n\t\t.ContinueWith(t => IsSample4DialogOpen = false, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 53.81506815803549}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\n\tTask.Delay(TimeSpan.FromSeconds(3))\n\t\t.ContinueWith(t => IsSample4DialogOpen = false, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 53.81506815803549}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Option == option && trigger.DeviceID == device.ID) {\n\t\t\ttrigger.Triggered?.Invoke();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.84663527735107}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Option == option && trigger.DeviceID == device.ID) {\n\t\t\ttrigger.Triggered?.Invoke(device, option);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.38437136503526}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (AudioDeviceTrigger trigger in _deviceTriggers) {\n\t\tif (trigger.Option == option) {\n\t\t\tif (trigger.DeviceId == device.ID) {\n\t\t\t\ttrigger.Triggered?.Invoke(device);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 59.87249641272716}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t\t// Clear the trigger manager\n\t_triggerManager.Clear();\n\t// Get the actions from settings\n\tvar actions = Settings.Get<List<Action>>(_settingsKey);\n\t// Register each trigger from the loaded actions with the trigger manager\n\t_actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 47.25348392564962}, {"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\t_actions = Settings.Get<List<Action>>(_key);\n\t_actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 67.06018026855295}, {"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\t_actions = Settings.Get<List<Action>>(_settingsKey);\n\t_actions.SelectMany(a => a.Triggers).ToList().ForEach(_triggerManager.Register);\n}", "CodeBleu_score": 52.23125159402312}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tActionProcessor.Actions.Where(a => a.Triggers.Contains(trigger)).ToList().ForEach(a => {\n\t\tif (a.Conditions.All(c => ConditionProcessor.IsMet(c))) {\n\t\t\tTriggerAction(a);\n\t\t}\n\t});\n}", "CodeBleu_score": 33.44651471528092}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tforeach (var action in Actions) {\n\t\tif (action.Triggers.Contains(trigger)) {\n\t\t\tif (action.Conditions.All(c => ConditionProcessor.IsMet(c))) {\n\t\t\t\tTriggerAction(action);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 64.05638997848429}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tif (trigger.Triggers.Count == 0) {\n\t\treturn;\n\t}\n\n\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n\tif (action == null) {\n\t\treturn;\n\t}\n\n\tif (action.Conditions.All(c => ConditionProcessor.IsMet(c))) {\n\t\tTriggerAction(action);\n\t}\n}", "CodeBleu_score": 78.01522850936684}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t mentioning_vars = self.eww_config.get_vars_mentioning(name);\nlet poll_vars = mentioning_vars.iter().filter_map(|v| match v {\nVar::Script(script_var) if script_var.is_poll_var() => Some(script_var),\n_ => None,\n});\nfor poll_var in poll_vars {\nlet scope_graph = self.scope_graph.borrow();\nif let Some(run_while_value) = scope_graph\n.evaluate_simplexpr_in_scope(scope_graph.root_index, &poll_var.run_while_expr)\n.map(|v| v.as_bool())\n{\nif run_while_value {\nself.script_var_handler\n.add(poll_var.clone(), self.eww_config.get_run_while_mentions_of(poll_var.name.clone()));\n} else {\nself.script_var_handler.stop_for_variable(poll_var.name.clone());\n}\n} else {\nerror_handling_ctx::print_error(format!(\n\"Error evaluating run-while expression for script variable '{}':\",\npoll_var.name\n));\n}\n}\n}", "CodeBleu_score": 37.30056843301798}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t mentioning_vars = self.eww_config.get_vars_mentioning(name);\nlet poll_vars = mentioning_vars.iter().filter_map(|v| match v {\nVar::Script(s) if s.is_poll_var() => Some(s.clone()),\n_ => None,\n});\nfor poll_var in poll_vars {\nif let Ok(run_while_expr) = self.eww_config.get_run_while_mentions_of(&poll_var.name) {\nif let Ok(scope_graph) = self.scope_graph.borrow() {\nif let Ok(true) = scope_graph\n.evaluate_simplexpr_in_scope(scope_graph.root_index, &run_while_expr)\n.map(|v| v.as_bool())\n{\nself.script_var_handler.add(&poll_var);\n} else {\nself.script_var_handler.stop_for_variable(&poll_var);\n}\n}\n}\n}\n}", "CodeBleu_score": 31.42352806894875}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tf.eww_config.get_script_var(name).ok()\n.map(|v| v.as_bool())\n.unwrap_or(false)\nself.script_var_handler.add(name.clone(), poll_var.clone());\n}", "CodeBleu_score": 9.627228671744156}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\twindow_close_timer_abort_senders.remove(instance_id);\nlet window = self.open_windows.remove(instance_id).with_context(|| format!(\"Failed to close window: {instance_id}\"))?;\nwindow.close();\nself.scope_graph.borrow_mut().remove_scope(instance_id);\nlet unused_var = self.scope_graph.borrow().currently_unused_globals();\nfor unused in unused_var {\nself.script_var_handler.stop_for_variable(unused.clone())?;\n}\nself.instance_id_to_args.remove(instance_id);\nOk(())\n}", "CodeBleu_score": 57.52572117654277}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t", "CodeBleu_score": 14.586088025188115}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\twindow_close_timer_abort_senders.remove(instance_id);\nlet window = self.open_windows.remove(instance_id).with_context(|| {\nformat!(\"Could not find window with instance ID {instance_id}\")\n})?;\nwindow.close();\nself.scope_graph.borrow_mut().remove_scope(instance_id);\nlet unused_var = self.scope_graph.borrow().currently_unused_globals();\nfor var in unused_var {\nself.script_var_handler.stop_for_variable(var.clone());\n}\nself.instance_id_to_args.remove(instance_id);\nOk(())\n}", "CodeBleu_score": 56.4396316927659}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tlog::info!(\"Reloading config\");\nself.script_var_handler.stop_all();\nlet old_handler = std::mem::replace(&mut self.script_var_handler, ScriptVarHandler::new(self.app_evt_send.clone()));\nold_handler.join_thread();\nlog::info!(\"New config: {:?}\", config);\nself.eww_config = config;\nself.scope_graph.borrow_mut().clear();\nself.scope_graph.borrow_mut().generate_initial_state(&self.eww_config);\nlet window_ids: Vec<WindowId> = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().collect();\nfor window_id in window_ids {\nlet window_arguments = self.instance_id_to_args.get(window_id).with_context(|| format!(\"Could not find window arguments for window {window_id}\"))?.clone();\nself.open_window(window_arguments)?;\n}\nOk(())\n}", "CodeBleu_score": 69.56759221019331}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t\tlog::info!(\"Reloading config\");\n\tself.script_var_handler.stop_all();\n\tlet old_handler = std::mem::replace(&mut self.script_var_handler, ScriptVarHandler::new());\n\tlog::info!(\"New config: {:#?}\", config);\n\tself.eww_config = config;\n\tself.scope_graph.borrow_mut().clear();\n\tself.scope_graph.borrow_mut().generate_initial_state(&self.eww_config);\n\tlet window_arguments = self\n\t\t.open_windows\n\t\t.keys()\n\t\t.cloned()\n\t\t.chain(self.failed_windows.iter().cloned())\n\t\t.dedup()\n\t\t.collect::<Vec<_>>();\n\tfor window_id in window_arguments {\n\t\tlet window_arguments = self.instance_id_to_args.get(window_id).with_context(|| {\n\t\t\tformat!(\"Failed to find arguments for window {window_id:?}\")\n\t\t})?;\n\t\tself.open_window(window_arguments)?;\n\t}\n\told_handler.join_thread();\n\tOk(())\n}", "CodeBleu_score": 68.6873354728535}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t\tlog::info!(\"Reloading config\");\n\tself.script_var_handler.stop_all();\n\tlet old_handler = std::mem::replace(&mut self.script_var_handler, ScriptVarHandler::new());\n\told_handler.join_thread();\n\tlog::info!(\"New config: {:#?}\", config);\n\tself.eww_config = config;\n\tself.scope_graph.borrow_mut().clear();\n\tself.scope_graph.borrow_mut().insert_initial_state(&self.eww_config);\n\tlet window_arguments: Vec<WindowArguments> = self\n\t\t.open_windows\n\t\t.keys()\n\t\t.cloned()\n\t\t.chain(self.failed_windows.iter().cloned())\n\t\t.dedup()\n\t\t.map(|id| {\n\t\t\tself.instance_id_to_args\n\t\t\t\t.get(id)\n\t\t\t\t.with_context(|| format!(\"Failed to get initial arguments for window {id}\"))\n\t\t\t\t.unwrap()\n\t\t\t\t.clone()\n\t\t})\n\t\t.collect();\n\tfor window_arguments in window_arguments {\n\t\tself.open_window(window_arguments)?;\n\t}\n\tOk(())\n}", "CodeBleu_score": 66.55273147154949}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t display = gdk::Display::default().expect(\"Could not get default display\");\nlet monitor = match identifier {\nSome(identifier) => get_monitor_from_display(&display, &identifier)\n.ok_or_else(|| format!(\"Could not find monitor matching {:?}\", identifier)),\nNone => display.primary_monitor(),\n};\nmonitor.map(Monitor::from).ok_or_else(|| format!(\"Could not get monitor\"))\n}", "CodeBleu_score": 18.396033864787455}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tt display = gdk::Display::default().expect(\"Could not get default display\");\n\tlet monitor = match identifier {\n\t\tSome(identifier) => get_monitor_from_display(&display, &identifier),\n\t\tNone => display.primary_monitor(),\n\t};\n\tif let Some(monitor) = monitor {\n\t\tOk(monitor)\n\t} else {\n\t\tlet mut body = String::new();\n\t\tbody.push_str(\"Could not find monitor\");\n\t\tif let Some(identifier) = identifier {\n\t\t\tbody.push_str(&format!(\"\n\\t[{}] {}\", identifier.type_name(), identifier.to_string()));\n\t\t}\n\t\tbody.push_str(\"\n\\tAvailable monitors:\");\n\t\tfor m in 0..display.n_monitors() {\n\t\t\tif let Some(model) = display.monitor(m).and_then(|x| x.model()) {\n\t\t\t\tbody.push_str(&format!(\"\n\\t[{}] {}\", m, model));\n\t\t\t}\n\t\t}\n\t\tErr(Error::new(body))\n\t}\n}", "CodeBleu_score": 35.56530551294676}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t display = gdk::Display::default().expect(\"Could not get default display\");\nlet monitor = match identifier {\nSome(identifier) => match get_monitor_from_display(&display, &identifier) {\nSome(monitor) => monitor,\nNone => {\nlet mut body = String::new();\nbody.push_str(\"\n\\t[\");\nfor m in 0..display.n_monitors() {\nlet model = display.monitor(m).and_then(|x| x.model()).unwrap_or_default();\nbody.push_str(&format!(\"{}] {}\", m, model));\n}\nbody.push_str(\"]\");\nreturn Err(format!(\"Monitor not found: {}\nAvailable monitors:{}\", identifier, body).into());\n}\n},\nNone => display.primary_monitor().expect(\"Could not get primary monitor\"),\n};\nOk(Monitor::from_gdk_monitor(monitor))\n}", "CodeBleu_score": 33.50472993389868}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\tlet x = screen_rect.x + geometry.offset.x.relative_to(screen_rect.width) + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\n\tlet y = screen_rect.y + geometry.offset.y.relative_to(screen_rect.height) + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\n\tlet width = geometry.size.x.relative_to(screen_rect.width);\n\tlet height = geometry.size.y.relative_to(screen_rect.height);\n\tgdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 59.87546703983174}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\tlet x = screen_rect.x + geometry.offset.relative_to(screen_rect.width) + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\n\tlet y = screen_rect.y + geometry.offset.relative_to(screen_rect.height) + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\n\tlet width = geometry.size.relative_to(screen_rect.width);\n\tlet height = geometry.size.relative_to(screen_rect.height);\n\tgdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 59.91608930830121}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tlet x = screen_rect.x + geometry.offset.x + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\nlet y = screen_rect.y + geometry.offset.y + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\nlet width = geometry.size.relative_to(screen_rect.width);\nlet height = geometry.size.relative_to(screen_rect.height);\ngdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 57.67606672452887}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t\tlet mut window = Window::new(\n\t\tWindowType::Toplevel,\n\t\t&WindowAttributes {\n\t\t\tx,\n\t\t\ty,\n\t\t\twidth: window_init.width,\n\t\t\theight: window_init.height,\n\t\t\twindow_type: WindowType::Toplevel,\n\t\t\tevent_mask: EventMask::all(),\n\t\t\t..WindowAttributes::default()\n\t\t},\n\t);\n\twindow.set_resizable(window_init.resizable);\n\twindow.set_keep_above(window_init.keep_above);\n\twindow.unstick();\n\tif window_init.sticky {\n\t\twindow.stick();\n\t}\n\twindow.set_keep_below(window_init.keep_below);\n\tSome(window)\n}", "CodeBleu_score": 51.03741865027366}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t\tlet window_type = window_init.window_type();\n\tlet mut window = Window::new(window_type, WindowAttributesType::empty());\n\n\t// Set the window's resizable property based on the backend options.\n\tif window_init.resizable() {\n\t\twindow.set_resizable(true);\n\t}\n\n\t// Set the window's stacking position based on the backend options.\n\tif window_init.stack_position() == StackPosition::Foreground {\n\t\twindow.set_keep_above(true);\n\t} else {\n\t\twindow.set_keep_below(true);\n\t}\n\n\t// Set the window's stickiness based on the backend options.\n\tif window_init.sticky() {\n\t\twindow.stick();\n\t} else {\n\t\twindow.unstick();\n\t}\n\n\t// Set the window's position and size.\n\twindow.set_position(WindowPosition::new(x, y));\n\twindow.set_size(window_init.width(), window_init.height());\n\n\tSome(window)\n}", "CodeBleu_score": 57.25083849520968}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(diagnostic_string) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"{}\", diagnostic_string);\n\t\t} else {\n\t\t\tlog::error!(\"{:?}\", err);\n\t\t}\n\t} else {\n\t\tlog::error!(\"{:?}\", err);\n\t}\n}", "CodeBleu_score": 34.93590873191309}, {"code": "pub fn print_error(err: anyhow::Error){\n\tmatch anyhow_err_to_diagnostic(&err) {\n\t\tSome(diagnostic) => {\n\t\t\tmatch stringify_diagnostic(diagnostic) {\n\t\t\t\tOk(diagnostic_str) => {\n\t\t\t\t\teprintln!(\"{}\", diagnostic_str);\n\t\t\t\t},\n\t\t\t\tErr(err) => {\n\t\t\t\t\tlog::error!(\"Failed to stringify diagnostic: {}\", err);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tNone => {\n\t\t\tlog::error!(\"Failed to convert error to diagnostic: {}\", err);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.23516978772764}, {"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(diagnostic_str) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"{}\", diagnostic_str);\n\t\t} else {\n\t\t\teprintln!(\"{}\", err);\n\t\t}\n\t} else {\n\t\teprintln!(\"{}\", err);\n\t}\n}", "CodeBleu_score": 29.668551161280597}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\tlet listener = UnixListener::bind(socket_path.as_ref())?;\nlog::info!(\"Listening on {}\", socket_path.as_ref().display());\nloop {\nlet (stream, _) = listener.accept().await?;\nlet evt_send = evt_send.clone();\ntokio::spawn(async move {\nif let Err(e) = handle_connection(evt_send, stream).await {\nlog::error!(\"Error handling connection: {}\", e);\n}\n});\n}\n}", "CodeBleu_score": 32.869387639146325}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\tlog::info!(\"Initializing IPC server at {:?}\", socket_path.as_ref());\nlet listener = tokio::net::UnixListener::bind(socket_path.as_ref())?;\nloop {\nlet (stream, _) = listener.accept().await?;\nlet evt_send = evt_send.clone();\ntokio::spawn(async move {\nif let Err(e) = handle_connection(evt_send, stream).await {\nlog::error!(\"Error handling connection: {}\", e);\n}\n});\n}\nOk(())\n}", "CodeBleu_score": 36.70894039534725}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\tlet listener = tokio::net::UnixListener::bind(socket_path.as_ref())?;\nlog::info!(\"Server listening on {}\", socket_path.as_ref().display());\nloop {\nlet (stream, _) = listener.accept().await?;\nlet evt_send = evt_send.clone();\ntokio::spawn(async move {\nif let Err(e) = handle_connection(evt_send, stream).await {\nlog::error!(\"Error handling connection: {}\", e);\n}\n});\n}\n}", "CodeBleu_score": 34.565128444874624}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\tlet (stream_read, stream_write) = stream.split();\n\tlet action = read_action_from_stream(&mut stream_read).await?;\n\tlog::info!(\"Received command: {:?}\", action);\n\tlet action = action.into_daemon_command();\n\tevt_send.send(action).await?;\n\tif let Some(response_recv) = action.response_recv {\n\t\tlet response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv()).await??;\n\t\tlet response = bincode::serialize(&response)?;\n\t\tstream_write.write_all(&response).await?;\n\t}\n\tstream_write.shutdown().await?;\n\tOk(())\n}", "CodeBleu_score": 44.85323166797041}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\tlet (stream_read, stream_write) = stream.split();\n\tlet action = read_action_from_stream(&mut stream_read).await?;\n\tlog::info!(\"Received action {:?}\", action);\n\tlet action = action.into_daemon_command();\n\tevt_send.send(action).await?;\n\tif let Some(response_recv) = action.response_recv() {\n\t\tlet response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv()).await??;\n\t\tlet response = bincode::serialize(&response)?;\n\t\tstream_write.write_all(&response).await?;\n\t}\n\tstream_write.shutdown().await?;\n\tOk(())\n}", "CodeBleu_score": 44.656399588727055}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\tlet (stream_read, stream_write) = stream.split();\n\tlet action = read_action_from_stream(&mut stream_read).await?;\n\tlog::info!(\"Received command: {:?}\", action);\n\tlet action = action.into_daemon_command();\n\tevt_send.send(action).context(\"Failed to send action to event loop\")?;\n\tif let Some(response_recv) = action.response_receiver() {\n\t\tlet response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv()).await?;\n\t\tlet response = response.context(\"Failed to receive response\")?;\n\t\tlet response = bincode::serialize(&response).context(\"Failed to serialize response\")?;\n\t\tstream_write.write_all(&response).await.context(\"Failed to write response\")?;\n\t}\n\tstream_write.shutdown().context(\"Failed to shutdown stream\")\n}", "CodeBleu_score": 44.63037261767973}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut message_byte_length = [0u8; 4];\nstream_read.read_exact(&mut message_byte_length).await.context\nVec::<u8>::with_capacity\nbincode::deserialize\nraw_message.len\nu32::from_be_bytes\nbincode::deserialize(&raw_message).context\nstream_read.read_exact\nstream_read.read_buf(&mut raw_message).await.context\n}", "CodeBleu_score": 45.81706569052425}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\tlet mut message_byte_length = [0u8; 4];\n\tstream_read.read_exact(&mut message_byte_length).await.context\n\tlet message_byte_length = u32::from_be_bytes(message_byte_length);\n\tlet mut raw_message = Vec::<u8>::with_capacity(message_byte_length as usize);\n\twhile raw_message.len() < message_byte_length as usize {\n\t\tstream_read.read_buf(&mut raw_message).await.context\n\t}\n\tbincode::deserialize(&raw_message).context\n}", "CodeBleu_score": 72.62441060020251}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t", "CodeBleu_score": 5.912362980437175}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet proxy = zbus::fdo::DBusProxy::new(con)?;\n\tlet mut stream = proxy.name_owner_changed(None, Some(service.clone()))?;\n\tloop {\n\t\tlet (name, _old_owner, new_owner) = stream.next().await?;\n\t\tif name == service && new_owner.is_none() {\n\t\t\tbreak;\n\t\t}\n\t}\n\tOk(())\n}", "CodeBleu_score": 37.58737254377588}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet proxy = zbus::fdo::DBusProxy::new(con).await?;\n\tlet mut stream = proxy.listen_for_name_owner_changed(service).await?;\n\twhile let Some(owner_changes) = stream.next().await {\n\t\tmatch owner_changes {\n\t\t\tOk(owner_changes) => {\n\t\t\t\tif owner_changes.new_owner.is_none() {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tErr(e) => return Err(e),\n\t\t}\n\t}\n\tOk(())\n}", "CodeBleu_score": 56.2616871241728}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\tlet proxy = zbus::fdo::DBusProxy::new(con)?;\nlet mut stream = proxy.name_owner_changed_stream()?;\nlet initial_owner = proxy.name_has_owner(service.as_str()).await?;\nif initial_owner.is_none() {\nreturn Ok(());\n}\nwhile let Some(owner_change) = stream.next().await {\nlet owner_change = owner_change?;\nif owner_change.name!= service {\ncontinue;\n}\nif owner_change.new_owner.is_none() {\nreturn Ok(());\n}\n}\nOk(())\n}", "CodeBleu_score": 62.028031818028964}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow!(\"Unsupported format: {}\", format)),\n\t}\n}", "CodeBleu_score": 64.59779887330875}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow!(\"Unsupported format: {}\", format))\n\t}\n}", "CodeBleu_score": 64.46496889314133}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tif format == \"svg\" {\n\t\tOk(DocExportFormat::Svg)\n\t}\n\telse if format == \"xopp\" {\n\t\tOk(DocExportFormat::Xopp)\n\t}\n\telse if format == \"pdf\" {\n\t\tOk(DocExportFormat::Pdf)\n\t}\n\telse {\n\t\tErr(anyhow!(\"Unsupported format: {}\", format))\n\t}\n}", "CodeBleu_score": 23.98496055126133}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n\tif path.extension()!= Some(expected_ext.as_ref()) {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension {} but found file with extension {}\",\n\t\t\texpected_ext,\n\t\t\tpath.extension()\n\t\t\t\t.unwrap_or_else(|| OsString::from(\"\"))\n\t\t\t\t.to_string_lossy()\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 32.46203890479013}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n\tlet actual_ext = path.extension().unwrap_or_default().to_string_lossy();\n\tif actual_ext!= expected_ext {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\".{}\\\", found file with extension \\\".{}\\\"\",\n\t\t\texpected_ext,\n\t\t\tactual_ext\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 31.739435707896963}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n\tif path.extension().map_or(true, |ext| ext!= expected_ext) {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\"{}\\\", found \\\"{}\\\"\",\n\t\t\texpected_ext,\n\t\t\tpath.display()\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 35.969864742845324}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\t// Set up the label with a specified configuration, name, ID, format, and interval.\n\tALabel::ALabel(config, \"cpu_usage\", id, \"{usage}%\");\n\t// Define a thread that emits a data point and then sleeps for the specified interval.\n\tthread_ = [this] {\n\t\t// While the thread is running\n\t\twhile (running_) {\n\t\t\t// Get the current CPU usage\n\t\t\tauto usage = getCpuUsage();\n\t\t\t// If the current CPU usage is valid\n\t\t\tif (usage) {\n\t\t\t\t// Emit the current CPU usage as a data point\n\t\t\t\tdp.emit(usage);\n\t\t\t}\n\t\t\t// Sleep for the specified interval\n\t\t\tstd::this_thread::sleep_for(interval_);\n\t\t}\n\t};\n}", "CodeBleu_score": 58.09731190020748}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tthread_ = [this] {\n\t\tdp.emit();\n\t\twhile (running_) {\n\t\t\tdp.emit();\n\t\t\tstd::this_thread::sleep_for(interval_);\n\t\t}\n\t};\n}", "CodeBleu_score": 43.64809646092881}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tthread_ = [this] {\n\t\tdouble total_time = 0.0;\n\t\tdouble idle_time = 0.0;\n\t\tdouble total_time_old = 0.0;\n\t\tdouble idle_time_old = 0.0;\n\t\tdouble total_time_delta = 0.0;\n\t\tdouble idle_time_delta = 0.0;\n\t\tdouble usage = 0.0;\n\t\twhile (true) {\n\t\t\ttotal_time = 0.0;\n\t\t\tidle_time = 0.0;\n\t\t\tfor (auto& cpu : cpu_times) {\n\t\t\t\ttotal_time += cpu.total();\n\t\t\t\tidle_time += cpu.idle;\n\t\t\t}\n\t\t\ttotal_time_delta = total_time - total_time_old;\n\t\t\tidle_time_delta = idle_time - idle_time_old;\n\t\t\tusage = (total_time_delta - idle_time_delta) / total_time_delta * 100.0;\n\t\t\ttotal_time_old = total_time;\n\t\t\tidle_time_old = idle_time;\n\t\t\tif (config_[\"average-cpu\"].asBool()) {\n\t\t\t\tusage /= cpu_times.size();\n\t\t\t}\n\t\t\tdp.emit(usage);\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(interval_));\n\t\t}\n\t};\n}", "CodeBleu_score": 51.700229218627605}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = static_cast<Tags *>(data);\n\tif (std::strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\ttags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1));\n\t} else if (std::strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n\t}\n}", "CodeBleu_score": 66.02116050454566}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = static_cast<Tags *>(data);\n\tif (std::strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\ttags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, std::min(version, 2u)));\n\t\tzdwl_ipc_manager_v2_add_listener(tags->status_manager_, &status_manager_listener, tags);\n\t} else if (std::strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n\t\twl_seat_add_listener(tags->seat_, &seat_listener, tags);\n\t}\n}", "CodeBleu_score": 63.66070231625392}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = static_cast<Tags *>(data);\n\tif (std::strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\ttags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, std::min(version, 2u)));\n\t} else if (std::strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n\t}\n}", "CodeBleu_score": 65.56971876141424}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::string type = ev.substr(0, ev.find_first_of('>'));\n\tstd::lock_guard<std::mutex> lock(callbacksMutex);\n\tfor (auto& callback : callbacks) {\n\t\tif (callback.first == type) {\n\t\t\tcallback.second->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.1566145943656}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::string request = ev.substr(0, ev.find_first_of('>'));\n\tstd::unique_lock<std::mutex> lock(callbacksMutex);\n\tfor (auto it = callbacks.begin(); it!= callbacks.end(); ++it) {\n\t\tif (it->first == request) {\n\t\t\tit->second->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 63.962631407634326}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::unique_lock<std::mutex> lock(cb_mutex);\n\tstd::string request = ev.substr(0, ev.find_first_of(\">\"));\n\tfor (auto& cb : callbacks) {\n\t\tif (cb.first == request) {\n\t\t\tcb.second->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.583850333396484}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock<std::mutex> lck(callbacks_mtx_);\n\tfor (auto it = callbacks_.begin(); it!= callbacks_.end();) {\n\t\tif (it->ev_handler == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t}\n\t\telse {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 65.44030583692441}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == NULL) {\n\t\treturn;\n\t}\n\tstd::unique_lock<std::mutex> lock(callback_mutex_);\n\tfor (auto it = callbacks_.begin(); it!= callbacks_.end(); ) {\n\t\tif ((*it).ev_handler == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 63.12751729915552}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == NULL) {\n\t\treturn;\n\t}\n\tstd::unique_lock<std::mutex> lock(callbacks_mutex_);\n\tfor (auto it = callbacks_.begin(); it!= callbacks_.end();) {\n\t\tif (it->ev_handler == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\tit++;\n\t\t}\n\t}\n}", "CodeBleu_score": 59.95408912856751}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\t// Check if the \"always-on\" key is a boolean and set the always_on_ member accordingly.\n\tif (config.isMember(\"always-on\") && config[\"always-on\"].isBool()) {\n\t\talways_on_ = config[\"always-on\"].asBool();\n\t}\n\n\t// Check if the \"default-submap\" key is a string and set the default_submap_ member with its value.\n\tif (config.isMember(\"default-submap\") && config[\"default-submap\"].isString()) {\n\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t}\n}", "CodeBleu_score": 40.310245646044}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\t// TODO\n}", "CodeBleu_score": 8.034746038306107}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isMember(\"always-on\")) {\n\t\tif (config[\"always-on\"].isBool()) {\n\t\t\talways_on_ = config[\"always-on\"].asBool();\n\t\t}\n\t}\n\tif (config.isMember(\"default-submap\")) {\n\t\tif (config[\"default-submap\"].isString()) {\n\t\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t\t}\n\t}\n}", "CodeBleu_score": 38.91852621499031}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(window)) {\n\t\treturn std::get<Repr>(window);\n\t} else if (std::holds_alternative<ClassAndTitle>(window)) {\n\t\tauto [window_class, window_title] = std::get<ClassAndTitle>(window);\n\t\treturn workspace_manager.getRewrite(window_class, window_title);\n\t} else {\n\t\tspdlog::error(\"WindowCreationPayload::repr: Unreachable code path.\");\n\t\tthrow std::runtime_error(\"WindowCreationPayload::repr: Unreachable code path.\");\n\t}\n}", "CodeBleu_score": 74.91512511876961}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(window)) {\n\t\treturn std::get<Repr>(window);\n\t}\n\tif (std::holds_alternative<ClassAndTitle>(window)) {\n\t\tauto [class_name, title] = std::get<ClassAndTitle>(window);\n\t\tauto rewritten_title = workspace_manager.getRewrite(class_name, title);\n\t\treturn fmt::format(\"class={}\ntitle={}\", class_name, rewritten_title);\n\t}\n\tspdlog::error(\"WindowCreationPayload::repr: window is neither Repr nor ClassAndTitle\");\n\tthrow std::runtime_error(\"WindowCreationPayload::repr: window is neither Repr nor ClassAndTitle\");\n}", "CodeBleu_score": 62.97233737778901}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(data)) {\n\t\treturn std::get<Repr>(data);\n\t} else if (std::holds_alternative<ClassAndTitle>(data)) {\n\t\tauto [window_class, window_title] = std::get<ClassAndTitle>(data);\n\t\treturn workspace_manager.getRewrite(window_class, window_title);\n\t} else {\n\t\tspdlog::error(\"WindowCreationPayload::repr: unknown variant\");\n\t\tthrow std::runtime_error(\"WindowCreationPayload::repr: unknown variant\");\n\t}\n}", "CodeBleu_score": 73.63749661284925}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\tconst auto &workspace : m_workspacesToCreate) {\n\t\tcreateWorkspace(workspace[\"workspace\"], workspace[\"clients\"]);\n\t}\n\tif (!m_workspacesToCreate.empty()) {\n\t\tupdateWindowCount();\n\t\tsortWorkspaces();\n\t}\n}", "CodeBleu_score": 55.60357811215556}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\tauto const &workspace : m_workspacesToCreate) {\n\t\tcreateWorkspace(workspace.first, workspace.second);\n\t}\n\tm_workspacesToCreate.clear();\n\tm_workspacesToCreate.empty();\n\tif (!m_workspacesToCreate.empty()) {\n\t\tupdateWindowCount();\n\t\tsortWorkspaces();\n\t}\n}", "CodeBleu_score": 57.25200114556155}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\terate through the list of workspaces to be created\n\tfor (auto const &workspace_data : m_workspacesToCreate) {\n\t\t// Create a workspace for each workspace data\n\t\tcreateWorkspace(workspace_data, m_clientsToCreate);\n\t}\n\n\t// If there are any workspaces created, update the window count and sort\n\tif (!m_workspacesToCreate.empty()) {\n\t\tupdateWindowCount();\n\t\tsortWorkspaces();\n\t}\n}", "CodeBleu_score": 60.85034908315502}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\n\tif (!mpris) {\n\t\treturn;\n\t}\n\n\tspdlog::debug(\"Player {} vanished\", player_name->name);\n\n\tif (mpris->player_ && player_name->name == mpris->player_->name) {\n\t\tmpris->player_ = nullptr;\n\t\tmpris->event_box_.set_visible(false);\n\t\tmpris->emitUpdate();\n\t}\n}", "CodeBleu_score": 68.27998819274302}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\n\tif (!mpris) {\n\t\tspdlog::error(\"Mpris::onPlayerNameVanished: invalid Mpris instance\");\n\t\treturn;\n\t}\n\n\tspdlog::debug(\"Mpris::onPlayerNameVanished: player name vanished: {}\",\n\t              player_name->name);\n\n\tif (player_name->name == mpris->player_name_) {\n\t\tmpris->player_ = nullptr;\n\t\tmpris->event_box_.set_visible(false);\n\t\tmpris->emitUpdate();\n\t}\n}", "CodeBleu_score": 65.53222674711942}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (!mpris) {\n\t\tspdlog::debug(\"Invalid Mpris instance.\");\n\t\treturn;\n\t}\n\n\tspdlog::debug(\"Player {} vanished.\", player_name->name);\n\n\tif (strcmp(player_name->name, mpris->player_name_) == 0) {\n\t\tmpris->player_ = nullptr;\n\t\tmpris->event_box_.set_visible(false);\n\t\tmpris->emitUpdate();\n\t}\n}", "CodeBleu_score": 67.02123652661966}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tMpris* mpris = static_cast<Mpris*>(data);\n\tif (mpris!= nullptr) {\n\t\tspdlog::debug(\"Player pause event\");\n\t\tmpris->dp.emit();\n\t}\n}", "CodeBleu_score": 66.91563790999983}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris) {\n\t\tspdlog::debug(\"Player pause event\");\n\t\tmpris->dp.emit();\n\t}\n}", "CodeBleu_score": 65.8331627161414}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris == nullptr) {\n\t\tspdlog::debug(\"Mpris::onPlayerPause: data is null\");\n\t\treturn;\n\t}\n\tspdlog::debug(\"Mpris::onPlayerPause\");\n\tmpris->dp.emit();\n}", "CodeBleu_score": 63.18652982645199}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tif (!res.success) {\n\t\tthrow std::runtime_error(\"Failed to get initial config: \" + res.error);\n\t}\n\tauto payload = res.payload.get();\n\tauto config = parseConfig(payload);\n\tonConfigUpdate(config);\n}", "CodeBleu_score": 43.85452854040868}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tauto& payload = res.payload;\n\tauto success = payload[\"success\"];\n\tif (!success.asBool()) {\n\t\tauto err = payload[\"error\"];\n\t\tthrow std::runtime_error(\"Failed to parse initial configuration: \" + err.asString());\n\t}\n\tauto config = parseConfig(payload);\n\tonConfigUpdate(config);\n}", "CodeBleu_score": 67.12585616566855}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tif (!res.payload.isMember(\"success\") ||!res.payload[\"success\"].asBool()) {\n\t\tthrow std::runtime_error(\"failed to get initial config: \" + res.payload[\"error\"].asString());\n\t}\n\tonConfigUpdate(parseConfig(res.payload));\n}", "CodeBleu_score": 25.20926397424362}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(this!= nullptr);\n\tif (!name.empty()) {\n\t\thooks_.doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 56.84494396737541}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(this!= nullptr);\n\tif (!name.empty()) {\n\t\thooks_.doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 56.84494396737541}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(this);\n\tif (!name.empty()) {\n\t\thooks_.doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 48.753964576815264}]}
