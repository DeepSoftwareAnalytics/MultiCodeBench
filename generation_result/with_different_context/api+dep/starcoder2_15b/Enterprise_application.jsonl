{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachments = request.env['ir.attachment']\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    attachment_ids = attachments.browse(int(i) for i in attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    zip_file = attachments._build_zip_from_attachments(attachment_ids)\n    return request.make_response(zip_file, headers=_get_zip_headers(zip_file, 'attachments.zip'))\n\n", "CodeBleu_score": 35.66225720042959}, {"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        raise werkzeug.exceptions.BadRequest()\n    attachment_ids = attachment_ids.split(',')\n\n    # retrieve attachments from database\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n\n    # check access rights\n    attachments.check_access_rights('read')\n\n    # check access rules\n    attachments.check_access_rule('read')\n\n    # build zip file from attachments' content\n    content = attachments._build_zip_from_attachments()\n\n    # prepare HTTP headers for zip file\n    filename = 'attachments.zip'\n    headers = attachments._get_zip_headers(content, filename)\n\n    # return zip file as HTTP response\n    return request.make_response(content, headers=headers)\n", "CodeBleu_score": 51.875030938322034}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self.env['ir.attachment'].browse(args.getlist('attachment_ids'))\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    content = attachments._build_zip_from_attachments()\n    return request.make_response(content, headers=_get_zip_headers(content, 'attachments.zip'))\n", "CodeBleu_score": 35.97452475572187}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = request.env['ir.attachment'].sudo().search([('res_model', '=', 'account.move'), ('res_id', 'in', values.get('invoice_ids'))]).ids[:100]\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 37.91057835580241}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = [invoice.id for invoice in values['invoices']]\n    return request.render(\"portal.portal_my_invoices\", values)\n", "CodeBleu_score": 35.87532456346165}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = request.env['account.move'].sudo().search([('id', 'in', values.get('invoice_ids'))]).ids[:100]\n    return request.render(\"portal_sale.portal_my_invoices\", values)\n", "CodeBleu_score": 36.336090106357}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice_sudo = self._document_check_access('account.invoice', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my/invoices')\n\n    if invoice_sudo.state!= 'posted':\n        return request.redirect('/my/invoices')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type, download)\n\n    if report_type == 'control_sheet':\n        return self._show_report(invoice_sudo, report_type, download)\n\n    if report_type == 'zip':\n        return self._get_zip_headers(invoice_sudo, download)\n\n    if report_type == 'list':\n        return list(invoice_sudo.attachment_ids)\n\n    if report_type == 'attachments':\n        return self._get_attachments(invoice_sudo, download)\n\n    if report_type == 'legal_documents':\n        return self._get_legal_documents(invoice_sudo, download)\n\n    if report_type == 'legal_documents_zip':\n        return self._get_zip_headers(invoice_sudo, download, legal_documents=True)\n\n    return request.render(\"account.portal_my_invoice_page\", self._invoice_get_page_view_values(invoice_sudo, access_token, **kw))", "CodeBleu_score": 40.004819967099166}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice_sudo = self._document_check_access('account.invoice', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my/home')\n\n    if not invoice_sudo.access_token or invoice_sudo.access_token!= access_token:\n        invoice_sudo.write({'access_token': access_token})\n\n    if download:\n        if invoice_sudo.state!= 'posted':\n            return request.redirect('/my/invoices/%s' % invoice_id)\n\n        attachments = self._document_get_attachments(invoice_sudo, 'account.invoice')\n        headers = self._get_zip_headers(invoice_sudo, attachments)\n        if len(attachments) == 1:\n            attachment = attachments[0]\n            headers.update(attachment.headers)\n            return request.make_response(attachment.datas, headers=headers)\n\n        return request.make_response(_build_zip_from_attachments(attachments), headers=headers)\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type)\n\n    return request.render(\"portal.portal_my_invoice_page\", self._invoice_get_page_view_values(invoice_sudo, access_token))\n\n", "CodeBleu_score": 45.741783988285256}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice_sudo = self._document_check_access('account.invoice', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my/home')\n\n    if invoice_sudo.state!= 'posted':\n        return request.redirect('/my/invoices/%s' % invoice_id)\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type, download)\n\n    elif report_type == 'legal_documents':\n        headers = self._get_zip_headers(invoice_sudo)\n        return request.make_response(list(attachments.sudo.read(['datas'])), headers=headers)\n\n    elif report_type == 'attachment':\n        attachment = request.env['ir.attachment'].sudo.browse(int(kw.get('attachment_id')))\n        return request.make_response(attachment.datas.decode('base64'),\n            headers=[('Content-Disposition', content_disposition(attachment.datas_fname))],\n            cookies={'fileToken': token_create()})\n\n    return request.render(\"account.portal_my_invoices_history\", self._invoice_get_page_view_values(invoice_sudo, access_token))\n\n", "CodeBleu_score": 47.372201143427105}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    prod_templates = self.env['product.template'].search([('company_id', '=', company.id)])\n    prod_templates.write({'sale_taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    prod_templates.write({'purchase_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return prod_templates\n", "CodeBleu_score": 15.676576376786885}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    prod_templates = self.env['product.template'].search([('company_id', '=', company.id)])\n    prod_templates.filtered(lambda p: p.company_id.account_sale_tax_id).write({'taxes_id': [(6, 0, [p.company_id.account_sale_tax_id.id])]})\n    prod_templates.filtered(lambda p: p.company_id.account_purchase_tax_id).write({'supplier_taxes_id': [(6, 0, [p.company_id.account_purchase_tax_id.id])]})\n    return prod_templates\n", "CodeBleu_score": 23.714827137824717}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    prod_templates = self.env['product.template'].search(self._get_demo_data_products_domain(company))\n    if company and company.account_sale_tax_id:\n        prod_templates.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company and company.account_purchase_tax_id:\n        prod_templates.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return prod_templates\n", "CodeBleu_score": 21.299650194635618}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Search for the demo account using the company's ID and the xml_id in the 'ir.model.data' model\n    account_id = self.env['ir.model.data'].xmlid_to_res_id('{}.{}'.format(self._xml_id_prefix, xml_id))\n    if account_id:\n        account = self.env['account.account'].browse(account_id)\n        if account.company_id == company:\n            return account\n    # Search for an account matching the account_type within the company's domain\n    account = self.env['account.account'].search([('user_type_id.type', '=', account_type), ('company_id', '=', company.id)], limit=1)\n    if account:\n        return account\n    # Return the first account within the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n", "CodeBleu_score": 48.2358497002133}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 41.628564989840896}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id)\n    if not account:\n        account = self.search([('company_id', '=', company.id), ('type', '=', account_type)])\n    if not account:\n        account = self.search([('company_id', '=', company.id), ('type', 'in', account_type)])\n    if not account:\n        account = self.search([('company_id', '=', company.id)])\n    return account\n", "CodeBleu_score": 36.834742356073455}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.env['account.account'].search([('type', '=', 'current_year_earnings')])._check_account_type_unique('current_year_earnings')", "CodeBleu_score": 8.208608974538505}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type_id = self.env.ref('account.data_account_type_current_year_earnings').id\n    accounts = self.search([('user_type_id', '=', account_type_id)])\n    grouped_accounts = accounts.filtered(lambda a: a.company_id).read_group([('user_type_id', '=', account_type_id)], ['company_id'], ['company_id'])\n    if any(g['company_id_count'] > 1 for g in grouped_accounts):\n        raise ValidationError(_('There can only be one account of type \"Current Year Earnings\" per company.'))", "CodeBleu_score": 37.26725266497777}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('user_type_id.type', '=', 'other'), ('user_type_id.name', '=', 'Current Year Earnings')])\n    grouped_accounts = accounts.read_group([('company_id', 'in', accounts.mapped('company_id').ids)], ['company_id'], ['company_id'])\n    for group in grouped_accounts:\n        if group['company_id_count'] > 1:\n            raise ValidationError(_('There is more than one account of type \"Current Year Earnings\" for the company \"%s\".') % self.env['res.company'].browse(group['company_id'][0]).name)", "CodeBleu_score": 23.054079119603077}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if context.get('search_default_accounts') and context.get('default_partner_id'):\n            return self._order_accounts_by_frequency_for_partner(context.get('default_partner_id'), limit)\n        domain = expression.AND([domain, [('code', operator, name)]])\n        return super(AccountAccount, self)._name_search(name, domain, operator=operator, limit=limit, order=order)\n    return super(AccountAccount, self)._name_search(name, domain, operator=operator, limit=limit, order=order)\n", "CodeBleu_score": 31.880997252701288}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and operator == 'ilike' and not domain and not order:\n        # Search by frequency for the given partner\n        domain = self._get_domain_for_name_search(name)\n        if domain:\n            return self._search(domain, limit=limit, access_rights_uid=SUPERUSER_ID)\n\n    return super(AccountAccount, self)._name_search(name, domain, operator, limit, order)\n\n", "CodeBleu_score": 21.003166904767987}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and operator == 'ilike' and not domain:\n        domain = []\n        if self._context.get('partner_id'):\n            domain = ['|', ('partner_id', '=', self._context['partner_id']), ('partner_id', '=', False)]\n        elif self._context.get('journal_id'):\n            domain = ['|', ('journal_id', '=', self._context['journal_id']), ('journal_id', '=', False)]\n        if self._context.get('company_id'):\n            domain += [('company_id', '=', self._context['company_id'])]\n        if self._context.get('search_default_internal_type') =='receivable':\n            domain += [('internal_type', '=','receivable')]\n        elif self._context.get('search_default_internal_type') == 'payable':\n            domain += [('internal_type', '=', 'payable')]\n        if self._context.get('search_default_reconcile'):\n            domain += [('reconcile', '=', True)]\n        if self._context.get('search_default_currency_id'):\n            domain += [('currency_id', '=', self._context['search_default_currency_id'])]\n        if self._context.get('search_default_journal_id'):\n            domain += [('journal_id', '=', self._context['search_default_journal_id'])]\n        if self._context.get('search_default_user_id'):\n            domain += [('user_id', '=', self._context['search_default_user_id'])]\n        if self._context.get('search_default_company_id'):\n            domain += [('company_id', '=', self._context['search_default_company_id'])]\n        if self._context.get('search_default_analytic_account_id'):\n            domain += [('analytic_account_id', '=', self._context['search_default_analytic_account_id'])]\n        if self._context.get('search_default_analytic_tag_id'):\n            domain += [('analytic_tag_id', '=', self._context['search_default_analytic_tag_id'])]\n        if self._context.get('search_default_partner_id'):\n            domain += [('partner_id', '=', self._context['search_default_partner_id'])]\n        if self._context.", "CodeBleu_score": 37.09411254022296}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    query = \"\"\"SELECT DISTINCT am.id FROM account_move am\n                JOIN account_move_line aml ON aml.move_id = am.id\n                JOIN account_account aa ON aml.account_id = aa.id\n                JOIN account_journal aj ON am.journal_id = aj.id\n                JOIN account_invoice ai ON am.id = ai.move_id\n                WHERE am.state = 'posted' AND ai.type = 'out_invoice' AND aj.type ='sale'\"\"\"\n    if self.analytic_account_id:\n        query += \"\"\" AND aml.analytic_account_id = %s\"\"\" % (self.analytic_account_id.id)\n    if self.id:\n        query += \"\"\" AND ai.sale_id = %s\"\"\" % (self.id)\n    self.env.cr.execute(query)\n    res = self.env.cr.dictfetchall()\n    move_ids = [line['id'] for line in res]\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    if len(move_ids) > 1:\n        action['domain'] = [('id', 'in', move_ids)]\n    elif len(move_ids) == 1:\n        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n        action['res_id'] = move_ids[0]\n    else:\n        action = {'type': 'ir.actions.act_window_close'}\n    return action\n\n", "CodeBleu_score": 38.36634648939912}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['account.move'].get_sale_types()\n    query = self.env['account.move.line'].with_context(prefetch_fields=False).sudo()._query_get(sale_types)\n    query = query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query.where(query", "CodeBleu_score": 14.194595192795948}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env.ref('sale.sale_order_type')._get_sale_types()\n    query = \"\"\"\n        SELECT DISTINCT am.id\n        FROM account_move am\n        JOIN account_move_line aml ON am.id = aml.move_id\n        WHERE am.type = 'out_invoice'\n        AND aml.sale_line_ids IS NOT NULL\n        AND aml.analytic_account_id IN %s\n        AND aml.sale_line_ids IN %s\n    \"\"\"\n    self.env.cr.execute(query, (tuple(self.analytic_account_ids.ids), tuple(self.order_line.ids)))\n    move_ids = [row[0] for row in self.env.cr.fetchall()]\n    action = {\n        'type': 'ir.actions.act_window',\n        'name': _('Customer Invoices'),\n       'res_model': 'account.move',\n        'view_mode': 'tree,form',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'default_type': 'out_invoice',\n            'default_partner_id': self.partner_id.id,\n            'default_partner_shipping_id': self.partner_shipping_id.id,\n            'default_analytic_account_id': self.analytic_account_id.id,\n        },\n    }\n    return action\n", "CodeBleu_score": 41.02958140369588}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_types = self.env['account.move'].get_purchase_types()\n    purchase_moves = self.env['account.move.line'].search([('move_id.purchase_id', '=', self.id), ('account_id.internal_type', 'in', purchase_types)])\n    move_ids = purchase_moves.mapped('move_id').ids\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'default_type': 'in_invoice', 'default_purchase_id': self.id}\n    return action\n", "CodeBleu_score": 30.26296406871692}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_types = self.env['account.move'].get_purchase_types()\n    purchase_move_ids = self.env['account.move.line'].search([('move_id.purchase_id', '=', self.id), ('account_internal_type', 'in', purchase_types)]).mapped('move_id').ids\n    purchase_move_ids = self.env['account.move'].search([('id', 'in', purchase_move_ids), ('state', '=', 'posted')]).ids\n    action = self.env.ref('account.action_vendor_bill_template').read()[0]\n    action['context'] = {'default_type': 'in_invoice', 'default_purchase_id': self.id}\n    action['domain'] = [('id', 'in', purchase_move_ids)]\n    return action\n", "CodeBleu_score": 37.281274960356455}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_types = self.env['account.move'].get_purchase_types()\n    domain = [\n        ('move_type', 'in', purchase_types),\n        ('purchase_id', '=', self.id),\n        ('company_id', '=', self.company_id.id),\n    ]\n    move_lines = self.env['account.move.line'].search(domain)\n    move_ids = move_lines.mapped('move_id').filtered(lambda m: m.state!= 'draft')\n    action = {\n        'domain': [('id', 'in', move_ids.ids)],\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_id': False,\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n    }\n    if len(move_ids) > 1:\n        action['view_mode'] = 'tree,form'\n        action['view_id'] = False\n    elif len(move_ids) == 1:\n        action['view_mode'] = 'form'\n        action['res_id'] = move_ids.id\n        action['view_id'] = False\n    else:\n        action = {'type': 'ir.actions.act_window_close'}\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'default_purchase_id': self.id,\n    }\n    return action\n", "CodeBleu_score": 36.08871743232562}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 90.03869238361304}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if len(self)!= 1:\n        raise UserError(_(\"This method should only be called on a single record\"))\n    if str2bool(self.env['ir.config_parameter'].sudo().get_param('account.disable_bank_account_creation', 'False')):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.id),\n    ])\n    if bank_account:\n        return bank_account\n    return self.env['res.partner.bank'].create({\n        'acc_number': self.acc_number,\n        'partner_id': self.id,\n        'company_id': self.company_id.id,\n    }).filtered(lambda ba: ba.company_id == self.company_id)\n\n", "CodeBleu_score": 47.08162243292543}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.ensure_one():\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param('account.disable_automatic_bank_account_creation', 'False')):\n            return self.env['res.partner.bank']\n        bank_account = self.env['res.partner.bank'].search([\n            ('acc_number', '=', self.acc_number),\n            ('partner_id', '=', self.partner_id.id)\n        ], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.acc_number,\n                'partner_id': self.partner_id.id,\n                'company_id': self.env.company.id,\n            })\n        return bank_account.filtered(company_id=self.env.company.id)\n    return self.env['res.partner.bank']\n", "CodeBleu_score": 59.798837074579005}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if str2bool(self.env['ir.config_parameter'].sudo().get_param('account.disable_automatic_bank_account_creation', 'False')):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.id),\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.id,\n            'bank_id': self.bank_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account.filtered(lambda bank: bank.company_id == self.company_id)\n\n", "CodeBleu_score": 58.32623752504556}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n    # from the journal entry linked to the statement line.\n    # All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    # If the statement line is a liquidity line, we use the statement line's rate to compute the transaction amount.\n    if self.journal_entry_id.type == 'liquidity':\n        # If the statement line's currency is the same as the company currency, we use the statement line's rate\n        # to compute the transaction amount.\n        if currency == company_currency:\n            transaction_amount = balance / self.exchange_rate\n        # If the statement line's currency is different from the company currency, we use the statement line's rate\n        # to compute the journal amount.\n        elif currency == journal_currency:\n            journal_amount = balance / self.exchange_rate\n        # If the statement line's currency is different from the journal currency, we use the statement line's rate\n        # to compute the company amount.\n        elif currency == company_currency:\n            company_amount = balance / self.exchange_rate\n        else:\n            # If none of the above conditions are met, we raise an exception.\n            raise UserError(_('The statement line currency is different from the company currency and the journal currency.'))\n    # If the statement line is a suspense line, we use the statement line's rate to compute the journal amount.\n    elif self.journal_entry_id.type =='suspense':\n        journal_amount = balance / self.exchange_rate\n    # If the statement line is a regular line, we use the statement line's rate to compute the company amount.\n    else:\n        company_amount = balance / self.exchange_rate\n    # If the statement line's currency is the same as the transaction currency, we adjust the transaction amount.\n    if currency == transaction_currency:\n        transaction_amount = balance\n    # If the statement line's currency is the same as the journal currency, we adjust the journal amount.\n    elif currency == journal_currency:\n        journal_amount = balance\n    # If the statement line's currency is the same as the company currency, we adjust the", "CodeBleu_score": 23.648564815148205}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency == transaction_currency:\n        transaction_amount = transaction_currency.round(transaction_amount)\n        balance = transaction_currency.round(balance)\n    elif currency == journal_currency:\n        transaction_amount = journal_currency.round(transaction_amount * self.exchange_rate)\n        balance = journal_currency.round(balance * self.exchange_rate)\n    else:\n        transaction_amount = company_currency.round(transaction_amount * self.exchange_rate)\n        balance = company_currency.round(balance * self.exchange_rate)\n    return {\n        'transaction_amount': transaction_amount,\n        'balance': balance,\n        'amount_currency': amount_currency,\n    }\n\n", "CodeBleu_score": 23.973101277498294}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if transaction_currency!= currency:\n        # In case of foreign currency, we need to recompute the transaction amount using the rate of the statement line.\n        transaction_amount = currency.round(transaction_amount * self.rate)\n    if currency!= company_currency:\n        balance = currency.round(balance * self.rate)\n        amount_currency = currency.round(amount_currency * self.rate)\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n", "CodeBleu_score": 15.556523445686643}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {'payment_method_id': method.id})\n                ]\n\n", "CodeBleu_score": 36.03624687546912}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            default_outbound_payment_methods = journal._default_outbound_payment_methods()\n            journal.outbound_payment_method_line_ids = [\n                (0, 0, {'payment_method_id': method.id})\n                for method in default_outbound_payment_methods\n            ]\n\n", "CodeBleu_score": 41.700177790502565}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.create({'journal_id': journal.id, 'payment_method_id': method.id})\n", "CodeBleu_score": 32.536450671400644}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t   for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(self)\n        elif move.invoice_date:\n            accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            if move.date!= accounting_date:\n                move.date = accounting_date\n                self.env.recompute()\n\n", "CodeBleu_score": 38.04795746611944}, {"code": "def _compute_date(self)\n\t   for move in self:\n        if move.invoice_date:\n            accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            if accounting_date!= move.date:\n                move.date = accounting_date\n                move.env.recompute()\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n\n", "CodeBleu_score": 37.84677092727092}, {"code": "def _compute_date(self)\n\t   for move in self:\n        invoice_date = move.invoice_date\n        if not invoice_date:\n            invoice_date = move.date\n        if not invoice_date:\n            invoice_date = fields.Date.context_today(move)\n        move.date = move._get_accounting_date(invoice_date, move._affect_tax_report())\n        if move.date!= invoice_date:\n            move.env.recompute()\n\n", "CodeBleu_score": 31.495338720225114}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 42.03490447916845}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.sale_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.sale_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.purchase_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.purchase_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 39.534833496073475}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.sale_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.sale_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.purchase_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.purchase_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 39.534833496073475}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    # Group taxes by country and company\n    taxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n\n    # For each group of taxes, find the appropriate tax group\n    for (country_id, company_id), taxes in taxes_by_country_company.items():\n        tax_group = self.env['account.tax.group'].search([\n            ('country_id', '=', country_id.id),\n            ('company_id', '=', company_id.id)\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', company_id.id)\n            ], limit=1)\n        for tax in taxes:\n            tax.tax_group_id = tax_group\n", "CodeBleu_score": 37.75173519465071}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    for tax in self:\n        tax_group = tax_groups.search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group:\n            tax_group = tax_groups.search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        tax.tax_group_id = tax_group.id", "CodeBleu_score": 20.069597738343553}, {"code": " def _compute_tax_group_id(self)\n\t\n    taxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n\n    for (country, company), taxes in taxes_by_country_company.items():\n        if country:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', country.id),\n                ('company_id', '=', company.id),\n            ], limit=1)\n            if tax_group:\n                taxes.write({'tax_group_id': tax_group.id})\n        else:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', company.id),\n            ], limit=1)\n            if tax_group:\n                taxes.write({'tax_group_id': tax_group.id})\n", "CodeBleu_score": 40.921516241279434}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.set_db(db)\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n    with open(module_file, 'rb') as f:\n        files = {'module': f}\n        res = self.post(url, data=data, files=files)\n    res.raise_for_status()\n    return res.text", "CodeBleu_score": 34.22560815378781}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.set_db(db)\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n\n    # Prepare the POST request\n    post_url = url + '/web/base_import_module/login_upload'\n    files = {'file': ('module_file', module_file, 'application/octet-stream')}\n\n    # Upload the module file to the server\n    response = self.post(post_url, data=data, files=files)\n\n    # Check the server's response\n    if response.status_code!= 200:\n        raise Exception(f'Error uploading module file: {response.text}')\n\n    # Return the server's response text\n    return response.text\n", "CodeBleu_score": 38.83658756056719}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.set_db(db)\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n    }\n    if force:\n        data['force'] = 'on'\n\n    # Upload the module file\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        response = self.post(url + '/base_import_module/login_upload', data=data, files=files)\n\n    # Check the response\n    if 'Module is already installed' in response.text:\n        raise Exception('Module is already installed')\n    if 'Module is outdated' in response.text:\n        raise Exception('Module is outdated')\n\n    return response.text\n", "CodeBleu_score": 44.5011477028921}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Retrieve configuration settings\n    db_name = 'db_name'\n    overwrite_existing = True\n\n    # Create a new database registry\n    registry = Registry(db_name)\n\n    # Initialize a TranslationImporter\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, registry)\n\n        # Load translation files\n        translation_importer.load_file(\n            'path/to/translation/file.po',\n           'module',\n            'lang',\n            overwrite_existing\n        )\n\n        # Save the translations\n        translation_importer.save()\n", "CodeBleu_score": 38.27334500798798}, {"code": "def import_translation()\n\t\n    db_name = config['db_name']\n    overwrite = config['overwrite']\n\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, registry)\n        translation_importer.load_file(config['file_path'])\n        translation_importer.save(overwrite=overwrite)\n", "CodeBleu_score": 37.0809555819843}, {"code": "def import_translation()\n\t\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n    db_name = config['database']['name']\n    overwrite = config['translation'].getboolean('overwrite')\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, overwrite=overwrite)\n        translation_importer.load_file()\n        translation_importer.save()\n", "CodeBleu_score": 51.30210970348485}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    child = Node(name, info)\n    # Set the depth of the child to be one more than the current node\n    child.depth = self.depth + 1\n    # Inherit certain attributes from the parent if they exist\n    if hasattr(self, \"id\"):\n        child.id = self.id\n    if hasattr(self, \"parent\"):\n        child.parent = self.parent\n    # Append the child to the children list if it's not already present\n    if child not in self.children:\n        self.children.append(child)\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n    # Return the new node\n    return child\n\n", "CodeBleu_score": 45.989378316557385}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if hasattr(self, \"children\"):\n        if new_node not in self.children:\n            self.children.append(new_node)\n    else:\n        self.children = [new_node]\n    if hasattr(self, \"children_by_name\"):\n        self.children_by_name[name] = new_node\n    else:\n        self.children_by_name = {name: new_node}\n    if hasattr(self, \"children_by_id\"):\n        self.children_by_id[new_node.id] = new_node\n    else:\n        self.children_by_id = {new_node.id: new_node}\n    if hasattr(self, \"parent\"):\n        if hasattr(self.parent, \"children_by_name\"):\n            self.parent.children_by_name[name] = new_node\n        if hasattr(self.parent, \"children_by_id\"):\n            self.parent.children_by_id[new_node.id] = new_node\n    self.children.sort(key=lambda child: child.name)\n    return new_node\n", "CodeBleu_score": 40.17168300354336}, {"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    child = Node(name, info)\n    # Set the depth of the child based on the parent's depth\n    child.depth = self.depth + 1\n    # Inherit the parent's attributes if they exist\n    if hasattr(self, \"parent\"):\n        child.parent = self.parent\n    if hasattr(self, \"children\"):\n        child.children = self.children\n    # Append the child to the children list if it's not already present\n    if child not in self.children:\n        self.children.append(child)\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n    # Return the new node\n    return child\n", "CodeBleu_score": 45.19681458269792}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"balances\": [0.0 for _ in dates]\n    }\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        date = entry.posting_date\n        balance = entry.debit - entry.credit\n        if root_type not in (\"Asset\", \"Expense\"):\n            balance = -balance\n        if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n            result[\"balances\"][dates.index(date)] += balance\n        else:\n            result[\"balances\"][dates.index(date)] = balance\n    return result\n\n", "CodeBleu_score": 34.470423596033974}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0 for _ in dates]\n    }\n\n    root_type = get_root_type(account)\n\n    for entry in gl_entries:\n        date = entry.posting_date\n        balance = entry.debit - entry.credit\n\n        if root_type not in (\"Asset\", \"Expense\"):\n            balance *= -1\n\n        if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n            balance = sum(result[\"balances\"]) + balance\n\n        result[\"balances\"][dates.index(date)] += balance\n\n    return result\n\n", "CodeBleu_score": 33.72064840611015}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {date: {'balance': 0} for date in dates}\n    root_type = frappe.get_cached_value('Account', account, 'root_type')\n    for entry in gl_entries:\n        if entry.posting_date not in result:\n            result[entry.posting_date] = {'balance': 0}\n        result[entry.posting_date]['balance'] += entry.debit - entry.credit\n    if root_type not in ['Asset', 'Expense']:\n        for date in result:\n            result[date]['balance'] = -result[date]['balance']\n    if root_type in ['Asset', 'Liability', 'Equity']:\n        balance = 0\n        for date in sorted(result.keys()):\n            balance += result[date]['balance']\n            result[date]['balance'] = balance\n    return result\n\n", "CodeBleu_score": 30.757837262775123}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= \"Receivable\" and self.account_type!= \"Payable\":\n        return\n\n    existing_account_type = frappe.db.get_value(\"Account\", self.name, \"account_type\")\n    if existing_account_type == \"Receivable\" or existing_account_type == \"Payable\":\n        return\n\n    if frappe.db.exists(\"General Ledger Entry\", {\"account\": self.name}):\n        frappe.msgprint(\n            _(\n                \"Changing the account type from Receivable/Payable to a non-receivable/payable type may cause issues in the Accounts report. Please ensure that there are no pending transactions before proceeding.\"\n            ),\n            title=_(\"Warning\"),\n            indicator=\"orange\",\n        )\n        self.add_comment(\n            \"Comment\",\n            _(\"Changing the account type from Receivable/Payable to a non-receivable/payable type may cause issues in the Accounts report. Please ensure that there are no pending transactions before proceeding.\"),\n        )\n\n", "CodeBleu_score": 30.078992198823013}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_new():\n        return\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if self.get_doc_before_save().account_type not in (\"Receivable\", \"Payable\"):\n            if self.get_gl_entries():\n                frappe.msgprint(\n                    _(\"Changing the account type from {0} to {1} may result in incorrect balances in the Accounts report. Please verify the account balance before proceeding.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                    alert=True,\n                )\n                self.add_comment(\n                    \"Comment\",\n                    _(\"Changed account type from {0} to {1}\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                )\n\n", "CodeBleu_score": 27.153957905511266}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_new():\n        return\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        return\n    if self.get_doc_before_save().account_type == \"Receivable\" or self.get_doc_before_save().account_type == \"Payable\":\n        gl_entries = frappe.get_all(\"General Ledger Entry\", filters={\"account\": self.name}, fields=[\"name\"])\n        if gl_entries:\n            frappe.throw(\n                _(\n                    \"Changing the account type from Receivable or Payable to another type is not allowed if there are existing General Ledger entries for this account. Please check the Accounts report for potential issues.\"\n                ),\n                title=_(\"Accounts\"),\n            )\n            self.add_comment(\"Comment\", _(\"Changing the account type from Receivable or Payable to another type is not allowed.\"))\n\n", "CodeBleu_score": 36.893403196882936}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.account_type in ('Bank', 'Cash'):\n        if not self.account_currency:\n            self.account_currency = frappe.db.get_value('Company', self.company, 'default_currency')\n            self.is_group = 0\n            self.is_group_or_ledger = 1\n            self.is_group_or_ledger_or_root = 1\n            self.is_root = 0\n            self.is_root_or_group_or_ledger = 1\n            self.is_root_or_group_or_ledger_or_account = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project_or_root = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project_or_root_or_group = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project_or_root_or_group_or_ledger = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project_or_root_or_group_or_ledger_or_account = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project_or_root_or_group_or_ledger_or_account_or_cost_center = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project_or_root_or_group_or_ledger_or_account_or_cost_center_or_project = 1\n            self.is_root_or_group_or_ledger_or_account_or_cost_center_or_project_or_root_or_group_or_ledger_or_account", "CodeBleu_score": 22.63078591140478}, {"code": "def validate_account_currency(self)\n\t\n    self.is_currency_specified = 1\n    if not self.currency:\n        self.currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if not self.bank_account_no:\n            frappe.throw(_(\"Bank Account No is mandatory for {0} accounts\").format(self.account_type))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if not self.bank_account_no:\n            frappe.throw(_(\"Bank Account No is mandatory for {0} accounts\").format(self.account_type))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is mandatory for Bank accounts\"))\n    if self.account_type == \"Bank\":\n        if not self.bank_name:\n            frappe.throw(_(\"Bank Name is", "CodeBleu_score": 29.322297748323965}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value('Company', self.company, 'default_currency')\n        self.is_currency_specified = 1\n    elif self.currency!= frappe.get_cached_value('Company', self.company, 'default_currency'):\n        self.is_currency_specified = 1\n        gl_entries = frappe.db.sql(\"\"\"select name from `tabGL Entry`\n            where account = %s and company = %s and ifnull(is_cancelled, 0) = 0\n            and ifnull(is_opening, 'No') = 'No' and ifnull(is_advance, 'No') = 'No'\n            and ifnull(is_amended, 'No') = 'No' and ifnull(is_opening, 'No') = 'No'\n            and ifnull(is_advance, 'No') = 'No' and ifnull(is_amended, 'No') = 'No'\n            and ifnull(is_opening, 'No') = 'No' and ifnull(is_advance, 'No') = 'No'\n            and ifnull(is_amended, 'No') = 'No' and ifnull(is_opening, 'No') = 'No'\n            and ifnull(is_advance, 'No') = 'No' and ifnull(is_amended, 'No') = 'No'\n            and ifnull(is_opening, 'No') = 'No' and ifnull(is_advance, 'No') = 'No'\n            and ifnull(is_amended, 'No') = 'No' and ifnull(is_opening, 'No') = 'No'\n            and ifnull(is_advance, 'No') = 'No' and ifnull(is_amended, 'No') = 'No'\n            and ifnull(is_opening, 'No') = 'No' and ifnull(is_advance, 'No') = 'No'\n            and ifnull(is_amended, 'No') = 'No' and ifnull(is_opening, 'No') = 'No'\n            and ifnull(is_advance, 'No') = 'No' and ifnull(is_amended, 'No') = 'No'\n            and ifnull(is_", "CodeBleu_score": 29.310432062469786}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"company\": key_values[\"company\"],\n                \"account\": key_values[\"account\"],\n                \"account_currency\": key_values[\"account_currency\"],\n                \"cost_center\": key_values[\"cost_center\"],\n                \"project\": key_values[\"project\"],\n                \"finance_book\": key_values[\"finance_book\"],\n                \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n            }\n            for dimension in accounting_dimensions:\n                merged_entries[key][dimension] = key_values[dimension]\n\n        if entry.get(\"debit\"):\n            merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n            merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        if entry.get(\"credit\"):\n            merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n            merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 41.98434018530604}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entry = merged_entries.setdefault(key, key_values)\n        merged_entry[\"debit\"] = flt(merged_entry.get(\"debit\", 0.0)) + flt(entry.get(\"debit\", 0.0))\n        merged_entry[\"credit\"] = flt(merged_entry.get(\"credit\", 0.0)) + flt(entry.get(\"credit\", 0.0))\n        merged_entry[\"debit_in_account_currency\"] = flt(merged_entry.get(\"debit_in_account_currency\", 0.0)) + flt(entry.get(\"debit_in_account_currency\", 0.0))\n        merged_entry[\"credit_in_account_currency\"] = flt(merged_entry.get(\"credit_in_account_currency\", 0.0)) + flt(entry.get(\"credit_in_account_currency\", 0.0))\n\n    return merged_entries\n\n", "CodeBleu_score": 40.263914220371625}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = key_values\n            merged_entries[key][\"debit\"] = 0.0\n            merged_entries[key][\"credit\"] = 0.0\n            merged_entries[key][\"debit_in_account_currency\"] = 0.0\n            merged_entries[key][\"credit_in_account_currency\"] = 0.0\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 46.446727601746794}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier and self.supplier_type == \"Supplier\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.status == \"Blocked\":\n            if supplier.hold_type == \"Payment\":\n                if supplier.release_date and supplier.release_date > getdate():\n                    frappe.throw(\n                        _(\"Supplier is on hold. Payment cannot be made until {0}\").format(\n                            supplier.release_date\n                        )\n                    )\n            elif supplier.hold_type == \"Invoice\":\n                if supplier.release_date and supplier.release_date > getdate():\n                    frappe.throw(\n                        _(\"Supplier is on hold. Invoice cannot be made until {0}\").format(\n                            supplier.release_date\n                        )\n                    )\n            else:\n                frappe.throw(\n                    _(\"Supplier is on hold. Payment cannot be made until {0}\").format(\n                        supplier.release_date\n                    )\n                )\n\n", "CodeBleu_score": 25.174366618741363}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_type == \"Supplier\" and self.party_type == \"Supplier\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.blocked:\n            if supplier.hold_type == \"Payment\" and self.is_payment_entry:\n                if supplier.release_date and supplier.release_date < self.posting_date:\n                    supplier.blocked = 0\n                    supplier.save()\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold.\").format(self.supplier))\n            elif supplier.hold_type == \"Invoice\" and not self.is_payment_entry:\n                if supplier.release_date and supplier.release_date < self.posting_date:\n                    supplier.blocked = 0\n                    supplier.save()\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold.\").format(self.supplier))\n\n", "CodeBleu_score": 30.319857021730677}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_type == \"Supplier\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.status == \"Blocked\":\n            if supplier.block_type == \"Payment\":\n                if supplier.release_date and supplier.release_date < getdate():\n                    supplier.status = \"Active\"\n                    supplier.save(ignore_permissions=True)\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold until {1}\").format(supplier.supplier_name, supplier.release_date))\n    elif self.supplier_type == \"Customer\":\n        customer = frappe.get_doc(\"Customer\", self.supplier)\n        if customer.status == \"Blocked\":\n            if customer.block_type == \"Payment\":\n                if customer.release_date and customer.release_date < getdate():\n                    customer.status = \"Active\"\n                    customer.save(ignore_permissions=True)\n                else:\n                    frappe.throw(_(\"Customer {0} is on hold until {1}\").format(customer.customer_name, customer.release_date))\n\n\n", "CodeBleu_score": 29.77152776051482}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    references_map = {}\n    for doctype in self.get_repost_doctypes():\n        repost_doc = frappe.get_doc(doctype, self.name)\n        for row in repost_doc.repost_vouchers:\n            if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                references_map.setdefault(row.parent_type, []).append(row.parent)\n        for row in repost_doc.vouchers:\n            if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                references_map.setdefault(row.parent_type, []).append(row.parent)\n    for parent_type, parents in references_map.items():\n        for parent in parents:\n            repost_doc = frappe.get_doc(parent_type, parent)\n            for row in repost_doc.repost_vouchers:\n                if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                    repost_doc.remove(\"repost_vouchers\", row.name)\n            for row in repost_doc.vouchers:\n                if row.voucher_type == self.doctype and row.name == self.name:\n                    repost_doc.remove(\"vouchers\", row.name)\n            repost_doc.flags.ignore_links = True\n            repost_doc.flags.ignore_validate = True\n            repost_doc.save()\n\n", "CodeBleu_score": 27.81343878947541}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    from frappe.utils import cint\n\n    # get repost doctypes\n    repost_doctypes = frappe.get_all(\"Repost Doctype\", filters={\"parent\": self.doctype, \"parentfield\": self.name}, fields=[\"repost_doctype\"])\n    repost_doctypes = [d.repost_doctype for d in repost_doctypes]\n    if not repost_doctypes:\n        return\n\n    # get repost rows\n    repost_rows = frappe.get_all(\"Repost Row\", filters={\"voucher_type\": self.doctype, \"voucher_no\": self.name}, fields=[\"*\"])\n\n    # organize rows by parent\n    references_map = {}\n    for row in repost_rows:\n        references_map.setdefault(row.parent_doctype, {}).setdefault(row.parent, []).append(row)\n\n    # remove references from parent documents\n    for parent_doctype, parent_dict in references_map.items():\n        for parent, rows in parent_dict.items():\n            repost_doc = frappe.get_doc(parent_doctype, parent)\n\n            # remove rows from repost_vouchers field\n            if repost_doc.doctype in (\"Purchase Invoice\", \"Sales Invoice\"):\n                repost_doc.repost_vouchers = [r for r in repost_doc.repost_vouchers if r.voucher_type!= self.doctype or r.voucher_no!= self.name]\n\n            # remove rows from vouchers field\n            elif repost_doc.doctype in (\"Journal Entry\", \"Payment Entry\", \"Purchase Receipt\", \"Sales Order\", \"Purchase Order\"):\n                repost_doc.vouchers = [r for r in repost_doc.vouchers if r.voucher_type!= self.doctype or r.voucher_no!= self.name]\n\n            repost_doc.flags.ignore_links = True\n            repost_doc.flags.ignore_validate = True\n            repost_doc.save()\n\n            # delete rows from Repost Row\n            for row in rows:\n                frappe.delete_doc(\"Repost Row\", row.name)\n", "CodeBleu_score": 30.89837560614108}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.is_repost:\n        return\n\n    repost_doctypes = frappe.db.sql_list(\"\"\"\n        SELECT name FROM `tabRepost Doctype` WHERE parent = %s\n    \"\"\", self.doctype)\n\n    if not repost_doctypes:\n        return\n\n    repost_vouchers = frappe.db.sql(\"\"\"\n        SELECT parent, parenttype, parentfield, name FROM `tabRepost Voucher`\n        WHERE voucher_type = %s AND voucher_no = %s AND parenttype IN %s\n    \"\"\", (self.doctype, self.name, tuple(repost_doctypes)))\n\n    if not repost_vouchers:\n        return\n\n    references_map = defaultdict(list)\n    for parent, parenttype, parentfield, name in repost_vouchers:\n        references_map[parenttype, parent].append({\n            \"parentfield\": parentfield,\n            \"name\": name\n        })\n\n    for parenttype, parent in references_map.keys():\n        repost_doc = frappe.get_doc(parenttype, parent)\n\n        if parenttype in DocType.get(\"Repost Doctype\").get_link_fields():\n            repost_doc.repost_vouchers = [\n                voucher for voucher in repost_doc.repost_vouchers\n                if voucher.voucher_type!= self.doctype or voucher.voucher_no!= self.name\n            ]\n        else:\n            repost_doc.vouchers = [\n                voucher for voucher in repost_doc.vouchers\n                if voucher.voucher_type!= self.doctype or voucher.voucher_no!= self.name\n            ]\n\n        repost_doc.flags.ignore_links = True\n        repost_doc.flags.ignore_validate = True\n        repost_doc.save()\n\n", "CodeBleu_score": 26.014113433382757}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    transactions = []\n    try:\n        self.auth()\n        query_params = {\n            \"options\": {\n                \"include_pending\": True,\n                \"count\": 500,\n                \"offset\": 0,\n            },\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n        while True:\n            response = self.client.Transactions.get(**query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"total_transactions\"]:\n                query_params[\"options\"][\"offset\"] += query_params[\"options\"][\"count\"]\n            else:\n                break\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\"Plaid: Item login required\")\n        elif e.code == \"ITEM_LOCKED\":\n            frappe.log_error(\"Plaid: Item locked\")\n        else:\n            frappe.log_error(\"Plaid: Item error\")\n            frappe.throw(_(str(e)), title=_(\"Item Error\"))\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            frappe.log_error(\"Plaid: Planned maintenance\")\n        else:\n            frappe.log_error(\"Plaid: API error\")\n            frappe.throw(_(str(e)), title=_(\"API Error\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Timeout\")\n        frappe.throw(_(\"Timeout\"), title=_(\"Timeout\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Unknown error\")\n        frappe.throw(_(str(e)), title=_(\"Unknown Error\"))\n    return transactions", "CodeBleu_score": 38.4269422638019}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        transactions = []\n        while True:\n            response = self.client.Transactions.get(\n                self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                account_ids=[account_id] if account_id else None,\n                options={\n                    \"count\": 500,\n                    \"offset\": len(transactions),\n                },\n            )\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\"Plaid: Item login required\")\n            frappe.throw(_(\"Item login required\"), title=_(\"Item Login Required\"))\n        elif e.code == \"ITEM_LOCKED\":\n            frappe.log_error(\"Plaid: Item locked\")\n            frappe.throw(_(\"Item locked\"), title=_(\"Item Locked\"))\n        elif e.code == \"ITEM_NOT_AVAILABLE\":\n            frappe.log_error(\"Plaid: Item not available\")\n            frappe.throw(_(\"Item not available\"), title=_(\"Item Not Available\"))\n        else:\n            frappe.log_error(f\"Plaid: Item error: {e.code}\")\n            frappe.throw(_(\"Item error\"), title=_(\"Item Error\"))\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            frappe.log_error(\"Plaid: Planned maintenance\")\n            frappe.throw(_(\"Planned maintenance\"), title=_(\"Planned Maintenance\"))\n        else:\n            frappe.log_error(f\"Plaid: API error: {e.code}\")\n            frappe.throw(_(\"API error\"), title=_(\"API Error\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Request timed out\")\n        frappe.throw(_(\"Request timed out\"), title=_(\"Request Timed Out\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Unknown error\")\n        frappe.throw(_(\"Unknown error\"), title=_(\"Unknown Error\"))", "CodeBleu_score": 39.13854193801748}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        transactions = []\n        start_date = start_date.strftime(\"%Y-%m-%d\")\n        end_date = end_date.strftime(\"%Y-%m-%d\")\n        query_options = {\n            \"count\": 500,\n            \"offset\": 0,\n            \"account_ids\": [account_id] if account_id else None,\n        }\n        while True:\n            response = self.client.Transactions.get(\n                self.access_token, start_date, end_date, **query_options\n            )\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            query_options[\"offset\"] += query_options[\"count\"]\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Item login required\"))\n        else:\n            frappe.log_error(title=_(\"Plaid Error\"), message=str(e))\n            raise e\n    except APIError as e:\n        frappe.log_error(title=_(\"Plaid Error\"), message=str(e))\n        raise e\n    except requests.Timeout:\n        frappe.throw(_(\"Request timed out\"))\n    except Exception as e:\n        frappe.log_error(title=_(\"Plaid Error\"), message=str(e))\n        raise e", "CodeBleu_score": 42.292791292343715}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response[\"institution\"][\"institution_id\"]\n        institution_name = response[\"institution\"][\"name\"]\n        access_token = PlaidConnector(token).get_access_token(token)\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution_id})\n        if not bank.exists():\n            bank = frappe.get_doc({\n                \"doctype\": \"Bank\",\n                \"institution_id\": institution_id,\n                \"institution_name\": institution_name,\n                \"access_token\": access_token\n            })\n            bank.insert()\n        else:\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(f\"Error adding institution: {e}\")\n\n", "CodeBleu_score": 43.67763402485164}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response[\"institution\"][\"institution_id\"]\n        institution_name = response[\"institution\"][\"name\"]\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution_id})\n        if not bank.exists():\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = institution_id\n            bank.institution_name = institution_name\n            bank.access_token = PlaidConnector().get_access_token(token)\n            bank.insert()\n        else:\n            bank.access_token = PlaidConnector().get_access_token(token)\n            bank.save()\n    except Exception as e:\n        frappe.log_error(f\"Error adding institution: {e}\")\n\n", "CodeBleu_score": 39.96728272130937}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"bank_name\": response[\"institution\"][\"name\"],\n            \"bank_id\": response[\"institution\"][\"institution_id\"],\n            \"access_token\": token\n        })\n        if bank.exists():\n            bank.access_token = token\n            bank.save()\n        else:\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(f\"Error adding institution: {e}\")\n\n", "CodeBleu_score": 36.39846788061279}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n        if not last_integration_date:\n            last_integration_date = add_months(today(), months=-1)\n\n        start_date = add_days(last_integration_date, days=1)\n        end_date = today()\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        for transaction in transactions:\n            new_bank_transaction(transaction)\n\n        if transactions:\n            last_integration_date = getdate(transactions[-1][\"date\"])\n            set_value(\"Bank\", bank, \"last_integration_date\", last_integration_date)\n\n        frappe.db.commit()\n\n        frappe.log_info(\n            _(\"Synced {0} transactions for Bank {1} and Bank Account {2}\").format(\n                len(transactions), bank, bank_account\n            )\n        )\n    except Exception as e:\n        frappe.log_error(\n            title=_(\"Bank Transaction Sync Error\"),\n            message=_(\"Error syncing transactions for Bank {0} and Bank Account {1}\").format(\n                bank, bank_account\n            ),\n        )\n        frappe.log_error(frappe.get_traceback())\n", "CodeBleu_score": 38.70769753914478}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        if not last_integration_date:\n            last_integration_date = getdate(datetime.now()) - timedelta(days=30)\n\n        transactions = get_transactions(\n            bank, bank_account, last_integration_date, getdate(datetime.now())\n        )\n\n        for transaction in transactions:\n            new_bank_transaction(transaction)\n\n        if transactions:\n            frappe.db.set_value(\n                \"Bank Account\",\n                bank_account,\n                \"last_integration_date\",\n                getdate(transactions[0][\"date\"]),\n            )\n            frappe.db.commit()\n\n        frappe.msgprint(\n            _(\"Synced {0} transactions for {1}\").format(len(transactions), bank_account)\n        )\n    except Exception:\n        frappe.log_error(\n            message=_(\"Error syncing transactions for {0}\").format(bank_account),\n            title=_(\"Sync Transactions Error\"),\n        )\n\n", "CodeBleu_score": 33.68998949299139}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        if not last_integration_date:\n            last_integration_date = getdate(add_months(today(), months=-1))\n\n        start_date = last_integration_date\n        end_date = add_months(last_integration_date, months=1)\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        for transaction in transactions:\n            new_bank_transaction(transaction)\n\n        if transactions:\n            oldest_transaction_date = min(\n                [getdate(t[\"date\"]) for t in transactions]\n            )\n            frappe.db.set_value(\n                \"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date\n            )\n\n        frappe.msgprint(\n            f\"{len(transactions)} new transactions added for {bank_account}.\"\n        )\n    except Exception:\n        frappe.log_error(\n            title=\"Bank Transaction Sync Error\",\n            message=frappe.get_traceback(),\n        )\n", "CodeBleu_score": 39.539502826353775}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total = self._get_total(query_uri)\n    entries = []\n    for start in range(1, total + 1, 1000):\n        query_uri = self._get_query_uri(entity, start)\n        response = self._get(query_uri)\n        response.raise_for_status()\n        entries.extend(response.json())\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)\n", "CodeBleu_score": 21.58030042478775}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"query?query=select * from {entity}\"\n    # Determine the total number of entries\n    total_entries = int(self._get(self.base_url + query_uri).json()[\"QueryResponse\"][entity + \"Count\"])\n    # Fetch the entries in batches of 1000\n    for batch_start in range(0, total_entries, 1000):\n        # Fetch the entries\n        entries = self._get(self.base_url + query_uri + f\"&startPosition={batch_start + 1}&maxResults=1000\").json()[\n            \"QueryResponse\"][entity]\n        # Preprocess and save the entries\n        try:\n            entries = self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n        except Exception as e:\n            self._log_error(e, entries)", "CodeBleu_score": 28.366706464002068}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._construct_query_uri(entity)\n    total = self._get_total_entries(query_uri)\n    for i in range(0, total, 1000):\n        entries = self._get_entries(query_uri, i, 1000)\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n    self._publish({\"event\": \"progress\", \"message\": _(\"Done\"), \"count\": total, \"total\": total})\n", "CodeBleu_score": 20.562308104979884}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = invoice[\"Id\"]\n        if invoice[\"LinkedTxn\"]:\n            for txn in invoice[\"LinkedTxn\"]:\n                if txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                    return\n        if invoice[\"DocNumber\"] and invoice[\"DocNumber\"].startswith(\"POS\"):\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"DocNumber\"] and invoice[\"DocNumber\"].startswith(\"RMA\"):\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        else:\n            self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 40.55759001039967}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = invoice[\"Id\"]\n        if invoice[\"LinkedTxn\"]:\n            for txn in invoice[\"LinkedTxn\"]:\n                if txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                    break\n            else:\n                self._save_sales_invoice(invoice, quickbooks_id)\n        else:\n            self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n\n", "CodeBleu_score": 45.023607227331716}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = invoice[\"Id\"]\n        if invoice[\"LinkedTxn\"]:\n            for txn in invoice[\"LinkedTxn\"]:\n                if txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                    return\n        if invoice[\"Type\"] == \"Invoice\":\n            self._save_sales_invoice(invoice, quickbooks_id)\n        elif invoice[\"Type\"] == \"CreditMemo\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"Type\"] == \"SalesOrder\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 39.271826650158786}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits based on the number of visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # Create a list to store the schedule dates\n    schedule_list = []\n\n    # Iterate over the number of visits\n    for i in range(no_of_visit):\n        # Calculate the schedule date for each visit\n        schedule_date = start_date + timedelta(days=interval * i)\n\n        # Validate the schedule date against holidays\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n\n        # Add the schedule date to the list\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 23.859238854696567}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = (end_date - start_date) / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = start_date + interval * i\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 26.157574563052226}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if no_of_visit > 0:\n        interval = (end_date - start_date) / no_of_visit\n        for i in range(no_of_visit):\n            schedule_date = start_date + interval * i\n            schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n            schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 29.545739505373025}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\termine the method to handle the request\n        $method = request()->get('handle', 'edit');\n\n// Construct a URL for bulk actions\n        $handle = $this->actions[$method]['handle']?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n// Render HTML content for a modal using the specified view and data\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n// Return a JSON response with success status, message, data, and the rendered HTML\n        return response()->json([\n           'success' => true,\n            'error' => false,\n           'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 90.15191872831187}, {"code": "<?\n   public function response($view, $data = []){\n\t The get() method is used to retrieve the value of a given key from the request. It takes the key as an argument and returns its value if it exists. If the key does not exist, it returns the default value specified as the second argument.\n */\n        $method = request()->get('handle', 'edit');\n\n/**\n * The findTranslation() method is used to find the translation of a given text. It takes the text as an argument and returns the translated text if it exists. If the text is not translated, it returns the original text.\n */\n        $handle = $this->actions[$method]['handle']?? 'update';\n\n/**\n * The route() method is used to generate a URL for a given named route. It takes the name of the route as an argument and returns the corresponding URL.\n */\n        $url = route('bulk-actions.action', $this->path);\n\n/**\n * The view() method is used to render a view with a given name and data. It takes the name of the view as an argument and returns the rendered HTML.\n */\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n/**\n * The response() method is used to generate a JSON response with a given data. It takes the data as an argument and returns a JSON response with the specified data.\n */\n        return response()->json([\n           'success' => true,\n            'error' => false,\n           'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 85.79507735334818}, {"code": "<?\n   public function response($view, $data = []){\n\trmine the method to handle the request\n        $method = request()->get('handle', 'edit');\n// Construct a URL for bulk actions\n        $handle = $this->actions[$method]['handle']?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n// Render HTML content for a modal using the specified view and data\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n// Return a JSON response with the success status, message, data, and HTML content\n        return response()->json([\n           'success' => true,\n            'error' => false,\n           'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 90.17731842120209}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$this->getSelectedRecords($request)->each(function ($contact) {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t});\n\t} catch (\\Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n}", "CodeBleu_score": 49.649818946727905}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request);\n\n\t\tforeach ($contacts as $contact) {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t}\n\t} catch (Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n}", "CodeBleu_score": 59.92796135918825}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request);\n\n\t\tforeach ($contacts as $contact) {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t}\n\t} catch (Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n}", "CodeBleu_score": 59.92796135918825}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\ttry {\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\t\tforeach ($transactions as $transaction) {\n\t\t\tdispatch(new DeleteTransactionJob($transaction));\n\t\t}\n\n\t\tflash('Transactions deleted successfully.')->success();\n\t} catch (\\Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 61.01686791194296}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 64.3462520151203}, {"code": "<?\npublic function deleteTransactions($request){\n\t\ttry {\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\t\tforeach ($transactions as $transaction) {\n\t\t\tdispatch(new DeleteTransactionJob($transaction));\n\t\t}\n\t} catch (Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n}", "CodeBleu_score": 55.91652338045709}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\tif (class_exists($request = $this->container->make(static::class))) {\n\t\tif ($request instanceof FormRequest) {\n\t\t\tforeach ($this->data as $key => $value) {\n\t\t\t\t$request->initialize([], [], [], [], [], $this->server, $value);\n\t\t\t\t$rules = $request->prepareRules($request->rules());\n\t\t\t\ttry {\n\t\t\t\t\t$validator->validate($rules);\n\t\t\t\t} catch (ValidationException $e) {\n\t\t\t\t\t$validator->addFailure($key, $e->validator->failed());\n\t\t\t\t\tthrow $e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 32.72969256650657}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($this->getFormRequestClass())) {\n\t\treturn;\n\t}\n\n\tif (!is_a($this->getFormRequestClass(), FormRequest::class, true)) {\n\t\treturn;\n\t}\n\n\tforeach ($this->getData() as $key => $value) {\n\t\t$request = $this->getFormRequestClass()::createFrom($this, $key);\n\t\t$request->initialize([], $this->prepareRules($request->rules()));\n\n\t\ttry {\n\t\t\t$validator->validate();\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->errors()->merge($e->validator->failed());\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 32.28733013155071}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($class = $this->container->make(static::class))) {\n\t\treturn;\n\t}\n\n\tif (!$class instanceof FormRequest) {\n\t\treturn;\n\t}\n\n\tforeach ($this->data as $key => $value) {\n\t\t$request = $this->container->make($class);\n\t\t$request->initialize($this, $this->query, $this->request, $this->attributes, $this->cookies, $this->files, $this->server, $this->content);\n\n\t\t$rules = $request->prepareRules([$key => $value]);\n\n\t\ttry {\n\t\t\tValidator::make($this->data, $rules)->validate();\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->addFailure($key, $e->validator->failed());\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 39.61163956394731}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->bootUpdateProcess($arguments);\n}", "CodeBleu_score": 8.699050185190773}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->model instanceof ShouldUpdate) {\n\t\t$this->model->bootUpdate(...$arguments);\n\t}\n}", "CodeBleu_score": 12.82753830290706}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->model instanceof ShouldUpdate) {\n\t\tif ($arguments[0] instanceof Model) {\n\t\t\t$this->model = $arguments[0];\n\t\t}\n\n\t\tif ($arguments[1] instanceof Request) {\n\t\t\t$this->request = $arguments[1];\n\t\t}\n\t}\n}", "CodeBleu_score": 50.009907878608026}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$query->usingSearchString()->sortable($sort);\n\tif ($request->expectsJson() &&!$request->isNotApi()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate($request->limit?? $this->limit);\n}", "CodeBleu_score": 34.49302482219888}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\n// If the request expects a JSON response and is not an API request, return all records\nif ($request->expectsJson() &&!$request->isNotApi()) {\nreturn $query->get();\n}\n\n// Otherwise, paginate the results\nreturn $query->usingSearchString()->sortable()->paginate(\n$request->get('limit', setting('pagination.limit', 15))\n);\n}", "CodeBleu_score": 27.16443470357254}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\n// If the request expects a JSON response and is not an API request, return all records.\nif ($this->request->expectsJson() &&!$this->request->isNotApi()) {\nreturn $query->usingSearchString()->sortable()->get();\n}\n\n// Paginate the results.\nreturn $query->usingSearchString()->sortable()->paginate(\n$this->request->get('limit')?? $this->setting->get('pagination.limit')\n);\n}", "CodeBleu_score": 26.304771591014674}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\tif ($model->status == 'paid') {\n\t\treturn ['open' => 0, 'overdue' => 0];\n\t}\n\tif ($model->status == 'partial') {\n\t\t$transactions = $model->transactions;\n\t\tforeach ($transactions as $transaction) {\n\t\t\tif ($transaction->type == 'payment') {\n\t\t\t\t$open -= $transaction->amount;\n\t\t\t} else {\n\t\t\t\t$open += $transaction->amount;\n\t\t\t}\n\t\t}\n\t}\n\tif ($model->due_date < Date::today()) {\n\t\t$overdue = $open;\n\t\t$open = 0;\n\t}\n\treturn ['open' => $open, 'overdue' => $overdue];\n}", "CodeBleu_score": 41.404346762614544}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\tif ($model->status == 'partial') {\n\t\tforeach ($model->transactions as $transaction) {\n\t\t\tif ($transaction->type == 'payment') {\n\t\t\t\t$open -= $transaction->amount;\n\t\t\t} else {\n\t\t\t\t$open += $transaction->amount;\n\t\t\t}\n\t\t}\n\t}\n\tif ($model->due_date < Date::today()) {\n\t\t$overdue = $open;\n\t\t$open = 0;\n\t}\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 44.23907256988152}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\tif ($model->status == 'partial') {\n\t\t$transactions = $model->transactions;\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$open += $transaction->getAmountConvertedToDefault();\n\t\t}\n\t}\n\tif ($model->due_date < Date::today()) {\n\t\t$overdue = $model->getAmountConvertedToDefault() - $open;\n\t} else {\n\t\t$open = $model->getAmountConvertedToDefault() - $open;\n\t}\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 53.69702666632274}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\treturn $this->paginator->make($results, $this->getCountForPagination(), $perPage, $page, [\n\t\t'path' => $this->paginator->resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 59.30415887326612}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$columns = $columns?: ['*'];\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\t$paginator = new LengthAwarePaginator($results, $this->toBase()->getCountForPagination(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\treturn $paginator->setCollection($this->model->newCollection($paginator->items()));\n}", "CodeBleu_score": 66.38903372434545}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\t$paginator = new Paginator($results, $this->getCountForPagination(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\treturn $paginator->setCollection($this->model->newCollection($results));\n}", "CodeBleu_score": 67.43161612646497}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\n$reconciliations = Reconciliation::where('id', $request->reconciliation_id)->get();\n\nforeach ($reconciliations as $reconciliation) {\n\\DB::transaction(function () use ($reconciliation) {\n$reconciliation->status ='reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = true;\n$transaction->save();\n}\n});\n}\n}", "CodeBleu_score": 50.75956365105382}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('account_id', $request->account_id)\n                    ->where('started_at', $request->started_at)\n                    ->where('ended_at', $request->ended_at)\n                    ->where('status', 'unreconciled')\n                    ->get();\n\nforeach ($reconciliations as $reconciliation) {\n    \\DB::transaction(function () use ($reconciliation) {\n        $reconciliation->status ='reconciled';\n        $reconciliation->save();\n\n        Transaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()\n                    ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                    ->update(['reconciled' => true]);\n    });\n}\n}", "CodeBleu_score": 52.67196509761137}, {"code": "<?\npublic function reconcile($request){\n\t\n// Retrieve the reconciliations\n$reconciliations = Reconciliation::where('status', 'pending')->get();\n\n// Process each reconciliation within a database transaction\n\\DB::transaction(function () use ($reconciliations) {\nforeach ($reconciliations as $reconciliation) {\n// Set the reconciliation status to reconciled\n$reconciliation->status ='reconciled';\n$reconciliation->save();\n\n// Mark all related transactions as reconciled\nTransaction::where('account_id', $reconciliation->account_id)\n->isNotReconciled()\n->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n->each(function ($item) {\n$item->reconciled = true;\n$item->save();\n});\n}\n});\n}", "CodeBleu_score": 49.215511635798684}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t\\DB::transaction(function () {\n\t\t$this->invitation = UserInvitation::where('user_id', $this->user->id)->get()->first();\n\t\tif ($this->invitation) {\n\t\t\t$this->invitation->delete();\n\t\t}\n\t\t$this->invitation = UserInvitation::create([\n\t\t\t'user_id' => $this->user->id,\n\t\t\t'token' => Str::uuid(),\n\t\t]);\n\t\ttry {\n\t\t\t$this->dispatch(new UserInvitationNotification($this->invitation));\n\t\t} catch (\\Exception $e) {\n\t\t\tthrow new \\Exception('Failed to send invitation notification.');\n\t\t}\n\t});\n\treturn $this->invitation;\n}", "CodeBleu_score": 41.967262959963584}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\\DB::transaction(function () {\n$this->user->invitations()->delete();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new UserInvitationNotification($invitation));\n} catch (\\Exception $e) {\nthrow new \\Exception('Unable to send invitation email');\n}\nreturn $invitation;\n});\n}", "CodeBleu_score": 27.63245275180951}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\\DB::transaction(function () {\n$this->invitation = UserInvitation::where('user_id', $this->user->id)->get()->first();\n$this->invitation->delete();\n$this->invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new SendUserInvitation($this->invitation));\n} catch (\\Exception $e) {\nthrow new \\Exception(\"Failed to send user invitation: {$e->getMessage()}\");\n}\n});\nreturn $this->invitation;\n}", "CodeBleu_score": 40.00513790253519}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciledTransaction) {\n\t\tthrow new Exception(\n\t\t\t\"This transaction has been reconciled and cannot be edited.\",\n\t\t\t403\n\t\t);\n\t}\n\n\tif ($this->isTransferTransaction) {\n\t\tthrow new Exception(\"Unauthorized\", 401);\n\t}\n}", "CodeBleu_score": 20.379713773851826}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled) {\n\t\tthrow new \\Exception('Transaction has been reconciled and cannot be modified.');\n\t}\n\tif ($this->isTransferTransaction) {\n\t\tthrow new \\Exception('Unauthorized');\n\t}\n}", "CodeBleu_score": 35.29714864513228}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isReconciled) {\n\t\tthrow new \\Exception(\"Transaction is reconciled.\");\n\t}\n\tif ($this->model->isTransferTransaction) {\n\t\tthrow new \\Exception(\"Unauthorized\");\n\t}\n}", "CodeBleu_score": 24.632997764481832}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\tif (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 9.3345742239732}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId!= 0) {\n\t\treturn tableName.equals(\"table1\") || tableName.equals(\"table2\");\n\t}\n\treturn false;\n}", "CodeBleu_score": 9.357891511093946}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\tif (tableName.equals(\"table1\") || tableName.equals(\"table2\") || tableName.equals(\"table3\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 11.454629313119066}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 89.60914056154388}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 89.60914056154388}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n// Store the data in a JSON array\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n// Account name\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 86.212511360418}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\nBaseResponseInfo res = new BaseResponseInfo();\n\ntry {\n    Map<String, Object> map = new HashMap<>();\n    List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n    Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n    map.put(\"rows\", list);\n    map.put(\"total\", count);\n    res.code = 200;\n    res.data = map;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\n\nreturn res;\n}", "CodeBleu_score": 96.97193333837907}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t    Map<String, Object> map = new HashMap<>();\n\t    List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n\t    Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t    map.put(\"rows\", list);\n\t    map.put(\"total\", count);\n\t    res.code = 200;\n\t    res.data = map;\n\t} catch(Exception e){\n\t    logger.error(e.getMessage(), e);\n\t    res.code = 500;\n\t    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 96.39624385155462}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tList<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n\t\tLong count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t\tmap.put(\"rows\", list);\n\t\tmap.put(\"total\", count);\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 94.7125868781868}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n    res.code = 200;\n    res.data = map;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.01639408025623}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.69534125623498}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t//        BaseResponseInfo res = new BaseResponseInfo();\n//        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n//        try {\n//            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n//            if(list.size()>0) {\n//                ahl = list.get(0);\n//            }\n//            res.code = 200;\n//            res.data = ahl;\n//        } catch(Exception e){\n//            logger.error(e.getMessage(), e);\n//            res.code = 500;\n//            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n//        }\n//        return res;\n//    }", "CodeBleu_score": 5.245897578635309}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t// Initialize a response object\n        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n// Attempt to fetch the details using the account head service\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.7722378331581}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\n// Initialize the response object and attempt to fetch the details using the account head service.\nBaseResponseInfo res = new BaseResponseInfo();\nAccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\ntry {\n    List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n    if(list.size()>0) {\n        ahl = list.get(0);\n    }\n    res.code = 200;\n    res.data = ahl;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.31183492482101}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\n    List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n    //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n    JSONObject outer = new JSONObject();\n    outer.put(\"id\", 0);\n    outer.put(\"key\", 0);\n    outer.put(\"value\", 0);\n    outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n    outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null!= dataListFun) {\n        //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n        List<Function> dataList = new ArrayList<>();\n        for (Function fun : dataListFun) {\n            String token = request.getHeader(\"X-Access-Token\");\n            Long tenantId = Tools.getTenantIdByToken(token);\n            if (tenantId!=0L) {\n                if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                    dataList.add(fun);\n                }\n            } else {\n                //\u8d85\u7ba1\n                dataList.add(fun);\n            }\n        }\n        dataArray = getFunctionList(dataList, type, keyId);\n        outer.put(\"children\", dataArray);\n    }\n    arr.add(outer);\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 95.73246367685468}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tSONArray arr = new JSONArray();\n\ttry {\n\t\tList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n\t\t//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n\t\tJSONObject outer = new JSONObject();\n\t\touter.put(\"id\", 0);\n\t\touter.put(\"key\", 0);\n\t\touter.put(\"value\", 0);\n\t\touter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n\t\touter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataListFun) {\n\t\t\t//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n\t\t\tList<Function> dataList = new ArrayList<>();\n\t\t\tfor (Function fun : dataListFun) {\n\t\t\t\tString token = request.getHeader(\"X-Access-Token\");\n\t\t\t\tLong tenantId = Tools.getTenantIdByToken(token);\n\t\t\t\tif (tenantId!=0L) {\n\t\t\t\t\tif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n\t\t\t\t\t\tdataList.add(fun);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//\u8d85\u7ba1\n\t\t\t\t\tdataList.add(fun);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataArray = getFunctionList(dataList, type, keyId);\n\t\t\touter.put(\"children\", dataArray);\n\t\t}\n\t\tarr.add(outer);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn arr;\n}", "CodeBleu_score": 89.6743892598245}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tres.code = 200;\n\t\tres.data = platformConfig;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 94.00192888523921}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tres.code = 200;\n\t\tres.data = platformConfig;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 94.00192888523921}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tres.code = 200;\n\t\tres.data = platformConfig;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 94.00192888523921}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setMessage(\"No System Config found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.37773911271319}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tresponse.setCode(200);\n\t\tresponse.setData(systemConfigList.get(0));\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setData(\"An error occurred while retrieving the system configuration.\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.86690684839513}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> list = systemConfigService.getSystemConfigList();\n\t\tif (list!= null && list.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(list.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(204);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setError(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.551692179794}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tString businessPath = request.getParameter(\"businessPath\");\n\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\tMultipartFile file = multipartRequest.getFile(\"file\");\n\tif (file == null || file.isEmpty()) {\n\t\tresponseInfo.setCode(ErrorCodeEnum.FILE_UPLOAD_FAILED.getCode());\n\t\tresponseInfo.setMsg(ErrorCodeEnum.FILE_UPLOAD_FAILED.getMsg());\n\t\treturn responseInfo;\n\t}\n\tString fileName = file.getOriginalFilename();\n\tString fileExt = fileName.substring(fileName.lastIndexOf(\".\"));\n\tString filePath = businessPath + \"/\" + UUID.randomUUID() + fileExt;\n\ttry {\n\t\tif (uploadType.equals(UploadTypeEnum.LOCAL.getCode())) {\n\t\t\tuploadLocal(file, filePath);\n\t\t} else if (uploadType.equals(UploadTypeEnum.ALI_OSS.getCode())) {\n\t\t\tuploadAliOss(file, filePath);\n\t\t} else {\n\t\t\tresponseInfo.setCode(ErrorCodeEnum.FILE_UPLOAD_FAILED.getCode());\n\t\t\tresponseInfo.setMsg(ErrorCodeEnum.FILE_UPLOAD_FAILED.getMsg());\n\t\t\treturn responseInfo;\n\t\t}\n\t\tresponseInfo.setCode(ErrorCodeEnum.SUCCESS.getCode());\n\t\tresponseInfo.setMsg(ErrorCodeEnum.SUCCESS.getMsg());\n\t\tresponseInfo.setData(filePath);\n\t} catch (Exception e) {\n\t\tlogger.error(\"upload file error\", e);\n\t\tresponseInfo.setCode(ErrorCodeEnum.FILE_UPLOAD_FAILED.getCode());\n\t\tresponseInfo.setMsg(ErrorCodeEnum.FILE_UPLOAD_FAILED.getMsg());\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 34.748640429702384}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n    String title = jsonObject.getString(\"title\");\n    String head = jsonObject.getString(\"head\");\n    String tip = jsonObject.getString(\"tip\");\n    JSONArray arr = jsonObject.getJSONArray(\"list\");\n    systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n}\n}", "CodeBleu_score": 96.87016267702839}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\ntry {\n\nString title = jsonObject.getString(\"title\");\nString head = jsonObject.getString(\"head\");\nString tip = jsonObject.getString(\"tip\");\nJSONArray arr = jsonObject.getJSONArray(\"list\");\nsystemConfigService.exportExcelByParam(title, head, tip, arr, response);\n\n} catch (Exception e) {\n\nlogger.error(e.getMessage(), e);\n\n}\n\n}", "CodeBleu_score": 94.48557874253089}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n     String title = jsonObject.getString(\"title\");\n     String head = jsonObject.getString(\"head\");\n     String tip = jsonObject.getString(\"tip\");\n     JSONArray arr = jsonObject.getJSONArray(\"list\");\n     systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n     logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 97.57780111726153}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setPassword(obj.getString(\"password\"));\n\t\taccount.setPhone(obj.getString(\"phone\"));\n\t\taccount.setEmail(obj.getString(\"email\"));\n\t\taccount.setAddress(obj.getString(\"address\"));\n\t\taccount.setRemark(obj.getString(\"remark\"));\n\t\taccount.setCreateTime(new Date());\n\t\taccount.setUpdateTime(new Date());\n\t\taccount.setCreateBy(obj.getString(\"createBy\"));\n\t\taccount.setUpdateBy(obj.getString(\"updateBy\"));\n\t\taccount.setVersion(1);\n\t\taccount.setIsDefault(0);\n\t\taccount.setEnabled(1);\n\t\tif (obj.containsKey(\"initialAmount\")) {\n\t\t\taccount.setInitialAmount(obj.getDouble(\"initialAmount\"));\n\t\t} else {\n\t\t\taccount.setInitialAmount(0);\n\t\t}\n\t\tList<Account> list = getAccountByParam(account.getName(), account.getSerialNo());\n\t\tif (list!= null && list.size() > 0) {\n\t\t\tJshException.writeFail(logger, \"Account already exists\");\n\t\t} else {\n\t\t\tresult = accountMapper.insertSelective(account);\n\t\t\tif (result > 0) {\n\t\t\t\tList<Account> list2 = getAccountByParam(null, null);\n\t\t\t\tif (list2!= null && list2.size() == 1) {\n\t\t\t\t\taccountMapper.setIsDefault(account.getId());\n\t\t\t\t}\n\t\t\t\tJshLog.insertLog(request, \"insert account\", account.getId(), obj.toJSONString(), result);\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 44.568993777459774}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t", "CodeBleu_score": 3.3888212609146513}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setRemark(obj.getString(\"remark\"));\n\t\taccount.setCurrency(obj.getString(\"currency\"));\n\t\taccount.setUserId(obj.getString(\"userId\"));\n\t\taccount.setUserName(obj.getString(\"userName\"));\n\t\taccount.setCreateTime(new Date());\n\t\taccount.setUpdateTime(new Date());\n\t\taccount.setCreateUser(obj.getString(\"userId\"));\n\t\taccount.setUpdateUser(obj.getString(\"userId\"));\n\t\taccount.setEnabled(true);\n\t\taccount.setIsDefault(false);\n\t\tif (obj.containsKey(\"initialAmount\")) {\n\t\t\taccount.setInitialAmount(obj.getDouble(\"initialAmount\"));\n\t\t} else {\n\t\t\taccount.setInitialAmount(0.0);\n\t\t}\n\t\tList<Account> list = accountMapperEx.getAccountByParam(account.getName(), account.getSerialNo());\n\t\tif (list!= null && list.size() > 0) {\n\t\t\tthrow new Exception(\"Account already exists.\");\n\t\t}\n\t\tif (accountMapperEx.getAccountCount() == 0) {\n\t\t\taccount.setIsDefault(true);\n\t\t}\n\t\tresult = accountMapper.insertSelective(account);\n\t\tJshLog.insertLog(request, \"insertAccount\", account.getName());\n\t} catch (Exception e) {\n\t\tJshException.insertFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.17019384655938}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = listWithBalanceCount(name, serialNo, 0);\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception in listWithBalanceCount: \" + e.getMessage());\n\t}\n\treturn count;\n}", "CodeBleu_score": 37.4805581517692}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceCountMapper(name, serialNo)\n\t} catch (Exception e) {\n\t\tlog.error(\"Error while getting count of accounts with name $name and serial number $serialNo\", e)\n\t\treturn null\n\t}\n}", "CodeBleu_score": 24.86432704506093}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceCountInternal(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception occurred while getting count of accounts with balance for name: ${name} and serialNo: ${serialNo}\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.260245988379072}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\tthrow new Exception(e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 57.95654306943943}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"deleteDepotItem failed\", e);\n\t\tthrow new Exception(\"deleteDepotItem failed\", e);\n\t}\n}", "CodeBleu_score": 28.544586540732375}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\tthrow new Exception(e);\n\t}\n}", "CodeBleu_score": 27.54067947010598}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tURIBuilder builder = new URIBuilder();\n\t\tbuilder.setScheme(protocol).setHost(host).setPort(port)\n\t\t\t\t.setPath(withProjectName(projectName) + nodeType + \"/\" + nodeKey);\n\t\tURI uri = builder.build();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity!= null) {\n\t\t\t\tString response = EntityUtils.toString(entity);\n\t\t\t\tif (response.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.30987212149225}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = createDefault();\n\t\tString url = getProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\tJsonNode jsonNode = readValue(responseString);\n\t\treturn jsonNode.has(\"key\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.555312836415844}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = createDefault();\n\ttry {\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tCloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\tif (response.contains(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, null);\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.61524137193971}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = createDefault();\n\t\tURIBuilder builder = new URIBuilder();\n\t\tbuilder.setScheme(protocol).setHost(host).setPort(port).setPath(withProjectName(projectName) + \"edges/add\");\n\t\tbuilder.setParameter(\"edgeType\", edgeType);\n\t\tbuilder.setParameter(\"fromType\", fromType);\n\t\tbuilder.setParameter(\"toType\", toType);\n\t\tbuilder.setParameter(\"from\", from);\n\t\tbuilder.setParameter(\"to\", to);\n\t\tURI uri = builder.build();\n\t\tHttpGet request = new HttpGet(uri);\n\t\thttpResponse = httpClient.execute(request);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tString response = EntityUtils.toString(entity);\n\t\tJSONObject jsonObject = new JSONObject(response);\n\t\tif (jsonObject.has(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.16374759413308}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edges/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject responseJson = new JSONObject(response);\n\t\t\tif (responseJson.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 52.27770586682895}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tURIBuilder builder = new URIBuilder();\n\t\tbuilder.setScheme(getProtocol()).setHost(getHost()).setPort(getPort()).setPath(withProjectName(projectName) + \"addEdge\")\n\t\t\t\t.setParameter(\"edgeType\", edgeType).setParameter(\"fromType\", fromType).setParameter(\"toType\", toType)\n\t\t\t\t.setParameter(\"from\", from).setParameter(\"to\", to);\n\t\tURI uri = builder.build();\n\t\tHttpGet request = new HttpGet(uri);\n\t\thttpResponse = httpClient.execute(request);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tif (responseString.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 48.599295499016314}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = null;\n\ttry {\n\t\tjson = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tif (json == null) {\n\t\treturn;\n\t}\n\tString topic = event.getTarget() == null? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 48.787352747747306}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString jsonString = null;\n\t\ttry {\n\t\t\tjsonString = objectMapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (jsonString!= null) {\n\t\t\tString topic = event.getTarget()!= null? event.getTarget() : \"test\";\n\t\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\t\t\tproducer.send(record);\n\t\t\tproducer.flush();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.59579844816082}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString json = null;\n\t\ttry {\n\t\t\tjson = mapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (json!= null) {\n\t\t\tString topic = (event.getTarget()!= null)? event.getTarget() : \"test\";\n\t\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\t\t\tproducer.send(record);\n\t\t\tproducer.flush();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.543033196554184}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client with access credentials.\nOSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n// Upload the file content as an object with the specified name.\nossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n// Shut down the OSS client.\nossClient.shutdown();\n// Return the URL of the uploaded object.\nreturn \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 38.99074866596724}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSSClient instance.\n\tOSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n\t// Upload an object to your bucket.\n\tossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSSClient.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 39.08269304301912}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 39.08269304301912}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 25.1401032801696}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 25.1401032801696}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 25.28669671102517}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (this.esClient == null) {\n\t\t\t\tthis.esClient = buildESClient();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 12.323619193399853}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> clusterHosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\tlowLevelRestClient = RestClient.builder(clusterHosts.toArray(new HttpHost[0])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 83.26983234951697}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.lowLevelRestClient!= null && this.highLevelRestClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (this.lowLevelRestClient!= null && this.highLevelRestClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\tthis.lowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\tthis.highLevelRestClient = new RestHighLevelClient(this.lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 62.93563461424468}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0];\n\t\tint port = hostParts.length > 1? Integer.parseInt(hostParts[1]) : clusterPort;\n\t\thosts.add(new HttpHost(hostName, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.99524806460451}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.66343903050779}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] parts = host.split(\":\");\n\t\t\thosts.add(new HttpHost(parts[0], Integer.parseInt(parts[1])));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.76184600844599}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\tTask task = null;\n\t\ttry {\n\t\t\ttask = queue.poll(30, TimeUnit.SECONDS);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (task!= null) {\n\t\t\tif (task.getType().equals(\"sendPlainTextMessage\")) {\n\t\t\t\tString toNumber = (String) task.getParams().get(\"toNumber\");\n\t\t\t\tString message = (String) task.getParams().get(\"message\");\n\t\t\t\ttry {\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"SMS to \" + toNumber+\" failed.\\t message is \" + message);\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.13882348185471}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\t// Retrieve a task from the queue.\n\t\t\tTask task = this.getQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (task!= null) {\n\t\t\t\tif (task.getTaskType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t// Extract the task data.\n\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\t// Validate the data.\n\t\t\t\t\tif (toNumber == null || message == null) {\n\t\t\t\t\t\tSystem.err.println(\"Invalid task data.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Send the message.\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.sendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tSystem.err.println(\"Failed to send message.\");\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\t// Thrown when the thread is interrupted.\n\t\t\tthrow e;\n\t\t} catch (Exception e) {\n\t\t\t// Thrown when an exception occurs.\n\t\t\tSystem.err.println(\"Exception occurred.\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 28.485696320767534}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\tTask task = poll();\n\t\t\tif (task == null) {\n\t\t\t\tThread.sleep(30000);\n\t\t\t} else {\n\t\t\t\tif (task.getTaskType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\t\tsendPlainTextMessage(plainTextMessageTask.getToNumber(), plainTextMessageTask.getMessage());\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 16.971598231831003}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\ttry (CloseableHttpClient httpclient = getHttpClient()) {\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tSystem.out.println(content);\n\t\treturn content;\n\t}\n}", "CodeBleu_score": 59.379623869093564}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpClient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tlog.debug(\"Response content: \" + content);\n\treturn content;\n}", "CodeBleu_score": 68.39902208347984}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 70.33194036432688}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t/\t\tSystem.out.println(\"Now read xml string: \"+messageXmlStr);\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tfactory.setNamespaceAware(true);\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\t\tNode rootNode = document.getChildNodes().item(0);\n\t\tObject[] result = decodeNodeToMap(rootNode, doTrim);\n\t\tif (result == null || result.length < 2){\n\t\t\treturn null;\n\t\t}\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put((String) result[0], result[1]);\n\t\treturn map;\n\t}", "CodeBleu_score": 63.803981632386765}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t/\t\tSystem.out.println(\"decodeToMap: \"+messageXmlStr);\n\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t\tdbf.setNamespaceAware(false);\n\t\tdbf.setIgnoringElementContentWhitespace(true);\n\t\tdbf.setIgnoringComments(true);\n\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\t\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\t\tObject[] root = decodeNodeToMap(doc.getDocumentElement(), doTrim);\n\t\tif (root == null || root.length < 2){\n\t\t\treturn null;\n\t\t}\n\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\tresult.put((String) root[0], root[1]);\n\t\treturn result;\n\t}", "CodeBleu_score": 64.06478757474154}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t/\t\tSystem.out.println(\"decodeToMap: \"+messageXmlStr);\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\t\tNode root = doc.getDocumentElement();\n\t\tObject[] rootValue = decodeNodeToMap(root, doTrim);\n\t\tif (rootValue == null || rootValue.length < 2){\n\t\t\treturn null;\n\t\t}\n\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\tresult.put((String) rootValue[0], rootValue[1]);\n\t\treturn result;\n\t}", "CodeBleu_score": 69.35353047470562}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing) {\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing. Enqueuing task to auto-process the order.\");\n\t\tenqueue(orderRecord.getC_Order_ID(), getTrxName());\n\t} else {\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing. Scheduling the creation of missing shipment schedules if they are not postponed.\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 25.41922464099318}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tfinal String trxName = getTrxName(orderRecord);\n\t\tfinal int orderId = orderRecord.getC_Order_ID();\n\t\taddLog(orderRecord, \"Order eligible for auto-processing. Enqueueing for auto-processing...\");\n\t\tscheduleIfNotPostponed(orderRecord, () -> withLogger(new AutoProcessOrderTask(orderId, trxName)));\n\t} else {\n\t\tfinal String trxName = getTrxName(orderRecord);\n\t\tfinal int orderId = orderRecord.getC_Order_ID();\n\t\taddLog(orderRecord, \"Order not eligible for auto-processing. Enqueueing for schedule creation...\");\n\t\tscheduleIfNotPostponed(orderRecord, () -> withLogger(new CreateSchedulesTask(orderId, trxName)));\n\t}\n}", "CodeBleu_score": 38.497005847326115}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing) {\n\t\taddLog(orderRecord, \"Auto-processing scheduled\");\n\t\tscheduleIfNotPostponed(orderRecord.get_ID(), orderRecord.getTrxName());\n\t} else {\n\t\taddLog(orderRecord, \"Auto-processing not scheduled\");\n\t\tscheduleIfNotPostponed(orderRecord.get_ID(), orderRecord.getTrxName());\n\t}\n}", "CodeBleu_score": 22.36983451534523}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->guard->getProvider()->retrieveByCredentials($request->only('email'));\n\n\tif (! $user ||! Hash::check($request->password, $user->getAuthPassword())) {\n\t\t$this->fireFailedEvent($request, $user);\n\n\t\treturn null;\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 26.69731286717872}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = $this->guard->getProvider()->retrieveByCredentials($request->only('email'));\n//\n//    if (! $user ||! Hash::check($request->password, $user->getAuthPassword())) {\n//        $this->fireFailedEvent($request, $user);\n//\n//        return $this->throwFailedAuthenticationException($request);\n//    }\n//\n//    return $user;\n}", "CodeBleu_score": 22.231645703542323}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t/ Retrieve the user by email.\n$user = $this->guard->getProvider()->retrieveByCredentials(\n    $this->credentials($request)\n);\n\n// If the user exists and the password is valid, return the user.\nif ($user && $this->guard->getProvider()->validateCredentials($user, $this->credentials($request))) {\n    return $user;\n}\n\n// Otherwise, fire the failed authentication event and throw an authentication exception.\n$this->fireFailedEvent($request, $user);\n$this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 47.11466197971013}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementLoginAttempts($request);\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 65.1912759393993}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\nthrow ValidationException::withMessages([\n$this->username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 65.18250787693756}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\nthrow ValidationException::withMessages([\n$this->username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 65.18250787693756}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\tserId = $request->session()->get('login.id');\n$user = User::find($userId);\n\nif ($user) {\n    $data = Webauthn::prepareAssertion($user);\n    $data['publicKey'] = $data['publicKey']->jsonSerialize();\n}\n\nreturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n            'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n           'remember' => $request->session()->get('login.remember'),\n        ])->toResponse($request);\n}", "CodeBleu_score": 68.55532189410798}, {"code": "<?\npublic function toResponse($request){\n\tuserId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$webauthn = Webauthn::prepareAssertion($user);\n\t\t$data = [\n\t\t\t'publicKey' => $webauthn->publicKey(),\n\t\t];\n\t}\n\n\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t'remember' => $request->session()->get('login.remember'),\n\t])->toResponse($request);\n}", "CodeBleu_score": 65.70358525080783}, {"code": "<?\npublic function toResponse($request){\n\tuserId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$data = Webauthn::prepareAssertion($user);\n\n\t\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t\t'remember' => $request->session()->get('login.remember'),\n\t\t])->toResponse($request);\n\t}\n\n\treturn redirect()->route('login');\n}", "CodeBleu_score": 61.07269088001309}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tif ($token = UserToken::firstWhere(['driver' => $driver, 'driver_id' => $socialite->getId()])) {\n\t\t$user = $token->user;\n\t\t$this->checkUserAssociation($request, $user, $driver);\n\t} else {\n\t\t$user = $this->createUser($socialite);\n\t\t$this->createUserToken($user, $driver, $socialite);\n\t}\n\n\tAuth::login($user, true);\n\n\treturn $user;\n}", "CodeBleu_score": 52.134967978061766}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::firstWhere(['driver' => $driver, 'driver_id' => $socialite->getId()]);\n\n\tif ($token) {\n\t\t$user = $token->user;\n\t\t$this->checkUserAssociation($request, $user, $driver);\n\t} else {\n\t\t$user = $this->getUserOrCreate($socialite);\n\t\t$token = $this->createUserToken($user, $driver, $socialite);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 54.5749570433004}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t/ Check if there is an existing user token for the given driver and socialite user ID\n    $token = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    if ($token) {\n// Retrieve the associated user\n        $user = $token->user;\n\n// Verify the user association\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n// Create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n\n        $token = $this->createUserToken($user, $driver, $socialite);\n    }\n\n// Return the authenticated user\n    return $user;\n}", "CodeBleu_score": 61.569749689352605}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tGet the user from the request\n\t$user = $request->user();\n\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t// Validate the assertion using the filtered credentials from the request\n\t$credentials = $this->filterCredentials($request);\n\tif (!$this->validateAssertion($request, $user, $credentials)) {\n\t\t// Trigger a failed authentication event\n\t\t$this->fireFailedEvent($request, $user);\n\n\t\t// Throw an authentication exception\n\t\t$this->throwFailedAuthenticationException($request);\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 64.11664364301873}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\ter = $this->getUser($request);\n\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentials($request);\n\n\tif (!$this->validateAssertion($user, $credentials)) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\t$this->throwFailedAuthenticationException($request);\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 49.43296039464744}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->option('email'))) {\n\t\t$this->error('Email is required.');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $this->option('email'))->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 38.170665032591444}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n\t\t$this->error('No email provided');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 37.555811844267986}, {"code": "<?\nprivate function user(): ?User{\n\tif (!$this->email) {\n\t\t$this->error(\"No email provided.\");\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $this->email)->firstOrFail();\n\t} catch (Exception $e) {\n\t\t$this->error(\"User not found.\");\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 30.74084836672174}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tf (config('scout.driver') && $this->option('flush')) {\n    foreach (config('scout.meilisearch.indexes') as $index) {\n        $tableName = (new $index)->getTable();\n        $this->artisan(\n            \"scout:flush {$tableName}\",\n           'scout:flush',\n            ['model' => $tableName]\n        );\n    }\n    $this->info('Indexes flushed!');\n}\n}", "CodeBleu_score": 63.68677629551329}, {"code": "<?\nprotected function scoutFlush(): void{\n\tf ($this->option('flush') && config('scout.driver') ==='meilisearch') {\nforeach (config('scout.meilisearch.indexes') as $index) {\n$table = (new $index)->getTable();\n$this->artisan('scout:flush', ['model' => $index]);\n}\n$this->info('Indexes flushed!');\n}\n}", "CodeBleu_score": 55.67861310790273}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') ==='meilisearch' && config('scout.meilisearch.flush')) {\n\t\tforeach (config('scout.meilisearch.indexes') as $index) {\n\t\t\t$this->artisan('scout:flush', [\n\t\t\t\t'--model' => (new $index)->getTable(),\n\t\t\t]);\n\t\t}\n\n\t\t$this->info('Meilisearch indexes flushed.');\n\t}\n}", "CodeBleu_score": 29.178110337730324}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\ttry {\n\t\t$vcard = $this->read($resource);\n\t\tif (!$vcard->has('uid')) {\n\t\t\t$vcard->add('uid', $this->getUid($resource));\n\t\t}\n\t} catch (Exception $e) {\n\t\t$vcard = $this->create($resource);\n\t}\n\n\t$this->exporters($resource->getType())\n\t\t->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n\treturn $vcard;\n}", "CodeBleu_score": 22.88150052431534}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\n}", "CodeBleu_score": 7.771244083473332}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t// Attempt to read an existing VCard from the resource.\n\t$vcard = $this->read($resource);\n\n\t// If reading fails or the VCard doesn't exist, create a new VCard with basic information.\n\tif ($vcard === null) {\n\t\t$vcard = new VCard();\n\t\t$vcard->add('version', '4.0');\n\t\t$vcard->add('fn', $resource->getName());\n\t\t$vcard->add('uid', Uuid::uuid4()->toString());\n\t}\n\n\t// Apply a series of exporters to add more details to the VCard from the resource.\n\t$this->exporters(get_class($resource))->each(function (ExportVCardResource $exporter) use ($vcard, $resource) {\n\t\t$exporter->export($vcard, $resource);\n\t});\n\n\t// Return the populated VCard.\n\treturn $vcard;\n}", "CodeBleu_score": 24.027867625853414}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getAddressBookObject($addressBookId, $cardUri);\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\nreturn true;\n} elseif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 76.43909130246595}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getCard($addressBookId, $cardUri);\nif (!$obj) {\nreturn false;\n}\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\n} elseif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\n} else {\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 72.94066038287241}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\n$obj = $this->findObject($addressBookId, $cardUri);\n\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\n} elseif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\n} else {\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 74.12620553915536}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn;\n}\n\n$leadActivity = $this->activityRepository->create([\n'lead_id' => $data['lead_id'],\n'user_id' => auth()->guard()->user()->id,\n'activity_type' => 'file',\n'activity_text' => $data['activity_text'],\n]);\n\n$file = request()->file('file')->store('files');\n\nreturn $this->create([\n'lead_activity_id' => $leadActivity->id,\n'file_name' => request()->file('file')->getClientOriginalName(),\n'file_path' => $file,\n]);\n}", "CodeBleu_score": 62.49720440063062}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->activityRepository->create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => auth()->guard()->user()->id,\n\t\t'type' => 'file',\n\t\t'description' => $data['description'],\n\t]);\n\n\t$file = request()->file('file')->store('files');\n\n\treturn $this->create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'file' => $file,\n\t]);\n}", "CodeBleu_score": 59.225708023466225}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->activityRepository->create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => auth()->guard()->user()->id,\n\t\t'type' => 'file',\n\t\t'description' => $data['description'],\n\t]);\n\n\t$file = request()->file('file')->store('files');\n\n\treturn $leadActivity->files()->create([\n\t\t'file' => $file,\n\t]);\n}", "CodeBleu_score": 57.78945158036484}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\troute = request()->route();\n\n\tif ($route && $route->getPrefix() == 'admin') {\n\t\t$route = 'admin.session.create';\n\t} else {\n\t\t$route ='session.create';\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\t$statusCode = $exception->getStatusCode();\n\t} else {\n\t\t$statusCode = 500;\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn redirect()->route($route)->with('error', 'Page not found');\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn redirect()->route($route)->with('error', 'Database error');\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn redirect()->route($route)->with('error', 'Parse error');\n\t}\n\n\tif (in_array($statusCode, [404, 500])) {\n\t\treturn response()->view('errors.'. $statusCode, [], $statusCode);\n\t}\n\n\treturn redirect()->route($route)->with('error', 'Something went wrong');\n}", "CodeBleu_score": 38.80858916840207}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t/ Check if the route is for admin or front\n    $route = request()->route();\n    $isFront = $route && Str::contains($route->getName(), 'front');\n\n// Redirect front routes to the admin session creation\n    if ($isFront) {\n        return redirect()->route('admin.session.create');\n    }\n\n// Handle HTTP exceptions\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        $this->statusCode = $statusCode >= 400 && $statusCode <= 500? $statusCode : 500;\n    }\n\n// Handle ModelNotFoundException\n    if ($exception instanceof ModelNotFoundException) {\n        $this->statusCode = 404;\n    }\n\n// Handle PDOException\n    if ($exception instanceof PDOException) {\n        $this->statusCode = 500;\n    }\n\n// Handle ParseError\n    if ($exception instanceof ParseError) {\n        $this->statusCode = 500;\n    }\n\n// Return appropriate responses for ModelNotFoundException, PDOException, and ParseError\n    if ($this->statusCode === 404 || $this->statusCode === 500) {\n        return $this->response('errors', $this->statusCode);\n    }\n\n// Return the default response\n    return $this->response('errors', 500);\n}", "CodeBleu_score": 51.65382039272141}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t", "CodeBleu_score": 5.526315789473684}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tf (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'message' => isset($this->jsonErrorMessages[$statusCode])\n\t\t\t\t? $this->jsonErrorMessages[$statusCode]\n\t\t\t\t: trans('admin::app.common.something-went-wrong')\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.79794742145134}, {"code": "<?\nprivate function response($path, $statusCode){\n\tf (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'message' => isset($this->jsonErrorMessages[$statusCode])\n\t\t\t\t? $this->jsonErrorMessages[$statusCode]\n\t\t\t\t: trans('admin::app.common.something-went-wrong')\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.79794742145134}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activity_ids = request('activity_ids');\n$count = 0;\nforeach ($activity_ids as $activity_id) {\n$activity = $this->activityRepository->getById($activity_id);\nif ($activity) {\n$activity->is_done = request('is_done');\nevent(new ActivityUpdated($activity));\n$activity->save();\nevent(new ActivityUpdated($activity));\n$count++;\n}\n}\nif ($count > 0) {\nreturn response()->json([\n'success' => true,\n'message' => 'Activity status updated successfully.'\n]);\n} else {\nreturn response()->json([\n'success' => false,\n'message' => 'No activities were updated.'\n]);\n}\n}", "CodeBleu_score": 37.454102501345496}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request()->input('activity_ids');\n$isDone = request()->input('is_done');\n\n$updatedCount = 0;\n\nforeach ($activityIds as $activityId) {\n$activity = Activity::findOrFail($activityId);\n\n// Dispatch before update event\nevent(new BeforeActivityUpdate($activity, $isDone));\n\n// Update activity's 'is_done' status\n$activity->is_done = $isDone;\n$activity->save();\n\n// Dispatch after update event\nevent(new AfterActivityUpdate($activity, $isDone));\n\n$updatedCount++;\n}\n\nif ($updatedCount > 0) {\nreturn response()->json(['success' => true,'message' => 'Activities updated successfully.']);\n} else {\nreturn response()->json(['success' => false,'message' => 'No activities were updated.']);\n}\n}", "CodeBleu_score": 37.26412750077979}, {"code": "<?\npublic function massUpdate(){\n\t$ids = request()->input('ids');\n$count = 0;\n\nforeach ($ids as $id) {\n$activity = $this->activityRepository->getById($id);\n\n// Dispatch before event\nevent(new BeforeActivityUpdate($activity));\n\n// Update activity\n$activity->is_done = request()->input('is_done');\n$activity->save();\n\n// Dispatch after event\nevent(new AfterActivityUpdate($activity));\n\n$count++;\n}\n\n// Return response\nif ($count > 0) {\nreturn response()->json(['success' => true,'message' => 'Activities updated successfully.']);\n} else {\nreturn response()->json(['success' => false,'message' => 'No activities were updated.']);\n}\n}", "CodeBleu_score": 39.08858046257522}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\t$request = request();\n\t$ids = $request->input('ids');\n\n\tActivity::whereIn('id', $ids)->get()->each(function ($activity) {\n\t\t$activity->delete();\n\t});\n\n\treturn response()->json(trans('global.activity.mass_destroyed'));\n}", "CodeBleu_score": 21.213461152800527}, {"code": "<?\n public function massDestroy(){\n\t\t$activities = $this->activityRepository->find(request('ids'));\n\n\tforeach ($activities as $activity) {\n\t\t$this->activityRepository->delete($activity);\n\t}\n\n\treturn response()->json(trans('global.activity.mass_destroyed'));\n}", "CodeBleu_score": 23.872960191803255}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = request('ids');\n\t$activities = $this->activityRepository->getByIds($ids);\n\tforeach ($activities as $activity) {\n\t\tevent(new ActivityDestroyEvent($activity));\n\t\t$this->activityRepository->delete($activity);\n\t}\n\treturn response()->json(['message' => trans('global.activity.mass_deleted')]);\n}", "CodeBleu_score": 28.862287905612305}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\nforeach (request()->all() as $card) {\n\nforeach ($cards as $key => $value) {\n\nif ($value->id == $card['id']) {\n\n$cards[$key]->selected = $card['selected'];\n\n}\n\n}\n\n}\n\nreturn response()->json($cards);\n\n}", "CodeBleu_score": 38.515490273076644}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\t$request = request()->all();\n\tforeach ($cards as $card) {\n\t\tforeach ($request as $key => $value) {\n\t\t\tif ($card->id == $key) {\n\t\t\t\t$card->selected = $value;\n\t\t\t}\n\t\t}\n\t}\n\treturn response()->json($cards);\n}", "CodeBleu_score": 36.77807450949201}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\t$requestData = request()->all();\n\n\tforeach ($cards as $card) {\n\t\tif (isset($requestData[$card['id']])) {\n\t\t\t$card['selected'] = $requestData[$card['id']];\n\t\t}\n\t}\n\n\treturn response()->json($cards);\n}", "CodeBleu_score": 39.8062217012655}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\tEvent::dispatch(new ConfigurationCreating);\n\t$configuration = $this->configurationRepository->create(request()->all());\n\tEvent::dispatch(new ConfigurationCreated($configuration));\n\tsession()->flash('success', trans('configuration.create.success'));\n\treturn redirect()->back();\n}", "CodeBleu_score": 40.986375364536386}, {"code": "<?\npublic function store(){\n\t\t// Dispatch an event before saving the configuration\n\tEvent::dispatch('configuration.store.before');\n\n\t// Create the configuration\n\t$this->configurationRepository->create(request()->all());\n\n\t// Dispatch an event after saving the configuration\n\tEvent::dispatch('configuration.store.after');\n\n\t// Flash a success message to the session\n\tsession()->flash('success', trans('messages.configuration_created'));\n\n\t// Redirect back to the previous page\n\treturn redirect()->back();\n}", "CodeBleu_score": 47.55304043660105}, {"code": "<?\npublic function store(){\n\t\t// Dispatch an event before saving the configuration\n\tEvent::dispatch('configuration.creating');\n\n\t// Create the configuration with the provided request data\n\t$this->configurationRepository->create(request()->all());\n\n\t// Dispatch an event after saving the configuration\n\tEvent::dispatch('configuration.created');\n\n\t// Flash a success message to the session\n\tsession()->flash('success', trans('configuration.created'));\n\n\t// Redirect back to the previous page\n\treturn redirect()->back();\n}", "CodeBleu_score": 45.534327722721706}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t\n// Retrieve the file path from the request parameters\n$path = request()->route()->parameters()['path'];\n\n// Construct the full file name\n$fileName = 'configuration/'. $path;\n\n// Fetch the corresponding configuration from the repository\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\n// Return the file for download using the stored value\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.98612804233142}, {"code": "<?\npublic function download(){\n\t\t$path = request()->route()->parameters()['path'];\n\t$fileName = 'configuration/'. $path;\n\t$config = $this->configurationRepository->findOneByField('value', $fileName);\n\treturn Storage::download($config['value']);\n}", "CodeBleu_score": 94.01680707275804}, {"code": "<?\npublic function download(){\n\t// Retrieve the file path from the request parameters\n    $path = request()->route()->parameters()['path'];\n\n// Construct the full file name\n    $fileName = 'configuration/'. $path;\n\n// Fetch the corresponding configuration from the repository\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n// Return the file for download using the stored value\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.409918553291}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<>();\n\tfor (String s : list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setUserId(getUserId());\n\t\tsort.setModel(s);\n\t\tsort.setSort(list.indexOf(s));\n\t\tsortList.add(sort);\n\t}\n\tadminModelSortRepository.remove(getUserId());\n\tadminModelSortRepository.saveBatch(sortList);\n\treturn ok();\n}", "CodeBleu_score": 32.56249501140678}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSortList = new ArrayList<>();\n\tlist.forEach(model -> {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setSort(0);\n\t\tmodelSort.setType(model);\n\t\tmodelSort.setUserId(getUserId());\n\t\tmodelSort.setIsHidden(false);\n\t\tmodelSortList.add(modelSort);\n\t});\n\tadminModelSortRepository.remove(getUserId());\n\tadminModelSortRepository.saveBatch(modelSortList);\n\treturn ok();\n}", "CodeBleu_score": 35.07163698387805}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<>();\n\tfor (String model : list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setSort(1);\n\t\tsort.setType(model);\n\t\tsort.setUserId(getUserId());\n\t\tsort.setIsHidden(false);\n\t\tsortList.add(sort);\n\t}\n\tAdminModelSort.remove(\"userId\", getUserId());\n\tAdminModelSort.saveBatch(sortList);\n\treturn ok();\n}", "CodeBleu_score": 33.37921175343176}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 90.3314367438484}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 90.3314367438484}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 90.3314367438484}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// Retrieve the user configuration by the custom key\n\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\n\t// If the configuration exists, update its value\n\tif (userConfig!= null) {\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfigService.updateById(userConfig);\n\t} else {\n\t\t// If the configuration does not exist, create a new one\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.setUserId(SecurityUtils.getLoginUser().getId());\n\t\tuserConfig.setStatus(1);\n\t\tuserConfigService.save(userConfig);\n\t}\n\n\t// Return a successful result\n\treturn Result.ok();\n}", "CodeBleu_score": 69.03853900198969}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// get user configuration by custom key\n\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\t// if user configuration exists, update its value\n\tif (userConfig!= null) {\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfigService.updateById(userConfig);\n\t} else {\n\t\t// create a new user configuration with the provided JSON\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.setStatus(1);\n\t\tuserConfig.setUserId(1L);\n\t\tuserConfigService.save(userConfig);\n\t}\n\treturn Result.ok();\n}", "CodeBleu_score": 68.00561375282564}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// Retrieve the user configuration by the custom key\n\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\t// If the configuration exists, update its value\n\tif (userConfig!= null) {\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfigService.updateById(userConfig);\n\t} else {\n\t\t// If not, create a new user configuration with the provided JSON\n\t\tuserConfig = new UserConfig();\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tuserConfig.setUserId(getUserId());\n\t\tuserConfig.setStatus(1);\n\t\tuserConfigService.save(userConfig);\n\t}\n\t// Return a successful result\n\treturn Result.success();\n}", "CodeBleu_score": 68.56569174812475}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserMapper.queryUserInfo(userId);\n\tif (user == null) {\n\t\treturn Result.error(ResultCode.USER_NOT_EXIST);\n\t}\n\tString deptName = adminDeptMapper.getDeptName(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.ok(user);\n}", "CodeBleu_score": 48.918708147854886}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\tif (user == null) {\n\t\treturn Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t}\n\tString deptName = adminDeptService.getDeptName(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn Result.success(user);\n}", "CodeBleu_score": 50.359789159680105}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser adminUser = adminUserService.getUserById(userId);\n\tif (adminUser == null) {\n\t\treturn Result.error(ResultCode.USER_NOT_EXIST);\n\t}\n\tString deptName = adminUserService.getDeptName(adminUser.getDeptId());\n\tadminUser.setDeptName(deptName);\n\tadminUser.setSalt(null);\n\tadminUser.setPassword();\n\treturn Result.success(adminUser);\n}", "CodeBleu_score": 47.73621226461433}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tString userId = session(\"userId\");\n\tif (userId == null) {\n\t\treturn badRequest(\"No user logged in\");\n\t}\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif (readNotices.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\treturn ok(\"success\");\n}", "CodeBleu_score": 28.731584856914505}, {"code": " public Result readNotice() {\n\t\tString userId = session(\"userId\");\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif (readNotices.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNotice.save();\n\t}\n\treturn ok(\"success\");\n}", "CodeBleu_score": 27.348237064261006}, {"code": " public Result readNotice() {\n\t//        String userId = session().get(\"userId\");\n//        if (userId == null) {\n//            return badRequest(\"No user id\");\n//        }\n//        List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n//        if (readNotices.size() > 1) {\n//            ReadNotice.find.where().eq(\"userId\", userId).update().set(\"status\", 1).execute();\n//        } else if (readNotices.size() == 1) {\n//            ReadNotice readNotice = readNotices.get(0);\n//            readNotice.setStatus(1);\n//            readNotice.save();\n//        } else {\n//            ReadNotice readNotice = new ReadNotice();\n//            readNotice.setUserId(userId);\n//            readNotice.setStatus(1);\n//            readNotice.save();\n//        }\n//        return ok(\"Success\");\n    }", "CodeBleu_score": 0.8375966930517764}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\ttry {\n\t\tAdminConfigBO adminConfigBO = adminConfigDAO.getByName(\"companyInfo\");\n\t\tif (adminConfigBO == null) {\n\t\t\tadminConfigBO = new AdminConfigBO();\n\t\t\tadminConfigBO.setName(\"companyInfo\");\n\t\t}\n\t\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigDAO.saveOrUpdate(adminConfigBO);\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception in setAdminConfig\", e);\n\t}\n}", "CodeBleu_score": 36.843715716661954}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// Create a new configuration with default values\n\tAdminConfigBO adminConfigBO = new AdminConfigBO();\n\tadminConfigBO.setName(\"companyInfo\");\n\tadminConfigBO.setDescription(\"Company Information\");\n\tadminConfigBO.setStatus(true);\n\tadminConfigBO.setValue(new JSONObject().toJSONString());\n\n\t// Search for an existing configuration with the name \"companyInfo\"\n\tAdminConfigBO existingConfig = adminConfigDAO.getByName(\"companyInfo\");\n\n\t// If an existing configuration is found, update its value with the provided company information\n\tif (existingConfig!= null) {\n\t\texistingConfig.setValue(adminCompanyBO.toJSONString());\n\t\tadminConfigDAO.saveOrUpdate(existingConfig);\n\t} else {\n\t\t// If no existing configuration is found, create a new configuration with the provided company information\n\t\tadminConfigBO.setValue(adminCompanyBO.toJSONString());\n\t\tadminConfigDAO.saveOrUpdate(adminConfigBO);\n\t}\n}", "CodeBleu_score": 32.75451748838384}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfigBO adminConfigBO = adminConfigService.getByName(\"companyInfo\");\n\tif (adminConfigBO == null) {\n\t\tadminConfigBO = new AdminConfigBO();\n\t\tadminConfigBO.setName(\"companyInfo\");\n\t\tadminConfigBO.setDescription(\"Company Information\");\n\t\tadminConfigBO.setStatus(true);\n\t}\n\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\tadminConfigService.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 37.29220866790887}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\t// query the admin config\n\tdef adminConfig = queryAdminConfig(ADMIN_CONFIG_KEY)\n\n\t// parse the admin config\n\tdef adminCompany = parseAdminConfig(adminConfig)\n\n\t// return the admin company\n\treturn adminCompany\n}", "CodeBleu_score": 9.0636691562757}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\ttry {\n\t\tString query = \"select * from admin_config where key = '\" + key + \"'\";\n\t\tList<AdminConfigBO> adminConfigBOs = adminConfigDAO.executeQuery(query);\n\t\tif (!adminConfigBOs.isEmpty()) {\n\t\t\tAdminConfigBO adminConfigBO = adminConfigBOs.get(0);\n\t\t\tadminCompanyBO.setKey(adminConfigBO.getKey());\n\t\t\tadminCompanyBO.setConfigValue(adminConfigBO.getConfigValue());\n\t\t\tadminCompanyBO.setCompany(adminConfigBO.getCompany());\n\t\t\tadminCompanyBO.setCreatedBy(adminConfigBO.getCreatedBy());\n\t\t\tadminCompanyBO.setCreatedDate(adminConfigBO.getCreatedDate());\n\t\t\tadminCompanyBO.setUpdatedBy(adminConfigBO.getUpdatedBy());\n\t\t\tadminCompanyBO.setUpdatedDate(adminConfigBO.getUpdatedDate());\n\t\t\tadminCompanyBO.setVersion(adminConfigBO.getVersion());\n\t\t\tadminCompanyBO.setDeleted(adminConfigBO.isDeleted());\n\t\t\tadminCompanyBO.setDeletedBy(adminConfigBO.getDeletedBy());\n\t\t\tadminCompanyBO.setDeletedDate(adminConfigBO.getDeletedDate());\n\t\t\tadminCompanyBO.setDeletedVersion(adminConfigBO.getDeletedVersion());\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 31.276074617478905}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = null;\n\ttry {\n\t\t// query the admin config\n\t\tAdminConfigBO adminConfigBO = queryAdminConfig(ADMIN_COMPANY_CONFIG_KEY);\n\t\tif (adminConfigBO!= null) {\n\t\t\t// parse the config value into an AdminCompanyBO object\n\t\t\tadminCompanyBO = parseAdminCompanyBO(adminConfigBO.getValue());\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\t// if no admin config is found, create a new instance\n\tif (adminCompanyBO == null) {\n\t\tadminCompanyBO = new AdminCompanyBO();\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 38.25118747408062}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t List<AdminConfig> adminConfigs = new ArrayList<AdminConfig>();\n for (String string : stringList) {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(string);\n adminConfigs.add(adminConfig);\n }\n List<AdminConfig> oldAdminConfigs = AdminConfig.findAll(AdminConfig.class, \"name\", logWelcomeSpeechName);\n AdminConfig.remove(oldAdminConfigs);\n AdminConfig.saveBatch(adminConfigs);\n }", "CodeBleu_score": 35.26865595344786}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t List<AdminConfig> adminConfigs = new ArrayList<>();\n for (String s : stringList) {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setSpeech(s);\n adminConfigs.add(adminConfig);\n }\n List<AdminConfig> existingConfigs = adminConfigRepository.findByConfigName(LOG_WELCOME_SPEECH);\n adminConfigRepository.deleteAll(existingConfigs);\n adminConfigRepository.saveAll(adminConfigs);\n }", "CodeBleu_score": 39.86266653963864}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> logWelcomeSpeechConfigs = new ArrayList<AdminConfig>();\n\tfor (String logWelcomeSpeech : stringList) {\n\t\tAdminConfig logWelcomeSpeechConfig = new AdminConfig();\n\t\tlogWelcomeSpeechConfig.setName(logWelcomeSpeech);\n\t\tlogWelcomeSpeechConfigs.add(logWelcomeSpeechConfig);\n\t}\n\tremoveLogWelcomeSpeech(logWelcomeSpeechConfigs.get(0).getName());\n\tsaveBatch();\n\tfor (AdminConfig logWelcomeSpeechConfig : logWelcomeSpeechConfigs) {\n\t\tlogWelcomeSpeechConfig.setName(logWelcomeSpeechConfig.getName());\n\t\tlogWelcomeSpeechConfig.save();\n\t}\n\tsaveBatch();\n}", "CodeBleu_score": 33.57151504288559}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\ttry {\n\t\tint userId = adminInitDataBO.getUserId();\n\t\tString username = adminInitDataBO.getUsername();\n\t\tString password = ();\n\t\tString salt = adminInitDataBO.getSalt();\n\t\tString storedPassword = getPassword(username, salt);\n\t\tif (password.equals(storedPassword)) {\n\t\t\tString code = randomInt();\n\t\t\tsetex(userId, code, 600);\n\t\t\treturn code;\n\t\t} else {\n\t\t\tthrow new Exception(\"Invalid password\");\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 27.64610318010476}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString userId = getUserId(adminInitDataBO);\n\tString username = getUsername(adminInitDataBO);\n\tString password = getPassword(adminInitDataBO);\n\tString salt = getSalt(adminInitDataBO);\n\tString storedPassword = getStoredPassword(username, salt);\n\tif (storedPassword.equals(password)) {\n\t\tString code = generateCode();\n\t\tsetex(userId, code, 600);\n\t\treturn code;\n\t} else {\n\t\tthrow new Exception(\"Invalid password\");\n\t}\n}", "CodeBleu_score": 21.455618245167692}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString userId = adminInitDataBO.getUserId();\n\tString password = adminInitDataBO.getPassword();\n\tAdminUserBO adminUserBO = adminUserDAO.getById(userId);\n\tString username = adminUserBO.getUsername();\n\tif (password.equals(PasswordUtil.getPassword(password, username, adminUserBO.getSalt()))) {\n\t\tString code = RandomUtil.randomInt();\n\t\tredisUtil.setex(code, userId, 600);\n\t\treturn code;\n\t} else {\n\t\tthrow new RuntimeException(\"Invalid password\");\n\t}\n}", "CodeBleu_score": 31.782797127210927}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = userId + \":unauthorized\";\n\tList<String> unauthorized = getRedis().lrange(key, 0, -1);\n\tif (unauthorized.contains(get())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.101420600686865}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized_menu_urls:\" + userId;\n\tList<String> urls = redis.lrange(key, 0, -1);\n\tif (urls.contains(request.getRequestURI())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 29.650249004018974}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = userId + \"_unauthorized_menu\";\n\tList<String> list = getRedis().lrange(key, 0, -1);\n\tif (list.contains(get())) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 26.81376952828708}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\tif (list.size() > 0) {\n\t\tadminRoleMenuDao.saveBatch(list);\n\t}\n}", "CodeBleu_score": 53.03501291404958}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu rm = new AdminRoleMenu();\n\t\trm.setRoleId(roleId);\n\t\trm.setMenuId(menuId);\n\t\tlist.add(rm);\n\t}\n\tif (list.size() > 0) {\n\t\tadminRoleMenuDao.saveBatch(list);\n\t}\n}", "CodeBleu_score": 44.7788737895978}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\tif (list.size() > 0) {\n\t\tadminRoleMenuMapper.saveBatch(list);\n\t}\n}", "CodeBleu_score": 46.92554071896621}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t//        \u83b7\u53d6\u7cfb\u7edf\u65e5\u5fd7\u7d22\u5f15\n        String index = getSysLogIndex();\n//        \u5c06\u7cfb\u7edf\u65e5\u5fd7\u5bf9\u8c61\u8f6c\u4e3amap\n        Map<String, Object> map = beanToMap(sysLog);\n//        \u683c\u5f0f\u5316\u521b\u5efa\u65f6\u95f4\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n//        \u79fb\u9664id\n        map.remove(\"id\");\n//        \u521b\u5efa\u7d22\u5f15\u8bf7\u6c42\n        IndexRequest indexRequest = new IndexRequest(index);\n//        \u8bbe\u7f6e\u7d22\u5f15\u8bf7\u6c42\u7684json\u6570\u636e\n        indexRequest.source(map);\n//        \u63d0\u4ea4\u7d22\u5f15\u8bf7\u6c42\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 50.37071723957135}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t//        String index = getSysLogIndex();\n//        Map<String, Object> map = beanToMap(sysLog);\n//        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n//        map.remove(\"id\");\n//        IndexRequest indexRequest = new IndexRequest(index);\n//        indexRequest.source(map);\n//        try {\n//            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n//        } catch (IOException e) {\n//            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n//        }\n//    }", "CodeBleu_score": 2.412204635626008}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t//        String index = getSysLogIndex();\n//        Map<String, Object> map = beanToMap(sysLog);\n//        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n//        map.remove(\"id\");\n//        IndexRequest indexRequest = new IndexRequest(index);\n//        indexRequest.source(map);\n//        try {\n//            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n//        } catch (IOException e) {\n//            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n//        }\n    }", "CodeBleu_score": 2.498932858752913}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\titialize the search criteria\n\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n\t// Sort the results by creation time in descending order\n\tsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n\t// Exclude specific fields from the response\n\tsearchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"userName\", \"model\", \"subModel\", \"subModelLabel\", \"ip\", \"createTime\"}, null);\n\n\t// Execute the search request\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n\tsearchRequest.source(searchSourceBuilder);\n\tSearchResponse searchResponse = null;\n\ttry {\n\t\tsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5206\u9875\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n\t}\n\n\t// Map the search results to SysLog objects\n\tSearchHits hits = searchResponse.getHits();\n\tList<SysLog> sysLogList = new ArrayList<>();\n\tfor (SearchHit hit : hits.getHits()) {\n\t\tSysLog sysLog = JsonUtil.toBean(hit.getSourceAsString(), SysLog.class);\n\t\tsysLogList.add(sysLog);\n\t}\n\n\t// Populate the BasePage object with the results, including total hits and current page\n\tBasePage<SysLog> basePage = new BasePage<>();\n\tbasePage.setList(sysLogList);\n\tbasePage.setTotal(hits.getTotalHits().value);\n\tbasePage.setCurrent(querySysLogBO.getPage());\n\n\treturn basePage;\n}", "CodeBleu_score": 60.72373210184724}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\thSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n\t// \u6392\u5e8f\n\tsearchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n\t// \u4e0d\u9700\u8981\u7684\u5b57\u6bb5\n\tsearchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"subModel\", \"content\", \"createTime\"}, null);\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n\tsearchRequest.source(searchSourceBuilder);\n\tSearchResponse searchResponse = null;\n\ttry {\n\t\tsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n\t}\n\tSearchHits searchHits = searchResponse.getHits();\n\tList<SysLog> sysLogList = new ArrayList<>();\n\tif (searchHits.getHits()!= null) {\n\t\tfor (SearchHit hit : searchHits.getHits()) {\n\t\t\tSysLog sysLog = BeanUtil.mapToBean(hit.getSourceAsMap(), SysLog.class, true);\n\t\t\tsysLogList.add(sysLog);\n\t\t}\n\t}\n\treturn getPage(sysLogList, searchHits.getTotalHits().value, querySysLogBO.getPage(), querySysLogBO.getLimit());\n}", "CodeBleu_score": 52.50744542955176}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\ttialize the search criteria\nSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n// Sort the results by creation time in descending order\nsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n// Exclude specific fields from the response\nsearchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModel\", \"subModelLabel\", \"content\", \"createTime\"}, null);\n// Execute the search request using a REST client\nSearchRequest searchRequest = new SearchRequest();\nsearchRequest.indices(getSysLogIndex());\nsearchRequest.source(searchSourceBuilder);\nSearchResponse searchResponse = null;\ntry {\n    searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\n    log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n// Map the search results to SysLog objects\nSearchHits searchHits = searchResponse.getHits();\nList<SysLog> sysLogList = new ArrayList<>();\nfor (SearchHit hit : searchHits.getHits()) {\n    sysLogList.add(mapToBean(hit.getSourceAsMap()));\n}\n// Populate a BasePage object with the results, including total hits and current page\nBasePage<SysLog> page = new BasePage<>();\npage.setList(sysLogList);\npage.setTotal(searchHits.getTotalHits().value);\npage.setCurrent(querySysLogBO.getPage());\nreturn page;\n}", "CodeBleu_score": 57.37389580603388}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 74.48025187889871}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 74.48025187889871}, {"code": "async function downloadFile(url, dest){\n\tturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 74.48025187889871}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependencies()\n.filter(dep ->!circularDependencyCheckSet.contains(dep.getId()))\n.doOnNext(dep -> circularDependencyCheckSet.add(dep.getId()))\n.flatMap(dep -> getLiveModules(dep.getId()))\n.flatMap(depModule -> getDependentModules(depModule, circularDependencyCheckSet))\n.collectList()\n.onErrorContinue((throwable, o) -> log.warn(\"Error while retrieving dependent modules for module {}: {}\", module.getId(), throwable.getMessage()))\n.flatMapIterable(Function.identity());\n }", "CodeBleu_score": 48.81871891086641}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependencies()\n.filter(dep ->!circularDependencyCheckSet.contains(dep.getId()))\n.doOnNext(dep -> circularDependencyCheckSet.add(dep.getId()))\n.flatMapMany(dep -> getLiveModules(dep.getId()))\n.collectList()\n.flatMapMany(Flux::fromIterable)\n.onErrorContinue((err, obj) -> logger.warn(\"Error while retrieving dependent modules for {}: {}\", module.getId(), err.getMessage()))\n.doOnNext(m -> logger.debug(\"Retrieved dependent module {} for {}\", m.getId(), module.getId()));\n }", "CodeBleu_score": 50.60708952823126}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependencies()\n.filter(dependency ->!circularDependencyCheckSet.contains(dependency.getId()))\n.doOnNext(dependency -> circularDependencyCheckSet.add(dependency.getId()))\n.flatMapMany(dependency -> getLiveModules(dependency.getId()))\n.collectList()\n.onErrorContinue((throwable, obj) -> log.warn(\"Error while retrieving dependent modules for module {}: {}\", module.getId(), throwable.getMessage()))\n.flatMapMany(Flux::fromIterable);\n }", "CodeBleu_score": 51.50017409665757}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n// Read the image data from the DataBuffer\n        byte[] data = dataBuffer.asBytes();\n        DataBufferUtils.release(dataBuffer);\n\n// Resize the image if the createThumbnail flag is true\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        }\n\n// Set the content type to JPEG if not creating a thumbnail\n        MediaType contentType = createThumbnail? MediaType.IMAGE_JPEG : srcContentType;\n\n// Create an Asset with the processed image data and content type\n        Asset asset = new Asset();\n        asset.setData(data);\n        asset.setContentType(contentType);\n        return asset;\n    }", "CodeBleu_score": 48.52283289759398}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n// If the createThumbnail flag is true, resize the image to the thumbnail size.\nbyte[] data = createThumbnail? resizeImage(dataBuffer) : dataBuffer.asByteArray();\n\n// Set the content type to JPEG if creating a thumbnail, or retain the original content type if not creating a thumbnail.\nMediaType contentType = createThumbnail? MediaType.IMAGE_JPEG : srcContentType;\n\n// Create an Asset object with the processed image data and content type.\nAsset asset = new Asset(data, contentType);\n\n// Release the DataBuffer after processing.\nDataBufferUtils.release(dataBuffer);\n\nreturn asset;\n}", "CodeBleu_score": 40.16631966391472}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n// Read the image data from the DataBuffer\n        byte[] imageData = dataBuffer.asByteArray();\n\n// Resize the image if createThumbnail is true\n        if (createThumbnail) {\n            imageData = resizeImage(dataBuffer);\n        }\n\n// Set the content type to JPEG if not creating a thumbnail, otherwise retain the original content type\n        MediaType contentType = createThumbnail? srcContentType : MediaType.IMAGE_JPEG;\n\n// Create an Asset with the processed image data and content type\n        Asset asset = Asset.builder()\n               .data(imageData)\n               .contentType(contentType)\n               .build();\n\n// Release the DataBuffer after processing\n        DataBufferUtils.release(dataBuffer);\n\n// Return the new Asset\n        return asset;\n    }", "CodeBleu_score": 53.7354672380745}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Flux.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 37.57670088333753}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn assetService.getById(assetId)\n\t\t.flatMap(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t\t}\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t});\n}", "CodeBleu_score": 33.605515864434224}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn repository.findById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 33.009110179332914}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (this.workspace.getMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn this.organizationRepository.findAllInEnterpriseMode(this.workspace.getId())\n\t\t\t.flatMapIterable(org -> org.getAuthConfigs())\n\t\t\t.map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getWorkspaceId(), authConfig.getOrganizationId(), authConfig.getType(), authConfig.getAuthConfig()));\n}", "CodeBleu_score": 32.523611094118735}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn workspace.getMode()\n\t\t.flatMapIterable(mode -> {\n\t\t\tif (mode == WorkspaceMode.SAAS) {\n\t\t\t\treturn Collections.emptyList();\n\t\t\t}\n\t\t\treturn workspace.getOrganizationInEnterpriseMode();\n\t\t})\n\t\t.flatMapIterable(organization -> organization.getAuthConfigs())\n\t\t.map(authConfig -> {\n\t\t\tFindAuthConfig findAuthConfig = new FindAuthConfig();\n\t\t\tfindAuthConfig.setAuthConfigId(authConfig.getAuthConfigId());\n\t\t\tfindAuthConfig.setAuthConfigName(authConfig.getAuthConfigName());\n\t\t\tfindAuthConfig.setAuthConfigType(authConfig.getAuthConfigType());\n\t\t\tfindAuthConfig.setAuthConfigVersion(authConfig.getAuthConfigVersion());\n\t\t\tfindAuthConfig.setAuthConfigStatus(authConfig.getAuthConfigStatus());\n\t\t\tfindAuthConfig.setAuthConfigDescription(authConfig.getAuthConfigDescription());\n\t\t\tfindAuthConfig.setAuthConfigProperties(authConfig.getAuthConfigProperties());\n\t\t\tfindAuthConfig.setAuthConfigCreatedTime(authConfig.getAuthConfigCreatedTime());\n\t\t\tfindAuthConfig.setAuthConfigUpdatedTime(authConfig.getAuthConfigUpdatedTime());\n\t\t\tfindAuthConfig.setAuthConfigUpdatedBy(authConfig.getAuthConfigUpdatedBy());\n\t\t\tfindAuthConfig.setAuthConfigUpdatedBy(authConfig.getAuthConfigUpdatedBy());\n\t\t\tfindAuthConfig.setAuthConfigUpdatedBy(authConfig.getAuthConfigUpdatedBy());\n\t\t\treturn findAuthConfig;\n\t\t});\n}", "CodeBleu_score": 22.38050419535331}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t", "CodeBleu_score": 2.6983305016023995}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockApplicationRunner.withDefaultLock(mongoTemplate)\n\t\t\t.setSpringContext(springContext)\n\t\t\t.setDriver(mongoTemplate.getMongoDbFactory().getMongoClient())\n\t\t\t.addChangeLogsScanPackages(\"com.example.changelogs\")\n\t\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 24.599704167661006}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockApplicationRunner.withDefaultLock(MongockSpring5.builder()\n\t\t.setDriver(new SpringDataMongo3Driver(mongoTemplate))\n\t\t.setSpringContext(springContext)\n\t\t.addChangeLogsScanPackages(ChangeLogsScanPackage.class.getPackage().getName())\n\t\t.buildApplicationRunner());\n}", "CodeBleu_score": 19.78002032749725}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t.setDriver(mongoTemplate.getDb())\n\t.setSpringContext(springContext)\n\t.addChangeLogsScanPackages(ChangeLogsScanPackage.class.getPackage().getName())\n\t.setWriteConcern(WriteConcern.ACKNOWLEDGED)\n\t.setReadConcern(ReadConcern.MAJORITY)\n\t.withJournal()\n\t.withDefaultLock()\n\t.buildApplicationRunner();\n}", "CodeBleu_score": 25.0908401645192}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\n// Create a new ReactiveMongoTemplate instance with the provided MongoDB factory and mapping converter\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n// Configure the read preference to \"secondaryPreferred\"\nreactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\n// Return the configured ReactiveMongoTemplate\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 77.0636964475727}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\n// Configure the read preference to secondaryPreferred\nReadPreference readPreference = ReadPreference.secondaryPreferred();\nmappingMongoConverter.setReadPreference(readPreference);\n\n// Create and return the ReactiveMongoTemplate instance\nreturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 49.28171871876495}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t// Create a new ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter.\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n// Set the read preference to \"secondaryPreferred\".\nreactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n// Return the configured ReactiveMongoTemplate.\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 77.0636964475727}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.switchIfEmpty(libraryQueryRepository.findById(libraryQueryId))\n\t\t\t.map(LibraryQuery::getDsl)\n\t\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"));\n}", "CodeBleu_score": 45.68957130190863}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.map(LibraryQuery::getDsl)\n\t\t\t.switchIfEmpty(libraryQueryRepository.findById(libraryQueryId)\n\t\t\t\t\t.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 56.47756076727622}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.switchIfEmpty(libraryQueryRepository.findById(libraryQueryId))\n\t\t\t.map(libraryQuery -> libraryQuery.getDsl());\n}", "CodeBleu_score": 35.72515776282549}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tGet the timeout duration in milliseconds from the timeout string.\n        var timeout = Duration.ofMillis(parseQueryTimeoutMs(timeoutStr));\n// 2. Determine whether the datasource is a Javascript plugin or not.\n        boolean isJsDatasourcePlugin = isJsDatasourcePlugin(datasource.getType());\n// 3. Execute the query based on the datasource type.\n        Mono<QueryExecutionResult> result;\n        if (isJsDatasourcePlugin) {\n            result = executeByNodeJs(datasource, queryConfig, requestParams);\n        } else {\n            result = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n// 4. Handle timeout exceptions by mapping them to a plugin exception and resume with an error result.\n        result = result.timeout(timeout)\n               .onErrorMap(TimeoutException.class, e -> new PluginException(PluginErrorCode.QUERY_TIMEOUT,\n                        String.format(\"Query execution timed out after %s ms\", timeoutStr)))\n               .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())));\n// 5. Handle other plugin exceptions by mapping them to a generic query execution error.\n        result = result.onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())));\n// 6. Handle other exceptions by logging the error and mapping them to a generic query execution error.\n        result = result.onErrorResume(e -> {\n            log.error(\"Error executing query\", e);\n            return Mono.just(QueryExecutionResult.error(e.getMessage()));\n        });\n// 7. Return the deferred result.\n        return result;\n    }", "CodeBleu_score": 50.240395558728714}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\trse the timeout string into a duration\n        Duration timeout = Duration.ofMillis(parseQueryTimeoutMs(timeoutStr));\n\n// Defer the query execution based on the datasource type\n        if (isJsDatasourcePlugin(datasource)) {\n            return Mono.defer(() -> executeByNodeJs(datasource, queryConfig, requestParams))\n                   .timeout(timeout)\n                   .onErrorMap(TimeoutException.class, e -> new PluginException(PluginErrorCode.PLUGIN_TIMEOUT_ERROR, e.getMessage()))\n                   .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())))\n                   .onErrorResume(e -> {\n                        log.error(\"Error while executing query on datasource {}: {}\", datasource.getId(), e.getMessage());\n                        return Mono.just(QueryExecutionResult.error(\"Error while executing query on datasource\"));\n                    });\n        } else {\n            return Mono.defer(() -> executeLocally(datasource, queryConfig, requestParams, queryVisitorContext))\n                   .timeout(timeout)\n                   .onErrorMap(TimeoutException.class, e -> new PluginException(PluginErrorCode.PLUGIN_TIMEOUT_ERROR, e.getMessage()))\n                   .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())))\n                   .onErrorResume(e -> {\n                        log.error(\"Error while executing query on datasource {}: {}\", datasource.getId(), e.getMessage());\n                        return Mono.just(QueryExecutionResult.error(\"Error while executing query on datasource\"));\n                    });\n        }\n    }", "CodeBleu_score": 45.0775556815121}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tse the timeout string and convert it to milliseconds\nDuration queryTimeout = parseQueryTimeoutMs(timeoutStr);\n\n// Execute the query based on the datasource type\nreturn isJsDatasourcePlugin(datasource)\n       ? executeByNodeJs(datasource, queryConfig, requestParams)\n        : executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n}", "CodeBleu_score": 26.99043572648847}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// Get the appropriate query executor based on the datasource type\n\tQueryExecutor queryExecutor = queryExecutorProvider.getQueryExecutor(datasource.getType());\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = queryExecutor.buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t// Acquire a connection from the datasource connection pool\n\treturn datasource.getConnection()\n\t// Execute the query using the connection\n\t.flatMap(connection -> queryExecutor.executeQuery(connection, queryExecutionContext))\n\t// Handle any errors that occur during execution\n\t.onErrorResume(throwable -> Mono.just(new QueryExecutionResult(throwable)))\n\t// Return the query execution result\n\t.doOnSuccess(queryExecutionResult -> queryExecutor.closeConnection(connection));\n}", "CodeBleu_score": 45.77974466279185}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn getQueryExecutor(datasource)\n           .flatMap(queryExecutor -> buildQueryExecutionContext(datasource, queryConfig, requestParams, queryExecutor, queryVisitorContext))\n           .flatMap(queryExecutionContext -> acquireConnection(datasource)\n                   .flatMap(connection -> executeQuery(queryExecutionContext, connection)\n                           .onErrorResume(throwable -> handleError(queryExecutionContext, connection, throwable))\n                           .doFinally(signalType -> releaseConnection(datasource, connection))\n                    )\n            );\n}", "CodeBleu_score": 34.73341378111221}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// Retrieve the appropriate query executor based on the datasource type\nQueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n// Build the query execution context\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n// Acquire a connection from the datasource connection pool\nMono<Connection> connectionMono = datasource.getConnection();\n// Execute the query using the connection and handle any errors that occur during execution\nreturn connectionMono.flatMap(connection -> {\n    try {\n        return queryExecutor.execute(queryExecutionContext, connection);\n    } catch (Exception e) {\n        return Mono.error(e);\n    }\n});\n}", "CodeBleu_score": 43.2183285190646}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tf (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n\tint unitIndex = unitInfo.getRight();\n\tif (unitIndex == -1) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n\t}\n\tString valueStr = timeoutStr.substring(0, unitIndex);\n\tdouble value = Double.parseDouble(valueStr);\n\tif (value < 0) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout value: \" + valueStr);\n\t}\n\tString unit = unitInfo.getLeft();\n\tint timeoutMs = convertToMs(value, unit);\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed value: \" + timeoutStr);\n\t}\n\treturn timeoutMs;\n}", "CodeBleu_score": 56.1963850944714}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t (isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getLeft();\nint unitIndex = unitInfo.getRight();\nif (unitIndex == -1) {\nthrow new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n}\n\ndouble value;\ntry {\nvalue = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n} catch (NumberFormatException e) {\nthrow new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr, e);\n}\n\nint timeoutMs = convertToMs(value, unit);\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed value: \" + timeoutStr);\n}\n\nreturn timeoutMs;\n}", "CodeBleu_score": 55.90467359392074}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tf (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n\tString unit = unitInfo.getLeft();\n\tint unitIndex = unitInfo.getRight();\n\tif (unitIndex == -1) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n\t}\n\tint value;\n\ttry {\n\t\tvalue = ofSeconds(toDouble(timeoutStr.substring(0, unitIndex))).toMillis();\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout value: \" + timeoutStr, e);\n\t}\n\tif (value <= 0) {\n\t\tthrow new IllegalArgumentException(\"Query timeout must be positive: \" + timeoutStr);\n\t}\n\tint maxTimeoutMs = MAX_QUERY_TIMEOUT_MS;\n\tif (value > maxTimeoutMs) {\n\t\tthrow new IllegalArgumentException(String.format(\"Query timeout must not exceed %dms: %s\", maxTimeoutMs, timeoutStr));\n\t}\n\treturn convertToMs(value, unit);\n}", "CodeBleu_score": 56.02548431629991}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\teturn application.getLiveQueries()\n       .stream()\n       .flatMap(liveQuery -> liveQuery.getDatasourceId().stream())\n       .collect(Collectors.toSet())\n       .stream()\n       .map(datasourceId -> Pair.of(datasourceId, datasourceId))\n       .collect(Collectors.toList())\n       .stream()\n       .map(pair -> doCopyDatasource(currentOrganizationId, pair.getLeft(), visitorId)\n               .map(newDatasourceId -> Pair.of(pair.getLeft(), newDatasourceId)))\n       .collect(Collectors.toList())\n       .stream()\n       .flatMap(Mono::flux)\n       .collectList();\n}", "CodeBleu_score": 37.30637381562943}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n           .collect(Collectors.toSet())\n           .flatMap(liveQueries -> {\n                if (liveQueries.isEmpty()) {\n                    return Mono.error(new IllegalArgumentException(\"Application has no live queries\"));\n                }\n                return Flux.fromIterable(liveQueries)\n                       .map(liveQuery -> liveQuery.getDatasourceId())\n                       .distinct()\n                       .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                       .collectList()\n                       .map(copiedDatasourceIds -> {\n                            List<Pair<String, String>> pairs = new ArrayList<>();\n                            for (int i = 0; i < liveQueries.size(); i++) {\n                                pairs.add(Pair.of(liveQueries.get(i).getDatasourceId(), copiedDatasourceIds.get(i)));\n                            }\n                            return pairs;\n                        });\n            });\n}", "CodeBleu_score": 35.99925528070224}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn application.getLiveQueries()\n.collectList()\n.flatMap(queries -> {\nif (queries.isEmpty()) {\nreturn Mono.error(new RuntimeException(\"No live queries found in the application\"));\n}\n\nreturn Flux.fromIterable(queries)\n.map(query -> query.getDatasourceId())\n.distinct()\n.flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n.collectList()\n.map(copiedDatasourceIds -> {\nList<Pair<String, String>> originalAndCopiedDatasourceIds = new ArrayList<>();\nfor (int i = 0; i < queries.size(); i++) {\noriginalAndCopiedDatasourceIds.add(Pair.of(queries.get(i).getDatasourceId(), copiedDatasourceIds.get(i)));\n}\nreturn originalAndCopiedDatasourceIds;\n});\n});\n}", "CodeBleu_score": 39.23361435761206}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.get(datasourceId)\n\t\t\t.flatMap(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t\t} else if (datasource.isLegacyQuickRestApi()) {\n\t\t\t\t\treturn Mono.just(datasource.getLegacyQuickRestApiId());\n\t\t\t\t} else if (datasource.isLegacyOpenblocksApi()) {\n\t\t\t\t\treturn Mono.just(datasource.getLegacyOpenblocksApiId());\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 53.49667998110493}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n\t\t\t.flatMap(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t\t} else if (datasource.isLegacyQuickRestApi()) {\n\t\t\t\t\treturn Mono.just(Datasource.QUICK_REST_API_DATASOURCE_ID);\n\t\t\t\t} else if (datasource.isLegacyOpenblocksApi()) {\n\t\t\t\t\treturn Mono.just(Datasource.OPENBLOCKS_API_DATASOURCE_ID);\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 56.04549162093486}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.get(datasourceId)\n\t\t\t.flatMap(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t\t} else if (datasource.isLegacyQuickRestApi()) {\n\t\t\t\t\treturn Mono.just(DatasourceIdConstants.LEGACY_QUICK_REST_API_DATASOURCE_ID);\n\t\t\t\t} else if (datasource.isLegacyOpenblocksApi()) {\n\t\t\t\t\treturn Mono.just(DatasourceIdConstants.LEGACY_OPENBLOCKS_API_DATASOURCE_ID);\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 53.593395277787735}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return upload(filePart)\n.defaultIfEmpty(user.getAvatar())\n.get()\n.flatMap(newAvatar -> {\n if (!newAvatar.equals(user.getAvatar())) {\n return remove(user.getAvatar())\n.then(updateUserAvatar(newAvatar, user.getId()));\n } else {\n return Mono.just(true);\n }\n });\n }", "CodeBleu_score": 21.224243794433704}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t//        Mono<Boolean> result = null;\n        return fileUpload.upload(filePart)\n               .defaultIfEmpty(new Asset())\n               .flatMap(newAvatar -> {\n                    if (!newAvatar.isEmpty()) {\n                        return removeOldAvatar(user.getAvatar())\n                               .flatMap(removed -> updateUserAvatar(newAvatar, user.getId()));\n                    }\n                    return Mono.just(true);\n                });\n    }", "CodeBleu_score": 29.198771777721188}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return uploadAvatar(filePart)\n.flatMap(newAvatar -> {\n if (!StringUtils.isEmpty(user.getAvatar())) {\n return removeAvatar(user.getAvatar())\n.flatMap(result -> updateUserAvatar(newAvatar, user.getId()));\n } else {\n return updateUserAvatar(newAvatar, user.getId());\n }\n });\n }", "CodeBleu_score": 22.61543109228189}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\ter user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.ACTIVE);\n\tuser.setIsEnabled(true);\n\tuser.setAvatarLink(authUser.getTpAvatarLink());\n\tif (authUser.getSource().equals(\"email\") && authUser.getAuthContext().containsKey(\"password\")) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\").toString()));\n\t}\n\tuser.setConnections(authUser.getConnections());\n\tuser.setIsNewUser(true);\n\treturn repository.save(user);\n}", "CodeBleu_score": 37.86296897365548}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\ter user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(User.State.ACTIVE);\n\tuser.setIsEnabled(true);\n\tuser.setAvatarLink(authUser.getTpAvatarLink());\n\tif (authUser.getSource().equals(AuthUser.Source.EMAIL) && authUser.getAuthContext().containsKey(AuthUser.AuthContextKey.PASSWORD)) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthUser.AuthContextKey.PASSWORD).toString()));\n\t}\n\tuser.setConnections(authUser.getConnections());\n\tuser.setIsNewUser(true);\n\treturn repository.save(user);\n}", "CodeBleu_score": 43.32698548498956}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\ter user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.ACTIVE);\n\tuser.setIsEnabled(true);\n\tuser.setAvatarLink(authUser.getTpAvatarLink());\n\tif (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext()!= null && authUser.getAuthContext().getPassword()!= null) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().getPassword()));\n\t}\n\tuser.setConnections(newHashSet(toAuthConnection(authUser)));\n\tuser.setIsNewUser(true);\n\treturn repository.save(user);\n}", "CodeBleu_score": 42.429420853506464}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn connectionRepository.createConnection(user, email)\n\t\t.flatMap(connection -> {\n\t\t\tuser.addConnection(connection);\n\t\t\treturn userRepository.save(user);\n\t\t})\n\t\t.map(u -> true)\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t.onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 17.41710368375877}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(user)\n.flatMap(this::getUserConnections)\n.flatMap(connections -> {\nif (connections.contains(email)) {\nreturn Mono.just(false);\n} else {\nreturn Mono.just(user)\n.flatMap(u -> {\nConnection connection = new Connection();\nconnection.setSource(email);\nconnection.setRawId(email);\nconnection.setName(email);\nreturn connectionRepository.save(connection);\n})\n.flatMap(connection -> {\nuser.getConnections().add(connection);\nreturn userRepository.save(user);\n})\n.map(u -> true)\n.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}\n});\n}", "CodeBleu_score": 35.61592469537974}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn connectionRepository.findByUserIdAndProviderIdAndProviderUserId(user.getId(), EMAIL_PROVIDER_ID, email)\n\t\t.flatMap(existingConnection -> {\n\t\t\treturn Mono.error(new DuplicateKeyException(\"Email \" + email + \" is already bound to another user\"));\n\t\t})\n\t\t.switchIfEmpty(connectionRepository.save(new Connection(user.getId(), EMAIL_PROVIDER_ID, email, email)))\n\t\t.flatMap(connection -> {\n\t\t\treturn userRepository.save(user);\n\t\t})\n\t\t.map(user -> true)\n\t\t.onErrorResume(error -> {\n\t\t\tif (error instanceof DuplicateKeyException) {\n\t\t\t\treturn Mono.just(false);\n\t\t\t} else {\n\t\t\t\treturn Mono.error(error);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 35.16996133184048}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tturn findById(userId)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (encryptionService.matchPassword(oldPassword, user.getPassword())) {\n\t\t\t\t\tuser.setPassword(encryptionService.encryptPassword(newPassword));\n\t\t\t\t\treturn repository.save(user).thenReturn(true);\n\t\t\t\t} else {\n\t\t\t\t\treturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 24.218558330033417}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tturn findById(userId)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (!encryptionService.matchPassword(oldPassword, user.getPassword())) {\n\t\t\t\t\treturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n\t\t\t\t}\n\n\t\t\t\tuser.setPassword(encryptionService.encryptPassword(newPassword));\n\t\t\t\treturn repository.save(user);\n\t\t\t})\n\t\t\t.thenReturn(true);\n}", "CodeBleu_score": 23.43835779726345}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n   .flatMap(user -> {\n        if (encryptionService.matchPassword(oldPassword, user.getPassword())) {\n            user.setPassword(encryptionService.encryptPassword(newPassword));\n            return repository.save(user);\n        } else {\n            return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n        }\n    })\n   .thenReturn(true);\n}", "CodeBleu_score": 26.82977121378948}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tturn getOrgId(orgMember)\n\t\t\t.flatMapMany(orgId -> {\n\t\t\t\tif (isAdmin(orgMember)) {\n\t\t\t\t\treturn getNonDynamicUserGroupIdsInOrg(orgId);\n\t\t\t\t} else if (withoutDynamicGroups) {\n\t\t\t\t\treturn getUserGroupIdsInOrg(orgId);\n\t\t\t\t} else {\n\t\t\t\t\treturn of(orgMember.getGroups());\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter(groupId ->!isAllUsersGroup(groupId))\n\t\t\t.flatMap(groupId -> {\n\t\t\t\treturn getUserGroup(groupId, locale)\n\t\t\t\t\t\t.map(group -> {\n\t\t\t\t\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\t\t\t\t\tgroupMap.put(\"groupId\", groupId);\n\t\t\t\t\t\t\tgroupMap.put(\"groupName\", group.getName());\n\t\t\t\t\t\t\treturn groupMap;\n\t\t\t\t\t\t});\n\t\t\t})\n\t\t\t.collectList();\n}", "CodeBleu_score": 31.205384188982666}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t", "CodeBleu_score": 5.956160929320657}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tturn userGroupService.getNonDynamicUserGroupIdsInOrg(orgMember.getOrgId())\n\t\t\t.flatMapMany(ids -> userGroupService.getByIds(ids))\n\t\t\t.filter(userGroup ->!userGroup.isAllUsersGroup())\n\t\t\t.map(userGroup -> {\n\t\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\t\tgroupMap.put(\"id\", userGroup.getId());\n\t\t\t\tgroupMap.put(\"name\", userGroup.getName(locale));\n\t\t\t\treturn groupMap;\n\t\t\t})\n\t\t\t.collectList();\n}", "CodeBleu_score": 27.969500414589643}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.upsert(userStatus)\n\t\t\t.map(result -> true);\n}", "CodeBleu_score": 32.01959147210006}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(\n\t\tUserStatus.class,\n\t\tnew UserStatus(userId, true),\n\t\tUserStatus.class,\n\t\tuserId\n\t);\n}", "CodeBleu_score": 14.68429338150675}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class)\n\t\t\t.map(UpdateResult::wasAcknowledged);\n}", "CodeBleu_score": 30.453689696505215}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate must not be nil\")\n\t}\n\tg := &sync.WaitGroup{}\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.Name(), partition) {\n\t\t\tg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer g.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}(partition)\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 38.55236391962665}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg := new(sync.WaitGroup)\n\tfor k, p := range c.partitions {\n\t\tif!predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\t\tg.Add(1)\n\t\tgo func(k string, p PartitionManager) {\n\t\t\tdefer g.Done()\n\t\t\tp.clearMatching(predicateValue)\n\t\t}(k, p)\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 44.67140672872103}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg := &sync.WaitGroup{}\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\tg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer g.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 38.475420156736774}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(avgWeightPerPartition))\n}", "CodeBleu_score": 39.41159977215292}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(fmt.Errorf(\"invalid input: numPartitions=%d, totalWeightQuantity=%d\", numPartitions, totalWeightQuantity))\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(avgWeightPerPartition))\n}", "CodeBleu_score": 54.245720612745}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(fmt.Sprintf(\"invalid input: numPartitions=%d, totalWeightQuantity=%d\", numPartitions, totalWeightQuantity))\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(avgWeightPerPartition))\n}", "CodeBleu_score": 54.24674965244405}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = getConnectionMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"db_product_name\", metadata.getDatabaseProductName());\n\t\tmap.put(\"db_product_version\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 42.189932906220264}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tMono<ConnectionMetadata> connectionMetadata = getConnectionMetadata();\n\tconnectionMetadata.subscribe(metadata -> {\n\t\tif (metadata!= null) {\n\t\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t\t}\n\t});\n\treturn map;\n}", "CodeBleu_score": 44.009170610724915}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tConnectionMetadata metadata = getConnectionMetadata();\n\tif (metadata!= null) {\n\t\tcontributorMap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tcontributorMap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 41.03953264273347}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.userSettings == null) {\n\t\tinfo.setAllowRegistration(false)\n\t\tinfo.setMustVerifyEmailOnRegistration(false)\n\t} else {\n\t\tinfo.setAllowRegistration(configMap.userSettings.allowRegistration)\n\t\tinfo.setMustVerifyEmailOnRegistration(configMap.userSettings.mustVerifyEmailOnRegistration)\n\t}\n}", "CodeBleu_score": 25.652559222019555}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tdef userSetting = configMap.userSetting\n\tif (userSetting) {\n\t\tinfo.setAllowRegistration(userSetting.allowRegistration)\n\t\tinfo.setMustVerifyEmailOnRegistration(userSetting.mustVerifyEmailOnRegistration)\n\t} else {\n\t\tinfo.setAllowRegistration(false)\n\t\tinfo.setMustVerifyEmailOnRegistration(false)\n\t}\n}", "CodeBleu_score": 36.2151459638415}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tdef userSettings = configMap.getUserSettings()\n\tif (userSettings == null) {\n\t\tinfo.setAllowRegistration(false)\n\t\tinfo.setMustVerifyEmailOnRegistration(false)\n\t} else {\n\t\tinfo.setAllowRegistration(userSettings.getAllowRegistration())\n\t\tinfo.setMustVerifyEmailOnRegistration(userSettings.getMustVerifyEmailOnRegistration())\n\t}\n}", "CodeBleu_score": 36.900276517913035}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThread thread = new Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tThread.currentThread().start();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.setName(\"restart-thread\");\n\tthread.start();\n\treturn \"Application restart has begun.\";\n}", "CodeBleu_score": 38.54690603549082}, {"code": "public Object restart(){\n\t\tThread thread = new Thread(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tThread.currentThread().setName(\"Restart Thread\");\n\t\t\t\trestartApplication();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Exception occurred during restart\", e);\n\t\t\t}\n\t\t}\n\t});\n\tthread.start();\n\treturn \"Restart has begun\";\n}", "CodeBleu_score": 38.830786791809125}, {"code": "public Object restart(){\n\t\tThreadGroup restartThreadGroup = new ThreadGroup(\"restart\");\n\tThread restartThread = new Thread(restartThreadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\trestart();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.setContextClassLoader(getClass().getClassLoader());\n\trestartThread.start();\n\treturn \"Restart has begun\";\n}", "CodeBleu_score": 40.26784367067059}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().maxInMemorySize(this.maxInMemorySize);\n\tif (this.prettyPrint) {\n\t\tconfigurer.defaultCodecs().prettyPrint();\n\t}\n\tif (this.jackson2Present) {\n\t\tJackson2CodecSupport.extendMessageConverters(configurer.getCodecConfigurer(), this.objectMapper);\n\t}\n}", "CodeBleu_score": 31.22079402787015}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n}", "CodeBleu_score": 40.14004898603382}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonDecoder(this.jackson2JsonDecoder);\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(this.jackson2JsonEncoder);\n}", "CodeBleu_score": 39.95038682585849}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.path(\"/console/assets/**\").negate()),\n\t\tthis::serveIndex);\n}", "CodeBleu_score": 19.775382160532732}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.path(\"/console/assets/**\").negate())\n\t\t\t.and(RequestPredicates.header(\"Upgrade\").negate()),\n\t\tthis::serveIndex\n\t);\n}", "CodeBleu_score": 22.78410620026106}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(\n    RequestPredicates.GET(\"/console/**\")\n       .and(RequestPredicates.path(\"/console/assets/**\").negate())\n       .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n       .and(RequestPredicates.not(RequestPredicates.upgradeToWebSocket())),\n    this::serveIndex\n);\n}", "CodeBleu_score": 25.60523744159344}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tturn RouterFunctions.route(\n    RequestPredicates.GET(\"/uc/**\")\n       .and(RequestPredicates.path(\"/uc/assets/**\").negate())\n       .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n       .and(RequestPredicates.method(HttpMethod.GET))\n       .and(RequestPredicates.header(\"Upgrade\").negate()),\n    this::serveIndex)\n   .andRoute(RequestPredicates.GET(\"/uc\").and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 26.818901997038076}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tturn RouterFunctions.route(\nRequestPredicates.GET(\"/uc/**\")\n.and(RequestPredicates.path(\"/uc/assets/**\").negate())\n.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n.and(RequestPredicates.method(HttpMethod.GET))\n.and(RequestPredicates.header(\"Upgrade\").negate()),\nthis::serveIndex)\n.filter(new RedirectToIndexFilter());\n}", "CodeBleu_score": 25.72615266679034}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.path(\"/uc/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.method(HttpMethod.GET))\n\t\t\t.and(RequestPredicates.header(HttpHeaders.CONNECTION, \"Upgrade\").negate()),\n\t\tthis::serveIndex\n\t);\n}", "CodeBleu_score": 24.72977930136665}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tget {\n\t\tif (reactiveSessionRepository == null) {\n\t\t\treactiveSessionRepository = new ReactiveIndexedSessionRepository<MapSession>(new ConcurrentHashMap<>());\n\t\t\treactiveSessionRepository.setSessionTimeout(session.timeout);\n\t\t\treactiveSessionRepository.setDefaultMaxInactiveInterval(server.sessionTimeout);\n\t\t}\n\t\treturn reactiveSessionRepository;\n\t}\n}", "CodeBleu_score": 32.28113913304959}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tdef sessionRepository = new ConcurrentMapSessionRepository(new MapSessionRepository())\n\tsessionRepository.setDefaultMaxInactiveInterval(sessionConfig.timeout)\n\treturn sessionRepository\n}", "CodeBleu_score": 18.948548171308303}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<String, MapSession>(), new DefaultReactiveSessionRepositoryIndex(new DefaultReactiveSessionIndexResolver()));\n}", "CodeBleu_score": 13.842726246118236}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n\tuserDetailsService.userService = userService\n\tuserDetailsService.roleService = roleService\n\tuserDetailsService.twoFactorAuthEnabled = haloProperties.getSecurity().getTwoFactorAuth().isEnabled()\n\treturn userDetailsService\n}", "CodeBleu_score": 33.60345176522756}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n\tuserDetailsService.userService = userService\n\tuserDetailsService.roleService = roleService\n\tuserDetailsService.setTwoFactorAuthDisabled(haloProperties.security.twoFactorAuthDisabled)\n\treturn userDetailsService\n}", "CodeBleu_score": 31.123446026024936}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService)\n\tdefaultUserDetailService.setTwoFactorAuthDisabled(haloProperties.security.twoFactorAuth.disabled)\n\tdefaultUserDetailService\n}", "CodeBleu_score": 33.90497156746269}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\ncommentOwner.setKind(\"email\");\ncommentOwner.setEmail(this.email);\ncommentOwner.setDisplayName(this.displayName);\ncommentOwner.setAvatarUrl(this.avatarUrl);\ncommentOwner.setWebsite(this.website);\nreturn commentOwner;\n}", "CodeBleu_score": 31.417037936087805}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setEmail(defaultString(getEmail()));\n\tcommentOwner.setDisplayName(defaultString(getDisplayName()));\n\tcommentOwner.setAvatar(new Comment.CommentOwner.Avatar());\n\tcommentOwner.setWebsite(new Comment.CommentOwner.Website());\n\treturn commentOwner;\n}", "CodeBleu_score": 36.973057083009344}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\nowner.setKind(\"email\");\nowner.setEmail(getEmail());\nowner.setDisplayName(getDisplayName());\nowner.setAvatarUrl(getAvatarUrl());\nowner.setWebsiteUrl(getWebsiteUrl());\nreturn owner;\n}", "CodeBleu_score": 22.97992072739483}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"email\")) {\n\t\tUser user = fetch(User.class, commentOwner.getName());\n\t\treturn user.getEmail().equals(post.getOwner().getEmail());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 32.47935917281168}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == \"email\") {\n\t\tUser user = fetch(User.class, post.getOwner());\n\t\treturn user.getEmail().equals(commentOwner.getEmail());\n\t} else {\n\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 31.708057297778993}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == \"email\") {\n\t\tUser user = fetch(commentOwner.getName())\n\t\treturn user.getEmail() == post.getOwner().getEmail()\n\t}\n\treturn commentOwner.getName() == post.getOwner().getName()\n}", "CodeBleu_score": 26.196138798230834}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\ttOptions options = new ListOptions();\n\n// Build field query from selectors\nString fieldQuery = getFieldSelector();\nif (StringUtils.isNotBlank(fieldQuery)) {\n    options.setLabelSelector(fieldQuery);\n}\n\n// Add conditions based on keyword and owner name\nString keyword = getKeyword();\nString ownerName = getOwnerName();\nif (StringUtils.isNotBlank(keyword) || StringUtils.isNotBlank(ownerName)) {\n    String condition = \"\";\n    if (StringUtils.isNotBlank(keyword)) {\n        condition += \"keyword=\" + keyword;\n    }\n    if (StringUtils.isNotBlank(ownerName)) {\n        if (StringUtils.isNotBlank(condition)) {\n            condition += \",\";\n        }\n        condition += \"ownerName=\" + ownerName;\n    }\n    if (StringUtils.isNotBlank(condition)) {\n        if (StringUtils.isNotBlank(fieldQuery)) {\n            fieldQuery += \",\";\n        }\n        fieldQuery += \"(\" + condition + \")\";\n    }\n}\n\n// Set field selector in ListOptions\nif (StringUtils.isNotBlank(fieldQuery)) {\n    options.setLabelSelector(fieldQuery);\n}\n\nreturn options;\n}", "CodeBleu_score": 38.371861564913864}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nString fieldSelector = getFieldSelector();\nif (fieldSelector!= null) {\nlistOptions.setFields(fieldSelector);\n}\nString keyword = getKeyword();\nif (keyword!= null) {\nlistOptions.addCondition(\"metadata.name\", \"contains\", keyword);\n}\nString ownerName = getOwnerName();\nif (ownerName!= null) {\nlistOptions.addCondition(\"metadata.ownerReferences.name\", \"equal\", ownerName);\n}\nreturn listOptions;\n}", "CodeBleu_score": 28.700233038362494}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nString fieldSelector = getFieldSelector();\nif (StringUtils.isNotBlank(fieldSelector)) {\nlistOptions.fieldSelector(fieldSelector);\n}\nString keyword = getKeyword();\nString ownerName = getOwnerName();\nif (StringUtils.isNotBlank(keyword) || StringUtils.isNotBlank(ownerName)) {\nList<Condition> conditions = new ArrayList<>();\nif (StringUtils.isNotBlank(keyword)) {\nconditions.add(new Condition(\"metadata.name\", Operator.CONTAINS, keyword));\n}\nif (StringUtils.isNotBlank(ownerName)) {\nconditions.add(new Condition(\"metadata.ownerReferences.name\", Operator.EQUAL, ownerName));\n}\nlistOptions.fieldSelector(labelAndFieldSelectorToListOptions(conditions));\n}\nreturn listOptions;\n}", "CodeBleu_score": 38.848188459441566}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t.flatMap(this::getCounter)\n\t.map(this::upvote)\n\t.map(this::getUpvote)\n\t.map(this::build)\n\t.defaultIfEmpty(CommentStats.builder().build());\n}", "CodeBleu_score": 32.073522599853476}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.flatMap(this::getCounter)\n\t\t.map(this::map)\n\t\t.defaultIfEmpty(CommentStats.builder().build());\n}", "CodeBleu_score": 29.831432697150685}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.just(commentName)\n\t\t.filter(Objects::nonNull)\n\t\t.flatMap(this::getCounter)\n\t\t.map(this::mapToStats)\n\t\t.defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 27.502184319993106}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given user identity\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\treturn;\n\t}\n\n\t// Set up an interest reason for the subscription\n\tInterestReason reason = new InterestReason();\n\treason.setReasonType(\"someone replied to you\");\n\treason.setExpression(\"repliedOwner == '\" + identity.name() + \"'\");\n\n\t// Subscribe the user to the notification center\n\tsubscribe(subscriber, reason, true);\n}", "CodeBleu_score": 47.48787470024786}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create the subscriber from the given user identity\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\treturn;\n\t}\n\n\t// Set up an interest reason for the subscription\n\tInterestReason reason = new InterestReason();\n\treason.setReasonType(\"someone replied to you\");\n\treason.setExpression(\"replied_owner == '\" + subscriber.getName() + \"'\");\n\n\t// Subscribe the user to the notification center\n\tsubscribe(subscriber, reason);\n}", "CodeBleu_score": 45.94004614910373}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription.Subscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\treturn;\n\t}\n\n\tSubscription.InterestReason reason = new Subscription.InterestReason();\n\treason.setReasonType(\"someone replied to you\");\n\treason.setCondition(\"replied_owner == \" + subscriber.getName());\n\n\tSubscription subscription = new Subscription();\n\tsubscription.setSubscriber(subscriber);\n\tsubscription.setInterestReason(reason);\n\n\tnotificationCenter.subscribe(subscription);\n\tblock();\n}", "CodeBleu_score": 50.879966638118646}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\turn updateCommentWithRetry(comment.getName(), c -> {\n\t\tc.setApproved(true);\n\t\tc.setApprovedTime(now());\n\t\treturn c;\n\t});\n}", "CodeBleu_score": 17.011158291098898}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\turn updateCommentWithRetry(comment.getName(), c -> {\n\t\tc.setApproved(true);\n\t\tc.setApprovedTime(now());\n\t\treturn c;\n\t});\n}", "CodeBleu_score": 17.011158291098898}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn updateCommentWithRetry(comment.getName(), comment1 -> {\n    comment1.setApproved(true);\n    comment1.setApprovedTime(now());\n    return comment1;\n});\n}", "CodeBleu_score": 19.179596485940063}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this->getLivewire();\n\t}\n\n\tif ($action instanceof HasRecord && $this->getRecord()) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 44.81198831367135}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this->getLivewire();\n\t}\n\n\tif ($action instanceof HasRecord && $this->getRecord()!== null) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 44.98757503782597}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire = $this->getLivewire();\n\t}\n\n\tif ($action instanceof HasRecord && $this->getRecord()) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 44.81198831367135}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif ($this->successRedirectUrl) {\n\t\t$this->redirect($this->successRedirectUrl);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 31.106963402230292}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->evaluate($this->getSuccessRedirectUrl());\n\n\treturn $this;\n}", "CodeBleu_score": 19.25914259270999}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$url = $this->evaluate($this->successRedirectUrl);\n\n\tif (! $url) {\n\t\treturn $this;\n\t}\n\n\t$this->redirect($url);\n\n\treturn $this;\n}", "CodeBleu_score": 69.74343437225768}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (is_null($record) ||!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagClassName = $record->tags()->getRelated()->getMorphClass();\n\n\t$tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n\t\t$locale = $tagClassName::getLocale();\n\n\t\t$tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n\t\tif ($tag?->isEmpty()?? true) {\n\t\t\t$tag = $tagClassName::create([\n\t\t\t\t'name' => [$locale => $tagName],\n\t\t\t]);\n\t\t}\n\n\t\treturn $tag;\n\t})->flatten();\n\n\t$record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 72.51493088801404}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t", "CodeBleu_score": 7.242990654205607}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect leaf: %w\", err)\n\t}\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeRepository,\n\t\tName: repoName,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\tif err := authz.Check(ctx, authorizer, session, scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 64.48991190677147}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\t// Create a scope and resource for the pipeline\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tName: spacePath,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\t// Perform the permission check\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"permission check failed: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 65.87373294064291}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{\n\t\tType:  authz.ScopeTypePipeline,\n\t\tSpace: spacePath,\n\t\tName:  repoName,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 70.1203865859676}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path to get the parent space and name.\n\tspaceParent, spaceName := paths.DisectLeaf(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tID:   spaceParent,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tID:   spaceName,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.9938094417219}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope := authz.ScopeSpace\n\tresource := space.Path\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 24.015441998304905}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif session == nil {\n\t\treturn nil\n\t}\n\n\tspacePath := space.Path()\n\tparentSpace, name := paths.DisectLeaf(spacePath)\n\tscope := authz.Scope{\n\t\tType: authz.Space,\n\t\tID:   parentSpace,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.Space,\n\t\tID:   name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 63.53665947696058}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\t\tsource = b\n\t}\n\n\tvar sanitized bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&sanitized); err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode source: %w\", err)\n\t}\n\n\tencoder := json.NewEncoder(&sanitized)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(data); err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode data: %w\", err)\n\t}\n\n\tsanitized.Truncate(sanitized.Len() - 1) // Remove trailing newline\n\treturn sanitized.Bytes(), nil\n}", "CodeBleu_score": 59.82460610138588}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\tvar sanitized bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tencoder := json.NewEncoder(&sanitized)\n\tencoder.SetEscapeHTML(false)\n\tif err := decoder.Decode(&data); err!= nil {\n\t\treturn nil, err\n\t}\n\tsanitized.Grow(sanitized.Len() + 1)\n\tif err := encoder.Encode(&data); err!= nil {\n\t\treturn nil, err\n\t}\n\tsanitized.Truncate(sanitized.Len() - 1)\n\treturn sanitized.Bytes(), nil\n}", "CodeBleu_score": 47.29867247763462}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tif data == nil {\n\t\t\treturn nil, nil\n\t\t}\n\t\tsanitized, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn sanitized, nil\n\t}\n\tvar sanitized bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&data); err!= nil {\n\t\treturn nil, err\n\t}\n\tencoder := json.NewEncoder(&sanitized)\n\tif err := encoder.Encode(data); err!= nil {\n\t\treturn nil, err\n\t}\n\tsanitized.Truncate(sanitized.Len() - 1)\n\treturn sanitized.Bytes(), nil\n}", "CodeBleu_score": 51.33678723894285}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := c.repoStore.ValidateRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest.Wrap(err, \"invalid repository reference\")\n\t}\n\t// Fetch the repository using the reference.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\t// Check the required permissions for the session on the repository.\n\tif err := c.auth.CheckRepo(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 50.55833906166172}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions for the session on the repository.\n\tif err := c.repoStore.CheckAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.60194531891945}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\tif err := git.ValidateReference(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest(\"Invalid repository reference\")\n\t}\n\n\t// Fetch the repository using the reference\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions for the session on the repository\n\tif err := c.repoAuth.CheckRepo(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 54.486534122686024}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\theckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn checkSanitizers\n}", "CodeBleu_score": 64.0846090158998}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizerMap := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizerMap[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizerMap\n}", "CodeBleu_score": 61.84370390980073}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.state.attached_to_renderer then\n\t\treturn self\n\tend\n\tself.state.on_render = on_render\n\tself.state.attached_to_renderer = true\n\tself.state.renderer:add_buffer(self)\n\treturn self", "CodeBleu_score": 52.727458229484924}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.renderer then\n\t\tself.renderer = self.state.renderer\n\t\tself.renderer:attach(self)\n\tend\n\treturn self", "CodeBleu_score": 52.291836981111054}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.renderer then\n\t\tself.state.renderer = self.renderer\n\t\tself.state.renderer:attach(self)\n\tend\n\treturn self", "CodeBleu_score": 53.505836535552255}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif not self:is_valid() or not callback then\n\t\treturn\n\tend\n\tlocal watcher = self.watcher\n\tif not watcher then\n\t\twatcher = vim.loop.new_fs_event()\n\t\tself.watcher = watcher\n\tend\n\tlocal filename = self:get_name()\n\tif not filename then\n\t\treturn\n\tend\n\twatcher:start(filename, {}, function(_, _, event)\n\t\tif event == \"change\" then\n\t\t\tcallback()\n\t\tend\n\tend)", "CodeBleu_score": 46.974850563777714}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tself.watcher:watch_file(self.filename, callback)\n\tend", "CodeBleu_score": 23.265858420920353}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tself.watcher = loop.coroutine(function()\n\t\t\tlocal filename = self:get_filename()\n\t\t\tlocal last_mtime = lfs.attributes(filename, \"modification\")\n\t\t\twhile true do\n\t\t\t\tlocal new_mtime = lfs.attributes(filename, \"modification\")\n\t\t\t\tif new_mtime ~= last_mtime then\n\t\t\t\t\tlast_mtime = new_mtime\n\t\t\t\t\tcallback()\n\t\t\t\tend\n\t\t\t\tloop.sleep(0.1)\n\t\t\tend\n\t\tend)\n\tend", "CodeBleu_score": 43.07058812767117}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal spec = self.spec\n\tlocal attr = self.attr\n\tlocal ok, color = pcall(vim.api.nvim_get_hl_by_name, attr, { rgb = true })\n\tif not ok then return end\n\tif not color then return end\n\tif not color.foreground and not color.background then return end\n\tlocal hex = color[attr]\n\tif not hex then return end\n\tself.hex = bit.tohex(hex)\n\treturn self.hex", "CodeBleu_score": 56.36968422982041}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal spec = self.spec\n\tlocal attr = spec.fg and 'fg' or 'bg'\n\tlocal hl = vim.api.nvim_get_hl_by_name(spec[attr], true)\n\tif not hl then return end\n\tlocal color = hl[attr]\n\tif not color then return end\n\tlocal hex = bit.tohex(color, true)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 58.148622799868285}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal spec = self.spec\n\tlocal attr = self.is_foreground and 'foreground' or 'background'\n\tlocal hl = vim.api.nvim_get_hl_by_name(attr, {\n\t\tfg = spec.foreground,\n\t\tbg = spec.background,\n\t\tbold = spec.bold,\n\t\titalic = spec.italic,\n\t\tunderline = spec.underline,\n\t\tstrikethrough = spec.strikethrough,\n\t})\n\tif not hl then return end\n\tlocal r, g, b = hl.foreground % 256, (hl.foreground / 256) % 256, hl.foreground / 65536\n\tself.hex = string.format('#%02x%02x%02x', r, g, b)\n\treturn self.hex", "CodeBleu_score": 56.29842215178097}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\n\tfor row, line in ipairs(lines) do\n\t\tfor col_top, col_end in line:find(pattern) do\n\t\t\tbuffer:add_highlight(hl, row - 1, col_top - 1, col_end - 1)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 38.34933643709873}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tfor _, match in ipairs({ line:find(pattern) }) do\n\t\t\tbuffer:add_highlight(hl, i - 1, match - 1, match + #pattern - 1)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 40.41925797977371}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor row, line in ipairs(lines) do\n\t\tfor col_start, col_end in line:find(pattern) do\n\t\t\tbuffer:add_highlight(hl, row - 1, col_start - 1, col_end - 1)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 38.46617840628111}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format(\"%d:%d\", row, col)\n\tlocal mark = vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos or \"eol\",\n\t\tvirt_text_priority = priority or 100,\n\t})\n\tNamespace.marks[id] = mark\n\treturn id", "CodeBleu_score": 58.581754591858704}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row.. \":\".. col\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos or 'overlay',\n\t\tvirt_text_priority = priority or 100\n\t})\n\tNamespace.virtual_text_extmarks[id] = extmark\n\treturn id", "CodeBleu_score": 59.771447819662704}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format(\"%s:%s:%s\", buffer, row, col)\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.virtual_text_ns, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos or \"overlay\",\n\t\tvirt_text_priority = priority or 100,\n\t})\n\tNamespace.virtual_text_map[id] = extmark\n\treturn id", "CodeBleu_score": 57.56484678204685}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 26.129737275189658}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 22.16746728091925}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\tlocal watcher = vim.loop.new_fs_event()\n\twatcher:start(path, {}, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 42.7732459010993}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\tlocal watcher = vim.loop.new_fs_event()\n\twatcher:start(path, {}, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 42.7732459010993}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\tlocal watcher = vim.loop.new_fs_event()\n\twatcher:start(path, {}, handler)\n\tself.watchers[path] = watcher\n\n\treturn watcher", "CodeBleu_score": 42.7732459010993}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks.error then\n\t\treturn hunks\n\tend\n\tlocal signs_setting = self.signs_setting:get()\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = self.namespace:get_sign_ns_id(line)\n\t\t\tlocal sign_name = signs_setting[hunk.type]\n\t\t\tif sign_name then\n\t\t\t\tself.namespace:set_sign(line, sign_name, {\n\t\t\t\t\tpriority = signs_setting.priority[hunk.type],\n\t\t\t\t\tgroup = 'gitsigns',\n\t\t\t\t\tname = sign_name,\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tself.namespace:del_sign(line)\n\t\t\tend\n\t\tend\n\tend\n\tself.namespace:update_signs()\n\treturn hunks", "CodeBleu_score": 45.628715812683055}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks, err = self.git_object:live_hunks(lines)\n\tif err then\n\t\treturn nil, err\n\tend\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = self.namespace:get_sign_ns_id(line.line_nr)\n\t\t\tlocal sign_type = line.type\n\t\t\tlocal sign_priority = 10\n\t\t\tif sign_type == \"hunk_start\" then\n\t\t\t\tsign_priority = 10\n\t\t\telseif sign_type == \"hunk_end\" then\n\t\t\t\tsign_priority = 9\n\t\t\telseif sign_type == \"addition\" then\n\t\t\t\tsign_priority = 8\n\t\t\telseif sign_type == \"deletion\" then\n\t\t\t\tsign_priority = 7\n\t\t\telseif sign_type == \"context\" then\n\t\t\t\tsign_priority = 6\n\t\t\tend\n\t\t\tsigns[sign_id] = {\n\t\t\t\tname = sign_type,\n\t\t\t\tpriority = sign_priority,\n\t\t\t\tlnum = line.line_nr\n\t\t\t}\n\t\tend\n\tend\n\tself:set_signs(signs)\n\treturn hunks", "CodeBleu_score": 48.98491173817832}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal ok, lines = pcall(self.buf:get_lines, 0, -1, true)\n\tif not ok then\n\t\treturn nil, lines\n\tend\n\tlocal hunks = self.git_object:hunks(lines)\n\tif not hunks then\n\t\treturn nil, \"hunks error\"\n\tend\n\tlocal signs_setting = self:signs_setting()\n\tif not signs_setting then\n\t\treturn nil, \"signs_setting error\"\n\tend\n\tlocal sign_ns_id = self.namespace:get_sign_ns_id()\n\tif not sign_ns_id then\n\t\treturn nil, \"sign_ns_id error\"\n\tend\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor line, line_type in ipairs(hunk) do\n\t\t\tlocal sign_id = sign_ns_id.. line\n\t\t\tlocal sign_name = signs_setting[line_type]\n\t\t\tif sign_name then\n\t\t\t\tsigns[sign_id] = { name = sign_name, priority = 10 }\n\t\t\tend\n\t\tend\n\tend\n\tself.buf:set_extmark_namespace(sign_ns_id)\n\tself.buf:set_signs(signs)\n\treturn hunks", "CodeBleu_score": 45.43140528892768}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal filepath = fs.tmpname()\n\tlocal lines = {}\n\n\tfor i = 1, #patch do\n\t\tlines[#lines + 1] = patch[i]\n\tend\n\n\tfs.write_file(filepath, lines)\n\n\tlocal _, err = self.git:stage_hunk_from_file(filepath)\n\n\tfs.remove_file(filepath)\n\n\treturn err", "CodeBleu_score": 53.381038730666354}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\n\tfs.write_file(tmpfile, patch)\n\n\tlocal err = self:stage_hunk(tmpfile)\n\n\tfs.remove_file(tmpfile)\n\n\treturn err", "CodeBleu_score": 41.360130554845995}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = fs.tmpname()\n\n\tfs.write_file(tmp_file, patch)\n\n\tlocal _, err = self.git:stage_hunk(tmp_file)\n\n\tfs.remove_file(tmp_file)\n\n\treturn err", "CodeBleu_score": 43.51675497088055}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(config.getAccessTokenVerb(), config.getAccessTokenEndpoint());\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(\"grant_type\", \"authorization_code\");\n\trequest.addBodyParameter(\"code\", verifier.getValue());\n\trequest.addBodyParameter(\"redirect_uri\", config.getCallback());\n\tResponse response = request.send();\n\treturn config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 61.8843510759415}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(config.getAccessTokenVerb(), config.getAccessTokenEndpoint());\n\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\n\tResponse response = send(request);\n\n\treturn config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 56.05272698622028}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint(), null, config);\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\tResponse response = send(request);\n\treturn getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 49.221767315799084}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlogger.info(\"Added host to auth cache: \" + host.getHostName());\n}", "CodeBleu_score": 51.85196989919363}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), credentials);\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added host {} to authentication cache\", host);\n}", "CodeBleu_score": 51.202030751734874}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Adding host to auth cache: \" + host);\n}", "CodeBleu_score": 60.959283999656634}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance not found\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache not found\");\n\t}\n\tString key = cache.encode(source);\n\tcache.seed(key, source);\n\ttry {\n\t\treturn jenkins.getRootUrl() + ActionURI + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding not supported\", e);\n\t}\n}", "CodeBleu_score": 50.22547044610568}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tnkins jenkins = Jenkins.getInstance();\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"No AvatarCache extension is registered\");\n}\nString key = cache.encode(source);\ncache.seed(key, source);\nString url = jenkins.getRootUrl() + ActionURI + \"/\" + size + \"/\" + key;\ntry {\nurl = URLEncoder.encode(url, \"UTF-8\");\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(e);\n}\nreturn url;\n}", "CodeBleu_score": 48.38991400055291}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tenkins jenkins = Jenkins.getInstanceOrNull();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is not ready\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"Avatar cache is not available\");\n\t}\n\tString key = cache.hashKey(source);\n\tcache.seed(source);\n\tString url = jenkins.getRootUrl() + ActionURI + \"/\" + rawEncode(key) + \"/\" + size;\n\ttry {\n\t\turl = URLEncoder.encode(url, \"UTF-8\");\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n\t}\n\treturn url;\n}", "CodeBleu_score": 52.3898778649358}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = scaleImage(image, 128);\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t} else {\n\t\tthis.lastModified = lastModified;\n\t}\n}", "CodeBleu_score": 43.51321229720695}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = scaleImage(image, 128);\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 41.1118594656793}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = scaleImage(image, 128);\nthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 42.70239634273193}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tentry = future.get();\n\t\t\tentry.image = image;\n\t\t\tentry.lastModified = lastModified;\n\t\t\tfuture = null;\n\t\t} catch (Exception e) {\n\t\t\tfuture = null;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 40.2678627131154}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tdef entry = future.get()\n\t\t\timage = entry.image\n\t\t\tlastModified = entry.lastModified\n\t\t\tfuture = null\n\t\t} catch (Exception e) {\n\t\t\tfuture = null\n\t\t\treturn true\n\t\t}\n\t}\n\treturn true\n}", "CodeBleu_score": 28.457397587505067}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tentry = future.get();\n\t\t\tfuture = null;\n\t\t\timage = entry.image;\n\t\t\tlast = entry.last;\n\t\t\treturn false;\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\treturn true;\n\t\t}\n\t\tcatch (ExecutionException e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 47.110575714781135}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// Generate the image\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nboolean flush = req.getParameter(\"flush\")!= null;\nif (flush) {\n// Forces the image to be re-rendered\ngenerateImage(baos, node);\n} else {\n// Caches the image for 10 minutes\nrsp.addDateHeader(\"Expires\", System.currentTimeMillis() + 10 * 60 * 1000);\nrsp.addHeader(\"Cache-Control\", \"max-age=600\");\n// Write the image to the response\nrsp.setContentType(\"image/png\");\ngenerateImage(baos, node);\n}\nbaos.writeTo(rsp.getOutputStream());\nrsp.getOutputStream().flush();\n}", "CodeBleu_score": 40.14252099679605}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n// Generate the image\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nBufferedImage image = generateImage(node);\nImageIO.write(image, \"png\", baos);\n\n// Write the image to the response output stream\nrsp.setContentType(\"image/png\");\nrsp.setContentLength(baos.size());\nrsp.getOutputStream().write(baos.toByteArray());\nrsp.getOutputStream().flush();\n}", "CodeBleu_score": 41.20140253041756}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// Generate the image\nByteArrayOutputStream os = new ByteArrayOutputStream();\ngenerateImage(os);\n\n// Write the image to the response\nrsp.setContentType(\"image/png\");\nrsp.setDateHeader(\"Expires\", System.currentTimeMillis() + 3600000);\nrsp.setContentLength(os.size());\nif (req.isRequestedSessionIdValid()) {\nrsp.setHeader(\"Cache-Control\", \"private\");\n} else {\nrsp.setHeader(\"Cache-Control\", \"public\");\n}\nos.writeTo(rsp.getOutputStream());\nrsp.getOutputStream().flush();\n}", "CodeBleu_score": 36.88298043435181}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t", "CodeBleu_score": 7.452943353488384}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tenableCache = enableCache;\nthis.teamCacheDuration = teamCacheDuration;\nthis.repositoriesCacheDuration = repositoriesCacheDuration;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.authenticator = authenticator;\n\nif (enableCache) {\n    // set up cache expiration for team and repositories\n    setExpireDuration(teamCacheDuration, repositoriesCacheDuration);\n}\n\n// configure an HTTP client with a keep-alive strategy, connection manager, and retry handler\nHttpClientBuilder builder = HttpClientBuilder.create();\nbuilder.setKeepAliveStrategy(DEFAULT_KEEP_ALIVE_STRATEGY);\nsetConnectionManager(builder);\nbuilder.setRetryHandler(DEFAULT_RETRY_HANDLER);\n\n// configure the HTTP client and context for authentication if an authenticator is provided\nif (authenticator!= null) {\n    authenticator.configureContext(context, host);\n    authenticator.configureBuilder(builder);\n}\n\n// set client proxy parameters before building the HTTP client\nsetClientProxyParams(host, builder);\n\n// build the HTTP client\nclient = builder.build();\n}", "CodeBleu_score": 45.68784952027208}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tonfigure caching\nconfigureCaching(enableCache, teamCacheDuration, repositoriesCacheDuration);\n\n// configure HTTP client\nHttpClientBuilder builder = HttpClientBuilder.create();\nbuilder.setKeepAliveStrategy(new BitbucketCloudKeepAliveStrategy());\nbuilder.setConnectionManager(new BasicHttpClientConnectionManager());\nbuilder.setRetryHandler(new BitbucketCloudRetryHandler());\n\n// configure authentication\nif (authenticator!= null) {\n    authenticator.configureContext(context, new HttpHost(BITBUCKET_CLOUD_API_URL));\n    authenticator.configureBuilder(builder);\n}\n\n// configure proxy\nsetClientProxyParams(BITBUCKET_CLOUD_API_URL, builder);\n\n// build the HTTP client\nclient = builder.build();\n}", "CodeBleu_score": 27.514442595886397}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tGet the source branch of the pull request\n\tBitbucketCloudBranch sourceBranch = pullRequest.getSource();\n\t// If the source branch exists, set up a commit closure for it\n\tif (sourceBranch!= null) {\n\t\tString sourceBranchRawNode = sourceBranch.getRawNode();\n\t\tif (sourceBranchRawNode!= null) {\n\t\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceBranchRawNode));\n\t\t}\n\t}\n\t// Get the destination branch of the pull request\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\t// If the destination branch exists, set up a commit closure for it\n\tif (destinationBranch!= null) {\n\t\tString destinationBranchRawNode = destinationBranch.getRawNode();\n\t\tif (destinationBranchRawNode!= null) {\n\t\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationBranchRawNode));\n\t\t}\n\t}\n}", "CodeBleu_score": 37.12799901413092}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tbucketCloudBranch sourceBranch = pullRequest.getSource();\n\tif (sourceBranch!= null) {\n\t\tBitbucketCloudRawNode rawNode = sourceBranch.getRawNode();\n\t\tif (rawNode!= null) {\n\t\t\tsourceBranch.setCommitClosure(new CommitClosure(rawNode.getCommit()));\n\t\t}\n\t}\n\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\tif (destinationBranch!= null) {\n\t\tBitbucketCloudRawNode rawNode = destinationBranch.getRawNode();\n\t\tif (rawNode!= null) {\n\t\t\tdestinationBranch.setCommitClosure(new CommitClosure(rawNode.getCommit()));\n\t\t}\n\t}\n}", "CodeBleu_score": 48.179680005903855}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tGet the source and destination branches of the pull request\n\tBitbucketCloudBranch sourceBranch = pullRequest.getSource();\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\n\t// Set up the closure for the source branch\n\tif (sourceBranch!= null) {\n\t\tString sourceNode = sourceBranch.getRawNode();\n\t\tif (sourceNode!= null) {\n\t\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceNode));\n\t\t}\n\t}\n\n\t// Set up the closure for the destination branch\n\tif (destinationBranch!= null) {\n\t\tString destinationNode = destinationBranch.getRawNode();\n\t\tif (destinationNode!= null) {\n\t\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationNode));\n\t\t}\n\t}\n}", "CodeBleu_score": 36.23646298004066}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tdef rootUrl = Jenkins.getInstance().getRootUrl()\n\tif (rootUrl == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\")\n\t}\n\treturn rootUrl\n}", "CodeBleu_score": 45.510041423523376}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = JenkinsLocationConfiguration.get().getUrl()\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins Location Configuration is not set. Please configure the URL in the Jenkins Location Configuration.\")\n\t}\n\treturn rootURL\n}", "CodeBleu_score": 50.58038766529397}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tfinal JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get()\n\tif (jenkinsLocationConfiguration == null || jenkinsLocationConfiguration.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured\")\n\t}\n\treturn DisplayURLProvider.get().getRoot(build)\n}", "CodeBleu_score": 54.02469849990679}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURI uri = new URI(url)\n\t\tif (uri.getHost() == null) {\n\t\t\tthrow new IllegalStateException(\"The URL \" + url + \" is malformed.\")\n\t\t}\n\t\tif (uri.getHost().equals(\"localhost\")) {\n\t\t\tthrow new IllegalStateException(\"The URL \" + url + \" is not allowed to use localhost as the host.\")\n\t\t}\n\t\tif (uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"The URL \" + url + \" is not allowed to use unconfigured-jenkins-location as the host.\")\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApi &&!uri.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"The URL \" + url + \" is not a fully qualified domain name.\")\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\tthrow new IllegalStateException(\"The URL \" + url + \" is malformed.\", e)\n\t}\n\treturn url\n}", "CodeBleu_score": 56.52258436797688}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tURL parsedUrl = new URL(url)\n\tif (parsedUrl.getHost().equals(\"localhost\") || parsedUrl.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL must not be localhost or unconfigured-jenkins-location\")\n\t}\n\tif (bitbucket instanceof BitbucketCloudApi &&!parsedUrl.getHost().contains(\".\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\")\n\t}\n\treturn url\n}", "CodeBleu_score": 44.45840249575631}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tString host = new URL(url).getHost()\n\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"The Jenkins URL cannot be set to localhost or unconfigured-jenkins-location.\")\n\t}\n\tif (bitbucket instanceof BitbucketCloudApi) {\n\t\tif (!host.contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL must be fully qualified for Bitbucket Cloud API clients.\")\n\t\t}\n\t}\n\treturn url\n}", "CodeBleu_score": 37.32199594607643}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t   BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none())\n//               .withTraits(source.getTraits());\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none())\n               .withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Unable to determine commit hash\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String branch = source.getOriginName();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = buildBitbucketClient(source, listener);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 49.656327028797556}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\ttialize the Bitbucket context and check if notifications are disabled\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.notificationsDisabled()) {\n    listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n    return;\n}\n\n// Retrieve the SCM revision and its hash\nSCMRevision revision = build.getChangeSet().isEmpty()? null : build.getChangeSet().iterator().next().getRevision();\nString hash = getHash(revision);\nif (StringUtils.isBlank(hash)) {\n    listener.getLogger().println(\"[Bitbucket] No commit hash found for the build\");\n    return;\n}\n\n// Determine whether to share the build key between branch and PR\nboolean shareBuildKeyBetweenBranchAndPR = false;\nif (revision instanceof PullRequestSCMRevision) {\n    shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n}\n\n// Log the notification type\nlistener.getLogger().println(\"[Bitbucket] Sending notifications for \" + revision.getClass().getSimpleName());\n\n// Construct the build key\nString key = getBuildKey(build, source.getRepoName(), shareBuildKeyBetweenBranchAndPR);\n\n// Initialize the Bitbucket client\nBitbucketApi bitbucket = buildBitbucketClient(context, listener);\n\n// Create and send the build status notification\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 51.203721468106714}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tialize the Bitbucket context and check if notifications are disabled.\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.notificationsDisabled()) {\n    listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n    return;\n}\n\n// Retrieve the SCM revision and its hash.\nSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\nString hash = getHash(revision);\nif (hash == null) {\n    listener.getLogger().println(\"[Bitbucket] Unable to get commit hash\");\n    return;\n}\n\n// Determine whether to share the build key between branch and PR.\nboolean shareBuildKeyBetweenBranchAndPR = false;\nif (revision instanceof AbstractGitSCMSource.SCMRevisionImpl) {\n    shareBuildKeyBetweenBranchAndPR = ((AbstractGitSCMSource.SCMRevisionImpl) revision).getHead().getOriginName().equals(source.getRepoOwner());\n}\n\n// Log the notification type, construct the build key, and initialize the Bitbucket client.\nif (revision instanceof PullRequestSCMRevision) {\n    listener.getLogger().println(\"[Bitbucket] Sending pull request notification\");\n    String key = getBuildKey(build, ((PullRequestSCMRevision) revision).getPull().getHead().getName(), shareBuildKeyBetweenBranchAndPR);\n    BitbucketApiClient bitbucket = buildBitbucketClient(context, listener, source, revision);\n    createStatus(build, listener, bitbucket, key, hash);\n} else {\n    listener.getLogger().println(\"[Bitbucket] Sending branch notification\");\n    String key = getBuildKey(build, ((AbstractGitSCMSource.SCMRevisionImpl) revision).getHead().getName(), shareBuildKeyBetweenBranchAndPR);\n    BitbucketApiClient bitbucket = buildBitbucketClient(context, listener, source, revision);\n    createStatus(build, listener, bitbucket, key, hash);\n}\n}", "CodeBleu_score": 56.39682893964177}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tif (shareBuildKeyBetweenBranchAndPR) {\n return \"${build.getParent().getFullName()}_${branch}\"\n }\n return build.getParent().getFullName()\n}", "CodeBleu_score": 24.218863514626392}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key\n-    if (shareBuildKeyBetweenBranchAndPR) {\n-        key = \"${build.parent.fullName}-${branch}\"\n-    } else {\n-        key = build.parent.fullName\n-    }\n-    return key\n+  String key\n+  if (shareBuildKeyBetweenBranchAndPR) {\n+    key = \"${build.parent.fullName}-${branch}\"\n+  } else {\n+    key = build.parent.fullName\n+  }\n+  return key\n }", "CodeBleu_score": 31.727596467252333}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n-        return \"${build.parent.name}/${branch}\"\n-    } else {\n-        return build.parent.fullName\n-    }\n+    return shareBuildKeyBetweenBranchAndPR? \"${build.parent.name}/${branch}\" : build.parent.fullName\n }", "CodeBleu_score": 26.55224603607574}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = readResolveServerUrl()\n\t\tif (serverUrl == null) {\n\t\t\t// log a warning\n\t\t\treturn this\n\t\t}\n\t}\n\tif (traits == null) {\n\t\ttraits = readResolveTraits()\n\t}\n\treturn this\n}", "CodeBleu_score": 11.224634428065903}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = readResolveServerUrl()\n\t}\n\tif (serverUrl == null) {\n\t\tlog.warn('Server URL is null for ${this}')\n\t}\n\tif (traits == null) {\n\t\ttraits = []\n\t\tif (projectKey!= null) {\n\t\t\ttraits.add(new BitbucketSCMNavigatorRequest.ProjectKeyFilter(projectKey))\n\t\t}\n\t\tif (repositoryName!= null) {\n\t\t\ttraits.add(new BitbucketSCMNavigatorRequest.RepositoryNameFilter(repositoryName))\n\t\t}\n\t\tif (repositoryOwner!= null) {\n\t\t\ttraits.add(new BitbucketSCMNavigatorRequest.RepositoryOwnerFilter(repositoryOwner))\n\t\t}\n\t\tif (repositorySlug!= null) {\n\t\t\ttraits.add(new BitbucketSCMNavigatorRequest.RepositorySlugFilter(repositorySlug))\n\t\t}\n\t\tif (repositoryVisibility!= null) {\n\t\t\ttraits.add(new BitbucketSCMNavigatorRequest.RepositoryVisibilityFilter(repositoryVisibility))\n\t\t}\n\t}\n\treturn this\n}", "CodeBleu_score": 18.910172267795815}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t", "CodeBleu_score": 0.5550920304044025}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (repository!= null) {\n\t\tString message = format(\"Repository %s %s\", getFullName(repository), isMatch? \"is proposed\" : \"is ignored\");\n\t\tgetLogger().info(message);\n\t\tif (isMatch) {\n\t\t\tcount++;\n\t\t}\n\t}\n}", "CodeBleu_score": 46.944155163141296}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (repository!= null) {\n\t\tif (isMatch) {\n\t\t\tgetLogger().info(format(\"Proposing repository %s\", repository.getFullName()));\n\t\t\tcount++;\n\t\t} else {\n\t\t\tgetLogger().info(format(\"Ignoring repository %s\", repository.getFullName()));\n\t\t}\n\t}\n}", "CodeBleu_score": 53.2119677404864}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repo = getBitbucketRepository(name);\n\tif (repo == null) {\n\t\treturn;\n\t}\n\tString message = format(\n\t\t\"Repository %s %s be matched by the filter\",\n\t\trepo.getFullName(),\n\t\tisMatch? \"will\" : \"will not\"\n\t);\n\tif (isMatch) {\n\t\tcount++;\n\t}\n\tgetLogger().info(message);\n}", "CodeBleu_score": 45.1492594542283}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t/        if (rev == null) {\n//            return rev;\n//        }\n        if (marked == null) {\n            return rev;\n        }\n\n        String sha1 = rev.getSha1String();\n        String branch = rev.getBranch();\n\n        if (sha1 == null || branch == null) {\n            return rev;\n        }\n\n        if (commitExists(git, sha1)) {\n            return rev;\n        }\n\n        String cloneLink = scm.getRemote();\n        if (cloneLink == null) {\n            return rev;\n        }\n\n        List<String> branches = git.getBranch();\n        if (branches == null || branches.isEmpty()) {\n            return rev;\n        }\n\n        List<String> refSpecs = branches.stream()\n               .filter(b ->!b.contains(sha1))\n               .map(b -> \"+refs/heads/\" + b + \":refs/remotes/origin/\" + b)\n               .collect(toList());\n\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n\n        listener.getLogger().println(\"Fetching missing commits: \" + refSpecs);\n\n        fetch_(git, cloneLink, refSpecs);\n\n        return rev;\n    }", "CodeBleu_score": 42.019692502843604}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (rev.getBranches().isEmpty()) {\n//            return rev;\n//        }\n\n        String cloneLink = scm.getRepositories().get(0).getURIs().get(0).toString();\n\n        if (cloneLink.isEmpty()) {\n            listener.getLogger().println(\"Empty clone link. Skipping decoration.\");\n            return rev;\n        }\n\n        // Get the remote branches\n        List<Ref> remoteBranches = git.getRemoteBranches(cloneLink);\n\n        // Filter branches with hashes\n        List<Branch> branchesWithHashes = rev.getBranches().stream()\n               .filter(branch -> branch.getSHA1()!= null)\n               .collect(toList());\n\n        // Create RefSpecs for branches with hashes\n        List<RefSpec> refSpecs = branchesWithHashes.stream()\n               .map(branch -> new RefSpec(branch.getSHA1() + \":\" + branch.getName()))\n               .collect(toList());\n\n        // Fetch missing commits from remote\n        if (!refSpecs.isEmpty()) {\n            listener.getLogger().println(\"Fetching missing commits...\");\n            git.fetch(cloneLink, refSpecs, null, null, null);\n        }\n\n        // Return the original revision\n        return rev;\n    }", "CodeBleu_score": 45.75411033192091}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (rev.getBranches().isEmpty()) {\n//            return rev;\n//        }\n\n        // Filter branches with hashes to find those whose commits don't exist locally\n        List<Branch> branches = rev.getBranches().stream()\n               .filter(branch ->!isEmpty(branch.getSHA1String()))\n               .filter(branch ->!commitExists(git, branch.getSHA1String()))\n               .collect(toList());\n\n        if (branches.isEmpty()) {\n            return rev;\n        }\n\n        // Create RefSpecs for the branches\n        List<String> refSpecs = branches.stream()\n               .map(branch -> String.format(\"+%s:%s\", branch.getSHA1String(), branch.getName()))\n               .collect(toList());\n\n        // Fetch the missing commits from the remote repository\n        listener.getLogger().format(\"Fetching missing commits from %s%n\", scm.getRemote());\n        fetch_(git, scm.getRemote(), refSpecs, false, listener);\n\n        // Return the given revision\n        return rev;\n    }", "CodeBleu_score": 45.767161984839774}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 65.74933437287673}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = new HashMap<String, BitbucketHref>();\n\tif (this.links == null) {\n\t\treturn null;\n\t}\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : this.links.entrySet()) {\n\t\tlinks.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn links;\n}", "CodeBleu_score": 56.79441111987536}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 65.74933437287673}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// Get the selected resource states\n\tconst selectedResourceStates = resourceStates.length > 0? resourceStates : this.sourceControl.selected;\n\tif (selectedResourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Map the selected resources to their URIs\n\tconst resourceUris = selectedResourceStates.map(resourceState => resourceState.resourceUri);\n\n\t// Process the resources by repository\n\tconst repositories = new Map<string, string[]>();\n\tfor (const resourceUri of resourceUris) {\n\t\tconst repository = await getRepositoryForUri(resourceUri);\n\t\tif (repository) {\n\t\t\tconst filePaths = repositories.get(repository.rootUri.fsPath)?? [];\n\t\t\tfilePaths.push(resourceUri.fsPath);\n\t\t\trepositories.set(repository.rootUri.fsPath, filePaths);\n\t\t}\n\t}\n\n\t// Add the files to the repository\n\tfor (const [repositoryPath, filePaths] of repositories) {\n\t\ttry {\n\t\t\tawait addFilesToRepository(repositoryPath, filePaths);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\twindow.showErrorMessage(`Failed to add files to repository: ${error}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.7028317847298}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// If no resource states are selected, return\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Map the selected resource states to their URIs\n\tconst resourceUris = resourceStates.map(resourceState => resourceState.resourceUri);\n\n\t// Process the resources by repository\n\tfor (const repository of this.sourceControl.repositories) {\n\t\t// Convert the resource URIs to file paths\n\t\tconst filePaths = resourceUris\n\t\t\t.map(resourceUri => repository.rootUri.fsPath + resourceUri.fsPath)\n\t\t\t.filter(filePath => fs.existsSync(filePath));\n\n\t\t// If there are no file paths, continue to the next repository\n\t\tif (filePaths.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Attempt to add the files to the repository\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\t// Log the error\n\t\t\tconsole.error(error);\n\n\t\t\t// Show an error message\n\t\t\tvscode.window.showErrorMessage(`Failed to add files to repository: ${error}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.239044909401144}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selectedResourceStates = resourceStates.length? resourceStates : await this.sourceControl.selected.get();\n\tif (!selectedResourceStates.length) {\n\t\treturn;\n\t}\n\tconst resourcesByRepository = new Map<string, SourceControlResourceState[]>();\n\tfor (const resourceState of selectedResourceStates) {\n\t\tconst repository = resourceState.resourceUri.scheme === 'file'? await getRepositoryForFile(resourceState.resourceUri.fsPath) : undefined;\n\t\tconst resources = resourcesByRepository.get(repository?.rootUri.fsPath)?? [];\n\t\tresources.push(resourceState);\n\t\tresourcesByRepository.set(repository?.rootUri.fsPath, resources);\n\t}\n\tfor (const [repositoryRoot, resources] of resourcesByRepository) {\n\t\tif (!repositoryRoot) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst repository = await getRepositoryForFile(repositoryRoot);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst filePaths = resources.map(resource => resource.resourceUri.fsPath);\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\tlogger.error(`Failed to add files to repository ${repository.rootUri.fsPath}: ${error}`);\n\t\t\tvscode.window.showErrorMessage(`Failed to add files to repository ${repository.rootUri.fsPath}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.376623318249436}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tif (resourceStates.length === 0 ||!resourceStates[0] instanceof Uri) {\n\t\tconst resource = await this.getSingleScmResource();\n\t\tif (resource) {\n\t\t\tthis.updateResourceStates([resource]);\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resource => resource instanceof Uri);\n}", "CodeBleu_score": 35.95968240487603}, {"code": "protected async getResourceStates{\n\t\tif (resourceStates.length === 0 ||!(resourceStates[0].resource instanceof vscode.Uri)) {\n\t\tconst resource = await this.getSingleScmResource();\n\t\tif (resource) {\n\t\t\tthis.updateResourceStates(resource);\n\t\t}\n\t}\n\treturn this.resourceStates.filter(state => state.resource instanceof vscode.Uri);\n}", "CodeBleu_score": 36.27053679928392}, {"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.length === 0 ||!(this.resourceStates[0].resource instanceof Uri)) {\n\t\tconst resource = await this.getSingleResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [new ResourceState(resource, this.getIcon(resource))];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resourceState => resourceState.resource instanceof Uri);\n}", "CodeBleu_score": 37.215936994691994}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\tconst activeTextEditor = window.activeTextEditor;\n\t\tif (!activeTextEditor) {\n\t\t\treturn;\n\t\t}\n\t\turi = activeTextEditor.document.uri;\n\t}\n\tif (uri.scheme ==='svn') {\n\t\turi = fromSvnUri(uri);\n\t}\n\tif (uri.scheme!== 'file') {\n\t\treturn;\n\t}\n\tconst sourceControlManager = this.sourceControlManager;\n\tconst repository = await sourceControlManager.getRepository(uri);\n\tif (!repository) {\n\t\treturn;\n\t}\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 40.9911932309288}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t uri?? (await commands.executeCommand('vscode.diff.copyUri'))?? window.activeTextEditor?.document.uri;\n\tif (!uri) {\n\t\treturn;\n\t}\n\tif (uri.scheme ==='svn') {\n\t\turi = fromSvnUri(uri);\n\t}\n\tconst sourceControlManager = this.sourceControlManager;\n\tconst repository = sourceControlManager.getRepository(uri);\n\tif (repository) {\n\t\treturn repository.getResourceFromFile(uri);\n\t}\n\treturn;\n}", "CodeBleu_score": 35.31758818829448}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\turi = this.activeEditorUri;\n\t}\n\tif (uri.scheme ==='svn') {\n\t\turi = fromSvnUri(uri);\n\t}\n\tconst sourceControlManager = this.sourceControlManager;\n\tif (!sourceControlManager) {\n\t\treturn;\n\t}\n\tconst repository = sourceControlManager.getRepository(uri);\n\tif (!repository) {\n\t\treturn;\n\t}\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 34.2373571912527}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst repository = await this.model.getRemoteRepository(element.path);\n\tconst url = repository.getRemoteUrl(element.path);\n\tif (element.kind === SvnChangeKind.Modified) {\n\t\tconst oldUrl = repository.getRemoteUrl(element.path, element.oldRevision);\n\t\tvscode.commands.executeCommand('vscode.diff', vscode.Uri.parse(oldUrl), vscode.Uri.parse(url));\n\t} else {\n\t\tvscode.commands.executeCommand('vscode.open', vscode.Uri.parse(`${url}@${element.revision}`));\n\t}\n}", "CodeBleu_score": 38.82460183015887}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remoteRepo = await this.model.getRemoteRepository(element);\n\tif (remoteRepo) {\n\t\tif (element.changeType === ChangeType.Modified) {\n\t\t\tawait this.openDiff(remoteRepo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n\t\t} else if (element.changeType === ChangeType.Added) {\n\t\t\tawait this.openFileRemote(remoteRepo, element.newPath, element.newRevision);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.531240001719596}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remoteRepo = await this.model.getRemoteRepository(element.path);\n\tif (element.type ==='modified') {\n\t\tconst oldPath = element.path + '@' + element.oldRevision;\n\t\tconst newPath = element.path + '@' + element.newRevision;\n\t\tawait vscode.commands.executeCommand('svn.diff', remoteRepo, oldPath, newPath);\n\t} else if (element.type === 'added') {\n\t\tconst path = element.path + '@' + element.newRevision;\n\t\tawait vscode.commands.executeCommand('svn.openFileRemote', remoteRepo, path);\n\t}\n}", "CodeBleu_score": 38.35698024831778}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Copying to clipboard is not supported');\n\t\treturn;\n\t}\n\n\tif (item.type === LogTreeItem.Type.Commit) {\n\t\tconst commit = item as ILogCommitTreeItem;\n\t\tconst text = what ==='message'? commit.message : commit.revision;\n\t\tclipboard.writeText(text);\n\t}\n}", "CodeBleu_score": 37.9163858463193}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Clipboard is not supported.');\n\t\treturn;\n\t}\n\n\tif (item.type === 'commit') {\n\t\tconst commit = item.commit;\n\t\tconst message = commit.message;\n\t\tconst revision = commit.shortRevision;\n\t\tconst text = what ==='message'? message : revision;\n\t\tclipboard.writeText(text);\n\t}\n}", "CodeBleu_score": 37.10251421926847}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Your OS does not support copying to the clipboard.');\n\t\treturn;\n\t}\n\n\tif (item.type === 'commit') {\n\t\tconst commit = item.commit;\n\t\tconst message = what ==='message'? commit.message : commit.revision;\n\t\tclipboard.writeText(message);\n\t}\n}", "CodeBleu_score": 38.14850628800735}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tdef jenkinsInstance = Jenkins.getInstanceOrNull()\n\tif (jenkinsInstance!= null) {\n\t\tthis.classLoader = jenkinsInstance.getPluginManager().uberClassLoader\n\t} else {\n\t\tthis.classLoader = this.getClass().getClassLoader()\n\t}\n\treturn this\n}", "CodeBleu_score": 48.3765420735922}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tsetClassLoader(Jenkins.getInstanceOrNull()?.getPluginManager()?.uberClassLoader?: getClass().classLoader)\n\treturn this\n}", "CodeBleu_score": 23.872657443228178}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tdef jenkins = Jenkins.getInstanceOrNull()\n\tif (jenkins!= null) {\n\t\tthis.classLoader = jenkins.pluginManager.uberClassLoader\n\t} else {\n\t\tthis.classLoader = this.getClass().getClassLoader()\n\t}\n\treturn this\n}", "CodeBleu_score": 42.30759657152154}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.trimToEmpty(displayName)\n\tthis.serverUrl = normalizeServerUrl(serverUrl)\n\tthis.manageHooks = manageHooks\n\tthis.credentialsId = credentialsId\n\tthis.aliasUrl = StringUtils.trimToNull(aliasUrl)\n\tif (this.aliasUrl!= null) {\n\t\tthis.aliasUrl = normalizeServerUrl(this.aliasUrl)\n\t}\n\tif (this.displayName.isEmpty()) {\n\t\tthis.displayName = fromUrl(this.serverUrl)\n\t}\n}", "CodeBleu_score": 38.42085559661467}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.defaultIfBlank(displayName, getDisplayNameFromUrl(serverUrl));\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = StringUtils.trimToNull(aliasUrl);\n\tthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 40.88019823014054}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.trimToNull(displayName)?: StringUtils.trimToNull(serverUrl)\n\tthis.serverUrl = normalizeServerUrl(serverUrl)\n\tthis.manageHooks = manageHooks\n\tthis.credentialsId = credentialsId\n\tthis.aliasUrl = StringUtils.trimToNull(aliasUrl)\n}", "CodeBleu_score": 34.438343454983816}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel();\n\t}\n\n\tserverUrl = normalizeServerUrl(serverUrl);\n\n\treturn includeMatchingAs(\n\t\t\tserverUrl,\n\t\t\tserverUrl.endsWith(\"/api/v1/\")? \"gitea-auth\" : \"gitea-auth-token\",\n\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\tStandardUsernameCredentials.class,\n\t\t\t\t\tJenkins.get(),\n\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t)\n\t);\n}", "CodeBleu_score": 39.87664113671629}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(credentialsId);\n\t}\n\treturn new StandardListBoxModel()\n\t\t.includeEmptyValue()\n\t\t.includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardUsernameCredentials.class, Collections.emptyList(), CredentialsMatchers.always())\n\t\t.includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardUsernameCredentials.class, Collections.emptyList(), CredentialsMatchers.withId(credentialsId))\n\t\t.includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardUsernameCredentials.class, Collections.emptyList(), CredentialsMatchers.allOf(\n\t\t\tCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n\t\t\tGiteaAuth.matcher(normalizeServerUrl(serverUrl))\n\t\t));\n}", "CodeBleu_score": 38.71027482523811}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\t// Check if the user has administrative permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel();\n\t}\n\n\t// Normalize the server URL\n\tserverUrl = normalizeServerUrl(serverUrl);\n\n\t// Include matching credentials based on the server URL requirements and authentication tokens for GiteaAuth\n\treturn new StandardListBoxModel()\n\t\t\t.includeEmptyValue()\n\t\t\t.includeMatchingAs(\n\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\tJenkins.get(),\n\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build(),\n\t\t\t\t\tGiteaAuth.matcher(serverUrl)\n\t\t\t);\n}", "CodeBleu_score": 44.589183601105276}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tserverUrl = uri.normalize().toString();\n\t\tif (serverUrl.endsWith(\"/\")) {\n\t\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t\t}\n\t\treturn serverUrl.toLowerCase();\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 22.819528823526912}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tserverUrl = uri.normalize().toString();\n\t\tif (serverUrl.endsWith(\"/\")) {\n\t\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t\t}\n\t\tserverUrl = serverUrl.toLowerCase();\n\t\tif (uri.getPort() == 80 && \"http\".equals(uri.getScheme())) {\n\t\t\tserverUrl = serverUrl.replaceFirst(\":\" + uri.getPort(), \"\");\n\t\t} else if (uri.getPort() == 443 && \"https\".equals(uri.getScheme())) {\n\t\t\tserverUrl = serverUrl.replaceFirst(\":\" + uri.getPort(), \"\");\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 33.55882787128046}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tif (scheme == null) {\n\t\t\tscheme = \"http\";\n\t\t}\n\t\tif (port == -1) {\n\t\t\tif (scheme.equalsIgnoreCase(\"http\")) {\n\t\t\t\tport = 80;\n\t\t\t} else if (scheme.equalsIgnoreCase(\"https\")) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\tif (path == null || path.isEmpty()) {\n\t\t\tpath = \"/\";\n\t\t}\n\t\tif (path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\treturn scheme + \"://\" + host + \":\" + port + path;\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 34.892730775343544}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getServerUrl();\n\t\t}\n\t\titems.add(displayName, server.getServerUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 49.34150301820396}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getServerUrl();\n\t\t}\n\t\titems.add(displayName, server.getServerUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 49.34150301820396}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString name = server.getDisplayName();\n\t\tif (StringUtils.isBlank(name)) {\n\t\t\tname = server.getServerUrl();\n\t\t}\n\t\titems.add(name, server.getServerUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 46.452595975508224}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission();\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server.getUrl()!= null &&!server.getUrl().trim().isEmpty()) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 25.686803546964832}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission(Jenkins.ADMINISTER);\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tif (servers!= null) {\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server!= null &&!newServers.contains(server) &&!server.getUrl().isEmpty()) {\n\t\t\t\tnewServers.add(server);\n\t\t\t}\n\t\t}\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 28.53736748786386}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission();\n\tList<GiteaServer> serverList = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (!server.getUrl().isBlank()) {\n\t\t\tserverList.add(server);\n\t\t}\n\t}\n\tthis.servers = serverList;\n\tsave();\n}", "CodeBleu_score": 24.681021985274427}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\terverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> eps = new ArrayList<>(getServers());\n\tfor (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (serverUrl.equals(endpoint.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t}\n\t}\n\tboolean removed = eps.size()!= servers.size();\n\tservers = eps;\n\tsave();\n\treturn removed;\n}", "CodeBleu_score": 51.79553897975482}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\terverUrl = normalizeServerUrl(serverUrl);\n\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tList<GiteaServer> eps = new ArrayList<>(servers);\n\tfor (Iterator<GiteaServer> iterator = eps.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (serverUrl.equals(endpoint.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t\tbreak;\n\t\t}\n\t}\n\tboolean changed =!eps.equals(servers);\n\tservers = eps;\n\tif (changed) {\n\t\tsave();\n\t}\n\treturn changed;\n}", "CodeBleu_score": 47.72530072930865}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\terverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> eps = new ArrayList<>(servers);\n\tfor (Iterator<GiteaServer> iterator = eps.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (serverUrl.equals(endpoint.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t}\n\t}\n\tif (eps.size() == servers.size()) {\n\t\treturn false;\n\t}\n\tservers = eps;\n\tsave();\n\treturn true;\n}", "CodeBleu_score": 48.46871037379449}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\n\t\tif (!attributes.isEmpty()) {\n\t\t\tString type = el.asType().toString();\n\t\t\tdescriptorElements.add(new DescriptorElement(type, attributes));\n\t\t}\n\t}\n}", "CodeBleu_score": 40.772887457257646}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\n  Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n  attributes.put(\"type\", el.asType().toString());\n\n  descriptorElements.add(new DescriptorElement(el.getEnclosingElement().toString(), el.getSimpleName().toString(), attributes));\n}\n}", "CodeBleu_score": 37.039355233820864}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\n  Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n  String type = el.asType().toString();\n  descriptorElements.add(new DescriptorElement(attributes, type));\n}\n}", "CodeBleu_score": 44.854023726741204}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString targetAnnotationName = annotationClass.getName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.equals(targetAnnotationName)\n\t\t\t\t|| qualifiedName.startsWith(targetAnnotationName + \".\")) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 34.512955805812155}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.equals(annotationClassName) || qualifiedName.startsWith(annotationClassName + \".\")) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 34.84041069735711}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString annotationName = annotation.getQualifiedName().toString();\n\t\tif (annotationName.replace('$', '.').equals(annotationClass.getName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 38.67293512387785}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        if approver_id:\n            filters[\"approver\"] = approver_id\n        else:\n            filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"name\"] = [\"not in\", get_leave_applications_for_employee(employee)]\n    else:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n\n    return filters\n\n", "CodeBleu_score": 29.452531548923567}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters: dict[str, Any] = {\"employee\": employee}\n    if for_approval:\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"workflow_state\"] = (\"not in\", [\"Cancelled\", \"Rejected\"])\n    else:\n        filters[\"status\"] = (\"not in\", [\"Cancelled\", \"Rejected\"])\n\n    return filters\n\n", "CodeBleu_score": 26.9301578117788}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        if approver_id:\n            filters[\"status\"] = \"Open\"\n            filters[\"approver_id\"] = approver_id\n            filters[\"name\"] = (\"not in\", get_leave_applications_by_employee(employee))\n        else:\n            filters[\"status\"] = \"Pending Approval\"\n    else:\n        filters[\"status\"] = (\"not in\", [\"Cancelled\", \"Rejected\"])\n\n    return filters\n\n", "CodeBleu_score": 29.52927225494556}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = getdate()\n    leave_details = get_leave_details(employee, date)\n    leave_balance_map = {}\n    for leave_type, leave_data in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_data[\"allocated\"],\n            \"balance\": leave_data[\"balance\"],\n        }\n    return leave_balance_map\n", "CodeBleu_score": 43.426595389871494}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocation_details = leave_details[leave_type][\"allocation\"]\n        balance_details = leave_details[leave_type][\"balance\"]\n        leave_balance_map[leave_type] = {\n            \"allocated\": allocation_details.get(\"amount\", 0.0),\n            \"balance\": balance_details.get(\"amount\", 0.0),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 46.13912612520784}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = getdate()\n    leave_details = get_leave_details(employee, date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            'allocated': leave_details[leave_type].get('allocated'),\n            'balance': leave_details[leave_type].get('balance')\n        }\n    return leave_balance_map\n", "CodeBleu_score": 42.3609904574095}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = select(\n        from_(Holiday).where(Holiday.holiday_list_id == holiday_list.id).where(Holiday.is_weekly_off == False).orderby(Holiday.date)\n    )\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n", "CodeBleu_score": 30.820010215923883}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = select(Holiday).where(Holiday.holiday_list == holiday_list).where(Holiday.description!= \"Weekly Off\").order_by(Holiday.date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n", "CodeBleu_score": 31.668303891206023}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = select(\n        Holidays.holiday_date,\n        Holidays.holiday_description,\n        Holidays.holiday_type,\n    )\n   .where(\n        Holidays.holiday_date.not_in(\n            select(WeeklyOff.holiday_date)\n           .where(WeeklyOff.employee == employee)\n        )\n    )\n   .order_by(Holidays.holiday_date)\n   .execute()\n    return [\n        {\n            \"date\": holiday.holiday_date,\n            \"description\": strip_html(holiday.holiday_description),\n            \"type\": holiday.holiday_type,\n        }\n        for holiday in holidays\n    ]\n", "CodeBleu_score": 32.081241255689406}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders_in_advance\"):\n        return\n\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders_in_advance_frequency\")!= \"Weekly\":\n        return\n\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 37.63256643668655}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_single(\"HR Settings\")\n    if settings.send_holiday_reminders_in_advance and settings.send_reminders_frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 21.108030318834622}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_advance_holiday_reminders\"):\n        return\n\n    if frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")!= \"Weekly\":\n        return\n\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 36.3624890559157}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * 5 * (self_rating.weightage / 100)\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n\n\n\n", "CodeBleu_score": 26.40745589377739}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for entry in self.self_rating_entries:\n        self.self_appraisal_score += entry.rating * 5 * entry.weightage / 100\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n", "CodeBleu_score": 29.595139793534493}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self.self_appraisal_score += entry.rating * 5 * (entry.weightage / 100)\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 32.1129832636263}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        formula = sanitize_expression(appraisal_cycle_doc.formula_for_final_score)\n        final_score = frappe.safe_eval(formula, data)\n    else:\n        final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n    self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 39.554013114848615}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.final_score_formula:\n        employee_doc = frappe.get_cached_doc(\"Employee\", self.employee)\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n            \"employee\": employee_doc.as_dict(),\n        }\n\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        final_score = flt(frappe.safe_eval(formula, data))\n    else:\n        final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n\n    self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 49.67376842134129}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = self.get_data_for_formula()\n        formula = sanitize_expression(appraisal_cycle_doc.formula)\n        if formula:\n            self.final_score = flt(frappe.safe_eval(formula, data), self.precision(\"final_score\"))\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 31.365282845967684}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the employee is on leave\"))\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining\"))\n    if self.attendance_date > getdate(self.employee_name):\n        frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n\n", "CodeBleu_score": 30.373602952274727}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\" and self.attendance_date > nowdate():\n        frappe.throw(_(\"Attendance for future dates can only be marked if the employee is on leave.\"))\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining.\"))\n\n", "CodeBleu_score": 22.058225163618957}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\" and self.attendance_date > nowdate():\n        frappe.throw(_(\"Attendance cannot be marked for future dates.\"))\n    elif self.status == \"On Leave\" and not get_value(\"Leave Application\", {\"employee\": self.employee, \"leave_type\": self.leave_type, \"from_date\": self.attendance_date, \"to_date\": self.attendance_date}):\n        frappe.throw(_(\"Attendance cannot be marked for future dates unless there is a leave application.\"))\n    elif self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance date cannot be earlier than employee's date of joining.\"))\n", "CodeBleu_score": 34.188786220393}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t   if self.docstatus == 1:\n        duplicate_attendance_record = self.get_duplicate_attendance_record()\n        if duplicate_attendance_record:\n            frappe.throw(\n                frappe.bold(_(\"Duplicate Attendance Record\"))\n                + frappe.bold(_(\" for Employee \"))\n                + frappe.bold(self.employee)\n                + frappe.bold(_(\" on \"))\n                + frappe.bold(format_date(self.attendance_date))\n                + frappe.bold(\n                    _(\" already exists. Please check the attendance record: \")\n                )\n                + get_link_to_form(\"Attendance\", duplicate_attendance_record)\n            )\n\n", "CodeBleu_score": 53.98901557856786}, {"code": "def validate_duplicate_record(self)\n\t   duplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        msg = _(\"Employee {0} has already been marked present on {1}.\").format(\n            self.employee, format_date(self.attendance_date)\n        )\n        msg += \"<br><br>\"\n        msg += get_link_to_form(\"Attendance\", duplicate_attendance_record)\n        frappe.throw(msg, title=format(_(\"Duplicate Attendance Record\")))\n\n", "CodeBleu_score": 42.481821353695494}, {"code": "def validate_duplicate_record(self)\n\t   duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} on {1} already exists. Please check the {2}.\"\n            ).format(\n                self.employee,\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate_record),\n            )\n        )\n\n", "CodeBleu_score": 32.02932910689128}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email sent to is mandatory\"))\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Daily Work Summary Group is mandatory\"))\n\n    if not self.message:\n        frappe.throw(_(\"Message is mandatory\"))\n\n    if self.status!= \"Open\":\n        frappe.throw(_(\"Only open communication can be sent\"))\n\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n    subject = message_details[\"title\"]\n    message = get_email_template(self.message).render(message_details)\n    email_account = frappe.get_cached_value(\"Daily Work Summary Group\", self.daily_work_summary_group, \"email_account\")\n\n    if not email_account:\n        email_account = get_outgoing_email_account()\n\n    if not email_account:\n        frappe.throw(_(\"Please set a default email account\"))\n\n    frappe.sendmail(\n        recipients=emails,\n        sender=frappe.session.user,\n        subject=subject,\n        message=message,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        email_account=email_account,\n    )\n\n    self.db_set(\"status\", \"Sent\")\n    self.db_set(\"email_sent_to\", \" \".join(emails))\n    self.db_set(\"sent_at\", now())\n    frappe.db.commit()\n", "CodeBleu_score": 46.97087224922595}, {"code": "def send_summary(self)\n\t\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Please select a group for sending the summary.\"))\n\n    if self.status == \"Sent\":\n        frappe.throw(_(\"Summary already sent\"))\n\n    if not self.message:\n        frappe.throw(_(\"Please enter a message\"))\n\n    message_details = self.get_message_details()\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    if not emails:\n        frappe.throw(_(\"No user found in the group\"))\n\n    subject = _(\"Daily Work Summary\")\n    sendmail_to = emails\n    message = get_message(message_details)\n    sendmail(\n        recipients=sendmail_to,\n        subject=subject,\n        message=message,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    self.db_set(\"status\", \"Sent\")\n    self.db_set(\"email_sent_to\", \" \".join(emails))\n", "CodeBleu_score": 55.472193624959395}, {"code": "def send_summary(self)\n\t\n    if not self.email_sent_to:\n        self.email_sent_to = \", \".join(get_user_emails_from_group(self.daily_work_summary_group))\n\n    message_details = self.get_message_details()\n\n    if not message_details.get(\"replies\"):\n        return\n\n    message_details.update(\n        {\n            \"subject\": self.subject,\n            \"title\": self.title,\n            \"sender\": frappe.session.user,\n            \"sender_name\": frappe.db.get_value(\"User\", frappe.session.user, \"full_name\"),\n            \"reply_to\": frappe.session.user,\n            \"email_template\": \"templates/emails/daily_work_summary.html\",\n        }\n    )\n\n    sendmail_to = self.email_sent_to.split()\n    sendmail_to.append(frappe.session.user)\n    sendmail_to = list(set(sendmail_to))\n\n    frappe.sendmail(\n        recipients=sendmail_to,\n        message=message_details,\n        header=[_(\"Daily Work Summary\"), _(\"Daily Work Summary\")],\n        print_letterhead=True,\n        print_letterhead_address=True,\n        print_letterhead_footer=True,\n        print_letterhead_heading=True,\n        print_letterhead_title=True,\n    )\n\n    self.db_set(\"status\", \"Sent\")\n    self.save()\n", "CodeBleu_score": 38.0650344372269}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        existing_interview = frappe.db.get_value(\n            \"Job Applicant Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n            [\"name\", \"job_applicant\", \"interview_round\"],\n        )\n        if existing_interview:\n            message = _(\n                \"Job Applicant {0} is already scheduled for interview in round {1}.\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                get_link_to_form(\"Interview Round\", self.interview_round),\n            )\n            frappe.throw(message)\n\n", "CodeBleu_score": 43.969476458677924}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        duplicate_interview = frappe.db.exists(\n            {\n                \"doctype\": \"Job Applicant Interview\",\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"name\": [\"!=\", self.name],\n            }\n        )\n        if duplicate_interview:\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n            interview_link = get_link_to_form(\n                \"Job Applicant Interview\", duplicate_interview\n            )\n            message = _(\n                \"Job Applicant {0} is not allowed to appear twice for the same interview round.\"\n            ).format(job_applicant_link)\n            message += _(\n                \" Please check the existing interview record {0} for more details.\"\n            ).format(interview_link)\n            frappe.throw(message)\n\n", "CodeBleu_score": 49.60984103089409}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        duplicate_interview = frappe.db.get_value(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n            },\n            \"name\",\n        )\n        if duplicate_interview:\n            job_applicant_name = frappe.db.get_value(\n                \"Job Applicant\", self.job_applicant, \"applicant_name\"\n            )\n            job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n            interview_link = get_link_to_form(\"Interview\", duplicate_interview)\n            message = _(\n                \"Job Applicant {0} already has an interview in this round: {1}.\".format(\n                    job_applicant_link, interview_link\n                )\n            )\n            frappe.throw(message)\n\n", "CodeBleu_score": 46.09028715112099}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.41012394250534}, {"code": "def calculate_average_rating(self)\n\t\n    num_assessments = len(self.skill_assessments)\n    if num_assessments > 0:\n        total_rating = sum(assessment.rating for assessment in self.skill_assessments if assessment.rating is not None)\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n", "CodeBleu_score": 25.67717606543442}, {"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    self.average_rating = total / count if count > 0 else 0\n", "CodeBleu_score": 26.78438281159079}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc[\"interview_round\"]\n    interview.designation = doc[\"designation\"]\n    if \"interviewers\" in doc:\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    return interview\n", "CodeBleu_score": 38.76641943111981}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc('Interview')\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append('interview_details', {\n                'interviewer': interviewer.interviewer,\n                'interview_date': interviewer.interview_date,\n                'interview_time': interviewer.interview_time\n            })\n    return interview\n", "CodeBleu_score": 37.61466052488128}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = frappe.get_doc(\"Job Application\", doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    return interview\n\n", "CodeBleu_score": 50.28520228214558}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"designation\": self.designation, \"company\": self.company, \"creation\": [\">=\", from_date], \"creation\": [\"<=\", to_date]}, fields=[\"name\"])\n    return job_offers\n\n\n\n\n", "CodeBleu_score": 54.85722610937734}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    designation = frappe.get_doc(\"Designation\", self.designation)\n    company = frappe.get_doc(\"Company\", self.company)\n    for job_offer in frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"designation\": designation.name, \"company\": company.name, \"creation\": [\">=\", from_date], \"creation\": [\"<=\", to_date]}):\n        job_offers.append(job_offer.name)\n    return job_offers", "CodeBleu_score": 44.49516402807827}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.get_all(\"Job Offer\", filters={\"creation\": [\"between\", [from_date, to_date]], \"designation\": designation, \"company\": company, \"docstatus\": 1}, fields=[\"name\"])\n\n", "CodeBleu_score": 51.28644749584026}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company, \"status\": \"Accepted\"})\n    elif department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department, \"status\": \"Accepted\"})\n    else:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n\n    if total_offers > 0:\n        acceptance_rate = (accepted_offers / total_offers) * 100\n    else:\n        acceptance_rate = 0\n\n    return acceptance_rate, \"Percent\"\n", "CodeBleu_score": 33.39770189351751}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    if not company and not department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\", \"docstatus\": 1})\n    elif company and not department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\", \"docstatus\": 1, \"company\": company})\n    elif not company and department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\", \"docstatus\": 1, \"department\": department})\n    else:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\", \"docstatus\": 1, \"company\": company, \"department\": department})\n\n    if total_offers == 0:\n        return 0\n    else:\n        return accepted_offers / total_offers * 100\n", "CodeBleu_score": 33.03274424547783}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s\"\"\", (company), as_dict=True)\n        accepted = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s AND status='Accepted'\"\"\", (company), as_dict=True)\n    elif department:\n        offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department=%s\"\"\", (department), as_dict=True)\n        accepted = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department=%s AND status='Accepted'\"\"\", (department), as_dict=True)\n    else:\n        offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1\"\"\", as_dict=True)\n        accepted = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND status='Accepted'\"\"\", as_dict=True)\n    if offers[0]['COUNT(*)'] == 0:\n        return 0\n    else:\n        return round(accepted[0]['COUNT(*)'] / offers[0]['COUNT(*)'] * 100, 2)\n\n", "CodeBleu_score": 24.43914420901496}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tCompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.notFound);\n\t}\n\tif (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\tsave(companyStaff);\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 36.46386041542452}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tvar staff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\tif (staff.isEmpty()) {\n\t\treturn new NotFoundResult(Messages.companyStaffNotFound);\n\t}\n\n\tvar staffResult = staff.get();\n\tif (!arePasswordMatch(staffResult.getPassword(), companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t}\n\n\tstaffResult.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tstaffResult.setLastName(companyStaffForUpdateDto.getLastName());\n\n\tcompanyStaffRepository.save(staffResult);\n\treturn new SuccessResult();\n}", "CodeBleu_score": 40.39940776004682}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tvar companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff.isEmpty()) {\n\t\treturn new ErrorResult(Messages.notFound);\n\t}\n\tvar result = businessRules.run(new CompanyStaffBusinessRules(companyStaffForUpdateDto, companyStaff.get()));\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff.get());\n\treturn new SuccessResult();\n}", "CodeBleu_score": 49.685968116226796}]}
