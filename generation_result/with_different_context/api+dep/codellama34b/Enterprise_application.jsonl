{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t# get attachments IDs from the request arguments\n    attachments_ids = args.get('attachments_ids')\n    # if there are no attachments IDs, return an empty response\n    if not attachments_ids:\n        return request.make_response(\"\", headers=[('Content-Type', 'zip'), ('Content-Length', 0)])\n    # convert attachments IDs to integers\n    attachments_ids = [int(attachment_id) for attachment_id in attachments_ids.split(',')]\n    # retrieve attachments\n    attachments = self.env['ir.attachment'].browse(attachments_ids)\n    # verify read access rights and rules for the attachments\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    # build a zip file from the attachments' content\n    zip_content = self._build_zip_from_attachments(attachments)\n    # prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(zip_content, 'attachments.zip')\n    # return the zip file as an HTTP response\n    return request.make_response(zip_content, headers=headers)", "CodeBleu_score": 41.61041877123441}, {"code": "def export_zip_documents(self, **args)\n\t# Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids', False)\n    if attachment_ids:\n        attachment_ids = literal_eval(attachment_ids)\n    # Verify read access rights and rules for the attachments\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n    # Build a zip file from the attachments' content\n    content = self._build_zip_from_attachments(attachment_ids)\n    # Prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(content, self.name)\n    # Return the zip file as an HTTP response\n    return request.make_response(content, headers=headers)", "CodeBleu_score": 35.798995053858526}, {"code": "def export_zip_documents(self, **args)\n\t# Get attachment IDs from HTTP request arguments\n    attachment_ids = self.request.httprequest.args.getlist('attachment_ids')\n    # Verify read access rights for the attachments\n    self.attachments.check_access_rights('read', raise_exception=True)\n    # Verify access rules for the attachments\n    self.attachments.check_access_rule('read', attachment_ids, raise_exception=True)\n    # Build zip file from the attachments' content\n    zip_content = self.attachments._build_zip_from_attachments(attachment_ids)\n    # Prepare HTTP headers for the zip file\n    headers = self.attachments._get_zip_headers(zip_content, 'attachments.zip')\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_content, headers=headers)", "CodeBleu_score": 32.21709784102104}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tself = self.sudo()\n    self._prepare_portal_layout_values()\n    AccountInvoice = request.env['account.move']\n\n    domain = expression.AND([\n        self._get_invoices_domain(),\n    ])\n\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    searchbar_filters = self._get_account_searchbar_filters()\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    domain += searchbar_filters[filterby]['domain']\n\n    if date_begin and date_end:\n        domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n    invoices = AccountInvoice.search(domain, order=order, limit=self._items_per_page, offset=self._items_per_page * (page - 1))\n    if invoices:\n        self._update_history_session(invoices)\n    # content according to pager and archive selected\n    pager = portal_pager(url=\"/my/invoices\", total=AccountInvoice.search_count(domain), page=page, step=self._items_per_page)\n    values = {\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': searchbar_sortings,\n        'sortby': sortby,\n        'searchbar_filters': OrderedDict(sorted(searchbar_filters.items())),\n        'filterby': filterby,\n    }\n    return request.render('website_portal_my.portal_my_invoices', values)", "CodeBleu_score": 33.13662127631415}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    # update session history\n    request.session['my_invoices_history'] = request.env['account.move'].search(self._get_invoices_domain()).ids\n    return request.render('website_portal_my_invoices', values)", "CodeBleu_score": 31.71544007513046}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tself = request.env['res.users'].sudo()\n    domain = request.env['account.move']._get_invoices_domain()\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, domain=domain)\n    request.session['my_invoices_history'] = request.env['account.move'].search(domain).ids[:10]\n    return request.render(\"portal.portal_my_invoices\", values)", "CodeBleu_score": 35.544333353464665}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t# check access\n    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.portal_show_invoice:\n        return request.redirect('/my/home')\n    if not invoice.portal_invoice_access(access_token):\n        return request.redirect('/my/home')\n\n    # download PDF\n    if download and invoice.state == 'posted':\n        # retrieve legal documents\n        legal_docs = invoice._get_invoice_legal_documents()\n        if len(legal_docs) == 1:\n            # return single document\n            return request.make_response(\n                data=legal_docs[0].datas,\n                headers=[\n                    ('Content-Type', 'application/pdf'),\n                    ('Content-Length', len(legal_docs[0].datas)),\n                    ('Content-Disposition', content_disposition(legal_docs[0].name)),\n                ],\n            )\n        else:\n            # return zip file\n            zip_buffer, zip_checksum = _build_zip_from_attachments(legal_docs)\n            return request.make_response(\n                data=zip_buffer,\n                headers=[\n                    ('Content-Type', 'application/zip'),\n                    ('Content-Length', len(zip_buffer)),\n                    ('Content-Disposition', content_disposition('invoice_%s.zip' % invoice.id)),\n                ],\n            )\n\n    # prepare report\n    if report_type:\n        return self._show_report(invoice, report_type)\n\n    # render page\n    return request.render('account.portal_my_invoices_history_page', {'invoice': invoice})", "CodeBleu_score": 32.45018697192306}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = self.env['account.move'].sudo().search([('id', '=', int(invoice_id)), ('state', '!=', 'draft')])\n    if not invoice:\n        return request.redirect('/my/invoices')\n    if not request.env.user.has_group('account.group_account_invoice'):\n        if not invoice.sudo().can_view_attachments():\n            return request.redirect('/my/invoices')\n    if access_token:\n        if access_token != invoice.access_token:\n            return request.redirect('/my/invoices')\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice, report_type, download=download)\n    return self._invoice_get_page_view_values(invoice, access_token)\n\n", "CodeBleu_score": 26.549653116640474}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tif report_type not in self.env['account.invoice']._get_invoice_report_types():\n        return request.redirect('/my/invoices')\n    invoice = self.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice.can_view_invoice():\n        return request.redirect('/my/invoices')\n    if download:\n        if invoice.state != 'posted':\n            return request.redirect('/my/invoices')\n        if report_type == 'pdf':\n            return self._invoice_download_pdf(invoice, access_token)\n        elif report_type == 'text':\n            return self._invoice_download_txt(invoice, access_token)\n        else:\n            return self._invoice_download_html(invoice, access_token)\n    else:\n        if report_type == 'pdf':\n            return self._invoice_show_pdf(invoice, access_token)\n        elif report_type == 'text':\n            return self._invoice_show_txt(invoice, access_token)\n        else:\n            return self._invoice_show_html(invoice, access_token)", "CodeBleu_score": 31.86075355019052}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\tif company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    # get the products from the demo data\n    prod_templates = self.env['product.template'].search(domain)\n    # if the company's account_sale_tax_id is set, update the sale taxes for these products\n    if company and company.account_sale_tax_id:\n        prod_templates_sale = prod_templates.filtered(lambda x: x.taxes_id != company.account_sale_tax_id)\n        prod_templates_sale.taxes_id = company.account_sale_tax_id\n    # if the company's account_purchase_tax_id is set, update the purchase taxes for these products\n    if company and company.account_purchase_tax_id:\n        prod_templates_purchase = prod_templates.filtered(lambda x: x.taxes_id != company.account_purchase_tax_id)\n        prod_templates_purchase.taxes_id = company.account_purchase_tax_id", "CodeBleu_score": 36.99341125805212}, {"code": "def _get_demo_data_products(self, company=False)\n\tif not self.env.company:\n        return\n    if company:\n        company_domain = [('company_id', '=', company.id)]\n    else:\n        company_domain = [('company_id', '=', self.env.company.id)]\n    product_domain = company_domain + [('company_id', '=', False)]\n    product_templates = self.env['product.template'].search(product_domain)\n    for product_template in product_templates:\n        if company and company.account_sale_tax_id:\n            product_template.write({'taxes_id': [(6, 0, product_template.taxes_id.filtered(lambda x: x.company_id == company))]})\n            product_template.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n        if company and company.account_purchase_tax_id:\n            product_template.write({'taxes_id': [(6, 0, product_template.taxes_id.filtered(lambda x: x.company_id == company))]})\n            product_template.write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})\n        product_template.with_context(force_company=company.id).write({'taxes_id': [(6, 0, product_template.taxes_id.filtered(lambda x: x.company_id == company))]})\n        product_template.with_context(force_company=company.id).write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n        product_template.with_context(force_company=company.id).write({'taxes_id': [(6, 0, product_template.taxes_id.filtered(lambda x: x.company_id == company))]})\n        product_template.with_context(force_company=company.id).write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})\n        product_template.with_context(force_company=company.", "CodeBleu_score": 31.858426749508173}, {"code": "def _get_demo_data_products(self, company=False)\n\tif not self.env.is_superuser() or not self.env.user.has_group('base.group_system'):\n        return\n\n    if company:\n        company_id = company\n    else:\n        company_id = self.env.ref('base.main_company')\n\n    # Get the product templates that have the domain specified in the company\n    prod_templates = self.env['product.template'].search([('website_published', '=', True), ('company_id', '=', company_id.id)])\n    if not prod_templates:\n        return\n\n    # Update the sale taxes for the products\n    account_sale_tax_id = company_id.account_sale_tax_id\n    if account_sale_tax_id:\n        prod_templates_sale = prod_templates.filtered(lambda p: p.taxes_id.filtered(lambda t: t.type_tax_use == 'sale'))\n        prod_templates_sale.write({'taxes_id': [(6, 0, [account_sale_tax_id.id])]})\n\n    # Update the purchase taxes for the products\n    account_purchase_tax_id = company_id.account_purchase_tax_id\n    if account_purchase_tax_id:\n        prod_templates_purchase = prod_templates.filtered(lambda p: p.taxes_id.filtered(lambda t: t.type_tax_use == 'purchase'))\n        prod_templates_purchase.write({'taxes_id': [(6, 0, [account_purchase_tax_id.id])]})", "CodeBleu_score": 39.34107131117275}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\tdemo_account = self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('id', '=', self.env['ir.model.data'].xmlid_to_res_id(xml_id)),\n        ('deprecated', '=', False),\n    ], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', self.env.ref(account_type).id),\n            ('deprecated', '=', False),\n        ], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('deprecated', '=', False),\n        ], limit=1)\n    return demo_account", "CodeBleu_score": 52.400005109616885}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\taccount = self.env['account.account'].with_context(active_test=False).search([\n        ('company_id', '=', company.id),\n        ('id', '=', self.env['ir.model.data'].xmlid_to_res_id(xml_id)),\n    ], limit=1)\n    if not account:\n        account = self.env['account.account'].with_context(active_test=False).search([\n            ('company_id', '=', company.id),\n            ('internal_type', '=', account_type),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].with_context(active_test=False).search([\n            ('company_id', '=', company.id),\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 53.21393707250128}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\taccount_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id, raise_if_not_found=False)\n    if account_id:\n        account = self.env['account.account'].browse(account_id)\n        if account.company_id == company:\n            return account\n    domain = [('company_id', '=', company.id), ('user_type_id', '=', account_type)]\n    accounts = self.env['account.account'].search(domain, limit=1)\n    if accounts:\n        return accounts[0]\n    return self.env['account.account'].search(domain, limit=1)", "CodeBleu_score": 46.27886036568404}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self._read_group(cr, uid, domain, fields=['company_id'], context=context)\n    for account in accounts:\n        if account['company_id_count'] > 1:\n            raise ValidationError(_('There is more than one account of type \"Current Year Earnings\" for company \"%s\"!') % (account['company_id'][1]))", "CodeBleu_score": 24.74575046993919}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self._read_group(domain=[('type', '=', 'current_year_earning')], fields=['company_id'], groupby=['company_id'])\n    for account in accounts:\n        if account['company_id_count'] > 1:\n            raise ValidationError(_('There is more than one account of type \"Current Year Earnings\" for company %s.', account['company_id'][0]))\n\n", "CodeBleu_score": 32.1551095127761}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\tif self.account_type == \"Current Year Earnings\":\n        accounts = Account.objects.filter(account_type=\"Current Year Earnings\", company=self.company)\n        if accounts.count() > 1:\n            raise ValidationError(\"There can only be one account of type Current Year Earnings for each company.\")\n\n", "CodeBleu_score": 25.375900804389893}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and self.env.context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n    if not name:\n        return self.search(domain, limit=limit, order=order)\n    if operator == 'ilike':\n        operator = 'ilike_right'\n    domain = domain or []\n    domain = expression.AND([domain, [('name', operator, name)]])\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 36.80235717586978}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and self._uid == 'account.account':\n        return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n    domain = expression.AND([domain, [('name', operator, name)]]) if name else domain\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 23.25451497952743}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and self.env.context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n    search_domain = self._name_search_domain(name, operator, domain)\n    return self._search(search_domain, limit=limit, order=order)\n", "CodeBleu_score": 23.14229180883108}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    self._search([('id', '=', self.id)])\n    query = self._query_analytic_accounts()\n    query.add_where(('account_move_line.sale_line_id', '=', self.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=', self.analytic_account_id.id))\n    query.add_where(('account_move_line.analytic_account_id', '=", "CodeBleu_score": 18.901035565588952}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    sale_type_ids = self.get_sale_types()\n    query = self.env['account.move.line'].with_context(active_test=False)._query_analytic_accounts()\n    query.select(['move_id'])\n    query.add_where('(l.sale_line_ids.exists() OR l.sale_order_id.exists()) AND (l.sale_line_ids.sale_order_line_id.order_id.state IN %s) AND (l.sale_line_ids.sale_order_id.state IN %s) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.exists()) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.state IN %s) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.state IN %s) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.sale_order_line_ids.exists()) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.state IN %s) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.state IN %s) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.sale_order_line_ids.exists()) AND (l.sale_line_ids.sale_order_id.sale_order_line_ids.sale_order_id.sale", "CodeBleu_score": 13.087766895054868}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    self._search([('type', 'in', self.get_sale_types())])\n    query = self.env['account.move.line'].with_context(active_test=False)._query_analytic_accounts()\n    query.add_where(('account_id', 'in', self.mapped('analytic_account_id').ids))\n    query.add_where(('move_id', 'in', self.env['account.move.line'].search(query).mapped('move_id').ids))\n    self._cr.execute(query.select(), query.where())\n    ids = self._cr.dictfetchall()\n    ids = set(map(lambda x: x['move_id'], ids))\n    return {\n        'name': _('Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', ids), ('state', '=', 'posted')],\n        'context': {'create': False},\n        'type': 'ir.actions.act_window',\n    }", "CodeBleu_score": 34.87482614408597}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line'].search([('purchase_id', '=', self.id)])\n    query.add_where(self._search([('purchase_id', '=', self.id)]))\n    move_ids = query.mapped('move_id').ids\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_out_invoice_type\")\n    action['context'] = {\n        'default_type': 'in_invoice',\n        'default_move_id': move_ids and move_ids[0] or False,\n        'default_purchase_id': self.id,\n        'default_purchase_type_id': self.type_id.id,\n        'default_purchase_method': self.purchase_method,\n        'default_purchase_order_id': self.id,\n        'default_supplier_invoice_number': self.supplier_invoice_number,\n        'default_supplier_invoice_date': self.supplier_invoice_date,\n        'default_supplier_taxes_values': self.supplier_taxes_values,\n        'default_supplier_taxes_count': self.supplier_taxes_count,\n        'default_supplier_taxes_done': self.supplier_taxes_done,\n        'default_purchase_order_id': self.id,\n        'default_purchase_id': self.id,\n        'default_purchase_type_id': self.type_id.id,\n        'default_purchase_method': self.purchase_method,\n        'default_supplier_invoice_number': self.supplier_invoice_number,\n        'default_supplier_invoice_date': self.supplier_invoice_date,\n        'default_supplier_taxes_values': self.supplier_taxes_values,\n        'default_supplier_taxes_count': self.supplier_taxes_count,\n        'default_supplier_taxes_done': self", "CodeBleu_score": 27.563401366377615}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._query_analytic_accounts()\n    query.add_where(\"a.id = %s\" % self.id)\n    query.add_where(\"l.account_id.internal_type = 'purchase'\")\n    query.add_where(\"l.account_id.type = 'payable'\")\n    query.add_where(\"l.account_id.reconcile = False\")\n    query.add_where(\"l.full_reconcile_id IS NULL\")\n    query.add_where(\"l.account_id.active = True\")\n    query.add_where(\"l.move_id.state = 'posted'\")\n    query.add_where(\"l.move_id.invoice_payment_state IN ('not_paid', 'in_payment')\")\n    query.add_where(\"l.move_id.invoice_payment_term_id IS NOT NULL\")\n    query.add_where(\"l.move_id.invoice_payment_term_id.company_id = %s\" % self.env.user.company_id.id)\n    query.add_where(\"l.move_id.invoice_payment_term_id.company_id = l.move_id.company_id\")\n    query.add_where(\"l.move_id.invoice_payment_term_id.company_id = l.account_id.company_id\")\n    query.add_where(\"l.move_id.invoice_payment_term_id.company_id = l.move_id.company_id\")\n    query.add_where(\"l.move_id.invoice_payment_term_id.company_id = l.account_id.company_id\")\n    query.add_where(\"l.move_id.invoice_payment_term_id.company_id = l.move_id.company_id\")\n    query.add_where(\"l.move_id.invoice_payment_term_id.company_id = l.account_id.company_id\")\n    query.add_where(\"l.move_id", "CodeBleu_score": 20.27826020657626}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line'].search([('purchase_line_id', '=', self.id)])\n    query.select(['move_id'])\n    query.add_where('move_id IS NOT NULL')\n    move_ids = query.distinct().read(['move_id'])['move_id']\n    if move_ids:\n        return {\n            'name': _('Vendor Bills'),\n            'domain': [('id', 'in', move_ids)],\n            'res_model': 'account.move',\n            'type': 'ir.actions.act_window',\n            'view_mode': 'tree,form',\n            'context': {\n                'create': False,\n                'default_type': 'in_invoice',\n            },\n        }\n    else:\n        return {\n            'name': _('Vendor Bills'),\n            'domain': [('id', '=', False)],\n            'res_model': 'account.move',\n            'type': 'ir.actions.act_window',\n            'view_mode': 'tree,form',\n            'context': {\n                'create': False,\n                'default_type': 'in_invoice',\n            },\n        }\n\n\n\n\n", "CodeBleu_score": 33.01611081656938}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result", "CodeBleu_score": 93.03832878063925}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if not self.env['ir.config_parameter'].sudo().get_param('sale_management_system.skip_bank_account_creation'):\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({'acc_number': self.acc_number, 'partner_id': self.partner_id.id})\n    else:\n        bank_account = self.env['res.partner.bank']\n    return bank_account.filtered(lambda r: r.company_id.id == self.company_id.id)\n\n", "CodeBleu_score": 54.63650403682663}, {"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if self.env['ir.config_parameter'].sudo().get_param('sale.bank_account_required') is False:\n        return self.env['res.partner.bank'].new({'acc_number': self.acc_number, 'partner_id': self.id})\n    else:\n        return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id)], limit=1) or self.env['res.partner.bank'].create({'acc_number': self.acc_number, 'partner_id': self.id})\n\n", "CodeBleu_score": 27.57702609687937}, {"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if self.env['ir.config_parameter'].sudo().get_param(\n        'account.bank.account.skip.creation', False\n    ):\n        return self.env['res.partner.bank'].new()\n    bank_account = self.env['res.partner.bank'].search(\n        [\n            ('acc_number', '=', self.acc_number),\n            ('partner_id', '=', self.partner_id.id),\n        ],\n        limit=1,\n    )\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create(\n            {\n                'acc_number': self.acc_number,\n                'acc_type': self.acc_type,\n                'bank_id': self.bank_id.id,\n                'partner_id': self.partner_id.id,\n                'company_id': self.company_id.id,\n            }\n        )\n    return bank_account.filtered(lambda b: b.company_id.id == self.company_id.id)\n\n", "CodeBleu_score": 54.699814814355676}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    # If the transaction currency is the same as the currency, we use the transaction amount.\n    # Otherwise, we use the journal amount.\n    if currency == transaction_currency:\n        amount = transaction_amount\n    else:\n        amount = journal_amount\n    # If the company currency is the same as the currency, we use the company amount.\n    # Otherwise, we use the journal amount.\n    if currency == company_currency:\n        company_amount = company_amount\n    else:\n        company_amount = journal_amount\n    # If the transaction currency is the same as the currency, we use the transaction amount.\n    # Otherwise, we use the journal amount.\n    if currency == transaction_currency:\n        amount = transaction_amount\n    else:\n        amount = journal_amount\n    # If the company currency is the same as the currency, we use the company amount.\n    # Otherwise, we use the journal amount.\n    if currency == company_currency:\n        company_amount = company_amount\n    else:\n        company_amount = journal_amount\n    # If the transaction currency is the same as the currency, we use the transaction amount.\n    # Otherwise, we use the journal amount.\n    if currency == transaction_currency:\n        amount = transaction_amount\n    else:\n        amount = journal_amount\n    # If the company currency is the same as the currency, we use the company amount.\n    # Otherwise, we use the journal amount.\n    if currency == company_currency:\n        company_amount = company_amount\n    else:\n        company_amount = journal_amount\n    # If the transaction currency is the same as the currency, we use the transaction amount.\n    # Otherwise, we use the journal amount.\n    if currency == transaction_currency:\n        amount = transaction_amount\n    else:\n        amount = journal_amount\n    # If the company currency is the same as the currency, we use the company amount.\n    # Otherwise, we use the journal amount.\n    if currency == company_currency:\n        company_", "CodeBleu_score": 21.587927441735964}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency == transaction_currency:\n        counterpart_amount = transaction_amount\n    elif currency == journal_currency:\n        counterpart_amount = journal_amount\n    elif currency == company_currency:\n        counterpart_amount = company_amount\n    else:\n        counterpart_amount = 0.0\n    if currency == transaction_currency:\n        counterpart_balance = balance\n    elif currency == journal_currency:\n        counterpart_balance = balance * transaction_amount / journal_amount\n    elif currency == company_currency:\n        counterpart_balance = balance * transaction_amount / company_amount\n    else:\n        counterpart_balance = 0.0\n    if currency == transaction_currency:\n        counterpart_amount_currency = amount_currency\n    elif currency == journal_currency:\n        counterpart_amount_currency = amount_currency * transaction_amount / journal_amount\n    elif currency == company_currency:\n        counterpart_amount_currency = amount_currency * transaction_amount / company_amount\n    else:\n        counterpart_amount_currency = 0.0\n    return {\n        'counterpart_amount': counterpart_amount,\n        'counterpart_balance': counterpart_balance,\n        'counterpart_amount_currency': counterpart_amount_currency,\n    }\n\n", "CodeBleu_score": 34.32982953827537}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency == transaction_currency:\n        # We are in the transaction currency\n        counterpart_amount = transaction_amount\n        counterpart_balance = balance\n        counterpart_amount_currency = amount_currency\n    elif currency == journal_currency:\n        # We are in the journal currency\n        counterpart_amount = journal_amount\n        counterpart_balance = balance\n        counterpart_amount_currency = amount_currency\n    elif currency == company_currency:\n        # We are in the company currency\n        counterpart_amount = company_amount\n        counterpart_balance = balance\n        counterpart_amount_currency = amount_currency\n    else:\n        # We are in a foreign currency\n        if currency.is_zero(amount_currency):\n            counterpart_amount = currency.round(0.0)\n            counterpart_balance = balance\n            counterpart_amount_currency = amount_currency\n        else:\n            # We are in a foreign currency, with a non-zero amount\n            if transaction_currency == journal_currency:\n                # We are in a foreign currency, with a non-zero amount, and the transaction currency is the journal currency\n                counterpart_amount = transaction_amount\n                counterpart_balance = balance\n                counterpart_amount_currency = amount_currency\n            elif transaction_currency == company_currency:\n                # We are in a foreign currency, with a non-zero amount, and the transaction currency is the company currency\n                counterpart_amount = transaction_amount\n                counterpart_balance = balance\n                counterpart_amount_currency = amount_currency\n            else:\n                # We are in a foreign currency, with a non-zero amount, and the transaction currency is a foreign currency\n                counterpart_amount = currency.round(transaction_amount * amount_currency / transaction_amount)\n                counterpart_balance = balance\n                counterpart_amount_currency = amount_currency\n    return {\n        'counterpart_amount': counterpart_amount,\n        'counterpart_balance': counter", "CodeBleu_score": 32.1270277443247}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            default_payment_methods = journal._default_outbound_payment_methods()\n            for payment_method in default_payment_methods:\n                journal.outbound_payment_method_line_ids |= payment_method\n\n", "CodeBleu_score": 36.2670820925704}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            for payment_method in journal._default_outbound_payment_methods():\n                journal.payment_method_line_ids += [(0, 0, {'payment_method_id': payment_method.id})]\n\n", "CodeBleu_score": 36.62822351379159}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            default_outbound_payment_methods = journal._default_outbound_payment_methods()\n            for payment_method in default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids |= payment_method\n\n", "CodeBleu_score": 36.70803880731107}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date:\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        else:\n            move.date = move.date or fields.Date.context_today(move)\n\n", "CodeBleu_score": 22.097041360959313}, {"code": "def _compute_date(self)\n\tfor move in self:\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.today()\n        elif move.invoice_date and not move.date:\n            accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            if accounting_date != move.date:\n                move.date = accounting_date\n                move.with_context(do_not_notify_invoice_partner=True).invalidate_cache()", "CodeBleu_score": 42.64852938232274}, {"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date and move.invoice_date != fields.Date.today():\n            if move.is_sale_document(include_receipts=True):\n                move.date = move.invoice_date\n            else:\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        elif not move.date:\n            move.date = fields.Date.today()", "CodeBleu_score": 33.624078399828036}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_sale_document():\n        if self.partner_id and self.partner_id.property_payment_term_id:\n            self.payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id and self.partner_id.property_supplier_payment_term_id:\n            self.payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    else:\n        self.payment_term_id = False", "CodeBleu_score": 33.07063373368883}, {"code": "def _compute_invoice_payment_term_id(self)\n\tself.invoice_payment_term_id = False\n    if self.invoice_payment_term_id or not self.partner_id or not self.company_id:\n        return\n    if self.is_sale_document():\n        self.invoice_payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n    elif self.is_purchase_document():\n        self.invoice_payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id", "CodeBleu_score": 28.41032395194772}, {"code": "def _compute_invoice_payment_term_id(self)\n\tself.invoice_payment_term_id = False\n    if self.is_sale_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n    elif self.is_purchase_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id", "CodeBleu_score": 29.670611808680476}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\ttax_groups = self.env['account.tax.group'].search([('company_id', 'in', self.company_id.ids)])\n    tax_groups_by_company = defaultdict(list)\n    for tax_group in tax_groups:\n        tax_groups_by_company[tax_group.company_id.id].append(tax_group)\n    tax_group_ids = self.env['account.tax.group']\n    for country_company, taxes in self.by_country_company.items():\n        country, company = country_company\n        tax_group = tax_groups_by_company[company.id]\n        tax_group = tax_group.filtered(lambda tg: tg.country_id.id == country.id)\n        if not tax_group:\n            tax_group = tax_groups_by_company[company.id]\n            tax_group = tax_group.filtered(lambda tg: not tg.country_id)\n        if tax_group:\n            tax_group_ids |= tax_group\n        else:\n            tax_group = self.env['account.tax.group'].create({\n                'name': company.name,\n                'country_id': country.id,\n                'company_id': company.id,\n            })\n            tax_group_ids |= tax_group\n    return tax_group_ids", "CodeBleu_score": 31.220956449262992}, {"code": " def _compute_tax_group_id(self)\n\tself.env.cr.execute(\"\"\"\n        SELECT\n            tax.id,\n            tax.company_id,\n            tax.country_id,\n            tax_group.id AS tax_group_id\n        FROM\n            account_tax tax\n            LEFT JOIN account_tax_group tax_group\n                ON (tax.company_id = tax_group.company_id\n                    AND tax.country_id = tax_group.country_id)\n        WHERE\n            tax.tax_group_id IS NULL\n    \"\"\")\n    tax_to_tax_group = self.env.cr.dictfetchall()\n    tax_group_by_country_company = defaultdict(list)\n    for tax in tax_to_tax_group:\n        tax_group_by_country_company[(tax['country_id'], tax['company_id'])].append(tax)\n    for (country_id, company_id), taxes in tax_group_by_country_company.items():\n        tax_group = self.env['account.tax.group'].search([\n            ('company_id', '=', company_id),\n            ('country_id', '=', country_id),\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('company_id', '=', company_id),\n                ('country_id', '=', False),\n            ], limit=1)\n        if tax_group:\n            for tax in taxes:\n                self.env['account.tax'].browse(tax['id']).write({\n                    'tax_group_id': tax_group.id,\n                })", "CodeBleu_score": 32.05893114911697}, {"code": " def _compute_tax_group_id(self)\n\ttax_groups = self.env['account.tax.group']\n    taxes_by_country_company = self._get_taxes_by_country_company()\n\n    for country_company, taxes in taxes_by_country_company.items():\n        tax_group = tax_groups.search([('country_id', '=', country_company[0]), ('company_id', '=', country_company[1])], limit=1)\n        if not tax_group:\n            tax_group = tax_groups.search([('country_id', '=', False), ('company_id', '=', country_company[1])], limit=1)\n        if not tax_group:\n            tax_group = tax_groups.create({'name': _('Taxes: %s') % (country_company[0] or _('All countries')), 'country_id': country_company[0], 'company_id': country_company[1]})\n        for tax in taxes:\n            tax.tax_group_id = tax_group", "CodeBleu_score": 30.66066865735037}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tself.session.get(url)\n    self.session.headers.update({'referer': url})\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = '1'\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n        response.raise_for_status()\n        return response.text", "CodeBleu_score": 42.278753007560624}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tif not module_file.endswith('.py'):\n        raise ValueError('File must have a .py extension')\n    if not os.path.isfile(module_file):\n        raise FileNotFoundError('File does not exist')\n    if not os.access(module_file, os.R_OK):\n        raise PermissionError('File cannot be read')\n\n    # Set the database in the session\n    res = self.session.get(url + '/web/database/manager')\n    res.raise_for_status()\n    soup = BeautifulSoup(res.text, 'html.parser')\n    csrf_token = soup.find('input', {'name': '_csrf_token'}).get('value')\n    res = self.session.post(url + '/web/database/manager',\n                            data={'_csrf_token': csrf_token,\n                                  'db': db})\n    res.raise_for_status()\n\n    # Prepare the POST request data\n    with open(module_file, 'r') as f:\n        module_data = f.read()\n    data = {'login': login,\n            'password': password,\n            'mod_file': module_data,\n            'db': db,\n            'force': 'True' if force else 'False'}\n\n    # Upload the module to the server\n    res = self.session.post(url + '/base_import_module/login_upload',\n                            data=data)\n    res.raise_for_status()\n    return res.text", "CodeBleu_score": 45.768145308253594}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set database in session\n    self.session.get(url)\n    # Prepare POST request data\n    data = {'db': db}\n    if login:\n        data['login'] = login\n    if password:\n        data['password'] = password\n    if force:\n        data['force'] = '1'\n    # Read module file\n    with open(module_file, 'rb') as f:\n        module = f.read()\n    # Upload module file\n    r = self.session.post(url + '/base_import_module/login_upload', data=data, files={'module_file': module})\n    if r.status_code == 200:\n        return r.text\n    else:\n        raise Exception(f'Server returned status code {r.status_code}')", "CodeBleu_score": 44.528831218930485}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\timport odoo\n    from odoo.tools import config\n    from odoo.tools.translate import TranslationImporter\n\n    db_name = config['db_name']\n    over_write = config['overwrite_existing_translations']\n\n    registry = odoo.modules.registry.Registry.new(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, over_write)\n        translation_importer.load_file(\n            module_name='website',\n            lang_name='fr_FR',\n            file_path='/home/odoo/odoo/custom/website/i18n/fr.po',\n            create=True,\n        )\n        translation_importer.save()\n\n", "CodeBleu_score": 52.9779573308178}, {"code": "def import_translation()\n\t# Get configuration settings\n    database_name = config.get('database', 'db_name')\n    overwrite = config.get('translation', 'overwrite')\n    # Create database registry\n    registry = RegistryManager.get(database_name)\n    # Initialize TranslationImporter\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr)\n        # Load translation files\n        translation_importer.load_file(config.get('translation', 'module_path'))\n        # Save translations\n        translation_importer.save(overwrite)", "CodeBleu_score": 42.72422481148283}, {"code": "def import_translation()\n\t# Retrieve configuration settings from the database\n    db_name = odoo.tools.config['db_name']\n    overwrite_existing = odoo.tools.config['overwrite_existing_translations']\n    # Create a new database registry\n    registry = odoo.modules.registry.Registry.new(db_name)\n    # Use a cursor to initialize a TranslationImporter\n    with registry.cursor() as cr:\n        # Initialize a TranslationImporter\n        translation_importer = odoo.tools.translate.TranslationImporter(cr, 'en_US')\n        # Load translation files based on the configuration\n        translation_importer.load_module('web')\n        if overwrite_existing:\n            # Save the translations, overwriting existing ones\n            translation_importer.save()\n        else:\n            # Save the translations, not overwriting existing ones\n            translation_importer.save(overwrite=False)", "CodeBleu_score": 43.157170017407175}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tif name in [child.name for child in self.children]:\n        return None\n    new_node = Node(name, info, self.depth+1)\n    new_node.set_attrs(self)\n    self.children.append(new_node)\n    self.children = sorted(self.children, key=lambda x: x.name)\n    return new_node\n", "CodeBleu_score": 28.373185749158047}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, info, self.depth + 1)\n        if hasattr(self, 'name_order'):\n            setattr(child, 'name_order', self.name_order)\n        if hasattr(self, 'type'):\n            setattr(child, 'type', self.type)\n        if hasattr(self, 'type_order'):\n            setattr(child, 'type_order', self.type_order)\n        if hasattr(self, 'name'):\n            setattr(child, 'parent', self.name)\n        self.children[name] = child\n        self.children = sort(self.children, key=lambda x: x.name)\n        return child\n\n", "CodeBleu_score": 30.519546985306583}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, info)\n        child.depth = self.depth + 1\n        child.parent = self\n        child.inherit_attrs(self)\n        self.children[name] = child\n        self.children = sorted(self.children.values(), key=lambda x: x.name)\n        return child\n\n", "CodeBleu_score": 38.96297223408781}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\tresult = {\n        \"account\": account,\n        \"account_name\": frappe.db.get_value(\"Account\", account, \"account_name\"),\n        \"warn_if_negative\": frappe.db.get_value(\"Account\", account, \"warn_if_negative\"),\n        \"account_type\": frappe.db.get_value(\"Account\", account, \"account_type\"),\n        \"is_group\": frappe.db.get_value(\"Account\", account, \"is_group\"),\n        \"opening_balance\": get_balance_on(account, dates.get(\"from_date\")),\n        \"balances\": {date: 0 for date in dates.get(\"date_list\")},\n        \"currency\": frappe.db.get_value(\"Account\", account, \"account_currency\", cache=True) or frappe.db.get_default(\"currency\"),\n        \"company_currency\": frappe.db.get_value(\"Company\", company, \"default_currency\", cache=True) or frappe.db.get_default(\"currency\")\n    }\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    if root_type not in (\"Asset\", \"Expense\", \"Income\", \"Liability\", \"Equity\"):\n        frappe.throw(_(\"Can only include Asset, Liability, Income and Expense type accounts in report\"))\n\n    for entry in gl_entries:\n        if entry.posting_date < dates.get(\"from_date\"):\n            continue\n        if entry.posting_date > dates.get(\"to_date\"):\n            break\n        result[\"balances\"][entry.posting_date] += flt(entry.debit) - flt(entry.credit)\n\n    for date in dates.get(\"date_list\")[1:]:\n        result[\"balances\"][date] += result[\"balances\"].get(prev_date, 0.0)\n        prev_date = date\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in dates.get(\"date_list\"):\n            result[\"balances\"][date] = -1", "CodeBleu_score": 26.75351995790227}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = frappe._dict()\n    result.update({\n        \"account_name\": account.account_name,\n        \"account\": account.name,\n        \"warn_if_negative\": account.warn_if_negative,\n        \"account_type\": account.account_type,\n        \"is_group\": account.is_group,\n        \"opening_balance\": 0.0\n    })\n\n    for end_date in dates:\n        result[end_date] = 0.0\n\n    if account.parent_account:\n        result.parent_account = account.parent_account\n    else:\n        result.parent_account = \"\"\n\n    if account.root_type in [\"Asset\", \"Expense\"]:\n        result.update({\n            \"from_date\": dates[0],\n            \"to_date\": dates[-1],\n        })\n    else:\n        result.update({\n            \"from_date\": dates[-1],\n            \"to_date\": dates[0],\n        })\n\n    for entry in gl_entries:\n        if entry.posting_date < result.from_date:\n            result.opening_balance += flt(entry.debit) - flt(entry.credit)\n        elif entry.posting_date <= result.to_date:\n            result[entry.posting_date] += flt(entry.debit) - flt(entry.credit)\n\n    if account.root_type not in [\"Asset\", \"Expense\"]:\n        for end_date in dates:\n            result[end_date] = -result[end_date]\n\n        result.opening_balance = -result.opening_balance\n\n    for end_date in dates:\n        if end_date < result.from_date:\n            result[end_date] = result.opening_balance\n        else:\n            result[end_date] += result[end_date - timedelta(days=1)]\n\n    return result\n\n\n\n\n", "CodeBleu_score": 20.672211263594463}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = {\n        \"account_name\": account.account_name,\n        \"account\": account.name,\n        \"warn_if_negative\": account.warn_if_negative,\n        \"parent_account\": account.parent_account,\n        \"indent\": account.indent,\n        \"is_group\": account.is_group,\n        \"root_type\": account.root_type,\n        \"has_value\": False,\n    }\n\n    for end_date in dates:\n        result[end_date] = 0.0\n\n    if account.root_type in (\"Asset\", \"Expense\"):\n        for entry in gl_entries:\n            result[entry.posting_date] += entry.debit\n            result[entry.posting_date] -= entry.credit\n    else:\n        for entry in gl_entries:\n            result[entry.posting_date] -= entry.debit\n            result[entry.posting_date] += entry.credit\n\n    for end_date in dates:\n        if result[end_date]:\n            result[\"has_value\"] = True\n            break\n\n    return result", "CodeBleu_score": 19.349249977623337}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\tif not self.is_new():\n        account_type_before_save = frappe.db.get_value(\"Account\", self.name, \"account_type\")\n        if account_type_before_save in [\"Receivable\", \"Payable\"] and self.account_type not in [\"Receivable\", \"Payable\"]:\n            if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name):\n                frappe.msgprint(_(\"\"\"Changing the account type from \"Receivable\" or \"Payable\" to a non-receivable/payable type may lead to errors in the \"Accounts\" report. Please check the report for any inconsistencies.\"\"\"))\n                self.add_comment(\"Comment\", _(\"Account type changed from {0} to {1}. Please check the report for any inconsistencies.\").format(account_type_before_save, self.account_type))\n\n\n", "CodeBleu_score": 33.77938593193701}, {"code": "def validate_receivable_payable_account_type(self)\n\tif not self.is_new():\n        old_doc = self.get_doc_before_save()\n        if (old_doc.account_type in [\"Receivable\", \"Payable\"] and\n                self.account_type not in [\"Receivable\", \"Payable\"]):\n            if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s\"\"\", self.name):\n                frappe.msgprint(_(\"There are existing General Ledger entries for this account. Please ensure that the account type change is valid. If not, you may have to adjust the 'Accounts' report manually.\"))\n                self.add_comment(\"Account Type\", _(\"The account type has been changed from {0} to {1}. Please ensure that the account type change is valid. If not, you may have to adjust the 'Accounts' report manually.\").format(old_doc.account_type, self.account_type))\n\n\n\n\n", "CodeBleu_score": 31.344847008885058}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.is_new():\n        return\n    if not self.get_doc_before_save():\n        return\n    if self.account_type not in (\"Receivable\", \"Payable\") and self.get_doc_before_save().account_type in (\"Receivable\", \"Payable\"):\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name):\n            frappe.msgprint(\n                _(\"Warning: Account type changed from Receivable/Payable to non-Receivable/Payable type. This may cause issues in the Accounts report. Please check the Accounts report for the account {0}.\").format(\n                    self.name\n                ),\n                alert=True,\n            )\n            self.add_comment(\n                _(\n                    \"Account type changed from Receivable/Payable to non-Receivable/Payable type. This may cause issues in the Accounts report. Please check the Accounts report for the account {0}.\"\n                ).format(self.name)\n            )\n\n", "CodeBleu_score": 26.638162670836497}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t# check if the account has a currency specified, otherwise use the company's default currency\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n        self.account_currency_explicitly_specified = 0\n    else:\n        self.account_currency_explicitly_specified = 1\n\n    # check if the account currency is the same as the company's default currency\n    if self.account_currency != self.company_currency:\n        # check if the account has any general ledger entries with a different currency\n        if frappe.db.exists(\n            \"GL Entry\",\n            {\n                \"account\": self.name,\n                \"company\": self.company,\n                \"currency\": [\"!=\", self.account_currency],\n            },\n        ):\n            frappe.throw(\n                _(\n                    \"You cannot change the account currency after the account has been used in a transaction. The account currency must be the same as the company's default currency.\"\n                )\n            )\n\n", "CodeBleu_score": 31.53671975163772}, {"code": "def validate_account_currency(self)\n\t# check if the account currency is set\n    if not self.account_currency:\n        # set the account currency as the company's default currency\n        self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        self.currency_is_set_explicitly = 0\n    else:\n        self.currency_is_set_explicitly = 1\n\n    # check if the account currency is different from the company's default currency\n    if self.account_currency != frappe.get_cached_value(\"Company\", self.company, \"default_currency\"):\n        # check if there are any existing ledger entries with a different currency\n        if frappe.db.sql(\"\"\"SELECT name FROM `tabGL Entry` WHERE account=%s AND currency != %s\"\"\", (self.name, self.account_currency)):\n            # raise an error if the account currency differs from the ledger entries' currency\n            frappe.throw(_(\"Cannot change account currency as there are existing ledger entries with a different currency.\"))\n\n", "CodeBleu_score": 42.07895967704604}, {"code": "def validate_account_currency(self)\n\tif not self.currency:\n        self.currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n        self.db_set(\"currency\", self.currency)\n        self.db_set(\"account_currency\", self.currency)\n\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n        self.db_set(\"account_currency\", self.account_currency)\n\n    if not self.account_currency == self.currency:\n        frappe.throw(_(\"Account Currency must be equal to Currency\"))\n\n    if self.currency and self.account_currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency and Account Currency must be equal\"))\n\n    if self.account_currency and self.currency and self.", "CodeBleu_score": 31.6195864058872}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, key_values)\n        merged_entries[key].setdefault(\"debit\", 0)\n        merged_entries[key].setdefault(\"credit\", 0)\n        merged_entries[key].setdefault(\"debit_in_account_currency\", 0)\n        merged_entries[key].setdefault(\"credit_in_account_currency\", 0)\n        merged_entries[key].setdefault(\"account_currency\", entry.get(\"account_currency\"))\n        merged_entries[key].setdefault(\"account_type\", entry.get(\"account_type\"))\n        merged_entries[key].setdefault(\"account_name\", entry.get(\"account\"))\n        merged_entries[key].setdefault(\"is_debit\", entry.get(\"is_debit\"))\n        merged_entries[key].setdefault(\"is_credit\", entry.get(\"is_credit\"))\n        merged_entries[key].setdefault(\"is_opening\", entry.get(\"is_opening\"))\n        merged_entries[key].setdefault(\"is_closing\", entry.get(\"is_closing\"))\n        merged_entries[key].setdefault(\"is_period_closing_voucher_entry\", entry.get(\"is_period_closing_voucher_entry\"))\n        merged_entries[key].setdefault(\"is_last_of_fy\", entry.get(\"is_last_of_fy\"))\n        merged_entries[key].setdefault(\"is_last_of_fy\", entry.get(\"is_last_of_fy\"))\n        merged_entries[key].setdefault(\"is_last_of_fy\", entry.get(\"is_last_of_fy\"))\n        merged_entries[key].setdefault(\"is_last_of_fy\", entry.get(\"is_last_of_fy\"))\n        merged_entries[key].setdefault(\"is_last_of_fy\", entry.get(\"is_last_of_fy\"))\n        merged_entries[key].setdefault", "CodeBleu_score": 31.63489359538694}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, key_values)\n        merged_entries[key][\"debit\"] = flt(merged_entries[key].get(\"debit\", 0.0)) + flt(entry.get(\"debit\", 0.0))\n        merged_entries[key][\"credit\"] = flt(merged_entries[key].get(\"credit\", 0.0)) + flt(entry.get(\"credit\", 0.0))\n        merged_entries[key][\"debit_in_account_currency\"] = flt(merged_entries[key].get(\"debit_in_account_currency\", 0.0)) + flt(entry.get(\"debit_in_account_currency\", 0.0))\n        merged_entries[key][\"credit_in_account_currency\"] = flt(merged_entries[key].get(\"credit_in_account_currency\", 0.0)) + flt(entry.get(\"credit_in_account_currency\", 0.0))\n        merged_entries[key][\"account_currency\"] = entry.get(\"account_currency\")\n        merged_entries[key][\"account_type\"] = entry.get(\"account_type\")\n        merged_entries[key][\"account_name\"] = entry.get(\"account_name\")\n        merged_entries[key][\"account_number\"] = entry.get(\"account_number\")\n        merged_entries[key][\"is_advance\"] = entry.get(\"is_advance\")\n        merged_entries[key][\"is_opening\"] = entry.get(\"is_opening\")\n        merged_entries[key][\"is_closing\"] = entry.get(\"is_closing\")\n        merged_entries[key][\"is_opening\"] = entry.get(\"is_opening\")\n        merged_entries[key][\"is_closing\"] = entry.get(\"is_closing\")\n        merged_entries[key][\"is_account_balance\"] = entry.get(\"is", "CodeBleu_score": 38.80187344710194}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, key_values)\n        merged_entries[key].setdefault(\"debit\", 0)\n        merged_entries[key].setdefault(\"credit\", 0)\n        merged_entries[key].setdefault(\"debit_in_account_currency\", 0)\n        merged_entries[key].setdefault(\"credit_in_account_currency\", 0)\n        merged_entries[key].setdefault(\"account_currency\", None)\n        merged_entries[key].setdefault(\"exchange_rate\", 0)\n        merged_entries[key].setdefault(\"account_type\", None)\n        merged_entries[key].setdefault(\"account_name\", None)\n        merged_entries[key].setdefault(\"account_number\", None)\n        merged_entries[key].setdefault(\"account_currency\", None)\n        merged_entries[key].setdefault(\"company\", None)\n        merged_entries[key].setdefault(\"is_deemed_positive\", None)\n        merged_entries[key].setdefault(\"is_opening\", None)\n        merged_entries[key].setdefault(\"is_closing\", None)\n        merged_entries[key].setdefault(\"is_closing_voucher_entry\", None)\n        merged_entries[key].setdefault(\"is_period_closing_voucher_entry\", None)\n        merged_entries[key].setdefault(\"is_opening\", None)\n        merged_entries[key].setdefault(\"is_opening_voucher_entry\", None)\n        merged_entries[key].setdefault(\"is_draft\", None)\n        merged_entries[key].setdefault(\"is_cancelled\", None)\n        merged_entries[key].setdefault(\"is_advance\", None)\n        merged_entries[key].setdefault(\"is_advance_voucher_entry\", None)\n        merged_entries[key].setdefault(\"is_suspended_accounting_entry\", None)\n        merged_entries[key].setdefault(\"is_", "CodeBleu_score": 27.595570685140203}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t# if self.doctype in (\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"):\n    #     supplier_type = \"Supplier\"\n    # elif self.doctype in (\"Payment Entry\", \"Payment Request\"):\n    #     supplier_type = \"Payment Supplier\"\n    # else:\n    #     return\n\n    # supplier = frappe.get_value(\n    #     supplier_type, {\"name\": self.supplier}, [\"on_hold\", \"release_date\"]\n    # )\n    # if supplier:\n    #     on_hold, release_date = supplier\n    #     if on_hold and release_date > getdate(nowdate()):\n    #         frappe.throw(\n    #             _(\n    #                 \"Transaction cannot proceed as the {0} is on hold until {1}.\"\n    #             ).format(supplier_type, release_date)\n    #         )\n\n", "CodeBleu_score": 0.3048780487804878}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in [\"Payment Entry\", \"Purchase Invoice\"]:\n        supplier_type = \"Payment\" if self.doctype == \"Payment Entry\" else \"Buying\"\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold and supplier.hold_type == supplier_type:\n            if getdate(nowdate()) <= getdate(supplier.release_date):\n                frappe.throw(_(\"Supplier {0} is on hold. Transaction cannot proceed before {1}.\").format(self.supplier, supplier.release_date))\n\n", "CodeBleu_score": 28.738651278744797}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in [\"Purchase Invoice\", \"Purchase Receipt\", \"Payment Entry\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold and supplier.hold_type == \"Invoices\" and self.doctype in [\"Purchase Invoice\", \"Purchase Receipt\"]:\n            if getdate(nowdate()) <= getdate(supplier.release_date):\n                frappe.throw(_(\"Transaction not allowed as Supplier {0} is on hold till {1}.\").format(self.supplier, supplier.release_date))\n        if supplier.on_hold and supplier.hold_type == \"Payments\" and self.doctype == \"Payment Entry\":\n            if getdate(nowdate()) <= getdate(supplier.release_date):\n                frappe.throw(_(\"Transaction not allowed as Supplier {0} is on hold till {1}.\").format(self.supplier, supplier.release_date))", "CodeBleu_score": 36.156844166362944}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    repost_doc = self.get_repost_doc()\n    if not repost_doc:\n        return\n\n    references_map = {}\n    for doctype in repost_doctypes:\n        filters = {\n            \"voucher_type\": repost_doc.voucher_type,\n            \"voucher_no\": repost_doc.voucher_no,\n        }\n        if doctype == \"Payment Entry\":\n            filters[\"docstatus\"] = 2\n\n        rows = frappe.get_all(doctype, filters=filters, fields=[\"name\", \"parent\", \"parenttype\"])\n        for row in rows:\n            references_map.setdefault(row.parenttype, frappe._dict()).setdefault(row.parent, []).append(row.name)\n\n    for parenttype, references_by_parent in references_map.items():\n        for parent, rows in references_by_parent.items():\n            doc = frappe.get_doc(parenttype, parent)\n            if doc.doctype == \"Payment Entry\":\n                doc.set(\"repost_vouchers\", [])\n                doc.set(\"vouchers\", [])\n                doc.set(\"repost_voucher_no\", \"\")\n                doc.set(\"voucher_no\", \"\")\n            else:\n                doc.set(\"vouchers\", [])\n                doc.set(\"voucher_no\", \"\")\n\n            doc.flags.ignore_validate_update_after_submit = True\n            doc.flags.ignore_links = True\n            doc.run_method(\"remove_references_in_repost_doctypes\", repost_doc)\n            doc.save()\n", "CodeBleu_score": 29.603843388108935}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    references_map = {}\n    for doctype in repost_doctypes:\n        repost_doc = frappe.get_doc(doctype, self.repost_voucher_no)\n        if repost_doc.voucher_type == self.doctype and repost_doc.voucher_no == self.name:\n            references_map.setdefault(repost_doc.parenttype, frappe._dict()).setdefault(repost_doc.parent, []).append(repost_doc)\n    for parenttype, parent_map in references_map.items():\n        for parent, repost_docs in parent_map.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            if parent_doc.doctype in (\"Sales Invoice\", \"Purchase Invoice\"):\n                parent_doc.set(\"repost_vouchers\", [])\n                for repost_doc in repost_docs:\n                    parent_doc.append(\"repost_vouchers\", {\n                        \"voucher_type\": repost_doc.voucher_type,\n                        \"voucher_no\": repost_doc.voucher_no\n                    })\n            else:\n                parent_doc.set(\"vouchers\", [])\n                for repost_doc in repost_docs:\n                    parent_doc.append(\"vouchers\", {\n                        \"voucher_type\": repost_doc.voucher_type,\n                        \"voucher_no\": repost_doc.voucher_no\n                    })\n            parent_doc.flags.ignore_links = True\n            parent_doc.flags.ignore_validate = True\n            parent_doc.save()\n\n", "CodeBleu_score": 26.750432684199254}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doc_types = self.meta.get_repost_doc_types()\n    if not repost_doc_types:\n        return\n    repost_docs = frappe.get_all(\n        repost_doc_types,\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n        },\n    )\n    if not repost_docs:\n        return\n    references_map = defaultdict(list)\n    for repost_doc in repost_docs:\n        references_map[repost_doc.parenttype].append(repost_doc.parent)\n    for parenttype, parents in references_map.items():\n        for parent in parents:\n            repost_doc = frappe.get_doc(parenttype, parent)\n            repost_doc.set(\"repost_vouchers\", [])\n            repost_doc.set(\"vouchers\", [])\n            repost_doc.flags.ignore_validate_update_after_submit = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.save()\n\n", "CodeBleu_score": 31.62497243024959}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n\n    try:\n        transactions = []\n        total_transactions = 0\n        transactions_retrieved = 0\n        while transactions_retrieved < total_transactions:\n            response = self.client.Transactions.get(\n                self.access_token,\n                start_date,\n                end_date,\n                options={\"count\": 500, \"offset\": transactions_retrieved},\n            )\n            transactions.extend(response[\"transactions\"])\n            total_transactions = response[\"total_transactions\"]\n            transactions_retrieved = len(transactions)\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transactions error\")\n        frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n\n    return transactions", "CodeBleu_score": 40.178252563888265}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\tself.auth()\n\n    try:\n        transactions = []\n        transactions_get = self.client.Transactions.get(\n            self.access_token,\n            start_date,\n            end_date,\n            options={\n                \"count\": 500,\n                \"offset\": 0,\n            },\n        )\n        transactions.extend(transactions_get[\"transactions\"])\n        total_transactions = transactions_get[\"total_transactions\"]\n        while len(transactions) < total_transactions:\n            transactions_get = self.client.Transactions.get(\n                self.access_token,\n                start_date,\n                end_date,\n                options={\n                    \"count\": 500,\n                    \"offset\": len(transactions),\n                },\n            )\n            transactions.extend(transactions_get[\"transactions\"])\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            raise frappe.AuthenticationError(_(\"Plaid: Item login required\"))\n        elif e.code == \"PRODUCT_NOT_READY\":\n            raise frappe.AuthenticationError(_(\"Plaid: Product not ready\"))\n        elif e.code == \"PRODUCT_NOT_ENABLED\":\n            raise frappe.AuthenticationError(_(\"Plaid: Product not enabled\"))\n        elif e.code == \"INVALID_REQUEST\":\n            raise frappe.AuthenticationError(_(\"Plaid: Invalid request\"))\n        elif e.code == \"INVALID_INPUT\":\n            raise frappe.AuthenticationError(_(\"Plaid: Invalid input\"))\n        else:\n            frappe.log_error(\n                \"Plaid: Error while fetching transactions\", exc_info=True\n            )\n            frappe.throw(\n                _(\"Error while fetching transactions\"), title=_(\"Fetching Error\")\n            )\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            raise frappe.AuthenticationError(_(\"Plaid: Planned maintenance\"))\n        else:\n            frappe.log_error(\"Plaid: Error while fetch", "CodeBleu_score": 40.78193339408719}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.client.Auth.get(self.access_token)\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n\n    try:\n        transactions = []\n        total_transactions = 0\n        count = 0\n        while True:\n            try:\n                response = self.client.Transactions.get(\n                    self.access_token,\n                    start_date,\n                    end_date,\n                    options={\"count\": 500, \"offset\": count * 500},\n                )\n            except ItemError as e:\n                if e.code == \"ITEM_LOGIN_REQUIRED\":\n                    pass\n            except APIError as e:\n                if e.code == \"PLANNED_MAINTENANCE\":\n                    pass\n            except requests.Timeout:\n                pass\n            except Exception as e:\n                frappe.log_error(\"Plaid: Transactions error\")\n                frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n\n            transactions.extend(response[\"transactions\"])\n            total_transactions = response[\"total_transactions\"]\n            count += 1\n\n            if len(transactions) >= total_transactions:\n                break\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transactions error\")\n        frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n\n    return transactions\n\n", "CodeBleu_score": 38.231519757226}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\tif token is None:\n        frappe.log_error(\"Plaid: Token is missing\")\n    if response is None:\n        frappe.log_error(\"Plaid: Response is missing\")\n\n    access_token = PlaidConnector().get_access_token(token)\n    institution = response[\"institution\"]\n    bank = frappe.get_doc({\n        \"doctype\": \"Bank\",\n        \"bank_name\": institution[\"name\"],\n        \"plaid_access_token\": access_token\n    })\n    existing_bank = frappe.db.exists(\"Bank\", {\n        \"bank_name\": institution[\"name\"]\n    })\n    if existing_bank is None:\n        bank.insert()\n    else:\n        existing_bank = frappe.get_doc(\"Bank\", existing_bank)\n        existing_bank.plaid_access_token = access_token\n        existing_bank.save()\n\n", "CodeBleu_score": 44.409320657504956}, {"code": "def add_institution(token, response)\n\tif token is None:\n        frappe.log_error(\"Plaid: Token is missing\")\n    if response is None:\n        frappe.log_error(\"Plaid: Response is missing\")\n    try:\n        institution_id = response[\"institution\"][\"institution_id\"]\n        name = response[\"institution\"][\"name\"]\n        access_token = plaid.get_access_token(token)\n        bank = frappe.get_doc({\n            \"doctype\": \"Plaid Bank\",\n            \"institution_id\": institution_id,\n            \"name\": name,\n            \"access_token\": access_token\n        })\n        if frappe.db.exists(\"Plaid Bank\", bank.institution_id):\n            bank = frappe.get_doc(\"Plaid Bank\", bank.institution_id)\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 47.99335834093544}, {"code": "def add_institution(token, response)\n\ttry:\n        institution = json.loads(response)\n        access_token = plaid.get_access_token(token)\n        bank = bank.search(institution[\"institution\"][\"name\"])\n        if bank is None:\n            bank = bank.insert(institution[\"institution\"][\"name\"], access_token)\n            bank.save()\n        else:\n            bank.update_access_token(access_token)\n            bank.save()\n    except Exception as e:\n        frappe.log_error(e)", "CodeBleu_score": 41.31065755304768}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t# Get the last integration date\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Set the start and end dates for the transaction retrieval\n    if last_integration_date:\n        start_date = getdate(last_integration_date)\n        end_date = getdate(today())\n    else:\n        start_date = getdate(\n            add_months(today(), -1)\n        )  # If there is no last integration date, get the transactions for the last month\n        end_date = getdate(today())\n\n    # Attempt to fetch the transactions\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n    except Exception as e:\n        frappe.log_error(message=str(e), title=_(\"Plaid Transaction Fetch Error\"))\n        return\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        oldest_transaction_date = frappe.db.get_value(\n            \"Bank Transaction\",\n            {\"name\": new_transactions[-1]},\n            \"date\",\n        )\n        frappe.db.set_value(\n            \"Bank Account\",\n            bank_account,\n            \"last_integration_date\",\n            oldest_transaction_date,\n        )\n\n    # Log the number of new transactions added\n    frappe.log_error(\n        message=_(\"Added {} new bank transactions.\").format(len(new_transactions)),\n        title=_(\"Plaid Transaction Sync\"),\n    )\n\n", "CodeBleu_score": 38.97854597994761}, {"code": "def sync_transactions(bank, bank_account)\n\tlast_integration_date = frappe.db.get_value(\n        \"Bank\", bank, \"last_integration_date\"\n    )\n\n    if not last_integration_date:\n        last_integration_date = add_months(today(), -1)\n\n    start_date = formatdate(last_integration_date)\n    end_date = formatdate(today())\n\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            new_transactions = []\n            for transaction in transactions:\n                new_transactions += new_bank_transaction(transaction)\n            frappe.log_error(message=f\"{len(new_transactions)} new transactions added.\", title=_(\"Plaid Transactions Synced\"))\n\n            if new_transactions:\n                oldest_transaction = sorted(\n                    transactions, key=lambda k: k[\"date\"], reverse=False\n                )[0]\n                set_value(\"Bank\", bank, \"last_integration_date\", getdate(oldest_transaction[\"date\"]))\n\n    except Exception:\n        frappe.log_error(message=frappe.get_traceback(), title=_(\"Plaid Transactions Error\"))\n\n", "CodeBleu_score": 39.429310027869114}, {"code": "def sync_transactions(bank, bank_account)\n\t# Get the last integration date\n    last_integration_date = frappe.db.get_value(\n        \"Bank\", bank, \"last_integration_date\"\n    )\n\n    # Determine the start and end dates for the transaction retrieval\n    if not last_integration_date:\n        start_date = add_months(today(), -1)\n        end_date = today()\n    else:\n        start_date = last_integration_date\n        end_date = add_months(today(), -1)\n\n    # Get the bank transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date\n    if transactions:\n        frappe.db.set_value(\n            \"Bank\",\n            bank,\n            \"last_integration_date\",\n            getdate(transactions[-1][\"date\"]),\n        )\n\n    # Log the number of new transactions added\n    frappe.logger().info(\n        \"New bank transactions added: {}\".format(len(new_transactions))\n    )\n\n    return new_transactions\n\n", "CodeBleu_score": 33.62061780493658}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t# Construct the query URI\n    query = f\"{self.company_id}/query?query=select * from {entity} MAXRESULTS 1\"\n    response = self._get(self.api_url + query)\n    if response.status_code == 200:\n        # Determine the total number of entries\n        total = response.json()[\"QueryResponse\"][\"totalCount\"]\n        # Fetch the entries in batches of 1000\n        for start_position in range(0, total, 1000):\n            query = f\"{self.company_id}/query?query=select * from {entity} STARTPOSITION {start_position} MAXRESULTS 1000\"\n            response = self._get(self.api_url + query)\n            if response.status_code == 200:\n                try:\n                    # Preprocess the entries\n                    entries = self._preprocess_entries(\n                        entity, response.json()[\"QueryResponse\"][f\"{entity}\"]\n                    )\n                    # Save the entries\n                    self._save_entries(entity, entries)\n                except Exception as e:\n                    self._log_error(e, response.text)\n            else:\n                self._log_error(response.text)\n    else:\n        self._log_error(response.text)\n\n", "CodeBleu_score": 38.33749392783334}, {"code": "def _migrate_entries(self, entity)\n\tquery = f\"select * from {entity} maxresults 1\"\n    response = self._get(\n        f\"{self.base_url}/v3/company/{self.realm_id}/query\",\n        params={\"query\": query},\n    )\n    if response.status_code == 200:\n        total = response.json()[\"totalCount\"]\n        if total:\n            for start_position in range(0, total, 1000):\n                query = f\"select * from {entity} startposition {start_position} maxresults 1000\"\n                response = self._get(\n                    f\"{self.base_url}/v3/company/{self.realm_id}/query\",\n                    params={\"query\": query},\n                )\n                if response.status_code == 200:\n                    entries = response.json()[\"QueryResponse\"][f\"{entity}\"]\n                    entries = self._preprocess_entries(entity, entries)\n                    self._save_entries(entity, entries)\n                else:\n                    self._log_error(\n                        execption=_(\"Failed to fetch {0} entries\").format(entity),\n                        data=response.text,\n                    )\n        else:\n            self._publish(\n                {\"event\": \"progress\", \"message\": _(\"No {0} found\").format(entity)}\n            )\n    else:\n        self._log_error(\n            execption=_(\"Failed to fetch {0} count\").format(entity), data=response.text\n        )\n\n", "CodeBleu_score": 34.09246454212458}, {"code": "def _migrate_entries(self, entity)\n\t# Construct the query URI\n    query = f\"select * from {entity} maxresults 1\"\n    response = self._get(self.api_url + query)\n    if response.status_code != 200:\n        self._log_error(\n            execption=_(\"Unable to get {0}\").format(entity), data=response.text\n        )\n        return\n    # Determine the total number of entries\n    total = response.json()[\"QueryResponse\"][\"maxResults\"]\n    # Retrieve the entries in batches of 1000\n    entries = []\n    for start_position in range(0, total, 1000):\n        query = f\"select * from {entity} startposition {start_position} maxresults 1000\"\n        response = self._get(self.api_url + query)\n        if response.status_code != 200:\n            self._log_error(\n                execption=_(\"Unable to get {0}\").format(entity), data=response.text\n            )\n            return\n        entries.extend(response.json()[\"QueryResponse\"][entity])\n    # Preprocess and save the entries\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)\n\n", "CodeBleu_score": 37.52281333940425}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\tquickbooks_id = self._get_quickbooks_id(invoice[\"Id\"])\n    if invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"DiscountLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"SubtotalLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"ItemBasedExpenseLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"ItemBasedExpenseLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"ItemBasedExpenseLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"Line\"][0][\"DetailType\"] == \"ItemBasedExpenseLineDetail\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"", "CodeBleu_score": 23.730484035204807}, {"code": "def _save_invoice(self, invoice)\n\tquickbooks_id = self._get_quickbooks_id(invoice)\n    is_return = invoice[\"TxnType\"] == \"CreditMemo\"\n    is_pos = invoice[\"TxnSource\"] == \"QBPOS\"\n    linked_transactions = invoice.get(\"LinkedTxn\", [])\n    linked_transactions_type = [t[\"TxnType\"] for t in linked_transactions]\n    if \"StatementCharge\" in linked_transactions_type or \"ReimburseCharge\" in linked_transactions_type:\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id, is_return=is_return, is_pos=is_pos)\n\n", "CodeBleu_score": 43.496899849349916}, {"code": "def _save_invoice(self, invoice)\n\ttry:\n        quickbooks_id = invoice[\"Id\"]\n        if frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": quickbooks_id, \"company\": self.company}\n        ):\n            return\n        elif frappe.db.exists(\n            {\"doctype\": \"Journal Entry\", \"quickbooks_id\": quickbooks_id, \"company\": self.company}\n        ):\n            return\n\n        is_return = False\n        is_pos = False\n        for linked_transaction in invoice.get(\"LinkedTxn\", []):\n            if linked_transaction[\"TxnType\"] == \"StatementCharge\":\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                return\n            elif linked_transaction[\"TxnType\"] == \"ReimburseCharge\":\n                is_return = True\n            elif linked_transaction[\"TxnType\"] == \"SalesReceipt\":\n                is_pos = True\n\n        self._save_sales_invoice(invoice, quickbooks_id, is_return=is_return, is_pos=is_pos)\n    except Exception as e:\n        self._log_error(e, [invoice])", "CodeBleu_score": 33.01032258829586}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tschedule_list = []\n\n    # Calculate the interval between visits.\n    if no_of_visit > 1:\n        delta = (end_date - start_date).days // (no_of_visit - 1)\n    else:\n        delta = 0\n\n    # Iterate to create the schedule.\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=delta * i)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 31.857374058367384}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tschedule_list = []\n    schedule_date = start_date\n    interval = (end_date - start_date).days // no_of_visit\n\n    for _i in range(no_of_visit):\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n\n    return schedule_list\n\n", "CodeBleu_score": 30.02912987670012}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# calculate the interval between visits\n    interval = (end_date - start_date).days // no_of_visit\n\n    # create a list of dates between the start and end date, with the calculated interval\n    schedule_list = [start_date + datetime.timedelta(days=x) for x in range(0, (end_date - start_date).days, interval)]\n\n    # iterate through the schedule list and adjust dates to avoid holidays\n    for i, date in enumerate(schedule_list):\n        schedule_list[i] = self.validate_schedule_date_for_holiday_list(date, sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 17.246833814309255}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n      $handle = $this->actions[$method]['handle'] ?? 'update';\n      $url = route('bulk-actions.action', $this->path);\n      $html = view('components.index.bulkaction.modal', [\n         'url' => $url,\n         'handle' => $handle,\n         'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n         'html' => view($view, $data)->render(),\n      ])->render();\n      return response()->json([\n         'success' => true,\n         'error' => false,\n         'message' => '',\n         'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n         ],\n         'html' => $html,\n      ]);\n   }", "CodeBleu_score": 98.65585006663811}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.39138004594056}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 70.27295272370696}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.39138004594056}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 69.62832241615978}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.17520190678093}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.17520190678093}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t$validator->after(function ($validator) {\n        if ($validator->fails()) {\n            $this->throwValidationException($validator->getData(), $validator);\n        }\n    });\n}", "CodeBleu_score": 14.127700401093271}, {"code": "<?\npublic function withValidator($validator){\n\t$validator->after(function ($validator) {\n        if ($validator->fails()) {\n            $this->throwValidationException($validator);\n        }\n    });\n}", "CodeBleu_score": 13.772340364431493}, {"code": "<?\npublic function withValidator($validator){\n\t$request = $this->container->make(Request::class);\n    $validator->after(function ($validator) use ($request) {\n        $this->addValidationException($request, $validator);\n    });\n}", "CodeBleu_score": 16.634958030422293}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (!$this instanceof ShouldUpdate) {\n        throw new Exception('This action requires the class to implement the ShouldUpdate interface.');\n    }\n\n    if (count($arguments) === 0) {\n        throw new Exception('This action requires at least one argument.');\n    }\n\n    $this->model = $this->getModelInstance($arguments[0]);\n\n    if (count($arguments) > 1) {\n        $this->request = $this->getRequestInstance($arguments[1]);\n    }\n}", "CodeBleu_score": 40.45417119236052}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        $this->update();\n    }\n\n    $this->setModel(...$arguments);\n}", "CodeBleu_score": 14.776545949188796}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        $this->setModel($arguments[0] ?? null);\n        $this->setRequest($arguments[1] ?? null);\n    }\n}", "CodeBleu_score": 20.040267540341443}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n  $query->usingSearchString()->sortable($sort);\n  if ($request->expectsJson()) {\n   return $request->isNotApi() ? $query->get() : $query->paginate(setting('records_per_page', 100));\n  }\n  return $query->get();\n }", "CodeBleu_score": 35.421496486457535}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = $this->usingSearchString($query)->sortable($sort);\n     if ($this->isNotApi($this->request)) {\n         return $this->get($query, $sort);\n     }\n     return $this->paginate($query, $sort);\n }", "CodeBleu_score": 27.16668133565145}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\treturn $query->usingSearchString()->sortable($sort)->paginate(request('perPage', $this->getPerPage()));\n}", "CodeBleu_score": 18.353873953103506}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->getStatus() == 'paid') {\n        return [0, 0];\n    }\n\n    if ($model->getStatus() == 'partial') {\n        $payments = $model->getPayments();\n        foreach ($payments as $payment) {\n            $openAmount += $payment->getAmountConvertedToDefault();\n        }\n    } else {\n        $openAmount = $model->getAmountConvertedToDefault();\n    }\n\n    if ($model->getDueDate() < Date::today()->toDateString()) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 45.10970430574527}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    // Calculate the open and overdue amounts for the document\n    foreach ($model->transactions as $transaction) {\n        if ($transaction->status == 'paid') {\n            $openAmount += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    // If the document is not paid, check if it is overdue\n    if ($model->status != 'paid') {\n        if ($model->due_date < Date::today()) {\n            $overdueAmount = $openAmount;\n            $openAmount = 0;\n        }\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 49.716656201775294}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = 0;\n    $overdue = 0;\n\n    // If the document is paid, return zeroes\n    if ($model->status == 'paid') {\n        return [$open, $overdue];\n    }\n\n    // If the document is partial, sum the payments from transactions\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $open += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    // If the document is open, adjust the open amount\n    if ($model->status == 'open') {\n        $open = $model->getAmountConvertedToDefault();\n    }\n\n    // If the document is overdue, adjust the overdue amount\n    if ($model->status == 'overdue') {\n        $overdue = $model->getAmountConvertedToDefault();\n    }\n\n    // If the document is open or overdue, adjust the amounts based on the due date\n    if ($model->status == 'open' || $model->status == 'overdue') {\n        if ($model->due_date < Date::today()) {\n            $overdue = $open;\n            $open = 0;\n        }\n    }\n\n    return [$open, $overdue];\n}", "CodeBleu_score": 57.015806159223956}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.00540471418374}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                    ? $this->forPage($page, $perPage)->get($columns)\n                    : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.12695920504383}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.00540471418374}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->reconciled = 1;\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                $item->reconciled = 1;\n                $item->save();\n            });\n        });\n    }\n}", "CodeBleu_score": 92.9010058760669}, {"code": "<?\npublic function reconcile($request){\n\t$this->getSelectedRecords($request)->each(function ($item) {\n        $item->save();\n    });\n}", "CodeBleu_score": 13.406154655014928}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()\n                    ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                    ->update(['reconciled' => 1]);\n        });\n    }\n}", "CodeBleu_score": 72.74042510211613}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid()->toString()\n    ]);\n\n    \\DB::transaction(function () use ($invitation) {\n        try {\n            $this->dispatch(new SendInvitationNotification($invitation));\n        } catch (\\Exception $e) {\n            throw new \\Exception('Unable to send invitation notification.');\n        }\n    });\n\n    return $invitation;\n}", "CodeBleu_score": 52.40661253310981}, {"code": "<?\npublic function handle(): UserInvitation{\n\t// Retrieve and delete existing invitations for the user\n    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    // Create a new invitation with a unique token\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid()->toString(),\n    ]);\n\n    // Attempt to dispatch a notification job to notify the user\n    try {\n        $this->dispatch(new SendUserInvitationNotification($invitation));\n    } catch (Exception $e) {\n        // Throw an exception with an error message\n        throw new Exception(trans('invite.failure'));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 48.98402285562422}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->beginTransaction();\n    $this->deleteExistingInvitations();\n    $invitation = $this->createInvitation();\n    try {\n        $invitation->notify();\n    } catch (\\Exception $e) {\n        $this->rollbackTransaction();\n        throw new \\Exception(\"Failed to send notification to user {$this->user->email}.\");\n    }\n    $this->commitTransaction();\n    return $invitation;\n}", "CodeBleu_score": 17.84471704932064}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled()) {\n        throw new Exception(\"You can't authorize a reconciled transaction\");\n    }\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException(\"You can't authorize a transfer transaction\");\n    }\n    $this->model->authorize();\n}", "CodeBleu_score": 31.034382577138885}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled()) {\n        throw new \\Exception(\"Transaction with id $this->model->id is already reconciled\");\n    }\n    if ($this->model->isTransferTransaction()) {\n        throw new \\Exception(\"Transaction with id $this->model->id is a transfer transaction\");\n    }\n}", "CodeBleu_score": 33.491651714854356}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->isReconciled()) {\n        throw new \\Exception('Transaction has already been reconciled');\n    }\n\n    if ($this->isTransferTransaction()) {\n        throw new \\UnauthorizedException();\n    }\n}", "CodeBleu_score": 31.878252428710198}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\tif (getTenantIdByToken() != 0) {\n        if (tableName.equals(\"table1\") || tableName.equals(\"table2\") || tableName.equals(\"table3\")) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 12.427827253082901}, {"code": "public boolean doTableFilter(String tableName){\n\tString tenantId = getTenantIdByToken(request.getHeader(\"Authorization\"));\n    if (tenantId.equals(\"0\")) {\n        return true;\n    } else {\n        if (tableName.equals(\"tenants\") || tableName.equals(\"users\") || tableName.equals(\"user_tenant_map\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "CodeBleu_score": 25.35399327790139}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"tenant_id_mapping\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2016\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2017\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2018\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2019\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2020\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2021\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2022\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2023\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2024\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2025\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2026\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2027\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id_mapping_history_archive_2028", "CodeBleu_score": 16.59878485180101}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.930524929283635}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(basePackage);\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.13695222029505}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\n\ttry {\n\t\t// get the system configuration list\n\t\tList<SystemConfig> list = getSystemConfig();\n\t\t// if the list is not empty, set the response code to 200 and include the first item in the list\n\t\tif (list != null && list.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(list.get(0));\n\t\t}\n\t\t// otherwise, set the response code to 404 and include an error message\n\t\telse {\n\t\t\tresponse.setCode(404);\n\t\t\tresponse.setError(\"No system configuration information found.\");\n\t\t}\n\t} catch (Exception e) {\n\t\t// log the exception\n\t\tlogger.error(e);\n\t\t// set the response code to 500 and include an error message\n\t\tresponse.setCode(500);\n\t\tresponse.setError(\"Exception: \" + e);\n\t}\n\n\treturn response;\n}", "CodeBleu_score": 31.453521126007}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> configList = getSystemConfig();\n        if (configList.size() > 0) {\n            response.setCode(200);\n            response.setData(configList.get(0));\n        } else {\n            response.setCode(204);\n            response.setData(\"No system configuration information found\");\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setData(\"An error occurred while retrieving the system configuration information\");\n    }\n    return response;\n}", "CodeBleu_score": 34.96913207397443}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = getSystemConfig();\n        response.setCode(200);\n        response.setData(systemConfigList.get(0));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setData(\"Exception occurred while retrieving current system configuration information.\");\n    }\n    return response;\n}", "CodeBleu_score": 36.701222602342106}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tString method = \"upload\";\n    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // Get the business path and the uploaded file from the request\n        String businessPath = request.getParameter(KEY_PATH);\n        MultipartFile uploadFile = getFile(request);\n        // If the business path is missing, throw an exception\n        if (businessPath == null || businessPath.length() == 0) {\n            throw new FilePathException(FilePathException.PATH_EMPTY);\n        }\n        // If the uploaded file is missing, throw an exception\n        if (uploadFile == null) {\n            throw new FileUploadException(FileUploadException.UPLOAD_EMPTY);\n        }\n        // If the uploaded file is empty, throw an exception\n        if (uploadFile.isEmpty()) {\n            throw new FileUploadException(FileUploadException.UPLOAD_EMPTY);\n        }\n        // If the uploaded file is too large, throw an exception\n        if (uploadFile.getSize() > MAX_FILE_SIZE) {\n            throw new FileUploadException(FileUploadException.UPLOAD_TOO_LARGE);\n        }\n        // Get the file name and extension from the uploaded file\n        String fileName = uploadFile.getOriginalFilename();\n        String extension = FilenameUtils.getExtension(fileName);\n        // If the file name is missing, throw an exception\n        if (fileName == null || fileName.length() == 0) {\n            throw new FileUploadException(FileUploadException.UPLOAD_EMPTY);\n        }\n        // If the file extension is missing, throw an exception\n        if (extension == null || extension.length() == 0) {\n            throw new FileUploadException(FileUploadException.EXTENSION_EMPTY);\n        }\n        // If the file extension is not supported, throw an exception\n        if (!isExtensionSupported(extension)) {\n            throw new FileUploadException(FileUploadException.EXTENSION_UNSUPPORTED);\n        }\n        // If the file is a picture, validate the picture size\n        if (isPicture(extension)) {\n            BufferedImage image = ImageIO.read(uploadFile.getInputStream());\n            if (image.getHeight()", "CodeBleu_score": 28.576804403410417}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tDelegator delegator = (Delegator) request.getAttribute(\"delegator\");\n    LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(\"dispatcher\");\n    Locale locale = UtilHttp.getLocale(request);\n    String businessPath = request.getParameter(\"businessPath\");\n    String uploadType = request.getParameter(\"uploadType\");\n    String fileLocation = request.getParameter(\"fileLocation\");\n    String uploadFileName = request.getParameter(\"uploadFileName\");\n    String fileType = request.getParameter(\"fileType\");\n    String fileSize = request.getParameter(\"fileSize\");\n    String fileExt = request.getParameter(\"fileExt\");\n    String uploadFileId = request.getParameter(\"uploadFileId\");\n    String uploadFileType = request.getParameter(\"uploadFileType\");\n    String uploadFileVersion = request.getParameter(\"uploadFileVersion\");\n    String uploadFileDescription = request.getParameter(\"uploadFileDescription\");\n    String uploadFileContentType = request.getParameter(\"uploadFileContentType\");\n    String uploadFileDataResourceId = request.getParameter(\"uploadFileDataResourceId\");\n    String uploadFileDataResourceName = request.getParameter(\"uploadFileDataResourceName\");\n    String uploadFileDataResourceType = request.getParameter(\"uploadFileDataResourceType\");\n    String uploadFileObjectInfo = request.getParameter(\"uploadFileObjectInfo\");\n    String uploadFileObjectInfoLabel = request.getParameter(\"uploadFileObjectInfoLabel\");\n    String uploadFileObjectInfoDescription = request.getParameter(\"uploadFileObjectInfoDescription\");\n    String uploadFileIsPublic = request.getParameter(\"uploadFileIsPublic\");\n    String uploadFileIsCompany = request.getParameter(\"uploadFileIsCompany\");\n    String uploadFileIsPersonal = request.getParameter(\"uploadFileIsPersonal\");\n    String uploadFileLevel = request.getParameter(\"uploadFileLevel\");\n    String uploadFileLevelDescription = request.getParameter(\"uploadFileLevelDescription\");\n    String uploadFileLevelType = request.getParameter(\"uploadFileLevelType\");\n    String uploadFileLevelValue = request.getParameter(\"uploadFileLevelValue\");\n    String uploadFileGroupId = request.getParameter(\"uploadFileGroupId\");\n    String uploadFileGroupName = request.getParameter(\"uploadFile", "CodeBleu_score": 18.5980027885075}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tString filePath = request.getParameter(\"filePath\");\n    String uploadType = request.getParameter(\"uploadType\");\n    if (uploadType == null || uploadType.trim().length() == 0) {\n        uploadType = \"local\";\n    }\n    try {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        if (file == null) {\n            return new BaseResponseInfo(BaseResponseInfo.UPLOAD_FAIL, \"\u4e0a\u4f20\u5931\u8d25\");\n        }\n        if (file.isEmpty()) {\n            return new BaseResponseInfo(BaseResponseInfo.UPLOAD_FAIL, \"\u4e0a\u4f20\u5931\u8d25\");\n        }\n        String fileName = file.getOriginalFilename();\n        if (isNotEmpty(fileName)) {\n            if (uploadType.equals(\"local\")) {\n                String fileUrl = uploadLocal(filePath, fileName, file);\n                return new BaseResponseInfo(BaseResponseInfo.SUCCESS, \"\u4e0a\u4f20\u6210\u529f\", fileUrl);\n            } else {\n                String fileUrl = uploadAliOss(filePath, fileName, file);\n                return new BaseResponseInfo(BaseResponseInfo.SUCCESS, \"\u4e0a\u4f20\u6210\u529f\", fileUrl);\n            }\n        } else {\n            return new BaseResponseInfo(BaseResponseInfo.UPLOAD_FAIL, \"\u4e0a\u4f20\u5931\u8d25\");\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return new BaseResponseInfo(BaseResponseInfo.UPLOAD_FAIL, \"\u4e0a\u4f20\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 38.46831444213201}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n        int result=0;\n        try{\n            if(account.getName()==null){\n                account.setName(\"\");\n            }\n            if(account.getSerialNo()==null){\n                account.setSerialNo(\"\");\n            }\n            if(account.getRemark()==null){\n                account.setRemark(\"\");\n            }\n            if(account.getInitialAmount()==null){\n                account.setInitialAmount(BigDecimal.valueOf(0));\n            }\n            account.setIsDefault(false);\n            account.setEnabled(true);\n            List<Account> list=getAccountByParam(account.getName(), account.getSerialNo());\n            if(list.size()==0){\n                List<Account> accountList = findByIsDefault(true);\n                if(accountList.size()==0){\n                    account.setIsDefault(true);\n                }\n                result=insertAccount(account);\n                logService.insertLog(\"\u8d26\u6237\",\n                        new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getName()).toString(), request);\n            }else{\n                throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_NAME_ALREADY_EXISTS_CODE,\n                        ExceptionConstants.ACCOUNT_NAME_ALREADY_EXISTS_MSG);\n            }\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 59.36835649813794}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n    int result=0;\n    try{\n        if(account.getName()!=null) {\n            account.setSerialNo(findMaxSerialNo() + 1);\n            if(account.getInitialAmount()==null) {\n                account.setInitialAmount(BigDecimal.valueOf(0));\n            }\n            if(account.getIsDefault()==null) {\n                List<Account> list = findByIsDefault(true);\n                if (list.size() == 0) {\n                    account.setIsDefault(true);\n                }\n            }\n            account.setStatus(BusinessConstants.ACCOUNT_STATUS_ENABLE);\n            account.setCreateTime(new Timestamp(System.currentTimeMillis()));\n            account.setUpdateTime(new Timestamp(System.currentTimeMillis()));\n            result= insertAccount(account);\n            logService.insertLog(\"\u8d26\u6237\",\n                    new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getName()).toString(), request);\n        }\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 63.09507475687952}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n    int result=0;\n    try{\n        if(account.getName()==null){\n            account.setName(\"\");\n        }\n        if(account.getSerialNo()==null){\n            account.setSerialNo(\"\");\n        }\n        if(account.getInitialAmount()==null){\n            account.setInitialAmount(BigDecimal.valueOf(0));\n        }\n        if(account.getCurrentAmount()==null){\n            account.setCurrentAmount(BigDecimal.valueOf(0));\n        }\n        if(account.getRemark()==null){\n            account.setRemark(\"\");\n        }\n        if(account.getIsDefault()==null){\n            account.setIsDefault(false);\n        }\n        if(account.getEnabled()==null){\n            account.setEnabled(true);\n        }\n        if(account.getInOutItem()==null){\n            account.setInOutItem(0);\n        }\n        if(account.getType()==null){\n            account.setType(0);\n        }\n        if(account.getCurrency()==null){\n            account.setCurrency(\"\");\n        }\n        if(account.getOrgId()==null){\n            account.setOrgId(0L);\n        }\n        if(account.getAccount()==null){\n            account.setAccount(\"\");\n        }\n        if(account.getTaxRate()==null){\n            account.setTaxRate(0);\n        }\n        if(account.getTaxLastMoney()==null){\n            account.setTaxLastMoney(BigDecimal.valueOf(0));\n        }\n        if(account.getTaxPercentage()==null){\n            account.setTaxPercentage(BigDecimal.valueOf(0));\n        }\n        if(account.getOtherField1()==null){\n            account.setOtherField1(\"\");\n        }\n        if(account.getOtherField2()==null){\n            account.setOtherField2(\"\");\n        }\n        if(account.getOtherField3()==null){", "CodeBleu_score": 35.1845726461548}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return getDs().getCount(Account.class, getDs().createQuery(Account.class).field(\"name\").equal(name).field(\"serialNo\").equal(serialNo));\n    } catch (Exception e) {\n        LOG.error(\"Error reading account with name: \" + name + \" and serialNo: \" + serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 26.505526880477515}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return countsByAccount.get(new Account(name, serialNo));\n    } catch (Exception e) {\n        logger.error(\"Error occurred while getting count for account: \" + name + \" \" + serialNo);\n        return null;\n    }\n}", "CodeBleu_score": 28.87601238797134}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return countsByAccount.get(new Account(name, serialNo));\n    } catch (Exception e) {\n        log.error(\"Exception occurred while getting count for account with name: \" + name + \" and serial number: \" + serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 28.052921465170023}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\ttry {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"error deleting depot item\", e);\n        throw e;\n    }\n}", "CodeBleu_score": 32.526467464872916}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"Error deleting depot item: \" + e.getMessage());\n        throw new Exception(\"Error deleting depot item: \" + e.getMessage());\n    }\n    return result;\n}", "CodeBleu_score": 59.6648515618819}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tDepotItemMapper mapper = getDepotItemMapper(request);\n    try {\n        return mapper.deleteByPrimaryKey(id);\n    } catch (SQLException e) {\n        log.error(\"Error deleting depot item with id \" + id + \": \" + e.getMessage());\n        throw e;\n    }\n}", "CodeBleu_score": 34.42932887520863}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean result = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tresult = readValue(httpResponse);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 38.701027340911025}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean result = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tresult = readValue(httpResponse);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 38.701027340911025}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean success = false;\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tsuccess = readValue(httpResponse, \"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 39.50032505664301}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tboolean success = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse != null) {\n\t\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\tif (response.contains(\"key\")) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 49.90002680524672}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tboolean success = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edge?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\tif (statusCode == 200) {\n\t\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 48.82458540813961}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tboolean success = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + \"/api/2/edges\";\n\t\t\tList<NameValuePair> params = new ArrayList<NameValuePair>();\n\t\t\tparams.add(new BasicNameValuePair(\"project\", projectName));\n\t\t\tparams.add(new BasicNameValuePair(\"edgeType\", edgeType));\n\t\t\tparams.add(new BasicNameValuePair(\"fromType\", fromType));\n\t\t\tparams.add(new BasicNameValuePair(\"toType\", toType));\n\t\t\tparams.add(new BasicNameValuePair(\"from\", from));\n\t\t\tparams.add(new BasicNameValuePair(\"to\", to));\n\t\t\tURIBuilder builder = new URIBuilder(url).addParameters(params);\n\t\t\tHttpGet httpGet = new HttpGet(builder.build());\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\tJSONObject json = new JSONObject(response);\n\t\t\t\tif (json.has(\"key\")) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 43.41144954263343}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event != null && event.getMessage() != null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString json = gson.toJson(event);\n\t\tString topic = (event.getTarget() != null) ? event.getTarget() : \"test\";\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 39.807795147495575}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = gson.toJson(event);\n\tif (target == null) {\n\t\ttarget = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 39.103612269803904}, {"code": "public void sendEvent(Event event){\n\tif (event == null) {\n\t\t\tthrow new NullPointerException(\"Event is null\");\n\t\t}\n\t\tif (event.getMessage() == null) {\n\t\t\tthrow new NullPointerException(\"Event message is null\");\n\t\t}\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString eventString = writeValueAsString(event);\n\t\tString topic = \"test\";\n\t\tif (event.getTarget() != null) {\n\t\t\ttopic = event.getTarget();\n\t\t}\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, eventString);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}", "CodeBleu_score": 47.0969329368411}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\ttry {\n        // Initialize an OSS client.\n        OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n        // Upload the object.\n        ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n        // Shut down the OSS client.\n        ossClient.shutdown();\n        // Return the URL of the uploaded object.\n        return getOssObjectUrl(objName);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 32.32854210917993}, {"code": "public String upload(String objName, byte[] content){\n\t// Initialize OSS client\n    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n    // Upload the object and get the URL of the object\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n    String url = ossClient.generatePresignedUrl(getOssBucket(), objName, new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10)).toString();\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the object\n    return url;\n}", "CodeBleu_score": 34.988775116690086}, {"code": "public String upload(String objName, byte[] content){\n\tOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n        ossClient.shutdown();\n        return \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n    }", "CodeBleu_score": 40.516143584559174}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tif (ipAddress == null) {\n        return null;\n    }\n    if (ipAddress.equals(\"127.0.0.1\")) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 37.17737578232108}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.99707200100481}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.99707200100481}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tLOG.info(\"Initializing Elasticsearch client for cluster: \" + clusterHostList + \":\" + clusterHostPort);\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\tif (this.username != null && this.password != null) {\n\t\t\t\tfinal CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(this.username, this.password));\n\t\t\t\tbuilder.setHttpClientConfigCallback(httpClientBuilder -> {\n\t\t\t\t\thttpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n\t\t\t\t\treturn httpClientBuilder;\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.lowLevelClient = builder.build();\n\t\t\tthis.highLevelClient = new RestHighLevelClient(lowLevelClient);\n\t\t}\n\t}", "CodeBleu_score": 53.194800466868074}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient == null || highLevelClient == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (lowLevelClient == null || highLevelClient == null) {\n\t\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n\t\t\t\t\tlowLevelClient = builder.build();\n\t\t\t\t\thighLevelClient = new RestHighLevelClient(builder);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 55.52346615708845}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (lowLevelClient == null) {\n\t\t\t\tlowLevelClient = buildLowLevelClient();\n\t\t\t}\n\t\t\tif (highLevelClient == null) {\n\t\t\t\thighLevelClient = buildHighLevelClient();\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 40.49558222741191}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        if (hostAndPort.length == 1) {\n            hosts.add(new HttpHost(hostAndPort[0], clusterPort));\n        } else if (hostAndPort.length == 2) {\n            hosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n        } else {\n            throw new IllegalArgumentException(\"Unable to parse host: \" + host);\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.921090525861985}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        if (host.contains(\":\")) {\n            hosts.add(new HttpHost(host.split(\":\")[0], Integer.parseInt(host.split(\":\")[1])));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.74786464483571}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        if (host.contains(\":\")) {\n            hosts.add(new HttpHost(host.split(\":\")[0], Integer.parseInt(host.split(\":\")[1])));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.74786464483571}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\t// Retrieve the next task from the queue.\n\t\t\tSendMessageRequest request = queue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (request == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check the type of the task.\n\t\t\tif (request instanceof SendPlainTextMessageRequest) {\n\t\t\t\tSendPlainTextMessageRequest plainTextMessageRequest = (SendPlainTextMessageRequest) request;\n\n\t\t\t\t// Validate the message data.\n\t\t\t\tif (plainTextMessageRequest.getNumber() == null || plainTextMessageRequest.getNumber().isEmpty()\n\t\t\t\t\t\t|| plainTextMessageRequest.getMessage() == null || plainTextMessageRequest.getMessage().isEmpty()) {\n\t\t\t\t\tSystem.out.println(\"Invalid message data: \" + plainTextMessageRequest);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Send the message.\n\t\t\t\ttry {\n\t\t\t\t\tsendPlainTextMessage(plainTextMessageRequest.getNumber(), plainTextMessageRequest.getMessage());\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"Exception caught sending message: \" + e);\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Unknown task type: \" + request);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 23.811840113446824}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\t// Retrieve a task from the queue.\n\t\t\tSmsTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task != null) {\n\t\t\t\t// Check the task type.\n\t\t\t\tif (task instanceof SendSmsTask) {\n\t\t\t\t\t// Retrieve the message data.\n\t\t\t\t\tSendSmsTask smsTask = (SendSmsTask) task;\n\t\t\t\t\tString toNumber = smsTask.getToNumber();\n\t\t\t\t\tString message = smsTask.getMessage();\n\t\t\t\t\t// Validate the message data.\n\t\t\t\t\tif (isValidPhoneNumber(toNumber) && isValidMessage(message)) {\n\t\t\t\t\t\t// Send the message.\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t// Log the error.\n\t\t\t\t\t\t\tSystem.err.println(e.getMessage());\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Log the error.\n\t\t\t\t\t\tSystem.err.println(\"Invalid message data in task: \" + smsTask);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 30.994849175294497}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\t// Get a task from the queue\n\t\t\tString task = this.getQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (task != null) {\n\t\t\t\t// Check the task type\n\t\t\t\tif (task.startsWith(\"SMS\")) {\n\t\t\t\t\t// Extract the recipient number and message data\n\t\t\t\t\tString[] fields = task.split(\":\");\n\t\t\t\t\tString toNumber = fields[1];\n\t\t\t\t\tString message = fields[2];\n\t\t\t\t\t// Validate the message data\n\t\t\t\t\tif (message.length() > 160) {\n\t\t\t\t\t\t// The message is too long\n\t\t\t\t\t\tSystem.out.println(\"Message is too long. Discarding message to \" + toNumber);\n\t\t\t\t\t} else if (message.matches(\".*\\\\b[A-Za-z0-9]+\\\\b.*\")) {\n\t\t\t\t\t\t// The message contains invalid characters\n\t\t\t\t\t\tSystem.out.println(\"Message contains invalid characters. Discarding message to \" + toNumber);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Send the message\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t// An exception occurred. Log the error message\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Unknown task type\n\t\t\t\t\tSystem.out.println(\"Unknown task type. Discarding task \" + task);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 31.53510189430737}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpClient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\thttpGet.setHeader(\"Accept\", \"application/xml\");\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString xml = EntityUtils.toString(entity, \"UTF-8\");\n\tprintln(xml);\n\treturn xml;\n}", "CodeBleu_score": 59.62321709340277}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString xml = EntityUtils.toString(entity, \"UTF-8\");\n\t\tprintln(xml);\n\t\treturn xml;\n\t}", "CodeBleu_score": 61.035390980981965}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tprintln(content);\n\t\treturn content;\n\t}", "CodeBleu_score": 68.19781875365759}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] rootObj = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\tif (rootObj == null || rootObj.length < 2){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) rootObj[1];\n}", "CodeBleu_score": 52.16536835142207}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tObject[] root = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\tif (root == null || root.length < 2 || !(root[1] instanceof Map)){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) root[1];\n}", "CodeBleu_score": 52.3392512108591}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument document = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\tElement element = document.getDocumentElement();\n\tObject[] result = decodeNodeToMap(element, doTrim);\n\tif (result == null){\n\t\treturn null;\n\t}\n\tMap<String, Object> map = new HashMap<String, Object>();\n\tmap.put((String) result[0], result[1]);\n\treturn map;\n}", "CodeBleu_score": 54.14146708753182}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (eligibleForAutoProcessing)\n\t{\n\t\tlogger.debug(\"Order {} is eligible for auto-processing\", orderRecord);\n\t\tscheduleIfNotPostponed(orderRecord, GenerateSchedulesAfterCommit.class, orderRecord.getTrxName());\n\t}\n\telse\n\t{\n\t\tlogger.debug(\"Order {} is not eligible for auto-processing\", orderRecord);\n\t\tscheduleIfNotPostponed(orderRecord, CreateMissingShipmentSchedules.class, orderRecord.getTrxName());\n\t}\n}", "CodeBleu_score": 28.925747092223865}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tfinal boolean postponeSchedules = sysConfigBL.getBooleanValue(SYS_Config_PostponeSchedules, false, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\n\tif (eligibleForAutoProcessing)\n\t{\n\t\taddLog(orderRecord, \"Scheduling auto-ship and invoice for order {}\", orderRecord.getDocumentNo());\n\n\t\tscheduleIfNotPostponed(orderRecord, postponeSchedules);\n\t}\n\telse\n\t{\n\t\taddLog(orderRecord, \"Scheduling missing shipment schedules for order {}\", orderRecord.getDocumentNo());\n\n\t\tscheduleIfNotPostponed(orderRecord, postponeSchedules);\n\t}\n}", "CodeBleu_score": 41.04865312809986}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\twithLogger(log, Level.DEBUG)\n\t\t\t\t.addLog(\"{}: {}\", MSG_ORDER_IS_ELIGIBLE_FOR_AUTO_PROCESSING, orderRecord)\n\t\t\t\t.addLog(\"Scheduling order for automatic shipping and invoicing\")\n\t\t\t\t.scheduleIfNotPostponed(orderRecord);\n\t}\n\telse\n\t{\n\t\twithLogger(log, Level.DEBUG)\n\t\t\t\t.addLog(\"{}: {}\", MSG_ORDER_IS_NOT_ELIGIBLE_FOR_AUTO_PROCESSING, orderRecord)\n\t\t\t\t.addLog(\"Scheduling order for missing shipment schedules creation\")\n\t\t\t\t.scheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 29.628729335003612}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->getProvider()->retrieveByCredentials($request->only('email'));\n\n    if (!$user || !$this->getProvider()->validateCredentials($user, ['password' => $request->password])) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 50.93430121513687}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->getProvider()->retrieveByCredentials($request->only('email'));\n\n    if ($user && $this->getProvider()->validateCredentials($user, ['password' => $request->password])) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 48.29138382852397}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->getProvider()->retrieveByCredentials($this->credentials($request));\n\n    if ($user && $this->validateCredentials($user, $this->credentials($request))) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 44.30098467627599}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.39651022739653}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.39651022739653}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    $message = $this->limiter->tooManyAttempts($request)\n        ? $this->getLockoutErrorMessage($request)\n        : $this->getFailedLoginMessage();\n\n    throw ValidationException::withMessages([\n        $this->username() => [$message],\n    ]);\n}", "CodeBleu_score": 48.485435610491756}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('login.id') ? User::find($request->session()->get('login.id')) : null;\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ])->toResponse($request);\n}", "CodeBleu_score": 58.942789928470816}, {"code": "<?\npublic function toResponse($request){\n\t$user = $this->user;\n    $data = $this->toArray();\n\n    if (! $user) {\n        return Inertia::render('Auth/Login', $data);\n    }\n\n    if (Webauthn::enabled() && $user->webauthn_id) {\n        $publicKey = Webauthn::prepareAssertion($user);\n\n        $data += [\n            'twoFactor' => $user->two_factor_secret && ! is_null($user->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n            'webauthn' => [\n                'publicKey' => $publicKey,\n            ],\n        ];\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data);\n}", "CodeBleu_score": 47.42205100971151}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('login.id') ? User::find($request->session()->get('login.id')) : null;\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ])->toResponse($request);\n}", "CodeBleu_score": 58.942789928470816}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = $this->getUserToken($driver, $socialite->getId());\n\n    if ($userToken) {\n        $user = $this->getUserOrCreate($socialite);\n        $this->checkUserAssociation($request, $user, $driver);\n\n        return $user;\n    }\n\n    $user = $this->createUser($socialite);\n\n    $this->createUserToken($user, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 44.53281842142013}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 62.80330722281992}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 62.80330722281992}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n    $validated = WebauthnFacade::validateAssertion($user, $credentials);\n    if (!$validated) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 69.02132248879765}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n    if (!$user) {\n        return false;\n    }\n    $credentials = $this->filterCredentials($request);\n    $valid = WebauthnFacade::validateAssertion($user, $credentials);\n    if (!$valid) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n    return true;\n}", "CodeBleu_score": 68.97928064926249}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->retrieveUser($request);\n    if ($user === null) {\n        return false;\n    }\n    $credentials = $this->filterCredentials($request);\n    $result = WebauthnFacade::validateAssertion($user, $credentials);\n    if ($result === false) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n    return true;\n}", "CodeBleu_score": 66.04494914299622}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n    if (!$email) {\n        $this->error('No email provided.');\n        return null;\n    }\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (\\Exception $e) {\n        $this->error('User with email ' . $email . ' not found.');\n        return null;\n    }\n}", "CodeBleu_score": 69.9197870452716}, {"code": "<?\nprivate function user(): ?User{\n\ttry {\n        $email = $this->option('email');\n        if (!$email) {\n            $this->error('No email provided.');\n            return null;\n        }\n        return User::where('email', $email)->firstOrFail();\n    } catch (Exception $e) {\n        $this->error($e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 65.90335053193219}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n    if (!$email) {\n        $this->error('No email address provided.');\n        return null;\n    }\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('No user found with email ' . $email);\n        return null;\n    }\n}", "CodeBleu_score": 71.04717876256088}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') && $this->option('flush')) {\n        foreach (config('scout.meilisearch.indexes') as $index => $settings) {\n            $this->artisan(\n                sprintf('scout:flush %s', $index),\n                sprintf('scout:flush %s', $settings['table']),\n                ['--model' => $settings['model']]\n            );\n        }\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 37.0219209590282}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (!config('scout.driver') || !$this->option('flush')) {\n        return;\n    }\n\n    $indexSettings = config('scout.meilisearch.indexes');\n\n    foreach ($indexSettings as $indexName => $indexSettings) {\n        $this->artisan(\n            sprintf('scout:flush %s', $indexSettings['table']),\n            sprintf('Flushing %s index', $indexName)\n        );\n    }\n\n    $this->info('Indexes flushed.');\n}", "CodeBleu_score": 41.042334637558795}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $indices = config('scout.meilisearch.indexes');\n        foreach ($indices as $index) {\n            $index = new $index();\n            $table = $index->getTable();\n            $this->artisan('scout:flush', ['model' => $table]);\n        }\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 46.84335004675083}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\ttry {\n        $vcard = $this->read($resource);\n    } catch (ModelNotFoundException $e) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->exporters(get_class($resource))\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 21.892492610398655}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\n    if ($vcard === null) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->exporters(get_class($resource))\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 19.328383907852754}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\n    if ($vcard === null) {\n        $vcard = new VCard();\n\n        if ($resource instanceof Contact) {\n            $vcard->add(new Kind('individual'));\n        }\n\n        $vcard->add(new UID());\n\n        $vcard->add(new FN($resource->getFullName()));\n    }\n\n    $this->exporters(get_class($resource))\n        ->each(fn (ExportVCardResource $exporter) => $exporter->handle($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 26.65033100146762}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObject($addressBookId, $cardUri);\n    if (is_null($object)) {\n        return false;\n    }\n    if ($object instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $object->vault_id,\n            'contact_id' => $object->id,\n        ])->onQueue('high');\n    } elseif ($object instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $object->vault_id,\n            'group_id' => $object->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 77.61088405518262}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\n    if (!$obj) {\n        return false;\n    }\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 83.36904342948313}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObject($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $object->vault_id,\n            'contact_id' => $object->id,\n        ])->onQueue('high');\n        return true;\n    } elseif ($object instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $object->vault_id,\n            'group_id' => $object->id,\n        ])->onQueue('high');\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 80.32839343661135}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n    $originalName = $file->getClientOriginalName();\n\n    $leadActivity = $this->activityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard('api')->user()->id,\n        'details' => $data['details'],\n    ]);\n\n    $leadActivity->file()->create([\n        'name' => $originalName,\n        'path' => $file->store('files'),\n    ]);\n\n    return $leadActivity;\n}", "CodeBleu_score": 57.053775271486685}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'user_id' => auth()->guard('api')->user()->id,\n        'lead_id' => $data['lead_id'],\n        'type' => $data['type'],\n        'description' => $data['description'],\n    ]);\n\n    $file = $leadActivity->files()->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('files', 'public'),\n    ]);\n\n    return $file;\n}", "CodeBleu_score": 61.58937000139485}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard('api')->user()->id,\n        'type' => $data['type'],\n        'description' => $data['description'],\n    ]);\n\n    $file = $leadActivity->files()->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('lead_activities', 'public'),\n    ]);\n\n    return $file;\n}", "CodeBleu_score": 61.88923562021866}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif (\n        $exception instanceof ModelNotFoundException\n        || $exception instanceof NotFoundHttpException\n    ) {\n        return $this->response('errors.404', 404);\n    }\n\n    if (\n        $exception instanceof PDOException\n        || $exception instanceof QueryException\n    ) {\n        return $this->response('errors.500', 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->response('errors.500', 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        return $this->response('errors.503', $exception->getStatusCode());\n    }\n\n    return $this->response('errors.500', 500);\n}", "CodeBleu_score": 38.25989795534901}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\n        return $this->response('admin::layouts.blank', 404);\n    } elseif ($exception instanceof PDOException) {\n        return $this->response('admin::layouts.blank', 500);\n    } elseif ($exception instanceof ParseError) {\n        return $this->response('admin::layouts.blank', 500);\n    } elseif ($exception instanceof HttpException) {\n        return $this->response('admin::layouts.blank', $exception->getStatusCode());\n    } elseif ($exception instanceof ValidationException) {\n        return $this->response('admin::layouts.blank', 422);\n    } elseif ($exception instanceof InvalidSignatureException) {\n        return $this->response('admin::layouts.blank', 403);\n    } elseif ($exception instanceof UnauthorizedHttpException) {\n        return $this->response('admin::layouts.blank', 401);\n    } elseif ($exception instanceof TokenMismatchException) {\n        return $this->response('admin::layouts.blank', 419);\n    } elseif ($exception instanceof BadRequestHttpException) {\n        return $this->response('admin::layouts.blank', 400);\n    } elseif ($exception instanceof NotFoundHttpException) {\n        return $this->response('admin::layouts.blank', 404);\n    } elseif ($exception instanceof MethodNotAllowedHttpException) {\n        return $this->response('admin::layouts.blank', 405);\n    } elseif ($exception instanceof HttpResponseException) {\n        return $this->response('admin::layouts.blank', 405);\n    }\n\n    return $this->response('admin::layouts.blank', 500);\n}", "CodeBleu_score": 28.52337675675231}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } else {\n        $statusCode = $exception->getStatusCode();\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        $path = request()->route()->getPrefix();\n\n        if ($path == '/admin') {\n            return $this->response('admin::layouts.error', $statusCode);\n        } else {\n            return $this->response('shop::customers.account.error', $statusCode);\n        }\n    } elseif ($exception instanceof PDOException) {\n        return $this->response('shop::customers.account.error', $statusCode);\n    } elseif ($exception instanceof ParseError) {\n        return $this->response('shop::customers.account.error', $statusCode);\n    } else {\n        return $this->response('admin::layouts.error', $statusCode);\n    }\n}", "CodeBleu_score": 42.52359879315258}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('activityIds');\n    $isDone = request('isDone');\n    $numUpdated = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        if ($activity->is_done !== $isDone) {\n            event(new ActivityUpdated($activity));\n            $this->activityRepository->update($activityId, ['is_done' => $isDone]);\n            event(new ActivityUpdated($this->activityRepository->find($activityId)));\n            $numUpdated++;\n        }\n    }\n\n    if ($numUpdated > 0) {\n        return response()->json(['success' => true]);\n    }\n\n    return response()->json(['success' => false]);\n}", "CodeBleu_score": 40.5623082469239}, {"code": "<?\npublic function massUpdate(){\n\t$activities = request('ids');\n    $isDone = request('is_done');\n\n    $updated = 0;\n\n    foreach ($activities as $id) {\n        $activity = $this->activityRepository->find($id);\n        Event::dispatch(new ActivityIsBeingUpdated($activity));\n        $this->activityRepository->update($activity, ['is_done' => $isDone]);\n        Event::dispatch(new ActivityWasUpdated($activity));\n        $updated++;\n    }\n\n    return response()->json([\n        'success' => $updated > 0\n    ]);\n}", "CodeBleu_score": 37.99410359846659}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request()->input('ids');\n    $isDone = request()->input('is_done');\n    $numUpdated = 0;\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n        if ($activity->is_done !== $isDone) {\n            Event::dispatch(new ActivityBeforeUpdate($activity));\n            $activity->is_done = $isDone;\n            $this->activityRepository->update($activity);\n            Event::dispatch(new ActivityAfterUpdate($activity));\n            $numUpdated++;\n        }\n    }\n    return response()->json(['success' => $numUpdated > 0]);\n}", "CodeBleu_score": 42.75121741387824}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$activities = $this->activityRepository->getActivitiesByIds(request('ids'));\n\n    foreach ($activities as $activity) {\n        $this->activityRepository->delete($activity);\n        event(new ActivityDestroyed($activity));\n    }\n\n    return response()->json([\n        trans('admin/activities/message.success.destroy')\n    ]);\n}", "CodeBleu_score": 31.415120672535775}, {"code": "<?\n public function massDestroy(){\n\t$activityIds = request()->input('ids');\n        foreach ($activityIds as $activityId) {\n            $activity = $this->activityRepository->find($activityId);\n            if ($activity) {\n                Event::dispatch(new ActivityDeleting($activity));\n                $this->activityRepository->delete($activityId);\n                Event::dispatch(new ActivityDeleted($activity));\n            }\n        }\n        return response()->json([\n            'success' => true,\n            'message' => trans('admin.message.deleted'),\n        ]);\n    }", "CodeBleu_score": 31.588137137672177}, {"code": "<?\n public function massDestroy(){\n\t$activityIds = request('ids');\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        if (empty($activity)) {\n            continue;\n        }\n\n        Event::dispatch(new ActivityDeleting($activity));\n\n        $this->activityRepository->delete($activityId);\n\n        Event::dispatch(new ActivityDestroyed($activity));\n    }\n\n    return response()->json(['success' => true]);\n}", "CodeBleu_score": 32.067170893698325}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n     foreach (request()->all() as $key => $value) {\n         if (isset($cards[$key])) {\n             $cards[$key]['selected'] = $value;\n         }\n     }\n\n     return response()->json($cards);\n }", "CodeBleu_score": 32.6193744342859}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n \t$updatedCards = [];\n\n \tforeach ($cards as $card) {\n \t\tif (isset(request()->all()[$card->id])) {\n \t\t\t$card->selected = true;\n \t\t} else {\n \t\t\t$card->selected = false;\n \t\t}\n \t\t$updatedCards[] = $card;\n \t}\n\n \treturn response()->json($updatedCards);\n }", "CodeBleu_score": 29.43571670538865}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n        $request = request()->all();\n\n        foreach($cards as $key => $card) {\n            if(isset($request[$card['id']])) {\n                $cards[$key]['selected'] = true;\n            } else {\n                $cards[$key]['selected'] = false;\n            }\n        }\n\n        return response()->json($cards);\n    }", "CodeBleu_score": 45.57441407968275}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\tevent(new \\App\\Events\\Configurations\\ConfigurationCreating);\n\n    $this->configurationRepository->create(request()->all());\n\n    event(new \\App\\Events\\Configurations\\ConfigurationCreated);\n\n    session()->flash('success', trans('admin/configurations/messages.create.success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 40.83258864908832}, {"code": "<?\npublic function store(){\n\tEvent::dispatch(new BeforeConfigurationSave($this->request));\n\n    $configuration = $this->configurationRepository->create($this->request->all());\n\n    Event::dispatch(new AfterConfigurationSave($configuration));\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 47.68437599571509}, {"code": "<?\npublic function store(){\n\tEvent::dispatch(new BeforeConfigurationSaved($this->request));\n    $this->configurationRepository->create($this->request->all());\n    Event::dispatch(new AfterConfigurationSaved($this->request));\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n    return redirect()->back();\n}", "CodeBleu_score": 48.36785515689358}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(getUserId());\n        sort.setType(AdminModelSort.TYPE_HEADER);\n        sort.setModel(model);\n        sort.setSort(list.indexOf(model));\n        sortList.add(sort);\n    }\n    remove(AdminModelSort.class, AdminModelSort.TYPE_HEADER, getUserId());\n    saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 38.86652271694565}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<>();\n    for (String modelName : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(modelName);\n        sort.setSort(\"header\");\n        sort.setType(\"asc\");\n        sort.setOk(true);\n        sort.setUserId(getUserId());\n        sortList.add(sort);\n    }\n    removeHeaderModelSort();\n    saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 34.461741067907894}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setSort(1);\n        sort.setType(\"header\");\n        sort.setUserId(getUserId());\n        sort.setModel(model);\n        sortList.add(sort);\n    }\n    removeHeaderModelSort();\n    saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 29.029948326059824}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\ttry {\n            UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n            if (userConfig == null) {\n                userConfig = new UserConfig();\n                userConfig.setName(customKey);\n                userConfig.setValue(json.toJSONString());\n                userConfig.setUserId(getUserId());\n                userConfig.setStatus(1);\n                userConfigService.save(userConfig);\n            } else {\n                userConfig.setValue(json.toJSONString());\n                userConfigService.updateById(userConfig);\n            }\n            return success();\n        } catch (Exception e) {\n            return error(e.getMessage());\n        }\n    }", "CodeBleu_score": 64.19004431101824}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if(userConfig == null) {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setUserId(getUserId());\n        userConfig.setValue(json.toJSONString());\n        userConfigService.save(userConfig);\n    } else {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n    }\n    return ok(userConfig.toJSONString());\n}", "CodeBleu_score": 62.833006490759445}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\ttry {\n        UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n        if(userConfig!=null){\n            userConfig.setValue(json.toJSONString());\n            userConfigService.updateById(userConfig);\n        }else{\n            userConfig = new UserConfig();\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toJSONString());\n            userConfig.setUserId(getUserId());\n            userConfigService.save(userConfig);\n        }\n        return Result.success();\n    } catch (Exception e) {\n        logger.error(\"queryCustomSetting error\",e);\n        return Result.error();\n    }\n}", "CodeBleu_score": 59.63873148115315}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = userMapper.getById(userId);\n    if (user == null) {\n        return Result.failure(\"User not found\");\n    }\n    String deptName = deptMapper.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 50.738362221132036}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = userService.getById(userId);\n    user.setDeptName(deptService.getNameByDeptId(user.getDeptId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 39.93925347157642}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserMapper.getById(userId);\n    if (user == null) {\n        return Result.fail(\"User not found.\");\n    }\n    String deptName = adminDepartmentMapper.getDeptName(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 50.94726215743985}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t// Retrieve the user ID from the session cookie\n    String userId = session(\"userId\");\n    \n    // Check if there are multiple \"readNotice\" entries for the user\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n    \n    // If there are multiple entries, update the status to 1 for all matching entries\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    }\n    \n    // If there is no matching entry, create a new one with status 1 and save it\n    else if (readNoticeList.size() == 0) {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.user_id = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    \n    // Return a success result\n    return ok(Json.toJson(\"Success\"));\n}", "CodeBleu_score": 26.82507994166058}, {"code": " public Result readNotice() {\n\t// Retrieve the user ID from the session cookie\n    String userId = session().get(\"userid\");\n    \n    // Check if there are multiple \"readNotice\" entries for the current user\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n    \n    if (readNoticeList.size() > 1) {\n        // Update the status of all matching entries to 1\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        // Create a new \"readNotice\" entry with status 1\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    \n    // Return a success result\n    return ok();\n}", "CodeBleu_score": 27.32711526266299}, {"code": " public Result readNotice() {\n\tString userId = session().get(\"user\");\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else if (readNoticeList.size() == 0) {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.status = 1;\n        readNotice.user_id = userId;\n        readNotice.save();\n    } else {\n        readNoticeList.get(0).status = 1;\n        readNoticeList.get(0).update();\n    }\n    return ok(Json.toJson(new Response(true, \"success\")));\n}", "CodeBleu_score": 29.531430810043336}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tConfigurationBO configurationBO = configurationDAO.findByName(\"companyInfo\");\n    if (configurationBO == null) {\n        configurationBO = new ConfigurationBO();\n        configurationBO.setName(\"companyInfo\");\n        configurationBO.setDescription(\"Company Information\");\n        configurationBO.setValue(toJSONString(adminCompanyBO));\n        configurationBO.setStatus(EntityStatus.ACTIVE);\n    } else {\n        configurationBO.setValue(toJSONString(adminCompanyBO));\n    }\n    configurationDAO.saveOrUpdate(configurationBO);\n}", "CodeBleu_score": 34.197160127875165}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tString companyInfo = \"companyInfo\";\n    String companyInfoJSON = adminCompanyBO.toJSONString();\n    ConfigurationBO configurationBO = configurationDAO.findByName(companyInfo);\n    if (configurationBO == null) {\n        configurationBO = new ConfigurationBO();\n        configurationBO.setName(companyInfo);\n        configurationBO.setDescription(\"Company information\");\n        configurationBO.setValue(companyInfoJSON);\n    } else {\n        configurationBO.setValue(companyInfoJSON);\n    }\n    configurationBO.setStatus(Constants.STATUS_ACTIVE);\n    configurationDAO.saveOrUpdate(configurationBO);\n}", "CodeBleu_score": 37.36746153239541}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t//Get the administrative configuration for company information\n    AdminConfigBO adminConfigBO = adminConfigDAO.getAdminConfigByName(\"companyInfo\");\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(\"companyInfo\");\n        adminConfigBO.setDescription(\"Company information\");\n        adminConfigBO.setStatus(1);\n    }\n    //Update the configuration's value with the provided company information in JSON format\n    adminConfigBO.setValue(adminCompanyBO.toJSONString());\n    //Save or update the configuration\n    adminConfigDAO.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 41.45082777704557}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n    try {\n        String adminConfig = AdminConfig.getConfig(getCompany(), 'AdminCompany');\n        if (adminConfig != null && !adminConfig.isEmpty()) {\n            adminCompany = (AdminCompanyBO) JSON.parse(adminConfig, 'com.netsuite.webservices.general.communication.messages.AdminCompanyBO');\n        }\n    }\n    catch (Exception e) {\n        // do nothing\n    }\n    return adminCompany;\n}", "CodeBleu_score": 38.685331129117245}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO config = new AdminCompanyBO();\n\n    // Retrieve the admin configuration for the company.\n    QueryService queryService = DataService.getQueryService();\n    Query qry = queryService.newQuery(\"SELECT Id, ConfigurationData FROM AdminConfiguration__c WHERE ConfigurationKey__c = 'AdminConfiguration'\");\n    List<AdminConfiguration__c> configs = (List<AdminConfiguration__c>)qry.execute();\n\n    // If a configuration is found, parse the value into an AdminCompanyBO object.\n    if (configs.size() > 0) {\n        config = (AdminCompanyBO)JSON.deserialize(configs.get(0).ConfigurationData__c, AdminCompanyBO.class);\n    }\n\n    return config;\n}", "CodeBleu_score": 42.01066667863535}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO ac = new AdminCompanyBO();\n    try {\n        // Retrieve the admin configuration for the company.\n        AdminConfiguration ac = AdminConfiguration.get(company, 'AdminCompany');\n        if (ac != null) {\n            // Parse the configuration value into an AdminCompanyBO object.\n            ac = AdminCompanyBO::parseObject(ac.configurationValue);\n        }\n    } catch (Exception::Error) {\n        // An error occurred, so return a new instance of the AdminCompanyBO object.\n        ac = new AdminCompanyBO();\n    }\n    return ac;\n}", "CodeBleu_score": 33.30056864170119}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tAdminConfig adminConfig = new AdminConfig();\n\t\tadminConfig.setLogConfigName(logConfigName);\n\t\tadminConfig.setLogWelcomeSpeech(stringList);\n\t\tadminConfig.setBatch(true);\n\t\tadminConfig.saveBatch();\n\t\tadminConfig.remove();\n\t}", "CodeBleu_score": 21.571070863104573}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tAdminConfig adminConfig = new AdminConfig();\n    adminConfig.setLogConfigName(LOG_CONFIG_NAME);\n    adminConfig.setLogWelcomeSpeech(stringList);\n    adminConfig.saveBatch();\n}", "CodeBleu_score": 19.435225170658434}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t// Set the log welcome speech\n    AdminConfig adminConfig = new AdminConfig();\n    AdminConfig.LogWelcomeSpeech logWelcomeSpeech = adminConfig.new LogWelcomeSpeech();\n    for (String string : stringList) {\n        logWelcomeSpeech.setName(string);\n        logWelcomeSpeech.setStatus(Status.ENABLED);\n        logWelcomeSpeech.setValue(string);\n        adminConfig.add(logWelcomeSpeech);\n    }\n    // Remove the existing configurations with the specified log configuration name\n    AdminConfig.LogWelcomeSpeech[] logWelcomeSpeeches = adminConfig.getLogWelcomeSpeeches();\n    for (AdminConfig.LogWelcomeSpeech logWelcomeSpeech : logWelcomeSpeeches) {\n        if (logWelcomeSpeech.getName().equals(LOG_CONFIGURATION_NAME)) {\n            adminConfig.remove(logWelcomeSpeech);\n        }\n    }\n    // Save the new list of configurations in batch\n    adminConfig.saveBatch();\n}", "CodeBleu_score": 34.35894467116006}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tint userId = getUserId(adminInitDataBO.getUsername());\n    UserBO userBO = getById(userId);\n    if (verify(adminInitDataBO.getPassword(), userBO.getPassword(), userBO.getSalt())) {\n        String accessCode = valueOf(randomInt(1000000000, 9999999999));\n        getRedis().setex(accessCode, 600, userId);\n        return accessCode;\n    }\n    throw new InvalidPasswordException();\n}", "CodeBleu_score": 29.655935172853653}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String userId = getUserId(username);\n    String salt = getSalt(username);\n    String hashedPassword = hashPassword(password, salt);\n    String currentPassword = getPassword(username);\n    if (hashedPassword.equals(currentPassword)) {\n        String accessCode = generateAccessCode();\n        setex(userId, accessCode, 600);\n        return accessCode;\n    } else {\n        throw new IllegalArgumentException(\"Invalid password.\");\n    }\n}", "CodeBleu_score": 32.51277388283304}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String userId = adminInitDataBO.getUserId();\n    String salt = adminInitDataBO.getSalt();\n    String accessCode = null;\n\n    // Get the user details from Redis\n    UserBO userBO = getUserDetails(userId);\n\n    // Verify the password\n    if (verify(password, userBO.getPassword(), salt)) {\n        // Generate a temporary access code\n        accessCode = generateAccessCode();\n\n        // Store the access code in Redis\n        setex(userId, accessCode, 600);\n    } else {\n        // Throw an exception indicating an invalid password\n        throw new InvalidPasswordException();\n    }\n\n    return accessCode;\n}", "CodeBleu_score": 31.642245741423054}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tdef userId = getUserId()\n    def key = \"unauth:\" + userId\n    def redis = getRedis()\n    def unauthUrls = redis.lrange(key, 0, -1)\n    def initAuthUrl = getInitAuthUrl()\n    if (unauthUrls.contains(initAuthUrl)) {\n        return true\n    } else {\n        return false\n    }\n}", "CodeBleu_score": 32.382129681042315}, {"code": "private boolean verifyInitAuth(){\n\t// get the user ID from the session\n    String userId = getUserId();\n    // construct the key for the list of unauthorized menu URLs\n    String key = \"unauth_menu_urls:\" + userId;\n    // get the list of unauthorized menu URLs from Redis\n    List<String> unauthMenuUrls = getRedis().lrange(key, 0, -1);\n    // check if the initial authentication URL is in the list\n    for (String unauthMenuUrl : unauthMenuUrls) {\n        if (unauthMenuUrl.equals(getInitAuthUrl())) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 35.49278680837594}, {"code": "private boolean verifyInitAuth(){\n\tdef userId = getUserId()\n    def key = \"initAuth:\" + userId\n    def redis = getRedis()\n    def unauthList = redis.lrange(key, 0, -1)\n    if (unauthList.contains(get())) {\n        return true\n    }\n    return false\n}", "CodeBleu_score": 28.05922317190923}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 50.53808181844172}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    menuIdList.forEach(menuId -> {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    });\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 60.009305293556835}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 50.53808181844172}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n    Map<String, Object> map = beanToMap(sysLog);\n    map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index).source(map);\n    try {\n        restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                log.info(\"saveSysLog success, index:{}\", index);\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                log.error(\"saveSysLog fail, index:{}, msg:{}\", index, e.getMessage());\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"saveSysLog fail, index:{}, msg:{}\", index, e.getMessage());\n    }\n}", "CodeBleu_score": 49.03065789961482}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n    Map<String, Object> map = beanToMap(sysLog);\n    map.put(\"create_time\", formatDateTime(new Date()));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 47.992702016377685}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n    Map<String, Object> map = beanToMap(sysLog);\n    map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 49.591658471863965}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // \u6392\u5e8f\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // \u4e0d\u8fd4\u56de\u5b57\u6bb5\n    searchSourceBuilder.fetchSource(new String[]{\"\"}, new String[]{\n            \"createTime\",\n            \"userId\",\n            \"username\",\n            \"model\",\n            \"subModelLabel\",\n            \"ip\",\n            \"method\",\n            \"url\",\n            \"params\",\n            \"result\",\n            \"description\",\n            \"createTime\",\n            \"loginTime\"\n    });\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setTotal(getTotalHits(searchResponse));\n        basePage.setCurrent(querySysLogBO.getPage());\n        List<SysLog> sysLogList = setList(searchResponse);\n        basePage.setRecords(sysLogList);\n        return basePage;\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5206\u9875\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n    return null;\n}", "CodeBleu_score": 53.04604581861572}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// \u521d\u59cb\u5316\u641c\u7d22\u6761\u4ef6\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // \u6392\u5e8f\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // \u4e0d\u8fd4\u56de\u5b57\u6bb5\n    String[] includes = {\"id\", \"userId\", \"model\", \"subModelLabel\", \"createTime\", \"loginTime\", \"ip\", \"remark\"};\n    searchSourceBuilder.fetchSource(includes, null);\n    // \u6267\u884c\u641c\u7d22\u8bf7\u6c42\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        // \u83b7\u53d6\u641c\u7d22\u7ed3\u679c\n        SearchHits hits = searchResponse.getHits();\n        // \u83b7\u53d6\u603b\u6761\u6570\n        long totalHits = hits.getTotalHits().value;\n        // \u83b7\u53d6\u5f53\u524d\u9875\u7684\u6570\u636e\n        List<SysLog> list = setList(hits);\n        // \u5c01\u88c5\u5206\u9875\u7ed3\u679c\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setTotal(totalHits);\n        basePage.setPage(querySysLogBO.getPage());\n        basePage.setLimit(querySysLogBO.getLimit());\n        basePage.setList(list);\n        return basePage;\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5206\u9875\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 55.404693459174034}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// Initialize the search criteria\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // Sort by creation time in descending order\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // Exclude specific fields from the response\n    searchSourceBuilder.fetchSource(new String[]{\"password\", \"createTime\", \"updateTime\"}, null);\n    // Execute the search request\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    BasePage<SysLog> basePage = new BasePage<>();\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        // Set the total number of hits\n        setTotal(basePage, searchResponse);\n        // Set the current page\n        setCurrent(basePage, querySysLogBO);\n        // Get the search hits\n        SearchHits hits = getHits(searchResponse);\n        // Set the list\n        setList(basePage, hits);\n    } catch (IOException e) {\n        log.error(\"Query system log list exception, message: {}\", e.getMessage());\n    }\n    return basePage;\n}", "CodeBleu_score": 49.98447587018428}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n  return new Promise((resolve, reject) => {\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n}", "CodeBleu_score": 78.74154772391103}, {"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n  await new Promise((resolve, reject) => {\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 80.67353323535241}, {"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n  const response = await new Promise((resolve, reject) => {\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n  return response;\n}", "CodeBleu_score": 74.92564303893151}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn module.getDependentModules()\n        .filter(m -> !circularDependencyCheckSet.contains(m))\n        .doOnNext(m -> circularDependencyCheckSet.add(m))\n        .flatMapMany(this::getLiveModules)\n        .doOnNext(m -> circularDependencyCheckSet.remove(m.getId()))\n        .onErrorContinue((e, v) -> log.warn(\"Could not retrieve dependent module {} for module {}: {}\", v, module.getId(), e.getMessage()))\n        .collectList()\n        .map(modules -> {\n            module.setDependentModules(modules);\n            return module;\n        });\n}", "CodeBleu_score": 55.4977540179032}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn Flux.fromIterable(module.getDependentModuleIds())\n        .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n        .doOnNext(circularDependencyCheckSet::add)\n        .flatMapMany(this::getLiveModules)\n        .onErrorContinue((throwable, application) -> warn(\"Unable to retrieve dependent modules for module with ID \" + module.getId(), throwable))\n        .collectList()\n        .flatMapMany(Flux::fromIterable);\n}", "CodeBleu_score": 60.40956476145959}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn module.getDependentModuleIds()\n        .filter(id -> !circularDependencyCheckSet.contains(id))\n        .doOnNext(id -> circularDependencyCheckSet.add(id))\n        .flatMapMany(this::getLiveModules)\n        .doOnNext(dependentModule -> module.addDependentModule(dependentModule))\n        .doOnError(error -> log.warn(\"Failed to retrieve dependent module for module: {}\", module.getId(), error))\n        .onErrorContinue((error, moduleId) -> log.warn(\"Failed to retrieve dependent module for module: {}\", moduleId, error))\n        .thenMany(Mono.just(module));\n}", "CodeBleu_score": 52.55246774631273}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = resizeImage(dataBuffer);\n        MediaType contentType = MediaType.IMAGE_JPEG;\n        if (!createThumbnail) {\n            contentType = srcContentType;\n        }\n        return Asset.create(data, contentType);\n    }", "CodeBleu_score": 36.34200376202683}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = dataBuffer.asByteArray();\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        }\n        DataBufferUtils.release(dataBuffer);\n        Asset asset = Asset.newBuilder()\n                .setContentType(\"image/jpeg\")\n                .setData(ByteString.copyFrom(data))\n                .build();\n        return asset;\n    }", "CodeBleu_score": 46.5185587054188}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = resizeImage(dataBuffer);\n        MediaType contentType = MediaType.IMAGE_JPEG;\n        if (!createThumbnail) {\n            contentType = srcContentType;\n        }\n        return Asset.builder()\n                .contentType(contentType.toString())\n                .data(data)\n                .build();\n    }", "CodeBleu_score": 39.56149527406602}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n        .flatMap(asset -> {\n            ServerHttpResponse response = exchange.getResponse();\n            response.setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            DataBuffer dataBuffer = response.bufferFactory().wrap(asset.getData());\n            return response.writeWith(Mono.just(dataBuffer));\n        });\n}", "CodeBleu_score": 58.566947099976744}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .doOnNext(asset -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n            .flatMap(asset -> Mono.justOrEmpty(asset.getContentType())\n                    .doOnNext(contentType -> exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(contentType)))\n                    .then(writeWith(asset.getData(), exchange)));\n}", "CodeBleu_score": 35.95387894138848}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(just(asset.getData()));\n            });\n}", "CodeBleu_score": 44.238638072821296}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getMode()\n        .flatMapIterable(mode -> {\n            if (mode == WorkspaceMode.SAAS) {\n                return empty();\n            }\n            return getOrganizationInEnterpriseMode();\n        })\n        .map(organization -> {\n            return new FindAuthConfig(organization.getId(), organization.getId(), organization.getName());\n        })\n        .collect(toList())\n        .flatMapIterable(list -> list);\n}", "CodeBleu_score": 32.51496718683044}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getMode()\n        .flatMapIterable(mode -> {\n            if (mode.equals(WorkspaceMode.SAAS)) {\n                return empty();\n            }\n            return getOrganizationInEnterpriseMode()\n                .map(organization -> new FindAuthConfig(organization.getId(), organization.getName()));\n        });\n}", "CodeBleu_score": 24.834703040098688}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getMode()\n        .flatMapIterable(mode -> {\n            if (mode == WorkspaceMode.SAAS) {\n                return empty();\n            } else {\n                return getOrganizationInEnterpriseMode();\n            }\n        })\n        .map(organization -> {\n            return new FindAuthConfig(organization.getId(), organization.getName(), organization.getDefaultBucketId());\n        });\n}", "CodeBleu_score": 31.043972388986486}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n        .setDriver(mongoTemplate.getDb().getMongoClient())\n        .setSpringContext(springContext)\n        .addChangeLogsScanPackage(\"com.example.demo.changelogs\")\n        .setMongoTemplate(mongoTemplate)\n        .buildApplicationRunner();\n}", "CodeBleu_score": 26.11687672626557}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n            .setDriver(mongoTemplate)\n            .setSpringContext(springContext)\n            .addChangeLogsScanPackage(ChangeLog.class.getPackage().getName())\n            .setLockQuickConfig()\n            .buildApplicationRunner();\n}", "CodeBleu_score": 25.4586494033746}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n        .setDriver(mongoTemplate.getDb().getMongoClient())\n        .setSpringContext(springContext)\n        .addChangeLogsScanPackage(\"com.example.demo.changeLogs\")\n        .buildApplicationRunner();\n}", "CodeBleu_score": 20.40485482322931}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t// Create a new ReactiveMongoTemplate\n    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n    // Set the read preference to \"secondaryPreferred\"\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\n    // Return the configured ReactiveMongoTemplate\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.26795668686601}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    template.setReadPreference(ReadPreference.secondaryPreferred());\n    return template;\n}", "CodeBleu_score": 77.82290641854172}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.21973361724991}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQuery::getDsl)\n                .switchIfEmpty(getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl)\n                );\n    }", "CodeBleu_score": 60.00440993019341}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQuery::getDsl)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getDsl)\n                    .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\")));\n}", "CodeBleu_score": 57.05217113174585}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl)\n            .switchIfEmpty(getById(libraryQueryId).map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 54.86973054512928}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tvar queryTimeoutMs = parseQueryTimeoutMs(timeoutStr);\n        var queryExecutor = datasourceMetaInfoService.getQueryExecutor(datasource.getType());\n        var queryExecutionContext = queryExecutor.buildQueryExecutionContextMono(datasource.getDetailConfig(), queryConfig, requestParams, queryVisitorContext);\n\n        return Mono.defer(() -> {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        })\n                .timeout(queryTimeoutMs)\n                .onErrorMap(e -> {\n                    if (e instanceof TimeoutException) {\n                        return ofException(e, queryTimeoutMs);\n                    } else if (e instanceof AppsmithPluginException) {\n                        return (AppsmithPluginException) e;\n                    } else {\n                        return new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, getMessage(e));\n                    }\n                })\n                .onErrorResume(e -> just(error(e.getMessage())));\n    }", "CodeBleu_score": 52.5868891858924}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tvar timeoutDuration = parseQueryTimeoutMs(timeoutStr);\n        var queryExecutionContext = Mono.defer(() -> isJsDatasourcePlugin(datasource.getType())\n                ? executeByNodeJs(datasource, queryConfig, requestParams)\n                : executeLocally(datasource, queryConfig, requestParams, queryVisitorContext));\n\n        return queryExecutionContext\n                .timeout(timeoutDuration, ofException(timeout(timeoutDuration)))\n                .onErrorMap(TimeoutException.class, e -> ofException(timeout(timeoutDuration)))\n                .onErrorMap(PluginException.class, e -> ofException(error(e)))\n                .onErrorMap(Exception.class, e -> ofException(error(e)))\n                .onErrorResume(e -> Mono.just(just(e)));\n    }", "CodeBleu_score": 41.49185251706625}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tlong timeoutMs = parseQueryTimeoutMs(timeoutStr);\n        return Mono.defer(() -> {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        })\n                .timeout(Duration.ofMillis(timeoutMs))\n                .onErrorMap(e -> {\n                    if (e instanceof TimeoutException) {\n                        return new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                                \"Query execution timed out. Please check if your query has a syntax error or if the query is too \" +\n                                        \"complex to run. If not, try increasing the timeout duration from the settings page.\"\n                        );\n                    } else if (e instanceof AppsmithPluginException) {\n                        return e;\n                    }\n                    return new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR,\n                            \"Appsmith server encountered an error when fetching the response from the plugin: \" + e.getMessage()\n                    );\n                })\n                .onErrorResume(e -> {\n                    log.error(\"In the datasource service error mode.\", e);\n                    ActionExecutionResult result = new ActionExecutionResult();\n                    result.setIsExecutionSuccess(false);\n                    result.setErrorInfo(e);\n                    return Mono.just(result);\n                })\n                .subscribeOn(scheduler);\n    }", "CodeBleu_score": 50.72033531951693}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn getQueryExecutor(datasource)\n            .flatMap(queryExecutor -> {\n                return buildQueryExecutionContextMono(queryExecutor, datasource, queryConfig, requestParams, queryVisitorContext)\n                        .flatMap(context -> {\n                            return getOrCreateConnection(datasource)\n                                    .flatMap(connection -> {\n                                        return doExecuteQuery(queryExecutor, connection, context)\n                                                .onErrorResume(error -> {\n                                                    return doOnError(queryExecutor, connection, error, context);\n                                                })\n                                                .flatMap(result -> {\n                                                    return getT1(connection, datasource)\n                                                            .flatMap(t1 -> {\n                                                                return getT2(connection, datasource)\n                                                                        .map(t2 -> {\n                                                                            return new QueryExecutionResult(result, t1, t2);\n                                                                        });\n                                                            });\n                                                });\n                                    });\n                        });\n            });\n}", "CodeBleu_score": 28.97578011283238}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn getQueryExecutor(datasource)\n            .flatMap(queryExecutor -> buildQueryExecutionContextMono(datasource, queryConfig, requestParams, queryVisitorContext)\n                    .flatMap(queryExecutionContext -> getOrCreateConnection(datasource)\n                            .flatMap(connection -> {\n                                try {\n                                    return doExecuteQuery(queryExecutor, queryExecutionContext, connection);\n                                } catch (Exception e) {\n                                    return Mono.error(e);\n                                }\n                            })\n                            .onErrorResume(e -> doOnError(e, datasource, queryExecutionContext))\n                            .flatMap(queryExecutionResult -> closeConnection(connection)\n                                    .then(Mono.just(queryExecutionResult))\n                            )\n                    )\n            );\n}", "CodeBleu_score": 31.942757535261023}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// Get the query executor for the datasource type.\n        final QueryExecutor queryExecutor = getQueryExecutor(datasource);\n\n        // Get the query execution context.\n        final QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n        // Get the connection from the connection pool.\n        return getConnection(datasource, queryConfig)\n                .flatMap(connection -> doExecuteQuery(connection, queryExecutor, queryExecutionContext));\n    }", "CodeBleu_score": 30.28404260057458}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n\n    if (!unit.equals(\"ms\") && !unit.equals(\"s\")) {\n        throw new IllegalArgumentException(\"Invalid time unit in timeout string: \" + timeoutStr);\n    }\n\n    String valueStr = timeoutStr.substring(0, unitIndex);\n    double value;\n    try {\n        value = Double.parseDouble(valueStr);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid timeout value in timeout string: \" + timeoutStr);\n    }\n\n    if (value < 0) {\n        throw new IllegalArgumentException(\"Invalid timeout value in timeout string: \" + timeoutStr);\n    }\n\n    int timeoutMs = convertToMs(value, unit);\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Timeout value in timeout string exceeds maximum allowed timeout: \" + timeoutStr);\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 61.73246442589151}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_TIMEOUT_MS;\n    }\n\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    if (unitIndex == -1) {\n        throw new IllegalArgumentException(\n                \"Invalid timeout string. The timeout unit must be either 's' or 'ms'.\");\n    }\n\n    String valueStr = timeoutStr.substring(0, unitIndex);\n    try {\n        double value = Double.parseDouble(valueStr);\n        if (value <= 0) {\n            throw new IllegalArgumentException(\"Invalid timeout string. The timeout value must be greater than 0.\");\n        }\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs > MAX_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\n                    \"Invalid timeout string. The timeout value must be less than or equal to \" + MAX_TIMEOUT_MS + \".\");\n        }\n        return timeoutMs;\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid timeout string. The timeout value must be numeric.\", e);\n    }\n}", "CodeBleu_score": 54.65718411901976}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    String valueStr = timeoutStr.substring(0, unitIndex);\n    double value = getLeft(valueStr, 0.0);\n    int ms = convertToMs(value, unit);\n    if (ms < 0 || ms > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Invalid timeout: \" + timeoutStr);\n    }\n    return ms;\n}", "CodeBleu_score": 53.579284347622405}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application.getId())\n            .flatMap(liveQueries -> {\n                if (liveQueries.isEmpty()) {\n                    return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCES_FOUND, \"queries\"));\n                }\n\n                List<String> datasourceIds = liveQueries.stream()\n                        .map(query -> query.getDatasource().getId())\n                        .collect(Collectors.toList());\n\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                .map(copiedDatasourceId -> Pair.of(datasourceId, copiedDatasourceId)))\n                        .collectList();\n            });\n}", "CodeBleu_score": 65.92494719519976}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n                .flatMap(liveQueries -> {\n                    if (liveQueries.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.LIVE_QUERY, \"for application: \" + application.getId()));\n                    }\n                    return Flux.fromIterable(liveQueries)\n                            .flatMap(liveQuery -> doCopyDatasource(currentOrganizationId, liveQuery.getDatasourceId(), visitorId))\n                            .collectList();\n                })\n                .map(datasourceIds -> datasourceIds.stream()\n                        .map(id -> new Pair<>(id, id))\n                        .collect(toList()));\n    }", "CodeBleu_score": 30.72194992925003}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application.getId())\n                .map(query -> query.getDatasource().getId())\n                .collectList()\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.APPLICATION_QUERY, application.getId()));\n                    }\n\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                    .map(copiedDatasourceId -> Pair.of(datasourceId, copiedDatasourceId)))\n                            .collectList();\n                });\n    }", "CodeBleu_score": 48.96090141169399}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId, visitorId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 64.82530039441993}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 64.49643629005296}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 77.90245873720029}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn storageService.upload(filePart)\n                .defaultIfEmpty(null)\n                .flatMap(newAvatar -> {\n                    if (newAvatar != null) {\n                        return storageService.remove(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return Mono.just(false);\n                    }\n                });\n    }", "CodeBleu_score": 29.903065570132803}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn upload(filePart)\n                .defaultIfEmpty(null)\n                .flatMap(newAvatar -> {\n                    if (newAvatar != null) {\n                        return getAvatar(user.getAvatar())\n                                .flatMap(oldAvatar -> {\n                                    if (oldAvatar != null) {\n                                        return remove(oldAvatar.getId())\n                                                .then(updateUserAvatar(newAvatar, user.getId()));\n                                    } else {\n                                        return updateUserAvatar(newAvatar, user.getId());\n                                    }\n                                });\n                    } else {\n                        return Mono.just(false);\n                    }\n                });\n    }", "CodeBleu_score": 26.728871162153606}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn upload(filePart)\n                .defaultIfEmpty(getAvatar(user.getAvatar()))\n                .flatMap(newAvatar -> {\n                    if (!isEmpty(newAvatar)) {\n                        return remove(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return Mono.just(true);\n                    }\n                });\n    }", "CodeBleu_score": 28.800623146852956}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setTpAvatarLink(authUser.getAvatarLink());\n    if (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getContext().containsKey(AuthContextKey.PASSWORD)) {\n        user.setPassword(encryptPassword(authUser.getContext().get(AuthContextKey.PASSWORD)));\n    }\n    user.setConnections(new HashSet<>());\n    user.setIsNewUser(true);\n    return repository.save(user);\n}", "CodeBleu_score": 42.20872844147017}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\treturn Mono.just(authUser)\n            .map(this::setName)\n            .map(this::setState)\n            .map(this::setIsEnabled)\n            .map(this::setTpAvatarLink)\n            .map(this::setIsNewUser)\n            .map(this::setConnections)\n            .map(this::add)\n            .map(this::toAuthConnection)\n            .flatMap(repository::save);\n}", "CodeBleu_score": 11.558062198713714}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getAuthName());\n    user.setState(UserState.PENDING);\n    user.setIsEnabled(false);\n    user.setTpAvatarLink(authUser.getTpAvatarLink());\n    if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(encryptPassword((String) authUser.getAuthContext().get(\"password\")));\n    }\n    user.setConnections(new HashSet<>());\n    user.setIsNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 39.36363403410888}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(user)\n            .flatMap(u -> {\n                Connection connection = new Connection();\n                connection.setSource(ConnectionSource.EMAIL);\n                connection.setRawId(email);\n                connection.setName(email);\n                connection.setSource(ConnectionSource.EMAIL);\n                connection.setSourceId(email);\n                u.getConnections().add(connection);\n                return Mono.just(u);\n            })\n            .flatMap(u -> userRepository.save(u))\n            .then(Mono.just(true))\n            .onErrorResume(e -> {\n                if (e instanceof DuplicateKeyException) {\n                    return Mono.error(new EmailAlreadyBoundException(email));\n                }\n                return Mono.error(e);\n            });\n}", "CodeBleu_score": 48.04803579035665}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(email)\n            .map(e -> new Connection(e, \"email\"))\n            .doOnNext(c -> user.getConnections().add(c))\n            .then(Mono.just(user))\n            .flatMap(this::save)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n            .onErrorResume(Mono::error);\n}", "CodeBleu_score": 22.43870798572301}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(user)\n        .flatMap(this::addEmailConnection)\n        .flatMap(this::save)\n        .then(Mono.just(true))\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n        .onErrorResume(e -> Mono.error(new AppException(HttpStatus.INTERNAL_SERVER_ERROR, \"Error binding email\", e)));\n}", "CodeBleu_score": 21.46644923214024}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!matchPassword(oldPassword, user.getPassword())) {\n                    throw new BizException(BizError.INVALID_PASSWORD);\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 28.89329885214066}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!matchPassword(oldPassword, user.getPassword())) {\n                    throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n                }\n\n                user.setPassword(encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 28.102117154636314}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!matchPassword(oldPassword, user.getPassword())) {\n                    throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n                }\n                user.setPassword(encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 28.102117154636314}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn getUserGroupIdsInOrg(userId, orgMember.getOrgId())\n            .flatMapMany(Flux::fromIterable)\n            .filter(groupId -> !isAllUsersGroup(groupId))\n            .distinct()\n            .flatMap(groupId -> getByIds(Collections.singleton(groupId))\n                    .map(userGroups -> userGroups.get(groupId))\n                    .flatMap(group -> group.getLocalizedName(locale)\n                            .map(localizedName -> Map.of(\n                                    \"id\", groupId,\n                                    \"name\", localizedName\n                            ))\n                    )\n            )\n            .collectList();\n}", "CodeBleu_score": 29.148081645539804}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn getUserGroupIdsInOrg(orgMember.getOrganizationId(), userId, withoutDynamicGroups)\n                .map(groupIds -> groupIds.stream()\n                        .map(groupId -> Map.of(\"id\", groupId, \"name\", getName(groupId, locale)))\n                        .collect(toList())\n                );\n    }", "CodeBleu_score": 18.259800715383616}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn getUserGroupIdsInOrg(userId, orgMember.getOrgId())\n            .flatMapMany(Flux::fromIterable)\n            .filter(groupId -> !isAllUsersGroup(groupId))\n            .distinct()\n            .flatMap(groupId -> getById(groupId)\n                    .map(userGroup -> Map.of(\"id\", userGroup.getId(), \"name\", userGroup.getLocalizedName(locale)))\n            )\n            .collectList();\n}", "CodeBleu_score": 23.46730926374069}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId, true);\n\n    return mongoUpsertHelper(userStatus);\n}", "CodeBleu_score": 26.618286080028053}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus();\n    userStatus.setId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper(userStatus);\n}", "CodeBleu_score": 35.17864496856392}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus();\n    userStatus.setId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper(userStatus);\n}", "CodeBleu_score": 35.17864496856392}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\tvar g rungroup.RunGroup\n\tg.Run(func() error {\n\t\tc.partition.clearMatching(&g, predicatePartition, predicateValue)\n\t\treturn nil\n\t})\n\n\t// Wait for all tasks to complete.\n\tg.Wait()\n}", "CodeBleu_score": 29.069018775165112}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\t// Ensure partition predicate is not nil.\n\tif c.partitionPredicate == nil {\n\t\tc.partitionPredicate = func(k string) bool { return true }\n\t}\n\n\t// Create run group to handle clearing matching entries across multiple partitions concurrently.\n\tvar g run.Group\n\tfor _, p := range c.partitions {\n\t\tp := p\n\t\tif !predicatePartition(p.name, p) {\n\t\t\tcontinue\n\t\t}\n\t\tg.Add(func() error {\n\t\t\t// Clear matching entries in partition.\n\t\t\tp.clearMatching(predicateValue)\n\t\t\treturn nil\n\t\t}, func(error) {\n\t\t\t// Close partition when done.\n\t\t\tp.Close()\n\t\t})\n\t}\n\n\t// Wait for all tasks to complete.\n\t_ = g.Run(context.Background())\n}", "CodeBleu_score": 57.27935010168246}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tc.partition.clearMatching(predicatePartition, predicateValue)\n}", "CodeBleu_score": 20.044870367078524}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := math.Floor(averageWeightPerPartition)\n\n\treturn int(maxSizePerPartition)\n}", "CodeBleu_score": 49.49210399044989}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Number of partitions and total weight quantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := math.Floor(float64(totalWeightQuantity) / float64(numPartitions))\n\tmaxSizePerPartition := math.Floor(math.Sqrt(2*float64(maxItemsTotal)*avgWeightPerPartition - float64(maxItemsTotal)*float64(maxItemsTotal)))\n\n\treturn int(maxSizePerPartition)\n}", "CodeBleu_score": 52.862523892592876}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 {\n\t\tpanic(fmt.Sprintf(\"number of partitions must be greater than zero, got %d\", numPartitions))\n\t}\n\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(fmt.Sprintf(\"total weight quantity must be greater than zero, got %d\", totalWeightQuantity))\n\t}\n\n\taverageWeightPerPartition := math.Floor(float64(totalWeightQuantity) / float64(numPartitions))\n\tmaxSizePerPartition := int(math.Floor(math.Sqrt(2*float64(averageWeightPerPartition)*float64(maxItemsTotal))))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 47.39269738081886}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata()\n        .map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            if (metadata != null) {\n                map.put(\"database_product_name\", metadata.getDatabaseProductName());\n                map.put(\"database_version\", metadata.getDatabaseVersion());\n            }\n            return map;\n        })\n        .block();\n}", "CodeBleu_score": 42.03623270901362}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\n        ConnectionMetadata connectionMetadata = getConnectionMetadata().block();\n        if (connectionMetadata != null) {\n            contributorMap.put(\"database_product_name\", getDatabaseProductName(connectionMetadata));\n            contributorMap.put(\"database_version\", getDatabaseVersion(connectionMetadata));\n        }\n        return contributorMap;\n    }", "CodeBleu_score": 45.99511125363357}, {"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata()\n            .map(metadata -> {\n                Map<String, Object> map = new HashMap<>();\n                if (metadata != null) {\n                    map.put(\"database.product.name\", metadata.getDatabaseProductName());\n                    map.put(\"database.version\", metadata.getDatabaseVersion());\n                }\n                return map;\n            })\n            .block();\n    }", "CodeBleu_score": 40.516532396727264}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tdef userSetting = configMap.get(\"user_settings\")\n    if (userSetting == null) {\n        info.setMustVerifyEmailOnRegistration(false)\n        info.setAllowRegistration(false)\n    } else {\n        info.setMustVerifyEmailOnRegistration(userSetting.get(\"must_verify_email_on_registration\") as boolean)\n        info.setAllowRegistration(userSetting.get(\"allow_registration\") as boolean)\n    }\n}", "CodeBleu_score": 40.07093897903442}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(\"userSettings\");\n    if (userSettings == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(Boolean.parseBoolean(userSettings.get(\"allowRegistration\").toString()));\n        info.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(userSettings.get(\"mustVerifyEmailOnRegistration\").toString()));\n    }\n}", "CodeBleu_score": 59.089586760289215}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tdef userSettings = configMap.get(\"userSettings\")\n\n    if (userSettings == null) {\n        info.setMustVerifyEmailOnRegistration(false)\n        info.setAllowRegistration(false)\n    } else {\n        info.setMustVerifyEmailOnRegistration(userSettings.get(\"mustVerifyEmailOnRegistration\") as Boolean)\n        info.setAllowRegistration(userSettings.get(\"allowRegistration\") as Boolean)\n    }\n}", "CodeBleu_score": 37.59316430465054}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"restart\");\n    Thread thread = new Thread(threadGroup, \"restart\", this::doRestart);\n    thread.setContextClassLoader(getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 53.94699825666584}, {"code": "public Object restart(){\n\tThreadGroup tg = new ThreadGroup(\"restartGroup\");\n    Thread t = new Thread(tg, \"restartThread\", new Runnable() {\n        public void run() {\n            try {\n                ClassLoader cl = Thread.currentThread().getContextClassLoader();\n                Class<?> c = cl.loadClass(\"com.sun.javafx.runtime.LauncherImpl\");\n                Method m = c.getMethod(\"launchApplication\", new Class[] {\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class, String.class, String.class,\n                        String.class, String.class", "CodeBleu_score": 33.36873132960312}, {"code": "public Object restart(){\n\t// Create a new thread group and thread to execute the restart process\n    ThreadGroup threadGroup = new ThreadGroup(\"restart\")\n    Thread thread = new Thread(threadGroup, \"restart\", {\n        // Set the thread as non-daemon\n        thread.setDaemon(false)\n        // Assign the application class loader as its context class loader\n        thread.setContextClassLoader(getClassLoader())\n        // Start the thread\n        thread.start()\n        // Return a message indicating the restart has begun\n        return \"Restarting...\"\n    } as Runnable)\n}", "CodeBleu_score": 50.700146033263906}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n    configurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n}", "CodeBleu_score": 40.05581845650464}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tObjectMapper mapper = new ObjectMapper();\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    mapper.registerModule(new JavaTimeModule());\n    configurer.defaultCodecs().jackson2JsonEncoder(mapper);\n    configurer.defaultCodecs().jackson2JsonDecoder(mapper);\n}", "CodeBleu_score": 33.98662787138393}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n    configurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n}", "CodeBleu_score": 41.17916802373143}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        GET(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(not(accept(MediaType.APPLICATION_JSON)))\n            .and(not(accept(MediaType.APPLICATION_XML))),\n        this::serveIndex\n    );\n}", "CodeBleu_score": 23.04934838929114}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        GET(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(negate(request -> request.getHeaders().getUpgrade() != null)),\n        this::serveIndex\n    );\n}", "CodeBleu_score": 23.935051939722275}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        GET(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(not(accept(MediaType.APPLICATION_JSON)))\n            .and(not(accept(MediaType.APPLICATION_JSON_UTF8)))\n            .and(not(accept(MediaType.APPLICATION_JSON_UTF8_VALUE)))\n            .and(not(accept(MediaType.APPLICATION_JSON_VALUE)))\n            .and(not(accept(MediaType.APPLICATION_OCTET_STREAM)))\n            .and(not(accept(MediaType.APPLICATION_OCTET_STREAM_VALUE)))\n            .and(not(accept(MediaType.APPLICATION_XML)))\n            .and(not(accept(MediaType.APPLICATION_XML_VALUE)))\n            .and(not(accept(MediaType.APPLICATION_XHTML_XML)))\n            .and(not(accept(MediaType.APPLICATION_XHTML_XML_VALUE)))\n            .and(not(accept(MediaType.IMAGE_GIF)))\n            .and(not(accept(MediaType.IMAGE_GIF_VALUE)))\n            .and(not(accept(MediaType.IMAGE_JPEG)))\n            .and(not(accept(MediaType.IMAGE_JPEG_VALUE)))\n            .and(not(accept(MediaType.IMAGE_PNG)))\n            .and(not(accept(MediaType.IMAGE_PNG_VALUE)))\n            .and(not(accept(MediaType.TEXT_EVENT_STREAM)))\n            .and(not(accept(MediaType.TEXT_EVENT_STREAM_VALUE)))\n            .and(not(accept(MediaType.TEXT_PLAIN)))\n            .and(not(accept(MediaType.TEXT_PLAIN_VALUE)))\n            .and(not(accept(MediaType.TEXT_XML)))\n            .and(not(accept(MediaType.TEXT_XML_VALUE)))\n            .and(not(accept(MediaType.ALL_VALUE)))\n            .and(not(accept(MediaType.APPLICATION_ATOM_XML)))\n            .and(", "CodeBleu_score": 16.152828738911438}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        GET(\"/uc/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(not(method(HttpMethod.WS))),\n        this::serveIndex\n    );\n}", "CodeBleu_score": 18.316265182483583}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n        this::serveIndex\n    );\n}", "CodeBleu_score": 22.988157392115966}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        GET(\"/uc/{*path}\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(negate(method(HttpMethod.WS))),\n        this::serveIndex);\n}", "CodeBleu_score": 18.579121351700838}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new MapReactiveIndexedSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 11.217040336889935}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new ReactiveIndexedSessionRepository<>(new MapSessionRepository(new ConcurrentHashMap<>())) {\n        @Override\n        public Mono<MapSession> createSession() {\n            return super.createSession().map(s -> {\n                s.setMaxInactiveInterval(determineTimeout(s));\n                return s;\n            });\n        }\n    };\n}", "CodeBleu_score": 27.02176320721016}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tReactiveIndexedSessionRepository<MapSession> repository = new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n    repository.setDefaultMaxInactiveInterval(this.properties.getMaxInactiveInterval());\n    return repository;\n}", "CodeBleu_score": 29.683973841971856}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthEnabled(haloProperties.getSecurity().getTwoFactorAuth().isEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 52.457933602124676}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\n    // Enable two-factor authentication if configured in HaloProperties.\n    if (haloProperties.getSecurity().getTwoFactorAuth().isEnabled()) {\n        userDetailsService.setTwoFactorAuthEnabled();\n    }\n\n    return userDetailsService;\n}", "CodeBleu_score": 48.80077711360792}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    userDetailsService.setTwoFactorAuthEnabled(haloProperties.getSecurity().isTwoFactorAuthEnabled())\n    return userDetailsService\n}", "CodeBleu_score": 41.35030511758996}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner()\n        .setKind(\"email\")\n        .setDisplayName(getDisplayName())\n        .setEmail(getEmail() ?: \"\")\n        .setAnnotations(\n            [\n                \"avatar\": [\n                    \"url\": getAvatar()\n                ],\n                \"website\": [\n                    \"url\": getWebsite()\n                ]\n            ]\n        )\n}", "CodeBleu_score": 11.66631950153667}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setDisplayName(getDisplayName());\n    commentOwner.setAnnotations(new HashMap<String, String>());\n    commentOwner.put(\"email\", getName());\n    return commentOwner;\n}", "CodeBleu_score": 33.882898788628914}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setDisplayName(getDisplayName());\n    commentOwner.setEmail(getEmail());\n    commentOwner.setAnnotations(new HashMap<String, String>());\n    commentOwner.getAnnotations().put(\"avatar\", getAvatar());\n    commentOwner.getAnnotations().put(\"website\", getWebsite());\n    return commentOwner;\n}", "CodeBleu_score": 41.78555832349892}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == \"email\") {\n        User user = User.fetch(post.getOwner());\n        return commentOwner.getEmail().equals(user.getEmail());\n    }\n    return commentOwner.getName().equals(post.getOwner());\n}", "CodeBleu_score": 29.377391047174395}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == \"email\") {\n        User user = User.fetch(commentOwner.getEmail());\n        return user.getEmail() == post.getOwner().getEmail();\n    } else {\n        return commentOwner.getName() == post.getOwner().getName();\n    }\n}", "CodeBleu_score": 30.698847348621918}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == \"email\") {\n    User user = User.getUser(post.getOwner());\n    return user.getEmail() == commentOwner.getName();\n  }\n  return post.getOwner() == commentOwner.getName();\n}", "CodeBleu_score": 26.372086624431912}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tString fieldSelector = labelAndFieldSelectorToListOptions(labelSelector, fieldSelector);\n\n        if (StringUtils.isNotBlank(keyword)) {\n            fieldSelector = fieldSelector + \",\" + getKeywordFieldSelector(keyword);\n        }\n\n        if (StringUtils.isNotBlank(ownerName)) {\n            fieldSelector = fieldSelector + \",\" + getOwnerNameFieldSelector(ownerName);\n        }\n\n        ListOptions listOptions = new ListOptions();\n        listOptions.setFieldSelector(fieldSelector);\n        return listOptions;\n    }", "CodeBleu_score": 29.133327137841142}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = labelAndFieldSelectorToListOptions(listOptions);\n\n        if (StringUtils.isNotBlank(getKeyword())) {\n            fieldSelector = addCondition(fieldSelector, \"name\", getKeyword());\n        }\n\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            fieldSelector = addCondition(fieldSelector, \"ownerName\", getOwnerName());\n        }\n\n        if (StringUtils.isNotBlank(getOwnerKind())) {\n            fieldSelector = addCondition(fieldSelector, \"ownerKind\", getOwnerKind());\n        }\n\n        listOptions.setFieldSelector(fieldSelector);\n        return listOptions;\n    }", "CodeBleu_score": 32.98745147926651}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = labelAndFieldSelectorToListOptions(listOptions);\n        if (StringUtils.isNotBlank(getKeyword())) {\n            fieldSelector = fieldSelector.concat(getKeyword().concat(\",\"));\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            fieldSelector = fieldSelector.concat(getOwnerName().concat(\",\"));\n        }\n        if (StringUtils.isNotBlank(getOwnerKind())) {\n            fieldSelector = fieldSelector.concat(getOwnerKind().concat(\",\"));\n        }\n        listOptions.setFieldSelector(fieldSelector);\n        return listOptions;\n    }", "CodeBleu_score": 33.97794881178995}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n        .map(name -> nameOf(commentName))\n        .flatMap(this::getUpvote)\n        .map(upvote -> new CommentStats(commentName, upvote))\n        .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 32.42264398773882}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n      .filter(notNull())\n      .flatMap(nameOf -> getByName(nameOf))\n      .map(upvote -> getUpvote(upvote))\n      .map(count -> build(commentName, count))\n      .defaultIfEmpty(empty());\n}", "CodeBleu_score": 34.68753085780036}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n        .flatMap(name -> commentCounter.getByName(name))\n        .map(comment -> new CommentStats(comment.getName(), comment.getUpvote()))\n        .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 37.65433540869911}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason reason = setReasonType(subscriber, \"someone replied to you\");\n    setExpression(reason, \"repliedOwner\", \"=\", identity.name());\n\n    Subscription.Subscription subscription = new Subscription.Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(reason);\n\n    Subscription.SubscriptionResponse response = subscribe(subscription);\n    block(response);\n}", "CodeBleu_score": 51.79730894427925}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason reason = new Subscription.InterestReason();\n    reason.setReasonType(Subscription.InterestReason.REASON_TYPE_REPLY);\n    reason.setCondition(identity.name());\n    subscriber.setInterestReason(reason);\n\n    Subscription.SubscriptionResult result = notificationCenter.subscribe(subscriber);\n    result.block();\n}", "CodeBleu_score": 55.05733992470512}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    setReasonType(subscriber, \"someone replied to you\");\n    setExpression(subscriber, \"repliedOwner\", identity.name());\n    subscribe(subscriber);\n}", "CodeBleu_score": 39.09442189781317}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(),\n        c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 11.818959555603248}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), commentToApprove -> {\n        commentToApprove.setApproved(true);\n        commentToApprove.setApprovedTime(now());\n        return commentToApprove;\n    });\n}", "CodeBleu_score": 21.147214034192523}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 11.471433151592622}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 61.20550659068946}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.88333826373089}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($this->getRecord() && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.12140014226577}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirect);\n    if (empty($url)) {\n        return $this;\n    }\n    $this->redirect($url);\n    return $this;\n}", "CodeBleu_score": 67.53632899643641}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->successRedirectUrl) {\n        $this->redirect($this->evaluate($this->successRedirectUrl));\n    }\n\n    return $this;\n}", "CodeBleu_score": 37.141846491281996}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->successRedirectUrl) {\n        $this->redirect($this->evaluate($this->successRedirectUrl));\n    }\n\n    return $this;\n}", "CodeBleu_score": 37.141846491281996}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record?->exists() ?? true) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = $record->tags()->getRelated();\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 84.35026413864396}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record?->exists ?? false) {\n        if (method_exists($record, 'tags')) {\n            $tagClassName = config('tags.tag_model');\n            $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n                $locale = $tagClassName::getLocale();\n\n                $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n                if ($tag?->isEmpty() ?? true) {\n                    $tag = $tagClassName::create([\n                        'name' => [$locale => $tagName],\n                    ]);\n                }\n\n                return $tag;\n            })->flatten();\n\n            $record->tags()->sync($tags->pluck('id'));\n        }\n    }\n}", "CodeBleu_score": 75.040326330228}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('taggable.model');\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 79.95915115990677}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create a scope for the pipeline\n\tscope := authz.NewScope(spacePath, \"pipelines\", \"pipeline\", pipelineIdentifier)\n\n\t// create a resource for the pipeline\n\tresource := authz.NewResource(spacePath, \"pipelines\", \"pipeline\", repoName, pipelineIdentifier)\n\n\t// check if the user has the required permission for the pipeline\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 59.3019038045693}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create a scope and resource for the pipeline\n\tscope := authz.NewScope(spacePath, \"pipeline\", pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, \"repository\", repoName)\n\n\t// perform the authorization check\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 54.07467936583341}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create a scope and resource for the pipeline\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, repoName, pipelineIdentifier)\n\n\t// check if the user has the required permission for the pipeline\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 58.5986237520433}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Dissect the space path to get the parent space and name.\n\tparent, name := paths.DissectLeaf(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.Scope{\n\t\tType:  \"space\",\n\t\tSpace: parent,\n\t}\n\tresource := authz.Resource{\n\t\tType:  \"space\",\n\t\tSpace: parent,\n\t\tName:  name,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 58.81634952829328}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Disect the space path to get the parent space and name.\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error disecting space path: %w\", err)\n\t}\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.Scope{\n\t\tType:    \"space\",\n\t\tParent:  parentSpace,\n\t\tName:    name,\n\t\tSession: session,\n\t}\n\tresource := authz.Resource{\n\t\tType:     \"space\",\n\t\tParent:   parentSpace,\n\t\tName:     name,\n\t\tSession:  session,\n\t\tSpace:    space,\n\t\tScopes:   []authz.Scope{scope},\n\t\tResource: space,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 68.96291983902964}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tparentSpace, err := disectLeaf(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.Scope{\n\t\tType:  \"space\",\n\t\tSpace: parentSpace,\n\t}\n\tresource := authz.Resource{\n\t\tType:  \"space\",\n\t\tSpace: space.Path,\n\t}\n\n\treturn authorizer.Check(\n\t\tctx,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 55.63673530704395}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar result any\n\tif err := decoder.Decode(&result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf bytes.Buffer\n\tencoder := json.NewEncoder(&buf)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(result); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(buf.Bytes(), \"\n\"), nil\n}", "CodeBleu_score": 47.130110765368364}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar sanitized interface{}\n\tif err := decoder.Decode(&sanitized); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencoder := json.NewEncoder(bytes.NewBuffer(nil))\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(sanitized); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(encoder.Bytes(), \"\n\"), nil\n}", "CodeBleu_score": 51.382575469757526}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\t}\n\n\tvar decoded json.RawMessage\n\tif err := json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal source: %w\", err)\n\t}\n\n\tencoder := json.NewEncoder(buffer.NewBuffer())\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(decoded); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode decoded source: %w\", err)\n\t}\n\n\tencoded := buffer.Bytes()\n\tif len(encoded) > 0 && encoded[len(encoded)-1] == '\n' {\n\t\tencoded = encoded[:len(encoded)-1]\n\t}\n\n\treturn encoded, nil\n}", "CodeBleu_score": 64.18420476833457}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate repository reference\n\tif !c.repoStore.ValidateRef(repoRef) {\n\t\treturn nil, usererror.NewBadRequestError(\"Invalid repository reference\")\n\t}\n\t// Fetch repository\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// Check permissions\n\tif err := c.auth.CheckRepo(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 50.2550895599176}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepoRef, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\tswitch {\n\t\tcase errors.Is(err, types.ErrRepoNotFound):\n\t\t\treturn nil, usererror.NewFromError(\n\t\t\t\tfmt.Errorf(\"repo not found\"),\n\t\t\t\tusererror.ErrMetadataNotFound,\n\t\t\t\t\"Repo not found\",\n\t\t\t)\n\t\tdefault:\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// Check the session's access permissions on the repository.\n\tif !session.IsAdmin() && !session.HasPermission(repo.Visibility, reqPermission) {\n\t\treturn nil, usererror.NewFromError(\n\t\t\tfmt.Errorf(\"user does not have permission\"),\n\t\t\tusererror.ErrUnauthorized,\n\t\t\t\"User does not have permission\",\n\t\t)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.00864149012369}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepoID, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByID(ctx, repoID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session's access permissions for the repository.\n\tif !session.AccessLevel.Can(reqPermission, repo.Visibility) {\n\t\treturn nil, usererror.Newf(usererror.ErrUnauthorized,\n\t\t\t\"You do not have sufficient access to this repository.\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 46.06138467670815}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.434039255653005}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.256515889540253}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.256515889540253}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n\tif not self.state.attached then\n\t\tself.state.attached = true\n\t\tself.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 54.85509252133145}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n  if not self.state.attached then\n    self.state.attached = true\n    self.state.renderer:attach(self)\n  end\n  return self", "CodeBleu_score": 58.134920649591514}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.on_render = on_render\n    if not self.attached then\n        self.attached = true\n        self.renderer:attach(self)\n    end\n    return self", "CodeBleu_score": 54.88414496182815}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tif self:is_valid() then\n        self.watcher = uv.new_fs_poll()\n        self.watcher:start(self.filename, 1000, function(err)\n            if err then\n                console.debug.error(err)\n                return\n            end\n            if callback then\n                callback()\n            end\n        end)\n    end", "CodeBleu_score": 51.588447865912116}, {"code": "function Buffer:watch(callback)\n\tif self:is_valid() then\n        if callback then\n            self.watcher:watch_file(self.filename, function(event)\n                if event == \"changed\" then\n                    callback(self)\n                elseif event == \"deleted\" then\n                    self.watcher:unwatch_file(self.filename)\n                end\n            end)\n        end\n    else\n        console.debug.error(\"Buffer is not valid\")\n    end", "CodeBleu_score": 50.85750708404908}, {"code": "function Buffer:watch(callback)\n\tif self:is_valid() then\n    if callback then\n      self.watcher:watch_file(self.filename, function(filename, event)\n        if event == \"changed\" then\n          callback(self)\n        elseif event == \"deleted\" then\n          self.watcher:unwatch_file(self.filename)\n        end\n      end)\n    end\n  else\n    console.debug.error(\"Buffer is not valid.\")\n  end", "CodeBleu_score": 53.250936751551215}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex then return self.hex end\n\n  local spec = self.spec\n  local attr = self.fg and 'fg' or 'bg'\n  local color = self.gui and vim.api.nvim_get_hl_by_name(spec, true)[attr] or vim.api.nvim_get_hl_by_name(spec, false)[attr]\n\n  if not color then\n    error(string.format('Could not retrieve %s color for %s', attr, spec))\n  end\n\n  local hex = string.format('#%06x', color)\n  self.hex = hex\n  return hex", "CodeBleu_score": 59.19782682328319}, {"code": "function Color:to_hex()\n\tif self.hex then return self.hex end\n  local spec = self:get_spec()\n  local attr = spec.fg and 'fg' or 'bg'\n  local color = vim.api.nvim_get_hl_by_name(spec.name, true)[attr]\n  if not color then return nil end\n  local hex = string.format('%06x', color)\n  self.hex = hex\n  return hex", "CodeBleu_score": 52.040859382851835}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n\n  local spec = self:get_spec()\n  local attr = spec.cterm and 'cterm' or 'gui'\n  local color = spec[attr .. 'fg']\n\n  if not color then\n    color = spec[attr .. 'bg']\n  end\n\n  if not color then\n    return\n  end\n\n  local hex = vim.fn.synIDattr(vim.fn.synIDtrans(vim.fn.hlID(color)), attr .. 'fg', 'gui')\n  if not hex then\n    hex = vim.fn.synIDattr(vim.fn.synIDtrans(vim.fn.hlID(color)), attr .. 'bg', 'gui')\n  end\n\n  if not hex then\n    return\n  end\n\n  self.hex = hex\n  return hex", "CodeBleu_score": 52.46371593128876}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n\n  for _, line in ipairs(lines) do\n    local col_top, col_end = string.find(line, pattern)\n\n    if col_top then\n      buffer:add_highlight(hl, 0, col_top - 1, col_end)\n    end\n  end\n\n  return self", "CodeBleu_score": 39.3503106517287}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n\n  for i, line in ipairs(lines) do\n    local col_top, col_end = line:find(pattern)\n    if col_top then\n      buffer:add_highlight(hl, i - 1, col_top - 1, col_end)\n    end\n  end\n\n  return self", "CodeBleu_score": 43.3372916296739}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local row = 0\n\n  for _, line in ipairs(lines) do\n    row = row + 1\n    local start_col, end_col = line:find(pattern)\n\n    if start_col then\n      buffer:add_highlight(hl, row, start_col, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 46.32369863957494}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = tostring(row) .. tostring(col)\n  vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row, col, {\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority\n  })\n  return id", "CodeBleu_score": 60.87732171579396}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format(\"%d:%d\", row, col)\n    local opts = {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        hl_mode = \"combine\",\n        priority = priority\n    }\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row - 1, col - 1, opts)\n    return id", "CodeBleu_score": 64.58550527244802}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = row .. ':' .. col\n    local opts = {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        hl_mode = 'combine',\n        priority = priority,\n    }\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row, col, opts)\n    return id", "CodeBleu_score": 69.09260441401408}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 22.130899078755167}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == '", "CodeBleu_score": 23.28267529041353}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.14982310539366}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tlocal watcher = self:get_watcher(path)\n  if watcher then return watcher end\n\n  watcher = vim.loop.new_fs_event()\n  self.watchers[path] = watcher\n  vim.loop.fs_event_start(watcher, path, {\n    --[[\n    The event flags are bitwise OR'd.\n    ]]\n    --[[\n    Watch for file access events.\n    ]]\n    access = true,\n    --[[\n    Watch for file attribute change events.\n    ]]\n    attrib = true,\n    --[[\n    Watch for file create events.\n    ]]\n    create = true,\n    --[[\n    Watch for file delete events.\n    ]]\n    delete = true,\n    --[[\n    Watch for file modify events.\n    ]]\n    modify = true,\n    --[[\n    Watch for file rename events.\n    ]]\n    rename = true,\n  }, vim.schedule_wrap(function(err, path)\n    --[[\n    The handler function is called whenever a file event is detected.\n    ]]\n    if err then error(err) end\n    handler(path)\n  end))\n\n  return watcher", "CodeBleu_score": 46.51119465667879}, {"code": "function Watcher:watch_file(path, handler)\n\tlocal watcher = self:get_watcher(path)\n  if watcher then\n    return watcher\n  end\n\n  watcher = vim.loop.new_fs_event()\n  vim.loop.fs_event_start(watcher, path, {\n    recursive = true,\n  }, vim.schedule_wrap(handler))\n\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 52.288659498410006}, {"code": "function Watcher:watch_file(path, handler)\n\tlocal watcher = self.watchers[path]\n\tif watcher then\n\t\treturn watcher\n\tend\n\n\twatcher = vim.loop.new_fs_event()\n\tself.watchers[path] = watcher\n\n\tlocal ok, err = pcall(vim.loop.fs_event_start, watcher, path, {\n\t\trecursive = true,\n\t}, vim.schedule_wrap(handler))\n\tif not ok then\n\t\tself.watchers[path] = nil\n\t\treturn nil, err\n\tend\n\n\treturn watcher", "CodeBleu_score": 48.599270307110295}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tlocal buffer_lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(buffer_lines)\n  if type(hunks) == \"string\" then\n    return hunks\n  end\n  self:set_signs(hunks)\n  return hunks", "CodeBleu_score": 17.8993180242378}, {"code": "function GitBuffer:live_hunks()\n\t-- Retrieve the buffer lines.\n    local lines = self:get_lines()\n    if lines == nil then\n        return nil\n    end\n\n    -- Calculate the hunks using the git object.\n    local hunks, err = self.git_object:hunks(lines)\n    if err ~= nil then\n        return nil, err\n    end\n\n    -- Set up signs for each line in the hunks, categorizing them by type and assigning priorities.\n    local signs = {}\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk.lines) do\n            local sign = {\n                type = line.type,\n                lnum = line.lnum,\n                priority = 10,\n            }\n            if line.type == \"removed\" then\n                sign.priority = 20\n            elseif line.type == \"added\" then\n                sign.priority = 30\n            end\n            table.insert(signs, sign)\n        end\n    end\n\n    -- Update the buffer's signs.\n    self:set_signs(signs)\n\n    return hunks", "CodeBleu_score": 45.56116595935647}, {"code": "function GitBuffer:live_hunks()\n\tlocal bufnr = self.bufnr\n  local git_obj = self.git_object\n  local buf_lines = self:get_lines()\n  local hunks, err = git_obj:get_hunks(buf_lines)\n  if err then return err end\n\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n  local sign_setting = signs_setting:get()\n  local sign_priority = sign_setting.priority\n\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    local hunk_signs = {}\n    local hunk_type = hunk.type\n    local type_sign_setting = sign_setting[hunk_type]\n    local type_sign_priority = type_sign_setting.priority\n    local type_sign_hl = type_sign_setting.hl\n\n    for _, line in ipairs(hunk.lines) do\n      local line_sign_setting = type_sign_setting.numhl and line.numhl or type_sign_hl\n      local line_sign_hl = line_sign_setting.hl\n      local line_sign_numhl = line_sign_setting.numhl\n      local line_sign_priority = line_sign_setting.priority\n\n      table.insert(hunk_signs, {\n        lnum = line.top,\n        priority = line_sign_priority + type_sign_priority + sign_priority,\n        name = line_sign_hl,\n        numhl = line_sign_numhl,\n      })\n    end\n\n    table.insert(signs, hunk_signs)\n  end\n\n  self.namespace:update_signs(sign_ns_id, signs)\n  self.hunks = hunks\n\n  return hunks", "CodeBleu_score": 45.76276985854576}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpfile = fs.tmpname()\n  local err\n\n  fs.write_file(tmpfile, patch)\n\n  -- TODO: Handle errors\n  loop.free_textlock()\n  err = self:command({ 'apply', '--cached', '--whitespace=nowarn', '--unidiff-zero', tmpfile })\n  loop.suspend_textlock()\n\n  fs.remove_file(tmpfile)\n\n  return err", "CodeBleu_score": 52.18746166311825}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpname = fs.tmpname()\n  local f = io.open(tmpname, 'wb')\n\n  f:write(patch)\n  f:close()\n\n  local err = self.git:stage_hunk(tmpname)\n\n  fs.remove_file(tmpname)\n\n  return err", "CodeBleu_score": 49.778963579006174}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpname = fs.tmpname()\n\n  fs.write_file(tmpname, patch)\n\n  local _, err = self.git:stage_hunk(tmpname)\n\n  fs.remove_file(tmpname)\n\n  return err", "CodeBleu_score": 44.52090002036653}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tString accessTokenEndpoint = getAccessTokenEndpoint();\n    HttpMethod accessTokenVerb = getAccessTokenVerb();\n    String body = getBody(requestToken, verifier);\n\n    HttpResponse response = send(accessTokenEndpoint, accessTokenVerb, body);\n\n    return extract(response);\n}", "CodeBleu_score": 34.57571647250203}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tString accessTokenEndpoint = getAccessTokenEndpoint();\n        String accessTokenVerb = getAccessTokenVerb();\n        String accessTokenBody = getBody(requestToken, verifier);\n\n        HttpResponse response = send(accessTokenEndpoint, accessTokenVerb, accessTokenBody);\n\n        return extract(response);\n    }", "CodeBleu_score": 35.18288516152147}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tString accessTokenEndpoint = getAccessTokenEndpoint();\n    HttpMethod accessTokenVerb = getAccessTokenVerb();\n    String body = getBody(requestToken, verifier);\n\n    HttpResponse response = send(accessTokenEndpoint, accessTokenVerb, body);\n\n    return extract(response);\n}", "CodeBleu_score": 34.57571647250203}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host \" + host + \" to authentication context\");\n}", "CodeBleu_score": 47.81509453787238}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), credentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host to authentication context: \" + host);\n}", "CodeBleu_score": 68.49197472796938}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host \" + host + \" to the authentication cache using Basic authentication\");\n}", "CodeBleu_score": 47.454812163471736}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new NullPointerException(\"AvatarCache instance is null\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.seedCache(key, source);\n    String url = jenkins.getRootUrl();\n    if (url == null) {\n        throw new NullPointerException(\"Jenkins root URL is null\");\n    }\n    String encoded = cache.encode(key);\n    if (encoded == null) {\n        throw new NullPointerException(\"Encoded key is null\");\n    }\n    try {\n        return new URL(url, cache.getUrlName() + \"/\" + encoded + \"/\" + size).toExternalForm();\n    } catch (MalformedURLException e) {\n        throw new NullPointerException(\"Malformed URL\");\n    }\n}", "CodeBleu_score": 52.181078827519386}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"Avatar cache not configured\");\n    }\n    String key = cache.hashKey(source);\n    cache.seed(key, source);\n    try {\n        return jenkins.getRootUrl() + cache.getUrlName() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding unsupported\");\n    }\n}", "CodeBleu_score": 51.55921600663061}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No AvatarCache instance found\");\n    }\n    String key = cache.encode(source);\n    cache.seed(key, source);\n    String rootUrl = jenkins.getRootUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is not set\");\n    }\n    try {\n        return new URL(rootUrl + cache.getUrlName() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size).toExternalForm();\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Failed to build URL\", e);\n    }\n}", "CodeBleu_score": 54.99274773749584}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 56.363139999032555}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    }\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 66.9330049911378}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    }\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    } else {\n        this.lastModified = lastModified;\n    }\n}", "CodeBleu_score": 60.130464740674036}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        image = future.get();\n        lastModified = new Date(future.getLastModified());\n        future = null;\n        return false;\n    } catch (InterruptedException e) {\n        return true;\n    } catch (ExecutionException e) {\n        future = null;\n        return true;\n    }\n}", "CodeBleu_score": 45.41340189116352}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tImage image = future.get();\n\t\t\tif (image != null) {\n\t\t\t\tthis.image = image;\n\t\t\t\tthis.lastModified = image.getLastModified();\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\t// ignore\n\t\t} catch (ExecutionException e) {\n\t\t\t// ignore\n\t\t}\n\t\tfuture = null;\n\t}\n\treturn true;\n}", "CodeBleu_score": 44.74186286668319}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        T value = future.get();\n        setImage(value);\n        lastModified = System.currentTimeMillis();\n        future = null;\n        return false;\n    } catch (InterruptedException e) {\n        return true;\n    } catch (ExecutionException e) {\n        return true;\n    }\n}", "CodeBleu_score": 39.97399567077313}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.setContentType(\"image/png\");\n    rsp.addHeader(\"Cache-Control\",\"public, max-age=86400\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PngEncoder png = new PngEncoder(baos,8,false);\n    png.encode(createImage(req,node));\n    baos.flush();\n    rsp.setContentLength(baos.size());\n    OutputStream os = rsp.getOutputStream();\n    baos.writeTo(os);\n    os.flush();\n}", "CodeBleu_score": 39.75470026431625}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setHeader(\"Expires\", \"0\");\n    rsp.setContentType(\"image/png\");\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    write(baos,req,node);\n    baos.flush();\n    rsp.setContentLength(baos.size());\n    OutputStream os = rsp.getOutputStream();\n    baos.writeTo(os);\n    os.flush();\n}", "CodeBleu_score": 39.62962404349074}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.setContentType(\"image/png\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PngEncoder png = new PngEncoder(baos, 1, false);\n    png.encode(getImage(req, node));\n    baos.flush();\n    byte[] data = baos.toByteArray();\n    rsp.setContentLength(data.length);\n    rsp.addHeader(\"Expires\", \"Fri, 01 Jan 1980 00:00:00 GMT\");\n    rsp.addHeader(\"Pragma\", \"no-cache\");\n    rsp.addDateHeader(\"Last-Modified\", System.currentTimeMillis());\n    rsp.getOutputStream().write(data);\n}", "CodeBleu_score": 46.678009612369635}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n\n        setConnectionManager(builder);\n        setKeepAliveStrategy(builder);\n        setRetryHandler(builder);\n        setClientProxyParams(BitbucketEndpoint.BITBUCKET_URL, builder);\n        if (authenticator != null) {\n            authenticator.configureBuilder(builder);\n        }\n        build(builder);\n    }", "CodeBleu_score": 40.192087744034204}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.context = HttpClientContext.create();\n\n        setConnectionManager();\n        setClientProxyParams(API_BASE_URL, builder);\n        build();\n        convert();\n        setExpireDuration();\n        setConnectionManagerShared();\n        setRetryHandler();\n        setKeepAliveStrategy();\n        create();\n        configureBuilder();\n    }", "CodeBleu_score": 35.55373749925474}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        // Set up cache expiration for team and repositories if caching is enabled.\n        if (enableCache) {\n            setExpireDuration(teamCacheDuration, repositoriesCacheDuration);\n        }\n\n        // Configure an HTTP client with a keep-alive strategy, connection manager, and retry handler.\n        configureBuilder();\n\n        // If an authenticator is provided, configure the HTTP client and context for authentication.\n        if (authenticator != null) {\n            authenticator.configureBuilder(builder);\n            authenticator.configureContext(context, host);\n        }\n\n        // Set client proxy parameters before building the HTTP client.\n        setClientProxyParams(host, builder);\n\n        // Build the HTTP client.\n        build();\n    }", "CodeBleu_score": 40.41265343855768}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\ttry {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n        if (sourceBranch != null) {\n            pullRequest.getSource().setCommitClosure(new BitbucketCommitClosure(sourceBranch.getRawNode()));\n        }\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n        if (destinationBranch != null) {\n            pullRequest.getDestination().setCommitClosure(new BitbucketCommitClosure(destinationBranch.getRawNode()));\n        }\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.WARNING, \"Failed to setup commit closures for pull request \" + pullRequest.getId(), e);\n    }\n}", "CodeBleu_score": 44.572016158826}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t// set up closure for source branch\n    BitbucketCloudBranch sourceBranch = pullRequest.getSource();\n    if (sourceBranch != null) {\n        sourceBranch.setCommitClosure(new BitbucketCloudCommitClosure(sourceBranch.getRawNode(), this));\n    }\n\n    // set up closure for destination branch\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n    if (destinationBranch != null) {\n        destinationBranch.setCommitClosure(new BitbucketCloudCommitClosure(destinationBranch.getRawNode(), this));\n    }\n}", "CodeBleu_score": 37.17369779062813}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tString sourceBranchName = pullRequest.getSource().getBranch().getName();\n    String destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\n    // Set up source branch closure\n    BitbucketCloudBranch sourceBranch = getBranch(sourceBranchName);\n    if (sourceBranch != null) {\n        String sourceBranchRawNode = sourceBranch.getRawNode();\n        pullRequest.getSource().setCommitClosure(new CommitClosure(sourceBranchRawNode));\n    }\n\n    // Set up destination branch closure\n    BitbucketCloudBranch destinationBranch = getBranch(destinationBranchName);\n    if (destinationBranch != null) {\n        String destinationBranchRawNode = destinationBranch.getRawNode();\n        pullRequest.getDestination().setCommitClosure(new CommitClosure(destinationBranchRawNode));\n    }\n}", "CodeBleu_score": 39.23612718934272}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tfinal JenkinsLocationConfiguration globalConfig = JenkinsLocationConfiguration.get();\n    if (globalConfig == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is not available\");\n    }\n    final String rootURL = globalConfig.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins root URL is not available\");\n    }\n    return rootURL;\n}", "CodeBleu_score": 48.95304149226212}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration configuration = JenkinsLocationConfiguration.get();\n    if (configuration == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n    }\n    String url = configuration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is null\");\n    }\n    return DisplayURLProvider.get().getRoot();\n}", "CodeBleu_score": 51.60804262387608}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkins jenkins = Jenkins.getInstance();\n    JenkinsLocationConfiguration config = jenkins.getDescriptorByType(JenkinsLocationConfiguration.class);\n\n    if (config == null || config.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration or URL is null\");\n    }\n\n    return config.getUrl();\n}", "CodeBleu_score": 55.69035363109802}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL parsedUrl = new URL(url);\n        String host = parsedUrl.getHost();\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must be fully qualified and not use localhost or unconfigured-jenkins-location\");\n        }\n        if (bitbucket instanceof BitbucketCloudApi && !host.contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API URL must be fully qualified\");\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed\");\n    }\n    return url;\n}", "CodeBleu_score": 59.09501464309939}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url.endsWith('/')) {\n        url = url.substring(0, url.length() - 1);\n    }\n    try {\n        URL u = new URL(url);\n        if (!u.getHost().equals(getHost(bitbucket))) {\n            throw new IllegalStateException(String.format(\"The Jenkins URL (%s) does not match the Bitbucket URL (%s)\", url, bitbucket.getBaseUrl()));\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(String.format(\"The Jenkins URL (%s) is malformed\", url), e);\n    }\n    return url;\n}", "CodeBleu_score": 41.9976123240689}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL u = new URL(url);\n        if (u.getHost() == null) {\n            throw new IllegalStateException(\"Malformed URL: ${url}\");\n        }\n        if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must not use 'localhost' or 'unconfigured-jenkins-location' as host\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && !u.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API clients must use a fully qualified host name\");\n        }\n        return u.getHost();\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Malformed URL: ${url}\", e);\n    }\n}", "CodeBleu_score": 70.98525118119221}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tfinal BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Build status notifications are disabled\");\n            return;\n        }\n\n        final SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        final String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not determine the commit hash\");\n            return;\n        }\n\n        final String branch = getBranch(revision);\n        final boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        final String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        listener.getLogger().format(\"[Bitbucket] Sending build status notification for %s%n\", revision.getHead());\n\n        final BitbucketApi bitbucket = createBitbucketClient(context, listener);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 48.831309263541456}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Build status notifications are disabled. Skipping notification.\");\n            return;\n        }\n\n        SCMRevision revision = source.getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Unable to determine the commit hash. Skipping notification.\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String branch = source.getBranch();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = source.buildBitbucketClient();\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 46.764346039785444}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled. Skipping notification.\");\n            return;\n        }\n\n        SCMRevision revision = SCMRevisionAction.getRevision(build, source);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not determine the hash of the revision. Skipping notification.\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String branch = source.getBranch();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        listener.getLogger().format(\"[Bitbucket] Sending %s notification for %s %n\",\n                shareBuildKeyBetweenBranchAndPR ? \"branch and PR\" : \"branch\", key);\n\n        BitbucketApi bitbucket = buildBitbucketClient(source, listener);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 50.5354767529243}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = null\n\n    if (shareBuildKeyBetweenBranchAndPR) {\n        String folderName = build.getParent().getParent().getDisplayName()\n        String jobName = build.getParent().getDisplayName()\n        String buildKey = folderName + '/' + jobName + '/' + branch\n    } else {\n        String buildKey = build.getParent().getFullName()\n    }\n\n    return buildKey\n}", "CodeBleu_score": 54.053131128354124}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = getFullName(build)\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = getParent(build).getFullName() + '/' + branch\n    }\n    return buildKey\n}", "CodeBleu_score": 30.715135716617752}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString key = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key += \"/\" + branch;\n    }\n    return key;\n}", "CodeBleu_score": 35.55418530280806}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DescriptorImpl.getServerUrl();\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitIncluded(BitbucketSCMNavigatorContext.WantRepositoryPath.class)) {\n            traits.add(new BitbucketSCMNavigatorContext.WantRepositoryPath());\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitIncluded(BitbucketSCMNavigatorContext.WantBranches.class)) {\n            traits.add(new BitbucketSCMNavigatorContext.WantBranches());\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitIncluded(BitbucketSCMNavigatorContext.WantPRsFromOrigin.class)) {\n            traits.add(new BitbucketSCMNavigatorContext.WantPRsFromOrigin());\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitIncluded(BitbucketSCMNavigatorContext.WantOriginPullRequests.class)) {\n            traits.add(new BitbucketSCMNavigatorContext.WantOriginPullRequests());\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitIncluded(BitbucketSCMNavigatorContext.WantOriginPRsAndForkPRs.class)) {\n            traits.add(new BitbucketSCMNavigatorContext.WantOriginPRsAndForkPRs());\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitIncluded(BitbucketSCMNavigatorContext.WantForkPRs.class)) {\n            traits.add(new BitbucketSCMNavigatorContext.WantForkPRs());\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitIncluded(BitbucketSCMNavigatorContext.WantForkPRsAndForks.class)) {\n            traits.add(new BitbucketSCMNavigatorContext.WantForkPRsAndForks());\n        }\n        if", "CodeBleu_score": 28.135389814792223}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = BitbucketScmHelper.getScmServerUrl(this)\n    }\n\n    if (traits == null) {\n        traits = [new BitbucketSCMSourceTrait(this.credentialsId, this.sshCredentialsId, this.ignoreOnPushNotifications)]\n    }\n\n    if (serverUrl == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator {0} has a null serverUrl after readResolve\", this.id)\n    }\n\n    return this\n}", "CodeBleu_score": 14.959698361422587}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = BitbucketScm.ID;\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTrait[0];\n        log.warn(\"{} did not specify any traits, using legacy defaults: {}\", this, traits);\n    }\n    return this;\n}", "CodeBleu_score": 11.906169523918837}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tdef repo = getBitbucketRepository(name)\n  def logger = getLogger()\n  def fullName = getFullName(repo)\n  if (isMatch) {\n    logger.info(\"Proposing repository ${fullName}\")\n    count++\n  } else {\n    logger.info(\"Ignoring repository ${fullName}\")\n  }\n}", "CodeBleu_score": 43.20101665650746}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tdef repo = getBitbucketRepository(name)\n    def logger = getLogger()\n    if (isMatch) {\n        logger.info(format(\"Proposed repository: %s\", repo.getFullName()))\n        count++\n    } else {\n        logger.info(format(\"Ignored repository: %s\", repo.getFullName()))\n    }\n}", "CodeBleu_score": 50.62662104335125}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tdef repository = getBitbucketRepository(name)\n    def logger = getLogger()\n    def fullName = getFullName(repository)\n    def message = format(isMatch, fullName)\n    logger.info(message)\n    if (isMatch) {\n        count++\n    }\n}", "CodeBleu_score": 40.147457915112234}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tfinal String remote = scm.getUserRemoteConfigs().get(0).getUrl();\n        final String branch = getBranch(rev);\n        if (branch == null) {\n            return rev;\n        }\n        if (commitExists(git, rev.getSha1String())) {\n            return rev;\n        }\n        final String hash = rev.getSha1String();\n        final String refSpec = \"+\" + hash + \":\" + branch;\n        final List<RefSpec> refspecs = from(scm.getRefSpecs())\n                .filter(new Predicate<RefSpec>() {\n                    @Override\n                    public boolean apply(RefSpec input) {\n                        return input.getSource() != null;\n                    }\n                })\n                .toList();\n        if (refspecs.isEmpty()) {\n            return rev;\n        }\n        listener.getLogger().println(\"Fetching \" + refSpec + \" from \" + remote);\n        final URIish uri = new URIish(remote);\n        final List<URIish> uris = Collections.singletonList(uri);\n        final FetchCommand fetch = git.fetch_()\n                .from(uris, refspecs);\n        for (URIish u : uris) {\n            fetch.from(u, refspecs);\n        }\n        fetch.execute();\n        return rev;\n    }", "CodeBleu_score": 43.58149862530388}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getBranches().isEmpty()) {\n            // No branches, so this is a commit hash.\n            String sha1 = rev.getSha1String();\n            if (!commitExists(git, sha1)) {\n                // Commit hash not found locally, so create a RefSpec for it.\n                listener.getLogger().println(\"Commit \" + sha1 + \" not found, creating RefSpec for it.\");\n                RefSpec spec = new RefSpec(\"+refs/heads/*:refs/remotes/origin/*\");\n                scm.getExtensions().add(new PreBuildMerge(new UserMergeOptions(spec, null, null)));\n                // Fetch the commit hash from the remote repository.\n                listener.getLogger().println(\"Fetching commit \" + sha1 + \" from remote repository.\");\n                URIish remote = scm.getUserRemoteConfigs().get(0).getUrl();\n                git.fetch_().from(remote, Collections.singletonList(spec)).execute();\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 38.223702586065606}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tlistener.getLogger().println(\"Checking out revision \" + rev + \"...\");\n\n        List<RefSpec> refSpecs = new ArrayList<>();\n        for (BranchSpec branchSpec : scm.getBranches()) {\n            if (branchSpec.getName().contains(\"**\")) {\n                // This is a pattern, so we can't do anything with it.\n                continue;\n            }\n\n            String branchName = branchSpec.getName();\n            if (branchName.contains(\"*\")) {\n                // This is a pattern, so we can't do anything with it.\n                continue;\n            }\n\n            if (branchName.contains(\"/\")) {\n                // This is a remote branch, so we can't do anything with it.\n                continue;\n            }\n\n            String branchHash = branchName;\n            String branchNameWithoutHash = branchName;\n            if (branchName.contains(\"#\")) {\n                String[] parts = branchName.split(\"#\");\n                if (parts.length != 2) {\n                    // This is a pattern, so we can't do anything with it.\n                    continue;\n                }\n                branchNameWithoutHash = parts[0];\n                branchHash = parts[1];\n            }\n\n            if (!commitExists(git, branchHash)) {\n                listener.getLogger().println(\"Branch \" + branchNameWithoutHash + \" is missing commit \" + branchHash + \".\");\n                refSpecs.add(new RefSpec(\"+\" + branchHash + \":\" + branchNameWithoutHash));\n            }\n        }\n\n        if (!refSpecs.isEmpty()) {\n            listener.getLogger().println(\"Fetching missing commits...\");\n            URIish remoteURI = null;\n            for (RemoteConfig remoteConfig : scm.getRepositories()) {\n                remoteURI = remoteConfig.getURIs().get(0);\n                break;\n            }\n            if (remoteURI == null) {\n                throw new RuntimeException(\"Could not find remote URI.\");\n            }\n            git.fetch_().from(remoteURI, refSpecs).execute();\n        }\n\n        return rev;\n    }", "CodeBleu_score": 36.66268407181544}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 71.89518615646719}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n\n    return result;\n}", "CodeBleu_score": 71.89518615646719}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 80.53896819896102}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = this.getSCMResources();\n\tconst trackedResources = resources.filter(r => r.type !== Status.UNTRACKED && r.type !== Status.IGNORED);\n\tconst untrackedResources = resources.filter(r => r.type === Status.UNTRACKED || r.type === Status.IGNORED);\n\tconst [untracked, tracked] = await Promise.all([\n\t\tthis.untrack(untrackedResources),\n\t\tthis.add(trackedResources)\n\t]);\n\n\treturn { untracked, tracked };\n}", "CodeBleu_score": 38.56679611749676}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tconst selection = resourceStates.filter(s => s.selected);\n    if (selection.length === 0) {\n        return;\n    }\n\n    const groups = groupBy(selection, s => s.resourceUri.toString());\n    for (const [resourceUri, states] of groups) {\n        const repository = this.model.getRepository(resourceUri);\n        if (!repository) {\n            continue;\n        }\n\n        const paths = states.map(s => s.resourceUri.fsPath);\n        try {\n            await repository.add(paths);\n        } catch (err) {\n            vscode.window.showErrorMessage(`Unable to add: ${err.message}`);\n        }\n    }\n}", "CodeBleu_score": 55.38209551662443}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tconst selection = resourceStates.filter(s => s.selected);\n\n\tif (selection.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourcesByRepository = groupBy(selection, s => s.resourceUri);\n\n\tfor (const [, resources] of resourcesByRepository) {\n\t\tconst paths = resources.map(r => r.resourceUri.fsPath);\n\t\ttry {\n\t\t\tawait this.runByRepository(resources[0].resourceUri, async () => {\n\t\t\t\tawait this.repository.add(paths);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (/is not under/.test(err.stderr || '')) {\n\t\t\t\tconst [, relativePath] = /is not under '([^']+)'/.exec(err.stderr)!;\n\t\t\t\tconst uri = resources[0].resourceUri;\n\n\t\t\t\terr.message = localize('not under', \"Failed to add '{0}' to the index as it's not under '{1}'\", relativePath, uri.fsPath);\n\t\t\t}\n\n\t\t\tthrow err;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.86671694320002}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0) {\n        const resource = await this.getSCMResource();\n        if (resource) {\n            this.resourceStates.push(resource);\n        }\n    } else if (!(this.resourceStates[0] instanceof Uri)) {\n        const resource = await this.getSCMResource(this.resourceStates[0]);\n        if (resource) {\n            this.resourceStates.splice(0, 1, resource);\n        }\n    }\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 39.71346790912939}, {"code": "protected async getResourceStates{\n\tconst resourceStates = this.resourceStates;\n    if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n        const resource = await this.getSCMResource();\n        if (resource) {\n            resourceStates.push(resource);\n        }\n    }\n    return resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 48.316311025761465}, {"code": "protected async getResourceStates{\n\tif (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getSCMResource();\n\t\tif (scmResource) {\n\t\t\tresourceStates = [scmResource];\n\t\t}\n\t}\n\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 35.95732070846086}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri ?? window.activeTextEditor?.document.uri;\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(fromSvnUri(uri));\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const repository = this.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 44.30419445124964}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tconst uriToUse = uri ?? this.getActiveDocumentUri();\n    if (!uriToUse) {\n      return undefined;\n    }\n\n    const uriToUseConverted = uriToUse.scheme === 'svn' ? this.fromSvnUri(uriToUse) : uriToUse;\n    if (uriToUseConverted.scheme !== 'file') {\n      return undefined;\n    }\n\n    const repository = this.sourceControlManager.getRepository(uriToUseConverted);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uriToUseConverted);\n  }", "CodeBleu_score": 43.067938759954764}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri ?? window.activeTextEditor?.document.uri;\n\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const sourceControl = sourceControlManager.getRepository(uri);\n\n    if (!sourceControl) {\n      return undefined;\n    }\n\n    return sourceControl.getResourceFromFile(uri);\n  }", "CodeBleu_score": 42.8931688270599}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repository = await this.model.getRemoteRepository(element);\n\n\tif (element.change === SvnPathChangeType.Modified) {\n\t\tthis.openDiff(element.oldPath, element.oldRevision, element.path, element.revision, repository);\n\t} else if (element.change === SvnPathChangeType.Added) {\n\t\tthis.openFileRemote(element.path, element.revision, repository);\n\t}\n}", "CodeBleu_score": 39.214936877158166}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = await this.model.getRemoteRepository(element);\n    if (repo) {\n        if (element.action === 'M') {\n            await this.openDiff(repo, element.oldPath, element.oldRevision, element.path, element.revision);\n        } else if (element.action === 'A') {\n            await this.openFileRemote(repo, element.path, element.revision);\n        }\n    }\n}", "CodeBleu_score": 43.101469217385436}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepository = await this.model.getRemoteRepository(element.path);\n\n    if (element.action === 'M') {\n        this.openDiff(remoteRepository, element.path, element.revision, element.revision);\n    } else if (element.action === 'A') {\n        this.openFileRemote(remoteRepository, element.path, element.revision);\n    }\n}", "CodeBleu_score": 41.36765341396944}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tconst clipboard = await import('clipboardy')\n\tconst window = await import('vscode')\n\n\tif (!clipboard.hasClipboard()) {\n\t\twindow.showErrorMessage('Clipboard not supported')\n\t\treturn\n\t}\n\n\tif (item.commit) {\n\t\tconst message = what === 'message' ? item.commit.message : item.commit.hash\n\t\tclipboard.writeText(message)\n\t}\n}", "CodeBleu_score": 37.316375233291865}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Copying to the clipboard is not supported');\n\t\treturn;\n\t}\n\n\tif (what === 'message') {\n\t\tawait clipboard.writeText(item.message);\n\t} else if (what === 'revision') {\n\t\tawait clipboard.writeText(item.revision);\n\t}\n}", "CodeBleu_score": 27.341272256136783}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!clipboard.writeText) {\n    window.showErrorMessage('Copying to the clipboard is not supported.');\n    return;\n  }\n\n  if (what === 'message') {\n    clipboard.writeText(item.commit.message);\n  } else if (what === 'revision') {\n    clipboard.writeText(item.commit.revision);\n  }\n}", "CodeBleu_score": 29.766737708729195}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().uberClassLoader : getClass().getClassLoader();\n    return this.setClassLoader(classLoader);\n}", "CodeBleu_score": 55.69167767247676}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\treturn jenkinsPluginClassLoader(this)\n}", "CodeBleu_score": 4.491725282123419}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tdef jenkins = Jenkins.getInstanceOrNull()\n  if (jenkins != null) {\n    this.class.classLoader = jenkins.pluginManager.uberClassLoader\n  } else {\n    this.class.classLoader = this.class.classLoader\n  }\n  return this\n}", "CodeBleu_score": 36.84502025564173}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = trimToNull(aliasUrl);\n    this.displayName = isBlank(displayName) ? serverUrl : displayName;\n}", "CodeBleu_score": 44.69586739815109}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName ?: serverUrl\n    this.manageHooks = manageHooks\n    this.credentialsId = manageHooks ? credentialsId : null\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.aliasUrl = trimToNull(aliasUrl)\n}", "CodeBleu_score": 35.85077589943323}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = trimToNull(aliasUrl);\n    this.displayName = isBlank(displayName) ? this.serverUrl : displayName;\n}", "CodeBleu_score": 44.61094119661293}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t// Check permission\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel().includeCurrentValue(credentialsId)\n    }\n\n    // Normalize the server URL\n    serverUrl = normalizeServerUrl(serverUrl)\n\n    // Get the matching credentials\n    return new StandardListBoxModel()\n        .includeEmptyValue()\n        .includeMatchingAs(ACL.SYSTEM,\n            Jenkins.get(),\n            String.class,\n            Collections.singletonList(matcher),\n            serverUrl)\n}", "CodeBleu_score": 41.99583922279588}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new ListBoxModel();\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl);\n    List<StandardUsernamePasswordCredentials> credentials = CredentialsProvider.lookupCredentials(\n        StandardUsernamePasswordCredentials.class,\n        Jenkins.get(),\n        ACL.SYSTEM,\n        Collections.<DomainRequirement>emptyList()\n    );\n\n    ListBoxModel result = new ListBoxModel();\n    result.add(new Option(\"- none -\", \"\", false));\n\n    for (StandardCredentials credential : credentials) {\n        if (credential instanceof StandardUsernamePasswordCredentials) {\n            StandardUsernamePasswordCredentials c = (StandardUsernamePasswordCredentials) credential;\n            if (c.getUsername() != null && c.getPassword() != null) {\n                if (serverUrl.length() > 0) {\n                    if (credential.getId().startsWith(serverUrl)) {\n                        result.add(new Option(credential.getId(), credential.getId(), false));\n                    }\n                } else {\n                    result.add(new Option(credential.getId(), credential.getId(), false));\n                }\n            }\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 43.08642376626615}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t// Check if user has permission to configure credentials\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel().includeCurrentValue(credentialsId)\n    }\n\n    // Normalize the server URL\n    serverUrl = normalizeServerUrl(serverUrl)\n\n    // Get all the credentials that meet the requirements\n    return includeMatchingAs(\n        new StandardListBoxModel().includeEmptyValue(),\n        serverUrl,\n        GiteaAuth.class\n    )\n}", "CodeBleu_score": 34.021871378840515}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getScheme() == null) {\n            return null;\n        }\n        String scheme = uri.getScheme().toLowerCase(Locale.ENGLISH);\n        if (!(scheme.equals(\"http\") || scheme.equals(\"https\"))) {\n            return null;\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            port = scheme.equals(\"http\") ? 80 : 443;\n        }\n        String userInfo = uri.getUserInfo();\n        if (userInfo == null) {\n            userInfo = \"\";\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        String query = uri.getQuery();\n        if (query == null) {\n            query = \"\";\n        }\n        String fragment = uri.getFragment();\n        if (fragment == null) {\n            fragment = \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme);\n        sb.append(\"://\");\n        sb.append(userInfo);\n        sb.append(uri.getHost().toLowerCase(Locale.ENGLISH));\n        if (port != 80 && port != 443) {\n            sb.append(\":\");\n            sb.append(port);\n        }\n        sb.append(path);\n        sb.append(query);\n        sb.append(fragment);\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 43.03482536029829}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getHost() == null) {\n            return null;\n        }\n\n        if (uri.getScheme() == null) {\n            uri = new URI(\"http://\" + serverUrl);\n        }\n\n        String scheme = uri.getScheme().toLowerCase();\n        String host = uri.getHost().toLowerCase();\n        int port = uri.getPort();\n        if (port == -1) {\n            port = scheme.equals(\"https\") ? 443 : 80;\n        }\n\n        return new URI(scheme, uri.getUserInfo(), host, port, uri.getPath(), uri.getQuery(), uri.getFragment()).toASCIIString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.15584554748719}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getHost() == null) {\n            throw new URISyntaxException(serverUrl, \"Hostname is missing\");\n        }\n        if (uri.getScheme() == null) {\n            throw new URISyntaxException(serverUrl, \"Scheme is missing\");\n        }\n        String scheme = uri.getScheme().toLowerCase(Locale.ENGLISH);\n        if (!scheme.equals(\"http\") && !scheme.equals(\"https\")) {\n            throw new URISyntaxException(serverUrl, \"Scheme must be http or https\");\n        }\n        String host = uri.getHost().toLowerCase(Locale.ENGLISH);\n        int port = uri.getPort();\n        if (port == -1) {\n            port = scheme.equals(\"http\") ? 80 : 443;\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        URI normalizedUri = new URI(scheme, uri.getUserInfo(), host, port, path, uri.getQuery(), uri.getFragment());\n        return normalizedUri.toASCIIString();\n    } catch (URISyntaxException e) {\n        LOGGER.log(Level.FINE, \"Invalid server URL: \" + serverUrl, e);\n        return null;\n    }\n}", "CodeBleu_score": 49.1342964265901}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 51.160503456008044}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName, server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 48.8004178359475}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        String url = server.getServerUrl();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(url);\n        } else {\n            model.add(displayName, url);\n        }\n    }\n    return model;\n}", "CodeBleu_score": 52.77321289493546}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n    if (servers != null) {\n        this.servers = new ArrayList<>(servers);\n        this.servers.removeIf(server -> server == null || server.getServerUrl() == null || server.getServerUrl().isEmpty());\n        this.servers = this.servers.stream().distinct().collect(Collectors.toList());\n    } else {\n        this.servers = Collections.emptyList();\n    }\n    save();\n}", "CodeBleu_score": 33.434668194576965}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null) {\n        servers = new ArrayList<>();\n    }\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        throw new AccessDeniedException(Jenkins.ADMINISTER, \"You must have admin rights to update the list of Gitea servers.\");\n    }\n    if (servers.contains(null)) {\n        throw new IllegalArgumentException(\"The list of Gitea servers must not contain null entries.\");\n    }\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server.getServerUrl() == null) {\n            continue;\n        }\n        if (server.getServerUrl().trim().isEmpty()) {\n            continue;\n        }\n        if (newServers.contains(server)) {\n            continue;\n        }\n        newServers.add(server);\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 35.754476053727096}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException(Jenkins.ADMINISTER);\n        }\n        if (servers != null) {\n            servers.removeAll(Collections.singleton(null));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"\", null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, \"\")));\n            servers.removeAll(Collections.singleton(new GiteaServer(null, null)));\n            servers.removeAll(Collections.singleton(new GiteaServer(\"", "CodeBleu_score": 15.465518583364391}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    List<GiteaServer> eps = new ArrayList<>(Util.fixNull(servers));\n    for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        servers = eps;\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 56.793309137396996}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl = normalizeServerUrl(serverUrl);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    boolean removed = servers.removeIf(server -> serverUrl.equals(server.getServerUrl()));\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 34.85566545462061}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (servers != null && servers.removeIf(s -> serverUrl.equals(normalizeServerUrl(s.getServerUrl())))) {\n        save();\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 26.02290326657542}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el);\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 42.58979374647094}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      if (!el.getKind().isField()) {\n        throw new ProcessingException(el, \"%s annotation must be on a field\", annotation.getSimpleName());\n      }\n\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el);\n\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 49.820126185467}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      attributes.put(\"type\", asType(el));\n      descriptorElements.add(new ConfigElement(attributes));\n    }\n  }", "CodeBleu_score": 35.37757457932267}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getCanonicalName();\n        if (qualifiedName.replace('$', '.').equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 38.89904446520529}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString()\n                .replace('$', '.')\n                .equals(annotationClass.getCanonicalName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.680188017144275}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getCanonicalName();\n        if (qualifiedName.equals(targetName)\n                || qualifiedName.replace('$', '.').equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 36.77704728475245}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\"employee\": employee}\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"in\", [\"Open\", \"Approved\", \"Rejected\"]),\n                \"docstatus\": 1,\n                \"approver\": approver_id,\n            }\n        )\n    else:\n        filters.update({\"status\": (\"!=\", \"Cancelled\")})\n    return filters\n\n", "CodeBleu_score": 23.943973843927015}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"not in\", [\"Rejected\", \"Cancelled\"]],\n    }\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"approver_id\"] = approver_id\n        filters[\"owner\"] = (\"!=\", employee)\n    else:\n        filters[\"owner\"] = employee\n    return filters\n\n", "CodeBleu_score": 27.13516855674587}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\n                    \"in\",\n                    get_allowed_states_for_workflow(\n                        get_workflow(\"Leave Application\"), approver_id\n                    ),\n                ]\n                if approver_id\n                else \"Open\",\n                \"owner\": [\"!=\", employee],\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 27.105290668903965}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\timport datetime\n    from frappe.utils import getdate\n    from frappe.utils import add_days\n    from frappe.utils import add_to_date\n    from frappe.utils import get_last_day\n    from frappe.utils import get_first_day\n    from frappe.utils import get_user_date_format\n    from frappe.utils import get_user_date\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime_str\n    from frappe.utils import get_datetime_str\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get_datetime\n    from frappe.utils import get", "CodeBleu_score": 11.500474943062178}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tleave_balance_map = {}\n    date = getdate(nowdate())\n    leave_details = get_leave_details(employee)\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_days\": leave_detail.total_leaves_allocated,\n            \"balance_days\": leave_detail.total_leaves_allocated - leave_detail.total_leaves_taken,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 36.793217186274596}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\timport frappe\n    from frappe.utils import getdate\n\n    today = getdate()\n    leave_details = get_leave_details(employee)\n\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"balance_leaves\": leave_detail.total_leaves_allocated - leave_detail.total_leaves_taken,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 39.917398457110664}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if holiday_list:\n        holidays = frappe.db.sql(\n            \"\"\"\n            SELECT\n                name,\n                description\n            FROM `tabHoliday`\n            WHERE\n                parent=%(holiday_list)s\n                AND holiday_date >= %(start_date)s\n                AND holiday_date <= %(end_date)s\n                AND weekly_off IS NULL\n            ORDER BY\n                holiday_date\n            \"\"\",\n            values={\n                \"holiday_list\": holiday_list,\n                \"start_date\": self.start_date,\n                \"end_date\": self.end_date,\n            },\n            as_dict=True,\n        )\n        for holiday in holidays:\n            holiday.description = strip_html(holiday.description)\n        return holidays\n    return []\n\n\n\n\n", "CodeBleu_score": 29.866763042412053}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n            SELECT\n                hd.holiday_date,\n                hd.description\n            FROM `tabHoliday` h\n            LEFT JOIN `tabHoliday Date` hd ON hd.parent = h.name\n            WHERE\n                h.holiday_list = %(holiday_list)s\n                AND hd.weekly_off IS NULL\n            ORDER BY hd.holiday_date\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday.description = frappe.utils.strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 33.583648405438005}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = frappe.db.get_value(\n        \"Employee\", employee, \"holiday_list\"\n    )\n    if holiday_list is None:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name,\n            description\n        FROM `tabHoliday`\n        WHERE\n            parent=%(holiday_list)s\n            AND weekly_off=0\n        ORDER BY\n            date ASC\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday.description = frappe.utils.strip_html(\n            holiday.description\n        )\n\n    return holidays", "CodeBleu_score": 29.926929717526683}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\tif not frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminder_in_advance\"):\n        return\n\n    frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n    if frequency == \"Weekly\":\n        send_advance_holiday_reminders(frequency)\n\n", "CodeBleu_score": 48.10298304950768}, {"code": "def send_reminders_in_advance_weekly()\n\tif frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminder_in_advance\"):\n        frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n        if frequency == \"Weekly\":\n            send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 46.99977467768153}, {"code": "def send_reminders_in_advance_weekly()\n\thr_settings = frappe.get_doc(\"HR Settings\")\n    if hr_settings.send_holiday_reminder_in_advance and hr_settings.holiday_reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders(frequency=\"Weekly\")\n\n", "CodeBleu_score": 19.185019339863317}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\ttotal_score = 0\n    for rating in self.self_rating:\n        total_score += rating.rating * rating.percentage_weightage\n    self.self_appraisal_score = round(total_score, self.precision)\n\n", "CodeBleu_score": 23.062553322515143}, {"code": "def calculate_self_appraisal_score(self)\n\tself.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_rating.score = self_rating.rating * 5 * self_rating.percentage_weightage\n        self.self_appraisal_score += self_rating.score\n    self.self_appraisal_score = round(self.self_appraisal_score, 2)\n\n", "CodeBleu_score": 20.128772654929534}, {"code": "def calculate_self_appraisal_score(self)\n\tself.self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self.self_appraisal_score += entry.rating * entry.percentage_weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 29.70850692626638}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_cached_doc(\n        \"Appraisal Cycle\", self.appraisal_cycle\n    )\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = frappe._dict()\n        data.update(frappe.get_cached_doc(\"Employee\", self.employee).as_dict())\n        data.update(self.as_dict())\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        if formula:\n            self.final_score = frappe.safe_eval(formula, None, data)\n        else:\n            frappe.throw(\n                _(\"The final score formula is empty. Please set the formula in the appraisal cycle document.\")\n            )\n    else:\n        self.final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n    self.final_score = flt(self.final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 41.660084558926975}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_cached_doc(\n        \"Appraisal Cycle\", self.appraisal_cycle\n    )\n\n    if appraisal_cycle_doc.calculate_final_score:\n        data = {}\n        data.update(frappe.safe_eval(appraisal_cycle_doc.formula, None, data))\n        data.update(frappe.safe_eval(self.formula, None, data))\n\n        # sanitize the formula\n        formula = sanitize_expression(appraisal_cycle_doc.formula)\n\n        # evaluate the formula\n        final_score = frappe.safe_eval(formula, None, data)\n\n        # set the final score\n        self.final_score = flt(final_score, self.precision(\"final_score\"))\n    else:\n        # calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        self.final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 35.541984808373996}, {"code": "def calculate_final_score(self)\n\t# Get the appraisal cycle document.\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # Check if the final score should be calculated based on a formula.\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        # Get the formula.\n        formula = appraisal_cycle_doc.final_score_formula\n\n        # Sanitize the formula.\n        formula = sanitize_expression(formula)\n\n        # Get the data.\n        data = {\n            \"employee\": frappe.get_cached_doc(\"Employee\", self.employee),\n            \"appraisal_cycle\": appraisal_cycle_doc,\n            \"appraisal\": self,\n        }\n\n        # Evaluate the formula.\n        final_score = frappe.safe_eval(formula, None, data)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score.\n        final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n\n    # Set the final score with the appropriate precision.\n    self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 41.1075133195923}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif self.status == \"On Leave\" and not self.leave_application:\n        frappe.throw(_(\"Attendance can not be marked as On Leave without Leave Application\"))\n\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance can not be marked for future dates\"))\n\n    if getdate(self.attendance_date) < getdate(self.employee.date_of_joining):\n        frappe.throw(_(\"Attendance can not be marked before the employee's joining date\"))\n\n", "CodeBleu_score": 33.388290583933184}, {"code": "def validate_attendance_date(self)\n\tif self.status != \"On Leave\":\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(_(\"Attendance can not be marked for future dates\"))\n        if getdate(self.attendance_date) < getdate(self.employee):\n            frappe.throw(_(\"Attendance can not be marked before employee's joining date\"))", "CodeBleu_score": 27.53248944420524}, {"code": "def validate_attendance_date(self)\n\tif getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance Date cannot be future date\"))\n    if getdate(self.attendance_date) < getdate(self.employee):\n        frappe.throw(_(\"Attendance Date cannot be earlier than the employee's joining date\"))\n\n", "CodeBleu_score": 20.851811098201704}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\"Duplicate attendance record for employee {0} on date {1} already exists. See {2}\").format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", duplicate),\n            )\n        )\n\n", "CodeBleu_score": 46.6276801526848}, {"code": "def validate_duplicate_record(self)\n\tduplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        frappe.throw(\n            _(\n                \"Attendance for Employee {0} on {1} already exists at {2}\".format(\n                    frappe.bold(self.employee),\n                    frappe.bold(format_date(self.attendance_date)),\n                    get_link_to_form(\"Attendance\", duplicate_attendance_record),\n                )\n            )\n        )", "CodeBleu_score": 38.062794653373466}, {"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} on {1} already exists. <br> <a href='/app/attendance/{2}'>Click here to view</a>\"\n            ).format(self.employee, format_date(self.attendance_date), duplicate),\n            frappe.DuplicateEntryError,\n        )\n\n", "CodeBleu_score": 37.288269982402596}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\tif not self.enabled:\n        return\n\n    if not self.message:\n        frappe.throw(_(\"Please add a message to be sent\"))\n\n    if not self.recipients:\n        frappe.throw(_(\"Please add recipients to send the summary to\"))\n\n    emails = get_user_emails_from_group(self)\n\n    if not emails:\n        frappe.throw(_(\"No users in the group\"))\n\n    message_details = self.get_message_details()\n\n    # send email\n    frappe.sendmail(\n        recipients=emails,\n        sender=frappe.session.user,\n        subject=_(\"Daily Work Summary for {0}\").format(\n            global_date_format(get_datetime_str(self.creation))\n        ),\n        template=\"daily_work_summary\",\n        args=message_details,\n        header=_(\"Daily Work Summary\"),\n        delayed=False,\n    )\n\n    # update status\n    self.db_set(\"status\", \"Sent\")\n    self.db_set(\"email_sent_to\", \", \".join(emails))\n\n    frappe.msgprint(_(\"Daily Work Summary sent\"))\n\n", "CodeBleu_score": 43.77847519646092}, {"code": "def send_summary(self)\n\t# get message details\n    message_details = self.get_message_details()\n    # get email addresses of users in the specified group\n    email_addresses = get_user_emails_from_group(self.daily_work_summary_group)\n    # send email\n    frappe.sendmail(\n        recipients=email_addresses,\n        subject=message_details.get(\"title\"),\n        template=\"daily_work_summary\",\n        args=message_details,\n        header=[\"Daily Work Summary\", \"orange\"],\n        delayed=False,\n    )\n    # update status\n    self.db_set(\"status\", \"Sent\")\n    self.reload()\n\n", "CodeBleu_score": 37.77517392765484}, {"code": "def send_summary(self)\n\tif self.status == \"Sent\":\n        return\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Please select a Daily Work Summary Group\"))\n\n    if not frappe.utils.get_url():\n        frappe.throw(\n            _(\n                \"Please set the Base URL in Setup > Settings > Website Settings and reload.\"\n            )\n        )\n\n    if not frappe.utils.cint(frappe.db.get_single_value(\"Daily Work Summary\", \"enabled\")):\n        return\n\n    if not self.message:\n        frappe.throw(_(\"Please enter the message\"))\n\n    if self.schedule_send_time and get_datetime(self.schedule_send_time) > now_datetime():\n        return\n\n    message_details = self.get_message_details()\n    email_ids = self.get_user_emails_from_group()\n\n    if not email_ids:\n        return\n\n    frappe.sendmail(\n        recipients=email_ids,\n        sender=frappe.session.user,\n        subject=message_details.get(\"title\"),\n        template=\"daily_work_summary\",\n        args=message_details,\n        header=[\"Daily Work Summary\", \"blue\"],\n        delayed=True,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    self.db_set(\"email_sent_to\", \", \".join(email_ids))\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 43.90582342274539}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t# Check for duplicate interview records for a job applicant in the same interview round\n    filters = {'job_applicant': self.job_applicant, 'interview_round': self.interview_round}\n    if self.name:\n        filters['name'] = ('!=', self.name)\n    duplicate_interview = frappe.db.exists('Interview', filters)\n    if duplicate_interview:\n        # Raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round, including a link to the existing interview record and the job applicant's information\n        job_applicant = frappe.get_doc('Job Applicant', self.job_applicant)\n        frappe.throw(_('Job Applicant {0} has already been scheduled for interview round {1}.').format(\n            get_link_to_form('Job Applicant', self.job_applicant),\n            frappe.bold(self.interview_round)\n        ), title=_('Duplicate Interview Record'))\n\n\n\n\n", "CodeBleu_score": 46.42248136412172}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant and self.interview_round:\n        filters = {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"name\": (\"!=\", self.name)\n        }\n        duplicate_interview = frappe.db.exists(\"Interview\", filters)\n        if duplicate_interview:\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            frappe.throw(\n                _(\"Job Applicant {0} is already scheduled for interview in {1}.\").format(\n                    get_link_to_form(\"Job Applicant\", self.job_applicant),\n                    frappe.bold(self.interview_round)\n                ) + \"<br>\" + _(\"Please check {0}\").format(\n                    get_link_to_form(\"Interview\", duplicate_interview)\n                ),\n                title=_(\"Duplicate Interview Record\")\n            )\n\n", "CodeBleu_score": 46.357854676059304}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant:\n        applicant_id = frappe.db.get_value('Job Applicant', self.job_applicant, 'name')\n        job_applicant = frappe.get_doc('Job Applicant', self.job_applicant)\n        applicant_name = job_applicant.applicant_name\n        job_opening = frappe.get_doc('Job Opening', self.job_opening)\n        job_opening_name = job_opening.job_title\n        interview_round = frappe.get_doc('Interview Round', self.interview_round)\n        interview_round_name = interview_round.designation\n        existing_interview = frappe.db.sql(\"\"\"\n            SELECT\n                name\n            FROM\n                `tabInterview`\n            WHERE\n                job_applicant = %(job_applicant)s\n                AND interview_round = %(interview_round)s\n                AND docstatus != 2\n        \"\"\", {\n            'job_applicant': self.job_applicant,\n            'interview_round': self.interview_round\n        }, as_dict=True)\n\n        if existing_interview:\n            existing_interview_name = existing_interview[0].name\n            frappe.throw(\n                _('Job Applicant {0} is already scheduled for interview for {1} in the {2} round.').format(\n                    frappe.bold(applicant_name),\n                    frappe.bold(job_opening_name),\n                    frappe.bold(interview_round_name)\n                ) + '<br>' + _('Please check the existing interview record {0}').format(\n                    get_link_to_form('Interview', existing_interview_name)\n                ),\n                title=_('Duplicate Interview')\n            )", "CodeBleu_score": 39.2389878372566}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.5598331525852}, {"code": "def calculate_average_rating(self)\n\ttotal = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            num_assessments += 1\n    if num_assessments:\n        self.average_rating = total / num_assessments\n    else:\n        self.average_rating = 0", "CodeBleu_score": 25.124091322787812}, {"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0", "CodeBleu_score": 24.220811863029258}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\tinterview = frappe.new_doc('Interview')\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append('interview_details', {\n                'interviewer': interviewer\n            })\n    return interview\n", "CodeBleu_score": 40.922280661575805}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interviewers = []\n        for interviewer in doc.interviewers:\n            interview.append(\"interviewers\", interviewer)\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 45.660368636622515}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interviewer_name\": interviewer.interviewer_name,\n                \"interview_date\": interviewer.interview_date,\n                \"interview_time\": interviewer.interview_time,\n                \"interview_mode\": interviewer.interview_mode,\n                \"interview_location\": interviewer.interview_location,\n                \"interview_details\": interviewer.interview_details\n            })\n    return interview\n\n", "CodeBleu_score": 36.85412024671698}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\treturn frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and docstatus = 1 and (date_of_offer between %s and %s)\"\"\", (self.designation, self.company, from_date, to_date), as_dict=True)\n\n", "CodeBleu_score": 27.25252062585588}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND docstatus = 1 AND date_of_offer BETWEEN %s AND %s\"\"\", (self.designation, self.company, from_date, to_date), as_dict=True)\n    return job_offers\n\n\n\n\n", "CodeBleu_score": 34.40973012905392}, {"code": "def get_job_offer(self, from_date, to_date)\n\treturn frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND status = 1 AND creation BETWEEN %s AND %s\"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n\n\n\n\n", "CodeBleu_score": 27.63323980289184}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company:\n        if department:\n            job_offers = frappe.get_list(\n                \"Job Offer\",\n                fields=[\"name\", \"docstatus\"],\n                filters={\"company\": company, \"department\": department},\n            )\n        else:\n            job_offers = frappe.get_list(\n                \"Job Offer\",\n                fields=[\"name\", \"docstatus\"],\n                filters={\"company\": company},\n            )\n    else:\n        job_offers = frappe.get_list(\n            \"Job Offer\", fields=[\"name\", \"docstatus\"], filters={}\n        )\n\n    total_job_offers = len(job_offers)\n    accepted_job_offers = 0\n\n    for job_offer in job_offers:\n        if job_offer.docstatus == 1:\n            accepted_job_offers += 1\n\n    if total_job_offers == 0:\n        return 0\n\n    acceptance_rate = round((accepted_job_offers / total_job_offers) * 100, 2)\n    return {\"value\": acceptance_rate, \"fieldtype\": \"Percent\"}\n\n", "CodeBleu_score": 29.85875114314484}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company:\n        if department:\n            job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND department = %s\"\"\", (company, department), as_dict=True)\n            accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND department = %s AND status = \"Accepted\"\"\", (company, department), as_dict=True)\n        else:\n            job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s\"\"\", (company), as_dict=True)\n            accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND status = \"Accepted\"\"\", (company), as_dict=True)\n    else:\n        job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1\"\"\", as_dict=True)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = \"Accepted\"\"\", as_dict=True)\n\n    if job_offers[0].get(\"COUNT(name)\") > 0:\n        acceptance_rate = accepted_job_offers[0].get(\"COUNT(name)\") / job_offers[0].get(\"COUNT(name)\")\n        return acceptance_rate * 100, \"Percent\"\n    else:\n        return 0, \"Percent\"\n", "CodeBleu_score": 26.780713070280427}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t# get all job offers with docstatus 1\n    job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1})\n    # get the count of job offers with docstatus 1\n    count_of_job_offers = len(job_offers)\n    # get the count of accepted job offers\n    accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted'})\n    # calculate the offer acceptance rate\n    offer_acceptance_rate = accepted_job_offers / count_of_job_offers\n    # return the offer acceptance rate as a percentage\n    return {\n        \"value\": offer_acceptance_rate,\n        \"fieldtype\": \"Percent\"\n    }", "CodeBleu_score": 32.4188301196986}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Result<CompanyStaff> findResult = findById(companyStaffForUpdateDto.getId());\n\t\tif (findResult.isFailure()) {\n\t\t\t\treturn findResult;\n\t\t}\n\n\t\tfinal CompanyStaff companyStaff = findResult.getValue();\n\n\t\tfinal Result passwordResult = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (passwordResult.isFailure()) {\n\t\t\t\treturn passwordResult;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\n\t\tfinal Result saveResult = save(companyStaff);\n\t\tif (saveResult.isFailure()) {\n\t\t\t\treturn saveResult;\n\t\t}\n\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n}", "CodeBleu_score": 47.74034398131235}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Result result = findById(companyStaffForUpdateDto.getId());\n\t\tif (result.isFailure()) {\n\t\t\t\treturn result;\n\t\t}\n\t\tfinal CompanyStaff companyStaff = (CompanyStaff) result.getValue();\n\t\tfinal Result passwordMatchResult = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (passwordMatchResult.isFailure()) {\n\t\t\t\treturn passwordMatchResult;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\treturn save(companyStaff);\n\t}", "CodeBleu_score": 49.76273112438311}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Result<CompanyStaff> findResult = findById(companyStaffForUpdateDto.getId());\n\t\tif (!findResult.isSuccess()) {\n\t\t\t\treturn findResult;\n\t\t}\n\n\t\tfinal CompanyStaff companyStaff = findResult.getValue();\n\t\tfinal Result passwordResult = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (!passwordResult.isSuccess()) {\n\t\t\t\treturn passwordResult;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\tsave(companyStaff);\n\t\treturn new SuccessResult();\n\t}", "CodeBleu_score": 49.12400435873362}]}
