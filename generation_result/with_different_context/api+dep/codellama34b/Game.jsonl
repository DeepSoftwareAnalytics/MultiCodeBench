{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\tvar dllDirectory = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(dllDirectory, dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllPath);\n    } else {\n        Posix.LoadDll(dllPath);\n    }\n}", "CodeBleu_score": 40.898123716453874}, {"code": "public static void PreloadDll(string dllName){\n\tvar directedDllDir = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(directedDllDir, dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllPath);\n    } else {\n        Posix.LoadDll(dllPath);\n    }\n}", "CodeBleu_score": 40.77457518069954}, {"code": "public static void PreloadDll(string dllName){\n\tvar dllDir = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(dllDir, dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllPath);\n    } else {\n        Posix.LoadDll(dllPath);\n    }\n}", "CodeBleu_score": 48.565351576704415}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (assetsFileListHash.Contains(reader.FullPath)) {\n        Logger.Info(\"Skipping {0}, already loaded\", reader.FullPath);\n        return;\n    }\n    CheckStrippedVersion(reader, unityVersion);\n    var assetsFile = new SerializedFile(reader, originalPath);\n    assetsFileListHash.Add(reader.FullPath);\n    assetsFileList.Add(assetsFile);\n}", "CodeBleu_score": 29.25558464060684}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (assetsFileListHash.Contains(reader.FullPath))\n    {\n        Logger.Info(\"Skipping duplicate file {0}\", reader.FullPath);\n        return;\n    }\n    try\n    {\n        var assetsFile = new SerializedFile(reader, originalPath, this);\n        if (string.IsNullOrEmpty(unityVersion))\n        {\n            CheckStrippedVersion(assetsFile);\n        }\n        else\n        {\n            assetsFile.SetVersion(unityVersion);\n        }\n        assetsFileListHash.Add(reader.FullPath, assetsFile);\n        assetsFileList.Add(assetsFile);\n    }\n    catch (Exception e)\n    {\n        Logger.Error(e, \"Error while reading file {0}\", reader.FullPath);\n    }\n}", "CodeBleu_score": 52.00109894346136}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (assetsFileListHash.Contains(originalPath)) {\n        Logger.Info(string.Format(\"Skipped loading file from memory {0}\", originalPath));\n        return;\n    }\n    Logger.Info(string.Format(\"Loading file from memory {0}\", originalPath));\n    var assetsFile = new SerializedFile(reader, originalPath);\n    if (assetsFileList.Count == 0 && !string.IsNullOrEmpty(unityVersion)) {\n        assetsFile.SetVersion(unityVersion);\n    }\n    if (assetsFileList.Count == 0) {\n        CheckStrippedVersion(assetsFile);\n    }\n    assetsFileListHash.Add(originalPath, assetsFile);\n    assetsFileList.Add(assetsFile);\n}", "CodeBleu_score": 46.35121603603507}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\tstring[] splitPath = path.Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n    string name = splitPath[splitPath.Length - 1];\n    IEnumerable<ImportedFrame> frames = FindChilds(name);\n    foreach (ImportedFrame frame in frames) {\n        if (frame.Path == path) {\n            return frame;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 57.78603445455133}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tif (path == this.Path) return this;\n    if (path.StartsWith(this.Path)) {\n        foreach (var child in this.Children) {\n            var result = child.FindFrameByPath(path);\n            if (result != null) return result;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 54.173274292551845}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tif (path == \"\")\n\t\treturn this;\n\telse {\n\t\tvar name = path.Path.Substring(0, path.Path.IndexOf('/'));\n\t\tvar child = children.Find(c => c.Name == name);\n\t\tif (child == null)\n\t\t\treturn null;\n\t\telse\n\t\t\treturn child.FindFrameByPath(path.Path.Substring(path.Path.IndexOf('/') + 1));\n\t}\n}", "CodeBleu_score": 48.05446603885768}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\tvar memoryStream = new MemoryStream();\n\treader.BaseStream.CopyTo(memoryStream);\n\tmemoryStream.Seek(0, SeekOrigin.Begin);\n\tvar decompressedStream = new MemoryStream();\n\tusing (var decompressionStream = new GZipStream(memoryStream, CompressionMode.Decompress)) {\n\t\tdecompressionStream.CopyTo(decompressedStream);\n\t}\n\tdecompressedStream.Seek(0, SeekOrigin.Begin);\n\treturn new FileReader(decompressedStream);\n}", "CodeBleu_score": 41.188085362991366}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tusing (var compressedStream = new MemoryStream(reader.Data))\n\tusing (var zipStream = new GZipStream(compressedStream, CompressionMode.Decompress))\n\tusing (var resultStream = new MemoryStream()) {\n\t\tzipStream.CopyTo(resultStream);\n\t\treturn new FileReader(resultStream.ToArray());\n\t}\n}", "CodeBleu_score": 28.536741658127596}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tMemoryStream output = new MemoryStream();\n\tusing (GZipStream stream = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n\t\tstream.CopyTo(output);\n\t}\n\treturn new FileReader(output.ToArray());\n}", "CodeBleu_score": 32.9569212879459}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tParseStrings(switchForms, commandStrings, null);\n\t\t}", "CodeBleu_score": 16.94860329922513}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tParseStrings(switchForms, commandStrings, null);\n\t\t}", "CodeBleu_score": 16.94860329922513}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tParseStrings(switchForms, commandStrings, null);\n\t\t}", "CodeBleu_score": 16.94860329922513}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t//Extract and set properties such as image data, width, height, texture format, version, platform, and output size from a given Texture2D object.\n    this.m_Texture2D = m_Texture2D;\n    this.m_Texture2D.GetRawTextureData();\n    this.m_Texture2D.width = m_Texture2D.width;\n    this.m_Texture2D.height = m_Texture2D.height;\n    this.m_Texture2D.format = m_Texture2D.format;\n    this.m_Texture2D.version = m_Texture2D.version;\n    this.m_Texture2D.platform = m_Texture2D.platform;\n    this.m_Texture2D.m_StreamData.size = m_Texture2D.m_StreamData.size;\n}", "CodeBleu_score": 31.692702619979563}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\tm_Texture2D.imageContents.CopyTo(imageContents);\n    m_Texture2D.m_Width = m_Texture2D.imageContents.Length;\n    m_Texture2D.m_Height = 1;\n    m_Texture2D.m_TextureFormat = 1;\n    m_Texture2D.m_MipMap = false;\n    m_Texture2D.m_IsReadable = false;\n    m_Texture2D.m_ReadAllowed = false;\n    m_Texture2D.m_StreamingMipmaps = false;\n    m_Texture2D.m_StreamingMipmapsPriority = 0;\n    m_Texture2D.m_ImageCount = 1;\n    m_Texture2D.m_TextureDimension = 1;\n    m_Texture2D.m_TextureSettings.m_FilterMode = 0;\n    m_Texture2D.m_TextureSettings.m_Aniso = 1;\n    m_Texture2D.m_TextureSettings.m_MipBias = 0;\n    m_Texture2D.m_TextureSettings.m_WrapMode = 0;\n    m_Texture2D.m_StreamData = new StreamingInfo();\n    m_Texture2D.m_StreamData.path = \"\";\n    m_Texture2D.m_StreamData.offset = 0;\n    m_Texture2D.m_StreamData.size = 0;\n    m_Texture2D.m_Name = \"\";\n    m_Texture2D.m_ForcedFallbackFormat = -1;\n    m_Texture2D.m_DownscaleFallback = false;\n    m_Texture2D.m_IsPreProcessed = false;\n    m_Texture2D.m_IgnoreMasterTextureLimit = false;\n    m_Texture2D.m_ReadAllowed = false;\n    m_Texture2D.m_AssetBundleName = \"\";\n    m_Texture2D.m_ContainerObjects = new List<PPtr<Object>>();\n    m_Texture2D.m_ContainerObjects.Capacity = 0;\n    m_Texture2D", "CodeBleu_score": 20.657853904753427}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_ImageData = m_Texture2D.imageContents;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.platform;\n\tthis.m_OutputSize = m_Texture2D.outputSize;\n}", "CodeBleu_score": 33.832362639258044}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\tint count = sp.arraySize;\n\tfor (int i = 0; i < count; i++) {\n\t\tSerializedProperty item = sp.GetArrayElementAtIndex(i);\n\t\tif (item.FindPropertyRelative(\"Active\").boolValue) {\n\t\t\tresult.Add(item.FindPropertyRelative(\"Name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t} else {\n\t\treturn string.Join(\", \", result.ToArray());\n\t}\n}", "CodeBleu_score": 38.547581829298366}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        if (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"active\").boolValue) {\n            result.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue);\n        }\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    } else {\n        return string.Join(\", \", result.ToArray());\n    }\n}", "CodeBleu_score": 40.539535292929976}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty active = sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"active\");\n\t\tif (active.boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\telse {\n\t\ts_Sb.Clear();\n\t\ts_Sb.Append(result[0]);\n\t\tfor (int i = 1; i < result.Count; i++) {\n\t\t\ts_Sb.Append(\", \");\n\t\t\ts_Sb.Append(result[i]);\n\t\t}\n\t\treturn s_Sb.ToString();\n\t}\n}", "CodeBleu_score": 47.58141765352624}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\tstring name = prop.displayName;\n\tif (s_ActiveNames.Contains(name)) {\n\t\tmenu.AddItem(new GUIContent(name), false, () => {\n\t\t\tif (add) {\n\t\t\t\ts_ActiveNames.Remove(name);\n\t\t\t} else {\n\t\t\t\ts_ActiveNames.Add(name);\n\t\t\t}\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t} else if (add) {\n\t\tmenu.AddItem(new GUIContent(name), false, () => {\n\t\t\ts_ActiveNames.Add(name);\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 24.11865622161328}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\tif (prop.CanAdd(sp) && !s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, () => {\n\t\t\tif (add) {\n\t\t\t\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t} else {\n\t\t\t\tint index = s_ActiveNames.IndexOf(prop.name);\n\t\t\t\tsp.DeleteArrayElementAtIndex(index);\n\t\t\t}\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 42.68666812568982}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\tif (add && !s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\ts_ActiveNames.Add(prop.name);\n\t\t\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"m_Name\").stringValue = prop.name;\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t} else if (!add && s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\ts_ActiveNames.Remove(prop.name);\n\t\t\tsp.DeleteArrayElementAtIndex(s_ActiveNames.IndexOf(prop.name));\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 39.75995419569827}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tfloat x = sp.FindPropertyRelative(\"x\").floatValue;\n\tfloat y = sp.FindPropertyRelative(\"y\").floatValue;\n\tfloat z = sp.FindPropertyRelative(\"z\").floatValue;\n\tbool multipleValues = !Mathf.Approximately(x, y) || !Mathf.Approximately(x, z) || !Mathf.Approximately(y, z);\n\tbool showVector3 = showXyz || multipleValues;\n\tif (showVector3) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PropertyField(sp, GUIContent.none, GUILayout.Width(EditorGUIUtility.labelWidth));\n\t\tEditorGUI.BeginChangeCheck();\n\t\tshowXyz = GUILayout.Toggle(showXyz, \"xyz\", EditorStyles.miniButton, GUILayout.Width(30));\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.FindPropertyRelative(\"showXyz\").boolValue = showXyz;\n\t\t}\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\tif (showVector3) {\n\t\tEditorGUILayout.PropertyField(sp);\n\t} else {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PropertyField(sp, GUIContent.none, GUILayout.Width(EditorGUIUtility.labelWidth));\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), GUIContent.none);\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\treturn showXyz;\n}", "CodeBleu_score": 44.060686007617115}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tbool changed = false;\n    EditorGUI.BeginChangeCheck();\n    if (showXyz) {\n        EditorGUILayout.BeginHorizontal();\n        EditorGUILayout.PropertyField(sp, GUIContent.none, GUILayout.Width(EditorGUIUtility.labelWidth));\n        if (GUILayout.Toggle(sp.propertyType == SerializedPropertyType.Float, \"Single\", EditorStyles.miniButtonLeft, GUILayout.Width(40f)) && sp.propertyType == SerializedPropertyType.Vector3) {\n            sp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n            sp.propertyType = SerializedPropertyType.Float;\n            changed = true;\n        }\n        else if (GUILayout.Toggle(sp.propertyType == SerializedPropertyType.Vector3, \"Xyz\", EditorStyles.miniButtonRight, GUILayout.Width(40f)) && sp.propertyType == SerializedPropertyType.Float) {\n            sp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n            sp.propertyType = SerializedPropertyType.Vector3;\n            changed = true;\n        }\n        EditorGUILayout.EndHorizontal();\n    }\n    else {\n        EditorGUILayout.PropertyField(sp, GUIContent.none, GUILayout.Width(EditorGUIUtility.labelWidth));\n    }\n    if (EditorGUI.EndChangeCheck()) {\n        changed = true;\n    }\n    if (sp.propertyType == SerializedPropertyType.Vector3) {\n        if (Mathf.Approximately(sp.vector3Value.x, sp.vector3Value.y) && Mathf.Approximately(sp.vector3Value.x, sp.vector3Value.z)) {\n            sp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n            sp.propertyType = SerializedPropertyType.Float;\n            changed = true;\n        }\n        else if (!Mathf.Approximately(sp", "CodeBleu_score": 35.48456248322229}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUI.BeginChangeCheck();\n\tEditorGUILayout.PropertyField(sp);\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tif (showXyz) {\n\t\t\tif (Mathf.Approximately(sp.vector3Value.x, sp.vector3Value.y) && Mathf.Approximately(sp.vector3Value.x, sp.vector3Value.z)) {\n\t\t\t\tshowXyz = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!Mathf.Approximately(sp.vector3Value.x, sp.vector3Value.y) || !Mathf.Approximately(sp.vector3Value.x, sp.vector3Value.z)) {\n\t\t\t\tshowXyz = true;\n\t\t\t}\n\t\t}\n\t}\n\tshowXyz = GUILayout.Toggle(showXyz, \"xyz\", GUILayout.Width(30));\n\tEditorGUILayout.EndHorizontal();\n\treturn showXyz;\n}", "CodeBleu_score": 32.85596623958036}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t// If the base material is null, return null\n\tif (baseMat == null) {\n\t\tDebug.LogError(\"Base material cannot be null!\");\n\t\treturn null;\n\t}\n\t\n\t// If the texture is null, set it to the default texture\n\tif (texture == null) {\n\t\ttexture = s_DefaultTexture;\n\t}\n\t\n\t// If the properties are invalid, set them to 0\n\tif (props == -1) {\n\t\tprops = 0;\n\t}\n\t\n\t// Create a new material entry\n\tMaterialEntry entry = new MaterialEntry();\n\tentry.baseMat = baseMat;\n\tentry.texture = texture;\n\tentry.id = id;\n\tentry.props = props;\n\t\n\t// Search for a matching entry\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].Equals(entry)) {\n\t\t\t\n\t\t\t// If found, increment the entry's count and return its custom material\n\t\t\ts_Entries[i].count++;\n\t\t\treturn s_Entries[i].customMat;\n\t\t\t\n\t\t}\n\t}\n\t\n\t// If no match was found, create a new custom material\n\tMaterial customMat = new Material(baseMat);\n\tcustomMat.mainTexture = texture;\n\t\n\t// Set the custom material's properties\n\tcustomMat.SetInt(\"_ID\", id);\n\tcustomMat.SetInt(\"_Props\", props);\n\t\n\t// Add the new entry to the list\n\tentry.customMat = customMat;\n\ts_Entries.Add(entry);\n\t\n\t// Return the new custom material\n\treturn customMat;\n\t\n}", "CodeBleu_score": 32.50919562911387}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\tif(baseMat == null)\n\t\treturn null;\n\t\n\t// Check if there is an existing entry that matches the base material, texture, and id\n\tfor(int i = 0; i < s_Entries.Count; i++) {\n\t\tif(s_Entries[i].baseMat == baseMat && s_Entries[i].texture == texture && s_Entries[i].id == id) {\n\t\t\ts_Entries[i].count++;\n\t\t\treturn s_Entries[i].customMat;\n\t\t}\n\t}\n\t\n\t// Create a new entry\n\tMaterialEntry entry = new MaterialEntry();\n\tentry.baseMat = baseMat;\n\tentry.texture = texture;\n\tentry.id = id;\n\tentry.count = 1;\n\t\n\t// Create a new custom material\n\tentry.customMat = new Material(baseMat);\n\tentry.customMat.mainTexture = texture;\n\t\n\t// Set the custom material's properties\n\tentry.customMat.SetFloat(\"_SpriteID\", id);\n\tentry.customMat.SetFloat(\"_SpriteProps\", props);\n\t\n\t// Add the entry to the list\n\ts_Entries.Add(entry);\n\t\n\treturn entry.customMat;\n}", "CodeBleu_score": 31.889662202229196}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\tif (baseMat == null) {\n\t\tDebug.LogError(\"Base material is null\");\n\t\treturn null;\n\t}\n\n\t// If the texture is null, use the base material's main texture\n\tif (texture == null) {\n\t\ttexture = baseMat.mainTexture;\n\t}\n\n\t// If the id is invalid, use the base material's name\n\tif (id < 0) {\n\t\tid = baseMat.name.GetHashCode();\n\t}\n\n\t// Search for a matching entry in the list\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tMaterialEntry entry = s_Entries[i];\n\t\tif (entry.BaseMaterial == baseMat && entry.Texture == texture && entry.ID == id && entry.Props == props) {\n\t\t\t// If a match is found, increment the count and return the custom material\n\t\t\tentry.Count++;\n\t\t\treturn entry.CustomMaterial;\n\t\t}\n\t}\n\n\t// If no match is found, create a new entry\n\tMaterialEntry entry = new MaterialEntry();\n\tentry.BaseMaterial = baseMat;\n\tentry.Texture = texture;\n\tentry.ID = id;\n\tentry.Props = props;\n\tentry.Count = 1;\n\n\t// Create a new custom material\n\tentry.CustomMaterial = new Material(baseMat);\n\tentry.CustomMaterial.name = baseMat.name + \" (Custom)\";\n\tentry.CustomMaterial.mainTexture = texture;\n\n\t// Set the custom material's properties\n\tif (props != 0) {\n\t\tentry.CustomMaterial.SetFloat(\"_Mode\", 2.0f);\n\t\tentry.CustomMaterial.SetInt(\"_SrcBlend\", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);\n\t\tentry.CustomMaterial.SetInt(\"_DstBlend\", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);\n\t\tentry.CustomMaterial.SetInt(\"_ZWrite\", 0);\n\t\tentry.CustomMaterial.DisableKeyword(\"_ALPHATEST", "CodeBleu_score": 32.86371265778272}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\tif (!customMat) {\n\t\tDebug.LogWarning(\"[KSPM] Invalid material.\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].material == customMat) {\n\t\t\ts_Entries[i].count--;\n\t\t\tif (s_Entries[i].count <= 0) {\n\t\t\t\ts_Entries[i].material.DestroyImmediate();\n\t\t\t\ts_Entries[i].material = null;\n\t\t\t\ts_Entries[i].name = null;\n\t\t\t\ts_Entries[i].path = null;\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\tDebug.LogWarning(\"[KSPM] Material not found.\");\n}", "CodeBleu_score": 38.90624140488125}, {"code": "public static void Remove(Material customMat){\n\tif (customMat == null) {\n\t\tDebug.LogWarning(\"CustomMaterials: Remove() was called with a null material!\");\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].Material == customMat) {\n\t\t\ts_Entries[i].Count--;\n\t\t\tif (s_Entries[i].Count <= 0) {\n\t\t\t\tDestroyImmediate(s_Entries[i].Material);\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tDebug.LogWarning(\"CustomMaterials: Remove() was called with a material that wasn't in the list!\");\n}", "CodeBleu_score": 34.752687073301416}, {"code": "public static void Remove(Material customMat){\n\tif (customMat == null) {\n        Debug.LogError(\"[Puppet3D] Error: Invalid material. Cannot remove.\");\n        return;\n    }\n\n    if (s_Entries == null) {\n        Debug.LogError(\"[Puppet3D] Error: No entries to remove from.\");\n        return;\n    }\n\n    for (int i = 0; i < s_Entries.Count; i++) {\n        if (s_Entries[i].Material == customMat) {\n            s_Entries[i].Count--;\n            if (s_Entries[i].Count == 0) {\n                s_Entries[i].Material.DestroyImmediate();\n                s_Entries[i].Material = null;\n                s_Entries[i].Data = null;\n                s_Entries.RemoveAt(i);\n            }\n            return;\n        }\n    }\n\n    Debug.LogError(\"[Puppet3D] Error: Material not found in entries.\");\n}", "CodeBleu_score": 37.79599508443356}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\tvar ps = root.GetComponentsInChildren<ParticleSystem>();\n    ps.RemoveAt(ps.IndexOf(this.particleSystem));\n    foreach (var p in ps) {\n        if (p.GetComponentInParent<UIParticle>() == this) {\n            p.GetComponent<Renderer>().material.mainTexture = this.texture;\n            p.GetComponent<Renderer>().material.SetTextureScale(\"_MainTex\", this.textureScale);\n            p.GetComponent<Renderer>().material.SetTextureOffset(\"_MainTex\", this.textureOffset);\n            p.GetComponent<Renderer>().material.SetFloat(\"_FPS\", this.fps);\n            p.GetComponent<Renderer>().material.SetInt(\"_Columns\", this.columns);\n            p.GetComponent<Renderer>().material.SetInt(\"_Rows\", this.rows);\n            p.GetComponent<Renderer>().material.SetInt(\"_StartFrame\", this.startFrame);\n            p.GetComponent<Renderer>().material.SetInt(\"_MaxFrame\", this.maxFrame);\n            p.GetComponent<Renderer>().material.SetInt(\"_Loop\", this.loop ? 1 : 0);\n            p.GetComponent<Renderer>().material.SetInt(\"_PingPong\", this.pingPong ? 1 : 0);\n            p.GetComponent<Renderer>().material.SetFloat(\"_PingPongDelay\", this.pingPongDelay);\n            p.GetComponent<Renderer>().material.SetFloat(\"_FrameOverlap\", this.frameOverlap);\n            p.GetComponent<Renderer>().material.SetFloat(\"_FPSDivisor\", this.fpsDivisor);\n            p.GetComponent<Renderer>().material.SetFloat(\"_AnimationTime\", this.animationTime);\n            p.GetComponent<Renderer>().material.SetFloat(\"_AnimationStartTime\", this.animationStartTime);\n            p.GetComponent<Renderer>().material.SetFloat(\"_AnimationEndTime\", this.animationEndTime);\n            p.GetComponent<Renderer>().material.SetInt(\"_AnimationLoop\", this.animationLoop ? 1 : 0);\n            p.GetComponent<Renderer>().", "CodeBleu_score": 19.3970753148829}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}, {"code": "private void RefreshParticles(GameObject root){\n\tList<ParticleSystem> ps = root.GetComponentsInChildren<ParticleSystem>().ToList();\n    ps.RemoveAt(0);\n    for (int i = ps.Count - 1; i >= 0; i--) {\n        if (ps[i].GetComponentInParent<UIParticle>() != this) {\n            ps.RemoveAt(i);\n        } else {\n            if (ps[i].main.maxParticles > 1) {\n                ps[i].GetComponent<Renderer>().material = new Material(Shader.Find(\"Particles/Additive\"));\n            } else {\n                ps[i].GetComponent<Renderer>().material = new Material(Shader.Find(\"Particles/Alpha Blended\"));\n            }\n        }\n    }\n    RefreshParticles(ps.ToArray());\n}", "CodeBleu_score": 36.58310314210533}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tcontainerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 86.60193632348967}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tcontainerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 86.60193632348967}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tcontainerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 86.60193632348967}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\tIPAddress = ipAddress;\n     Port = port;\n\n     await InitializeSerializerAsync();\n\n     await CurrentState.NegotiateReservationAsync();\n }", "CodeBleu_score": 43.52882212524929}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t// Set the IP address and port\n\tthis.ipAddress = ipAddress;\n\tthis.port = port;\n\n\t// Wait for the serializer initialization task to complete\n\tawait serializerInitializationTask;\n\n\t// Initiate a reservation negotiation using the current state\n\tawait CurrentState.NegotiateReservationAsync(this);\n}", "CodeBleu_score": 46.248504511671015}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t// Set the IP address and port.\n    this.ipAddress = ipAddress;\n    this.port = port;\n\n    // Wait for the serializer to initialize.\n    await this.serializer.InitializeAsync();\n\n    // Start the reservation negotiation.\n    await this.CurrentState.NegotiateReservationAsync();\n}", "CodeBleu_score": 37.28867138381505}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tValidate.NotNull(sessionConnectionState, \"sessionConnectionState\");\n    Log.Debug(\"Updating connection state from {0} to {1}\", this.CurrentState.CurrentStage.ToString(), sessionConnectionState.CurrentStage.ToString());\n    this.CurrentState = sessionConnectionState;\n    ConnectionStateChanged?.Invoke(this, sessionConnectionState);\n    if (sessionConnectionState.CurrentStage == SESSION_RESERVED) {\n        Log.Debug(\"Player {0} reserved a session\", sessionConnectionState.PlayerName);\n    }\n}", "CodeBleu_score": 40.55309127832398}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tValidate.NotNull(sessionConnectionState, \"sessionConnectionState\");\n    Log.Debug($\"Connection state changed from {CurrentState.CurrentStage} to {sessionConnectionState}\");\n    CurrentState.CurrentStage = sessionConnectionState;\n    ConnectionStateChanged?.Invoke(sessionConnectionState);\n}", "CodeBleu_score": 24.710736304327508}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tValidate.NotNull(sessionConnectionState, \"sessionConnectionState\");\n\n\tLog.Debug(\"Connection state changed from {0} to {1}\", CurrentState.CurrentStage.ToString(), sessionConnectionState.ToString());\n\n\tCurrentState.CurrentStage = sessionConnectionState;\n\n\tif (sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tLog.Debug(\"Player name: {0}\", CurrentState.PlayerName);\n\t}\n\n\tConnectionStateChanged?.Invoke(sessionConnectionState);\n}", "CodeBleu_score": 48.40666298451865}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tLog.Info(\"Starting client...\");\n    await Task.Run(() => {\n        client.Start();\n        client.Connect(ipAddress, serverPort, \"nitrox\");\n    }).ConfigureAwait(false);\n    Log.Info(\"Waiting for connection...\");\n    connectedEvent.WaitOne(2000);\n    connectedEvent.Reset();\n}", "CodeBleu_score": 85.4390880432379}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tLog.Info(\"Starting client...\");\n    await Task.Run(() => {\n        client.Start();\n        client.Connect(ipAddress, serverPort, \"nitrox\");\n    }).ConfigureAwait(false);\n    Log.Info(\"Waiting for connection...\");\n    connectedEvent.WaitOne(2000);\n    connectedEvent.Reset();\n}", "CodeBleu_score": 85.4390880432379}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tclient = new LiteNetLibClient();\n    client.RegisterNitroxEvents();\n    client.RegisterMessageHandler<ChatMessage>(OnChatMessageReceived);\n    client.RegisterMessageHandler<PlayerListMessage>(OnPlayerListReceived);\n    client.RegisterMessageHandler<PlayerJoinedMessage>(OnPlayerJoined);\n    client.RegisterMessageHandler<PlayerLeftMessage>(OnPlayerLeft);\n    client.RegisterMessageHandler<PlayerPositionMessage>(OnPlayerPositionReceived);\n    client.RegisterMessageHandler<PlayerRotationMessage>(OnPlayerRotationReceived);\n    client.RegisterMessageHandler<PlayerDisconnectedMessage>(OnPlayerDisconnected);\n    client.RegisterMessageHandler<PlayerHealthMessage>(OnPlayerHealthReceived);\n    client.RegisterMessageHandler<PlayerRespawnedMessage>(OnPlayerRespawned);\n    client.RegisterMessageHandler<PlayerDiedMessage>(OnPlayerDied);\n    client.RegisterMessageHandler<PlayerShootMessage>(OnPlayerShoot);\n    client.RegisterMessageHandler<BulletHitMessage>(OnBulletHit);\n    client.RegisterMessageHandler<BulletHitPlayerMessage>(OnBulletHitPlayer);\n    client.RegisterMessageHandler<BulletHitDestructibleMessage>(OnBulletHitDestructible);\n    client.RegisterMessageHandler<DestructibleHealthChangedMessage>(OnDestructibleHealthChanged);\n    client.RegisterMessageHandler<DestructibleDestroyedMessage>(OnDestructibleDestroyed);\n    client.RegisterMessageHandler<DestructibleSpawnedMessage>(OnDestructibleSpawned);\n    client.RegisterMessageHandler<GameOverMessage>(OnGameOver);\n    client.RegisterMessageHandler<GameRestartMessage>(OnGameRestart);\n    client.RegisterMessageHandler<GameStartMessage>(OnGameStart);\n    client.RegisterMessageHandler<GameLoadedMessage>(OnGameLoaded);\n    client.RegisterMessageHandler<GameUnloadedMessage>(OnGameUnloaded);\n    client.RegisterMessageHandler<GameTimeMessage>(OnGameTime);\n    client.RegisterMessageHandler<GamePauseMessage>(OnGamePause);\n    client.RegisterMessageHandler<GameUnpauseMessage>(OnGameUnpause);\n    client", "CodeBleu_score": 22.98719856495526}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = NitroxEntity.RequireObjectFrom<Cyclops>(id);\n    SubFire fire = cyclops.subFire;\n    fire.subFire.StartCoroutine(StartFireSuppressionSystem(fire));\n    fire.subFire.fireSuppressionButton.StartCooldown();\n}", "CodeBleu_score": 45.915144339898724}, {"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = CyclopsManager.main.FindCyclopsById(id);\n    SubFire fire = cyclops.RequireComponentInChildren<SubFire>();\n    CyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n    fireSuppButton.subFire.StartCoroutine(fireSuppButton.subFire.StartFireSuppressionSystem(fire));\n    fireSuppButton.StartCooldown();\n}", "CodeBleu_score": 62.85281851401044}, {"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = NitroxEntity.RequireObjectFrom<Cyclops>(id);\n    SubFire fire = cyclops.GetComponentInChildren<SubFire>();\n    if (fire.fireSuppressionActive) {\n        return;\n    }\n    cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>().StartCooldown();\n    cyclops.StartCoroutine(StartFireSuppressionSystem(fire));\n}", "CodeBleu_score": 41.83862209752308}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\tif (subRoot.TryGetIdOrWarn(out string subRootId)) {\n        if (damagePoint == CyclopsDamagePoint.Hull) {\n            var repairPacket = new CyclopsHullRepairPacket(subRootId, repairAmount);\n            packetSender.Send(repairPacket);\n        } else if (damagePoint == CyclopsDamagePoint.LeftThruster) {\n            var repairPacket = new CyclopsThrusterRepairPacket(subRootId, CyclopsThruster.Left, repairAmount);\n            packetSender.Send(repairPacket);\n        } else if (damagePoint == CyclopsDamagePoint.RightThruster) {\n            var repairPacket = new CyclopsThrusterRepairPacket(subRootId, CyclopsThruster.Right, repairAmount);\n            packetSender.Send(repairPacket);\n        }\n    }\n}", "CodeBleu_score": 27.287553297967026}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\tvar subRootId = subRoot.TryGetIdOrWarn();\n    if (subRootId == 0) return;\n\n    var damagePointId = damagePoint.Id;\n    if (damagePointId == CyclopsDamagePoint.None) return;\n\n    var repairPacket = new CyclopsDamagePointRepairPacket(subRootId, damagePointId, repairAmount);\n\n    packetSender.Send(ref repairPacket);\n}", "CodeBleu_score": 30.95912203833532}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\tif (subRoot == null || damagePoint == null) {\n        return;\n    }\n\n    int subRootId = subRoot.TryGetIdOrWarn(this);\n    if (subRootId < 0) {\n        return;\n    }\n\n    RepairPacket packet = new RepairPacket(subRootId, damagePoint.DamageType, damagePoint.DamageName, repairAmount);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 33.12156215207529}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n        return;\n    }\n\n    CyclopsDamageInfoData? damageInfo = null;\n    if (info.HasValue) {\n        damageInfo = new CyclopsDamageInfoData(info.Value.damage, info.Value.health, info.Value.maxHealth);\n    }\n\n    CyclopsDamagePacket packet = new CyclopsDamagePacket(subRootId, damageInfo, GetActiveDamagePoints(subRoot).ToArray(), GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray());\n    packetSender.Send(packet);\n}", "CodeBleu_score": 42.34522756717838}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n        return;\n    }\n\n    if (subRoot.health.health <= 0) {\n        return;\n    }\n\n    CyclopsDamageInfoData damageInfo = null;\n    if (info.HasValue) {\n        damageInfo = new CyclopsDamageInfoData(info.Value.damage, info.Value.health, info.Value.damageType.ToDto());\n    }\n\n    CyclopsDamageData data = new CyclopsDamageData(subRootId, damageInfo, GetActiveDamagePoints(subRoot).ToArray(), GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray());\n    packetSender.Send(data);\n}", "CodeBleu_score": 48.450529925928535}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n        return;\n    }\n\n    var damageInfoData = info.HasValue ? new CyclopsDamageInfoData(info.Value.damage, info.Value.health) : null;\n\n    var damagePoints = GetActiveDamagePoints(subRoot).ToArray();\n    var roomFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n\n    var packet = new CyclopsDamage {\n        SubRootId = subRootId,\n        DamageInfoData = damageInfoData,\n        DamagePoints = damagePoints,\n        RoomFires = roomFires,\n    };\n\n    packetSender.Send(packet);\n}", "CodeBleu_score": 28.882437476857735}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        UnityEngine.Object.Destroy(NitroxEntity.GetObjectFrom(entity));\n    }\n}", "CodeBleu_score": 54.163781588645975}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        GameObject go = NitroxEntity.GetObjectFrom(entity);\n        if (go != null) {\n            UnityEngine.Object.Destroy(go);\n        }\n    }\n}", "CodeBleu_score": 54.14551976378114}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        UnityEngine.Object.Destroy(NitroxEntity.GetObjectFrom(entity));\n    }\n}", "CodeBleu_score": 54.163781588645975}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n\t\tpendingEntities = new List<Entity>();\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n\t}\n\tpendingEntities.Add(entity);\n}", "CodeBleu_score": 69.37776843845528}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t// Check if the parent ID already has an associated list in the dictionary. If not, create one.\n\tif (!pendingParentEntitiesByParentId.ContainsKey(entity.ParentId)) {\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentId, new List<Entity>());\n\t}\n\n\t// Add the entity to the appropriate list.\n\tpendingParentEntitiesByParentId[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 33.05919369321897}, {"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingParentEntities)) {\n\t\tpendingParentEntities = new List<Entity>();\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentId, pendingParentEntities);\n\t}\n\tpendingParentEntities.Add(entity);\n}", "CodeBleu_score": 59.17576796728851}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tvar action = ExosuitArmAction.START_USE_TOOL;\n    if (Mathf.Approximately(cooldown, clawArm.GetPickupCooldown())) {\n        action = ExosuitArmAction.START_USE_TOOL;\n    } else if (Mathf.Approximately(cooldown, clawArm.GetPunchCooldown())) {\n        action = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Could not determine action for ExosuitClawArm\");\n    }\n\n    BroadcastArmAction(clawArm.GetTechType(), clawArm, action);\n}", "CodeBleu_score": 46.89868199475672}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tExosuitArmAction armAction;\n    if (Mathf.Approximately(cooldown, clawArm.GetPickupCooldown())) {\n        armAction = ExosuitArmAction.START_USE_TOOL;\n    } else if (Mathf.Approximately(cooldown, clawArm.GetPunchCooldown())) {\n        armAction = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error($\"ExosuitClawArm {clawArm.name} has unknown cooldown {cooldown}\");\n        return;\n    }\n    BroadcastArmAction(clawArm.GetTechType(), clawArm, armAction, null, null);\n}", "CodeBleu_score": 51.14424652726204}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tExosuitArmAction armAction = ExosuitArmAction.START_USE_TOOL;\n    if (Mathf.Approximately(cooldown, clawArm.pickupCooldown)) {\n        armAction = ExosuitArmAction.START_USE_TOOL;\n    } else if (Mathf.Approximately(cooldown, clawArm.punchCooldown)) {\n        armAction = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Claw use action not recognized\");\n    }\n\n    BroadcastArmAction(clawArm.GetTechType(), clawArm, armAction, null, null);\n}", "CodeBleu_score": 48.50827669477259}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tif (!gameObject.TryGetIdOrWarn(out var gameObjectId)) return;\n    if (!parent.TryGetIdOrWarn(out var parentId)) return;\n\n    var metadata = entityMetadataManager.Extract(gameObject);\n    if (metadata == null) return;\n\n    var entity = new InstalledBatteryEntity {\n        GameObjectId = gameObjectId,\n        ParentId = parentId,\n        TechType = techType.ToDto(),\n        Metadata = metadata.OrNull()\n    };\n\n    packetSender.Send(entity);\n}", "CodeBleu_score": 44.97675560642723}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tif (gameObject == null) {\n        Log.Error(\"gameObject is null!\");\n        return;\n    }\n\n    if (parent == null) {\n        Log.Error(\"parent is null!\");\n        return;\n    }\n\n    int gameObjectId = gameObject.TryGetIdOrWarn();\n    int parentId = parent.TryGetIdOrWarn();\n\n    if (gameObjectId == 0) {\n        Log.Error(\"gameObjectId is 0!\");\n        return;\n    }\n\n    if (parentId == 0) {\n        Log.Error(\"parentId is 0!\");\n        return;\n    }\n\n    EntityMetadata metadata = entityMetadataManager.Extract(gameObject);\n\n    if (metadata == null) {\n        Log.Error(\"metadata is null!\");\n        return;\n    }\n\n    InstalledBatteryEntity entity = new InstalledBatteryEntity(gameObjectId, parentId, techType.ToDto(), metadata.OrNull());\n\n    packetSender.Send(entity.ToPacket());\n}", "CodeBleu_score": 45.46342764066627}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tif (gameObject == null || parent == null || techType == TechType.None) return;\n\n    if (!gameObject.TryGetIdOrWarn(out var gameObjectId) || !parent.TryGetIdOrWarn(out var parentId)) return;\n\n    var metadata = entityMetadataManager.Extract(gameObject);\n    if (metadata == null) return;\n\n    var entity = new InstalledBatteryEntity {\n        GameObjectId = gameObjectId,\n        ParentId = parentId,\n        TechType = techType.ToDto(),\n        Metadata = metadata.OrNull()\n    };\n\n    packetSender.Send(new EntitySpawnedByClient(entity));\n}", "CodeBleu_score": 49.2301886283092}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\tif (gameObject == null) {\n        throw new ArgumentNullException(nameof(gameObject));\n    }\n\n    if (techType == TechType.None) {\n        throw new ArgumentException(\"TechType.None is not a valid TechType.\", nameof(techType));\n    }\n\n    if (PickingUpObject != null) {\n        throw new InvalidOperationException(\"Already picking up an object.\");\n    }\n\n    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl(gameObject);\n\n    NitroxId itemId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n    string classId = gameObject.RequireComponent<PrefabIdentifier>().ClassId;\n    Optional<EntityMetadata> metadata = EntityMetadataManager.Extract(gameObject);\n    List<Entity> children = GetPrefabChildren(gameObject, itemId, EntityMetadataManager).ToList();\n\n    // Newly created objects are always placed into the player's inventory.\n    if (!Player.main.TryGetNitroxId(out NitroxId ownerId)) {\n        throw new InvalidOperationException(\"[Items] Player has no id! Couldn't parent InventoryItem.\");\n    }\n\n    InventoryItemEntity inventoryItemEntity = new(itemId, classId, techType.ToDto(), metadata.OrNull(), ownerId, children);\n    BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, inventoryItemEntity.ChildEntities, itemId);\n\n    EntityPositionBroadcaster.StopWatchingEntity(gameObject);\n    entities.MarkAsSpawned(itemId);\n\n    Log.Debug($\"Picked up {techType}.\");\n\n    packetSender.Send(new PickupItem(itemId, inventoryItemEntity));\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 39.87587192660642}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\tif (gameObject == null) {\n        Log.Error(\"[Items] gameObject is null!\");\n        return;\n    }\n\n    if (techType == TechType.None) {\n        Log.Error(\"[Items] techType is TechType.None!\");\n        return;\n    }\n\n    if (PickingUpObject != null) {\n        Log.Error(\"[Items] Already picking up an object!\");\n        return;\n    }\n\n    PickingUpObject = gameObject;\n\n    RemoveAnyRemoteControl(gameObject);\n\n    NitroxId itemId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n\n    StopWatchingEntity(itemId);\n\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, _entityMetadataManager);\n\n    entities.MarkAsSpawned(itemId);\n\n    Log.Debug(\"[Items] Picked up {0}\", itemId);\n\n    packetSender.Send(new PickupItem(itemId, techType.ToDto()));\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 45.08616134003419}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t// Set PickingUpObject to the given game object.\n    PickingUpObject = gameObject;\n\n    // Remove any remote control.\n    RemoveAnyRemoteControl(gameObject);\n\n    // Check for a NitroxId.\n    if (!gameObject.TryGetNitroxId(out NitroxId itemId)) {\n        // If the object lacks an ID, generate a new one.\n        itemId = NitroxEntity.GenerateNewId();\n    }\n\n    // Stop entity position broadcasting.\n    EntityPositionBroadcaster.StopWatchingEntity(itemId);\n\n    // Convert the object to an inventory item.\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, EntityMetadataManager);\n\n    // Mark the object as spawned.\n    entities.MarkAsSpawned(itemId);\n\n    // Log the pickup event.\n    Log.Debug($\"[Items] Player picked up {techType}.\");\n\n    // Create a PickupItem packet.\n    PickupItem packet = new(itemId, inventoryItemEntity);\n\n    // Send the packet.\n    packetSender.Send(packet);\n\n    // Reset PickingUpObject to null.\n    PickingUpObject = null;\n}", "CodeBleu_score": 56.54100405117707}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\n    Pickupable pickupable = gameObject.GetComponent<Pickupable>();\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    List<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n    Player player = Player.main;\n    NitroxId playerId = NitroxEntity.GetIdOrGenerateNew(player.gameObject);\n\n    InventoryItemEntity entity = new InventoryItemEntity(id, playerId, techType.ToDto(), metadata.OrNull(), children);\n\n    BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, entity);\n\n    return entity;\n}", "CodeBleu_score": 58.455644393095916}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().classId;\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    List<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n    Optional<Battery> battery = BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, metadata);\n    NitroxId playerId = Player.main.TryGetNitroxId();\n\n    return new InventoryItemEntity(id, classId, techType.ToDto(), metadata, children, battery, playerId);\n}", "CodeBleu_score": 62.310226536470736}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject); // We do this here bc a MetadataExtractor could be requiring the id to increment or so\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n    if (!metadata.HasValue) {\n        return null;\n    }\n\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n\n    Player player = Player.main;\n    NitroxId playerId = player.GetNitroxId();\n\n    InventoryItemEntity entity = new InventoryItemEntity(id, techType.ToDto(), metadata.Value, playerId);\n\n    if (techType == TechType.Battery) {\n        BatteryChildEntityHelper.TryPopulateInstalledBattery(entity, gameObject);\n    }\n\n    return entity;\n}", "CodeBleu_score": 49.90272862294634}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.body = new Lazy<Body>(() => multiplayerSession.Body);\n    this.playerModel = new Lazy<PlayerModel>(() => multiplayerSession.PlayerModel);\n    this.bodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.BodyPrototype);\n    this.Permissions = new PermissionsLevel(Permission.All);\n}", "CodeBleu_score": 52.79178197998403}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.body = new Lazy<Body>(() => multiplayerSession.GetLocalPlayerBody());\n    this.playerModel = new Lazy<PlayerModel>(() => multiplayerSession.GetLocalPlayerModel());\n    this.bodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.GetLocalPlayerBodyPrototype());\n    this.playerPermissions = new PlayerPermissions();\n    this.playerPermissions.AddPermission(Permission.Interact);\n    this.playerPermissions.AddPermission(Permission.Explosion);\n    this.playerPermissions.AddPermission(Permission.Admin);\n}", "CodeBleu_score": 47.930199990260974}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n\n    this.body = new Lazy<Body>(() => multiplayerSession.GetBodyByPlayerId(playerId));\n    this.playerModel = new Lazy<PlayerModel>(() => multiplayerSession.GetPlayerModelByPlayerId(playerId));\n    this.bodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.GetBodyPrototypeByPlayerId(playerId));\n\n    this.permissions = new Permissions();\n    this.permissions.GrantAllPermissions();\n}", "CodeBleu_score": 51.815357536597716}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\tget {\n        // Ensure head is visible\n        var head = GetComponentInChildren<Head>();\n        head.SetVisible(true);\n\n        // Instantiate a clone of the body prototype\n        var clone = Object.Instantiate(bodyPrototype);\n\n        // Set the head's shadow casting mode back to On\n        head.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\n        // Deactivate the clone and rename it\n        clone.SetActive(false);\n        clone.name = \"RemotePlayerPrototype\";\n\n        // Remove any items held in hand\n        var hand = clone.transform.Find(\"Hand\");\n        if (hand != null) {\n            foreach (Transform child in hand) {\n                Object.DestroyImmediate(child.gameObject);\n            }\n        }\n\n        return clone;\n    }\n}", "CodeBleu_score": 45.72232111305492}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\n\t\tif (playerHead.activeSelf == false) {\n\t\t\tplayerHead.SetActive(true);\n\t\t}\n\t\tGameObject clone = Object.Instantiate(playerBody);\n\t\tclone.SetActive(false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\tclone.GetComponentInChildren<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\t\tGameObject.DestroyImmediate(clone.GetComponentInChildren<VRItem>());\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 29.805163850520504}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\n        if (playerHead.activeSelf) {\n            var clone = Object.Instantiate(playerBody);\n            clone.transform.Find(\"Head\").gameObject.SetActive(false);\n            clone.GetComponentInParent<Player>().enabled = false;\n            clone.SetActive(false);\n            clone.name = \"RemotePlayerPrototype\";\n            foreach (var item in clone.GetComponentsInChildren<Item>()) {\n                Object.DestroyImmediate(item.gameObject);\n            }\n            return clone;\n        }\n        return null;\n    }\n}", "CodeBleu_score": 37.244957918223214}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().AssemblyQualifiedName);\n\tbw.Write(Location);\n\tbw.Write(Metadata.Version.ToString());\n\tbw.Write(Processes.ToList());\n\tbw.Write(Dependencies.ToList());\n\tbw.Write(Incompatibilities.ToList());\n\tbw.Write(TargettedBepInExVersion.ToString());\n\tforeach (var bepInDependency in Dependencies)\n\t\t((ICacheable) bepInDependency).Save(bw);\n\tforeach (var bepInIncompatibility in Incompatibilities)\n\t\t((ICacheable) bepInIncompatibility).Save(bw);\n}", "CodeBleu_score": 44.758409235123345}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().AssemblyQualifiedName);\n    bw.Write(Location);\n    Metadata.Save(bw);\n    bw.Write(Processes.Count);\n    foreach (var process in Processes) {\n        bw.Write(process);\n    }\n    bw.Write(Dependencies.Count);\n    foreach (var dependency in Dependencies) {\n        ((ICacheable) dependency).Save(bw);\n    }\n    bw.Write(Incompatibilities.Count);\n    foreach (var incompatibility in Incompatibilities) {\n        ((ICacheable) incompatibility).Save(bw);\n    }\n    bw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 49.45013394586023}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(this.GetType().FullName);\n\tbw.Write(this.Location);\n\tbw.Write(this.Metadata.Version.ToString());\n\tbw.Write(this.Metadata.Name);\n\tbw.Write(this.Metadata.Author);\n\tbw.Write(this.Metadata.Description);\n\tbw.Write(this.Metadata.Guid);\n\tbw.Write(this.Metadata.Version.Major);\n\tbw.Write(this.Metadata.Version.Minor);\n\tbw.Write(this.Metadata.Version.Build);\n\tbw.Write(this.Metadata.Version.Revision);\n\tbw.Write(this.Metadata.Version.ToString());\n\tbw.Write(this.Processes.Count);\n\tforeach (ProcessType process in this.Processes) {\n\t\tbw.Write((int) process);\n\t}\n\tbw.Write(this.Dependencies.Count);\n\tforeach (BepInPlugin bepInDependency in this.Dependencies) {\n\t\t((ICacheable) bepInDependency).Save(bw);\n\t}\n\tbw.Write(this.Incompatibilities.Count);\n\tforeach (BepInPlugin bepInIncompatibility in this.Incompatibilities) {\n\t\t((ICacheable) bepInIncompatibility).Save(bw);\n\t}\n\tbw.Write(this.TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 45.94951542267235}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tPluginLoad?.Invoke(pluginInfo, pluginInstance);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 59.361288253182806}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tif(pluginType == null) {\n\t\tthrow new Exception($\"Failed to load plugin type {pluginInfo.PluginType}.\");\n\t}\n\tBasePlugin pluginInstance = Activator.CreateInstance(pluginType) as BasePlugin;\n\tif(pluginInstance == null) {\n\t\tthrow new Exception($\"Failed to create instance of plugin type {pluginInfo.PluginType}.\");\n\t}\n\tPluginLoad?.Invoke(pluginInfo, pluginInstance);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 55.03793585575377}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tType pluginType = pluginAssembly.GetType(pluginInfo.ClassName);\n\tif (pluginType == null) {\n\t\tthrow new Exception(\"Failed to load plugin \" + pluginInfo.Name + \"! Could not find class \" + pluginInfo.ClassName + \" in assembly \" + pluginAssembly.FullName);\n\t}\n\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tif (pluginInstance == null) {\n\t\tthrow new Exception(\"Failed to load plugin \" + pluginInfo.Name + \"! Could not create instance of class \" + pluginInfo.ClassName);\n\t}\n\n\tPluginLoad?.Invoke(pluginInfo, pluginInstance);\n\n\tpluginInstance.Load();\n\n\treturn pluginInstance;\n}", "CodeBleu_score": 54.45833623139787}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod != null) return TrampolineMethod;\n    Prepare();\n    TrampolineMethod = DetourHelper.GenerateNativeProxy(TrampolinePtr, signature);\n    return TrampolineMethod;\n}", "CodeBleu_score": 67.423797100381}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod != null) return TrampolineMethod;\n    Prepare();\n    return TrampolineMethod = DetourHelper.GenerateNativeProxy(TrampolinePtr, signature);\n}", "CodeBleu_score": 64.66537474787093}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = DetourHelper.GenerateNativeProxy(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 98.3814701811163}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tvar assembly = Assembly.GetExecutingAssembly();\n\tvar resourceName = $\"Localization.{code}.json\";\n\n\tusing var stream = assembly.GetManifestResourceStream(resourceName);\n\tif (stream == null)\n\t\tthrow new NullReferenceException($\"Language file for language code {code} not found.\");\n\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream, new JsonSerializerOptions {\n\t\tPropertyNameCaseInsensitive = true\n\t}) ?? throw new JsonException($\"Failed to deserialize language file for language code {code}.\");\n}", "CodeBleu_score": 51.90527404201198}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tvar stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"Localization.{code}.json\");\n    if (stream == null) {\n        throw new NullReferenceException($\"Language file for code '{code}' not found.\");\n    }\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n    } catch (JsonException e) {\n        throw new JsonException($\"Failed to deserialize language file for code '{code}'.\", e);\n    }\n}", "CodeBleu_score": 52.866412333691336}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tStream? stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"{typeof(LocalizationLoader).Assembly.GetName().Name}.Resources.lang.{code}.json\");\n    if (stream == null) throw new NullReferenceException($\"Could not find language file for code {code}.\");\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(stream)!;\n    } catch (JsonException) {\n        throw new JsonException($\"Failed to deserialize language file for code {code}.\");\n    }\n}", "CodeBleu_score": 55.11852258002325}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit(node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 47.862635985768506}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit((ParserRuleContext)node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 45.199607429485944}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit((ParserRuleContext)node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 46.910709879713394}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// Generate code for any expressions in the formatted text\n    this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\n    // Retrieve the line ID tag\n    var lineIDTag = context.hashtag();\n\n    // If no line ID tag is found, throw an exception\n    if (lineIDTag == null) {\n        throw new InvalidOperationException($\"Line {context.Start.Line} has no line ID tag\");\n    }\n\n    // Emit a RunLine opcode with the line ID and expression count\n    this.compiler.Emit(OpCode.RunLine, Compiler.GetLineIDTag(lineIDTag), this.expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 32.62297689871504}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// Generate code for any expressions in the formatted text\n    this.GenerateCodeForExpressionsInFormattedText(context.formatted_text());\n\n    // Get the line ID tag\n    var lineIDTag = context.line_formatted_text().line_id_tag();\n\n    // If there's no line ID tag, throw an error\n    if (lineIDTag == null) {\n        throw new InvalidOperationException($\"No line ID tag found in line statement at line {context.Start.Line}\");\n    }\n\n    // Get the line ID tag's value\n    var lineID = Compiler.GetLineIDTag(lineIDTag);\n\n    // Emit a RunLine opcode\n    this.compiler.Emit(OpCode.RunLine, lineID, context.formatted_text().expression().Length);\n\n    return 0;\n}", "CodeBleu_score": 61.97332046677184}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// Generate code for the expressions in the formatted text\n    this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\n    // Retrieve the line ID tag\n    var lineIDTag = Compiler.GetLineIDTag(context);\n\n    // Emit the RunLine opcode\n    this.compiler.Emit(OpCode.RunLine, lineIDTag, context.line_formatted_text().expression().Length);\n\n    return 0;\n}", "CodeBleu_score": 46.135988918966355}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tvar diagnostics = new List<Diagnostic>();\n\n    foreach (var commandReference in yarnFile.CommandReferences) {\n        if (commandReference.CommandName.StartsWith(\"<<\")) {\n            continue;\n        }\n\n        if (yarnFile.Project.KnownCommands.Contains(commandReference.CommandName) == false) {\n            var message = string.Format(CultureInfo.CurrentCulture, DiagnosticMessages.UnknownCommand, commandReference.CommandName);\n\n            diagnostics.Add(new Diagnostic(\n                message,\n                DiagnosticSeverity.Warning,\n                DiagnosticCodes.UnknownCommand,\n                new Location(\n                    yarnFile.FileName,\n                    new Range(\n                        commandReference.CommandNameRange.Start.Delta(0, 2),\n                        commandReference.CommandNameRange.End.Delta(0, -2)\n                    )\n                ),\n                new Dictionary<string, object> {\n                    { \"CommandName\", commandReference.CommandName }\n                }\n            ));\n        }\n    }\n\n    return diagnostics;\n}", "CodeBleu_score": 35.60817618907045}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tvar diagnostics = new List<Diagnostic>();\n\n    foreach (var commandReference in yarnFile.CommandReferences) {\n        if (yarnFile.Project.KnownCommands.ContainsKey(commandReference.CommandName)) {\n            continue;\n        }\n\n        var diagnostic = new Diagnostic(\n            DiagnosticSeverity.Warning,\n            $\"Unknown command '{commandReference.CommandName}'\",\n            commandReference.CommandName,\n            commandReference.ParametersRange.Start.Delta,\n            commandReference.ParametersRange.End.Delta,\n            \"UnknownCommand\",\n            null\n        );\n\n        diagnostics.Add(diagnostic);\n    }\n\n    return diagnostics;\n}", "CodeBleu_score": 30.994217571170505}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tforeach (var commandReference in yarnFile.CommandReferences) {\n        if (!yarnFile.KnownCommands.Contains(commandReference.Name)) {\n            var diagnostic = new Diagnostic(\n                commandReference.NameRange,\n                $\"Unknown command '{commandReference.Name}'\",\n                DiagnosticSeverity.Warning,\n                \"YRN.UnknownCommand\",\n                \"Yarn Spinner\",\n                commandReference\n            );\n            yield return diagnostic;\n        }\n    }\n}", "CodeBleu_score": 27.473494174229618}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelectorFactory.YarnDocumentSelector,\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(\n            CodeActionKind.QuickFix\n        )\n    };\n}", "CodeBleu_score": 77.19755006544527}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarnspinner\"),\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n        ResolveProvider = false,\n    };\n}", "CodeBleu_score": 74.43376658931378}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarnspinner\"),\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n        ResolveProvider = false,\n    };\n}", "CodeBleu_score": 74.43376658931378}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tobject value;\n\tbool found = this.variables.TryGetValue(variableName, out value);\n\tif (found) {\n\t\tType type = typeof(T);\n\t\tif (type.IsAssignableFrom(value.GetType())) {\n\t\t\tresult = (T)value;\n\t\t} else {\n\t\t\tthrow new ArgumentException(string.Format(\"The type of the variable {0} is {1}, but you tried to get it as {2}\", variableName, value.GetType(), type));\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t}\n\treturn found;\n}", "CodeBleu_score": 48.10635612200268}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (this.variables.TryGetValue(variableName, out object value)) {\n\t\tif (value is T typedValue) {\n\t\t\tresult = typedValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException($\"Variable {variableName} is of type {value.GetType().Name} but was requested as {typeof(T).Name}\");\n\t\t}\n\t} else {\n\t\tresult = default;\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 55.26293267760287}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (this.variables.TryGetValue(variableName, out var value)) {\n        if (value.GetType().IsAssignableFrom(typeof(T))) {\n            result = (T)value;\n            return true;\n        }\n        throw new ArgumentException($\"Variable \\\"{variableName}\\\" is of type \\\"{value.GetType()}\\\", not \\\"{typeof(T)}\\\".\");\n    }\n    result = default;\n    return false;\n}", "CodeBleu_score": 69.50500358401953}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tLibrary = new Yarn.Library();\n    VirtualMachine = new Yarn.VirtualMachine(Library);\n    VirtualMachine.SetNodeHandler(HandleNode);\n    VirtualMachine.SetCommandHandler(\"jump\", JumpCommandHandler);\n    VirtualMachine.SetCommandHandler(\"wait\", WaitCommandHandler);\n    VirtualMachine.SetCommandHandler(\"stop\", StopCommandHandler);\n    VirtualMachine.SetCommandHandler(\"run\", RunCommandHandler);\n    VirtualMachine.SetFunction(\"visited\", IsNodeVisited);\n    VirtualMachine.SetFunction(\"visitCount\", GetNodeVisitCount);\n\n    VirtualMachine.SetNodeHandler(HandleNode);\n\n    LineParser = new Yarn.LineParser();\n    LineParser.RegisterMarkerProcessor(\"select\", HandleSelectMarker);\n    LineParser.RegisterMarkerProcessor(\"plural\", HandlePluralMarker);\n    LineParser.RegisterMarkerProcessor(\"ordinal\", HandleOrdinalMarker);\n\n    Library.RegisterFunction(\"nameof\", (string[] parameters) => {\n        return parameters[0];\n    });\n\n    VariableStorage = variableStorage;\n}", "CodeBleu_score": 32.46162365817425}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.VariableStorage = variableStorage;\n    this.Library = new Library();\n    this.VirtualMachine = new VirtualMachine(this.Library);\n    this.VirtualMachine.SetNodeStartHandler(this.OnNodeStart);\n    this.VirtualMachine.SetNodeCompleteHandler(this.OnNodeComplete);\n    this.VirtualMachine.SetDialogueCompleteHandler(this.OnDialogueComplete);\n    this.VirtualMachine.SetCommandHandler(\"jump\", this.Command_Jump);\n    this.VirtualMachine.SetCommandHandler(\"set\", this.Command_Set);\n    this.VirtualMachine.SetCommandHandler(\"declare\", this.Command_Declare);\n    this.VirtualMachine.SetCommandHandler(\"addToVariable\", this.Command_AddToVariable);\n    this.VirtualMachine.SetCommandHandler(\"multiplyVariable\", this.Command_MultiplyVariable);\n    this.VirtualMachine.SetCommandHandler(\"divideVariable\", this.Command_DivideVariable);\n    this.VirtualMachine.SetCommandHandler(\"modVariable\", this.Command_ModVariable);\n    this.VirtualMachine.SetCommandHandler(\"powVariable\", this.Command_PowVariable);\n    this.VirtualMachine.SetCommandHandler(\"random\", this.Command_Random);\n    this.VirtualMachine.SetCommandHandler(\"if\", this.Command_If);\n    this.VirtualMachine.SetCommandHandler(\"elseif\", this.Command_ElseIf);\n    this.VirtualMachine.SetCommandHandler(\"else\", this.Command_Else);\n    this.VirtualMachine.SetCommandHandler(\"endif\", this.Command_EndIf);\n    this.VirtualMachine.SetCommandHandler(\"set_active_conversation\", this.Command_SetActiveConversation);\n    this.VirtualMachine.SetCommandHandler(\"stop_conversation\", this.Command_StopConversation);\n    this.VirtualMachine.SetCommandHandler(\"visit_count\", this.Command_VisitCount);\n    this.VirtualMachine.SetCommandHandler(\"visited_count\", this.Command_VisitCount);\n    this.VirtualMachine.SetCommandHandler(\"visited_count_for_node\", this.Command_VisitCountForNode);\n    this.VirtualMachine.SetCommandHandler(\"visited_count_for_", "CodeBleu_score": 17.645754129733263}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.variableStorage = variableStorage;\n    this.library = new Library();\n    this.virtualMachine = new VirtualMachine(variableStorage);\n    this.library.ImportLibrary(new StandardLibrary());\n    this.library.RegisterFunction(\"nameof\", nameof);\n    this.library.RegisterFunction(\"GetNodeVisitCount\", GetNodeVisitCount);\n    this.library.RegisterFunction(\"IsNodeVisited\", IsNodeVisited);\n    this.lineParser = new LineParser();\n    this.lineParser.RegisterMarkerProcessor(\"select\", new SelectMarker());\n    this.lineParser.RegisterMarkerProcessor(\"plural\", new PluralMarker());\n    this.lineParser.RegisterMarkerProcessor(\"ordinal\", new OrdinalMarker());\n}", "CodeBleu_score": 34.20689436080601}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) { return -1; }\n\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) { return i; }\n\t}\n\treturn -1;\n}", "CodeBleu_score": 69.14236627806494}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) { return -1; }\n\n    for (int i = 0; i < loopListBankData.Count; i++) {\n        if (loopListBankData[i].UniqueID == UniqueID) { return i; }\n    }\n\n    return -1;\n}", "CodeBleu_score": 71.76404035057304}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n    return -1;\n}", "CodeBleu_score": 76.07852111545857}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\tLoopListBankData newData = new LoopListBankData();\n\tnewData.content = newContent;\n\tnewData.id = System.Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 44.879914705611434}, {"code": "public void AddContent(object newContent){\n\tLoopListBankData newData = new LoopListBankData();\n\tnewData.content = newContent;\n\tnewData.ID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 58.256756805686564}, {"code": "public void AddContent(object newContent){\n\tLoopListBankData newLoopListBankData = new LoopListBankData();\n    newLoopListBankData.content = newContent;\n    newLoopListBankData.id = System.Guid.NewGuid();\n    m_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 47.73376910653518}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_PrefabName + \"_\" + m_IndexID;\n\t}\n\tif (m_ClickUniqueID != \"\") {\n\t\tif (ClickUniqueID == m_ClickUniqueID) {\n\t\t\tif (m_ClickObject != null) {\n\t\t\t\tm_ClickObject = ClickObject;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.56575153382399}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tif (idx == m_IndexID) {\n    return;\n  }\n  m_IndexID = idx;\n  m_Content = content;\n  if (m_IsUpdateGameObjectName) {\n    gameObject.name = m_PrefabName + \" \" + idx;\n  }\n  if (m_IsUpdateContent) {\n    UpdateContent();\n  }\n  if (m_IsUpdateClickID) {\n    m_ClickUniqueID = ClickUniqueID;\n    m_ClickObject = ClickObject;\n  }\n}", "CodeBleu_score": 47.62097426533563}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tif (idx == -1) {\n    return;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  if (idx >= m_Indexes.Count) {\n    idx = m_Indexes.Count - 1;\n  }\n  if (m_Indexes[idx] == null) {\n    m_Indexes[idx] = new ScrollIndex();\n  }\n  m_Indexes[idx].m_IndexID = idx;\n  m_Indexes[idx].m_Content = content;\n  m_Indexes[idx].m_ClickUniqueID = ClickUniqueID;\n  m_Indexes[idx].m_ClickObject = ClickObject;\n  if (m_IsUpdateGameObjectName) {\n    if (m_Indexes[idx].m_GameObject != null) {\n      m_Indexes[idx].m_GameObject.name = string.Format(\"{0}[{1}]\", m_PrefabName, idx);\n    }\n  }\n}", "CodeBleu_score": 34.43326695370273}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t// Parse the input field text to determine the number of items to add.\n    // Ensure at least one item is added.\n    int numberOfItemsToAdd = Mathf.Max(1, int.Parse(m_InputFieldNumberOfItems.text));\n\n    // Add the items to the list bank.\n    for (int i = 0; i < numberOfItemsToAdd; i++) {\n        m_ListBank.AddContent(Random.Range(0, 10));\n    }\n\n    // Update the total count of the scroll rect.\n    m_InitOnStart.m_LoopScrollRect.totalCount = m_ListBank.GetListLength();\n\n    // Refresh the displayed cells.\n    m_InitOnStart.m_LoopScrollRect.RefreshCells();\n}", "CodeBleu_score": 48.26251983041657}, {"code": "private void OnButtonAddDataClickk(){\n\t// Parse the input field text to determine the number of items to add.\n    int numItemsToAdd = 1;\n    if (!int.TryParse(m_InputFieldAddData.text, out numItemsToAdd)) {\n        numItemsToAdd = 1;\n    }\n    numItemsToAdd = Mathf.Max(numItemsToAdd, 1);\n\n    // Add random integers between 0 and 10 to the list bank.\n    for (int i = 0; i < numItemsToAdd; i++) {\n        m_ListBank.AddContent(Random.Range(0, 10));\n    }\n\n    // Update the total count of the scroll rect.\n    m_InitOnStart.m_LoopScrollRect.totalCount = m_ListBank.Count;\n\n    // Refresh the displayed cells.\n    m_InitOnStart.m_LoopScrollRect.RefreshCells();\n}", "CodeBleu_score": 50.620889199365}, {"code": "private void OnButtonAddDataClickk(){\n\tint numItems = 1;\n    if (int.TryParse(m_InputFieldAddData.text, out numItems)) {\n        if (numItems < 1) {\n            numItems = 1;\n        }\n    }\n    for (int i = 0; i < numItems; i++) {\n        m_ListBank.AddContent(Random.Range(0, 10));\n    }\n    m_InitOnStart.m_LoopScrollRect.RefreshCells();\n    m_InitOnStart.m_LoopListBank.GetListLength();\n}", "CodeBleu_score": 42.30877003602077}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\tDebug.Assert(m_Content.childCount == m_Content.transform.childCount, \"Unexpected child count in content. Some items were added manually?\");\n\t\n\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\tif (m_FirstItemToDeleteIndex > 0) {\n\t\tfor (int i = 0; i < m_FirstItemToDeleteIndex; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_Content.GetChild(0));\n\t\t}\n\t\tm_Content.DetachChildren(0, m_FirstItemToDeleteIndex - 1);\n\t\tm_FirstItemToDeleteIndex = 0;\n\t}\n\t\n\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\tif (m_LastItemToDeleteIndex > 0) {\n\t\tfor (int i = 0; i < m_LastItemToDeleteIndex; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_Content.GetChild(m_Content.childCount - 1));\n\t\t}\n\t\tm_Content.DetachChildren(m_Content.childCount - m_LastItemToDeleteIndex, m_Content.childCount - 1);\n\t\tm_LastItemToDeleteIndex = 0;\n\t}\n}", "CodeBleu_score": 40.98929446370254}, {"code": "protected override void ClearTempPool(){\n\tDebug.Assert(m_Content.childCount == m_Content.GetChild(0).GetComponent<ContentSize>().TotalCount, \"ClearTempPool - Content size is incorrect\");\n\t\n\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\tif (m_StartIndex > 0) {\n\t\tfor (int i = 0; i < m_StartIndex; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_Content.GetChild(i));\n\t\t}\n\t\tm_Content.GetChild(0).GetComponent<ContentSize>().StartIndex = 0;\n\t\tm_Content.GetChild(0).GetComponent<ContentSize>().TotalCount -= m_StartIndex;\n\t\tm_StartIndex = 0;\n\t}\n\t\n\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\tif (m_EndIndex < m_Content.childCount) {\n\t\tfor (int i = m_EndIndex; i < m_Content.childCount; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_Content.GetChild(i));\n\t\t}\n\t\tm_Content.GetChild(0).GetComponent<ContentSize>().EndIndex = m_EndIndex;\n\t\tm_Content.GetChild(0).GetComponent<ContentSize>().TotalCount -= (m_Content.childCount - m_EndIndex);\n\t}\n}", "CodeBleu_score": 42.91607627868784}, {"code": "protected override void ClearTempPool(){\n\t//Debug.Log(\"ClearTempPool()\");\n\t//Debug.Log(\"ClearTempPool() - m_Content.childCount: \" + m_Content.childCount);\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(0).name: \" + m_Content.GetChild(0).name);\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(m_Content.childCount-1).name: \" + m_Content.GetChild(m_Content.childCount-1).name);\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(0).GetComponent<PoolObject>().ReturnObject(): \" + m_Content.GetChild(0).GetComponent<PoolObject>().ReturnObject());\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(m_Content.childCount-1).GetComponent<PoolObject>().ReturnObject(): \" + m_Content.GetChild(m_Content.childCount-1).GetComponent<PoolObject>().ReturnObject());\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(0).GetComponent<PoolObject>().ReturnObject(): \" + m_Content.GetChild(0).GetComponent<PoolObject>().ReturnObject());\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(m_Content.childCount-1).GetComponent<PoolObject>().ReturnObject(): \" + m_Content.GetChild(m_Content.childCount-1).GetComponent<PoolObject>().ReturnObject());\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(0).GetComponent<PoolObject>().ReturnObject(): \" + m_Content.GetChild(0).GetComponent<PoolObject>().ReturnObject());\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(m_Content.childCount-1).GetComponent<PoolObject>().ReturnObject(): \" + m_Content.GetChild(m_Content.childCount-1).GetComponent<PoolObject>().ReturnObject());\n\t//Debug.Log(\"ClearTempPool() - m_Content.GetChild(0).GetComponent<PoolObject>().ReturnObject(): \" +", "CodeBleu_score": 1.4048108298915671}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\tif (isNetworkActive && isNetworkListening) {\n        transform.localScale = newScale;\n        anticipatedScale = newScale;\n        if (allowAuthoritativeScale) {\n            authoritativeScale = newScale;\n        }\n        RecordAnticipatedTransform();\n        anticipationCounter++;\n        anticipationTime = Time.time;\n    }\n    smoothDuration = 0f;\n    smoothTime = 0f;\n}", "CodeBleu_score": 35.91341268114891}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t// If the network is active and listening, set the local and anticipated scales to the new value\n    if (Network.isActiveAndListening) {\n        transform.localScale = newScale;\n        anticipatedScale = newScale;\n    }\n\n    // If allowed, update the authoritative scale\n    if (allowAuthority) {\n        authoritativeScale = newScale;\n    }\n\n    // Record the anticipated transform and update the anticipation counters and times\n    RecordAnticipatedTransform();\n\n    // Reset the smooth transition duration and current smooth time\n    smoothTransitionDuration = 0.0f;\n    smoothTime = 0.0f;\n}", "CodeBleu_score": 22.9267341845238}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkingManager.singleton.IsServer && NetworkingManager.singleton.ConnectedClients.Count > 0) {\n        if (NetworkingManager.singleton.ConnectedClients[0].PlayerObject == null) {\n            return;\n        }\n        if (NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>() == null) {\n            return;\n        }\n        if (NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().localScale == newScale) {\n            return;\n        }\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().localScale = newScale;\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().anticipatedScale = newScale;\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().authorityScale = newScale;\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().recordedAnticipatedTransform = newScale;\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().anticipationCounter = 0;\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().anticipationTime = 0;\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().smoothTransitionDuration = 0;\n        NetworkingManager.singleton.ConnectedClients[0].PlayerObject.GetComponent<NetworkTransform>().currentSmoothTime = 0;\n    }\n}", "CodeBleu_score": 21.016402607028407}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\tforeach (AnimTriggerMessage msg in m_SendTriggerUpdates) {\n        if (isServer) {\n            m_NetworkAnimator.SendAnimTriggerServerRpc(msg.animatorId, msg.triggerName, msg.triggerState);\n        } else {\n            m_NetworkAnimator.SendAnimTriggerClientRpc(msg.animatorId, msg.triggerName, msg.triggerState);\n        }\n    }\n    m_SendTriggerUpdates.Clear();\n    foreach (AnimParameterMessage msg in m_SendParameterUpdates) {\n        if (isServer) {\n            m_NetworkAnimator.SendParametersUpdateServerRpc(msg.animatorId, msg.parameterName, msg.parameterValue);\n        } else {\n            m_NetworkAnimator.SendParametersUpdateClientRpc(msg.animatorId, msg.parameterName, msg.parameterValue);\n        }\n    }\n    m_SendParameterUpdates.Clear();\n    foreach (AnimStateMessage msg in m_SendAnimationUpdates) {\n        if (isServer) {\n            m_NetworkAnimator.SendAnimStateServerRpc(msg.animatorId, msg.stateName, msg.stateValue);\n        } else {\n            m_NetworkAnimator.SendAnimStateClientRpc(msg.animatorId, msg.stateName, msg.stateValue);\n        }\n    }\n    m_SendAnimationUpdates.Clear();\n}", "CodeBleu_score": 55.871754217452896}, {"code": "private void FlushMessages(){\n\t// Send animation updates\n    foreach (var update in m_SendAnimationUpdates) {\n        m_NetworkAnimator.SendAnimStateClientRpc(update.StateHash, update.NormalizedTime, update.LayerIndex, update.TriggerName);\n    }\n    m_SendAnimationUpdates.Clear();\n\n    // Send parameter updates\n    foreach (var update in m_SendParameterUpdates) {\n        m_NetworkAnimator.SendParametersUpdateClientRpc(update.StateHash, update.NormalizedTime, update.LayerIndex, update.ParameterName, update.Value);\n    }\n    m_SendParameterUpdates.Clear();\n\n    // Send trigger updates\n    foreach (var update in m_SendTriggerUpdates) {\n        m_NetworkAnimator.SendAnimTriggerServerRpc(update.StateHash, update.TriggerName);\n    }\n    m_SendTriggerUpdates.Clear();\n}", "CodeBleu_score": 61.923619034746515}, {"code": "private void FlushMessages(){\n\tif (m_SendAnimationUpdates.Count > 0) {\n        m_NetworkAnimator.SendAnimStateClientRpc(m_SendAnimationUpdates);\n        m_SendAnimationUpdates.Clear();\n    }\n    if (m_SendParameterUpdates.Count > 0) {\n        m_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates);\n        m_SendParameterUpdates.Clear();\n    }\n    if (m_SendTriggerUpdates.Count > 0) {\n        m_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates);\n        m_SendTriggerUpdates.Clear();\n    }\n}", "CodeBleu_score": 30.446009412324866}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServerAuthoritative) {\n            FlushMessages();\n        }\n    }\n    else if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        if (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServerAuthoritative) {\n            ProcessParameterUpdates();\n            CheckForAnimatorChanges();\n        }\n    }\n}", "CodeBleu_score": 17.778550118374753}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (isOwner || isServer) {\n\t\t\tFlushMessages();\n\t\t}\n\t\tProcessParameterUpdates();\n\t\tCheckForAnimatorChanges();\n\t}\n}", "CodeBleu_score": 12.440467148390344}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tFlushMessages();\n\t}\n\tif (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tProcessParameterUpdates();\n\t\tCheckForAnimatorChanges();\n\t}\n}", "CodeBleu_score": 17.662652042817125}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t// If the server is authoritative, then the server should always be the authority.\n    if (serverAuthoritative) {\n        if (serverAuthority) {\n            ownershipAuthority = Authority.Server;\n        } else {\n            ownershipAuthority = Authority.Client;\n        }\n    } else {\n        // If the server is not authoritative, then the server is not the authority.\n        // The server will only be the authority if the object is server owned.\n        if (serverOwned) {\n            ownershipAuthority = Authority.Server;\n        } else {\n            ownershipAuthority = Authority.Client;\n        }\n    }\n\n    // Set the object's authority state.\n    if (ownershipAuthority == Authority.Server) {\n        // Set the object's authority state to server authority.\n        if (serverAuthority) {\n            // Set the object's authority state to server authority.\n            if (serverAuthoritative) {\n                // Set the object's authority state to server authority.\n                if (serverOwned) {\n                    // Set the object's authority state to server authority.\n                    if (serverAuthority) {\n                        // Set the object's authority state to server authority.\n                        if (serverAuthoritative) {\n                            // Set the object's authority state to server authority.\n                            if (serverOwned) {\n                                // Set the object's authority state to server authority.\n                                if (serverAuthority) {\n                                    // Set the object's authority state to server authority.\n                                    if (serverAuthoritative) {\n                                        // Set the object's authority state to server authority.\n                                        if (serverOwned) {\n                                            // Set the object's authority state to server authority.\n                                            if (serverAuthority) {\n                                                // Set the object's authority state to server authority.\n                                                if (serverAuthoritative) {\n                                                    // Set the object's authority state to server authority.\n                                                    if (serverOwned) {\n                                                        // Set the object's authority state to server authority.\n                                                        if (server", "CodeBleu_score": 21.03600873494575}, {"code": "private void UpdateOwnershipAuthority(){\n\tif (Networking.IsOwner(gameObject)) {\n        // If we are the owner, we should be authoritative\n        if (networkedObject.ownershipState == NetworkedObject.OwnershipState.Authoritative) {\n            // If we are authoritative, we should be authoritative\n            networkedObject.ownershipState = NetworkedObject.OwnershipState.Authoritative;\n            if (networkedObject.GetComponent<Rigidbody>() != null) {\n                networkedObject.GetComponent<Rigidbody>().isKinematic = false;\n                networkedObject.GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n            }\n        } else {\n            // If we are not authoritative, we should be authoritative\n            networkedObject.ownershipState = NetworkedObject.OwnershipState.Authoritative;\n            if (networkedObject.GetComponent<Rigidbody>() != null) {\n                networkedObject.GetComponent<Rigidbody>().isKinematic = false;\n                networkedObject.GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n            }\n        }\n    } else {\n        // If we are not the owner, we should be non-authoritative\n        if (networkedObject.ownershipState == NetworkedObject.OwnershipState.Authoritative) {\n            // If we are authoritative, we should be non-authoritative\n            networkedObject.ownershipState = NetworkedObject.OwnershipState.NonAuthoritative;\n            if (networkedObject.GetComponent<Rigidbody>() != null) {\n                networkedObject.GetComponent<Rigidbody>().isKinematic = true;\n                networkedObject.GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;\n            }\n        } else {\n            // If we are not authoritative, we should be non-authoritative\n            networkedObject.ownershipState = NetworkedObject.OwnershipState.NonAuthoritative;\n            if (networkedObject.GetComponent<Rigidbody>() != null) {", "CodeBleu_score": 21.719035970070728}, {"code": "private void UpdateOwnershipAuthority(){\n\t// If the object is owned by a client, it is the client's authority\n    if (IsOwnedByClient()) {\n        // Set the object's authority to the client\n        GetComponent<NetworkIdentity>().AssignClientAuthority(NetworkClient.localPlayer);\n        // Set the object's Rigidbody to kinematic and interpolate\n        GetComponent<Rigidbody>().isKinematic = true;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n    }\n    // If the object is not owned by a client, it is the server's authority\n    else {\n        // Set the object's authority to the server\n        GetComponent<NetworkIdentity>().AssignClientAuthority(null);\n        // Set the object's Rigidbody to non-kinematic and extrapolate\n        GetComponent<Rigidbody>().isKinematic = false;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Extrapolate;\n    }\n}", "CodeBleu_score": 22.6182712606483}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\tfloat a = (float)(compressed & 0x3FF) / 1023;\n\tfloat b = (float)((compressed >> 10) & 0x3FF) / 1023;\n\tfloat c = (float)((compressed >> 20) & 0x3FF) / 1023;\n\tfloat d = 0;\n\t\n\tint largestIndex = 3;\n\tif (a > b && a > c) {\n\t\tlargestIndex = 0;\n\t} else if (b > c) {\n\t\tlargestIndex = 1;\n\t} else {\n\t\tlargestIndex = 2;\n\t}\n\t\n\tswitch (largestIndex) {\n\t\tcase 0:\n\t\t\td = Mathf.Sqrt(1 - a*a - b*b - c*c);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\td = Mathf.Sqrt(1 - a*a - b*b - c*c);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\td = Mathf.Sqrt(1 - a*a - b*b - c*c);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\td = Mathf.Sqrt(1 - a*a - b*b - c*c);\n\t\t\tbreak;\n\t}\n\t\n\tswitch (largestIndex) {\n\t\tcase 0:\n\t\t\tquaternion.x = a;\n\t\t\tquaternion.y = b;\n\t\t\tquaternion.z = c;\n\t\t\tquaternion.w = d;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tquaternion.x = b;\n\t\t\tquaternion.y = a;\n\t\t\tquaternion.z = c;\n\t\t\tquaternion.w = d;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tquaternion.x = c;\n\t\t\tquaternion.y = a;\n\t\t\tquaternion.z =", "CodeBleu_score": 24.436800446074518}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\tvar missingComponent = (QuaternionComponent)((compressed >> 30) & 0x3);\n\tvar compressedComponent = (QuaternionComponent)((compressed >> 28) & 0x3);\n\tvar compressedValue = (compressed & 0xFFFFFFF);\n\t\n\tvar componentValues = new float[4];\n\t\n\tfor (int i = 0; i < 4; i++) {\n\t\tvar component = (QuaternionComponent)i;\n\t\tif (component == missingComponent) {\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tvar value = (float)compressedValue / (float)((1 << 28) - 1);\n\t\tcomponentValues[i] = value;\n\t\t\n\t\tif (component == compressedComponent) {\n\t\t\tcomponentValues[i] *= -1;\n\t\t}\n\t}\n\t\n\tvar sumOfSquaredMagnitudes = 0f;\n\tfor (int i = 0; i < 4; i++) {\n\t\tsumOfSquaredMagnitudes += componentValues[i] * componentValues[i];\n\t}\n\t\n\tvar missingComponentValue = Mathf.Sqrt(1 - sumOfSquaredMagnitudes);\n\tcomponentValues[(int)missingComponent] = missingComponentValue;\n\t\n\tquaternion.x = componentValues[0];\n\tquaternion.y = componentValues[1];\n\tquaternion.z = componentValues[2];\n\tquaternion.w = componentValues[3];\n}", "CodeBleu_score": 32.60704768540885}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\tfloat a = 0.0f;\n    float b = 0.0f;\n    float c = 0.0f;\n    float d = 0.0f;\n    float lengthSquared = 0.0f;\n\n    // Determine which component to skip based on the highest two bits\n    if ((compressed & 0xC0000000) == 0) {\n        // Skip W\n        a = DecompressFloat(compressed, 0, 10, 5, 15);\n        b = DecompressFloat(compressed, 10, 11, 5, 15);\n        c = DecompressFloat(compressed, 21, 11, 5, 15);\n        d = 1.0f - a * a - b * b - c * c;\n        if (d < 0.0f) {\n            d = 0.0f;\n        }\n        else {\n            d = Mathf.Sqrt(d);\n        }\n    }\n    else if ((compressed & 0x80000000) == 0) {\n        // Skip Z\n        a = DecompressFloat(compressed, 0, 10, 5, 15);\n        b = DecompressFloat(compressed, 10, 11, 5, 15);\n        c = 1.0f - a * a - b * b;\n        if (c < 0.0f) {\n            c = 0.0f;\n        }\n        else {\n            c = Mathf.Sqrt(c);\n        }\n        d = DecompressFloat(compressed, 21, 11, 5, 15);\n    }\n    else if ((compressed & 0x40000000) == 0) {\n        // Skip Y\n        a = DecompressFloat(compressed, 0, 10, 5, 15);\n        b = 1.0f - a * a;\n        if (b < 0", "CodeBleu_score": 26.875849241979278}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t//Initialize ILRuntime\n    AppDomain appdomain = new AppDomain();\n    appdomain.LoadAssembly(typeof(Debug).Assembly);\n    appdomain.LoadAssembly(typeof(MonoBehaviour).Assembly);\n    appdomain.LoadAssembly(typeof(ParticleSystem).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.UI.Text).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.UIBehaviour).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.BaseInput).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.EventSystem).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.EventTrigger).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.PointerEventData).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.StandaloneInputModule).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.TouchInputModule).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.BaseRaycaster).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.PhysicsRaycaster).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.Physics2DRaycaster).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.GraphicsRaycaster).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.RaycastResult).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.RaycastTarget).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.ExecuteEvents).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.BaseInputModule).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.AxisEventData).Assembly);\n    appdomain.LoadAssembly(typeof(UnityEngine.EventSystems.PointerInputModule).Assembly);\n    appdomain.LoadAssembly(", "CodeBleu_score": 12.25709501201447}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppDomain\uff0c\u907f\u514d\u7c7b\u578b\u51b2\u7a81\n    AppDomain appDomain = AppDomain.CreateDomain(\"ILRuntime\");\n    // \u52a0\u8f7d\u7a0b\u5e8f\u96c6\n    Assembly assembly = appDomain.Load(File.ReadAllBytes(Application.dataPath + \"/HotFix_Project/HotFix_Project.dll.bytes\"));\n    // \u521d\u59cb\u5316ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __domain.LoadAssembly(assembly, null, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n    // \u5f00\u59cb\u5206\u6790\u7a0b\u5e8f\u96c6\n    __domain.Analysis();\n    // \u751f\u6210CLR\u7ed1\u5b9a\u4ee3\u7801\n    string bindingCode = __domain.GenerateCode();\n    // \u5199\u5165\u6587\u4ef6\n    using (StreamWriter sw = new StreamWriter(\"Assets/ILRuntime/Binding/ILRuntimeBinding.cs\")) {\n        sw.Write(bindingCode);\n    }\n    // \u5237\u65b0AssetDatabase\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 23.52677295181014}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t//\u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppDomain\n    AppDomain appdomain = AppDomain.CreateDomain(\"ILRuntime\");\n\n    //\u4ece\u6307\u5b9a\u6587\u4ef6\u4e2d\u52a0\u8f7d\u7a0b\u5e8f\u96c6\n    Assembly assembly = appdomain.Load(File.ReadAllBytes(Application.dataPath + \"/HotFix_Project/DLL/HotFix_Project.dll.bytes\"));\n\n    //\u521d\u59cb\u5316ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __domain.LoadAssembly(assembly);\n\n    //\u751f\u6210\u7ed1\u5b9a\u4ee3\u7801\n    string code = __domain.GenerateCSharpBinder(\"HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_Project.HotFix_", "CodeBleu_score": 16.026902911660923}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t// Update the serialized object\n    serializedObject.Update();\n\n    // Display the config count\n    EditorGUILayout.LabelField(\"Config Count\", target.Count.ToString());\n\n    // If the application is playing and the target is a prefab in the hierarchy, display the cached bytes size\n    if (Application.isPlaying && PrefabUtility.IsPrefabInHierarchy(target)) {\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", target.CachedBytesSize.ToString());\n    }\n\n    // Display the config helper info\n    m_ConfigHelperInfo.Draw();\n\n    // If the application is playing and the target is a prefab in the hierarchy, disable the inspector\n    if (Application.isPlaying && PrefabUtility.IsPrefabInHierarchy(target)) {\n        EditorGUI.BeginDisabledGroup(true);\n    }\n\n    // Display the config helper property\n    EditorGUILayout.PropertyField(m_ConfigHelper);\n\n    // Display the configs property\n    EditorGUILayout.PropertyField(m_Configs);\n\n    // If the application is playing and the target is a prefab in the hierarchy, re-enable the inspector\n    if (Application.isPlaying && PrefabUtility.IsPrefabInHierarchy(target)) {\n        EditorGUI.EndDisabledGroup();\n    }\n\n    // Apply any modified properties\n    serializedObject.ApplyModifiedProperties();\n\n    // Repaint the inspector\n    Repaint();\n}", "CodeBleu_score": 60.51769404930924}, {"code": "public override void OnInspectorGUI(){\n\tbase.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && EditorUtility.IsPrefabInHierarchy(target));\n    {\n        EditorGUILayout.PropertyField(m_ConfigHelperInfo);\n    }\n    EditorGUI.EndDisabledGroup();\n\n    if (EditorApplication.isPlaying && EditorUtility.IsPrefabInHierarchy(target)) {\n        ConfigComponent t = (ConfigComponent)target;\n        EditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 73.06787873764617}, {"code": "public override void OnInspectorGUI(){\n\tbase.OnInspectorGUI();\n    serializedObject.Update();\n\n    EditorGUI.BeginDisabledGroup(Application.isPlaying && EditorUtility.IsPrefabInHierarchy(target));\n    EditorGUILayout.PropertyField(m_ConfigHelperInfo);\n    EditorGUI.EndDisabledGroup();\n\n    if (Application.isPlaying && EditorUtility.IsPrefabInHierarchy(target)) {\n        var t = (ConfigComponent)target;\n        EditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 67.54756122965799}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\tHashSet<string> defaultScenes = new HashSet<string> {\n\t\t\"Assets/Scenes/01_Title.unity\",\n\t\t\"Assets/Scenes/02_Main.unity\",\n\t\t\"Assets/Scenes/03_GameOver.unity\"\n\t};\n\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tscenes.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 53.49406105717838}, {"code": "public static void DefaultScenes(){\n\tHashSet<string> defaultScenes = new HashSet<string>() {\n\t\t\"Assets/Scenes/MainMenu.unity\",\n\t\t\"Assets/Scenes/Game.unity\",\n\t\t\"Assets/Scenes/Level1.unity\",\n\t\t\"Assets/Scenes/Level2.unity\",\n\t\t\"Assets/Scenes/Level3.unity\",\n\t\t\"Assets/Scenes/Level4.unity\",\n\t\t\"Assets/Scenes/Level5.unity\",\n\t\t\"Assets/Scenes/Level6.unity\",\n\t\t\"Assets/Scenes/Level7.unity\",\n\t\t\"Assets/Scenes/Level8.unity\",\n\t\t\"Assets/Scenes/Level9.unity\",\n\t\t\"Assets/Scenes/Level10.unity\",\n\t\t\"Assets/Scenes/Level11.unity\",\n\t\t\"Assets/Scenes/Level12.unity\",\n\t\t\"Assets/Scenes/Level13.unity\",\n\t\t\"Assets/Scenes/Level14.unity\",\n\t\t\"Assets/Scenes/Level15.unity\",\n\t\t\"Assets/Scenes/Level16.unity\",\n\t\t\"Assets/Scenes/Level17.unity\",\n\t\t\"Assets/Scenes/Level18.unity\",\n\t\t\"Assets/Scenes/Level19.unity\",\n\t\t\"Assets/Scenes/Level20.unity\",\n\t\t\"Assets/Scenes/Level21.unity\",\n\t\t\"Assets/Scenes/Level22.unity\",\n\t\t\"Assets/Scenes/Level23.unity\",\n\t\t\"Assets/Scenes/Level24.unity\",\n\t\t\"Assets/Scenes/Level25.unity\",\n\t\t\"Assets/Scenes/Level26.unity\",\n\t\t\"Assets/Scenes/Level27.unity\",\n\t\t\"Assets/Scenes/Level28.unity\",\n\t\t\"Assets/Scenes/Level29.unity\",\n\t\t\"Assets/Scenes/Level", "CodeBleu_score": 11.091498788603943}, {"code": "public static void DefaultScenes(){\n\t// Create a HashSet of default scene names\n    HashSet<string> defaultScenes = new HashSet<string>() {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/MainGame.unity\",\n        \"Assets/Scenes/MainGame_2.unity\",\n        \"Assets/Scenes/MainGame_3.unity\",\n        \"Assets/Scenes/MainGame_4.unity\",\n        \"Assets/Scenes/MainGame_5.unity\",\n        \"Assets/Scenes/MainGame_6.unity\",\n        \"Assets/Scenes/MainGame_7.unity\",\n        \"Assets/Scenes/MainGame_8.unity\",\n        \"Assets/Scenes/MainGame_9.unity\",\n        \"Assets/Scenes/MainGame_10.unity\",\n        \"Assets/Scenes/MainGame_11.unity\",\n        \"Assets/Scenes/MainGame_12.unity\",\n        \"Assets/Scenes/MainGame_13.unity\",\n        \"Assets/Scenes/MainGame_14.unity\",\n        \"Assets/Scenes/MainGame_15.unity\",\n        \"Assets/Scenes/MainGame_16.unity\",\n        \"Assets/Scenes/MainGame_17.unity\",\n        \"Assets/Scenes/MainGame_18.unity\",\n        \"Assets/Scenes/MainGame_19.unity\",\n        \"Assets/Scenes/MainGame_20.unity\",\n        \"Assets/Scenes/MainGame_21.unity\",\n        \"Assets/Scenes/MainGame_22.unity\",\n        \"Assets/Scenes/MainGame_23.unity\",\n        \"Assets/Scenes/MainGame_24.unity\",\n        \"Assets/Scenes/MainGame_25.unity\",\n        \"Assets/Scenes/MainGame_26.unity\",\n        \"Assets/Scenes/MainGame_27.unity\",\n        \"Assets/Scenes/MainGame_28.unity\",\n        \"Assets", "CodeBleu_score": 11.819589271246409}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t// Draw a popup for selecting a helper type\n\tEditorGUI.BeginChangeCheck();\n\tint selectedIndex = EditorGUILayout.Popup(helperTypeLabel, helperTypeIndex, helperTypeNames);\n\tif (EditorGUI.EndChangeCheck()) {\n\t\thelperTypeIndex = selectedIndex;\n\t\thelperType = helperTypes[helperTypeIndex];\n\t}\n\n\t// Draw a field for a custom helper\n\tEditorGUILayout.PropertyField(customHelper, customHelperLabel);\n\n\t// Show an error message if no helper type is selected\n\tif (helperTypeIndex == 0 && customHelper.objectReferenceValue == null) {\n\t\tEditorGUILayout.HelpBox(helperTypeError, MessageType.Error);\n\t}\n}", "CodeBleu_score": 25.89753275989861}, {"code": "public void Draw(){\n\tEditorGUILayout.BeginHorizontal();\n    EditorGUILayout.LabelField(new GUIContent(\"Helper\", \"Helper type for this object\"), EditorStyles.boldLabel);\n    EditorGUILayout.EndHorizontal();\n\n    EditorGUILayout.BeginHorizontal();\n\n    EditorGUI.BeginChangeCheck();\n    int newSelectedIndex = EditorGUILayout.Popup(selectedIndex, helperTypeNames);\n    if (EditorGUI.EndChangeCheck()) {\n        selectedIndex = newSelectedIndex;\n    }\n\n    if (selectedIndex == 0) {\n        EditorGUILayout.EndHorizontal();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        EditorGUILayout.Space();\n        Editor", "CodeBleu_score": 22.99852811486417}, {"code": "public void Draw(){\n\tif (this.helperTypes != null && this.helperTypes.Length > 0) {\n        EditorGUILayout.BeginHorizontal();\n        EditorGUILayout.LabelField(new GUIContent(\"Helper\", \"The helper type to use for this interaction.\"));\n        EditorGUI.BeginChangeCheck();\n        this.selectedIndex = EditorGUILayout.Popup(this.selectedIndex, this.helperTypeOptions);\n        if (EditorGUI.EndChangeCheck()) {\n            this.serializedObject.Update();\n            this.helperType.stringValue = this.helperTypes[this.selectedIndex];\n            this.serializedObject.ApplyModifiedProperties();\n        }\n        EditorGUILayout.EndHorizontal();\n    }\n    if (this.selectedIndex == 0) {\n        EditorGUILayout.PropertyField(this.customHelper);\n        if (this.customHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 35.974717487558124}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\tRemoveScriptingDefineSymbol(GeneralLoggingSymbol);\n\tfor(int i = 0; i < LogLevels.Length; i++) {\n\t\tRemoveScriptingDefineSymbol(LogLevels[i].Symbol);\n\t}\n\tfor(int i = 0; i < Logs.Length; i++) {\n\t\tRemoveScriptingDefineSymbol(Logs[i].Symbol);\n\t}\n}", "CodeBleu_score": 37.5218904322962}, {"code": "public static void DisableAllLogs(){\n\tRemoveScriptingDefineSymbol(LOGGING_GENERAL_SYMBOL);\n\tfor (int i = 0; i < LOGGING_LEVELS.Length; i++) {\n\t\tRemoveScriptingDefineSymbol(LOGGING_LEVELS[i]);\n\t}\n}", "CodeBleu_score": 23.62334131075065}, {"code": "public static void DisableAllLogs(){\n\tRemoveScriptingDefineSymbol(GeneralLoggingSymbol);\n\tforeach (LogType logType in Enum.GetValues(typeof(LogType))) {\n\t\tif (logType >= GeneralLoggingLevel) {\n\t\t\tRemoveScriptingDefineSymbol(logType.ToString());\n\t\t}\n\t}\n}", "CodeBleu_score": 25.99517023658111}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tGameFrameworkComponent current = this.firstComponent;\n\twhile (current != null) {\n\t\tif (current.Value.GetType() == type) {\n\t\t\treturn current.Value;\n\t\t}\n\t\tcurrent = current.NextComponent;\n\t}\n\treturn null;\n}", "CodeBleu_score": 64.82179632876596}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tGameFrameworkComponent current = this.firstComponent;\n\twhile (current != null) {\n\t\tif (current.Value.GetType() == type) {\n\t\t\treturn current.Value;\n\t\t}\n\t\tcurrent = current.NextComponent;\n\t}\n\treturn null;\n}", "CodeBleu_score": 64.82179632876596}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tGameFrameworkComponent current = this.firstComponent;\n\twhile (current != null) {\n\t\tif (current.Value.GetType() == type) {\n\t\t\treturn current.Value;\n\t\t}\n\t\tcurrent = current.Next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 65.83551544650052}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\tswitch (shutdownType) {\n        case ShutdownType.Restart:\n            Log.Info(\"Restarting game scene...\");\n            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            break;\n        case ShutdownType.Quit:\n            Log.Info(\"Quitting application...\");\n            Application.Quit();\n            break;\n        case ShutdownType.None:\n            break;\n        default:\n            Log.Error(\"Invalid shutdown type.\");\n            break;\n    }\n\n    Log.Info(\"Shutting down game framework...\");\n    BaseComponent baseComponent = GetComponent<BaseComponent>();\n    if (baseComponent != null) {\n        baseComponent.Shutdown();\n    }\n    s_GameFrameworkComponents.Clear();\n}", "CodeBleu_score": 41.63146108647311}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\tLog.Info(\"Shutting down the game framework...\");\n\n    // If the base component exists, shut it down\n    if (GetComponent<BaseComponent>()) {\n        GetComponent<BaseComponent>().Shutdown();\n    }\n\n    // Clear game framework components\n    s_GameFrameworkComponents.Clear();\n\n    // If the shutdown type is Restart, restart the game scene\n    if (shutdownType == ShutdownType.Restart) {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n    }\n    // If the shutdown type is Quit, quit the application\n    else if (shutdownType == ShutdownType.Quit) {\n        Application.Quit();\n    }\n}", "CodeBleu_score": 31.27201274716026}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\tLog.Info(\"Shutting down the game framework...\");\n\tif (s_BaseComponent != null) {\n\t\ts_BaseComponent.Shutdown();\n\t}\n\ts_GameFrameworkComponents.Clear();\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t\tcase ShutdownType.None:\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 22.659904164313577}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\tbase.Awake();\n\n    // Obtain the configuration manager from the GameFrameworkEntry module\n    configManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (configManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    // Subscribe to events for reading data success and failure\n    configManager.ReadDataSuccess += OnReadDataSuccess;\n    configManager.ReadDataFailure += OnReadDataFailure;\n\n    // Subscribe to events for updating and dependency asset events based on specific flags\n    if ((loadType & LoadType.Update) > 0) {\n        configManager.UpdateDataSuccess += OnUpdateDataSuccess;\n        configManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n\n    if ((loadType & LoadType.DependencyAsset) > 0) {\n        configManager.LoadDependencyAssetSuccess += OnLoadDependencyAssetSuccess;\n        configManager.LoadDependencyAssetFailure += OnLoadDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 64.05503289306945}, {"code": "protected override void Awake(){\n\tbase.Awake();\n\n    // Obtains the config manager from the GameFrameworkEntry module\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\n    // Checks if the config manager is valid\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    // Subscribes to events for reading data success and failure, and optionally to update and dependency asset events based on specific flags\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    if ((m_LoadType & LoadType.Update) != 0) {\n        m_ConfigManager.UpdateDataSuccess += OnUpdateDataSuccess;\n        m_ConfigManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n    if ((m_LoadType & LoadType.DependencyAsset) != 0) {\n        m_ConfigManager.LoadDependencyAssetSuccess += OnLoadDependencyAssetSuccess;\n        m_ConfigManager.LoadDependencyAssetFailure += OnLoadDependencyAssetFailure;\n        m_ConfigManager.LoadDependencyAssetUpdate += OnLoadDependencyAssetUpdate;\n        m_ConfigManager.LoadDependencyAssetDependencyAsset += OnLoadDependencyAssetDependencyAsset;\n    }\n}", "CodeBleu_score": 69.35412412332286}, {"code": "protected override void Awake(){\n\tbase.Awake();\n\tLog.Fatal(m_ConfigManager == null, \"Config manager is invalid.\");\n\tm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tm_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tm_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\tif ((m_Flags & ConfigFlags.UpdateConfig) != 0) {\n\t\tm_ConfigManager.UpdateConfigSuccess += OnUpdateConfigSuccess;\n\t\tm_ConfigManager.UpdateConfigFailure += OnUpdateConfigFailure;\n\t}\n\tif ((m_Flags & ConfigFlags.UpdateDictionary) != 0) {\n\t\tm_ConfigManager.UpdateDictionarySuccess += OnUpdateDictionarySuccess;\n\t\tm_ConfigManager.UpdateDictionaryFailure += OnUpdateDictionaryFailure;\n\t}\n}", "CodeBleu_score": 55.38637575382642}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif (configAsset == null) {\n\t\tLog.Warning(\"Config asset is null!\");\n\t\treturn false;\n\t}\n\tif (!(configAsset is TextAsset)) {\n\t\tLog.Warning(\"Config asset is not a TextAsset!\");\n\t\treturn false;\n\t}\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\tconfigManager.ParseData(textAsset.bytes, userData);\n\t}\n\telse {\n\t\tconfigManager.ParseData(textAsset.text, userData);\n\t}\n\treturn true;\n}", "CodeBleu_score": 55.715610020437865}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif(!(configAsset is TextAsset)) {\n\t\tLog.Warning(\"Invalid config asset type. Expected TextAsset, received \" + configAsset.GetType().Name + \".\");\n\t\treturn false;\n\t}\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tif(configAssetName.EndsWith(\".bytes\")) {\n\t\treturn configManager.ParseData(textAsset.bytes, userData);\n\t}\n\telse {\n\t\treturn configManager.ParseData(textAsset.text, userData);\n\t}\n}", "CodeBleu_score": 57.396302057799446}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif (configAsset is TextAsset) {\n\t\tTextAsset textAsset = (TextAsset)configAsset;\n\t\tstring text = textAsset.text;\n\t\tif (configAssetName.EndsWith(\".json\")) {\n\t\t\treturn configManager.ParseData(text, ConfigType.JSON, userData);\n\t\t} else if (configAssetName.EndsWith(\".xml\")) {\n\t\t\treturn configManager.ParseData(text, ConfigType.XML, userData);\n\t\t} else if (configAssetName.EndsWith(\".csv\")) {\n\t\t\treturn configManager.ParseData(text, ConfigType.CSV, userData);\n\t\t} else if (configAssetName.EndsWith(\".yaml\") || configAssetName.EndsWith(\".yml\")) {\n\t\t\treturn configManager.ParseData(text, ConfigType.YAML, userData);\n\t\t} else {\n\t\t\tLog.Warning(\"Unknown config file extension: \" + configAssetName);\n\t\t\treturn false;\n\t\t}\n\t} else if (configAsset is byte[]) {\n\t\tbyte[] bytes = (byte[])configAsset;\n\t\tif (configAssetName.EndsWith(\".json\")) {\n\t\t\treturn configManager.ParseData(bytes, ConfigType.JSON, userData);\n\t\t} else if (configAssetName.EndsWith(\".xml\")) {\n\t\t\treturn configManager.ParseData(bytes, ConfigType.XML, userData);\n\t\t} else if (configAssetName.EndsWith(\".csv\")) {\n\t\t\treturn configManager.ParseData(bytes, ConfigType.CSV, userData);\n\t\t} else if (configAssetName.EndsWith(\".yaml\") || configAssetName.EndsWith(\".yml\")) {\n\t\t\treturn configManager.ParseData(bytes, ConfigType.YAML, userData);\n\t\t} else {\n\t\t\tLog.Warning(\"Unknown config file extension: \" + configAssetName);\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tLog.Warning(\"Invalid config asset type: \" + configAssetName);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 48.09513690400767}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\ttry {\n\t\tusing (MemoryStream ms = new MemoryStream(configBytes, startIndex, length))\n\t\tusing (BinaryReader binaryReader = new BinaryReader(ms)) {\n\t\t\twhile (ms.Position < ms.Length) {\n\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\tLog.Warning($\"Could not add config entry \\\"{configName}\\\" with value \\\"{configValue}\\\".\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tLog.Warning($\"Exception caught while parsing configuration data: {ex}\");\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 53.26628705970835}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Failed to add config entry for '{0}={1}'\", configName, configValue);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tLog.Exception(ex);\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 59.952647200929995}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\tif (configManager == null) {\n        throw new ArgumentNullException(\"configManager\");\n    }\n    if (configBytes == null) {\n        throw new ArgumentNullException(\"configBytes\");\n    }\n    if (startIndex < 0) {\n        throw new ArgumentOutOfRangeException(\"startIndex\");\n    }\n    if (length < 0) {\n        throw new ArgumentOutOfRangeException(\"length\");\n    }\n    if (startIndex + length > configBytes.Length) {\n        throw new ArgumentException(\"startIndex and length must be smaller than or equal to the length of configBytes\");\n    }\n    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n                while (memoryStream.Position < memoryStream.Length) {\n                    string configName = binaryReader.ReadString();\n                    string configValue = binaryReader.ReadString();\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Failed to add config entry with name \" + configName + \" and value \" + configValue);\n                        return false;\n                    }\n                }\n            }\n        }\n    } catch (Exception e) {\n        Log.Exception(e);\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 63.625140641237806}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\tconfigManager.ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 48.02988032410344}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\tif (configManager == null) {\n        throw new ArgumentNullException(\"configManager\");\n    }\n    if (configAsset == null) {\n        throw new ArgumentNullException(\"configAsset\");\n    }\n    configManager.ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 47.0902343051534}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\tif (configManager == null) {\n\t\tthrow new System.ArgumentNullException(\"configManager\");\n\t}\n\tif (configAsset == null) {\n\t\tthrow new System.ArgumentNullException(\"configAsset\");\n\t}\n\tconfigManager.ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 46.99439903937607}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs e = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n\t\te.LastActiveScene = lastActiveScene;\n\t\te.ActiveScene = activeScene;\n\t\treturn e;\n\t}", "CodeBleu_score": 47.920914631026065}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tvar args = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    args.LastActiveScene = lastActiveScene;\n    args.ActiveScene = activeScene;\n    return args;\n}", "CodeBleu_score": 38.58771153220955}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tvar instance = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    instance.lastActiveScene = lastActiveScene;\n    instance.activeScene = activeScene;\n    return instance;\n}", "CodeBleu_score": 38.550371979106856}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is null or empty.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name does not start with \\\"Assets/\\\" or end with \\\".unity\\\".\");\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 67.09123101409672}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is null or empty.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\")) {\n        Log.Error(\"Scene asset name must start with \\\"Assets/\\\".\nName: \" + sceneAssetName);\n        return;\n    }\n\n    if (!sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name must end with \\\".unity\\\".\nName: \" + sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 68.4099839355552}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is null or empty.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name is not valid.\");\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 67.04114482502092}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\tTArray<IBinariesDiffPatchFeature*> binariesDiffPatchFeatureImplementations;\n    IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>(binariesDiffPatchFeatureImplementations);\n    for (IBinariesDiffPatchFeature* binariesDiffPatchFeatureImplementation : binariesDiffPatchFeatureImplementations) {\n        UE_LOG(LogHotPatcher, Log, TEXT(\"Register BinariesDiffPatchFeature %s\"), *binariesDiffPatchFeatureImplementation->GetFeatureName());\n        EBinariesPatchFeature::Type binariesPatchFeatureType = EBinariesPatchFeature::Type(EBinariesPatchFeature::Type::Num);\n        if (binariesDiffPatchFeatureImplementation->GetFeatureName().Equals(TEXT(\"BinariesDiffPatchFeature_Default\"), ESearchCase::IgnoreCase)) {\n            binariesPatchFeatureType = EBinariesPatchFeature::BinariesDiffPatchFeature_Default;\n        }\n        if (binariesPatchFeatureType != EBinariesPatchFeature::Type::Num) {\n            FBinariesPatchFeature::Get().AppendEnumeraters(binariesPatchFeatureType);\n        }\n    }\n    IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 49.159600560991194}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t// Register the binaries patch feature module as a modular feature.\n    IModularFeatures::Get().RegisterModularFeature(GetModularFeatureName(), this);\n\n    // Register callbacks for when modular features are registered or unregistered.\n    IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n    // Append the names of registered feature implementations to the binaries patch feature enumerations.\n    TArray<IBinariesDiffPatchFeature*> binariesDiffPatchFeatures = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>(GetModularFeatureName());\n    for (IBinariesDiffPatchFeature* binariesDiffPatchFeature : binariesDiffPatchFeatures) {\n        FBinariesPatchFeatureModule::AppendEnumeraters<EBinariesDiffPatchFeature>(binariesDiffPatchFeature->GetFeatureName());\n    }\n\n    TArray<IBinariesPatchFeature*> binariesPatchFeatures = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(GetModularFeatureName());\n    for (IBinariesPatchFeature* binariesPatchFeature : binariesPatchFeatures) {\n        FBinariesPatchFeatureModule::AppendEnumeraters<EBinariesPatchFeature>(binariesPatchFeature->GetFeatureName());\n    }\n\n    TArray<IBinariesPatchFeature*> binariesPatchFeatureCreators = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeatureCreator>(GetModularFeatureName());\n    for (IBinariesPatchFeature* binariesPatchFeatureCreator : binariesPatchFeatureCreators) {\n        FBinariesPatchFeatureModule::AppendEnumeraters<EBinariesPatchFeatureCreator>(binariesPatchFeatureCreator->GetFeatureName());\n    }\n}", "CodeBleu_score": 47.54470938851559}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\tTArray<IBinariesPatchFeature*> BinariesPatchFeatureImplementations;\n    IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(BinariesPatchFeatureImplementations);\n    for (IBinariesPatchFeature* BinariesPatchFeature : BinariesPatchFeatureImplementations) {\n        BinariesPatchFeature->GetFeatureName();\n    }\n    IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 56.72461792147623}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\treturn THotPatcherTemplateHelper::ParserPatchConfigByCommandline(Commandline,Token);\n}", "CodeBleu_score": 23.39643638991292}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\treturn THotPatcherTemplateHelper::GetCookedPakCommandLine(Commandline,Token);\n}", "CodeBleu_score": 19.332859327773555}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\treturn THotPatcherTemplateHelper::GetCookedPakCommandLine(Commandline,Token);\n}", "CodeBleu_score": 19.332859327773555}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\tif (CommandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\treturn CommandletName.Equals(\"cook\", ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 13.889523457007924}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\tFString CommandletName;\n\tif (CommandletHelper::GetCommandletArg(CommandletName)) {\n\t\tif (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"Cook\"), ESearchCase::IgnoreCase)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 28.717125114872516}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\tbool bIsCookCommandlet = false;\n\n\tFString CommandletName = CommandletHelper::GetCommandletArg(TEXT(\"Commandlet\"));\n\n\tif (!CommandletName.IsEmpty()) {\n\t\tif (CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n\t\t\tbIsCookCommandlet = true;\n\t\t}\n\t}\n\n\treturn bIsCookCommandlet;\n}", "CodeBleu_score": 53.128226210438}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\tFString CommandletName;\n\tFParse::Value(FCommandLine::Get(), TEXT(\"Commandlet\"), CommandletName);\n\n\tif (GetDefault<UHotPatcherSettings>()->bEnableServerlessCounter) {\n\t\tFCountServerlessWrapper Counter;\n\t\tCounter.Processor = FString::Printf(TEXT(\"%s %s\"), *FApp::GetGameName(), *CommandletName);\n\t\tCounter.Init(GetDefault<UHotPatcherSettings>()->ServerlessCounterProjectName, GetDefault<UHotPatcherSettings>()->ServerlessCounterRegion);\n\t\tCounter.Process(FCountServerlessWrapper::MakeServerRequestInfo(FCountServerlessWrapper::MakeCurrentProject(CommandletName)));\n\t}\n}", "CodeBleu_score": 42.968024060490905}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\tFCommandLine::Get().RemoveParm(TEXT(\"nopause\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-install\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-uninstall\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-clean\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-windows\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-linux\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-mac\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-android\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-ios\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-hololens\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-lumin\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-ps4\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-on-remote-switch\"));\n\tFCommandLine::Get().RemoveParm(TEXT(\"unattended-build-cook-and-compile-", "CodeBleu_score": 17.98241336589759}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\tTSharedRef<FCommandLine> CommandLine = MakeShareable(new FCommandLine(*Params));\n\tFParse::Value(*CommandLine, TEXT(\"Commandlet\"), Commandlet);\n\tFString CounterName = FString::Printf(TEXT(\"%s/%s\"), *Commandlet, *FString(TEXT(\"Counter\")));\n\tFCounter Counter(CounterName);\n\tFCounterProcessor CounterProcessor(Counter);\n\tFCounterServerlessWrapper CounterServerlessWrapper(Counter);\n\tFCounterProcessorServerlessWrapper CounterProcessorServerlessWrapper(CounterServerlessWrapper);\n\tFCounterProcessor* CounterProcessorPtr = &CounterProcessor;\n\tFCounterProcessorServerlessWrapper* CounterProcessorServerlessWrapperPtr = &CounterProcessorServerlessWrapper;\n\tFCounterProcessor* CounterProcessorToUse = CounterProcessorPtr;\n\tFCounterProcessorServerlessWrapper* CounterProcessorServerlessWrapperToUse = CounterProcessorServerlessWrapperPtr;\n\tif (GetDefault<UHotPatcherSettings>()->bEnableServerlessCounter) {\n\t\tFCounterServerlessWrapper::MakeCurrentProject(Counter);\n\t\tFCounterServerlessWrapper::MakeServerRequestInfo(Counter);\n\t\tCounterProcessorToUse = CounterProcessorServerlessWrapperToUse;\n\t}\n\tCounterProcessorToUse->Process();\n}", "CodeBleu_score": 41.09561748906686}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform != nullptr) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tbIsAppleMetalPlatform = PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 46.85604624987983}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\tbool result = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tresult = PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n\t}\n\treturn result;\n}", "CodeBleu_score": 46.293414248601714}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tif (PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase)) {\n\t\t\tbIsAppleMetalPlatform = true;\n\t\t}\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 49.04632535043313}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\tif (Object == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the outermost package of the object.\n\tUPackage* Package = Object->GetOutermost();\n\n\t// If the package is not valid, return.\n\tif (Package == nullptr) {\n\t\treturn;\n\t}\n\n\t// If the package is not in CookerAssetsSet but is in AllAssetsSet and does not always require post-load processing,\n\t// add the object to the PackageObjectsMap and FreezeObjects list.\n\tif (!CookerAssetsSet.Contains(Package) && AllAssetsSet.Contains(Package) && !IsAlwayPostLoadClasses(Package, const_cast<UObject*>(Object))) {\n\t\t// Add the object to the PackageObjectsMap.\n\t\tPackageObjectsMap.FindOrAdd(Package->GetPathName()).Add(Object);\n\n\t\t// Add the object to the FreezeObjects list.\n\t\tFreezeObjects.Add(Object);\n\n\t\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object.\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 40.69668864432037}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\tif (IsAlwayPostLoadClasses(Object->GetOutermost(), (UObject*)Object)) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(UPackage::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderExportObject::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderClass::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderFunction::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderExportObject::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderClass::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderFunction::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderExportObject::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderClass::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderFunction::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderExportObject::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderClass::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderFunction::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderExportObject::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderClass::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholderFunction::StaticClass())) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(ULinkerPlaceholder", "CodeBleu_score": 25.090441773959114}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\tif (Object) {\n\t\tconst UObject* ObjectOuter = Object->GetOuter();\n\t\tif (ObjectOuter) {\n\t\t\tUPackage* Package = ObjectOuter->GetOutermost();\n\t\t\tif (Package && Package->IsValidLowLevel() && !Package->IsPendingKill()) {\n\t\t\t\tFString AssetPathName = Package->GetPathName();\n\t\t\t\tif (AllAssetsSet.Contains(AssetPathName)) {\n\t\t\t\t\tif (!CookerAssetsSet.Contains(AssetPathName) && !IsAlwayPostLoadClasses(Package, const_cast<UObject*>(ObjectOuter))) {\n\t\t\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(const_cast<UObject*>(Object));\n\t\t\t\t\t\tFreezeObjects.Add(const_cast<UObject*>(Object));\n\t\t\t\t\t\tObjectOuter->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.97178546959914}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FRecord* BulkRecord : Record.BulkDataRecords)\n\t\t{\n\t\t\tif (BulkRecord->Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord->Info.BulkDataFlags & BULKDATA_PayloadAtEnd)\n\t\t\t{\n\t\t\t\t// This bulk data is appended to the end of the export\n\t\t\t\tif (BulkRecord->Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t\t{\n\t\t\t\t\tContext.ExportsBuffers[BulkRecord->Info.MultiOutputIndex].Add(BulkRecord->BulkData);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// This bulk data is appended to the end of the export\n\t\t\t\t\tif (BulkRecord->Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t\t\t{\n\t\t\t\t\t\tContext.ExportsBuffers[BulkRecord->Info.MultiOutputIndex].Add(BulkRecord->BulkData);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// This bulk data is appended to the end of the export\n\t\t\t\t\t\tif (BulkRecord->Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tContext.ExportsBuffers[BulkRecord->Info.MultiOutputIndex].Add(BulkRecord->BulkData);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This bulk data is appended to the end of the export\n\t\t\t\t\t\t\tif (BulkRecord->Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t\t\t\t\t{", "CodeBleu_score": 40.92531720850007}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tFRecord* CurrentRecord = &Record;\n\twhile (CurrentRecord)\n\t{\n\t\tfor (const FRecordBulkData& BulkRecord : CurrentRecord->BulkData)\n\t\t{\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t{\n\t\t\t\t// Force inlined payloads are stored in the same bulk data file as the record they belong to\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_SingleUse)\n\t\t\t{\n\t\t\t\t// Single use bulk data is stored in the same bulk data file as the record they belong to\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_SizeIsInHeader)\n\t\t\t{\n\t\t\t\t// Size is in header bulk data is stored in the same bulk data file as the record they belong to\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_BadDataVersion)\n\t\t\t{\n\t\t\t\t// Bad data version bulk data is stored in the same bulk data file as the record they belong to\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_SizeInSeparateField)\n\t\t\t{\n\t\t\t\t// Size in separate field bulk data is stored in the same bulk data file as the record they belong to\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_OptionalPayload)\n\t\t\t{\n\t\t\t\t// Optional payload bulk data is stored in the same bulk data file as the record they belong to\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_SizeIsOptional)\n\t\t\t{\n\t\t\t\t// Size is optional bulk data is stored in", "CodeBleu_score": 34.58323771502967}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t// Iterate through each bulk data record in the record.\n    for (const FBulkDataRecord& BulkRecord : Record.BulkDataRecords)\n    {\n        // If this bulk data is appended to an export, add the export buffer to the corresponding export buffer list in the context.\n        if (BulkRecord.Info.bForceIntoExports)\n        {\n            Context.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.BulkData);\n        }\n        // Otherwise, this bulk data is an external file.\n        else\n        {\n            // Create an output file entry in the context's output files.\n            FOutputFile& OutputFile = Context.OutputFiles.Emplace_GetRef();\n\n            // Set the output file's filename.\n            OutputFile.Filename = BulkRecord.Info.Filename;\n\n            // Set the output file's buffer.\n            OutputFile.Buffer = BulkRecord.BulkData;\n\n            // Set the output file's regions.\n            OutputFile.Regions = BulkRecord.Info.BulkDataFlags.GetBulkDataLayout();\n\n            // Set the output file's flags.\n            OutputFile.Flags = EOutputFileFlags::None;\n            if (BulkRecord.Info.BulkDataFlags.GetBulkDataFlags() & BULKDATA_Sidecar)\n            {\n                OutputFile.Flags |= EOutputFileFlags::Sidecar;\n            }\n            if (BulkRecord.Info.BulkDataFlags.GetBulkDataFlags() & BULKDATA_Hash)\n            {\n                OutputFile.Flags |= EOutputFileFlags::Hash;\n            }\n        }\n    }\n}", "CodeBleu_score": 50.63501675159987}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Context.bIsExportDiff) {\n\t\tif (Context.ExportArchive.IsComplete()) {\n\t\t\treturn;\n\t\t}\n\t}\n\tFBuffer Buffer;\n\tBuffer.Add(FPackageFileTag::PackageTag);\n\tContext.ExportsBuffers[Record.PackageIndex].Add(Buffer);\n}", "CodeBleu_score": 33.12795544404176}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Record.ExportArchiveIndex != -1) {\n\t\tFExportPakDiffData& ExportDiffData = Context.ExportDiffData[Record.ExportArchiveIndex];\n\t\tif (!ExportDiffData.bIsCompleted) {\n\t\t\tif (Context.ExportsBuffers[Record.ExportArchiveIndex].Num() == 0) {\n\t\t\t\t// we don't want to add a footer to an empty export buffer\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tFBufferArchive FooterBuffer;\n\t\t\tFPackageFileTag FileTag;\n\t\t\tFileTag.TotalHeaderSize = 0;\n\t\t\tFileTag.PackageDataSize = 0;\n\t\t\tFileTag.NameMapNamesSize = 0;\n\t\t\tFileTag.NameMapNamesOffset = 0;\n\t\t\tFileTag.GuidMapNamesSize = 0;\n\t\t\tFileTag.GuidMapNamesOffset = 0;\n\t\t\tFileTag.PackageSource = Record.PackageFile.Source;\n\t\t\tFileTag.PackageFlags = 0;\n\t\t\tFileTag.PackageVersion = 0;\n\t\t\tFileTag.EngineVersion = Record.PackageFile.EngineVersion;\n\t\t\tFileTag.CookedHeaderSize = 0;\n\t\t\tFileTag.CookedPackageSize = 0;\n\t\t\tFileTag.CookedPackageOffset = 0;\n\t\t\tFileTag.AssetRegistryDataSize = 0;\n\t\t\tFileTag.AssetRegistryDataOffset = 0;\n\t\t\tFileTag.BulkDataStartOffset = 0;\n\t\t\tFileTag.BulkDataSizeOnDisk = 0;\n\t\t\tFileTag.PackageHeaderSize = 0;\n\t\t\tFileTag.PackageOffset = 0;\n\t\t\tFileTag.Unknown1 = 0;\n\t\t\tFileTag.Unknown2 = 0;\n\t\t\tFileTag.Unknown3 = 0;\n\t\t\tFileTag.Unknown4 = 0;\n\t\t\tFileTag.Unknown5 = 0;\n\t\t\tFileTag.Unknown6 = 0;\n\t\t\tFileTag.", "CodeBleu_score": 35.172003869345026}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Context.bIsFooterWritten) {\n\t\treturn;\n\t}\n\t\n\tif (!Context.bIsDiff) {\n\t\tContext.bIsFooterWritten = true;\n\t\treturn;\n\t}\n\t\n\tif (!Context.bIsDiffCompleted) {\n\t\treturn;\n\t}\n\t\n\tContext.bIsFooterWritten = true;\n\t\n\tfor (int32 PackageIndex = 0; PackageIndex < Context.Packages.Num(); ++PackageIndex) {\n\t\tFPackage& Package = Context.Packages[PackageIndex];\n\t\t\n\t\tif (!Package.bIsExported) {\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tFSharedBuffer& Buffer = Context.ExportsBuffers[Package.Info.MultiOutputIndex];\n\t\t\n\t\tif (Buffer.IsEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tFSharedBuffer& FooterBuffer = Context.FooterBuffers[Package.Info.MultiOutputIndex];\n\t\t\n\t\tif (FooterBuffer.IsEmpty()) {\n\t\t\tFooterBuffer.Add\n\t\t\tFPackageFileTag::Clone\n\t\t\tTArray<FFileRegion>", "CodeBleu_score": 46.66324375080921}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent * CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tbSprinting = CharacterMovement->bSprinting;\n\t\tbAimingDownSights = CharacterMovement->bAimingDownSights;\n\t}\n}", "CodeBleu_score": 80.09511601134298}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tbWantsToSprint = GDCharacterMovementComponent->bWantsToSprint;\n\t\tbWantsToAimDownSights = GDCharacterMovementComponent->bWantsToAimDownSights;\n\t}\n}", "CodeBleu_score": 74.22860013968845}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tif (UGDCharacterMovementComponent* const GDCharacterMovement{Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement())}; GDCharacterMovement) {\n\t\tGDCharacterMovement->SaveRequestedMove(this);\n\t}\n}", "CodeBleu_score": 61.68959157457428}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\treturn NULL;\n}", "CodeBleu_score": 5.671458607076233}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\treturn NULL;\n}", "CodeBleu_score": 5.671458607076233}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\treturn NULL;\n}", "CodeBleu_score": 5.671458607076233}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\tif (ASC->IsValidLowLevel() && !ASC->IsPendingKillOrUnreachable()) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\n\tMarkAsGarbage();\n\tSetReadyToDestroy();\n}", "CodeBleu_score": 38.41511201984992}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\tif (ASC) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\n\tMarkAsGarbage();\n}", "CodeBleu_score": 34.468045407401824}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\tif (ASC) {\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t}\n\n\tMarkAsGarbage();\n\tSetReadyToDestroy();\n}", "CodeBleu_score": 36.112360333613005}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tUAbilitySystemComponent* AbilitySystemComponent = NULL;\n\tFGameplayTag EffectGameplayTag = FGameplayTag();\n\tFGameplayTagContainer AssetTags = FGameplayTagContainer();\n\tFGameplayTagContainer GrantedTags = FGameplayTagContainer();\n\n\tAbilitySystemComponent = EffectRemoved.Spec.GetAbilitySystemComponent();\n\tEffectGameplayTag = EffectGameplayTag;\n\tAssetTags = EffectRemoved.Spec.GetAllAssetTags();\n\tGrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\n\tif (AbilitySystemComponent != NULL && (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag))) {\n\t\tAbilitySystemComponent->OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0);\n\t}\n}", "CodeBleu_score": 52.55327746804266}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (!Task) { return nullptr; }\n\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\tTask->bValid = Task->Validate();\n\n\tif (Task->bValid) {\n\t\tTask->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\t\tTask->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectRemoved);\n\t}\n\telse {\n\t\tTask->EndTask();\n\t\treturn nullptr;\n\t}\n\n\treturn Task;\n}", "CodeBleu_score": 48.58973893581934}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\tif (AbilitySystemComponent == nullptr || !InEffectGameplayTag.IsValid()) {\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tListenForGameplayEffectStackChange->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n\tAbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\tAbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\treturn ListenForGameplayEffectStackChange;\n}", "CodeBleu_score": 70.13037413274452}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\tUAsyncTaskEffectStackChanged * NewObject = NewObject<UAsyncTaskEffectStackChanged>();\n\tNewObject->AbilitySystemComponent = AbilitySystemComponent;\n\tNewObject->EffectGameplayTag = InEffectGameplayTag;\n\tif (!NewObject->IsValid()) {\n\t\tNewObject->EndTask();\n\t\treturn nullptr;\n\t}\n\tNewObject->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(NewObject, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\tNewObject->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(NewObject, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\treturn NewObject;\n}", "CodeBleu_score": 49.00309219217878}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tUAbilitySystemComponent* AbilitySystemComponent = EffectRemoved.AbilitySystemComponent.Get();\n\tif (!AbilitySystemComponent) {\n\t\treturn;\n\t}\n\tif (EffectRemoved.Spec.Def->GetDurationPolicy() == EGameplayEffectDurationType::Instant) {\n\t\treturn;\n\t}\n\tif (EffectRemoved.Spec.Def->GetDurationPolicy() == EGameplayEffectDurationType::Infinite) {\n\t\treturn;\n\t}\n\tFGameplayTagContainer GrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\tFGameplayTagContainer AssetTags = EffectRemoved.Spec.Def->InheritableGameplayEffectTagsContainer.CombinedTags;\n\tif (GrantedTags.HasTagExact(EffectGameplayTag) || AssetTags.HasTagExact(EffectGameplayTag)) {\n\t\tAbilitySystemComponent->OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t}\n}", "CodeBleu_score": 47.68177861686516}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\tif (Ability) {\n        if (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n            FGameplayTag EventTag;\n            FGameplayEventData EventData;\n            EventData.EventMagnitude = 1.f;\n            Ability->BroadcastAbilityTaskDelegates(EAbilityTaskEventType::Completed, EventTag, EventData);\n        }\n\n        EndTask();\n    }\n}", "CodeBleu_score": 52.27881926588199}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (Ability)\n\t{\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelHandle);\n\t}\n\n\tif (AbilityEnded && bStopWhenAbilityEnds)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTagContainerDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 78.37214066246919}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (Ability)\n\t{\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelHandle);\n\t}\n\n\tif (AbilityEnded && bStopWhenAbilityEnds)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTagContainerDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 78.37214066246919}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t// Unbind the delegate from the ability so it doesn't get called if the ability ends naturally, without being cancelled\n\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\n\t// If the ability ended normally, we need to stop the montage from playing\n\tif (AbilityEnded && bStopWhenAbilityEnds)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\t// Remove the event tag container delegate from the ability system component\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTagContainerDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 70.81249142038517}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\treturn false;\n}", "CodeBleu_score": 3.758120540592659}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\treturn false;\n}", "CodeBleu_score": 3.758120540592659}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\treturn false;\n}", "CodeBleu_score": 3.758120540592659}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\tUBlackboardComponent* BlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackBoardComp) {\n\t\tAActor* TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\t\tif (TargetActor) {\n\t\t\tfloat Distance = FVector::Distance(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\t\t\tif (Distance <= MaxAttackRange) {\n\t\t\t\tBlackBoardComp->SetValueAsBool(bInAttackRangeKey.SelectedKeyName, MyController->LineOfSightTo(TargetActor));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tBlackBoardComp->SetValueAsBool(bInAttackRangeKey.SelectedKeyName, false);\n\t\t\t}\n\t\t}\n\t}\n\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n}", "CodeBleu_score": 55.96840082155259}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\tUBlackboardComponent* BlackBoardComp;\n\tAActor* TargetActor;\n\tbool bInRangeAndVisible;\n\tfloat Distance;\n\tFVector Location;\n\n\tBlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackBoardComp != NULL) {\n\t\tTargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\t\tif (TargetActor != NULL) {\n\t\t\tLocation = OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation();\n\t\t\tDistance = FVector::Distance(Location, TargetActor->GetActorLocation());\n\t\t\tbInRangeAndVisible = (Distance <= MaxAttackRange) && OwnerComp.GetAIOwner()->LineOfSightTo(TargetActor);\n\t\t\tBlackBoardComp->SetValueAsBool(bInRangeAndVisibleKey.SelectedKeyName, bInRangeAndVisible);\n\t\t}\n\t}\n\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n}", "CodeBleu_score": 54.79983783349651}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\tAAIController* MyController = OwnerComp.GetAIOwner();\n\tUBlackboardComponent* BlackBoardComp = OwnerComp.GetBlackboardComponent();\n\n\tif (MyController == NULL || BlackBoardComp == NULL) {\n\t\treturn;\n\t}\n\n\tAActor* TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\n\tif (TargetActor == NULL) {\n\t\treturn;\n\t}\n\n\tconst float DistanceToTarget = FVector::Distance(MyController->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\n\tif (DistanceToTarget <= MaxAttackRange) {\n\t\tBlackBoardComp->SetValueAsBool(bInAttackRangeKey.SelectedKeyName, MyController->LineOfSightTo(TargetActor));\n\t}\n\telse {\n\t\tBlackBoardComp->SetValueAsBool(bInAttackRangeKey.SelectedKeyName, false);\n\t}\n\n\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n}", "CodeBleu_score": 60.784982853604255}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\tEBTNodeResult::Type Result;\n\tAAIController* AIOwner = OwnerComp.GetAIOwner();\n\tif (AIOwner) {\n\t\tAAPawn* Pawn = AIOwner->GetPawn();\n\t\tif (Pawn) {\n\t\t\tUUSAttributeComponent* AttributeComp = Pawn->FindComponentByClass<UUSAttributeComponent>();\n\t\t\tif (AttributeComp) {\n\t\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t\t}\n\t\t}\n\t}\n\tResult = EBTNodeResult::Succeeded;\n\treturn Result;\n}", "CodeBleu_score": 49.94056437652061}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\tif (OwnerComp.GetAIOwner() != nullptr) {\n\t\tif (APawn* Pawn = OwnerComp.GetAIOwner()->GetPawn()) {\n\t\t\tif (USAttributeComponent* AttributeComp = Pawn->FindComponentByClass<USAttributeComponent>()) {\n\t\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t\t}\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 55.74168835280828}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\tAActor* AIOwner = OwnerComp.GetAIOwner();\n\tif (AIOwner) {\n\t\tUAttributeComponent* AttributeComp = AIOwner->FindComponentByClass<UAttributeComponent>();\n\t\tif (AttributeComp) {\n\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), EAttributeChangeReason::Heal);\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 59.43650546908372}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\n    GetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.77228756077766}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\n    GetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.77228756077766}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n    // Register tick function\n    GetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.77228756077766}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->DeRegisterComponent(this);\n}", "CodeBleu_score": 46.35028649016564}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\n    if (EndPlayReason != EEndPlayReason::EndPlayInEditor) {\n        if (GetWorld() != NULL) {\n            GetWorld()->GetSubsystem<USTickablesSubsystem>()->DeRegisterComponent(this);\n        }\n    }\n}", "CodeBleu_score": 54.23562642174598}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\n\tif (GetWorld()) {\n\t\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->DeRegisterComponent(this);\n\t}\n}", "CodeBleu_score": 55.95828878953414}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (!GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Significance component owner %s does not implement USSignificanceInterface\"), *GetOwner()->GetClass()->GetName());\n\t\t}\n\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t} else {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\t// Manage particle significance\n\tfor (UParticleSystemComponent* ParticleSystem : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tif (ParticleSystem->bAutoManageSignificance) {\n\t\t\tParticleSystem->SetManagingSignificance(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 67.19165727259436}, {"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n    if (bManageSignificance) {\n        if (!GetOwner()->Implements<USSignificanceInterface>()) {\n            UE_LOG(LogSigman, Error, TEXT(\"Significance component owner does not implement USSignificanceInterface\"));\n        }\n\n        if (bWaitOneFrame) {\n            GetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n        } else {\n            RegisterWithManager();\n        }\n    }\n\n    // Manage particle significance\n    if (bManageParticleSignificance) {\n        TArray<UParticleSystemComponent*> ParticleSystemComponents;\n        GetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\n        for (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n            ParticleSystemComponent->SetManagingSignificance(true);\n        }\n    }\n}", "CodeBleu_score": 75.03194965957985}, {"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\tif (bManagingSignificance) {\n\t\tif (!GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogSigman, Warning, TEXT(\"Significance component owner %s does not implement USSignificanceInterface.  Disabling significance management.\"), *GetOwner()->GetName());\n\t\t\tbManagingSignificance = false;\n\t\t}\n\t}\n\tif (bManagingSignificance) {\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t} else {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\tif (bManagingParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleComponents);\n\t\tfor (UParticleSystemComponent* ParticleComponent : ParticleComponents) {\n\t\t\tParticleComponent->bAutoManageSignificance = false;\n\t\t}\n\t}\n}", "CodeBleu_score": 66.67541279843756}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (!HasValidOwner())\n\t{\n\t\treturn;\n\t}\n\n\tif (bRegisteredWithManager)\n\t{\n\t\treturn;\n\t}\n\n\tUWorld* World = GetWorld();\n\tif (!World)\n\t{\n\t\treturn;\n\t}\n\n\tUSignificanceManager* SignificanceManager = World->GetGameInstance()->GetSignificanceManager();\n\tif (!SignificanceManager)\n\t{\n\t\treturn;\n\t}\n\n\tbRegisteredWithManager = true;\n\n\t// Define the lambda functions for calculating significance and handling post-significance updates\n\tauto CalcSignificanceLambda = [this](const FTransform& Viewpoint) -> float\n\t{\n\t\treturn CalcSignificance(&SignificanceManager->GetManagedObjectInfo(GetOwner()), Viewpoint);\n\t};\n\n\tauto PostSignificanceUpdateLambda = [this](float OldSignificance, float Significance, bool bFinal)\n\t{\n\t\tPostSignificanceUpdate(&SignificanceManager->GetManagedObjectInfo(GetOwner()), OldSignificance, Significance, bFinal);\n\t};\n\n\t// Register the component with the manager using the owner's class name as the tag and specifies the lambda functions for significance calculation and updates\n\tSignificanceManager->RegisterObject(GetOwner(), GetOwner()->GetClass()->GetFName(), CalcSignificanceLambda, PostSignificanceUpdateLambda);\n}", "CodeBleu_score": 58.27351977257844}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (bRegisteredWithManager) {\n\t\treturn;\n\t}\n\n\tif (GetWorld() == nullptr) {\n\t\treturn;\n\t}\n\n\tUSignificanceManager* SignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\tif (SignificanceManager == nullptr) {\n\t\treturn;\n\t}\n\n\tauto SignificanceCalculation = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) -> float {\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t};\n\n\tauto SignificanceUpdate = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\n\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), this, SignificanceCalculation, SignificanceUpdate);\n\tbRegisteredWithManager = true;\n}", "CodeBleu_score": 70.43918250281882}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (bRegisteredWithManager) {\n\t\treturn;\n\t}\n\n\tUWorld* World = GetWorld();\n\tif (World == nullptr) {\n\t\treturn;\n\t}\n\n\tUSignificanceManager* SignificanceManager = World->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\tif (SignificanceManager == nullptr) {\n\t\treturn;\n\t}\n\n\tFName Tag = GetOwner()->GetClass()->GetFName();\n\tFGetSignificance SignificanceLambda = [this](const FTransform& Viewpoint) -> float {\n\t\treturn CalcSignificance(&ObjectInfo, Viewpoint);\n\t};\n\tFPostSignificanceUpdate PostSignificanceUpdateLambda = [this](float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(&ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\tSignificanceManager->RegisterObject(Tag, GetOwner(), SignificanceLambda, PostSignificanceUpdateLambda);\n\tbRegisteredWithManager = true;\n}", "CodeBleu_score": 57.9792801012745}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\tSCOPED_NAMED_EVENT(Pooling_ReleaseToPool, FColor::Orange);\n\tif (!IsPoolingEnabled(Actor)) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\tPoolingSubsystem->ReleaseToPool_Internal(Actor);\n\treturn true;\n}", "CodeBleu_score": 46.926746707677516}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\tSCOPED_NAMED_EVENT(ActorPooling_ReleaseToPool, FColor::Yellow);\n\n\tif (IsPoolingEnabled(Actor)) {\n\t\tActor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool_Internal(Actor);\n\t\treturn true;\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 59.811212520564574}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\tSCOPED_NAMED_EVENT(PoolingSubsystem_ReleaseToPool, FColor::Emerald);\n\n\tif (IsPoolingEnabled(Actor)) {\n\t\tPoolingSubsystem->ReleaseToPool_Internal(Actor);\n\t\treturn true;\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 50.06213222271403}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\tUE_LOGFMT(LogActorPooling, Log, TEXT(\"Priming Actor Pool for %s\"), *ActorClass->GetName());\n\tSCOPED_NAMED_EVENT(PrimeActorPool_S, FColor::Green, *FString::Printf(TEXT(\"PrimeActorPool %s\"), *ActorClass->GetName()));\n\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* NewActor = GetWorld()->SpawnActor<AActor>(ActorClass, FVector::ZeroVector, FRotator::ZeroRotator);\n\t\tReleaseToPool(NewActor);\n\t}\n}", "CodeBleu_score": 52.139204082793114}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\tUE_LOGFMT(LogTemp, Log, TEXT(\"PrimeActorPool: Spawning %d instances of %s\"), Amount, *ActorClass->GetName());\n\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Blue);\n\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseToPool(Actor);\n\t}\n}", "CodeBleu_score": 52.629663564126616}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\tUE_LOG(LogTemp, Display, TEXT(\"Priming actor pool for class %s\"), *ActorClass->GetName());\n\tSCOPED_NAMED_EVENT(ActorPooling_PrimeActorPool, FColor::Cyan);\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseToPool(Actor);\n\t}\n}", "CodeBleu_score": 45.255228360128065}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\tUE_LOG(LogTemp, Log, TEXT(\"Action %s started by %s\"), *GetName(), *Instigator->GetName());\n    GetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n    ReplicatedData.Instigator = Instigator;\n    ReplicatedData.StartTime = GetWorld()->GetTimeSeconds();\n    if (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n        StartTime = ReplicatedData.StartTime;\n    }\n    GetOwningComponent()->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 59.799805397546855}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\tUE_LOG(LogActionSystem, Log, TEXT(\"%s started by %s\"), *GetName(), *Instigator->GetName());\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\tGetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n\tGetOwningComponent()->ReplicateActiveGameplayTags();\n\n\tGetOwningComponent()->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 53.37922464722934}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\tUE_LOG(LogTemp, Log, TEXT(\"%s: %s started by %s\"), *GetName(), *GetName(), *Instigator->GetName());\n\tGetOwningComponent()->GetOwnerRole() == ROLE_Authority ? StartTime = GetWorld()->GetTimeSeconds() : StartTime = 0.f;\n\tGetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n\tUpdateReplicatedData();\n\tGetOwningComponent()->OnActionStarted.Broadcast(this, Instigator);\n}", "CodeBleu_score": 53.01170123616865}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\treturn 0.0f;\n}", "CodeBleu_score": 3.7710551015692317}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\treturn 0.0f;\n}", "CodeBleu_score": 3.7710551015692317}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\treturn 0.0f;\n}", "CodeBleu_score": 3.7710551015692317}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n        GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Red, TEXT(\"No actor in focus\"));\n        return;\n    }\n\n    APawn* Pawn = Cast<APawn>(GetOwner());\n    if (Pawn == nullptr) {\n        GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Red, TEXT(\"No owning pawn\"));\n        return;\n    }\n\n    InFocus->Interact(Pawn);\n}", "CodeBleu_score": 62.56263061560712}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Interacting with null object\"));\n\t} else {\n\t\tAPawn* Owner = Cast<APawn>(GetOwner());\n\t\tif (Owner) {\n\t\t\tInFocus->Interact(Owner);\n\t\t}\n\t}\n}", "CodeBleu_score": 62.766314154515534}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (!InFocus) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT(\"No focus actor\"));\n\t\treturn;\n\t}\n\tAPawn* Pawn = CastChecked<APawn>(GetOwner());\n\tISGameplayInterface::Execute_Interact(InFocus, Pawn);\n}", "CodeBleu_score": 62.35919014977653}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\tbool Success;\n\tif (TargetActor != NULL) {\n\t\tUSAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComp != NULL) {\n\t\t\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\t\t\tSuccess = true;\n\t\t} else {\n\t\t\tSuccess = false;\n\t\t}\n\t} else {\n\t\tSuccess = false;\n\t}\n\treturn Success;\n}", "CodeBleu_score": 54.0235307492101}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\tif (!TargetActor) {\n\t\treturn false;\n\t}\n\n\tif (TargetActor == DamageCauser) {\n\t\treturn false;\n\t}\n\n\tUSAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (!AttributeComp) {\n\t\treturn false;\n\t}\n\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 54.81085904234163}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\tif (DamageCauser == nullptr || TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tUUSAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UUSAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn false;\n\t}\n\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 54.36653071166769}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\treturn false;\n}", "CodeBleu_score": 7.150835912949022}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\treturn false;\n}", "CodeBleu_score": 7.150835912949022}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\treturn false;\n}", "CodeBleu_score": 7.150835912949022}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\tUUSAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<UUSAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn;\n\t}\n\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\n\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\n\tif (!PS->RemoveCredits(CreditCost)) {\n\t\treturn;\n\t}\n\n\tAttributeComp->ApplyHealthChange(HealthChange);\n\tHideAndCooldownPowerup();\n}", "CodeBleu_score": 49.41425641383599}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (!InstigatorPawn) {\n\t\treturn;\n\t}\n\tUSAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\tif (!AttributeComp) {\n\t\treturn;\n\t}\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\tif (!PS) {\n\t\treturn;\n\t}\n\tif (!PS->RemoveCredits(CreditCost)) {\n\t\treturn;\n\t}\n\tAttributeComp->ApplyHealthChange(HealthChange);\n\tHideAndCooldownPowerup();\n}", "CodeBleu_score": 54.64206011156881}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\tUUSAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<UUSAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn;\n\t}\n\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\n\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\n\tif (!PS->RemoveCredits(Cost)) {\n\t\treturn;\n\t}\n\n\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\tHideAndCooldownPowerup();\n}", "CodeBleu_score": 49.71781560952862}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t// Spawn impact visual effect\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactParticle, GetActorLocation(), GetActorRotation(), true);\n\n\t// Play impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\n\t// Trigger camera shake\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->GetActorPoolingCamera()->PlayCameraShake(ImpactShake, GetImpactShakeInnerRadius(), GetImpactShakeOuterRadius());\n\n\t// Release to pool\n\tPoolingSubsystem->ReleaseToPool(this);\n}", "CodeBleu_score": 60.82381680165619}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\tFVector impactLocation = GetActorLocation();\n    FRotator impactRotation = GetActorRotation();\n\n    // Spawn impact visual effect\n    UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), impactParticle, impactLocation, impactRotation, FVector(1.0f));\n\n    // Play impact sound\n    UGameplayStatics::PlaySoundAtLocation(GetWorld(), impactSound, impactLocation);\n\n    // Play impact shake\n    GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 53.86969888001006}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tif (ExplosionEffect) {\n\t\t\tUGameplayStatics::SpawnEmitterAtLocation(World, ExplosionEffect, GetActorLocation());\n\t\t}\n\t\tif (ExplosionSound) {\n\t\t\tUGameplayStatics::PlaySoundAtLocation(World, ExplosionSound, GetActorLocation());\n\t\t}\n\t\tif (ExplosionShake) {\n\t\t\tUGameplayStatics::PlayWorldCameraShake(World, ExplosionShake, GetActorLocation(), GetImpactShakeOuterRadius(), GetImpactShakeInnerRadius(), 1.0f, true);\n\t\t}\n\t\tPoolingSubsystem->ReleaseToPool(this);\n\t}\n}", "CodeBleu_score": 56.40905335366042}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\tif (!PlayerState) {\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOGFMT(LogSaveGame, Warning, TEXT(\"GetPlayerData: PIE mode. Returning first player data.\"));\n\t\treturn SavedPlayers.Num() > 0 ? &SavedPlayers[0] : nullptr;\n\t}\n\n\tconst FString PlayerId = PlayerState->GetUniqueId().ToString();\n\tconst int32 PlayerIndex = SavedPlayers.FindByPredicate([PlayerId](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerId == PlayerId;\n\t});\n\treturn SavedPlayers.IsValidIndex(PlayerIndex) ? &SavedPlayers[PlayerIndex] : nullptr;\n}", "CodeBleu_score": 60.92968776667587}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOGFMT(LogSaveGame, Warning, TEXT(\"GetPlayerData: PlayerState is null in PIE mode. Using first player data entry.\"));\n\t\tif (SavedPlayers.IsValidIndex(0)) {\n\t\t\treturn &SavedPlayers[0];\n\t\t}\n\t\treturn nullptr;\n\t}\n\tFString UniqueId = PlayerState->GetUniqueId().ToString();\n\tif (UniqueId.IsEmpty()) {\n\t\treturn nullptr;\n\t}\n\tint32 Index = SavedPlayers.FindByPredicate([&UniqueId](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.UniqueId == UniqueId;\n\t});\n\tif (SavedPlayers.IsValidIndex(Index)) {\n\t\treturn &SavedPlayers[Index];\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 69.72176474847495}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PIE mode detected, returning first player entry.\"));\n\t\treturn SavedPlayers.Num() > 0 ? &SavedPlayers[0] : nullptr;\n\t}\n\tconst FString PlayerId = PlayerState->GetUniqueId().ToString();\n\tconst int32 PlayerIndex = SavedPlayers.FindByPredicate([PlayerId](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerId == PlayerId;\n\t});\n\treturn SavedPlayers.IsValidIndex(PlayerIndex) ? &SavedPlayers[PlayerIndex] : nullptr;\n}", "CodeBleu_score": 64.48213682758144}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tASPlayerState* PS;\n\tPS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (PS) {\n\t\tPS->LoadPlayerState();\n\t}\n}", "CodeBleu_score": 62.96075602029938}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tAPlayerState* PS;\n    APlayerController* PC;\n    USaveGame* SaveGame;\n\n    PS = NewPlayer->GetPlayerState<APlayerState>();\n    PC = Cast<APlayerController>(NewPlayer);\n    SaveGame = GetCurrentSaveGame();\n\n    if (PS) {\n        PS->LoadPlayerState(PC, SaveGame);\n    }\n}", "CodeBleu_score": 51.49627837959807}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tASPlayerState* PS;\n\tPS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (PS != NULL) {\n\t\tPS->LoadPlayerState();\n\t}\n}", "CodeBleu_score": 63.04184517151346}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear the saved player and actor data\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Get the game state\n\tAGameStateBase* GS = GetWorld()->GetGameState();\n\n\t// If there is a game state, save player data for each player in the game state\n\tif (IsValid(GS)) {\n\t\tfor (int32 i = 0; i < GS->PlayerArray.Num(); i++) {\n\t\t\t// Get the player state\n\t\t\tAPlayerState* PS = GS->PlayerArray[i];\n\n\t\t\t// If there is a valid player state, save the player data\n\t\t\tif (IsValid(PS)) {\n\t\t\t\t// Cast the player state to a player state\n\t\t\t\tASPlayerState* PS_Cast = CastChecked<ASPlayerState>(PS);\n\n\t\t\t\t// Save the player data\n\t\t\t\tPS_Cast->SavePlayerState(CurrentSaveGame);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\t// Get the actor\n\t\tAActor* Actor = *ActorItr;\n\n\t\t// If the actor implements the save interface, save the actor data\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t// Get the actor name\n\t\t\tFName ActorName = Actor->GetFName();\n\n\t\t\t// Get the actor transform\n\t\t\tFTransform ActorTransform = Actor->GetActorTransform();\n\n\t\t\t// Get the actor serialized data\n\t\t\tFString ActorData = Actor->Serialize();\n\n\t\t\t// Save the actor data\n\t\t\tCurrentSaveGame->SavedActors.Add(FSavedActorData(ActorName, ActorTransform, ActorData));\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, Current", "CodeBleu_score": 57.50915849506133}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\tAPlayerState* PS = GetWorld()->GetGameState()->GetPlayerArray()[0];\n\tif (PS) {\n\t\tPS->SavePlayerState(CurrentSaveGame);\n\t}\n\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\tFName ActorName = Actor->GetFName();\n\t\t\tFTransform ActorTransform = Actor->GetActorTransform();\n\t\t\tTArray<uint8> SerializedData;\n\t\t\tActor->Serialize(SerializedData);\n\t\t\tCurrentSaveGame->SavedActors.Add(FSavedActorData(ActorName, ActorTransform, SerializedData));\n\t\t}\n\t}\n\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSaveGame->SaveSlotName, CurrentSaveGame->UserIndex);\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 47.256433546968786}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\tCurrentSaveGame->SaveGameName = SaveGameName;\n\tCurrentSaveGame->SaveGameSlot = SaveGameSlot;\n\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveGameSlot, SaveGameName);\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 15.398025547032312}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\tImGuiStyle& style = ImGui::GetStyle();\n    ImGuiIO& io = ImGui::GetIO();\n\n    ImGui::SetNextWindowSize(ImVec2(200, 200), ImGuiCond_Once);\n    ImGui::Begin(\"Theme Selector\", nullptr, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove);\n\n    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    if (ImGui::BeginCombo(\"##theme\", m_theme->name)) {\n        for (auto theme : m_themes) {\n            if (ImGui::Selectable(theme->name)) {\n                m_theme = theme;\n                get_imgui_theme()->draw();\n            }\n        }\n        ImGui::EndCombo();\n    }\n\n    if (m_font_size->draw(\"Font Size\")) {\n        g_framework->set_font_size(m_font_size->value);\n    }\n\n    ImGui::End();\n}", "CodeBleu_score": 52.742471495261114}, {"code": "void FrameworkConfig::draw_themes(){\n\tif (m_font_size == nullptr) {\n        m_font_size = std::make_unique<SliderFloat>(\n            \"Font Size\",\n            &get_imgui_theme()->font_size,\n            10.0f,\n            40.0f\n        );\n    }\n\n    if (m_font_size->draw()) {\n        g_framework->set_font_size(m_font_size->value);\n    }\n}", "CodeBleu_score": 49.18788024156003}, {"code": "void FrameworkConfig::draw_themes(){\n\t// Create a window for the themes\n    ImGui::Begin(\"Themes\", &m_open_themes);\n\n    // Create a combo box for the themes\n    if (ImGui::Combo(\"##Theme\", &m_theme_index, m_theme_names.data(), m_theme_names.size())) {\n        // If the combo box selection is changed, update the theme\n        g_framework->set_theme(m_theme_index);\n    }\n\n    // Create a slider for the font size\n    m_font_size->draw(\"Font Size\");\n\n    // If the font size is changed, update the font size in the framework\n    if (m_font_size->value != g_framework->get_font_size()) {\n        g_framework->set_font_size(m_font_size->value);\n    }\n\n    // End the window\n    ImGui::End();\n}", "CodeBleu_score": 47.64330488123394}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Main\");\n    ImGui::Separator();\n    m_menu_key->draw();\n    ImGui::SameLine();\n    m_show_cursor_key->draw();\n    m_remember_menu_state->draw();\n    m_l3_r3_long_press->draw();\n    ImGui::Separator();\n    m_enable_l3_r3_toggle->draw();\n    ImGui::Separator();\n    m_always_show_cursor->draw();\n    ImGui::Separator();\n    m_log_level->draw();\n    if (m_log_level->value() >= 0 && m_log_level->value() < spdlog::level::level_enum::n_levels)\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value()));\n}", "CodeBleu_score": 62.38970650537531}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Main\");\n    ImGui::Separator();\n    ImGui::Spacing();\n    m_menu_key->draw();\n    ImGui::SameLine();\n    m_show_cursor_key->draw();\n    ImGui::Spacing();\n    m_remember_menu_state->draw();\n    ImGui::Spacing();\n    m_enable_l3_r3_toggle->draw();\n    ImGui::Spacing();\n    m_always_show_cursor->draw();\n    ImGui::Spacing();\n    m_l3_r3_long_press->draw();\n    ImGui::Spacing();\n    m_log_level->draw();\n    if (m_log_level->value() >= 0 && m_log_level->value() < 6)\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value()));\n}", "CodeBleu_score": 59.801054472651316}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Main\");\n    ImGui::Separator();\n    m_menu_key->draw();\n    ImGui::SameLine();\n    m_show_cursor_key->draw();\n    ImGui::SameLine();\n    m_remember_menu_state->draw();\n    ImGui::SameLine();\n    m_enable_l3_r3_toggle->draw();\n    ImGui::SameLine();\n    m_l3_r3_long_press->draw();\n    ImGui::SameLine();\n    m_always_show_cursor->draw();\n    ImGui::Separator();\n    m_log_level->draw();\n    if (m_log_level->value() >= 0 && m_log_level->value() < 6) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value()));\n    }\n}", "CodeBleu_score": 47.80538995176429}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// Create a new FFastXml parser.\n\tFFastXml Parser;\n\n\t// Create a new FOSMFileNodeVisitor to handle the XML data.\n\tFOSMFileNodeVisitor NodeVisitor;\n\n\t// Create a new FOSMFileWayVisitor to handle the XML data.\n\tFOSMFileWayVisitor WayVisitor;\n\n\t// Create a new FOSMFileRelationVisitor to handle the XML data.\n\tFOSMFileRelationVisitor RelationVisitor;\n\n\t// Create a new FOSMFileBoundsVisitor to handle the XML data.\n\tFOSMFileBoundsVisitor BoundsVisitor;\n\n\t// Create a new FOSMFileMetadataVisitor to handle the XML data.\n\tFOSMFileMetadataVisitor MetadataVisitor;\n\n\t// Create a new FOSMFileVisitor to handle the XML data.\n\tFOSMFileVisitor Visitor;\n\n\t// Create a new FOSMFileNodeMap to store the node data.\n\tFOSMFileNodeMap NodeMap;\n\n\t// Create a new FOSMFileWayMap to store the way data.\n\tFOSMFileWayMap WayMap;\n\n\t// Create a new FOSMFileRelationMap to store the relation data.\n\tFOSMFileRelationMap RelationMap;\n\n\t// Create a new FOSMFileBoundsMap to store the bounds data.\n\tFOSMFileBoundsMap BoundsMap;\n\n\t// Create a new FOSMFileMetadataMap to store the metadata data.\n\tFOSMFileMetadataMap MetadataMap;\n\n\t// Create a new FOSMFileMap to store the file data.\n\tFOSMFileMap OSMFileMap;\n\n\t// Create a new FOSMFile to store the file data.\n\tFOSMFile OSMFile;\n\n\t// Create a new FString to store the error message.\n\tFString ErrorMessage;\n\n\t// Create a new FString to store the file path.\n\tFString FilePath;\n\n\t// Create a new FString to store the file text.\n\tFString FileText;\n\n\t// Create a new FString to store", "CodeBleu_score": 9.52306245718965}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// Create a new FFastXml parser.\n\tFFastXml* Parser = new FFastXml();\n\n\t// Create a new FOSMFile object.\n\tFOSMFile OSMFile;\n\n\t// Create a new FOSMFileParser object.\n\tFOSMFileParser OSMFileParser;\n\n\t// Set the parser's callback object.\n\tParser->SetParseOptions( FFastXml::ParseOptions::Strict );\n\tParser->SetCallback( &OSMFileParser );\n\n\t// Set the parser's error handling.\n\tParser->SetErrorHandling( FFastXml::ErrorHandling::ReportError );\n\n\t// Create a new FString to hold the error message.\n\tFString ErrorMessage;\n\n\t// Set the parser's error message delegate.\n\tParser->SetErrorMessageDelegate( FOnFastXmlErrorMessage::CreateRaw( &OSMFileParser, &FOSMFileParser::ErrorMessageDelegate ) );\n\n\t// Create a new FString to hold the node map.\n\tFString NodeMap;\n\n\t// Set the parser's character data delegate.\n\tParser->SetCharacterDataHandler( FOnProcessCharacterData::CreateRaw( &OSMFileParser, &FOSMFileParser::CharacterDataHandlerDelegate ) );\n\n\t// Set the parser's element data delegate.\n\tParser->SetElementDataHandler( FOnProcessElementData::CreateRaw( &OSMFileParser, &FOSMFileParser::ElementDataHandlerDelegate ) );\n\n\t// Set the parser's comment data delegate.\n\tParser->SetCommentHandler( FOnCommentCallback::CreateRaw( &OSMFileParser, &FOSMFileParser::CommentHandlerDelegate ) );\n\n\t// Set the parser's processing instruction delegate.\n\tParser->SetProcessingInstructionHandler( FOnProcessingInstruction::CreateRaw( &OSMFileParser, &FOSMFileParser::ProcessingInstructionHandlerDelegate ) );\n\n\t// Set the parser's white space delegate.\n\tParser->SetWhitespaceHandler( FOnWhitespaceCallback::CreateRaw( &OSMFileParser, &FOSMFileParser::WhitespaceHandlerDelegate ) );\n\n\t// Set the parser's start document delegate.", "CodeBleu_score": 26.000626081605187}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// Check if the OSMFilePath is valid.\n\tif ( OSMFilePath.IsEmpty() ) {\n\t\tFeedbackContext->Logf( TEXT( \"OSMFilePath is empty. Unable to load OpenStreetMap file.\" ) );\n\t\treturn false;\n\t}\n\n\t// Check if the OSMFilePath is a file path or a text buffer.\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\n\t\t// Parse the text buffer.\n\t\treturn ParseXmlTextBuffer( OSMFilePath, FeedbackContext );\n\n\t} else {\n\n\t\t// Parse the file.\n\t\treturn ParseXmlFile( OSMFilePath, FeedbackContext );\n\n\t}\n\n}", "CodeBleu_score": 26.201673393563034}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\n    if (CastChecked<UStreetMap>(Asset)) {\n        AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n        UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n        StreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n    }\n}", "CodeBleu_score": 73.90153475730192}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (CastChecked<AStreetMapActor>(NewActor)) {\n\t\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\t\tUStreetMapComponent* StreetMapComponent = NewActor->FindComponentByClass<UStreetMapComponent>();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 62.84516378719388}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\n    if (CastChecked<UStreetMap>(Asset)) {\n        Cast<AStreetMapActor>(NewActor)->GetStreetMapComponent()->SetStreetMap(Cast<UStreetMap>(Asset));\n    }\n}", "CodeBleu_score": 46.699151639432436}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 96.5653365678404}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(SelectedStreetMapComponent != nullptr)\n\t{\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 96.61419864585972}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 96.5653365678404}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\n\t// Register asset types\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n\t// Register the StreetMap asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMap));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapActor));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineActor));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineActorComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineActorComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineActorComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineActorComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineActorComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineActorComponent));\n\n\t// Register", "CodeBleu_score": 47.514249364380085}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t// Register the StreetMap asset type with the asset tools.\n\tIAssetTools& AssetTools = FModuleManager::GetModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n\t// Register the StreetMap asset type with the asset tools.\n\tRegisterAssetTypeAction(AssetTools);\n\n\t// Register the StreetMap style.\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module.\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 73.81333901039248}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t// Register the asset type actions.\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tRegisterAssetTypeActions(AssetTools);\n\n\t// Register the custom class layout for the StreetMapComponent.\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed.\n\tPropertyModule.NotifyCustomizationModuleChanged();\n\n\t// Register the custom thumbnail renderer for the StreetMap asset type.\n\tUThumbnailManager::Get().RegisterCustomRenderer(UStreetMapAsset::StaticClass(), MakeShareable(new FStreetMapAssetThumbnailRenderer));\n\n\t// Register the custom thumbnail renderer for the StreetMapComponent asset type.\n\tUThumbnailManager::Get().RegisterCustomRenderer(UStreetMapComponent::StaticClass(), MakeShareable(new FStreetMapComponentThumbnailRenderer));\n\n\t// Initialize the StreetMap style.\n\tFStreetMapStyle::Initialize();\n}", "CodeBleu_score": 67.42717103754046}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\treturn NULL;\n}", "CodeBleu_score": 5.2908050067320165}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\treturn NULL;\n}", "CodeBleu_score": 5.2908050067320165}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\treturn NULL;\n}", "CodeBleu_score": 5.2908050067320165}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\tTArray<uint8> InputIds;\n\tInputIds.Add(0);\n\tAbilities->BindAbilityToInputIDs(TestAbility01Handle, InputIds);\n}", "CodeBleu_score": 65.4855700118851}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\n\tTArray<uint8> InputIds;\n\tInputIds.Add(0);\n\tAbilities->BindAbilityToInputIDs(TestAbility01Handle, InputIds);\n}", "CodeBleu_score": 65.4855700118851}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\tTArray<uint8> InputIds;\n\tInputIds.Add(EKeys::One);\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 76.72891134549825}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\tif (Controller != NULL && Value != 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 85.4764378160493}, {"code": "void AARCharacter::MoveForward(float Value){\n\tif (Value != 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 78.04277856203782}, {"code": "void AARCharacter::MoveForward(float Value){\n\tif ((Controller != NULL) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 98.03286449525625}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\tFVector SocketLocation;\n\tif (MainWeaponMesh) {\n\t\tSocketLocation = MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\tSocketLocation = GetMesh()->GetSocketLocation(Socket);\n\t}\n\treturn SocketLocation;\n}", "CodeBleu_score": 49.91220603983708}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\tFVector SocketLocation;\n\tif (MainWeaponMesh) {\n\t\tSocketLocation = MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\tSocketLocation = GetMesh()->GetSocketLocation(Socket);\n\t}\n\treturn SocketLocation;\n}", "CodeBleu_score": 49.91220603983708}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\tif (MainWeaponMesh) {\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 46.225249856871415}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 62.816704543545555}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 60.83149997571915}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority) {\n\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinEnemies) {\n\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 62.14269048679473}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result;\n\tFString playerId;\n\tFString playerName;\n\tFString playerPass;\n\tFString playerEmail;\n\tFString playerPlatform;\n\tFString playerPlatformId;\n\tFString playerPlatformFriendId;\n\tFString playerPlatformFriendName;\n\tFString playerPlatformFriendPlatform;\n\tFString playerPlatformFriendPlatformId;\n\tFString playerPlatformFriendPlatformFriendId;\n\tFString playerPlatformFriendPlatformFriendName;\n\tFString playerPlatformFriendPlatformFriendPlatform;\n\tFString playerPlatformFriendPlatformFriendPlatformId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendName;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatform;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendName;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatform;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendName;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatform;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendName;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatform;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformId;\n\tFString playerPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendPlatformFriendId;\n\tFString playerPlatformFriendPlatformFri", "CodeBleu_score": 6.931900052973283}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result = Super::ApproveLogin(Options);\n\tTArray<FString> params;\n\tOptions.ParseIntoArray(params, TEXT(\" \"), true);\n\tfor (int32 i = 0; i < params.Num(); i++) {\n\t\tFString& str = params[i];\n\t\tif (str.Split(\"=\", nullptr, &str)) {\n\t\t\tif (str.Equals(\"PlayerId\", ESearchCase::IgnoreCase)) {\n\t\t\t\tPlayerId = str;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 53.144542591710845}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result;\n\tFString playerId;\n\tFString playerName;\n\tFString playerKey;\n\tFString playerRegion;\n\tFString playerCountry;\n\tFString playerCity;\n\tFString playerZip;\n\tFString playerLatitude;\n\tFString playerLongitude;\n\tFString playerGender;\n\tFString playerBirthYear;\n\tFString playerCustom01;\n\tFString playerCustom02;\n\tFString playerCustom03;\n\tFString playerCustom04;\n\tFString playerCustom05;\n\tFString playerCustom06;\n\tFString playerCustom07;\n\tFString playerCustom08;\n\tFString playerCustom09;\n\tFString playerCustom10;\n\tFString playerCustom11;\n\tFString playerCustom12;\n\tFString playerCustom13;\n\tFString playerCustom14;\n\tFString playerCustom15;\n\tFString playerCustom16;\n\tFString playerCustom17;\n\tFString playerCustom18;\n\tFString playerCustom19;\n\tFString playerCustom20;\n\tFString playerCustom21;\n\tFString playerCustom22;\n\tFString playerCustom23;\n\tFString playerCustom24;\n\tFString playerCustom25;\n\tFString playerCustom26;\n\tFString playerCustom27;\n\tFString playerCustom28;\n\tFString playerCustom29;\n\tFString playerCustom30;\n\tFString playerCustom31;\n\tFString playerCustom32;\n\tFString playerCustom33;\n\tFString playerCustom34;\n\tFString playerCustom35;\n\tFString playerCustom36;\n\tFString playerCustom37;\n\tFString playerCustom38;\n\tFString playerCustom39;\n\tFString playerCustom40;\n\tFString playerCustom41;\n\tFString playerCustom42;\n\tFString playerCustom43;\n\tFString playerCustom44;\n\tFString playerCustom45;\n\tFString playerCustom46;\n\tFString playerCustom47;", "CodeBleu_score": 7.315843965776364}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t// Get the username and password from the input fields\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\t// If any of the fields are empty, display a warning message\n\t\tWarrningText->SetText(FText::FromString(TEXT(\"Please fill in all fields\")));\n\t}\n\telse {\n\t\t// Hide the register button\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t\t// Get the game instance\n\t\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\n\t\t// Call the RegisterNewPlayer method from the game instance to register the new player\n\t\tGI->RegisterNewPlayer(GetOwningPlayer(), UserName, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 59.8811948703821}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t// Get the username and password from the input fields\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"All fields must be filled\"));\n\t\treturn;\n\t}\n\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Get the game instance and call the RegisterNewPlayer method\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 61.85957182378266}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t// Retrieve the username, display name, and password from input fields.\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check if any of the fields are empty.\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\t// If any of the fields are empty, display a warning message.\n\t\tWarrningText->SetText(FText::FromString(TEXT(\"All fields must be filled out.\")));\n\t\treturn;\n\t}\n\n\t// Hide the register button.\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Retrieve the game instance.\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\n\t// Register the new player.\n\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 58.318779739982574}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif(InMod.Target.GetActor()){\n\t\tFVector2D ScreenLocation;\n\t\tUGameplayStatics::ProjectWorldToScreen(GetWorld(), InMod.HitResult.GetActor()->GetActorLocation(), ScreenLocation);\n\t\tFloatingCombatText->SetInfo(InMod.HitResult.GetActor(), InMod.Value, ScreenLocation);\n\t}\n}", "CodeBleu_score": 29.735977009710407}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.TargetActor) {\n        FVector2D ScreenLocation;\n        if (UGameplayStatics::ProjectWorldToScreen(GetWorld(), InMod.DamageLocation, ScreenLocation)) {\n            FloatingCombatText->SetInfo(InMod.Value, InMod.TargetActor, ScreenLocation);\n        }\n    }\n}", "CodeBleu_score": 28.988308437709854}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.TargetActor != nullptr) {\n\t\tFVector2D ScreenLocation;\n\t\tif (UGameplayStatics::ProjectWorldToScreen(GetWorld(), InMod.TargetActor->GetActorLocation(), ScreenLocation)) {\n\t\t\tFloatingCombatText->SetInfo(InMod.DamageValue, ScreenLocation);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.78201024224832}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\tif (AbilityInstance) {\n        UARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(AbilityInstance->GetOuter());\n        if (WeaponComponent) {\n            AARCharacter* OwningCharacter = Cast<AARCharacter>(WeaponComponent->GetOwner());\n            if (OwningCharacter) {\n                if (OwningCharacter->Role == ROLE_Authority) {\n                    MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n                    MagazineUpgrade->OnApplyUpgrade(WeaponComponent);\n                }\n            }\n        }\n    }\n    OnMagazineUpdateAdded();\n}", "CodeBleu_score": 48.70348819635888}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\tif (AbilityInstance == nullptr) {\n\t\treturn;\n\t}\n\n\tif (WeaponComponent == nullptr) {\n\t\treturn;\n\t}\n\n\tAActor* OwningActor = AbilityInstance->GetOwner();\n\tif (OwningActor == nullptr) {\n\t\treturn;\n\t}\n\n\tAARCharacter* OwningCharacter = Cast<AARCharacter>(OwningActor);\n\tif (OwningCharacter == nullptr) {\n\t\treturn;\n\t}\n\n\tif (!OwningCharacter->HasAuthority()) {\n\t\treturn;\n\t}\n\n\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade);\n\tif (MagazineUpgrade == nullptr) {\n\t\treturn;\n\t}\n\n\tMagazineUpgrade->UpdateValue(OwningCharacter);\n\tAbilityInstance->AddMagazineUpgrade(MagazineUpgrade);\n\tOnMagazineUpdateAdded();\n}", "CodeBleu_score": 47.05839621174492}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\tif (AbilityInstance == NULL) {\n\t\treturn;\n\t}\n\n\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetOuter());\n\tif (WeaponComponent == NULL) {\n\t\treturn;\n\t}\n\n\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\tif (Character == NULL) {\n\t\treturn;\n\t}\n\n\tif (Character->Role == ROLE_Authority) {\n\t\tMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\tMagazineUpgradeValue += MagazineUpgrade->MagazineUpgradeValue;\n\t\tAbilityInstance->AddMagazineUpgrade(MagazineUpgrade);\n\t}\n\n\tOnMagazineUpdateAdded();\n}", "CodeBleu_score": 66.67273483415313}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\n\tif (!Character)\n\t\treturn;\n\n\tUGAAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\n\tif (!AbilityComp)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, AbilityComp->BP_GetAbilityByHandle(InAbilityTag));\n}", "CodeBleu_score": 55.539820065237144}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tif (UARCharacter* Character = Cast<UARCharacter>(GetOwner())) {\n\t\tif (UGAAbilityComponent* AbilityComp = Character->GetAbilityComp()) {\n\t\t\tif (UARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(AbilityComp->BP_GetAbilityByHandle(InAbilityTag))) {\n\t\t\t\tSetAbilityToItem(LocalIndex, Ability);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.93907753219132}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\n\tif (!Character)\n\t\treturn;\n\n\tUGAAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\n\tif (!AbilityComp)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, AbilityComp->BP_GetAbilityByHandle(InAbilityTag));\n}", "CodeBleu_score": 55.539820065237144}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"\";\n\t\tData.SocketName = \"\";\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tif (CurrentWeaponIndex == LocalIndex) {\n\t\t\tUnequip(CurrentWeaponIndex);\n\t\t}\n\t}\n}", "CodeBleu_score": 64.05296454619227}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"\";\n\t\t//Data.SocketName = InWeapon->Socket;\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tCurrentWeaponIndex = -1;\n\t}\n}", "CodeBleu_score": 60.736377560677546}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tif (!Character->GetEquipedMainWeapon()->GetChildActor())\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tCharacter->GetEquipedMainWeapon()->SetChildActorClass(nullptr);\n\t}\n\tFARWeaponRPC Data;\n\tData.Weapon = \"\";\n\t//Data.SocketName = InWeapon->Socket;\n\tData.Position = FVector(0, 0, 0);\n\tData.Rotation = FRotator(0, 0, 0);\n\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\tServerHolster(Data);\n\tCurrentWeaponIndex = -1;\n}", "CodeBleu_score": 50.17253266309378}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer()) {\n        GetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n    }\n}", "CodeBleu_score": 71.95129145483894}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.15676266996132}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif ( !IsRunningDedicatedServer() ) {\n        GetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll( this );\n    }\n}", "CodeBleu_score": 47.70043129902094}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::GetIsEnableLoadingScreen()) {\n\t\tUAsyncLoadingScreenLibrary::SetIsStartup(false);\n\t\tSetupLoadingScreen(UAsyncLoadingScreenLibrary::GetDefault<ULoadingScreenSettings>());\n\t}\n}", "CodeBleu_score": 33.72858686471208}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogTemp, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::IsEnabled()) {\n\t\tUAsyncLoadingScreenLibrary::SetIsStartup(false);\n\t\tSetupLoadingScreen(UAsyncLoadingScreenLibrary::GetDefault<ULoadingScreenSettings>());\n\t}\n}", "CodeBleu_score": 31.963394468759088}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen\"));\n\tif (UAsyncLoadingScreenLibrary::GetIsEnableLoadingScreen()) {\n\t\tUAsyncLoadingScreenLibrary::SetIsStartup(false);\n\t\tSetupLoadingScreen(UAsyncLoadingScreenLibrary::GetDefault<ULoadingScreenSettings>());\n\t}\n}", "CodeBleu_score": 36.32151551719158}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t// Add images to startup background images\n\tfor (int32 i = 0; i < LoadingScreenSettings->StartupBackgroundImages.Num(); i++) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->StartupBackgroundImages[i]);\n\t\tif (Image != nullptr) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\t// Add images to default background images\n\tfor (int32 i = 0; i < LoadingScreenSettings->DefaultBackgroundImages.Num(); i++) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->DefaultBackgroundImages[i]);\n\t\tif (Image != nullptr) {\n\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.73012539304971}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tfor (const FStringAssetReference& BackgroundImage : LoadingScreenSettings->StartupBackgroundImages) {\n\t\t\tUObject* LoadedBackgroundImage = BackgroundImage.TryLoad();\n\t\t\tif (LoadedBackgroundImage) {\n\t\t\t\tStartupBackgroundImages.Add(Cast<UTexture2D>(LoadedBackgroundImage));\n\t\t\t}\n\t\t}\n\n\t\tfor (const FStringAssetReference& BackgroundImage : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\t\tUObject* LoadedBackgroundImage = BackgroundImage.TryLoad();\n\t\t\tif (LoadedBackgroundImage) {\n\t\t\t\tDefaultBackgroundImages.Add(Cast<UTexture2D>(LoadedBackgroundImage));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.87860794100084}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tfor (int32 i = 0; i < LoadingScreenSettings->StartupBackgroundImages.Num(); i++) {\n\t\t\tif (LoadingScreenSettings->StartupBackgroundImages[i].Image.TryLoad()) {\n\t\t\t\tStartupBackgroundImages.Add(Cast<UTexture2D>(LoadingScreenSettings->StartupBackgroundImages[i].Image.GetAsset()));\n\t\t\t}\n\t\t}\n\t\tfor (int32 i = 0; i < LoadingScreenSettings->DefaultBackgroundImages.Num(); i++) {\n\t\t\tif (LoadingScreenSettings->DefaultBackgroundImages[i].Image.TryLoad()) {\n\t\t\t\tDefaultBackgroundImages.Add(Cast<UTexture2D>(LoadingScreenSettings->DefaultBackgroundImages[i].Image.GetAsset()));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.045365375234084}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\tfloat Alpha = FMath::Clamp(FMath::TruncToFloat(InCurrentTime * 255.f), 0.f, 255.f);\n\n\tif (Alpha == 0.f || Alpha == 255.f) {\n\t\tbReverseDirection = !bReverseDirection;\n\t}\n\n\tif (bReverseDirection) {\n\t\tAlpha -= InDeltaTime * 255.f;\n\t} else {\n\t\tAlpha += InDeltaTime * 255.f;\n\t}\n\n\tSetTextRenderColor(FColor(255, 255, 255, Alpha));\n\n\treturn bAnimateText ? EActiveTimerReturnType::Continue : EActiveTimerReturnType::Stop;\n}", "CodeBleu_score": 25.804436325045444}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t// Adjust the alpha value of the text based on the elapsed time and animation speed.\n\tTextAlpha = FMath::FInterpConstantTo(TextAlpha, (bFadeIn ? 1.0f : 0.0f), InDeltaTime, FadeSpeed);\n\n\t// The animation is complete when the alpha reaches the minimum or maximum value.\n\tbAnimationComplete = (TextAlpha >= 1.0f || TextAlpha <= 0.0f);\n\n\t// Reverse the animation direction.\n\tbFadeIn = !bFadeIn;\n\n\t// Update the text's color.\n\tFLinearColor TextColor = FadeColor;\n\tTextColor.A = TextAlpha;\n\tTextWidget->SetColorAndOpacity(TextColor);\n\n\treturn bAnimationComplete ? EActiveTimerReturnType::Stop : EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 28.94522076614271}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\tif (bIsPulsing) {\n\t\tconst float ElapsedTime = (float)InCurrentTime - StartTime;\n\t\tconst float Alpha = FMath::Fmod(ElapsedTime * PulseSpeed, 1.0f);\n\t\tconst float AlphaRange = MaxAlpha - MinAlpha;\n\t\tconst float AlphaValue = (AlphaRange * Alpha) + MinAlpha;\n\t\tSetText(Text, AlphaValue);\n\t}\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 31.047240750583338}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\tData->Lock.lock();\n\tbool Return = Data->Index != -1;\n\tData->Lock.unlock();\n\treturn Return;\n}", "CodeBleu_score": 52.199118467528315}, {"code": "bool FRaceAwaiter::await_ready(){\n\tData->Lock.lock\n\tbool ready = Data->Index != -1\n\tData->Lock.unlock\n\treturn ready\n}", "CodeBleu_score": 42.02149366894243}, {"code": "bool FRaceAwaiter::await_ready(){\n\tData->Lock.lock\n\tbool Result = Data->Index != -1\n\tData->Lock.unlock\n\treturn Result\n}", "CodeBleu_score": 42.06916824220398}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tFFindPathSharedPtr* FindPathSharedPtr = static_cast<FFindPathSharedPtr*>(State);\n\tif (FindPathSharedPtr->QueryID == INVALID_QUERYID) {\n\t\treturn true;\n\t}\n\tif (bCleanup) {\n\t\tFindPathSharedPtr->NS1->AbortAsyncFindPathRequest(FindPathSharedPtr->QueryID);\n\t\tdelete FindPathSharedPtr;\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.98501810261026}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tFFindPathSharedPtr* FindPathSharedPtr = static_cast<FFindPathSharedPtr*>(State);\n\tif (bCleanup) {\n\t\tif (FindPathSharedPtr->QueryID.IsValid()) {\n\t\t\tFindPathSharedPtr->NS1->AbortAsyncFindPathRequest(FindPathSharedPtr->QueryID);\n\t\t\tFindPathSharedPtr->QueryID = INVALID_FNAV_PATH_QUERY_ID;\n\t\t}\n\t\tdelete FindPathSharedPtr;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 36.78081586423482}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tFFindPathSharedPtr* FindPathSharedPtr = static_cast<FFindPathSharedPtr*>(State);\n\tif (bCleanup && FindPathSharedPtr->IsValid()) {\n\t\tFindPathSharedPtr->Get()->NS1.Get()->AbortAsyncFindPathRequest(FindPathSharedPtr->Get()->QueryID);\n\t\tFindPathSharedPtr->Reset();\n\t}\n\treturn FindPathSharedPtr->IsValid();\n}", "CodeBleu_score": 35.04883331389302}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 45.72725353533486}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && get_viewport()->get_audio_listener_2d()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 56.94396755104769}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (!is_part_of_edited_scene() && !is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 47.58607142499188}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active.is_set()) {\n\t\treturn;\n\t}\n\n\twhile (p_frames) {\n\t\tint to_mix = MIN(p_frames, buffer_size);\n\n\t\tlock();\n\t\taudio_server_process(to_mix, mix_buffer, false);\n\t\tunlock();\n\n\t\tfor (int i = 0; i < to_mix * 2; i++) {\n\t\t\tp_buffer[i] = mix_buffer[i];\n\t\t}\n\n\t\tp_frames -= to_mix;\n\t\tp_buffer += to_mix * 2;\n\t}\n}", "CodeBleu_score": 43.10763290553202}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active.is_set()) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\tint32_t *bufptr = p_buffer;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(todo, mix_chunk_size);\n\n\t\tlock();\n\t\taudio_server_process(to_mix, bufptr, false);\n\t\tunlock();\n\n\t\tbufptr += to_mix * get_channel_count();\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 34.77585185012993}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active.is_set()) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(todo, mix_chunk_size);\n\n\t\tlock();\n\t\taudio_server_process(to_mix, p_buffer, false);\n\t\tunlock();\n\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 30.22948053011776}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tif (gravity_is_point) {\n\t\tVector2 rel = p_position - gravity_vec;\n\t\treal_t dist = rel.length();\n\t\tif (dist == 0) {\n\t\t\tr_gravity = Vector2();\n\t\t} else {\n\t\t\treal_t g = gravity * gravity_distance_scale / Math::pow(dist, gravity_point_attenuation);\n\t\t\tr_gravity = rel.normalized() * g;\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vec * gravity;\n\t}\n}", "CodeBleu_score": 44.178274278200405}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tif (gravity_is_point) {\n\n\t\tVector2 rel_vec = p_position - gravity_vec;\n\t\treal_t sqr_dist = rel_vec.length_squared();\n\t\tif (sqr_dist == 0) {\n\n\t\t\tr_gravity = Vector2();\n\t\t} else {\n\n\t\t\treal_t g = gravity * gravity_distance_scale / sqr_dist;\n\t\t\tr_gravity = rel_vec.normalized() * g;\n\t\t}\n\t} else {\n\n\t\tr_gravity = gravity_vec * gravity;\n\t}\n}", "CodeBleu_score": 44.09970568027731}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tif (gravity_is_point) {\n\t\tVector2 gravity_dir = get_gravity_vector();\n\t\tVector2 pos = get_transform().xform(gravity_point);\n\t\tfloat d = pos.distance_squared_to(p_position);\n\t\tif (d == 0) {\n\t\t\tr_gravity = gravity_dir * gravity;\n\t\t} else {\n\t\t\tfloat g = gravity * get_gravity_point_unit_distance() / Math::sqrt(d);\n\t\t\tr_gravity = gravity_dir * g;\n\t\t}\n\t} else {\n\t\tr_gravity = get_gravity_vector() * gravity;\n\t}\n}", "CodeBleu_score": 47.98754555810488}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\tList<Constraint2D *> *clist = get_constraint_list();\n\tList<Constraint2D *>::Element *I = clist->front();\n\twhile (I) {\n\t\tConstraint2D *c = I->get();\n\t\tif (c->get_body_count() == 0) {\n\t\t\tI = I->next();\n\t\t\tcontinue;\n\t\t}\n\t\tBody2D *b = c->get_body_ptr(0);\n\t\tif (b && b->is_active() == false) {\n\t\t\tb->set_active(true);\n\t\t}\n\t\tif (c->get_body_count() == 2) {\n\t\t\tBody2D *b = c->get_body_ptr(1);\n\t\t\tif (b && b->is_active() == false) {\n\t\t\t\tb->set_active(true);\n\t\t\t}\n\t\t}\n\t\tI = I->next();\n\t}\n}", "CodeBleu_score": 34.7720069575283}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t//wake up neighbours\n\tList<Constraint2D *> *cl = get_constraint_list();\n\tList<Constraint2D *>::Element *E = cl->front();\n\twhile (E) {\n\t\tConstraint2D *c = E->get();\n\t\tif (c->get_body_count() > 0) {\n\t\t\tfor (int i = 0; i < c->get_body_count(); i++) {\n\t\t\t\tBody2D *b = c->get_body_ptr(i);\n\t\t\t\tif (b && b->get_mode() == MODE_RIGID && !b->is_active()) {\n\t\t\t\t\tb->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tE = E->next();\n\t}\n}", "CodeBleu_score": 47.57453663851917}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\tList<Constraint2D*> *cl = get_constraint_list();\n\tList<Constraint2D*>::Element *C = cl->front();\n\twhile (C) {\n\t\tConstraint2D *c = C->get();\n\t\tBody2D *b = c->get_body_ptr();\n\t\tif (b) {\n\t\t\tif (b->get_mode() == Body2D::MODE_RIGID) {\n\t\t\t\tif (!b->is_active()) {\n\t\t\t\t\tb->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tC = C->next();\n\t}\n}", "CodeBleu_score": 36.84642458688237}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\tERR_FAIL_COND(!ObjectDB::get_instance(space_override));\n\n\tif (monitor_query_list.in_list())\n\t\treturn;\n\n\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n}", "CodeBleu_score": 46.012112608995345}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\tif (monitoring) {\n\t\tERR_FAIL_COND(space_override == SPACE_OVERRIDE_DISABLED);\n\t\tPhysicsServer3D::get_singleton()->area_set_monitor_callback(get_rid(), this, \"_body_inout\");\n\t\tPhysicsServer3D::get_singleton()->area_set_area_monitor_callback(get_rid(), this, \"_area_inout\");\n\t\tPhysicsServer3D::get_singleton()->area_set_ray_pickable(get_rid(), ray_pickable);\n\t\tPhysicsServer3D::get_singleton()->area_set_monitorable(get_rid(), true);\n\n\t\tif (space_override == SPACE_OVERRIDE_COMBINE || space_override == SPACE_OVERRIDE_COMBINE_REPLACE) {\n\t\t\tPhysicsServer3D::get_singleton()->area_add_to_monitor_query_list(get_rid(), PhysicsServer3D::get_singleton()->area_get_space(get_rid()));\n\t\t} else if (space_override == SPACE_OVERRIDE_REPLACE) {\n\t\t\tPhysicsServer3D::get_singleton()->area_add_to_monitor_query_list(get_rid(), get_world_3d()->get_space());\n\t\t} else {\n\t\t\tPhysicsServer3D::get_singleton()->area_add_to_monitor_query_list(get_rid(), get_world_3d()->get_space());\n\t\t}\n\t} else {\n\t\tPhysicsServer3D::get_singleton()->area_set_monitor_callback(get_rid(), NULL, NULL);\n\t\tPhysicsServer3D::get_singleton()->area_set_area_monitor_callback(get_rid(), NULL, NULL);\n\t\tPhysicsServer3D::get_singleton()->area_set_monitorable(get_rid(), false);\n\t}\n}", "CodeBleu_score": 39.23385971269073}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\tERR_FAIL_NULL(get_space());\n\tif (monitor_query_list.in_list())\n\t\treturn; //already queued\n\n\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n}", "CodeBleu_score": 67.0644506510568}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\tTransform xform = get_transform();\n\n\tPhysicsServer3D::get_singleton()->body_set_state(get_rid(), PhysicsServer3D::BODY_STATE_TRANSFORM, xform);\n\n\tif (PhysicsServer3D::get_singleton()->body_is_mode_changed(get_rid(), PhysicsServer3D::BODY_MODE_KINEMATIC))\n\t\treturn;\n\n\tTransform principal_xform = PhysicsServer3D::get_singleton()->body_get_principal_inertia_axes(get_rid());\n\tprincipal_xform.basis.orthonormalize();\n\n\tTransform inertia_tensor = PhysicsServer3D::get_singleton()->body_get_inverse_inertia_tensor(get_rid());\n\tTransform global_inertia_tensor = principal_xform.xform(inertia_tensor * principal_xform.affine_inverse());\n\n\tPhysicsServer3D::get_singleton()->body_set_state(get_rid(), PhysicsServer3D::BODY_STATE_INERTIA_TENSOR, global_inertia_tensor);\n}", "CodeBleu_score": 36.20410168232382}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\tTransform t = get_transform();\n\tTransform t_inv = t.affine_inverse();\n\n\tVector3 x = t.xform(Vector3(1, 0, 0));\n\tVector3 y = t.xform(Vector3(0, 1, 0));\n\tVector3 z = t.xform(Vector3(0, 0, 1));\n\n\tinertia_tensor = Basis(x, y, z) * inertia_tensor * Basis(x, y, z).inverse();\n\n\tVector3 origin = t.origin;\n\tfloat mass = get_mass();\n\n\tif (mass == 0) {\n\t\tcenter_of_mass = origin;\n\t\tprincipal_inertia_axes = Basis();\n\t\tinertia = Vector3();\n\t\treturn;\n\t}\n\n\t// Find the center of mass by averaging the transforms of all shapes\n\t// This is not mathematically correct, but it works because the transforms are\n\t// relative to the center of mass\n\tcenter_of_mass = Vector3();\n\tfor (int i = 0; i < shapes.size(); i++) {\n\t\tcenter_of_mass += t.xform(shapes[i]->get_transform().origin) * shapes[i]->get_mass();\n\t}\n\tcenter_of_mass /= mass;\n\n\t// Find the principal inertia axes by using the center of mass transform\n\t// This is also not mathematically correct, but it works because the transforms are\n\t// relative to the center of mass\n\tprincipal_inertia_axes = Basis(t.xform(Vector3(1, 0, 0)), t.xform(Vector3(0, 1, 0)), t.xform(Vector3(0, 0, 1)));\n\n\t// Find the inertia tensor by transforming the inverse inertia with the principal inertia axes\n\tinertia = principal_inertia_axes.inverse() * inertia_tensor * principal_inertia_axes;\n}", "CodeBleu_score": 41.73567047595711}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\tTransform gt = get_global_transform();\n\tTransform gi = gt.affine_inverse();\n\n\t// Recalculate principal axes and inertia\n\tBasis principal_inertia_axes = Basis(principal_inertia_axes_local);\n\tprincipal_inertia_axes.rotate(gi.basis);\n\n\tinertia = principal_inertia_axes.xform(inverse_inertia);\n\tinertia = inertia.xform(principal_inertia_axes.inverse());\n\n\t// Recalculate center of mass\n\tTransform local_transform = get_transform();\n\tVector3 new_center_of_mass = local_transform.xform(center_of_mass_local);\n\n\t// Recalculate center of mass offset\n\tcenter_of_mass_offset = local_transform.origin - new_center_of_mass;\n\n\t// Recalculate center of mass\n\tcenter_of_mass = new_center_of_mass;\n\n\t// Recalculate center of mass velocity\n\tVector3 new_center_of_mass_velocity = center_of_mass_velocity_local;\n\tnew_center_of_mass_velocity = local_transform.basis.xform(new_center_of_mass_velocity);\n\tcenter_of_mass_velocity = new_center_of_mass_velocity;\n}", "CodeBleu_score": 45.41561333458416}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer *audio_server = AudioServer::get_singleton();\n\tif (audio_server) {\n\t\taudio_server->_driver_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 72.20871596657929}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time)\n\t\tupdate_mix_time(p_frames);\n\n\tAudioServer *as = AudioServer::get_singleton();\n\tif (as) {\n\t\tas->_driver_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 63.17143778650247}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time)\n\t\tupdate_mix_time(p_frames);\n\n\tAudioServer *audio_server = AudioServer::get_singleton();\n\tif (audio_server)\n\t\taudio_server->_driver_process(p_frames, p_buffer);\n}", "CodeBleu_score": 60.44334265533112}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(!p_feed.is_valid());\n\n\tString feed_name = p_feed->get_name();\n\tString feed_id = p_feed->get_id();\n\tint feed_position = p_feed->get_position();\n\n\tfeeds.remove_at(feed_position);\n\tfor (int i = feed_position; i < feeds.size(); i++) {\n\t\tfeeds[i]->set_position(i);\n\t}\n\n\tprint_verbose(\"Removed feed '\" + feed_name + \"' with ID '\" + feed_id + \"' at position \" + itos(feed_position) + \".\");\n\temit_signal(SNAME(\"feed_removed\"), feed_id);\n}", "CodeBleu_score": 56.07204849866749}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tif (!p_feed.is_valid()) {\n\t\tprint_verbose(\"CameraServer::remove_feed(): feed is invalid.\");\n\t\treturn;\n\t}\n\n\tprint_verbose(\"CameraServer::remove_feed(): feed to remove: \" + p_feed->get_name() + \" (ID: \" + itos(p_feed->get_id()) + \", position: \" + itos(p_feed->get_position()) + \").\");\n\n\tfeeds.remove_at(p_feed->get_position());\n\n\temit_signal(\"feed_removed\", p_feed->get_id());\n\n\tprint_verbose(\"CameraServer::remove_feed(): feed removed.\");\n}", "CodeBleu_score": 41.73761244640144}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\tprint_verbose(\"Removing feed:\", p_feed->get_name(), \"at position:\", p_feed->get_position());\n\n\tfeeds.remove_at(p_feed->get_position());\n\n\tfor (int i = p_feed->get_position(); i < feeds.size(); i++) {\n\t\tfeeds[i]->set_position(i);\n\t}\n\n\temit_signal(\"feed_removed\", p_feed->get_id());\n}", "CodeBleu_score": 45.54221290936956}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tCCASSERT(action != NULL, \"\");\n\n\tEaseRateAction *pRet = new EaseRateAction();\n\tif (pRet && pRet->initWithAction(action, rate)) {\n\t\tpRet->autorelease();\n\t\treturn pRet;\n\t}\n\n\tCC_SAFE_DELETE(pRet);\n\treturn NULL;\n}", "CodeBleu_score": 53.503491129852264}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction *pRet = new EaseRateAction();\n\tif (pRet && pRet->initWithAction(action, rate)) {\n\t\tpRet->autorelease();\n\t\treturn pRet;\n\t}\n\tCC_SAFE_DELETE(pRet);\n\treturn nullptr;\n}", "CodeBleu_score": 48.95875016434677}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 48.764962528734344}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\telse {\n\t\tfor (Node* child : node->getChildren()) {\n\t\t\tNode* result = findChildByNameRecursively(child, childName);\n\t\t\tif (result != nullptr) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 48.954053252353646}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n        return node;\n    }\n    for (auto child : node->getChildren()) {\n        auto found = findChildByNameRecursively(child, childName);\n        if (found) {\n            return found;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 53.03644855785491}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n        return node;\n    }\n    else {\n        for (Node* child : node->getChildren()) {\n            Node* match = findChildByNameRecursively(child, childName);\n            if (match != nullptr) {\n                return match;\n            }\n        }\n        return nullptr;\n    }\n}", "CodeBleu_score": 54.967964572439996}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\tauto iter = s_runningAnimates.find(this);\n    if (iter != s_runningAnimates.end()) {\n        s_runningAnimates.erase(iter);\n    }\n    \n    auto iter1 = s_fadeOutAnimates.find(this);\n    if (iter1 != s_fadeOutAnimates.end()) {\n        s_fadeOutAnimates.erase(iter1);\n    }\n    \n    auto iter2 = s_fadeInAnimates.find(this);\n    if (iter2 != s_fadeInAnimates.end()) {\n        s_fadeInAnimates.erase(iter2);\n    }\n}", "CodeBleu_score": 47.22295439670907}, {"code": "void Animate3D::removeFromMap(){\n\tauto it = _animations.find(_animationName);\n    if(it != _animations.end()) {\n        auto target = it->second;\n        auto it2 = s_runningAnimates.find(target);\n        if(it2 != s_runningAnimates.end()) {\n            s_runningAnimates.erase(it2);\n        }\n        auto it3 = s_fadeOutAnimates.find(target);\n        if(it3 != s_fadeOutAnimates.end()) {\n            s_fadeOutAnimates.erase(it3);\n        }\n        auto it4 = s_fadeInAnimates.find(target);\n        if(it4 != s_fadeInAnimates.end()) {\n            s_fadeInAnimates.erase(it4);\n        }\n    }\n}", "CodeBleu_score": 51.09181500135935}, {"code": "void Animate3D::removeFromMap(){\n\tauto iter = s_runningAnimates.find(this);\n    if (iter != s_runningAnimates.end())\n    {\n        s_runningAnimates.erase(iter);\n    }\n\n    auto iter1 = s_fadeOutAnimates.find(this);\n    if (iter1 != s_fadeOutAnimates.end())\n    {\n        s_fadeOutAnimates.erase(iter1);\n    }\n\n    auto iter2 = s_fadeInAnimates.find(this);\n    if (iter2 != s_fadeInAnimates.end())\n    {\n        s_fadeInAnimates.erase(iter2);\n    }\n}", "CodeBleu_score": 47.8175615535964}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tAnimation3D* animation = nullptr;\n    auto key = FileUtils::getInstance()->fullPathForFilename(fileName);\n    key += animationName;\n    animation = Animation3DCache::getInstance()->getAnimation(key);\n    if (!animation) {\n        animation = new (std::nothrow) Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            animation->autorelease();\n            Animation3DCache::getInstance()->addAnimation(animation, key);\n        }\n        else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n    return animation;\n}", "CodeBleu_score": 62.85514758726987}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tAnimation3D *animation = nullptr;\n    std::string key = fileName + animationName;\n    Animation3DCache *cache = Animation3DCache::getInstance();\n    animation = cache->getAnimation(key);\n    if (animation == nullptr) {\n        animation = new Animation3D();\n        animation->initWithFile(fileName, animationName);\n        animation->autorelease();\n        cache->addAnimation(animation, key);\n    }\n    return animation;\n}", "CodeBleu_score": 49.09236877510209}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tAnimation3D *animation = nullptr;\n    auto key = fileName + animationName;\n    animation = Animation3DCache::getInstance()->getAnimation(key);\n    if (!animation) {\n        animation = new Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            Animation3DCache::getInstance()->addAnimation(animation, key);\n            animation->autorelease();\n        }\n        else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n    return animation;\n}", "CodeBleu_score": 59.096497983149646}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto itor = _animations.begin(); itor != _animations.end(); ) {\n        if (itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 92.22158645344504}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\tauto itor = _animations.begin();\n    while (itor != _animations.end()) {\n        if (itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 82.36803863483895}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto itor = _animations.begin(); itor != _animations.end();) {\n\t\tif (itor->second->getReferenceCount() == 1) {\n\t\t\titor->second->release();\n\t\t\titor = _animations.erase(itor);\n\t\t} else {\n\t\t\t++itor;\n\t\t}\n\t}\n}", "CodeBleu_score": 80.91146876292032}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tauto ret = new BillBoard();\n    if (ret && ret->initWithTexture(texture, mode)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 52.372140651224285}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 72.2490442550372}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 72.2490442550372}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty())\n    {\n        CCLOG(\"warning: Bundle3D::load: path should be non-null\");\n        return false;\n    }\n    \n    if (_path == path)\n    {\n        CCLOG(\"warning: Bundle3D::load: the bundle has already been loaded\");\n        return true;\n    }\n    \n    // Clear previously loaded data\n    clear();\n    \n    // Get file extension\n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \".c3t\")\n    {\n        if (!loadJson(path))\n        {\n            return false;\n        }\n    }\n    else if (ext == \".c3b\")\n    {\n        if (!loadBinary(path))\n        {\n            return false;\n        }\n    }\n    else\n    {\n        CCLOG(\"warning: Unsupported file format: %s\", ext.c_str());\n        return false;\n    }\n    \n    // Get model path\n    getModelRelativePath(path);\n    \n    return true;\n}", "CodeBleu_score": 56.042548617699076}, {"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty() || path == _path)\n        return true;\n    \n    // Clear previously loaded data\n    clear();\n    \n    // Get file extension\n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    \n    // Load file\n    bool ret = false;\n    if (ext == \".c3t\")\n    {\n        ret = loadJson(path);\n    }\n    else if (ext == \".c3b\")\n    {\n        ret = loadBinary(path);\n    }\n    else\n    {\n        CCLOG(\"warning: Invalid format for 3D file: '%s'.\", path.c_str());\n    }\n    \n    if (ret)\n        _path = path;\n    \n    return ret;\n}", "CodeBleu_score": 63.669747731052894}, {"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty() || path == _path)\n        return true;\n\n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \".c3t\")\n    {\n        if (loadJson(path))\n        {\n            _path = path;\n            return true;\n        }\n    }\n    else if (ext == \".c3b\")\n    {\n        if (loadBinary(path))\n        {\n            _path = path;\n            return true;\n        }\n    }\n    else\n    {\n        CCLOG(\"warning: Invalid file extension for bundle '%s'.\", path.c_str());\n    }\n\n    clear();\n    return false;\n}", "CodeBleu_score": 59.46056779647885}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tif (!skindata) return false;\n\n    skindata->resetData();\n\n    if (_version == VERSION_0_1) {\n        return loadSkinDataBinary(skindata);\n    } else if (_version == VERSION_0_2) {\n        return loadSkinDataJson(skindata);\n    }\n\n    return false;\n}", "CodeBleu_score": 72.30343207381186}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tif (!skindata)\n        return false;\n\n    skindata->resetData();\n\n    if (_version == \"1.2\" || _version == \"1.3\" || _version == \"1.4\")\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 61.234014793571454}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tskindata->resetData();\n    if (_version == \"1.0\")\n    {\n        return loadSkinDataBinary(skindata);\n    }\n    else\n    {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 87.48926546460616}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\n    size_t bytesToRead = std::min(nmemb * size, thiz->_fileData.getSize() - thiz->_fileData.getBytes());\n    memcpy(ptr, thiz->_fileData.getData() + thiz->_fileData.getBytes(), bytesToRead);\n    thiz->_fileData.setBytes(thiz->_fileData.getBytes() + bytesToRead);\n\n    return bytesToRead;\n}", "CodeBleu_score": 56.1790774894052}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n    size_t bytesToRead = std::min(size * nmemb, thiz->_fileData.getSize() - thiz->_filePosition);\n    memcpy(ptr, thiz->_fileData.getBytes() + thiz->_filePosition, bytesToRead);\n    thiz->_filePosition += bytesToRead;\n    return bytesToRead;\n}", "CodeBleu_score": 56.73256682840274}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = std::min(size * nmemb, thiz->_fileData.getSize() - thiz->_fileData.getBytes());\n\tmemcpy(ptr, thiz->_fileData.getData() + thiz->_fileData.getBytes(), bytesToRead);\n\tthiz->_fileData.setBytes(thiz->_fileData.getBytes() + bytesToRead);\n\treturn bytesToRead;\n}", "CodeBleu_score": 54.456504649628975}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t_pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.781689765479264}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t_pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.781689765479264}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t_pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.781689765479264}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(s_DownloaderAndroidMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it == sDownloaderMap.end()) {\n        return nullptr;\n    }\n    return it->second;\n}", "CodeBleu_score": 69.19321022999743}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(s_DownloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 66.49178740272528}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(s_DownloaderAndroidMapMutex);\n    auto it = sDownloaderAndroidMap.find(id);\n    if (it != sDownloaderAndroidMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 65.5728551865436}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\tend\n", "CodeBleu_score": 3.5404572783644284}, {"code": "function M.playMusic(filename, isLoop)\n\tend\n", "CodeBleu_score": 3.5404572783644284}, {"code": "function M.playMusic(filename, isLoop)\n\tend\n", "CodeBleu_score": 3.5404572783644284}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtEffect = cc.BillBoard:create(\"Images/hurtEffect.png\")\n    local hurtAnimation = cc.animationCache:getAnimation(\"hurtAnimation\")\n    hurtEffect:setScale(0.5)\n    hurtEffect:setPosition3D(cc.V3(0, 0, 0))\n    hurtEffect:runAction(cc.Sequence:create(cc.Animate:create(hurtAnimation), cc.RemoveSelf:create()))\n    target:addChild(hurtEffect, 2, 2)\n    hurtEffect:setCameraMask(cc.CameraFlag.USER1)", "CodeBleu_score": 61.557401856573094}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtEffect = cc.BillBoard:create(\"Images/hurt.png\")\n    hurtEffect:setCameraMask(cc.CameraFlag.USER1)\n    hurtEffect:setScale(1.5)\n    hurtEffect:setPosition3D(cc.V3(0, 0, 0))\n    hurtEffect:runAction(cc.Sequence:create(\n        cc.Animate:create(cc.animationCache:getAnimation(\"hurtAnimation\")),\n        cc.RemoveSelf:create()\n    ))\n    target:addChild(hurtEffect)", "CodeBleu_score": 59.329656129457305}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtEffect = cc.BillBoard:create(\"effects/hurt.png\")\n    local hurtAnimation = cc.AnimationCache:getInstance():getAnimation(\"hurtAnimation\")\n    hurtEffect:setScale(0.5)\n    hurtEffect:setPosition3D(cc.V3(0, 0, 0))\n    hurtEffect:runAction(cc.Sequence:create(cc.Animate:create(hurtAnimation), cc.RemoveSelf:create()))\n    target:addChild(hurtEffect, 0, 1)\n    hurtEffect:setCameraMask(cc.CameraFlag.USER1)", "CodeBleu_score": 61.11507882908839}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n    self.part2:stopSystem()\n    self:runAction(cc.Sequence:create(cc.DelayTime:create(0.5), cc.RemoveSelf:create()))\n    local magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"magic\"))\n    magic:setScale(0.5)\n    self:addChild(magic, 10)\n    magic:setPositionZ(0)\n    magic:setGlobalZOrder(100)\n    magic:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic.png\"):getTexture(), magicf:getRect())\n    magic:setRotation3D(cc.vec3(0, 0, 0))\n    self.sp:setTextureRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"mage_attack.png\"):getRect())\n    self.sp:runAction(cc.Sequence:create(cc.FadeOut:create(0.5), cc.RemoveSelf:create()))\n    self.sp:setScale(1.5)", "CodeBleu_score": 63.993116905770975}, {"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n    self.part2:stopSystem()\n\n    local sequence = cc.Sequence:create(\n        cc.DelayTime:create(0.1),\n        cc.RemoveSelf:create())\n    sequence:setTag(10000)\n    self:runAction(sequence)\n\n    local magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"magic\"))\n    magic:setGlobalZOrder(10000)\n    magic:setScale(1.5)\n    self:addChild(magic)\n    magic:setPositionZ(1)\n    magic:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic.png\"):getTexture(), magicf:getRect())\n    magic:setRotation3D(cc.vec3(0, 0, 90))\n    self.sp:setScale(1.5)\n\n    local sequence = cc.Sequence:create(\n        cc.DelayTime:create(0.1),\n        cc.FadeOut:create(0.5),\n        cc.RemoveSelf:create())\n    sequence:setTag(10000)\n    self.sp:runAction(sequence)", "CodeBleu_score": 62.88425184571238}, {"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n    self.part2:stopSystem()\n    local seq = cc.Sequence:create(\n        cc.DelayTime:create(0.05),\n        cc.CallFunc:create(\n            function()\n                self:removeFromParent()\n            end\n        )\n    )\n    self:runAction(seq)\n    local magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"magic\"))\n    magic:setScale(0.5)\n    self.sp:runAction(cc.Sequence:create(cc.FadeOut:create(0.5), cc.RemoveSelf:create()))\n    self.sp:setTextureRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic_01.png\"):getRect())\n    self.sp:setScale(0.5)\n    self:addChild(magic)\n    magic:setPositionZ(0)\n    magic:setGlobalZOrder(self:getCameraMask())\n    magic:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic_01.png\"):getTexture(), cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic_01.png\"):getTextureRect())\n    magic:setRotation3D(cc.vec3(0, 0, 0))", "CodeBleu_score": 62.59499830693166}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\tlocal heroName = hero.name\n\tif heroName == \"Knight\" then\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightImage:setGreyShader()\n\t\tself.KnightFrame:setGreyShader()\n\telseif heroName == \"Mage\" then\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageImage:setGreyShader()\n\t\tself.MageFrame:setGreyShader()\n\telseif heroName == \"Archer\" then\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherImage:setGreyShader()\n\t\tself.ArcherFrame:setGreyShader()\n\tend", "CodeBleu_score": 45.54456793429939}, {"code": "function BattlefieldUI:heroDead(hero)\n\tif hero.name == \"Knight\" then\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightImage:setGreyShader()\n\t\tself.KnightFrame:setGreyShader()\n\telseif hero.name == \"Mage\" then\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageImage:setGreyShader()\n\t\tself.MageFrame:setGreyShader()\n\telseif hero.name == \"Archer\" then\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherImage:setGreyShader()\n\t\tself.ArcherFrame:setGreyShader()\n\tend", "CodeBleu_score": 48.053996719703626}, {"code": "function BattlefieldUI:heroDead(hero)\n\tlocal heroName = hero.name\n    local heroUI = self.heroUIs[heroName]\n    local heroImage = heroUI.image\n    local heroFrame = heroUI.frame\n    local heroFullSignal = heroUI.fullSignal\n    local heroClone = heroUI.clone\n\n    heroImage:setGreyShader()\n    heroFrame:setGreyShader()\n    heroFullSignal:setVisible(false)\n    heroClone:setVisible(false)", "CodeBleu_score": 23.906762559252016}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t--[[\n    If there is a special camera active, adjust the camera position and orientation.\n    ]]\n    if camera.specialCameraActive then\n        --[[\n        Interpolate the camera position towards the special camera target.\n        ]]\n        camera.position = cc.pLerp(camera.position, camera.specialCameraTarget, dt * camera.specialCameraSpeed)\n        --[[\n        Set the camera to look at the special camera look at point.\n        ]]\n        camera:lookAt(camera.specialCameraLookAt)\n    --[[\n    If there are active heroes, adjust the camera position and orientation.\n    ]]\n    elseif List.getSize(heroes) > 0 then\n        --[[\n        Get the focus point of the heroes.\n        ]]\n        local focusPoint = getFocusPointOfHeros()\n        --[[\n        Interpolate the camera position towards the focus point of the heroes.\n        ]]\n        camera.position = cc.pLerp(camera.position, focusPoint, dt * camera.heroCameraSpeed)\n        --[[\n        Set the camera to look at the focus point of the heroes.\n        ]]\n        camera:lookAt(focusPoint)\n    end", "CodeBleu_score": 28.313224726980312}, {"code": "local function moveCamera(dt)\n\t-- If a special camera is active, adjust the camera position and orientation\n    if specialCameraActive then\n        -- Interpolate the camera position towards the special camera target\n        camera:setPosition(cc.pLerp(camera:getPosition(), specialCameraTarget, dt * 5))\n        -- Set the camera to look at the special camera look-at point\n        camera:lookAt(specialCameraLookAt)\n    else\n        -- If there are active heroes, adjust the camera position and orientation\n        if List.getSize(heroes) > 0 then\n            -- Get the focus point of the heroes\n            local focusPoint = getFocusPointOfHeros()\n            -- Interpolate the camera position towards the focus point of the heroes\n            camera:setPosition(cc.pLerp(camera:getPosition(), focusPoint, dt * 5))\n            -- Set the camera to look at the focus point of the heroes\n            camera:lookAt(focusPoint)\n        end\n    end", "CodeBleu_score": 28.08214738264388}, {"code": "local function moveCamera(dt)\n\tif (specialCamera.isActive) then \n        -- Interpolate camera position towards special camera target\n        camera:setPosition(camera:getPosition():lerp(specialCamera.target, specialCamera.speed * dt))\n        -- Set camera to look at special camera lookAt point\n        camera:lookAt(specialCamera.lookAt)\n    else \n        -- Get focus point of all active heroes\n        local focusPoint = getFocusPointOfHeros()\n        -- Interpolate camera position towards focus point\n        camera:setPosition(camera:getPosition():lerp(focusPoint, camera.speed * dt))\n        -- Set camera to look at focus point\n        camera:lookAt(focusPoint)\n    end\n    -- Update camera position and orientation\n    camera:setPosition3D(camera:getPosition3D())\n    camera:setOrientation(camera:getOrientation())", "CodeBleu_score": 27.766922479803704}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\tfor k, v in pairs(HeroManager.heroes) do\n        if v.effectNode then\n            v.effectNode:setPosition(v:getPosTable())\n        end\n    end", "CodeBleu_score": 26.68522898518053}, {"code": "local function updateParticlePos()\n\tfor i, hero in ipairs(HeroManager.getHeroes()) do\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero:getPosTable())\n\t\tend\n\tend", "CodeBleu_score": 23.374217144591274}, {"code": "local function updateParticlePos()\n\tfor k, v in pairs(HeroManager.heroes) do\n\t\tif v.effectNode then\n\t\t\tv.effectNode:setPosition(v.sprite:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 22.524436195844196}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self.layer:getChildByTag(100)\n    local raceType = hero:getRaceType()\n    if raceType == \"Knight\" then\n        ccexp.AudioEngine:play2d(self.audio_knight, false, 1)\n    elseif raceType == \"Archer\" then\n        ccexp.AudioEngine:play2d(self.audio_archer, false, 1)\n    elseif raceType == \"Mage\" then\n        ccexp.AudioEngine:play2d(self.audio_mage, false, 1)\n    end", "CodeBleu_score": 59.13061464959861}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self.layer:getChildByTag(100)\n    local heroRace = hero:getRaceType()\n\n    if heroRace == 1 then\n        ccexp.AudioEngine:play2d(self.audio.knightRotate, false, 1)\n    elseif heroRace == 2 then\n        ccexp.AudioEngine:play2d(self.audio.archerRotate, false, 1)\n    elseif heroRace == 3 then\n        ccexp.AudioEngine:play2d(self.audio.mageRotate, false, 1)\n    end", "CodeBleu_score": 51.22957287300329}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self.layer:getChildByTag(1000)\n    local raceType = hero:getRaceType()\n    if raceType == 0 then\n        ccexp.AudioEngine:play2d(self.audioPath..\"knight_select.mp3\")\n    elseif raceType == 1 then\n        ccexp.AudioEngine:play2d(self.audioPath..\"archer_select.mp3\")\n    else\n        ccexp.AudioEngine:play2d(self.audioPath..\"mage_select.mp3\")\n    end", "CodeBleu_score": 51.72523339495567}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\tlocal knight = Knight:create()\n\tknight:setPosition(100, 200)\n\tcurrentLayer:addChild(knight)\n\tknight:idleMode()\n\tList.pushlast(HeroManager, knight)\n\n\tlocal mage = Mage:create()\n\tmage:setPosition(200, 200)\n\tcurrentLayer:addChild(mage)\n\tmage:idleMode()\n\tList.pushlast(HeroManager, mage)\n\n\tlocal archer = Archer:create()\n\tarcher:setPosition(300, 200)\n\tcurrentLayer:addChild(archer)\n\tarcher:idleMode()\n\tList.pushlast(HeroManager, archer)", "CodeBleu_score": 74.68185842657947}, {"code": "function GameMaster:AddHeros()\n\tlocal knight = Knight:create()\n\tknight:idleMode()\n\tknight:setPosition(cc.p(200, 100))\n\tcurrentLayer:addChild(knight)\n\tList.pushlast(HeroManager, knight)\n\n\tlocal mage = Mage:create()\n\tmage:idleMode()\n\tmage:setPosition(cc.p(300, 100))\n\tcurrentLayer:addChild(mage)\n\tList.pushlast(HeroManager, mage)\n\n\tlocal archer = Archer:create()\n\tarcher:idleMode()\n\tarcher:setPosition(cc.p(400, 100))\n\tcurrentLayer:addChild(archer)\n\tList.pushlast(HeroManager, archer)", "CodeBleu_score": 72.43311778369029}, {"code": "function GameMaster:AddHeros()\n\tlocal knight = Knight:create()\n\tknight:setPosition(100, 100)\n\tcurrentLayer:addChild(knight)\n\tknight:idleMode()\n\tList.pushlast(HeroManager, knight)\n\t\n\tlocal mage = Mage:create()\n\tmage:setPosition(300, 100)\n\tcurrentLayer:addChild(mage)\n\tmage:idleMode()\n\tList.pushlast(HeroManager, mage)\n\t\n\tlocal archer = Archer:create()\n\tarcher:setPosition(500, 100)\n\tcurrentLayer:addChild(archer)\n\tarcher:idleMode()\n\tList.pushlast(HeroManager, archer)\n\t", "CodeBleu_score": 75.67260462909539}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t-- Create a Rat object and set its camera mask\n\tlocal boss = Rat()\n\tboss:setCameraMask(utils:cameraMask(\"player\"))\n\t-- Add the boss to the current layer\n\tself.layers[self.currentLayer]:addChild(boss)\n\t-- Set the boss's position and facing direction\n\tboss:setPosition(self.bossPosition[1], self.bossPosition[2])\n\tboss:setFacingDirection(self.bossPosition[3])\n\t-- Disable AI initially\n\tboss:setAIEnabled(false)\n\t-- Perform a bounce-out move\n\tboss:bounceOut()\n\t-- Enable AI afterward\n\tboss:setAIEnabled(true)\n\t-- Add the boss to the MonsterManager list\n\tMonsterManager:addMonster(boss)", "CodeBleu_score": 33.934266833801274}, {"code": "function GameMaster:showBoss()\n\t--Create a boss object\n\tlocal boss = Rat()\n\t--Set the camera mask\n\tboss:setCameraMask(CAMERA_FOLLOW)\n\t--Add the boss to the current layer\n\tself.currentLayer:addChild(boss)\n\t--Set the boss's position and facing direction\n\tboss:setPosition(self.player:getPositionX() + 200, self.player:getPositionY())\n\tboss:setFacingDirection(1)\n\t--Disable AI initially\n\tboss:setAIEnabled(false)\n\t--Perform a bounce-out move and enable AI afterward\n\tboss:bounceOut(200, 1, function()\n\t\tboss:setAIEnabled(true)\n\tend)\n\t--Add the boss to the MonsterManager list\n\tMonsterManager:addMonster(boss)", "CodeBleu_score": 33.60295648683563}, {"code": "function GameMaster:showBoss()\n\tlocal boss = Rat()\n\tboss.camera_mask = { true, true, true, true }\n\tself.current_layer:addChild(boss)\n\tboss.x = self.current_layer.width / 2\n\tboss.y = self.current_layer.height / 2\n\tboss.direction = \"left\"\n\tboss:setAIEnabled(false)\n\tboss:bounceOut(self.current_layer.width / 2, self.current_layer.height / 2, 2)\n\tboss:setAIEnabled(true)\n\tMonsterManager:addMonster(boss)", "CodeBleu_score": 39.57169232725918}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\tlocal animation = cc.Animation3D:create(file)\n    local animate3d = cc.Animate3D:create(animation, begin, finish)\n    animate3d:setSpeed(speed)\n    animate3d:retain()\n    return animate3d", "CodeBleu_score": 71.73379210919104}, {"code": "function createAnimation(file, begin, finish, speed)\n\tlocal animation3d = cc.Animation3D:create(file)\n    local animate3d = cc.Animate3D:create(animation3d, begin, finish)\n    animate3d:setSpeed(speed)\n    animate3d:retain()\n    return animate3d", "CodeBleu_score": 78.30145586740656}, {"code": "function createAnimation(file, begin, finish, speed)\n\tlocal animation3d = cc.Animation3D:create(file)\n    local animate3d = cc.Animate3D:create(animation3d, begin, finish)\n    animate3d:setSpeed(speed)\n    animate3d:retain()\n    return animate3d", "CodeBleu_score": 78.30145586740656}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\tfor i = #table, 1, -1 do\n        table[i] = nil\n    end", "CodeBleu_score": 36.274376429656115}, {"code": "function removeAll(table)\n\tfor i=1, #table do\n\t\ttable[i] = nil\n\tend", "CodeBleu_score": 32.54575263187134}, {"code": "function removeAll(table)\n\tfor i, v in pairs(table) do\n        table[i] = nil\n    end", "CodeBleu_score": 38.267010133352656}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.59377770413003}, {"code": "function delayExecute(target, func, delay)\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.59377770413003}, {"code": "function delayExecute(target, func, delay)\n\tlocal sequence = cc.Sequence:create(\n        cc.DelayTime:create(delay),\n        cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 58.41322723894275}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t--[[\n    The font used for the loading text.\n    ]]\n    local font = 'Marker Felt.ttf'\n\n    --[[\n    The size of the font used for the loading text.\n    ]]\n    local fontSize = 24\n\n    --[[\n    The color of the loading text.\n    ]]\n    local fontColor = cc.c4b(255, 255, 255, 255)\n\n    --[[\n    The position of the \"loading\" label on the screen.\n    ]]\n    local loadingPos = cc.p(self._screenSize.width / 2, self._screenSize.height / 2 - 100)\n\n    --[[\n    The position of the \"percent\" label on the screen.\n    ]]\n    local percentPos = cc.p(self._screenSize.width / 2, self._screenSize.height / 2 - 50)\n\n    --[[\n    The position of the \"assets\" label on the screen.\n    ]]\n    local assetsPos = cc.p(self._screenSize.width / 2, self._screenSize.height / 2 - 10)\n\n    --[[\n    Create and configure the \"loading\" label.\n    ]]\n    local loadingLabel = cc.Label:createWithTTF(font, 'loading...', fontSize)\n    loadingLabel:setPosition(loadingPos)\n    loadingLabel:setColor(fontColor)\n\n    --[[\n    Create and configure the \"percent\" label.\n    ]]\n    local percentLabel = cc.Label:createWithTTF(font, '0%', fontSize)\n    percentLabel:setPosition(percentPos)\n    percentLabel:setColor(fontColor)\n\n    --[[\n    Create and configure the \"assets\" label.\n    ]]\n    local assetsLabel = cc.Label:createWithTTF(font, 'assets...', fontSize)\n    assetsLabel:setPosition(assetsPos)\n    assetsLabel:setColor(fontColor)\n\n    --[[\n    Store the labels in the object's _loading property.\n    ]]\n    self._loading = {\n        loadingLabel = loadingLabel,\n        percentLabel", "CodeBleu_score": 39.95821005127581}, {"code": "function LoadingScene:addLoadingText(layer)\n\t-- create loading text\n    local loadingText = cc.Label:createWithTTF(self._fontName, \"loading...\")\n    loadingText:setAnchorPoint(cc.p(0.5, 0.5))\n    loadingText:setPosition(cc.p(self._layerWidth / 2, self._layerHeight / 2))\n    layer:addChild(loadingText)\n    \n    -- create percent complete text\n    local percentText = cc.Label:createWithTTF(self._fontName, \"0%\")\n    percentText:setAnchorPoint(cc.p(0.5, 0.5))\n    percentText:setPosition(cc.p(self._layerWidth / 2, self._layerHeight / 2 - 20))\n    layer:addChild(percentText)\n    \n    -- store the labels\n    self._loading = {\n        loadingText = loadingText,\n        percentText = percentText\n    }", "CodeBleu_score": 35.90083076392616}, {"code": "function LoadingScene:addLoadingText(layer)\n\t-- create the loading text labels\n    local loading = {}\n    loading.label = cc.Label:createWithTTF(self:getTTF(), \"loading...\", 30)\n    loading.label:setPosition(cc.p(self._screenSize.width / 2, self._screenSize.height / 2 + 40))\n    loading.label:setColor(cc.c4b(255, 255, 255, 255))\n    loading.label:enableShadow(cc.c4b(0, 0, 0, 255), cc.size(2, -2), 0)\n    layer:addChild(loading.label, 1, 1)\n\n    loading.percent = cc.Label:createWithTTF(self:getTTF(), \"0%\", 30)\n    loading.percent:setPosition(cc.p(self._screenSize.width / 2, self._screenSize.height / 2 - 40))\n    loading.percent:setColor(cc.c4b(255, 255, 255, 255))\n    loading.percent:enableShadow(cc.c4b(0, 0, 0, 255), cc.size(2, -2), 0)\n    layer:addChild(loading.percent, 1, 2)\n\n    self._loading = loading", "CodeBleu_score": 47.020862713079985}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\tlocal scene = MainMenuScene.new()\n    scene:addChild(MainMenuScene.createLayer())\n    return scene", "CodeBleu_score": 53.48265795829437}, {"code": "function MainMenuScene.create()\n\tlocal scene = CCScene:create()\n\tlocal layer = MainMenuLayer.new()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 64.96479345491304}, {"code": "function MainMenuScene.create()\n\t-- Create a new scene object\n\tlocal scene = CCScene:create()\n\t\n\t-- Create a new layer\n\tlocal layer = MainMenuLayer.create()\n\t\n\t-- Add the layer to the scene\n\tscene:addChild(layer)\n\t\n\t-- Return the scene object\n\treturn scene", "CodeBleu_score": 64.43860067379681}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t--[[\n    Check for collisions between object and all alive heroes.\n    ]]\n    for i = 1, HeroManager.getCount() do\n        local hero = HeroManager.getHero(i)\n        if hero.isAlive then\n            if object.x >= hero.x and object.x <= hero.x + hero.width and object.y >= hero.y and object.y <= hero.y + hero.height then\n                solveCollision(object, hero)\n            end\n        end\n    end\n \n    --[[\n    Check for collisions between object and all alive monsters.\n    ]]\n    for i = 1, MonsterManager.getCount() do\n        local monster = MonsterManager.getMonster(i)\n        if monster.isAlive then\n            if object.x >= monster.x and object.x <= monster.x + monster.width and object.y >= monster.y and object.y <= monster.y + monster.height then\n                solveCollision(object, monster)\n            end\n        end\n    end", "CodeBleu_score": 42.074245196227245}, {"code": "local function collision(object)\n\n\t--[[\n  First, we check for collisions between the given object and all heroes.\n  ]]\n  for i = 1, HeroManager.getCount() do\n    local hero = HeroManager.get(i)\n    if hero.alive and object:collidesWith(hero) then\n      solveCollision(object, hero)\n    end\n  end\n \n  --[[\n  Then, we check for collisions between the given object and all monsters.\n  ]]\n  for i = 1, MonsterManager.getCount() do\n    local monster = MonsterManager.get(i)\n    if monster.alive and object:collidesWith(monster) then\n      solveCollision(object, monster)\n    end\n  end\n ", "CodeBleu_score": 42.17995804009288}, {"code": "local function collision(object)\n\n\t-- Check for collisions between the object and all alive monsters\n    for i, monster in pairs(MonsterManager.monsters) do\n        if monster.isAlive then\n            if object.x < monster.x + monster.width and\n                object.x + object.width > monster.x and\n                object.y < monster.y + monster.height and\n                object.y + object.height > monster.y then\n                solveCollision(object, monster)\n            end\n        end\n    end\n \n    -- Check for collisions between the object and all alive heroes\n    for i, hero in pairs(HeroManager.heroes) do\n        if hero.isAlive then\n            if object.x < hero.x + hero.width and\n                object.x + object.width > hero.x and\n                object.y < hero.y + hero.height and\n                object.y + object.height > hero.y then\n                solveCollision(object, hero)\n            end\n        end\n    end", "CodeBleu_score": 42.201169322941446}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t--[[\n\t\tHeroManager and MonsterManager are lists of sprites.\n\t\tWe iterate through the lists in reverse order to avoid the problem of removing elements from a list while iterating through it.\n\t]]\n\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\t--[[\n\t\t\tIf the hero is alive, we perform collision detection and boundary checks.\n\t\t]]\n\t\tif hero:isAlive() then\n\t\t\t--[[\n\t\t\t\tWe check if the hero is out of bounds. If it is, we call its isOutOfBound() function.\n\t\t\t]]\n\t\t\tif hero:isOutOfBound() then\n\t\t\t\thero:isOutOfBound()\n\t\t\tend\n\t\t\t--[[\n\t\t\t\tWe check if the hero is colliding with any monster. If it is, we call its collision() function.\n\t\t\t]]\n\t\t\tfor j = #MonsterManager, 1, -1 do\n\t\t\t\tlocal monster = MonsterManager[j]\n\t\t\t\tif hero:collision(monster) then\n\t\t\t\t\thero:collision(monster)\n\t\t\t\tend\n\t\t\tend\n\t\t\t--[[\n\t\t\t\tWe update the hero's position.\n\t\t\t]]\n\t\t\thero:setPosition(hero._x + hero._dx * dt, hero._y + hero._dy * dt)\n\t\telse\n\t\t\t--[[\n\t\t\t\tIf the hero is dead, we remove it from the HeroManager list.\n\t\t\t]]\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend\n\t--[[\n\t\tWe repeat the same process for the monsters.\n\t]]\n\tfor i = #MonsterManager, 1, -1 do\n\t\tlocal monster = MonsterManager[i]\n\t\tif monster:isAlive() then\n\t\t\tif monster:isOutOfBound() then\n\t\t\t\tmonster:isOutOfBound()\n\t\t\tend\n\t\t\tfor j = #H", "CodeBleu_score": 41.700032123686505}, {"code": "function collisionDetect(dt)\n\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\tif hero.isAlive then\n\t\t\thero.isOutOfBound = isOutOfBound(hero)\n\t\t\tif hero.isOutOfBound then\n\t\t\t\thero.isAlive = false\n\t\t\telse\n\t\t\t\thero.isCollided = collision(hero)\n\t\t\t\tif hero.isCollided then\n\t\t\t\t\thero.isAlive = false\n\t\t\t\tend\n\t\t\tend\n\t\t\tif hero.isAlive then\n\t\t\t\thero._effectNode:setPosition(hero.x, hero.y)\n\t\t\t\thero.x = hero.x + hero.xVelocity * dt\n\t\t\t\thero.y = hero.y + hero.yVelocity * dt\n\t\t\t\thero._effectNode:setPosition(hero.x, hero.y)\n\t\t\tend\n\t\telse\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend\n\tfor i = #MonsterManager, 1, -1 do\n\t\tlocal monster = MonsterManager[i]\n\t\tif monster.isAlive then\n\t\t\tmonster.isOutOfBound = isOutOfBound(monster)\n\t\t\tif monster.isOutOfBound then\n\t\t\t\tmonster.isAlive = false\n\t\t\telse\n\t\t\t\tmonster.isCollided = collision(monster)\n\t\t\t\tif monster.isCollided then\n\t\t\t\t\tmonster.isAlive = false\n\t\t\t\tend\n\t\t\tend\n\t\t\tif monster.isAlive then\n\t\t\t\tmonster._effectNode:setPosition(monster.x, monster.y)\n\t\t\t\tmonster.x = monster.x + monster.xVelocity * dt\n\t\t\t\tmonster.y = monster.y + monster.yVelocity * dt\n\t\t\t\tmonster._effectNode:", "CodeBleu_score": 48.34229080006532}, {"code": "function collisionDetect(dt)\n\t-- iterate through HeroManager list in reverse order\n    for i = #HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        -- if hero is alive\n        if hero:isAlive() then\n            -- perform collision detection\n            hero:collisionDetect(dt)\n            -- perform boundary check\n            hero:isOutOfBound()\n            -- update hero position\n            hero._effectNode:setPosition(hero._pos.x, hero._pos.y)\n        else\n            -- remove dead hero from HeroManager list\n            table.remove(HeroManager, i)\n        end\n    end\n\n    -- iterate through MonsterManager list in reverse order\n    for i = #MonsterManager, 1, -1 do\n        local monster = MonsterManager[i]\n        -- if monster is alive\n        if monster:isAlive() then\n            -- perform collision detection\n            monster:collisionDetect(dt)\n            -- perform boundary check\n            monster:isOutOfBound()\n            -- update monster position\n            monster._effectNode:setPosition(monster._pos.x, monster._pos.y)\n        else\n            -- remove dead monster from MonsterManager list\n            table.remove(MonsterManager, i)\n        end\n    end", "CodeBleu_score": 53.70816359338426}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\tif self.specialAttackCollider == nil then\n        self.specialAttackCollider = BasicCollider.create(self.specialAttackProperties.damage, self.specialAttackProperties.knockback, self.specialAttackProperties.stun, self.specialAttackProperties.knockbackAngle, self.specialAttackProperties.damageType, self.specialAttackProperties.pierce, self.specialAttackProperties.force)\n        self.specialAttackCollider.actor = self\n        self.specialAttackCollider.owner = self\n        self.specialAttackCollider.ownerType = \"Actor\"\n        self.specialAttackCollider.x = self.x\n        self.specialAttackCollider.y = self.y\n        self.specialAttackCollider.facing = self.facing\n        self.specialAttackCollider.specialAttack = true\n        self.specialAttackCollider.specialAttackProperties = self.specialAttackProperties\n        self.specialAttackCollider.specialAttackCollider = true\n        self.specialAttackCollider.specialAttackColliderProperties = self.specialAttackColliderProperties\n        self.specialAttackCollider.specialAttackColliderType = self.specialAttackColliderType\n        self.specialAttackCollider.specialAttackColliderProperties.x = self.specialAttackColliderProperties.x\n        self.specialAttackCollider.specialAttackColliderProperties.y = self.specialAttackColliderProperties.y\n        self.specialAttackCollider.specialAttackColliderProperties.facing = self.specialAttackColliderProperties.facing\n        self.specialAttackCollider.specialAttackColliderProperties.offset = self.specialAttackColliderProperties.offset\n        self.specialAttackCollider.specialAttackColliderProperties.specialAttackColliderType = self.specialAttackColliderType\n        self.specialAttackCollider.specialAttackColliderProperties.specialAttackColliderProperties = self.specialAttackColliderProperties\n        self.specialAttackCollider.specialAttackColliderProperties.specialAttackProperties = self.specialAttackProperties\n        self.special", "CodeBleu_score": 26.025088018001885}, {"code": "function Actor:specialAttack()\n\t-- Create a collider at the actor's current position and facing direction\n  BasicCollider.create(self.x, self.y, self.facing, self.specialAttackProperties)\n  -- Play the associated sound effects\n  self:specialAttackSoundEffects()", "CodeBleu_score": 61.7850939827711}, {"code": "function Actor:specialAttack()\n\tlocal collider = BasicCollider.create\n    collider:setPosition(self.position:get())\n    collider:setFacing(self.facing)\n    collider:setDamage(self.specialAttackDamage)\n    collider:setKnockback(self.specialAttackKnockback)\n    collider:setStun(self.specialAttackStun)\n    collider:setSoundEffect(self.specialAttackSoundEffects)\n    self.world:addCollider(collider)", "CodeBleu_score": 45.38249371612748}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\tif self.angry ~= trueFalse then\n\t\tself.angry = trueFalse\n\t\tif self.angry then\n\t\t\tself._sprite3d:setTexture(\"slime-angry\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"slime\")\n\t\tend\n\tend", "CodeBleu_score": 56.13359521648482}, {"code": "function Slime:angryFace(trueFalse)\n\tif self._angry ~= trueFalse then\n    self._angry = trueFalse\n    if trueFalse then\n      self._sprite3d:setTexture(\"slime_angry.png\")\n    else\n      self._sprite3d:setTexture(\"slime.png\")\n    end\n  end", "CodeBleu_score": 72.71343355519092}, {"code": "function Slime:angryFace(trueFalse)\n\tif trueFalse ~= self._angry then\n    self._angry = trueFalse\n    if trueFalse then\n      self._sprite3d:setTexture(self._angryTexture)\n    else\n      self._sprite3d:setTexture(self._normalTexture)\n    end\n  end", "CodeBleu_score": 57.69697493564521}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    var width = paint.measureText(char.toString()).toInt()\n    var height = ceil(metric.height).toInt()\n    if (width == 0) {\n        height = getFontSize()\n        width = height\n    }\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 88.90917100088332}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    val width = paint.measureText(char.toString()).toInt()\n    val height = ceil(metric.height).toInt()\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 77.643994403755}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    var width = paint.measureText(char.toString()).toInt()\n    var height = ceil(metric.height).toInt()\n    if (width == 0) {\n        height = getFontSize()\n        width = height\n    }\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 88.90917100088332}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.47914115987437}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.47914115987437}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.47914115987437}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.77992497409063}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.77992497409063}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.77992497409063}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.6625162225946}, {"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.6625162225946}, {"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.6625162225946}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\tval worldScreen = worldScreen!!\n    val gameInfo = worldScreen.gameInfo\n    val playerToViewAs = worldScreen.playerToViewAs\n    val autoPlay = worldScreen.autoPlay\n    val restoreState = worldScreen.getRestoreState()\n\n    val newWorldScreen = loadGame(gameInfo, autoPlay, true)\n    worldScreen.dispose()\n\n    newWorldScreen.restoreState(restoreState)\n    newWorldScreen.playerToViewAs = playerToViewAs\n}", "CodeBleu_score": 30.275750764491967}, {"code": "suspend fun reloadWorldscreen(){\n\tval worldScreen = worldScreen!!\n    val gameInfo = gameInfo!!\n    val gameParameters = gameInfo.gameParameters\n    val gameId = gameInfo.gameId\n\n    val newGameInfo = GameInfo(\n            gameId,\n            gameInfo.civilizations,\n            gameInfo.map,\n            gameInfo.mapObjects,\n            gameInfo.gameParameters,\n            gameInfo.gameStatistics,\n            gameInfo.gameHistory,\n            gameInfo.gameLog,\n            gameInfo.chatLog,\n            gameInfo.chatLogIndex,\n            gameInfo.chatLogUnreadEntries,\n            gameInfo.chatLogUnreadEntriesIndex,\n            gameInfo.gameDiplomacy,\n            gameInfo.gameDiplomacyLog,\n            gameInfo.gameDiplomacyLogIndex,\n            gameInfo.gameDiplomacyLogUnreadEntries,\n            gameInfo.gameDiplomacyLogUnreadEntriesIndex,\n            gameInfo.gameDiplomacyLogRecipientId,\n            gameInfo.gameDiplomacyLogRecipientIdIndex,\n            gameInfo.gameDiplomacyLogRecipientIdUnreadEntries,\n            gameInfo.gameDiplomacyLogRecipientIdUnreadEntriesIndex,\n            gameInfo.gameDiplomacyLogSenderId,\n            gameInfo.gameDiplomacyLogSenderIdIndex,\n            gameInfo.gameDiplomacyLogSenderIdUnreadEntries,\n            gameInfo.gameDiplomacyLogSenderIdUnreadEntriesIndex,\n            gameInfo.gameDiplomacyLogAllianceId,\n            gameInfo.gameDiplomacyLogAllianceIdIndex,\n            gameInfo.gameDiplomacyLogAllianceIdUnreadEntries,\n            gameInfo.gameDiplomacyLogAllianceIdUnreadEntriesIndex,\n            gameInfo.gameDiplomacyLogWarId,\n            gameInfo.gameDiplomacyLogWarIdIndex,\n            gameInfo.gameDiplomacyLogWarIdUnreadEntries,\n            gameInfo.gameDiplomacyLogWarIdUnreadEntriesIndex,\n            gameInfo.gameDiplomacyLogPeaceId,\n            gameInfo.gameDiplomacyLogPeaceIdIndex,", "CodeBleu_score": 23.128210851532685}, {"code": "suspend fun reloadWorldscreen(){\n\tval newGameInfo = gameInfo!!\n    val newWorldScreen = loadGame(newGameInfo, AutoPlay(settings.autoPlay), true)\n    worldScreen = newWorldScreen\n}", "CodeBleu_score": 35.63699838850878}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\tval mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.setAsRootScreen()\n    return mainMenuScreen\n}", "CodeBleu_score": 43.4768488096417}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\treturn MainMenuScreen()\n}", "CodeBleu_score": 4.247428048210542}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tval currentScreen = getCurrentScreen()\n    val mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.setAsRootScreen(currentScreen)\n    return mainMenuScreen\n}", "CodeBleu_score": 52.17713648701262}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\ttry {\n        if (isWindowFocused()) {\n            return\n        }\n        if (System.getProperty(\"os.name\").startsWith(\"Mac\")) {\n            flashWindowMacOS()\n        } else {\n            flashWindowFallback()\n        }\n    } catch (e: Exception) {\n        log.warn(\"Failed to flash window\", e)\n    }\n}", "CodeBleu_score": 28.10495838583168}, {"code": "private fun flashWindow(){\n\ttry {\n        when {\n            SystemUtils.IS_OS_MAC_OSX -> {\n                Runtime.getRuntime().exec(arrayOf(\"osascript\", \"-e\", \"tell application \\\"${App.appName}\\\" to activate\"))\n                Runtime.getRuntime().exec(arrayOf(\"osascript\", \"-e\", \"tell application \\\"System Events\\\" to tell process \\\"${App.appName}\\\" to flash window \\\"${App.appName}\\\"\"))\n            }\n            SystemUtils.IS_OS_WINDOWS -> {\n                Runtime.getRuntime().exec(arrayOf(\"taskkill\", \"/f\", \"/im\", \"cmd.exe\"))\n                Runtime.getRuntime().exec(arrayOf(\"cmd\", \"/c\", \"start\", \"cmd\", \"/k\", \"mode 70,5 && color 0f && title ${App.appName} && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo. && echo", "CodeBleu_score": 36.567273297801336}, {"code": "private fun flashWindow(){\n\ttry {\n        when {\n            Platform.isWindows -> {\n                val windowHandle = Window.getWindows()[0].peer.getHWnd()\n                FlashWindowEx(windowHandle)\n            }\n            Platform.isMac -> {\n                val windowHandle = Window.getWindows()[0].peer.getHWnd()\n                val window = WindowRef(windowHandle)\n                val application = ApplicationServices.sharedApplication()\n                application.requestUserAttention(ApplicationServices.kUserAttentionCriticalRequest)\n                window.performSelector(NSSelectorFromString(\"requestUserAttention:\"), 1)\n            }\n            Platform.isLinux -> {\n                val windowHandle = Window.getWindows()[0].peer.getHWnd()\n                val window = XWindow(windowHandle)\n                val display = XToolkit.getDefaultToolkit().getDisplay()\n                val screen = display.getDefaultScreen()\n                val rootWindow = display.getRootWindow(screen)\n                val netWmSupported = display.getAtom(\"_NET_SUPPORTED\")\n                val netWmState = display.getAtom(\"_NET_WM_STATE\")\n                val netWmStateDemandsAttention = display.getAtom(\"_NET_WM_STATE_DEMANDS_ATTENTION\")\n                val supportedList = window.getProperty(netWmSupported)\n                val supportedListLength = supportedList.length / 4\n                for (i in 0 until supportedListLength) {\n                    val supportedAtom = supportedList.getInt(i * 4)\n                    if (supportedAtom == netWmState) {\n                        val windowList = window.getProperty(netWmState)\n                        val windowListLength = windowList.length / 4\n                        for (j in 0 until windowListLength) {\n                            val windowAtom = windowList.getInt(j * 4)\n                            if (windowAtom == netWmStateDemandsAttention) {\n                                window.changeProperty(netWmState, windowList.getInt(j * 4))\n                                display.sync()\n                                window.", "CodeBleu_score": 41.76722689789797}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\ttry {\n\t\tFile sharedPrefsFile = getFile(getFilesDir(), \"shared_prefs\");\n\t\tif (sharedPrefsFile != null) {\n\t\t\tdata.writeEntityHeader(sharedPrefsFile, FullBackup.SHARED_PREFS_TOKEN);\n\t\t\ttry (FileInputStream in = new FileInputStream(sharedPrefsFile)) {\n\t\t\t\tbyte[] buffer = new byte[8192];\n\t\t\t\tint n;\n\t\t\t\twhile ((n = in.read(buffer)) != -1) {\n\t\t\t\t\tdata.writeEntityData(buffer, 0, n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tFile rankingsFile = getFile(getFilesDir(), \"rankings.dat\");\n\t\tif (rankingsFile != null) {\n\t\t\tdata.writeEntityHeader(rankingsFile, FullBackup.RANKINGS_TOKEN);\n\t\t\ttry (FileInputStream in = new FileInputStream(rankingsFile)) {\n\t\t\t\tbyte[] buffer = new byte[8192];\n\t\t\t\tint n;\n\t\t\t\twhile ((n = in.read(buffer)) != -1) {\n\t\t\t\t\tdata.writeEntityData(buffer, 0, n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tFile badgesFile = getFile(getFilesDir(), \"badges.dat\");\n\t\tif (badgesFile != null) {\n\t\t\tdata.writeEntityHeader(badgesFile, FullBackup.BADGES_TOKEN);\n\t\t\ttry (FileInputStream in = new FileInputStream(badgesFile)) {\n\t\t\t\tbyte[] buffer = new byte[8192];\n\t\t\t\tint n;\n\t\t\t\twhile ((n = in.read(buffer)) != -1) {\n\t\t\t\t\tdata.writeEntityData(buffer, 0, n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tFile journalFile = getFile(getFilesDir(), \"journal.dat\");\n\t\tif (j", "CodeBleu_score": 28.34295556666432}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\ttry {\n\t\t\t\tFile base = getFilesDir();\n\t\t\t\tFile sharedPrefs = getFile(base, \"shared_prefs\");\n\t\t\t\tif (sharedPrefs != null) {\n\t\t\t\t\t\tdata.writeEntityHeader(sharedPrefs, sharedPrefs.length());\n\t\t\t\t\t\tdata.writeEntityData(sharedPrefs, sharedPrefs.length());\n\t\t\t\t}\n\t\t\t\tFile rankings = getFile(base, \"rankings.xml\");\n\t\t\t\tif (rankings != null) {\n\t\t\t\t\t\tdata.writeEntityHeader(rankings, rankings.length());\n\t\t\t\t\t\tdata.writeEntityData(rankings, rankings.length());\n\t\t\t\t}\n\t\t\t\tFile badges = getFile(base, \"badges.xml\");\n\t\t\t\tif (badges != null) {\n\t\t\t\t\t\tdata.writeEntityHeader(badges, badges.length());\n\t\t\t\t\t\tdata.writeEntityData(badges, badges.length());\n\t\t\t\t}\n\t\t\t\tFile journal = getFile(base, \"journal.xml\");\n\t\t\t\tif (journal != null) {\n\t\t\t\t\t\tdata.writeEntityHeader(journal, journal.length());\n\t\t\t\t\t\tdata.writeEntityData(journal, journal.length());\n\t\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t\t// Log the error and ignore.\n\t\t\t\tLog.e(TAG, \"Error backing up application data\", e);\n\t\t}\n}", "CodeBleu_score": 24.135082969360177}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\tFile base = getFilesDir();\n\tFile sharedPrefs = getFile(base, \"shared_prefs\");\n\tif (sharedPrefs != null){\n\t\ttry {\n\t\t\tdata.writeEntityHeader(sharedPrefs, sharedPrefs.length());\n\t\t\twriteFileToBackup(data, sharedPrefs);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tFile rankings = getFile(base, \"rankings\");\n\tif (rankings != null){\n\t\ttry {\n\t\t\tdata.writeEntityHeader(rankings, rankings.length());\n\t\t\twriteFileToBackup(data, rankings);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tFile badges = getFile(base, \"badges\");\n\tif (badges != null){\n\t\ttry {\n\t\t\tdata.writeEntityHeader(badges, badges.length());\n\t\t\twriteFileToBackup(data, badges);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tFile journal = getFile(base, \"journal\");\n\tif (journal != null){\n\t\ttry {\n\t\t\tdata.writeEntityHeader(journal, journal.length());\n\t\t\twriteFileToBackup(data, journal);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 29.02518757305716}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager connMgr = (ConnectivityManager)\n                getSystemService(Context.CONNECTIVITY_SERVICE);\n        return !connMgr.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();\n        return (networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI);\n    }\n}", "CodeBleu_score": 42.576673443882974}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tConnectivityManager connManager = (ConnectivityManager)\n            getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo networkInfo = connManager.getActiveNetworkInfo();\n    if (networkInfo != null) {\n        // For Android Lollipop and above, use the isActiveNetworkMetered() method.\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            return !connManager.isActiveNetworkMetered();\n        } else {\n            // For earlier versions, check if the active network is connected and of type WIFI, WIMAX, BLUETOOTH, or ETHERNET.\n            return (networkInfo.isConnected() &&\n                    (networkInfo.getType() == ConnectivityManager.TYPE_WIFI ||\n                            networkInfo.getType() == ConnectivityManager.TYPE_WIMAX ||\n                            networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH ||\n                            networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET));\n        }\n    }\n    return false;\n}", "CodeBleu_score": 53.02068827574512}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetworkInfo = getActiveNetworkInfo();\n        return activeNetworkInfo != null && activeNetworkInfo.isConnected() && (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI || activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX || activeNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 58.21783085513567}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\tif ( !hero.isAlive() ) {\n\t\treturn false;\n\t}\n\t\n\thero.interrupt();\n\t\n\thero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.2f, 20 );\n\thero.sprite.parent.add( Speck.factory( Speck.HEALING ) );\n\t\n\thero.sprite.emitter().burst( ElmoParticle.FACTORY, 10 );\n\thero.sprite.parent.add( ElmoParticle.FACTORY.emit( hero.sprite.center(), 10 ) );\n\t\n\thero.sprite.parent.add( new Light.Point( hero.sprite.center(), 100, new Color(0xFF000000) ) );\n\t\n\thero.sprite.parent.add( new Light.Point( hero.sprite.center(), 100, new Color(0xFFFFFF00) ) );\n\t\n\thero.sprite.emitter().start( Speck.factory( Speck.LIGHT ), 0.2f, 20 );\n\thero.sprite.parent.add( Speck.factory( Speck.LIGHT ) );\n\t\n\thero.sprite.emitter().start( Speck.factory( Speck.DISCO ), 0.2f, 20 );\n\thero.sprite.parent.add( Speck.factory( Speck.DISCO ) );\n\t\n\thero.sprite.emitter().start( Speck.factory( Speck.RAINBOW ), 0.2f, 20 );\n\thero.sprite.parent.add( Speck.factory( Speck.RAINBOW ) );\n\t\n\thero.sprite.emitter().start( Speck.factory( Speck.SHPUP ), 0.2f, 20 );\n\thero.sprite.parent.add( Speck.factory( Speck.SHPUP ) );\n\t\n\thero.sprite.emitter().start( Speck", "CodeBleu_score": 44.094246906655954}, {"code": "protected boolean affectHero( Hero hero ){\n\tif ( !hero.isAlive() ) {\n\t\treturn false;\n\t}\n\n\thero.interrupt();\n\thero.play( Assets.SND_POTION );\n\thero.cure();\n\thero.uncurseEquipped();\n\thero.satisfy( Hunger.STARVING );\n\thero.buff(Buff.class).detach();\n\thero.HP = hero.HT;\n\n\thero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.1f, 20 );\n\thero.sprite.parent.addToBack( hero.sprite );\n\n\tDungeon.level.occupyCell( hero );\n\n\tGameScene.flash( hero.pos );\n\tGameScene.bossSleep();\n\n\treturn true;\n}", "CodeBleu_score": 57.598629837334904}, {"code": "protected boolean affectHero( Hero hero ){\n\tif ( !hero.isAlive() ) {\n\t\treturn false;\n\t}\n\thero.interrupt();\n\thero.play( Assets.SND_HEALTH );\n\thero.cure();\n\thero.uncurseEquipped();\n\thero.satisfy();\n\thero.HP = hero.HT;\n\thero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.0f, 0.2f );\n\thero.sprite.parent.add( Speck.factory( Speck.LIGHT ).center( hero.sprite ).emit( 10 ) );\n\thero.sprite.add( new Buff.BuffIcon( Badges.HEALTH, hero.sprite ) );\n\thero.sprite.add( new Buff.BuffIcon( Badges.HUNGER, hero.sprite ) );\n\tGameScene.ready = true;\n\treturn true;\n}", "CodeBleu_score": 46.9413716677982}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\tif (item == null) {\n    return null;\n  }\n\n  if (item.isBlessed() && item.isFull()) {\n    return null;\n  }\n\n  if (item.isFull()) {\n    fill(item, pos);\n    return item;\n  }\n\n  if (item.isBlessed()) {\n    bless(item, pos);\n    return item;\n  }\n\n  if (item.isUncursable()) {\n    uncurse(item, pos);\n    return item;\n  }\n\n  return null;\n}", "CodeBleu_score": 32.83209072186056}, {"code": "protected Item affectItem( Item item, int pos ){\n\tif ( item.isFull() ) {\n        return null;\n    } else if ( item.isBlessed() ) {\n        return null;\n    } else if ( !item.isUncursable() ) {\n        return null;\n    }\n\n    if ( item.isWaterskin() ) {\n        item.fill();\n        return item;\n    } else if ( item.isAnkh() ) {\n        item.bless();\n        return item;\n    } else if ( item.isUncursable() ) {\n        item.play();\n        return item;\n    }\n\n    return null;\n}", "CodeBleu_score": 28.549248839825225}, {"code": "protected Item affectItem( Item item, int pos ){\n\tif ( item.isFull() ) {\n\t\treturn null;\n\t}\n\tif ( item.isBlessed() ) {\n\t\treturn null;\n\t}\n\tif ( !item.isUncursable() ) {\n\t\treturn null;\n\t}\n\tif ( item.get() instanceof Waterskin ) {\n\t\titem.fill();\n\t\treturn item;\n\t}\n\tif ( item.get() instanceof Ankh ) {\n\t\titem.bless();\n\t\treturn item;\n\t}\n\titem.play();\n\treturn item;\n}", "CodeBleu_score": 21.7736942304812}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.isAligned(Alignments.ENEMY)) {\n        enemy.applyBuff(buffCls);\n        enemy.rollToDropLoot();\n        hero.processEnemyKill(enemy);\n        hero.earnExp(enemy);\n        if (hero.getClass() == Monk.class) {\n            hero.gainEnergy();\n        }\n    }\n}", "CodeBleu_score": 19.81114965228352}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tenemy.applyBuff(buffCls);\n    if (enemy.isAlignedAsEnemy()) {\n        enemy.rollForLoot();\n        hero.gainEnergy();\n        hero.earnExp(enemy.getLevel());\n        hero.processEnemyKill(enemy);\n    }\n}", "CodeBleu_score": 13.193832869927775}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tenemy.affect(buffCls);\n    if (enemy.isAlly()) {\n        enemy.rollToDropLoot();\n        hero.showStatusWithIcon(enemy.toString(), \"enemy_slain.png\");\n        hero.earnExp(enemy.getClass());\n        if (hero.getClass() == Monk.class) {\n            hero.gainEnergy();\n        }\n        hero.processEnemyKill(enemy);\n    }\n}", "CodeBleu_score": 18.477026912333507}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\tif (hero.hasBuff(AscensionChallenge.ID)) {\n\t\tif (enemy.type == Enemy.Type.BOSS) {\n\t\t\thero.buff(AscensionChallenge.ID).set(hero.buff(AscensionChallenge.ID).get() - 1);\n\t\t\tif (hero.buff(AscensionChallenge.ID).get() < 10) {\n\t\t\t\tDungeon.fail(Utils.format(ResultDescriptions.BOSS_WEAKENED, Dungeon.depth));\n\t\t\t}\n\t\t} else if (enemy.type == Enemy.Type.ELITE) {\n\t\t\thero.buff(AscensionChallenge.ID).set(hero.buff(AscensionChallenge.ID).get() - 2);\n\t\t\tif (hero.buff(AscensionChallenge.ID).get() < 10) {\n\t\t\t\tDungeon.fail(Utils.format(ResultDescriptions.ELITE_WEAKENED, Dungeon.depth));\n\t\t\t}\n\t\t} else if (enemy.type == Enemy.Type.CHAMPION) {\n\t\t\thero.buff(AscensionChallenge.ID).set(hero.buff(AscensionChallenge.ID).get() - 3);\n\t\t\tif (hero.buff(AscensionChallenge.ID).get() < 10) {\n\t\t\t\tDungeon.fail(Utils.format(ResultDescriptions.CHAMPION_WEAKENED, Dungeon.depth));\n\t\t\t}\n\t\t}\n\t\tif (hero.buff(AscensionChallenge.ID).get() == 0) {\n\t\t\tDungeon.fail(Utils.format(ResultDescriptions.ASCENSION_CHALLENGE_FAILED, Dungeon.depth));\n\t\t}\n\t\tif (hero.buff(AscensionChallenge.ID).get() == 1) {\n\t\t\tDungeon.fail(Utils.format(ResultDescriptions.ASCENSION_", "CodeBleu_score": 15.885641658860267}, {"code": "public static void processEnemyKill(Char enemy){\n\tif (!isAscensionChallengeActive()) {\n        return;\n    }\n    if (enemy.isTransformed()) {\n        enemy.transformBack();\n    }\n    if (!enemy.isEnemy()) {\n        return;\n    }\n    int stacks = getAscensionChallengeStacks();\n    if (stacks <= 0) {\n        return;\n    }\n    int enemyType = enemy.getOriginal().getType();\n    if (enemyType == EnemyType.NORMAL) {\n        stacks--;\n        if (stacks == 0) {\n            logWeakeningMessage(enemy);\n        }\n    } else if (enemyType == EnemyType.ELITE) {\n        stacks -= 2;\n        if (stacks <= 1) {\n            logWeakeningMessage(enemy);\n        }\n    } else {\n        stacks -= 3;\n        if (stacks <= 2) {\n            logWeakeningMessage(enemy);\n        }\n    }\n    setAscensionChallengeStacks(stacks);\n    if (getHero().getLevel() == getHero().getMaxLevel()) {\n        getHero().earnExp(1);\n    }\n    refreshHero();\n}", "CodeBleu_score": 21.761487899491417}, {"code": "public static void processEnemyKill(Char enemy){\n\tif (hero.hasBuff(AscensionChallenge.ID)) {\n\t\tif (enemy.type == Enemy.EnemyType.ELITE) {\n\t\t\tif (enemy.hasBuff(TransformedEnemy.ID)) {\n\t\t\t\tenemy.revertToOriginal();\n\t\t\t}\n\t\t} else if (enemy.type == Enemy.EnemyType.BOSS) {\n\t\t\tif (enemy.hasBuff(TransformedEnemy.ID)) {\n\t\t\t\tenemy.revertToOriginal();\n\t\t\t}\n\t\t\tif (enemy.hasBuff(BossChallenge.ID)) {\n\t\t\t\tenemy.revertToOriginal();\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tAscensionChallenge buff = (AscensionChallenge)hero.buff(AscensionChallenge.ID);\n\t\tbuff.stacks -= enemy.type == Enemy.EnemyType.ELITE ? 1 : 2;\n\t\t\n\t\tif (buff.stacks <= 2) {\n\t\t\tDungeon.fail(Utils.capitalize(enemy.name()) + \" weakened the Ascension Challenge!\");\n\t\t}\n\t\t\n\t\tif (hero.maxLvl()) {\n\t\t\thero.earnExp(enemy.expGain);\n\t\t}\n\t\t\n\t\thero.refreshHero();\n\t}\n}", "CodeBleu_score": 22.700035927099535}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\tif (ChallengeController.ascensionChallengeActive()) {\n\t\tif (m.isTransformed()) {\n\t\t\treturn AscensionCorruptResist(m.getOriginal());\n\t\t}\n\t\tif (m.hasBuff(BuffPool.get(BuffID.ASCENSION_BLOCK))) {\n\t\t\treturn m.getExp();\n\t\t}\n\t\tif (m.getId() == MobID.RIPPERDEMON) {\n\t\t\treturn 10;\n\t\t}\n\t\tif (m.getId() == MobID.GHOUL) {\n\t\t\treturn 7;\n\t\t}\n\t\tif (m.getId() == MobID.BLOODYMARY || m.getId() == MobID.BLOODYMARY2 || m.getId() == MobID.BLOODYMARY3 || m.getId() == MobID.BLOODYMARY4 || m.getId() == MobID.BLOODYMARY5 || m.getId() == MobID.BLOODYMARY6 || m.getId() == MobID.BLOODYMARY7 || m.getId() == MobID.BLOODYMARY8 || m.getId() == MobID.BLOODYMARY9 || m.getId() == MobID.BLOODYMARY10 || m.getId() == MobID.BLOODYMARY11 || m.getId() == MobID.BLOODYMARY12 || m.getId() == MobID.BLOODYMARY13 || m.getId() == MobID.BLOODYMARY14 || m.getId() == MobID.BLOODYMARY15 || m.getId() == MobID.BLOODYMARY16 || m.getId() == MobID.BLOODYMARY17 || m.getId() == MobID.BLOODYMARY18 || m.getId() == MobID.BLOODYMARY1", "CodeBleu_score": 22.57911528863279}, {"code": "public static int AscensionCorruptResist(Mob m){\n\tif (m.getOriginal() != null) {\n\t\tm = m.getOriginal();\n\t}\n\tif (m.getBuff(\"Ascension\") != null) {\n\t\treturn m.getOriginal().getOriginal().getExp();\n\t}\n\tint resist = m.getOriginal().getOriginal().getExp();\n\tif (m.getOriginal().getOriginal().getOriginal() instanceof RipperDemon) {\n\t\tresist = 10;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof Ghouls) {\n\t\tresist = 7;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().getOriginal().getOriginal() instanceof TheVeryBigWorm) {\n\t\tresist = 13;\n\t} else if (m.getOriginal().", "CodeBleu_score": 19.739211796567258}, {"code": "public static int AscensionCorruptResist(Mob m){\n\tif (m.getOriginal() != null)\n\t\tm = m.getOriginal();\n\tif (m.getBuff(\"BlockAscension\") != null)\n\t\treturn m.getExp();\n\tif (m.getBuff(\"Ascension\") != null)\n\t\treturn m.getBuff(\"Ascension\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge1\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge1\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge2\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge2\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge3\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge3\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge4\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge4\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge5\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge5\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge6\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge6\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge7\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge7\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge8\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge8\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge9\") != null)\n\t\treturn m.getBuff(\"AscensionChallenge9\").getEffect();\n\tif (m.getBuff(\"AscensionChallenge10\") != null)\n\t\treturn m.getBuff(\"A", "CodeBleu_score": 15.790366881873494}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\tif (enemy.isAlive()) {\n\t\tif (enemy.buff(Corruption.class) != null && enemy.buff(Corruption.class).isFull()) {\n\t\t\tcomboTimer = comboTimer + 10 + pointsInTalent(Cleave.class)*2;\n\t\t} else {\n\t\t\tcomboTimer = comboTimer + 10;\n\t\t}\n\t\tcomboCount++;\n\t\tif (comboCount > 1) {\n\t\t\tcomboTimer = comboTimer + pointsInTalent(Cleave.class);\n\t\t}\n\t\tcomboTimer = Math.min(comboTimer, max(comboTimer));\n\t\tif (comboCount > 1) {\n\t\t\tsetAction(ActionIndicator.Combo);\n\t\t}\n\t\tif (comboCount > 1 && comboCount % 5 == 0) {\n\t\t\tvalidateMasteryCombo();\n\t\t}\n\t\tif (comboCount > 1) {\n\t\t\tDungeon.level.addToLog(Messages.get(this, \"combo\", comboCount));\n\t\t}\n\t\trefreshHero();\n\t}\n}", "CodeBleu_score": 40.293506309663925}, {"code": "public void hit( Char enemy ){\n\tcount++;\n\tif (count >= 2) {\n\t\tif (enemy.isAlive() && enemy.buff(Corruption.class) == null) {\n\t\t\textendComboTimer(pointsInTalent(Cleave.class));\n\t\t} else {\n\t\t\textendComboTimer(pointsInTalent(Cleave.class) + 1);\n\t\t}\n\t}\n\tupdateComboTimer();\n\ttriggerActionIndicators();\n\tvalidateMasteryCombo();\n\tBattle.log.add(this, \"Combo\", count);\n\trefreshHero();\n}", "CodeBleu_score": 22.05363206222703}, {"code": "public void hit( Char enemy ){\n\tif ( enemy.isAlive() && !enemy.hasBuff( \"Corruption\" ) ) {\n\t\tcount++;\n\t\tif (count == 1) {\n\t\t\tinitTime = System.currentTimeMillis();\n\t\t}\n\t\tif (enemy.HP == enemy.HT) {\n\t\t\tinitTime += pointsInTalent(Talent.CLEAVE)*1000;\n\t\t}\n\t\tsetAction( enemy );\n\t\tvalidateMasteryCombo();\n\t\tBArray.add(comboLog, count);\n\t\trefreshHero();\n\t}\n}", "CodeBleu_score": 28.687697339526473}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t// secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.82702000839635}, {"code": "public int capacity(){\n\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t// secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.82702000839635}, {"code": "public int capacity(){\n\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t// secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.82702000839635}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t// Calculate new HT value\n    int newHT = (int)Math.round( ( ( 1.0 + ( (double)level / 10.0 ) ) * ( 1.0 + ( (double)HTMultiplier / 100.0 ) ) ) * ( (double)minHT ) );\n    // Apply RingOfMight and ElixirOfMight buffs\n    if ( buff.contains( \"RingOfMight\" ) ) {\n        newHT *= 2;\n    }\n    if ( buff.contains( \"ElixirOfMight\" ) ) {\n        newHT *= 2;\n    }\n    // Apply new HT value\n    if ( newHT > maxHT ) {\n        maxHT = newHT;\n    }\n    if ( boostHP ) {\n        HP = maxHT;\n    }\n    if ( HP > maxHT ) {\n        HP = maxHT;\n    }\n}", "CodeBleu_score": 21.14862164400588}, {"code": "public void updateHT( boolean boostHP ){\n\t//calculate the new HT\n\tint newHT = (int) Math.roundodeBleu_score": 3.534921871435294}, {"code": "public void updateHT( boolean boostHP ){\n\tint newHT = (int) Math.round(Math.pow(level, 1.5) * HTMultiplier);\n  if ( boost ) {\n    newHT *= 1.5;\n  }\n  if ( buff ) {\n    newHT *= 2;\n  }\n  if ( boostHP ) {\n    hp = newHT;\n  }\n  hp = min(hp, newHT);\n  HT = newHT;\n}", "CodeBleu_score": 20.532802737052613}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif ( enemy.alignment.isEnemy() || enemy.alignment.isNeutralMimic() ) {\n        if ( wep.attack( enemy ) ) {\n            wep.setThrown();\n            if ( this instanceof Gladiator || this instanceof Duelist ) {\n                if ( this instanceof Gladiator ) {\n                    ((Gladiator) this).applyGladiatorBuff();\n                } else if ( this instanceof Duelist ) {\n                    ((Duelist) this).applyDuelistBuff();\n                }\n            }\n            wep.clearThrown();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 17.969504285863437}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif ( enemy.getAlign() == Char.Align.ENEMY || enemy.getAlign() == Char.Align.NEUTRAL_MIMIC ) {\n        if ( wep.attack( enemy ) ) {\n            if ( this.getClass() == Gladiator.class || this.getClass() == Duelist.class ) {\n                if ( this.getClass() == Gladiator.class ) {\n                    ((Gladiator)this).addCombo();\n                } else if ( this.getClass() == Duelist.class ) {\n                    ((Duelist)this).addCombo();\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 19.048286876487598}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif( enemy.isAligned(Char.Alignment.ENEMY) || enemy.isAligned(Char.Alignment.NEUTRAL_MIMIC) ) {\n\t\tboolean hit = wep.attack(enemy);\n\t\tif( hit ) {\n\t\t\tif( this instanceof Gladiator || this instanceof Duelist ) {\n\t\t\t\tapplyBuff( new ComboBuff(this, 20, 20, 10) );\n\t\t\t}\n\t\t}\n\t\treturn hit;\n\t}\n\treturn false;\n}", "CodeBleu_score": 20.03924137700611}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\tint attackSkill = baseAttackSkill;\n\t\n\t//apply weapon modifier\n\tif (attackingWeapon != null) {\n\t\tif (attackingWeapon.isMeleeWeapon()) {\n\t\t\tif (adjacent(target)) {\n\t\t\t\tattackSkill *= 1.5;\n\t\t\t} else {\n\t\t\t\tattackSkill *= 1.25;\n\t\t\t}\n\t\t} else {\n\t\t\tif (adjacent(target)) {\n\t\t\t\tattackSkill *= 0.75;\n\t\t\t} else {\n\t\t\t\tattackSkill *= 1.0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (adjacent(target)) {\n\t\t\tattackSkill *= 1.25;\n\t\t} else {\n\t\t\tattackSkill *= 1.0;\n\t\t}\n\t}\n\t\n\t//apply accuracy multiplier\n\tattackSkill *= accuracyMultiplier;\n\t\n\t//apply buffs\n\tif (buff != null) {\n\t\tattackSkill *= buff.attackSkillMultiplier();\n\t}\n\t\n\treturn attackSkill;\n}", "CodeBleu_score": 23.649634427830247}, {"code": "public int attackSkill( Char target ){\n\t// Calculate the attack skill value.\n\tint attackSkill = baseAttackSkill;\n\n\t// Adjust the attack skill value based on the weapon type.\n\tif (attackingWeapon == null) {\n\t\t// Unarmed attack.\n\t\tattackSkill += fightingUnarmed;\n\t} else {\n\t\t// Armed attack.\n\t\tattackSkill += attackingWeapon.attackSkill;\n\t}\n\n\t// Adjust the attack skill value based on the proximity to the target.\n\tif (adjacent(target)) {\n\t\t// Adjacent to the target.\n\t\tattackSkill += accuracyFactor;\n\t} else {\n\t\t// Not adjacent to the target.\n\t\tattackSkill -= accuracyFactor;\n\t}\n\n\t// Adjust the attack skill value based on any active buffs.\n\tif (buff.contains(Buff.ACCURACY)) {\n\t\t// A buff is active that increases accuracy.\n\t\tattackSkill += accuracyMultiplier;\n\t}\n\n\t// Return the attack skill value.\n\treturn attackSkill;\n}", "CodeBleu_score": 18.538670274281237}, {"code": "public int attackSkill( Char target ){\n\t//TODO: Add buffs to attack skill\n\t\n\tint attackSkill = baseAttackSkill;\n\t\n\t//Adjust attack skill based on weapon type\n\tif (attackingWeapon != null) {\n\t\tif (attackingWeapon.isRanged()) {\n\t\t\tattackSkill *= accuracyFactor[0];\n\t\t}\n\t\telse if (attackingWeapon.isMelee()) {\n\t\t\tattackSkill *= accuracyFactor[1];\n\t\t}\n\t}\n\t\n\t//Adjust attack skill based on proximity to target\n\tif (adjacent(target)) {\n\t\tattackSkill *= accuracyFactor[2];\n\t}\n\t\n\treturn attackSkill;\n}", "CodeBleu_score": 18.085955024158693}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tval behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 71.8268118892106}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n    return null;\n\n  if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n    return 'light';\n\n  if (this.current >= this.heavyThreshold)\n    return 'heavy';\n}", "CodeBleu_score": 74.52869634695014}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\tthis.stop();\n    this.start();\n}", "CodeBleu_score": 8.334256761014327}, {"code": "restart: function (){\n\tthis.currentValue = 0;\n    this.currentState = this.getTrafficDensity();\n    this.onRestart.dispatch();\n}", "CodeBleu_score": 12.961547021386263}, {"code": "restart: function (){\n\tthis.onStart.dispatch();\n    this.setFrame(this._frameData.getFrame(this.getTrafficDensity()));\n    this._parent.setFrame(this._frameData.getFrame(this.getTrafficDensity()));\n    this.game.time.events.add(Phaser.Timer.SECOND * 3, this.restart, this);\n}", "CodeBleu_score": 17.811024174883052}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t// Default values for parameters\n    if (color === undefined) { color = 0xffffff; }\n    if (duration === undefined) { duration = 1; }\n    if (force === undefined) { force = false; }\n    if (alpha === undefined) { alpha = 1; }\n\n    // Check if conditions are met\n    if (this.flashing && !force) { return false; }\n    if (duration <= 0) { return false; }\n    if (this.tweening) { this.stop(); }\n\n    // Clear any existing effect\n    this.fx.clear();\n\n    // Draw a rectangle with the given color and alpha\n    this.fx.beginFill(color, alpha);\n    this.fx.drawRect(0, 0, this.width, this.height);\n    this.fx.endFill();\n\n    // Set the effect duration\n    this.flashing = true;\n    this.flashDuration = duration;\n    this.flashAlpha = alpha;\n    this.flashColor = color;\n\n    return true;\n\n}", "CodeBleu_score": 81.57590155745952}, {"code": "flash: function (color, duration, force, alpha){\n\tif (this.flashing || !this.exists || this.invincible || this.flashTimer > 0) return false;\n    if (typeof color === \"undefined\") color = 0xffffff;\n    if (typeof duration === \"undefined\") duration = 100;\n    if (typeof force === \"undefined\") force = false;\n    if (typeof alpha === \"undefined\") alpha = 1;\n    if (duration < 1 && !force) return false;\n    this.clearEffects();\n    this.fx.beginFill(color, alpha);\n    this.fx.drawRect(0, 0, this.width, this.height);\n    this.fx.endFill();\n    this.flashTimer = duration;\n    return true;\n}", "CodeBleu_score": 60.80132130079778}, {"code": "flash: function (color, duration, force, alpha){\n\t// Set default values\n    color = color || 0xffffff;\n    duration = duration || 250;\n    force = force || false;\n    alpha = alpha || 1;\n\n    // Clear any existing effect\n    this.clearEffect();\n\n    // Check for existing tween\n    if (this.tween) {\n        this.tween.stop();\n    }\n\n    // Check for existing timeline\n    if (this.timeline) {\n        this.timeline.stop();\n    }\n\n    // Check for a valid duration\n    if (duration <= 0) {\n        return false;\n    }\n\n    // Check for a valid alpha value\n    if (alpha < 0 || alpha > 1) {\n        return false;\n    }\n\n    // Check for an existing effect\n    if (this.effect && !force) {\n        return false;\n    }\n\n    // Draw the rectangle\n    this.drawRect(0, 0, this.width, this.height, color, alpha);\n\n    // Set the effect duration\n    this.effectDuration = duration;\n\n    return true;\n}", "CodeBleu_score": 52.958500808909}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FluidLayer(this.game, this, this.fluid);\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 55.887105861841}, {"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FluidLayer(this.game, this, this.layers.length);\n    this.layers.push(layer);\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 54.6775768774295}, {"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FlexLayer(this.game, this.game.world, this.game.camera, this.game.input, this.game.time, this.game.scale, this.game.paused, this.game.canvas, this.game.stage, this.game.renderer);\n    layer.addMultiple(children);\n    this.layers.push(layer);\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n    return layer;\n}", "CodeBleu_score": 54.106280692074904}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.flexLayer();\n  layer.x = 0;\n  layer.y = 0;\n  layer.width = this.game.width;\n  layer.height = this.game.height;\n  layer.scale.set(this.game.scale.scaleFactor);\n  this.layers.push(layer);\n  if (children) {\n    layer.addMultiple(children);\n  }\n  return layer;\n}", "CodeBleu_score": 48.69409829760576}, {"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.flexLayer(0, 0, this.game.width, this.game.height);\n    this.layers.push(layer);\n    this.game.world.add(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 56.297917206305016}, {"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.flexLayer();\n  layer.position.set(this.game.world.centerX, this.game.world.centerY);\n  layer.bounds.set(0, 0, this.game.width, this.game.height);\n  layer.scale.set(this.game.scale.scaleFactor);\n  this.game.world.add(layer);\n  this.layers.push(layer);\n  if (children) {\n    layer.addMultiple(children);\n  }\n  return layer;\n}", "CodeBleu_score": 50.81904704049449}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\tif (rect) {\n        if (copy) {\n            this.cropRect.copyFrom(rect);\n        } else {\n            this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n        }\n        this.updateCrop();\n    } else {\n        this.resetFrame();\n    }\n    return this;\n}", "CodeBleu_score": 33.71430140888638}, {"code": "crop: function (rect, copy){\n\tif (rect) {\n    if (copy) {\n      this.cropRect.copyFrom(rect);\n    } else {\n      this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n    }\n    this.updateCrop();\n  } else {\n    this.cropRect.setEmpty();\n    this.resetFrame();\n  }\n}", "CodeBleu_score": 32.26138323777447}, {"code": "crop: function (rect, copy){\n\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n\t\t} else {\n\t\t\tthis.cropRect.copyFrom(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 29.769326571389055}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.62311284776796}, {"code": "move: function (x, y, wrap){\n\tif (x) {\n        this.moveH(x, wrap);\n    }\n    if (y) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 59.99356579612273}, {"code": "move: function (x, y, wrap){\n\tif (x) {\n    this.moveH(x, wrap);\n  }\n  if (y) {\n    this.moveV(y, wrap);\n  }\n  return this;\n}", "CodeBleu_score": 56.20381868514378}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.frames) {\n        var frame = this.frames[state];\n        if (frame) {\n            this.frame = frame;\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 29.34476790280815}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.frames[state]) {\n        this.frame = this.frames[state];\n        return true;\n    }\n    else {\n        return false;\n    }\n\n}", "CodeBleu_score": 17.111730805990085}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.freezeFrames) {\n        return false;\n    }\n\n    var frameKey = this.frame[state];\n    if (frameKey && typeof frameKey !== 'number' && typeof frameKey !== 'string') {\n        return false;\n    }\n\n    this.frameName = frameKey;\n    this.updateFrame();\n    return true;\n}", "CodeBleu_score": 43.65495262861294}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n    this.add.plugin(Phaser.Plugin.Weapon);\n\n    var weapon = this.game.plugins.weapon(quantity, key, frame, group, bulletClass);\n\n    return weapon;\n\n}", "CodeBleu_score": 46.83651201005515}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\treturn this.game.plugins.add(Phaser.Weapon, quantity, key, frame, group, bulletClass);\n\n}", "CodeBleu_score": 22.407858505276778}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (typeof quantity === 'undefined') { quantity = 1; }\n    if (typeof key === 'undefined') { key = null; }\n    if (typeof frame === 'undefined') { frame = null; }\n    if (typeof group === 'undefined') { group = null; }\n    if (typeof bulletClass === 'undefined') { bulletClass = null; }\n\n    var weapon = new Phaser.Weapon(this.game, quantity, key, frame, group, bulletClass);\n\n    return weapon;\n\n}", "CodeBleu_score": 37.09533982201635}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t// TODO: add culling\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n    this.endFill();\n}", "CodeBleu_score": 13.022895817970037}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\tif (cull) {\n        var p1 = points[0];\n        var p2 = points[1];\n        var p3 = points[2];\n        var cameraToFace = new Phaser.Point(p1.x - camera.x, p1.y - camera.y);\n        var cb = cameraToFace.cross(p2.x - p1.x, p2.y - p1.y);\n        if (cb.dot(p3.x - p1.x, p3.y - p1.y) < 0) {\n            return;\n        }\n    }\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 37.42395699649798}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\tif (cull) {\n\t\tvar faceNormal = points[1].subtract(points[0]).cross(points[2].subtract(points[1])).normalize();\n\t\tif (faceNormal.dot(this.game.camera.position) < 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\tthis.moveTo(points[0].x, points[0].y);\n\tthis.lineTo(points[1].x, points[1].y);\n\tthis.lineTo(points[2].x, points[2].y);\n}", "CodeBleu_score": 24.198218255965127}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\tif (this.video.readyState === 4) {\n        this.video.onprogress = null;\n        this.video.onerror = null;\n        this.updateTexture();\n    } else {\n        this.videoRetries--;\n        if (this.videoRetries === 0) {\n            console.warn('Failed to load video:', this.video.src);\n            this.videoRetries = 10;\n        } else {\n            this.video.onprogress = null;\n            this.video.onerror = null;\n            this.video.src = this.video.src;\n            this.video.onerror = this.checkVideoProgress.bind(this);\n            this.video.onprogress = this.checkVideoProgress.bind(this);\n            this.videoTimeout = window.setTimeout(this.checkVideoProgress.bind(this), 1000);\n        }\n    }\n}", "CodeBleu_score": 42.30314818057646}, {"code": "checkVideoProgress: function (){\n\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n    this.stopLoading();\n    this.updateTexture();\n  } else if (this.videoRetries > 0) {\n    this.videoRetries--;\n    this.el.emit('video-error', { message: 'Unable to load video', retryCount: this.videoRetries });\n    window.setTimeout(this.checkVideoProgress.bind(this), 500);\n  } else {\n    this.stopLoading();\n    this.el.emit('video-error', { message: 'Unable to load video', retryCount: this.videoRetries });\n  }\n}", "CodeBleu_score": 39.663122320917225}, {"code": "checkVideoProgress: function (){\n\t// If the video is ready, update the texture and stop checking for progress.\n\tif ( this.video.readyState === this.video.HAVE_ENOUGH_DATA ) {\n\n\t\tthis.updateTexture( this.video );\n\n\t} else if ( this.video.readyState === this.video.HAVE_METADATA ) {\n\n\t\t// If the video has loaded metadata but not data, retry for a while.\n\n\t\tthis.retryCount --;\n\n\t\tif ( this.retryCount > 0 ) {\n\n\t\t\twindow.setTimeout( this.checkVideoProgress.bind( this ), 500 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'Unable to load video:', this.videoSrc );\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 33.47993589623058}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\tif (this.state !== 'down') {\n        this.state = 'down';\n        this.time = event.timeStamp;\n        this.repeat = 0;\n        this.value = value;\n        this.event = event;\n        if (event) {\n            this.alt = event.altKey;\n            this.shift = event.shiftKey;\n            this.ctrl = event.ctrlKey;\n        }\n        this.onDown.dispatch(this);\n    }\n}", "CodeBleu_score": 49.34071536022013}, {"code": "start: function (event, value){\n\tif (this.state === \"down\") return;\n    this.state = \"down\";\n    this.time = event.timeStamp;\n    this.repeat = 0;\n    this.captureModifiers(event);\n    this.event = event;\n    this.value = value;\n    this.onDown.dispatch(this, value);\n}", "CodeBleu_score": 43.58728650454595}, {"code": "start: function (event, value){\n\tif (this.state !== \"down\") {\n        this.state = \"down\";\n        this.startTime = event.timeStamp;\n        this.repeatCount = 0;\n        this.captureModifiers(event);\n        this.dispatch(event, value);\n    }\n}", "CodeBleu_score": 28.168993432738066}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\tif (this.input.enabled)\n    {\n        this.input.mousePointer.start(event);\n    }\n\n    this.mouseDownCallback.call(this, event);\n\n    if (this.input.enabled && this.input.mousePointer.stopPropagation)\n    {\n        event.preventDefault();\n    }\n\n}", "CodeBleu_score": 33.81801741313167}, {"code": "onMouseDown: function (event){\n\tevent.preventDefault\n    this.mouseDownCallback.call\n    this.input.mousePointer.start\n}", "CodeBleu_score": 9.911657607067754}, {"code": "onMouseDown: function (event){\n\tthis.mouseDownCallback = this.mouseDownCallback || this.game.input.mouseDownCallback;\n\n    this.mouse.originalEvent = event;\n\n    if (this.mouseDownCallback)\n    {\n        this.mouseDownCallback.call(this.callbackContext, event);\n    }\n\n    if (this.input.enabled && this.input.mousePointer.start)\n    {\n        this.input.mousePointer.start(event);\n    }\n\n    return event;\n\n}", "CodeBleu_score": 49.7224433786551}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\tif (this.input.enabled) {\n        this.input.mousePointer.id = event.pointerId;\n        this.input.mousePointer.start(event);\n    }\n\n    if (this.input.mouseUpCallback) {\n        this.input.mouseUpCallback.call(this.input.mouseUpCallbackContext, event);\n    }\n\n    if (this.input.mouseUpGlobalCallback) {\n        this.input.mouseUpGlobalCallback.call(this.input.mouseUpCallbackContext, event);\n    }\n\n    event.preventDefault();\n}", "CodeBleu_score": 50.93357052975096}, {"code": "onMouseUpGlobal: function (event){\n\tthis.mouseUpCallback.call(this, event);\n\n    if (this.input.mousePointer.stop) {\n        this.input.mousePointer.stop();\n    }\n\n    this.input.mousePointer.event = event;\n\n    if (this.input.mousePointer.enabled) {\n        this.input.mousePointer.identifier = event.identifier;\n        this.input.mousePointer.target = event.target;\n        this.input.mousePointer.downElement = event.target;\n        this.input.mousePointer.downTime = event.timeStamp;\n        this.input.mousePointer.downX = event.clientX;\n        this.input.mousePointer.downY = event.clientY;\n        this.input.mousePointer.start();\n    }\n\n}", "CodeBleu_score": 43.89654351595224}, {"code": "onMouseUpGlobal: function (event){\n\tif (this.input.mousePointer.stop) {\n        this.input.mousePointer.stop();\n    }\n    this.input.mousePointer.event = event;\n    if (this.input.mousePointer.preventDefault) {\n        event.preventDefault();\n    }\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this, event);\n    }\n    if (this.input.enabled) {\n        this.input.mousePointer.identifier = event.identifier;\n        this.input.mousePointer.start();\n    }\n}", "CodeBleu_score": 50.539729455601744}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\tif (this.enabled && this.game.inputEnabled) {\n\t\tthis.touchEnterEvent = event;\n\t\tif (this.touchEnterCallback) {\n\t\t\tthis.touchEnterCallback.call(this, this.touchEnterEvent);\n\t\t}\n\t\tif (this.preventDefaultTouchEnter) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.00024797578375}, {"code": "onTouchEnter: function (event){\n\tif (!this.enabled || !this.gameObject.enabled) {\n        return;\n    }\n    this.touchEnterEvent = event;\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback.call(this.gameObject, event);\n    }\n    if (this.preventTouchEnterDefaultAction) {\n        event.preventDefault();\n    }\n}", "CodeBleu_score": 60.1625929703236}, {"code": "onTouchEnter: function (event){\n\tif (this.game.inputEnabled && this.enabled) {\n        this.touchEnterCallback.call(this, event);\n        if (this.game.inputPreventDefault) {\n            event.preventDefault();\n        }\n    }\n}", "CodeBleu_score": 25.22889081476583}]}
