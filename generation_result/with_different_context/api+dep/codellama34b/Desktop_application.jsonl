{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\tfor (let item of template) {\n        if (!item.metadata) {\n            item.metadata = {}\n        }\n\n        if (item.command) {\n            let command = item.command\n            let keystrokes = keystrokesByCommand[command]\n\n            if (keystrokes) {\n                if (item.label.includes(\" \")) {\n                    item.label = `${item.label} (${keystrokes[0]})`\n                } else {\n                    item.accelerator = keystrokes[0]\n                }\n\n                item.click = () => {\n                    atomApplication.sendCommand(command)\n                }\n\n                if (!command.startsWith(\"application:\")) {\n                    item.metadata.windowSpecific = true\n                }\n            }\n        }\n\n        if (item.submenu) {\n            item.submenu = translateTemplate(item.submenu, keystrokesByCommand)\n        }\n    }\n\n    return template\n}", "CodeBleu_score": 43.20317154575362}, {"code": "translateTemplate(template, keystrokesByCommand){\n\tfor (let item of template) {\n    if (!item.metadata) {\n      item.metadata = {}\n    }\n    if (item.command) {\n      const keystrokes = keystrokesByCommand[item.command]\n      if (keystrokes && keystrokes.length) {\n        if (item.label.includes(\" \")) {\n          item.label = `${item.label} (${keystrokes[0]})`\n        } else {\n          item.accelerator = keystrokes[0]\n        }\n        item.click = () => {\n          global.atomApplication.sendCommand(item.command)\n        }\n        if (!item.command.startsWith(\"application:\")) {\n          item.metadata.windowSpecific = true\n        }\n      }\n    }\n    if (item.submenu) {\n      item.submenu = translateTemplate(item.submenu, keystrokesByCommand)\n    }\n  }\n  return template\n}", "CodeBleu_score": 46.39356103976194}, {"code": "translateTemplate(template, keystrokesByCommand){\n\tconst result = []\n\n\tfor (const item of template) {\n\t\tif (!item.metadata) {\n\t\t\titem.metadata = {}\n\t\t}\n\n\t\tif (item.command) {\n\t\t\tconst command = item.command\n\t\t\tconst keystrokes = keystrokesByCommand[command]\n\n\t\t\tif (keystrokes) {\n\t\t\t\tconst keystroke = keystrokes[0]\n\t\t\t\tconst label = item.label\n\n\t\t\t\tif (label.includes(\" \")) {\n\t\t\t\t\titem.label = `${label} (${keystroke})`\n\t\t\t\t} else {\n\t\t\t\t\titem.accelerator = keystroke\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titem.click = () => {\n\t\t\t\tglobal.atomApplication.sendCommand(command)\n\t\t\t}\n\n\t\t\titem.metadata.windowSpecific = !command.startsWith(\"application:\")\n\t\t}\n\n\t\tif (item.submenu) {\n\t\t\titem.submenu = translateTemplate(item.submenu, keystrokesByCommand)\n\t\t}\n\n\t\tresult.push(item)\n\t}\n\n\treturn result\n}", "CodeBleu_score": 43.42929730376145}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\n    let items = [];\n    for (let index in object) {\n      const item = object[index];\n      items.push(item);\n      if (item.submenu)\n        items = items.concat(this.flattenMenuItems(item.submenu));\n    }\n    return items;\n  }", "CodeBleu_score": 98.06785847840818}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\n    let items = [];\n    for (let index in object) {\n      const item = object[index];\n      items.push(item);\n      if (item.submenu)\n        items = items.concat(this.flattenMenuItems(item.submenu));\n    }\n    return items;\n  }", "CodeBleu_score": 98.06785847840818}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\n    let items = [];\n    for (let index in object) {\n      const item = object[index];\n      items.push(item);\n      if (item.submenu)\n        items = items.concat(this.flattenMenuItems(item.submenu));\n    }\n    return items;\n  }", "CodeBleu_score": 98.06785847840818}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\tconst optionsJSON = JSON.stringify(options);\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(\"aes-256-gcm\", secret, iv);\n  const encrypted = Buffer.concat([cipher.update(optionsJSON, \"utf8\"), cipher.final()]);\n  const tag = cipher.getAuthTag().toString(\"hex\");\n  return JSON.stringify({\n    iv: iv.toString(\"hex\"),\n    content: encrypted.toString(\"hex\"),\n    tag\n  });\n}", "CodeBleu_score": 53.69621796163562}, {"code": "const encryptOptions = (options, secret) =>{\n\tconst iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(\n    \"aes-256-gcm\",\n    secret,\n    iv,\n    {\n      authTagLength: 16,\n    }\n  );\n  const encrypted = Buffer.concat([\n    cipher.update(JSON.stringify(options), \"utf8\"),\n    cipher.final(),\n  ]);\n  const tag = cipher.getAuthTag();\n  return JSON.stringify({\n    iv: iv.toString(\"hex\"),\n    content: encrypted.toString(\"hex\"),\n    tag: tag.toString(\"hex\"),\n  });\n}", "CodeBleu_score": 49.33292584498072}, {"code": "const encryptOptions = (options, secret) =>{\n\tconst jsonOptions = JSON.stringify(options);\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(\"aes-256-gcm\", secret, iv);\n  const encrypted = Buffer.concat([\n    cipher.update(jsonOptions, \"utf8\"),\n    cipher.final(),\n  ]);\n  const authTag = cipher.getAuthTag();\n  return JSON.stringify({\n    authTag: authTag.toString(\"hex\"),\n    content: encrypted.toString(\"hex\"),\n    iv: iv.toString(\"hex\"),\n  });\n}", "CodeBleu_score": 53.35837183174982}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\tfor (let item of template) {\n        if (item.command) {\n            item.commandDetail = item.commandDetail || {}\n            item.commandDetail.contextCommand = true\n            item.click = function () {\n                global.atomApplication.sendCommandToWindow(item.command, item.commandDetail)\n            }\n        }\n        if (item.submenu) {\n            createClickHandlers(item.submenu)\n        }\n    }\n}", "CodeBleu_score": 53.309863829758505}, {"code": "createClickHandlers(template){\n\ttemplate.forEach(item => {\n        if (item.command) {\n            item.commandDetail = item.commandDetail || {}\n            item.commandDetail.contextCommand = true\n            item.click = () => {\n                global.atomApplication.sendCommandToWindow(item.command, item.commandDetail)\n            }\n        }\n        if (item.submenu) {\n            createClickHandlers(item.submenu)\n        }\n    })\n}", "CodeBleu_score": 61.27404475104103}, {"code": "createClickHandlers(template){\n\tfor (let item of template) {\n    if (item.command) {\n      item.commandDetail = item.commandDetail || {}\n      item.commandDetail.contextCommand = true\n      item.click = () => {\n        global.atomApplication.sendCommandToWindow(item.command, item.commandDetail)\n      }\n    }\n    if (item.submenu) {\n      createClickHandlers(item.submenu)\n    }\n  }\n}", "CodeBleu_score": 53.886836522843495}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n    try {\n      await recoveryFile.release();\n    } catch (error) {\n      console.log(error);\n    }\n    if (recoveryFile.isReleased()) {\n      this.recoveryFilesByFilePath.delete(path);\n      this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n      this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    }\n  }", "CodeBleu_score": 70.02671239790968}, {"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n    try {\n      await recoveryFile.release();\n    } catch (error) {\n      console.log(error);\n    }\n    if (recoveryFile.isReleased()) {\n      this.recoveryFilesByFilePath.delete(path);\n      this.windowsByRecoveryFile.delete(recoveryFile);\n      this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    }\n  }", "CodeBleu_score": 66.07038476530744}, {"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n    try {\n      await recoveryFile.release();\n    } catch (err) {\n      console.log(`Error releasing recovery file for ${path}: ${err}`);\n    }\n    if (recoveryFile.isReleased()) {\n      this.recoveryFilesByFilePath.delete(path);\n      this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n      this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    }\n  }", "CodeBleu_score": 69.88298787349866}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\tconst promises = [];\n  for (const recoveryFile of this.windowsByRecoveryFile.get(window)) {\n    promises.push(\n      recoveryFile\n        .recover()\n        .catch(error => {\n          const message =\n            'A file that Atom was saving could be corrupted';\n          const detail =\n            `Error ${error.code}. There was a crash while saving \"${\n              recoveryFile.originalPath\n            }\", so this file might be blank or corrupted.\n` +\n            `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n              recoveryFile.recoveryPath\n            }\".`;\n          console.log(detail);\n          dialog.showMessageBox(window, {\n            type: 'info',\n            buttons: ['OK'],\n            message,\n            detail\n          });\n        })\n        .then(() => {\n          this.windowsByRecoveryFile.get(window).delete(recoveryFile);\n          this.recoveryFilesByWindow.get(window).delete(recoveryFile.originalPath);\n          this.recoveryFilesByFilePath.delete(recoveryFile.originalPath);\n        })\n    );\n  }\n  await Promise.all(promises);\n}", "CodeBleu_score": 81.09279452165914}, {"code": "async didCrashWindow(window){\n\tconst recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (!recoveryFiles) return;\n\n  const promises = [];\n  for (const recoveryFile of recoveryFiles) {\n    promises.push(\n      recoveryFile\n        .recover()\n        .catch(error => {\n          const message = 'A file that Atom was saving could be corrupted';\n          const detail =\n            `Error ${error.code}. There was a crash while saving \"${\n              recoveryFile.originalPath\n            }\", so this file might be blank or corrupted.\n` +\n            `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n              recoveryFile.recoveryPath\n            }\".`;\n          console.log(detail);\n          dialog.showMessageBox(window, {\n            type: 'info',\n            buttons: ['OK'],\n            message,\n            detail\n          });\n        })\n        .then(() => {\n          this.windowsByRecoveryFile.delete(recoveryFile);\n          this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n          this.recoveryFilesByFilePath.delete(recoveryFile.originalPath);\n        })\n    );\n  }\n\n  await Promise.all(promises);\n}", "CodeBleu_score": 79.7474386250443}, {"code": "async didCrashWindow(window){\n\tconst recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (recoveryFiles) {\n    const promises = [];\n    for (const recoveryFile of recoveryFiles) {\n      promises.push(\n        recoveryFile\n          .recover()\n          .catch(error => {\n            const message = 'A file that Atom was saving could be corrupted';\n            const detail =\n              `Error ${error.code}. There was a crash while saving \"${\n                recoveryFile.originalPath\n              }\", so this file might be blank or corrupted.\n` +\n              `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n                recoveryFile.recoveryPath\n              }\".`;\n            console.log(detail);\n            dialog.showMessageBox(window, {\n              type: 'info',\n              buttons: ['OK'],\n              message,\n              detail\n            });\n          })\n          .then(() => {\n            this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n            this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n            if (this.recoveryFilesByWindow.get(window).size === 0) {\n              this.recoveryFilesByWindow.delete(window);\n            }\n            this.recoveryFilesByFilePath.delete(recoveryFile.originalPath);\n            this.recoveryFilesByFilePath.delete(recoveryFile.recoveryPath);\n          })\n      );\n    }\n    await Promise.all(promises);\n  }\n}", "CodeBleu_score": 77.59233953130484}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\treturn new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(source);\n    readStream.on('error', reject);\n    readStream.once('open', () => {\n      mkdirp(Path.dirname(destination), err => {\n        if (err) return reject(err);\n        const writeStream = fs.createWriteStream(destination, { mode });\n        writeStream.on('error', reject);\n        writeStream.on('open', () => {\n          readStream.pipe(writeStream);\n        });\n        writeStream.once('finish', resolve);\n      });\n    });\n  });\n}", "CodeBleu_score": 63.76661467864175}, {"code": "async function copyFile(source, destination, mode){\n\treturn new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(source);\n    const writeStream = fs.createWriteStream(destination, { mode });\n    readStream.on('error', reject).once('open', () => {\n      writeStream.on('error', reject).on('open', () => {\n        readStream.pipe(writeStream).once('close', resolve);\n      });\n    });\n  });\n}", "CodeBleu_score": 55.20726949054839}, {"code": "async function copyFile(source, destination, mode){\n\treturn new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(source);\n    readStream.on('error', reject);\n    readStream.once('open', () => {\n      mkdirp(Path.dirname(destination), (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          const writeStream = fs.createWriteStream(destination, { mode });\n          writeStream.on('error', reject);\n          writeStream.once('open', () => {\n            readStream.pipe(writeStream);\n          });\n          writeStream.once('finish', resolve);\n        }\n      });\n    });\n  });\n}", "CodeBleu_score": 61.05438008873533}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\tif (process.platform !== 'win32') return false\n\tconst squirrelCommand = process.argv[1]\n\tif (squirrelCommand === '--squirrel-install' || squirrelCommand === '--squirrel-updated' || squirrelCommand === '--squirrel-uninstall' || squirrelCommand === '--squirrel-obsolete') {\n\t\treturn SquirrelUpdate.handleStartupEvent(squirrelCommand)\n\t}\n}", "CodeBleu_score": 46.073468137343}, {"code": "function handleStartupEventWithSquirrel(){\n\tif (process.platform != \"win32\") return false;\n    var SquirrelUpdate = require(\"./SquirrelUpdate.js\");\n    var command = process.argv[1];\n    return SquirrelUpdate.handleStartupEvent(command);\n}", "CodeBleu_score": 63.41461363080683}, {"code": "function handleStartupEventWithSquirrel(){\n\tif (process.platform != \"win32\") {\n        return false;\n    }\n    const SquirrelUpdate = require(\"./squirrel-update\");\n    const command = process.argv[1];\n    SquirrelUpdate.handleStartupEvent(command);\n}", "CodeBleu_score": 76.04744439789319}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\tif (process.platform === 'win32' && filePath) {\n        const driveLetter = filePath.match(/^[a-z]:/);\n        if (driveLetter) {\n            return filePath.replace(driveLetter[0], driveLetter[0].toUpperCase());\n        }\n    }\n    return filePath;\n}", "CodeBleu_score": 55.880386975301846}, {"code": "function normalizeDriveLetterName(filePath){\n\tif (process.platform === 'win32' && filePath) {\n        const driveLetter = filePath.substring(0, 1);\n        if (driveLetter.toUpperCase() !== driveLetter) {\n            filePath = driveLetter.toUpperCase() + filePath.substring(1);\n        }\n    }\n    return filePath;\n}", "CodeBleu_score": 53.2340547452252}, {"code": "function normalizeDriveLetterName(filePath){\n\tif (process.platform === 'win32' && filePath) {\n    const driveLetter = filePath.substr(0, 1);\n    return driveLetter.toUpperCase() + filePath.substr(1);\n  }\n  return filePath;\n}", "CodeBleu_score": 56.20854231854659}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\tlet doneCount = this.parts.length;\n    this.parts.forEach(part => {\n      let reg = new Registry({\n        hive: 'HKCU',\n        key: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n      });\n      return reg.create(() =>\n        reg.set(part.name, Registry.REG_SZ, part.value, () => {\n          if (--doneCount === 0) return callback();\n        })\n      );\n    });\n  }", "CodeBleu_score": 98.3025171440935}, {"code": "register(callback){\n\tlet doneCount = this.parts.length;\n    this.parts.forEach(part => {\n      let reg = new Registry({\n        hive: 'HKCU',\n        key: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n      });\n      return reg.create(() =>\n        reg.set(part.name, Registry.REG_SZ, part.value, () => {\n          if (--doneCount === 0) return callback();\n        })\n      );\n    });\n  }", "CodeBleu_score": 98.3025171440935}, {"code": "register(callback){\n\tlet doneCount = this.parts.length;\n    this.parts.forEach(part => {\n      let reg = new Registry({\n        hive: 'HKCU',\n        key: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n      });\n      return reg.create(() =>\n        reg.set(part.name, Registry.REG_SZ, part.value, () => {\n          if (--doneCount === 0) return callback();\n        })\n      );\n    });\n  }", "CodeBleu_score": 98.3025171440935}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\tif (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.42150710651319}, {"code": "showSaveDialog(options, callback){\n\tif (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.42150710651319}, {"code": "showSaveDialog(options, callback){\n\tif (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.42150710651319}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\tconst dimensions = this.getDefaultWindowDimensions();\n    await this.setWindowDimensions(dimensions);\n    return dimensions;\n  }", "CodeBleu_score": 20.48999002887783}, {"code": "async restoreWindowDimensions(){\n\tconst { width, height } = this.getDefaultWindowDimensions();\n    if (!this.isValidDimensions(this)) {\n      await this.setWindowDimensions({ width, height });\n    }\n    return { width, height };\n  }", "CodeBleu_score": 25.063097265865487}, {"code": "async restoreWindowDimensions(){\n\tconst { x, y, width, height } = this.getDefaultWindowDimensions();\n    const { x: currentX, y: currentY, width: currentWidth, height: currentHeight } = this.getWindowDimensions();\n    if (this.isValidDimensions({ x: currentX, y: currentY, width: currentWidth, height: currentHeight })) {\n      return { x: currentX, y: currentY, width: currentWidth, height: currentHeight };\n    }\n    await this.setWindowDimensions({ x, y, width, height });\n    return { x, y, width, height };\n  }", "CodeBleu_score": 20.27641171668201}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\tconst displayErrorDialog = (error) => {\n    this.applicationDelegate.confirm({\n      message: 'Failed to install shell commands',\n      detailedMessage: error.message\n    })\n  }\n\n  const installAtomCommand = () => {\n    return this.applicationDelegate.installShellCommands().then(() => {\n      return installApmCommand()\n    }, displayErrorDialog)\n  }\n\n  const installApmCommand = () => {\n    return this.apmApplicationDelegate.installShellCommands().then(() => {\n      this.applicationDelegate.confirm({\n        message: 'Commands installed',\n        detailedMessage: 'The shell commands `atom` and `apm` are installed in your $PATH.'\n      })\n    }, displayErrorDialog)\n  }\n\n  return installAtomCommand()\n}", "CodeBleu_score": 43.947395608054336}, {"code": "installShellCommandsInteractively(){\n\tconst errorDialog = (error) => {\n    this.applicationDelegate.confirm({\n      message: 'Failed to install shell commands',\n      detailedMessage: error.message\n    })\n  }\n\n  const commandsInstalled = () => {\n    this.applicationDelegate.confirm({\n      message: 'Commands installed',\n      detailedMessage: 'The shell commands `atom` and `apm` are installed.'\n    })\n  }\n\n  this.installAtomCommand()\n    .then(() => this.installApmCommand())\n    .then(commandsInstalled)\n    .catch(errorDialog)\n}", "CodeBleu_score": 40.336132000236304}, {"code": "installShellCommandsInteractively(){\n\tconst displayErrorDialog = (message, stderr) => {\n    const detail = stderr == null ? message : `${message}\n\n${stderr}`\n    const options = {\n      detail,\n      packageName: 'atom-shell-commands'\n    }\n    this.applicationDelegate.confirm(options)\n  }\n\n  let atomCommandInstallationResult = this.installAtomCommandInteractively()\n  if (atomCommandInstallationResult.success) {\n    let apmCommandInstallationResult = this.installApmCommandInteractively()\n    if (apmCommandInstallationResult.success) {\n      this.applicationDelegate.confirm({\n        message: 'Installation of shell commands succeeded.',\n        packageName: 'atom-shell-commands'\n      })\n    } else {\n      displayErrorDialog(\n        'Failed to install APM command.',\n        apmCommandInstallationResult.stderr\n      )\n    }\n  } else {\n    displayErrorDialog(\n      'Failed to install Atom command.',\n      atomCommandInstallationResult.stderr\n    )\n  }\n}", "CodeBleu_score": 33.74765643101043}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tif (process.platform !== 'darwin') return callback();\n\n    const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n    fs.readlink(destinationPath, (error, realpath) => {\n      if (error && error.code !== 'ENOENT') return callback(error);\n      if (realpath === commandPath) return callback(null, commandName);\n      this.createSymlink(fs, commandPath, destinationPath, error => {\n        if (error && error.code === 'EACCES' && askForPrivilege) {\n          const fsAdmin = require('fs-admin');\n          this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n            callback(error, commandName);\n          });\n        } else {\n          callback(error);\n        }\n      });\n    });\n  }", "CodeBleu_score": 98.82801760935094}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tif (process.platform !== 'darwin') return callback();\n\n    const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n    fs.readlink(destinationPath, (error, realpath) => {\n      if (error && error.code !== 'ENOENT') return callback(error);\n      if (realpath === commandPath) return callback(null, commandName);\n      this.createSymlink(fs, commandPath, destinationPath, error => {\n        if (error && error.code === 'EACCES' && askForPrivilege) {\n          const fsAdmin = require('fs-admin');\n          this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n            callback(error, commandName);\n          });\n        } else {\n          callback(error);\n        }\n      });\n    });\n  }", "CodeBleu_score": 98.82801760935094}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tif (process.platform !== 'darwin') return callback();\n\n    const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n    fs.readlink(destinationPath, (error, realpath) => {\n      if (error && error.code !== 'ENOENT') return callback(error);\n      if (realpath === commandPath) return callback(null, commandName);\n      this.createSymlink(fs, commandPath, destinationPath, error => {\n        if (error && error.code === 'EACCES' && askForPrivilege) {\n          const fsAdmin = require('fs-admin');\n          this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n            callback(error, commandName);\n          });\n        } else {\n          callback(error);\n        }\n      });\n    });\n  }", "CodeBleu_score": 98.82801760935094}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tlet row, column;\n    const range = this.marker.getScreenRange();\n    if (moveToEndOfSelection && !range.isEmpty()) {\n      ({ row, column } = range.start);\n    } else {\n      ({ row, column } = this.getScreenPosition());\n    }\n\n    if (this.goalColumn != null) column = this.goalColumn;\n    this.setScreenPosition(\n      { row: row - rowCount, column },\n      { skipSoftWrapIndentation: true }\n    );\n    this.goalColumn = column;\n  }", "CodeBleu_score": 98.3146318824047}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tlet row, column;\n    const range = this.marker.getScreenRange();\n    if (moveToEndOfSelection && !range.isEmpty()) {\n      ({ row, column } = range.start);\n    } else {\n      ({ row, column } = this.getScreenPosition());\n    }\n\n    if (this.goalColumn != null) column = this.goalColumn;\n    this.setScreenPosition(\n      { row: row - rowCount, column },\n      { skipSoftWrapIndentation: true }\n    );\n    this.goalColumn = column;\n  }", "CodeBleu_score": 98.3146318824047}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tlet row, column;\n    const range = this.marker.getScreenRange();\n    if (moveToEndOfSelection && !range.isEmpty()) {\n      ({ row, column } = range.start);\n    } else {\n      ({ row, column } = this.getScreenPosition());\n    }\n\n    if (this.goalColumn != null) column = this.goalColumn;\n    this.setScreenPosition(\n      { row: row - rowCount, column },\n      { skipSoftWrapIndentation: true }\n    );\n    this.goalColumn = column;\n  }", "CodeBleu_score": 98.3146318824047}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\n    for (const layer of this.decorationCountsByLayer.keys()) {\n      for (const marker of layer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow]\n      })) {\n        const decorations = this.decorationsByMarker.get(marker);\n        if (decorations) {\n          decorationsByMarkerId[marker.id] = Array.from(decorations);\n        }\n      }\n    }\n    return decorationsByMarkerId;\n  }", "CodeBleu_score": 98.54322479708216}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\n  for (const layer of this.decorationCountsByLayer.keys()) {\n    for (const marker of layer.findMarkers({\n      intersectsScreenRowRange: [startScreenRow, endScreenRow]\n    })) {\n      const decorations = this.decorationsByMarker.get(marker);\n      if (decorations) {\n        decorationsByMarkerId[marker.id] = Array.from(decorations);\n      }\n    }\n  }\n  return decorationsByMarkerId;\n}", "CodeBleu_score": 99.74967207744729}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\n    for (const layer of this.decorationCountsByLayer.keys()) {\n      for (const marker of layer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow]\n      })) {\n        const decorations = this.decorationsByMarker.get(marker);\n        if (decorations) {\n          decorationsByMarkerId[marker.id] = Array.from(decorations);\n        }\n      }\n    }\n    return decorationsByMarkerId;\n  }", "CodeBleu_score": 98.54322479708216}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\n      throw new Error('Cannot decorate a destroyed marker layer');\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (layerDecorations == null) {\n      layerDecorations = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n    }\n    layerDecorations.add(decoration);\n    this.observeDecoratedLayer(markerLayer, false);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 98.76703919046787}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\n      throw new Error('Cannot decorate a destroyed marker layer');\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (layerDecorations == null) {\n      layerDecorations = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n    }\n    layerDecorations.add(decoration);\n    this.observeDecoratedLayer(markerLayer, false);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 98.76703919046787}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\n      throw new Error('Cannot decorate a destroyed marker layer');\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (layerDecorations == null) {\n      layerDecorations = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n    }\n    layerDecorations.add(decoration);\n    this.observeDecoratedLayer(markerLayer, false);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 98.76703919046787}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.37463068915497}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.37463068915497}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.37463068915497}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\tthis.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n\n      this.loadStylesheets();\n      // Unfortunately some packages are accessing `@mainModulePath`, so we need\n      // to compute that variable eagerly also for preloaded packages.\n      this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 73.53320460624249}, {"code": "finishLoading(){\n\tthis.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n\n      this.loadStylesheets();\n      // Unfortunately some packages are accessing `@mainModulePath`, so we need\n      // to compute that variable eagerly also for preloaded packages.\n      this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 73.53320460624249}, {"code": "finishLoading(){\n\tthis.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n\n      this.loadStylesheets();\n      // Unfortunately some packages are accessing `@mainModulePath`, so we need\n      // to compute that variable eagerly also for preloaded packages.\n      this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 73.53320460624249}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\n    switch (\n      this.applicationDelegate.getUserDefault(\n        'AppleActionOnDoubleClick',\n        'string'\n      )\n    ) {\n      case 'Minimize':\n        this.applicationDelegate.minimizeWindow();\n        break;\n      case 'Maximize':\n        if (this.applicationDelegate.isWindowMaximized()) {\n          this.applicationDelegate.unmaximizeWindow();\n        } else {\n          this.applicationDelegate.maximizeWindow();\n        }\n        break;\n    }\n  }", "CodeBleu_score": 72.99098094407736}, {"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\n    switch (\n      this.applicationDelegate.getUserDefault(\n        'AppleActionOnDoubleClick',\n        'string'\n      )\n    ) {\n      case 'Minimize':\n        this.applicationDelegate.minimizeWindow();\n        break;\n      case 'Maximize':\n        if (this.applicationDelegate.isWindowMaximized()) {\n          this.applicationDelegate.unmaximizeWindow();\n        } else {\n          this.applicationDelegate.maximizeWindow();\n        }\n        break;\n    }\n  }", "CodeBleu_score": 72.99098094407736}, {"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\n    switch (\n      this.applicationDelegate.getUserDefault(\n        'AppleActionOnDoubleClick',\n        'string'\n      )\n    ) {\n      case 'Minimize':\n        this.applicationDelegate.minimizeWindow();\n        break;\n      case 'Maximize':\n        if (this.applicationDelegate.isWindowMaximized()) {\n          this.applicationDelegate.unmaximizeWindow();\n        } else {\n          this.applicationDelegate.maximizeWindow();\n        }\n        break;\n    }\n  }", "CodeBleu_score": 72.99098094407736}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n    if (settingWins.length >= 1) {\n      // A setting window is already created\n      const browserSettingWindow = settingWins[0].win.browserWindow\n      browserSettingWindow.webContents.send('settings::change-tab', category)\n      if (isLinux) {\n        browserSettingWindow.focus()\n      } else {\n        browserSettingWindow.moveTop()\n      }\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 98.53004635297806}, {"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n    if (settingWins.length >= 1) {\n      // A setting window is already created\n      const browserSettingWindow = settingWins[0].win.browserWindow\n      browserSettingWindow.webContents.send('settings::change-tab', category)\n      if (isLinux) {\n        browserSettingWindow.focus()\n      } else {\n        browserSettingWindow.moveTop()\n      }\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 98.53004635297806}, {"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n    if (settingWins.length >= 1) {\n      // A setting window is already created\n      const browserSettingWindow = settingWins[0].win.browserWindow\n      browserSettingWindow.webContents.send('settings::change-tab', category)\n      if (isLinux) {\n        browserSettingWindow.focus()\n      } else {\n        browserSettingWindow.moveTop()\n      }\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 98.53004635297806}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\tif (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n    const { windows } = this\n    const lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n    if (this.windowCount <= 1) {\n      return [{ windowId: lastActiveEditorId, fileList }]\n    }\n\n    // Array of scores, same order like fileList.\n    let filePathScores = null\n    for (const window of windows.values()) {\n      if (window.type === WindowType.EDITOR) {\n        const scores = window.getCandidateScores(fileList)\n        if (!filePathScores) {\n          filePathScores = scores\n        } else {\n          const len = filePathScores.length\n          for (let i = 0; i < len; ++i) {\n            // Update score only if the file is not already opened.\n            if (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n              filePathScores[i] = scores[i]\n            }\n          }\n        }\n      }\n    }\n\n    const buf = []\n    const len = filePathScores.length\n    for (let i = 0; i < len; ++i) {\n      let { id: windowId, score } = filePathScores[i]\n\n      if (score === -1) {\n        // Skip files that already opened.\n        continue\n      } else if (score === 0) {\n        // There is no best window to open the file(s) in.\n        windowId = lastActiveEditorId\n      }\n\n      let item = buf.find(w => w.windowId === windowId)\n      if (!item) {\n        item = { windowId, fileList: [] }\n        buf.push(item)\n      }\n      item.fileList.push(fileList[i])\n    }\n    return buf\n  }", "CodeBleu_score": 98.40987983716074}, {"code": "findBestWindowToOpenIn (fileList){\n\tif (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n    const { windows } = this\n    const lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n    if (this.windowCount <= 1) {\n      return [{ windowId: lastActiveEditorId, fileList }]\n    }\n\n    // Array of scores, same order like fileList.\n    let filePathScores = null\n    for (const window of windows.values()) {\n      if (window.type === WindowType.EDITOR) {\n        const scores = window.getCandidateScores(fileList)\n        if (!filePathScores) {\n          filePathScores = scores\n        } else {\n          const len = filePathScores.length\n          for (let i = 0; i < len; ++i) {\n            // Update score only if the file is not already opened.\n            if (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n              filePathScores[i] = scores[i]\n            }\n          }\n        }\n      }\n    }\n\n    const buf = []\n    const len = filePathScores.length\n    for (let i = 0; i < len; ++i) {\n      let { id: windowId, score } = filePathScores[i]\n\n      if (score === -1) {\n        // Skip files that already opened.\n        continue\n      } else if (score === 0) {\n        // There is no best window to open the file(s) in.\n        windowId = lastActiveEditorId\n      }\n\n      let item = buf.find(w => w.windowId === windowId)\n      if (!item) {\n        item = { windowId, fileList: [] }\n        buf.push(item)\n      }\n      item.fileList.push(fileList[i])\n    }\n    return buf\n  }", "CodeBleu_score": 98.40987983716074}, {"code": "findBestWindowToOpenIn (fileList){\n\tif (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n    const { windows } = this\n    const lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n    if (this.windowCount <= 1) {\n      return [{ windowId: lastActiveEditorId, fileList }]\n    }\n\n    // Array of scores, same order like fileList.\n    let filePathScores = null\n    for (const window of windows.values()) {\n      if (window.type === WindowType.EDITOR) {\n        const scores = window.getCandidateScores(fileList)\n        if (!filePathScores) {\n          filePathScores = scores\n        } else {\n          const len = filePathScores.length\n          for (let i = 0; i < len; ++i) {\n            // Update score only if the file is not already opened.\n            if (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n              filePathScores[i] = scores[i]\n            }\n          }\n        }\n      }\n    }\n\n    const buf = []\n    const len = filePathScores.length\n    for (let i = 0; i < len; ++i) {\n      let { id: windowId, score } = filePathScores[i]\n\n      if (score === -1) {\n        // Skip files that already opened.\n        continue\n      } else if (score === 0) {\n        // There is no best window to open the file(s) in.\n        windowId = lastActiveEditorId\n      }\n\n      let item = buf.find(w => w.windowId === windowId)\n      if (!item) {\n        item = { windowId, fileList: [] }\n        buf.push(item)\n      }\n      item.fileList.push(fileList[i])\n    }\n    return buf\n  }", "CodeBleu_score": 98.40987983716074}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\tlet encoding = 'utf8';\n    let isBom = false;\n    // check for BOM encoding\n    for (const [key, value] of Object.entries(BOM_ENCODINGS)) {\n        if (buffer.includes(Buffer.from(value))) {\n            encoding = key;\n            isBom = true;\n            break;\n        }\n    }\n    // if BOM encoding is not detected, guess the encoding\n    if (!isBom && autoGuessEncoding) {\n        encoding = ced(buffer);\n        // if encoding is not found, return null\n        if (!encoding) {\n            return { encoding: null, isBom: false };\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding.toLowerCase();\n        }\n        // if encoding is not utf8, change the encoding to lowercase\n        if (encoding !== 'utf8') {\n            encoding = encoding", "CodeBleu_score": 24.958442300538717}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\tlet encoding = 'utf8';\n  let isBom = false;\n  for (const [bom, enc] of bomMap) {\n    if (buffer.slice(0, bom.length).equals(bom)) {\n      encoding = enc;\n      isBom = true;\n      break;\n    }\n  }\n  if (autoGuessEncoding) {\n    encoding = ced(buffer) || encoding;\n    encoding = encodingMap[encoding] || encoding.toLowerCase();\n  }\n  return { encoding, isBom };\n}", "CodeBleu_score": 45.549314199448155}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\tlet encoding = 'utf8'\n  let isBom = false\n  for (const [bomEncoding, bomSequence] of BOM_ENCODINGS) {\n    if (checkSequence(buffer, bomSequence)) {\n      encoding = bomEncoding\n      isBom = true\n      break\n    }\n  }\n\n  if (autoGuessEncoding) {\n    const guessedEncoding = ced(buffer)\n    encoding = encodingMap[guessedEncoding] || guessedEncoding.toLowerCase()\n  }\n\n  return { encoding, isBom }\n}", "CodeBleu_score": 45.88125728239476}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\tif (pathname === undefined) {\n    throw new Error('pathname must be defined');\n  }\n  if (content === undefined) {\n    throw new Error('content must be defined');\n  }\n  if (options === undefined) {\n    options = {};\n  }\n  if (options.encoding === undefined) {\n    options.encoding = 'utf8';\n  }\n  if (options.lineEnding === undefined) {\n    options.lineEnding = 'lf';\n  }\n  if (options.bom === undefined) {\n    options.bom = false;\n  }\n  if (options.ext === undefined) {\n    options.ext = '.md';\n  }\n  if (options.pathname === undefined) {\n    options.pathname = pathname;\n  }\n  if (options.pathname.indexOf('.') === -1) {\n    options.pathname = options.pathname + options.ext;\n  }\n  const lineEnding = convertLineEndings(content, options.lineEnding);\n  const buffer = iconv.encode(lineEnding, options.encoding, {\n    addBOM: options.bom,\n  });\n  writeFile(options.pathname, buffer, (err) => {\n    if (err) {\n      throw err;\n    }\n  });\n}", "CodeBleu_score": 24.41298405254261}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t// Extract options.\n  const {\n    encoding = 'utf8',\n    lineEndings = 'lf',\n    BOM = false,\n    ...otherOptions\n  } = options;\n\n  // Extract file extension.\n  const ext = path.extname(pathname);\n\n  // If no file extension provided, default to '.md'.\n  if (!ext) {\n    pathname += '.md';\n  }\n\n  // Convert line endings.\n  const convertedContent = convertLineEndings(content, lineEndings);\n\n  // Encode content.\n  const encodedContent = iconv.encode(convertedContent, encoding, {\n    addBOM: BOM,\n  });\n\n  // Write file.\n  fs.writeFile(pathname, encodedContent, otherOptions);\n}", "CodeBleu_score": 37.392393645772984}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\tconst { encoding, lineEndings, addBOM } = options;\n  const ext = path.extname(pathname);\n  const lineEnding = lineEndings || (ext === '.md' ? '\n' : '\\r\n');\n  const convertedContent = convertLineEndings(content, lineEnding);\n  const buffer = iconv.encode(convertedContent, encoding, { addBOM });\n  writeFile(pathname, buffer);\n}", "CodeBleu_score": 37.07498458252599}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\tipcMain.handle('get-keyboard-info', async () => {\n    try {\n      return getKeyboardInfo()\n    } catch (err) {\n      log.error('Error while retrieving keyboard information:', err)\n      throw err\n    }\n  })\n\n  ipcMain.on('dump-keyboard-info', async () => {\n    try {\n      const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n      const content = JSON.stringify(await getKeyboardInfo(), null, 2)\n      await fsPromises.writeFile(dumpPath, content, 'utf8')\n      shell.openPath(dumpPath)\n    } catch (err) {\n      log.error('Error while dumping keyboard information:', err)\n    }\n  })\n}", "CodeBleu_score": 54.50617329797457}, {"code": "export const registerKeyboardListeners = () =>{\n\tipcMain.handle('get-keyboard-info', async () => {\n    return getKeyboardInfo()\n  })\n\n  ipcMain.on('dump-keyboard-info', async () => {\n    try {\n      const content = JSON.stringify(await getKeyboardInfo(), null, 2)\n      const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n      await fsPromises.writeFile(dumpPath, content, 'utf8')\n      shell.openPath(dumpPath)\n    } catch (error) {\n      log.error('Error while writing keyboard information to file:', error)\n    }\n  })\n}", "CodeBleu_score": 53.24817624975066}, {"code": "export const registerKeyboardListeners = () =>{\n\tipcMain.handle('getKeyboardInfo', async () => {\n    try {\n      return await getKeyboardInfo()\n    } catch (error) {\n      log.error(error)\n      return null\n    }\n  })\n\n  ipcMain.on('dumpKeyboardInfo', async () => {\n    const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n    const content = JSON.stringify(await getKeyboardInfo(), null, 2)\n\n    fsPromises.writeFile(dumpPath, content, 'utf8')\n      .then(() => {\n        console.log(`Keyboard information written to \"${dumpPath}\".`)\n        shell.openPath(dumpPath)\n      })\n      .catch(error => log.error(error))\n  })\n}", "CodeBleu_score": 65.88843339349758}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\n    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n    // Notify key mapper when the keyboard layout was changed.\n    keyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n      if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n        console.log('[DEBUG] Keyboard layout changed:\n', layout)\n      }\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 87.91865202636015}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\n    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n    // Notify key mapper when the keyboard layout was changed.\n    keyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n      if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n        console.log('[DEBUG] Keyboard layout changed:\n', layout)\n      }\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 87.91865202636015}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\n    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n    // Notify key mapper when the keyboard layout was changed.\n    keyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n      if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n        console.log('[DEBUG] Keyboard layout changed:\n', layout)\n      }\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 87.91865202636015}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\n    const { others } = separateConfig(this.systemConfig.store)\n    if (others && Object.keys(others).length > 0) {\n      Object.keys(others).forEach(key => {\n        this.systemConfig.delete(key)\n      })\n    }\n\n    const proxy = this.getUserConfig('proxy', { enable: false })\n    const { enable, server, bypass, scope = [] } = proxy\n    if (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n      this.setSystemConfig('all-proxy', server)\n      this.setSystemConfig('no-proxy', bypass)\n    }\n\n    // Fix spawn ENAMETOOLONG on Windows\n    const tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\n    this.setSystemConfig('bt-tracker', tracker)\n  }", "CodeBleu_score": 98.71263792002375}, {"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\n    const { others } = separateConfig(this.systemConfig.store)\n    if (others && Object.keys(others).length > 0) {\n      Object.keys(others).forEach(key => {\n        this.systemConfig.delete(key)\n      })\n    }\n\n    const proxy = this.getUserConfig('proxy', { enable: false })\n    const { enable, server, bypass, scope = [] } = proxy\n    if (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n      this.setSystemConfig('all-proxy', server)\n      this.setSystemConfig('no-proxy', bypass)\n    }\n\n    // Fix spawn ENAMETOOLONG on Windows\n    const tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\n    this.setSystemConfig('bt-tracker', tracker)\n  }", "CodeBleu_score": 98.71263792002375}, {"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\n    const { others } = separateConfig(this.systemConfig.store)\n    if (others && Object.keys(others).length > 0) {\n      Object.keys(others).forEach(key => {\n        this.systemConfig.delete(key)\n      })\n    }\n\n    const proxy = this.getUserConfig('proxy', { enable: false })\n    const { enable, server, bypass, scope = [] } = proxy\n    if (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n      this.setSystemConfig('all-proxy', server)\n      this.setSystemConfig('no-proxy', bypass)\n    }\n\n    // Fix spawn ENAMETOOLONG on Windows\n    const tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\n    this.setSystemConfig('bt-tracker', tracker)\n  }", "CodeBleu_score": 98.71263792002375}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\tif (!client) {\n      return\n    }\n\n    try {\n      client.destroy(() => {\n        client = null\n      })\n    } catch (err) {\n      logger.warn('[Motrix] close UPnP client fail', err)\n    }\n  }", "CodeBleu_score": 97.10342207385472}, {"code": "closeClient (){\n\tif (!client) {\n    return\n  }\n\n  try {\n    client.destroy(() => {\n      client = null\n    })\n  } catch (err) {\n    logger.warn('[Motrix] close UPnP client fail', err)\n  }\n}", "CodeBleu_score": 99.39089243036328}, {"code": "closeClient (){\n\tif (!client) {\n      return\n    }\n\n    try {\n      client.destroy(() => {\n        client = null\n      })\n    } catch (err) {\n      logger.warn('[Motrix] close UPnP client fail', err)\n    }\n  }", "CodeBleu_score": 97.10342207385472}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\tlet bar = this.bars[page] || null\n    if (!bar) {\n      try {\n        const items = this.build(this.template)\n        bar = new TouchBar({ items })\n        this.bars[page] = bar\n      } catch (e) {\n        logger.info('getTouchBarByPage fail', e)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 97.85832050158878}, {"code": "getTouchBarByPage (page){\n\tlet bar = this.bars[page] || null\n    if (!bar) {\n      try {\n        const items = this.build(this.template)\n        bar = new TouchBar({ items })\n        this.bars[page] = bar\n      } catch (e) {\n        logger.info('getTouchBarByPage fail', e)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 97.85832050158878}, {"code": "getTouchBarByPage (page){\n\tlet bar = this.bars[page] || null\n    if (!bar) {\n      try {\n        const items = this.build(this.template)\n        bar = new TouchBar({ items })\n        this.bars[page] = bar\n      } catch (e) {\n        logger.info('getTouchBarByPage fail', e)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 97.85832050158878}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\twindow.on('close', (event) => {\n      if (pageOptions.bindCloseToHide && !this.willQuit) {\n        event.preventDefault()\n\n        // @see https://github.com/electron/electron/issues/20263\n        if (window.isFullScreen()) {\n          window.once('leave-full-screen', () => window.hide())\n\n          window.setFullScreen(false)\n        } else {\n          window.hide()\n        }\n      }\n      const bounds = window.getBounds()\n      this.emit('window-closed', { page, bounds })\n    })\n  }", "CodeBleu_score": 98.37200320736608}, {"code": "handleWindowClose (pageOptions, page, window){\n\twindow.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.willQuit) {\n      event.preventDefault()\n\n      // @see https://github.com/electron/electron/issues/20263\n      if (window.isFullScreen()) {\n        window.once('leave-full-screen', () => window.hide())\n\n        window.setFullScreen(false)\n      } else {\n        window.hide()\n      }\n    }\n    const bounds = window.getBounds()\n    this.emit('window-closed', { page, bounds })\n  })\n}", "CodeBleu_score": 99.73333695713883}, {"code": "handleWindowClose (pageOptions, page, window){\n\twindow.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.willQuit) {\n      event.preventDefault()\n\n      // @see https://github.com/electron/electron/issues/20263\n      if (window.isFullScreen()) {\n        window.once('leave-full-screen', () => window.hide())\n\n        window.setFullScreen(false)\n      } else {\n        window.hide()\n      }\n    }\n    const bounds = window.getBounds()\n    this.emit('window-closed', { page, bounds })\n  })\n}", "CodeBleu_score": 99.73333695713883}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\treturn new Promise((resolve, reject) => {\n    if (process.platform !== 'darwin') {\n      reject(new Error('This function is only available on Mac OS.'));\n    }\n\n    const app = electron.app;\n    if (!app.isInApplicationsFolder()) {\n      try {\n        app.moveToApplicationsFolder();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      reject(new Error(errorMsg));\n    }\n  });\n}", "CodeBleu_score": 54.7280077599132}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\treturn new Promise((resolve, reject) => {\n    try {\n      app.moveToApplicationsFolder()\n      resolve()\n    } catch (err) {\n      reject(err)\n    }\n  })\n}", "CodeBleu_score": 46.96359159931372}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\treturn new Promise((resolve, reject) => {\n    try {\n      const app = require('electron').remote.app;\n      app.moveToApplicationsFolder({\n        conflictHandler: (existing, new_) => {\n          return 1;\n        }\n      });\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}", "CodeBleu_score": 53.79479547819476}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tlog.debug('Copying icons if necessary')\n\n  if (!options.icon) {\n    log.debug('No icon specified, skipping')\n    return\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== 'false') {\n      const trayIconFilename = path.join(appPath, 'icon.png')\n      await fs.copy(options.icon, trayIconFilename)\n    }\n  } else {\n    const ext = path.extname(options.icon)\n    const iconFilename = path.join(appPath, `icon${ext}`)\n    await fs.copy(options.icon, iconFilename)\n  }\n}", "CodeBleu_score": 39.33580511444612}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tlog.debug(`Copying icons if necessary\u2026`)\n  if (!options.icon) {\n    log.debug(`No icon specified, skipping`)\n    return\n  }\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== false) {\n      const trayIconFileName = `icon.png`\n      const trayIconFilePath = path.join(appPath, trayIconFileName)\n      await fs.copy(options.icon, trayIconFilePath)\n    }\n  } else {\n    const iconFileName = `icon${path.extname(options.icon)}`\n    const iconFilePath = path.join(appPath, iconFileName)\n    await fs.copy(options.icon, iconFilePath)\n  }\n}", "CodeBleu_score": 37.797188867938445}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tlog.debug('Copying icons if necessary...')\n  if (!options.icon) {\n    log.debug('No icon specified, skipping copying icons')\n    return\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== false) {\n      await fs.copy(\n        path.join(options.dir, options.icon),\n        path.join(appPath, 'Contents', 'Resources', 'tray-icon.png'),\n      )\n    }\n  } else if (options.platform === 'win32' || options.platform === 'linux') {\n    const iconPath = path.join(appPath, 'icon.png')\n    await fs.copy(path.join(options.dir, options.icon), iconPath)\n\n    if (options.platform === 'win32') {\n      const iconFile = path.basename(options.icon)\n      const iconExtension = path.extname(options.icon)\n      const iconFilename = iconFile.slice(0, iconFile.length - iconExtension.length)\n      await fs.copy(iconPath, path.join(appPath, `${iconFilename}.ico`))\n    }\n  }\n}", "CodeBleu_score": 47.371264632609886}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst hash = crypto.createHash('md5');\n  hash.update(url);\n  const hashString = hash.digest('hex').substring(0, 6);\n  const normalizedAppName = appName\n    .toLowerCase()\n    .replace(/[,:.]/g, '')\n    .replace(/ /g, '-')\n    .replace(/_/g, '-');\n\n  return `${normalizedAppName}-nativefier-${hashString}`;\n}", "CodeBleu_score": 79.83445869056325}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst hash = crypto.createHash('md5').update(url).digest('hex')\n  return `${appName\n    .toLowerCase()\n    .replace(/[,:.]/g, '')\n    .replace(/ /g, '-')\n    .replace(/_/g, '-')}-nativefier-${hash.substr(0, 6)}`\n}", "CodeBleu_score": 44.63245080316203}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst hash = crypto.createHash('md5').update(url).digest('hex')\n    return (\n        `${appName\n            .toLowerCase()\n            .replace(/[,:.]/g, '')\n            .replace(/\\s+/g, '-')\n            .replace(/_/g, '-')}-nativefier-${hash.substr(0, 6)}`\n    )\n}", "CodeBleu_score": 45.435401601043836}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\tlog.debug('Preparing Electron app');\n  await fs.copy(src, dest, {\n    dereference: true,\n    overwrite: true,\n    preserveTimestamps: true,\n  });\n  log.debug(`Copied ${src} to ${dest}`);\n  const appConfig = pickElectronAppArgs(options);\n  const configPath = path.join(dest, 'electron-app.json');\n  await fs.writeFile(configPath, JSON.stringify(appConfig, null, 2));\n  log.debug(`Wrote configuration to ${configPath}`);\n  if (options.bookmarksMenu) {\n    try {\n      await fs.copy(options.bookmarksMenu, path.join(dest, 'bookmarksMenu.json'));\n      log.debug(`Copied ${options.bookmarksMenu} to ${dest}`);\n    } catch (err) {\n      log.error(`Failed to copy bookmarks menu: ${err}`);\n    }\n  }\n  try {\n    await maybeCopyScripts(options, dest);\n  } catch (err) {\n    log.error(`Failed to copy injection scripts: ${err}`);\n  }\n  await changeAppPackageJsonName(dest, options.name);\n  await setAppBundleId(dest, options.name);\n}", "CodeBleu_score": 40.28365880641157}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\tlog.debug(\n    `Copying Electron app from ${src} to ${dest}`,\n  );\n  try {\n    await fs.copy(src, dest);\n  } catch (error) {\n    log.error(\n      `Failed to copy Electron app from ${src} to ${dest}: ${error}`,\n    );\n  }\n  const appConfig = pickElectronAppArgs(options);\n  const appConfigPath = path.join(dest, 'appConfig.json');\n  fs.writeFile(\n    appConfigPath,\n    JSON.stringify(appConfig, null, 2),\n    'utf8',\n  );\n  if (options.bookmarksMenu) {\n    const bookmarksMenuPath = path.join(\n      dest,\n      'bookmarksMenu.json',\n    );\n    fs.writeFile(\n      bookmarksMenuPath,\n      JSON.stringify(options.bookmarksMenu, null, 2),\n      'utf8',\n    );\n  }\n  try {\n    maybeCopyScripts(options.injection, dest);\n  } catch (error) {\n    log.error(\n      `Failed to copy injection scripts: ${error}`,\n    );\n  }\n  changeAppPackageJsonName(options.name, dest);\n  setAppBundleID(options.name, dest);\n}", "CodeBleu_score": 45.82732078210697}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\tconst {\n    appName,\n    inject,\n    menu,\n    platform,\n    ...electronOptions\n  } = options\n\n  log.debug('Copying app from', src, 'to', dest)\n  await fs.copy(src, dest, {\n    dereference: true,\n    overwrite: true,\n    recursive: true,\n  })\n\n  log.debug('Writing app configuration')\n  const appConfig = pickElectronAppArgs(options)\n  await fs.writeFile(\n    path.join(dest, 'electron-app.json'),\n    JSON.stringify(appConfig),\n  )\n\n  if (menu) {\n    log.debug('Copying bookmarks menu')\n    await fs.copy(menu, path.join(dest, 'menu.json'))\n  }\n\n  if (inject) {\n    log.debug('Copying injection scripts')\n    await maybeCopyScripts(inject, dest, platform)\n  }\n\n  log.debug('Changing app name in package.json')\n  await changeAppPackageJsonName(dest, appName)\n\n  log.debug('Setting app bundle ID')\n  await setAppBundleId(dest, appName)\n}", "CodeBleu_score": 29.837070119721176}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\tconsole.log(`Downloading ${fileUrl}`);\n  return fetch(fileUrl, { method: \"GET\" })\n    .then((response) => response.arrayBuffer())\n    .then((data) => {\n      if (data.byteLength > 0) {\n        const extension = path.extname(fileUrl);\n        return { data, extension };\n      }\n    });\n}", "CodeBleu_score": 57.10520100746197}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\tconsole.log(`Downloading file from ${fileUrl}`);\n\n  return fetch(fileUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/octet-stream\",\n    },\n  })\n    .then((response) => {\n      return response.arrayBuffer();\n    })\n    .then((data) => {\n      if (data.byteLength > 0) {\n        return {\n          data: data,\n          extension: path.extname(fileUrl),\n        };\n      }\n    });\n}", "CodeBleu_score": 59.09360872758895}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\tconsole.log(`Downloading ${fileUrl}`);\n  return fetch(fileUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n    .then((response) => {\n      if (response.status === 200) {\n        return response.arrayBuffer();\n      } else {\n        throw new Error(\n          `File download failed with status code ${response.status}`,\n        );\n      }\n    })\n    .then((buffer) => {\n      if (buffer.byteLength > 0) {\n        const ext = path.extname(fileUrl);\n        return {\n          data: buffer,\n          extension: ext,\n        };\n      } else {\n        return undefined;\n      }\n    });\n}", "CodeBleu_score": 57.3693129531337}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\treturn str\n    .split('-')\n    .filter(Boolean)\n    .map((word, index) => {\n      if (index === 0) return word.toLowerCase();\n      return word[0].toUpperCase() + word.substring(1).toLowerCase();\n    })\n    .join('');\n}", "CodeBleu_score": 63.12671100573407}, {"code": "export function camelCased(str: string): string{\n\tconst words = str.split('-').filter(Boolean);\n  const capitalizedWords = words.map((word, index) => {\n    return index === 0 ? word : word[0].toUpperCase() + word.substring(1);\n  });\n  return capitalizedWords.join('');\n}", "CodeBleu_score": 39.88745167924505}, {"code": "export function camelCased(str: string): string{\n\treturn str\n    .split('-')\n    .filter(Boolean)\n    .map((word, index) => {\n      if (index === 0) {\n        return word;\n      }\n\n      return word[0].toUpperCase() + word.substring(1);\n    })\n    .join('');\n}", "CodeBleu_score": 64.66088608042146}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\tconst sanitizedFilename = sanitize(filenameToSanitize);\n  if (platform === 'linux') {\n    const filenameWithoutSpaces = sanitizedFilename.replace(/ /g, '');\n    const filenameWithoutUnicodeChars = filenameWithoutSpaces.replace(\n      /[^\\x00-\\x7F]/g,\n      '',\n    );\n    if (filenameWithoutUnicodeChars === '') {\n      log.warn(\n        'The sanitized filename is empty. Assigning a default application name.',\n      );\n      return 'My Electron Application';\n    }\n    return filenameWithoutUnicodeChars;\n  }\n  return sanitizedFilename;\n}", "CodeBleu_score": 49.104488119858324}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\tconst sanitizedFilename = sanitize(filenameToSanitize);\n  if (platform === \"linux\" && sanitizedFilename.length > 0) {\n    return sanitizedFilename.replace(/[^\\w\\d.-]+/g, \"\");\n  }\n  if (sanitizedFilename.length === 0) {\n    log.warn(\n      `The sanitized filename is empty. Assigning default application name.`,\n    );\n    return \"application\";\n  }\n  log.debug(`Sanitized filename: ${sanitizedFilename}`);\n  return sanitizedFilename;\n}", "CodeBleu_score": 51.05047009917778}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\tlet sanitizedFilename = sanitize(filenameToSanitize)\n  if (platform === 'linux') {\n    sanitizedFilename = sanitizedFilename.replace(/[^\\w\\d.-]/g, '')\n  }\n  if (sanitizedFilename.length === 0) {\n    sanitizedFilename = 'my-application'\n    log.warn(\n      'The sanitized filename is empty. Using default application name: ' +\n        sanitizedFilename,\n    )\n  }\n  log.debug('Sanitized filename: ' + sanitizedFilename)\n  return sanitizedFilename\n}", "CodeBleu_score": 51.89737926116346}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tif (typeof savedCache.duration === 'string') {\n        savedCache.duration = parseInt(savedCache.duration, 10);\n    }\n\n    const cacheTime = savedCache.time;\n    const duration = savedCache.duration;\n    const currentTime = new Date().getTime();\n\n    if (cacheTime + duration < currentTime) {\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 38.88117823771312}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tconst duration = typeof savedCache.duration === 'string' ? parseInt(savedCache.duration) : savedCache.duration;\n    const cacheTime = typeof savedCache.cacheTime === 'string' ? parseInt(savedCache.cacheTime) : savedCache.cacheTime;\n    const expirationTime = cacheTime + duration;\n    const currentTime = new Date().getTime();\n    return expirationTime < currentTime;\n}", "CodeBleu_score": 48.9083885091452}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tconst currentTime = new Date().getTime();\n    const cacheTime = savedCache.cacheTime;\n    const duration = typeof savedCache.duration === 'string' ? parseInt(savedCache.duration) : savedCache.duration;\n    return cacheTime + duration < currentTime;\n}", "CodeBleu_score": 47.23447497813286}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\tif (typeof timestampOptionArgument !== \"number\") {\n        throw new TypeORMError(`Timestamp option argument must be a number.`);\n    }\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(`Timestamp option argument must be a positive number.`);\n    }\n    return timestampOptionArgument;\n}", "CodeBleu_score": 33.0069212347226}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\tif (timestampOptionArgument && typeof timestampOptionArgument !== 'number') {\n        throw new TypeORMError(`Provided \"timestamp\" value must be a number.`);\n    }\n\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(`Provided \"timestamp\" value must be positive.`);\n    }\n\n    return timestampOptionArgument ? timestampOptionArgument : Date.now();\n}", "CodeBleu_score": 51.91035397393997}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\tif (timestampOptionArgument !== undefined && timestampOptionArgument !== null && timestampOptionArgument !== \"\") {\n        if (typeof timestampOptionArgument === \"number\") {\n            if (timestampOptionArgument < 0) {\n                throw new TypeORMError(`Timestamp option must be a positive number, but ${timestampOptionArgument} is given.`);\n            }\n            return timestampOptionArgument;\n        } else {\n            throw new TypeORMError(`Timestamp option must be a positive number, but ${timestampOptionArgument} is given.`);\n        }\n    } else {\n        return Date.now();\n    }\n}", "CodeBleu_score": 47.459085401047105}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\tconst queryRunner = await this.createQueryRunner();\n\n    try {\n      const databases = this.connection.entityMetadatas\n        .map((metadata) => metadata.database)\n        .filter((database) => database && database !== \"default\");\n\n      if (databases.length === 0) {\n        await queryRunner.clearDatabase();\n      } else {\n        for (const database of databases) {\n          await queryRunner.clearDatabase(database);\n        }\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      await queryRunner.release();\n    }\n  }", "CodeBleu_score": 42.91636322869482}, {"code": " async dropDatabase(): Promise<void>{\n\tconst queryRunner = await this.connection.createQueryRunner();\n\n        try {\n            await queryRunner.connect();\n            const databases = this.connection.entityMetadatas\n                .filter(metadata => metadata.database !== undefined)\n                .map(metadata => metadata.database)\n                .filter((value, index, array) => array.indexOf(value) === index);\n\n            if (databases.length === 0) {\n                await queryRunner.clearDatabase();\n            } else {\n                for (const database of databases) {\n                    await queryRunner.clearDatabase(database);\n                }\n            }\n        } finally {\n            await queryRunner.release();\n        }\n    }", "CodeBleu_score": 46.7579313213801}, {"code": " async dropDatabase(): Promise<void>{\n\tconst queryRunner = this.connection.createQueryRunner();\n\n    try {\n      const databases = this.connection.entityMetadatas\n        .map(x => x.database)\n        .filter(x => x && x !== 'default');\n\n      if (databases.length) {\n        for (const database of databases) {\n          await queryRunner.clearDatabase(database);\n        }\n      } else {\n        await queryRunner.clearDatabase();\n      }\n    } finally {\n      await queryRunner.release();\n    }\n  }", "CodeBleu_score": 35.90657389146356}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\tif (this.connection.driver instanceof MongoDriver)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const queryBuilder = this.connection.createQueryBuilder<Entity>(\n            entityOrRunner as any,\n            alias,\n            queryRunner,\n        );\n        if (this.queryRunner) queryBuilder.expressionMap.queryRunner = this.queryRunner;\n        return queryBuilder;\n    }", "CodeBleu_score": 29.153805080968077}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\tif (this.connection.driver instanceof MongoDriver)\n            throw new QueryBuilderNotSupportedError();\n\n        if (alias) {\n            const metadata = this.connection.getMetadata(entityOrRunner as Function);\n            const aliasName = alias || this.connection.namingStrategy.aliasName(metadata.name, alias);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(aliasName)\n                .from(entityOrRunner as Function, aliasName);\n        }\n\n        return new SelectQueryBuilder(this, queryRunner)\n            .select(entityOrRunner as Function);\n    }", "CodeBleu_score": 51.155476832019296}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t// check if query builder is allowed for this connection\n        if (this.connection.driver instanceof MongoDriver)\n            throw new TypeORMError(\n                `Query Builder is not supported by \"${this.connection.driver.options.type}\" connection`,\n            );\n\n        if (alias) {\n            const metadata = this.connection.getMetadata(entityOrRunner);\n            const aliasName = alias;\n            const qb = this.createQueryBuilder(\n                this.connection.driver.buildTableName(\n                    metadata.tableName,\n                    metadata.schema,\n                    metadata.database,\n                ),\n                aliasName,\n                queryRunner,\n            );\n            qb.expressionMap.mainAlias!.metadata = metadata;\n            qb.expressionMap.mainAlias!.name = aliasName;\n            return qb;\n        } else {\n            return this.createQueryBuilder(entityOrRunner as any, queryRunner);\n        }\n    }", "CodeBleu_score": 47.35590970624993}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\tconst metadata = await this.connection.getMetadata(entityClass);\n        const transformed = await new PlainObjectToDatabaseEntityTransformer(this.connection).transform(\n            entityLike,\n            metadata,\n        );\n        if (transformed) {\n            return this.merge(entityClass, entityLike, transformed);\n        }\n        return undefined;\n    }", "CodeBleu_score": 45.284578207194635}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\tconst metadata = await this.connection.getMetadata(entityClass);\n        const transformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = transformer.transform(entityLike, metadata);\n        if (!transformedEntity) return undefined;\n        return this.merge(transformedEntity, entityLike);\n    }", "CodeBleu_score": 49.404150869416185}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\tconst metadata = await this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection);\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity) {\n            return this.merge(entityClass, transformedEntity, entityLike);\n        }\n\n        return undefined;\n    }", "CodeBleu_score": 57.78909924461245}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\treturn (\n    <div className=\"compression-input\">\n      <div className=\"compression-input__label\">Compression:</div>\n      <div className=\"compression-input__value\">{compression}%</div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        step=\"1\"\n        value={compression}\n        onChange={(e) => handleCompressionChange(Number(e.target.value))}\n      />\n      {compression > 0 && (\n        <div className=\"compression-input__note\">\n          Note: Compression is lossy and may alter the image\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 38.796115503721644}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\treturn (\n    <div className=\"compression-input\">\n      <div className=\"compression-input__label\">Compression</div>\n      <div className=\"compression-input__value\">\n        {compression}%\n      </div>\n      <input\n        className=\"compression-input__slider\"\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        step=\"1\"\n        value={compression}\n        onChange={handleCompressionChange}\n      />\n      {compression > 0 && (\n        <div className=\"compression-input__note\">\n          Note: Compression is lossy and may result in a lower quality image.\n          <br />\n          PNG, JPG, and WebP images are compressed using the{\" \"}\n          <a\n            href=\"https://en.wikipedia.org/wiki/Lossy_compression\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            lossy\n          </a>{\" \"}\n          compression algorithm.\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 52.025176965441766}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\treturn (\n    <div className=\"compression-input\">\n      <div className=\"compression-input__label\">Compression</div>\n      <div className=\"compression-input__percentage\">{compression}%</div>\n      <input\n        className=\"compression-input__slider\"\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChange}\n      />\n      {compression > 0 && (\n        <div className=\"compression-input__note\">\n          Note: PNG, JPG, and WebP images are lossy-compressed.\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 41.04376239272148}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\n        const key = `${type}-${name}`;\n\n        for (const idx in this.attributeIndex) {\n            if (idx.startsWith(key)) {\n                resArr.push(this.attributeIndex[idx]);\n            }\n        }\n\n        return resArr.flat();\n    }", "CodeBleu_score": 96.98634644416582}, {"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\n        const key = `${type}-${name}`;\n\n        for (const idx in this.attributeIndex) {\n            if (idx.startsWith(key)) {\n                resArr.push(this.attributeIndex[idx]);\n            }\n        }\n\n        return resArr.flat();\n    }", "CodeBleu_score": 96.98634644416582}, {"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\n        const key = `${type}-${name}`;\n\n        for (const idx in this.attributeIndex) {\n            if (idx.startsWith(key)) {\n                resArr.push(this.attributeIndex[idx]);\n            }\n        }\n\n        return resArr.flat();\n    }", "CodeBleu_score": 96.98634644416582}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\tvar childNote = becca.notes.get(branchRow.noteId);\n    if (childNote) {\n        childNote.resetFlatTextCache();\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n    var parentNote = becca.notes.get(branchRow.parentNoteId);\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 61.18900407454089}, {"code": "function branchUpdated(branchRow){\n\tvar childNote = getNote(branchRow.noteId);\n    if (childNote) {\n        childNote.resetFlatTextCache();\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n    var parentNote = getNote(branchRow.parentNoteId);\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 56.18551219391566}, {"code": "function branchUpdated(branchRow){\n\tvar childNote = becca.notes.get(branchRow.noteId);\n    if (childNote) {\n        childNote.resetFlatTextCache();\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n    var parentNote = becca.notes.get(branchRow.parentNoteId);\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 61.18900407454089}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\tif (!mime || mime == 'text/html') {\n    return mime;\n  }\n  if (!trimmedMimes[mime]) {\n    var parts = mime.split('/');\n    var type = parts[1];\n    if (type.startsWith('text-')) {\n      type = type.substr(4);\n    } else if (type.startsWith('x-')) {\n      type = type.substr(2);\n    } else if (type.startsWith('vnd.')) {\n      type = type.substr(4);\n    } else if (type.startsWith('ms-')) {\n      type = type.substr(3);\n    } else if (type.startsWith('prs.')) {\n      type = type.substr(4);\n    }\n    trimmedMimes[mime] = type;\n  }\n  return trimmedMimes[mime];\n}", "CodeBleu_score": 43.44087427346873}, {"code": "function trimMime(mime){\n\tif (mime == null || mime == 'text/html') {\n        return mime;\n    }\n    if (!mimeCache.hasOwnProperty(mime)) {\n        let parts = mime.split('/');\n        if (parts[0] == 'text') {\n            parts = parts.slice(1);\n        } else if (parts[0] == 'application') {\n            parts = parts.slice(1);\n        }\n        if (parts[0].startsWith('-x')) {\n            parts[0] = parts[0].substr(2);\n        }\n        mimeCache[mime] = parts.join('/');\n    }\n    return mimeCache[mime];\n}", "CodeBleu_score": 52.72341222805343}, {"code": "function trimMime(mime){\n\tif (mime === null || mime === 'text/html') {\n        return mime;\n    }\n    if (!cache[mime]) {\n        let mimeParts = mime.split('/');\n        if (mimeParts[0] === 'text') {\n            mimeParts = mimeParts.slice(1);\n        } else if (mimeParts[0] === 'application') {\n            mimeParts = mimeParts.slice(1);\n        }\n        if (mimeParts[0].startsWith('x-')) {\n            mimeParts[0] = mimeParts[0].substr(2);\n        }\n        cache[mime] = mimeParts.join('/');\n    }\n    return cache[mime];\n}", "CodeBleu_score": 51.77182051420357}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\tconst utcDateCreated = dateUtils.parseDateTime(baseNote.utcDateCreated).getTime();\n  const minDate = dateUtils.utcDateTimeStr(utcDateCreated - 24 * 60 * 60 * 1000);\n  const minExcludedDate = dateUtils.utcDateTimeStr(utcDateCreated);\n  const maxExcludedDate = dateUtils.utcDateTimeStr(utcDateCreated + 24 * 60 * 60 * 1000);\n  const maxDate = dateUtils.utcDateTimeStr(utcDateCreated + 2 * 24 * 60 * 60 * 1000);\n\n  return {\n    minDate,\n    minExcludedDate,\n    maxExcludedDate,\n    maxDate,\n  };\n}", "CodeBleu_score": 46.15759485597833}, {"code": "function buildDateLimits(baseNote){\n\tconst baseDate = dateUtils.parseDateTime(baseNote.utcDateCreated).getTime();\n  const minDate = dateUtils.utcDateTimeStr(baseDate - 1000 * 60 * 60 * 24 * 30);\n  const minExcludedDate = dateUtils.utcDateTimeStr(baseDate - 1000 * 60 * 60 * 24 * 7);\n  const maxExcludedDate = dateUtils.utcDateTimeStr(baseDate + 1000 * 60 * 60 * 24 * 7);\n  const maxDate = dateUtils.utcDateTimeStr(baseDate + 1000 * 60 * 60 * 24 * 30);\n  return { minDate, minExcludedDate, maxExcludedDate, maxDate };\n}", "CodeBleu_score": 44.06882339612424}, {"code": "function buildDateLimits(baseNote){\n\tvar baseNoteDate = dateUtils.parseDateTime(baseNote.utcDateCreated).getTime();\n    var minDate = new Date(baseNoteDate - 12096e5).toISOString();\n    var minExcludedDate = new Date(baseNoteDate - 7776e5).toISOString();\n    var maxExcludedDate = new Date(baseNoteDate + 7776e5).toISOString();\n    var maxDate = new Date(baseNoteDate + 12096e5).toISOString();\n    return {\n        minDate: minDate,\n        minExcludedDate: minExcludedDate,\n        maxExcludedDate: maxExcludedDate,\n        maxDate: maxDate\n    };\n}", "CodeBleu_score": 38.538891901501785}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t// client code asks to save entity even if blobId didn't change (something else was changed)\n        opts.forceSave = !!opts.forceSave;\n        opts.forceFrontendReload = !!opts.forceFrontendReload;\n\n        if (content === null || content === undefined) {\n            throw new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n        }\n\n        if (this.hasStringContent()) {\n            content = content.toString();\n        } else {\n            content = Buffer.isBuffer(content) ? content : Buffer.from(content);\n        }\n\n        const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n        if (this.isProtected) {\n            if (protectedSessionService.isProtectedSessionAvailable()) {\n                content = protectedSessionService.encrypt(content);\n            } else {\n                throw new Error(`Cannot update content of blob since protected session is not available.`);\n            }\n        }\n\n        sql.transactional(() => {\n            const newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n            const oldBlobId = this.blobId;\n\n            if (newBlobId !== oldBlobId || opts.forceSave) {\n                this.blobId = newBlobId;\n                this.save();\n\n                if (newBlobId !== oldBlobId) {\n                    this.#deleteBlobIfNotUsed(oldBlobId);\n                }\n            }\n        });\n    }", "CodeBleu_score": 97.84125828675243}, {"code": "_setContent(content, opts = {}){\n\t// client code asks to save entity even if blobId didn't change (something else was changed)\n        opts.forceSave = !!opts.forceSave;\n        opts.forceFrontendReload = !!opts.forceFrontendReload;\n\n        if (content === null || content === undefined) {\n            throw new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n        }\n\n        if (this.hasStringContent()) {\n            content = content.toString();\n        } else {\n            content = Buffer.isBuffer(content) ? content : Buffer.from(content);\n        }\n\n        const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n        if (this.isProtected) {\n            if (protectedSessionService.isProtectedSessionAvailable()) {\n                content = protectedSessionService.encrypt(content);\n            } else {\n                throw new Error(`Cannot update content of blob since protected session is not available.`);\n            }\n        }\n\n        sql.transactional(() => {\n            const newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n            const oldBlobId = this.blobId;\n\n            if (newBlobId !== oldBlobId || opts.forceSave) {\n                this.blobId = newBlobId;\n                this.save();\n\n                if (newBlobId !== oldBlobId) {\n                    this.#deleteBlobIfNotUsed(oldBlobId);\n                }\n            }\n        });\n    }", "CodeBleu_score": 97.84125828675243}, {"code": "_setContent(content, opts = {}){\n\t// client code asks to save entity even if blobId didn't change (something else was changed)\n        opts.forceSave = !!opts.forceSave;\n        opts.forceFrontendReload = !!opts.forceFrontendReload;\n\n        if (content === null || content === undefined) {\n            throw new Error(`Cannot set null content to ${this.constructor.primaryKeyName} '${this[this.constructor.primaryKeyName]}'`);\n        }\n\n        if (this.hasStringContent()) {\n            content = content.toString();\n        } else {\n            content = Buffer.isBuffer(content) ? content : Buffer.from(content);\n        }\n\n        const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n        if (this.isProtected) {\n            if (protectedSessionService.isProtectedSessionAvailable()) {\n                content = protectedSessionService.encrypt(content);\n            } else {\n                throw new Error(`Cannot update content of blob since protected session is not available.`);\n            }\n        }\n\n        sql.transactional(() => {\n            const newBlobId = this.#saveBlob(content, unencryptedContentForHashCalculation, opts);\n            const oldBlobId = this.blobId;\n\n            if (newBlobId !== oldBlobId || opts.forceSave) {\n                this.blobId = newBlobId;\n                this.save();\n\n                if (newBlobId !== oldBlobId) {\n                    this.#deleteBlobIfNotUsed(oldBlobId);\n                }\n            }\n        });\n    }", "CodeBleu_score": 97.84125828675243}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\tconst inboxNote = await dateNoteService.getInboxNote();\n  const newNote = await server.post(\n    \"/api/notes\",\n    {\n      content: \"\",\n      type: \"NOTE\",\n      protection: inboxNote.protection,\n      parentId: inboxNote.id,\n    },\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  await ws.waitForMaxKnownEntityChangeId(newNote.changeId);\n  appContext.tabManager.openTabWithNoteWithHoisting(newNote.id);\n  appContext.triggerEvent(\"focusAndSelectTitle\", {\n    noteId: newNote.id,\n  });\n}", "CodeBleu_score": 54.89412851399757}, {"code": "async createNoteIntoInboxCommand(){\n\tconst inboxNote = await dateNoteService.getInboxNote();\n    const { id: parentId } = inboxNote;\n    const { id: entityChangeId } = await server.post(`/api/notes`, {\n        parentId,\n        content: '',\n        type: 'TEXT_NOTE',\n        isProtected: false\n    });\n    await ws.waitForMaxKnownEntityChangeId(entityChangeId);\n    const newNote = await noteRepository.getNoteById(entityChangeId);\n    appContext.tabManager.openTabWithNoteWithHoisting(newNote);\n    appContext.triggerEvent('focusAndSelectTitle', { noteId: entityChangeId });\n}", "CodeBleu_score": 54.02242186985321}, {"code": "async createNoteIntoInboxCommand(){\n\tconst inboxNote = await dateNoteService.getInboxNote();\n    const newNote = await server.post(\n        `/api/notes/${inboxNote.id}/children`,\n        {\n            content: \"New note\",\n            type: \"NOTE\",\n            isProtected: protectedSessionHolder.isProtectedSessionAvailable(),\n        }\n    );\n    await ws.waitForMaxKnownEntityChangeId(newNote.entityChangeId);\n    appContext.tabManager.openTabWithNoteWithHoisting(newNote);\n    appContext.triggerEvent(\"focusAndSelectTitle\", newNote);\n}", "CodeBleu_score": 56.86595775130964}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\tconst note = await froca.getNote({noteId})\n    const activeNoteContext = await appContext.tabManager.getActiveContext()\n    if (note.type === 'search') {\n      activeNoteContext.unhoist()\n    } else {\n      activeNoteContext.setHoistedNoteId(note.id)\n    }\n  }", "CodeBleu_score": 46.91650067396446}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\tconst note = await froca.getNote(noteId);\n    const activeNoteContext = appContext.tabManager.getActiveContext();\n\n    if (note.isHoisted) {\n      activeNoteContext.unhoist();\n    } else {\n      activeNoteContext.setHoistedNoteId(note.id);\n    }\n  }", "CodeBleu_score": 63.78511188130964}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\tconst note = await froca.getNote(noteId)\n    const activeNoteContext = appContext.tabManager.getActiveContext()\n    if (note.hoisted) {\n        activeNoteContext.unhoist()\n    } else {\n        activeNoteContext.setHoistedNoteId(note.id)\n    }\n}", "CodeBleu_score": 56.340040527310556}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\tconst hash = this.calculateHash({notePath, hoistedNoteId, viewScope});\n  if (utils.isElectron()) {\n    ipcRenderer.send('open-in-window', hash);\n  } else {\n    const url = new URL(window.location.href);\n    url.hash = hash;\n    window.open(url, '_blank', 'width=1000,height=600');\n  }\n}", "CodeBleu_score": 38.9372492651862}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\tconst hash = linkService.calculateHash({notePath, hoistedNoteId, viewScope});\n    if (utils.isElectron) {\n        ipcRenderer.send(\"open-in-window\", {hash});\n    } else {\n        const url = utils.dynamicRequire(\"../utils/url\").default;\n        const {width, height} = utils.dynamicRequire(\"../utils/window-size\").default;\n        window.open(`${url.origin}${url.pathname}#${hash}`, \"\", `width=${width},height=${height}`);\n    }\n}", "CodeBleu_score": 47.558998297800684}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\tconst hash = linkService.calculateHash({notePath, hoistedNoteId, viewScope});\n    if (utils.isElectron) {\n        ipcRenderer.send('open-note-in-window', {hash});\n    } else {\n        const url = utils.dynamicRequire('url').resolve(window.location.href, `#${hash}`);\n        const width = 1000;\n        const height = 700;\n        window.open(url, '_blank', `width=${width},height=${height}`);\n    }\n}", "CodeBleu_score": 55.55294295432368}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\tconst activeContext = appContext.tabManager.getActiveContext();\n  if (!activeContext) {\n    return;\n  }\n  const { ntxId, note } = activeContext;\n  if (note.type !== 'code') {\n    return;\n  }\n\n  const mime = note.mime;\n  if (mime.endsWith('-frontend')) {\n    await bundleService.getAndExecuteBundle(ntxId, mime, note.title);\n  } else if (mime.endsWith('-backend')) {\n    server.post(`/api/notes/${ntxId}/execute`, {\n      mime,\n    });\n  } else if (mime.endsWith('-sqlite')) {\n    const response = await server.post(`/api/notes/${ntxId}/execute`, {\n      mime,\n    });\n    if (response.error) {\n      toastService.showError(response.error);\n    } else {\n      appContext.triggerEvent('note.executed', {\n        ntxId,\n        result: response.result,\n      });\n    }\n  } else {\n    toastService.showMessage('Not a valid command');\n  }\n}", "CodeBleu_score": 46.09445620348114}, {"code": "async runActiveNoteCommand(){\n\tconst context = appContext.tabManager.getActiveContext();\n  if (context.note.mime.endsWith('code')) {\n    const { ntxId, note } = context;\n    if (note.mime === 'application/x-ejs') {\n      bundleService.getAndExecuteBundle(ntxId);\n    } else if (note.mime === 'application/x-sql') {\n      const { query, params } = await toastService.showMessage('Enter the SQL query', '');\n      const { error, result } = await server.post('/api/note/execute-sql', {\n        ntxId,\n        query,\n        params,\n      });\n      if (error) {\n        toastService.showError(error);\n      } else {\n        appContext.triggerEvent('sql-executed', { result });\n      }\n    } else {\n      server.post('/api/note/execute', { ntxId });\n    }\n    toastService.showMessage(`Executing ${note.mime} note`);\n  }\n}", "CodeBleu_score": 45.118972994065174}, {"code": "async runActiveNoteCommand(){\n\tconst activeContext = appContext.tabManager.getActiveContext();\n  const { ntxId, note } = activeContext;\n  if (!note.mime.endsWith('code')) {\n    return;\n  }\n  let response;\n  if (note.mime.startsWith('application/x-frontend')) {\n    response = await bundleService.getAndExecuteBundle(note.mime, note.content);\n  } else if (note.mime.startsWith('application/x-backend')) {\n    response = await server.post(`/api/notes/${ntxId}/execute`);\n  } else if (note.mime.startsWith('application/x-sqlite')) {\n    try {\n      response = await server.post(`/api/notes/${ntxId}/execute`, {\n        query: note.content,\n      });\n      appContext.triggerEvent('note-executed', {\n        ntxId,\n        results: response.data,\n      });\n    } catch (err) {\n      toastService.showError(err);\n    }\n  }\n  if (response) {\n    toastService.showMessage(`${note.name} executed`);\n  }\n}", "CodeBleu_score": 41.19178518364387}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t// If read-only mode is temporarily disabled, return false\n        if (this.readOnlyModeDisabled) {\n            return false;\n        }\n\n        // If the note does not exist or is not of type 'text' or 'code', return false\n        if (!this.noteId || !(this.noteId in froca.notes) || (froca.notes[this.noteId].type !== 'text' && froca.notes[this.noteId].type !== 'code')) {\n            return false;\n        }\n\n        // If the note has a 'readOnly' label, return true\n        if (froca.notes[this.noteId].isLabelTruthy('readOnly')) {\n            return true;\n        }\n\n        // If the view mode is 'source', return true\n        if (this.viewMode === 'source') {\n            return true;\n        }\n\n        // Retrieve the note's blob\n        const blob = await froca.notes[this.noteId].getBlob();\n\n        // If the content length exceeds the limit and the 'autoReadOnlyDisabled' label is not set, return true; otherwise, return false\n        return (blob.size > (froca.notes[this.noteId].type === 'text' ? froca.textReadOnlySizeLimit : froca.codeReadOnlySizeLimit) && !froca.notes[this.noteId].isLabelTruthy('autoReadOnlyDisabled'));\n    }", "CodeBleu_score": 49.92641576385421}, {"code": "async isReadOnly(){\n\tif (this.readOnlyMode === false) {\n            return false;\n        }\n\n        if (!this.noteId || !(this.noteId in froca.notes)) {\n            return true;\n        }\n\n        const note = froca.notes[this.noteId];\n        if (note.type !== 'text' && note.type !== 'code') {\n            return true;\n        }\n\n        if (this.viewMode === 'source') {\n            return true;\n        }\n\n        const blob = await note.getBlob();\n        const sizeLimit = note.type === 'text' ? 1000000 : 10000000;\n        const contentLength = blob.size;\n        if (contentLength > sizeLimit && !note.isLabelTruthy('autoReadOnlyDisabled')) {\n            return true;\n        }\n\n        return note.isLabelTruthy('readOnly');\n    }", "CodeBleu_score": 53.72251230861522}, {"code": "async isReadOnly(){\n\tif (this.isReadOnlyModeDisabled) {\n            return false;\n        }\n\n        if (!this.noteId || !(this.noteId in froca.notes)) {\n            return true;\n        }\n\n        const note = froca.notes[this.noteId];\n        if (note.type !== 'text' && note.type !== 'code') {\n            return true;\n        }\n\n        if (this.viewMode === 'source' || note.isLabelTruthy('readOnly')) {\n            return true;\n        }\n\n        const blob = note.getBlob();\n        if (blob.size > froca.noteSizeLimits[note.type]) {\n            if (note.isLabelTruthy('autoReadOnlyDisabled')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }", "CodeBleu_score": 48.38904505254397}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\tlet noteContext = this.getActiveContext();\n        if (!noteContext) {\n            const existingNoteContext = this.children.find((child) => child.hoistedNoteId === hoistedNoteId);\n            if (existingNoteContext) {\n                existingNoteContext.setHoistedNoteId(hoistedNoteId);\n                noteContext = existingNoteContext;\n            } else {\n                noteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n                this.child(noteContext);\n                this.triggerEvent('newNoteContextCreated', noteContext);\n            }\n        }\n        return noteContext;\n    }", "CodeBleu_score": 53.31068502360489}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\tconst existingNoteContext = this.getActiveContext || this.children.find(child => child.hoistedNoteId === hoistedNoteId);\n        if (existingNoteContext) {\n            existingNoteContext.setHoistedNoteId(hoistedNoteId);\n            return existingNoteContext;\n        }\n        const newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n        this.children.push(newNoteContext);\n        this.triggerEvent('newNoteContextCreated', newNoteContext);\n        return newNoteContext;\n    }", "CodeBleu_score": 48.94251716700864}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\tconst activeContext = this.getActiveContext();\n        if (activeContext && activeContext.hoistedNoteId === hoistedNoteId) {\n            return activeContext;\n        }\n        const existingNoteContext = this.children.find(\n            (noteContext) => noteContext.hoistedNoteId === hoistedNoteId\n        );\n        if (existingNoteContext) {\n            existingNoteContext.setHoistedNoteId(hoistedNoteId);\n            return existingNoteContext;\n        }\n        const noteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n        this.children.push(noteContext);\n        this.triggerEvent('newNoteContextCreated', noteContext);\n        return noteContext;\n    }", "CodeBleu_score": 52.856482204705436}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\tconst branchIdPos = {};\n\n        for (const branchId of Object.values(this.childToBranch)) {\n            branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n        }\n\n        this.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n    }", "CodeBleu_score": 98.37616783464577}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\n\n        for (const branchId of Object.values(this.childToBranch)) {\n            branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n        }\n\n        this.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n    }", "CodeBleu_score": 98.37616783464577}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\n\n        for (const branchId of Object.values(this.childToBranch)) {\n            branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n        }\n\n        this.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n    }", "CodeBleu_score": 98.37616783464577}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (!newParentBranch) {\n        toastService.showError('Invalid destination.');\n        return;\n    }\n\n    const branchesToMove = filterRootNote(branchIdsToMove);\n\n    for (const branchId of branchesToMove) {\n        const branchToMove = froca.getBranch(branchId);\n\n        if (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()\n            || branchToMove.parentNoteType === 'search') {\n            continue;\n        }\n\n        const parentNote = branchToMove.getParentNote();\n\n        if (parentNote) {\n            parentNote.removeChild(branchToMove);\n        }\n\n        branchToMove.setParentNote(newParentBranch);\n\n        const moveBranchResponse = await server.put(`/api/branches/${branchToMove.id}`, {\n            parentNoteId: newParentBranch.noteId,\n        });\n\n        if (!moveBranchResponse.success) {\n            toastService.showError(moveBranchResponse.message);\n            break;\n        }\n    }\n}", "CodeBleu_score": 57.91015763245837}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (!newParentBranch) {\n        toastService.showError('Invalid move destination.');\n        return;\n    }\n\n    const branchesToMove = filterRootNote(branchIdsToMove);\n\n    for (const branchId of branchesToMove) {\n        const branchToMove = froca.getBranch(branchId);\n        const branchToMoveParentNote = branchToMove.getParentNote();\n\n        if (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()\n            || branchToMoveParentNote.type === 'search') {\n            continue;\n        }\n\n        const response = await server.put(`/api/notes/${branchToMove.noteId}`, {\n            parentId: newParentBranch.noteId\n        });\n\n        if (response.status !== 200) {\n            toastService.showError('Failed to move notes.');\n            return;\n        }\n    }\n}", "CodeBleu_score": 59.61921989507615}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (!newParentBranch) {\n        toastService.showError('Invalid move destination');\n        return;\n    }\n\n    const hoistedNoteId = hoistedNoteService.getHoistedNoteId();\n    const filteredBranchIds = filterRootNote(branchIdsToMove);\n\n    for (const branchId of filteredBranchIds) {\n        const branchToMove = froca.getBranch(branchId);\n\n        if (branchToMove.noteId === hoistedNoteId) {\n            continue;\n        }\n\n        if (branchToMove.getParentNote().type === 'search') {\n            continue;\n        }\n\n        const newParentNoteId = newParentBranch.noteId;\n\n        try {\n            await server.put(`/api/notes/${branchToMove.noteId}`, {\n                parentNoteId: newParentNoteId,\n            });\n        } catch (err) {\n            toastService.showError(err);\n            return;\n        }\n    }\n}", "CodeBleu_score": 56.29680478970462}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\tlet activeContext = await appContext.tabManager.getActiveContext();\n    let parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n    if (parentNotePathArr.length > 0) {\n        activeContext.setNote(parentNotePathArr.join('/'));\n    }\n}", "CodeBleu_score": 73.74749927164437}, {"code": "async function activateParentNotePath(){\n\tlet activeContext = await appContext.tabManager.getActiveContext();\n    let parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n    if (parentNotePathArr.length > 0) {\n        await activeContext.setNote(parentNotePathArr.join('/'));\n    }\n}", "CodeBleu_score": 70.97390332461597}, {"code": "async function activateParentNotePath(){\n\tlet activeContext = await appContext.tabManager.getActiveContext();\n  let parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n  if (parentNotePathArr.length > 0) {\n    activeContext.setNote(parentNotePathArr.join(\"/\"));\n  }\n}", "CodeBleu_score": 76.66883662698386}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\tconst links = [];\n    for (const branchId of branchIds) {\n        const link = await froca.getBranchLink(branchId);\n        links.push(link);\n    }\n    const html = links.join('\n');\n    if (utils.isElectron()) {\n        const clipboard = require('electron').clipboard;\n        clipboard.writeHTML(html);\n    } else {\n        clipboard.writeHTML(html);\n    }\n    toastService.showMessage(`Copied ${branchIds.length} ${branchIds.length === 1 ? 'branch' : 'branches'} to clipboard`);\n}", "CodeBleu_score": 46.72681314331929}, {"code": "async function copy(branchIds){\n\tlet links = [];\n    for (let branchId of branchIds) {\n        links.push(froca.getBranchLink(branchId));\n    }\n    let html = links.join('');\n    if (utils.isElectron()) {\n        clipboard.writeHTML(html);\n    } else {\n        document.querySelector('#clipboard').innerHTML = html;\n        document.querySelector('#clipboard').select();\n        document.execCommand('copy');\n    }\n    toastService.showMessage('Branches copied to clipboard.');\n}", "CodeBleu_score": 32.8548553828243}, {"code": "async function copy(branchIds){\n\tconst links = [];\n  for (const branchId of branchIds) {\n    const link = await linkService.createLink(branchId);\n    links.push(link);\n  }\n  const html = links.join('<br>');\n  if (utils.isElectron()) {\n    clipboard.writeHTML(html);\n  } else {\n    const text = links.join('\n');\n    clipboard.writeText(text);\n  }\n  toastService.showMessage(`Copied ${links.length} branches to clipboard.`);\n}", "CodeBleu_score": 37.9644253686182}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\tif (!Array.isArray(data)) {\n    throw new Error('The data is not an array');\n  }\n\n  const dataFlat: IHostsBasicData = [];\n  data.forEach((item: IHostsBasicDataItem) => {\n    if (item.type === 'folder') {\n      item.children = Array.isArray(item.children) ? item.children : [];\n      item.content = '';\n    } else if (item.type === 'group') {\n      item.include = Array.isArray(item.include) ? item.include : [];\n      item.content = '';\n    } else {\n      item.content = item.content || '';\n    }\n    dataFlat.push(item);\n  });\n\n  return dataFlat;\n\n}", "CodeBleu_score": 42.91599703521668}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\tif (!Array.isArray(data)) {\n    throw new Error('data must be an array');\n  }\n  const newData: IHostsBasicData = [];\n  for (const item of data) {\n    if (item.type === 'folder') {\n      if (!Array.isArray(item.children)) {\n        item.children = [];\n      }\n      item.content = '';\n    } else if (item.type === 'group') {\n      if (!Array.isArray(item.include)) {\n        item.include = [];\n      }\n      item.content = '';\n    } else if (item.type === 'url') {\n      item.content = item.content.trim();\n    }\n    newData.push(item);\n  }\n  return newData;\n}", "CodeBleu_score": 44.6878911196099}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\tconst result = [];\n  for (const item of data) {\n    if (item.type === 'folder') {\n      item.children = item.children || [];\n      item.content = '';\n    } else if (item.type === 'group') {\n      item.include = item.include || [];\n      item.content = '';\n    } else {\n      item.content = item.content || '';\n    }\n    result.push(item);\n  }\n  return result;\n}", "CodeBleu_score": 39.798772286538316}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\tconst historyLimit = await configGet('historyLimit')\n    if (isNaN(historyLimit) || historyLimit <= 0) return\n\n    const history = await swhdb.collection.history.all\n    if (history.length >= historyLimit) {\n        await deleteHistory(historyLimit - 1)\n    }\n\n    await swhdb.collection.history.insert({\n        id: uuid4(),\n        content,\n        timestamp: new Date().getTime()\n    })\n}", "CodeBleu_score": 40.159140359246834}, {"code": "const addHistory = async (content: string) =>{\n\tconst id = uuid4()\n  const timestamp = new Date().getTime()\n  const limit = await configGet('historyLimit')\n  if (isNaN(limit) || limit <= 0) return\n  await swhdb.collection.history.insert({ id, content, timestamp })\n  const history = await swhdb.collection.history.all\n  if (history.length > limit) {\n    const sorted = history.sort((a, b) => a.timestamp - b.timestamp)\n    const toDelete = sorted.slice(0, sorted.length - limit)\n    await deleteHistory(toDelete.map(item => item.id))\n  }\n}", "CodeBleu_score": 39.48443731587811}, {"code": "const addHistory = async (content: string) =>{\n\tconst historyLimit = await configGet(\"historyLimit\")\n  if (!historyLimit || historyLimit <= 0) return\n\n  const id = uuid4()\n  const timestamp = new Date().getTime()\n  const historyEntry = { id, content, timestamp }\n\n  await swhdb.collection.history.insert(historyEntry)\n\n  const allHistory = await swhdb.collection.history.all()\n  if (allHistory.length > historyLimit) {\n    const sortedHistory = allHistory.sort((a, b) => b.timestamp - a.timestamp)\n    const historyToDelete = sortedHistory.slice(historyLimit)\n    await deleteHistory(historyToDelete)\n  }\n}", "CodeBleu_score": 38.325313377344216}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\tconst dataPath = path.join(getDataFolder(), 'hosts-basic-data.json')\n  const defaultData: IHostsBasicData = {\n    lastUpdate: null,\n    hosts: [],\n  }\n  try {\n    if (fs.existsSync(dataPath)) {\n      const dataRaw = await fs.promises.readFile(dataPath, 'utf8')\n      const data = JSON.parse(dataRaw)\n      return {\n        lastUpdate: data.lastUpdate,\n        hosts: cleanHostsList(data.hosts),\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n  return defaultData\n}", "CodeBleu_score": 49.15571508516574}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\tconst filePath: string = path.join(getDataFolder(), 'hosts.json');\n  const defaultData: IHostsBasicData = {\n    hosts: [],\n    lastUpdate: 0,\n  };\n\n  if (!fs.existsSync(filePath)) {\n    return defaultData;\n  }\n\n  try {\n    const fileContent: string = await fs.promises.readFile(filePath, {\n      encoding: 'utf8',\n    });\n    const data: IHostsBasicData = JSON.parse(fileContent);\n    data.hosts = cleanHostsList(data.hosts);\n    return data;\n  } catch (err) {\n    console.error('Error parsing old data:', err);\n    return defaultData;\n  }\n}", "CodeBleu_score": 46.718246690347264}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\tconst filePath: string = path.join(getDataFolder(), \"data.json\");\n  const defaultData: IHostsBasicData = {\n    hosts: [],\n    lastUpdate: \"\",\n  };\n  try {\n    if (fs.existsSync(filePath)) {\n      const fileContent = await fs.promises.readFile(filePath, \"utf8\");\n      const data = JSON.parse(fileContent);\n      return cleanHostsList(data);\n    }\n  } catch (err) {\n    console.error(err);\n    return defaultData;\n  }\n  return defaultData;\n}", "CodeBleu_score": 50.817018141332404}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\tif (!swhdb) {\n    data_dir = await localdb.dict.local.get(\"data_dir\");\n    db_dir = path.join(data_dir, \"swhdb\");\n    console.log(\"db_dir:\", db_dir);\n    swhdb = new PotDb(db_dir);\n  }\n  return swhdb;\n}", "CodeBleu_score": 34.978555837063155}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\tif (swhdb) return swhdb;\n  const data_dir = await localdb.dict.local.get(\"data_dir\");\n  if (!data_dir) throw new Error(\"data_dir not set\");\n  const db_dir = path.join(data_dir, \"swhdb\");\n  console.log(\"db_dir:\", db_dir);\n  swhdb = new PotDb(db_dir);\n  return swhdb;\n}", "CodeBleu_score": 46.30631185440204}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\tif (swhdb) {\n        return swhdb;\n    }\n    const data_dir = await localdb.dict.local.get('data_dir');\n    if (!data_dir) {\n        throw new Error('data_dir not set');\n    }\n    const db_dir = path.join(data_dir, 'swhdb');\n    console.log('db_dir:', db_dir);\n    swhdb = new PotDb(db_dir);\n    return swhdb;\n}", "CodeBleu_score": 46.4554040695591}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\tconst refreshInterval = hosts.refreshInterval\n  const lastRefresh = hosts.lastRefresh\n  const url = hosts.url\n  const validUrl = url.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g)\n  if (refreshInterval === undefined || validUrl === null) {\n    return false\n  }\n  if (lastRefresh === undefined) {\n    return true\n  }\n  const elapsed = h - lastRefresh\n  return elapsed > refreshInterval\n}", "CodeBleu_score": 30.08984021700155}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\tif (!hosts.refreshInterval || !hosts.lastRefresh) {\n    return false;\n  }\n  const timeElapsed = new Date().getTime() - hosts.lastRefresh;\n  return timeElapsed > hosts.refreshInterval;\n}", "CodeBleu_score": 23.696115526695337}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\tconst { refreshInterval, lastRefresh } = hosts\n  if (!refreshInterval || !isFinite(refreshInterval) || !url.match(refreshInterval)) {\n    return false\n  }\n  if (!lastRefresh) {\n    return true\n  }\n  const elapsed = h - lastRefresh\n  return elapsed > refreshInterval\n}", "CodeBleu_score": 34.45195221103094}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\treturn new Promise((resolve, reject) => {\n    const callbackId = uuidv4();\n    ipcRenderer.once(callbackId, (event, data) => {\n      if (data.error) {\n        reject(data.error);\n      } else {\n        resolve(data.result);\n      }\n    });\n    ipcRenderer.send(action, callbackId, ...params);\n  });\n}", "CodeBleu_score": 43.102845685655346}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\treturn new Promise((resolve, reject) => {\n        const callbackId = uuid();\n        ipcRenderer.on(callbackId, (event, data) => {\n            ipcRenderer.removeAllListeners(callbackId);\n            if (data.error) {\n                reject(data.error);\n            } else {\n                resolve(data.result);\n            }\n        });\n        ipcRenderer.send(action, callbackId, ...params);\n    });\n}", "CodeBleu_score": 43.38473472177462}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\tconst id = Math.random().toString(36).substr(2, 9);\n  ipcRenderer.send(action, id, ...params);\n  return new Promise((resolve, reject) => {\n    ipcRenderer.once(id, (event, err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}", "CodeBleu_score": 52.551987127814}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t// Wait for the editor to be available\n    while (!cm_editor) {\n        await new Promise(r => setTimeout(r, 50));\n    }\n    // Get the content\n    let content = await actions.getHostsContent(hosts_id);\n    // Set the content\n    cm_editor.setValue(content);\n    // Clear the editor's history\n    if (is_new) {\n        cm_editor.clearHistory();\n    }\n}", "CodeBleu_score": 45.016993573362974}, {"code": "const loadContent = async (is_new = false) =>{\n\tif (!cm_editor) {\n        setTimeout(loadContent, 100);\n        return;\n    }\n    if (is_new) {\n        cm_editor.setValue('');\n        cm_editor.clearHistory();\n    }\n    let content = '';\n    if (hosts_id === 'system') {\n        content = await actions.getSystemHosts();\n    } else {\n        content = await actions.getHostsContent(hosts_id);\n    }\n    setContent(content);\n}", "CodeBleu_score": 56.71533697650018}, {"code": "const loadContent = async (is_new = false) =>{\n\t// Wait for the editor to be available\n    while (!cm_editor) {\n        await new Promise(r => setTimeout(r, 100));\n    }\n    // Retrieve the content\n    let content;\n    if (hosts_id == \"system\") {\n        content = await actions.getSystemHosts();\n    } else {\n        content = await actions.getHostsContent(hosts_id);\n    }\n    // Set the content\n    cm_editor.setValue(content);\n    // Update the editor's value\n    cm_editor.refresh();\n    // Clear the editor's history\n    if (is_new) {\n        cm_editor.clearHistory();\n    }\n}", "CodeBleu_score": 49.8234714301253}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\tif (readOnly || !cm_editor) return;\n  const { text } = cm_editor.lineInfo(n);\n  if (/^\\s*$/.test(text)) return;\n  const line = cm_editor.getDoc().getLine(n);\n  const lineNo = n + 1;\n  const lineNoText = lineNo.toString();\n  const lineNoLength = lineNoText.length;\n  const hasComment = /^#/.test(line);\n  const padding = ' '.repeat(lineNoLength + 2);\n  const newLine = hasComment\n    ? line.replace(/^#\\s?/, '')\n    : `${padding}# ${line}`;\n  cm_editor\n    .getDoc()\n    .replaceRange(newLine, { line: n, ch: 0 }, { line: n, ch: line.length });\n}", "CodeBleu_score": 48.15073357787632}, {"code": "const onGutterClick = (n: number) =>{\n\tif (editor.getOption('readOnly') || !editor) {\n    return;\n  }\n\n  const info = editor.lineInfo(n);\n  if (!info || /^\\s*$/.test(info.text)) {\n    return;\n  }\n\n  const hasComment = /^#/.test(info.text);\n  const text = hasComment ? info.text.slice(1) : `#${info.text}`;\n\n  editor.getDoc().replaceRange(text, { line: n, ch: 0 }, { line: n, ch: info.text.length + 1 });\n}", "CodeBleu_score": 40.40661846782316}, {"code": "const onGutterClick = (n: number) =>{\n\t// Ignore clicks in read-only mode\n  if (cm_editor.getOption('readOnly')) {\n    return\n  }\n\n  // Ignore clicks if the editor instance is unavailable\n  if (!cm_editor) {\n    return\n  }\n\n  // Get the clicked line's information\n  const line = cm_editor.lineInfo(n)\n\n  // Ignore empty lines and whitespace\n  if (/^\\s*$/.test(line.text)) {\n    return\n  }\n\n  // Toggle a comment on the line\n  if (/^#/.test(line.text)) {\n    cm_editor\n      .getDoc()\n      .replaceRange(\n        line.text.replace(/^#/, ''),\n        {\n          line: n,\n          ch: 0,\n        },\n        {\n          line: n,\n          ch: 1,\n        },\n      )\n  } else {\n    cm_editor\n      .getDoc()\n      .replaceRange(\n        `#${line.text}`,\n        {\n          line: n,\n          ch: 0,\n        },\n        {\n          line: n,\n          ch: 0,\n        },\n      )\n  }\n}", "CodeBleu_score": 42.40351382218515}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\tbool ok = true;\n    m_foundOptions.clear();\n    m_foundArgs.clear();\n    QStringList::const_iterator actualIt = args.cbegin();\n    Node* actualNode = &m_rootNode;\n    // check if version option is present\n    if (m_withVersion) {\n        if (actualIt != args.cend() && versionOption.dashedNames().contains(*actualIt)) {\n            printVersion();\n            if (actualIt + 1 == args.cend()) {\n                return true;\n            } else {\n                err << \"Invalid arguments after the version option.\";\n                return false;\n            }\n        }\n    }\n    // check if help option is present\n    if (m_withHelp) {\n        if (actualIt != args.cend() && helpOption.dashedNames().contains(*actualIt)) {\n            printHelp(args, actualNode);\n            return true;\n        }\n    }\n    // process arguments\n    while (actualIt != args.cend()) {\n        QString arg = *actualIt;\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n        }\n        if (!ok) {\n            err << \"Invalid arguments.\";\n            break;\n        }\n        ++actualIt;\n    }\n    if (!ok) {\n        if (m_generalErrorMessage.isEmpty()) {\n            err << \"Invalid arguments.\";\n        } else {\n            err << m_generalErrorMessage;\n        }\n    }\n    return ok;\n}", "CodeBleu_score": 59.18043552413565}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t// clear previous\n    m_foundArgs.clear();\n    m_foundOptions.clear();\n    // initialize variables\n    bool ok = true;\n    bool helpFound = false;\n    Node* actualNode = &m_rootNode;\n    QStringList::const_iterator actualIt = args.cbegin();\n    // check version\n    if (m_withVersion) {\n        if (args.length() == 1 && args.at(0) == versionOption.dashedNames().at(0)) {\n            printVersion();\n            return true;\n        }\n    }\n    // check help\n    if (m_withHelp) {\n        if (args.contains(helpOption.dashedNames().at(0))) {\n            helpFound = true;\n        }\n    }\n    // process args\n    while (ok && actualIt != args.cend()) {\n        QString arg = *actualIt;\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n        }\n        if (!ok) {\n            break;\n        }\n        ++actualIt;\n    }\n    // check help\n    if (helpFound) {\n        printHelp(args, actualNode);\n        ok = true;\n    }\n    // check general error\n    if (!ok && !m_generalErrorMessage.isEmpty()) {\n        err << m_generalErrorMessage;\n    }\n    return ok;\n}", "CodeBleu_score": 60.38510239049872}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t// clear previous values\n    m_foundArgs.clear();\n    m_foundOptions.clear();\n    // init variables\n    QStringList::const_iterator actualIt = args.cbegin();\n    Node* actualNode = &root;\n    bool ok = true;\n    // check for version option\n    if (m_withVersion && actualIt != args.cend()) {\n        if (versionOption.dashedNames().contains(*actualIt)) {\n            printVersion();\n            if (actualIt + 1 == args.cend()) {\n                return true;\n            } else {\n                err << \"Invalid arguments after the version option.\";\n                return false;\n            }\n        }\n    }\n    // check for help option\n    if (m_withHelp && actualIt != args.cend()) {\n        if (helpOption.dashedNames().contains(*actualIt)) {\n            if (actualIt + 1 == args.cend()) {\n                m_foundOptions << helpOption;\n                printHelp(args, actualNode);\n                return true;\n            } else {\n                err << \"Invalid arguments after the help option.\";\n                return false;\n            }\n        }\n    }\n    // process arguments\n    while (actualIt != args.cend()) {\n        QString arg = *actualIt;\n        // check for options\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n            if (!ok) {\n                break;\n            }\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n            if (!ok) {\n                break;\n            }\n        }\n        ++actualIt;\n    }\n    // check for errors\n    if (!ok && !err.isEmpty()) {\n        if (m_generalErrorMessage.isEmpty()) {\n            err << QLatin1String(\"An error occurred during parsing.\");\n        } else {\n            err << m_generalErrorMessage;\n        }\n    }\n    return ok;\n}", "CodeBleu_score": 61.95401461252883}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\tauto types = getIterableButtonTypes();\n    for (auto item : m_listButtons) {\n        item->setCheckState(types.contains(static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt())) ? Qt::Checked : Qt::Unchecked);\n    }\n}", "CodeBleu_score": 24.48943840163183}, {"code": "void ButtonListView::updateComponents(){\n\t// get the list of buttons from the configuration\n    QList<CaptureTool::Type> listTypes = ConfigHandler().buttons();\n\n    // get the list of buttons from the button list\n    QList<CaptureTool::Type> listButtons = CaptureToolButton::getIterableButtonTypes();\n\n    // for each button in the button list\n    for (int i = 0; i < listButtons.size(); i++) {\n        // if the button is in the configuration\n        if (listTypes.contains(listButtons.at(i))) {\n            // check the button\n            this->item(i)->setCheckState(Qt::Checked);\n        } else {\n            // uncheck the button\n            this->item(i)->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 56.594037038796664}, {"code": "void ButtonListView::updateComponents(){\n\t// get the list of button types from the config\n    QList<CaptureTool::Type> listTypes = ConfigHandler().buttons();\n\n    // get the list of button types from the iterable list\n    QList<CaptureTool::Type> listButtons = CaptureToolButton::getIterableButtonTypes();\n\n    // for each button type\n    for (int i = 0; i < listButtons.count(); i++) {\n        // get the corresponding button type\n        CaptureTool::Type type = listButtons.at(i);\n        // check if the button type is in the config list\n        if (listTypes.contains(type)) {\n            // if it is, set the item's check state to checked\n            this->item(i)->setCheckState(Qt::Checked);\n        } else {\n            // if it isn't, set the item's check state to unchecked\n            this->item(i)->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 61.02811103150012}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\tQColor color = m_colorPicker->color();\n    if (m_colorList.contains(color)) {\n        return;\n    }\n    if (m_colorList.size() == 17) {\n        QMessageBox::critical(this, tr(\"Error\"), tr(\"Maximum number of presets reached.\"));\n        return;\n    }\n    m_colorList.append(color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 56.61292071308082}, {"code": "void ColorPickerEditor::addPreset(){\n\tQColor color = m_colorPicker->color();\n    if (m_colorList.contains(color)) {\n        return;\n    }\n    if (m_colorList.size() == 17) {\n        QMessageBox::critical(this, tr(\"Error\"), tr(\"Maximum number of presets reached\"));\n        return;\n    }\n    m_colorList.append(color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 56.09658713720267}, {"code": "void ColorPickerEditor::addPreset(){\n\tQColor color = m_colorPicker->currentColor();\n\tif (m_colorList.contains(color)) {\n\t\treturn;\n\t}\n\tif (m_colorList.size() == 17) {\n\t\tQMessageBox::critical(this, tr(\"Maximum number of presets reached\"),\n\t\t\t\ttr(\"The preset color list cannot contain more than 17 colors.\"));\n\t\treturn;\n\t}\n\tm_colorList.append(color);\n\tm_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 50.2777472380307}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\tsetSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout();\n    m_vLayout = new QVBoxLayout();\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    const int spacing = QApplication::fontMetrics().lineSpacing();\n    m_vLayout->setSpacing(spacing);\n    m_hLayout->setSpacing(spacing);\n    initButtons();\n    m_vLayout->addSpacing(spacing);\n    initColorWheel();\n    m_hLayout->addLayout(m_vLayout);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 63.20343165276757}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\tsetSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout(this);\n    m_vLayout = new QVBoxLayout();\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    const int spacing = QApplication::fontMetrics().lineSpacing();\n    m_vLayout->setSpacing(spacing);\n    initButtons();\n    m_vLayout->addSpacing(spacing);\n    initColorWheel();\n    m_hLayout->addLayout(m_vLayout);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 59.59403905753763}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\tsetSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout(this);\n    m_hLayout->setAlignment(Qt::AlignHCenter);\n    m_vLayout = new QVBoxLayout();\n    m_vLayout->setAlignment(Qt::AlignTop);\n    m_vLayout->setSpacing(QApplication::fontMetrics().lineSpacing() * 1.5);\n    initButtons();\n    initColorWheel();\n    m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing() * 2);\n    m_hLayout->addLayout(m_vLayout);\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 58.06839590972119}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QRect selection = req.initialSelection();\n    QPixmap capture = ScreenGrabber().grabEntireDesktop();\n    if (capture.isNull()) {\n        AbstractLogger::error() << QObject::tr(\"Failed to capture the screen\");\n        emit captureFailed();\n        return;\n    }\n\n    if (!selection.isNull()) {\n        capture = capture.copy(selection);\n    }\n\n    exportCapture(capture, selection, req);\n}", "CodeBleu_score": 57.2756359963881}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QPixmap capture;\n    QRect selection;\n    if (req.initialSelection().isNull()) {\n        capture = ScreenGrabber().grabEntireDesktop();\n    } else {\n        capture = ScreenGrabber().grabEntireDesktop(req.initialSelection());\n        selection = req.initialSelection();\n    }\n\n    if (capture.isNull()) {\n        emit captureFailed(tr(\"Failed to grab the entire desktop\"));\n        return;\n    }\n\n    exportCapture(capture, selection, req);\n}", "CodeBleu_score": 52.74977863231067}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QRect selection = req.initialSelection();\n    QPixmap capture = ScreenGrabber().grabEntireDesktop();\n\n    if (!selection.isNull()) {\n        capture = capture.copy(selection);\n    }\n\n    if (!capture.isNull()) {\n        exportCapture(capture, selection, req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 63.308861443858376}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\tif (instance) {\n        instance->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray ba;\n        QBuffer buffer(&ba);\n        buffer.open(QIODevice::WriteOnly);\n        capture.save(&buffer, \"PNG\");\n        m.setArguments({ba});\n        call(m);\n    }\n}", "CodeBleu_score": 60.15102698561252}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\tQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n\n    QByteArray ba;\n    QBuffer buffer(&ba);\n    buffer.open(QIODevice::WriteOnly);\n    capture.save(&buffer, \"PNG\");\n\n    m.setArguments({ba});\n\n    call(m);\n}", "CodeBleu_score": 48.053236999892846}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\tif (instance) {\n        instance->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray ba;\n        QBuffer buffer(&ba);\n        buffer.open(QIODevice::WriteOnly);\n        capture.save(&buffer, \"PNG\");\n        m.setArguments({ba});\n        call(m);\n    }\n}", "CodeBleu_score": 60.15102698561252}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\tif (!notification.isEmpty())\n    AbstractLogger::info(notification);\n\n  clipboardHosted = true;\n  clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 66.51819665078963}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\tif (!notification.isEmpty()) {\n    AbstractLogger::info(notification);\n  }\n\n  clipboard_hosted_ = true;\n  QClipboard* clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 75.77433407990709}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\tif (!notification.isEmpty()) {\n    AbstractLogger::info(notification);\n  }\n\n  clipboardHosted = true;\n  QClipboard* clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text, QClipboard::Clipboard);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 74.70627046832614}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\tQRectF selection = context.request.selection.toRectF();\n    QRectF geometry = selection.adjusted(-2, -2, 2, 2);\n\n    context.request.tasks.clear();\n    context.request.addTask(Task::Capture, geometry);\n\n    if (context.request.selection.isValid()) {\n        QPointF offset = geometry.topLeft();\n        context.request.tasks.append(Task(Task::Pin, selection.translated(-offset)));\n    }\n\n    context.request.addTask(Task::Close);\n}", "CodeBleu_score": 48.15707083571002}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\tauto& request = context.request;\n  auto& geometry = context.selectionGeometry;\n  auto& widget = context.widget;\n  request.addTask(PIN_TASK, geometry.topLeft());\n  geometry.moveTopLeft(widget.offset());\n  request.emit();\n  request.addTask(CLOSE_TASK);\n  request.emit();\n}", "CodeBleu_score": 46.29346702166267}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\tcontext.request.addTask(CaptureTask::Done);\n    if (context.request.tasks.contains(CaptureTask::Pin)) {\n        auto offset = context.widget.mapToScene(context.widget.rect().topLeft());\n        context.request.geometry.moveTopLeft(offset);\n        context.request.addTask(CaptureTask::Pin);\n    }\n    context.request.addTask(CaptureTask::Close);\n}", "CodeBleu_score": 45.5488001516956}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tint count = 0;\n    QStringList dirList = dir.entryList(QStringList(QLatin1String(\"*.desktop\")),\n                                        QDir::Files | QDir::NoDotAndDotDot);\n    int oldCount = m_appList.length();\n    for (int i = 0; i < dirList.length(); i++) {\n        bool ok = true;\n        DesktopAppData appData =\n          parseDesktopFile(dir.absoluteFilePath(dirList.at(i)), ok);\n        if (ok) {\n            m_appList.append(appData);\n            count++;\n        }\n    }\n    return m_appList.length() - oldCount;\n}", "CodeBleu_score": 59.40718126372}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tint oldSize = m_appList.length();\n    QStringList desktopFiles = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"),\n                                             QDir::Files | QDir::NoDotAndDotDot);\n    for (int i = 0; i < desktopFiles.length(); ++i) {\n        bool ok = false;\n        DesktopAppData appData = parseDesktopFile(dir.absoluteFilePath(desktopFiles.at(i)),\n                                                  ok);\n        if (ok) {\n            m_appList.append(appData);\n        }\n    }\n    return m_appList.length() - oldSize;\n}", "CodeBleu_score": 60.726766677586454}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tint oldLength = m_appList.length();\n    QStringList desktopFiles = dir.entryList(QStringList(\"*.desktop\"),\n                                             QDir::Files | QDir::NoDotAndDotDot);\n    for (int i = 0; i < desktopFiles.length(); i++) {\n        bool ok;\n        DesktopAppData app = parseDesktopFile(dir.absoluteFilePath(desktopFiles[i]), ok);\n        if (ok) {\n            m_appList.append(app);\n        }\n    }\n    return m_appList.length() - oldLength;\n}", "CodeBleu_score": 67.6730575966243}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> res;\n  for (const auto& app : qAsConst(apps)) {\n    for (const auto& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n  return res;\n}", "CodeBleu_score": 83.50096680091842}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> res;\n  for (auto& category : categories) {\n    res[category] = QVector<DesktopAppData>();\n  }\n  for (auto& app : apps) {\n    for (auto& category : app.categories) {\n      if (categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n  return res;\n}", "CodeBleu_score": 75.20188481085106}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> res;\n\n  for (const auto& app : m_apps) {\n    for (const auto& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n        break;\n      }\n    }\n  }\n\n  return res;\n}", "CodeBleu_score": 79.78307804571702}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\tauto err = AbstractLogger::error(AbstractLogger::Stderr);\n    auto info = AbstractLogger::info(AbstractLogger::Stdout);\n\n    QString completePath = FileNameHandler().properScreenshotPath(path);\n    QString fileExtension = QFileInfo(completePath).suffix().toLower();\n    if (fileExtension.isEmpty()) {\n        fileExtension = ConfigHandler().saveAsFileExtension();\n        completePath += QString(\".%1\").arg(fileExtension);\n    }\n\n    QFile file(completePath);\n    if (!file.open(QIODevice::WriteOnly)) {\n        err << messagePrefix << \"Unable to open file for writing: \"\n            << file.errorString();\n        return false;\n    }\n\n    bool success = false;\n    if (fileExtension == \"png\") {\n        success = capture.save(&file, \"PNG\");\n    } else if (fileExtension == \"jpg\" || fileExtension == \"jpeg\") {\n        success = capture.save(&file, \"JPG\", ConfigHandler().jpegQuality());\n    } else {\n        err << messagePrefix << \"Unsupported file extension: \" << fileExtension;\n        return false;\n    }\n\n    if (success) {\n        info << messagePrefix << \"Saved screenshot to \" << completePath;\n    } else {\n        err << messagePrefix << \"Unable to save screenshot to \" << completePath\n            << \" : \" << file.errorString();\n    }\n    return success;\n}", "CodeBleu_score": 51.732828366873996}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\tauto saveMessage = QString(\"%1: Saving screenshot to %2...\")\n                           .arg(messagePrefix, path);\n    AbstractLogger::info(saveMessage);\n    auto file = QFile(path);\n    if (file.open(QIODevice::WriteOnly)) {\n        QString extension = QFileInfo(path).suffix().toLower();\n        if (extension == \"jpg\" || extension == \"jpeg\") {\n            capture.save(\n                &file, \"JPG\", ConfigHandler().jpegQuality());\n        } else {\n            capture.save(&file, extension.toLatin1());\n        }\n        file.close();\n        saveMessage = QString(\"%1: Saved screenshot to %2.\")\n                          .arg(messagePrefix, path);\n        AbstractLogger::info(saveMessage);\n        return true;\n    } else {\n        saveMessage = QString(\"%1: Error saving screenshot to %2: %3\")\n                          .arg(messagePrefix, path, file.errorString());\n        AbstractLogger::error(saveMessage);\n        return false;\n    }\n}", "CodeBleu_score": 43.437834689350474}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\tauto saveMessage = messagePrefix;\n    QString completePath = FileNameHandler().properScreenshotPath(path);\n    if (completePath.isEmpty()) {\n        saveMessage += \"Screenshot path is empty, not saving screenshot\";\n        AbstractLogger::info(saveMessage);\n        return false;\n    }\n\n    QFile file(completePath);\n    if (file.exists()) {\n        saveMessage += \"Screenshot path already exists, not saving screenshot\";\n        AbstractLogger::info(saveMessage);\n        return false;\n    }\n\n    auto fileExtension = QFileInfo(completePath).suffix().toLower();\n    if (fileExtension == \"jpeg\" || fileExtension == \"jpg\") {\n        if (!capture.save(file, \"JPG\", ConfigHandler().jpegQuality())) {\n            saveMessage += \"Failed to save screenshot to \" + completePath;\n            AbstractLogger::error(saveMessage, file.errorString());\n            return false;\n        }\n    } else {\n        if (!capture.save(file, fileExtension.toLocal8Bit().constData())) {\n            saveMessage += \"Failed to save screenshot to \" + completePath;\n            AbstractLogger::error(saveMessage, file.errorString());\n            return false;\n        }\n    }\n\n    saveMessage += \"Saved screenshot to \" + completePath;\n    AbstractLogger::info(saveMessage);\n    return true;\n}", "CodeBleu_score": 48.358824104081734}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\tthis->active.clear();\n    for (const std::string &modpack_id : load_order) {\n        if (this->available.count(modpack_id)) {\n            this->active.emplace(modpack_id, this->available.at(modpack_id));\n            log::log(log::log_level::info, \"Activated modpack: \", modpack_id);\n        } else {\n            log::log(log::log_level::warning, \"Modpack not found: \", modpack_id);\n        }\n    }\n}", "CodeBleu_score": 54.54529779966215}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\tthis->active.clear();\n    for (const std::string &id : load_order) {\n        if (this->available.count(id) != 0) {\n            this->active.emplace(id, this->available.at(id));\n            log::log(log::info, \"Activated modpack \\\"\" + id + \"\\\".\");\n        }\n        else {\n            log::log(log::warning, \"Modpack \\\"\" + id + \"\\\" is not available.\");\n        }\n    }\n}", "CodeBleu_score": 48.76916356921819}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\tthis->active.clear();\n    for (const auto &modpack_id : load_order)  {\n        if (this->available.find(modpack_id) == this->available.end())  {\n            log::log(log::error, MOD_ID, \"Modpack with ID \\\"\" + modpack_id + \"\\\" not found!\");\n            continue;\n        }\n        this->active.emplace(modpack_id, this->available.at(modpack_id));\n        log::log(log::info, MOD_ID, \"Activated modpack \\\"\" + this->active.at(modpack_id)->get_name() + \"\\\"\");\n    }\n}", "CodeBleu_score": 56.659967500121944}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\tstd::set<std::string> requested;\n\tfor (std::vector<std::string>::const_iterator i = load_order.begin(); i != load_order.end(); ++i) {\n\t\tif (!available.contains(*i))\n\t\t\tthrow std::runtime_error(\"Modpack \" + *i + \" is not available.\");\n\t\trequested.insert(*i);\n\t}\n\tfor (std::set<std::string>::const_iterator i = requested.begin(); i != requested.end(); ++i) {\n\t\tconst std::set<std::string> &dependencies = available.at(*i).dependencies;\n\t\tfor (std::set<std::string>::const_iterator j = dependencies.begin(); j != dependencies.end(); ++j) {\n\t\t\tif (!requested.contains(*j))\n\t\t\t\tthrow std::runtime_error(\"Modpack \" + *i + \" requires \" + *j + \", which is not in the load order.\");\n\t\t}\n\t\tconst std::set<std::string> &conflicts = available.at(*i).conflicts;\n\t\tfor (std::set<std::string>::const_iterator j = conflicts.begin(); j != conflicts.end(); ++j) {\n\t\t\tif (requested.contains(*j))\n\t\t\t\tthrow std::runtime_error(\"Modpack \" + *i + \" conflicts with \" + *j + \", which is in the load order.\");\n\t\t}\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 46.66445513018112}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\tstd::set<std::string> requested;\n    for (const std::string &modpack : load_order) {\n        if (!this->available.contains(modpack)) {\n            throw std::runtime_error(\"Modpack '\" + modpack + \"' is not available.\");\n        }\n        requested.insert(modpack);\n        for (const std::string &dependency : this->available.at(modpack)->dependencies) {\n            if (!requested.contains(dependency)) {\n                throw std::runtime_error(\"Modpack '\" + modpack + \"' requires '\" + dependency + \"'.\");\n            }\n        }\n        for (const std::string &conflict : this->available.at(modpack)->conflicts) {\n            if (requested.contains(conflict)) {\n                throw std::runtime_error(\"Modpack '\" + modpack + \"' conflicts with '\" + conflict + \"'.\");\n            }\n        }\n    }\n    this->load_order = load_order;\n}", "CodeBleu_score": 54.16356202112765}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\tstd::set<std::string> requested;\n\tfor (std::vector<std::string>::const_iterator i = load_order.begin(); i != load_order.end(); ++i) {\n\t\tif (this->available.contains(*i)) {\n\t\t\trequested.insert(*i);\n\t\t} else {\n\t\t\tthrow std::runtime_error(\"Modpack \" + *i + \" is not available.\");\n\t\t}\n\t}\n\n\tfor (std::set<std::string>::iterator i = requested.begin(); i != requested.end(); ++i) {\n\t\tstd::string modpack = *i;\n\t\tstd::set<std::string> satisfied;\n\t\tstd::set<std::string> unsatisfied;\n\t\tstd::set<std::string> conflicts;\n\t\tstd::set<std::string> dependents;\n\t\tstd::set<std::string> dependents_conflicts;\n\n\t\tfor (std::set<std::string>::iterator j = requested.begin(); j != requested.end(); ++j) {\n\t\t\tif (*i != *j) {\n\t\t\t\tif (this->dependencies.contains(modpack, *j)) {\n\t\t\t\t\tsatisfied.insert(*j);\n\t\t\t\t} else {\n\t\t\t\t\tunsatisfied.insert(*j);\n\t\t\t\t}\n\n\t\t\t\tif (this->conflicts.contains(modpack, *j)) {\n\t\t\t\t\tconflicts.insert(*j);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this->dependencies.contains(*j, modpack)) {\n\t\t\t\tdependents.insert(*j);\n\t\t\t}\n\n\t\t\tif (this->conflicts.contains(*j, modpack)) {\n\t\t\t\tdependents_conflicts.insert(*j);\n\t\t\t}\n\t\t}\n\n\t\tif (!unsatisfied.empty()) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" has unsatisfied dependencies: \" + this->set_to_string(unsatisfied));", "CodeBleu_score": 41.308219838237626}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t// Check if resources are available\n    if (this->resources.empty()) {\n        // Iterate through the provided sound files\n        for (const auto &sound : sound_files) {\n            // Create a unique key for each file based on its category and ID\n            const auto key = std::make_tuple(sound.category, sound.id);\n            // Skip loading if the sound is already loaded\n            if (this->resources.find(key) != this->resources.end()) {\n                continue;\n            }\n            // If not already loaded, create the resource and insert it into the resources map\n            this->resources.insert(std::make_pair(key, Resource::create_resource(sound.file_path)));\n        }\n    }\n}", "CodeBleu_score": 53.9477252130375}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\tif (!this->resources.empty()) {\n        return;\n    }\n\n    for (const auto &sound_file : sound_files) {\n        const auto key = std::make_tuple(sound_file.category, sound_file.id);\n        if (this->resources.find(key) != std::end(this->resources)) {\n            continue;\n        }\n\n        this->resources.insert(std::make_pair(key, Resource::create_resource(sound_file.path)));\n    }\n}", "CodeBleu_score": 69.65694597159204}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\tif (this->resources.empty()) {\n        for (const auto &sound_file : sound_files) {\n            const auto key = std::make_tuple(sound_file.category, sound_file.id);\n            if (this->resources.find(key) == std::end(this->resources)) {\n                this->resources.insert(std::make_pair(key, Resource::create_resource(sound_file.path)));\n            }\n        }\n    }\n}", "CodeBleu_score": 61.61849035240121}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\tif (!this->available) {\n        throw std::runtime_error(MSG_AUDIO_MANAGER_NOT_AVAILABLE);\n    }\n    auto resource = this->resources.find(std::make_tuple(category, id));\n    if (resource == std::end(this->resources)) {\n        throw std::runtime_error(MSG_AUDIO_MANAGER_SOUND_RESOURCE_NOT_FOUND);\n    }\n    return Sound(this->audio_manager, std::make_shared<SoundImpl>(resource->second));\n}", "CodeBleu_score": 36.93714075297591}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\tif (!available) {\n        throw std::runtime_error(MSG_AUDIO_MANAGER_NOT_AVAILABLE);\n    }\n    auto resource = resources.find(std::make_tuple(category, id));\n    if (resource == std::end(resources)) {\n        throw std::runtime_error(MSG_SOUND_RESOURCE_DOES_NOT_EXIST);\n    }\n    return Sound(shared_from_this(), std::make_shared<SoundImpl>(resource->second));\n}", "CodeBleu_score": 42.782740728663725}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\tif (!available) {\n        throw std::runtime_error(\"AudioManager not available\");\n    }\n    auto resource = resources.find(std::make_tuple(category, id));\n    if (resource == resources.end()) {\n        throw std::runtime_error(\"Sound resource does not exist\");\n    }\n    return Sound(this, std::make_shared<SoundImpl>(resource->second));\n}", "CodeBleu_score": 43.649606431622814}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\tauto category = sound->get_category();\n    auto playing_list = this->playing_sounds.find(category);\n    playing_list->second.push_back(sound);\n}", "CodeBleu_score": 78.94874605361741}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\tauto category = sound->get_category();\n    auto playing_list = playing_sounds.find(category);\n    playing_list->second.push_back(sound);\n}", "CodeBleu_score": 76.6756717204029}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\tplaying_list.push_back(sound);\n    auto category = sound->get_category();\n    auto it = playing_sounds.find(category);\n    if (it != playing_sounds.end()) {\n        it->second.push_back(sound);\n    }\n}", "CodeBleu_score": 68.4458783083274}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\tstd::unique_lock<std::mutex> lock(m_mutex);\n\n    if (m_state != RUNNING) {\n        return;\n    }\n\n    // Get the current time.\n    auto now = std::chrono::system_clock::now();\n    auto elapsed = now - m_last_check;\n\n    // Sleep briefly to prevent stalling.\n    if (elapsed < std::chrono::milliseconds(1)) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(1) - elapsed);\n        return;\n    }\n\n    // Update the clock's simulated time.\n    if (elapsed > m_max_tick) {\n        m_sim_time += m_max_tick * m_speed;\n        m_real_time += m_max_tick;\n    } else {\n        m_sim_time += elapsed * m_speed;\n        m_real_time += elapsed;\n    }\n\n    // Update the last check time.\n    m_last_check = now;\n}", "CodeBleu_score": 46.83327436839615}, {"code": "void Clock::update_time(){\n\tstd::unique_lock<std::mutex> lock(mutex);\n    std::chrono::milliseconds elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(simclock_t::now() - last_check);\n    if (elapsed.count() == 0) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        return;\n    }\n    std::chrono::milliseconds tick_time = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::milliseconds(1000) / speed);\n    if (elapsed > tick_time) {\n        simulated_time += tick_time;\n        real_time += tick_time;\n    } else {\n        simulated_time += elapsed;\n        real_time += elapsed;\n    }\n    last_check = simclock_t::now();\n}", "CodeBleu_score": 43.82695863698578}, {"code": "void Clock::update_time(){\n\tstd::unique_lock<std::mutex> lock(mutex);\n    auto now = std::chrono::high_resolution_clock::now();\n    auto elapsed = now - last_check;\n    if (elapsed < std::chrono::milliseconds(0)) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        return;\n    }\n    auto max_tick = std::chrono::milliseconds(static_cast<long>(1000.0 / tick_rate));\n    if (elapsed > max_tick) {\n        elapsed = max_tick;\n    }\n    sim_time += std::chrono::duration_cast<simclock_t::duration>(elapsed * speed);\n    real_time = now;\n    last_check = real_time;\n}", "CodeBleu_score": 46.861688398044464}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t// Calculate the vertical distance between the current and target scene positions\n    float y_delta = scene_pos.y() - this->pos.y();\n    // Calculate the horizontal distance between the current and target scene positions\n    float xz_distance = sqrt(pow(scene_pos.x() - this->pos.x(), 2) + pow(scene_pos.z() - this->pos.z(), 2));\n    // Calculate the new camera position\n    Eigen::Vector3f new_pos;\n    new_pos.x() = this->pos.x() + (xz_distance / y_delta) * (this->pos.y() - scene_pos.y());\n    new_pos.y() = this->pos.y();\n    new_pos.z() = this->pos.z() + (xz_distance / y_delta) * (this->pos.y() - scene_pos.y());\n    // Move the camera to the new position\n    this->move_to(new_pos);\n}", "CodeBleu_score": 38.2294991743657}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\tfloat y_delta = scene_pos(1) - this->pos(1);\n    float xz_distance = sqrt(pow(scene_pos(0) - this->pos(0), 2) + pow(scene_pos(2) - this->pos(2), 2));\n    this->pos(0) = this->pos(0) + (scene_pos(0) - this->pos(0)) / xz_distance;\n    this->pos(2) = this->pos(2) + (scene_pos(2) - this->pos(2)) / xz_distance;\n    this->move_to(this->pos);\n}", "CodeBleu_score": 28.007572432401638}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\tfloat y_delta = scene_pos(1) - this->position(1);\n    float xz_distance = sqrt(pow(this->position(0) - scene_pos(0), 2) + pow(this->position(2) - scene_pos(2), 2));\n    float x_delta = xz_distance * (this->position(0) - scene_pos(0)) / xz_distance;\n    float z_delta = xz_distance * (this->position(2) - scene_pos(2)) / xz_distance;\n    this->move_to(this->position(0) - x_delta, this->position(1), this->position(2) - z_delta);\n}", "CodeBleu_score": 35.01973399781821}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\tif (url.isLocalFile()) {\n\t\tconst QString filePath = url.toLocalFile();\n\t\tif (muse::audio::synth::isSoundFont(filePath)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t}\n\t\tif (extensionInstaller()->isFileSupported(filePath)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 81.25118340575455}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t} else if (url.isLocalFile()) {\n\t\tconst QString filePath = url.toLocalFile();\n\t\tif (muse::audio::synth::isSoundFont(filePath)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t} else if (extensionInstaller()->isFileSupported(filePath)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 87.70407677852884}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\tif (projectFilesController()->isUrlSupported(url))\n\t\treturn DragTarget::ProjectFile;\n\tif (url.isLocalFile()) {\n\t\tif (muse::audio::synth::isSoundFont(url.toLocalFile()))\n\t\t\treturn DragTarget::SoundFont;\n\t\tif (extensionInstaller()->isFileSupported(url.toLocalFile()))\n\t\t\treturn DragTarget::Extension;\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 51.42007156906105}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\tmuse::io::path_t sessionProjectsPaths = configuration()->sessionProjectsPaths();\n    if (sessionProjectsPaths.empty()) {\n        return;\n    }\n\n    std::vector<muse::io::path_t> projects;\n    projects.begin = sessionProjectsPaths.begin;\n    projects.erase = sessionProjectsPaths.erase;\n    projects.end = sessionProjectsPaths.end;\n    projects.empty = sessionProjectsPaths.empty;\n\n    auto it = std::find(projects.begin, projects.end, projectPath);\n    if (it != projects.end) {\n        projects.erase(it);\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 59.21657657555659}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\tmuse::io::path_t path;\n    muse::io::path_t::string_type pathString;\n    std::vector<muse::io::path_t> projects;\n    std::vector<muse::io::path_t>::iterator it;\n\n    projects = configuration()->sessionProjectsPaths();\n\n    if (projects.begin() != projects.end()) {\n        for (it = projects.begin(); it != projects.end(); ++it) {\n            pathString = (*it).string();\n            if (pathString.compare(projectPath.string()) != 0) {\n                path = muse::io::path_t(pathString);\n                projects.push_back(path);\n            }\n        }\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 48.451232205843695}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\tstd::vector<muse::io::path_t> projects = configuration()->sessionProjectsPaths();\n    if (!projects.empty()) {\n        projects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 80.83658181519506}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList highContrastThemes;\n\n    foreach (const Theme &theme, uiConfiguration()->themes()) {\n        if (theme.code() == \"highcontrast-white\" || theme.code() == \"highcontrast-black\") {\n            highContrastThemes.append(toMap(theme));\n        }\n    }\n\n    return highContrastThemes;\n}", "CodeBleu_score": 51.21361363359159}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\n    foreach (Theme *theme, allThemes()) {\n        if (theme->code() == \"high-contrast-white\" || theme->code() == \"high-contrast-black\") {\n            result.append(ThemeConverter::toMap(theme));\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 57.769486338174566}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n    for (const auto& theme : allThemes()) {\n        const QString code = theme[\"code\"].toString();\n        if (code == \"highcontrast-white\" || code == \"highcontrast-black\") {\n            result.append(theme);\n        }\n    }\n    return result;\n}", "CodeBleu_score": 58.269224053217584}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList result;\n    auto childPages = [&](const QStandardItem* item) {\n        for (int i = 0; i < item->rowCount(); ++i) {\n            const auto child = item->child(i);\n            QVariantMap map;\n            map[\"id\"] = child->id();\n            map[\"path\"] = child->path();\n            result << map;\n            childPages(child);\n        }\n    };\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 52.00826449514081}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\treturn childPages(m_rootItem);\n}", "CodeBleu_score": 4.689113578896837}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList result;\n    const auto childPages = [&result](const PreferenceItem* item) {\n        for (int i = 0; i < item->childCount(); ++i) {\n            const PreferenceItem* child = item->childAtRow(i);\n            QVariantMap map;\n            map[\"id\"] = child->id();\n            map[\"path\"] = child->path();\n            result << map;\n            childPages(child);\n        }\n    };\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 57.990448203314735}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\tMenuItemList menuItems;\n    auto recentFiles = recentFilesController()->recentFilesList();\n    int itemIndex = 0;\n    for (auto file : recentFiles) {\n        auto item = std::make_unique<MenuItem>();\n        item->setAction(ActionCode::file_open);\n        item->setId(makeId(ActionCode::file_open, itemIndex++));\n        item->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n        item->setSelectable(true);\n        item->setEnabled(true);\n        if (projectConfiguration()->isCloudProject(file.path)) {\n            item->setIcon(IconCode::cloud);\n        }\n        menuItems.append(std::move(item));\n    }\n    return menuItems;\n}", "CodeBleu_score": 48.16182503701596}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\tMenuItemList items;\n    const auto& recentFiles = recentFilesController()->recentFilesList();\n    for (int i = 0; i < recentFiles.size(); ++i) {\n        const auto& file = recentFiles.at(i);\n        auto item = MenuItem::make(MenuId::RecentFiles);\n        item->setAction(ActionCode::FileOpen);\n        item->setArgs(file.path.toQUrl(), file.displayName);\n        item->setId(makeId(ActionCode::FileOpen, i));\n        item->setSelectable(true);\n        item->setEnabled(true);\n        if (projectConfiguration()->isCloudProject(file.path)) {\n            item->setIcon(Icon::cloud);\n        }\n        items.append(item);\n    }\n    return items;\n}", "CodeBleu_score": 47.597142786769865}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\tMenuItemList items;\n    auto recentFiles = recentFilesController()->recentFilesList();\n    for (int i = 0; i < recentFiles.size(); ++i) {\n        auto item = MenuItem::make(MenuItem::Action);\n        item->setArgs(ActionData::make_arg2<QUrl, QString>(recentFiles[i].path.toQUrl(), recentFiles[i].displayName));\n        item->setId(makeId(ActionCode::file_open, i));\n        item->setAction(ActionCode::file_open);\n        item->setState(ActionState::Normal);\n        item->setSelectable(true);\n        if (projectConfiguration()->isCloudProject(recentFiles[i].path)) {\n            item->setIcon(Icon::cloud);\n        }\n        items.append(item);\n    }\n    return items;\n}", "CodeBleu_score": 40.40060190580982}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tif (isNavigationStarted()) {\n        setHighlightedMenuId(menuId);\n    }\n    else if (!isMenuOpened()) {\n        saveMUNavigationSystemState();\n    }\n    else {\n        restoreMUNavigationSystemState();\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 36.98427430496498}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tif (!isNavigationStarted() && !isMenuOpened()) {\n        saveMUNavigationSystemState();\n    } else if (isMenuOpened()) {\n        restoreMUNavigationSystemState();\n    }\n\n    if (!byHover && !m_openedMenuId.isEmpty() && m_openedMenuId == menuId) {\n        return;\n    }\n\n    if (!byHover) {\n        setHighlightedMenuId(menuId);\n    }\n\n    emit openMenuRequested(menuId, byHover);\n}", "CodeBleu_score": 65.41092737748512}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tif (isNavigationStarted()) {\n        setHighlightedMenuId(menuId);\n    }\n    else if (!isMenuOpened()) {\n        if (byHover) {\n            saveMUNavigationSystemState();\n        }\n        else {\n            restoreMUNavigationSystemState();\n        }\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 47.07270268793652}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tViewMode currentViewMode = notation()->viewMode();\n\n    for (const ViewMode& viewMode: ALL_MODE_MAP.keys()) {\n        if (viewMode == currentViewMode && (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM)) {\n            return QVariant::fromValue(tr(\"Continuous view\"));\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 45.67377584060321}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tif (!notation()) {\n        return QVariant();\n    }\n\n    ViewMode currentViewMode = notation()->viewMode();\n\n    for (const ViewMode& viewMode: ALL_MODE_MAP.keys()) {\n        if (viewMode == currentViewMode) {\n            if (currentViewMode == ViewMode::LINE || currentViewMode == ViewMode::SYSTEM) {\n                modeItem->setTitle(tr(\"Continuous view\"));\n            } else {\n                modeItem->setTitle(tr(\"Page view\"));\n            }\n            return QVariant::fromValue(modeItem);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 62.81082810466743}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tViewMode currentViewMode = ViewMode::PAGE;\n    if (notation()) {\n        currentViewMode = notation()->viewMode();\n    }\n\n    for (const auto& modeItem: makeAvailableViewModeList()) {\n        if (modeItem->id().toStdString() == ALL_MODE_MAP[currentViewMode]) {\n            if (currentViewMode == ViewMode::LINE || currentViewMode == ViewMode::SYSTEM) {\n                modeItem->setTitle(tr(\"Continuous view\"));\n            }\n            return QVariant::fromValue(modeItem);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 67.45956685905304}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\tif (!notation) {\n        return make_ret(false, \"Invalid notation\");\n    }\n\n    if (!notation->getScore()) {\n        return make_ret(false, \"Invalid score\");\n    }\n\n    if (!destinationDevice.isOpen()) {\n        return make_ret(false, \"Invalid destination device\");\n    }\n\n    /*\n     * The function BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&) calls the function BrailleWriter::write(notation::INotationPtr notation, ByteArray& destinationBuffer, const Options&) to write the Braille representation of the score to a buffer.\n     */\n    ByteArray buffer;\n    muse::Ret ret = write(notation, buffer, Options());\n\n    if (ret.isSuccess()) {\n        /*\n         * If the writing is successful, the function BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&) converts the buffer data to a ByteArray and writes it to the destination device.\n         */\n        destinationDevice.write(buffer);\n    }\n\n    return ret;\n}", "CodeBleu_score": 39.138431467982265}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\tif (!notation) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n\n    // Check if the score is valid\n    if (notation->getScore()->getParts().size() == 0) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n\n    // Write the Braille representation of the score to a buffer\n    std::stringstream buffer;\n    if (!writeToBuffer(notation, buffer)) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n\n    // Convert the buffer data to a ByteArray and write it to the destination device\n    muse::ByteArray data;\n    data.setData(buffer.str());\n    if (!destinationDevice.write(data)) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n\n    return make_ret();\n}", "CodeBleu_score": 38.53397419860249}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\tif (notation == nullptr) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n    if (destinationDevice.isClosed()) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n\n    /*\n     * The variable buffer is a string stream that will hold the Braille representation of the score.\n     */\n    std::stringstream buffer;\n\n    /*\n     * The variable result is a muse::Ret that holds the result of the Braille writing operation.\n     */\n    muse::Ret result = make_ret(muse::Error_Success);\n\n    /*\n     * The variable score is a pointer to the score of the notation.\n     */\n    muse::ScorePtr score = notation->getScore();\n\n    /*\n     * If the score is null, the function returns an error.\n     */\n    if (score == nullptr) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n\n    /*\n     * The variable converter is a pointer to the BrailleConverter that will convert the score to Braille.\n     */\n    BrailleConverterPtr converter = BrailleConverter::create();\n\n    /*\n     * If the converter is null, the function returns an error.\n     */\n    if (converter == nullptr) {\n        return make_ret(muse::Error_InvalidArguments);\n    }\n\n    /*\n     * The function convert converts the score to Braille and writes it to the buffer.\n     */\n    result = converter->convert(score, buffer);\n\n    /*\n     * If the conversion was not successful, the function returns an error.\n     */\n    if (result.getStatus() != muse::Error_Success) {\n        return result;\n    }\n\n    /*\n     * The variable data is a ByteArray that holds the data of the buffer.\n     */\n    ByteArray data = ByteArray::fromString(buffer.str());\n\n    /*\n     * The function write writes the data to the destination device.\n     */\n    destinationDevice.write(data);\n\n    /*\n     * The function returns the result of the Braille writing operation.\n     */\n    return result;\n}", "CodeBleu_score": 45.75483464122265}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\tuint8_t* outputbuf = nullptr;\n    size_t outlen = 0;\n    widechar inbuf[MAXSTRING];\n    widechar transbuf[MAXSTRING];\n    int inlen = 0;\n    int translen = 0;\n\n    std::vector<std::string> lines = split_string(txt, 256);\n\n    if (lines.size() == 0) {\n        return std::string();\n    }\n\n    inlen = _lou_extParseChars(lines.front().c_str(), inbuf);\n\n    translen = MAXSTRING;\n    lou_translateString(\n        table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n", "CodeBleu_score": 53.18413940166089}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\tstd::vector<std::string> lines = split_string(txt, 256);\n    if (lines.empty()) {\n        return std::string();\n    }\n\n    std::string braille_translation = braille_translate(table_name, lines.front());\n\n    for (auto it = lines.begin() + 1; it != lines.end(); it++) {\n        braille_translation.append(\" \");\n        braille_translation.append(braille_translate(table_name, *it));\n    }\n    return braille_translation;\n}", "CodeBleu_score": 60.92788681741812}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\tuint8_t* outputbuf = nullptr;\n    size_t outlen = 0;\n    widechar inbuf[MAXSTRING];\n    widechar transbuf[MAXSTRING];\n    int inlen = 0;\n    int translen = 0;\n\n    std::vector<std::string> lines = split_string(txt, 256);\n\n    if (lines.empty()) {\n        return std::string();\n    }\n\n    std::string buffer;\n\n    for (int i = 0; i < lines.size(); i++) {\n        inlen = _lou_extParseChars(lines[i].c_str(), inbuf);\n\n        translen = MAXSTRING;\n        lou_translateString(\n            table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n#ifdef WIDECHARS_ARE_UCS4\n        //outputbuf = (uint8_t *) malloc (translen * sizeof(widechar) * sizeof (uint8_t));\n        outputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n#else\n        outputbuf = u16_to_u8(transbuf, translen, NULL, &outlen);\n#endif\n\n        if (!outputbuf) {\n            return std::string();\n        }\n\n        std::string ret = std::string(outputbuf, outputbuf + outlen);\n        free(outputbuf);\n\n        buffer.append(ret);\n        if (i < lines.size() - 1) {\n            buffer.append(\"\u2800\");\n        }\n    }\n\n    return buffer;\n}", "CodeBleu_score": 53.79348195758866}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\tstd::shared_ptr<ProxyEntity> ent = std::make_shared<ProxyEntity>();\n    ent->Load(jsonPath);\n    if (ent->IsValid()) {\n        switch (ent->GetType()) {\n        case ProxyEntity::Type::kEntity:\n            std::shared_ptr<Entity> ent0 = std::make_shared<Entity>();\n            ent0->Load(jsonPath);\n            return ent0;\n        case ProxyEntity::Type::kEntityList:\n            std::shared_ptr<EntityList> ent1 = std::make_shared<EntityList>();\n            ent1->Load(jsonPath);\n            return ent1;\n        case ProxyEntity::Type::kEntityTree:\n            std::shared_ptr<EntityTree> ent2 = std::make_shared<EntityTree>();\n            ent2->Load(jsonPath);\n            return ent2;\n        default:\n            break;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 40.3771765573591}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\tstd::shared_ptr<ProxyEntity> tempEntity = std::make_shared<ProxyEntity>();\n    tempEntity->Load(jsonPath);\n    if (tempEntity->IsValid()) {\n        std::shared_ptr<ProxyEntity> entity = std::make_shared<ProxyEntity>(tempEntity->GetType());\n        if (entity->GetVersion() == tempEntity->GetVersion()) {\n            entity->SetLoadControl(true);\n            entity->SetJsonPath(jsonPath);\n            entity->Load();\n            return entity;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 38.11012957405227}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\tQFile jsonFile(jsonPath);\n    if (!jsonFile.open(QIODevice::ReadOnly | QIODevice::Text)) {\n        qCritical(\"ProfileManager::LoadProxyEntity(): Failed to open file %s\", qUtf8Printable(jsonPath));\n        return nullptr;\n    }\n\n    QJsonDocument jsonDoc = QJsonDocument::fromJson(jsonFile.readAll());\n    jsonFile.close();\n    if (jsonDoc.isEmpty()) {\n        qCritical(\"ProfileManager::LoadProxyEntity(): Failed to parse JSON from file %s\", qUtf8Printable(jsonPath));\n        return nullptr;\n    }\n\n    ProxyEntity ent;\n    ent.Load(jsonDoc.object());\n    if (!ent.IsValid()) {\n        qCritical(\"ProfileManager::LoadProxyEntity(): Failed to load entity from file %s\", qUtf8Printable(jsonPath));\n        return nullptr;\n    }\n\n    std::shared_ptr<ProxyEntity> proxyEntity;\n    switch (ent.GetType()) {\n        case ProxyEntity::Type::EMPTY:\n            proxyEntity = std::make_shared<EmptyEntity>();\n            break;\n        case ProxyEntity::Type::ENTITY:\n            proxyEntity = std::make_shared<Entity>();\n            break;\n        case ProxyEntity::Type::PROXY_ENTITY:\n            proxyEntity = std::make_shared<ProxyEntity>();\n            break;\n        default:\n            qCritical(\"ProfileManager::LoadProxyEntity(): Unknown entity type\");\n            return nullptr;\n    }\n\n    if (ent.GetVersion() != proxyEntity->GetVersion()) {\n        qCritical(\"ProfileManager::LoadProxyEntity(): Version mismatch\");\n        return nullptr;\n    }\n\n    proxyEntity->SetLoadControl(true);\n    proxyEntity->SetJsonPath(jsonPath);\n    proxyEntity->Load(jsonDoc.object());\n\n    return proxyEntity;\n}", "CodeBleu_score": 39.263484641876765}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\tQUrl url = QUrl(link);\n    if (!url.isValid()) {\n        return false;\n    }\n\n    QString protocol = url.scheme().replace(\"+\", \"\");\n    if (protocol != \"https\" && protocol != \"quic\") {\n        return false;\n    }\n\n    QString name = url.userName();\n    QString serverAddress = url.host();\n    QString port = url.port();\n    QString username = url.userName();\n    QString password = url.password();\n\n    return !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 70.51197371529848}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\tQUrl url = QUrl(link);\n    if (!url.isValid()) {\n        return false;\n    }\n    QString protocol = url.scheme().replace(QRegExp(\"^quic$\"), \"https\");\n    if (protocol != \"https\") {\n        return false;\n    }\n    name = url.host();\n    serverAddress = url.host();\n    port = url.port();\n    username = url.userName();\n    password = url.password();\n    return !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 71.18748266219569}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\tQUrl url = QUrl::fromUserInput(link);\n    if (!url.isValid()) {\n        qWarning() << \"Invalid link\";\n        return false;\n    }\n\n    QString protocol = url.scheme();\n    if (protocol != \"https\" && protocol != \"quic\") {\n        qWarning() << \"Invalid protocol\";\n        return false;\n    }\n\n    QString username = url.userName();\n    QString password = url.password();\n    QString serverAddress = url.host();\n    if (username.isEmpty() || password.isEmpty() || serverAddress.isEmpty()) {\n        qWarning() << \"Invalid username, password, or server address\";\n        return false;\n    }\n\n    QString port = QString::number(url.port());\n    if (port.isEmpty()) {\n        port = protocol == \"https\" ? \"443\" : \"8443\";\n    }\n\n    name = url.fragment();\n    if (name.isEmpty()) {\n        name = \"NaiveBean\";\n    }\n\n    this->protocol = protocol;\n    this->username = username;\n    this->password = password;\n    this->serverAddress = serverAddress;\n    this->port = port;\n\n    return true;\n}", "CodeBleu_score": 60.97609619093447}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t// Call the pre-save callback\n  if (pre_save_callback != nullptr) {\n    pre_save_callback();\n  }\n\n  // Check if saving is allowed\n  if (!allow_saving) {\n    return false;\n  }\n\n  // Convert the current state to JSON bytes\n  std::vector<uint8_t> json_bytes = ToJsonBytes();\n\n  // Check if the content has changed\n  if (json_bytes == last_saved_content) {\n    return false;\n  }\n\n  // Update the last saved content\n  last_saved_content = json_bytes;\n\n  // Open the file\n  file.open(file_name, std::ios::out | std::ios::trunc);\n\n  // Write the JSON content\n  file.write(reinterpret_cast<const char*>(json_bytes.data()), json_bytes.size());\n\n  // Close the file\n  file.close();\n\n  return true;\n}", "CodeBleu_score": 43.89989987021047}, {"code": "bool JsonStore::Save(){\n\t// If we have a pre-save callback, call it\n    if (pre_save_callback) {\n        pre_save_callback();\n    }\n\n    // Check if saving is allowed\n    if (!save_allowed) {\n        return false;\n    }\n\n    // Convert the current state to JSON bytes\n    JsonVariant json = ToJson();\n    String json_string;\n    json.printTo(json_string);\n    const char* json_bytes = json_string.c_str();\n\n    // Check if the content has changed\n    bool changed = (strcmp(json_bytes, last_saved_content) != 0);\n    if (changed) {\n        // Update the last saved content\n        strcpy(last_saved_content, json_bytes);\n\n        // Open the file\n        file.open(filename, FILE_WRITE);\n        if (!file) {\n            // Could not open the file\n            return false;\n        }\n\n        // Write the JSON content\n        file.write(json_bytes, strlen(json_bytes));\n        file.close();\n    }\n\n    return changed;\n}", "CodeBleu_score": 44.91393694836263}, {"code": "bool JsonStore::Save(){\n\tif (callback_before_save_ != nullptr) {\n    callback_before_save_();\n  }\n\n  if (!save_allowed_) {\n    return false;\n  }\n\n  std::string json = ToJsonBytes();\n  if (json == last_saved_content_) {\n    return false;\n  }\n\n  last_saved_content_ = json;\n\n  std::ofstream file(file_name_);\n  file << json;\n  file.close();\n\n  return true;\n}", "CodeBleu_score": 43.1815899935297}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\tQTimer *t = new QTimer(obj);\n    t->setSingleShot(true);\n    t->setInterval(timeout);\n    QObject::connect(t, &QTimer::timeout, obj, [t, callback]() {\n        callback();\n        t->deleteLater();\n    });\n    t->start();\n}", "CodeBleu_score": 71.36431651733521}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\tQTimer *t = new QTimer(obj);\n    t->setSingleShot(true);\n    t->setInterval(timeout);\n    t->start();\n    QObject::connect(t, &QTimer::timeout, [=]() {\n        callback();\n        t->deleteLater();\n    });\n}", "CodeBleu_score": 73.26244231183611}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\tQTimer *t = new QTimer(obj);\n    t->setSingleShot(true);\n    t->setInterval(timeout);\n    QObject::connect(t, &QTimer::timeout, obj, [t, callback]() {\n        callback();\n        t->deleteLater();\n    });\n    t->start();\n}", "CodeBleu_score": 71.36431651733521}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\tQByteArray response;\n    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        MW_show_log(QString(\"Network error: %1\").arg(networkReply->errorString()));\n        return response;\n    }\n    QByteArray rawHeader = networkReply->rawHeader(GrpcStatusHeader);\n    if (!rawHeader.isEmpty()) {\n        int status = rawHeader.toInt();\n        if (status != 0) {\n            QString message = QString(\"Server error: %1\").arg(networkReply->rawHeader(GrpcMessageHeader));\n            MW_show_log(message);\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return response;\n        }\n    }\n    statusCode = QNetworkReply::NoError;\n    response = networkReply->readAll().mid(5);\n    return response;\n}", "CodeBleu_score": 59.457393670917604}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\tif (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return QByteArray();\n    }\n    if (networkReply->rawHeader(GrpcStatusHeader).toInt() != 0) {\n        qCDebug(networkReply->url().toString()) << \"gRPC error: \" << networkReply->rawHeader(GrpcMessageHeader);\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return QByteArray();\n    }\n    statusCode = QNetworkReply::NoError;\n    return networkReply->readAll().mid(5);\n}", "CodeBleu_score": 54.26439603727181}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\tif (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return QByteArray();\n    }\n\n    QByteArray responseData = networkReply->readAll();\n    QByteArray grpcStatusHeader = networkReply->rawHeader(GrpcStatusHeader);\n    if (!grpcStatusHeader.isEmpty()) {\n        int grpcStatusCode = grpcStatusHeader.toInt();\n        if (grpcStatusCode != 0) {\n            qWarning() << \"gRPC error\" << grpcStatusCode << \":\" << networkReply->rawHeader(GrpcMessageHeader);\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return QByteArray();\n        }\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return responseData.mid(5);\n}", "CodeBleu_score": 61.38455961068079}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t// Initialize the request\n    grpc::ClientContext context;\n    libcore::LoadConfigReply reply;\n\n    // Send the request\n    grpc::Status status = default_grpc_channel->Call({}, &context, request, &reply);\n\n    // Check if the request was successful\n    if (status.ok()) {\n        *rpcOK = true;\n        return QString::fromStdString(reply.error());\n    } else {\n        *rpcOK = false;\n        return QString();\n    }\n}", "CodeBleu_score": 59.39583813363484}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\tgrpc::ClientContext context;\n    libcore::LoadConfigRes reply;\n    grpc::Status status = default_grpc_channel->Call(grpc::Method(\"core.Client\", \"Start\"), &context, request, &reply);\n    if (status.ok()) {\n        *rpcOK = true;\n        return QString::fromStdString(reply.error());\n    } else {\n        *rpcOK = false;\n        return QString();\n    }\n}", "CodeBleu_score": 56.681996676665335}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t// Initialize the gRPC channel if it is not already initialized.\n    if (!default_grpc_channel) {\n        default_grpc_channel = new GrpcChannel(default_grpc_channel_address);\n    }\n\n    // Create a new context for this request.\n    grpc::ClientContext context;\n\n    // Create a new stub using the default gRPC channel.\n    auto stub = libcore::CoreRPC::NewStub(default_grpc_channel->GetChannel());\n\n    // Create a new protobuf object for the response.\n    libcore::LoadConfigReply reply;\n\n    // Send the request and receive the response.\n    grpc::Status status = stub->LoadConfig(&context, request, &reply);\n\n    // If the RPC failed, set the rpcOK flag to false and return an empty string.\n    if (!status.ok()) {\n        *rpcOK = false;\n        return \"\";\n    }\n\n    // Otherwise, set the rpcOK flag to true and return the error message from the response.\n    *rpcOK = true;\n    return QString::fromStdString(reply.error());\n}", "CodeBleu_score": 52.11417885564538}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\tui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\", \"16px\", \"16px\"));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\", \"16px\", \"16px\"));\n    }\n}", "CodeBleu_score": 59.13413523029094}, {"code": "void DialogBasicSettings::refresh_auth(){\n\tui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(Icon::material::lock));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(Icon::material::lock_open));\n    }\n}", "CodeBleu_score": 57.79644074178603}, {"code": "void DialogBasicSettings::refresh_auth(){\n\tui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\", \"dark\"));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\", \"dark\"));\n    }\n}", "CodeBleu_score": 59.878193900957555}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\tNekoGroupEntity* new_group = new NekoGroupEntity();\n    DialogEditGroup* dialog = new DialogEditGroup(this, new_group);\n    connect(dialog, SIGNAL(accepted()), this, SLOT(AddGroupToListIfExist()));\n    connect(dialog, SIGNAL(accepted()), dialog, SLOT(deleteLater()));\n    connect(dialog, SIGNAL(accepted()), this, SIGNAL(Refresh()));\n    dialog->exec();\n}", "CodeBleu_score": 40.986949348060286}, {"code": "void DialogManageGroups::on_add_clicked(){\n\tNekoGui::ProfileManager::NewGroup();\n    AddGroupToListIfExist();\n    dialog->exec();\n    NekoGui::profileManager->AddGroup(dialog->GetGroup());\n    dialog->deleteLater();\n    MW_dialog_message(MW_DIALOG_MESSAGE_GROUP_ADDED, QString::fromStdString(dialog->GetGroup()->GetName()));\n}", "CodeBleu_score": 34.99989854180024}, {"code": "void DialogManageGroups::on_add_clicked(){\n\tNekoGroup* newGroup = new NekoGroup();\n\tDialogEditGroup* dialog = new DialogEditGroup(newGroup, this);\n\tconnect(dialog, SIGNAL(accepted()), this, SLOT(AddGroupToListIfExist()));\n\tconnect(dialog, SIGNAL(accepted()), this, SLOT(deleteLater()));\n\tconnect(dialog, SIGNAL(accepted()), this, SLOT(AddGroup()));\n\tconnect(dialog, SIGNAL(accepted()), this, SLOT(MW_dialog_message()));\n\tdialog->exec();\n}", "CodeBleu_score": 40.721258566288554}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\tSaveDisplayRouting(CACHE.routing);\n    if (CACHE.routing->active != CACHE.routing->active_old) {\n        MW_dialog_message(tr(\"Routing configuration has been changed.\"));\n        CACHE.routing->active_old = CACHE.routing->active;\n    }\n    CACHE.routing->active = ui->routing_combo->currentText();\n    CACHE.routing->function = \"NekoGui::\" + CACHE.routing->active;\n    CACHE.routing->Save();\n    QDialog::accept();\n}", "CodeBleu_score": 24.84053348389184}, {"code": "void DialogManageRoutes::accept(){\n\tSaveDisplayRouting(CACHE.routing);\n    if (CACHE.routing->active != ui->routingCombo->currentText()) {\n        ui->info->setText(tr(\"Routing changed, please restart the program to take effect.\"));\n        CACHE.routing->active = ui->routingCombo->currentText();\n        CACHE.routing->active_func = \"Routing_\" + CACHE.routing->active;\n        CACHE.routing->Save();\n        NekoGui::dataStore->routing.set(CACHE.routing);\n        NekoGui::dataStore->routing->active = CACHE.routing->active;\n        NekoGui::dataStore->routing->active_func = CACHE.routing->active_func;\n        NekoGui::dataStore->routing->Save();\n        NekoGui::dataStore->routing->UpdateDisplay();\n        NekoGui::dataStore->routing->Save();\n        QDialog::accept();\n    }\n}", "CodeBleu_score": 41.32726634811155}, {"code": "void DialogManageRoutes::accept(){\n\tSaveDisplayRouting(CACHE.routing);\n    //\n    if (CACHE.routing->active_routing != ui->routing_combo->currentText()) {\n        CACHE.routing->active_routing = ui->routing_combo->currentText();\n        MW_dialog_message(tr(\"Route Changed\"), tr(\"The active routing has been changed.\"));\n    }\n    //\n    CACHE.routing->routing_function = \"Routing_\" + ui->routing_combo->currentText();\n    CACHE.routing->Save();\n    //\n    CACHE.routing->active_routing = ui->routing_combo->currentText();\n    //\n    QDialog::accept();\n}", "CodeBleu_score": 34.41645408293586}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\tmError.clear();\n    xml.setDevice(device);\n    xml.name();\n    readTileset();\n    xml.readNextStartElement();\n    mPath.setPath(path);\n    return mTileset;\n}", "CodeBleu_score": 34.814203992951}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\tmError.clear();\n    xml.setDevice(device);\n    xml.name();\n    mPath.setPath(path);\n    if (xml.readNextStartElement()) {\n        if (xml.name() == \"tileset\") {\n            readTileset();\n        } else {\n            xml.raiseError(tr(\"The file is not a tileset.\"));\n        }\n    }\n    mProcessing = false;\n    return mTileset;\n}", "CodeBleu_score": 53.05120608816259}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\tmError.clear();\n    xml.setDevice(device);\n    mPath.setPath(path);\n    if (xml.readNextStartElement()) {\n        if (xml.name() == \"tileset\") {\n            readTileset();\n        } else {\n            xml.raiseError(tr(\"The file is not a tileset.\"));\n        }\n    }\n    mProcessing = false;\n    return mTileset;\n}", "CodeBleu_score": 52.72999764002739}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\tif (!lpLibFileName) {\n\t\tSetLastError(ERROR_INVALID_PARAMETER);\n\t\treturn NULL;\n\t}\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY_W);\n\t\treturn NULL;\n\t}\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 69.78087519109994}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\tHMODULE hModule = NULL;\n\tif (lpLibFileName != NULL) {\n\t\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY_PROC);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\thModule = s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n\treturn hModule;\n}", "CodeBleu_score": 61.48252637269434}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\tif (lpLibFileName == NULL) {\n\t\treturn NULL;\n\t}\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY_HYPERVISOR);\n\t\treturn NULL;\n\t}\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 72.9281559265247}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t// Create an HTTP client for the specified computer\n    HttpClient http(computer);\n\n    // Determine the cache path for the box art\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n\n    // Attempt to download the box art image\n    QImage image = http.getBoxArt(appId);\n\n    // If the image is successfully downloaded and is not null, save it to the cache path\n    if (!image.isNull()) {\n        if (image.save(cachePath)) {\n            // If saving is successful, return the local file URL of the cached image\n            return QUrl::fromLocalFile(cachePath);\n        } else {\n            // If saving fails, ensure any zero-byte file is removed\n            QFile::remove(cachePath);\n        }\n    }\n\n    // If the image download fails, return an empty URL\n    return QUrl();\n}", "CodeBleu_score": 73.98733319682682}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\tQUrl url;\n    QFile file;\n    QImage image;\n    QDir dir;\n\n    // Create an HTTP client for this computer\n    HttpClient http(computer);\n\n    // Determine the cache path for the box art\n    dir = getFilePathForBoxArt(computer, appId);\n\n    // Attempt to download the box art image\n    image = http.getBoxArt(appId);\n\n    // If the image is successfully downloaded and is not null\n    if (!image.isNull()) {\n        // Save the image to the cache path\n        url = image.save(dir.absolutePath());\n\n        // If saving is successful\n        if (!url.isEmpty()) {\n            // Return the local file URL of the cached image\n            return url;\n        }\n\n        // Ensure any zero-byte file is removed\n        file.remove(dir.absolutePath());\n    }\n\n    // Return an empty URL\n    return url;\n}", "CodeBleu_score": 54.7532532311434}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t// Create an HTTP client for this computer\n    HttpClient http(computer);\n\n    // Determine the cache path for this box art\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n\n    // Attempt to download the box art image\n    QImage image = http.getBoxArt(appId);\n\n    // If the image is successfully downloaded and is not null, save it to the cache path\n    if (!image.isNull()) {\n        if (image.save(cachePath)) {\n            return QUrl::fromLocalFile(cachePath);\n        }\n        QFile::remove(cachePath);\n    }\n\n    // If the image download fails, return an empty URL\n    return QUrl();\n}", "CodeBleu_score": 70.14192325519815}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\tQHostAddress bestGlobalAddress = getBestGlobalAddressV6(addresses);\n    bool added = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            addNewHost(NvAddress(address, computer->port), false, bestGlobalAddress);\n            added = true;\n            break;\n        }\n    }\n\n    if (!added && !bestGlobalAddress.isNull()) {\n        addNewHost(NvAddress(bestGlobalAddress, computer->port), false, bestGlobalAddress);\n    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 49.3690357250806}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\tQHostAddress bestAddress = getBestGlobalAddressV6(addresses);\n    bool added = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            addNewHost(NvAddress(address), true, bestAddress);\n            added = true;\n            break;\n        }\n    }\n\n    if (!added && !bestAddress.isNull()) {\n        if (bestAddress.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n            addNewHost(NvAddress(bestAddress, computer->port), true, bestAddress);\n        } else if (bestAddress.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n            qInfo() << \"Ignoring site-local address:\" << bestAddress;\n        } else if (bestAddress.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n            qInfo() << \"Ignoring ULA:\" << bestAddress;\n        } else if (bestAddress.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n            qInfo() << \"Ignoring 6to4 address:\" << bestAddress;\n        } else if (bestAddress.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n            qInfo() << \"Ignoring Teredo address:\" << bestAddress;\n        } else {\n            addNewHost(NvAddress(bestAddress, computer->port), true, bestAddress);\n        }\n    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 62.29056510163971}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\tQHostAddress bestAddress = getBestGlobalAddressV6(addresses);\n    if (bestAddress.isNull()) {\n        qWarning() << \"No global IPv6 address found for\" << computer->hostname;\n        return;\n    }\n\n    bool added = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            addNewHost(NvAddress(address, computer->port), true, bestAddress);\n            added = true;\n            break;\n        }\n    }\n\n    if (!added) {\n        // No IPv4 address found, fall back to IPv6\n        addNewHost(NvAddress(bestAddress, computer->port), true, bestAddress);\n    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 53.95395425354339}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQ_ASSERT(computer != nullptr);\n\n    // Punt to a worker thread because QSettings on macOS can take ages (> 500 ms)\n    // to persist our host list to disk (especially when a host has a bunch of apps).\n    QMutexLocker locker(&m_DelayedFlushMutex);\n\n    // We'll save the host if any serializable properties have changed.\n    QString serializedHost = computer->serialize();\n    if (!m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(serializedHost)) {\n        // Save the new serialized data.\n        m_LastSerializedHosts.insert(computer->uuid, serializedHost);\n\n        // Unlock the mutexes and queue a request to save the hosts to QSettings.\n        // This ensures that only modified host information is saved, optimizing the\n        // process.\n        locker.unlock();\n        saveHosts();\n    }\n}", "CodeBleu_score": 57.7912821017985}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQ_ASSERT(computer != nullptr);\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed, there's no need to save.\n    if (!computer->isSerializableDirty()) {\n        return;\n    }\n\n    // We're only interested in serializable properties.\n    // If none of them have changed", "CodeBleu_score": 25.757711006223833}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tif (!computer) {\n        return;\n    }\n\n    QMutexLocker computerLock(&computer->lock);\n\n    if (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(computer)) {\n        return;\n    }\n\n    computerLock.unlock();\n\n    QMutexLocker locker(&m_LastSerializedHostsMutex);\n    m_LastSerializedHosts.insert(computer->uuid, computer);\n    saveHosts();\n}", "CodeBleu_score": 59.65028478662504}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\tif (appList == newAppList) {\n        return false;\n    }\n\n    // propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (NvApp& app : newAppList) {\n        for (const NvApp& oldApp : appList) {\n            if (app.id == oldApp.id) {\n                app.hidden = oldApp.hidden;\n                app.directLaunch = oldApp.directLaunch;\n                break;\n            }\n        }\n    }\n\n    appList = newAppList;\n    sortAppList();\n    return true;\n}", "CodeBleu_score": 79.56559086495577}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\tif (appList == newAppList) {\n        return false;\n    }\n\n    for (auto& newApp : newAppList) {\n        for (auto& app : appList) {\n            if (app.id == newApp.id) {\n                newApp.hidden = app.hidden;\n                newApp.directLaunch = app.directLaunch;\n            }\n        }\n    }\n\n    appList = newAppList;\n    sortAppList();\n\n    return true;\n}", "CodeBleu_score": 82.03407138032097}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\tif (appList == newAppList) {\n        return false;\n    }\n    QVector<NvApp> newAppListWithClientAttributes = newAppList;\n    for (int i = 0; i < newAppListWithClientAttributes.size(); i++) {\n        for (int j = 0; j < appList.size(); j++) {\n            if (newAppListWithClientAttributes[i].id == appList[j].id) {\n                newAppListWithClientAttributes[i].hidden = appList[j].hidden;\n                newAppListWithClientAttributes[i].directLaunch = appList[j].directLaunch;\n            }\n        }\n    }\n    appList = newAppListWithClientAttributes;\n    sortAppList();\n    return true;\n}", "CodeBleu_score": 61.517179561940296}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\tCommandLineParser parser;\n    parser.setApplicationDescription(tr(\"Quit an application on a specified host\"));\n    parser.addPositionalArgument(tr(\"quit\"), tr(\"Quit an application on a specified host\"));\n    parser.addPositionalArgument(tr(\"host\"), tr(\"Host to quit the application on\"));\n    parser.setupCommonOptions();\n\n    if (!parser.parse(args)) {\n        showError(parser.errorText());\n        return;\n    }\n\n    parser.handleUnknownOptions();\n    parser.handleHelpAndVersionOptions();\n\n    if (parser.positionalArguments().count() != 2) {\n        showError(tr(\"Missing host argument\"));\n        return;\n    }\n\n    m_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 61.68095815152233}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\tCommandLineParser parser;\n    parser.setApplicationDescription(tr(\"Quit an app on a specified host\"));\n    parser.addPositionalArgument(tr(\"quit\"), tr(\"Quit an app on a specified host\"));\n    parser.addPositionalArgument(tr(\"host\"), tr(\"Host on which to quit an app\"));\n    parser.setupCommonOptions();\n\n    if (!parser.parse(args)) {\n        showError(parser.errorText());\n        return;\n    }\n\n    parser.handleUnknownOptions();\n\n    if (parser.positionalArguments().at(0) != tr(\"quit\")) {\n        showError(tr(\"Invalid command: %1\").arg(parser.positionalArguments().at(0)));\n        return;\n    }\n\n    if (parser.positionalArguments().count() != 2) {\n        showError(tr(\"Missing required arguments.\"));\n        return;\n    }\n\n    m_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 60.707588468519965}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\tCommandLineParser parser;\n    parser.setApplicationDescription(tr(\"Quit an application on a specified host\"));\n    parser.addPositionalArgument(tr(\"quit\"), tr(\"Quit an application on a specified host\"));\n    parser.addPositionalArgument(tr(\"host\"), tr(\"Host to quit the application on\"));\n    parser.setupCommonOptions();\n\n    if (!parser.parse(args)) {\n        showError(parser.errorText());\n        return;\n    }\n\n    parser.handleUnknownOptions();\n    parser.handleHelpAndVersionOptions();\n\n    if (parser.positionalArguments().count() < 2) {\n        showError(tr(\"Must specify a host and application to quit\"));\n        return;\n    }\n\n    m_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 61.94592571866109}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n    Napi::HandleScope scope(env);\n\n    if (info.Length() < 1) {\n        Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n        return env.Null();\n    }\n\n    if (!info[0].IsNumber()) {\n        Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n        return env.Null();\n    }\n\n    int years = info[0].As<Napi::Number>().Int32Value();\n    QDate date = this->instance->addYears(years);\n    QDateWrap* dateWrap = new QDateWrap(date);\n    Napi::External<QDate> external = Napi::External<QDate>::New(env, &dateWrap->instance);\n    Napi::Object wrap = QDateWrap::constructor.New({external});\n    return wrap;\n}", "CodeBleu_score": 58.57281668786602}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  if(info.Length() < 1) {\n    Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  if(!info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  int years = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(years);\n  auto instance = QDateWrap::constructor.New({\n    Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))\n  });\n  return instance;\n}", "CodeBleu_score": 68.29757512377724}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  if(info.Length() < 1) {\n    Napi::TypeError::New(env, \"Wrong number of arguments\")\n      .ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  if(!info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  int years = info[0].As<Napi::Number>().Int32Value();\n\n  QDate date = this->instance->addYears(years);\n  Napi::External<QDate> external = Napi::External<QDate>::New(env, new QDate(date));\n  Napi::Object obj = QDateWrap::constructor.New({ external });\n  return obj;\n}", "CodeBleu_score": 59.62107869745801}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QDateWrap* dateWrap = new QDateWrap(QDate::currentDate());\n  return dateWrap->getInternalInstance();\n}", "CodeBleu_score": 43.387994465273096}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QDateWrap* date = new QDateWrap(QDate::currentDate());\n  return date->getInternalInstance();\n}", "CodeBleu_score": 43.637587796475785}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  Napi::Object wrap = QDateWrap::constructor.New({\n    Napi::External<QDate>::New(env, new QDate(QDate::currentDate()))\n  });\n  return wrap;\n}", "CodeBleu_score": 55.360006438736754}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n    Napi::Number year = info[0].As<Napi::Number>();\n    bool isLeapYear = QDate::isLeapYear(year.Int32Value());\n    return Napi::Value::From(env, isLeapYear);\n}", "CodeBleu_score": 69.33837463186019}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\n  if (info.Length() < 1) {\n    Napi::TypeError::New(env, \"Wrong number of arguments\")\n        .ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  if (!info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  int year = info[0].As<Napi::Number>().Int32Value();\n\n  return Napi::Value::From(env, QDate::isLeapYear(year));\n}", "CodeBleu_score": 77.75330231701429}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  if (info.Length() < 1) {\n    Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n  Napi::Number year = info[0].As<Napi::Number>();\n  bool isLeapYear = QDate::isLeapYear(year.Int32Value());\n  return Napi::Boolean::New(env, isLeapYear);\n}", "CodeBleu_score": 60.75084878939605}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  return Napi::Value::From(env, this->instance->daysTo(other->getInternalInstance()));\n}", "CodeBleu_score": 69.4959422564733}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  return Napi::Value::From(env, this->instance->daysTo(*other->getInternalInstance()));\n}", "CodeBleu_score": 71.11019116827138}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n  return Napi::Value::From(env, this->instance->daysTo(*otherWrap->getInternalInstance()));\n}", "CodeBleu_score": 59.5659011296926}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  qint64 difference = this->instance->msecsTo(*other->getInternalInstance());\n  return Napi::Value::From(env, difference);\n}", "CodeBleu_score": 80.40202449046761}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  return Napi::Value::From(env, this->instance->msecsTo(*other->getInternalInstance()));\n}", "CodeBleu_score": 71.1278748770255}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  qint64 difference = this->instance->msecsTo(*other->getInternalInstance());\n  return Napi::Value::From(env, difference);\n}", "CodeBleu_score": 80.40202449046761}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::CallbackInfo const& info\n    Napi::Env env = info.Env();\n    Napi::Number row = info[0].As<Napi::Number>();\n    Napi::Object parentObject = info[1].As<Napi::Object>();\n    QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n    QModelIndex* parent = parentWrap->getInternalInstance();\n    bool result = this->instance->rowIntersectsSelection(row.Int32Value(), *parent);\n    return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 74.07334863764736}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\n  Napi::Number row = info[0].As<Napi::Number>();\n  Napi::Object parentObject = info[1].As<Napi::Object>();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row.Int32Value(), *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 72.95229337013318}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\n    Napi::Number row = info[0].As<Napi::Number>();\n    Napi::Object parentObject = info[1].As<Napi::Object>();\n    QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n    QModelIndex* parent = parentWrap->getInternalInstance();\n    bool result = this->instance->rowIntersectsSelection(row, *parent);\n    return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 76.81904134677099}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n    Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n    QSizeWrap* otherSize = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n    QSize* result = new QSize(this->instance->expandedTo(*otherSize->getInternalInstance()));\n    Napi::External<QSize> resultWrapper = Napi::External<QSize>::New(env, result);\n    return QSizeWrap::constructor.New({resultWrapper});\n}", "CodeBleu_score": 66.86375133653074}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n    Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n    QSizeWrap* otherSize = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n    QSize expandedSize = this->instance->expandedTo(*otherSize->getInternalInstance());\n    Napi::External<QSize> result = Napi::External<QSize>::New(env, new QSize(expandedSize));\n    return QSizeWrap::constructor.New({ result });\n}", "CodeBleu_score": 67.7307949864748}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n  QSizeWrap* otherSize = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n  QSize expandedSize = this->instance->expandedTo(*otherSize->getInternalInstance());\n  auto instance = QSizeWrap::constructor.New(\n    {Napi::External<QSize>::New(env, new QSize(expandedSize))});\n  return instance;\n}", "CodeBleu_score": 73.4926586363876}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env,\n    Napi::CallbackInfo const& info\n}", "CodeBleu_score": 8.543308263172307}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env,\n    Napi::CallbackInfo const& info\n}", "CodeBleu_score": 8.543308263172307}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env,\n  Napi::CallbackInfo const& info\n}", "CodeBleu_score": 8.291223922271412}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  return QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, const_cast<QMimeData*>(mimeData))});\n}", "CodeBleu_score": 58.08397813138122}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  // Get the mode from the first argument\n  int mode = info[0].As<Napi::Number>().Int32Value();\n\n  // Retrieve the MIME data from the clipboard\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode));\n\n  // Clone the MIME data into a new instance\n  QMimeData* clonedMimeData = new QMimeData();\n  clonedMimeData->setUrls(mimeData->urls());\n  clonedMimeData->setText(mimeData->text());\n  clonedMimeData->setHtml(mimeData->html());\n  clonedMimeData->setImageData(mimeData->imageData());\n  clonedMimeData->setColorData(mimeData->colorData());\n  clonedMimeData->setData(mimeData->formats());\n\n  // Create a new instance of QMimeDataWrap\n  Napi::Object clone = QMimeDataWrap::constructor.New(\n    { Napi::External<QMimeData>::New(env, clonedMimeData) });\n\n  return clone;\n}", "CodeBleu_score": 62.917529196815295}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  QMimeDataWrap* mimeDataWrap = QMimeDataWrap::constructor.New(\n    {  Napi::External<QMimeData>::New(env, const_cast<QMimeData*>(mimeData)) });\n  return mimeDataWrap->getInternalInstance();\n}", "CodeBleu_score": 64.7547386259061}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  QObject* source = this->instance->source();\n  Napi::Value external = Napi::External<QObject>::New(env, source);\n  Napi::Object wrap = QObjectWrap::constructor.New({ external });\n  return wrap;\n}", "CodeBleu_score": 70.07832102209795}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  if (source == nullptr) {\n    return env.Null();\n  }\n  return QObjectWrap::constructor.New({Napi::External<QObject>::New(env, source)});\n}", "CodeBleu_score": 73.80723275741632}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  Napi::Object wrap = QObjectWrap::constructor.New(\n      { Napi::External<QObject>::New(env, source) });\n  return wrap;\n}", "CodeBleu_score": 80.54110495446224}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\ttry {\n        base.OnMouseMove(e);\n        if (e.X >= 0 && e.Y >= 0) {\n            int selectIndex = (int)Math.Round((double)((e.X - Bars[0].X) / (double)Bars[0].Width));\n            if (selectIndex >= 0 && selectIndex < Bars.Count && Bars[selectIndex].Tips.IsValid) {\n                if (selectIndex != SelectIndex) {\n                    SelectIndex = selectIndex;\n                    ToolTip.Text = Bars[SelectIndex].Tips.Text;\n                    if (ToolTip.Text.Length > 0) {\n                        SizeF size = e.Graphics.MeasureString(ToolTip.Text, ToolTip.Font);\n                        if (size.Width > ToolTip.Width) {\n                            ToolTip.Width = (int)Math.Ceiling(size.Width);\n                        }\n                        if (size.Height > ToolTip.Height) {\n                            ToolTip.Height = (int)Math.Ceiling(size.Height);\n                        }\n                    }\n                }\n                Point location = new Point(e.X + 10, e.Y + 10);\n                if (location.X + ToolTip.Width > Width) {\n                    location.X = Width - ToolTip.Width;\n                }\n                if (location.Y + ToolTip.Height > Height) {\n                    location.Y = Height - ToolTip.Height;\n                }\n                ToolTip.Location = location;\n                ToolTip.Visible = Bars[SelectIndex].Tips.IsValid;\n            } else {\n                ToolTip.Visible = false;\n            }\n        } else {\n            ToolTip.Visible = false;\n        }\n    } catch (Exception ex) {\n        Console.WriteLine(ex);\n    }\n}", "CodeBleu_score": 39.00337110648069}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\ttry {\n\t\tbase.OnMouseMove(e);\n\t\tif (e.X < 0 || e.Y < 0 || e.X > Width || e.Y > Height) {\n\t\t\treturn;\n\t\t}\n\t\tint selectIndex = (int) Math.Floor((double) ((e.X - Left) / (Width - Left) * Bars.Length));\n\t\tif (selectIndex < 0 || selectIndex >= Bars.Length) {\n\t\t\treturn;\n\t\t}\n\t\tif (Bars[selectIndex] == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (!Bars[selectIndex].Tips.IsValid) {\n\t\t\treturn;\n\t\t}\n\t\tif (selectIndex != this.SelectIndex) {\n\t\t\tthis.SelectIndex = selectIndex;\n\t\t\tthis.ToolTipText = Bars[selectIndex].Tips.Text;\n\t\t\tthis.ToolTipSize = Bars[selectIndex].Tips.Size;\n\t\t}\n\t\tint x = e.X + 10;\n\t\tif (x + ToolTipSize.Width > Width) {\n\t\t\tx = Width - ToolTipSize.Width;\n\t\t}\n\t\tint y = e.Y - ToolTipSize.Height - 10;\n\t\tif (y < Top) {\n\t\t\ty = Top;\n\t\t}\n\t\tToolTipLocation = new Point(x, y);\n\t\tToolTipVisible = Bars[selectIndex].Tips.IsValid;\n\t} catch (Exception ex) {\n\t\tConsole.WriteLine(ex.Message);\n\t}\n}", "CodeBleu_score": 23.556855248767576}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\ttry {\n\t\tbase.OnMouseMove(e);\n\t\tif (e.Location.X < 0 || e.Location.X > Width || e.Location.Y < 0 || e.Location.Y > Height) {\n\t\t\treturn;\n\t\t}\n\t\tint selectIndex = (int)Math.Floor((double)((e.Location.X - Margin.Left) / BarWidth));\n\t\tif (selectIndex < 0 || selectIndex >= Bars.Count) {\n\t\t\treturn;\n\t\t}\n\t\tif (Bars[selectIndex].Tips.IsValid) {\n\t\t\tif (Tips.Text != Bars[selectIndex].Tips.Text) {\n\t\t\t\tTips.Text = Bars[selectIndex].Tips.Text;\n\t\t\t\tTips.Size = Tips.GetPreferredSize(Size.Empty);\n\t\t\t}\n\t\t\tTips.Location = new Point(Math.Max(Margin.Left + selectIndex * BarWidth + (BarWidth - Tips.Width) / 2, Margin.Left), Math.Max(Margin.Top + (Height - Tips.Height) / 2, Margin.Top));\n\t\t\tTips.Visible = true;\n\t\t} else {\n\t\t\tTips.Visible = false;\n\t\t}\n\t} catch (Exception ex) {\n\t\tConsole.WriteLine(ex.Message);\n\t}\n}", "CodeBleu_score": 28.559177691522645}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\t) g.DrawLine(ForeColor, new Point(DrawOrigin.X, Option.Grid.Top), new Point(DrawOrigin.X + DrawSize.Width, Option.Grid.Top));\n\n            g.DrawLine(ForeColor, DrawOrigin, new Point(DrawOrigin.X, DrawOrigin.Y - DrawSize.Height));\n            g.DrawLine(ForeColor, DrawOrigin, new Point(Width - Option.Grid.Right, DrawOrigin.Y));\n\n            if (Option.XAxis.AxisTick.Show)\n            {\n                float start = DrawOrigin.X + DrawBarWidth / 2.0f;\n                for (int i = 0; i < Option.XAxis.Data.Count; i++)\n                {\n                    g.DrawLine(ForeColor, start, DrawOrigin.Y, start, DrawOrigin.Y + Option.XAxis.AxisTick.Length);\n                    start += DrawBarWidth;\n                }\n            }\n\n            if (Option.XAxis.AxisLabel.Show)\n            {\n                float start = DrawOrigin.X;\n                foreach (var data in Option.XAxis.Data)\n                {\n                    int angle = (Option.XAxis.AxisLabel.Angle + 36000) % 360;\n                    if (angle > 0 && angle <= 90)\n                        g.DrawRotateString(data, TempFont, ForeColor, new PointF(start + DrawBarWidth / 2, DrawOrigin.Y + Option.XAxis.AxisTick.Length),\n                            new StringFormat() { Alignment = StringAlignment.Far }, (3600 - Option.XAxis.AxisLabel.Angle) % 360);\n                    else\n                        g.DrawString(data, TempFont, ForeColor, new Rectangle((int)start, DrawOrigin.Y + Option.XAxis.AxisTick.Length, (int)DrawBarWidth, Height), ContentAlignment.TopCenter);\n\n                    start += DrawBarWidth;\n                }\n\n                if (Option.XAxis.Name.IsValid())\n                {\n                    g.DrawString(Option.XAxis.Name, TempFont, ForeColor, new Rectangle(DrawOrigin.X, 0, DrawSize.Width, Height - 16), ContentAlignment.BottomCenter);\n                }\n            }\n\n            if (Option.ShowFullRect)\n            {\n                g.DrawRectangle(ForeColor, Option.Grid.Left, Option.Grid.Top, DrawSize.Width, DrawSize.Height);\n            }\n\n            double[] YLabels = YScale.CalcLabels();\n            float[] labels = YScale.CalcYPixels(YLabels, DrawOrigin.Y, DrawSize.Height);\n            float wmax = 0;\n            for (int i = 0; i < labels.Length; i++)\n            {\n                if (labels[i] > DrawOrigin.Y) continue;\n                if (labels[i] < Option.Grid.Top) continue;\n                if (Option.YAxis.AxisTick.Show)\n                {\n                    g.DrawLine(ForeColor, DrawOrigin.X, labels[i], DrawOrigin.X - Option.YAxis.AxisTick.Length, labels[i]);\n\n                    if (YLabels[i].IsNanOrInfinity()) continue;\n                    if (!Option.YAxis.ShowGridLine) continue;\n                    if (!YLabels[i].EqualsDouble(0))\n                    {\n                        using Pen pn = new Pen(ForeColor);\n                        pn.DashStyle = DashStyle.Dash;\n                        pn.DashPattern = new float[] { 3, 3 };\n                        g.DrawLine(pn, DrawOrigin.X, labels[i], Width - Option.Grid.Right, labels[i]);\n                    }\n                    else\n                    {\n                        g.DrawLine(ForeColor, DrawOrigin.X, labels[i], Width - Option.Grid.Right, labels[i]);\n                    }\n                }\n\n                if (Option.YAxis.AxisLabel.Show)\n                {\n                    string label = YLabels[i].ToString(Option.YAxis.AxisLabel.DecimalPlaces >= 0 ? \"F\" + Option.YAxis.AxisLabel.DecimalPlaces : YScale.Format);\n                    Size sf = TextRenderer.MeasureText(label, TempFont);\n                    wmax = Math.Max(wmax, sf.Width);\n                    g.DrawString(label, TempFont, ForeColor, new Rectangle(DrawOrigin.X - Option.YAxis.AxisTick.Length - Width, (int)labels[i] - Height, Width, Height * 2), ContentAlignment.MiddleRight);\n                }\n            }\n\n            if (Option.YAxis.AxisLabel.Show && Option.YAxis.Name.IsValid())\n            {\n                Size sfName = TextRenderer.MeasureText(Option.YAxis.Name, TempFont);\n                float xx = DrawOrigin.X - Option.YAxis.AxisTick.Length - wmax - sfName.Height / 2.0f;\n                float yy = Option.Grid.Top + DrawSize.Height / 2.0f;\n                g.DrawRotateString(Option.YAxis.Name, TempFont, ForeColor, new PointF(xx, yy), 270);\n            }\n        }", "CodeBleu_score": 39.75368058929858}, {"code": "protected override void DrawOption(Graphics g){\n\t) g.DrawLine(ForeColor, new Point(DrawOrigin.X, Option.Grid.Top), new Point(DrawOrigin.X + DrawSize.Width, Option.Grid.Top));\n\n            g.DrawLine(ForeColor, DrawOrigin, new Point(DrawOrigin.X, DrawOrigin.Y - DrawSize.Height));\n            g.DrawLine(ForeColor, DrawOrigin, new Point(Width - Option.Grid.Right, DrawOrigin.Y));\n\n            if (Option.XAxis.AxisTick.Show)\n            {\n                float start = DrawOrigin.X + DrawBarWidth / 2.0f;\n                for (int i = 0; i < Option.XAxis.Data.Count; i++)\n                {\n                    g.DrawLine(ForeColor, start, DrawOrigin.Y, start, DrawOrigin.Y + Option.XAxis.AxisTick.Length);\n                    start += DrawBarWidth;\n                }\n            }\n\n            if (Option.XAxis.AxisLabel.Show)\n            {\n                float start = DrawOrigin.X;\n                foreach (var data in Option.XAxis.Data)\n                {\n                    int angle = (Option.XAxis.AxisLabel.Angle + 36000) % 360;\n                    if (angle > 0 && angle <= 90)\n                        g.DrawRotateString(data, TempFont, ForeColor, new PointF(start + DrawBarWidth / 2, DrawOrigin.Y + Option.XAxis.AxisTick.Length),\n                            new StringFormat() { Alignment = StringAlignment.Far }, (3600 - Option.XAxis.AxisLabel.Angle) % 360);\n                    else\n                        g.DrawString(data, TempFont, ForeColor, new Rectangle((int)start, DrawOrigin.Y + Option.XAxis.AxisTick.Length, (int)DrawBarWidth, Height), ContentAlignment.TopCenter);\n\n                    start += DrawBarWidth;\n                }\n\n                if (Option.XAxis.Name.IsValid())\n                {\n                    g.DrawString(Option.XAxis.Name, TempFont, ForeColor, new Rectangle(DrawOrigin.X, 0, DrawSize.Width, Height - 16), ContentAlignment.BottomCenter);\n                }\n            }\n\n            if (Option.ShowFullRect)\n            {\n                g.DrawRectangle(ForeColor, Option.Grid.Left, Option.Grid.Top, DrawSize.Width, DrawSize.Height);\n            }\n\n            double[] YLabels = YScale.CalcLabels();\n            float[] labels = YScale.CalcYPixels(YLabels, DrawOrigin.Y, DrawSize.Height);\n            float wmax = 0;\n            for (int i = 0; i < labels.Length; i++)\n            {\n                if (labels[i] > DrawOrigin.Y) continue;\n                if (labels[i] < Option.Grid.Top) continue;\n                if (Option.YAxis.AxisTick.Show)\n                {\n                    g.DrawLine(ForeColor, DrawOrigin.X, labels[i], DrawOrigin.X - Option.YAxis.AxisTick.Length, labels[i]);\n\n                    if (YLabels[i].IsNanOrInfinity()) continue;\n                    if (!Option.YAxis.ShowGridLine) continue;\n                    if (!YLabels[i].EqualsDouble(0))\n                    {\n                        using Pen pn = new Pen(ForeColor);\n                        pn.DashStyle = DashStyle.Dash;\n                        pn.DashPattern = new float[] { 3, 3 };\n                        g.DrawLine(pn, DrawOrigin.X, labels[i], Width - Option.Grid.Right, labels[i]);\n                    }\n                    else\n                    {\n                        g.DrawLine(ForeColor, DrawOrigin.X, labels[i], Width - Option.Grid.Right, labels[i]);\n                    }\n                }\n\n                if (Option.YAxis.AxisLabel.Show)\n                {\n                    string label = YLabels[i].ToString(Option.YAxis.AxisLabel.DecimalPlaces >= 0 ? \"F\" + Option.YAxis.AxisLabel.DecimalPlaces : YScale.Format);\n                    Size sf = TextRenderer.MeasureText(label, TempFont);\n                    wmax = Math.Max(wmax, sf.Width);\n                    g.DrawString(label, TempFont, ForeColor, new Rectangle(DrawOrigin.X - Option.YAxis.AxisTick.Length - Width, (int)labels[i] - Height, Width, Height * 2), ContentAlignment.MiddleRight);\n                }\n            }\n\n            if (Option.YAxis.AxisLabel.Show && Option.YAxis.Name.IsValid())\n            {\n                Size sfName = TextRenderer.MeasureText(Option.YAxis.Name, TempFont);\n                float xx = DrawOrigin.X - Option.YAxis.AxisTick.Length - wmax - sfName.Height / 2.0f;\n                float yy = Option.Grid.Top + DrawSize.Height / 2.0f;\n                g.DrawRotateString(Option.YAxis.Name, TempFont, ForeColor, new PointF(xx, yy), 270);\n            }\n        }", "CodeBleu_score": 39.75368058929858}, {"code": "protected override void DrawOption(Graphics g){\n\t) g.DrawLine(ForeColor, new Point(DrawOrigin.X, Option.Grid.Top), new Point(DrawOrigin.X + DrawSize.Width, Option.Grid.Top));\n\n            g.DrawLine(ForeColor, DrawOrigin, new Point(DrawOrigin.X, DrawOrigin.Y - DrawSize.Height));\n            g.DrawLine(ForeColor, DrawOrigin, new Point(Width - Option.Grid.Right, DrawOrigin.Y));\n\n            if (Option.XAxis.AxisTick.Show)\n            {\n                float start = DrawOrigin.X + DrawBarWidth / 2.0f;\n                for (int i = 0; i < Option.XAxis.Data.Count; i++)\n                {\n                    g.DrawLine(ForeColor, start, DrawOrigin.Y, start, DrawOrigin.Y + Option.XAxis.AxisTick.Length);\n                    start += DrawBarWidth;\n                }\n            }\n\n            if (Option.XAxis.AxisLabel.Show)\n            {\n                float start = DrawOrigin.X;\n                foreach (var data in Option.XAxis.Data)\n                {\n                    int angle = (Option.XAxis.AxisLabel.Angle + 36000) % 360;\n                    if (angle > 0 && angle <= 90)\n                        g.DrawRotateString(data, TempFont, ForeColor, new PointF(start + DrawBarWidth / 2, DrawOrigin.Y + Option.XAxis.AxisTick.Length),\n                            new StringFormat() { Alignment = StringAlignment.Far }, (3600 - Option.XAxis.AxisLabel.Angle) % 360);\n                    else\n                        g.DrawString(data, TempFont, ForeColor, new Rectangle((int)start, DrawOrigin.Y + Option.XAxis.AxisTick.Length, (int)DrawBarWidth, Height), ContentAlignment.TopCenter);\n\n                    start += DrawBarWidth;\n                }\n\n                if (Option.XAxis.Name.IsValid())\n                {\n                    g.DrawString(Option.XAxis.Name, TempFont, ForeColor, new Rectangle(DrawOrigin.X, 0, DrawSize.Width, Height - 16), ContentAlignment.BottomCenter);\n                }\n            }\n\n            if (Option.ShowFullRect)\n            {\n                g.DrawRectangle(ForeColor, Option.Grid.Left, Option.Grid.Top, DrawSize.Width, DrawSize.Height);\n            }\n\n            double[] YLabels = YScale.CalcLabels();\n            float[] labels = YScale.CalcYPixels(YLabels, DrawOrigin.Y, DrawSize.Height);\n            float wmax = 0;\n            for (int i = 0; i < labels.Length; i++)\n            {\n                if (labels[i] > DrawOrigin.Y) continue;\n                if (labels[i] < Option.Grid.Top) continue;\n                if (Option.YAxis.AxisTick.Show)\n                {\n                    g.DrawLine(ForeColor, DrawOrigin.X, labels[i], DrawOrigin.X - Option.YAxis.AxisTick.Length, labels[i]);\n\n                    if (YLabels[i].IsNanOrInfinity()) continue;\n                    if (!Option.YAxis.ShowGridLine) continue;\n                    if (!YLabels[i].EqualsDouble(0))\n                    {\n                        using Pen pn = new Pen(ForeColor);\n                        pn.DashStyle = DashStyle.Dash;\n                        pn.DashPattern = new float[] { 3, 3 };\n                        g.DrawLine(pn, DrawOrigin.X, labels[i], Width - Option.Grid.Right, labels[i]);\n                    }\n                    else\n                    {\n                        g.DrawLine(ForeColor, DrawOrigin.X, labels[i], Width - Option.Grid.Right, labels[i]);\n                    }\n                }\n\n                if (Option.YAxis.AxisLabel.Show)\n                {\n                    string label = YLabels[i].ToString(Option.YAxis.AxisLabel.DecimalPlaces >= 0 ? \"F\" + Option.YAxis.AxisLabel.DecimalPlaces : YScale.Format);\n                    Size sf = TextRenderer.MeasureText(label, TempFont);\n                    wmax = Math.Max(wmax, sf.Width);\n                    g.DrawString(label, TempFont, ForeColor, new Rectangle(DrawOrigin.X - Option.YAxis.AxisTick.Length - Width, (int)labels[i] - Height, Width, Height * 2), ContentAlignment.MiddleRight);\n                }\n            }\n\n            if (Option.YAxis.AxisLabel.Show && Option.YAxis.Name.IsValid())\n            {\n                Size sfName = TextRenderer.MeasureText(Option.YAxis.Name, TempFont);\n                float xx = DrawOrigin.X - Option.YAxis.AxisTick.Length - wmax - sfName.Height / 2.0f;\n                float yy = Option.Grid.Top + DrawSize.Height / 2.0f;\n                g.DrawRotateString(Option.YAxis.Name, TempFont, ForeColor, new PointF(xx, yy), 270);\n            }\n        }", "CodeBleu_score": 39.75368058929858}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\tif (SelectedIndex < 0) return;\n\tint x = Origin.X + SelectedIndex * BarWidth;\n\tif (ToolTipType == ToolTipType.Line) {\n\t\tg.DrawLine(Pens.Black, x, Origin.Y, x, Origin.Y + GridHeight);\n\t} else if (ToolTipType == ToolTipType.Shadow) {\n\t\tg.FillRectangle(Brushes.Black, x, Origin.Y, BarWidth, GridHeight);\n\t}\n}", "CodeBleu_score": 25.373818797450177}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\tif (SelectedIndex == -1) return;\n\tint x = (int)(SelectedIndex * BarWidth + OriginX);\n\tif (ToolTipType == ToolTipType.Line) {\n\t\tg.DrawLine(Pens.Black, x, OriginY, x, OriginY + GridHeight);\n\t} else if (ToolTipType == ToolTipType.Shadow) {\n\t\tg.FillRectangle(Brushes.Black, x, OriginY, BarWidth, GridHeight);\n\t}\n}", "CodeBleu_score": 22.079280996373978}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t// If no item is selected, return immediately\n\tif (SelectedIndex == -1) return;\n\n\t// Set the drawing origin\n\tint xOrigin = this.LeftMargin;\n\tint yOrigin = this.TopMargin;\n\n\t// Calculate the bar width\n\tint barWidth = (int)Math.Round((double)this.Width / this.Items.Count);\n\n\t// Calculate the tooltip position\n\tint x = xOrigin + SelectedIndex * barWidth;\n\tint y = yOrigin;\n\n\t// Calculate the tooltip dimensions\n\tint width = barWidth;\n\tint height = this.Height - this.BottomMargin - this.TopMargin;\n\n\t// Set the tooltip color\n\tColor color = Color.FromArgb(128, this.ToolTipColor);\n\n\t// Draw the tooltip\n\tif (this.ToolTipType == ToolTipType.Line)\n\t\tg.DrawLine(new Pen(color, 1), x, y, x, y + height);\n\telse if (this.ToolTipType == ToolTipType.Shadow)\n\t\tg.FillRectangle(new SolidBrush(color), x, y, width, height);\n}", "CodeBleu_score": 26.101885192563778}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\tif (!title.Text.IsValid) return;\n\t\t\tif (title.Font == null) return;\n\t\t\tif (title.FontColor == Color.Empty) return;\n\n\t\t\t// Measure the text size\n\t\t\tSizeF textSize = g.MeasureString(title.Text.Value, title.Font, new SizeF(float.MaxValue, float.MaxValue), title.StringFormat);\n\n\t\t\t// Draw the title text\n\t\t\tg.DrawString(title.Text.Value, title.Font, new SolidBrush(title.FontColor), new RectangleF(title.Position.X, title.Position.Y, textSize.Width, textSize.Height), title.StringFormat);\n\n\t\t\t// Draw the subtitle text\n\t\t\tif (title.SubText.IsValid) {\n\t\t\t\tFont subFont = title.Font.DPIScaleFont(title.SubFontScale);\n\t\t\t\tSizeF subTextSize = g.MeasureString(title.SubText.Value, subFont, new SizeF(float.MaxValue, float.MaxValue), title.StringFormat);\n\t\t\t\tfloat subX = title.Position.X;\n\t\t\t\tfloat subY = title.Position.Y + textSize.Height + title.SubFontScale * subFont.Size;\n\t\t\t\tswitch (title.Alignment) {\n\t\t\t\t\tcase ContentAlignment.BottomCenter:\n\t\t\t\t\t\tsubX = title.Position.X + textSize.Width / 2 - subTextSize.Width / 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ContentAlignment.BottomLeft:\n\t\t\t\t\t\tsubX = title.Position.X;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ContentAlignment.BottomRight:\n\t\t\t\t\t\tsubX = title.Position.X + textSize.Width - subTextSize.Width;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ContentAlignment.MiddleCenter:\n\t\t\t\t\t\tsubX = title.Position.X + textSize.Width / 2 - subTextSize.Width / 2", "CodeBleu_score": 35.45134568307813}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\tif (!title.Text.IsValid) {\n   return;\n  }\n\n  SizeF size = g.MeasureString(title.Text.Text, title.Font);\n  PointF pos = new PointF(title.Position.X, title.Position.Y);\n  switch (title.Alignment) {\n   case Alignment.Center:\n    pos.X -= size.Width / 2;\n    break;\n   case Alignment.Right:\n    pos.X -= size.Width;\n    break;\n  }\n  pos.Y -= size.Height / 2;\n  g.DrawString(title.Text.Text, title.Font, title.Text.Color, pos);\n\n  if (!title.SubText.IsValid) {\n   return;\n  }\n\n  Font subFont = title.Font.DPIScaleFont(0.5f);\n  size = g.MeasureString(title.SubText.Text, subFont);\n  pos = new PointF(title.Position.X, title.Position.Y);\n  switch (title.Alignment) {\n   case Alignment.Center:\n    pos.X -= size.Width / 2;\n    break;\n   case Alignment.Right:\n    pos.X -= size.Width;\n    break;\n  }\n  pos.Y += size.Height / 2;\n  g.DrawString(title.SubText.Text, subFont, title.SubText.Color, pos);\n }", "CodeBleu_score": 35.571066594895626}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\tif (title.Text.IsValid && title.Font.IsValid) {\n   var size = TextRenderer.MeasureText(g, title.Text, title.Font, title.TextFormat);\n   var pos = title.Position;\n   pos.X -= size.Width * title.Alignment.X;\n   pos.Y -= size.Height * title.Alignment.Y;\n   g.DrawString(title.Text, title.Font, title.Color, pos, title.TextFormat);\n  }\n  if (title.SubText.IsValid && title.SubFont.IsValid) {\n   using (var subFont = title.SubFont.DPIScaleFont(g)) {\n    var size = TextRenderer.MeasureText(g, title.SubText, subFont, title.TextFormat);\n    var pos = title.Position;\n    pos.X -= size.Width * title.Alignment.X;\n    pos.Y -= size.Height * title.Alignment.Y;\n    pos.Y += title.Font.Height * title.SubAlignment.Y;\n    g.DrawString(title.SubText, subFont, title.SubColor, pos, title.TextFormat);\n   }\n  }\n }", "CodeBleu_score": 36.27404002246899}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\temptyOption = new DoughnutChartOptions {\n        Title = new Title { Text = \"Doughnut Chart\" },\n        Subtitle = new Subtitle { Text = \"Basic doughnut chart\" },\n        Series = new List<DoughnutSeries> {\n            new DoughnutSeries {\n                Name = \"Doughnut\",\n                Center = new List<int> { 200, 100 },\n                Radius = new List<int> { 100, 100 },\n                Data = new List<DoughnutData> {\n                    new DoughnutData {\n                        Name = \"Data1\",\n                        Y = 10\n                    },\n                    new DoughnutData {\n                        Name = \"Data2\",\n                        Y = 20\n                    },\n                    new DoughnutData {\n                        Name = \"Data3\",\n                        Y = 30\n                    },\n                    new DoughnutData {\n                        Name = \"Data4\",\n                        Y = 40\n                    },\n                    new DoughnutData {\n                        Name = \"Data5\",\n                        Y = 50\n                    }\n                }\n            }\n        }\n    };\n}", "CodeBleu_score": 13.740247924404638}, {"code": "protected override void CreateEmptyOption(){\n\tthis.option = new DoughnutChartOptions();\n    this.option.Title.Text = \"Doughnut Chart\";\n    this.option.Title.Subtext = \"Basic doughnut chart\";\n    this.option.Series.Add(new DoughnutSeries {\n        Name = \"Data\",\n        Center = new object[] { \"50%\", \"50%\" },\n        Radius = new object[] { \"40%\", \"60%\" },\n        Data = new object[] {\n            new object[] { \"Data1\", 30 },\n            new object[] { \"Data2\", 40 },\n            new object[] { \"Data3\", 20 },\n            new object[] { \"Data4\", 10 },\n            new object[] { \"Data5\", 5 }\n        }\n    });\n}", "CodeBleu_score": 25.61917942335057}, {"code": "protected override void CreateEmptyOption(){\n\tthis.option = new DoughnutChartOptions {\n        Title = new Title {\n            Text = \"Doughnut Chart\"\n        },\n        Subtitle = new Subtitle {\n            Text = \"Basic doughnut chart\"\n        },\n        Series = new SeriesCollection {\n            new DoughnutSeries {\n                Name = \"Doughnut\",\n                CenterPosition = new Position {\n                    X = 0.5,\n                    Y = 0.5\n                },\n                Radius = new Radius {\n                    Inner = 0.4,\n                    Outer = 0.5\n                },\n                Data = new DataCollection {\n                    new Data {\n                        Name = \"Data1\",\n                        Value = 20\n                    },\n                    new Data {\n                        Name = \"Data2\",\n                        Value = 20\n                    },\n                    new Data {\n                        Name = \"Data3\",\n                        Value = 20\n                    },\n                    new Data {\n                        Name = \"Data4\",\n                        Value = 20\n                    },\n                    new Data {\n                        Name = \"Data5\",\n                        Value = 20\n                    }\n                }\n            }\n        }\n    };\n}", "CodeBleu_score": 12.025040958554206}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\tdouble[] values = new double[Count + 1];\n\tfor (int i = 0; i <= Count; i++) {\n\t\tif (AxisType == AxisType.DateTime) {\n\t\t\tvalues[i] = dateTime.AddMilliseconds(Start, Interval * i).Ticks;\n\t\t} else {\n\t\t\tvalues[i] = Start + Interval * i;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 57.64571228963374}, {"code": "public double[] LabelValues(){\n\tvar values = new double[Count + 1];\n\n\tif (AxisType == AxisType.DateTime) {\n\t\tvar start = new DateTimeInt64(Start);\n\t\tfor (int i = 0; i < values.Length; i++) {\n\t\t\tvalues[i] = start.AddMilliseconds(Interval * i).Ticks;\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 0; i < values.Length; i++) {\n\t\t\tvalues[i] = Start + Interval * i;\n\t\t}\n\t}\n\n\treturn values;\n}", "CodeBleu_score": 50.43388408096931}, {"code": "public double[] LabelValues(){\n\tdouble[] values = new double[Count + 1];\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 start = new DateTimeInt64(Start);\n\t\tfor (int i = 0; i <= Count; i++) {\n\t\t\tvalues[i] = start.ToOADate();\n\t\t\tstart.AddMilliseconds(Interval);\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i <= Count; i++) {\n\t\t\tvalues[i] = Start + i * Interval;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 56.72325678510008}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tIntPtr hDC = m.WParam;\n  if (hDC.ToInt32() != 0) {\n    using (Pen pen = new Pen(color, width)) {\n      using (Graphics g = Graphics.FromHdc(hDC)) {\n        g.SmoothingMode = SmoothingMode.AntiAlias;\n        g.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n      }\n    }\n    m.Result = (IntPtr)1;\n  }\n}", "CodeBleu_score": 49.38414873834399}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tIntPtr hDC = m.WParam;\n  if (hDC.ToInt32() != 0) {\n    using (Pen p = new Pen(color, width)) {\n      using (Graphics g = Graphics.FromHdc(hDC)) {\n        g.SmoothingMode = SmoothingMode.AntiAlias;\n        g.DrawRectangle(p, 0, 0, control.Width - 1, control.Height - 1);\n      }\n    }\n    ReleaseDC(m.HWnd, hDC);\n  }\n}", "CodeBleu_score": 45.202659153992194}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tif (m.Msg == 0xf) {\n        IntPtr hDC = GetDC(m.HWnd);\n        if (hDC.ToInt32() != 0) {\n            using (Graphics g = Graphics.FromHdc(hDC)) {\n                using (Pen p = new Pen(color, width)) {\n                    g.SmoothingMode = SmoothingMode.AntiAlias;\n                    g.DrawRectangle(p, 0, 0, control.Width - 1, control.Height - 1);\n                }\n            }\n            ReleaseDC(m.HWnd, hDC);\n        }\n    }\n}", "CodeBleu_score": 62.85721645175831}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\tvar bmp = new Bitmap(ctrl.Width, ctrl.Height);\n    using (var gr = Graphics.FromImage(bmp)) {\n        var hdc = gr.GetHdc();\n        var hdcSrc = Win32.User.GetWindowDC(ctrl.Handle);\n        var hdcMem = Win32.GDI.CreateCompatibleDC(hdcSrc);\n        var hBitmap = Win32.GDI.CreateCompatibleBitmap(hdcSrc, ctrl.Width, ctrl.Height);\n        var hOld = Win32.GDI.SelectObject(hdcMem, hBitmap);\n        Win32.GDI.PrintWindow(ctrl.Handle, hdcMem, 0);\n        bmp = Image.FromHbitmap(hBitmap);\n        Win32.GDI.SelectObject(hdcMem, hOld);\n        Win32.GDI.DeleteObject(hBitmap);\n        Win32.GDI.DeleteDC(hdcMem);\n        Win32.User.ReleaseDC(ctrl.Handle, hdcSrc);\n        gr.ReleaseHdc(hdc);\n    }\n    return bmp;\n}", "CodeBleu_score": 52.11186378363119}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t// get the control's window DC\n    IntPtr winDC = Win32.User.GetWindowDC(ctrl.Handle);\n    // get the control's client rectangle\n    Rectangle rc = ctrl.ClientRectangle;\n    // create a new DC\n    IntPtr dc = Win32.GDI.CreateCompatibleDC(winDC);\n    // create a new bitmap\n    IntPtr bmp = Win32.GDI.CreateCompatibleBitmap(winDC, rc.Width, rc.Height);\n    // select the bitmap into the new DC\n    IntPtr oldBmp = Win32.GDI.SelectObject(dc, bmp);\n    // copy the control's window content into the new DC\n    Win32.GDI.PrintWindow(ctrl.Handle, dc, 0);\n    // restore the old bitmap\n    Win32.GDI.SelectObject(dc, oldBmp);\n    // delete the used objects\n    Win32.GDI.DeleteDC(dc);\n    Win32.User.ReleaseDC(ctrl.Handle, winDC);\n    // create a Bitmap object from the HBitmap\n    Bitmap bitmap = Image.FromHbitmap(bmp);\n    // delete the HBitmap\n    Win32.GDI.DeleteObject(bmp);\n    // return the bitmap\n    return bitmap;\n}", "CodeBleu_score": 58.58947548790253}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\tBitmap bmp = null;\n    try {\n        IntPtr hdc = Win32.User.GetWindowDC(ctrl.Handle);\n        IntPtr hdcMem = Win32.GDI.CreateCompatibleDC(hdc);\n        IntPtr hBitmap = Win32.GDI.CreateCompatibleBitmap(hdc, ctrl.Width, ctrl.Height);\n        IntPtr hOld = Win32.GDI.SelectObject(hdcMem, hBitmap);\n        Win32.GDI.PrintWindow(ctrl.Handle, hdcMem, 0);\n        bmp = Image.FromHbitmap(hBitmap);\n        Win32.GDI.SelectObject(hdcMem, hOld);\n        Win32.GDI.DeleteObject(hBitmap);\n        Win32.GDI.DeleteDC(hdcMem);\n        Win32.User.ReleaseDC(ctrl.Handle, hdc);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.Message);\n    }\n    return bmp;\n}", "CodeBleu_score": 61.26270442680687}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\tvar field = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\tif(field == null) return;\n\tvar key = field.GetValue(null);\n\tif(key == null) return;\n\tvar events = button.Events;\n\tif(events == null) return;\n\tevents.RemoveHandler(key, events[key]);\n}", "CodeBleu_score": 24.076459128256232}, {"code": "public static void RemoveClickEvent(this Button button){\n\tFieldInfo eventClick = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (eventClick != null) {\n        object key = eventClick.GetValue(button);\n        if (key != null) {\n            EventHandlerList events = button.Events;\n            if (events != null) {\n                events.RemoveHandler(key, events[key]);\n            }\n        }\n    }\n}", "CodeBleu_score": 34.72974035511884}, {"code": "public static void RemoveClickEvent(this Button button){\n\tvar eventInfo = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (eventInfo == null) return;\n    var eventKey = eventInfo.GetValue(null);\n    var events = button.Events;\n    if (events == null || eventKey == null) return;\n    events.RemoveHandler(eventKey, button.Click);\n}", "CodeBleu_score": 38.99429072534567}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\tconst string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (var ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey))\n    {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null)\n        {\n            return CheckFor45PlusVersion((int) ndpKey.GetValue(\"Release\"));\n        }\n        else\n        {\n            return \"No 4.5 or later version detected\";\n        }\n    }\n}", "CodeBleu_score": 83.05696402422718}, {"code": "public static string CheckVersion(){\n\tconst string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey))\n    {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null)\n        {\n            return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        }\n        else\n        {\n            return \".NET Framework 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 85.36844121854111}, {"code": "public static string CheckVersion(){\n\tconst string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (var ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey))\n    {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null)\n        {\n            return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        }\n        else\n        {\n            return \"No 4.5 or later version detected\";\n        }\n    }\n}", "CodeBleu_score": 83.10179947771498}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t// check if the source and target are the same bitmap\n    if (source == target) {\n        throw new ArgumentException(nameof(source) + \" and \" + nameof(target) + \" are the same bitmap\");\n    }\n\n    // check if the source and target bitmaps have the same dimensions and pixel format\n    if (source.Size != target.Size || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    // lock the source and target bitmaps for fast access\n    using (FastBitmap sourceFastBitmap = source.FastLock()) {\n        using (FastBitmap targetFastBitmap = target.FastLock()) {\n            // get the address of the first line\n            IntPtr sourceData = sourceFastBitmap.Scan0;\n            IntPtr targetData = targetFastBitmap.Scan0;\n\n            // get the total bytes in the source image\n            int bytes = sourceFastBitmap.Stride * sourceFastBitmap.Height;\n\n            // copy the pixels from the source to the target\n            memcpy(targetData, sourceData, bytes);\n        }\n    }\n\n    return true;\n}", "CodeBleu_score": 57.61157053652056}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\tif (source == target) {\n        throw new ArgumentException(nameof(source) + \" and \" + nameof(target) + \" cannot be the same bitmap.\");\n    }\n\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    var sourceData = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);\n    var targetData = target.LockBits(new Rectangle(0, 0, target.Width, target.Height), ImageLockMode.WriteOnly, target.PixelFormat);\n\n    var sourceStride = sourceData.Stride;\n    var targetStride = targetData.Stride;\n    var height = source.Height;\n\n    unsafe {\n        byte* sourcePointer = (byte*)sourceData.Scan0.ToPointer();\n        byte* targetPointer = (byte*)targetData.Scan0.ToPointer();\n\n        for (var y = 0; y < height; y++) {\n            memcpy(targetPointer, sourcePointer, sourceStride);\n            sourcePointer += sourceStride;\n            targetPointer += targetStride;\n        }\n    }\n\n    source.UnlockBits(sourceData);\n    target.UnlockBits(targetData);\n\n    return true;\n}", "CodeBleu_score": 57.74221180060122}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t// check if the source and target are the same bitmap\n    if (source == target) {\n        throw new Exception(\"The source and target cannot be the same bitmap.\");\n    }\n\n    // check if the source and target have the same dimensions and pixel format\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    // get the source and target bitmaps' dimensions\n    int width = source.Width;\n    int height = source.Height;\n\n    // get the source and target bitmaps' pixel format size\n    int pixelFormatSize = Image.GetPixelFormatSize(source.PixelFormat) / 8;\n\n    // get the source and target bitmaps' stride\n    int sourceStride = source.Width * pixelFormatSize;\n    int targetStride = target.Width * pixelFormatSize;\n\n    // create a FastLock for the source bitmap\n    using (FastBitmap fastSource = source.FastLock()) {\n        // create a FastLock for the target bitmap\n        using (FastBitmap fastTarget = target.FastLock()) {\n            // get the source and target bitmaps' scan0\n            IntPtr sourceScan0 = fastSource.Scan0;\n            IntPtr targetScan0 = fastTarget.Scan0;\n\n            // iterate through the source bitmap's pixels\n            for (int y = 0; y < height; y++) {\n                // get the source and target pixels' position\n                IntPtr sourcePosition = sourceScan0 + (y * sourceStride);\n                IntPtr targetPosition = targetScan0 + (y * targetStride);\n\n                // use memcpy to copy the pixel data from the source to the target\n                memcpy(targetPosition, sourcePosition, sourceStride);\n            }\n        }\n    }\n\n    // return true to indicate a successful copy\n    return true;\n}", "CodeBleu_score": 61.59154321071898}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n    PointF mousePos = new PointF(e.X, e.Y);\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(mousePos.X);\n    }\n}", "CodeBleu_score": 56.913032286525414}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\n    PointF mousePosition = e.GetPosition(this);\n\n    if (e.LeftButton == MouseButtonState.Pressed) {\n        SetPercent(mousePosition.X);\n    }\n}", "CodeBleu_score": 33.32750950571264}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\n    PointF mousePosition = new PointF(e.X, e.Y);\n\n    if (e.Button == MouseButtons.Left)\n        SetPercent(mousePosition.X);\n}", "CodeBleu_score": 56.53489075665779}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\tRectangleF r = new RectangleF(0, 0, Width, Height);\n    if (m_valueOrientation == eValueOrientation.MaxToMin) {\n        r.X = 0;\n        r.Y = 0;\n        r.Width = Width;\n        r.Height = Height;\n    } else {\n        r.X = 0;\n        r.Y = 0;\n        r.Width = Width;\n        r.Height = Height;\n    }\n    if (m_colorArray.Count == 2) {\n        UIColorUtil.Draw2ColorBar(dc, r, m_orientation, m_percentSet);\n    } else if (m_colorArray.Count == 3) {\n        UIColorUtil.Draw3ColorBar(dc, r, m_orientation, m_percentSet);\n    }\n    DrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 24.354083030859197}, {"code": "protected void DrawColorBar(Graphics dc){\n\tRectangleF r = new RectangleF(0, 0, Width, Height);\n  r.Inflate(-1, -1);\n  float percentSet = 0;\n  if (m_valueOrientation == eValueOrientation.MaxToMin)\n    percentSet = 1 - m_percentSet;\n  else\n    percentSet = m_percentSet;\n\n  if (m_colors.Count == 2)\n    Draw2ColorBar(dc, r, m_orientation, percentSet);\n  else if (m_colors.Count == 3)\n    Draw3ColorBar(dc, r, m_orientation, percentSet);\n  else\n    throw new Exception(\"The number of colors is not supported.\");\n\n  DrawSelector(dc, r, m_orientation, percentSet);\n}", "CodeBleu_score": 34.57330119873438}, {"code": "protected void DrawColorBar(Graphics dc){\n\tRectangleF r = new RectangleF(0, 0, this.Width, this.Height);\n  if (m_orientation == Orientation.Vertical)\n    r.Height -= 2;\n  else\n    r.Width -= 2;\n\n  if (m_colors.Count == 2)\n    UIColorUtil.Draw2ColorBar(dc, r, m_orientation, m_percentSet);\n  else\n    UIColorUtil.Draw3ColorBar(dc, r, m_orientation, m_percentSet);\n\n  DrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 29.059502924279595}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\tdropSymbol = SymbolNormal;\n    if (Visible) {\n        dropSymbol = SymbolDropDown;\n    }\n    Invalidate();\n}", "CodeBleu_score": 74.24100035469479}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t// Set the dropSymbol to SymbolNormal by default\n    dropSymbol = SymbolNormal;\n\n    // If the form is in a dropped-down state, change the dropSymbol to SymbolDropDown\n    if (this.Visible) {\n        dropSymbol = SymbolDropDown;\n    }\n\n    // Trigger a redraw of the form\n    this.Invalidate();\n}", "CodeBleu_score": 60.47016297112211}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\tdropSymbol = SymbolNormal;\n    if (this.Visible) {\n        dropSymbol = SymbolDropDown;\n    }\n    this.Invalidate();\n}", "CodeBleu_score": 59.55409304168005}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\n    if (!edit.Visible) {\n        if (Text.IsValid) {\n            g.DrawString(Text, Font, GetForeColor(ForeColor), edit.Left, edit.Top, edit.Width);\n        } else {\n            g.DrawString(Watermark.IsValid ? Watermark.Text : \" \", Font, GetForeColor(Watermark.ForeColor), edit.Left, edit.Top, edit.Width);\n        }\n    }\n    g.FillRectangle(GetFillColor(BackColor), edit.Right + 4, edit.Top, Width - edit.Right - 4, edit.Height);\n    if (ClearButton) {\n        g.DrawFontImage(GetRectColor(ClearButtonColor), 3, 3, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10, 10, 4, 4, 10,", "CodeBleu_score": 38.20264560645775}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\n\n    if (!edit.Visible) {\n        if (Text.IsValid) {\n            g.DrawString(Text, Font, GetForeColor(IsEnabled), 0, 0, Width, Height, GetStringFormat(TextAlign));\n        } else if (Watermark.IsValid) {\n            g.DrawString(Watermark, Font, GetForeColor(IsEnabled, 0.5f), 0, 0, Width, Height, GetStringFormat(TextAlign));\n        }\n    }\n\n    if (IsEnabled && GetFillColor(IsHovered, IsPressed).IsValid) {\n        g.FillRectangle(GetFillColor(IsHovered, IsPressed), Width - RectSize - 2, 2, RectSize, RectSize);\n    }\n\n    if (GetRectColor(IsHovered, IsPressed).IsValid) {\n        g.DrawRectangle(new Pen(GetRectColor(IsHovered, IsPressed), 1), Width - RectSize - 2, 2, RectSize, RectSize);\n    }\n\n    if (GetForeColor(IsHovered, IsPressed).IsValid) {\n        g.DrawFontImage(GetForeColor(IsHovered, IsPressed), IsHovered ? FontAwesome.Solid.Times : FontAwesome.Solid.ChevronDown, 1, 1, Width - RectSize - 2, 2, RectSize, RectSize);\n    }\n}", "CodeBleu_score": 49.592953414839215}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\n    if (!edit.Visible) {\n        if (Text.IsValid) {\n            using (var sf = new StringFormat() {\n                Alignment = StringAlignment.Near,\n                LineAlignment = StringAlignment.Near\n            }) {\n                g.DrawString(Text, Font, GetForeColor(false), ClientRectangle, sf);\n            }\n        } else if (Watermark.IsValid) {\n            using (var sf = new StringFormat() {\n                Alignment = StringAlignment.Near,\n                LineAlignment = StringAlignment.Near\n            }) {\n                g.DrawString(Watermark, Font, GetForeColor(true), ClientRectangle, sf);\n            }\n        }\n    }\n    g.FillRectangle(GetFillColor(false), edit.Right, 0, Width - edit.Right, Height);\n    if (ShowClearButton) {\n        g.DrawFontImage(GetForeColor(false), GetRectColor(false), Font, 14, 1, new Point(Width - 18, (Height - 16) / 2), 16, 16);\n    } else {\n        g.DrawFontImage(GetForeColor(false), GetRectColor(false), Font, 12, 1, new Point(Width - 18, (Height - 16) / 2), 16, 16);\n    }\n}", "CodeBleu_score": 39.84330338855339}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n  if (!IsClearButtonShown) {\n    NeedDrawClearButton = false;\n    return;\n  }\n  bool isMouseInControlBox = IsMouseInControlBox(e.X, e.Y);\n  if (NeedDrawClearButton != isMouseInControlBox && IsValid) {\n    NeedDrawClearButton = isMouseInControlBox;\n    Invalidate();\n  }\n}", "CodeBleu_score": 54.74827225685724}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\tif (!this.ShowClearButton) {\n\t\tthis.NeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tbool needDraw = this.NeedDrawClearButton;\n\tif (this.ClearButtonRectangle.Contains(e.Location)) {\n\t\tthis.NeedDrawClearButton = true;\n\t} else {\n\t\tthis.NeedDrawClearButton = false;\n\t}\n\tif (this.NeedDrawClearButton != needDraw && this.IsValid) {\n\t\tthis.Invalidate();\n\t}\n}", "CodeBleu_score": 35.81040939544263}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\tif (!IsClearButtonShown) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (NeedDrawClearButton != (ClientRectangle.Width - e.Location.X < 20)) {\n\t\tNeedDrawClearButton = !NeedDrawClearButton;\n\t\tif (IsValid)\n\t\t\tInvalidate();\n\t}\n}", "CodeBleu_score": 40.45422336547599}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\tbase.OnLayout(e);\n\t\n\t// Calculate the preferred size of the component.\n\tthis.SetPreferredSize();\n\t\n\t// Adjust the size if AutoSize is enabled and the suggested size differs from the current size.\n\tif (this.AutoSize && this.Size != this.PreferredSize) {\n\t\tthis.Size = this.PreferredSize;\n\t}\n\t\n\t// Set the items to be displayed.\n\tthis.SetDisplayedItems();\n\t\n\t// Trigger the layout completed event.\n\tthis.OnLayoutCompleted(e);\n\t\n\t// Invalidate the component to refresh its display.\n\tthis.Invalidate();\n}", "CodeBleu_score": 34.203466574989825}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\tbase.OnLayout(e);\n    Size preferredSize = this.GetPreferredSize(this.Size);\n    if (this.AutoSize) {\n        this.Size = preferredSize;\n    }\n    this.SetDisplayedItems();\n    this.OnLayoutCompleted(new LayoutCompletedEventArgs(preferredSize));\n    this.Invalidate();\n}", "CodeBleu_score": 28.163792760058637}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t// calculate the preferred size\n    Size preferredSize = GetPreferredSize(Size.Empty);\n\n    // if AutoSize is enabled, adjust the size of the component\n    if (this.AutoSize) {\n        this.Size = preferredSize;\n    }\n\n    // set the items to be displayed\n    SetDisplayedItems();\n\n    // trigger the layout completed event\n    OnLayoutCompleted(EventArgs.Empty);\n\n    // invalidate the component to refresh its display\n    Invalidate();\n}", "CodeBleu_score": 49.281500580433466}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\n    this.fillColor = Color.white;\n    this.foregroundColor = uiColor.dropdownPanelForegroundColor;\n    this.rectColor = uiColor.dropdownPanelColor;\n    this.GetControls<UISymbolButton>().ForEach(item => {\n        item.SetStyleColor(uiColor);\n    });\n}", "CodeBleu_score": 47.25832185790733}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\n  fillColor = Color.white;\n  foregroundColor = uiColor.dropdownPanelForegroundColor;\n  rectColor = uiColor.dropdownPanelColor;\n  foreach (UISymbolButton item in GetControls<UISymbolButton>()) {\n    item.SetStyleColor(uiColor);\n  }\n}", "CodeBleu_score": 57.886441823965164}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\n\tfillColor = Color.white;\n\tforegroundColor = uiColor.dropdownPanelForegroundColor;\n\trectColor = uiColor.dropdownPanelColor;\n\tforeach (UISymbolButton item in GetControls<UISymbolButton>()) {\n\t\titem.SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 55.94537135789675}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (AnalogMeter == null) return false;\n  LBColorManager.StepColor(AnalogMeter.BodyColor, 0.25F, out LBColorManager.TempColor);\n  LBColorManager.TempColor = LBColorManager.StepColor(AnalogMeter.BodyColor, 0.25F);\n  using (LinearGradientBrush LGBr = new LinearGradientBrush(rc, AnalogMeter.BodyColor, LBColorManager.TempColor, LinearGradientMode.Vertical)) {\n    Gr.FillEllipse(LGBr, rc);\n  }\n  rc.X += rc.Width * (1 - AnalogMeter.GetDrawRatio()) / 2;\n  rc.Y += rc.Height * (1 - AnalogMeter.GetDrawRatio()) / 2;\n  rc.Width *= AnalogMeter.GetDrawRatio();\n  rc.Height *= AnalogMeter.GetDrawRatio();\n  using (LinearGradientBrush LGBr = new LinearGradientBrush(rc, LBColorManager.TempColor, AnalogMeter.BodyColor, LinearGradientMode.Vertical)) {\n    Gr.FillEllipse(LGBr, rc);\n  }\n  return true;\n}", "CodeBleu_score": 36.22441704682433}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (AnalogMeter == null) return false;\n  Color BodyColor = AnalogMeter.BodyColor;\n  Color BodyColorDarker = LBColorManager.StepColor(BodyColor, -0.25f);\n  RectangleF rcBody = rc;\n  float fDrawRatio = AnalogMeter.GetDrawRatio();\n  rcBody.Width = rcBody.Width * fDrawRatio;\n  rcBody.Height = rcBody.Height * fDrawRatio;\n  rcBody.X = rcBody.X + (rc.Width - rcBody.Width) / 2;\n  rcBody.Y = rcBody.Y + (rc.Height - rcBody.Height) / 2;\n  LinearGradientBrush brBody = new LinearGradientBrush(rcBody, BodyColor, BodyColorDarker, LinearGradientMode.Vertical);\n  Gr.FillEllipse(brBody, rcBody);\n  rcBody.Inflate(-rcBody.Width / 4, -rcBody.Height / 4);\n  brBody = new LinearGradientBrush(rcBody, BodyColorDarker, BodyColor, LinearGradientMode.Vertical);\n  Gr.FillEllipse(brBody, rcBody);\n  return true;\n}", "CodeBleu_score": 40.7269942042255}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (AnalogMeter == null) return false;\n\tLBColorManager.StepColor(AnalogMeter.BodyColor, 0.8f, out LBColorManager.DarkerColor);\n\tusing (LinearGradientBrush br = new LinearGradientBrush(rc, AnalogMeter.BodyColor, LBColorManager.DarkerColor, 0f)) {\n\t\tGr.FillEllipse(br, rc);\n\t}\n\trc.Inflate(-rc.Width / AnalogMeter.GetDrawRatio(), -rc.Height / AnalogMeter.GetDrawRatio());\n\tusing (LinearGradientBrush br = new LinearGradientBrush(rc, LBColorManager.DarkerColor, AnalogMeter.BodyColor, 0f)) {\n\t\tGr.FillEllipse(br, rc);\n\t}\n\treturn true;\n}", "CodeBleu_score": 36.830069649007434}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\n    Invalidate();\n}", "CodeBleu_score": 31.970781889607558}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\n    Invalidate();\n}", "CodeBleu_score": 31.970781889607558}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\n  this.Invalidate();\n}", "CodeBleu_score": 28.206250960149493}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\tlock (lockObject) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n    }\n}", "CodeBleu_score": 68.05696237873404}, {"code": "public static void Load(){\n\tlock (_lock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n    }\n}", "CodeBleu_score": 68.20311507028443}, {"code": "public static void Load(){\n\tlock (Lock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n    }\n}", "CodeBleu_score": 68.19049255783412}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t// Get the proxy override setting from the registry.\n    var proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\n    // Check if the proxy override is set.\n    if (!string.IsNullOrWhiteSpace(proxyOverride)) {\n        // Split the proxy override string into an array of overrides.\n        var overrides = proxyOverride.Split(';');\n\n        // Iterate through each override.\n        foreach (var override in overrides) {\n            // Check if the override is set to <local>.\n            if (override.Equals(\"<local>\", StringComparison.OrdinalIgnoreCase)) {\n                // Set the flag to ignore local traffic.\n                _ignoreLocalTraffic = true;\n            }\n            // Check if the override is not a duplicate.\n            else if (!Overrides.Contains(override)) {\n                // Add the override to the list.\n                Overrides.Add(override);\n            }\n        }\n    }\n}", "CodeBleu_score": 71.62582013222415}, {"code": "private static void LoadOverrides(){\n\t// The ProxyOverride value is a string that contains a list of proxy overrides.\n    // Each override entry is separated by a semicolon.\n    // The following list shows the possible override values:\n    // - \"<local>\" - Do not use a proxy for local addresses.\n    // - \"<local>;<host>\" - Do not use a proxy for local addresses or the specified host.\n    // - \"<local>;<host>:<port>\" - Do not use a proxy for local addresses or the specified host and port.\n    // - \"*.<domain>\" - Do not use a proxy for any host in the specified domain.\n    // - \"*.<domain>:<port>\" - Do not use a proxy for any host in the specified domain and port.\n    // - \"<host>\" - Do not use a proxy for the specified host.\n    // - \"<host>:<port>\" - Do not use a proxy for the specified host and port.\n    // - \"<IP>\" - Do not use a proxy for the specified IP address.\n    // - \"<IP>:<port>\" - Do not use a proxy for the specified IP address and port.\n    // The following list shows some examples of proxy override values:\n    // - \"<local>;*.microsoft.com\" - Do not use a proxy for local addresses or addresses in the \".microsoft.com\" domain.\n    // - \"<local>;172.16.1.10:8080\" - Do not use a proxy for local addresses or the specified host and port.\n    // - \"*.contoso.com;<local>\" - Do not use a proxy for addresses in the \".contoso.com\" domain or for local addresses.\n    // - \"www.contoso.com:8080;*.contoso.com\" - Do not use a proxy for the specified host and port or for addresses in the \".contoso.com\" domain.\n    // - \"*.contoso.com\" - Do not use a proxy for addresses in the \".contoso.com\" domain.\n    // - \"<local>;*.microsoft.com;172.16.1.10:8080\" - Do not use a proxy for local addresses, addresses in the \".microsoft.com\" domain, or the specified host and port.\n    // - \"www.", "CodeBleu_score": 1.3814577612018935}, {"code": "private static void LoadOverrides(){\n\t// Get the proxy override setting from the registry\n    string proxyOverride = (string)_proxyKey.GetValue(\"ProxyOverride\");\n\n    // Check if the proxy override setting is null or empty\n    if (!string.IsNullOrWhiteSpace(proxyOverride)) {\n        // Split the proxy override string into an array of individual overrides\n        string[] overrides = proxyOverride.Split(';');\n\n        // Iterate through each override\n        foreach (string override in overrides) {\n            // Check if the override is \"<local>\"\n            if (override.Equals(\"<local>\", StringComparison.OrdinalIgnoreCase)) {\n                // Set the flag to ignore local traffic\n                _ignoreLocalTraffic = true;\n            }\n            // Check if the override is not a duplicate\n            else if (!Overrides.Contains(override)) {\n                // Add the override to the Overrides list\n                Overrides.Add(override);\n            }\n        }\n    }\n}", "CodeBleu_score": 73.39747201037416}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\tstring method = string.Empty;\n    List<string> headers = new List<string>();\n    Uri requestUri = null;\n    while (true) {\n        string line = await ReadNonBufferedLine().ConfigureAwait(false);\n        if (string.IsNullOrWhiteSpace(line)) break;\n        if (string.IsNullOrWhiteSpace(method)) {\n            string[] parts = line.Split(' ');\n            method = parts[0];\n            requestUri = new Uri(baseUri, parts[1]);\n        } else {\n            headers.Add(line);\n        }\n    }\n    if (method == \"CONNECT\") {\n        if (requestUri.Port == 443) {\n            await SendResponseAsync(HttpStatusCode.OK).ConfigureAwait(false);\n            if (SecureTunnel(requestUri.Host)) {\n                return await ReadRequestAsync(requestUri).ConfigureAwait(false);\n            }\n        }\n        await SendResponseAsync(HttpStatusCode.Forbidden).ConfigureAwait(false);\n        return null;\n    }\n    return CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 51.92468812770935}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\tstring method = null;\n    var headers = new List<string>();\n    Uri requestUri = null;\n\n    while (true) {\n        string command = await ReadNonBufferedLine().ConfigureAwait(false);\n        if (string.IsNullOrWhiteSpace(command)) break;\n        if (string.IsNullOrWhiteSpace(method)) {\n            string[] parts = command.Split(' ');\n            if (parts.Length != 3) throw new InvalidOperationException(\"Invalid request line\");\n            method = parts[0];\n            requestUri = new Uri(parts[1], UriKind.RelativeOrAbsolute);\n            if (!requestUri.IsAbsoluteUri) {\n                requestUri = new Uri(baseUri, requestUri);\n            }\n            headers.Add(command);\n        } else {\n            headers.Add(command);\n        }\n    }\n\n    if (method == \"CONNECT\") {\n        if (SecureTunnel(requestUri.Host)) {\n            await SendResponseAsync(HttpStatusCode.OK).ConfigureAwait(false);\n            return await ReadRequestAsync(requestUri).ConfigureAwait(false);\n        }\n    }\n\n    return CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 53.550540790640156}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\tstring method = null;\n    List<string> headers = new List<string>();\n    Uri requestUri = null;\n    while (true) {\n        string line = await ReadNonBufferedLine().ConfigureAwait(false);\n        if (string.IsNullOrWhiteSpace(line)) {\n            if (method == null)\n                throw new EndOfStreamException();\n            else\n                break;\n        }\n        if (method == null) {\n            string[] parts = line.Split(' ');\n            if (parts.Length != 3)\n                throw new FormatException(\"Invalid command line.\");\n            method = parts[0];\n            requestUri = new Uri(baseUri, parts[1]);\n            if (requestUri.Host == \"127.0.0.1\")\n                requestUri = new UriBuilder(requestUri) { Host = Dns.GetHostName() }.Uri;\n            if (requestUri.Scheme == Uri.UriSchemeHttp && baseUri.Scheme == Uri.UriSchemeHttps) {\n                if (!await SecureTunnel(requestUri.Host).ConfigureAwait(false))\n                    throw new Exception(\"Failed to establish secure tunnel.\");\n                baseUri = new UriBuilder(baseUri) { Scheme = Uri.UriSchemeHttps }.Uri;\n            }\n        } else {\n            headers.Add(line);\n        }\n    }\n    if (method == \"CONNECT\") {\n        await SendResponseAsync(HttpStatusCode.OK).ConfigureAwait(false);\n        return await ReadRequestAsync(requestUri).ConfigureAwait(false);\n    }\n    return CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 44.06709375289572}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\tstring description = \"OK\";\n    var status = HttpStatusCode.OK;\n    if (response is HttpWebResponse httpResponse) {\n        status = httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 97.71626880906828}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\tstring description = \"OK\";\n    var status = HttpStatusCode.OK;\n    if (response is HttpWebResponse httpResponse) {\n        status = httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 97.71626880906828}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\tstring description = \"OK\";\n    var status = HttpStatusCode.OK;\n    if (response is HttpWebResponse httpResponse) {\n        status = httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 97.71626880906828}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\ttry {\n        _cert = _certifier.GenerateCertificate(host);\n        _secureStream = new SslStream(\n            _client.GetStream(),\n            false,\n            new RemoteCertificateValidationCallback(ValidateServerCertificate),\n            null\n        );\n        _secureStream.AuthenticateAsServer(_cert, false, SslProtocols.Tls12, true);\n        return true;\n    }\n    catch (Exception e) {\n        Console.WriteLine(\"Exception: {0}\", e.Message);\n        return false;\n    }\n}", "CodeBleu_score": 49.408611744146114}, {"code": "private bool SecureTunnel(string host){\n\ttry {\n        _secureStream = new SslStream(\n            _client.GetStream(),\n            false,\n            new RemoteCertificateValidationCallback(ValidateServerCertificate),\n            null\n        );\n\n        _cert = _certifier.GenerateCertificate(host);\n        _secureStream.AuthenticateAsServer(\n            _cert,\n            false,\n            SslProtocols.Tls12,\n            true\n        );\n\n        return true;\n    } catch (Exception ex) {\n        Console.WriteLine(\"Exception: {0}\", ex.Message);\n        return false;\n    }\n}", "CodeBleu_score": 45.67034846431513}, {"code": "private bool SecureTunnel(string host){\n\ttry {\n        _certifier = new Certifier();\n        _secureStream = new SslStream(\n            _client.GetStream(),\n            false,\n            new RemoteCertificateValidationCallback(ValidateCertificate),\n            new LocalCertificateSelectionCallback(SelectCertificate)\n        );\n        _secureStream.AuthenticateAsServer(\n            _certifier.GenerateCertificate(host),\n            false,\n            SslProtocols.Tls,\n            false\n        );\n        return true;\n    } catch (Exception e) {\n        Console.WriteLine(e.Message);\n        return false;\n    }\n}", "CodeBleu_score": 44.68146063409926}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tStream responseStream = response.GetResponseStream();\n    if (responseStream == null) {\n        response.Dispose();\n        return null;\n    }\n    long contentLength = response.ContentLength;\n    if (contentLength < 0) {\n        contentLength = 4096;\n    }\n    return new StreamContent(responseStream, (int)contentLength);\n}", "CodeBleu_score": 36.01662865572891}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tvar responseStream = response.GetResponseStream();\n    if (responseStream == null) {\n        response.Dispose();\n        return null;\n    }\n    var contentLength = response.ContentLength;\n    return new StreamContent(responseStream, contentLength >= 0 ? (int)contentLength : 4096);\n}", "CodeBleu_score": 41.648070313542064}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tif (response == null)\n\t\tthrow new ArgumentNullException(\"response\");\n\n\tStream responseStream = response.GetResponseStream();\n\tif (responseStream == null)\n\t\treturn null;\n\n\t// If the response stream has a content length, use it to set the StreamContent's buffer size.\n\tlong contentLength = response.ContentLength;\n\tif (contentLength < 0)\n\t\tcontentLength = 4096;\n\n\tStreamContent content = new StreamContent(responseStream, (int)contentLength);\n\treturn content;\n}", "CodeBleu_score": 37.20616790669321}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        using (OpenFileDialog dialog = new OpenFileDialog()) {\n            dialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                ActivityConfigJsonPath.Text = path;\n            }\n        }\n    }\n    try {\n        ActivityConfig = ActivityConfig.Load(path);\n        ox.Show(\"OK\", Resources.Success, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        ox.Show(ex.ToString(), Resources.Error, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 44.07074911810312}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.FilterIndex = 1;\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    try {\n        ActivityConfig = ActivityConfig.Load(path);\n        ox.Show(\"OK\", Resources.OK_16x16);\n    }\n    catch (Exception ex) {\n        ox.Show(ex.ToString(), Resources.Error_16x16);\n    }\n}", "CodeBleu_score": 39.30772552831013}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON Files (*.json)|*.json\";\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    try {\n        LoadActivityConfig(path);\n        ox.Show(\"OK\", Reso);\n    } catch (Exception ex) {\n        ox.Show(ex.ToString(), Reso);\n    }\n}", "CodeBleu_score": 40.356455654484556}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\tActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 66.33423724065824}, {"code": "private void LoadActivityConfig(string path){\n\tActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\tListActivityConfigItems.BeginUpdate();\n\tListActivityConfigItems.Items.Clear();\n\tListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 64.71379500873104}, {"code": "private void LoadActivityConfig(string path){\n\tActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 66.33423724065824}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\n  if (string.IsNullOrEmpty(path)) {\n    SaveFileDialog dialog = new SaveFileDialog();\n    dialog.Filter = \"JSON files (*.json)|*.json\";\n    dialog.FilterIndex = 1;\n    dialog.RestoreDirectory = true;\n    dialog.ShowDialog();\n    path = dialog.FileName;\n    ActivityConfigJsonPath.Text = path;\n  }\n  if (string.IsNullOrEmpty(path)) {\n    return;\n  }\n  try {\n    string json = JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented);\n    System.IO.File.WriteAllText(path, json);\n    MessageBox.Show(\"OK\", \"Save Configuration Data\");\n  } catch (Exception ex) {\n    MessageBox.Show(ex.ToString(), \"Error Saving Configuration Data\");\n  }\n}", "CodeBleu_score": 40.71000792875108}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        SaveFileDialog dialog = new SaveFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.Title = \"Select a JSON file\";\n        dialog.ShowDialog();\n        path = dialog.FileName;\n        if (string.IsNullOrEmpty(path)) {\n            return;\n        }\n        ActivityConfigJsonPath.Text = path;\n    }\n    try {\n        string json = JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented);\n        File.WriteAllText(path, json);\n        MessageBox.Show(\"Configuration saved successfully.\");\n    }\n    catch (Exception ex) {\n        MessageBox.Show(\"An error occurred while saving the configuration.\n\" + ex.ToString());\n    }\n}", "CodeBleu_score": 43.215642395124895}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        using (SaveFileDialog dialog = new SaveFileDialog()) {\n            dialog.Filter = \"JSON files (*.json)|*.json\";\n            dialog.FilterIndex = 1;\n            dialog.RestoreDirectory = true;\n            dialog.FileName = \"ActivityConfig.json\";\n            dialog.ShowDialog();\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    if (string.IsNullOrEmpty(path)) {\n        return;\n    }\n    string json = JsonConvert.SerializeObject(ActivityConfigItems);\n    try {\n        File.WriteAllText(path, json);\n        MessageBox.Show(\"Configuration saved.\", \"OK\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        MessageBox.Show($\"Error saving configuration: {ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 44.14793643981476}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\t// Disable updates to the ListView control while we populate it.\n    ListAllActivity.BeginUpdate();\n    // Iterate through each activity group.\n    foreach (var grp in GameData.Activity) {\n        // Create a new group in the ListView and add an item for each activity ID and name in the group.\n        var lvg = new ListViewGroup(grp.Value.Name, grp.Value.Name);\n        ListAllActivity.Groups.Add(lvg);\n        for (var i = 0; i < grp.Value.Ids.Count; i++) {\n            var lvi = new ListViewItem(grp.Value.Ids[i].ToString(), lvg);\n            lvi.SubItems.Add(grp.Value.Names[i]);\n            ListAllActivity.Items.Add(lvi);\n        }\n    }\n    // Re-enable updates to the ListView control.\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 65.7927802128744}, {"code": "private void LoadAllActivity(){\n\t// Disable updates to the ListView control while we populate it\n    ListAllActivity.BeginUpdate();\n\n    // Iterate through each activity group\n    foreach (var grp in GameData.Activity.Groups) {\n        // Create a new group in the ListView\n        var lvg = new ListViewGroup(grp.Value.Name);\n        ListAllActivity.Groups.Add(lvg);\n\n        // Iterate through each activity ID in the group\n        for (int i = 0; i < grp.Value.Ids.Count; i++) {\n            // Create a new item for the ListView\n            var lvi = new ListViewItem(grp.Value.Ids[i].ToString());\n            lvi.SubItems.Add(grp.Value.Names[i]);\n            lvi.Group = lvg;\n\n            // Add the item to the ListView\n            ListAllActivity.Items.Add(lvi);\n        }\n    }\n\n    // Re-enable updates to the ListView control\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 64.76912825619374}, {"code": "private void LoadAllActivity(){\n\tListAllActivity.BeginUpdate();\n    foreach (var group in GameData.Activity.Groups) {\n        var grp = new ListViewGroup(group.Value.Name);\n        ListAllActivity.Groups.Add(grp);\n        for (int i = 0; i < group.Value.Ids.Count; i++) {\n            var item = new ListViewItem(group.Value.Ids[i].ToString());\n            item.SubItems.Add(group.Value.Names[i]);\n            item.Group = grp;\n            ListAllActivity.Items.Add(item);\n        }\n    }\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 62.452022718800215}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\ttry {\n        if (ListAllActivity.SelectedItems.Count == 0) {\n            return;\n        }\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 64.02698164118587}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\ttry {\n        if (ListAllActivity.SelectedItems.Count == 0) {\n            return;\n        }\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 64.02698164118587}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\ttry {\n    if (ListAllActivity.SelectedItems.Count == 0) {\n      return;\n    }\n    NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n  } catch (Exception ex) {\n    MessageBox.Show(\"An error has occurred: \" + ex.ToString());\n  }\n}", "CodeBleu_score": 61.77277926438096}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t// Check if the path is empty\n    if (TxtDropJsonPath.Text.Trim() == \"\") {\n        // Open a file dialog to select a JSON file\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON Files (*.json)|*.json\";\n        dialog.Title = \"Select a JSON File\";\n        dialog.ShowDialog();\n        // Update the text box with the selected file path\n        TxtDropJsonPath.Text = dialog.FileName;\n    }\n    // Attempt to deserialize and load the banners from the specified file path\n    try {\n        // Deserialize and load the banners from the specified file path\n        BannerList.Deserialize(TxtDropJsonPath.Text.Trim());\n        // Show a success message\n        ox.Show(\"OK\", Resources(path);\n    }\n    catch (Exception ex) {\n        // Show an error message with the exception details\n        ox.Show(ex.ToString(), Resources(path);\n    }\n}", "CodeBleu_score": 36.67785460865013}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t// Get the file path\n    string path = TxtDropJsonPath.Text.Trim();\n    // Check if the file path is empty\n    if (path.Length == 0) {\n        // Open a file dialog to select a JSON file\n        using (OpenFileDialog dialog = new OpenFileDialog()) {\n            // Set the file filter\n            dialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n            // Set the default extension\n            dialog.DefaultExt = \".json\";\n            // Set the initial directory\n            dialog.InitialDirectory = Environment.CurrentDirectory;\n            // Show the dialog\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                // Update the text box with the selected file path\n                TxtDropJsonPath.Text = dialog.FileName;\n            }\n        }\n    }\n    // Attempt to deserialize and load the banners from the specified file path\n    try {\n        // Deserialize the banners from the specified file path\n        List<Banner> banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\n        // Load the banners\n        LoadBanners(banners);\n        // Show a success message\n        MessageBox.Show(\"Banners loaded successfully!\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    }\n    // If an exception occurs\n    catch (Exception ex) {\n        // Show an error message with the exception details\n        MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 44.016739481751216}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = TxtDropJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.Title = \"Select a JSON file\";\n        dialog.ShowDialog();\n        path = dialog.FileName;\n        TxtDropJsonPath.Text = path;\n    }\n    try {\n        List<Banner> banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\n        BannerList.Items.Clear();\n        foreach (Banner banner in banners) {\n            BannerList.Items.Add(banner.Name);\n        }\n        ox.Show(\"OK\", Resources.success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        ox.Show(ex.ToString(), Resources.error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 45.96348302945823}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\tdropList.Update();\n    dropList.Clear();\n    if (dropList.Count > 0) {\n        dropList.AddRange(dropList);\n        dropList.SelectedIndex = 0;\n    }\n    dropList.EndUpdate();\n}", "CodeBleu_score": 38.78726964548277}, {"code": "private void ShowDropList(List<DropData> dropList){\n\tdropList.Update();\n    ta.Items.Clear();\n    if (dropList.Count > 0) {\n        ta.Items.AddRange(dropList.ToArray());\n        ta.SelectedIndex = 0;\n    }\n    ta.EndUpdate();\n}", "CodeBleu_score": 49.166892724716895}, {"code": "private void ShowDropList(List<DropData> dropList){\n\tdropList.Update();\n    dropList.Clear();\n    if (dropList.Count > 0) {\n        dropList.AddRange(dropList);\n        dropList.SelectedIndex = 0;\n    }\n    dropList.EndUpdate();\n}", "CodeBleu_score": 38.78726964548277}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\tListDrops.BeginUpdate();\n    ListDrops.Items.Remove(data);\n    ListDrops.EndUpdate();\n}", "CodeBleu_score": 11.31058554775868}, {"code": "private void RemoveDrop(DropData data){\n\tListDrops.Items.Remove(data);\n    ListDrops.SelectedIndex = 0;\n}", "CodeBleu_score": 8.678887567591334}, {"code": "private void RemoveDrop(DropData data){\n\tListMonsters.BeginUpdate();\n    ListMonsters.Items.Remove(ItemMap.ToItem(data.MonsterId));\n    ListMonsters.EndUpdate();\n}", "CodeBleu_score": 9.602844984505177}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\tLogger.I(TAG, \"FormMain_FormClosed\");\n    foreach (FormPage page in FormPages) {\n        Logger.I(TAG, \"FormMain_FormClosed: \" + page.Name);\n        page.OnClosed();\n        Logger.I(TAG, \"FormMain_FormClosed: \" + page.Name + \" completed\");\n    }\n    Settings.Save();\n    Logger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 51.65480834946769}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\tLogger.I(TAG, \"FormMain_FormClosed\");\n  foreach (Form form in Application.OpenForms) {\n    Logger.I(TAG, \"FormMain_FormClosed\", $\"Form: {form.Name}\");\n    form.OnClosed(e);\n    Logger.I(TAG, \"FormMain_FormClosed\", $\"Form: {form.Name} - Completed\");\n  }\n  Settings.Save();\n  Logger.I(TAG, \"FormMain_FormClosed\", \"Completed\");\n}", "CodeBleu_score": 49.60962017573273}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\tLogg.I(TAG, \"FormMain_FormClosed\");\n\n\tforeach (Page p in Pages) {\n\t\tLogg.I(TAG, \"FormMain_FormClosed: \" + p.Name + \" OnClosed\");\n\t\tp.OnClosed();\n\t\tLogg.I(TAG, \"FormMain_FormClosed: \" + p.Name + \" OnClosed Completed\");\n\t}\n\n\tLogg.I(TAG, \"FormMain_FormClosed Completed\");\n\n\tSaveSettings();\n\n\tLogg.I(TAG, \"FormMain_FormClosed Saved Settings\");\n\n}", "CodeBleu_score": 50.20220376606689}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\ttry {\n   // Save the window state.\n   if (WindowState == FormWindowState.Normal) {\n    Settings.Default.WindowPosition = Location;\n    Settings.Default.WindowSize = Size;\n   }\n   Settings.Default.WindowState = WindowState;\n   // Save the auto-copy setting.\n   Settings.Default.AutoCopy = AutoCopy.Checked;\n   // Save the splitter distance.\n   Settings.Default.SplitterDistance = SplitContainer.SplitterDistance;\n   // Save the settings.\n   Settings.Default.Save();\n  }\n  catch (Exception ex) {\n   Logger.E(TAG, \"Failed to save settings.\");\n   Logger.E(TAG, ex);\n   MessageBox.Show(\"Failed to save settings.\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n  }\n }", "CodeBleu_score": 38.21646918360262}, {"code": " private void SaveSettings(){\n\ttry {\n   // Save the settings.\n   Settings.Default.AutoCopy = this.AutoCopy.Checked;\n   Settings.Default.AutoPaste = this.AutoPaste.Checked;\n   Settings.Default.AutoSave = this.AutoSave.Checked;\n   Settings.Default.AutoSavePath = this.AutoSavePath.Text;\n   Settings.Default.AutoSavePathEnabled = this.AutoSavePath.Enabled;\n   Settings.Default.AutoSavePathVisible = this.AutoSavePath.Visible;\n   Settings.Default.AutoSavePathLabelEnabled = this.AutoSavePathLabel.Enabled;\n   Settings.Default.AutoSavePathLabelVisible = this.AutoSavePathLabel.Visible;\n   Settings.Default.AutoSavePathBrowseEnabled = this.AutoSavePathBrowse.Enabled;\n   Settings.Default.AutoSavePathBrowseVisible = this.AutoSavePathBrowse.Visible;\n   Settings.Default.AutoSavePathBrowseLabelEnabled = this.AutoSavePathBrowseLabel.Enabled;\n   Settings.Default.AutoSavePathBrowseLabelVisible = this.AutoSavePathBrowseLabel.Visible;\n   Settings.Default.AutoSavePathBrowseButtonEnabled = this.AutoSavePathBrowseButton.Enabled;\n   Settings.Default.AutoSavePathBrowseButtonVisible = this.AutoSavePathBrowseButton.Visible;\n   Settings.Default.AutoSavePathBrowseButtonLabelEnabled = this.AutoSavePathBrowseButtonLabel.Enabled;\n   Settings.Default.AutoSavePathBrowseButtonLabelVisible = this.AutoSavePathBrowseButtonLabel.Visible;\n   Settings.Default.AutoSavePathBrowseButtonLabelText = this.AutoSavePathBrowseButtonLabel.Text;\n   Settings.Default.AutoSavePathBrowseButtonLabelFont = this.AutoSavePathBrowseButtonLabel.Font;\n   Settings.Default.AutoSavePathBrowseButtonLabelForeColor = this.AutoSavePathBrowseButtonLabel.ForeColor;\n   Settings.Default.AutoSavePathBrowseButtonLabelBackColor = this.AutoSavePathBrowseButtonLabel.BackColor;\n   Settings.Default.AutoSavePathBrowseButtonLabelTextAl", "CodeBleu_score": 20.36127607973984}, {"code": " private void SaveSettings(){\n\ttry {\n     // Save the UI settings\n     Properties.Settings.Default.AutoCopy = chkAutoCopy.Checked;\n     Properties.Settings.Default.AutoCopyToClipboard = chkAutoCopyToClipboard.Checked;\n     Properties.Settings.Default.AutoSelect = chkAutoSelect.Checked;\n     Properties.Settings.Default.AutoSelectAll = chkAutoSelectAll.Checked;\n     Properties.Settings.Default.AutoSelectFirst = chkAutoSelectFirst.Checked;\n     Properties.Settings.Default.AutoSelectLast = chkAutoSelectLast.Checked;\n     Properties.Settings.Default.AutoSelectNext = chkAutoSelectNext.Checked;\n     Properties.Settings.Default.AutoSelectPrevious = chkAutoSelectPrevious.Checked;\n     Properties.Settings.Default.AutoSelectStop = chkAutoSelectStop.Checked;\n     Properties.Settings.Default.AutoSelectTimeout = (int)nudAutoSelectTimeout.Value;\n     Properties.Settings.Default.AutoSelectTimeoutEnabled = chkAutoSelectTimeoutEnabled.Checked;\n     Properties.Settings.Default.AutoSelectTimeoutUnits = (int)cboAutoSelectTimeoutUnits.SelectedIndex;\n     Properties.Settings.Default.AutoSelectTimeoutValue = (int)nudAutoSelectTimeoutValue.Value;\n     Properties.Settings.Default.AutoSelectTimeoutValueEnabled = chkAutoSelectTimeoutValueEnabled.Checked;\n     Properties.Settings.Default.AutoSelectTimeoutValueUnits = (int)cboAutoSelectTimeoutValueUnits.SelectedIndex;\n     Properties.Settings.Default.AutoStart = chkAutoStart.Checked;\n     Properties.Settings.Default.AutoStartDelay = (int)nudAutoStartDelay.Value;\n     Properties.Settings.Default.AutoStartDelayEnabled = chkAutoStartDelayEnabled.Checked;\n     Properties.Settings.Default.AutoStartDelayUnits = (int)cboAutoStartDelayUnits.SelectedIndex;\n     Properties.Settings.Default.AutoStartDelayValue = (int)nudAutoStartDelayValue.Value;\n     Properties.Settings.Default.AutoStartDelayValueEnabled = chkAutoStartDelayValueEnabled.Checked;\n     Properties.Settings.Default.AutoStartDelayValueUnits = (int)cboAutoStartDelayValueUnits", "CodeBleu_score": 21.211117949559068}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tif (PageTabOrders != null) return PageTabOrders;\n  PageTabOrders = new List<Tuple<string, bool>>();\n  var pageTabOrders = GetSetting(\"PageTabOrders\");\n  if (pageTabOrders == null) {\n    foreach (var page in Pages) {\n      PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n    }\n    return PageTabOrders;\n  }\n  var pageTabOrderList = pageTabOrders.Split(';');\n  foreach (var pageTabOrder in pageTabOrderList) {\n    var pageTabOrderParts = pageTabOrder.Split(',');\n    var pageName = pageTabOrderParts[0];\n    var isVisible = pageTabOrderParts[1] == \"1\";\n    PageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n  }\n  return PageTabOrders;\n}", "CodeBleu_score": 36.48427446188828}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tif (PageTabOrders != null) return PageTabOrders;\n  PageTabOrders = new List<Tuple<string, bool>>();\n  string[] pageTabOrders = Settings.GetStringList(SettingNames.PageTabOrders);\n  if (pageTabOrders == null) {\n    foreach (var page in Pages) {\n      PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n    }\n    return PageTabOrders;\n  }\n  foreach (var pageTabOrder in pageTabOrders) {\n    var sp = pageTabOrder.IndexOf(':');\n    var pageName = pageTabOrder.Substring(0, sp == -1 ? pageTabOrder.Length : sp);\n    var isVisible = sp == -1 ? true : pageTabOrder.Substring(sp + 1) == \"1\";\n    PageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n  }\n  return PageTabOrders;\n}", "CodeBleu_score": 40.99297989411736}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tif (PageTabOrders != null) return PageTabOrders;\n  PageTabOrders = new List<Tuple<string, bool>>();\n  var pageTabOrder = GetSetting(\"PageTabOrder\");\n  if (pageTabOrder == null) {\n    foreach (var page in Pages) {\n      PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n    }\n    return PageTabOrders;\n  }\n  var pageTabOrderList = pageTabOrder.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\n  foreach (var pageTabOrderItem in pageTabOrderList) {\n    var sp = pageTabOrderItem.IndexOf('|');\n    var isVisible = sp == -1;\n    var pageName = isVisible ? pageTabOrderItem : pageTabOrderItem.Substring(0, sp);\n    PageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n  }\n  return PageTabOrders;\n}", "CodeBleu_score": 39.57229113461215}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\tSystem.Diagnostics.Debug.WriteLine($\"Frame Data Length: {info.Data.Length}\");\n    System.Diagnostics.Debug.WriteLine($\"File Stream Length: {_compressStream.Length}\");\n    _compressStream.WriteBytes(info.Data);\n    _compressStream.Flush();\n    info.Data = null;\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 59.64844434713513}, {"code": "public override void Save(FrameInfo info){\n\tSystem.Diagnostics.Debug.WriteLine(\"Frame Data Length: \" + info.Data.Length + \" | File Length: \" + _compressStream.Length);\n    _compressStream.WriteBytes(info.Data);\n    _compressStream.Flush();\n    info.Data = null;\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 69.83427549745383}, {"code": "public override void Save(FrameInfo info){\n\tProject.Frames.Add(info);\n\tSystem.Diagnostics.Debug.WriteLine(\"Frame Size: \" + info.DataLength + \" | File Size: \" + _compressStream.Length);\n\t_compressStream.WriteBytes(info.Data);\n\t_compressStream.Flush();\n\tinfo.Data = null;\n}", "CodeBleu_score": 55.69709423671865}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\tvar surface = texture.QueryInterface<Surface>();\n    var rect = surface.Map(0, LockFlags.ReadWrite);\n\n    //Monochrome cursor.\n    if (info.Type == OutputDuplicatePointerShapeType.Monochrome) {\n        DrawMonochromeCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer, info.Height);\n    }\n    //Color cursor.\n    else if (info.Type == OutputDuplicatePointerShapeType.Color) {\n        DrawColorCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n    }\n    //Masked color cursor.\n    else if (info.Type == OutputDuplicatePointerShapeType.MaskedColor) {\n        DrawMaskedColorCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n    }\n\n    surface.Unmap();\n}", "CodeBleu_score": 61.72489092657598}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\tvar surface = texture.QueryInterface<Surface>();\n    var rect = surface.Map(0, MapFlags.Write);\n    var pitch = rect.Pitch;\n\n    if (info.Type == OutputDuplicatePointerShapeType.Monochrome) {\n        DrawMonochromeCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, pitch, buffer, info.Height);\n    }\n    else if (info.Type == OutputDuplicatePointerShapeType.Color) {\n        DrawColorCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n    }\n    else if (info.Type == OutputDuplicatePointerShapeType.MaskedColor) {\n        DrawMaskedColorCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n    }\n\n    surface.Unmap();\n}", "CodeBleu_score": 59.55210708419101}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\tvar surface = texture.QueryInterface<Surface>();\n    var rect = surface.Map(0, LockFlags.WriteOnly);\n\n    switch (info.Type) {\n        case OutputDuplicatePointerShapeType.Monochrome:\n            DrawMonochromeCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer, info.Height);\n            break;\n        case OutputDuplicatePointerShapeType.Color:\n            DrawColorCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n            break;\n        case OutputDuplicatePointerShapeType.MaskedColor:\n            DrawMaskedColorCursor(info.Position.X - leftCut, info.Position.Y - topCut, cursorWidth, cursorHeight, rect, info.Pitch, buffer);\n            break;\n    }\n\n    surface.Unmap();\n}", "CodeBleu_score": 74.67031136778184}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\tswitch (service) {\n        case UploadDestinations.Imgur:\n            return new ImgurUploader();\n        case UploadDestinations.Yandex:\n            return new YandexDiskUploader();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 76.12279690304898}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\tswitch (service) {\n        case UploadDestinations.Imgur:\n            return new ImgurUploader();\n        case UploadDestinations.Yandex:\n            return new YandexDiskUploader();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 76.12279690304898}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\tswitch (service) {\n        case UploadDestinations.Imgur:\n            return new ImgurUploader();\n        case UploadDestinations.Yandex:\n            return new YandexDiskUploader();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 76.12279690304898}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\tif (!File.Exists(path))\n            throw new FileNotFoundException(\"File not found.\", path);\n\n        var fileName = Path.GetFileName(path);\n        var link = await GetUploadLinkAsync(preset, fileName, cancellationToken);\n\n        if (link == null)\n            throw new UploadException(\"Could not retrieve upload link.\");\n\n        using (var fileStream = File.OpenRead(path))\n        {\n            await PutAsync(preset, link.Href, new StreamContent(fileStream), cancellationToken);\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, fileName, cancellationToken);\n\n        if (downloadLink == null)\n            throw new UploadException(\"Could not retrieve download link.\");\n\n        var history = new History(preset, fileName, downloadLink.Href);\n\n        await _historyRepository.CreateAsync(history, cancellationToken);\n\n        return history;\n    }", "CodeBleu_score": 55.157925457388835}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\tvar fileName = Path.GetFileName(path);\n\n        if (string.IsNullOrEmpty(fileName))\n        {\n            throw new UploadException(\"Invalid file path.\");\n        }\n\n        var link = await GetUploadLinkAsync(preset, fileName, cancellationToken).ConfigureAwait(false);\n\n        if (string.IsNullOrEmpty(link.Href))\n        {\n            throw new UploadException(\"Invalid upload link.\");\n        }\n\n        var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read, 4096, true);\n\n        await PutAsync(preset.Preset, link.Href, new StreamContent(stream), cancellationToken).ConfigureAwait(false);\n\n        stream.Close();\n\n        var downloadLink = await GetDownloadLinkAsync(preset, fileName, cancellationToken).ConfigureAwait(false);\n\n        if (string.IsNullOrEmpty(downloadLink.Href))\n        {\n            throw new UploadException(\"Invalid download link.\");\n        }\n\n        var history = new History(preset, path, downloadLink.Href);\n\n        await _historyService.CreateAsync(history, cancellationToken).ConfigureAwait(false);\n\n        return history;\n    }", "CodeBleu_score": 58.761224676738266}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\tif (!File.Exists(path))\n            throw new ArgumentException(\"File does not exist.\", nameof(path));\n\n        var fileName = Path.GetFileName(path);\n\n        var link = await GetUploadLinkAsync(preset, fileName, cancellationToken);\n\n        using (var stream = File.OpenRead(path))\n        {\n            await PutAsync(preset, link, new StreamContent(stream), cancellationToken);\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, fileName, cancellationToken);\n\n        var history = new History(preset, fileName, downloadLink, link);\n\n        await HistoryRepository.AddAsync(history, cancellationToken);\n\n        return history;\n    }", "CodeBleu_score": 54.451732737965244}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t//If the capture is not already running.\n    if (!IsCaptureInProgress) {\n        //If the capture is being forced to stop.\n        if (ForceStop) {\n            //Reset the flag.\n            ForceStop = false;\n            return;\n        }\n\n        //If the capture is being forced to pause.\n        if (ForcePause) {\n            //Reset the flag.\n            ForcePause = false;\n            //Set the pause flag.\n            IsPaused = true;\n            return;\n        }\n\n        //If the capture is being forced to record.\n        if (ForceRecord) {\n            //Reset the flag.\n            ForceRecord = false;\n            //Set the record flag.\n            IsRecording = true;\n        }\n\n        //Set the flag that the capture is in progress.\n        IsCaptureInProgress = true;\n\n        //If the user settings are locked.\n        if (UserSettings.Locked) {\n            //Reset the flag.\n            UserSettings.Locked = false;\n            //Show a warning to the user.\n            Dispatcher.Invoke(() => StatusList.Warning(LocalizationHelper.Get(\"S.Recorder.Warning.SettingsLocked\")));\n        }\n\n        //If the user settings are not loaded.\n        if (!UserSettings.Loaded) {\n            //Reset the flag.\n            UserSettings.Loaded = true;\n            //Show a warning to the user.\n            Dispatcher.Invoke(() => StatusList.Warning(LocalizationHelper.Get(\"S.Recorder.Warning.SettingsNotLoaded\")));\n        }\n\n        //Set the flag that the capture is being recorded.\n        IsRecording = true;\n\n        //Starts the timer used to measure the FPS.\n        AverageDelay = new Averager(100);\n        FrequencyTimer.Start();\n\n        //If the user wants to use the fixed frame rate.\n        if (UserSettings.All.FixedFrameRate) {\n            //If the user wants to use the fixed frame rate, the capture interval is set to the inverse of the framerate.\n            CaptureTimer.Interval = 1000 / UserSettings.All.LatestFps;", "CodeBleu_score": 22.2512049013815}, {"code": "internal virtual void StartCapture(){\n\tFrameRate.Start();\n\n    GetCaptureInterval();\n    HasFixedDelay();\n\n    Task.Run(() => {\n        PrepareCaptureLoop(GetFixedDelay());\n    }, _captureTokenSource.Token);\n\n    GarbageTimer.Start();\n\n    UserSettings.Lock();\n\n    _captureTokenSource = new CancellationTokenSource();\n\n    PrepareCaptureLoop(GetFixedDelay());\n}", "CodeBleu_score": 50.154840449433145}, {"code": "internal virtual void StartCapture(){\n\tFrameRate.Start();\n    GetCaptureInterval();\n    HasImpreciseCapture = false;\n    if (UserSettings.All.AutomaticCleanUp)\n        GarbageTimer.Start();\n    PrepareCaptureLoop(GetCaptureInterval());\n}", "CodeBleu_score": 38.74124856456634}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\tvar sw = Stopwatch.StartNew();\n    while (true) {\n        sw.Restart();\n        var frame = new Frame();\n        frame.Cursor = Cursor.Current;\n        KeyList.Clear();\n        frame.KeyList = KeyList.ToList();\n        frame.FrameCount = FrameCount;\n        frame.TimeStamp = DateTime.Now;\n        frame.Image = CaptureScreen();\n        OnFrameCaptured(frame);\n        FrameCount++;\n        if (sw.ElapsedMilliseconds < interval)\n            Thread.Sleep(1);\n        if (CaptureToken.IsCancellationRequested) {\n            sw.Stop();\n            break;\n        }\n    }\n}", "CodeBleu_score": 47.446144715200724}, {"code": "private void CaptureWithCursor(int interval){\n\tsw.Restart();\n    while (!token.IsCancellationRequested) {\n        sw.Restart();\n        var frame = new Frame(new Size(Width, Height), Cursor.Position, KeyList);\n        frame.Capture();\n        KeyList.Clear();\n        FrameCount++;\n        if (sw.ElapsedMilliseconds < interval)\n            Thread.Sleep(1);\n    }\n    sw.Stop();\n}", "CodeBleu_score": 46.24258112713697}, {"code": "private void CaptureWithCursor(int interval){\n\tsw.Restart();\n\twhile (true) {\n\t\tsw.Restart();\n\t\tvar frame = new Frame { Cursor = Cursor.Current };\n\t\tKeyList.Clear();\n\t\tframe.Image = Capture.Frame();\n\t\tframe.Count = FrameCount++;\n\t\tDispatcher.Invoke(() => {\n\t\t\tFrames.Add(frame);\n\t\t});\n\t\tif (sw.ElapsedMilliseconds < interval)\n\t\t\tThread.Sleep((int) (interval - sw.ElapsedMilliseconds));\n\t\tif (CaptureToken.IsCancellationRequested) {\n\t\t\tsw.Stop();\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 39.122216644385574}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\tif (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    UIElement child = InternalChildren[0];\n    double x = Padding.Left;\n    double y = Padding.Top;\n    double width = Math.Max(0.0, arrangeSize.Width - Padding.Left - Padding.Right);\n    double height = Math.Max(0.0, arrangeSize.Height - Padding.Top - Padding.Bottom);\n    child.Arrange(new Rect(x, y, width, height));\n    return arrangeSize;\n}", "CodeBleu_score": 46.32974986912055}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\tif (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    UIElement child = this.Child;\n    if (child != null) {\n        double x = 0.0, y = 0.0, width = 0.0, height = 0.0;\n        if (Padding != null) {\n            x = Padding.Left;\n            y = Padding.Top;\n            width = Math.Max(0.0, arrangeSize.Width - Padding.Left - Padding.Right);\n            height = Math.Max(0.0, arrangeSize.Height - Padding.Top - Padding.Bottom);\n        }\n        else {\n            width = Math.Max(0.0, arrangeSize.Width - 2.0);\n            height = Math.Max(0.0, arrangeSize.Height - 2.0);\n        }\n        child.Arrange(new Rect(x, y, width, height));\n    }\n    return arrangeSize;\n}", "CodeBleu_score": 50.1874950031333}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\tif (UsingBorderImplementation)\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t\n\tUIElement child = this.Child;\n\tif (child != null) {\n\t\tSize childSize = new Size();\n\t\tThickness padding = this.Padding;\n\t\tchildSize.Width = Math.Max(0.0, arrangeSize.Width - padding.Left - padding.Right);\n\t\tchildSize.Height = Math.Max(0.0, arrangeSize.Height - padding.Top - padding.Bottom);\n\t\tchild.Arrange(new Rect(new Point(padding.Left, padding.Top), childSize));\n\t}\n\treturn arrangeSize;\n}", "CodeBleu_score": 51.48244388145727}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValue;\n            return;\n        }\n        IgnoreChanges = true;\n        Value = Convert.ToDecimal(Text);\n        UpdateText();\n        IgnoreChanges = false;\n    } else {\n        UpdateText();\n    }\n}", "CodeBleu_score": 38.97711140389362}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\n\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValue;\n            return;\n        }\n\n        IgnoreTextChanges = true;\n        Value = Convert.ToDecimal(Text);\n        UpdateText();\n        IgnoreTextChanges = false;\n    } else {\n        UpdateText();\n    }\n}", "CodeBleu_score": 39.185075767985886}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValue;\n            return;\n        }\n        IgnoreChanges = true;\n        Text = Convert.ToDecimal(Text).ToString(TextFormat, CultureInfo.CurrentCulture);\n        IgnoreChanges = false;\n    } else {\n        Text = Value.ToString(TextFormat, CultureInfo.CurrentCulture);\n    }\n}", "CodeBleu_score": 50.763651996826574}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n\t\te.Handled = true;\n\t\tMoveFocus();\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 58.00791552116276}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus();\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 62.660066551945825}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n\t\te.Handled = true;\n\t\tMoveFocus();\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 58.00791552116276}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\n    if (!_isMouseCaptured || !_isLeftButtonPressed) {\n        return;\n    }\n\n    var current = GetBoundedCoordinates(e);\n\n    if (_isSelectionMode) {\n        if (_selectedShapes.Count == 0 || Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)) {\n            _selectionRect.Width = current.X - _startPoint.X;\n            _selectionRect.Height = current.Y - _startPoint.Y;\n            return;\n        }\n    }\n\n    if (_isDrawingMode) {\n        var start = _startPoint;\n        var end = current;\n\n        if (_currentShape != null) {\n            start = _currentPoint;\n            end = current;\n        }\n\n        if (start.X > end.X) {\n            var temp = start.X;\n            start.X = end.X;\n            end.X = temp;\n        }\n\n        if (start.Y > end.Y) {\n            var temp = start.Y;\n            start.Y = end.Y;\n            end.Y = temp;\n        }\n\n        var width = end.X - start.X;\n        var height = end.Y - start.Y;\n\n        if (width < 0) {\n            width = 0;\n        }\n\n        if (height < 0) {\n            height = 0;\n        }\n\n        RenderRegion = new Rect(start, new Size(width, height));\n\n        if (_currentShape == null) {\n            CalculateOrientation(start, end);\n        }\n\n        RenderShape();\n    }\n}", "CodeBleu_score": 33.14991479789127}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\n    if (!IsMouseCaptured || e.LeftButton != MouseButtonState.Pressed)\n        return;\n\n    if (IsSelectionMode && (SelectedShapes.Count == 0 || Keyboard.Modifiers == ModifierKeys.Control)) {\n        var current = GetBoundedCoordinates(e);\n\n        if (current.X < _startPoint.X) {\n            _selectionRectangle.X = current.X;\n            _selectionRectangle.Width = _startPoint.X - current.X;\n        }\n        else {\n            _selectionRectangle.X = _startPoint.X;\n            _selectionRectangle.Width = current.X - _startPoint.X;\n        }\n\n        if (current.Y < _startPoint.Y) {\n            _selectionRectangle.Y = current.Y;\n            _selectionRectangle.Height = _startPoint.Y - current.Y;\n        }\n        else {\n            _selectionRectangle.Y = _startPoint.Y;\n            _selectionRectangle.Height = current.Y - _startPoint.Y;\n        }\n\n        _selectionRectangle.Visibility = Visibility.Visible;\n        return;\n    }\n\n    var currentPoint = GetBoundedCoordinates(e);\n\n    if (Keyboard.Modifiers == ModifierKeys.Shift) {\n        if (_currentPoint.X == -1)\n            _currentPoint = currentPoint;\n\n        var x = Math.Abs(_currentPoint.X - currentPoint.X);\n        var y = Math.Abs(_currentPoint.Y - currentPoint.Y);\n\n        if (x > y)\n            currentPoint.Y = _currentPoint.Y;\n        else\n            currentPoint.X = _currentPoint.X;\n    }\n\n    if (_currentPoint.X == -1)\n        _currentPoint = currentPoint;\n\n    if (_startPoint.X == -1)\n        _startPoint = currentPoint;\n\n    if (_currentPoint.X == _startPoint.X && _currentPoint.Y == _startPoint.Y)\n        return;\n\n    CalculateOrientation(_startPoint, currentPoint);", "CodeBleu_score": 35.31964487656485}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tif (!IsMouseCaptured || !e.LeftButton.HasFlag(MouseButtonState.Pressed))\n        return;\n\n    var current = GetBoundedCoordinates(e);\n\n    if (IsSelectionMode) {\n        if (_selectedShapes.Count == 0 || Keyboard.IsKeyDown(Key.LeftCtrl)) {\n            _selectionRectangle.Width = current.X - _selectionRectangle.X;\n            _selectionRectangle.Height = current.Y - _selectionRectangle.Y;\n            return;\n        }\n\n        foreach (var shape in _selectedShapes) {\n            var shapeRect = new Rect(Canvas.GetLeft(shape), Canvas.GetTop(shape), shape.Width, shape.Height);\n            var newRect = Rect.Inflate(shapeRect, current.X - _currentPoint.X, current.Y - _currentPoint.Y);\n\n            Canvas.SetLeft(shape, newRect.Left);\n            Canvas.SetTop(shape, newRect.Top);\n            shape.Width = newRect.Width;\n            shape.Height = newRect.Height;\n        }\n\n        return;\n    }\n\n    if (_currentShape == null) {\n        _startPoint = current;\n        _currentPoint = current;\n        _renderRegion = new Rect(current, current);\n        return;\n    }\n\n    if (_currentPoint == current)\n        return;\n\n    _currentPoint = current;\n\n    CalculateOrientation(_startPoint, _currentPoint);\n\n    _renderRegion = new Rect(_startPoint, _currentPoint);\n\n    RenderShape();\n}", "CodeBleu_score": 35.18661709890873}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender != bottomRight)\n        return;\n    e.Handled = true;\n\n    double width = Math.Max(adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n    double height = Math.Max(adornedElement.DesiredSize.Height + e.VerticalChange, 10);\n\n    double parentWidth = Canvas.GetLeft(adornedElement) + width;\n    double parentHeight = Canvas.GetTop(adornedElement) + height;\n\n    if (parentWidth > parent.DesiredSize.Width)\n        width = parent.DesiredSize.Width - Canvas.GetLeft(adornedElement);\n    if (parentHeight > parent.DesiredSize.Height)\n        height = parent.DesiredSize.Height - Canvas.GetTop(adornedElement);\n\n    adornedElement.Width = width;\n    adornedElement.Height = height;\n\n    RaiseManipulatedEvent(0);\n    AfterManipulation();\n}", "CodeBleu_score": 51.31894201016054}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender is Thumb) {\n        e.Handled = true;\n        var thumb = sender as Thumb;\n        var canvas = thumb.Parent as Canvas;\n        var element = canvas.Parent as FrameworkElement;\n\n        double width = Math.Max(element.Width + e.HorizontalChange, 10);\n        double height = Math.Max(element.Height + e.VerticalChange, 10);\n\n        width = Math.Min(width, canvas.ActualWidth);\n        height = Math.Min(height, canvas.ActualHeight);\n\n        element.Width = width;\n        element.Height = height;\n\n        RaiseManipulatedEvent(0);\n        AfterManipulation();\n    }\n}", "CodeBleu_score": 41.806332313839675}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender != bottomRight) return;\n    e.Handled = true;\n    var width = Math.Max(10, adornedElement.Width + e.HorizontalChange);\n    var height = Math.Max(10, adornedElement.Height + e.VerticalChange);\n    width = Math.Min(width, parent.ActualWidth);\n    height = Math.Min(height, parent.ActualHeight);\n    var angleDiff = 0.0;\n    if (parent.ActualWidth != 0 && parent.ActualHeight != 0) {\n        angleDiff = Math.Atan2(e.VerticalChange, e.HorizontalChange) * 180 / Math.PI;\n    }\n    RaiseManipulatedEvent(angleDiff);\n    adornedElement.Width = width;\n    adornedElement.Height = height;\n    AfterManipulation();\n}", "CodeBleu_score": 45.81985612878824}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\tthis.IntegerList = Enumerable.Range(0, 1000).ToList();\n    this.StringList = new List<string>() { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\", \"Item 6\", \"Item 7\", \"Item 8\", \"Item 9\", \"Item 10\" };\n    this.SelectedValue = 0;\n    this.SelectedText = null;\n    this.LongStringList = new List<string>();\n    for (int i = 0; i < 1000; i++) {\n        this.LongStringList.Add(Path.GetRandomFileName());\n    }\n}", "CodeBleu_score": 57.19344684215807}, {"code": "public ComboBoxesViewModel(){\n\tIntegerList = Enumerable.Range(0, 1000).ToList();\n  StringList = new List<string> { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\" };\n  LongStringList = new List<string>();\n  for (int i = 0; i < 1000; i++) {\n    LongStringList.Add(Path.GetRandomFileName());\n  }\n  SelectedValue = IntegerList.First();\n  SelectedText = null;\n}", "CodeBleu_score": 60.22231266303226}, {"code": "public ComboBoxesViewModel(){\n\tvar longIntegerList = Enumerable.Range(0, 1000).ToList();\n  var shortStringList = new List<string> { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" };\n  var longStringList = new List<string>();\n  for (var i = 0; i < 1000; i++) {\n    longStringList.Add(Path.GetRandomFileName());\n  }\n  LongIntegerList = longIntegerList;\n  ShortStringList = shortStringList;\n  LongStringList = longStringList;\n  SelectedValue = longIntegerList[0];\n  SelectedText = null;\n}", "CodeBleu_score": 46.67165795524392}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\tvar dialog = new SampleDialog();\n    dialog.DataContext = new SampleDialogViewModel();\n\n    await DialogHost.Show(dialog, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n\n    Debug.WriteLine($\"Dialog was closed with result: {dialog.DataContext}\");\n}", "CodeBleu_score": 24.50018299901135}, {"code": "private async Task RunDialog() {\n\tvar dialog = new SampleDialog();\n\tdialog.DataContext = new SampleDialogViewModel();\n\tawait DialogHost.Show(dialog, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n}", "CodeBleu_score": 18.48571292202063}, {"code": "private async Task RunDialog() {\n\tvar dialog = new SampleDialog();\n    dialog.DataContext = new SampleDialogViewModel();\n    await DialogHost.Show(dialog, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n}", "CodeBleu_score": 19.282129533035704}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\tvar paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n\n    modificationAction?.Invoke(theme);\n\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.4242781780462}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\tPaletteHelper paletteHelper = new PaletteHelper();\n    Theme theme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(theme);\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.22687818600451}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\tPaletteHelper paletteHelper = new PaletteHelper();\n    Theme currentTheme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(currentTheme);\n    paletteHelper.SetTheme(currentTheme);\n}", "CodeBleu_score": 60.3660927534309}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\tobject? content = Activator.CreateInstance(ContentType);\n    if (content is FrameworkElement element && DataContext != null) {\n        element.DataContext = DataContext;\n    }\n    return content;\n}", "CodeBleu_score": 47.081359012794586}, {"code": "private object? CreateContent(){\n\tif (ContentType == null) {\n        return null;\n    }\n\n    object? content = Activator.CreateInstance(ContentType);\n    if (content is FrameworkElement element) {\n        element.DataContext = DataContext;\n    }\n\n    return content;\n}", "CodeBleu_score": 52.801641643115325}, {"code": "private object? CreateContent(){\n\tif (ContentType is null) {\n        return null;\n    }\n\n    object? content = Activator.CreateInstance(ContentType);\n\n    if (DataContext is not null && content is FrameworkElement element) {\n        element.DataContext = DataContext;\n    }\n\n    return content;\n}", "CodeBleu_score": 70.74072109940826}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(t => IsSample4DialogOpen = false, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 55.63795283006318}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(\n            t => {\n                IsSample4DialogOpen = false;\n            },\n            TaskScheduler.FromCurrentSynchronizationContext()\n        );\n}", "CodeBleu_score": 50.23285959808214}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(t => {\n            IsSample4DialogOpen = false;\n        }, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 54.340989134390185}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\tforeach (DeviceTrigger trigger in _deviceTriggers) {\n        if (trigger.Option == option) {\n            if (trigger.DeviceID == device.ID) {\n                trigger.Triggered?.Invoke();\n            }\n        }\n    }\n}", "CodeBleu_score": 65.26999151921515}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\tforeach(var trigger in _deviceTriggers) {\n        if(trigger.Option == option) {\n            if(trigger.DeviceId == device.Id) {\n                trigger.Triggered?.Invoke();\n            }\n        }\n    }\n}", "CodeBleu_score": 58.73238864350151}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Option == option) {\n\t\t\tif (trigger.DeviceID == device.ID) {\n\t\t\t\ttrigger.Triggered?.Invoke();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 61.5853756323575}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t// Clear the trigger manager\n\t_triggerManager.Clear();\n\t// Load actions from settings\n\tvar actions = Settings.Get<List<Action>>(_actionsKey);\n\t// Register each trigger from the loaded actions with the trigger manager\n\tactions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 45.34571565906481}, {"code": "private void LoadAndRegister(){\n\t_triggerManager.Clear();\n    _actions = Settings.Get<List<Action>>(_key);\n    _actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 68.51687489795934}, {"code": "private void LoadAndRegister(){\n\t_triggerManager.Clear();\n    _actions = Settings.Get<List<Action>>(_actionsKey);\n    _actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 69.46072936113063}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n    if (action != null && action.Conditions.All(c => ConditionProcessor.IsMet(c))) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 73.54930063242135}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n    if (action != null && action.Conditions.All(c => ConditionProcessor.IsMet(c))) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 73.54930063242135}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger) && ConditionProcessor.IsMet(a.Conditions));\n    if (action != null) TriggerAction(action);\n}", "CodeBleu_score": 39.847063531158675}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet mentioning_vars = self\n        .scope_graph\n        .borrow()\n        .get_mentioning_vars(name)\n        .iter()\n        .filter_map(|v| self.eww_config.get_script_var(v.name.clone()).ok())\n        .filter(|v| v.is_poll_var());\n\n    for poll_var in mentioning_vars {\n        if poll_var\n            .run_while_expr\n            .evaluate_in_scope(self.scope_graph.borrow().root_index, self.scope_graph.borrow())\n            .map(|v| v.as_bool())\n            .unwrap_or(false)\n        {\n            self.script_var_handler.add(poll_var.clone());\n        } else {\n            self.script_var_handler.stop_for_variable(&poll_var.name);\n        }\n    }\n}", "CodeBleu_score": 28.991672244616247}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet mentioning_vars = self.scope_graph.borrow().get_vars_mentioning(name);\n    for v in mentioning_vars.iter().filter_map(|var| {\n        self.eww_config\n            .get_script_var(var.name.clone())\n            .ok()\n            .and_then(|v| v.as_poll_var())\n    }) {\n        if let Ok(true) = self\n            .scope_graph\n            .borrow()\n            .evaluate_simplexpr_in_scope(\n                self.scope_graph.borrow().root_index,\n                &v.run_while_expr,\n            )\n            .map(|v| v.as_bool())\n        {\n            self.script_var_handler.add(v.clone());\n        } else {\n            self.script_var_handler.stop_for_variable(v.name.clone());\n        }\n    }\n}", "CodeBleu_score": 36.30212279367219}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet mentioning_vars = self.scope_graph.borrow().get_vars_mentioning(name);\n    for v in mentioning_vars.iter().filter_map(|var| {\n        self.eww_config\n            .get_script_var(var.name.clone())\n            .ok()\n            .and_then(|v| v.as_poll_var())\n    }) {\n        if self\n            .scope_graph\n            .borrow()\n            .evaluate_simplexpr_in_scope(\n                self.scope_graph.borrow().root_index,\n                &v.run_while_expr,\n            )\n            .map(|v| v.as_bool())\n            .unwrap_or(false)\n        {\n            self.script_var_handler.add(v.clone());\n        } else {\n            self.script_var_handler.stop_for_variable(v.name.clone());\n        }\n    }\n}", "CodeBleu_score": 35.593041260804526}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t// Remove and abort any existing close timer for the window\n    if let Some(abort_send) = self.window_close_timer_abort_senders.remove(instance_id) {\n        abort_send.send(()).context(\n            \"Failed to send abort signal to the close timer of the window with instance ID \\\"{}\\\"\",\n            instance_id,\n        )?;\n    }\n    // Retrieve and close the window\n    let eww_window = self\n        .open_windows\n        .remove(instance_id)\n        .with_context(|| {\n            format!(\n                \"Failed to retrieve the window with instance ID \\\"{}\\\"\",\n                instance_id\n            )\n        })?;\n    eww_window.close().context(\n        \"Failed to close the window with instance ID \\\"{}\\\"\",\n        instance_id,\n    )?;\n    // Remove the window's associated scope from the scope graph\n    self.scope_graph\n        .borrow_mut()\n        .remove_scope(instance_id)\n        .context(\n            \"Failed to remove the scope of the window with instance ID \\\"{}\\\" from the scope graph\",\n            instance_id,\n        )?;\n    // Identify and stop any unused global variables\n    for unused_var in self\n        .scope_graph\n        .borrow()\n        .currently_unused_globals()\n        .context(\n            \"Failed to retrieve the currently unused global variables from the scope graph\",\n        )?\n    {\n        self.script_var_handler\n            .stop_for_variable(unused_var)\n            .context(\n                \"Failed to stop the script variable handler for the variable \\\"{}\\\"\",\n                unused_var,\n            )?;\n    }\n    // Remove the instance ID from the arguments map\n    self.instance_id_to_args\n        .remove(instance_id)\n        .with_context(|| {\n            format!(\n                \"Failed to retrieve the arguments of the window with instance ID \\\"{}\\\"\",\n                instance_id\n            )\n        })?;\n    Ok(())\n}", "CodeBleu_score": 56.90325648429875}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tself.open_windows.remove(instance_id).with_context(|| format!(\"Failed to close window with instance ID {}\", instance_id))?;\n    self.window_close_timer_abort_senders.remove(instance_id);\n    let mut unused_var = vec![];\n    self.scope_graph.borrow_mut().remove_scope(instance_id, &mut unused_var);\n    for var in unused_var.iter() {\n        self.script_var_handler.stop_for_variable(var);\n    }\n    self.scope_graph.borrow().currently_unused_globals.retain(|var| !unused_var.contains(var));\n    Ok(())\n}", "CodeBleu_score": 54.511552188538495}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tself.open_windows.remove(instance_id);\n    self.scope_graph.borrow_mut().remove_scope(instance_id);\n    self.window_close_timer_abort_senders.remove(instance_id);\n    self.unused_var_handler.stop_for_variable(instance_id);\n    self.scope_graph.borrow().currently_unused_globals.iter().for_each(|unused_var| {\n        self.unused_var_handler.stop_for_variable(unused_var);\n    });\n    self.instance_id_to_args.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 48.333955389616676}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tinfo!(\"Reloading config\");\n    self.script_var_handler.stop_all();\n    let old_handler = std::mem::replace(&mut self.script_var_handler, script_var_handler::ScriptVarHandler::new(self.eww_state.clone(), self.app_evt_send.clone()));\n    old_handler.join_thread().context(\"Failed to stop old script variable handler\")?;\n    info!(\"New config: {:#?}\", config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.scope_graph.borrow_mut().update_from_config(&self.eww_config);\n    let window_arguments = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().collect::<Vec<_>>();\n    for instance_id in window_arguments {\n        let args = self.instance_id_to_args.get(&instance_id).with_context(|| format!(\"Failed to find args for window with instance id {}\", instance_id))?;\n        self.open_window(args.clone())?;\n    }\n    Ok(())\n}", "CodeBleu_score": 69.07077191072676}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tself.log_action(|| \"Reloading config\");\n    self.script_var_handler.stop_all();\n    let old_handler = std::mem::replace(&mut self.script_var_handler, script_var_handler::ScriptVarHandler::new(config.generate_initial_state()));\n    old_handler.join_thread()?;\n    self.log_action(|| \"New config loaded\");\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    let window_arguments: Vec<_> = self\n        .open_windows\n        .keys()\n        .cloned()\n        .chain(self.failed_windows.iter().cloned())\n        .dedup()\n        .collect();\n    for instance_id in window_arguments {\n        let window_arguments = self\n            .instance_id_to_args\n            .get(&instance_id)\n            .with_context(|| format!(\"Failed to find arguments for window with ID {}\", instance_id))?\n            .clone();\n        self.open_window(window_arguments)?;\n    }\n    Ok(())\n}", "CodeBleu_score": 59.042917837284136}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tinfo!(\"Reloading configuration\");\n    self.script_var_handler.stop_all();\n    let old_handler = std::mem::replace(&mut self.script_var_handler, ScriptVarHandler::new(config.generate_initial_state()));\n    old_handler.join_thread().with_context(|| \"Failed to join old script var handler thread\")?;\n\n    info!(\"New configuration loaded:\n{:#?}\", config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.scope_graph.borrow_mut().update_from_config(self.eww_config.initial_state.clone());\n\n    let mut window_arguments: HashMap<String, WindowCreateOptions> = HashMap::new();\n    for instance_id in self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().collect::<Vec<_>>() {\n        let window_args = self.instance_id_to_args.get(&instance_id).with_context(|| format!(\"Instance id {} not found in instance_id_to_args\", instance_id))?;\n        window_arguments.insert(instance_id, window_args.clone());\n    }\n\n    for (instance_id, window_args) in window_arguments {\n        self.open_window(instance_id, window_args).with_context(|| format!(\"Failed to reopen window with instance_id {}\", instance_id))?;\n    }\n\n    Ok(())\n}", "CodeBleu_score": 64.40340724411851}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\tmatch self.css_provider.load_from_data(css.as_bytes()) {\n        Ok(_) => Ok(()),\n        Err(err) => {\n            (|| {\n                let captures = PATTERN.captures(err.message())?;\n                let line = captures.get(1).unwrap().as_str().parse::<usize>().ok()?;\n                let msg = captures.get(3).unwrap().as_str();\n                let db = error_handling_ctx::FILE_DATABASE.read().ok()?;\n                let line_range = db.line_range(file_id, line - 1).ok()?;\n                let span = Span(line_range.start, line_range.end - 1, file_id);\n                Some(DiagError(gen_diagnostic!(msg, span)))\n            })()\n            .unwrap_or_else(|| DiagError(gen_diagnostic!(err.message(), file_id)))\n        }\n    }\n}", "CodeBleu_score": 62.309801951396416}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\tmatch self.css_provider.load_from_data(css.as_bytes()) {\n        Ok(_) => Ok(()),\n        Err(err) => {\n            let error = (|| {\n                let captures = PATTERN.captures(err.message())?;\n                let line = captures.get(1).unwrap().as_str().parse::<usize>().ok()?;\n                let msg = captures.get(3).unwrap().as_str();\n                let db = error_handling_ctx::FILE_DATABASE.read().ok()?;\n                let line_range = db.line_range(file_id, line - 1).ok()?;\n                let span = Span(line_range.start, line_range.end - 1, file_id);\n                Some(DiagError(gen_diagnostic!(msg, span)))\n            })();\n\n            if let Some(error) = error {\n                Err(error)\n            } else {\n                Err(DiagError(gen_diagnostic!(\n                    \"CSS error: {}\",\n                    Span(0, 0, file_id)\n                )))\n            }\n        }\n    }\n}", "CodeBleu_score": 72.96037084574003}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\tmatch self.css_provider.load_from_data(css.as_bytes()) {\n        Ok(_) => Ok(()),\n        Err(err) => {\n            (|| {\n                let captures = PATTERN.captures(err.message())?;\n                let line = captures.get(1).unwrap().as_str().parse::<usize>().ok()?;\n                let msg = captures.get(3).unwrap().as_str();\n                let db = error_handling_ctx::FILE_DATABASE.read().ok()?;\n                let line_range = db.line_range(file_id, line - 1).ok()?;\n                let span = Span(line_range.start, line_range.end - 1, file_id);\n                Some(DiagError(gen_diagnostic!(msg, span)))\n            })()\n            .unwrap_or_else(|| DiagError(gen_diagnostic!(\"CSS error\", Span(0, 0, file_id))))\n        }\n    }\n}", "CodeBleu_score": 62.386981460760296}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::default().context(\"Could not connect to a display server\")?;\n    let monitor = match identifier {\n        Some(ident) => get_monitor_from_display(&display, &ident).context(format!(\"Could not find monitor with identifier: {:?}\", ident))?,\n        None => display.primary_monitor().context(\"Could not get primary monitor\")?,\n    };\n    Ok(monitor)\n}", "CodeBleu_score": 20.9196902130103}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::default().context(\"Failed to get default display\")?;\n    let monitor = match identifier {\n        Some(identifier) => get_monitor_from_display(&display, &identifier)\n            .context(format!(\"Failed to get monitor from identifier: {:?}\", identifier))?,\n        None => display.primary_monitor().context(\"Failed to get primary monitor\")?,\n    };\n    Ok(monitor)\n}", "CodeBleu_score": 21.73137044971043}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::default().context(\"Failed to get default display\")?;\n    let monitor = match identifier {\n        Some(ident) => get_monitor_from_display(&display, &ident).context(format!(\"Failed to find monitor: {:?}\", ident))?,\n        None => display.primary_monitor().context(\"Failed to get primary monitor\")?,\n    };\n    Ok(monitor)\n}", "CodeBleu_score": 20.890806288238846}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t// Compute the offset and size of the window relative to the screen size.\n    let width = geometry.size.relative_to(screen_rect.width);\n    let height = geometry.size.relative_to(screen_rect.height);\n\n    // Calculate the x and y coordinates by adding the screen coordinates, offsets, and anchor point alignments.\n    let x = screen_rect.x + geometry.offset.x + geometry.anchor_point.x.alignment_to_coordinate(width, screen_rect.width);\n    let y = screen_rect.y + geometry.offset.y + geometry.anchor_point.y.alignment_to_coordinate(height, screen_rect.height);\n\n    // Return a new gdk::Rectangle with the computed x, y, width, and height.\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 60.608503138658406}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tlet x = screen_rect.x + geometry.offset.x + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\n    let y = screen_rect.y + geometry.offset.y + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\n    let width = geometry.size.relative_to(screen_rect.width);\n    let height = geometry.size.relative_to(screen_rect.height);\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 58.9540605558488}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tlet mut window_rect = gdk::Rectangle::new();\n\n    // Calculate the offset and size of the window relative to the screen size\n    let offset_x = geometry.offset.x.relative_to(screen_rect.width);\n    let offset_y = geometry.offset.y.relative_to(screen_rect.height);\n    let width = geometry.size.width.relative_to(screen_rect.width);\n    let height = geometry.size.height.relative_to(screen_rect.height);\n\n    // Calculate the x and y coordinates by adding the screen coordinates, offsets, and anchor point alignments\n    window_rect.x = screen_rect.x + offset_x + geometry.anchor_point.x.alignment_to_coordinate(width);\n    window_rect.y = screen_rect.y + offset_y + geometry.anchor_point.y.alignment_to_coordinate(height);\n\n    // Set the width and height of the window\n    window_rect.width = width;\n    window_rect.height = height;\n\n    // Return the window rectangle\n    window_rect\n}", "CodeBleu_score": 54.031344945215395}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t// If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {\n        window.set_resizable(false);\n    }\n\n    // If the window is not resizable, set the resizable property to false\n    if !window_init.resizable {", "CodeBleu_score": 37.5525989744198}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\tlet window_type = match window_init.backend {\n        Backend::X11 => WindowType::Toplevel,\n        Backend::Wayland => WindowType::Toplevel,\n        Backend::Windows => WindowType::Popup,\n    };\n\n    let window = Window::new(window_type, &[window_init.visual]);\n\n    window.set_resizable(window_init.resizable);\n    window.set_keep_above(window_init.foreground);\n    window.set_keep_below(!window_init.foreground);\n    window.stick();\n\n    Some(window)\n}", "CodeBleu_score": 53.796598913576624}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\tlet window_type = match window_init.backend {\n        Backend::X11 => WindowType::Toplevel,\n        Backend::Wayland => WindowType::Toplevel,\n        Backend::MacOS => WindowType::Popup,\n    };\n    let window = Window::new(window_type, None);\n    window.set_title(\"Clipboard Manager\");\n    window.set_resizable(window_init.resizable);\n    window.set_keep_above(window_init.stack_position == StackPosition::Foreground);\n    window.set_keep_below(window_init.stack_position == StackPosition::Background);\n    window.stick();\n    window.set_position(WindowPosition::None);\n    window.set_decorated(false);\n    window.set_default_size(1, 1);\n    window.set_icon_from_file(\n        Path::new(\n            &std::env::var(\"HOME\").unwrap_or_else(|_| \".\".to_string())\n                .to_owned()\n                .to_string()\n                + \"/.local/share/clipman/icon.png\",\n        ),\n    );\n    window.set_position(WindowPosition::CenterOnParent);\n    window.set_default_size(\n        _monitor.width / 2,\n        _monitor.height / 2\n    );\n    window.set_position(WindowPosition::Center);\n    window.set_position(WindowPosition::None);\n    window.move_(x, y);\n    Some(window)\n}", "CodeBleu_score": 56.06998337105462}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n        if let Ok(string) = stringify_diagnostic(diagnostic) {\n            eprintln!(\"{}\", string);\n            return;\n        }\n    }\n    log::error!(\"{}\", err);\n}", "CodeBleu_score": 36.13560476203625}, {"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n        if let Ok(stringified_diagnostic) = stringify_diagnostic(diagnostic) {\n            eprintln!(\"{}\", stringified_diagnostic);\n        } else {\n            eprintln!(\"{}\", err);\n        }\n    } else {\n        eprintln!(\"{}\", err);\n    }\n}", "CodeBleu_score": 32.22325591438434}, {"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n        if let Ok(string) = stringify_diagnostic(diagnostic) {\n            eprintln!(\"{}\", string);\n        } else {\n            log::error!(\"{:?}\", err);\n        }\n    } else {\n        log::error!(\"{:?}\", err);\n    }\n}", "CodeBleu_score": 38.161180779679235}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\tlet listener = UnixListener::bind(socket_path).await?;\n    info!(\"IPC server initialized at {}\", listener.local_addr()?);\n\n    loop {\n        let (stream, _) = listener.accept().await?;\n        let evt_send = evt_send.clone();\n        tokio::spawn(async move {\n            if let Err(e) = handle_connection(stream, evt_send).await {\n                error!(\"Error handling IPC connection: {}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 33.834668410983625}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\tlet listener = UnixListener::bind(socket_path.as_ref()).await?;\n    info!(\"IPC server listening on {:?}\", socket_path.as_ref());\n\n    loop {\n        match listener.accept().await {\n            Ok((stream, addr)) => {\n                let evt_send = evt_send.clone();\n                tokio::spawn(async move {\n                    if let Err(err) = handle_connection(stream, evt_send).await {\n                        error!(\"error handling IPC connection: {}\", err);\n                    }\n                });\n            }\n            Err(err) => {\n                error!(\"error accepting IPC connection: {}\", err);\n            }\n        }\n    }\n}", "CodeBleu_score": 61.439197020715156}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t// Initialize the server\n    let listener = UnixListener::bind(socket_path.as_ref()).await?;\n\n    // Log the server initialization\n    info!(\"IPC server initialized\");\n\n    // Accept incoming connections\n    loop {\n        // Accept the next incoming connection\n        let (stream, peer_addr) = listener.accept().await?;\n        info!(\"IPC connection accepted from {}\", peer_addr);\n\n        // Clone the event sender\n        let evt_send = evt_send.clone();\n\n        // Spawn a new task to handle the connection asynchronously\n        tokio::spawn(async move {\n            // Handle the connection\n            if let Err(err) = handle_connection(stream, evt_send).await {\n                // Log any errors that occur while handling the connection\n                error!(\"IPC connection error: {}\", err);\n            }\n        });\n    }\n}", "CodeBleu_score": 38.2526602613854}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\tlet (mut stream_read, mut stream_write) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    let action = action.into_daemon_command();\n    log::info!(\"Received IPC command: {:?}\", action);\n    evt_send.send(action)?;\n    if action.expects_response() {\n        let response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv()).await??;\n        log::info!(\"Sending response: {:?}\", response);\n        let response_byte_length = bincode::serialize(&response)?;\n        let response_byte_length = response_byte_length.len() as u32;\n        let response_byte_length = response_byte_length.to_be_bytes();\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write.write_all(&response_byte_length).await?;\n        stream_write", "CodeBleu_score": 53.749457492428256}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\tlet (mut stream_read, mut stream_write) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    log::info!(\"Received action: {:?}\", action);\n    let action = action.into_daemon_command();\n    let response_recv = evt_send.send(action).context(\"Failed to send command to daemon\")?;\n    let response = tokio::time::timeout(Duration::from_millis(100), response_recv).await;\n    if let Ok(Ok(response)) = response {\n        log::info!(\"Sending response: {:?}\", response);\n        let response_bytes = bincode::serialize(&response).context(\"Failed to serialize response\")?;\n        stream_write.write_all(&(response_bytes.len() as u32).to_be_bytes()).await.context(\"Failed to write response size header in IPC message\")?;\n        stream_write.write_all(&response_bytes).await.context(\"Failed to write response in IPC message\")?;\n    }\n    stream_write.shutdown().await.context(\"Failed to shut down write stream\")?;\n    Ok(())\n}", "CodeBleu_score": 60.17303548661095}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\tlet (mut stream_read, mut stream_write) = stream.split();\n\n    let action = read_action_from_stream(&mut stream_read).await?;\n    log::info!(\"Received IPC command: {:?}\", action);\n\n    let action = action.into_daemon_command();\n    evt_send.send(action).context(\"Failed to send IPC command to daemon\")?;\n\n    if let opts::ActionWithServer::ActionWithResponse(action) = action {\n        let response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv()).await.context(\"Failed to receive response to IPC command\")?;\n        let response = response.context(\"Failed to receive response to IPC command\")?;\n        log::info!(\"Sending response to IPC command: {:?}\", response);\n        let response_bytes = bincode::serialize(&response).context(\"Failed to serialize response to IPC command\")?;\n        stream_write.write_all(&(response_bytes.len() as u32).to_be_bytes()).await.context(\"Failed to write response size header to IPC command\")?;\n        stream_write.write_all(&response_bytes).await.context(\"Failed to write response to IPC command\")?;\n    }\n\n    stream_write.shutdown().context(\"Failed to shutdown IPC command stream\")?;\n\n    Ok(())\n}", "CodeBleu_score": 62.10323602764751}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut message_byte_length: [u8; 4] = [0; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(\n        \"Failed to read message size header from Unix stream.\"\n    )?;\n    let message_byte_length: u32 = u32::from_be_bytes(message_byte_length);\n    let mut raw_message: Vec<u8> = Vec::<u8>::with_capacity(message_byte_length as usize);\n    while raw_message.len() < message_byte_length as usize {\n        stream_read.read_exact(&mut raw_message).await.context(\n            \"Failed to read message from Unix stream.\"\n        )?;\n    }\n    Ok(bincode::deserialize(&raw_message).context(\n        \"Failed to deserialize message from Unix stream.\"\n    )?)\n}", "CodeBleu_score": 76.93686802084497}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut message_byte_length: [u8; 4] = [0; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(format!(\"Failed to read message size header from stream\"))?;\n    let message_byte_length: u32 = u32::from_be_bytes(message_byte_length);\n    let mut raw_message: Vec<u8> = Vec::<u8>::with_capacity(message_byte_length as usize);\n    stream_read.read_exact(&mut raw_message).await.context(format!(\"Failed to read message from stream\"))?;\n    bincode::deserialize(&raw_message).context(format!(\"Failed to deserialize message\"))\n}", "CodeBleu_score": 57.158228753048114}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut message_byte_length: [u8; 4] = [0; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(format!(\"Failed to read message byte length from stream.\"))?;\n    let message_byte_length: u32 = u32::from_be_bytes(message_byte_length);\n    let mut raw_message: Vec<u8> = Vec::<u8>::with_capacity(message_byte_length as usize);\n    while raw_message.len() < message_byte_length as usize {\n        stream_read.read_buf(&mut raw_message).await.context(format!(\"Failed to read message from stream.\"))?;\n    }\n    let message: opts::ActionWithServer = bincode::deserialize(&raw_message).context(format!(\"Failed to deserialize message.\"))?;\n    Ok(message)\n}", "CodeBleu_score": 71.96161070858348}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\tlet proxy = zbus::fdo::DBusProxy::new(con).await?;\n    let has_owner = proxy.name_has_owner(service).await?;\n    if !has_owner {\n        return Ok(());\n    }\n\n    let mut stream = proxy.receive_name_owner_changed().await?;\n    while let Some(msg) = stream.next().await {\n        let msg = msg?;\n        let (name, _, new_owner) = msg.args3::<String, u32, Option<String>>()?;\n        if name == service.as_ref() && new_owner.is_none() {\n            return Ok(());\n        }\n    }\n\n    unreachable!();\n}", "CodeBleu_score": 61.07102383495201}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\tlet proxy = zbus::fdo::DBusProxy::new(con).await?;\n    let mut stream = proxy.receive_name_owner_changed().await?;\n    let initial_owner = proxy.name_has_owner(service).await?;\n    if initial_owner.is_none() {\n        return Ok(());\n    }\n    while let Some(sig) = stream.next().await {\n        let args = sig.args()?;\n        if args.new_owner().is_none() {\n            return Ok(());\n        }\n    }\n    unreachable!();\n}", "CodeBleu_score": 74.27682832746207}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\tlet proxy = zbus::fdo::DBusProxy::new(con).await?;\n    let mut stream = proxy.receive_name_owner_changed().await?;\n    let owner = proxy.name_has_owner(service).await?;\n    if owner.is_none() {\n        return Ok(());\n    }\n    while let Some(msg) = stream.next().await {\n        let msg = msg?;\n        let (name, new_owner): (zbus::names::BusName<'_>, Option<zbus::UniqueName<'_>>) = msg.args()?;\n        if name == service && new_owner.is_none() {\n            return Ok(());\n        }\n    }\n    unreachable!()\n}", "CodeBleu_score": 63.75685339528997}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\tmatch format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow!(\"Unsupported file format: {}\", format)),\n    }\n}", "CodeBleu_score": 68.90760050438223}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\tmatch format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow!(\"Unsupported export format: {}\", format)),\n    }\n}", "CodeBleu_score": 70.05159968207133}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\tmatch format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow!(\"Unsupported format: {}\", format))\n    }\n}", "CodeBleu_score": 69.34835386560778}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n    let found_ext = path.extension().and_then(|s| s.to_str());\n    match found_ext {\n        Some(ext) if ext == expected_ext => Ok(()),\n        Some(ext) => Err(anyhow::anyhow!(\n            \"Expected extension \\\"{}\\\", found extension \\\"{}\\\"\",\n            expected_ext,\n            ext\n        )),\n        None => Err(anyhow::anyhow!(\n            \"Expected extension \\\"{}\\\", found no extension\",\n            expected_ext\n        )),\n    }\n}", "CodeBleu_score": 67.91013172662737}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n    let found_ext = path.extension().map(|s| s.to_str().unwrap());\n    if found_ext == Some(expected_ext) {\n        Ok(())\n    } else {\n        Err(anyhow::anyhow!(\n            \"Expected file extension \\\"{}\\\", found \\\"{}\\\"\",\n            expected_ext,\n            found_ext.unwrap_or(\"\")\n        ))\n    }\n}", "CodeBleu_score": 30.517141878567706}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n    let found_ext = path.extension().map(|s| s.to_str().unwrap());\n    if found_ext != Some(expected_ext) {\n        return Err(anyhow::anyhow!(\n            \"Expected file extension \\\"{}\\\", found \\\"{}\\\"\",\n            expected_ext,\n            found_ext.unwrap_or(\"None\")\n        ));\n    }\n    Ok(())\n}", "CodeBleu_score": 29.52925526970468}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\tlabel_.set_name(\"cpu\");\n  if (config[\"name\"].isString()) {\n    label_.get_style_context()->add_class(config[\"name\"].asString());\n  }\n  if (config[\"format\"].isString()) {\n    format_ = config[\"format\"].asString();\n  }\n  if (config[\"interval\"].isUInt()) {\n    interval_ = std::chrono::seconds(config[\"interval\"].asUInt());\n  }\n  thread_ = [this] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n  thread_.detach();\n}", "CodeBleu_score": 62.01048944781839}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\tlabel_.set_name(\"cpu\");\n  if (config[\"name\"].isString()) {\n    label_.get_style_context()->add_class(config[\"name\"].asString());\n  }\n  if (config[\"interval\"].isUInt()) {\n    interval_ = std::chrono::seconds(config[\"interval\"].asUInt());\n  }\n  if (config[\"format\"].isString()) {\n    format_ = config[\"format\"].asString();\n  }\n  thread_ = [this] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n  thread_.start_now();\n  event_box_.add(label_);\n}", "CodeBleu_score": 61.6399070908653}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\tlabel_.set_name(\"cpu\");\n  if (config[\"name\"].isString()) {\n    label_.get_style_context()->add_class(config[\"name\"].asString());\n  }\n  if (config[\"format\"].isString()) {\n    format_ = config[\"format\"].asString();\n  }\n  if (config[\"interval\"].isUInt()) {\n    interval_ = std::chrono::seconds(config[\"interval\"].asUInt());\n  }\n  thread_ = [this] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n  thread_.start_now();\n  event_box_.add(label_);\n}", "CodeBleu_score": 61.6399070908653}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tTags *tags = static_cast<Tags *>(data);\n\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, std::min(version, 2u)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n    }\n}", "CodeBleu_score": 61.665272595228494}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tTags *tags = static_cast<Tags *>(data);\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, std::min(version, 2u)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n    }\n}", "CodeBleu_score": 61.665272595228494}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tTags *tags = static_cast<Tags *>(data);\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, std::min(version, 2u)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n    }\n}", "CodeBleu_score": 61.665272595228494}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\tstd::string ev_type = ev.substr(0, ev.find_first_of('>'));\n    std::unique_lock<std::mutex> lock(callback_mutex);\n    for (auto& handler : callbacks) {\n        if (ev_type == handler.first) {\n            handler.second->onEvent(ev);\n        }\n    }\n}", "CodeBleu_score": 55.93990977631342}, {"code": "void IPC::parseIPC(const std::string& ev){\n\tstd::string ev_type = ev.substr(0, ev.find_first_of(\">\"));\n    std::lock_guard<std::mutex> lock(callback_mutex);\n    for (auto handler : callbacks) {\n        if (handler->getEventName() == ev_type) {\n            handler->onEvent(ev);\n        }\n    }\n}", "CodeBleu_score": 55.13973358428075}, {"code": "void IPC::parseIPC(const std::string& ev){\n\tstd::string evt = ev.substr(0, ev.find_first_of(\">\"));\n  std::unique_lock<std::mutex> lck(m_callbacks_mutex);\n  for (auto& handler : m_callbacks) {\n    if (handler.first == evt) {\n      handler.second->onEvent(ev);\n    }\n  }\n}", "CodeBleu_score": 51.309665563408835}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\tif (ev_handler == nullptr) {\n        return;\n    }\n\n    std::unique_lock<std::mutex> lock(callback_mutex_);\n\n    for (auto it = callbacks_.begin(); it != callbacks_.end();) {\n        if (it->second == ev_handler) {\n            it = callbacks_.erase(it);\n        } else {\n            it++;\n        }\n    }\n}", "CodeBleu_score": 69.67081870212527}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\tstd::unique_lock<std::mutex> lock(callback_mutex_);\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end(); ++it) {\n\t\tif (it->second == ev_handler) {\n\t\t\tcallbacks_.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.88062286557172}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\tif (ev_handler == nullptr) {\n        return;\n    }\n    std::unique_lock<std::mutex> lock(callback_mutex_);\n    for (auto it = callbacks_.begin(); it != callbacks_.end();) {\n        if (it->first == ev_handler) {\n            it = callbacks_.erase(it);\n        } else {\n            it++;\n        }\n    }\n}", "CodeBleu_score": 69.65968554368548}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\tif (config.isMember(\"always-on\")) {\n        if (config[\"always-on\"].isBool()) {\n            always_on_ = config[\"always-on\"].asBool();\n        } else {\n            ROS_WARN(\"Submap: \\\"always-on\\\" is not a bool. Ignoring this setting.\");\n        }\n    }\n    if (config.isMember(\"default-submap\")) {\n        if (config[\"default-submap\"].isString()) {\n            default_submap_ = config[\"default-submap\"].asString();\n        } else {\n            ROS_WARN(\"Submap: \\\"default-submap\\\" is not a string. Ignoring this setting.\");\n        }\n    }\n}", "CodeBleu_score": 39.98671005979287}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\talways_on_ = config.get(\"always-on\", false).asBool();\n  default_submap_ = config.get(\"default-submap\", \"\").asString();\n}", "CodeBleu_score": 28.445197279182942}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\talways_on_ = config.get(\"always-on\", always_on_).asBool();\n  default_submap_ = config.get(\"default-submap\", default_submap_).asString();\n}", "CodeBleu_score": 41.5356533462241}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\tif (std::holds_alternative<Repr>(payload)) {\n        return std::get<Repr>(payload);\n    } else if (std::holds_alternative<ClassAndTitle>(payload)) {\n        auto [classname, title] = std::get<ClassAndTitle>(payload);\n        return workspace_manager.getRewrite(classname, title);\n    } else {\n        spdlog::error(\"Unreachable code path reached in WindowCreationPayload::repr\");\n        throw std::runtime_error(\"Unreachable code path reached in WindowCreationPayload::repr\");\n    }\n}", "CodeBleu_score": 64.79244103855126}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\tif (std::holds_alternative<Repr>(this->payload)) {\n        return std::get<Repr>(this->payload);\n    } else if (std::holds_alternative<ClassAndTitle>(this->payload)) {\n        auto &[class_name, title] = std::get<ClassAndTitle>(this->payload);\n        return workspace_manager.getRewrite(class_name, title);\n    } else {\n        std::string error = \"WindowCreationPayload::repr: payload is neither Repr nor ClassAndTitle\";\n        spdlog::error(error);\n        throw std::runtime_error(error);\n    }\n}", "CodeBleu_score": 52.33946009027834}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\tif (std::holds_alternative<Repr>(this->window)) {\n        return std::get<Repr>(this->window);\n    } else if (std::holds_alternative<ClassAndTitle>(this->window)) {\n        auto class_and_title = std::get<ClassAndTitle>(this->window);\n        return workspace_manager.getRewrite(class_and_title.first, class_and_title.second);\n    } else {\n        spdlog::error(\"WindowCreationPayload::repr: Unknown window type\");\n        throw std::runtime_error(\"WindowCreationPayload::repr: Unknown window type\");\n    }\n}", "CodeBleu_score": 46.3759984119788}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\tif (m_workspacesToCreate.empty()) {\n    return;\n  }\n\n  for (auto &workspace : m_workspacesToCreate) {\n    createWorkspace(workspace, m_workspacesToCreateClients);\n  }\n\n  updateWindowCount();\n  sortWorkspaces();\n\n  m_workspacesToCreate.clear();\n  m_workspacesToCreateClients.clear();\n}", "CodeBleu_score": 58.28125586580916}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\tif (m_workspacesToCreate.empty()) {\n    return;\n  }\n\n  for (auto &workspace : m_workspacesToCreate) {\n    createWorkspace(workspace[\"workspace\"], workspace[\"clients\"]);\n  }\n\n  m_workspacesToCreate.clear();\n  updateWindowCount();\n  sortWorkspaces();\n}", "CodeBleu_score": 50.44243322873023}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\tif (!m_workspacesToCreate.empty()) {\n    for (const auto &workspace : m_workspacesToCreate) {\n      createWorkspace(workspace.first, workspace.second);\n    }\n    m_workspacesToCreate.clear();\n    updateWindowCount();\n    sortWorkspaces();\n  }\n}", "CodeBleu_score": 58.029447993438644}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tMpris* mpris = static_cast<Mpris*>(data);\n\n    if (mpris == nullptr) {\n        spdlog::error(\"Mpris instance is null\");\n        return;\n    }\n\n    if (player_name == nullptr) {\n        spdlog::error(\"Player name is null\");\n        return;\n    }\n\n    spdlog::debug(\"Player {} vanished\", player_name->name);\n\n    if (mpris->player_ != nullptr && g_strcmp0(player_name->name, mpris->player_->get_player_name()) == 0) {\n        mpris->player_ = nullptr;\n        mpris->event_box_.set_visible(false);\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 65.41676763179758}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tauto mpris = static_cast<Mpris*>(data);\n    if (!mpris) {\n        spdlog::error(\"Mpris: onPlayerNameVanished: could not cast data to Mpris\");\n        return;\n    }\n    auto player = mpris->getPlayer();\n    if (!player) {\n        spdlog::error(\"Mpris: onPlayerNameVanished: could not get player\");\n        return;\n    }\n    auto player_name_ = playerctl_player_get_player_name(player);\n    if (!player_name_) {\n        spdlog::error(\"Mpris: onPlayerNameVanished: could not get player name\");\n        return;\n    }\n    auto player_name_str = playerctl_player_name_get_name(player_name_);\n    if (!player_name_str) {\n        spdlog::error(\"Mpris: onPlayerNameVanished: could not get player name string\");\n        return;\n    }\n    auto player_name_str_ = g_strdup(player_name_str);\n    if (!player_name_str_) {\n        spdlog::error(\"Mpris: onPlayerNameVanished: could not copy player name string\");\n        return;\n    }\n    spdlog::debug(\"Mpris: onPlayerNameVanished: player name vanished: {}\", player_name_str_);\n    g_free(player_name_str_);\n    if (strcmp(player_name_str, mpris->player_name_) == 0) {\n        mpris->player_ = nullptr;\n        mpris->event_box_.set_visible(false);\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 54.158005519429075}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tauto mpris = static_cast<Mpris*>(data);\n\n    if (mpris == nullptr)\n        return;\n\n    auto name = playerctl_player_name_get_player(player_name);\n\n    spdlog::debug(\"Player {} vanished.\", name);\n\n    if (mpris->player_name_ == name) {\n        mpris->player_name_ = \"\";\n        mpris->player_ = nullptr;\n        mpris->event_box_.set_visible(false);\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 64.68574572853541}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto mpris = static_cast<Mpris*>(data);\n    if (mpris) {\n        spdlog::debug(\"Mpris::onPlayerPause()\");\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 68.16948939634149}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto mpris = static_cast<Mpris*>(data);\n  if (mpris == nullptr) {\n    spdlog::error(\"Mpris::onPlayerPause(): Could not cast data to Mpris object\");\n    return;\n  }\n  spdlog::debug(\"Mpris::onPlayerPause(): Player {} paused\", mpris->playerName);\n  mpris->dp.emit();\n}", "CodeBleu_score": 61.637147655947174}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto mpris = static_cast<Mpris*>(data);\n    if (mpris) {\n        spdlog::debug(\"Player pause event\");\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 68.3977620881851}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\tif (res.type != Ipc::ipc_response_type::SUCCESS) {\n    throw std::runtime_error(\"IPC error: \" + res.payload.get<std::string>());\n  }\n  Json::Value payload;\n  Json::CharReaderBuilder builder;\n  std::string errors;\n  if (!Json::parseFromStream(builder, res.payload, &payload, &errors)) {\n    throw std::runtime_error(\"Failed to parse IPC response: \" + errors);\n  }\n  if (auto success = payload[\"success\"]; success.isBool() && !success.asBool()) {\n    throw std::runtime_error(\"Failed to get bar config: \" + payload[\"error\"].asString());\n  }\n  auto config = parseConfig(payload[\"config\"]);\n  onConfigUpdate(config);\n}", "CodeBleu_score": 50.71850414208219}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\tif (!res.success) {\n    throw std::runtime_error(res.payload.get<std::string>(\"error\"));\n  }\n  auto payload = res.payload[\"config\"];\n  onConfigUpdate(parseConfig(payload));\n}", "CodeBleu_score": 32.52877381664639}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\tspdlog::debug(\"got initial config for {}\", bar_.bar_id);\n  if (!res.success) {\n    throw std::runtime_error(\"Failed to get bar config: \" + res.payload.get(\"error\", \"\").asString());\n  }\n  auto config = parseConfig(res.payload);\n  onConfigUpdate(config);\n}", "CodeBleu_score": 38.37484568134914}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tassert(this);\n  if(!name.empty()) {\n    hooks_.doAction(this, name.c_str());\n  }\n}", "CodeBleu_score": 49.17579023687646}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tassert(this);\n  if (!name.empty()) {\n    hooks_.doAction(this, name.c_str());\n  }\n}", "CodeBleu_score": 51.5354369560476}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tassert(this);\n  if (!name.empty()) {\n    hooks_->doAction(this, name.c_str());\n  }\n}", "CodeBleu_score": 51.06708590101999}]}
