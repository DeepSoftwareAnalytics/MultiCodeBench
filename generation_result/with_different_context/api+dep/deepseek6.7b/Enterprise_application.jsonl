{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    content, filename = attachments._build_zip_from_attachments()\n    headers = attachments._get_zip_headers(content, filename)\n    return request.make_response(content, headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.59200051537801}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule()\n    zip_content, zip_filename = attachments._build_zip_from_attachments()\n    headers = self.request.make_response(zip_content, headers=attachments._get_zip_headers(zip_content, zip_filename))\n    return headers", "CodeBleu_score": 51.242762997458236}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self._get_attachments(**args)\n    if not attachments:\n        return request.not_found()\n    attachments._build_zip_from_attachments()\n    zip_content, zip_filename = attachments._get_zip_content()\n    headers = attachments._get_zip_headers(zip_content, zip_filename)\n    return request.make_response(zip_content, headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 27.856814732643016}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    values.update({\n        'page_name': 'invoice',\n    })\n    response = request.render(\"account.portal_my_invoices\", values)\n    if date_begin and date_end:\n        response.set_cookie('date_begin', date_begin)\n        response.set_cookie('date_end', date_end)\n    return response\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 42.47811562534295}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    self._update_session_history(values.get('invoices'), 'invoice', 'invoice')\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.0930220223299}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = values['invoices'](0).ids[:100]\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 32.63385282475587}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    if not invoice_sudo:\n        return request.redirect('/my')\n    if report_type == 'html':\n        return self._show_report(invoice_sudo, report_type=report_type, download=download, data=kw)\n    if report_type == 'pdf' and not download:\n        return self._show_report(invoice_sudo, report_type=report_type, download=download, data=kw)\n    if report_type == 'text':\n        return self._show_report(invoice_sudo, report_type=report_type, download=download, data=kw)\n    if report_type == 'pdf' and download:\n        invoice_sudo._get_invoice_report_filename()\n        invoice_sudo._get_invoice_legal_documents()\n        attachments = invoice_sudo.mapped('invoice_line_ids.invoice_line_tax_ids.invoice_line_tax_report_ids.attachment_id')\n        if len(attachments) == 1:\n            return attachments.sudo()._get_http_headers()\n        else:\n            zip_file = self._build_zip_from_attachments(attachments)\n            return zip_file.get_response(request.httprequest)\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render(\"account.portal_my_invoice_detail\", values)\n\n", "CodeBleu_score": 48.241457637457366}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # Check access\n    invoice = self._document_check_access('account.move', invoice_id, access_token)\n    if not invoice:\n        return request.redirect('/my')\n    # PDF Download\n    if report_type == 'html' and download:\n        # HTML to PDF\n        pdf = self._get_pdf_view(invoice)\n        if not pdf:\n            return request.not_found()\n        return request.make_response(pdf, headers=[('Content-Type', 'application/pdf')])\n    if report_type in ('pdf', 'text') and download:\n        # PDF or text report\n        if invoice.state != 'posted':\n            return request.not_found()\n        report = self._get_report_from_html(invoice, report_type)\n        if not report:\n            return request.not_found()\n        if report_type == 'text':\n            return request.make_response(report.get_pdf(), headers=[('Content-Type', 'application/pdf')])\n        return request.make_response(report.get_pdf(), headers=[('Content-Type', 'application/pdf')])\n    if report_type == 'html' and not download:\n        # HTML report\n        invoice_sudo = invoice.sudo()\n        values = self._invoice_get_page_view_values(invoice_sudo, access_token, invoice_print=True)\n        return request.render('account.portal_invoice_page', values)\n    if report_type in ('pdf', 'text') and not download:\n        # PDF or text report\n        if invoice.state != 'posted':\n            return request.not_found()\n        report = self._get_report_from_html(invoice, report_type)\n        if not report:\n            return request.not_found()\n        if report_type == 'text':\n            return request.make_response(report.get_pdf(), headers=[('Content-Type', 'application/pdf')])\n        return request.make_response(report.get_pdf(), headers=[('Content-Type', 'application/pdf')])\n    return", "CodeBleu_score": 40.05785117149985}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n    if report_type in ('html', 'qweb-pdf', 'text'):\n        return self._invoice_get_page_view_values(invoice_sudo, access_token, report_type=report_type, download=download)\n    if report_type == 'pdf' and invoice_sudo.state == 'posted':\n        return self._invoice_get_pdf(invoice_sudo, access_token)\n    return request.not_found()\n\n\n", "CodeBleu_score": 29.702622346001874}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    filtered_domain = self._get_demo_data_domain(company)\n    prod_templates = self.env['product.template'].search(filtered_domain)\n    if company and company.account_sale_tax_id:\n        prod_templates_sale = prod_templates.filtered(lambda p: p.taxes_id.filtered(lambda t: t.company_id == company))\n        prod_templates_sale.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company and company.account_purchase_tax_id:\n        prod_templates_purchase = prod_templates.filtered(lambda p: p.supplier_taxes_id.filtered(lambda t: t.company_id == company))\n        prod_templates_purchase.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return prod_templates\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 38.137421461551575}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    company = self._get_company(company)\n    templates = self.env['product.template'].search([('company_id', '=', company.id)])\n    if company.account_sale_tax_id:\n        templates.filtered(lambda t: t.taxes_id.filtered(lambda r: r.company_id == company)).write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        templates.filtered(lambda t: t.supplier_taxes_id.filtered(lambda r: r.company_id == company)).write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return templates\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 27.913667515426283}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # Get domain\n    domain = self.env['product.template'].with_context(active_test=False)._get_demo_product_domain()\n    if company:\n        domain += [('company_id', '=', company.id)]\n    # Get products\n    prod_templates = self.env['product.template'].search(domain)\n    # Update sale taxes\n    if company and company.account_sale_tax_id:\n        prod_templates_sale = prod_templates.filtered(lambda p: p.taxes_id.filtered(lambda t: t.company_id == company))\n        prod_templates_sale.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    # Update purchase taxes\n    if company and company.account_purchase_tax_id:\n        prod_templates_purchase = prod_templates.filtered(lambda p: p.supplier_taxes_id.filtered(lambda t: t.company_id == company))\n        prod_templates_purchase.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return prod_templates\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 44.85807839619774}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account", "CodeBleu_score": 45.60136455592607}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not company:\n        return False\n    if xml_id:\n        account = self.env['ir.model.data'].sudo().get_object('account', xml_id)\n    else:\n        account = self.env['account.account'].sudo().search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', account_type.id),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].sudo().search([\n            ('company_id', '=', company.id),\n            ('company_id.demo', '=', True),\n            ('user_type_id', '=', account_type.id),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].sudo().search([\n            ('company_id', '=', company.id),\n            ('company_id.demo', '=', True),\n            ('company_id.demo_account_id', '=', True),\n            ('user_type_id', '=', account_type.id),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].sudo().search([\n            ('company_id', '=', company.id),\n            ('company_id.demo', '=', True),\n            ('user_type_id', '=', account_type.id),\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 42.97573906189904}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)])\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 45.1667199607619}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type = self.env.ref('account.data_account_type_current_year_earnings')\n    accounts = self.env['account.account'].search([\n        ('user_type_id', '=', account_type.id),\n        ('company_id', 'in', self.mapped('company_id')),\n        ('company_id', 'in', self.mapped('company_id')),\n    ])\n    for company_id, account_ids in accounts.groupby('company_id'):\n        if len(account_ids) > 1:\n            raise ValidationError(_('More than one account with the \"Current Year Earnings\" type for company %s.') % company_id.name)", "CodeBleu_score": 37.93465573390459}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('type', '=', 'current_year_earnings')])\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account.company_id].append(account)\n    for company, accounts in accounts_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(_('More than one account with the \"Current Year Earnings\" type for company %s') % company.name)", "CodeBleu_score": 27.353664980554903}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type = self.env.ref('account.data_account_type_current_year_earnings')\n    accounts = self.search([('user_type_id', '=', account_type.id)])\n    accounts_by_company = accounts.read_group([('company_id', 'in', self.env.companies.ids)], ['company_id'], ['company_id'])\n    if len(accounts_by_company) < len(self.env.companies):\n        raise ValidationError(_('You cannot have more than one Current Year Earnings account per company.'))", "CodeBleu_score": 40.57392216491047}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and not self._context.get('partner_id'):\n        return super(AccountAnalyticAccount, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n    if name and not domain:\n        domain = []\n    if name:\n        name = name.split(' ')[0]\n        domain += [('name', operator, name)]\n    if self._context.get('partner_id'):\n        domain += [('partner_id', '=', self._context.get('partner_id'))]\n    if order is None:\n        order = 'name'\n    if limit is None:\n        limit = self._rec_limit\n    return self._search(domain, limit=limit, access_rights_uid=name_get()[0][0], order=order)\n", "CodeBleu_score": 43.546061829645595}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id'):\n            return self._order_accounts_by_frequency_for_partner()\n        return []\n    domain = expression.AND([domain or [], [('name', operator, name)]])\n    return self._search(domain, limit=limit, order=order)\n\n\n\n\n", "CodeBleu_score": 26.822686422884633}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id'):\n        partner = self.env['res.partner'].browse(self._context['partner_id'])\n        return partner._order_accounts_by_frequency_for_partner(self, limit=limit, order=order)\n    domain = domain or []\n    domain = [('name', operator, name)] + domain\n    return self._search(domain, limit=limit, order=order)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 32.13629887548756}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super(Model, self).copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 79.73944085277903}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {}\n    action['context'].update({\n        'default_type': 'out_invoice',\n        'default_partner_id': self.id,\n        'default_invoice_origin': self.name,\n        'default_invoice_user_id': self.user_id.id,\n    })\n    action['context'].update({\n        'search_default_analytic_account_id': self.analytic_account_id.id,\n        'search_default_invoice_id': self.id,\n        'search_default_partner_id': self.id,\n    })\n    action['domain'] = [('id', 'in', self._search([]))]\n    return action\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 25.49431250754088}, {"code": "def action_view_invoice(self)\n\t\n    # Ensure a single record context\n    self.ensure_one()\n    # Get sale types\n    sale_types = self.get_sale_types()\n    # Search for account move lines related to sale types\n    query = self.env['account.move.line'].search_read([('analytic_account_id', 'in', sale_types.ids), ('move_id.invoice_id.partner_id', '=', self.id)], ['move_id'])\n    # Add conditions for the current record's ID and analytic accounts\n    query = query.select(self.id, sale_types.ids)\n    # Execute the query to get distinct move IDs\n    move_ids = query.add_where('move_id', '=', self.id).execute()\n    # Return an action dictionary to display customer invoices in tree and form views with specific context and domain settings\n    return {\n        'name': _('Customer Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'create': False,\n            'delete': False,\n            'edit': False,\n            'default_partner_id': self.id,\n            'default_type': 'out_invoice',\n            'default_invoice_origin': self.name,\n            'default_invoice_date': self.invoice_date,\n            'default_invoice_date_due': self.invoice_date_due,\n            'default_invoice_user_id': self.user_id.id,\n            'default_invoice_payment_term_id': self.invoice_payment_term_id.id,\n            'default_invoice_payment_ref': self.payment_reference,\n            'default_invoice_comment': self.comment,\n            'default_invoice_currency_id': self.currency_id.id,\n            'default_invoice_company_id': self.company_id.id,\n            'default", "CodeBleu_score": 27.190852536110587}, {"code": "def action_view_invoice(self)\n\t\n    # Ensure a single record context\n    self.ensure_one()\n    # Get sale types\n    sale_types = self.get_sale_types()\n    # Construct the query to get distinct move IDs\n    query = \"\"\"\n        SELECT DISTINCT aml.move_id\n        FROM account_move_line aml\n        JOIN account_move am ON am.id = aml.move_id\n        JOIN account_account aa ON aa.id = aml.account_id\n        JOIN account_move_line aml_parent ON aml_parent.id = aml.parent_id\n        JOIN account_account aa_parent ON aa_parent.id = aml_parent.account_id\n        WHERE am.state = 'posted'\n        AND am.company_id = %s\n        AND aml.company_id = %s\n        AND aml.analytic_account_id IS NOT NULL\n        AND aml.analytic_account_id IN (%s)\n        AND aa.user_type_id IN (%s)\n        AND aa_parent.user_type_id IN (%s)\n        AND aml_parent.analytic_account_id IN (%s)\n        AND aml_parent.account_id IN (%s)\n        AND aml.move_id IN (%s)\n    \"\"\" % (\n        self.company_id.id,\n        self.company_id.id,\n        \",\".join([str(x) for x in self.analytic_account_ids.ids]),\n        \",\".join([str(x) for x in sale_types.ids]),\n        \",\".join([str(x) for x in sale_types.ids]),\n        \",\".join([str(x) for x in self.analytic_account_ids.ids]),\n        \",\".join([str(x) for x in self.analytic_account_ids.ids]),\n        \",\".join([str(x) for x in self.invoice_ids.ids]),\n    )\n    # Add conditions for the current record's ID and analytic accounts\n    query = self._search(", "CodeBleu_score": 23.456072187531067}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    account_move_line_obj = self.env['account.move.line']\n    query = account_move_line_obj.search_read([('move_id.state', '=', 'posted'), ('move_id.purchase_id', '=', self.id)], ['move_id', 'id'])\n    move_ids = set(line.get('move_id')[0] for line in query)\n    return {\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'create': False, 'default_move_type': 'in_invoice'},\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 27.074873527030753}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    move_ids = self.env['account.move.line']._search([\n        ('purchase_line_id', '=', self.id),\n        ('move_id.state', '=', 'posted'),\n        ('account_id.internal_type', '=', 'payable')\n    ], order='date desc', limit=1)\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    if len(move_ids) == 1:\n        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n        action['res_id'] = move_ids[0]\n    else:\n        action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'default_move_id': self.id,\n        'default_move_check': False,\n        'default_invoice_origin': self.name,\n        'default_invoice_date': self.date_order,\n        'default_invoice_date_due': self.date_due,\n        'default_partner_id': self.partner_id.id,\n        'default_company_id': self.company_id.id,\n        'default_currency_id': self.currency_id.id,\n        'default_invoice_payment_term_id': self.payment_term_id.id,\n        'default_fiscal_position_id': self.fiscal_position_id.id,\n        'default_invoice_user_id': self.user_id.id,\n        'default_invoice_line_ids': [],\n        'default_invoice_partner_bank_id': self.partner_bank_id.id,\n        'default_invoice_pricelist_id': self.pricelist_id.id,\n        'default_invoice_payment_term_id': self.payment_term_id.id,\n        'default_", "CodeBleu_score": 29.33411898850572}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line'].with_context(active_test=False)._query_get()\n    query.select()\n    query.add_where('account_move_id.state = %s', 'posted')\n    query.add_where('account_move_id.move_type = %s', 'in_invoice')\n    query.add_where('account_move_id.vendor_bill_id = %s', self.id)\n    query.add_where('account_move_id.company_id = %s', self.company_id.id)\n    query.add_where('account_move_id.id IN %s', '(' + str(self.env['account.move'].search([('id', 'in', self._search(query.select(), query.where_clause))]).ids) + ')')\n    query.add_where('account_move_id.id IN %s', '(' + str(self.env['account.move'].search([('id', 'in', self._search(query.select(), query.where_clause))]).ids) + ')')\n    query.add_where('account_move_id.id IN %s', '(' + str(self.env['account.move'].search([('id', 'in', self._search(query.select(), query.where_clause))]).ids) + ')')\n    query.add_where('account_move_id.id IN %s', '(' + str(self.env['account.move'].search([('id', 'in', self._search(query.select(), query.where_clause))]).ids) + ')')\n    query.add_where('account_move_id.id IN %s', '(' + str(self.env['account.move'].search([('id', 'in', self._search(query.select(), query.where_clause))]).ids) + ')')\n    query.add_where('account_move_id.id IN %s', '(' + str(self.env['account.move'].search([('id', 'in', self._search(query.select", "CodeBleu_score": 25.34268470107245}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.54198523107293}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_1()\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['bank.account'].browse()\n    return self.env['bank.account'].search([\n        ('company_id', '=', self.company_id.id),\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n    ], limit=1) or self.env['bank.account'].create({\n        'acc_number': self.acc_number,\n        'partner_id': self.partner_id.id,\n        'company_id': self.company_id.id,\n    })\n\n", "CodeBleu_score": 33.128015607223496}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_1()\n    if self.env['ir.config_parameter'].sudo().get_param('account.skip_bank_account_creation') == '1':\n        return self.env['bank.account'].sudo().create({})\n    return self.env['bank.account'].sudo().search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1) or self.env['bank.account'].sudo().create({\n        'acc_number': self.acc_number,\n        'partner_id': self.partner_id.id,\n        'company_id': self.company_id.id,\n    })\n\n", "CodeBleu_score": 33.79332329594254}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_1()\n    if not self.env['ir.config_parameter'].get_param('account.auto_create_bank_account', False):\n        return self.env['account.bank.account'].browse()\n    return self.env['account.bank.account'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ], limit=1)\n\n", "CodeBleu_score": 26.935756640826042}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_single_record_context()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency.is_zero(transaction_amount):\n        return {}\n    if currency.is_zero(journal_amount):\n        return {}\n    if currency.is_zero(company_amount):\n        return {}\n    if currency == transaction_currency:\n        transaction_amount = -transaction_amount\n        company_amount = -company_amount\n    elif currency == journal_currency:\n        journal_amount = -journal_amount\n        company_amount = -company_amount\n    elif currency == company_currency:\n        company_amount = -company_amount\n    else:\n        company_amount = currency._convert(\n            company_amount, company_currency, self.company_id, self.date\n        )\n        transaction_amount = currency._convert(\n            transaction_amount, transaction_currency, self.company_id, self.date\n        )\n        journal_amount = currency._convert(\n            journal_amount, journal_currency, self.company_id, self.date\n        )\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': journal_amount,\n        'journal_currency': journal_currency,\n        'company_amount': company_amount,\n        'company_currency': company_currency,\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.50316779894562}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_single_record_context()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency.is_zero(transaction_amount):\n        return {}\n    if currency == transaction_currency:\n        transaction_amount = abs(transaction_amount)\n        company_amount = abs(company_amount)\n    elif currency == company_currency:\n        company_amount = abs(company_amount)\n        transaction_amount = abs(transaction_amount) * -1\n    else:\n        company_amount = abs(company_amount)\n        transaction_amount = abs(transaction_amount) * -1\n        amount_currency = abs(amount_currency)\n    if currency == company_currency:\n        balance = abs(balance)\n    else:\n        balance = abs(balance) * -1\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': journal_amount,\n        'journal_currency': journal_currency,\n        'company_amount': company_amount,\n        'company_currency': company_currency,\n        'amount_currency': amount_currency,\n        'balance': balance,\n    }", "CodeBleu_score": 28.33891096209306}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_single_record_context()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if transaction_currency == currency:\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if transaction_currency.is_zero(transaction_amount):\n        return {\n            'transaction_amount': 0.0,\n            'transaction_currency': currency,\n            'journal_amount': 0.0,\n            'journal_currency': currency,\n            'company_amount': 0.0,\n            'company_currency': currency,\n        }\n    transaction_amount = currency._convert(transaction_amount, transaction_currency, company=self.company_id, round=False)\n    if transaction_currency.is_zero(transaction_amount):\n        return {\n            'transaction_amount': 0.0,\n            'transaction_currency': currency,\n            'journal_amount': 0.0,\n            'journal_currency': currency,\n            'company_amount': 0.0,\n            'company_currency': currency,\n        }\n    if transaction_currency.is_zero(journal_amount):\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': currency,\n            'journal_amount': 0.0,\n            'journal_currency': currency,\n            'company_amount': 0.0,\n            'company_currency': currency,\n        }\n    if transaction_currency == company_currency:\n        company_amount = transaction_amount\n    else:\n        company_amount = currency._convert(transaction_amount, transaction_currency, company=self.company_id, round=False)\n    if transaction_currency == journal_currency:\n        journal_amount = transaction_amount\n    else:\n        journal_amount", "CodeBleu_score": 26.655002865043908}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = Command.clear()\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [\n                Command.create({\n                    'payment_method_id': method.id,\n                    'sequence': method.sequence,\n                    'name': method.name,\n                })\n                for method in journal._default_outbound_payment_methods()\n            ]\n\n", "CodeBleu_score": 47.14731849784774}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    journal_outbound_payment_method_line_commands = []\n    for journal in self:\n        journal_outbound_payment_method_line_commands.extend(\n            journal._get_outbound_payment_method_line_commands()\n        )\n    self.outbound_payment_method_line_ids = journal_outbound_payment_method_line_commands\n\n", "CodeBleu_score": 23.02039553852168}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = [\n                Command.create({\n                    'payment_method_id': method.id,\n                    'sequence': method.sequence,\n                    'name': method.name,\n                    'code': method.code,\n                    'is_custom': method.is_custom,\n                    'is_visible': method.is_visible,\n                    'is_default': method.is_default,\n                    'is_outbound': method.is_outbound,\n                    'is_inbound': method.is_inbound,\n                    'is_hidden': method.is_hidden,\n                    'is_unreconciled': method.is_unreconciled,\n                    'is_unposted': method.is_unposted,\n                    'is_unreconciled_unposted': method.is_unreconciled_unposted,\n                    'is_unreconciled_unposted_outbound': method.is_unreconciled_unposted_outbound,\n                    'is_unreconciled_unposted_inbound': method.is_unreconciled_unposted_inbound,\n                    'is_unreconciled_unposted_outbound_inbound': method.is_unreconciled_unposted_outbound_inbound,\n                    'is_unreconciled_unposted_outbound_inbound_hidden': method.is_unreconciled_unposted_outbound_inbound_hidden,\n                }) for method in journal._default_outbound_payment_methods()\n            ]\n\n", "CodeBleu_score": 30.90635143997832}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    today = fields.Date.context_today(self)\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = today\n        elif move.invoice_date and not move.date:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                if move.date != today:\n                    move.date = move.date\n                    move.with_delay()._recompute_fields()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 39.81270961818091}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif move.invoice_date:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                if move.date != fields.Date.context_today(move):\n                    move.date = fields.Date.context_today(move)\n                    move.recompute_fields()\n\n", "CodeBleu_score": 42.521960902774694}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date and move.invoice_date:\n            if not move.is_sale_document():\n                move_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            else:\n                move_date = move.invoice_date\n            if move.date != move_date:\n                move.date = move_date\n                move.recompute()\n        elif move.date:\n            continue\n        elif move.invoice_date:\n            move_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            move.date = move_date\n            move.recompute()\n        else:\n            move.date = fields.Date.context_today(move)\n", "CodeBleu_score": 41.525646707389704}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 45.77141156983625}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document:\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.92387873091203}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id or move.company_id.account_sale_payment_term_id\n        elif move.is_purchase_document:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id or move.company_id.account_purchase_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.551792017835076}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_by_country_company = defaultdict(lambda: self.env['account.tax.group'])\n    for tax in self:\n        tax_group_by_country_company[tax.country_id, tax.company_id] |= tax.tax_group_id\n    for (country_id, company_id), tax_group_ids in tax_group_by_country_company.items():\n        tax_group_ids.filtered(lambda tg: tg.country_id == country_id and tg.company_id == company_id).ensure_one()\n    for tax in self:\n        tax_group_ids = tax_group_by_country_company[tax.country_id, tax.company_id]\n        tax.tax_group_id = tax_group_ids.filtered(lambda tg: tg.country_id == tax.country_id and tg.company_id == tax.company_id)\n        if not tax.tax_group_id:\n            tax.tax_group_id = tax_group_ids.filtered(lambda tg: not tg.country_id and tg.company_id == tax.company_id)\n    return True\n\n def _check_company_domain(self):\n    \"\"\"Check if the company is valid for the selected tax group.\"\"\"\n    self.ensure_one()\n    if self.tax_group_id.country_id and self.tax_group_id.country_id != self.country_id:\n        return False\n    if self.tax_group_id.company_id and self.tax_group_id.company_id != self.company_id:\n        return False\n    return True\n\n def by_country_company(self):\n    \"\"\"Group taxes by country and company.\"\"\"\n    by_country_company = defaultdict(lambda: self.env['account.tax'])\n    for tax in self:\n        by_country_company[tax.country_id, tax.company_id] |= tax\n    return by_country_company", "CodeBleu_score": 30.071592549744558}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.company_id and tax.country_id:\n            # Search for an exact match\n            tax_group = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n            if tax_group:\n                tax.tax_group_id = tax_group.id\n            else:\n                # Search for a match without a country\n                tax_group = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n                if tax_group:\n                    tax.tax_group_id = tax_group.id\n        else:\n            tax.tax_group_id = False", "CodeBleu_score": 32.41373335622054}, {"code": " def _compute_tax_group_id(self)\n\t\n    by_country_company = defaultdict(lambda: defaultdict(list))\n    for tax in self:\n        by_country_company[tax.country_id][tax.company_id].append(tax)\n    for country_company, taxes in by_country_company.items():\n        for company, taxes in taxes.items():\n            tax_group = self.search([\n                ('country_id', '=', country_company[0].id),\n                ('company_id', '=', company.id),\n            ], limit=1)\n            if not tax_group:\n                tax_group = self.search([\n                    ('country_id', '=', False),\n                    ('company_id', '=', company.id),\n                ], limit=1)\n            for tax in taxes:\n                tax.tax_group_id = tax_group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.01940488780342}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.session.get(url)\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        data['module_file'] = f.read()\n    # Upload the module file\n    res = self.session.post(url + 'base_import_module/login_upload', data=data)\n    # Check if the server has the required module installed or is outdated\n    if res.status_code == 200:\n        return res.text\n    else:\n        raise Exception(f\"Server error: {res.text}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.331365361596}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    session = requests.Session()\n    session.get(url)\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n    # Upload the module file to the server\n    response = session.post(url + '/base_import_module/login_upload', data=data, files={'file': module_data})\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 404:\n        raise Exception(\"Module not found or outdated\")\n    # Return the server's response text\n    return response.text", "CodeBleu_score": 47.58394930138154}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    session = requests.Session()\n    response = session.get(url)\n    response.raise_for_status()\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        response = session.post(url + '/base_import_module/login_upload', data=data, files=files)\n        response.raise_for_status()\n    return response.text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.09815280679462}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n\n    # Get configuration settings\n    db_name = 'odoo_db'\n    overwrite = False\n\n    # Create a new database registry\n    registry = Registry(db_name)\n\n    # Initialize a cursor\n    cr = registry.cursor()\n\n    # Initialize a TranslationImporter\n    translation_importer = TranslationImporter(cr, registry.get('res.lang'))\n\n    # Load translation files based on configuration\n    translation_importer.load_file('path/to/translation_file1.po')\n    translation_importer.load_file('path/to/translation_file2.po')\n\n    # Save translations, with option to overwrite existing ones\n    translation_importer.save(overwrite=overwrite)\n\n    # Close the cursor\n    cr.close()\n\n    print('Translations imported successfully.')\n", "CodeBleu_score": 36.81643519531859}, {"code": "def import_translation()\n\t\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n\n    db_name = config['DEFAULT']['db_name']\n    overwrite = config.getboolean('DEFAULT', 'overwrite')\n\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, registry)\n        importer.load_file('translations.csv', overwrite=overwrite)\n        importer.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 46.0132807616412}, {"code": "def import_translation()\n\t\n    dbname = config['dbname']\n    overwrite = config['overwrite']\n    registry = Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, registry)\n        importer.load_file(config['lang'], config['file'], overwrite)\n        importer.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 31.483240891568876}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    new_node = Node(name, info)\n\n    # Set the depth of the new node to be one more than the current node\n    new_node.depth = self.depth + 1\n\n    # Check if the new node is already present in the children list\n    if new_node not in self.children:\n        # If the new node is not present, append it to the children list\n        self.children.append(new_node)\n\n    # Check if the current node has any attributes\n    if hasattr(self, 'attr'):\n        # If the current node has attributes, inherit them to the new node\n        new_node.attr = self.attr\n\n    # Sort the children list by name\n    self.children.sort(key=lambda x: x.name)\n\n    # Return the new node\n    return new_node\n\n", "CodeBleu_score": 46.660808990406466}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if not hasattr(self, 'children'):\n        self.children = []\n    if child not in self.children:\n        self.children.append(child)\n    for attr in ['title', 'subtitle', 'description', 'image', 'url', 'author', 'date', 'tags', 'category', 'language', 'license', 'copyright', 'attribution', 'source', 'source_url', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', 'source_author', 'source_date', 'source_tags', 'source_category', 'source_language', 'source_license', 'source_copyright', 'source_attribution', '", "CodeBleu_score": 24.968840754373943}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if not hasattr(self, 'children'):\n        self.children = []\n    if child not in self.children:\n        self.children.append(child)\n    if hasattr(self, 'info'):\n        child.info = self.info\n    if hasattr(self, 'parent'):\n        child.parent = self.parent\n    if hasattr(self, 'depth'):\n        child.depth = self.depth + 1\n    if hasattr(self, 'children'):\n        child.children = self.children\n    if hasattr(self, 'is_root'):\n        child.is_root = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is_branch'):\n        child.is_branch = False\n    if hasattr(self, 'is_parent'):\n        child.is_parent = False\n    if hasattr(self, 'is_child'):\n        child.is_child = False\n    if hasattr(self, 'is_sibling'):\n        child.is_sibling = False\n    if hasattr(self, 'is_descendant'):\n        child.is_descendant = False\n    if hasattr(self, 'is_ancestor'):\n        child.is_ancestor = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is_leaf'):\n        child.is_leaf = False\n    if hasattr(self, 'is", "CodeBleu_score": 32.519933990602176}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[\"Date\", \"Balance\"]]\n    for date in dates:\n        result.append([date, 0])\n\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        date = entry.posting_date\n        if root_type not in [\"Asset\", \"Expense\"]:\n            entry.debit, entry.credit = (\n                entry.credit,\n                entry.debit,\n            )\n\n        if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            index = dates.index(date)\n            result[index + 1][1] += entry.debit - entry.credit\n\n    return result", "CodeBleu_score": 29.07688983933908}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append({\n            \"date\": date,\n            \"balance\": 0,\n            \"debit\": 0,\n            \"credit\": 0\n        })\n\n    root_type = get_root_type(account)\n    for entry in gl_entries:\n        date = entry.posting_date\n        balance = entry.debit - entry.credit\n        if root_type not in [\"Asset\", \"Expense\"]:\n            balance = -balance\n\n        if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            balance = accumulate_balance(result, date, balance)\n\n        result[dates.index(date)][\"balance\"] += balance\n        result[dates.index(date)][\"debit\"] += entry.debit\n        result[dates.index(date)][\"credit\"] += entry.credit\n\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 26.805425541734312}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append({\n            \"date\": date,\n            \"balance\": 0.0,\n            \"root_type\": frappe.get_cached_value(\"Account\", account, \"root_type\")\n        })\n\n    if result[0][\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        for row in result:\n            row[\"balance\"] *= -1\n\n    for entry in gl_entries:\n        if entry.posting_date < dates[0] or entry.posting_date > dates[-1]:\n            continue\n\n        date_index = bisect.bisect_left(dates, entry.posting_date)\n        result[date_index][\"balance\"] += entry.debit - entry.credit\n\n    if result[0][\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(result)):\n            result[i][\"balance\"] += result[i - 1][\"balance\"]\n\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.829383526142486}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.get_doc_before_save(\"account_type\"):\n            if self.account_type == \"Non-Receivable/Payable\":\n                if self.is_group:\n                    frappe.throw(frappe._(\"Cannot change account type from Receivable/Payable to Non-Receivable/Payable for a group account\"))\n                if self.has_gl_entries():\n                    frappe.throw(frappe._(\"Cannot change account type from Receivable/Payable to Non-Receivable/Payable for an account with existing general ledger entries\"))\n            else:\n                if self.has_gl_entries():\n                    self.add_comment(\"Account\", self.name, \"Warning\", frappe._(\"Account type changed from Receivable/Payable to {0}. Potential issues in Accounts report.\").format(self.account_type))\n\n", "CodeBleu_score": 25.56556062245957}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.get_doc_before_save():\n        if self.get_doc_before_save().account_type != self.account_type:\n            if self.account_type in [\"Receivable\", \"Payable\"]:\n                general_ledger_entries = frappe.get_all(\"General Ledger Entry\", filters={\"account\": self.name})\n                if general_ledger_entries:\n                    warning_message = f\"Account {self.name} is changing from {self.get_doc_before_save().account_type} to {self.account_type}. This may result in inaccurate data in the 'Accounts' report.\"\n                    self.add_comment(\"Comment\", warning_message)\n                    frappe.msgprint(warning_message, title=\"Warning\", indicator=\"orange\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 36.832209796679294}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.get_doc_before_save() and self.get_doc_before_save().account_type not in [\"Receivable\", \"Payable\"]:\n            if self.account_type != \"Receivable\" and self.account_type != \"Payable\":\n                if self.account_type == \"Cash\":\n                    if self.is_group:\n                        frappe.throw(\"Cannot change account type to Cash for a group account\")\n                    if self.is_system_account:\n                        frappe.throw(\"Cannot change account type to Cash for a system account\")\n                    if self.is_default:\n                        frappe.throw(\"Cannot change account type to Cash for a default account\")\n                if self.account_type == \"Bank\":\n                    if self.is_group:\n                        frappe.throw(\"Cannot change account type to Bank for a group account\")\n                    if self.is_system_account:\n                        frappe.throw(\"Cannot change account type to Bank for a system account\")\n                    if self.is_default:\n                        frappe.throw(\"Cannot change account type to Bank for a default account\")\n                if self.account_type == \"Credit Card\":\n                    if self.is_group:\n                        frappe.throw(\"Cannot change account type to Credit Card for a group account\")\n                    if self.is_system_account:\n                        frappe.throw(\"Cannot change account type to Credit Card for a system account\")\n                    if self.is_default:\n                        frappe.throw(\"Cannot change account type to Credit Card for a default account\")\n                if self.account_type == \"Sales\":\n                    if self.is_group:\n                        frappe.throw(\"Cannot change account type to Sales for a group account\")\n                    if self.is_system_account:\n                        frappe.throw(\"Cannot change account type to Sales for a system account\")\n                    if self.is_default:\n                        frappe.throw(\"Cannot change account type to Sales for a default account\")\n                if self.account_type == \"Purchase\":\n                    if self.is_group:\n                       ", "CodeBleu_score": 20.377145087619276}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value('Company', self.company, 'default_currency')\n        self.account_currency_explicit = 1\n\n    if self.account_currency != self.company_currency:\n        if self.is_group:\n            frappe.throw(_(\"Cannot set account currency for group {0} as it is different from the company's default currency {1}\").format(self.name, self.company_currency))\n\n        if self.is_sub_group:\n            frappe.throw(_(\"Cannot set account currency for sub-group {0} as it is different from the company's default currency {1}\").format(self.name, self.company_currency))\n\n        if self.is_leaf:\n            if frappe.db.exists('Ledger Entry', {'account': self.name, 'account_currency': self.company_currency}):\n                frappe.throw(_(\"Cannot set account currency for account {0} as it has existing ledger entries with the company's default currency {1}\").format(self.name, self.company_currency))\n\n            if frappe.db.exists('Ledger Entry', {'account': self.name, 'account_currency': self.account_currency}):\n                frappe.throw(_(\"Cannot set account currency for account {0} as it has existing ledger entries with the account's currency {1}\").format(self.name, self.account_currency))\n\n        self.account_currency_explicit = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.606493118295596}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        self.account_currency_explicitly_specified = 0\n    elif self.account_currency != frappe.get_cached_value(\"Company\", self.company, \"default_currency\"):\n        self.account_currency_explicitly_specified = 1\n    else:\n        self.account_currency_explicitly_specified = 0\n\n    if self.is_group:\n        return\n\n    if self.account_currency != frappe.db.get_value(\"Account\", self.parent_account, \"account_currency\"):\n        frappe.throw(_(\"Account Currency for {0} must be same as parent account {1}\").format(self.name, self.parent_account))\n\n    if self.account_currency != frappe.db.get_value(\"Account\", self.root_type, \"account_currency\"):\n        frappe.throw(_(\"Account Currency for {0} must be same as root type {1}\").format(self.name, self.root_type))\n\n    if self.account_currency != frappe.db.get_value(\"Account\", self.account_type, \"account_currency\"):\n        frappe.throw(_(\"Account Currency for {0} must be same as account type {1}\").format(self.name, self.account_type))\n\n    if self.account_currency != frappe.db.get_value(\"Account\", self.account_sub_type, \"account_currency\"):\n        frappe.throw(_(\"Account Currency for {0} must be same as account sub type {1}\").format(self.name, self.account_sub_type))\n\n    if self.account_currency != frappe.db.get_value(\"Account\", self.account_category, \"account_currency\"):\n        frappe.throw(_(\"Account Currency for {0} must be same as account category {1}\").format(self.name, self.account_category))\n\n    if", "CodeBleu_score": 36.06949415235846}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        self.explicit_currency = 0\n    else:\n        self.explicit_currency = 1\n\n    if not self.is_group:\n        self.validate_against_ledger_currency()\n\n    if self.is_group:\n        self.validate_group_account_currency()\n\n", "CodeBleu_score": 28.56812445150869}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, key_values)\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n    return merged_entries\n\n", "CodeBleu_score": 48.22077105867033}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n\n        if key not in merged_entries:\n            merged_entries[key] = key_values\n\n        if entry.get(\"debit\") > 0:\n            merged_entries[key][\"debit\"] += entry.get(\"debit\")\n            merged_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n\n        if entry.get(\"credit\") > 0:\n            merged_entries[key][\"credit\"] += entry.get(\"credit\")\n            merged_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n\n    return merged_entries\n\n", "CodeBleu_score": 53.950952936951225}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": key_values[\"account\"],\n                \"account_currency\": key_values[\"account_currency\"],\n                \"cost_center\": key_values[\"cost_center\"],\n                \"project\": key_values[\"project\"],\n                \"finance_book\": key_values[\"finance_book\"],\n                \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n            for dimension in accounting_dimensions:\n                merged_entries[key][dimension] = key_values[dimension]\n\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 48.2484206972011}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type == \"Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_reason == \"On Hold\" and supplier.hold_type == \"Supplier Payment\":\n            if supplier.hold_until_date and supplier.hold_until_date < nowdate():\n                supplier.hold_reason = \"None\"\n                supplier.save()\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please contact them to clear the hold.\").format(\n                        supplier.supplier_name\n                    )\n                )\n\n    elif self.transaction_type == \"Purchase Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_reason == \"On Hold\" and supplier.hold_type == \"Purchase Invoice\":\n            if supplier.hold_until_date and supplier.hold_until_date < nowdate():\n                supplier.hold_reason = \"None\"\n                supplier.save()\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please contact them to clear the hold.\").format(\n                        supplier.supplier_name\n                    )\n                )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.814336438316126}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_supplier:\n            if supplier.hold_supplier_type == \"Supplier Payment\":\n                if supplier.hold_supplier_date and supplier.hold_supplier_date < nowdate():\n                    frappe.throw(_(\"Supplier {0} is on hold. Please release the supplier before proceeding with the transaction.\").format(supplier.supplier_name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold. Please release the supplier before proceeding with the transaction.\").format(supplier.supplier_name))\n\n    elif self.transaction_type == \"Purchase Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_supplier:\n            if supplier.hold_supplier_type == \"Purchase Invoice\":\n                if supplier.hold_supplier_date and supplier.hold_supplier_date < nowdate():\n                    frappe.throw(_(\"Supplier {0} is on hold. Please release the supplier before proceeding with the transaction.\").format(supplier.supplier_name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold. Please release the supplier before proceeding with the transaction.\").format(supplier.supplier_name))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 26.326890823721733}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_supplier_payment:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_reason == \"On Hold\" and supplier.hold_type == \"Supplier Payment\":\n            if supplier.hold_until_date and supplier.hold_until_date < nowdate():\n                supplier.hold_reason = None\n                supplier.save()\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please update the hold reason or release the supplier\").format(\n                        self.supplier\n                    )\n                )\n    elif self.is_buying_invoice:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_reason == \"On Hold\" and supplier.hold_type == \"Buying Invoice\":\n            if supplier.hold_until_date and supplier.hold_until_date < nowdate():\n                supplier.hold_reason = None\n                supplier.save()\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please update the hold reason or release the supplier\").format(\n                        self.supplier\n                    )\n                )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.888888654372558}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [d.rep_doctype for d in self.get_repost_doctypes()]\n    if not repost_doctypes:\n        return\n\n    # get all rows for this voucher\n    voucher_type = self.doctype\n    voucher_no = self.name\n    rows = frappe.db.get_all(\"Repost Voucher\", filters={\"voucher_type\": voucher_type, \"voucher_no\": voucher_no},\n                             fields=[\"parent\", \"parenttype\", \"idx\", \"repost_vouchers\", \"vouchers\"])\n    if not rows:\n        return\n\n    references_map = {}\n    for row in rows:\n        if row.repost_vouchers:\n            references_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(row)\n        if row.vouchers:\n            references_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(row)\n\n    for parenttype, references in references_map.items():\n        for parent, rows in references.items():\n            repost_doc = frappe.get_doc(parenttype, parent)\n            repost_doc.run_method(\"_remove_references_in_repost_doctypes\")\n\n            for row in rows:\n                if row.repost_vouchers:\n                    repost_doc.repost_vouchers = [\n                        v for v in repost_doc.repost_vouchers if v.idx != row.idx]\n                if row.vouchers:\n                    repost_doc.vouchers = [v for v in repost_doc.vouchers if v.idx != row.idx]\n\n            repost_doc.ignore_links = True\n            repost_doc.ignore_validate = True\n            repost_doc.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 24.87956491117398}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    references_map = {}\n    for doctype, parent in self.get_repost_references():\n        references_map.setdefault(doctype, {}).setdefault(parent, []).append(self.name)\n\n    for doctype, parent in references_map.items():\n        repost_doc = frappe.get_doc(doctype)\n        repost_doc.run_method(\"set_missing_values\")\n        repost_doc.run_method(\"calculate_taxes_and_totals\")\n\n        for parent_name in parent:\n            repost_doc.run_method(\"set_missing_values\")\n            repost_doc.run_method(\"calculate_taxes_and_totals\")\n            repost_doc.run_method(\"set_missing_values\")\n            repost_doc.run_method(\"calculate_taxes_and_totals\")\n\n            if repost_doc.get(\"vouchers\"):\n                repost_doc.remove(\n                    \"vouchers\",\n                    filters={\n                        \"voucher_type\": self.doctype,\n                        \"voucher_no\": self.name,\n                    },\n                )\n\n            if repost_doc.get(\"repost_vouchers\"):\n                repost_doc.remove(\n                    \"repost_vouchers\",\n                    filters={\n                        \"voucher_type\": self.doctype,\n                        \"voucher_no\": self.name,\n                    },\n                )\n\n            repost_doc.ignore_validate = True\n            repost_doc.ignore_mandatory = True\n            repost_doc.ignore_links = True\n            repost_doc.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.884200342695877}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    references = frappe.db.sql(\n        \"\"\"\n        SELECT\n            parenttype, parent, voucher_type, voucher_no\n        FROM\n            `tab{0}`\n        WHERE\n            voucher_type = %s AND voucher_no = %s\n    \"\"\".format(\n            repost_doctypes[0]\n        ),\n        (self.voucher_type, self.voucher_no),\n        as_dict=1,\n    )\n\n    references_map = {}\n    for reference in references:\n        references_map.setdefault(reference.parenttype, {}).setdefault(\n            reference.parent, []\n        ).append(reference)\n\n    for doctype, parents in references_map.items():\n        for parent, references in parents.items():\n            repost_doc = frappe.get_doc(doctype, parent)\n            repost_doc.set(\"ignore_voucher_date_validation\", 1)\n            repost_doc.set(\"ignore_links\", 1)\n            repost_doc.set(\"ignore_permissions\", 1)\n\n            for reference in references:\n                if reference.voucher_type == self.voucher_type:\n                    repost_doc.remove(reference)\n                else:\n                    repost_doc.remove(\n                        {\n                            \"voucher_type\": reference.voucher_type,\n                            \"voucher_no\": reference.voucher_no,\n                        }\n                    )\n\n            repost_doc.save()\n\n\n\n\n", "CodeBleu_score": 26.66140842889385}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"count\": 500,\n        \"offset\": 0,\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            query_params[\"offset\"] += query_params[\"count\"]\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Get transactions error\")\n            frappe.throw(_(str(e)), title=_(\"Get Transactions Failed\"))\n\n    return transactions", "CodeBleu_score": 37.316598227369546}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n\n    try:\n        transactions = []\n        start_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n        end_date = datetime.strptime(end_date, \"%Y-%m-%d\")\n        start_date_str = start_date.strftime(\"%Y-%m-%d\")\n        end_date_str = end_date.strftime(\"%Y-%m-%d\")\n\n        # Construct the query parameters\n        query_params = {\n            \"client_id\": self.client_id,\n            \"secret\": self.secret,\n            \"access_token\": self.access_token,\n            \"start_date\": start_date_str,\n            \"end_date\": end_date_str,\n            \"count\": 500,\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n\n        # Fetch transactions\n        response = self.client.Transactions.get(**query_params)\n        transactions.extend(response[\"transactions\"])\n\n        # Continue fetching transactions if there are more than 500\n        while len(transactions) < response[\"total_transactions\"]:\n            query_params[\"offset\"] = len(transactions)\n            response = self.client.Transactions.get(**query_params)\n            transactions.extend(response[\"transactions\"])\n\n        return transactions\n\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            raise Exception(\"Item login required\")\n        elif e.code == \"INVALID_CREDENTIAL\":\n            raise Exception(\"Invalid credentials\")\n        elif e.code == \"INVALID_REQUEST\":\n            raise Exception(\"Invalid request\")\n        else:\n            raise Exception(e.code)\n    except APIError as e:\n        if e.code == \"PLANNED_MA", "CodeBleu_score": 43.198964621193035}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\"count\": 500},\n    }\n    if account_id:\n        params[\"account_ids\"] = [account_id]\n\n    transactions = []\n    try:\n        response = self.client.Transactions.get(self.access_token, **params)\n        transactions.extend(response[\"transactions\"])\n        while response[\"has_more\"]:\n            params[\"offset\"] = len(transactions)\n            response = self.client.Transactions.get(self.access_token, **params)\n            transactions.extend(response[\"transactions\"])\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n        elif e.code == \"INVALID_ACCESS_TOKEN\":\n            pass\n        else:\n            raise e\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n        elif e.code == \"INVALID_CREDENTIALS\":\n            pass\n        else:\n            raise e\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transactions error\")\n        raise e", "CodeBleu_score": 43.36312422115429}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    # Parse the response\n    institution = json.loads(response)\n    institution_id = institution[\"institution_id\"]\n    institution_name = institution[\"institution_name\"]\n    institution_type = institution[\"institution_type\"]\n    institution_logo = institution[\"institution_logo\"]\n\n    # Retrieve the access token using the PlaidConnector\n    connector = PlaidConnector(token)\n    access_token = connector.get_access_token(institution_id)\n\n    # Check if the bank already exists in the database\n    bank = frappe.db.get_value(\"Bank\", {\"institution_id\": institution_id}, [\"name\"])\n    if bank:\n        # Update the access token for the existing bank record\n        frappe.db.set_value(\"Bank\", bank, \"access_token\", access_token)\n        frappe.db.commit()\n    else:\n        # Create and insert a new bank record\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"institution_id\": institution_id,\n            \"institution_name\": institution_name,\n            \"institution_type\": institution_type,\n            \"institution_logo\": institution_logo,\n            \"access_token\": access_token\n        })\n        bank.insert()\n\n    # Log any errors that occur during the process\n    if bank.meta.get(\"issingle\"):\n        frappe.log_error(\"Bank with name \" + bank.name + \" already exists.\")\n    else:\n        frappe.log_error(\"Error while adding institution.\")", "CodeBleu_score": 31.40725176812753}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank_data = json.loads(response)\n        bank_data[\"token\"] = token\n        connector = PlaidConnector()\n        access_token = connector.get_access_token(bank_data[\"public_token\"])\n        bank = frappe.get_doc(\"Bank\", {\"name\": bank_data[\"bank_name\"]})\n        if not bank:\n            bank = frappe.get_doc({\n                \"doctype\": \"Bank\",\n                \"name\": bank_data[\"bank_name\"],\n                \"bank_name\": bank_data[\"bank_name\"],\n                \"bank_account_no\": bank_data[\"bank_account_no\"],\n                \"bank_account_type\": bank_data[\"bank_account_type\"],\n                \"bank_account_currency\": bank_data[\"bank_account_currency\"],\n                \"bank_account_holder_name\": bank_data[\"bank_account_holder_name\"],\n                \"bank_account_holder_type\": bank_data[\"bank_account_holder_type\"],\n                \"bank_account_holder_email\": bank_data[\"bank_account_holder_email\"],\n                \"bank_account_holder_phone\": bank_data[\"bank_account_holder_phone\"],\n                \"bank_account_holder_address\": bank_data[\"bank_account_holder_address\"],\n                \"bank_account_holder_address_city\": bank_data[\"bank_account_holder_address_city\"],\n                \"bank_account_holder_address_state\": bank_data[\"bank_account_holder_address_state\"],\n                \"bank_account_holder_address_zip\": bank_data[\"bank_account_holder_address_zip\"],\n                \"bank_account_holder_address_country\": bank_data[\"bank_account_holder_address_country\"],\n                \"bank_account_holder_address_street\": bank_data[\"bank_account_holder_address_street\"],\n                \"bank_account_holder_address_street_2\": bank_data[\"bank_account_holder_address_street_2\"],\n                \"bank_account_holder_address_street_3\": bank_data[\"bank_account_holder_address_street_3\"],", "CodeBleu_score": 30.802677801976298}, {"code": "def add_institution(token, response)\n\t\n    # Parse response\n    institution_id = response.get(\"institution_id\")\n    institution_name = response.get(\"institution_name\")\n    institution_type = response.get(\"institution_type\")\n    institution_logo = response.get(\"institution_logo\")\n    institution_url = response.get(\"institution_url\")\n\n    # Get access token\n    connector = PlaidConnector()\n    access_token = connector.get_access_token(token)\n\n    # Check if bank already exists\n    bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution_id})\n    if bank:\n        bank.access_token = access_token\n        bank.save()\n    else:\n        # Create new bank record\n        bank = frappe.new_doc(\"Bank\")\n        bank.institution_id = institution_id\n        bank.institution_name = institution_name\n        bank.institution_type = institution_type\n        bank.institution_logo = institution_logo\n        bank.institution_url = institution_url\n        bank.access_token = access_token\n        bank.insert()\n\n    return bank\n\n", "CodeBleu_score": 41.292469597911904}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get the last integration date for the specified bank and bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Get the start and end dates for the transaction retrieval\n    start_date = (\n        last_integration_date\n        if last_integration_date\n        else add_months(today(), -1 * frappe.defaults.get_defaults().get(\"months_for_txn_sync\"))\n    )\n    end_date = today()\n\n    # Attempt to fetch the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        oldest_transaction_date = min(\n            [\n                getdate(transaction[\"date\"])\n                for transaction in transactions\n                if transaction[\"date\"]\n            ]\n        )\n        frappe.db.set_value(\n            \"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date\n        )\n\n    # Log the number of new transactions added\n    frappe.msgprint(\n        _(\"Added {0} new transactions\").format(len(new_transactions)),\n        alert=True,\n        indicator=\"green\",\n    )\n\n    # Handle any exceptions by logging an error message\n    except Exception:\n        frappe.log_error(\n            title=_(\"Error syncing transactions for bank account {0}\").format(\n                bank_account\n            ),\n            message=frappe.get_traceback(),\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.491007254597918}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date for the bank account\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n\n    # Determine the start and end dates for the transaction retrieval\n    if last_integration_date:\n        start_date = add_months(last_integration_date, -1)\n    else:\n        start_date = add_months(today(), -1)\n    end_date = today()\n\n    # Attempt to fetch the transactions from the bank\n    transactions = get_transactions(bank, bank_account, start_date=start_date, end_date=end_date)\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        oldest_transaction_date = min(\n            frappe.db.get_value(\"Bank Transaction\", t, \"date\") for t in new_transactions\n        )\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date)\n\n    # Log the number of new transactions added\n    info(\n        _(\"Added {0} new transactions for bank account {1}\").format(\n            len(new_transactions), bank_account\n        )\n    )\n\n    # Handle any exceptions by logging an error message\n    except Exception:\n        frappe.log_error(\n            title=_(\"Error syncing transactions for bank account {0}\").format(bank_account),\n            message=frappe.get_traceback(),\n        )\n\n", "CodeBleu_score": 45.90864803107934}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_account_name = frappe.db.get_value(\"Bank Account\", bank_account, \"name\")\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account_name, \"last_integration_date\")\n    if not last_integration_date:\n        last_integration_date = getdate(frappe.defaults.get_defaults().get(\"sync_start_date\"))\n    else:\n        last_integration_date = getdate(last_integration_date)\n\n    end_date = getdate()\n    start_date = add_months(last_integration_date, -1)\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    if not transactions:\n        return\n\n    try:\n        for transaction in transactions:\n            new_bank_transaction(transaction)\n\n        if transactions:\n            oldest_transaction = min(transactions, key=lambda x: x[\"date\"])\n            last_integration_date = getdate(oldest_transaction[\"date\"])\n            frappe.db.set_value(\n                \"Bank Account\", bank_account_name, \"last_integration_date\", last_integration_date\n            )\n\n        frappe.msgprint(\n            _(\"Synced {0} transactions\").format(len(transactions)), alert=True, indicator=\"green\"\n        )\n\n    except Exception:\n        frappe.log_error(title=_(\"Error syncing transactions\"))\n\n", "CodeBleu_score": 40.587856040283256}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # construct the query URI\n    query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/{entity}\"\n    # get the total number of entries\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        total = response.json()[\"totalCount\"]\n        # determine the number of batches\n        batches = total // 1000 + 1\n        for i in range(batches):\n            # construct the query URI with the offset and limit parameters\n            offset = i * 1000\n            limit = 1000\n            query_uri = f\"{query_uri}?offset={offset}&limit={limit}\"\n            # get the entries\n            response = self._get(query_uri)\n            if response.status_code == 200:\n                entries = response.json()[entity]\n                # preprocess the entries\n                entries = self._preprocess_entries(entity, entries)\n                # save the entries\n                self._save_entries(entity, entries)\n            else:\n                self._log_error(response.text)\n    else:\n        self._log_error(response.text)\n\n", "CodeBleu_score": 34.06944051528012}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    if not query_uri:\n        return\n\n    total = self._get_total_entries(query_uri)\n    if not total:\n        return\n\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total,\n        }\n    )\n\n    offset = 0\n    while offset < total:\n        try:\n            entries = self._get_entries(query_uri, offset)\n            if not entries:\n                break\n            entries = self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n            offset += 1000\n        except Exception as e:\n            self._log_error(e)\n            break\n\n", "CodeBleu_score": 29.76717694779543}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total = self._get_total_entries(query_uri)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total,\n        }\n    )\n    if total:\n        entries = self._get_entries(query_uri, total)\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 22.49108991861672}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    quickbooks_id = self._get_quickbooks_id(invoice)\n    if not quickbooks_id:\n        return\n    if self._is_linked_transaction(invoice):\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        if invoice[\"TxnType\"] == \"Sales\":\n            self._save_sales_invoice(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"Return\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"TxnType\"] == \"POS\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        else:\n            self._log_error(\n                \"Invoice type not supported\",\n                [invoice[\"TxnType\"], invoice[\"Id\"], invoice[\"CustomerRef\"][\"value\"]],\n            )\n\n", "CodeBleu_score": 33.668585036398404}, {"code": "def _save_invoice(self, invoice)\n\t\n    quickbooks_id = self._get_quickbooks_id(invoice)\n    if self._is_linked_transaction_type(invoice, \"StatementCharge\") or self._is_linked_transaction_type(\n        invoice, \"ReimburseCharge\"\n    ):\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n", "CodeBleu_score": 39.70704936408828}, {"code": "def _save_invoice(self, invoice)\n\t\n    quickbooks_id = self._get_quickbooks_id(invoice, \"Invoice\")\n    if not quickbooks_id:\n        return\n\n    if self._is_linked_transaction(invoice, \"StatementCharge\"):\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    elif self._is_linked_transaction(invoice, \"ReimburseCharge\"):\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 35.732323849440476}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    schedule_date = getdate(schedule_date)\n    end_date = getdate(end_date)\n\n    if no_of_visit == 1:\n        schedule_list.append(schedule_date)\n        return schedule_list\n\n    interval = (end_date - schedule_date) / no_of_visit\n    for _i in range(no_of_visit):\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n\n    return schedule_list", "CodeBleu_score": 33.58450055208368}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n    schedule_date = start_date\n    interval = (end_date - start_date).days / no_of_visit\n    for _i in range(no_of_visit):\n        schedule_date = add_days(schedule_date, interval)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.600394482411613}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    interval = (end_date - start_date).days / no_of_visit\n\n    for i in range(no_of_visit):\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n\n    return schedule_list", "CodeBleu_score": 30.033496061877063}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        // Determine the method to handle the request\n        $method = request()->get('handle', 'edit');\n\n        // Construct the URL for bulk actions\n        $url = route('bulk-actions.action', $this->path);\n\n        // Render the HTML content for a modal using the specified view and data\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $this->actions[$method]['handle'] ?? 'update',\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        // Return a JSON response with success status, message, data, and rendered HTML\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $this->actions[$method]['handle'] ?? 'update',\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 80.83518381043892}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.804917274252}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.804917274252}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    try {\n        $contacts = $this->getSelectedRecords($request);\n\n        foreach ($contacts as $contact) {\n            $contact->delete();\n        }\n\n        flash('Contacts deleted successfully')->success();\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error();\n    }\n}", "CodeBleu_score": 60.93130771584241}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request);\n\n    try {\n        foreach ($contacts as $contact) {\n            $this->dispatch(new DeleteContact($contact));\n        }\n    } catch (Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 65.22202040880487}, {"code": "<?\npublic function deleteContacts($request){\n\t    try {\n        $contacts = $this->getSelectedRecords($request);\n\n        foreach ($contacts as $contact) {\n            $this->dispatch(new DeleteContact($contact));\n        }\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 71.94009537134649}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, 'transactions');\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 93.86623119030489}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    try {\n        foreach ($transactions as $transaction) {\n            dispatch(new DeleteTransactionJob($transaction));\n        }\n\n        flash(__('Transactions deleted successfully'))->success()->important();\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 64.79053084838542}, {"code": "<?\npublic function deleteTransactions($request){\n\t    try {\n        $transactions = $this->getSelectedRecords($request);\n\n        foreach ($transactions as $transaction) {\n            dispatch(new DeleteTransactionJob($transaction));\n        }\n\n        flash('Transactions deleted successfully')->success()->important();\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 65.47697746958386}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    // Get the request class name\n    $requestClass = get_class($this);\n\n    // Check if the request class exists and is an instance of FormRequest\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    // Get the data to validate\n    $data = $this->all();\n\n    // Initialize the request\n    $request = new $requestClass;\n    $request->initialize();\n\n    // Prepare the validation rules\n    $rules = $request->rules();\n    $rules = $this->prepareRules($rules);\n\n    // Attempt to validate the data\n    try {\n        $validator->validate();\n    } catch (ValidationException $e) {\n        // Add the validation failures to the validator\n        $validator->addFailure($e->validator->failed());\n\n        // Rethrow the exception\n        throw $e;\n    }\n}", "CodeBleu_score": 35.52676172747209}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->request;\n\n    if (!class_exists($request) || !is_subclass_of($request, FormRequest::class)) {\n        return;\n    }\n\n    foreach ($request::getData() as $data) {\n        $request->initialize($data);\n        $rules = $request->rules();\n        $rules = $this->prepareRules($rules);\n\n        try {\n            $validator->validate();\n        } catch (ValidationException $e) {\n            foreach ($e->validator->failed() as $key => $errors) {\n                foreach ($errors as $error) {\n                    $validator->addFailure($key, $error['rule'], $error['parameters']);\n                }\n            }\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 44.34655516271287}, {"code": "<?\npublic function withValidator($validator){\n\t    if (class_exists($this->requestClass)) {\n        $requestClass = $this->requestClass;\n        $request = new $requestClass();\n        if ($request instanceof FormRequest) {\n            foreach ($this->data as $dataRow) {\n                $request->initialize($dataRow, $this->rules);\n                $rules = $request->prepareRules($request->rules());\n                try {\n                    $request->validate();\n                } catch (ValidationException $e) {\n                    $validator->addFailure($request->getData(), $rules, $e->validator->failed());\n                    throw $e;\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 39.932231055412515}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        if ($arguments[0] instanceof Model) {\n            $this->instance->setModel($arguments[0]);\n        }\n\n        if ($arguments[1] instanceof Request) {\n            $this->instance->setRequest($arguments[1]);\n        }\n    }\n}", "CodeBleu_score": 37.88880232793689}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        if ($arguments[0] instanceof Model) {\n            $this->instance->setModel($arguments[0]);\n        }\n\n        if ($arguments[1] instanceof Request) {\n            $this->instance->setRequest($arguments[1]);\n        }\n    }\n}", "CodeBleu_score": 37.88880232793689}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        $this->instance->update($this->getRequestInstance($arguments[0] ?? []));\n    }\n}", "CodeBleu_score": 19.546816280176056}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t  $query->usingSearchString()->sortable($sort)->when(\n    $this->request->expectsJson() && !$this->request->isNotApi(),\n    fn($query) => $query->get(),\n    fn($query) => $query->paginate($this->request->get('limit', 10))\n  );\n}", "CodeBleu_score": 26.230658133159217}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort)->get();\n    if ($request->expectsJson() && !$request->isNotApi()) {\n        return $query->get();\n    }\n    return $query->paginate($request->merge(['limit' => setting('default_pagination_limit')]));\n}", "CodeBleu_score": 34.74869776504453}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort);\n\n    if ($request->expectsJson() && !$request->isNotApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate($request->merge(['limit' => setting('default_pagination_limit')])->get('limit'));\n}", "CodeBleu_score": 36.864022217975304}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open = 0;\n    $overdue = 0;\n\n    if ($model->status == 'paid') {\n        return [$open, $overdue];\n    }\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $open += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    if ($model->due_at > Date::today()) {\n        $overdue = $open;\n        $open = 0;\n    }\n\n    return [$open, $overdue];\n}", "CodeBleu_score": 56.010404989755735}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->status == 'partial') {\n        $payments = $model->transactions()->where('status', '=', 'paid')->get();\n        foreach ($payments as $payment) {\n            $openAmount += $payment->amount;\n        }\n    }\n\n    if ($model->status == 'draft') {\n        $openAmount = $model->amount;\n    }\n\n    if ($model->due_at && $model->due_at->isPast()) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 53.295483017733304}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t  $openAmount = 0;\n  $overdueAmount = 0;\n\n  if ($model->status == 'paid') {\n    return [$openAmount, $overdueAmount];\n  }\n\n  if ($model->status == 'partial') {\n    $openAmount = $model->transactions->sum('amount_converted_to_default');\n  }\n\n  if ($model->due_date && $model->due_date->isPast()) {\n    $overdueAmount = $openAmount;\n    $openAmount = 0;\n  }\n\n  return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 41.852294613998346}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.58272726647606}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 80.45612573143755}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->toBase()->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 86.0879741761939}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    // Retrieve the reconciliations from the request\n    $reconciliations = $request->get('reconciliations');\n\n    // Process each reconciliation within a database transaction\n    \\DB::transaction(function () use ($reconciliations) {\n        // Loop through each reconciliation\n        foreach ($reconciliations as $reconciliation) {\n            // Retrieve the reconciliation from the database\n            $reconciliation = Reconciliation::findOrFail($reconciliation['id']);\n\n            // Set the reconciliation's status to reconciled\n            $reconciliation->status = 'reconciled';\n\n            // Save the reconciliation\n            $reconciliation->save();\n\n            // Mark all related transactions within the reconciliation's date range and account ID as reconciled\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($item) {\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 51.84648259411866}, {"code": "<?\npublic function reconcile($request){\n\t    // Retrieve the reconciliations from the request\n    $reconciliations = $request->get('reconciliations');\n\n    // Process each reconciliation within a database transaction\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            // Retrieve the reconciliation object\n            $reconciliation = Reconciliation::find($reconciliation['id']);\n\n            // Set the reconciliation status to reconciled\n            $reconciliation->status = 'reconciled';\n\n            // Save the reconciliation\n            $reconciliation->save();\n\n            // Mark all related transactions within the reconciliation's date range and account ID as reconciled\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->update(['reconciled' => true]);\n        }\n    });\n}", "CodeBleu_score": 50.7805273612015}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->reconciliation_ids)->get();\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::RECONCILED;\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 56.77476095178484}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->deleteExistingInvitations();\n    $invitation = $this->createInvitation();\n    try {\n        $this->dispatchNotification($invitation);\n    } catch (\\Exception $e) {\n        throw new \\Exception(trans('invitations.notification_failed'));\n    }\n    return $invitation;\n}", "CodeBleu_score": 15.837944160698752}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->getSourceName();\n\n    \\DB::transaction(function () {\n        $invitation = UserInvitation::where('user_id', $this->user->id)->get();\n        $invitation->delete();\n\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n        ]);\n\n        try {\n            $this->dispatch(new NotifyUser($this->user, $invitation));\n        } catch (\\Exception $e) {\n            throw new \\Exception(trans('invitations.notify_user_failed'));\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 47.48165591239741}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    \\DB::transaction(function () {\n        UserInvitation::where('user_id', $this->user->id)->get()->each->delete();\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n        ]);\n        try {\n            $this->dispatch(new NotifyUser($invitation));\n        } catch (\\Exception $e) {\n            throw new \\Exception(trans('user.invitation_notification_failed'));\n        }\n        return $invitation;\n    });\n}", "CodeBleu_score": 35.74189536778791}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new Exception('This transaction has already been reconciled.');\n    }\n\n    if ($this->isTransferTransaction()) {\n        throw new Exception('This transaction is a transfer transaction.');\n    }\n}", "CodeBleu_score": 27.447380497794814}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception('Transaction is already reconciled.');\n    }\n\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException('Transfer transactions are not authorized.');\n    }\n}", "CodeBleu_score": 37.21492672627878}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new \\Exception(\"Transaction is already reconciled\");\n    }\n\n    if ($this->model->isTransferTransaction()) {\n        throw new \\Exception(\"Unauthorized\", 401);\n    }\n}", "CodeBleu_score": 36.091572531198345}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    String tenantId = getTenantIdByToken();\n    if (tenantId != null && !tenantId.equals(\"0\")) {\n        if (tableName.equals(\"tenant_table\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 17.10918890205722}, {"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    String tenantId = getTenantIdByToken();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (!tenantId.equals(\"0\")) {\n        return tableName.equals(\"table1\") || tableName.equals(\"table2\");\n    }\n\n    // Otherwise, deny access to all tables\n    return false;\n}", "CodeBleu_score": 11.040018738825317}, {"code": "public boolean doTableFilter(String tableName){\n\t    String tenantId = getTenantIdByToken();\n    if (tenantId != null && tenantId.equals(\"0\")) {\n        if (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 13.477654149596141}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.08759747992765}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer configurer = new MapperScannerConfigurer();\n    configurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return configurer;\n}", "CodeBleu_score": 74.15604342630621}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId != 0L) {\n                        if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 96.1078563774103}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId != 0L) {\n                        if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 96.1078563774103}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId != 0L) {\n                        if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 96.1078563774103}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList(request);\n        if (systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        } else {\n            response.setCode(404);\n            response.setMsg(\"System config not found.\");\n        }\n    } catch (Exception e) {\n        log.error(\"Failed to get system config.\", e);\n        response.setCode(500);\n        response.setMsg(\"Failed to get system config.\");\n    }\n    return response;\n}", "CodeBleu_score": 35.794822168318554}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfigList();\n        if (list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        } else {\n            response.setCode(200);\n            response.setData(new SystemConfig());\n        }\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.45457176500086}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = getSystemConfig();\n        if (list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        } else {\n            response.setCode(500);\n            response.setMessage(\"Failed to retrieve system configuration information.\");\n        }\n    } catch (Exception e) {\n        log.error(\"Failed to retrieve system configuration information.\", e);\n        response.setCode(500);\n        response.setMessage(\"Failed to retrieve system configuration information.\");\n    }\n    return response;\n}", "CodeBleu_score": 33.19779047815501}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String businessPath = getParameter(request, \"businessPath\");\n    if (isNotEmpty(businessPath)) {\n        try {\n            File file = getFile(request, \"file\");\n            if (file != null) {\n                if (isNotEmpty(businessPath)) {\n                    if (uploadLocal(businessPath, file)) {\n                        return new BaseResponseInfo(200, \"upload file success\");\n                    } else {\n                        return new BaseResponseInfo(500, \"upload file failed\");\n                    }\n                } else {\n                    if (uploadAliOss(businessPath, file)) {\n                        return new BaseResponseInfo(200, \"upload file success\");\n                    } else {\n                        return new BaseResponseInfo(500, \"upload file failed\");\n                    }\n                }\n            } else {\n                return new BaseResponseInfo(500, \"upload file failed\");\n            }\n        } catch (Exception e) {\n            log.error(\"upload file failed\", e);\n            return new BaseResponseInfo(500, \"upload file failed\");\n        }\n    } else {\n        return new BaseResponseInfo(500, \"upload file failed\");\n    }\n}", "CodeBleu_score": 20.79270833458066}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        int result=0;\n        try{\n            Account account=JSONObject.toJavaObject(obj, Account.class);\n            account.setInitialAmount(account.getInitialAmount()==null?0:account.getInitialAmount());\n            account.setIsDefault(getAccountCount()==0?true:false);\n            account.setEnabled(true);\n            account.setCreateBy(JshUtils.getUserId(request));\n            account.setCreateTime(new Date());\n            account.setUpdateBy(JshUtils.getUserId(request));\n            account.setUpdateTime(new Date());\n            accountMapperEx.insertSelective(account);\n            result=account.getId();\n            JshUtils.insertLog(request, \"\u65b0\u589e\u8d26\u6237\", account.getName(), account.getSerialNo());\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 45.897172667276685}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        int result=0;\n        try{\n            Account account=JSONObject.toJavaObject(obj, Account.class);\n            account.setInitialAmount(account.getInitialAmount()==null?0:account.getInitialAmount());\n            if(account.getIsDefault()==null){\n                account.setIsDefault(getInitialAmount()==0);\n            }\n            account.setEnabled(true);\n            insertLog(request, account.getName(), \"\u65b0\u589e\u8d26\u6237\");\n            result=accountMapperEx.insert(account);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 45.806717117715145}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result=0;\n    try{\n        Account account=JSONObject.parseObject(obj.toJSONString(), Account.class);\n        account.setInitialAmount(account.getInitialAmount()==null?0:account.getInitialAmount());\n        account.setIsDefault(this.setIsDefault(account));\n        account.setEnabled(true);\n        account.setCreateTime(new Date());\n        account.setCreateBy(JshUtils.getCurrentUser(request).getId());\n        result=accountMapperEx.insertSelective(account);\n        this.insertLog(account.getId(), \"\u65b0\u589e\u8d26\u6237\", request);\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 52.96952878493953}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error:\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.212196932784387}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.countWithBalance(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error while counting accounts with name: {} and serialNo: {}\", name, serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 30.081655265746853}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"listWithBalanceCount error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.557986671005594}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"delete depot item fail\", e);\n        throw new Exception(e.getMessage());\n    }\n}", "CodeBleu_score": 32.16320494400593}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"delete depot item error\", e);\n        throw new Exception(\"delete depot item error\");\n    }\n}", "CodeBleu_score": 31.08601132620514}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(\"delete depot item fail, id:{}, error:{}\", id, e.getMessage());\n        throw e;\n    }\n    return result;\n}", "CodeBleu_score": 61.50405811836252}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString requestUrl = get + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(requestUrl);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\tif (response.contains(nodeKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 46.35366642981283}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\treturn jsonObject.has(\"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 46.43551384468434}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tString url = get() + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString response = EntityUtils.toString(entity);\n\t\t\t\tif (response.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 51.4973167581164}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\tboolean success = false;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(get + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\tsuccess = true;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 52.76102723355481}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(get + withProjectName(projectName) + \"edge/add/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString result = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tJSONObject jsonObject = new JSONObject(result);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 55.2333411079739}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(\n\t\t\t\t\twithProjectName(projectName) + \"addEdge?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\"\n\t\t\t\t\t\t\t+ toType + \"&from=\" + from + \"&to=\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() != 200) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tString json = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject jsonObject = (JSONObject) JSONValue.parse(json);\n\t\t\treturn jsonObject.containsKey(\"key\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 47.87519388397713}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(new Date());\n    String json = writeValueAsString(event);\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 41.91613423143312}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String jsonString = writeValueAsString(event);\n    ProducerRecord<String, String> record = new ProducerRecord<>(event.getTarget() != null ? event.getTarget() : \"test\", jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 39.68363663072228}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(new Date());\n    String eventString = writeValueAsString(event);\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, eventString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 37.05440621574898}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials\n    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 39.833412517844266}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials\n    OSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 38.92576864206181}, {"code": "public String upload(String objName, byte[] content){\n\t    OSSClient client = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n    client.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n    client.shutdown();\n    return \"http://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 33.7582263151186}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.701563189483164}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 30.381360773173927}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            LocationInfo result = new LocationInfo();\n            result.setIpAddress(ipAddress);\n            result.setMainInfo(\"unknown\");\n            result.setSubInfo(\"unknown\");\n            return result;\n        }\n        return worker.getLocationInfoByIP(ipAddress);\n    }", "CodeBleu_score": 54.14661051934445}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (esClient != null && esHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (esClient != null && esHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\tesClient = builder.build();\n\t\t\tesHighLevelClient = new RestHighLevelClient(builder);\n\t\t}\n\t}", "CodeBleu_score": 71.45143517807296}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (esClient == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (esClient == null) {\n\t\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n\t\t\t\t\tbuilder.setRequestConfigCallback(requestConfigBuilder -> {\n\t\t\t\t\t\trequestConfigBuilder.setConnectTimeout(connectionTimeout);\n\t\t\t\t\t\trequestConfigBuilder.setSocketTimeout(socketTimeout);\n\t\t\t\t\t\trequestConfigBuilder.setConnectionRequestTimeout(connectionRequestTimeout);\n\t\t\t\t\t});\n\t\t\t\t\tesClient = builder.build();\n\t\t\t\t\thighLevelClient = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[0])));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 43.18003433284383}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (esClient != null && esHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (esClient != null && esHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n\t\t\tesClient = builder.build();\n\t\t\tesHighLevelClient = new RestHighLevelClient(builder);\n\t\t}\n\t}", "CodeBleu_score": 75.19636959897338}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostStrings = clusterHostList.split(\",\");\n    for (String hostString : hostStrings) {\n        int port = clusterPort;\n        if (hostString.contains(\":\")) {\n            String[] parts = hostString.split(\":\");\n            hostString = parts[0];\n            port = Integer.parseInt(parts[1]);\n        }\n        hosts.add(new HttpHost(hostString, port));\n    }\n    return hosts;\n}", "CodeBleu_score": 41.932967267182406}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostParts = host.split(\":\");\n        String hostname = hostParts[0];\n        int port = hostParts.length > 1 ? Integer.parseInt(hostParts[1]) : clusterPort;\n        hosts.add(new HttpHost(hostname, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 42.532004208929315}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            host = hostParts[0];\n            port = parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(host, port));\n    }\n    return hosts;\n}", "CodeBleu_score": 44.58647573700148}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\t\twhile (!isStopped()) {\n\t\t\tTask task = null;\n\t\t\ttry {\n\t\t\t\ttask = getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (task instanceof PlainTextMessageTask) {\n\t\t\t\t\tPlainTextMessageTask messageTask = (PlainTextMessageTask) task;\n\t\t\t\t\tString toNumber = messageTask.getToNumber();\n\t\t\t\t\tString message = messageTask.getMessage();\n\t\t\t\t\tif (toNumber == null || message == null || toNumber.length() == 0 || message.length() == 0) {\n\t\t\t\t\t\tlog.error(\"Invalid message task, toNumber = \" + toNumber + \", message = \" + message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tlog.error(\"Failed to send message to \" + toNumber + \".\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlog.error(\"Unknown task type: \" + task.getClass().getName());\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Failed to process task.\", e);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 31.320950058694475}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\twhile (!isStopped()) {\n\t\t\ttry {\n\t\t\t\tTask task = this.getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\t\t\tif (isValidNumber(toNumber) && isValidMessage(message)) {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tSystem.out.println(\"Invalid number or message: \" + toNumber + \", \" + message);\n\t\t\t\t\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\t\t\t\t\tthis.getSmtpService().send(\"archerliyaqing@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", \"Invalid number or message: \" + toNumber + \", \" + message);\n\t\t\t\t\t\t\t\tthis.getSmtpService().send(\"philip_chang@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", \"Invalid number or message: \" + toNumber + \", \" + message);\n\t\t\t\t\t\t\t\tthis.getSmtpService().send(\"clariones@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", \"Invalid number or message: \" + toNumber + \", \" + message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"Error processing task: \" + e.getMessage());\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 30.927514908357722}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tTask task = this.getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\tprocessTask(task);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"pollingWork\", e);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 13.571284270895898}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = getHttpClient().execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tSystem.out.println(content);\n\t\treturn content;\n\t}", "CodeBleu_score": 53.52175861245794}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tlog.info(\"Response content: \" + content);\n\treturn content;\n}", "CodeBleu_score": 71.01991839394648}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = getHttpClient().execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(\"Response content: \" + content);\n\t\treturn content;\n\t}", "CodeBleu_score": 56.23395099999162}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t\tdbf.setCoalescing(true);\n\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\t\tDocument doc = db.parse(new InputSource(new StringReader(messageXmlStr)));\n\t\tNode rootNode = doc.getDocumentElement();\n\t\tObject[] rootNodeValue = decodeNodeToMap(rootNode, doTrim);\n\t\tif (rootNodeValue == null || rootNodeValue.length < 2){\n\t\t\treturn null;\n\t\t}\n\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\tresult.put(rootNode.getNodeName(), rootNodeValue[1]);\n\t\treturn result;\n\t}", "CodeBleu_score": 59.070202309967776}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    InputSource source = new InputSource(new StringReader(messageXmlStr));\n    Document doc = builder.parse(source);\n    NodeList children = doc.getChildNodes();\n    if (children == null || children.getLength() == 0) {\n        return null;\n    }\n    Node rootNode = children.item(0);\n    Object[] rootValue = decodeNodeToMap(rootNode, doTrim);\n    if (rootValue == null || rootValue.length < 2) {\n        return null;\n    }\n    String rootName = (String) rootValue[0];\n    Object rootObject = rootValue[1];\n    Map<String, Object> result = new HashMap<String, Object>();\n    result.put(rootName, rootObject);\n    return result;\n}", "CodeBleu_score": 58.96769220689184}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\t\tNode rootNode = document.getDocumentElement();\n\t\tObject[] rootNodeValue = decodeNodeToMap(rootNode, doTrim);\n\t\tif (rootNodeValue == null || rootNodeValue.length < 2){\n\t\t\treturn null;\n\t\t}\n\t\treturn new HashMap<String, Object>((Map<String, Object>) rootNodeValue[1]);\n\t}", "CodeBleu_score": 53.997144628853874}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\t\tif (!isEligibleForAutoProcessing(orderRecord))\n\t\t{\n\t\t\taddLog(orderRecord, \"Not eligible for auto-processing\");\n\t\t\tscheduleIfNotPostponed(orderRecord);\n\t\t\treturn;\n\t\t}\n\n\t\taddLog(orderRecord, \"Eligible for auto-processing\");\n\n\t\tfinal String trxName = getTrxName(orderRecord);\n\t\tfinal C_Order_ID cOrderId = getC_Order_ID(orderRecord);\n\n\t\twithLogger(orderRecord, () ->\n\t\t{\n\t\t\taddLog(orderRecord, \"Enqueuing async task for auto-ship and invoice\");\n\t\t\tasyncTaskQueue.enqueue(trxName, cOrderId);\n\t\t});\n\t}", "CodeBleu_score": 33.637359693654986}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\t\tfinal boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\t\tfinal String c_Order_ID = getC_Order_ID(orderRecord);\n\t\tfinal String trxName = getTrxName(orderRecord);\n\n\t\tif (eligibleForAutoProcessing)\n\t\t{\n\t\t\taddLog(c_Order_ID, trxName, \"Enqueuing auto-ship and invoice\");\n\t\t\tscheduleIfNotPostponed(orderRecord, c_Order_ID, trxName);\n\t\t}\n\t\telse\n\t\t{\n\t\t\taddLog(c_Order_ID, trxName, \"Not eligible for auto-ship and invoice\");\n\t\t\tscheduleMissingShipmentSchedules(orderRecord, c_Order_ID, trxName);\n\t\t}\n\t}", "CodeBleu_score": 35.33712782597961}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (eligibleForAutoProcessing)\n\t{\n\t\taddLog(orderRecord, \"enqueueGenerateSchedulesAfterCommit\", \"Enqueueing for auto-shipping and invoicing\");\n\t\tenqueue(orderRecord, getTrxName());\n\t}\n\telse\n\t{\n\t\taddLog(orderRecord, \"enqueueGenerateSchedulesAfterCommit\", \"Enqueueing for missing shipment schedules\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 24.93118701647243}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && Hash::check($request->password, $user->password)) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 48.9676500565493}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 51.34599837132956}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = $this->getUser($request);\n    if ($user && $this->guard->getProvider()->validateCredentials($user, $request->password)) {\n        return $user;\n    }\n    return null;\n}", "CodeBleu_score": 36.07657336290324}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.40221477122635}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.40221477122635}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n    if ($user) {\n        $request->session()->put('login.webauthn.user.id', $user->id);\n        $data = Webauthn::prepareAssertion($user);\n        $data['publicKey'] = $data['publicKey']['rawId'];\n    }\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 70.55251960115827}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $request->session()->put('auth.password_confirmed_at', time());\n\n        $data = Webauthn::prepareAssertion($user);\n\n        $data['publicKey'] = $data['publicKey']['id'];\n\n        return Inertia::render('Auth/TwoFactorChallenge', $data + [\n            'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n        ]);\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge');\n}", "CodeBleu_score": 67.79387193056856}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n    if ($user) {\n        $request->session()->put('login.2fa.user.id', $user->id);\n        $data = Webauthn::prepareAssertion($user);\n        $data['publicKey'] = $data['publicKey']['rawId'];\n        return Inertia::render('Auth/TwoFactorChallenge', $data + [\n            'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n        ]);\n    }\n    return Inertia::render('Auth/TwoFactorChallenge', [\n        'twoFactor' => false,\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 65.41309072291806}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere('driver', $driver)\n        ->where('driver_id', $socialite->getId());\n\n    if ($userToken) {\n        // Retrieve the associated user\n        $user = $userToken->user;\n\n        // Verify the user association\n        $this->checkUserAssociation($request, $user, $driver);\n\n        // Authenticate the user\n        Auth::login($user);\n\n        return $user;\n    }\n\n    // Create a new user or associate the socialite token with an existing user\n    $user = $this->getUserOrCreate($socialite);\n\n    // Create a new user token\n    $this->createUserToken($user, $driver, $socialite);\n\n    // Authenticate the user\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 57.359863563488354}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    if ($userToken = UserToken::firstWhere(['driver' => $driver, 'driver_id' => $socialite->getId()])) {\n        if ($user = $userToken->user) {\n            $this->checkUserAssociation($request, $user, $driver);\n        } else {\n            $user = $this->createUser($socialite);\n            $this->createUserToken($user, $driver, $socialite);\n        }\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 61.50271518024726}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    // If there is an existing user token, retrieve the associated user\n    if ($userToken) {\n        $user = $userToken->user;\n\n        // Verify the user association\n        $this->checkUserAssociation($request, $user, $driver);\n\n        // If the user is not logged in, log them in\n        if (!Auth::check()) {\n            Auth::login($user);\n        }\n\n        return $user;\n    }\n\n    // If there is no existing user token, create a new user or associate the socialite token with an existing user\n    $user = $this->getUserOrCreate($socialite);\n\n    // Create a new user token\n    $this->createUserToken($user, $driver, $socialite);\n\n    // If the user is not logged in, log them in\n    if (!Auth::check()) {\n        Auth::login($user);\n    }\n\n    return $user;\n}", "CodeBleu_score": 57.09322206133906}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! WebauthnFacade::validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 70.13227512733661}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (!WebauthnFacade::validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 68.82480643472809}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $filteredCredentials = $this->filterCredentials($request);\n    if (!WebauthnFacade::validateAssertion($user, $filteredCredentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 68.91932033684495}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (Exception $e) {\n        $this->error('User not found');\n    }\n\n    return null;\n}", "CodeBleu_score": 28.52249931125218}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->option('email'))->firstOrFail();\n    } catch (Exception $e) {\n        $this->error('User not found.');\n    }\n\n    return null;\n}", "CodeBleu_score": 29.63761116879041}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->option('email'))->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n    }\n\n    return null;\n}", "CodeBleu_score": 31.012353765506074}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if ($this->option('flush') && $this->scoutDriverIsConfigured()) {\n        $this->info('Flushing Meilisearch indexes...');\n        $this->getMeilisearchIndexSettings()->each(function ($index) {\n            $this->artisan('Flushing index for table: ' . $index->getTable(), 'scout:flush', [\n                'model' => $index->getModel(),\n            ]);\n        });\n        $this->info('All Meilisearch indexes flushed.');\n    }\n}", "CodeBleu_score": 29.149074757817278}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if ($this->option('flush') && $this->scoutDriverIsConfigured()) {\n        foreach ($this->meilisearchIndexSettings() as $index => $settings) {\n            $table = $this->getTableName($index);\n\n            if ($table) {\n                $this->artisan('Flushing index: ' . $index, 'scout:flush', [\n                    'model' => $table,\n                ]);\n            }\n        }\n\n        $this->info('Indexes flushed');\n    }\n}", "CodeBleu_score": 57.58006291222748}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (! config('scout.driver') || ! config('scout.flush')) {\n        return;\n    }\n\n    collect(config('scout.settings'))\n        ->each(function ($index) {\n            $table = (new $index)->getTable();\n            $this->artisan('Flushing Scout indexes for table: ' . $table, 'scout:flush', ['model' => $index]);\n        });\n\n    $this->info('Scout indexes flushed');\n}", "CodeBleu_score": 56.643503299065536}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read existing VCard from resource, set UID if missing\n    $vcard = $this->read($resource);\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->add('uid', $this->getSource($resource));\n    }\n\n    // Apply exporters to populate VCard\n    $this->exporters($resource::class)\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 22.783758544804517}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read the VCard from the resource, setting a UID if it is missing.\n    $vcard = $this->reader->read($resource);\n\n    // If the VCard doesn't exist, create a new one with basic information.\n    if (! $vcard) {\n        $vcard = new VCard();\n        $vcard->add('UID', $resource->id);\n        $vcard->add('FN', $resource->name);\n        $vcard->add('N', $resource->name);\n        $vcard->add('ORG', $resource->vault->name);\n        $vcard->add('URL', $this->getSource($resource));\n    }\n\n    // Apply exporters to add more details to the VCard from the resource.\n    foreach ($this->exporters($resource::class) as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    // Return the populated VCard.\n    return $vcard;\n}", "CodeBleu_score": 35.91944783583239}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read the VCard from the resource, or create a new one if it doesn't exist.\n    $vcard = Reader::read($resource->getVCard(), $resource->getVCard());\n\n    // Set the UID if it's missing.\n    if ($vcard->getUID() === null) {\n        $vcard->setUID($this->getSource($resource));\n    }\n\n    // Apply exporters to the VCard.\n    $this->exporters($resource::class)->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 21.912093582744028}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj === false) {\n        return false;\n    }\n\n    if ($obj->objectType == 'contact') {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj->objectType == 'group') {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 78.35914279221988}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj === false) {\n        return false;\n    }\n\n    if ($obj->object_type == 'contact') {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj->object_type == 'group') {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    }\n\n    return true;\n}", "CodeBleu_score": 78.41498641491509}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t", "CodeBleu_score": 6.117021276595745}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create(array_merge($data, [\n        'user_id' => auth()->guard()->user()->id,\n    ]));\n\n    return request()->file('file')->store(\n        'lead_activity_files',\n        'public'\n    );\n}", "CodeBleu_score": 26.648618959959343}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create($data, auth()->guard()->user());\n\n    $file = request()->file('file');\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->store('lead_activities');\n\n    return $this->fileRepository->create([\n        'name' => $fileName,\n        'path' => $filePath,\n        'fileable_type' => LeadActivity::class,\n        'fileable_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 52.836206959122315}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create(array_merge($data, [\n        'user_id' => auth()->guard()->user()->id,\n        'type' => LeadActivity::UPLOAD_FILE,\n    ]));\n\n    $file = request()->file('file');\n    $path = request()->file('file')->store('public/files');\n\n    return $this->fileRepository->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => $path,\n        'lead_activity_id' => $this->activityRepository->getModel()->id,\n    ]);\n}", "CodeBleu_score": 45.141245180113}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->request->routeIs('admin.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            $this->response = response()->view('admin::errors.404', [], 404);\n        } elseif ($exception instanceof PDOException) {\n            $this->response = response()->view('admin::errors.500', [], 500);\n        } elseif ($exception instanceof ParseError) {\n            $this->response = response()->view('admin::errors.500', [], 500);\n        } elseif ($exception instanceof NotFoundHttpException) {\n            $this->response = response()->view('admin::errors.404', [], 404);\n        } elseif ($exception instanceof HttpException) {\n            $this->response = response()->view('admin::errors.404', [], $exception->getStatusCode());\n        }\n    } else {\n        if ($exception instanceof ModelNotFoundException) {\n            $this->response = response()->view('shop::errors.404', [], 404);\n        } elseif ($exception instanceof PDOException) {\n            $this->response = response()->view('shop::errors.500', [], 500);\n        } elseif ($exception instanceof ParseError) {\n            $this->response = response()->view('shop::errors.500', [], 500);\n        } elseif ($exception instanceof NotFoundHttpException) {\n            $this->response = response()->view('shop::errors.404', [], 404);\n        } elseif ($exception instanceof HttpException) {\n            $this->response = response()->view('shop::errors.404', [], $exception->getStatusCode());\n        }\n    }\n\n    return $this->response;\n}", "CodeBleu_score": 42.05213945986389}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        if (request()->routeIs('admin.*')) {\n            return redirect()->route('admin.session.create');\n        }\n\n        return response()->view('front::errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('admin::errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('admin::errors.500', [], 500);\n    }\n\n    return $this->response(\n        request()->routeIs('admin.*') ? 'admin' : 'front',\n        $exception->getStatusCode() ?? 500\n    );\n}", "CodeBleu_score": 40.27543715217567}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if (request()->routeIs('admin.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('admin::errors.404', [], 404);\n        }\n\n        if ($exception instanceof PDOException || $exception instanceof ParseError) {\n            return response()->view('admin::errors.500', [], 500);\n        }\n    } elseif (request()->routeIs('api.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->json([\n                'message' => trans('admin::app.common.no-data-found')\n            ], 404);\n        }\n\n        if ($exception instanceof PDOException || $exception instanceof ParseError) {\n            return response()->json([\n                'message' => trans('admin::app.common.something-went-wrong')\n            ], 500);\n        }\n    } else {\n        if ($exception instanceof ModelNotFoundException) {\n            return redirect()->route('admin.session.create');\n        }\n\n        if ($exception instanceof PDOException || $exception instanceof ParseError) {\n            return response()->view('admin::errors.500', [], 500);\n        }\n    }\n}", "CodeBleu_score": 35.800747724644815}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $ids = request()->get('ids');\n    $isDone = request()->get('isDone');\n    $count = 0;\n\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n\n        if (!$activity) {\n            return response()->json([\n                'success' => false,\n                'message' => 'Activity not found'\n            ], 404);\n        }\n\n        $activity->is_done = $isDone;\n        $activity->save();\n\n        event(new ActivityUpdatedEvent($activity));\n\n        $count++;\n    }\n\n    return response()->json([\n        'success' => true,\n        'message' => \"$count activities updated\"\n    ]);\n}", "CodeBleu_score": 45.65408637461699}, {"code": "<?\npublic function massUpdate(){\n\t    $ids = request()->ids;\n    $is_done = request()->is_done;\n\n    $count = 0;\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n        $activity->is_done = $is_done;\n\n        event(new ActivityUpdatedEvent($activity));\n\n        $count += $this->activityRepository->update($activity);\n    }\n\n    return response()->json([\n        'success' => ($count > 0),\n        'count' => $count\n    ]);\n}", "CodeBleu_score": 34.1781747092461}, {"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request('ids');\n    $isDone = request('is_done');\n    $count = 0;\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n        if ($activity->is_done != $isDone) {\n            event(new ActivityEvent($activity, 'updated'));\n            $activity->is_done = $isDone;\n            $activity->save();\n            $count++;\n        }\n    }\n    if ($count > 0) {\n        return response()->json(['success' => true, 'message' => 'Activities updated successfully']);\n    } else {\n        return response()->json(['success' => false, 'message' => 'No activities updated']);\n    }\n}", "CodeBleu_score": 43.66458956059569}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    // Get the activity IDs from the request\n    $ids = request()->input('ids', []);\n    // Iterate over the activity IDs\n    foreach ($ids as $id) {\n        // Dispatch a beforeDelete event for the activity\n        event(new ActivityDestroying($id));\n        // Delete the activity\n        $this->activityRepository->delete($id);\n        // Dispatch an afterDelete event for the activity\n        event(new ActivityDestroyed($id));\n    }\n    // Return a JSON response indicating a successful destruction\n    return response()->json([\n        'success' => true,\n    ]);\n}", "CodeBleu_score": 26.41737306444475}, {"code": "<?\n public function massDestroy(){\n\t    // Get the activity IDs from the request data\n    $ids = request()->ids;\n\n    // Iterate over the activity IDs\n    foreach ($ids as $id) {\n        // Dispatch the \"deleting\" event before deleting the activity\n        event(new ActivityDeleting($id));\n\n        // Delete the activity\n        $this->activityRepository->delete($id);\n\n        // Dispatch the \"deleted\" event after deleting the activity\n        event(new ActivityDeleted($id));\n    }\n\n    // Return a JSON response indicating a successful destruction\n    return response()->json([\n        'success' => true,\n        'message' => 'Activities deleted successfully',\n    ]);\n}", "CodeBleu_score": 25.967928584385874}, {"code": "<?\n public function massDestroy(){\n\t    // Retrieve the activity IDs from the request\n    $ids = request()->ids;\n    // Iterate over the IDs and dispatch events before and after deleting each activity\n    foreach ($ids as $id) {\n        event(new ActivityDeleting($id));\n        $this->activityRepository->delete($id);\n        event(new ActivityDeleted($id));\n    }\n    // Return a JSON response indicating a successful destruction\n    return response()->json([\n        'success' => true,\n        'message' => 'Activities deleted successfully.',\n    ]);\n}", "CodeBleu_score": 26.004387884539103}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    foreach (request()->all() as $card) {\n        foreach ($cards as $key => $value) {\n            if ($value->id == $card['id']) {\n                $cards[$key]->selected = $card['selected'];\n            }\n        }\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 43.53459526170157}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $request = request()->all();\n    foreach ($request as $key => $value) {\n        foreach ($cards as $card) {\n            if ($card->id == $key) {\n                $card->selected = $value;\n            }\n        }\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 41.834343825024284}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    foreach (request()->all() as $card) {\n        foreach ($cards as $key => $value) {\n            if ($value['name'] == $card['name']) {\n                $cards[$key]['selected'] = $card['selected'];\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 45.05258391606815}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    $this->dispatch(new BeforeConfigurationStore());\n\n    $this->configurationRepository->create(request()->all());\n\n    $this->dispatch(new AfterConfigurationStore());\n\n    session()->flash('success', trans('configuration.messages.created'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 42.7561067201789}, {"code": "<?\npublic function store(){\n\t    $this->dispatch(new BeforeConfigurationCreated());\n    $this->configurationRepository->create(request()->all());\n    $this->dispatch(new AfterConfigurationCreated());\n    session()->flash('success', trans('configuration::configuration.created'));\n    return redirect()->back();\n}", "CodeBleu_score": 42.49033407089857}, {"code": "<?\npublic function store(){\n\t    $this->dispatch(new CreatingConfiguration());\n    $this->configurationRepository->create(request()->all());\n    $this->dispatch(new CreatedConfiguration());\n\n    session()->flash('success', trans('admin/configuration/message.create.success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 42.65244404129185}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setSort(0);\n        adminModelSort.setType(\"header\");\n        adminModelSort.setIsHidden(false);\n        adminModelSort.setUserId(getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    remove(getUserId(), \"header\");\n    saveBatch(adminModelSorts);\n    return ok();\n}", "CodeBleu_score": 42.64304373380959}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setSort(1);\n        adminModelSort.setType(AdminModelSort.TYPE_HEADER);\n        adminModelSort.setUserId(getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    remove(getUserId(), AdminModelSort.TYPE_HEADER);\n    saveBatch(adminModelSorts);\n    return ok();\n}", "CodeBleu_score": 43.30056808304074}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(model);\n        sort.setSort(0);\n        sort.setType(\"header\");\n        sort.setUserId(getUserId());\n        sort.setIsHidden(false);\n        sortList.add(sort);\n    }\n    remove(getUserId(), \"header\");\n    saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 35.900163869999524}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if (userConfig == null) {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toJSONString());\n        userConfig.setUserId(getUserId());\n        userConfig.setStatus(0);\n        userConfigService.save(userConfig);\n    } else {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n    }\n    return Result.ok();\n}", "CodeBleu_score": 70.93761629785624}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if (userConfig == null) {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toJSONString());\n        userConfig.setStatus(1);\n        userConfigService.save(userConfig);\n    } else {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n    }\n    return Result.ok();\n}", "CodeBleu_score": 67.89089745689856}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n        if (userConfig != null) {\n            userConfig.setValue(json.toJSONString());\n            userConfigService.updateById(userConfig);\n        } else {\n            userConfig = new UserConfig();\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toJSONString());\n            userConfig.setStatus(0);\n            userConfigService.save(userConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 74.19333832560882}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserMapper.selectByPrimaryKey(userId);\n    if (adminUser == null) {\n        return Result.failure(ErrorCode.USER_NOT_EXIST);\n    }\n    String deptName = adminUserMapper.getDeptName(adminUser.getDeptId());\n    adminUser.setDeptName(deptName);\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n    return Result.success(adminUser);\n}", "CodeBleu_score": 47.57947025538043}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserMapper.selectByPrimaryKey(userId);\n    if (adminUser == null) {\n        return Result.error(ResultCode.USER_NOT_EXIST);\n    }\n    String deptName = adminUserService.getDeptName(adminUser.getDeptId());\n    adminUser.setDeptName(deptName);\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n    return Result.success(adminUser);\n}", "CodeBleu_score": 48.937637474927136}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    // Retrieve user details\n    AdminUser adminUser = adminUserMapper.selectById(userId);\n    if (adminUser == null) {\n        return Result.error(\"User not found\");\n    }\n\n    // Retrieve department name\n    String deptName = adminDeptMapper.getDeptName(adminUser.getDeptId());\n    if (deptName == null) {\n        return Result.error(\"Department not found\");\n    }\n\n    // Set department name in user object\n    adminUser.setDeptName(deptName);\n\n    // Nullify salt and password fields\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n\n    return Result.ok(adminUser);\n}", "CodeBleu_score": 48.16694048594079}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    Long userId = getUserId();\n    List<ReadNotice> readNotices = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok();\n}", "CodeBleu_score": 31.15705049791674}, {"code": " public Result readNotice() {\n\t    Long userId = User.getCurrentUser().getId();\n    List<ReadNotice> readNotices = ReadNotice.find(\"userId\", userId).fetch();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok();\n}", "CodeBleu_score": 30.920287036733395}, {"code": " public Result readNotice() {\n\t    Long userId = getUserId();\n    List<ReadNotice> readNoticeList = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNoticeList.size() > 0) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok(\"success\");\n}", "CodeBleu_score": 31.39213641947174}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    LambdaQueryWrapper<AdminConfig> wrapper = new LambdaQueryWrapper<>();\n    wrapper.eq(AdminConfig::getName, \"companyInfo\");\n    AdminConfig adminConfig = adminConfigMapper.selectOne(wrapper);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setDescription(\"\u516c\u53f8\u4fe1\u606f\");\n        adminConfig.setStatus(1);\n        adminConfig.setValue(\"{\\\"name\\\":\\\"\\\",\\\"address\\\":\\\"\\\",\\\"phone\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"logo\\\":\\\"\\\"}\");\n        adminConfigMapper.insert(adminConfig);\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigMapper.updateById(adminConfig);\n}", "CodeBleu_score": 51.69233356338132}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    LambdaQueryWrapper<AdminConfig> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(AdminConfig::getName, \"companyInfo\");\n    AdminConfig adminConfig = adminConfigService.getOne(queryWrapper);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setDescription(\"Company information\");\n        adminConfig.setStatus(1);\n        adminConfig.setValue(\"{}\");\n        adminConfigService.saveOrUpdate(adminConfig);\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigService.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 53.67081993075216}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    LambdaQueryWrapper<AdminConfig> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(AdminConfig::getName, \"companyInfo\");\n    AdminConfig adminConfig = adminConfigMapper.selectOne(queryWrapper);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"Company information configuration\");\n        adminConfig.setValue(\"{\\\"companyName\\\":\\\"\\\",\\\"companyAddress\\\":\\\"\\\",\\\"companyPhone\\\":\\\"\\\",\\\"companyEmail\\\":\\\"\\\",\\\"companyLogo\\\":\\\"\\\"}\");\n        adminConfigMapper.insert(adminConfig);\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigMapper.updateById(adminConfig);\n}", "CodeBleu_score": 50.53572594854818}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    // Retrieve the admin configuration for the company using the specific key\n    String config = last(\"admin_config\", \"company_id\", getValue(\"company_id\"));\n\n    // If the configuration is found, parse the value into an AdminCompanyBO object\n    if (config != null) {\n        return parseObject(config, AdminCompanyBO.class);\n    }\n\n    // If no configuration is found, return a new instance of AdminCompanyBO\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 25.561875895204196}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String key = \"admin_company\";\n    String value = this.getValue(key);\n    if (StringUtils.isNotBlank(value)) {\n        adminCompanyBO = JSON.parseObject(value, AdminCompanyBO.class);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 43.55744839818417}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    // Create a new instance of AdminCompanyBO\n    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    // Get the value of the admin configuration for the current company\n    String value = getValue();\n    // If the value is not null or empty\n    if (StringUtils.isNotEmpty(value)) {\n        // Parse the value into an AdminCompanyBO object\n        adminCompanyBO = parseObject(value);\n    }\n    // Return the AdminCompanyBO object\n    return adminCompanyBO;\n}", "CodeBleu_score": 29.379450482282337}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = AdminConfig.createInstance(\"com.ibm.ws.log.LogConfiguration\", \"LogWelcomeSpeech\", AdminConfig.getDefaultCell(), AdminConfig.getDefaultCell());\n        adminConfig.setName(string);\n        adminConfig.setStatus(\"Enabled\");\n        adminConfig.add(\"logFile\", AdminConfig.getDefaultCell());\n        adminConfig.setValue(\"logFile\", \"SystemOut\");\n        adminConfig.setStatus(\"Enabled\");\n        adminConfigList.add(adminConfig);\n    }\n    AdminConfig.remove(\"LogConfiguration\", AdminConfig.getDefaultCell(), AdminConfig.getDefaultCell(), \"LogWelcomeSpeech\");\n    AdminConfig.saveBatch(adminConfigList);\n}", "CodeBleu_score": 29.534522391397967}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t", "CodeBleu_score": 4.070653414637172}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t", "CodeBleu_score": 4.070653414637172}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID\n    String userId = getUserId();\n\n    // Retrieve the user details\n    AdminUserDO adminUserDO = getById(userId);\n\n    // Retrieve the username\n    String username = getUsername();\n\n    // Retrieve the stored password\n    String storedPassword = adminUserDO.getPassword();\n\n    // Retrieve the salt\n    String salt = adminUserDO.getSalt();\n\n    // Generate the expected password\n    String expectedPassword = valueOf(username + adminInitDataBO.getPassword() + salt);\n\n    // Compare the expected password with the stored password\n    if (storedPassword.equals(expectedPassword)) {\n        // Generate a temporary access code\n        String accessCode = generateAccessCode();\n\n        // Store the access code in Redis with a 10-minute expiration\n        setex(accessCode, 600, \"1\");\n\n        return accessCode;\n    } else {\n        // Throw an exception indicating an invalid password\n        throw new RuntimeException(\"Invalid password\");\n    }\n}", "CodeBleu_score": 34.32119766992875}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId();\n    AdminUserBO adminUserBO = adminUserService.getById(userId);\n    String username = adminUserBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = adminUserBO.getSalt();\n    String storedPassword = adminUserBO.getPassword();\n    String currentPassword = PasswordUtil.encryptPassword(password, salt);\n    if (!storedPassword.equals(currentPassword)) {\n        throw new BusinessException(ErrorCode.INVALID_PASSWORD);\n    }\n    String code = UUID.randomUUID().toString();\n    String redisKey = RedisKey.ADMIN_USER_TEMP_CODE + username;\n    redisService.setex(redisKey, code, 10 * 60);\n    return code;\n}", "CodeBleu_score": 44.265894392232504}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID\n    Long userId = getUserId();\n\n    // Retrieve the user details\n    User user = userMapper.selectById(userId);\n    if (user == null) {\n        throw new RuntimeException(\"User not found\");\n    }\n\n    // Retrieve the username\n    String username = user.getUsername();\n\n    // Retrieve the stored password and salt\n    String storedPassword = user.getPassword();\n    String salt = user.getSalt();\n\n    // Check the provided password against the stored password\n    String providedPassword = adminInitDataBO.getPassword();\n    String hashedPassword = hashPassword(providedPassword, salt);\n    if (!hashedPassword.equals(storedPassword)) {\n        throw new RuntimeException(\"Invalid password\");\n    }\n\n    // Generate a temporary access code\n    String accessCode = generateAccessCode();\n\n    // Store the access code in Redis with a 10-minute expiration\n    String redisKey = \"access_code:\" + userId;\n    redisTemplate.opsForValue().set(redisKey, accessCode, 10, TimeUnit.MINUTES);\n\n    return accessCode;\n}", "CodeBleu_score": 38.296581229401205}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = userId + \":initAuth\";\n    String initAuthUrl = getInitAuthUrl();\n    if (redis.contains(key, initAuthUrl)) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 20.31232767160051}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"user:\" + userId + \":initAuth\";\n    if (redis.contains(key)) {\n        List<String> initAuthList = redis.get(key);\n        if (initAuthList.contains(getRedis())) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 31.862112712577233}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    if (userId == null) {\n        return true;\n    }\n    String key = \"unauth:\" + userId;\n    if (getRedis().contains(key)) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 22.51648604073403}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    menuIdList.forEach(menuId -> {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    });\n    saveBatch(list);\n}", "CodeBleu_score": 64.98247251377968}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        list.add(roleMenu);\n    }\n    adminRoleMenuService.saveBatch(list);\n}", "CodeBleu_score": 56.536347748312664}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> map = beanToMap(sysLog);\n    map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 48.57914389587913}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.00793022948004}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 54.293087991307424}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //\u6392\u5e8f\n        searchSourceBuilder.sort(new FieldSortBuilder(\"createTime\").order(SortOrder.DESC));\n        //\u6392\u9664\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(new String[]{}, new String[]{\"id\", \"createTime\", \"loginTime\", \"model\", \"subModelLabel\", \"userId\", \"userName\", \"ip\", \"location\", \"browser\", \"os\", \"remark\"});\n        //\u67e5\u8be2\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            List<SysLog> sysLogs = new ArrayList<>();\n            for (SearchHit searchHit : searchResponse.getHits().getHits()) {\n                sysLogs.add(objectMapper.readValue(searchHit.getSourceAsString(), SysLog.class));\n            }\n            return new BasePage<>(searchResponse.getHits().getTotalHits().value, querySysLogBO.getPage(), querySysLogBO.getLimit(), sysLogs);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 52.237188386300424}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //sort\n        searchSourceBuilder.sort(SortOrder.DESC, querySysLogBO.getType() == null ? \"loginTime\" : \"createTime\");\n        //exclude\n        searchSourceBuilder.fetchSource(false);\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            List<SysLog> sysLogs = getList(searchResponse);\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setCurrent(querySysLogBO.getPage());\n            basePage.setTotal(getTotalHits(searchResponse));\n            basePage.setRecords(sysLogs);\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 52.907481341011554}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        // \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        // \u6392\u5e8f\n        searchSourceBuilder.sort(SortOrder.DESC, \"createTime\");\n        // \u6392\u9664\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(false);\n        // \u6267\u884c\u67e5\u8be2\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            // \u83b7\u53d6\u603b\u6761\u6570\n            long total = searchResponse.getHits().getTotalHits().value;\n            // \u83b7\u53d6\u5f53\u524d\u9875\u6570\u636e\n            List<SysLog> sysLogList = getList(searchResponse);\n            // \u5c01\u88c5\u8fd4\u56de\u5bf9\u8c61\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setTotal(total);\n            basePage.setCurrent(querySysLogBO.getPage());\n            basePage.setRecords(sysLogList);\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 55.16698411168868}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 91.42567922804416}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 86.43163958912206}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        // Delete the file if it exists and reject the promise with the error.\n        fs.unlink(dest, () => reject(err));\n      });\n  });\n}", "CodeBleu_score": 81.74034717427274}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return module.getDependentModules().stream()\n            .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n            .map(moduleId -> {\n                circularDependencyCheckSet.add(moduleId);\n                return applicationRepository.findById(moduleId);\n            })\n            .flatMap(Flux::from)\n            .doOnNext(dependentModule -> circularDependencyCheckSet.remove(dependentModule.getId()))\n            .onErrorContinue((throwable, o) -> log.warn(getMessage(\"error.getting.dependent.module\", o), throwable));\n}", "CodeBleu_score": 55.6349431343079}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t  return Flux.fromIterable(module.getDependencies())\n    .flatMapMany(dependency -> {\n      if (circularDependencyCheckSet.contains(dependency.getId())) {\n        log.warn(\"Circular dependency detected for module with ID {}\", dependency.getId());\n        return Flux.empty();\n      }\n      circularDependencyCheckSet.add(dependency.getId());\n      return getLiveModules().filter(m -> m.getId().equals(dependency.getId()))\n        .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet)\n          .collectList()\n          .map(dependentModules -> {\n            module.setDependencies(dependentModules);\n            return module;\n          })\n        );\n    })\n    .onErrorContinue((throwable, o) -> log.warn(\"Error while retrieving dependent modules for module with ID {}\", module.getId()));\n}", "CodeBleu_score": 49.88691472970135}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return Flux.fromIterable(module.getDependentModules())\n            .flatMap(dependentModuleId -> {\n                if (circularDependencyCheckSet.contains(dependentModuleId)) {\n                    log.warn(\"Circular dependency detected for module {}\", module.getId());\n                    return Flux.empty();\n                }\n                circularDependencyCheckSet.add(dependentModuleId);\n                return applicationRepository.findById(dependentModuleId)\n                        .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet))\n                        .onErrorContinue((throwable, o) -> log.warn(\"Error retrieving dependent module {}\", dependentModuleId));\n            });\n}", "CodeBleu_score": 49.00729438684282}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = read(dataBuffer);\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        }\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        release(dataBuffer);\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 38.876031581050604}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = createThumbnail ? resizeImage(dataBuffer) : read(dataBuffer);\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        release(dataBuffer);\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 34.484891305890145}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = resizeImage(dataBuffer);\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        DataBufferUtils.release(dataBuffer);\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 34.792063297576604}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return repository.findById(assetId)\n            .doOnNext(asset -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n            .flatMap(asset -> {\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(exchange.getResponse().bufferFactory().wrap(asset.getData()));\n            });\n}", "CodeBleu_score": 41.03254718612542}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return repository.findById(assetId)\n        .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n            }\n            return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n        });\n}", "CodeBleu_score": 40.197852783109326}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n        .map(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            return asset.getData();\n        })\n        .flatMap(data -> exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(data))));\n}", "CodeBleu_score": 41.07455122206908}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t", "CodeBleu_score": 2.6983305016023995}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getOrganizationInEnterpriseMode().flatMapIterable(organization -> organization.getAuthConfigs()).map(authConfig -> {\n        FindAuthConfig findAuthConfig = new FindAuthConfig();\n        findAuthConfig.setId(authConfig.getId());\n        findAuthConfig.setName(authConfig.getName());\n        findAuthConfig.setType(authConfig.getType());\n        findAuthConfig.setWorkspaceId(authConfig.getWorkspaceId());\n        findAuthConfig.setOrganizationId(authConfig.getOrganizationId());\n        findAuthConfig.setCreatedAt(authConfig.getCreatedAt());\n        findAuthConfig.setUpdatedAt(authConfig.getUpdatedAt());\n        return findAuthConfig;\n    }).collect(Collectors.toList()).flatMapMany(Flux::fromIterable);\n}", "CodeBleu_score": 23.187183002953905}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getMode().flatMapIterable(mode -> {\n        if (mode == Mode.SAAS) {\n            return Flux.empty();\n        }\n        return getWorkspace().flatMapIterable(workspace -> {\n            if (workspace.getEnterpriseMode() == null) {\n                return Flux.empty();\n            }\n            return getOrganizationInEnterpriseMode(workspace.getEnterpriseMode().getId()).flatMapIterable(org -> {\n                if (org.getAuthConfigs() == null) {\n                    return Flux.empty();\n                }\n                return org.getAuthConfigs().stream().map(authConfig -> new FindAuthConfig(authConfig, workspace.getId())).collect(Collectors.toList());\n            });\n        });\n    });\n}", "CodeBleu_score": 34.49470655459424}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.github.cloudyrock.mongock.example.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 25.75940038419645}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.example.migrations\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 24.940855665079237}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(new SpringDataMongoV4Driver(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.example.migrations\")\n            .setSpringContext(springContext)\n            .setWriteConcern(WriteConcern.MAJORITY)\n            .setReadConcern(ReadConcern.MAJORITY)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 33.69051806614796}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 77.62047882971166}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 77.62047882971166}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(libraryQueryRecord -> libraryQueryRecord.getDsl())\n            .switchIfEmpty(libraryQueryRepository.getById(libraryQueryId)\n                    .map(libraryQuery -> libraryQuery.getDsl()));\n}", "CodeBleu_score": 54.280879221362866}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQuery::getDsl)\n                .switchIfEmpty(getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl));\n    }", "CodeBleu_score": 60.13383052541242}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQueryRecord::getDsl)\n                .switchIfEmpty(getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl));\n    }", "CodeBleu_score": 60.931628291631576}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        long timeout = parseTimeout(timeoutStr);\n        return Mono.defer(() -> {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            }\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }).timeout(Duration.ofMillis(timeout),\n                Mono.error(new PluginException(timeout, getMessage(\"query.timeout\"))))\n                .onErrorMap(this::onErrorMap)\n                .onErrorResume(PluginException.class, e -> {\n                    log.error(\"Failed to execute query, datasource type: {}, queryConfig: {}, requestParams: {}, error: {}\",\n                            datasource.getType(), queryConfig, requestParams, e.getMessage());\n                    return Mono.just(new QueryExecutionResult(e.getCode(), e.getMessage()));\n                });\n    }", "CodeBleu_score": 53.556327470239154}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        long timeout = parseTimeout(timeoutStr);\n        var timeoutDuration = Duration.ofMillis(timeout);\n        var deferred = Mono.defer(() -> {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            }\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        });\n\n        return deferred.timeout(timeoutDuration, timeoutException -> {\n            if (timeoutException instanceof TimeoutException) {\n                return Mono.error(new PluginException(getMessage(\"datasource.query.timeout\", timeout), timeoutException));\n            }\n            return Mono.error(new QueryExecutionException(getMessage(\"datasource.query.error\"), timeoutException));\n        }).onErrorMap(this::onErrorMap);\n    }", "CodeBleu_score": 52.056902443309205}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeoutDuration = Duration.ofMillis(parseQueryTimeoutMs(timeoutStr));\n        var deferMono = timeoutDuration.isZero() ? Mono.empty() : Mono.delay(timeoutDuration);\n\n        return deferMono.then(executeLocally(datasource, queryConfig, requestParams, queryVisitorContext))\n                .timeout(timeoutDuration, ofException(timeoutDuration))\n                .onErrorMap(this::onErrorMap)\n                .doOnError(error -> log.error(\"Failed to execute query on datasource {}\", datasource.getId(), error));\n    }", "CodeBleu_score": 30.821234090186405}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.defer(() -> {\n            QueryExecutor queryExecutor = getQueryExecutor(datasource);\n            QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n            return Mono.using(getOrCreateConnection(datasource), connection -> {\n                try {\n                    return queryExecutor.executeQuery(queryExecutionContext, connection);\n                } catch (Exception e) {\n                    return Mono.error(e);\n                }\n            }, Connection::close);\n        });\n    }", "CodeBleu_score": 38.46912594001993}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        // Get the query executor based on the datasource type\n        QueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n\n        // Build the query execution context\n        QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\n        // Acquire a connection from the datasource connection pool\n        Mono<Connection> connectionMono = datasource.getOrCreateConnection();\n\n        // Execute the query using the connection and handle any errors that occur\n        return connectionMono.flatMap(connection -> {\n            try {\n                return queryExecutor.doExecuteQuery(connection, queryExecutionContext);\n            } catch (Exception e) {\n                return Mono.error(e);\n            }\n        });\n    }", "CodeBleu_score": 46.58043681810419}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return Mono.defer(() -> {\n        // Get the appropriate query executor based on the datasource type\n        QueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n\n        // Build the query execution context\n        QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\n        // Acquire a connection from the datasource connection pool\n        Connection connection = datasource.getOrCreateConnection();\n\n        // Execute the query using the connection and handle any errors that occur\n        return queryExecutor.doExecuteQuery(connection, queryExecutionContext)\n                .doOnError(e -> {\n                    // Handle the error\n                    log.error(\"Error executing query: {}\", e.getMessage(), e);\n                    throw new QueryExecutionException(e.getMessage(), e);\n                });\n    });\n}", "CodeBleu_score": 49.24337218986266}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return 10000;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        if (unitInfo.getLeft().equals(\"ms\")) {\n            return Integer.parseInt(timeoutStr.substring(0, unitInfo.getRight()));\n        }\n        double value = Double.parseDouble(timeoutStr.substring(0, unitInfo.getRight()));\n        int timeout = convertToMs(value, unitInfo.getLeft());\n        if (timeout > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n        }\n        return timeout;\n    }", "CodeBleu_score": 39.32099388705113}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n        String valueStr = timeoutStr.substring(0, unitIndex);\n        double value = Double.parseDouble(valueStr);\n        if (value < 0) {\n            throw new IllegalArgumentException(\"Timeout value cannot be negative: \" + timeoutStr);\n        }\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed: \" + timeoutStr);\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 62.1613371671459}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        String numericStr = timeoutStr.substring(0, unitIndex);\n        double numericValue;\n        try {\n            numericValue = Double.parseDouble(numericStr);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        int timeoutMs = convertToMs(numericValue, unit);\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed value: \" + timeoutStr);\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 59.89753464901986}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return liveQueryService.getLiveQueries(application.getId())\n                .flatMapMany(liveQueries -> {\n                    if (liveQueries.isEmpty()) {\n                        return Mono.error(new IllegalArgumentException(\"No live queries found\"));\n                    }\n                    return Flux.fromIterable(liveQueries)\n                            .flatMap(liveQuery -> {\n                                // extract datasource ids from live queries\n                                return Flux.fromIterable(liveQuery.getDatasourceIds())\n                                        .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId));\n                            })\n                            .collectList();\n                });\n    }", "CodeBleu_score": 33.61475506296392}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return liveQueryService.getLiveQueries(application.getAppId())\n                .map(liveQueries -> liveQueries.stream().map(liveQuery -> liveQuery.getDatasourceId())\n                        .collect(Collectors.toSet()))\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new IllegalArgumentException(\"No datasource found for application: \" + application.getAppId()));\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                            .collectList()\n                            .map(copiedDatasourceIds -> datasourceIds.stream()\n                                    .map(originalDatasourceId -> Pair.of(originalDatasourceId, copiedDatasourceIds.get(datasourceIds.indexOf(originalDatasourceId))))\n                                    .collect(Collectors.toList()));\n                });\n    }", "CodeBleu_score": 35.89366749763596}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return Mono.just(application.getLiveQueries())\n                .flatMap(this::getDatasourceIdsFromQueries)\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new NoDatasourceFoundException());\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                            .collectList()\n                            .map(copiedDatasourceIds -> datasourceIds.stream()\n                                    .map(datasourceId -> new Pair<>(datasourceId, copiedDatasourceIds.get(datasourceIds.indexOf(datasourceId))))\n                                    .collect(Collectors.toList()));\n                });\n    }", "CodeBleu_score": 36.18618758306113}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 57.591479118313416}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                }\n\n                if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                    return Mono.just(getId(datasource));\n                }\n\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 64.42487970343993}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .filter(datasource -> !datasource.isSystemStatic())\n            .flatMap(datasource -> {\n                if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            })\n            .switchIfEmpty(Mono.error(new DatasourceNotFoundException(datasourceId)));\n}", "CodeBleu_score": 68.97411274345646}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return upload(filePart)\n                .flatMap(this::getAvatar)\n                .flatMap(avatar -> avatar.map(this::remove).orElse(Mono.just(true)))\n                .flatMap(this::updateUserAvatar)\n                .then(Mono.just(true));\n    }", "CodeBleu_score": 15.749991415979677}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return mongoUpsertHelper.uploadFile(filePart)\n                .flatMap(asset ->\n                        user.getAvatar().isEmpty() ?\n                                Mono.just(true) :\n                                remove(user.getAvatar())\n                                        .flatMap(removed ->\n                                                removed ?\n                                                        updateUserAvatar(asset, user.getId()) :\n                                                        Mono.just(false))\n                );\n    }", "CodeBleu_score": 27.911562369855307}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return filePart.content()\n                .flatMap(content -> upload(content, user.getAvatar()))\n                .flatMap(asset -> remove(user.getAvatar()))\n                .flatMap(removed -> updateUserAvatar(asset, user.getId()));\n    }", "CodeBleu_score": 18.15643146665253}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(new User())\n            .doOnNext(user -> {\n                user.setName(authUser.getUsername());\n                user.setState(UserState.ACTIVE);\n                user.setIsEnabled(true);\n                user.setIsNewUser(true);\n                user.setTpAvatarLink(authUser.getAvatar());\n            })\n            .flatMap(user -> {\n                if (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n                    user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n                }\n                return Mono.just(user);\n            })\n            .flatMap(user -> {\n                user.setConnections(authUser.getConnections());\n                return Mono.just(user);\n            })\n            .flatMap(repository::save);\n}", "CodeBleu_score": 41.75631469038415}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setTpAvatarLink(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSource.EMAIL)) {\n        if (authUser.getAuthContext().containsKey(AuthContextKey.PASSWORD)) {\n            user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContextKey.PASSWORD)));\n        }\n    }\n    user.setConnections(authUser.getConnections());\n    user.setIsNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 46.1608694636814}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setTpAvatarLink(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\").toString()));\n    }\n    user.setConnections(new HashSet<>(authUser.getConnections().stream().map(this::toAuthConnection).collect(Collectors.toList())));\n    user.setIsNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 42.32436889786149}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(email)\n            .map(e -> Connection.builder()\n                    .rawId(e)\n                    .providerId(\"email\")\n                    .providerUserId(e)\n                    .displayName(user.getUsername())\n                    .imageUrl(user.getPicture())\n                    .profileUrl(null)\n                    .accessToken(user.getPassword())\n                    .secret(null)\n                    .refreshToken(null)\n                    .expireTime(null)\n                    .build())\n            .flatMap(connection -> user.getConnections().add(connection))\n            .flatMap(user::save)\n            .map(u -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n            .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 29.618275589560973}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(email)\n            .flatMap(e -> connectionRepository.findByProviderIdAndProviderUserId(email, e))\n            .flatMap(connection -> {\n                user.getConnections().add(connection);\n                return userRepository.save(user);\n            })\n            .map(u -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n            .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 29.380375944051778}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(email)\n            .flatMap(e -> getConnections().findBySourceAndRawId(Connection.Source.EMAIL, e))\n            .flatMap(c -> Mono.error(new DuplicateKeyException(\"Email already bound to a user\")))\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(true))\n            .switchIfEmpty(Mono.defer(() -> {\n                Connection c = build(email, Connection.Source.EMAIL);\n                user.addConnection(c);\n                return save(user);\n            }))\n            .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 39.58211461140522}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (encryptionService.matchPassword(oldPassword, user.getPassword())) {\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return repository.save(user);\n                } else {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n                }\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 30.644457874069165}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.matchPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 28.020909240111674}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.matchPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 25.608750373006085}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return getAllUserGroups(orgMember.getOrgId(), locale)\n                    .map(it -> it.stream()\n                            .filter(group -> !group.isAllUsersGroup())\n                            .map(group -> Map.of(\n                                    \"id\", group.getId(),\n                                    \"name\", group.getName()\n                            ))\n                            .collect(Collectors.toList())\n                    );\n        } else {\n            return getUserGroups(userId, orgMember.getOrgId(), withoutDynamicGroups, locale)\n                    .map(it -> it.stream()\n                            .map(group -> Map.of(\n                                    \"id\", group.getId(),\n                                    \"name\", group.getName()\n                            ))\n                            .collect(Collectors.toList())\n                    );\n        }\n    }", "CodeBleu_score": 26.572512043528217}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getUserGroupIdsInOrg(userId, orgMember.getOrgId())\n                .flatMapMany(userGroupIds -> {\n                    if (withoutDynamicGroups) {\n                        return getNonDynamicUserGroupIdsInOrg(orgMember.getOrgId()).flatMapMany(nonDynamicUserGroupIds -> {\n                            userGroupIds.removeAll(nonDynamicUserGroupIds);\n                            return Flux.fromIterable(userGroupIds);\n                        });\n                    } else {\n                        return Flux.fromIterable(userGroupIds);\n                    }\n                })\n                .flatMap(userGroupId -> getById(userGroupId).map(userGroup -> {\n                    Map<String, String> group = new HashMap<>();\n                    group.put(\"id\", userGroupId);\n                    group.put(\"name\", userGroup.getName(locale));\n                    return group;\n                }))\n                .filter(group -> !isAllUsersGroup(group.get(\"id\")))\n                .collectList();\n    }", "CodeBleu_score": 30.546025798262338}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return Mono.zip(\n                Mono.just(userId),\n                getOrgId(orgMember),\n                getName(orgMember, locale),\n                getUserGroupIdsInOrg(userId, orgMember),\n                getNonDynamicUserGroupIdsInOrg(userId, orgMember, withoutDynamicGroups),\n                getAllUserGroupIds(orgMember)\n        ).flatMap(tuple -> {\n            String userId = tuple.getT1();\n            String orgId = tuple.getT2();\n            String orgName = tuple.getT3();\n            Set<String> userGroupIds = tuple.getT4();\n            Set<String> nonDynamicUserGroupIds = tuple.getT5();\n            Set<String> allUserGroupIds = tuple.getT6();\n            List<Map<String, String>> groups = newArrayList();\n            if (userGroupIds.size() > 0) {\n                groups.add(newHashMap(\n                        entry(\"id\", \"userGroups\"),\n                        entry(\"name\", \"User groups\"),\n                        entry(\"items\", userGroupIds.stream()\n                                .filter(allUserGroupIds::contains)\n                                .map(id -> newHashMap(\n                                        entry(\"id\", id),\n                                        entry(\"name\", getUserGroupName(id, orgName, locale))\n                                ))\n                                .collect(Collectors.toList())\n                        )\n                ));\n            }\n            if (nonDynamicUserGroupIds.size() > 0) {\n                groups.add(newHashMap(\n                        entry(\"id\", \"nonDynamicUserGroups\"),\n                        entry(\"name\", \"Non-dynamic user groups\"),\n                        entry(\"items\", nonDynamicUserGroupIds.stream()\n                                .map(id -> newHashMap(\n                                        entry(\"id\", id),\n                                        entry(\"name\", getUserGroupName(id, orgName, locale))\n                                ))\n                                .collect(Collectors.toList())\n                        )\n                ));\n            }\n            return Mono.just(groups);\n        });\n    }", "CodeBleu_score": 32.81509639940205}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper(userStatus, UserStatus.class, UserStatus::getUserId, userStatus::setUserId,\n            \"userStatus\", \"userId\");\n}", "CodeBleu_score": 34.88937988318519}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return mongoUpsertHelper(\n            new UserStatus(userId, true),\n            UserStatus.class,\n            new Query(Criteria.where(\"userId\").is(userId)),\n            new Update().set(\"hasShowNewUserGuidance\", true)\n    );\n}", "CodeBleu_score": 28.149119171060722}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return mongoUpsertHelper(\n            new UserStatus(userId, true),\n            UserStatus.class,\n            userStatus -> userStatus.userId.equals(userId),\n            userStatus -> userStatus.userId.equals(userId)\n    );\n}", "CodeBleu_score": 31.107553110799753}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\trunGroup := g.NewRunGroup(context.Background(), len(c.partitions))\n\tdefer runGroup.Wait()\n\n\tfor k, p := range c.partitions {\n\t\trunGroup.Enqueue(func() {\n\t\t\tif predicatePartition(k, p) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}\n\t\t})\n\t}\n}", "CodeBleu_score": 40.073106695471324}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t", "CodeBleu_score": 4.594633457534637}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\trungroup.Run(context.Background(), func(g *rungroup.Group) error {\n\t\tfor _, p := range c.partitions {\n\t\t\tif predicatePartition(p.key, p.manager) {\n\t\t\t\tg.Go(func() error {\n\t\t\t\t\tp.manager.clearMatching(predicateValue)\n\t\t\t\t\treturn nil\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n}", "CodeBleu_score": 37.87806803782352}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 41.472660142600304}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"numPartitions and totalWeightQuantity must be greater than 0\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 50.21301117092863}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) * float64(averageWeightPerPartition) / float64(totalWeightQuantity)))\n}", "CodeBleu_score": 48.54345141773781}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    return getConnectionMetadata().map(metadata -> {\n        Map<String, Object> contributorMap = new HashMap<>();\n        if (metadata != null) {\n            contributorMap.put(DatabaseMetaData.PRODUCT_NAME, metadata.getDatabaseProductName());\n            contributorMap.put(DatabaseMetaData.PRODUCT_VERSION, metadata.getDatabaseProductVersion());\n        }\n        return contributorMap;\n    }).block();\n}", "CodeBleu_score": 35.05872064956039}, {"code": "public Map<String, Object> contributorMap(){\n\t    return getConnectionMetadata().map(metadata -> {\n        Map<String, Object> result = new HashMap<>();\n        if (metadata != null) {\n            result.put(\"databaseProductName\", metadata.getDatabaseProductName());\n            result.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n        }\n        return result;\n    }).block();\n}", "CodeBleu_score": 40.951475114803266}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> contributorMap = new HashMap<>();\n    ConnectionMetadata metadata = getConnectionMetadata();\n    if (metadata != null) {\n        contributorMap.put(DATABASE_PRODUCT_NAME_KEY, metadata.getDatabaseProductName());\n        contributorMap.put(DATABASE_VERSION_KEY, metadata.getDatabaseVersion());\n    }\n    return contributorMap;\n}", "CodeBleu_score": 36.77935418243214}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    Map<String, String> userSettings = configMap.getUserSettings();\n    if (userSettings == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n        return;\n    }\n    info.setAllowRegistration(Boolean.parseBoolean(userSettings.get(ConfigMap.ALLOW_REGISTRATION)));\n    info.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(userSettings.get(ConfigMap.MUST_VERIFY_EMAIL_ON_REGISTRATION)));\n}", "CodeBleu_score": 48.0307522002007}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(userSetting.getAllowRegistration());\n        info.setMustVerifyEmailOnRegistration(userSetting.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 54.39354794071218}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    // Get the user settings from the configuration map\n    Map<String, String> userSettings = configMap.getUserSettings();\n\n    // If the user settings are null, disable registration and email verification on registration\n    if (userSettings == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        // Update the GlobalInfo object with the retrieved settings for registration and email verification\n        info.setAllowRegistration(Boolean.parseBoolean(userSettings.get(\"allowRegistration\")));\n        info.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(userSettings.get(\"mustVerifyEmailOnRegistration\")));\n    }\n}", "CodeBleu_score": 51.93303284772466}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"restart\");\n    Thread t = new Thread(tg, new Runnable() {\n        public void run() {\n            try {\n                ClassLoader cl = getClassLoader();\n                setContextClassLoader(cl);\n                setDaemon(false);\n                start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    t.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 38.66080931880845}, {"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"Restart\");\n    Thread t = new Thread(tg, new Runnable() {\n        public void run() {\n            try {\n                ClassLoader cl = getClassLoader();\n                setContextClassLoader(cl);\n                setDaemon(false);\n                start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    t.setName(\"Restart\");\n    t.start();\n    return \"Restart has begun\";\n}", "CodeBleu_score": 37.11463738749841}, {"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"Restart\");\n    Thread t = new Thread(tg, new Runnable() {\n        public void run() {\n            try {\n                // Set the thread as non-daemon\n                t.setDaemon(false);\n                // Set the application class loader as the context class loader\n                t.setContextClassLoader(getClassLoader());\n                // Start the thread\n                t.start();\n            } catch (Exception e) {\n                // Handle any exceptions that may occur during the restart process\n            }\n        }\n    });\n    // Return a message indicating the restart has begun\n    return \"Restart has begun\";\n}", "CodeBleu_score": 39.33875423434395}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n}", "CodeBleu_score": 53.821658598136366}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.negate(RequestPredicates.path(\"/console/assets/**\")))\n                .and(RequestPredicates.negate(RequestPredicates.websocket())),\n            this::serveIndex);\n    }", "CodeBleu_score": 26.76251210512037}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return route(\n            GET(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML)),\n            this::serveIndex);\n    }", "CodeBleu_score": 14.888560065871259}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return route(\n            GET(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(negate(method(HttpMethod.WS))),\n            this::getConsole);\n    }", "CodeBleu_score": 19.22557243701401}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return route(\n            GET(\"/uc/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(negate(method(HttpMethod.WS))),\n            getUc().and(route(GET(\"/\"), this::serveIndex)));\n    }", "CodeBleu_score": 24.062662003599797}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        var indexLocation = getUc().getIndexLocation();\n        var indexResource = applicationContext.getResource(indexLocation);\n        var indexExists = indexResource.exists();\n        if (!indexExists) {\n            return RouterFunctions.empty();\n        }\n        return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.negate(RequestPredicates.path(\"/uc/assets/**\")))\n                .and(RequestPredicates.negate(RequestPredicates.acceptWebSocket())),\n            request -> serveIndex(indexLocation));\n    }", "CodeBleu_score": 31.268656434366115}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(\n                RequestPredicates.GET(\"/uc/**\")\n                        .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                        .and(RequestPredicates.negate(RequestPredicates.path(\"/uc/assets/**\")))\n                        .and(RequestPredicates.negate(RequestPredicates.websocket())),\n                request -> {\n                    var indexLocation = getUc().getIndexLocation();\n                    return serveIndex(indexLocation);\n                });\n    }", "CodeBleu_score": 27.387852387132916}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    @Bean\n    public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n        MapSessionRepository sessionRepository = new MapSessionRepository(new ConcurrentHashMap<>());\n        sessionRepository.setDefaultMaxInactiveInterval(getDefaultMaxInactiveInterval());\n        return new ReactiveMapSessionRepository(sessionRepository);\n    }\n}", "CodeBleu_score": 34.76271584926096}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ConcurrentHashMap<String, MapSession> sessions = new ConcurrentHashMap<>();\n    long defaultMaxInactiveInterval = sessionProperties.getMaxInactiveInterval().toMillis();\n    if (defaultMaxInactiveInterval <= 0) {\n        defaultMaxInactiveInterval = sessionProperties.getTimeout().toMillis();\n    }\n    return new ReactiveMapSessionRepository(sessions, defaultMaxInactiveInterval);\n}", "CodeBleu_score": 34.49633034634048}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ConcurrentHashMap<String, MapSession> sessionMap = new ConcurrentHashMap<>()\n    def sessionRepository = new InMemoryReactiveSessionRepository(sessionMap)\n    sessionRepository.setDefaultMaxInactiveInterval(session.getTimeout() / 1000)\n    sessionRepository\n}", "CodeBleu_score": 27.04397069491048}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService);\n    defaultUserDetailService.setTwoFactorAuth(haloProperties.getSecurity().isTwoFactorAuth());\n    return defaultUserDetailService;\n}", "CodeBleu_score": 45.958922893772666}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setSecurity(haloProperties.getSecurity());\n    userDetailsService.setTwoFactorAuth(haloProperties.getSecurity().isTwoFactorAuth());\n    return userDetailsService;\n}", "CodeBleu_score": 48.31508136566036}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService);\n    defaultUserDetailService.setEnableTwoFactorAuth(haloProperties.getSecurity().isEnableTwoFactorAuth());\n    defaultUserDetailService.setDisableTwoFactorAuth(haloProperties.getSecurity().isDisableTwoFactorAuth());\n    return defaultUserDetailService;\n}", "CodeBleu_score": 46.854502892729776}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t  Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n  commentOwner.setKind(\"email\");\n  commentOwner.setEmail(email);\n  commentOwner.setDisplayName(displayName);\n  commentOwner.setAnnotations(new HashMap<>());\n  commentOwner.getAnnotations().put(AVATAR_ANNOTATION, avatar);\n  commentOwner.getAnnotations().put(WEBSITE_ANNOTATION, website);\n  return commentOwner;\n}", "CodeBleu_score": 46.458747680431976}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t  return new Comment.CommentOwner()\n    .setKind(\"email\")\n    .setEmail(email)\n    .setDisplayName(displayName)\n    .setAnnotations(\n      new Comment.CommentOwner.Annotations()\n        .setAvatar(\n          new Comment.CommentOwner.Annotations.Avatar()\n            .setUrl(avatarUrl)\n        )\n        .setWebsite(\n          new Comment.CommentOwner.Annotations.Website()\n            .setUrl(websiteUrl)\n        )\n    );\n}", "CodeBleu_score": 17.848586140696295}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner.Builder builder = Comment.CommentOwner.newBuilder();\n    builder.setKind(\"email\");\n    builder.setEmail(getEmail() == null ? \"\" : getEmail());\n    builder.setDisplayName(getDisplayName() == null ? \"\" : getDisplayName());\n    builder.setAvatarUrl(getAvatarUrl() == null ? \"\" : getAvatarUrl());\n    builder.setWebsiteUrl(getWebsiteUrl() == null ? \"\" : getWebsiteUrl());\n    return builder.build();\n}", "CodeBleu_score": 21.776464992184444}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == 'email') {\n        User user = User.fetch(post.getOwner().getName());\n        return user.getEmail() == commentOwner.getName();\n    }\n    return commentOwner.getName() == post.getOwner().getName();\n}", "CodeBleu_score": 32.66538652720651}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == \"email\") {\n        User user = fetch(User, commentOwner.getEmail());\n        if (user == null) {\n            return false;\n        }\n        return user.getEmail() == post.getOwner().getEmail();\n    }\n    return commentOwner.getName() == post.getOwner().getName();\n}", "CodeBleu_score": 34.28807028992934}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.kind == \"email\") {\n        User user = User.fetch(post.getOwner().name)\n        if (user.getEmail() == commentOwner.name) {\n            return true\n        }\n    }\n    else if (commentOwner.kind == \"name\") {\n        if (commentOwner.name == post.getOwner().name) {\n            return true\n        }\n    }\n    return false\n}", "CodeBleu_score": 32.785721563766415}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(getFieldSelector());\n    listOptions.setLabelSelector(getLabelSelector());\n    return listOptions;\n}", "CodeBleu_score": 9.060374447994093}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(getFieldSelector());\n    if (getKeyword() != null || getOwnerName() != null) {\n        listOptions.setLabelSelector(labelSelectorBuilder.build());\n    }\n    return listOptions;\n}", "CodeBleu_score": 11.911626320407604}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldSelector = buildFieldSelector();\n    if (StringUtils.isNotBlank(fieldSelector)) {\n        listOptions.setFieldSelector(fieldSelector);\n    }\n    if (StringUtils.isNotBlank(getKeyword())) {\n        listOptions.setKeyword(getKeyword());\n    }\n    if (StringUtils.isNotBlank(getOwnerName())) {\n        listOptions.setOwnerName(getOwnerName());\n    }\n    if (StringUtils.isNotBlank(getOwnerKind())) {\n        listOptions.setOwnerKind(getOwnerKind());\n    }\n    return listOptions;\n}", "CodeBleu_score": 29.28419382647417}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n        .mapNotNull(nameOf)\n        .flatMap(getByName)\n        .map(getUpvote)\n        .map(map)\n        .defaultIfEmpty(empty);\n}", "CodeBleu_score": 27.53410178389522}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n            .filter(Objects::nonNull)\n            .flatMap(name -> counter.getByName(name))\n            .map(counter -> CommentStats.builder()\n                    .name(nameOf(counter))\n                    .upvote(getUpvote(counter))\n                    .build())\n            .defaultIfEmpty(CommentStats.builder().build());\n}", "CodeBleu_score": 42.625782032575145}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .map(name -> getByName(name))\n            .map(counter -> CommentStats.builder()\n                    .name(nameOf(counter))\n                    .upvote(getUpvote(counter))\n                    .build())\n            .defaultIfEmpty(CommentStats.builder().build());\n}", "CodeBleu_score": 43.89156095801262}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.Reason reason = new Subscription.Reason();\n    reason.setType(Subscription.ReasonType.SOMEONE_REPLIED_TO_YOU);\n    reason.setExpression(new Subscription.ConditionExpression());\n    reason.getExpression().setOwner(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setReason(reason);\n\n    notificationCenter.subscribe(subscription);\n    notificationCenter.block();\n}", "CodeBleu_score": 51.083114559043665}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.Reason reason = new Subscription.Reason();\n    reason.setType(Subscription.Reason.Type.SOMEONE_REPLIED_TO_YOU);\n    reason.setExpression(new Subscription.Reason.Expression());\n    reason.getExpression().setOwner(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setReason(reason);\n\n    Subscription.SubscribeResult result = notificationCenter.subscribe(subscription);\n    result.block();\n}", "CodeBleu_score": 51.870877916917145}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.Reason reason = new Subscription.Reason();\n    reason.setType(ReasonType.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(Condition.of(ConditionType.REPLY_OWNER, identity.name()));\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setReason(reason);\n\n    subscriptionCenter.subscribe(subscription)\n            .block();\n}", "CodeBleu_score": 52.7301172028514}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedTime(now());\n        return c;\n    });\n}", "CodeBleu_score": 17.603461461957206}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), comment -> {\n        comment.setApproved(true);\n        comment.setApprovedTime(now());\n        return comment;\n    });\n}", "CodeBleu_score": 19.459933184156622}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedTime(now());\n        return c;\n    });\n}", "CodeBleu_score": 17.603461461957206}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->record = $this->getRecord();\n    }\n\n    return $action;\n}", "CodeBleu_score": 55.648834366197455}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->record = $this->getRecord();\n    }\n\n    return $action;\n}", "CodeBleu_score": 55.648834366197455}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record = $this->record;\n    }\n\n    return $action;\n}", "CodeBleu_score": 57.56206133867736}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        $this->redirect($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 35.91398235678868}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl !== null) {\n        $this->redirect($this->evaluate($this->successRedirectUrl));\n    }\n\n    return $this;\n}", "CodeBleu_score": 37.573094241978275}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        $this->redirect($this->evaluate($this->successRedirectUrl));\n    }\n\n    return $this;\n}", "CodeBleu_score": 37.87925413762909}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('tagify.tag_model');\n\n    $record->tags()->sync(\n        collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten()->pluck('id')->toArray()\n    );\n}", "CodeBleu_score": 68.39339752611603}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = $this->getTagModelClassName();\n\n    $record->tags()->sync(collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten()->pluck('id'));\n}", "CodeBleu_score": 68.59865356259942}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = $record->tags()->getRelated()->getMorphClass();\n\n    $record->tags()->sync(collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten()->pluck('id')->toArray());\n}", "CodeBleu_score": 69.54649660159427}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.GetScope(authz.ResourceTypePipeline, spacePath)\n\tresource := authz.GetResource(authz.ResourceTypePipeline, spacePath, repoName, pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 58.627917917928464}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{\n\t\tType:        authz.TypePipeline,\n\t\tName:        repoName,\n\t\tNamespace:   spacePath,\n\t\tResource:    pipelineIdentifier,\n\t}\n\tresource := authz.Resource{\n\t\tType:        authz.TypePipeline,\n\t\tName:        repoName,\n\t\tNamespace:   spacePath,\n\t\tResource:    pipelineIdentifier,\n\t}\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}", "CodeBleu_score": 63.362927382221415}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoIdentifier := paths.DisectLeaf(repoPath)\n\tscope := authz.NewScope(spacePath, authz.ResourceTypeRepository)\n\tresource := authz.NewResource(repoIdentifier, authz.ResourceTypePipeline)\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 38.37957065684097}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.DisectLeaf(space.Path)\n\tscope := auth.Scope{\n\t\tType: \"space\",\n\t\tID:   parent,\n\t}\n\tresource := auth.Resource{\n\t\tType: \"space\",\n\t\tID:   name,\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.66863117751988}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := paths.DisectLeaf(space.Path)\n\tscope := auth.NewScope(parentSpace, name)\n\tresource := auth.NewResource(parentSpace, name)\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 45.646507661861556}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := paths.DisectLeaf(space.Path)\n\tscope := &authz.Scope{\n\t\tType:    authz.TypeSpace,\n\t\tParent:  parentSpace,\n\t\tName:    name,\n\t\tOptions: space.Options,\n\t}\n\tresource := &authz.Resource{\n\t\tType:    authz.TypeSpace,\n\t\tParent:  parentSpace,\n\t\tName:    name,\n\t\tOptions: space.Options,\n\t}\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 58.10418199545635}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the data to JSON\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields\n\tvar decodedData any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&decodedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the decoded data to ensure it conforms to the required format\n\tencodedData, err := json.Marshal(decodedData)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result\n\tresult := bytes.TrimSuffix(encodedData, []byte(\"\n\"))\n\n\treturn result, nil\n}", "CodeBleu_score": 48.22917234377907}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar decoded interface{}\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencoder := json.NewEncoder(bytes.NewBuffer(nil))\n\tencoder.SetEscapeHTML(false)\n\tencoder.SetIndent(\"\", \"  \")\n\tif err := encoder.Encode(decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult := bytes.TrimSuffix(buffer.Bytes(), []byte(\"\n\"))\n\treturn result, nil\n}", "CodeBleu_score": 55.62858110735862}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar decoder = json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar encoder = json.NewEncoder(new(bytes.Buffer))\n\tencoder.SetEscapeHTML(false)\n\n\tvar result = new(bytes.Buffer)\n\tencoder.Encode(decoder.Decode(&data))\n\n\treturn bytes.TrimSuffix(result.Bytes(), []byte(\"\n\")), nil\n}", "CodeBleu_score": 44.5028732555164}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.repoStore.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 42.44862361572649}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := c.checkRepoPermission(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 38.30384087585981}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.repoStore.CheckAccess(ctx, repo.ID, session.UserID, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 40.2618857391109}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 62.446156573879044}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:     createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.24694084693376}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:     createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:       createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown:  createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline:  createPipelinePayloadSanitizer(),\n\t\tenum.CheckPayloadKindArtifacts: createRawPayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 32.4731083822385}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t    if self.renderer == nil then\n        self.renderer = renderer\n        self.renderer.buffers[#self.renderer.buffers + 1] = self\n    end\n    self.on_render = on_render\n    return self", "CodeBleu_score": 50.05043803759018}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\n\n  if self.state.renderer == nil then\n    self.state.renderer = renderer\n    self.state.on_render = on_render\n    renderer:attach_buffer(self)\n  end\n\n  return self", "CodeBleu_score": 51.31640075951378}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    if not self.attached then\n        self.attached = true\n        self.renderer.attached_buffers[self.name] = self\n        self.state.on_render = on_render\n    end\n    return self", "CodeBleu_score": 51.51204895456898}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if not self:is_valid() then\n        log.error(\"buffer is not valid\")\n        return\n    end\n    if callback then\n        self.watcher = vim.loop.new_fs_watcher()\n        self.watcher:watch_file(self.filename, {\n            event = function(event)\n                if event == \"changed\" then\n                    callback()\n                end\n            end\n        })\n    end", "CodeBleu_score": 47.25978018785657}, {"code": "function Buffer:watch(callback)\n\t    if not self:is_valid() then\n        return\n    end\n    if callback then\n        self.watcher = vim.loop.new_fs_watcher()\n        self.watcher:watch_file(self.filename, {\n            recursive = false,\n            persistent = true\n        }, function()\n            callback(self)\n        end)\n    else\n        vim.notify(\"No callback provided\", vim.log.levels.ERROR)\n    end", "CodeBleu_score": 46.96440465772936}, {"code": "function Buffer:watch(callback)\n\t    if self:is_valid() and callback then\n        local file = self:filename()\n        if file then\n            self.watcher = vim.loop.new_fs_watcher()\n            self.watcher:watch_file(file, {\n                recursive = true,\n                persistent = true,\n                follow_symlinks = true\n            }, function(event)\n                if event == 'modify' then\n                    callback()\n                end\n            end)\n            self.watcher:start()\n        end\n    else\n        vim.schedule(function()\n            vim.notify('Buffer is not valid or callback is not provided', vim.log.levels.ERROR)\n        end)\n    end", "CodeBleu_score": 49.70432577384528}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    local hex = self.hex\n    if hex ~= nil then\n        return hex\n    end\n    local spec = self.spec\n    local attr = spec.attr\n    local fg = attr.fg\n    local bg = attr.bg\n    local hl = attr.hl\n    local hl_fg = vim.api.nvim_get_hl_by_name(hl, true).foreground\n    local hl_bg = vim.api.nvim_get_hl_by_name(hl, true).background\n    if fg ~= nil then\n        hex = vim.api.nvim_get_hl_by_name(fg, true).foreground\n    elseif bg ~= nil then\n        hex = vim.api.nvim_get_hl_by_name(bg, true).background\n    elseif hl_fg ~= nil then\n        hex = hl_fg\n    elseif hl_bg ~= nil then\n        hex = hl_bg\n    end\n    self.hex = hex\n    return hex", "CodeBleu_score": 43.88989360274172}, {"code": "function Color:to_hex()\n\t    local hex = self.hex\n    if hex then\n        return hex\n    end\n\n    local spec = self.spec\n    local attr = spec.attr\n    local fg = spec.fg\n    local bg = spec.bg\n    local hl = spec.hl\n\n    local color\n    if attr == \"NONE\" then\n        color = fg or bg or hl\n    elseif attr == \"FOREGROUND\" then\n        color = fg\n    elseif attr == \"BACKGROUND\" then\n        color = bg\n    elseif attr == \"HIGHLIGHT\" then\n        color = vim.api.nvim_get_hl_by_name(hl, true).foreground\n    end\n\n    if color then\n        hex = color:to_hex()\n        self.hex = hex\n    end\n\n    return hex", "CodeBleu_score": 45.19059313120571}, {"code": "function Color:to_hex()\n\t    local hex = self.hex\n    if hex then\n        return hex\n    end\n\n    local spec = self.spec\n    local attr = spec.attr\n    local fg = spec.fg\n    local bg = spec.bg\n    local hl = spec.hl\n\n    local hl_spec = vim.api.nvim_get_hl_by_name(hl, true)\n    if hl_spec then\n        if attr == \"foreground\" then\n            fg = hl_spec.foreground\n        elseif attr == \"background\" then\n            bg = hl_spec.background\n        end\n    end\n\n    if fg then\n        hex = bit.tohex(fg)\n    elseif bg then\n        hex = bit.tohex(bg)\n    end\n\n    self.hex = hex\n    return hex", "CodeBleu_score": 48.77098123198375}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local row = 0\n\n  for _, line in ipairs(lines) do\n    row = row + 1\n    local col_top = 0\n    local col_end = 0\n\n    while true do\n      local col_start, col_end = line:find(pattern, col_top + 1)\n      if not col_start then\n        break\n      end\n\n      buffer:add_highlight(hl, row, col_start, col_end)\n      col_top = col_end\n    end\n  end\n\n  return self", "CodeBleu_score": 60.87788872423538}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local ns = self\n  local ns_id = self.id\n  for i, line in ipairs(lines) do\n    local start = 1\n    local end_pos = nil\n    while true do\n      start, end_pos = string.find(line, pattern, start)\n      if not end_pos then\n        break\n      end\n      local col_top = start - 1\n      local col_end = end_pos - 1\n      buffer:add_highlight(hl, i - 1, col_top, col_end)\n      start = end_pos + 1\n    end\n  end\n  return ns", "CodeBleu_score": 51.8891746683525}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n\n  for i, line in ipairs(lines) do\n    local col_top, col_end = line:find(pattern)\n    if col_top then\n      buffer:add_highlight(hl, i, col_top, col_end)\n    end\n  end\n\n  return self", "CodeBleu_score": 40.57142933361341}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = string.format(\"%d:%d\", row, col)\n    vim.api.nvim_buf_set_extmark(buffer, id, {\n        end_row = row,\n        end_col = col,\n        hl_group = hl,\n        priority = priority,\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n    })\n    return id", "CodeBleu_score": 63.554509790819644}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = string.format(\"%d_%d\", row, col)\n    vim.api.nvim_buf_set_extmark(buffer, id, {\n        virt_text = { { text, hl } },\n        virt_pos = pos,\n        priority = priority\n    })\n    return id", "CodeBleu_score": 57.48614279613865}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = buffer:get_id() .. \":\" .. row .. \":\" .. col\n    vim.api.nvim_buf_set_extmark(buffer, id, {\n        virt_text = { { text, hl } },\n        virt_pos = pos,\n        priority = priority\n    })\n    return id", "CodeBleu_score": 57.77958464812515}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local lines = {}\n    local line = {}\n    local function process_line()\n        if #line > 0 then\n            callback(table.concat(line, \"\"))\n            line = {}\n        end\n    end\n    for i=1, #output do\n        local char = string.sub(output, i, i)\n        if char == \"", "CodeBleu_score": 43.6194922394988}, {"code": "function Spawn:parse_result(output, callback)\n\t    local lines = {}\n    local line = {}\n    local chars = {}\n    local i = 1\n    local j = 1\n    local k = 1\n    local c = \"\"\n    local l = \"\"\n    local n = \"\"\n    local m = \"\"\n    local o = \"\"\n    local p = \"\"\n    local q = \"\"\n    local r = \"\"\n    local s = \"\"\n    local t = \"\"\n    local u = \"\"\n    local v = \"\"\n    local w = \"\"\n    local x = \"\"\n    local y = \"\"\n    local z = \"\"\n    local aa = \"\"\n    local ab = \"\"\n    local ac = \"\"\n    local ad = \"\"\n    local ae = \"\"\n    local af = \"\"\n    local ag = \"\"\n    local ah = \"\"\n    local ai = \"\"\n    local aj = \"\"\n    local ak = \"\"\n    local al = \"\"\n    local am = \"\"\n    local an = \"\"\n    local ao = \"\"\n    local ap = \"\"\n    local aq = \"\"\n    local ar = \"\"\n    local as = \"\"\n    local at = \"\"\n    local au = \"\"\n    local av = \"\"\n    local aw = \"\"\n    local ax = \"\"\n    local ay = \"\"\n    local az = \"\"\n    local ba = \"\"\n    local bb = \"\"\n    local bc = \"\"\n    local bd = \"\"\n    local be = \"\"\n    local bf = \"\"\n    local bg = \"\"\n    local bh = \"\"\n    local bi = \"\"\n    local bj = \"\"\n    local bk = \"\"\n    local bl = \"\"\n    local bm = \"\"\n    local bn = \"\"\n    local bo = \"\"\n    local bp = \"\"\n    local bq = \"\"\n    local br = \"\"\n    local bs = \"\"\n    local bt = \"\"\n    local bu = \"\"\n    local bv = \"\"\n    local bw = \"\"\n    local bx = \"\"\n    local by = \"\"\n    local bz = \"\"\n    local ca = \"\"\n    local cb = \"\"\n    local cc = \"\"\n    local cd = \"\"\n    local ce = \"\"\n    local cf = \"\"\n    local cg = \"\"\n   ", "CodeBleu_score": 9.409568299365914}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal output = table.concat(output)\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = string.sub(output, i, i)\n\t\tif c == \"", "CodeBleu_score": 25.75246003191672}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if not self.watchers[path] then\n        local watcher = vim.loop.new_fs_event()\n        watcher:start(path, handler, { recursive = true })\n        self.watchers[path] = watcher\n    end\n    return self.watchers[path]", "CodeBleu_score": 45.16197586328021}, {"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = vim.loop.new_fs_event()\n  vim.loop.fs_event_start(watcher, path, handler)\n  return watcher", "CodeBleu_score": 35.96451444369345}, {"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event(path, {\n        recursive = true,\n        edge = false,\n    })\n\n    watcher:start(function(_, events)\n        for _, event in ipairs(events) do\n            handler(event)\n        end\n    end)\n\n    self.watchers[path] = watcher\n\n    return watcher", "CodeBleu_score": 46.75744752487746}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t    local buffer_lines = self:get_lines()\n    local hunks, err = self.git_object:live_hunks(buffer_lines)\n    if err then\n        return err\n    end\n\n    local sign_ns_id = self.namespace:get_sign_ns_id()\n    for _, hunk in ipairs(hunks) do\n        hunk.sign_ns_id = sign_ns_id\n    end\n\n    self:set_signs(hunks)\n    return hunks", "CodeBleu_score": 29.615627742198836}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  if not lines then\n    return nil, \"No lines to process.\"\n  end\n  local hunks = self.git_object:live_hunks(lines)\n  if not hunks then\n    return nil, \"No hunks to process.\"\n  end\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n  for _, hunk in ipairs(hunk) do\n    local line = hunk.line\n    local type = hunk.type\n    local priority = hunk.priority\n    if type == \"add\" then\n      vim.api.nvim_buf_set_extmark(self.bufnr, sign_ns_id, line, {\n        virt_lines = { \"\" },\n        priority = priority,\n        hl_group = \"GitAdd\"\n      })\n    elseif type == \"remove\" then\n      vim.api.nvim_buf_set_extmark(self.bufnr, sign_ns_id, line, {\n        virt_lines = { \"\" },\n        priority = priority,\n        hl_group = \"GitRemove\"\n      })\n    elseif type == \"modify\" then\n      vim.api.nvim_buf_set_extmark(self.bufnr, sign_ns_id, line, {\n        virt_lines = { \"\" },\n        priority = priority,\n        hl_group = \"GitModify\"\n      })\n    elseif type == \"conflict\" then\n      vim.api.nvim_buf_set_extmark(self.bufnr, sign_ns_id, line, {\n        virt_lines = { \"\" },\n        priority = priority,\n        hl_group = \"GitConflict\"\n      })\n    end\n  end\n  self:update_signs()\n  return hunks", "CodeBleu_score": 47.427672131008535}, {"code": "function GitBuffer:live_hunks()\n\t  local buffer_lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(buffer_lines)\n  if hunks then\n    for _, hunk in ipairs(hunk) do\n      local line_start = hunk.line_start\n      local line_end = hunk.line_end\n      local line_type = hunk.line_type\n      local priority = signs_setting:get(line_type)\n      for line = line_start, line_end do\n        local sign_id = self.namespace:get_sign_ns_id()\n        local sign_type = signs_setting:get(line_type)\n        local sign_text = signs_setting:get(line_type)\n        local sign_priority = signs_setting:get(line_type)\n        local sign_options = signs_setting:get(line_type)\n        local sign_data = signs_setting:get(line_type)\n        local sign = {\n          id = sign_id,\n          type = sign_type,\n          text = sign_text,\n          priority = sign_priority,\n          options = sign_options,\n          data = sign_data,\n        }\n        self:add_sign(line, sign)\n      end\n    end\n    self:update_signs()\n  end\n  return hunks", "CodeBleu_score": 46.0267810329356}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpfile = fs.tmpname()\n  fs.write_file(tmpfile, patch)\n\n  local error = os.execute('git add -p ' .. tmpfile)\n  fs.remove_file(tmpfile)\n\n  return error", "CodeBleu_score": 41.524072573497314}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpfile = fs.tmpname()\n\n  fs.write_file(tmpfile, patch)\n\n  local err = self.git:stage_hunk_from_file(tmpfile)\n\n  fs.remove_file(tmpfile)\n\n  return err", "CodeBleu_score": 47.984665207014494}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpfile = fs.tmpname()\n\n  fs.write_file(tmpfile, patch)\n\n  local error = self.git:stage_hunk(tmpfile)\n\n  fs.remove_file(tmpfile)\n\n  return error", "CodeBleu_score": 45.70243219457363}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    request.addHeader(getAccessTokenHeader(), getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.OAUTH_TOKEN, requestToken.getToken());\n\n    if (config.hasScope()) {\n        request.addBodyParameter(OAuthConstants.OAUTH_SCOPE, config.getScope());\n    }\n\n    if (config.hasCallback()) {\n        request.addBodyParameter(OAuthConstants.OAUTH_CALLBACK, config.getCallback());\n    }\n\n    send(request);\n\n    return extract(request.getResponse());\n}", "CodeBleu_score": 43.41909123267244}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t", "CodeBleu_score": 4.73347987450327}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    request.addHeader(getAccessTokenHeader(), getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.OAUTH_TOKEN, requestToken.getToken());\n\n    if (config.getCallback() != null) {\n        request.addBodyParameter(OAuthConstants.OAUTH_CALLBACK, config.getCallback());\n    }\n\n    Response response = request.send();\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 54.83702252375855}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n\n    log.info(\"Adding host to auth cache: {}\", host);\n}", "CodeBleu_score": 59.24861264553892}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Set up the credentials provider with the specified credentials\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\n    // Add the host to the authentication cache using the Basic authentication scheme\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n\n    // Assign the credentials provider and auth cache to the context\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n\n    // Log the action of adding the host to the auth cache\n    log.info(\"Adding host {} to auth cache\", host);\n}", "CodeBleu_score": 69.10804053430695}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    log.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 59.43478452103278}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins not yet initialized\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not yet initialized\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.seedCache(key, source);\n    String rootUrl = jenkins.getRootUrlFromRequest();\n    String encodedKey = rawEncode(key);\n    try {\n        return rootUrl + \"/avatar/lookup/\" + size + \"/\" + encodedKey;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n}", "CodeBleu_score": 54.73066565284852}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not installed\");\n    }\n    String key = cache.getDigestOf(source.getUrl());\n    cache.seed(key, source);\n    String rootUrl = cache.getRootUrlFromRequest(jenkins.getRootUrl());\n    String encodedKey = cache.rawEncode(key);\n    try {\n        return rootUrl + \"/avatar/\" + size + \"/\" + URLEncoder.encode(encodedKey, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 55.40171594728148}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance not available\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension not available\");\n    }\n    String key = cache.getKey(source);\n    cache.seed(key);\n    String rootUrl = jenkins.getRootUrlFromRequest();\n    String encodedKey = cache.rawEncode(key);\n    if (encodedKey == null) {\n        throw new IllegalStateException(\"UTF-8 encoding not available\");\n    }\n    return rootUrl + ActionURI + \"?k=\" + encodedKey + \"&s=\" + size;\n}", "CodeBleu_score": 46.86615384573788}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 37.11707118662519}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.image = image;\n}", "CodeBleu_score": 62.616201302930705}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image.getWidth() > MAX_SIZE || image.getHeight() > MAX_SIZE) {\n        image = scaleImage(image, MAX_SIZE);\n    }\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 50.61176188650624}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            CacheEntry cacheEntry = future.get();\n            if (cacheEntry != null) {\n                image = cacheEntry.getImage();\n                lastModified = cacheEntry.getLastModified();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            future = null;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 56.2553339903194}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    } else {\n        return true;\n    }\n}", "CodeBleu_score": 44.92394287376869}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 44.29948418397301}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            rsp.setContentLength(image.length);\n            rsp.addHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n            rsp.addHeader(\"Pragma\", \"no-cache\");\n            rsp.addHeader(\"Expires\", \"0\");\n            rsp.setContentType(\"image/png\");\n            rsp.getOutputStream().write(image);\n            if (flush) {\n                rsp.getOutputStream().flush();\n            }\n        }", "CodeBleu_score": 35.38956454393738}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        ImageOutputStream ios = ImageIO.createImageOutputStream(baos);\n        try {\n            ImageWriter writer = ImageIO.getImageWritersByFormatName(\"png\").next();\n            writer.setOutput(ios);\n            try {\n                writer.write(node);\n            } finally {\n                writer.dispose();\n            }\n        } finally {\n            ios.close();\n        }\n    } finally {\n        baos.flush();\n    }\n    rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setHeader(\"Expires\", \"0\");\n    rsp.setContentType(\"image/png\");\n    rsp.setContentLength(baos.size());\n    rsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 44.66647078550804}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            if (req.getParameter(\"cache\") != null) {\n                rsp.addHeader(\"Cache-Control\", \"max-age=3600\");\n            }\n            rsp.setContentType(\"image/png\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(generateImage(node), \"png\", baos);\n            if (req.getParameter(\"flush\") != null) {\n                baos.flush();\n            }\n            rsp.setContentLength(baos.size());\n            rsp.getOutputStream().write(baos.toByteArray());\n        }", "CodeBleu_score": 43.05370979791488}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        builder.setConnectionManager(createConnectionManager());\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\n        if (authenticator != null) {\n            setClientProxyParams(authenticator.getHost(), builder);\n            authenticator.configureContext(context, null);\n        }\n\n        httpClient = builder.build();\n    }", "CodeBleu_score": 44.22567785928793}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        builder.setConnectionManager(createConnectionManager());\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, false));\n\n        if (authenticator != null) {\n            authenticator.configureContext(context, null);\n        }\n\n        setClientProxyParams(null, builder);\n        httpClient = builder.build();\n    }", "CodeBleu_score": 43.752598104059345}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n\n        // Set keep-alive strategy\n        builder.setKeepAliveStrategy(new BitbucketKeepAliveStrategy());\n\n        // Set connection manager\n        builder.setConnectionManager(createConnectionManager());\n\n        // Set retry handler\n        builder.setRetryHandler(new BitbucketRetryHandler());\n\n        // Set client proxy parameters\n        String host = getHost();\n        setClientProxyParams(host, builder);\n\n        // Build the HTTP client\n        httpClient = builder.build();\n\n        // Set the context\n        context = HttpClientContext.create();\n    }", "CodeBleu_score": 41.52458624210526}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    try {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n        if (sourceBranch != null) {\n            pullRequest.getSource().setCommitClosure(new CommitClosure(getRawNode(sourceBranch.getCommit())));\n        }\n    } catch (IOException | InterruptedException e) {\n        LOGGER.warn(\"Unable to get source branch: \" + e.getMessage());\n    }\n    try {\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n        if (destinationBranch != null) {\n            pullRequest.getDestination().setCommitClosure(new CommitClosure(getRawNode(destinationBranch.getCommit())));\n        }\n    } catch (IOException | InterruptedException e) {\n        LOGGER.warn(\"Unable to get destination branch: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 42.33353473780692}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    // Setup the source branch closure\n    BitbucketCloudBranch sourceBranch = getSource(pullRequest);\n    if (sourceBranch != null) {\n        BitbucketCloudCommit rawNode = sourceBranch.getRawNode();\n        if (rawNode != null) {\n            setCommitClosure(sourceBranch, rawNode);\n        }\n    }\n\n    // Setup the destination branch closure\n    BitbucketCloudBranch destinationBranch = getDestination(pullRequest);\n    if (destinationBranch != null) {\n        BitbucketCloudCommit rawNode = destinationBranch.getRawNode();\n        if (rawNode != null) {\n            setCommitClosure(destinationBranch, rawNode);\n        }\n    }\n}", "CodeBleu_score": 40.80199275951972}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    // Set up the source branch closure\n    BitbucketCloudBranch sourceBranch = pullRequest.getSource();\n    if (sourceBranch != null) {\n        BitbucketCloudBranch.RawNode sourceRawNode = sourceBranch.getRawNode();\n        if (sourceRawNode != null) {\n            setCommitClosure(sourceBranch, sourceRawNode);\n        }\n    }\n\n    // Set up the destination branch closure\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n    if (destinationBranch != null) {\n        BitbucketCloudBranch.RawNode destinationRawNode = destinationBranch.getRawNode();\n        if (destinationRawNode != null) {\n            setCommitClosure(destinationBranch, destinationRawNode);\n        }\n    }\n}", "CodeBleu_score": 37.50388338783752}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    String url = location.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location URL is null\");\n    }\n    return url;\n}", "CodeBleu_score": 50.91401901730022}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    final JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    final String url = location.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location configuration URL is not set\");\n    }\n    return new DisplayURLProvider(build).getUrl(url);\n}", "CodeBleu_score": 50.01069783092309}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    if (location.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location URL is null\");\n    }\n    return location.getUrl();\n}", "CodeBleu_score": 52.24385047828217}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t  if (url.isEmpty()) {\n    throw new IllegalStateException(\"Jenkins URL is empty\");\n  }\n  if (url.equals(\"localhost\")) {\n    throw new IllegalStateException(\"Jenkins URL cannot be localhost\");\n  }\n  if (url.contains(\"unconfigured-jenkins-location\")) {\n    throw new IllegalStateException(\"Jenkins URL cannot contain unconfigured-jenkins-location\");\n  }\n  if (bitbucket == BitbucketApi.BITBUCKET_CLOUD) {\n    URI uri = URI.create(url);\n    if (uri.getHost() == null) {\n      throw new IllegalStateException(\"Jenkins URL must be fully qualified\");\n    }\n  }\n  return url;\n}", "CodeBleu_score": 47.125074918047865}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url == null) {\n        throw new IllegalStateException(\"URL is null\");\n    }\n    if (url.isEmpty()) {\n        throw new IllegalStateException(\"URL is empty\");\n    }\n    if (url.equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"URL is not configured\");\n    }\n    if (url.contains(\"localhost\")) {\n        throw new IllegalStateException(\"URL is not configured\");\n    }\n    if (bitbucket == BitbucketApi.BITBUCKET_CLOUD) {\n        if (!url.contains(\"://\")) {\n            throw new IllegalStateException(\"URL is not fully qualified\");\n        }\n        if (!url.contains(\"bitbucket.org\")) {\n            throw new IllegalStateException(\"URL is not a Bitbucket Cloud URL\");\n        }\n    }\n    return url;\n}", "CodeBleu_score": 44.20380990855595}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t", "CodeBleu_score": 7.399760459247054}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(source, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            return;\n        }\n        SCMRevision revision = build.getLastBuiltRevision();\n        if (revision == null) {\n            return;\n        }\n        String hash = getHash(revision);\n        if (hash == null) {\n            return;\n        }\n        String branch = getBranch(build);\n        if (branch == null) {\n            return;\n        }\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        BitbucketApi bitbucket = source.createBitbucketClient();\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 44.2363874855083}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(build, SCMHeadObserver.none()).withTraits(source.getTraits());\n\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications disabled\");\n            return;\n        }\n\n        SCMRevision revision = build.getChangeSet().getRevisions().iterator().next();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No hash found\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String key = getBuildKey(build, getBranch(revision), shareBuildKeyBetweenBranchAndPR);\n\n        listener.getLogger().println(\"[Bitbucket] Notifying build status\");\n\n        BitbucketApi bitbucket = source.getBitbucketClient();\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 46.78809600950078}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(source, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = build.getRevision();\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] No SCM revision found\");\n            return;\n        }\n\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No hash found\");\n            return;\n        }\n\n        listener.getLogger().println(\"[Bitbucket] Notifying Bitbucket\");\n\n        String branch = source.getBranch();\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = source.createBitbucketClient(build);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 47.848166075174156}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t  if (shareBuildKeyBetweenBranchAndPr) {\n   return getParent(build) + \"/\" + branch;\n  }\n  return getFullName(build);\n }", "CodeBleu_score": 16.76112576491956}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPr) {\n        String folderName = build.getParent().getFullName();\n        return folderName + \"-\" + branch;\n    } else {\n        return build.getFullName();\n    }\n}", "CodeBleu_score": 39.06047895440419}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t        if (shareBuildKeyBetweenBranchAndPr) {\n            return getFolderName(build) + \":\" + branch;\n        } else {\n            return build.getFullName();\n        }\n    }", "CodeBleu_score": 26.616272465738056}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t", "CodeBleu_score": 0.5550920304044025}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = getServerUrl();\n        log.warn(\"serverUrl is null, using default serverUrl: \" + serverUrl);\n    }\n    if (traits == null) {\n        traits = new HashSet<>();\n        if (getServerUrl().equals(defaultServerUrl)) {\n            traits.add(BitbucketSCMNavigator.LegacyTrait.DEFAULT);\n        }\n        if (getServerUrl().equals(defaultServerUrl)) {\n            traits.add(BitbucketSCMNavigator.LegacyTrait.DEFAULT);\n        }\n    }\n    return this;\n}", "CodeBleu_score": 20.30830277546777}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = \"https://bitbucket.org\";\n        log.warn(\"BitbucketSCMNavigator.serverUrl is null, setting to default value: {}\", serverUrl);\n    }\n    if (traits == null) {\n        traits = new HashSet<>();\n        traits.add(new BitbucketSCMNavigatorTrait());\n        log.warn(\"BitbucketSCMNavigator.traits is null, setting to default value: {}\", traits);\n    }\n    return this;\n}", "CodeBleu_score": 14.204609396760054}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    if (repository == null) {\n        getLogger().warn(\"Bitbucket repository {} not found\", name);\n        return;\n    }\n    if (isMatch) {\n        getLogger().info(\"Bitbucket repository {} is proposed\", name);\n        count.incrementAndGet();\n    } else {\n        getLogger().info(\"Bitbucket repository {} is ignored\", name);\n    }\n}", "CodeBleu_score": 47.38514769747676}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    if (isMatch) {\n        getLogger().info(\"Repository {} is proposed\", repository.getFullName());\n        getCount().increment();\n    } else {\n        getLogger().info(\"Repository {} is ignored\", repository.getFullName());\n    }\n}", "CodeBleu_score": 52.327758077871664}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        getLogger().info(\"Proposed repository: {}\", getFullName(name));\n        count.incrementAndGet();\n    } else {\n        getLogger().info(\"Ignored repository: {}\", getFullName(name));\n    }\n}", "CodeBleu_score": 34.10465318973357}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (rev instanceof RevisionParameter) {\n            RevisionParameter revParam = (RevisionParameter) rev;\n            if (revParam.getBranch() != null) {\n                String branch = revParam.getBranch();\n                if (branch.contains(\"@\")) {\n                    String[] parts = branch.split(\"@\");\n                    String sha1 = parts[1];\n                    if (commitExists(git, sha1)) {\n                        listener.getLogger().println(\"Branch \" + branch + \" already exists\");\n                        return rev;\n                    } else {\n                        listener.getLogger().println(\"Branch \" + branch + \" does not exist, fetching from remote\");\n                        return new RevisionParameter(parts[0], sha1);\n                    }\n                }\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 33.48695689254473}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        // Get the list of branches\n        List<Ref> branches = toList(git.branchList());\n\n        // Filter the branches to find those whose commits don't exist locally\n        List<Ref> missingCommits = branches.stream()\n            .filter(branch -> !commitExists(git, branch.getHash()))\n            .collect(Collectors.toList());\n\n        // Create RefSpecs for the missing branches\n        List<RefSpec> refSpecs = missingCommits.stream()\n            .map(branch -> RefSpec.create(branch.getName()))\n            .collect(Collectors.toList());\n\n        // If there are RefSpecs, fetch the missing commits from the remote repository using the provided clone link\n        if (!refSpecs.isEmpty()) {\n            String cloneLink = getCloneLink(scm, build);\n            git.fetch(cloneLink, refSpecs);\n        }\n\n        // Return the given revision\n        return rev;\n    }", "CodeBleu_score": 46.55355360443972}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        // If the revision is a branch, we need to fetch the commits.\n        if (rev instanceof BranchRevision) {\n            BranchRevision branchRev = (BranchRevision) rev;\n            String branchName = branchRev.getName();\n            String branchHash = branchRev.getHash();\n            listener.getLogger().println(\"Branch name: \" + branchName);\n            listener.getLogger().println(\"Branch hash: \" + branchHash);\n\n            // If the branch hash exists locally, we don't need to fetch the commits.\n            if (commitExists(git, branchHash)) {\n                listener.getLogger().println(\"Branch hash exists locally, skipping fetch.\");\n                return rev;\n            }\n\n            // If the branch hash doesn't exist locally, we need to fetch the commits.\n            listener.getLogger().println(\"Branch hash doesn't exist locally, fetching commits.\");\n\n            // Get the remote repository URL.\n            String remoteUrl = scm.getRemote();\n            listener.getLogger().println(\"Remote URL: \" + remoteUrl);\n\n            // Fetch the commits.\n            fetch_(git, remoteUrl, branchName, branchHash);\n\n            // If the branch hash still doesn't exist locally, we need to fetch the commits again.\n            if (!commitExists(git, branchHash)) {\n                listener.getLogger().println(\"Branch hash still doesn't exist locally, fetching commits again.\");\n                fetch_(git, remoteUrl, branchName, branchHash);\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 32.03945125867457}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, BitbucketHref> links = getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 58.187833270905834}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, BitbucketHref> links = getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 65.30176661662452}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, BitbucketHref> links = getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 65.30176661662452}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResourceStates = await this.getSelectedResourceStates(resourceStates);\n    if (!selectedResourceStates || !selectedResourceStates.length) {\n        return;\n    }\n\n    const repositories = this.getRepositories(selectedResourceStates);\n    const repositoryToResourceStates = this.getRepositoryToResourceStates(repositories, selectedResourceStates);\n\n    for (const repository of repositories) {\n        const resourceStates = repositoryToResourceStates[repository.id];\n        if (!resourceStates) {\n            continue;\n        }\n\n        const filePaths = resourceStates.map(resourceState => resourceState.resource.uri.fsPath);\n        try {\n            await repository.addFiles(filePaths);\n        } catch (error) {\n            this.logger.error(`Failed to add files to repository ${repository.id}: ${error}`);\n            await this.showErrorMessage(`Failed to add files to repository ${repository.id}: ${error}`);\n        }\n    }\n}", "CodeBleu_score": 45.400246644208245}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResourceStates = resourceStates.filter(resourceState => resourceState.selected);\n    if (selectedResourceStates.length === 0) {\n        return;\n    }\n\n    const resourceUris = selectedResourceStates.map(resourceState => resourceState.uri);\n    const repositories = await this.getRepositories(resourceUris);\n    const repositoryMap = new Map<string, SourceControlRepository>();\n\n    for (const repository of repositories) {\n        repositoryMap.set(repository.uri, repository);\n    }\n\n    const resourcesToAdd = selectedResourceStates.map(resourceState => {\n        const repository = repositoryMap.get(resourceState.repositoryUri);\n        if (!repository) {\n            return null;\n        }\n        const resourcePath = this.getResourcePath(repository, resourceState.uri);\n        return {\n            resourcePath,\n            resourceState\n        };\n    }).filter(resource => resource !== null);\n\n    for (const { resourcePath, resourceState } of resourcesToAdd) {\n        try {\n            await this.addResource(resourcePath, resourceState);\n        } catch (error) {\n            this.handleError(error, resourceState);\n        }\n    }\n}", "CodeBleu_score": 45.79823014779997}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = resourceStates.filter(state => state.isSelected());\n  if (!selectedResourceStates.length) {\n    return;\n  }\n\n  const resources = selectedResourceStates.map(state => state.resource);\n  const resourceUris = resources.map(resource => resource.uri);\n  const repositories = await this.getRepositories(resourceUris);\n  for (const repository of repositories) {\n    const repositoryResources = resources.filter(resource => repository.isResourceInRepository(resource.uri));\n    const repositoryResourcePaths = repositoryResources.map(resource => repository.getResourcePath(resource.uri));\n    const repositoryResourcePathsWithErrors = [];\n    for (const resourcePath of repositoryResourcePaths) {\n      try {\n        await repository.add(resourcePath);\n      } catch (error) {\n        repositoryResourcePathsWithErrors.push(resourcePath);\n        this.logError(error);\n      }\n    }\n    if (repositoryResourcePathsWithErrors.length) {\n      const errorMessage = this.getErrorMessage(repositoryResourcePathsWithErrors);\n      this.showErrorMessage(errorMessage);\n    }\n  }\n}", "CodeBleu_score": 45.99775463558373}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || !this.resourceStates[0] instanceof Uri) {\n        const scmResource = await this.scmProvider.getSingleScmResource();\n        this.resourceStates = [scmResource];\n    }\n\n    return this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 34.319385080913136}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n    const resource = await this.scm.getSingleResource(this.resourceStates[0]);\n    this.resourceStates = [resource];\n  }\n  return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 38.49193232091254}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !this.resourceStates[0] instanceof Uri) {\n    const resource = await this.scmService.getSingleResource(this.resourceUri);\n    this.resourceStates = [resource];\n  }\n  return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 41.211226574320136}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.path);\n    }\n    if (uri.scheme !== 'file') {\n      return;\n    }\n    const sourceControlManager = workspace.getSCMProvider(uri);\n    if (!sourceControlManager) {\n      return;\n    }\n    const repository = await sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 45.32175723862749}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const activeEditor = window.activeTextEditor;\n      if (!activeEditor) {\n        return undefined;\n      }\n      uri = activeEditor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const sourceControlManager = workspace.getSCMProvider(uri);\n    if (!sourceControlManager) {\n      return undefined;\n    }\n\n    const repository = sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 53.09085250414913}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (uri) {\n      if (uri.scheme === 'svn') {\n        uri = Uri.file(uri.path);\n      }\n    } else {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n\n    if (!uri) {\n      return undefined;\n    }\n\n    const sourceControlManager = SourceControlResourceProvider.sourceControlManager;\n    if (sourceControlManager) {\n      const repository = sourceControlManager.getRepository(uri);\n      if (repository) {\n        return repository.getResourceFromFile(uri);\n      }\n    }\n\n    return undefined;\n  }", "CodeBleu_score": 49.70063068441607}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepository = await this.model.getRemoteRepository();\n  if (element.isModified()) {\n    const oldRevision = element.getOldRevision();\n    const newRevision = element.getNewRevision();\n    const oldPath = element.getOldPath();\n    const newPath = element.getNewPath();\n    const diffCmd = remoteRepository.getDiffCmd(oldRevision, newRevision, oldPath, newPath);\n    await this.model.openDiff(diffCmd);\n  } else {\n    const newPath = element.getNewPath();\n    const newRevision = element.getNewRevision();\n    const remoteFile = remoteRepository.getFile(newPath, newRevision);\n    await this.model.openDiff(remoteFile);\n  }\n}", "CodeBleu_score": 33.34192078908789}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepo = this.model.getRemoteRepository(element);\n  if (!remoteRepo) {\n    return;\n  }\n\n  if (element.changeKind === ChangeKind.modified) {\n    await this.openDiff(remoteRepo, element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n  } else if (element.changeKind === ChangeKind.added) {\n    await this.openFileRemote(remoteRepo, element.newPath, element.newRevision);\n  }\n}", "CodeBleu_score": 44.00764668099691}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepo = await this.model.getRemoteRepository();\n  if (element.changeType === ChangeType.modified) {\n    this.svnService.openDiff(remoteRepo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n  } else if (element.changeType === ChangeType.added) {\n    this.svnService.openRemoteFile(remoteRepo, element.newPath, element.newRevision);\n  }\n}", "CodeBleu_score": 43.72031588585946}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!clipboard) {\n    window.showErrorMessage(\"Clipboard not supported\");\n    return;\n  }\n\n  let message: string;\n  if (what === \"message\") {\n    message = item.commit.message;\n  } else {\n    message = item.commit.revision;\n  }\n\n  clipboard.writeText(message);\n}", "CodeBleu_score": 28.46030141297453}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.writeText) {\n        window.showErrorMessage('Clipboard is not supported');\n        return;\n    }\n    if (what === 'message') {\n        clipboard.writeText(item.commit.message);\n    } else if (what === 'revision') {\n        clipboard.writeText(item.commit.revision);\n    } else {\n        throw new Error('Invalid argument');\n    }\n}", "CodeBleu_score": 34.09509324828033}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.writeText) {\n        window.showErrorMessage('Clipboard is not supported');\n        return;\n    }\n\n    if (item.commit) {\n        const commit = item.commit;\n        const message = what === 'message' ? commit.message : commit.revision;\n        clipboard.writeText(message);\n    }\n}", "CodeBleu_score": 41.9122927045504}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        ClassLoader classLoader = jenkins.getPluginManager().getClassLoader();\n        Gitea.class.setClassLoader(classLoader);\n    } else {\n        Gitea.class.setClassLoader(this.getClass().getClassLoader());\n    }\n    return this;\n}", "CodeBleu_score": 41.4969683967365}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        return jenkins.getPluginManager().getClassLoader();\n    } else {\n        return this.getClass().getClassLoader();\n    }\n}", "CodeBleu_score": 36.465408829838694}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        return new Gitea(jenkins.getPluginManager().getClassLoader());\n    }\n    return new Gitea(getClass().getClassLoader());\n}", "CodeBleu_score": 39.52219384495058}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName == null ? normalizeServerUrl(serverUrl) : displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = aliasUrl == null ? null : normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 45.64602126019403}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks || credentialsId != null;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = trimToNull(aliasUrl);\n    if (this.aliasUrl != null) {\n        this.aliasUrl = normalizeServerUrl(this.aliasUrl);\n    }\n}", "CodeBleu_score": 38.09256138768425}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = aliasUrl != null ? trimToNull(normalizeServerUrl(aliasUrl)) : null;\n}", "CodeBleu_score": 42.915711941784515}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (checkPermission(serverUrl)) {\n        ListBoxModel items = new ListBoxModel();\n        normalizeServerUrl(serverUrl);\n        List<Credentials> matching = matcher.matchingAs(get(), Credentials.class);\n        for (Credentials credentials : matching) {\n            if (includeMatchingAs(credentials, serverUrl)) {\n                items.add(credentials.getId(), credentials.getDisplayName());\n            }\n        }\n        return items;\n    }\n    return null;\n}", "CodeBleu_score": 45.537039899834525}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel listBoxModel = new ListBoxModel();\n    if (checkPermission()) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        includeMatchingAs(listBoxModel, serverUrl, matcher(serverUrl), build(serverUrl));\n    }\n    return listBoxModel;\n}", "CodeBleu_score": 28.245297727128303}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (checkPermission(serverUrl)) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        items.includeMatchingAs(get(serverUrl), matcher(serverUrl), build(serverUrl));\n    }\n    return items;\n}", "CodeBleu_score": 26.954993435163825}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        String userInfo = uri.getUserInfo();\n\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n\n        if (path == null) {\n            path = \"\";\n        }\n\n        if (query == null) {\n            query = \"\";\n        }\n\n        if (fragment == null) {\n            fragment = \"\";\n        }\n\n        if (userInfo == null) {\n            userInfo = \"\";\n        }\n\n        StringBuilder builder = new StringBuilder();\n        builder.append(scheme).append(\"://\");\n        if (!userInfo.isEmpty()) {\n            builder.append(userInfo).append(\"@\");\n        }\n        builder.append(host);\n        if (port != -1) {\n            builder.append(\":\").append(port);\n        }\n        builder.append(path);\n        if (!query.isEmpty()) {\n            builder.append(\"?\").append(query);\n        }\n        if (!fragment.isEmpty()) {\n            builder.append(\"#\").append(fragment);\n        }\n\n        String normalizedUrl = builder.toString();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        // Ignore exception\n    }\n\n    return serverUrl;\n}", "CodeBleu_score": 42.68935203277767}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        StringBuilder sb = new StringBuilder();\n        if (scheme != null) {\n            sb.append(scheme);\n            sb.append(\"://\");\n        }\n        if (host != null) {\n            sb.append(host.toLowerCase());\n        }\n        if (port != -1) {\n            if (port == 80 && scheme != null && scheme.equalsIgnoreCase(\"http\")) {\n                port = -1;\n            } else if (port == 443 && scheme != null && scheme.equalsIgnoreCase(\"https\")) {\n                port = -1;\n            }\n            if (port != -1) {\n                sb.append(\":\");\n                sb.append(port);\n            }\n        }\n        if (path != null) {\n            sb.append(path);\n        }\n        if (query != null) {\n            sb.append(\"?\");\n            sb.append(query);\n        }\n        if (fragment != null) {\n            sb.append(\"#\");\n            sb.append(fragment);\n        }\n        String normalizedUrl = sb.toString();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        // Ignore exception\n    }\n    return null;\n}", "CodeBleu_score": 45.93621154733095}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    try {\n        if (serverUrl == null) {\n            return null;\n        }\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        if (scheme == null || host == null) {\n            return null;\n        }\n        if (path == null) {\n            path = \"\";\n        }\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            } else {\n                return null;\n            }\n        }\n        return scheme + \"://\" + host + \":\" + port + path;\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.741352005443986}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isBlank()) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 48.90799558839927}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel serverItems = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isBlank()) {\n            serverItems.add(server.getServerUrl(), server.getServerUrl());\n        } else {\n            serverItems.add(server.getServerUrl(), displayName);\n        }\n    }\n    return serverItems;\n}", "CodeBleu_score": 47.423517546222484}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName == null || displayName.trim().isEmpty()) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName, server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 49.36831772374239}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (getServerUrl() == null) {\n        return;\n    }\n\n    checkPermission();\n    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n    servers.removeIf(Objects::isNull);\n    servers.removeIf(GiteaServer::isBlank);\n    servers.removeIf(GiteaServer::isDuplicate);\n    servers.sort(Comparator.comparing(GiteaServer::getName));\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 23.259432413780136}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission();\n    if (servers == null) {\n        return;\n    }\n    servers = servers.stream().filter(Objects::nonNull).distinct().filter(GiteaServer::isValid).collect(Collectors.toList());\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 24.151111377687613}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (!checkPermission()) {\n        return;\n    }\n    if (servers == null) {\n        return;\n    }\n    servers = servers.stream().filter(Objects::nonNull).filter(server -> !server.getUrl().isEmpty()).distinct().collect(Collectors.toList());\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 25.89990477115584}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t        serverUrl = normalizeServerUrl(serverUrl);\n        if (StringUtils.isBlank(serverUrl)) {\n            return false;\n        }\n        for (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (serverUrl.equals(endpoint.getServerUrl())) {\n                iterator.remove();\n                save();\n                return true;\n            }\n        }\n        return false;\n    }", "CodeBleu_score": 40.45357332669855}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    serverUrl = normalizeServerUrl(serverUrl);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> eps = new ArrayList<>(getServers());\n    boolean removed = false;\n    for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        setServers(eps);\n    }\n    return removed;\n}", "CodeBleu_score": 57.696196479027506}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    serverUrl = normalizeServerUrl(serverUrl);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> eps = getServers();\n    boolean removed = false;\n    for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        setServers(eps);\n    }\n    return removed;\n}", "CodeBleu_score": 50.560831999784185}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el);\n      if (type != null) {\n        descriptorElements.add(new ConfigElement(attributes, type));\n      }\n    }\n  }", "CodeBleu_score": 43.6909810138534}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el.asType());\n      if (type != null && !type.isEmpty()) {\n        descriptorElements.add(new ConfigElement(attributes, type));\n      }\n    }\n  }", "CodeBleu_score": 51.21013185985388}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(element, annotation);\n      String type = asType(element);\n      if (type != null && !type.isEmpty()) {\n        descriptorElements.add(new ConfigElement(type, attributes));\n      }\n    }\n  }", "CodeBleu_score": 51.296124642434606}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  String annotationClassName = annotationClass.getName();\n  annotationClassName = annotationClassName.replace(\"$\", \".\");\n  for (TypeElement annotation : annotations) {\n    String annotationName = annotation.getQualifiedName().toString();\n    if (annotationName.equals(annotationClassName)) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 39.069603558511155}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 44.70817825718383}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationName = annotationClass.getCanonicalName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        String name = annotation.getQualifiedName().toString();\n        if (name.equals(annotationName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 40.362855863234245}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"leave_application_status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n    }\n\n    if approver_id:\n        filters[\"approver_id\"] = approver_id\n\n    if for_approval:\n        filters[\"leave_application_status\"] = \"Pending Approval\"\n        filters[\"employee\"] = [\"<>\", employee]\n\n        workflow = get_workflow(\"Leave Application\")\n        allowed_states = get_allowed_states_for_workflow(workflow, approver_id)\n        filters[\"leave_application_status\"] = [\"in\", allowed_states]\n    else:\n        filters[\"leave_application_status\"] = [\"in\", [\"Open\", \"Approved\", \"Rejected\"]]\n        filters[\"leave_application_status\"] = [\"not in\", [\"Cancelled\"]]\n\n    return filters\n\n", "CodeBleu_score": 32.96778164043814}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\tfilters = {\n\t\t\"employee\": employee,\n\t\t\"docstatus\": 1,\n\t\t\"leave_status\": [\"in\", [\"Open\", \"Approved\"]],\n\t\t\"from_date\": [\">\", frappe.utils.getdate()],\n\t}\n\n\tif approver_id:\n\t\tfilters.update({\n\t\t\t\"leave_approver\": approver_id,\n\t\t\t\"leave_status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n\t\t})\n\n\t\tif for_approval:\n\t\t\tfilters.update({\n\t\t\t\t\"leave_status\": \"Open\",\n\t\t\t\t\"leave_approver\": approver_id,\n\t\t\t\t\"leave_approval_status\": \"Pending\",\n\t\t\t})\n\n\t\tfilters.update({\n\t\t\t\"leave_approver\": approver_id,\n\t\t\t\"leave_status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n\t\t})\n\n\t\tif for_approval:\n\t\t\tfilters.update({\n\t\t\t\t\"leave_status\": \"Open\",\n\t\t\t\t\"leave_approver\": approver_id,\n\t\t\t\t\"leave_approval_status\": \"Pending\",\n\t\t\t})\n\n\t\treturn filters\n\n\tworkflow = get_workflow(\"Leave Application\")\n\tallowed_states = get_allowed_states_for_workflow(workflow, employee)\n\n\tif not allowed_states:\n\t\tallowed_states = [\"Open\"]\n\n\tfilters.update({\n\t\t\"leave_status\": [\"in\", allowed_states],\n\t\t\"leave_status\": [\"not in\", [\"Canceled\"]],\n\t})\n\n\treturn filters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.573537851879635}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n        \"leave_type\": [\"in\", [\"Compensatory Leave\", \"Casual Leave\"]],\n    }\n\n    if for_approval:\n        filters.update({\n            \"leave_approver\": approver_id or frappe.session.user,\n            \"leave_state\": [\"in\", get_allowed_states_for_workflow(get_workflow(\"Leave Approval Workflow\"), frappe.session.user)]\n        })\n    else:\n        filters.update({\n            \"leave_state\": [\"not in\", [\"Cancelled\", \"Rejected\"]],\n            \"leave_state\": [\"not in\", get_allowed_states_for_workflow(get_workflow(\"Leave Approval Workflow\"), frappe.session.user)]\n        })\n\n    return filters\n\n", "CodeBleu_score": 26.87804637804084}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = getdate()\n    leave_details = get_leave_details(employee, date)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        allocated = leave_detail.get('allocated', 0)\n        balance = leave_detail.get('balance', 0)\n        leave_balance_map[leave_type] = {'allocated': allocated, 'balance': balance}\n    return leave_balance_map\n", "CodeBleu_score": 46.066730095567024}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = details.getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        allocated_leave = allocation.items(leave_type, employee)\n        balance_leave = leave_details['balance']\n        leave_balance_map[leave_type] = {\n            'allocated': allocated_leave,\n            'balance': balance_leave\n        }\n    return leave_balance_map\n\n\n\n\n\n", "CodeBleu_score": 41.560002065789035}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        allocated_leave = leave_detail['allocated_leave']\n        used_leave = leave_detail['used_leave']\n        leave_balance_map[leave_type] = {\n            'allocated_leave': allocated_leave,\n            'used_leave': used_leave,\n            'balance_leave': allocated_leave - used_leave\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 44.086358784147805}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = query_holidays(holiday_list)\n    holidays = [strip_html(holiday[\"description\"]) for holiday in holidays]\n    holidays.sort(key=lambda x: x[\"date\"])\n    return holidays", "CodeBleu_score": 23.237431815861143}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = query_holidays(holiday_list, exclude_weekly_offs=True)\n    holidays = [strip_html(holiday['description']) for holiday in holidays]\n    holidays.sort(key=lambda x: x['date'])\n    return holidays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 24.96502470202818}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = db.query(\n        \"SELECT * FROM holidays WHERE holiday_list_id = ? AND weekly_off = 0\",\n        (holiday_list.id,)\n    ).order_by(\"date\")\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.60933170759595}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if frappe.db.get_single_value(\"HR Settings\", \"send_reminders_in_advance\"):\n        if frappe.db.get_single_value(\"HR Settings\", \"reminder_frequency\") == \"Weekly\":\n            send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 31.840904838332097}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Check if reminders should be sent in advance\n    if not get_single_value(\"HR Settings\", \"send_reminders_in_advance\"):\n        return\n\n    # Check if frequency is set to \"Weekly\"\n    if get_single_value(\"HR Settings\", \"frequency_of_reminders_in_advance\") != \"Weekly\":\n        return\n\n    # Call function to send reminders in advance\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 28.15316948338155}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if get_single_value(\"HR Settings\", \"send_holiday_reminders_in_advance\") and get_single_value(\n        \"HR Settings\", \"holiday_reminder_frequency\"\n    ) == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 24.049717988965348}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += rating.rating * rating.weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, 2)\n    self.precision = self.self_appraisal_score.__format__('.2f')\n    self.save()\n\n\n\n\n", "CodeBleu_score": 24.566312071137453}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings:\n        total_score += (rating.rating * rating.percentage_weightage)\n    self.self_appraisal_score = total_score\n    self.precision = self.self_appraisal_score * 100\n    self.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 21.85327387515703}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for self_rating in self.self_ratings.all():\n        score = (self_rating.rating * 5) * (self_rating.percentage_weightage / 100)\n        total_score += score\n    self.self_appraisal_score = total_score\n    self.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 25.596927473299047}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.calculate_final_score_from_formula:\n        data = self.get_data_for_calculation()\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        if formula:\n            self.final_score = frappe.safe_eval(formula, data, None, \"Appraisal\")\n        else:\n            self.final_score = flt(\n                (\n                    self.total_score\n                    + self.average_feedback_score\n                    + self.self_appraisal_score\n                )\n                / 3,\n                precision=self.precision,\n            )\n    else:\n        self.final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            precision=self.precision,\n        )\n\n", "CodeBleu_score": 33.78942365585155}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.final_score_formula:\n        data = self.get_data_for_formula()\n        data = data.update(self.as_dict())\n        data = data.update(appraisal_cycle_doc.as_dict())\n\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        final_score = frappe.safe_eval(formula, data)\n    else:\n        final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n\n    self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 41.60735795877391}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = self.get_data_for_formula()\n        sanitized_formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        final_score = frappe.safe_eval(sanitized_formula, data, mode=\"eval\")\n    else:\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n\n    self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 35.579237510150996}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate() and self.status != \"On Leave\" and not frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"docstatus\": 1}):\n        frappe.throw(_(\"Attendance cannot be marked for future date\") + \" \" + _(\"unless employee is on leave\") + \" \" + _(\"or leave application exists\"))\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance cannot be marked for date earlier than date of joining\"))\n\n", "CodeBleu_score": 31.913523423470984}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\" and not frappe.db.exists(\"Leave Application\", {\n                \"employee\": self.employee,\n                \"docstatus\": 1,\n                \"from_date\": (\"<=\", self.attendance_date),\n                \"to_date\": (\">=\", self.attendance_date)\n            }):\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'\"))\n        else:\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n    elif self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance cannot be marked before employee's date of joining\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.50652318979548}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status == \"On Leave\":\n            leave_applications = frappe.get_all(\"Leave Application\", filters={\"employee\": self.employee, \"docstatus\": 1, \"status\": (\"in\", [\"Approved\", \"Cancelled\"])}, fields=[\"name\"])\n            if not leave_applications:\n                pass\n            else:\n                frappe.throw(_(\"Attendance cannot be marked for future dates if the employee is on leave\"))\n        else:\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 38.0347356794698}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for {0} on {1}. {2}\"\n            ).format(\n                self.employee,\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate_record),\n            )\n        )\n\n", "CodeBleu_score": 31.429639381414948}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.get_duplicate_attendance_record():\n        frappe.throw(\n            _(\n                \"Attendance record already exists for {0} on {1}. {2}\"\n            ).format(\n                frappe.bold(self.employee_name),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", self.get_duplicate_attendance_record()),\n            )\n        )\n\n", "CodeBleu_score": 39.661594193886415}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for {0} on {1}. {2}\"\n            ).format(\n                self.employee,\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate_record),\n            )\n        )", "CodeBleu_score": 31.429639381414948}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n    if not emails:\n        return\n    subject = _(\"Daily Work Summary for {0}\").format(global_date_format(self.creation))\n    frappe.sendmail(\n        recipients=emails,\n        sender=frappe.session.user,\n        subject=subject,\n        message=message_details,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        template=\"daily_work_summary_email\",\n        bulk=True,\n    )\n    self.db_set(\"status\", \"Sent\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 42.13167753743191}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n    if emails:\n        frappe.sendmail(\n            recipients=emails,\n            sender=frappe.session.user,\n            subject=_(\"Daily Work Summary for {0}\").format(global_date_format(self.creation)),\n            reference_doctype=self.doctype,\n            reference_name=self.name,\n            template=\"daily_work_summary\",\n            args=message_details,\n        )\n        self.db_set(\"status\", \"Sent\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 44.50296428225929}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n    self.sendmail(\n        recipients=emails,\n        subject=message_details.title,\n        template=\"daily_work_summary\",\n        args=message_details,\n    )\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 38.48096844903934}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n\n    if self.job_applicant:\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        if job_applicant.status != \"Open\":\n            frappe.throw(_(\"Job Applicant must be Open to schedule an interview\"))\n        if job_applicant.interview_round:\n            interview_round = frappe.get_doc(\n                \"Interview Round\", job_applicant.interview_round\n            )\n            if interview_round.interview_round_name == self.interview_round_name:\n                frappe.throw(\n                    _(\n                        \"Job Applicant {0} is already scheduled for {1} round in {2}. <br>\"\n                        \"Please check {3} to edit the interview details.\"\n                    ).format(\n                        frappe.bold(job_applicant.name),\n                        frappe.bold(interview_round.interview_round_name),\n                        frappe.bold(interview_round.job_opening),\n                        get_link_to_form(\n                            \"Interview\",\n                            job_applicant.interview_scheduled,\n                            \"Interview\",\n                        ),\n                    ),\n                )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.710112514809786}, {"code": "def validate_duplicate_interview(self)\n\t\n    # Check for duplicate interview records\n    if self.job_applicant:\n        duplicate_interview = frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n            },\n        )\n        if duplicate_interview:\n            interview = frappe.get_doc(\"Interview\", duplicate_interview)\n            job_applicant_link = get_link_to_form(\n                \"Job Applicant\", interview.job_applicant\n            )\n            raise frappe.ValidationError(\n                _(\n                    \"Job Applicant {0} is not allowed to appear twice for the same interview round. Please check {1} for existing interview record.\"\n                ).format(\n                    frappe.bold(interview.job_applicant_name),\n                    job_applicant_link,\n                )\n            )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 55.72327505044671}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.applicant_name:\n        existing_interview = frappe.db.get_value(\"Interview\", {\n            \"applicant_name\": self.applicant_name,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": 1\n        }, [\"name\", \"applicant_name\", \"interview_round\", \"applicant_name\"])\n        if existing_interview:\n            link_to_form = get_link_to_form(\"Interview\", existing_interview.get(\"name\"))\n            msg = _(\"Job Applicant {0} is not allowed to appear twice for the same interview round. <br> Existing Interview: {1}\").format(\n                format(self.applicant_name), link_to_form)\n            frappe.throw(msg, title=_(\"Duplicate Interview\"))\n\n", "CodeBleu_score": 50.80267739280666}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if len(self.assessments) > 0:\n        total = 0\n        for assessment in self.assessments:\n            if assessment.rating:\n                total += assessment.rating\n        self.average_rating = total / len(self.assessments)\n    else:\n        self.average_rating = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.362231266357}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.952648430322913}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.44806460273387}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interviewer_name\": frappe.db.get_value(\"Employee\", interviewer.interviewer, \"employee_name\"),\n                \"interviewer_email\": frappe.db.get_value(\"Employee\", interviewer.interviewer, \"user_id\"),\n                \"interviewer_contact\": frappe.db.get_value(\"Employee\", interviewer.interviewer, \"mobile_no\"),\n                \"interviewer_department\": frappe.db.get_value(\"Employee\", interviewer.interviewer, \"department\")\n            })\n    interview.save()\n    return interview\n\n\n\n", "CodeBleu_score": 36.74139820763776}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\"interviewer\": interviewer})\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 45.49047832676296}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc('Interview')\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append('interview_details', {\n                'interviewer': interviewer\n            })\n    interview.save()\n    return interview\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.3509200965789}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.db.get_all('Job Offer',\n        filters={\n            'designation': self.designation,\n            'company': self.company,\n            'docstatus': 1,\n            'creation': ['between', [from_date, to_date]]\n        },\n        fields=['name']\n    )\n    return job_offer_list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 52.08255385198056}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.get_all('Job Offer', filters={'company': self.company, 'designation': self.designation, 'docstatus': 1, 'creation': ['between', [from_date, to_date]]}, fields=['name'])\n    return job_offers\n\n\n\n\n", "CodeBleu_score": 55.34842362033208}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.get_all('Job Offer',\n        filters=[\n            ['Job Offer', 'creation', '>=', from_date],\n            ['Job Offer', 'creation', '<=', to_date],\n            ['Job Offer', 'designation', '=', self.designation],\n            ['Job Offer', 'company', '=', self.company],\n            ['Job Offer', 'docstatus', '=', 1]\n        ],\n        fields=['name']\n    )\n    return job_offer\n\n", "CodeBleu_score": 40.852453355105816}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    # Initialize variables\n    total_offers = 0\n    accepted_offers = 0\n\n    # Filter job offers based on company and department\n    filters = []\n    if company:\n        filters.append([\"company\", \"=\", company])\n    if department:\n        filters.append([\"department\", \"=\", department])\n\n    # Count total job offers\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n\n    # Count accepted job offers\n    accepted_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\"}, filters=filters)\n\n    # Calculate acceptance rate\n    if total_offers > 0:\n        acceptance_rate = accepted_offers / total_offers * 100\n    else:\n        acceptance_rate = 0\n\n    # Return result\n    return {\n        \"acceptance_rate\": acceptance_rate,\n        \"fieldtype\": \"Percent\"\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.726716404319475}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = [['docstatus', '=', 1]]\n    if company:\n        filters.append(['company', '=', company])\n    if department:\n        filters.append(['department', '=', department])\n    total_offers = frappe.db.count('Job Offer', filters=filters)\n    accepted_offers = frappe.db.count('Job Offer', filters=filters + [['status', '=', 'Accepted']])\n    acceptance_rate = accepted_offers / total_offers * 100\n    return acceptance_rate, 'Percent'", "CodeBleu_score": 37.8620996231531}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", {\"status\": \"Accepted\", \"docstatus\": 1}, filters=filters)\n\n    if total_offers:\n        acceptance_rate = accepted_offers / total_offers * 100\n    else:\n        acceptance_rate = 0\n\n    return acceptance_rate, \"Percent\"\n\n\n\n\n", "CodeBleu_score": 55.52177544080551}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 89.47653384283774}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\t\tif (!result.isSuccess())\n\t\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\t\treturn ResponseEntity.ok(result);\n\t}", "CodeBleu_score": 89.51738583272353}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\t\tfinal Result result = businessRules.checkIfPasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\tcompanyStaff.setUpdated(LocalDateTime.now());\n\t\tcompanyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 43.77963529992125}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal var staff = this.getById(companyStaffForUpdateDto.getId());\n\t\tif (staff.isEmpty())\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\n\t\tfinal var result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (!result.isSuccess())\n\t\t\treturn result;\n\n\t\tstaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tstaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\t\tstaff.get().setPassword(companyStaffForUpdateDto.getPassword());\n\t\tthis.save(staff.get());\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}", "CodeBleu_score": 50.26462277029985}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId()).getData();\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\t\tfinal Result result = businessRules.checkIfPasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tsave(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 45.17697530597595}]}
