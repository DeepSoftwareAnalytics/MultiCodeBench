{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\tvar directedDllDir = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(directedDllDir, dllName);\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllPath);\n    }\n    else {\n        Posix.LoadDll(dllPath);\n    }\n}", "CodeBleu_score": 41.02096161223654}, {"code": "public static void PreloadDll(string dllName){\n\tvar directedDllDir = GetDirectedDllDirectory();\n\n    var dllPath = Path.Combine(directedDllDir, dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllPath);\n    } else {\n        Posix.LoadDll(dllPath);\n    }\n}", "CodeBleu_score": 40.77457518069954}, {"code": "public static void PreloadDll(string dllName){\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllName);\n    } else {\n        Posix.LoadDll(dllName);\n    }\n}", "CodeBleu_score": 28.053697294761488}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (assetFileReaders.ContainsKey(originalPath))\n        return;\n    try {\n        SerializedFile assetsFile = new SerializedFile(reader, unityVersion);\n        CheckStrippedVersion(assetsFile);\n        assetsFileListHash.Add(assetsFile);\n        assetFileReaders.Add(originalPath, assetsFile);\n        assetsFileList.Add(assetsFile);\n        Logger.Info($\"Loaded {Path.GetFileName(originalPath)}\");\n    } catch (Exception e) {\n        Logger.Error($\"Failed to load {Path.GetFileName(originalPath)}: {e.Message}\");\n    }\n}", "CodeBleu_score": 41.75711503357633}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (!assetFileReaders.ContainsKey(originalPath))\n    {\n        SerializedFile assetsFile = new SerializedFile(reader, originalPath, unityVersion);\n        CheckStrippedVersion(assetsFile);\n        assetsFileList.Add(assetsFile);\n        assetFileReaders.Add(originalPath, assetsFile);\n    }\n}", "CodeBleu_score": 24.41665461490517}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (reader == null) {\n        Logger.Error(\"FileReader is null\");\n        return;\n    }\n    if (assetsFileListHash.Contains(reader.FullPath)) {\n        Logger.Error($\"{reader.FullPath} has already been loaded\");\n        return;\n    }\n    SerializedFile assetsFile = null;\n    try {\n        assetsFile = new SerializedFile(reader, unityVersion);\n    } catch (Exception e) {\n        Logger.Error(e.Message);\n        return;\n    }\n    CheckStrippedVersion(assetsFile);\n    assetsFileListHash.Add(reader.FullPath);\n    resourceFileReaders.Add(assetsFile);\n    assetsFileList.Add(assetsFile);\n}", "CodeBleu_score": 44.44806897381264}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\tif (path == \"\") {\n        return this;\n    }\n    string[] pathParts = path.Split('/');\n    string name = pathParts[0];\n    foreach (ImportedFrame child in children) {\n        if (child.Name == name) {\n            return child.FindFrameByPath(path.Substring(path.IndexOf(name) + name.Length + 1));\n        }\n    }\n    return null;\n}", "CodeBleu_score": 54.18507777016539}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tstring[] pathParts = path.Split('/');\n            ImportedFrame currentFrame = this;\n            for (int i = 0; i < pathParts.Length; i++) {\n                if (pathParts[i] != \"\") {\n                    currentFrame = currentFrame.FindChild(pathParts[i]);\n                    if (currentFrame == null) {\n                        return null;\n                    }\n                }\n            }\n            return currentFrame;\n        }", "CodeBleu_score": 45.70876698225592}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tif (path.StartsWith(this.Path)) {\n\t\tvar name = path.Substring(this.Path.Length);\n\t\tvar frame = this.FindChilds(name).FirstOrDefault();\n\t\tif (frame != null) {\n\t\t\treturn frame;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 43.97021072515626}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\tMemoryStream ms = new MemoryStream();\n  GZipStream gs = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n  gs.CopyTo(ms);\n  return new FileReader(ms);\n}", "CodeBleu_score": 34.521929721087666}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tvar ms = new MemoryStream();\n  var gs = new GZipStream(reader.AsStream(), CompressionMode.Decompress);\n  gs.CopyTo(ms);\n  return new FileReader(ms);\n}", "CodeBleu_score": 32.055115744982935}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tMemoryStream mem = new MemoryStream();\n  GZipStream gz = new GZipStream(reader, CompressionMode.Decompress);\n  byte[] buffer = new byte[4096];\n  int n;\n  while ((n = gz.Read(buffer, 0, buffer.Length)) > 0) {\n    mem.Write(buffer, 0, n);\n  }\n  mem.Position = 0;\n  return new FileReader(mem);\n}", "CodeBleu_score": 36.41300833145771}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tint len = commandStrings.Length;\n\t\t\tif (len == 0)\n\t\t\t\treturn;\n\t\t\tint pos = 0;\n\t\t\twhile (pos < len)\n\t\t\t{\n\t\t\t\tstring commandString = commandStrings[pos];\n\t\t\t\tif (!ParseString(commandString, switchForms))\n\t\t\t\t\t_nonSwitchStrings.Add(commandString);\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}", "CodeBleu_score": 40.318957514682616}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tif (commandStrings.Length == 0)\n\t\t\t\treturn;\n\t\t\tint pos = 0;\n\t\t\tint len = commandStrings.Length;\n\t\t\tstring stopToken = switchForms[0].StopToken;\n\t\t\twhile (pos < len)\n\t\t\t{\n\t\t\t\tint stopIndex = commandStrings[pos].IndexOf(stopToken);\n\t\t\t\tif (stopIndex >= 0)\n\t\t\t\t{\n\t\t\t\t\tint stopLen = stopToken.Length;\n\t\t\t\t\tstring nonSwitchString = commandStrings[pos].Substring(0, stopIndex);\n\t\t\t\t\t_nonSwitchStrings.Add(nonSwitchString);\n\t\t\t\t\tpos++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!ParseString(commandStrings[pos], switchForms))\n\t\t\t\t\t_nonSwitchStrings.Add(commandStrings[pos]);\n\t\t\t\tpos++;\n\t\t\t}\n\t\t\tfor (; pos < len; pos++)\n\t\t\t\t_nonSwitchStrings.Add(commandStrings[pos]);\n\t\t}", "CodeBleu_score": 36.204766201068935}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tint len = commandStrings.Length;\n\t\t\tif (len == 0)\n\t\t\t\treturn;\n\t\t\tint pos = 0;\n\t\t\twhile (pos < len)\n\t\t\t{\n\t\t\t\tstring commandString = commandStrings[pos];\n\t\t\t\tif (ParseString(commandString, switchForms))\n\t\t\t\t\tpos++;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint tailSize = len - pos;\n\t\t\t\t\tif (tailSize > 0)\n\t\t\t\t\t\t_nonSwitchStrings.Add(commandString.Substring(pos));\n\t\t\t\t\tpos = len;\n\t\t\t\t}\n\t\t\t}\n\t\t}", "CodeBleu_score": 36.93517833010396}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\tm_Texture2DData = m_Texture2D.GetRawTextureData();\n\t\t\tm_Texture2DWidth = m_Texture2D.width;\n\t\t\tm_Texture2DHeight = m_Texture2D.height;\n\t\t\tm_Texture2DFormat = m_Texture2D.format;\n\t\t\tm_Texture2DVersion = m_Texture2D.version;\n\t\t\tm_Texture2DPlatform = m_Texture2D.platformSettings;\n\t\t\tm_Texture2DOutputSize = m_Texture2D.GetPixelHeight() * m_Texture2D.GetPixelWidth() * 4;\n\t\t\t\n\t\t}", "CodeBleu_score": 46.18369787310108}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Texture2DData = m_Texture2D.GetPixels();\n\tthis.m_Texture2DWidth = m_Texture2D.width;\n\tthis.m_Texture2DHeight = m_Texture2D.height;\n\tthis.m_Texture2DFormat = m_Texture2D.format;\n\tthis.m_Texture2DVersion = m_Texture2D.version;\n\tthis.m_Texture2DPlatform = m_Texture2D.platform;\n\tthis.m_Texture2DOutputSize = m_Texture2D.GetRawTextureData().Length;\n}", "CodeBleu_score": 30.664308075262714}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t// Extract the image data from the given Texture2D object.\n\tm_Texture2DData = m_Texture2D.GetRawTextureData();\n\t\n\t// Extract the width and height from the given Texture2D object.\n\tm_Texture2DWidth = m_Texture2D.width;\n\tm_Texture2DHeight = m_Texture2D.height;\n\t\n\t// Extract the texture format from the given Texture2D object.\n\tm_Texture2DFormat = m_Texture2D.format;\n\t\n\t// Extract the version from the given Texture2D object.\n\tm_Texture2DVersion = m_Texture2D.version;\n\t\n\t// Extract the platform from the given Texture2D object.\n\tm_Texture2DPlatform = m_Texture2D.platform;\n\t\n\t// Set the output size to the width and height of the given Texture2D object.\n\tm_Texture2DOutputSize = m_Texture2DWidth * m_Texture2DHeight;\n\t\n}", "CodeBleu_score": 48.144289353880744}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty element = sp.GetArrayElementAtIndex(i);\n        if (element.objectReferenceValue != null) {\n            result.Add(element.objectReferenceValue.name);\n        }\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    }\n    return string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 35.70896085043142}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty sp2 = sp.GetArrayElementAtIndex(i);\n\t\tif (sp2.isExpanded) {\n\t\t\tresult.Add(sp2.displayName);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 31.505640799040403}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tif (element.FindPropertyRelative(\"m_Active\").boolValue) {\n\t\t\tresult.Add(element.FindPropertyRelative(\"m_Name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tstring names = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tnames += result[i];\n\t\tif (i < result.Count - 1) {\n\t\t\tnames += \", \";\n\t\t}\n\t}\n\treturn names;\n}", "CodeBleu_score": 40.76736066219237}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t// Check if the property is already active\n\tif (s_ActiveNames.Contains(prop.name)) {\n\t\t// If the property is active, add an item to remove it\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\t// Remove the property from the array\n\t\t\tsp.DeleteArrayElementAtIndex(s_ActiveNames.IndexOf(prop.name));\n\t\t\t// Apply the changes to the serialized object\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t} else {\n\t\t// If the property is not active, add an item to add it\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\t// Add the property to the array\n\t\t\tsp.InsertArrayElementAtIndex(s_ActiveNames.Count);\n\t\t\t// Set the property's name\n\t\t\tsp.GetArrayElementAtIndex(s_ActiveNames.Count).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t// Set the property's type\n\t\t\tsp.GetArrayElementAtIndex(s_ActiveNames.Count).FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t// Apply the changes to the serialized object\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 38.62122967098368}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\tif (s_ActiveNames.Contains(prop.name)) return;\n\tif (add) {\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\tint index = s_ActiveNames.IndexOf(prop.name);\n\t\t\tif (index >= 0) {\n\t\t\t\ts_ActiveNames.RemoveAt(index);\n\t\t\t\tsp.DeleteArrayElementAtIndex(index);\n\t\t\t} else {\n\t\t\t\ts_ActiveNames.Add(prop.name);\n\t\t\t\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"default\").stringValue = prop.defaultValue;\n\t\t\t}\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t} else {\n\t\tmenu.AddItem(new GUIContent(prop.name), s_ActiveNames.Contains(prop.name), () => {\n\t\t\tint index = s_ActiveNames.IndexOf(prop.name);\n\t\t\tif (index >= 0) {\n\t\t\t\ts_ActiveNames.RemoveAt(index);\n\t\t\t\tsp.DeleteArrayElementAtIndex(index);\n\t\t\t} else {\n\t\t\t\ts_ActiveNames.Add(prop.name);\n\t\t\t\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"default\").stringValue = prop.defaultValue;\n\t\t\t}", "CodeBleu_score": 42.30941489410218}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\tif (!add && s_ActiveNames.Contains(prop.name))\n        return;\n    if (add && s_ActiveNames.IndexOf(prop.name) != -1)\n        return;\n    menu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), add, () => {\n        if (add)\n            s_ActiveNames.Add(prop.name);\n        else\n            s_ActiveNames.Remove(prop.name);\n        if (sp.arraySize == 0) {\n            sp.InsertArrayElementAtIndex(0);\n            sp.GetArrayElementAtIndex(0).stringValue = prop.name;\n        }\n        else {\n            int index = s_ActiveNames.IndexOf(prop.name);\n            if (index == -1)\n                sp.InsertArrayElementAtIndex(0);\n            else\n                sp.InsertArrayElementAtIndex(index);\n            sp.GetArrayElementAtIndex(index).stringValue = prop.name;\n        }\n        sp.serializedObject.ApplyModifiedProperties();\n    });\n}", "CodeBleu_score": 46.31888239725836}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tif (sp == null) {\n\t\treturn false;\n\t}\n\tif (sp.propertyType != SerializedPropertyType.Vector3 && sp.propertyType != SerializedPropertyType.Float) {\n\t\tDebug.LogError(\"Property must be a Vector3 or Float.\");\n\t\treturn false;\n\t}\n\tbool changed = false;\n\tfloat x = sp.propertyType == SerializedPropertyType.Vector3 ? sp.vector3Value.x : sp.floatValue;\n\tfloat y = sp.propertyType == SerializedPropertyType.Vector3 ? sp.vector3Value.y : sp.floatValue;\n\tfloat z = sp.propertyType == SerializedPropertyType.Vector3 ? sp.vector3Value.z : sp.floatValue;\n\tbool showVector3 = showXyz || !Mathf.Approximately(x, y) || !Mathf.Approximately(x, z);\n\tEditorGUILayout.BeginHorizontal();\n\tif (showVector3) {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tEditorGUILayout.PropertyField(sp, GUIContent.none, true);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tchanged = true;\n\t\t}\n\t}\n\telse {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tx = EditorGUILayout.FloatField(x);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tchanged = true;\n\t\t}\n\t\tEditorGUI.BeginChangeCheck();\n\t\ty = EditorGUILayout.FloatField(y);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tchanged = true;\n\t\t}\n\t\tEditorGUI.BeginChangeCheck();\n\t\tz = EditorGUILayout.FloatField(z);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tchanged = true;\n\t\t}\n\t\tEditorGUILayout.PropertyField(sp, GUIContent.none, true);\n\t}\n\tif (GUILayout.Toggle(showVector3, \"Vector3\", EditorStyles.miniButton, GUILayout.Width(50))) {\n\t\tshow", "CodeBleu_score": 34.07193408242215}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tbool changed = false;\n\tbool isVector3 = false;\n\tif (sp.propertyType == SerializedPropertyType.Vector3) {\n\t\tisVector3 = true;\n\t}\n\tif (showXyz) {\n\t\tif (isVector3) {\n\t\t\tchanged |= EditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value);\n\t\t} else {\n\t\t\tchanged |= EditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName));\n\t\t}\n\t} else {\n\t\tfloat x = sp.FindPropertyRelative(\"x\").floatValue;\n\t\tfloat y = sp.FindPropertyRelative(\"y\").floatValue;\n\t\tfloat z = sp.FindPropertyRelative(\"z\").floatValue;\n\t\tif (Mathf.Approximately(x, y) && Mathf.Approximately(x, z)) {\n\t\t\tchanged |= EditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName));\n\t\t} else {\n\t\t\tchanged |= EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), new GUIContent(sp.displayName + \".x\"));\n\t\t\tchanged |= EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"y\"), new GUIContent(sp.displayName + \".y\"));\n\t\t\tchanged |= EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"z\"), new GUIContent(sp.displayName + \".z\"));\n\t\t}\n\t}\n\tEditorGUI.BeginChangeCheck();\n\tbool showVector3 = GUILayout.Toggle(showXyz, \"Vector3\", EditorStyles.miniButton);\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tshowXyz = showVector3;\n\t\tchanged = true;\n\t}\n\treturn changed;\n}", "CodeBleu_score": 41.46901581180158}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tif (sp.propertyType != SerializedPropertyType.Vector3) {\n\t\treturn false;\n\t}\n\t\n\tbool changed = false;\n\t\n\tEditorGUILayout.BeginHorizontal();\n\t\n\tif (showXyz) {\n\t\tchanged |= EditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName));\n\t} else {\n\t\tchanged |= EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), new GUIContent(sp.displayName + \" x\"));\n\t\tchanged |= EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"y\"), new GUIContent(sp.displayName + \" y\"));\n\t\tchanged |= EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"z\"), new GUIContent(sp.displayName + \" z\"));\n\t}\n\t\n\tEditorGUILayout.EndHorizontal();\n\t\n\treturn changed;\n}", "CodeBleu_score": 33.597218173866196}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].m_BaseMat == baseMat && s_Entries[i].m_Texture == texture && s_Entries[i].m_ID == id && s_Entries[i].m_Props == props) {\n\t\t\ts_Entries[i].m_Count++;\n\t\t\treturn s_Entries[i].m_Material;\n\t\t}\n\t}\n\t\n\tMaterial mat = new Material(baseMat);\n\tmat.SetTexture(\"_MainTex\", texture);\n\tmat.SetInt(\"_ID\", id);\n\tmat.SetInt(\"_Props\", props);\n\t\n\tCustomMaterialEntry entry = new CustomMaterialEntry();\n\tentry.m_BaseMat = baseMat;\n\tentry.m_Texture = texture;\n\tentry.m_ID = id;\n\tentry.m_Props = props;\n\tentry.m_Material = mat;\n\tentry.m_Count = 1;\n\ts_Entries.Add(entry);\n\treturn mat;\n}", "CodeBleu_score": 30.244148416610305}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t//search for an existing entry that matches the base material, texture, and id\n\tfor (int i = 0; i < s_Entries.Count; ++i) {\n\t\t\n\t\tif (s_Entries[i].baseMat == baseMat && s_Entries[i].texture == texture && s_Entries[i].id == id) {\n\t\t\t\n\t\t\t//increment the count and return the material\n\t\t\ts_Entries[i].count++;\n\t\t\treturn s_Entries[i].material;\n\t\t}\n\t}\n\t\n\t//if no match is found, create a new material entry, set its properties, add it to the list, and return the new custom material\n\ts_Entries.Add(new Entry(baseMat, texture, id, props));\n\treturn s_Entries[s_Entries.Count - 1].material;\n}", "CodeBleu_score": 21.420301884490044}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t// search for an existing entry\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].BaseMat == baseMat && s_Entries[i].Texture == texture && s_Entries[i].Id == id && s_Entries[i].Props == props) {\n\t\t\ts_Entries[i].Count++;\n\t\t\treturn s_Entries[i].CustomMat;\n\t\t}\n\t}\n\n\t// create a new entry\n\tMaterialEntry entry = new MaterialEntry();\n\tentry.BaseMat = baseMat;\n\tentry.Texture = texture;\n\tentry.Id = id;\n\tentry.Props = props;\n\tentry.Count = 1;\n\tentry.CustomMat = new Material(baseMat);\n\tentry.CustomMat.SetTexture(id, texture);\n\tentry.CustomMat.SetFloat(props, 1);\n\ts_Entries.Add(entry);\n\treturn entry.CustomMat;\n}", "CodeBleu_score": 32.058209153809955}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Misc.Remove: material is null\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].m_Material == customMat) {\n\t\t\ts_Entries[i].m_Count--;\n\t\t\tif (s_Entries[i].m_Count == 0) {\n\t\t\t\tDestroyImmediate(s_Entries[i].m_Material);\n\t\t\t\ts_Entries[i].m_Material = null;\n\t\t\t\ts_Entries[i].m_Name = null;\n\t\t\t\ts_Entries[i].m_Shader = null;\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\tDebug.LogWarning(\"Misc.Remove: material not found in list\");\n}", "CodeBleu_score": 36.215291072372416}, {"code": "public static void Remove(Material customMat){\n\tif (customMat == null) {\n\t\treturn;\n\t}\n\t\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].material == customMat) {\n\t\t\ts_Entries[i].count--;\n\t\t\tif (s_Entries[i].count <= 0) {\n\t\t\t\ts_Entries[i].material.DestroyImmediate();\n\t\t\t\ts_Entries[i].material = null;\n\t\t\t\ts_Entries[i].count = 0;\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 32.38295127410409}, {"code": "public static void Remove(Material customMat){\n\tif (customMat != null) {\n\t\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\t\tif (s_Entries[i].material == customMat) {\n\t\t\t\ts_Entries[i].count--;\n\t\t\t\tif (s_Entries[i].count <= 0) {\n\t\t\t\t\ts_Entries[i].material.DestroyImmediate();\n\t\t\t\t\ts_Entries[i].material = null;\n\t\t\t\t\ts_Entries[i].name = \"\";\n\t\t\t\t\ts_Entries[i].count = 0;\n\t\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 34.349772450863014}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\tList<ParticleSystem> particles = new List<ParticleSystem>();\n    foreach (ParticleSystem ps in root.GetComponentsInChildren<ParticleSystem>()) {\n        UIParticle ui = ps.GetComponentInParent<UIParticle>();\n        if (ui == this) {\n            particles.Add(ps);\n        }\n    }\n    for (int i = particles.Count - 1; i >= 0; i--) {\n        if (particles[i].GetComponentInParent<UIParticle>() != this) {\n            particles.RemoveAt(i);\n        }\n    }\n    RefreshParticles(particles);\n}", "CodeBleu_score": 36.79895615839987}, {"code": "private void RefreshParticles(GameObject root){\n\tList<ParticleSystem> particles = new List<ParticleSystem>();\n    for (int i = 0; i < root.transform.childCount; i++) {\n        Transform child = root.transform.GetChild(i);\n        ParticleSystem ps = child.GetComponent<ParticleSystem>();\n        if (ps != null) {\n            particles.Add(ps);\n        }\n    }\n\n    for (int i = particles.Count - 1; i >= 0; i--) {\n        ParticleSystem ps = particles[i];\n        UIParticle uiParticle = ps.GetComponentInParent<UIParticle>();\n        if (uiParticle != this) {\n            particles.RemoveAt(i);\n        }\n    }\n\n    for (int i = 0; i < particles.Count; i++) {\n        ParticleSystem ps = particles[i];\n        if (ps.GetComponent<UIParticle>() == null) {\n            ps.AddComponent<UIParticle>();\n        }\n    }\n\n    RefreshParticles(particles);\n}", "CodeBleu_score": 49.17553879904112}, {"code": "private void RefreshParticles(GameObject root){\n\tList<ParticleSystem> particles = new List<ParticleSystem>();\n    List<ParticleSystem> toRemove = new List<ParticleSystem>();\n    foreach (ParticleSystem ps in root.GetComponentsInChildren<ParticleSystem>()) {\n        UIParticle uiParticle = ps.GetComponentInParent<UIParticle>();\n        if (uiParticle == null) {\n            toRemove.Add(ps);\n        }\n        else if (uiParticle == this) {\n            particles.Add(ps);\n        }\n    }\n    foreach (ParticleSystem ps in toRemove) {\n        ps.RemoveAt(0);\n    }\n    foreach (ParticleSystem ps in particles) {\n        ps.Stop();\n        ps.Clear();\n        ps.Play();\n    }\n    RefreshParticles(particles);\n}", "CodeBleu_score": 35.138971712250154}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tvar currentAssembly = Assembly.GetExecutingAssembly();\n    containerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance;\n}", "CodeBleu_score": 49.21762984810877}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tcontainerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance\n}", "CodeBleu_score": 71.06819034336573}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tvar currentAssembly = Assembly.GetExecutingAssembly();\n    containerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance\n}", "CodeBleu_score": 61.77292902192741}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t_ipAddress = ipAddress;\n  _port = port;\n  _serializer = new Serializer();\n  await _serializer.InitializeAsync();\n  await NegotiateReservationAsync();\n }", "CodeBleu_score": 38.91174414849777}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\ttry {\n   // Set the IP address and port.\n   this.ipAddress = ipAddress;\n   this.port = port;\n   // Wait for the serializer initialization task to complete.\n   await this.serializerInitTask;\n   // Initiate a reservation negotiation using the current state.\n   await this.NegotiateReservationAsync();\n  }\n  catch (Exception e) {\n   this.OnError(e);\n  }\n }", "CodeBleu_score": 33.087716502165726}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\tawait SetIPAddressAndPortAsync(ipAddress, port);\n\t\t\tawait WaitForSerializerInitializationTaskToCompleteAsync();\n\t\t\tawait NegotiateReservationAsync();\n\t\t}", "CodeBleu_score": 26.624293442064978}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tValidate.NotNull(sessionConnectionState)\n    Log.Debug(\"ConnectionState: \" + sessionConnectionState.ToString())\n    ConnectionStateChanged?.Invoke(sessionConnectionState)\n}", "CodeBleu_score": 20.830060419218164}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t", "CodeBleu_score": 1.3969615207900739}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tValidate.NotNull(sessionConnectionState)\n    Log.Debug($\"Connection state updated from {CurrentState.CurrentStage} to {sessionConnectionState.Stage}\")\n    CurrentState.CurrentStage = sessionConnectionState.Stage\n    ConnectionStateChanged?.Invoke(sessionConnectionState)\n    if (sessionConnectionState.Stage == ConnectionState.SESSION_RESERVED) {\n        Log.Debug($\"Player name set to {sessionConnectionState.PlayerName}\")\n        PlayerName = sessionConnectionState.PlayerName\n    }\n}", "CodeBleu_score": 28.750691093854503}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tif (client != null) {\n\t\treturn;\n\t}\n\tclient = new LiteNetLibClient();\n\tclient.Connected += OnConnected;\n\tclient.Disconnected += OnDisconnected;\n\tclient.NetworkReceiveEvent += OnNetworkReceive;\n\tclient.NetworkErrorEvent += OnNetworkError;\n\tclient.NetworkReceiveUnconnectedEvent += OnNetworkReceiveUnconnected;\n\tclient.NetworkErrorUnconnectedEvent += OnNetworkErrorUnconnected;\n\tclient.Start();\n\tclient.Connect(ipAddress, serverPort, \"nitrox\");\n\tawait connectedEvent.WaitOneAsync(2000);\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 41.24786672303568}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t// Initialize the client.\n    client.Start();\n    // Connect the client to the server.\n    client.Connect(ipAddress, serverPort, \"nitrox\");\n    // Wait for a connection event for up to 2000 milliseconds.\n    await Task.Run(() => connectedEvent.WaitOne(2000)).ConfigureAwait(false);\n    // Reset the connection event.\n    connectedEvent.Reset();\n}", "CodeBleu_score": 62.41289370882637}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tif (client == null) {\n        client = new LiteNetLibClient();\n    }\n    if (connectedEvent == null) {\n        connectedEvent = new ManualResetEvent(false);\n    }\n    if (client.IsRunning) {\n        client.Stop();\n    }\n    client.Start();\n    client.Connect(ipAddress, serverPort, \"nitrox\");\n    if (connectedEvent.WaitOne(2000)) {\n        connectedEvent.Reset();\n        return;\n    }\n    client.Stop();\n    connectedEvent.Reset();\n    throw new TimeoutException();\n}", "CodeBleu_score": 47.308357011349365}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = NitroxEntity.RequireObjectFrom(id) as Cyclops;\n    if (cyclops != null) {\n        CyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n        if (fireSuppButton != null) {\n            fireSuppButton.StartCooldown();\n            fireSuppButton.subFire.StartCoroutine(StartFireSuppressionSystem(fireSuppButton.subFire));\n        }\n    }\n}", "CodeBleu_score": 56.924695443259296}, {"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = NitroxEntity.RequireObjectFrom<Cyclops>(id);\n    if (cyclops == null) {\n        return;\n    }\n    CyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n    if (fireSuppButton == null) {\n        return;\n    }\n    fireSuppButton.subFire.StartCoroutine(fireSuppButton.StartFireSuppression());\n    fireSuppButton.StartCooldown();\n}", "CodeBleu_score": 51.84622079780641}, {"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = NitroxEntity.RequireObjectFrom(id);\n\tif (cyclops == null) {\n\t\treturn;\n\t}\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton != null) {\n\t\tfireSuppButton.StartCooldown();\n\t\tfireSuppButton.subFire.StartCoroutine(fireSuppButton.subFire.StartFireSuppression(fireSuppButton.subFire));\n\t}\n}", "CodeBleu_score": 67.64978157115948}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t// Verify the SubRoot ID\n\tif (!subRoot.TryGetIdOrWarn()) {\n\t\treturn;\n\t}\n\t\n\t// Identify the specific damage point\n\tint damagePointId = damagePoint.GetId();\n\t\n\t// Create a repair packet with the relevant details\n\tCyclopsDamageRepairPacket packet = new CyclopsDamageRepairPacket(subRoot.GetId(), damagePointId, repairAmount);\n\t\n\t// Send this packet using a packet sender\n\tCyclopsPacketSender packetSender = new CyclopsPacketSender();\n\tpacketSender.Send(packet);\n}", "CodeBleu_score": 28.788854980224144}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t// Verify the SubRoot ID\n\tif (subRoot.TryGetIdOrWarn()) {\n\t\t// Create a repair packet with the relevant details\n\t\tCyclopsDamagePointRepairedPacket packet = new CyclopsDamagePointRepairedPacket(subRoot.GetId(), damagePoint.GetId(), repairAmount);\n\t\t// Send this packet using a packet sender\n\t\tCyclopsPacketSender.Send(packet);\n\t}\n}", "CodeBleu_score": 23.52242215379029}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\tif (subRoot == null) {\n\t\tDebug.LogWarning(\"OnDamagePointRepaired: subRoot is null\");\n\t\treturn;\n\t}\n\t\n\tif (damagePoint == null) {\n\t\tDebug.LogWarning(\"OnDamagePointRepaired: damagePoint is null\");\n\t\treturn;\n\t}\n\t\n\t// Get the SubRoot ID\n\tint subRootId = subRoot.TryGetIdOrWarn();\n\tif (subRootId == -1) {\n\t\treturn;\n\t}\n\t\n\t// Create a repair packet\n\tCyclopsRepairPacket repairPacket = new CyclopsRepairPacket(subRootId, damagePoint.damagePointId, repairAmount);\n\t\n\t// Send the packet\n\tPacketSender.Send(repairPacket);\n}", "CodeBleu_score": 37.16807327515288}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n\t\treturn;\n\t}\n\n\tCyclopsDamageInfoData damageInfoData = null;\n\tif (info.HasValue) {\n\t\tdamageInfoData = new CyclopsDamageInfoData(info.Value.damageAmount, info.Value.damageType, info.Value.damageSource, info.Value.damageSourceId);\n\t}\n\n\tIEnumerable<int> activeDamagePoints = GetActiveDamagePoints(subRoot);\n\tIEnumerable<CyclopsFireData> activeRoomFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>());\n\n\tCyclopsDamage damage = new CyclopsDamage(subRootId, subRoot.health, activeDamagePoints, damageInfoData, activeRoomFires);\n\n\tpacketSender.Send(damage);\n}", "CodeBleu_score": 45.77684748749711}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n        return;\n    }\n    if (subRoot.health.health <= 0) {\n        return;\n    }\n    CyclopsDamageInfoData damageInfo = null;\n    if (info.HasValue) {\n        damageInfo = new CyclopsDamageInfoData(info.Value.damage, info.Value.source, info.Value.attacker, info.Value.damageType, info.Value.hitDirection);\n    }\n    CyclopsDamageData damageData = new CyclopsDamageData(subRootId, subRoot.health.health, damageInfo, GetActiveDamagePoints(subRoot).ToArray(), GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray());\n    packetSender.Send(damageData);\n}", "CodeBleu_score": 51.481058912808294}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n        if (subRoot.health > 0) {\n            CyclopsDamageInfoData damageInfo = null;\n            if (info.HasValue) {\n                damageInfo = new CyclopsDamageInfoData(info.Value.damageType, info.Value.damage, info.Value.damageSource, info.Value.damageSourceId, info.Value.damageSourcePosition, info.Value.damageSourceVelocity, info.Value.damageSourceVelocityAngle);\n            }\n            List<CyclopsDamageData> damage = new List<CyclopsDamageData>();\n            List<CyclopsFireData> fire = new List<CyclopsFireData>();\n            foreach (int point in GetActiveDamagePoints(subRoot)) {\n                damage.Add(new CyclopsDamageData(point));\n            }\n            foreach (CyclopsFireData f in GetActiveRoomFires(subRoot.GetComponent<SubFire>())) {\n                fire.Add(f);\n            }\n            CyclopsDamage packet = new CyclopsDamage(subRootId, damage, fire, damageInfo);\n            packetSender.Send(packet);\n        }\n    }\n}", "CodeBleu_score": 54.32754561012499}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        if (entity.Id > 0) {\n            RemoveEntityHierarchy(entity);\n            GameObject go = NitroxEntity.GetObjectFrom(entity.Id);\n            if (go != null) {\n                Object.Destroy(go);\n            }\n        }\n    }\n}", "CodeBleu_score": 58.92341640104297}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        GameObject gameObject = NitroxEntity.GetObjectFrom(entity.Id);\n        if (gameObject != null) {\n            GameObject.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 62.24871542635508}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n\n        GameObject gameObject = NitroxEntity.GetObjectFrom(entity);\n        if (gameObject != null) {\n            UnityEngine.Object.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 57.25043950436888}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\tif (pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n        pendingEntities.Add(entity);\n    }\n    else {\n        pendingParentEntitiesByParentId.Add(entity.ParentId, new List<Entity> { entity });\n    }\n}", "CodeBleu_score": 40.41538797981501}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t// Check if the parent ID already has an associated list in the dictionary. If not, it creates one.\n    if (!pendingParentEntitiesByParentId.ContainsKey(entity.ParentId)) {\n        pendingParentEntitiesByParentId.Add(entity.ParentId, new List<Entity>());\n    }\n\n    // Add the entity to the appropriate list.\n    pendingParentEntitiesByParentId[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 35.61652623292872}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t", "CodeBleu_score": 2.17590140311064}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tif (cooldown <= ExosuitArmAction.START_USE_TOOL_COOLDOWN) {\n        BroadcastArmAction(clawArm.GetTechType(), clawArm.GetExosuitArm(), ExosuitArmAction.START_USE_TOOL, null, null);\n    } else if (cooldown <= ExosuitArmAction.ALT_HIT_COOLDOWN) {\n        BroadcastArmAction(clawArm.GetTechType(), clawArm.GetExosuitArm(), ExosuitArmAction.ALT_HIT, null, null);\n    } else {\n        Log.Error($\"BroadcastClawUse: cooldown {cooldown} not recognized\");\n    }\n}", "CodeBleu_score": 30.431878185987593}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tif (cooldown <= 0) {\n        Debug.LogError(\"Claw cooldown is less than or equal to zero.\");\n        return;\n    }\n    ExosuitArmAction armAction = ExosuitArmAction.START_USE_TOOL;\n    if (cooldown > clawArm.GetPickupCooldown()) {\n        armAction = ExosuitArmAction.ALT_HIT;\n    }\n    BroadcastArmAction(clawArm.GetTechType(), clawArm, armAction, null, null);\n}", "CodeBleu_score": 42.54137894225377}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n        ExosuitArmAction armAction = ExosuitArmAction.START_USE_TOOL;\n        if (cooldown == clawArm.GetPunchCooldown()) {\n            armAction = ExosuitArmAction.ALT_HIT;\n        } else if (cooldown != clawArm.GetPickupCooldown()) {\n            Logger.LogError($\"{clawArm.GetGameObject().GetName()} has a cooldown of {cooldown}s, but it should be either {clawArm.GetPickupCooldown()}s or {clawArm.GetPunchCooldown()}s.\");\n        }\n        BroadcastArmAction(clawArm.GetTechType(), clawArm, armAction, null, null);\n    }\n}", "CodeBleu_score": 53.46130961790971}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t// If the game object has a parent, retrieve its ID.\n\tif (parent != null) {\n\t\t// If the parent has a valid ID, extract its metadata.\n\t\tif (parent.TryGetIdOrWarn(out var parentId)) {\n\t\t\t// If the parent has metadata, extract its metadata.\n\t\t\tif (parent.TryGetMetadata(out var parentMetadata)) {\n\t\t\t\t// If the parent has a battery, remove it.\n\t\t\t\tif (parentMetadata.HasBattery) {\n\t\t\t\t\tparentMetadata.RemoveBattery();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the game object has a valid ID, extract its metadata.\n\tif (gameObject.TryGetIdOrWarn(out var gameObjectId)) {\n\t\t// If the game object has metadata, extract its metadata.\n\t\tif (gameObject.TryGetMetadata(out var gameObjectMetadata)) {\n\t\t\t// If the game object has a battery, remove it.\n\t\t\tif (gameObjectMetadata.HasBattery) {\n\t\t\t\tgameObjectMetadata.RemoveBattery();\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the game object has a valid ID, extract its metadata.\n\tif (gameObject.TryGetIdOrWarn(out var gameObjectId)) {\n\t\t// If the game object has metadata, extract its metadata.\n\t\tif (gameObject.TryGetMetadata(out var gameObjectMetadata)) {\n\t\t\t// If the game object has a battery, remove it.\n\t\t\tif (gameObjectMetadata.HasBattery) {\n\t\t\t\tgameObjectMetadata.RemoveBattery();\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the game object has a valid ID, extract its metadata.\n\tif (gameObject.TryGetIdOrWarn(out var gameObjectId)) {\n\t\t// If the game object has metadata, extract its metadata.\n\t\tif (gameObject.TryGetMetadata(out var gameObjectMetadata)) {\n\t\t\t// If the game object has a battery, remove it.\n\t\t\tif (gameObject", "CodeBleu_score": 37.47231290230437}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tvar metadata = gameObject.TryGetIdOrWarn(gameObject, \"BroadcastBatteryAdd\");\n    var parentMetadata = parent.TryGetIdOrWarn(parent, \"BroadcastBatteryAdd\");\n    if (metadata.OrNull() == null || parentMetadata.OrNull() == null) {\n        return;\n    }\n    var entity = new InstalledBatteryEntity(metadata.Value, parentMetadata.Value, techType);\n    var packet = new EntitySpawnedByClient(entity);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 43.99825131416013}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tvar metadata = gameObject.TryGetIdOrWarn(gameObject, \"BroadcastBatteryAdd\");\n    if (metadata == null) {\n        return;\n    }\n\n    var parentMetadata = parent.TryGetIdOrWarn(parent, \"BroadcastBatteryAdd\");\n    if (parentMetadata == null) {\n        return;\n    }\n\n    var installedBatteryEntity = new InstalledBatteryEntity {\n        BatteryId = metadata.Id,\n        ParentId = parentMetadata.Id,\n        TechType = techType.ToDto()\n    };\n    var packetSender = new PacketSender();\n    packetSender.Send(new EntitySpawnedByClient {\n        InstalledBatteryEntity = installedBatteryEntity\n    });\n}", "CodeBleu_score": 41.28719403722477}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t// Set the PickingUpObject to the given game object\n    PickingUpObject = gameObject;\n\n    // Remove any remote control\n    RemoveAnyRemoteControl(gameObject);\n\n    // Check for a NitroxId\n    if (!gameObject.TryGetNitroxId(out NitroxId itemId)) {\n        // If the object lacks an ID, it generates a new one\n        itemId = NitroxEntity.GenerateNewId();\n    }\n\n    // Stop entity position broadcasting\n    EntityPositionBroadcaster.StopWatchingEntity(gameObject);\n\n    // Convert the object to an inventory item\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, EntityMetadataManager.Instance);\n\n    // Mark it as spawned\n    inventoryItemEntity.MarkAsSpawned();\n\n    // Log the pickup event\n    Log.Debug($\"[Items] {Player.main.GetNitroxId()} picked up {itemId}.\");\n\n    // Create a PickupItem packet\n    PickupItem packet = new(itemId, techType.ToDto(), inventoryItemEntity.ChildEntities.Select(child => child.Id).ToList(), inventoryItemEntity.Metadata.OrNull());\n\n    // Send it\n    packetSender.Send(packet);\n\n    // Reset PickingUpObject to null\n    PickingUpObject = null;\n}", "CodeBleu_score": 53.14732534006924}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\tPickingUpObject = gameObject;\n    RemoveAnyRemoteControl(gameObject);\n    NitroxId id = GetIdOrGenerateNew(gameObject);\n    StopWatchingEntity(id);\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, entityMetadataManager);\n    MarkAsSpawned(inventoryItemEntity);\n    Log.Debug($\"[Items] Picked up {inventoryItemEntity}\");\n    PickupItem packet = new PickupItem(inventoryItemEntity, techType);\n    packetSender.Send(packet);\n    PickingUpObject = null;\n}", "CodeBleu_score": 41.86727940508907}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t// This function, PickedUp, handles the event of picking up a game object in the game.\n    // It sets the PickingUpObject to the given game object, removes any remote control, and checks for a NitroxId.\n    // If the object lacks an ID, it generates a new one. It stops entity position broadcasting, converts the object to an inventory item,\n    // marks it as spawned, logs the pickup event, creates a PickupItem packet, and sends it.\n    // Finally, it resets PickingUpObject to null.\n    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl(gameObject);\n    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    Log.Debug($\"[Items] Picked up {id}.\");\n    entityPositionBroadcaster.StopWatchingEntity(id);\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, entityMetadataManager);\n    inventoryItemEntity.MarkAsSpawned();\n    PacketSender.Send(new PickupItem(inventoryItemEntity));\n    PickingUpObject = null;\n}", "CodeBleu_score": 41.49784742570722}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().classId;\n    TechType techType = gameObject.GetComponent<TechTag>().type;\n\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n    if (!metadata.HasValue) {\n        return null;\n    }\n\n    IEnumerable<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager);\n\n    return new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, children);\n}", "CodeBleu_score": 40.7414879819839}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject); // We do this here bc a MetadataExtractor could be requiring the id to increment or so\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n    if (metadata.HasValue) {\n        TechTag techTag = gameObject.GetComponent<TechTag>();\n        TechType techType = (techTag) ? techTag.type : TechType.None;\n\n        IEnumerable<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager);\n\n        return new InventoryItemEntity(id, gameObject.GetComponent<Pickupable>().GetTechType(), techType.ToDto(), metadata.Value, children);\n    }\n\n    return null;\n}", "CodeBleu_score": 35.91174218069397}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetClassId();\n    TechType techType = gameObject.GetTechType();\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n    if (metadata.HasValue) {\n        List<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n        if (techType == TechType.Battery) {\n            BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, id, entityMetadataManager, children);\n        }\n\n        return new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, children);\n    }\n\n    return null;\n}", "CodeBleu_score": 60.2899368116789}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = null;\n\tthis.playerModel = null;\n\tthis.bodyPrototype = null;\n\tthis.playerPermissions = new PlayerPermissions();\n\tthis.playerPermissions.IsAdmin = false;\n\tthis.playerPermissions.IsModerator = false;\n\tthis.playerPermissions.IsBanned = false;\n\tthis.playerPermissions.IsWhitelisted = false;\n\tthis.playerPermissions.IsVerified = false;\n\tthis.playerPermissions.IsVIP = false;\n\tthis.playerPermissions.IsPremium = false;\n\tthis.playerPermissions.IsDeveloper = false;\n\tthis.playerPermissions.IsPatreon = false;\n\tthis.playerPermissions.IsDonor = false;\n\tthis.playerPermissions.IsTester = false;\n\tthis.playerPermissions.IsSupporter = false;\n\tthis.playerPermissions.IsFriend = false;\n\tthis.playerPermissions.IsIgnored = false;\n\tthis.playerPermissions.IsIgnoring = false;\n\tthis.playerPermissions.IsMuted = false;\n\tthis.playerPermissions.IsDeafened = false;\n\tthis.playerPermissions.IsSilenced = false;\n\tthis.playerPermissions.IsPaused = false;\n\tthis.playerPermissions.IsSpectating = false;\n\tthis.playerPermissions.IsInvisible = false;\n\tthis.playerPermissions.IsInvisibleTo = new List<string>();\n\tthis.playerPermissions.IsInvisibleTo.Add(\"all\");\n\tthis.playerPermissions.IsInvisibleTo.Add(\"none\");\n\tthis.playerPermissions.IsInvisibleTo.Add(\"friends\");\n\tthis.playerPermissions.IsInvisibleTo.Add(\"everyone\");\n\tthis.playerPermissions.IsInvisibleTo.Add(\"admins\");\n\tthis.playerPermissions.IsInvisibleTo.Add(\"moderators\");\n\tthis.playerPermissions", "CodeBleu_score": 33.3039275432937}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = null;\n\tthis.playerModel = null;\n\tthis.bodyPrototype = null;\n\tthis.playerPermissions = new PlayerPermissions();\n\tthis.playerPermissions.canMove = true;\n\tthis.playerPermissions.canJump = true;\n\tthis.playerPermissions.canShoot = true;\n\tthis.playerPermissions.canShootInAir = true;\n\tthis.playerPermissions.canShootWhileJumping = true;\n\tthis.playerPermissions.canShootWhileMoving = true;\n\tthis.playerPermissions.canShootWhileWalking = true;\n\tthis.playerPermissions.canShootWhileRunning = true;\n\tthis.playerPermissions.canShootWhileFalling = true;\n\tthis.playerPermissions.canShootWhileDead = true;\n\tthis.playerPermissions.canShootWhileSprinting = true;\n\tthis.playerPermissions.canShootWhileCrouching = true;\n\tthis.playerPermissions.canShootWhileProne = true;\n\tthis.playerPermissions.canShootWhileInAir = true;\n\tthis.playerPermissions.canShootWhileSwimming = true;\n\tthis.playerPermissions.canShootWhileClimbing = true;\n\tthis.playerPermissions.canShootWhileCrawling = true;\n\tthis.playerPermissions.canShootWhileSprinting = true;\n\tthis.playerPermissions.canShootWhileCrouching = true;\n\tthis.playerPermissions.canShootWhileProne = true;\n\tthis.playerPermissions.canShootWhileInAir = true;\n\tthis.playerPermissions.canShootWhileSwimming = true;\n\tthis.playerPermissions.canShootWhileClimbing = true;", "CodeBleu_score": 28.927127578765116}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.playerModel = new PlayerModel(this);\n    this.body = null;\n    this.bodyPrototype = null;\n    this.playerPermissions = new PlayerPermissions(this);\n    this.playerPermissions.SetDefaultPermissions();\n}", "CodeBleu_score": 41.12262026411674}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\tget {\n\t\t// Ensure the player's head is visible.\n\t\tplayer.head.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\t// Instantiate a clone of the body prototype.\n\t\tGameObject clone = Object.Instantiate(bodyPrototype);\n\t\t// Reset the clone's shadow casting mode.\n\t\tclone.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\t\t// Deactivate the clone.\n\t\tclone.SetActive(false);\n\t\t// Rename the clone.\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\t// Remove items held in hand.\n\t\tif (player.GetComponent<Inventory>().GetItemInHand() != null) {\n\t\t\t// Remove the item held in hand.\n\t\t\tplayer.GetComponent<Inventory>().RemoveItemInHand();\n\t\t}\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 31.693449565750925}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\n        // Ensure the player's head is visible\n        if (player.head.activeSelf) {\n            player.head.SetActive(false);\n        }\n\n        // Instantiate a clone of the body prototype\n        GameObject clone = Object.Instantiate(bodyPrototype, player.transform.position, player.transform.rotation);\n\n        // Reset the head's shadow casting mode\n        player.head.GetComponent<MeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\n        // Deactivate and rename the clone\n        clone.SetActive(false);\n        clone.name = \"RemotePlayerPrototype\";\n\n        // Remove items held in hand\n        if (player.hands.leftItem != null) {\n            player.hands.leftItem.SetActive(false);\n        }\n        if (player.hands.rightItem != null) {\n            player.hands.rightItem.SetActive(false);\n        }\n\n        // Return the clone\n        return clone;\n    }\n}", "CodeBleu_score": 33.534346931694806}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\n\tif (bodyPrototype == null) {\n\t\tif (head.GetComponent<Renderer>().enabled == false) {\n\t\t\thead.GetComponent<Renderer>().enabled = true;\n\t\t}\n\t\tbodyPrototype = Instantiate(body.gameObject);\n\t\tbodyPrototype.SetActive(false);\n\t\tbodyPrototype.name = \"RemotePlayerPrototype\";\n\t\tbodyPrototype.transform.Find(\"LeftHand\").GetComponent<Renderer>().enabled = false;\n\t\tbodyPrototype.transform.Find(\"RightHand\").GetComponent<Renderer>().enabled = false;\n\t\tbodyPrototype.transform.Find(\"LeftHand\").GetComponent<Collider>().enabled = false;\n\t\tbodyPrototype.transform.Find(\"RightHand\").GetComponent<Collider>().enabled = false;\n\t\tbodyPrototype.transform.Find(\"LeftHand\").GetComponent<Rigidbody>().isKinematic = true;\n\t\tbodyPrototype.transform.Find(\"RightHand\").GetComponent<Rigidbody>().isKinematic = true;\n\t\tbodyPrototype.transform.Find(\"LeftHand\").GetComponent<Rigidbody>().useGravity = false;\n\t\tbodyPrototype.transform.Find(\"RightHand\").GetComponent<Rigidbody>().useGravity = false;\n\t\tbodyPrototype.transform.Find(\"LeftHand\").GetComponent<Rigidbody>().velocity = Vector3.zero;\n\t\tbodyPrototype.transform.Find(\"RightHand\").GetComponent<Rigidbody>().velocity = Vector3.zero;\n\t\tbodyPrototype.transform.Find(\"LeftHand\").GetComponent<Rigidbody>().angularVelocity = Vector3.zero;\n\t\tbodyPrototype.transform.Find(\"RightHand\").GetComponent<Rigidbody>().angularVelocity = Vector3.zero;\n\t\tbodyPrototype.transform.Find(\"LeftHand\").GetComponent<Rigidbody>().freezeRotation = true;\n\t\tbodyPrototype.transform.Find(\"RightHand\").GetComponent<Rigidbody>().freezeRotation = true;\n\t\tbodyPrototype.transform.Find(\"Left", "CodeBleu_score": 21.921295779887238}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(this.GetType().FullName);\n\tbw.Write(this.Location);\n\tbw.Write(this.Metadata.Version.ToString());\n\tbw.Write(this.Processes.ToList());\n\tbw.Write(this.Dependencies.ToList());\n\tbw.Write(this.Incompatibilities.ToList());\n\tbw.Write(this.TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 19.518629435942074}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().FullName);\n    bw.Write(Location);\n    ((ICacheable) this).SaveMetadata(bw);\n    bw.Write(Processes.Count);\n    foreach (var process in Processes) {\n        bw.Write(process.ToString());\n    }\n    bw.Write(Dependencies.Count);\n    foreach (var dependency in Dependencies) {\n        ((ICacheable) dependency).Save(bw);\n    }\n    bw.Write(Incompatibilities.Count);\n    foreach (var incompatibility in Incompatibilities) {\n        ((ICacheable) incompatibility).Save(bw);\n    }\n    bw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 51.10487725771639}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t", "CodeBleu_score": 1.8398687168104124}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tpluginInstance.PluginInfo = pluginInfo;\n\tpluginInstance.PluginAssembly = pluginAssembly;\n\tpluginInstance.PluginPath = pluginInfo.Path;\n\tpluginInstance.PluginName = pluginInfo.Name;\n\tpluginInstance.PluginAuthor = pluginInfo.Author;\n\tpluginInstance.PluginVersion = pluginInfo.Version;\n\tpluginInstance.PluginDescription = pluginInfo.Description;\n\tpluginInstance.PluginLoad.Invoke(pluginInstance, EventArgs.Empty);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 48.55085774107364}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tBasePlugin pluginInstance = null;\n    try {\n        Type pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n        pluginInstance = Activator.CreateInstance(pluginType) as BasePlugin;\n        pluginInstance.PluginInfo = pluginInfo;\n        pluginInstance.PluginAssembly = pluginAssembly;\n        pluginInstance.PluginName = pluginInfo.Name;\n        pluginInstance.PluginAuthor = pluginInfo.Author;\n        pluginInstance.PluginVersion = pluginInfo.Version;\n        pluginInstance.PluginDescription = pluginInfo.Description;\n        pluginInstance.PluginLoad.Invoke(pluginInstance, null);\n        pluginInstance.Load();\n        pluginInstance.PluginLoaded = true;\n    } catch (Exception e) {\n        Logger.Log(LogType.Error, \"Error loading plugin \" + pluginInfo.Name + \": \" + e.Message);\n    }\n    return pluginInstance;\n}", "CodeBleu_score": 40.0507941619793}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tvar pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n    var pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n    pluginInstance.PluginInfo = pluginInfo;\n    pluginInstance.PluginAssembly = pluginAssembly;\n    pluginInstance.Load();\n    PluginLoad?.Invoke(pluginInstance);\n    pluginInstance.Load();\n    return pluginInstance;\n}", "CodeBleu_score": 61.586802873080174}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 70.41323597730046}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 70.41323597730046}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\n        Prepare();\n        if (signature == null) {\n            TrampolineMethod = GenerateNativeProxy();\n        } else {\n            TrampolineMethod = GenerateNativeProxy(signature);\n        }\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 58.53762774999496}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tvar assembly = typeof(LocalizationLoader).Assembly;\n\tvar resourceName = $\"{assembly.GetName().Name}.Languages.{code}.json\";\n\tvar resourceStream = assembly.GetManifestResourceStream(resourceName);\n\tif (resourceStream == null) {\n\t\tthrow new NullReferenceException($\"Language file for language code {code} not found.\");\n\t}\n\tvar json = new StreamReader(resourceStream).ReadToEnd();\n\tvar result = JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n\tif (result == null) {\n\t\tthrow new JsonException($\"Language file for language code {code} is not valid JSON.\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 49.347833227812735}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tvar stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"{nameof(LocalizationLoader)}.{code}.json\");\n    if (stream == null) {\n        throw new NullReferenceException($\"Language file for language code {code} not found.\");\n    }\n\n    var deserialized = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n    if (deserialized == null) {\n        throw new JsonException($\"Deserialization of language file for language code {code} failed.\");\n    }\n\n    return deserialized;\n}", "CodeBleu_score": 51.53216999713766}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tvar stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"{typeof(LocalizationLoader).Namespace}.Languages.{code}.json\");\n    if (stream == null) {\n        throw new NullReferenceException($\"The language file for the language code {code} was not found.\");\n    }\n\n    var json = new StreamReader(stream).ReadToEnd();\n    var dictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n    if (dictionary == null) {\n        throw new JsonException($\"The language file for the language code {code} could not be deserialized.\");\n    }\n\n    return dictionary;\n}", "CodeBleu_score": 50.158265950464084}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            expressionCount += this.Visit((ParserRuleContext)node);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 52.1448420814614}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tthis.Visit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 44.81523035084461}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            this.Visit((ParserRuleContext)node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 46.625215786337215}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// Generate code for any expressions in the formatted text\n    this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\n    // Retrieve the line ID tag\n    string lineIDTag = Compiler.GetLineIDTag(context.line_formatted_text());\n\n    // If the line ID tag was not found, throw an exception\n    if (lineIDTag == null) {\n        throw new InvalidOperationException(\n            $\"Line statement {context.line_formatted_text().GetText()} does not contain a line ID tag\"\n        );\n    }\n\n    // Emit a RunLine opcode with the line ID and expression count\n    this.compiler.Emit(\n        OpCode.RunLine,\n        lineIDTag,\n        context.line_formatted_text().expression().Count\n    );\n\n    // Return the number of lines emitted\n    return 1;\n}", "CodeBleu_score": 57.24355618010404}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\tthis.compiler.Emit(Opcode.RunLine);\n    var lineID = this.compiler.GetLineIDTag(context.line_formatted_text());\n    if (lineID == null) {\n        throw new InvalidOperationException(\"Line statement in \" + this.compiler.CurrentNode.Name + \" has no line ID tag\");\n    }\n    this.compiler.Emit(lineID.Value);\n    this.compiler.Emit(this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text()));\n    return 0;\n}", "CodeBleu_score": 54.50234370756885}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// If the line statement has no text, there's nothing to do.\n\tif (context.line_formatted_text() == null) {\n\t\treturn 0;\n\t}\n\t\n\t// Generate code for the expressions in the line statement's text.\n\t// This will push the result of the expressions onto the stack.\n\tint expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\t\n\t// Retrieve the line ID tag from the line statement.\n\tstring lineIDTag = this.compiler.GetLineIDTag(context);\n\t\n\t// If the line ID tag is missing, throw an exception.\n\tif (lineIDTag == null) {\n\t\tthrow new InvalidOperationException(\"Line statements must have a line ID tag.\");\n\t}\n\t\n\t// Emit a RunLine opcode with the line ID and expression count.\n\tthis.compiler.Emit(new RunLineOpcode(lineIDTag, expressionCount));\n\t\n\treturn 0;\n}", "CodeBleu_score": 32.381170213593016}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tvar unknownCommands = from commandReference in yarnFile.CommandReferences\n\t\t\t\t\t\t   where !commandReference.KnownCommand\n\t\t\t\t\t\t   select commandReference;\n\treturn from commandReference in unknownCommands\n\t\t   select new Diagnostic {\n\t\t\t   Severity = DiagnosticSeverity.Warning,\n\t\t\t   Message = $\"Command '{commandReference.Name}' is referenced in '{commandReference.FileName}' but not defined.\",\n\t\t\t   Code = \"Yarn001\",\n\t\t\t   Data = new DiagnosticData {\n\t\t\t\t   CommandReference = commandReference,\n\t\t\t   },\n\t\t   };\n}", "CodeBleu_score": 27.46328511463257}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\treturn yarnFile.CommandReferences\n        .Where(cr => !yarnFile.KnownCommands.ContainsKey(cr.Name))\n        .Select(cr => Diagnostic.Create(\n            UnknownCommandRule,\n            cr.NameToken.Location,\n            cr.Name,\n            commandReference.ParametersRange.Start.Delta,\n            commandReference.ParametersRange.End.Delta,\n            commandReference.ParametersRange.End.Line,\n            commandReference.ParametersRange.End.Column,\n            commandReference.ParametersRange.End.LinePosition,\n            commandReference.ParametersRange.End.LinePositionSpan,\n            commandReference.ParametersRange.End.Path,\n            commandReference.ParametersRange.End.Pointer,\n            commandReference.ParametersRange.End.Position,\n            commandReference.ParametersRange.End.Span,\n            commandReference.ParametersRange.End.Start,\n            commandReference.ParametersRange.End.Start.Character,\n            commandReference.ParametersRange.End.Start.Line,\n            commandReference.ParametersRange.End.Start.LinePosition,\n            commandReference.ParametersRange.End.Start.Path,\n            commandReference.ParametersRange.End.Start.Pointer,\n            commandReference.ParametersRange.End.Start.Position,\n            commandReference.ParametersRange.End.Start.Span,\n            commandReference.ParametersRange.End.Start.LinePositionSpan,\n            commandReference.ParametersRange.End.End,\n            commandReference.ParametersRange.End.End.Character,\n            commandReference.ParametersRange.End.End.Line,\n            commandReference.ParametersRange.End.End.LinePosition,\n            commandReference.ParametersRange.End.End.Path,\n            commandReference.ParametersRange.End.End.Pointer,\n            commandReference.ParametersRange.End.End.Position,\n            commandReference.ParametersRange.End.End.Span,\n            commandReference.ParametersRange.End.End.LinePositionSpan,\n            commandReference.ParametersRange.End.IsEmpty,\n            commandReference.ParametersRange.End.Length,\n            commandReference.ParametersRange.End.OverlapsWith,\n            commandReference.ParametersRange.End.Contains,\n            commandReference.ParametersRange.End.Intersect,\n            commandReference", "CodeBleu_score": 21.354896605460567}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tvar unknownCommandReferences = yarnFile.CommandReferences.Where(cr => !yarnFile.KnownCommands.Any(kc => kc.Name == cr.Name));\n\n    return unknownCommandReferences.Select(cr => new Diagnostic(\n        DiagnosticLevel.Warning,\n        $\"Unknown command '{cr.Name}'\",\n        DiagnosticCode.UnknownCommand,\n        new DiagnosticData(\n            $\"Unknown command '{cr.Name}'\",\n            $\"Command '{cr.Name}' is not defined.\",\n            DiagnosticLevel.Warning,\n            DiagnosticCode.UnknownCommand,\n            new DiagnosticData[] {\n                new DiagnosticData(\n                    $\"Unknown command '{cr.Name}'\",\n                    $\"Command '{cr.Name}' is not defined.\",\n                    DiagnosticLevel.Warning,\n                    DiagnosticCode.UnknownCommand,\n                    new DiagnosticData[] {\n                        new DiagnosticData(\n                            $\"Unknown command '{cr.Name}'\",\n                            $\"Command '{cr.Name}' is not defined.\",\n                            DiagnosticLevel.Warning,\n                            DiagnosticCode.UnknownCommand,\n                            new DiagnosticData[] {\n                                new DiagnosticData(\n                                    $\"Unknown command '{cr.Name}'\",\n                                    $\"Command '{cr.Name}' is not defined.\",\n                                    DiagnosticLevel.Warning,\n                                    DiagnosticCode.UnknownCommand,\n                                    new DiagnosticData[] {\n                                        new DiagnosticData(\n                                            $\"Unknown command '{cr.Name}'\",\n                                            $\"Command '{cr.Name}' is not defined.\",\n                                            DiagnosticLevel.Warning,\n                                            DiagnosticCode.UnknownCommand,\n                                            new DiagnosticData[] {\n                                                new DiagnosticData(\n                                                    $\"Unknown command '{cr.Name}'\",\n                                                    $\"Command '{cr.Name}' is not defined.\",\n                                                    DiagnosticLevel.Warning,\n                                                    DiagnosticCode.UnknownCommand,\n                                                    new DiagnosticData[] {\n                                                        new DiagnosticData(\n                                                            $\"Unknown command '{cr.Name}'\",", "CodeBleu_score": 20.04652073179211}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions() {\n        DocumentSelector = new DocumentSelector() {\n            Pattern = \"**/*.yarn\"\n        },\n        ResolveProvider = false,\n        CodeActionKinds = new CodeActionKind[] {\n            CodeActionKind.QuickFix\n        }\n    };\n}", "CodeBleu_score": 52.29854027624293}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarn\"),\n        ResolveProvider = false,\n        CodeActionKinds = new CodeActionKind[] { CodeActionKind.QuickFix }\n    };\n}", "CodeBleu_score": 62.85485988637419}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions() {\n        DocumentSelector = LspConstants.DocumentSelector,\n        ResolveProvider = false,\n        CodeActionKinds = new CodeActionKind[] {\n            CodeActionKind.QuickFix\n        }\n    };\n}", "CodeBleu_score": 55.337936619602004}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (this.variables.TryGetValue(variableName, out object foundValue)) {\n\t\tif (typeof(T).IsAssignableFrom(foundValue.GetType())) {\n\t\t\tresult = (T)foundValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(\"The variable is not of the correct type.\");\n\t\t}\n\t} else {\n\t\tresult = default;\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 57.88254756872904}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (this.variables.TryGetValue(variableName, out object foundValue)) {\n\t\tif (foundValue.GetType() == typeof(T)) {\n\t\t\tresult = (T)foundValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(\"The variable \" + variableName + \" is not of type \" + typeof(T) + \".\");\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 52.9570352224463}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (this.variables.TryGetValue(variableName, out object foundValue)) {\n\t\tif (foundValue is T) {\n\t\t\tresult = (T)foundValue;\n\t\t\treturn true;\n\t\t}\n\t\tthrow new ArgumentException($\"Variable {variableName} is not of type {typeof(T).Name}.\");\n\t}\n\tresult = default(T);\n\treturn false;\n}", "CodeBleu_score": 50.77615881775602}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.variableStorage = variableStorage;\n    this.library = new Library();\n    this.library.RegisterFunction(\"nameof\", nameof);\n    this.virtualMachine = new Yarn.VirtualMachine(this.library, this.variableStorage);\n    this.virtualMachine.StartDialogue();\n    this.lineParser = new LineParser();\n    this.lineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n    this.lineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n    this.lineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 32.32160901737362}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.variableStorage = variableStorage;\n    this.library = new Library();\n    this.virtualMachine = new VirtualMachine(this.library, this.variableStorage);\n    this.library.RegisterFunction(\"nameof\", nameof);\n    this.lineParser = new LineParser();\n    this.lineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n    this.lineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n    this.lineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 30.375974906375426}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.variableStorage = variableStorage;\n    this.library = new Library();\n    this.virtualMachine = new VirtualMachine(variableStorage, library);\n    this.lineParser = new LineParser();\n    this.lineParser.RegisterFunction(\"nameof\", nameof);\n    this.lineParser.RegisterMarkerProcessor(\"select\", SelectMarkerProcessor);\n    this.lineParser.RegisterMarkerProcessor(\"plural\", PluralMarkerProcessor);\n    this.lineParser.RegisterMarkerProcessor(\"ordinal\", OrdinalMarkerProcessor);\n}", "CodeBleu_score": 27.750807766913336}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\tif (UniqueID == null || UniqueID.Length == 0) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < Count; i++) {\n\t\tif (this[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 60.84233043640981}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (UniqueID == null || UniqueID == \"\") {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (UniqueID == LoopListBankData[i].UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 61.357825365955485}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < this.Count; i++) {\n\t\tif (UniqueID.Equals(this[i].UniqueID)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 50.18917873051218}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.Content = newContent;\n\tnewLoopListBankData.ID = System.Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 46.678678108927365}, {"code": "public void AddContent(object newContent){\n\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.Content = newContent;\n\tnewLoopListBankData.ID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 59.49483723670114}, {"code": "public void AddContent(object newContent){\n\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.Content = newContent;\n\tnewLoopListBankData.ID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 59.49483723670114}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t", "CodeBleu_score": 10.244596408321145}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = string.Format(\"{0} {1}\", prefabName, idx);\n\t}\n}", "CodeBleu_score": 65.20921035297552}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tthis.name = string.Format(\"{0} {1}\", m_PrefabName, idx);\n\t}\n\tif (m_IsUpdateClickUniqueID) {\n\t\tm_ClickUniqueID = ClickUniqueID;\n\t}\n\tif (m_IsUpdateClickObject) {\n\t\tm_ClickObject = ClickObject;\n\t}\n\tif (m_IsUpdateClickCallback) {\n\t\tm_ClickCallback = ClickCallback;\n\t}\n\tif (m_IsUpdateClickCallbackContext) {\n\t\tm_ClickCallbackContext = ClickCallbackContext;\n\t}\n}", "CodeBleu_score": 53.44059056967867}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t// Get the number of items to add from the input field.\n\tint numberOfItemsToAdd = 0;\n\tif (int.TryParse(m_InputFieldNumberOfItemsToAdd.text, out numberOfItemsToAdd)) {\n\t\tnumberOfItemsToAdd = Mathf.Max(numberOfItemsToAdd, 1);\n\t}\n\t// Add random integers between 0 and 10 to the list bank.\n\tfor (int i = 0; i < numberOfItemsToAdd; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\t// Update the total count of the scroll rect.\n\tm_InitOnStart.m_LoopScrollRect.RefreshCells();\n\t// Refresh the displayed cells.\n\tm_InitOnStart.m_LoopListBank.GetListLength();\n}", "CodeBleu_score": 47.1737533931899}, {"code": "private void OnButtonAddDataClickk(){\n\tint count = 0;\n    if (int.TryParse(m_InputField.text, out count)) {\n        count = Mathf.Max(1, count);\n        for (int i = 0; i < count; i++) {\n            m_ListBank.AddContent(Random.Range(0, 10));\n        }\n        m_InitOnStart.m_LoopScrollRect.RefreshCells();\n        m_InitOnStart.m_LoopListBank.GetListLength();\n    }\n}", "CodeBleu_score": 52.62984653217434}, {"code": "private void OnButtonAddDataClickk(){\n\tint count = 1;\n\tif (int.TryParse(m_InputFieldAddData.text, out count) && count > 0) {\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t\t}\n\t\tm_InitOnStart.m_LoopScrollRect.RefreshCells();\n\t\tm_InitOnStart.m_LoopListBank.GetListLength();\n\t\tm_InitOnStart.m_LoopListBank.m_TotalCount.text = \"Total Count: \" + m_InitOnStart.m_LoopListBank.GetListLength();\n\t}\n}", "CodeBleu_score": 47.67121988572161}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\tif (m_Content.childCount != m_PoolSize) {\n\t\tDebug.LogError(\"Pool size does not match content size.\");\n\t\treturn;\n\t}\n\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\tif (m_StartIndex > 0) {\n\t\tfor (int i = 0; i < m_StartIndex; i++) {\n\t\t\tm_Content.GetChild(i).gameObject.SetActive(false);\n\t\t\tm_Content.GetChild(i).name = \"Temp\";\n\t\t\tm_Content.GetChild(i).transform.SetParent(m_PrefabSource.ReturnObject.transform);\n\t\t}\n\t\tm_StartIndex = 0;\n\t}\n\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\tif (m_EndIndex < m_Content.childCount) {\n\t\tfor (int i = m_EndIndex; i < m_Content.childCount; i++) {\n\t\t\tm_Content.GetChild(i).gameObject.SetActive(false);\n\t\t\tm_Content.GetChild(i).name = \"Temp\";\n\t\t\tm_Content.GetChild(i).transform.SetParent(m_PrefabSource.ReturnObject.transform);\n\t\t}\n\t\tm_EndIndex = m_Content.childCount;\n\t}\n}", "CodeBleu_score": 38.55250145295409}, {"code": "protected override void ClearTempPool(){\n\tif (m_Content.childCount != m_StartIndex + m_EndIndex) {\n        Debug.LogError(\"ClearTempPool: Number of children in content pool does not match the number of items in the temporary pool. Expected \" + (m_StartIndex + m_EndIndex) + \" children, but found \" + m_Content.childCount + \" children.\");\n        return;\n    }\n\n    // Return all items to the prefab source.\n    for (int i = m_StartIndex; i < m_EndIndex; i++) {\n        m_Content.GetChild(i).GetComponent<Item>().ReturnToPrefabSource();\n    }\n\n    // Reset the start and end indices.\n    m_StartIndex = 0;\n    m_EndIndex = 0;\n}", "CodeBleu_score": 30.702122714299467}, {"code": "protected override void ClearTempPool(){\n\t// If the number of items in the temporary pool is less than the number of items in the prefab source, return all items to the prefab source.\n\tif (m_TempPool.Count < m_PrefabSource.ReturnObject.transform.childCount) {\n\t\t// Return all items to the prefab source.\n\t\tfor (int i = 0; i < m_TempPool.Count; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_TempPool[i]);\n\t\t}\n\t\t// Clear the temporary pool.\n\t\tm_TempPool.Clear();\n\t\t// Reset the start index.\n\t\tm_StartIndex = 0;\n\t\t// Reset the end index.\n\t\tm_EndIndex = m_PrefabSource.ReturnObject.transform.childCount;\n\t}\n\t// Otherwise, if the number of items in the temporary pool is greater than the number of items in the prefab source, return the items to the prefab source and reset the end index.\n\telse if (m_TempPool.Count > m_PrefabSource.ReturnObject.transform.childCount) {\n\t\t// Return the items to the prefab source.\n\t\tfor (int i = m_PrefabSource.ReturnObject.transform.childCount; i < m_TempPool.Count; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_TempPool[i]);\n\t\t}\n\t\t// Clear the temporary pool.\n\t\tm_TempPool.Clear();\n\t\t// Reset the end index.\n\t\tm_EndIndex = m_PrefabSource.ReturnObject.transform.childCount;\n\t}\n\t// Otherwise, if the number of items in the temporary pool is equal to the number of items in the prefab source, return the items to the prefab source and reset the start and end indices.\n\telse if (m_TempPool.Count == m_PrefabSource.ReturnObject.transform.childCount) {\n\t\t// Return the items to the prefab source.\n\t\tfor (int i = 0; i < m_TempPool.Count; i++) {\n\t\t\tm_PrefabSource.", "CodeBleu_score": 32.95561645630619}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\tif (!Network.isClient) {\n\t\treturn;\n\t}\n\tif (Network.isServer) {\n\t\tif (IsListening) {\n\t\t\tlocalScale = newScale;\n\t\t\tAnticipateScale(newScale, true);\n\t\t}\n\t} else {\n\t\tif (IsListening) {\n\t\t\tAnticipateScale(newScale, true);\n\t\t}\n\t}\n}", "CodeBleu_score": 17.31290922784264}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (IsServer) {\n\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\t\tif (AnticipationEnabled) {\n\t\t\t\t\tif (Networking.IsServer) {\n\t\t\t\t\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\t\t\t\t\tif (AnticipationEnabled) {\n\t\t\t\t\t\t\t\tif (Networking.IsServer) {\n\t\t\t\t\t\t\t\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\t\t\t\t\t\t\t\tif (AnticipationEnabled) {\n\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (AnticipationEnabled) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (AnticipationEnabled) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (AnticipationEnabled) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Networking.IsOwner(gameObject)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (AnticipationEnabled) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (", "CodeBleu_score": 16.048292528249117}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (isNetworkActive && isNetworkListening) {\n\t\tlocalScale = newScale;\n\t\tanticipatedScale = newScale;\n\t\tif (allowAuthority && !isServer) {\n\t\t\tUpdateScale(newScale);\n\t\t}\n\t\tUpdateAnticipationCountersAndTimes();\n\t}\n}", "CodeBleu_score": 13.122367340298128}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\tif (m_SendAnimationUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendAnimationUpdates.ToArray());\n\t\tm_SendAnimationUpdates.Clear();\n\t}\n\tif (m_SendParameterUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates.ToArray());\n\t\tm_SendParameterUpdates.Clear();\n\t}\n\tif (m_SendTriggerUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendAnimTriggerServerRpc(m_SendTriggerUpdates.ToArray());\n\t\tm_SendTriggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 38.00129793304188}, {"code": "private void FlushMessages(){\n\tif (m_NetworkAnimator == null) {\n    return;\n  }\n  if (m_SendAnimationUpdates.Count > 0) {\n    m_NetworkAnimator.SendAnimTriggerClientRpc(m_SendAnimationUpdates.ToArray());\n    m_SendAnimationUpdates.Clear();\n  }\n  if (m_SendParameterUpdates.Count > 0) {\n    m_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates.ToArray());\n    m_SendParameterUpdates.Clear();\n  }\n  if (m_SendTriggerUpdates.Count > 0) {\n    m_NetworkAnimator.SendAnimTriggerServerRpc(m_SendTriggerUpdates.ToArray());\n    m_SendTriggerUpdates.Clear();\n  }\n}", "CodeBleu_score": 40.887034161841015}, {"code": "private void FlushMessages(){\n\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates);\n    m_SendTriggerUpdates.Clear();\n    m_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates);\n    m_SendParameterUpdates.Clear();\n    m_NetworkAnimator.SendAnimTriggerServerRpc(m_SendAnimationUpdates);\n    m_SendAnimationUpdates.Clear();\n}", "CodeBleu_score": 20.966994759087708}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate)\n    {\n        FlushMessages();\n    }\n\n    if (m_NetworkAnimator.IsServerAuthoritative)\n    {\n        ProcessParameterUpdates();\n        CheckForAnimatorChanges();\n    }\n}", "CodeBleu_score": 9.973262351848753}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate)\n    {\n        if (m_NetworkAnimator.IsServerAuthoritative || m_NetworkAnimator.IsOwner)\n        {\n            FlushMessages();\n        }\n    }\n    else if (updateStage == NetworkUpdateStage.PostLateUpdate)\n    {\n        if (m_NetworkAnimator.IsServerAuthoritative)\n        {\n            m_ProcessParameterUpdates.Clear();\n            m_NetworkAnimator.UpdateParameters();\n        }\n        else if (m_NetworkAnimator.IsOwner)\n        {\n            m_ProcessParameterUpdates.Clear();\n            m_NetworkAnimator.UpdateParameters();\n        }\n        else\n        {\n            m_NetworkAnimator.CheckForAnimatorChanges();\n        }\n    }\n}", "CodeBleu_score": 27.75212975236969}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_NetworkAnimator.IsServerAuthoritative) {\n            FlushMessages();\n        }\n    }\n    else if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        if (!m_NetworkAnimator.IsServerAuthoritative) {\n            m_NetworkAnimator.UpdateParameters();\n        }\n\n        m_NetworkAnimator.CheckForAnimatorChanges();\n    }\n}", "CodeBleu_score": 20.85105519052903}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\tif (isServer) {\n    // If the object is owned by the server, set the object's authority state to ServerAuthority and disable interpolation.\n    if (isOwnedByServer) {\n      authorityState = ServerAuthority;\n      if (rigidbody != null) {\n        rigidbody.interpolation = RigidbodyInterpolation.None;\n      }\n    }\n    // If the object is owned by the client, set the object's authority state to ClientAuthority and enable interpolation.\n    else if (isOwnedByClient) {\n      authorityState = ClientAuthority;\n      if (rigidbody != null) {\n        rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n      }\n    }\n    // If the object is not owned by either the server or the client, set the object's authority state to NoneAuthority and disable interpolation.\n    else {\n      authorityState = NoneAuthority;\n      if (rigidbody != null) {\n        rigidbody.interpolation = RigidbodyInterpolation.None;\n      }\n    }\n  }\n  // If the object is not owned by the server, set the object's authority state to NoneAuthority and disable interpolation.\n  else {\n    authorityState = NoneAuthority;\n    if (rigidbody != null) {\n      rigidbody.interpolation = RigidbodyInterpolation.None;\n    }\n  }\n}", "CodeBleu_score": 24.299985712237554}, {"code": "private void UpdateOwnershipAuthority(){\n\tif (isServer) {\n\t\t// If the object is owned by the server, set the authority to true and make the rigidbody kinematic.\n\t\tif (isOwnedByServer) {\n\t\t\tauthority = true;\n\t\t\tif (rb != null) {\n\t\t\t\trb.isKinematic = true;\n\t\t\t}\n\t\t}\n\t\t// If the object is owned by a client, set the authority to false and make the rigidbody kinematic.\n\t\telse {\n\t\t\tauthority = false;\n\t\t\tif (rb != null) {\n\t\t\t\trb.isKinematic = true;\n\t\t\t}\n\t\t}\n\t}\n\t// If the object is owned by a client, set the authority to false and make the rigidbody kinematic.\n\telse {\n\t\tauthority = false;\n\t\tif (rb != null) {\n\t\t\trb.isKinematic = true;\n\t\t}\n\t}\n}", "CodeBleu_score": 17.373200404511284}, {"code": "private void UpdateOwnershipAuthority(){\n\tif (isServer) {\n\t\tif (isOwned) {\n\t\t\tif (ownershipAuthority == OwnershipAuthority.ServerAuthority) {\n\t\t\t\tif (rb != null) {\n\t\t\t\t\trb.isKinematic = false;\n\t\t\t\t\trb.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\t}\n\t\t\t} else if (ownershipAuthority == OwnershipAuthority.ClientAuthority) {\n\t\t\t\tif (rb != null) {\n\t\t\t\t\trb.isKinematic = true;\n\t\t\t\t\trb.interpolation = RigidbodyInterpolation.None;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (ownershipAuthority == OwnershipAuthority.ServerAuthority) {\n\t\t\t\tif (rb != null) {\n\t\t\t\t\trb.isKinematic = true;\n\t\t\t\t\trb.interpolation = RigidbodyInterpolation.None;\n\t\t\t\t}\n\t\t\t} else if (ownershipAuthority == OwnershipAuthority.ClientAuthority) {\n\t\t\t\tif (rb != null) {\n\t\t\t\t\trb.isKinematic = false;\n\t\t\t\t\trb.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (isClient) {\n\t\tif (isOwned) {\n\t\t\tif (ownershipAuthority == OwnershipAuthority.ServerAuthority) {\n\t\t\t\tif (rb != null) {\n\t\t\t\t\trb.isKinematic = true;\n\t\t\t\t\trb.interpolation = RigidbodyInterpolation.None;\n\t\t\t\t}\n\t\t\t} else if (ownershipAuthority == OwnershipAuthority.ClientAuthority) {\n\t\t\t\tif (rb != null) {\n\t\t\t\t\trb.isKinematic = false;\n\t\t\t\t\trb.inter", "CodeBleu_score": 24.56160399133862}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t// Determine which quaternion component to skip based on the compressed value's highest two bits.\n\tuint mask = 0x03;\n\tmask = mask << 30;\n\tuint skipBit = (compressed & mask) >> 30;\n\t// Decompress the remaining components, calculate their sum of squared magnitudes, and compute the skipped component to ensure the quaternion's unit length.\n\tquaternion.x = Mathf.Sqrt(Mathf.Max(0, (compressed & 0x3FFF) / 16384f));\n\tquaternion.y = Mathf.Sqrt(Mathf.Max(0, (compressed & 0x3FFF0000) / 16384f));\n\tquaternion.z = Mathf.Sqrt(Mathf.Max(0, (compressed & 0x3FFF00000000) / 16384f));\n\tquaternion.w = Mathf.Sqrt(Mathf.Max(0, (compressed & 0x3FFF000000000000) / 16384f));\n\tif (skipBit == 0) {\n\t\tquaternion.x = -quaternion.x;\n\t}\n\telse if (skipBit == 1) {\n\t\tquaternion.y = -quaternion.y;\n\t}\n\telse if (skipBit == 2) {\n\t\tquaternion.z = -quaternion.z;\n\t}\n\telse if (skipBit == 3) {\n\t\tquaternion.w = -quaternion.w;\n\t}\n}", "CodeBleu_score": 27.189548989069813}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\tint skipIndex = (int) (compressed >> 30);\n\tfloat x = 0f;\n\tfloat y = 0f;\n\tfloat z = 0f;\n\tfloat w = 0f;\n\tswitch (skipIndex) {\n\t\tcase 0:\n\t\t\tx = Mathf.Sqrt(Mathf.Max(0, compressed & 0x3FFFFFFF)) * Mathf.Sign(compressed);\n\t\t\ty = Mathf.Sqrt(Mathf.Max(0, (compressed >> 30) & 0x3FFFFFFF)) * Mathf.Sign(compressed >> 30);\n\t\t\tz = Mathf.Sqrt(Mathf.Max(0, (compressed >> 60) & 0x3FFFFFFF)) * Mathf.Sign(compressed >> 60);\n\t\t\tw = Mathf.Sqrt(Mathf.Max(0, (compressed >> 90) & 0x3FFFFFFF)) * Mathf.Sign(compressed >> 90);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\ty = Mathf.Sqrt(Mathf.Max(0, compressed & 0x3FFFFFFF)) * Mathf.Sign(compressed);\n\t\t\tx = Mathf.Sqrt(Mathf.Max(0, (compressed >> 30) & 0x3FFFFFFF)) * Mathf.Sign(compressed >> 30);\n\t\t\tz = Mathf.Sqrt(Mathf.Max(0, (compressed >> 60) & 0x3FFFFFFF)) * Mathf.Sign(compressed >> 60);\n\t\t\tw = Mathf.Sqrt(Mathf.Max(0, (compressed >> 90) & 0x3FFFFFFF)) * Mathf.Sign(compressed >> 90);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tz = Mathf.Sqrt(Mathf.Max(0, compressed & 0x3FFFFFFF)) * Mathf.Sign(compressed", "CodeBleu_score": 20.831991416021232}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t// Decompress the quaternion's components\n\tif ((compressed & 0xC0000000) == 0xC0000000) {\n\t\tquaternion.x = Mathf.Sqrt(Mathf.Max(0, 1 - (compressed & 0x3FFF) / 16384f));\n\t\tquaternion.y = Mathf.Sqrt(Mathf.Max(0, (compressed & 0x3FFF) / 16384f));\n\t\tquaternion.z = 0;\n\t\tquaternion.w = 0;\n\t} else if ((compressed & 0xC0000000) == 0x80000000) {\n\t\tquaternion.x = 0;\n\t\tquaternion.y = Mathf.Sqrt(Mathf.Max(0, 1 - (compressed & 0x3FFF) / 16384f));\n\t\tquaternion.z = Mathf.Sqrt(Mathf.Max(0, (compressed & 0x3FFF) / 16384f));\n\t\tquaternion.w = 0;\n\t} else if ((compressed & 0xC0000000) == 0x40000000) {\n\t\tquaternion.x = 0;\n\t\tquaternion.y = 0;\n\t\tquaternion.z = Mathf.Sqrt(Mathf.Max(0, 1 - (compressed & 0x3FFF) / 16384f));\n\t\tquaternion.w = Mathf.Sqrt(Mathf.Max(0, (compressed & 0x3FFF) / 16384f));\n\t} else {\n\t\tquaternion.x = Mathf.Sqrt(Mathf.Max(0, 1 - (compressed & 0x3FFF) / 16384f));\n\t\tquatern", "CodeBleu_score": 18.700641721418457}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t//Create a new AppDomain\n  AppDomain domain = AppDomain.CreateDomain(\"CLRBindingGen\");\n  //Load the assembly\n  Assembly assembly = Assembly.LoadFile(\"Assets/Dependencies/ILRuntimes/ILRuntime/ILRuntime.dll\");\n  //Initialize ILRuntime\n  Type type = assembly.GetType(\"ILRuntime.Runtime.Enviorment.AppDomain\");\n  object instance = Activator.CreateInstance(type, new object[] { null });\n  type.GetMethod(\"Initialize\").Invoke(instance, new object[] { null });\n  //Get the AppDomain instance\n  AppDomain appdomain = (AppDomain)instance;\n  //Create the BindingCodeGen instance\n  BindingCodeGen codeGen = new BindingCodeGen(appdomain);\n  //Generate binding code\n  codeGen.GenerateCLRBindingByAnalysis(\"Assets/Dependencies/ILRuntimes/ILRuntime/ILRuntime.Binding.dll\");\n  //Refresh the AssetDatabase\n  AssetDatabase.Refresh();\n}", "CodeBleu_score": 23.763541949161805}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t//Create a new AppDomain\n    AppDomain domain = AppDomain.CreateDomain(\"CrossBindingDomain\", null, AppDomain.CurrentDomain.SetupInformation);\n    //Load the assembly\n    Assembly assembly = Assembly.LoadFile(\"Assets/Dependencies/ILRuntimes/ILRuntime/ILRuntime.dll\");\n    //Initialize ILRuntime\n    using (domain) {\n        using (var app = new CrossBindingAdaptor(domain)) {\n            //Generate binding code\n            app.GenerateCLRBindingByAnalysis();\n            //Refresh the AssetDatabase\n            AssetDatabase.Refresh();\n        }\n    }\n}", "CodeBleu_score": 27.84513238735301}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\tAppDomain domain = new AppDomain();\n    Assembly assembly = Assembly.Load(\"Crossbind\");\n    domain.LoadAssembly(assembly);\n    domain.InitializeILRuntime(assembly);\n    domain.SetMainAssembly(assembly);\n\n    var types = assembly.GetTypes();\n    var type = types.FirstOrDefault(t => t.Name == \"CrossbindAdapt\");\n    if (type == null)\n        throw new Exception(\"CrossbindAdapt not found\");\n    var method = type.GetMethod(\"GenerateCLRBindingByAnalysis\");\n    if (method == null)\n        throw new Exception(\"GenerateCLRBindingByAnalysis not found\");\n    var result = method.Invoke(null, null);\n    if (result == null)\n        throw new Exception(\"GenerateCLRBindingByAnalysis returned null\");\n    var code = result as string;\n    if (string.IsNullOrEmpty(code))\n        throw new Exception(\"GenerateCLRBindingByAnalysis returned empty string\");\n    Debug.Log(\"Generated CLR bindings:\n\" + code);\n    File.WriteAllText(\"Assets/Dependencies/ILRuntime/GeneratedCode/CrossbindAdapt.cs\", code);\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 27.685113031209262}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(m_ConfigName);\n\tEditorGUILayout.PropertyField(m_ConfigFile);\n\tEditorGUILayout.PropertyField(m_ConfigFile2);\n\tEditorGUILayout.PropertyField(m_ConfigFile3);\n\tEditorGUILayout.PropertyField(m_ConfigFile4);\n\tEditorGUILayout.PropertyField(m_ConfigFile5);\n\tEditorGUILayout.PropertyField(m_ConfigFile6);\n\tEditorGUILayout.PropertyField(m_ConfigFile7);\n\tEditorGUILayout.PropertyField(m_ConfigFile8);\n\tEditorGUILayout.PropertyField(m_ConfigFile9);\n\tEditorGUILayout.PropertyField(m_ConfigFile10);\n\tEditorGUILayout.PropertyField(m_ConfigFile11);\n\tEditorGUILayout.PropertyField(m_ConfigFile12);\n\tEditorGUILayout.PropertyField(m_ConfigFile13);\n\tEditorGUILayout.PropertyField(m_ConfigFile14);\n\tEditorGUILayout.PropertyField(m_ConfigFile15);\n\tEditorGUILayout.PropertyField(m_ConfigFile16);\n\tEditorGUILayout.PropertyField(m_ConfigFile17);\n\tEditorGUILayout.PropertyField(m_ConfigFile18);\n\tEditorGUILayout.PropertyField(m_ConfigFile19);\n\tEditorGUILayout.PropertyField(m_ConfigFile20);\n\tEditorGUILayout.PropertyField(m_ConfigFile21);\n\tEditorGUILayout.PropertyField(m_ConfigFile22);\n\tEditorGUILayout.PropertyField(m_ConfigFile23);\n\tEditorGUILayout.PropertyField(m_ConfigFile24);\n\tEditorGUILayout.PropertyField(m_ConfigFile25);\n\tEditorGUILayout.PropertyField(m_ConfigFile26);\n\tEditorGUILayout.PropertyField(m_ConfigFile27);\n\tEditorGUILayout.PropertyField(m_ConfigFile28);\n\tEditorGUILayout.PropertyField(m_ConfigFile29);\n\tEditorGUILayout.", "CodeBleu_score": 23.56151669108056}, {"code": "public override void OnInspectorGUI(){\n\tserializedObject.Update();\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && IsPrefabInHierarchy());\n\tEditorGUILayout.PropertyField(m_ConfigName);\n\tEditorGUILayout.PropertyField(m_ConfigDescription);\n\tEditorGUILayout.PropertyField(m_ConfigData);\n\tEditorGUILayout.PropertyField(m_ConfigPriority);\n\tEditorGUILayout.PropertyField(m_ConfigType);\n\tEditorGUILayout.PropertyField(m_ConfigTags);\n\tEditorGUILayout.PropertyField(m_ConfigPrefab);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabParent);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabInstantiate);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabDontDestroy);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabDontDestroyChildren);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabHideFlags);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabDontSave);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabDontUnloadUnusedAsset);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabDontDestroyOnLoad);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefab);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefabParent);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefabInstantiate);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefabDontDestroy);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefabDontDestroyChildren);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefabHideFlags);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefabDontSave);\n\tEditorGUILayout.PropertyField(m_ConfigPrefabSourcePrefabDontUnloadUnusedAsset);\n\tEditorGUILayout.PropertyField", "CodeBleu_score": 25.23065291032462}, {"code": "public override void OnInspectorGUI(){\n\tserializedObject.Update();\n    EditorGUILayout.PropertyField(m_ConfigName);\n    EditorGUILayout.PropertyField(m_ConfigPath);\n    EditorGUILayout.PropertyField(m_ConfigType);\n    EditorGUILayout.PropertyField(m_ConfigPriority);\n    EditorGUILayout.PropertyField(m_ConfigVersion);\n    EditorGUILayout.PropertyField(m_ConfigDescription);\n    EditorGUILayout.PropertyField(m_ConfigAuthor);\n    EditorGUILayout.PropertyField(m_ConfigHelpURL);\n    EditorGUILayout.PropertyField(m_ConfigHelpEmail);\n    EditorGUILayout.PropertyField(m_ConfigHelpTelephone);\n    EditorGUILayout.PropertyField(m_ConfigHelpAddress);\n    EditorGUILayout.PropertyField(m_ConfigHelpSocial);\n    EditorGUILayout.PropertyField(m_ConfigHelpWebsite);\n    EditorGUILayout.PropertyField(m_ConfigHelpTwitter);\n    EditorGUILayout.PropertyField(m_ConfigHelpFacebook);\n    EditorGUILayout.PropertyField(m_ConfigHelpDiscord);\n    EditorGUILayout.PropertyField(m_ConfigHelpGithub);\n    EditorGUILayout.PropertyField(m_ConfigHelpReddit);\n    EditorGUILayout.PropertyField(m_ConfigHelpSteam);\n    EditorGUILayout.PropertyField(m_ConfigHelpXbox);\n    EditorGUILayout.PropertyField(m_ConfigHelpPlaystation);\n    EditorGUILayout.PropertyField(m_ConfigHelpNintendo);\n    EditorGUILayout.PropertyField(m_ConfigHelpOculus);\n    EditorGUILayout.PropertyField(m_ConfigHelpEpic);\n    EditorGUILayout.PropertyField(m_ConfigHelpUbisoft);\n    EditorGUILayout.PropertyField(m_ConfigHelpSteamworks);\n    EditorGUILayout.PropertyField(m_ConfigHelpGoogle);\n    EditorGUILayout.PropertyField(m_ConfigHelpApple);\n    EditorGUILayout.PropertyField(m_ConfigHelpYoutube);\n    EditorGUILayout.PropertyField(m_ConfigHelpTwitch);\n    EditorGUILayout.", "CodeBleu_score": 24.970475345612876}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\tHashSet<string> defaultSceneNames = new HashSet<string>(new string[] {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Game.unity\",\n        \"Assets/Scenes/EndGame.unity\"\n    });\n\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n    foreach (string sceneName in defaultSceneNames) {\n        scenes.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n\n    EditorBuildSettings.scenes = scenes.ToArray();\n\n    Debug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 60.502200008293705}, {"code": "public static void DefaultScenes(){\n\tHashSet<string> defaultSceneNames = new HashSet<string>();\n\tdefaultSceneNames.Add(\"Assets/Scenes/MainMenu.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/Game.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/WinScreen.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/LoseScreen.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/Settings.unity\");\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tscenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Default Scenes Set\");\n}", "CodeBleu_score": 63.021001662456136}, {"code": "public static void DefaultScenes(){\n\tHashSet<string> defaultSceneNames = new HashSet<string>();\n\tdefaultSceneNames.Add(\"Assets/Scenes/MainMenu.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/Game.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/GameOver.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/Credits.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/Settings.unity\");\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tscenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Default scenes have been set to the default.\");\n}", "CodeBleu_score": 62.979447875405036}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\tEditorGUILayout.BeginVertical();\n    EditorGUILayout.LabelField(\"Select a helper type or enter a custom helper name.\", EditorStyles.boldLabel);\n    EditorGUILayout.HelpBox(\"If you are using a custom helper, you must enter the name of the helper here.\", MessageType.Info);\n    EditorGUILayout.PropertyField(helperType);\n    if (helperType.enumValueIndex == (int)HelperType.Custom) {\n        EditorGUILayout.PropertyField(customHelper);\n        if (string.IsNullOrEmpty(customHelper.stringValue)) {\n            EditorGUILayout.HelpBox(\"You must enter a custom helper name.\", MessageType.Error);\n        }\n    }\n    EditorGUILayout.EndVertical();\n}", "CodeBleu_score": 30.946505765105886}, {"code": "public void Draw(){\n\t// Get the selected index\n\t\t\tint selectedIndex = (int)EditorGUILayout.IntPopup(new GUIContent(\"Helper Type\", \"The type of helper to use. If none is selected, the custom helper field will be shown.\"), selectedIndex, helperTypeNames, helperTypeIndices);\n\t\t\t// If the selected index is -1, it means that the custom helper field should be shown\n\t\t\tif (selectedIndex == -1) {\n\t\t\t\t// Draw the custom helper field\n\t\t\t\tEditorGUILayout.PropertyField(customHelperProperty, new GUIContent(\"Custom Helper\", \"The custom helper to use. This is only shown if no helper type is selected.\"));\n\t\t\t\t// If the custom helper is not set, display an error message\n\t\t\t\tif (customHelperProperty.objectReferenceValue == null) {\n\t\t\t\t\tEditorGUILayout.HelpBox(\"A custom helper must be set if no helper type is selected.\", MessageType.Error);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the selected index is not -1, it means that a helper type is selected\n\t\t\telse {\n\t\t\t\t// Draw the helper type field\n\t\t\t\tEditorGUILayout.Popup(new GUIContent(\"Helper Type\", \"The type of helper to use. If none is selected, the custom helper field will be shown.\"), selectedIndex, helperTypeNames);\n\t\t\t\t// If the custom helper is set, display an error message\n\t\t\t\tif (customHelperProperty.objectReferenceValue != null) {\n\t\t\t\t\tEditorGUILayout.HelpBox(\"A custom helper cannot be set if a helper type is selected.\", MessageType.Error);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "CodeBleu_score": 26.373073740142427}, {"code": "public void Draw(){\n\tserializedObject.Update();\n    SerializedProperty selectedHelperIndex = serializedObject.FindProperty(\"selectedHelperIndex\");\n    SerializedProperty customHelper = serializedObject.FindProperty(\"customHelper\");\n    SerializedProperty customHelperType = serializedObject.FindProperty(\"customHelperType\");\n    SerializedProperty customHelperName = serializedObject.FindProperty(\"customHelperName\");\n\n    EditorGUILayout.PropertyField(selectedHelperIndex);\n\n    if (selectedHelperIndex.intValue == (int)HelperType.Custom) {\n        EditorGUILayout.PropertyField(customHelper);\n\n        if (customHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\"You must set a custom helper to use it.\", MessageType.Error);\n        } else {\n            EditorGUILayout.PropertyField(customHelperType);\n            EditorGUILayout.PropertyField(customHelperName);\n        }\n    }\n\n    serializedObject.ApplyModifiedProperties();\n}", "CodeBleu_score": 31.376978669465583}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t#if UNITY_EDITOR\n\t\tif (!UnityEditor.EditorApplication.isPlaying) {\n\t\t\tif (UnityEditor.EditorUserBuildSettings.activeBuildTarget == UnityEditor.BuildTarget.Android) {\n\t\t\t\tUnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup (UnityEditor.BuildTargetGroup.Android, \"\");\n\t\t\t} else if (UnityEditor.EditorUserBuildSettings.activeBuildTarget == UnityEditor.BuildTarget.iOS) {\n\t\t\t\tUnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup (UnityEditor.BuildTargetGroup.iOS, \"\");\n\t\t\t} else if (UnityEditor.EditorUserBuildSettings.activeBuildTarget == UnityEditor.BuildTarget.StandaloneWindows) {\n\t\t\t\tUnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup (UnityEditor.BuildTargetGroup.Standalone, \"\");\n\t\t\t} else if (UnityEditor.EditorUserBuildSettings.activeBuildTarget == UnityEditor.BuildTarget.StandaloneWindows64) {\n\t\t\t\tUnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup (UnityEditor.BuildTargetGroup.Standalone, \"\");\n\t\t\t} else if (UnityEditor.EditorUserBuildSettings.activeBuildTarget == UnityEditor.BuildTarget.StandaloneOSX) {\n\t\t\t\tUnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup (UnityEditor.BuildTargetGroup.Standalone, \"\");\n\t\t\t} else if (UnityEditor.EditorUserBuildSettings.activeBuildTarget == UnityEditor.BuildTarget.StandaloneLinux64) {\n\t\t\t\tUnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup (UnityEditor.BuildTargetGroup.Standalone, \"\");\n\t\t\t}\n\t\t}\n\t#endif", "CodeBleu_score": 24.822991765360413}, {"code": "public static void DisableAllLogs(){\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_ERROR\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_WARNING\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_INFO\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_DEBUG\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_VERBOSE\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_TRACE\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_DETAIL\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_ALL\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_ERROR_ONLY\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_WARNING_ONLY\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_INFO_ONLY\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_DEBUG_ONLY\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_VERBOSE_ONLY\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_TRACE_ONLY\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"ENABLE_LOGGING_DETAIL_ONLY\");\n}", "CodeBleu_score": 27.30412217137911}, {"code": "public static void DisableAllLogs(){\n\t// Remove the general logging symbol\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING\");\n\n\t// Remove symbols for specific logs\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_DEBUG\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_INFO\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_WARNING\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_ERROR\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_CRITICAL\");\n\n\t// Remove symbols for logs above a certain level\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_LEVEL_DEBUG\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_LEVEL_INFO\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_LEVEL_WARNING\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_LEVEL_ERROR\");\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING_LEVEL_CRITICAL\");\n}", "CodeBleu_score": 30.93560889566809}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\treturn (GameFrameworkComponent)current.Value.GetComponent(type);\n}", "CodeBleu_score": 8.9709624337369}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\treturn current.Value.GetComponent(type);\n}", "CodeBleu_score": 8.09942454832603}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tGameFrameworkComponent current = head;\n\n    while (current != null) {\n        if (current.GetType() == type) {\n            return current;\n        }\n        current = current.Next;\n    }\n\n    return null;\n}", "CodeBleu_score": 58.02482965466207}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\tLog.Info(\"Shutting down...\");\n\tif (s_GameFrameworkComponents.Count > 0) {\n\t\tif (s_GameFrameworkComponents.TryGetValue(typeof(BaseComponent), out var baseComponent)) {\n\t\t\tbaseComponent.Shutdown();\n\t\t}\n\t\ts_GameFrameworkComponents.Clear();\n\t}\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 23.783815690877653}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\tLog.Info(\"Shutting down game...\");\n    if (s_BaseComponent != null) {\n        s_BaseComponent.Shutdown();\n    }\n    s_GameFrameworkComponents.Clear();\n    switch (shutdownType) {\n        case ShutdownType.RestartScene:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n        case ShutdownType.None:\n            break;\n    }\n}", "CodeBleu_score": 27.367838940668697}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\tLog.Info(\"Shutting down game...\");\n\tif (s_BaseComponent != null) {\n\t\ts_BaseComponent.Shutdown();\n\t}\n\ts_GameFrameworkComponents.Clear();\n\tif (shutdownType == ShutdownType.Restart) {\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t}\n\telse if (shutdownType == ShutdownType.Quit) {\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 24.257103642553613}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\tbase.Awake ();\n    if (m_ConfigManager == null) {\n        Log.Fatal (\"ConfigManager is invalid.\");\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnConfigReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnConfigReadDataFailure;\n\n    if ((m_ReadDataSuccessEventHandler != null) && (m_ConfigManager.HasReadDataSuccessEventHandler ())) {\n        m_ConfigManager.ReadDataSuccess -= m_ReadDataSuccessEventHandler;\n        m_ConfigManager.ReadDataSuccess += m_ReadDataSuccessEventHandler;\n    }\n\n    if ((m_ReadDataFailureEventHandler != null) && (m_ConfigManager.HasReadDataFailureEventHandler ())) {\n        m_ConfigManager.ReadDataFailure -= m_ReadDataFailureEventHandler;\n        m_ConfigManager.ReadDataFailure += m_ReadDataFailureEventHandler;\n    }\n\n    if ((m_UpdateDataSuccessEventHandler != null) && (m_ConfigManager.HasUpdateDataSuccessEventHandler ())) {\n        m_ConfigManager.UpdateDataSuccess -= m_UpdateDataSuccessEventHandler;\n        m_ConfigManager.UpdateDataSuccess += m_UpdateDataSuccessEventHandler;\n    }\n\n    if ((m_UpdateDataFailureEventHandler != null) && (m_ConfigManager.HasUpdateDataFailureEventHandler ())) {\n        m_ConfigManager.UpdateDataFailure -= m_UpdateDataFailureEventHandler;\n        m_ConfigManager.UpdateDataFailure += m_UpdateDataFailureEventHandler;\n    }\n\n    if ((m_LoadDataSuccessEventHandler != null) && (m_ConfigManager.HasLoadDataSuccessEventHandler ())) {\n        m_ConfigManager.LoadDataSuccess -= m_LoadDataSuccessEventHandler;\n        m_ConfigManager.LoadDataSuccess += m_LoadDataSuccessEventHandler;\n    }\n\n    if ((m_LoadDataFailureEventHandler != null) && (m_ConfigManager.HasLoadDataFailureEventHandler ())) {\n        m_ConfigManager.LoadDataFailure -= m_LoadDataFailureEventHandler;\n        m_ConfigManager.LoadDataFailure += m_LoadDataFailureEventHandler;\n    }\n\n    if ((m_DependencyAssetEvent", "CodeBleu_score": 30.39844787364031}, {"code": "protected override void Awake(){\n\tbase.Awake ();\n\n    ConfigManager configManager = GameFrameworkEntry.GetModule<IConfigManager> ();\n    if (configManager == null) {\n        Log.Fatal (\"Config Manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager = configManager;\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\n    if ((m_Flags & ConfigManagerFlags.Update) != 0) {\n        m_ConfigManager.Update += OnUpdate;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.DependencyAsset) != 0) {\n        m_ConfigManager.DependencyAsset += OnDependencyAsset;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.Resource) != 0) {\n        m_ConfigManager.Resource += OnResource;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.Load) != 0) {\n        m_ConfigManager.Load += OnLoad;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.LoadAsset) != 0) {\n        m_ConfigManager.LoadAsset += OnLoadAsset;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.LoadScene) != 0) {\n        m_ConfigManager.LoadScene += OnLoadScene;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.Unload) != 0) {\n        m_ConfigManager.Unload += OnUnload;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.UnloadAsset) != 0) {\n        m_ConfigManager.UnloadAsset += OnUnloadAsset;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.UnloadScene) != 0) {\n        m_ConfigManager.UnloadScene += OnUnloadScene;\n    }\n\n    if ((m_Flags & ConfigManagerFlags.Shutdown) != 0) {\n        m_ConfigManager.Shutdown += OnShutdown;\n    }\n\n    m_ConfigManager.ReadData (m_ConfigName);\n}", "CodeBleu_score": 40.76046309714043}, {"code": "protected override void Awake(){\n\tbase.Awake ();\n\n    if (m_ConfigManager == null) {\n        Log.Fatal (\"Config manager is invalid.\");\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\n    if (m_ConfigManager.HasReadDataSuccessEvent ()) {\n        m_ConfigManager.ReadDataSuccess -= OnReadDataSuccess;\n        m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    }\n\n    if (m_ConfigManager.HasReadDataFailureEvent ()) {\n        m_ConfigManager.ReadDataFailure -= OnReadDataFailure;\n        m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    }\n\n    if (m_ConfigManager.HasUpdateDataSuccessEvent ()) {\n        m_ConfigManager.UpdateDataSuccess -= OnUpdateDataSuccess;\n        m_ConfigManager.UpdateDataSuccess += OnUpdateDataSuccess;\n    }\n\n    if (m_ConfigManager.HasUpdateDataFailureEvent ()) {\n        m_ConfigManager.UpdateDataFailure -= OnUpdateDataFailure;\n        m_ConfigManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n\n    if (m_ConfigManager.HasDeleteDataSuccessEvent ()) {\n        m_ConfigManager.DeleteDataSuccess -= OnDeleteDataSuccess;\n        m_ConfigManager.DeleteDataSuccess += OnDeleteDataSuccess;\n    }\n\n    if (m_ConfigManager.HasDeleteDataFailureEvent ()) {\n        m_ConfigManager.DeleteDataFailure -= OnDeleteDataFailure;\n        m_ConfigManager.DeleteDataFailure += OnDeleteDataFailure;\n    }\n\n    if (m_ConfigManager.HasLoadDataSuccessEvent ()) {\n        m_ConfigManager.LoadDataSuccess -= OnLoadDataSuccess;\n        m_ConfigManager.LoadDataSuccess += OnLoadDataSuccess;\n    }\n\n    if (m_ConfigManager.HasLoadDataFailureEvent ()) {\n        m_ConfigManager.LoadDataFailure -= OnLoadDataFailure;\n        m_ConfigManager.LoadDataFailure += OnLoadDataFailure;\n    }\n\n    if (m_ConfigManager.HasLoadAllDataSuccessEvent ()) {", "CodeBleu_score": 36.836845479109066}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif (configAsset is TextAsset) {\n\t\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\t\treturn configManager.ParseData(configAssetName, configAsset, userData, ParseDataType.Bytes);\n\t\t}\n\t\telse {\n\t\t\treturn configManager.ParseData(configAssetName, configAsset, userData, ParseDataType.Text);\n\t\t}\n\t}\n\telse {\n\t\tLog.Warning(\"ConfigManager\", \"ReadData\", \"Config asset is not a TextAsset: \" + configAssetName);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.908632324405055}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif (configManager == null) {\n\t\tLog.Warning(\"ConfigManager is null.\");\n\t\treturn false;\n\t}\n\tif (configAsset == null) {\n\t\tLog.Warning(\"Config asset is null.\");\n\t\treturn false;\n\t}\n\tif (configAssetName == null) {\n\t\tLog.Warning(\"Config asset name is null.\");\n\t\treturn false;\n\t}\n\tif (!configAssetName.EndsWith(\".bytes\")) {\n\t\treturn configManager.ParseData(configAssetName, configAsset, userData);\n\t}\n\treturn configManager.ParseBytes(configAssetName, configAsset, userData);\n}", "CodeBleu_score": 48.845099212889764}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif (configAsset is TextAsset) {\n\t\treturn ReadTextAssetData(configManager, configAssetName, configAsset as TextAsset, userData);\n\t}\n\telse {\n\t\tLog.Warning($\"ConfigManager: ReadData: {configAssetName} is not a TextAsset.\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 40.91609141212143}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\ttry {\n\t\tMemoryStream stream = new MemoryStream(configBytes, startIndex, length);\n\t\tBinaryReader reader = new BinaryReader(stream);\n\t\twhile (stream.Position < stream.Length) {\n\t\t\tstring configName = reader.ReadString();\n\t\t\tstring configValue = reader.ReadString();\n\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\tLog.Warning(\"Could not add config \\\"{0}\\\" with value \\\"{1}\\\"\", configName, configValue);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLog.Exception(e);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 45.71423693349832}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\tMemoryStream memStream = new MemoryStream(configBytes, startIndex, length);\n\tBinaryReader binaryReader = new BinaryReader(memStream);\n\ttry {\n\t\twhile (memStream.Position < memStream.Length) {\n\t\t\tstring configName = binaryReader.ReadString();\n\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\tif (!configManager.AddConfig(configName, configValue, userData)) {\n\t\t\t\tLog.Warning(\"ConfigManager\", \"ParseData\", \"Config entry \" + configName + \" could not be added to config manager. Config manager may be full.\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLog.Error(\"ConfigManager\", \"ParseData\", \"Exception parsing config data: \" + e.Message);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 53.432025112057914}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\ttry {\n        using (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n            using (BinaryReader reader = new BinaryReader(stream)) {\n                string name = reader.ReadString();\n                string value = reader.ReadString();\n                while (name != \"\") {\n                    if (!configManager.AddConfig(name, value)) {\n                        Log.Warning(\"ConfigManager.AddConfig failed: \" + name);\n                    }\n                    name = reader.ReadString();\n                    value = reader.ReadString();\n                }\n            }\n        }\n    }\n    catch (Exception e) {\n        Log.Exception(\"ConfigManager.ParseData failed: \" + e.Message);\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 50.95194927314136}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\tm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 71.86736951451492}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\tm_ResourceComponent.UnloadAsset(configAsset);\n\t\n}", "CodeBleu_score": 71.86736951451492}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t// Get the resource component\n\tResourceComponent m_ResourceComponent = configManager.GetComponent<ResourceComponent>();\n\t\n\t// Unload the asset\n\tm_ResourceComponent.UnloadAsset(configAsset);\n\t\n}", "CodeBleu_score": 44.855226000510925}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs eventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n        eventArgs.lastActiveScene = lastActiveScene;\n        eventArgs.activeScene = activeScene;\n        return eventArgs;\n    }", "CodeBleu_score": 53.16382639818921}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs obj = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n  obj.lastActiveScene = lastActiveScene;\n  obj.activeScene = activeScene;\n  return obj;\n }", "CodeBleu_score": 48.577153004069665}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tvar args = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n\t\targs.lastActiveScene = lastActiveScene;\n\t\targs.activeScene = activeScene;\n\t\treturn args;\n\t}", "CodeBleu_score": 36.87718824853297}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t// Check if the scene asset name is valid.\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is null or empty.\");\n\t\treturn;\n\t}\n\t// Check if the name starts with \"Assets/\" and ends with \".unity\".\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name must start with \\\"Assets/\\\" and end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\t// Load the scene.\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 63.3172658751936}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is null or empty!\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name must start with \\\"Assets/\\\" and end with \\\".unity\\\"!\");\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 63.23414994837253}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t// Check if the scene asset name is valid\n    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    // Check if the name starts with \"Assets/\" and ends with \".unity\"\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name must start with \\\"Assets/\\\" and end with \\\".unity\\\".\");\n        return;\n    }\n\n    // Load the scene\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 70.06864086206748}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t// Get registered feature implementations and append their names to the binaries patch feature enumerations.\n\tfor (TSharedPtr<IBinariesDiffPatchFeature> Featue : IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>()) {\n\t\t// Append the feature name to the binaries patch feature enumerations.\n\t\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(Featue->GetFeatureName());\n\t}\n\n\t// Set up callbacks for when modular features are registered or unregistered.\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 50.978009429037186}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t// This code will execute after your module is loaded into memory (but after global variables are initialized, of course.)\n\t\n\t// Register the feature enumerations\n\tIModularFeatures::Get().RegisterModularFeatureName(EBinariesPatchFeature::BinariesPatchFeature, TEXT(\"BinariesPatchFeature\"));\n\t\n\t// Register the feature callbacks\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&THotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&THotPatcherTemplateHelper::RemoveEnumeraters<EBinariesPatchFeature>);\n\t\n\t// Register the feature implementations\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IBinariesDiffPatchFeature::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IBinariesPatchFeature::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IHotPatcherFeature::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IHotPatcherAssetDependencyPublic::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IHotPatcherAssetDependencyPrivate::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IHotPatcherAssetDependencyPublic::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IHotPatcherAssetDependencyPrivate::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EBinariesPatchFeature::BinariesPatchFeature, IHotPatcherAssetDependencyPublic::Get());\n\tIModularFeatures::Get().RegisterModularFeature(EB", "CodeBleu_score": 36.3351561718247}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\tIModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>().Append(\n        [](IBinariesDiffPatchFeature & Feature) {\n            return Feature.GetFeatureName();\n        });\n\n    IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(\n        [](IModularFeatures::IModularFeature & Feature) {\n            if (Feature.GetModularFeature().Get() == IBinariesDiffPatchFeature::GetModularFeatureName()) {\n                FBinariesPatchFeatureModule::Get().OnModularFeatureRegistered(Feature);\n            }\n        });\n\n    IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(\n        [](IModularFeatures::IModularFeature & Feature) {\n            if (Feature.GetModularFeature().Get() == IBinariesDiffPatchFeature::GetModularFeatureName()) {\n                FBinariesPatchFeatureModule::Get().OnModularFeatureUnregistered(Feature);\n            }\n        });\n}", "CodeBleu_score": 49.49803834281498}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\tFString CommandlineCopy = Commandline;\n\tTArray<FString> Tokens;\n\tTArray<FString> Values;\n\tTArray<FString> Result;\n\tif (CommandlineCopy.Contains(Token)) {\n\t\tCommandlineCopy.Split(Token,&Tokens,&Values);\n\t\tif (Values.Num() > 0) {\n\t\t\tValues[0].Split(TEXT(\",\"),&Result);\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 51.668632509131896}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\tTMap<FString,FString> CommandlineMap;\n\tCommandline.ParseIntoArray(CommandlineMap,TEXT(\" \"));\n\tif (CommandlineMap.Contains(Token)) {\n\t\treturn CommandlineMap[Token].ParseIntoArray(TEXT(\",\"));\n\t}\n\treturn TArray<FString>();\n}", "CodeBleu_score": 48.08367594322361}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\tTArray<FString> Result;\n\tTArray<FString> Tokens;\n\tFString KeyValueString = FString::Printf(TEXT(\"%s\"),*Commandline);\n\tif (KeyValueString.IsEmpty()) {\n\t\tUE_LOG(LogHotPatcher,Warning,TEXT(\"Commandline is empty.\"));\n\t\treturn Result;\n\t}\n\tKeyValueString.ParseIntoArray(Tokens,TEXT(\" \"),true);\n\tTMap<FString,FString> KeyValueMap;\n\tfor (auto& KeyValuePair:Tokens)\n\t{\n\t\tFString Key;\n\t\tFString Value;\n\t\tKeyValuePair.Split(TEXT(\"=\"),&Key,&Value);\n\t\tKeyValueMap.Add(Key,Value);\n\t}\n\tif (KeyValueMap.Contains(Token))\n\t{\n\t\tFString Value = KeyValueMap.FindRef(Token);\n\t\tValue.ParseIntoArray(Result,TEXT(\",\"),true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 51.183919726505664}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\tFString CommandletName = GetCommandletArg();\n\tif (CommandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\treturn CommandletName.Equals(TEXT(\"cook\"));\n}", "CodeBleu_score": 20.16084045479897}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\tFString CommandletName = CommandletHelper::GetCommandletName();\n\treturn !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 23.759467527633234}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\tFString CommandletName = GetCommandletArg(TEXT(\"CommandletName\"));\n\treturn !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 28.414175885198787}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452] [HotPatcher] [HotPatcherCommandletBase::Update] [1186.8ms]\n\t// [2019/06/24 15:20:01.452", "CodeBleu_score": 3.8912632553219986}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t//FString CommandletName = FString(TEXT(\"U\"));\n    //CommandletName += GetClass()->GetName();\n    //FParse::Value(FCommandLine::Get(), TEXT(\"CommandletName=\"), CommandletName);\n    //if (CommandletName.IsEmpty()) {\n    //    CommandletName = GetClass()->GetName();\n    //}\n    //FString ProjectName = GetDefault<UHotPatcherSettings>()->ProjectName;\n    //FParse::Value(FCommandLine::Get(), TEXT(\"ProjectName=\"), ProjectName);\n    //if (ProjectName.IsEmpty()) {\n    //    ProjectName = GetDefault<UHotPatcherSettings>()->ProjectName;\n    //}\n    //FString ProjectVersion = GetDefault<UHotPatcherSettings>()->ProjectVersion;\n    //FParse::Value(FCommandLine::Get(), TEXT(\"ProjectVersion=\"), ProjectVersion);\n    //if (ProjectVersion.IsEmpty()) {\n    //    ProjectVersion = GetDefault<UHotPatcherSettings>()->ProjectVersion;\n    //}\n    //FString ServerURL = GetDefault<UHotPatcherSettings>()->ServerURL;\n    //FParse::Value(FCommandLine::Get(), TEXT(\"ServerURL=\"), ServerURL);\n    //if (ServerURL.IsEmpty()) {\n    //    ServerURL = GetDefault<UHotPatcherSettings>()->ServerURL;\n    //}\n    //FString ServerKey = GetDefault<UHotPatcherSettings>()->ServerKey;\n    //FParse::Value(FCommandLine::Get(), TEXT(\"ServerKey=\"), ServerKey);\n    //if (ServerKey.IsEmpty()) {\n    //    ServerKey = GetDefault<UHotPatcherSettings>()->ServerKey;\n    //}\n    //FString ServerSecret = GetDefault<UHotPatcherSettings>()->ServerSecret;\n    //FParse::Value(FCommandLine::Get(), TEXT(\"ServerSecret=\"), ServerSecret);\n    //if (ServerSecret.IsEmpty()) {\n    //    ServerSecret = GetDefault<UHotPatcherSettings>()->ServerSecret;\n    //}\n    //FString ServerProject = GetDefault<U", "CodeBleu_score": 3.8912652322514454}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t// 1. Update the counter with the commandlet name\n\tFString CommandletName;\n\t{\n\t\tFString ParamsCopy = Params;\n\t\tint32 CommandletNameIndex = ParamsCopy.Find(TEXT(\"Commandlet=\"));\n\t\tif (CommandletNameIndex != INDEX_NONE) {\n\t\t\tCommandletNameIndex += 10;\n\t\t\tCommandletName = ParamsCopy.Mid(CommandletNameIndex);\n\t\t\tint32 CommandletNameEndIndex = CommandletName.Find(TEXT(\" \"));\n\t\t\tif (CommandletNameEndIndex != INDEX_NONE) {\n\t\t\t\tCommandletName = CommandletName.Left(CommandletNameEndIndex);\n\t\t\t}\n\t\t\tParamsCopy = ParamsCopy.Replace(*CommandletName, TEXT(\"\"));\n\t\t\tParams = ParamsCopy;\n\t\t}\n\t}\n\n\t// 2. Check if serverless counting is enabled in the settings\n\tUHotPatcherSettings* Settings = GetDefault<UHotPatcherSettings>();\n\tif (Settings->bEnableServerlessCounting) {\n\t\t// 3. Initialize the counter with server request and project information\n\t\tFCountServerlessWrapper::MakeCurrentProject(Settings->ServerRequestInfo, Settings->ProjectName);\n\t\tif (!CommandletName.IsEmpty()) {\n\t\t\tFCountServerlessWrapper::MakeCurrentProject(Settings->ServerRequestInfo, Settings->ProjectName + TEXT(\" \") + CommandletName);\n\t\t}\n\n\t\t// 4. Process the counter\n\t\tFCountServerlessWrapper::ProcessCounter(Params);\n\t}\n}", "CodeBleu_score": 44.6748316353011}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\treturn TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"),ESearchCase::IgnoreCase)\n\t\t|| TargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"),ESearchCase::IgnoreCase)\n\t\t|| TargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"),ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 33.387598390560655}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"),ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"),ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"),ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.65430105478557}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\treturn TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase)\n        || TargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase)\n        || TargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 34.05683162936623}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\tif (Object->IsA<UObject>()) {\n\t\tUObject* ObjectOuter = const_cast<UObject*>(static_cast<const UObject*>(Object));\n\t\tUPackage* Package = ObjectOuter->GetOutermost();\n\t\tif (Package != nullptr) {\n\t\t\tFName AssetPathName = Package->GetPathName();\n\t\t\tif (PackageObjectsMap.Contains(AssetPathName)) {\n\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(ObjectOuter);\n\t\t\t\tFreezeObjects.Add(ObjectOuter);\n\t\t\t}\n\t\t\telse if (AllAssetsSet.Contains(Package) && !IsAlwayPostLoadClasses(Package, ObjectOuter)) {\n\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(ObjectOuter);\n\t\t\t\tFreezeObjects.Add(ObjectOuter);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 68.84237435373618}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\tUPackage* Package = Object->GetOutermost();\n\tif (Package) {\n\t\tif (Package->IsRooted() && Package->IsFullyLoaded()) {\n\t\t\tif (!Package->IsPendingKill() && !Package->IsGarbageCollecting()) {\n\t\t\t\tif (!CookerAssetsSet.Contains(Package)) {\n\t\t\t\t\tif (AllAssetsSet.Contains(Package)) {\n\t\t\t\t\t\tif (!IsAlwayPostLoadClasses(Package, Object)) {\n\t\t\t\t\t\t\tFName AssetPathName = Package->GetPathName();\n\t\t\t\t\t\t\tif (!PackageObjectsMap.FindOrAdd(AssetPathName).Contains(Object)) {\n\t\t\t\t\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(Object);\n\t\t\t\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.10285402069329}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\tif (Object->IsAsset()) {\n\t\tUPackage* Package = Object->GetOutermost();\n\t\tif (Package != nullptr) {\n\t\t\tif (Package->IsAsset()) {\n\t\t\t\tif (Package->IsValidLowLevel() && !Package->IsPendingKillOrUnreachable()) {\n\t\t\t\t\tif (Package->IsDirty()) {\n\t\t\t\t\t\tPackage->MarkPackageDirty();\n\t\t\t\t\t}\n\t\t\t\t\tif (Package->GetOuter() == nullptr) {\n\t\t\t\t\t\tif (!CookerAssetsSet.Contains(Package)) {\n\t\t\t\t\t\t\tif (AllAssetsSet.Contains(Package)) {\n\t\t\t\t\t\t\t\tif (!IsAlwayPostLoadClasses(Package, Object)) {\n\t\t\t\t\t\t\t\t\tFName AssetPathName = Package->GetPathName();\n\t\t\t\t\t\t\t\t\tif (!PackageObjectsMap.FindOrAdd(AssetPathName).Contains(Object)) {\n\t\t\t\t\t\t\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(Object);\n\t\t\t\t\t\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t\t\t\t\t\t\tconst_cast<UObject*>(Object)->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.02366487438712}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tFHotPatcherBulkRecord& BulkRecord = Record.BulkRecord;\n\t\tif (BulkRecord.Info.Type == EHotPatcherBulkRecordType::Export)\n\t\t{\n\t\t\tif (Context.ExportsBuffers.Num() <= BulkRecord.Info.MultiOutputIndex)\n\t\t\t{\n\t\t\t\tContext.ExportsBuffers.SetNum(BulkRecord.Info.MultiOutputIndex + 1);\n\t\t\t}\n\t\t\tif (BulkRecord.Info.MultiOutputIndex >= Context.ExportsBuffers.Num())\n\t\t\t{\n\t\t\t\tContext.ExportsBuffers.SetNum(BulkRecord.Info.MultiOutputIndex + 1);\n\t\t\t}\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(MoveTemp(BulkRecord.Buffer));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFOutputFile& OutputFile = Context.OutputFiles.Emplace_GetRef();\n\t\t\tOutputFile.Name = BulkRecord.Info.Filename;\n\t\t\tOutputFile.Buffer = MoveTemp(BulkRecord.Buffer);\n\t\t\tOutputFile.Regions = MoveTemp(BulkRecord.Regions);\n\t\t\tOutputFile.Flags = EOutputFileFlags::None;\n\t\t\tif (BulkRecord.Info.Type == EHotPatcherBulkRecordType::PakChunk)\n\t\t\t{\n\t\t\t\tOutputFile.Flags |= EOutputFileFlags::Sidecar;\n\t\t\t}\n\t\t\tif (BulkRecord.Info.Type == EHotPatcherBulkRecordType::PakChunkHash)\n\t\t\t{\n\t\t\t\tOutputFile.Flags |= EOutputFileFlags::HashContribution;\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 54.7634409234495}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (auto& BulkRecord : Record.BulkData)\n\t{\n\t\tif (BulkRecord.Info.MultiOutputIndex != INDEX_NONE)\n\t\t{\n\t\t\tif (Context.ExportsBuffers.IsValidIndex(BulkRecord.Info.MultiOutputIndex))\n\t\t\t{\n\t\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Data);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFOutputFile& OutputFile = Context.OutputFiles.Emplace_GetRef();\n\t\t\tOutputFile.Filename = BulkRecord.Info.Filename;\n\t\t\tOutputFile.Buffer = MoveTemp(BulkRecord.Data);\n\t\t\tOutputFile.Regions = MoveTemp(BulkRecord.Regions);\n\t\t\tOutputFile.Flags = BulkRecord.Info.Flags;\n\t\t}\n\t}\n}", "CodeBleu_score": 54.2364731503188}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (auto& BulkRecord : Record.BulkData)\n\t{\n\t\tif (BulkRecord.Info.Type == EBulkDataType::BulkData_Export)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Buffer);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFOutputFile OutputFile;\n\t\t\tOutputFile.Filename = BulkRecord.Info.Filename;\n\t\t\tOutputFile.Buffer = BulkRecord.Buffer;\n\t\t\tOutputFile.Regions = BulkRecord.Info.Regions;\n\t\t\tOutputFile.Flags = BulkRecord.Info.Flags;\n\t\t\tContext.OutputFiles.Emplace_GetRef(MoveTemp(OutputFile));\n\t\t}\n\t}\n}", "CodeBleu_score": 43.11422751796783}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t// Check if the archive for diff is completed.\n    if (Context.ExportsBuffers[Package.Info.MultiOutputIndex].IsEmpty()) {\n        return;\n    }\n\n    // Create a footer buffer with the package file tag.\n    FFileRegion FooterRegion;\n    {\n        FString Footer = TEXT(\"PACKAGE_FILE_TAG\");\n        FooterRegion = FFileRegion(\n            Context.ExportsBuffers[Package.Info.MultiOutputIndex].Add(Footer.Len()),\n            Footer.Len()\n        );\n    }\n\n    // Add the footer buffer to each package's export buffers.\n    for (int32 Index = 0; Index < Context.ExportsBuffers.Num(); ++Index) {\n        Context.ExportsBuffers[Index].Add(FooterRegion);\n    }\n}", "CodeBleu_score": 47.55830590294819}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tauto& ExportBuffers = Context.ExportsBuffers[Record.Package.Info.MultiOutputIndex];\n\tif (ExportBuffers.Num() == 0) {\n\t\treturn;\n\t}\n\tFString ExportFooterBuffer;\n\tif (Record.Package.Info.bIsDiff) {\n\t\tFString DiffPatcherTag = FString::Printf(TEXT(\"%s%s\"), *FHotPatcherVersion::DiffPatcherTag, *Record.Package.Info.VersionId.ToString());\n\t\tExportFooterBuffer = FString::Printf(TEXT(\"%s%s\"), *DiffPatcherTag, *FHotPatcherVersion::DiffPatcherFooter);\n\t}\n\telse {\n\t\tExportFooterBuffer = FString::Printf(TEXT(\"%s%s\"), *Record.Package.Info.VersionId.ToString(), *FHotPatcherVersion::DiffPatcherFooter);\n\t}\n\tauto& FooterBuffer = ExportBuffers.Add(ExportFooterBuffer);\n\tauto& ExportFileNames = Context.ExportFileNames[Record.Package.Info.MultiOutputIndex];\n\tfor (auto& ExportFileName : ExportFileNames) {\n\t\tif (FPaths::GetExtension(ExportFileName).Equals(TEXT(\"bytes\"), ESearchCase::IgnoreCase)) {\n\t\t\tFString ExportFileNameWithoutExt = FPaths::GetBaseFilename(ExportFileName);\n\t\t\tExportFileName = FString::Printf(TEXT(\"%s%s\"), *ExportFileNameWithoutExt, *FHotPatcherVersion::DiffPatcherExt);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.24314856064441}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb\u52a0\u5bfc\u51fa\u6587\u4ef6\u5c3e\u6807\u8bb0\uff0c\u5219\u6dfb\u52a0\n\tif (Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddedFooterTag) {\n\t\treturn;\n\t}\n\t// \u5982\u679c\u6ca1\u6709\u6dfb", "CodeBleu_score": 25.17697978948102}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovement) {\n\t\tGDCharacterMovement->bSprinting = bSprint;\n\t\tGDCharacterMovement->bAimingDownSights = bAimingDownSights;\n\t}\n}", "CodeBleu_score": 69.24903412307518}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tGDCharacterMovementComponent->bSprinting = bSprinting;\n\t\tGDCharacterMovementComponent->bAimingDownSights = bAimingDownSights;\n\t}\n}", "CodeBleu_score": 69.37833843105304}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tif (Character && Character->GetCharacterMovement()) {\n\t\tUGDCharacterMovementComponent * const GDCharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\t\tif (GDCharacterMovement) {\n\t\t\tGDCharacterMovement->SavedRequestSprint = GDCharacterMovement->RequestSprint;\n\t\t\tGDCharacterMovement->SavedRequestADS = GDCharacterMovement->RequestADS;\n\t\t}\n\t}\n}", "CodeBleu_score": 67.24212480467841}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\tif (AbilitySystemComponent == nullptr || !Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->Attribute = Attribute;\n\tTask->AddToRoot();\n\n\tTask->OnAttributeChangedDelegateHandle = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(Task, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\n\treturn Task;\n}", "CodeBleu_score": 60.90127007544643}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\tUAsyncTaskAttributeChanged* NewTask = NewObject<UAsyncTaskAttributeChanged>();\n\tif (NewTask->Initialize(AbilitySystemComponent, Attribute)) {\n\t\tNewTask->AddToRoot();\n\t}\n\telse {\n\t\tNewTask->RemoveFromRoot();\n\t}\n\treturn NewTask;\n}", "CodeBleu_score": 32.17196439786557}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\tif (AbilitySystemComponent == nullptr || !Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Attribute = Attribute;\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->AddToRoot();\n\tAbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(Task, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\treturn Task;\n}", "CodeBleu_score": 60.20274044012612}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\tif (ASC) {\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\tIsValid = false;\n\t\tSetReadyToDestroy();\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 27.34550138241825}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\tif (ASC != nullptr) {\n\n\t\t// Remove all delegates related to gameplay effect additions and cooldown tag events.\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\n\t\t// Mark the task as ready to be destroyed and designate it as garbage.\n\t\tSetReadyToDestroy(true);\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 36.83346055899857}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\tSuper::EndTask();\n\tif (ASC) {\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\tIsValid = false;\n\t\tSetReadyToDestroy();\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 34.42036325418717}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t// Log::Comment(\"OnRemoveGameplayEffectCallback\");\n\n    // Get all asset tags from the removed effect\n    TArray<FGameplayTag> AllAssetTags = EffectRemoved.Spec.GetAllAssetTags();\n    // Get all granted tags from the removed effect\n    TArray<FGameplayTag> AllGrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\n    // Check if any of the asset tags contain the specified tag\n    if (AllAssetTags.ContainsByPredicate([this](const FGameplayTag& Tag) { return Tag.MatchesTagExact(this->TagToCheck); })) {\n        // Log::Comment(\"Asset tag match found\");\n        // Broadcast an event with the tag, effect handle, and stack change details\n        FGameplayTagEventData EventData;\n        EventData.GameplayTag = TagToCheck;\n        EventData.StackChange = EffectRemoved.Spec.GetStackCountChange();\n        EventData.StackCount = EffectRemoved.Spec.GetCurrentStackCount();\n        EventData.Handle = EffectRemoved.Handle;\n        EventData.Instigator = EffectRemoved.Spec.GetEffectContext().GetInstigator();\n        EventData.Target = EffectRemoved.Spec.GetEffectContext().GetTarget();\n        EventData.Duration = EffectRemoved.Spec.GetDuration();\n        EventData.Period = EffectRemoved.Spec.GetPeriod();\n        EventData.EffectContext = EffectRemoved.Spec.GetEffectContext();\n        OnEffectStackChange.Broadcast(EventData);\n    }\n\n    // Check if any of the granted tags contain the specified tag\n    if (AllGrantedTags.ContainsByPredicate([this](const FGameplayTag& Tag) { return Tag.MatchesTagExact(this->TagToCheck); })) {\n        // Log::Comment(\"Granted tag match found\");\n        // Broadcast an event with the tag, effect handle, and stack change details\n        FGameplayTagEventData EventData;\n        EventData.GameplayTag = TagToCheck;\n        EventData.StackChange = EffectRemoved.Spec.GetStackCountChange();\n        EventData.StackCount = EffectRemoved.Spec.GetCurrentStackCount();", "CodeBleu_score": 42.312509446013365}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t// Log the removal\n    UE_LOG(LogTemp, Warning, TEXT(\"Effect removed: %s\"), *EffectRemoved.Spec.GetGameplayEffectTag().GetTagName().ToString());\n\n    // Get the asset and granted tags from the effect\n    TArray<FGameplayTag> AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n    TArray<FGameplayTag> GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    // If either tag container contains the specified EffectGameplayTag, broadcast an event\n    if (AssetTags.ContainsByPredicate(FGameplayTag::RequestGameplayTag(EffectGameplayTag)) || GrantedTags.ContainsByPredicate(FGameplayTag::RequestGameplayTag(EffectGameplayTag))) {\n        FGameplayEffectStackChangeDetails StackChangeDetails;\n        StackChangeDetails.StackCountChange = 0;\n        StackChangeDetails.StackCount = EffectRemoved.GetCurrentStackCount();\n        StackChangeDetails.StackCountMax = EffectRemoved.GetMaxStackCount();\n        StackChangeDetails.StackDuration = EffectRemoved.GetStackDuration();\n        StackChangeDetails.StackDurationMax = EffectRemoved.GetMaxStackDuration();\n        StackChangeDetails.StackDurationRemaining = EffectRemoved.GetStackDurationRemaining();\n        StackChangeDetails.StackDurationRemainingMax = EffectRemoved.GetMaxStackDurationRemaining();\n        StackChangeDetails.StackTimeRemaining = EffectRemoved.GetStackTimeRemaining();\n        StackChangeDetails.StackTimeRemainingMax = EffectRemoved.GetMaxStackTimeRemaining();\n        StackChangeDetails.StackTime = EffectRemoved.GetStackTime();\n        StackChangeDetails.StackTimeMax = EffectRemoved.GetMaxStackTime();\n        StackChangeDetails.StackCountChange = EffectRemoved.GetStackCountChange();\n        StackChangeDetails.StackCountMaxChange = EffectRemoved.GetMaxStackCountChange();\n        StackChangeDetails.StackDurationChange = EffectRemoved.GetStackDurationChange();\n        StackChangeDetails.StackDurationMaxChange = EffectRemoved.GetMaxStackDurationChange();\n        StackChangeDetails.StackDurationRemainingChange = EffectRemoved.GetStackDuration", "CodeBleu_score": 45.71477425390117}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t// Log the effect removed\n\tFString effect_removed_string = FString::Printf(TEXT(\"Removed Effect: %s\"), *EffectRemoved.Spec.GetDebugName());\n\tUE_LOG(LogTemp, Warning, TEXT(\"%s\"), *effect_removed_string);\n\n\t// Get the asset tags from the effect\n\tFGameplayTagContainer asset_tags = EffectRemoved.Spec.GetAllAssetTags();\n\t// Get the granted tags from the effect\n\tFGameplayTagContainer granted_tags = EffectRemoved.Spec.GetAllGrantedTags();\n\n\t// Check if the asset tag contains the specified tag\n\tif (asset_tags.HasTagExact(SpecifiedTag)) {\n\t\t// Log the asset tag\n\t\tFString asset_tag_string = FString::Printf(TEXT(\"Asset Tag: %s\"), *SpecifiedTag.ToString());\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"%s\"), *asset_tag_string);\n\n\t\t// Create the event\n\t\tFGameplayTagEvent event;\n\t\tevent.Tag = SpecifiedTag;\n\t\tevent.EffectHandle = EffectRemoved.Handle;\n\t\tevent.StackChange = EffectRemoved.Spec.GetStackCountChange();\n\t\t// Broadcast the event\n\t\tBroadcast(event);\n\t}\n\t// Check if the granted tag contains the specified tag\n\telse if (granted_tags.HasTagExact(SpecifiedTag)) {\n\t\t// Log the granted tag\n\t\tFString granted_tag_string = FString::Printf(TEXT(\"Granted Tag: %s\"), *SpecifiedTag.ToString());\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"%s\"), *granted_tag_string);\n\n\t\t// Create the event\n\t\tFGameplayTagEvent event;\n\t\tevent.Tag = SpecifiedTag;\n\t\tevent.EffectHandle = EffectRemoved.Handle;\n\t\tevent.StackChange = EffectRemoved.Spec.GetStackCountChange();\n\t\t// Broadcast the event\n\t\tBroadcast(event);\n\t}\n}", "CodeBleu_score": 45.401553104430334}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\tif (!AbilitySystemComponent || !InEffectGameplayTag.IsValid()) {\n\t\tEndTask();\n\t\treturn nullptr;\n\t}\n\n\tEffectGameplayTag = InEffectGameplayTag;\n\tthis->AbilitySystemComponent = AbilitySystemComponent;\n\n\t// Register callbacks for when gameplay effects are added or removed.\n\tAbilitySystemComponent->OnAnyGameplayEffectAddedDelegateToSelf.AddUObject(this, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectAdded);\n\tAbilitySystemComponent->OnAnyGameplayEffectRemovedDelegateToSelf.AddUObject(this, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectRemoved);\n\n\treturn this;\n}", "CodeBleu_score": 38.22708756834413}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (!Task) {\n\t\treturn nullptr;\n\t}\n\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\tTask->bIsValid = Task->Validate();\n\n\tif (Task->bIsValid) {\n\t\tTask->RegisterCallbacks();\n\t}\n\telse {\n\t\tTask->EndTask();\n\t}\n\n\treturn Task;\n}", "CodeBleu_score": 33.643772649153554}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\tUAsyncTaskEffectStackChanged * NewTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (NewTask) {\n\t\tNewTask->AbilitySystemComponent = AbilitySystemComponent;\n\t\tNewTask->EffectGameplayTag = InEffectGameplayTag;\n\t\tNewTask->Initialize();\n\t}\n\treturn NewTask;\n}", "CodeBleu_score": 29.243794323148524}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t// Log::Comment(FString::Printf(TEXT(\"OnRemoveGameplayEffectCallback: %s\"), *EffectRemoved.Spec.GetDebugName()));\n\n    // Get the asset tag and granted tags from the effect\n    TArray<FGameplayTag> assetTags;\n    EffectRemoved.Spec.GetAllAssetTags(assetTags);\n    TArray<FGameplayTag> grantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(grantedTags);\n\n    // Check if the asset tag or granted tag has the specified tag\n    if (assetTags.Contains(this->Tag) || grantedTags.Contains(this->Tag)) {\n        // Get the stack change details\n        FActiveGameplayEffectHandle handle = EffectRemoved.Handle;\n        FGameplayEffectStackChangePtr stackChange = EffectRemoved.GetStackChange();\n\n        // Broadcast the event\n        this->OnStackChange.Broadcast(this->Tag, handle, stackChange);\n    }\n}", "CodeBleu_score": 53.4188269986942}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t// Line 22, Address: 0x100023520, Func Offset: 0\n\t// Line 23, Address: 0x100023530, Func Offset: 0x10\n\t// Line 25, Address: 0x100023548, Func Offset: 0x28\n\t// Line 26, Address: 0x100023550, Func Offset: 0x30\n\t// Line 27, Address: 0x100023578, Func Offset: 0x58\n\t// Line 28, Address: 0x100023580, Func Offset: 0x60\n\t// Line 29, Address: 0x100023598, Func Offset: 0x78\n\t// Line 30, Address: 0x1000235a0, Func Offset: 0x80\n\t// Line 31, Address: 0x1000235b0, Func Offset: 0x90\n\t// Line 32, Address: 0x1000235c8, Func Offset: 0xa8\n\t// Line 33, Address: 0x1000235d0, Func Offset: 0xb0\n\t// Line 34, Address: 0x1000235e0, Func Offset: 0xc0\n\t// Line 35, Address: 0x1000235f8, Func Offset: 0xd8\n\t// Line 36, Address: 0x100023600, Func Offset: 0xe0\n\t// Line 37, Address: 0x100023618, Func Offset: 0xf8\n\t// Line 38, Address: 0x100023620, Func", "CodeBleu_score": 4.261389655237946}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\t\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\t\n\t\tFGameplayEffectStackChangeDetails StackChangeDetails = EffectRemoved.CalculateStackChangeDetails(true);\n\t\t\n\t\tFGameplayEffectSpecHandle Handle = EffectRemoved.Handle;\n\t\t\n\t\tFGameplayTagContainer Tags;\n\t\tTags.AddTag(EffectGameplayTag);\n\t\t\n\t\tBroadcast(Tags, Handle, StackChangeDetails);\n\t}\n\t\n}", "CodeBleu_score": 76.53214794635642}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t// Line 15, Address: 0x100000130, Func Offset: 0\n\n    // Line 16, Address: 0x100000134, Func Offset: 0x4\n    // Line 17, Address: 0x100000138, Func Offset: 0x8\n    // Line 18, Address: 0x100000140, Func Offset: 0x10\n    // Line 19, Address: 0x100000148, Func Offset: 0x18\n    // Line 20, Address: 0x100000150, Func Offset: 0x20\n    // Line 21, Address: 0x100000158, Func Offset: 0x28\n    // Line 22, Address: 0x100000160, Func Offset: 0x30\n    // Line 23, Address: 0x100000168, Func Offset: 0x38\n    // Line 24, Address: 0x100000170, Func Offset: 0x40\n    // Line 25, Address: 0x100000178, Func Offset: 0x48\n    // Line 26, Address: 0x100000180, Func Offset: 0x50\n    // Line 27, Address: 0x100000188, Func Offset: 0x58\n    // Line 28, Address: 0x100000190, Func Offset: 0x60\n    // Line 29, Address: 0x100000198, Func Offset: 0x68\n    // Line 30, Address: 0x1000001a0", "CodeBleu_score": 10.272070522238227}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\t// If the ability is set to activate on granted, try to activate the ability\n\tif (ActivateAbilityOnGranted) {\n\t\tif (ActorInfo->AbilitySystemComponent) {\n\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 70.20581974240346}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t// Line 28, Address: 0x1113410, Func Offset: 0\n\n    // Line 29, Address: 0x1113414, Func Offset: 0x4\n    // Line 33, Address: 0x1113418, Func Offset: 0x8\n    // Line 34, Address: 0x1113420, Func Offset: 0x10\n    // Line 35, Address: 0x1113428, Func Offset: 0x18\n    // Line 36, Address: 0x1113430, Func Offset: 0x20\n    // Line 37, Address: 0x1113438, Func Offset: 0x28\n    // Line 38, Address: 0x1113440, Func Offset: 0x30\n    // Line 39, Address: 0x1113448, Func Offset: 0x38\n    // Line 40, Address: 0x1113450, Func Offset: 0x40\n    // Line 41, Address: 0x1113458, Func Offset: 0x48\n    // Line 42, Address: 0x1113460, Func Offset: 0x50\n    // Line 43, Address: 0x1113468, Func Offset: 0x58\n    // Line 44, Address: 0x1113470, Func Offset: 0x60\n    // Line 45, Address: 0x1113478, Func Offset: 0x68\n    // Line 46, Address: 0x1113480, Func Offset: 0x70\n    // Line 47, Address: 0x1113488,", "CodeBleu_score": 10.264539515359928}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\tSuper::OnMontageEnded(Montage, bInterrupted);\n    if (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n        OnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n    }\n    EndTask();\n}", "CodeBleu_score": 67.4451300398292}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\n\t\tOnCompleted.Broadcast(DefaultGameplayTag, FGameplayEventData());\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 61.2342906053801}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t// Line 38, Address: 0x112518, Func Offset: 0\n    // Line 41, Address: 0x112528, Func Offset: 0x10\n    // Line 40, Address: 0x11252c, Func Offset: 0x14\n    // Line 41, Address: 0x112530, Func Offset: 0x18\n    // Line 42, Address: 0x112538, Func Offset: 0x20\n    // Line 41, Address: 0x11253c, Func Offset: 0x24\n    // Line 42, Address: 0x112540, Func Offset: 0x28\n    // Line 43, Address: 0x112544, Func Offset: 0x2c\n    // Line 44, Address: 0x112548, Func Offset: 0x30\n    // Line 45, Address: 0x11254c, Func Offset: 0x34\n    // Line 46, Address: 0x112550, Func Offset: 0x38\n    // Line 47, Address: 0x112558, Func Offset: 0x40\n    // Line 48, Address: 0x112560, Func Offset: 0x48\n    // Line 49, Address: 0x112564, Func Offset: 0x4c\n    // Line 50, Address: 0x112568, Func Offset: 0x50\n    // Line 51, Address: 0x11256c, Func Offset: 0x54\n    // Line 52, Address: 0x112570, Func Offset: 0x58\n    // Line 5", "CodeBleu_score": 5.299773472820937}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilityEnded) {\n\t\tStopPlayingMontage();\n\t}\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(GameplayEventTagContainerDelegateHandle);\n\t}\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 52.51693003785783}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilityEnded) {\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(GameplayEventTagContainer, EventTagContainerDelegate);\n\t\t}\n\n\t\tif (StopPlayingMontage()) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 52.75292257148588}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilityEnded)\n\t{\n\t\tif (StopPlayingMontage())\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelDelegateHandle);\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(GameplayEventTagContainerDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 59.38285933854047}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\tif (!AbilitySystemComponent) {\n\t\treturn false;\n\t}\n\tUAbilitySystemGlobals::Get().GetGameplayDebugger()->LogMessage(TEXT(\"Stopping Montage\"));\n\tUAnimInstance* AnimInstance = AbilitySystemComponent->GetAnimInstance();\n\tif (!AnimInstance) {\n\t\treturn false;\n\t}\n\tUAbilitySystemGlobals::Get().GetGameplayDebugger()->LogMessage(TEXT(\"Stopping Montage\"));\n\tUAnimMontage* Montage = AnimInstance->GetCurrentMontage();\n\tif (!Montage) {\n\t\treturn false;\n\t}\n\tUAbilitySystemGlobals::Get().GetGameplayDebugger()->LogMessage(TEXT(\"Stopping Montage\"));\n\tif (Montage == MontageInstance) {\n\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\tAbilitySystemComponent->CurrentMontageStop(Montage);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 59.48483654545679}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\tUAbilitySystemComponent* AbilitySystemComponent = GetCurrentAbilitySystemComponent();\n\tif (AbilitySystemComponent) {\n\t\tUAnimInstance* AnimInstance = GetAnimInstance();\n\t\tif (AnimInstance) {\n\t\t\tUAnimMontage* CurrentMontage = AbilitySystemComponent->GetCurrentMontage();\n\t\t\tif (CurrentMontage) {\n\t\t\t\tUAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(CurrentMontage);\n\t\t\t\tif (MontageInstance) {\n\t\t\t\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\t\t\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\t\t\t\tAbilitySystemComponent->CurrentMontageStop(CurrentMontage);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 54.0354748462338}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\tif (!AbilitySystemComponent.IsValid() || !AbilitySystemComponent->GetCurrentMontage()) {\n\t\treturn false;\n\t}\n\n\t// Get the actor info and animation instance\n\tUAbilitySystemGlobals::Get().GetGameplayAbilityActorInfoForActor(GetOwner(), AbilitySystemComponent, ActorInfo);\n\tActorInfo->GetAnimInstance(AnimInstance);\n\n\t// If the montage is playing, unbind the delegates and stop the montage\n\tif (AbilitySystemComponent->GetCurrentMontage() == MontageInstance) {\n\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 42.797423025023576}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard.\n\tAActor* TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKeyName));\n\n\t// If the target actor is not valid, return.\n\tif (TargetActor == nullptr)\n\t{\n\t\treturn;\n\t}\n\n\t// Get the location of the AI pawn.\n\tFVector MyLocation = MyController->GetPawn()->GetActorLocation();\n\n\t// Get the location of the target actor.\n\tFVector TargetLocation = TargetActor->GetActorLocation();\n\n\t// Calculate the distance between the AI pawn and the target actor.\n\tfloat Distance = MyLocation.Distance(TargetLocation);\n\n\t// If the target is within the maximum attack range, check for line of sight.\n\tif (Distance <= MaxAttackRange)\n\t{\n\t\t// Check for line of sight to the target.\n\t\tbool bHasLOS = MyController->LineOfSightTo(TargetActor);\n\n\t\t// If the target is within range and visible, set the blackboard value to true.\n\t\tif (bHasLOS)\n\t\t{\n\t\t\tBlackBoardComp->SetValueAsBool(TargetInRangeKeyName, true);\n\t\t}\n\t\t// If the target is not within range or not visible, set the blackboard value to false.\n\t\telse\n\t\t{\n\t\t\tBlackBoardComp->SetValueAsBool(TargetInRangeKeyName, false);\n\t\t}\n\t}\n\t// If the target is not within the maximum attack range, set the blackboard value to false.\n\telse\n\t{\n\t\tBlackBoardComp->SetValueAsBool(TargetInRangeKeyName, false);\n\t}\n}", "CodeBleu_score": 52.38756492803389}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard\n\tAActor* TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKeyName));\n\n\t// If the target actor is valid, calculate the distance between the AI pawn and the target\n\tif (TargetActor) {\n\t\tfloat Distance = FVector::Distance(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\n\t\t// If the distance is within the maximum attack range, check for line of sight to the target\n\t\tif (Distance <= MaxAttackRange) {\n\t\t\t// Check if the AI pawn can see the target\n\t\t\tbool bCanSeeTarget = MyController->LineOfSightTo(TargetActor);\n\n\t\t\t// Store the result in the blackboard\n\t\t\tBlackBoardComp->SetValueAsBool(TargetInRangeKeyName, bCanSeeTarget);\n\t\t}\n\t\t// Otherwise, the target is not in range\n\t\telse {\n\t\t\tBlackBoardComp->SetValueAsBool(TargetInRangeKeyName, false);\n\t\t}\n\t}\n\t// Otherwise, the target actor is invalid\n\telse {\n\t\tBlackBoardComp->SetValueAsBool(TargetInRangeKeyName, false);\n\t}\n}", "CodeBleu_score": 49.00202786216445}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard\n\tAActor* TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKeyName));\n\n\t// If the target actor is not valid, return\n\tif (!TargetActor)\n\t{\n\t\tBlackBoardComp->SetValueAsBool(InRangeKeyName, false);\n\t\tBlackBoardComp->SetValueAsBool(InLOSKeyName, false);\n\t\treturn;\n\t}\n\n\t// Calculate the distance to the target\n\tfloat Distance = FVector::Distance(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\n\t// Check if the target is within range\n\tif (Distance <= MaxRange)\n\t{\n\t\t// Check for line of sight to the target\n\t\tBlackBoardComp->SetValueAsBool(InRangeKeyName, true);\n\t\tBlackBoardComp->SetValueAsBool(InLOSKeyName, MyController->LineOfSightTo(TargetActor));\n\t}\n\telse\n\t{\n\t\t// If the target is not within range, clear the blackboard values\n\t\tBlackBoardComp->SetValueAsBool(InRangeKeyName, false);\n\t\tBlackBoardComp->SetValueAsBool(InLOSKeyName, false);\n\t}\n}", "CodeBleu_score": 49.38268564070191}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t// Get the pawn from the AI owner\n\tAPawn* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\n\t// Get the attribute component from the pawn\n\tUSAttributeComponent* AttributeComp = Cast<USAttributeComponent>(pawn->FindComponentByClass(USAttributeComponent::StaticClass()));\n\n\t// If the attribute component is valid, apply a health change to restore the pawn's health to maximum\n\tif (AttributeComp) {\n\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t}\n\n\t// Return a success result\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 66.17230825930088}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\tAAIController* AIOwner = OwnerComp.GetAIOwner();\n\tif (AIOwner) {\n\t\tAPawn* Pawn = AIOwner->GetPawn();\n\t\tif (Pawn) {\n\t\t\tUSAttributeComponent* AttributeComp = Pawn->FindComponentByClass<USAttributeComponent>();\n\t\t\tif (AttributeComp) {\n\t\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax() - AttributeComp->GetHealth());\n\t\t\t\treturn EBTNodeResult::Success;\n\t\t\t}\n\t\t}\n\t}\n\treturn EBTNodeResult::Failed;\n}", "CodeBleu_score": 51.90766378729064}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t// Get the AI's pawn\n\tAPawn* Pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (Pawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\t// Get the pawn's attribute component\n\tUSAttributeComponent* AttributeComp = Pawn->FindComponentByClass<USAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\t// Apply a health change to restore the pawn's health to maximum\n\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 53.691816075166734}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\tTickables->RegisterComponent(this);\n}", "CodeBleu_score": 27.60260167549657}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n\tTickables->RegisterComponent(this);\n}", "CodeBleu_score": 27.60260167549657}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n    if (GetWorld()) {\n        GetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n    }\n}", "CodeBleu_score": 55.042997749645295}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\tif (Tickables) {\n\t\tTickables->DeRegisterComponent(this);\n\t}\n}", "CodeBleu_score": 44.03751407309174}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\tif (Tickables) {\n\t\tTickables->DeRegisterComponent(this);\n\t}\n}", "CodeBleu_score": 44.03751407309174}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\n\tif (Tickables) {\n\t\tTickables->DeRegisterComponent(this);\n\t}\n}", "CodeBleu_score": 44.03751407309174}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n\t// if managing significance is enabled, it checks if the owner implements the significance interface\n\tif (bManageSignificance) {\n\t\tif (GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\t// depending on the bWaitOneFrame flag, it either registers the component with the manager immediately or schedules it for the next tick\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t} else {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t} else {\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"USSignificanceComponent::BeginPlay() : Owner %s does not implement the USSignificanceInterface.\"), *GetOwner()->GetName());\n\t\t}\n\t}\n\n\t// manages particle significance for any particle system components owned by the actor\n\tfor (UParticleSystemComponent* ParticleSystem : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tif (ParticleSystem->IsRegistered()) {\n\t\t\tParticleSystem->OnComponentBeginOverlap.AddDynamic(this, &USSignificanceComponent::OnParticleSystemOverlap);\n\t\t}\n\t}\n}", "CodeBleu_score": 63.33641679362868}, {"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\t\n\tif (bManageSignificance) {\n\t\tif (GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t} else {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t} else {\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"Significance component on %s does not implement the significance interface.\"), *GetOwner()->GetName());\n\t\t}\n\t}\n\t\n\tfor (UParticleSystemComponent* ParticleSystem : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tif (ParticleSystem->bAutoActivate) {\n\t\t\tParticleSystem->ActivateSystem();\n\t\t}\n\t}\n}", "CodeBleu_score": 65.04855874171851}, {"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\t\n\tif (bManagingSignificance) {\n\t\tif (GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tRegisterWithManager();\n\t\t}\n\t\telse {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Particle systems\n\tfor (UParticleSystemComponent* ParticleSystem : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tParticleSystem->bAutoActivate = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoManageAttachment = false;\n\t\tParticleSystem->bAutoUpdateBounds = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoActivate = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoManageAttachment = false;\n\t\tParticleSystem->bAutoUpdateBounds = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoActivate = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoManageAttachment = false;\n\t\tParticleSystem->bAutoUpdateBounds = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoActivate = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoManageAttachment = false;\n\t\tParticleSystem->bAutoUpdateBounds = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoActivate = false;\n\t\tParticleSystem->bAutoDestroy = false;\n\t\tParticleSystem->bAutoManageAttachment = false;\n\t\tParticleSystem->bAutoUpdateBounds = false", "CodeBleu_score": 53.888235778093865}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (SignificanceManager.IsValid()) {\n\t\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), this, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n\t\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t\t}, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t\t});\n\t}\n}", "CodeBleu_score": 51.5752124444848}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\tUWorld* World = GetWorld();\n\tif (World == nullptr)\n\t{\n\t\treturn;\n\t}\n\n\tSignificanceManager = World->GetGameInstance()->GetSignificanceManager();\n\tif (SignificanceManager == nullptr)\n\t{\n\t\tUE_LOG(LogGame, Warning, TEXT(\"Could not find significance manager.\"));\n\t\treturn;\n\t}\n\n\t// Register with the manager\n\tFManagedObjectInfo ObjectInfo;\n\tObjectInfo.Tag = GetOwner()->GetClass()->GetFName();\n\tObjectInfo.Significance = 0.0f;\n\tObjectInfo.SignificanceDelegate = FSignificanceDelegate::CreateUObject(this, &USSignificanceComponent::CalcSignificance);\n\tObjectInfo.PostSignificanceUpdateDelegate = FPostSignificanceUpdateDelegate::CreateUObject(this, &USSignificanceComponent::PostSignificanceUpdate);\n\tSignificanceManager->RegisterObject(ObjectInfo);\n}", "CodeBleu_score": 33.88621361313995}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t// Get the significance manager from the world\n\tUSignificanceManager* SignificanceManager = GetWorld()->GetGameInstance()->GetSignificanceManager();\n\tif (SignificanceManager == nullptr) {\n\t\tUE_LOG(LogGame, Warning, TEXT(\"Significance Manager is null\"));\n\t\treturn;\n\t}\n\n\t// Create a lambda function for calculating significance\n\tauto CalcSignificanceLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t};\n\n\t// Create a lambda function for handling post-significance updates\n\tauto PostSignificanceUpdateLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\n\t// Register the component with the significance manager\n\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), GetOwner(), CalcSignificanceLambda, PostSignificanceUpdateLambda);\n}", "CodeBleu_score": 69.51144326401575}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (!IsPoolingEnabled(Actor)) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tActor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool_Internal(Actor);\n\treturn true;\n}", "CodeBleu_score": 52.858065786868735}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\tif (Actor->IsPoolingEnabled()) {\n\t\tActor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool_Internal(Actor);\n\t\treturn true;\n\t}\n\telse {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 52.27685986235359}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\tif (Actor->IsPoolingEnabled()) {\n\t\tActor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool_Internal(Actor);\n\t\treturn true;\n\t}\n\telse {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.604830618585986}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool called.\"));\n\tSCOPED_NAMED_EVENT_FUNCTION(PrimeActorPool);\n\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool started.\"));\n\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool spawned %d actors.\"), Amount);\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool spawned actor %d.\"), i);\n\t\tReleaseActorToPool(Actor);\n\t}\n\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool finished.\"));\n}", "CodeBleu_score": 52.32707519151889}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t// Log the start of the pooling process\n\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool: %s\"), *ActorClass->GetName());\n\n\t// Create a scoped event for profiling\n\tSCOPED_NAMED_EVENT_STAT(TEXT(\"PrimeActorPool\"), EStatOperation::Begin);\n\n\t// Spawn the specified number of actors using the provided actor class and default spawn parameters\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\t// Spawn an actor of the specified class\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\n\t\t// If the actor was successfully spawned\n\t\tif (Actor) {\n\t\t\t// Release the actor to the pool\n\t\t\tReleaseToPool(Actor);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.620625301633545}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool\"));\n\t\n\tif (ActorClass == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ActorClass is nullptr\"));\n\t\treturn;\n\t}\n\t\n\t//Log the start of the pooling process\n\tUE_LOG(LogTemp, Warning, TEXT(\"Starting to prime the pool\"));\n\t\n\t//Create a scoped event for profiling\n\tSCOPED_NAMED_EVENT(PrimeActorPool, EAsyncProfilingColor::Cyan);\n\t\n\t//Spawn the specified number of actors using the provided actor class and default spawn parameters, and immediately release them to the pool\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tif (Actor) {\n\t\t\tReleaseActorToPool(Actor);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Actor is nullptr\"));\n\t\t}\n\t}\n\t\n\t//Log the end of the pooling process\n\tUE_LOG(LogTemp, Warning, TEXT(\"Finished priming the pool\"));\n}", "CodeBleu_score": 53.50186313034464}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n    LoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreenAttributes.bMuteAudio = false;\n    LoadingScreenAttributes.bShouldWaitForManualClose = false;\n    LoadingScreenAttributes.bUseMaxScreenResolution = false;\n    LoadingScreenAttributes.bWaitForManualCloseIfMovieIsPlaying = false;\n    LoadingScreenAttributes.bFadeScreen = true;\n    LoadingScreenAttributes.bEnableMovieSoundtrack = true;\n    LoadingScreenAttributes.bEnableLoadingScreenMusic = true;\n    LoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreenAttributes.bEnableWorldMusic = true;\n    LoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreenAttributes.bMuteAudio = false;\n    LoadingScreenAttributes.bShouldWaitForManualClose = false;\n    LoadingScreenAttributes.bUseMaxScreenResolution = false;\n    LoadingScreenAttributes.bWaitForManualCloseIfMovieIsPlaying = false;\n    LoadingScreenAttributes.bFadeScreen = true;\n    LoadingScreenAttributes.bEnableMovieSoundtrack = true;\n    LoadingScreenAttributes.bEnableLoadingScreenMusic = true;\n    LoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreenAttributes.bEnableWorldMusic = true;\n    LoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreenAttributes.bMuteAudio = false;\n    LoadingScreenAttributes.bShouldWaitForManualClose = false;\n    LoadingScreenAttributes.bUseMaxScreenResolution = false;\n    LoadingScreenAttributes.bWaitForManualCloseIfMovieIsPlaying = false;\n    LoadingScreenAttributes.bFadeScreen = true;\n    LoadingScreenAttributes.bEnableMovieSoundtrack = true;\n    LoadingScreenAttributes.bEnableLoadingScreenMusic = true;\n    LoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreenAttributes.bEnableWorldMusic = true;\n    LoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreen", "CodeBleu_score": 38.60305140221196}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t//TODO: PLAYER\n    //TODO: LOADING SCREEN\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO: MAP NAME\n    //TODO:", "CodeBleu_score": 8.210005918294721}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t// TODO: Implement\n}", "CodeBleu_score": 8.780336534048907}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t// TODO: Implement StartAction_Implementation\n\tif (GetOwningComponent() != nullptr) {\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetWorld();\n\t\tGetName();\n\t\tUE_LOGFMT(LogTemp, Display, TEXT(\"Starting Action: %s\"), *GetName());\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGetOwningComponent()->GetOwnerRole();\n\t\tGet", "CodeBleu_score": 26.101508266692974}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t// Log the start of the action\n\tUE_LOGFMT(LogTemp, Warning, TEXT(\"Starting action for instigator {0}\"), *Instigator->GetName());\n\t\n\t// Append granted tags to the owning component's active gameplay tags\n\tGetOwningComponent()->GetOwnerRole().GetOwner()->GetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n\t\n\t// Update the replication data\n\tGetOwningComponent()->UpdateReplicatedData();\n\t\n\t// If the component's owner role is authoritative, record the start time\n\tif (GetOwningComponent()->GetOwnerRole() == EComponentOwnerRole::Authoritative) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\t\n\t// Broadcast an action started event from the owning component\n\tGetOwningComponent()->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 42.086866901028486}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\tif (!Instigator) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"USAction::StartAction_Implementation: Instigator is null!\"));\n\t\treturn;\n\t}\n\n\t// Log the start of the action\n\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: %s started for %s\"), *GetName(), *Instigator->GetName());\n\n\t// Append granted tags to the owning component's active gameplay tags\n\tif (GetOwningComponent()) {\n\t\tGetOwningComponent()->GetOwnerRole(Instigator)->GetActiveGameplayTags().AppendTags(GrantedTags);\n\t}\n\n\t// Update the replication data\n\tUpdateReplicatedData();\n\n\t// If the component's owner role is authoritative, record the start time\n\tif (GetOwningComponent() && GetOwningComponent()->GetOwnerRole(Instigator)->IsAuthoritative()) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast an action started event from the owning component\n\tif (GetOwningComponent()) {\n\t\tGetOwningComponent()->OnActionStarted.Broadcast(Instigator, this);\n\t}\n}", "CodeBleu_score": 46.088283851859465}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\tAGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\tif (GS) {\n\t\treturn Duration - (GS->GetServerWorldTimeSeconds() - StartTime);\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 52.98897256490995}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\tif (GameState == nullptr) {\n        return Duration;\n    }\n    return FMath::Max(0.0f, Duration - (GetWorld()->GetTimeSeconds() - GS->GetServerWorldTimeSeconds()));\n}", "CodeBleu_score": 33.835546993736806}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\tAGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\tif (GS) {\n\t\treturn FMath::Max(0.0f, Duration - (GS->GetServerWorldTimeSeconds() - StartTime));\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 53.313368623221066}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Interacted with null actor\"));\n\t}\n\telse {\n\t\tAPawn* OwningPawn = GetOwner();\n\t\tif (OwningPawn == nullptr) {\n\t\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Interacted with actor with no owning pawn\"));\n\t\t}\n\t\telse {\n\t\t\tISGameplayInterface::Execute_Interact(InFocus, OwningPawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.719976558182836}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus) {\n\t\tAPawn* PawnOwner = GetOwner();\n\t\tif (PawnOwner) {\n\t\t\tInFocus->Interact(PawnOwner);\n\t\t}\n\t\telse {\n\t\t\tGEngine->AddOnScreenDebugMessage(-1, 15.f, FColor::Red, TEXT(\"USInteractionComponent::ServerInteract_Implementation: PawnOwner is null\"));\n\t\t}\n\t}\n\telse {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 15.f, FColor::Red, TEXT(\"USInteractionComponent::ServerInteract_Implementation: InFocus is null\"));\n\t}\n}", "CodeBleu_score": 42.91708274327333}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Focus actor is null.\"));\n\t}\n\telse {\n\t\tAPawn* OwningPawn = GetOwner();\n\t\tif (OwningPawn != nullptr) {\n\t\t\tInFocus->Interact(OwningPawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.34678449219497}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\treturn UDamageComponent::ApplyDamage(DamageCauser, TargetActor, DamageAmount);\n}", "CodeBleu_score": 36.88943633294576}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\treturn UAttributeComponent::ApplyDamage(DamageCauser, TargetActor, DamageAmount);\n}", "CodeBleu_score": 37.671743865269804}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\tstatic auto fn = UObject::FindObject<UFunction>(\"Function GameplayFunctionLibrary.GameplayFunctionLibrary_C.ApplyDamage\");\n\n\tUGameplayFunctionLibrary_C_ApplyDamage_Params params;\n\tparams.DamageCauser = DamageCauser;\n\tparams.TargetActor = TargetActor;\n\tparams.DamageAmount = DamageAmount;\n\n\tauto flags = fn->FunctionFlags;\n\tfn->FunctionFlags |= 0x400;\n\n\tUObject::ProcessEvent(fn, &params);\n\tfn->FunctionFlags = flags;\n\n\n\treturn params.ReturnValue;\n}", "CodeBleu_score": 40.08785435837902}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnRecordTimeChanged.Broadcast(PersonalRecord);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.612513701608854}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t#if WITH_EDITOR\n\tif (!GetWorld()->IsGameWorld())\n\t{\n\t\treturn false;\n\t}\n#endif\n\tif (NewTime < 0.0f)\n\t{\n\t\treturn false;\n\t}\n\n\tif (NewTime > PersonalRecord)\n\t{\n\t\tPersonalRecord = NewTime;\n\t\tOnRecordTimeChanged.Broadcast(PersonalRecord);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 50.51873462455553}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t// If the new time is greater than the current personal record, update the record and broadcast the change.\n    if (NewTime > PersonalRecord) {\n        PersonalRecord = NewTime;\n        OnRecordTimeChanged.Broadcast(PersonalRecord);\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 54.943461162583404}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (InstigatorPawn) {\n\t\tUSAttributeComponent* AttributeComp = InstigatorPawn->GetAttributeComponent();\n\t\tif (AttributeComp) {\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\t\t\tif (PlayerState) {\n\t\t\t\tif (PlayerState->CanRemoveCredits(Cost)) {\n\t\t\t\t\tif (AttributeComp->GetHealthMax() < AttributeComp->GetHealth()) {\n\t\t\t\t\t\tAttributeComp->ApplyHealthChange(HealthChange);\n\t\t\t\t\t\tPlayerState->RemoveCredits(Cost);\n\t\t\t\t\t\tHideAndCooldownPowerup();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.809545400840776}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (InstigatorPawn) {\n\t\tUSAttributeComponent* AttributeComp = InstigatorPawn->GetAttributeComponent();\n\t\tif (AttributeComp) {\n\t\t\tif (AttributeComp->IsFullHealth()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\t\t\tif (PlayerState) {\n\t\t\t\tif (PlayerState->CanRemoveCredits(Cost)) {\n\t\t\t\t\tAttributeComp->ApplyHealthChange(HealthChange);\n\t\t\t\t\tPlayerState->RemoveCredits(Cost);\n\t\t\t\t\tHideAndCooldownPowerup();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 57.744190374526916}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (InstigatorPawn && InstigatorPawn->GetController() && InstigatorPawn->GetController()->GetPawn()) {\n\t\tUSAttributeComponent* AttributeComp = InstigatorPawn->GetController()->GetPawn()->FindComponentByClass<USAttributeComponent>();\n\n\t\tif (AttributeComp) {\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\n\t\t\tif (PlayerState && PlayerState->GetCredits() >= CreditsCost) {\n\t\t\t\tif (!AttributeComp->IsFullHealth()) {\n\t\t\t\t\tAttributeComp->ApplyHealthChange(HealthChange);\n\t\t\t\t\tPlayerState->RemoveCredits(CreditsCost);\n\t\t\t\t\tCooldownPowerup();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.37239070037596}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t// Spawn the impact visual effect at the projectile's location.\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactEffect, GetActorLocation(), ImpactEffectScale, ImpactEffectRotation, ImpactEffectSpawnParams);\n\t// Play the impact sound at the projectile's location.\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation(), ImpactSoundVolumeMultiplier);\n\t// Play a camera shake at the projectile's location.\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactShake, ImpactShakeDuration, ImpactShakeFrequency, ImpactShakeAmplitude, ImpactShakeWaveform, ImpactShakeDuration);\n\t// Release the projectile back to the actor pool.\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 52.41577060803888}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t// Spawn the impact visual effect at the projectile's location.\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), ImpactEffectRotation, ImpactEffectScale);\n\t// Play the impact sound.\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t// Play the camera shake.\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactShake);\n\t// Release the projectile back to the actor pool using the actor pooling subsystem.\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 54.986803979458486}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t// Create the impact visual effect at the projectile's location.\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactEffect, GetActorLocation(), GetActorRotation(), true);\n\n\t// Play the impact sound at the projectile's location.\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Play the camera shake.\n\tUGameplayStatics::PlayWorldCameraShake(this, ImpactShake);\n\n\t// Release the projectile to the actor pool.\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 44.732260553776506}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerState is nullptr. Returning nullptr.\"));\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Play-In-Editor (PIE) mode. Returning first saved player entry.\"));\n\t\tif (SavedPlayers.Num() > 0) {\n\t\t\treturn &SavedPlayers[0];\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"No saved player entries found. Returning nullptr.\"));\n\t\t\treturn nullptr;\n\t\t}\n\t}\n\n\tFString UniqueId = PlayerState->GetUniqueId().ToString();\n\tUE_LOG(LogTemp, Warning, TEXT(\"UniqueId: %s\"), *UniqueId);\n\n\tint32 Index = SavedPlayers.FindByPredicate([UniqueId](const FPlayerSaveData& Data) {\n\t\treturn Data.UniqueId == UniqueId;\n\t});\n\n\tif (Index != INDEX_NONE) {\n\t\treturn &SavedPlayers[Index];\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"No saved player data found for PlayerState with UniqueId: %s. Returning nullptr.\"), *UniqueId);\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 60.05887683187904}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\tif (!PlayerState) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"GetPlayerData: PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\tif (IsPlayInEditor()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: Play-In-Editor mode detected! Returning first saved player entry if available.\"));\n\t\tif (SavedPlayers.Num() > 0) {\n\t\t\treturn &SavedPlayers[0];\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Error, TEXT(\"GetPlayerData: No saved player entries found!\"));\n\t\t\treturn nullptr;\n\t\t}\n\t}\n\telse {\n\t\tFString UniqueId = PlayerState->GetUniqueId().ToString();\n\t\tUE_LOG(LogTemp, Log, TEXT(\"GetPlayerData: UniqueId = %s\"), *UniqueId);\n\t\tint32 Index = SavedPlayers.FindByPredicate([UniqueId](const FPlayerSaveData& Data) {\n\t\t\treturn Data.UniqueId == UniqueId;\n\t\t});\n\t\tif (Index != INDEX_NONE) {\n\t\t\treturn &SavedPlayers[Index];\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Error, TEXT(\"GetPlayerData: No saved player entry found for UniqueId %s!\"), *UniqueId);\n\t\t\treturn nullptr;\n\t\t}\n\t}\n}", "CodeBleu_score": 53.50626699777086}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerState is nullptr.\"));\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerState->GetUniqueId().IsValid()) {\n\t\treturn SavedPlayers.FindByPredicate([PlayerState](const FPlayerSaveData& PlayerData) {\n\t\t\treturn PlayerData.UniqueId == PlayerState->GetUniqueId();\n\t\t});\n\t}\n\telse {\n\t\tif (IsPlayInEditor()) {\n\t\t\tif (SavedPlayers.IsValidIndex(0)) {\n\t\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"No player unique ID available. Returning first saved player.\"));\n\t\t\t\treturn &SavedPlayers[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"No player unique ID available. No saved players.\"));\n\t\t\t\treturn nullptr;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"No player unique ID available.\"));\n\t\t\treturn nullptr;\n\t\t}\n\t}\n}", "CodeBleu_score": 58.47785324342182}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t// 1. Get the player's state.\n\tASPlayerState* PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\n\t// 2. Ensure the player's state is valid.\n\tif (PS == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerState is nullptr\"));\n\t\treturn;\n\t}\n\n\t// 3. Load the player's state from the current save game.\n\tPS->LoadPlayerState(this);\n}", "CodeBleu_score": 65.0466594983302}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tASPlayerState* PS = Cast<ASPlayerState>(NewPlayer->GetPlayerState());\n\tif (PS) {\n\t\tif (PS->IsValid()) {\n\t\t\tPS->LoadPlayerState();\n\t\t}\n\t}\n}", "CodeBleu_score": 58.3176212780276}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tif (!NewPlayer) {\n\t\treturn;\n\t}\n\n\tASPlayerState* PS = Cast<ASPlayerState>(NewPlayer->GetPlayerState());\n\tif (!PS) {\n\t\treturn;\n\t}\n\n\tif (!PS->IsValid()) {\n\t\treturn;\n\t}\n\n\tPS->LoadPlayerState();\n}", "CodeBleu_score": 49.788640819782565}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear the current save game\n\tClearSaveGame();\n\n\t// Retrieve the game state\n\tAGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\tif (GS) {\n\t\t// Save player data for each player in the game state\n\t\tfor (int i = 0; i < GS->PlayerArray.Num(); i++) {\n\t\t\tASPlayerState* PS = CastChecked<ASPlayerState>(GS->PlayerArray[i]);\n\t\t\tif (PS) {\n\t\t\t\tPS->SavePlayerState();\n\t\t\t}\n\t\t}\n\n\t\t// Iterate through all actors in the world\n\t\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\t\tAActor* Actor = *ActorItr;\n\t\t\tif (Actor) {\n\t\t\t\t// Save actor data if it implements a specific interface\n\t\t\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t\t\t// Save the actor's name\n\t\t\t\t\tCurrentSaveGame->SavedActors.Add(Actor->GetFName());\n\t\t\t\t\t// Save the actor's transform\n\t\t\t\t\tCurrentSaveGame->SavedActorsTransform.Add(Actor->GetActorTransform());\n\t\t\t\t\t// Save the actor's serialized data\n\t\t\t\t\tActor->Serialize(CurrentSaveGame->SavedActorsData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tWriteSaveGameToSlot(CurrentSaveGame, SaveGameSlot);\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 48.06945935228399}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear the current save game\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Get the game state\n\tAGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\n\t// Get the player array\n\tTArray<ASPlayerState*> PSArray = GS->PlayerArray;\n\n\t// Save the player data for each player in the game state\n\tfor (ASPlayerState* PS : PSArray) {\n\t\tif (PS && PS->IsValidLowLevel()) {\n\t\t\tCurrentSaveGame->SavedPlayers.Add(PS->SavePlayerState());\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (AActor* Actor : GetWorld()->GetAllActors()) {\n\t\t// If the actor implements the USGameplayInterface interface\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t// Cast the actor to the interface\n\t\t\tUSGameplayInterface* GI = CastChecked<USGameplayInterface>(Actor);\n\n\t\t\t// If the actor is valid\n\t\t\tif (Actor->IsValidLowLevel()) {\n\t\t\t\t// Serialize the actor\n\t\t\t\tFTransform Transform = Actor->GetActorTransform();\n\t\t\t\tFString SerializedData;\n\t\t\t\tActor->Serialize(SerializedData);\n\n\t\t\t\t// Save the actor data\n\t\t\t\tCurrentSaveGame->SavedActors.Add(FSaveGameActorData(Actor->GetFName(), Transform, SerializedData));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Write the save game to the current slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, SaveGameSlotName);\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 45.82901933237036}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\tif (!CurrentSaveGame) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"No save game to write.\"));\n\t\treturn;\n\t}\n\n\t// Clear existing saved player and actor data\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Retrieve the game state\n\tAGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\tif (!GS) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"No game state to save.\"));\n\t\treturn;\n\t}\n\n\t// Save player data for each player in the game state\n\tfor (int32 i = 0; i < GS->PlayerArray.Num(); i++) {\n\t\tASPlayerState* PS = CastChecked<ASPlayerState>(GS->PlayerArray[i]);\n\t\tif (PS) {\n\t\t\tCurrentSaveGame->SavedPlayers.Add(PS->SavePlayerState());\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\tActor->Serialize(*CurrentSaveGame);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tif (SaveGameSlotName.IsEmpty()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"No save game slot name specified.\"));\n\t\treturn;\n\t}\n\n\tif (SaveGameSlotName.IsValid()) {\n\t\tif (SaveGameSlotName.IsValid()) {\n\t\t\tif (SaveGameSlotName.IsValid()) {\n\t\t\t\tif (SaveGameSlotName.IsValid()) {\n\t\t\t\t\tif (SaveGameSlotName.IsValid()) {\n\t\t\t\t\t\tif (SaveGameSlotName.IsValid()) {\n\t\t\t\t\t\t\tif", "CodeBleu_score": 55.76785880199736}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\tImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0, 0));\n    ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0);\n    ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0);\n    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));\n    ImGui::PushStyleVar(ImGuiStyleVar_ItemInnerSpacing, ImVec2(0, 0));\n    ImGui::PushStyleColor(ImGuiCol_ChildWindowBg, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_TitleBg, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_TitleBgActive, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_TitleBgCollapsed, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_ScrollbarBg, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_ScrollbarGrab, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_ScrollbarGrabHovered, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_ScrollbarGrabActive, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0, 0, 0, 0));\n    ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0, 0, 0", "CodeBleu_score": 29.132623632108746}, {"code": "void FrameworkConfig::draw_themes(){\n\tImGui::Text(\"Themes\");\n    ImGui::SameLine();\n    ImGui::TextColored(ImVec4(1.0f, 0.0f, 0.0f, 1.0f), \" (WIP)\");\n    ImGui::Separator();\n\n    // Get the current theme\n    std::string current_theme_name = g_framework->get_theme()->get_name();\n\n    // Draw the theme selection UI\n    if (ImGui::BeginCombo(\"##theme_selection\", current_theme_name.c_str())) {\n        // Draw the themes\n        for (const auto &theme : g_framework->get_themes()) {\n            // Check if the theme is selected\n            bool is_selected = (current_theme_name == theme->get_name());\n\n            // Draw the theme\n            if (ImGui::Selectable(theme->get_name().c_str(), is_selected)) {\n                // Set the theme\n                g_framework->set_theme(theme);\n            }\n\n            // Set the selected theme\n            if (is_selected) {\n                ImGui::SetItemDefaultFocus();\n            }\n        }\n\n        // Close the combo\n        ImGui::EndCombo();\n    }\n\n    // Draw the font size UI\n    ImGui::Text(\"Font Size\");\n    ImGui::SameLine();\n    ImGui::TextColored(ImVec4(1.0f, 0.0f, 0.0f, 1.0f), \" (WIP)\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100.0f);\n    ImGui::DragFloat(\"##font_size\", &m_font_size->value, 0.1f, 0.5f, 1.5f);\n    ImGui::PopItemWidth();\n\n    // Check if the font size has been modified\n    if (m_font_size->has_changed()) {\n        // Update the font size in the framework\n        g_framework->set_font_size(m_font_size->value);\n    }\n}", "CodeBleu_score": 41.493939304107066}, {"code": "void FrameworkConfig::draw_themes(){\n\tImGui::PushItemWidth(100.0f);\n    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    if (ImGui::Button(\"Reset\")) {\n        g_framework->set_theme(m_theme_default);\n    }\n    ImGui::SameLine();\n    ImGui::Text(\"Font Size\");\n    ImGui::SameLine();\n    ImGui::SliderInt(\"##font_size\", m_font_size, 8, 32, \"%d\");\n    ImGui::PopItemWidth();\n    ImGui::NewLine();\n    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    ImGui::ColorEdit4(\"##theme_bg\", &m_theme_bg[0], ImGuiColorEditFlags_NoInputs);\n    ImGui::SameLine();\n    ImGui::ColorEdit4(\"##theme_text\", &m_theme_text[0], ImGuiColorEditFlags_NoInputs);\n    ImGui::SameLine();\n    ImGui::ColorEdit4(\"##theme_accent\", &m_theme_accent[0], ImGuiColorEditFlags_NoInputs);\n    ImGui::SameLine();\n    if (ImGui::Button(\"Reset\")) {\n        m_theme_bg = m_theme_default.bg;\n        m_theme_text = m_theme_default.text;\n        m_theme_accent = m_theme_default.accent;\n    }\n    ImGui::SameLine();\n    ImGui::Text(\"Font Size\");\n    ImGui::SameLine();\n    ImGui::SliderInt(\"##font_size\", m_font_size, 8, 32, \"%d\");\n    ImGui::NewLine();\n    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    ImGui::ColorEdit4(\"##theme_bg\", &m_theme_bg[0], ImGuiColorEditFlags_NoInputs);\n    ImGui::SameLine();\n    ImGui::ColorEdit4(\"##theme_text\", &m_theme_text[0], ImGuiColorEditFlags_NoInputs);\n    Im", "CodeBleu_score": 39.006484615365856}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Main\");\n\tImGui::Separator();\n\n\tm_menu_key->draw();\n\tm_show_cursor_key->draw();\n\tm_remember_menu_state->draw();\n\tm_enable_l3_r3_toggle->draw();\n\tm_always_show_cursor->draw();\n\tm_log_level->draw();\n}", "CodeBleu_score": 17.067032809563322}, {"code": "void FrameworkConfig::draw_main() {\n\t// Get the current log level\n\tint current_log_level = spdlog::get_level();\n\n\t// Draw the menu key\n\tm_menu_key->draw();\n\n\t// Draw the show cursor key\n\tm_show_cursor_key->draw();\n\n\t// Draw the remember menu state\n\tm_remember_menu_state->draw();\n\n\t// Draw the L3 + R3 long press\n\tm_l3_r3_long_press->draw();\n\n\t// Draw the enable L3 + R3 toggle\n\tm_enable_l3_r3_toggle->draw();\n\n\t// Draw the always show cursor\n\tm_always_show_cursor->draw();\n\n\t// Draw the log level\n\tm_log_level->draw();\n\n\t// If the log level is changed and is within a valid range, update the log level\n\tif (current_log_level != m_log_level->value) {\n\n\t\t// If the log level is valid\n\t\tif (m_log_level->value >= 0 && m_log_level->value <= 5) {\n\n\t\t\t// Update the log level\n\t\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value));\n\t\t}\n\t}\n}", "CodeBleu_score": 35.60120354933599}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Main\");\n    ImGui::Separator();\n    m_menu_key->draw();\n    m_show_cursor_key->draw();\n    m_remember_menu_state->draw();\n    m_l3_r3_long_press->draw();\n    ImGui::SameLine();\n    m_enable_l3_r3_toggle->draw();\n    ImGui::Separator();\n    m_always_show_cursor->draw();\n    ImGui::Separator();\n    m_log_level->draw();\n}", "CodeBleu_score": 41.550773235299964}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\tFFastXml* FastXmlParser = new FFastXml();\n\tFString ErrorMessage = TEXT( \"Error parsing OpenStreetMap file: \" );\n\t\n\tif( bIsFilePathActuallyTextBuffer ) {\n\t\tFString FileBuffer = OSMFilePath;\n\t\tFastXmlParser->Parse( FileBuffer, TEXT( \"OpenStreetMapFile\" ) );\n\t}\n\telse {\n\t\tFString FileBuffer;\n\t\tFFileHelper::LoadFileToString( FileBuffer, *OSMFilePath );\n\t\tFastXmlParser->Parse( FileBuffer, TEXT( \"OpenStreetMapFile\" ) );\n\t}\n\t\n\tif( FastXmlParser->GetError() == 0 ) {\n\t\t// Parse the file and get the node data\n\t\tFString NodeName = TEXT( \"node\" );\n\t\tTArray< FString > NodeAttributes;\n\t\tNodeAttributes.Add( TEXT( \"lat\" ) );\n\t\tNodeAttributes.Add( TEXT( \"lon\" ) );\n\t\tFastXmlParser->SetTag( NodeName, NodeAttributes );\n\t\t\n\t\t// Parse the file and get the way data\n\t\tFString WayName = TEXT( \"way\" );\n\t\tTArray< FString > WayAttributes;\n\t\tWayAttributes.Add( TEXT( \"id\" ) );\n\t\tFastXmlParser->SetTag( WayName, WayAttributes );\n\t\t\n\t\t// Parse the file and get the relation data\n\t\tFString RelationName = TEXT( \"relation\" );\n\t\tTArray< FString > RelationAttributes;\n\t\tRelationAttributes.Add( TEXT( \"id\" ) );\n\t\tFastXmlParser->SetTag( RelationName, RelationAttributes );\n\t\t\n\t\t// Parse the file and get the member data\n\t\tFString MemberName = TEXT( \"member\" );\n\t\tTArray< FString > MemberAttributes;\n\t\tMemberAttributes.Add( TEXT( \"type\" ) );\n\t\tMemberAttributes.Add( TEXT( \"ref\" ) );\n\t\tFastXmlParser->SetTag( MemberName, MemberAttributes );\n\t\t\n\t\t//", "CodeBleu_score": 40.59691606954823}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// Parse the file or text buffer.\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tif ( !FFastXml::Parse( XMLParser, *OSMFilePath, TEXT( \"UTF-8\" ), FeedbackContext ) ) {\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Error parsing XML file.\" ) );\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\tif ( !FFastXml::Parse( XMLParser, *OSMFilePath, TEXT( \"UTF-8\" ), FeedbackContext ) ) {\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Error parsing XML file.\" ) );\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Initialize the node map.\n\tNodeMap.Empty( NodeMap.Num() );\n\n\t// Initialize the node list.\n\tNodeList.Empty( NodeList.Num() );\n\n\t// Initialize the way list.\n\tWayList.Empty( WayList.Num() );\n\n\t// Initialize the way node list.\n\tWayNodeList.Empty( WayNodeList.Num() );\n\n\t// Initialize the relation list.\n\tRelationList.Empty( RelationList.Num() );\n\n\t// Initialize the relation member list.\n\tRelationMemberList.Empty( RelationMemberList.Num() );\n\n\t// Initialize the relation member node list.\n\tRelationMemberNodeList.Empty( RelationMemberNodeList.Num() );\n\n\t// Initialize the relation member way list.\n\tRelationMemberWayList.Empty( RelationMemberWayList.Num() );\n\n\t// Initialize the relation member relation list.\n\tRelationMemberRelationList.Empty( RelationMemberRelationList.Num() );\n\n\t// Initialize the relation member relation member list.\n\tRelationMemberRelationMemberList.Empty( RelationMemberRelationMemberList.Num() );\n\n\t// Initialize the relation member relation member node list.\n\tRelationMemberRelationMemberNodeList.Empty( RelationMemberRelationMemberNodeList.Num() );\n\n\t// Initialize the relation member relation member way", "CodeBleu_score": 43.93900094504089}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// Initialize the node map and the error message.\n\tNodeMap.Reset();\n\tErrorMessage.Reset();\n\t\n\t// Initialize the average latitude and longitude.\n\tAverageLatitude = 0.0f;\n\tAverageLongitude = 0.0f;\n\t\n\t// If the file path is actually a text buffer, parse it directly.\n\tif( bIsFilePathActuallyTextBuffer ) {\n\t\t// Parse the text buffer.\n\t\tif( !FFastXml::Parse( *this, *OSMFilePath.GetCharArray().GetData(), FeedbackContext ) ) {\n\t\t\t// Log an error message.\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to parse the text buffer.\" ) );\n\t\t\t\n\t\t\t// Return false.\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Otherwise, parse the file.\n\telse {\n\t\t// Parse the file.\n\t\tif( !FFastXml::ParseFile( *this, *OSMFilePath.GetCharArray().GetData(), FeedbackContext ) ) {\n\t\t\t// Log an error message.\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to parse the file.\" ) );\n\t\t\t\n\t\t\t// Return false.\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Calculate the average latitude and longitude.\n\tCalculateAverageLatitudeAndLongitude();\n\t\n\t// Return true.\n\treturn true;\n}", "CodeBleu_score": 41.07702769044311}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tUStreetMapActorFactory::PostSpawnActor(Asset, NewActor);\n\n\t// Cast the new actor to AStreetMapActor\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\n\t// Cast the new actor's street map component to UStreetMapComponent\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\n\t// Set the street map asset for the component\n\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n}", "CodeBleu_score": 67.2375078721497}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\tif (UStreetMap* StreetMapAsset = Cast<UStreetMap>(Asset)) {\n\t\tif (AStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor)) {\n\t\t\tif (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMapAsset);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 75.79069747208888}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\tif (Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t}\n}", "CodeBleu_score": 76.61876006780022}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif (SelectedStreetMapComponent != nullptr)\n\t{\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 91.73828018444132}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(SelectedStreetMapComponent != nullptr)\n\t{\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 96.61419864585972}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif (SelectedStreetMapComponent != nullptr)\n\t{\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 91.73828018444132}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t// This code will execute after your module is loaded into memory (but after global variables are initialized, of course.)\n\t\n\t// Register the StreetMap asset type with the asset tools.\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::Get().LoadModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tAssetToolsModule.Get().RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions(StreetMapStyle)));\n\t\n\t// Initialize the StreetMap style.\n\tStreetMapStyle = MakeShareable(new FStreetMapStyle());\n\t\n\t// Register a custom class layout for the StreetMapComponent in the property editor module.\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\t\n\t// Notify the property editor module that the customization module has changed.\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 62.26024710402531}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\t\n\t// Register asset type actions\n\tFAssetTypeActions_StreetMapAsset::Register();\n\n\t// Register the StreetMap style\n\tStreetMapStyle = MakeShareable(new FStreetMapStyle);\n\tFStreetMapStyle::Initialize();\n\t\n\t// Register a custom class layout for the StreetMapComponent\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\t\n\t// Notify the property editor module that the customization module has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 48.27221482774151}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t// Register the StreetMap asset type\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::GetModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tAssetToolsModule.Get().RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions(FStreetMapStyle::GetStyleSetName())));\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(FStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 54.623267139092015}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t//if (StreetMapAsset == nullptr)\n\t//\treturn nullptr;\n\n\t//FStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\t//StreetMapSceneProxy->Init();\n\t//return StreetMapSceneProxy;\n\n\treturn nullptr;\n}", "CodeBleu_score": 5.301142142585888}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\tFStreetMapSceneProxy* StreetMapSceneProxy = NewObject<FStreetMapSceneProxy>();\n\tif (HasValidMesh()) {\n\t\tStreetMapSceneProxy->Init(this);\n\t\treturn StreetMapSceneProxy;\n\t}\n\telse {\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 50.412200333431414}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\tif (StreetMap->IsValid()) {\n\t\treturn new FStreetMapSceneProxy(this);\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 13.406194821593523}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\tTArray<uint8> InputIds;\n\tInputIds.Add(0);\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 75.44241682908797}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\tTArray<uint8> InputIds;\n\tInputIds.Add(Spec.InputID);\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 72.05143351977675}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\tTArray<uint8> InputIds;\n\tInputIds.Add(1);\n\tAbilities->BindAbilityToInputIDs(TestAbility01Handle, InputIds);\n}", "CodeBleu_score": 65.51751346152884}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\tif (Value != 0.0f) {\n\t\t// add movement in the direction the controller is pointing\n\t\tAddMovementInput(GetActorForwardVector(), Value);\n\t}\n}", "CodeBleu_score": 13.808793058867721}, {"code": "void AARCharacter::MoveForward(float Value){\n\tif ((Controller != NULL) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 98.03286449525625}, {"code": "void AARCharacter::MoveForward(float Value){\n\t}", "CodeBleu_score": 3.377521588547033}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\tFVector Result = GetMesh()->GetSocketLocation(Socket);\n\tif (Result == FVector::ZeroVector) {\n\t\tResult = GetMesh()->GetSocketLocation(FName(\"headSocket\"));\n\t}\n\treturn Result;\n}", "CodeBleu_score": 53.67259893023524}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\tif (MainWeaponMesh) {\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 46.225249856871415}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\tif (MainWeaponMesh) {\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 46.225249856871415}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority)\n\t{\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinSpawnedEnemies)\n\t\t{\n\t\t\tFTimerDelegate Delegate = FTimerDelegate::CreateUObject(this, &AAREnemySpawner::SetupSpawner);\n\n\t\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\t\tTimer.SetTimer(SpawnerHandle, Delegate, TimeBetweenSpawns, false);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.32490720753936}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinEnemiesToSpawn) {\n\t\t\tFTimerDelegate Delegate = FTimerDelegate::CreateUObject(this, &AAREnemySpawner::SetupSpawner);\n\t\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\t\tTimer.SetTimer(SetupSpawnerHandle, Delegate, TimeBetweenSetup, false);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.18251592154504}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinEnemiesToSpawn) {\n\t\t\tFTimerDelegate Delegate = FTimerDelegate::CreateUObject(this, &AAREnemySpawner::SetupSpawner);\n\t\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\t\tTimer.SetTimer(SpawnerHandle, Delegate, TimeBetweenSpawns, false);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.30636517356482}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result = Super::ApproveLogin(Options);\n\tTArray<FString> params;\n\tOptions.ParseIntoArray(params, TEXT(\" \"), true);\n\tfor (int i = 0; i < params.Num(); i++) {\n\t\tFString param = params[i];\n\t\tif (param.Contains(\"PlayerId\")) {\n\t\t\tFString value = param.Replace(TEXT(\"PlayerId=\"), TEXT(\"\"));\n\t\t\tPlayerId = FCString::Atoi(*value);\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 55.06015617003548}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\"&\"), true);\n\tfor (FString Param : Params) {\n\t\tif (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = FString(Param.Mid(9));\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 51.58241185759556}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString Result = Super::ApproveLogin(Options);\n    TArray<FString> ParsedOptions;\n    Options.ParseIntoArray(ParsedOptions, TEXT(\"&\"), true);\n    for (FString Option : ParsedOptions) {\n        if (Option.StartsWith(TEXT(\"PlayerId=\"))) {\n            PlayerId = Option.Mid(9);\n        }\n    }\n    return Result;\n}", "CodeBleu_score": 52.63289427758604}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t//Get the username, display name, and password\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t//Check if any of the fields are empty\n\tif (UserName.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please enter a username\"));\n\t\treturn;\n\t}\n\tif (DisplayName.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please enter a display name\"));\n\t\treturn;\n\t}\n\tif (Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please enter a password\"));\n\t\treturn;\n\t}\n\n\t//Hide the register button and call the RegisterNewPlayer method from the game instance\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 80.51384128739274}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please fill in all fields!\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tGetOwningPlayer()->GetGameInstance<UARGameInstance>()->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 54.784719689487424}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t// Get the username, display name, and password from the input fields\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\t// Check if any of these fields are empty\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\t// Display a warning message if so\n\t\tWarrningText->SetText(FText::FromString(\"Please fill out all fields!\"));\n\t\treturn;\n\t}\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t// Get the game instance\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\t// Register the new player\n\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 61.87720722369979}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\tconst auto& EnemyHitResult = InMod.AttributeChangeInfo.GetHitResult();\n\tif (EnemyHitResult.GetActor() == nullptr) {\n\t\treturn;\n\t}\n\n\tconst auto& Damage = InMod.AttributeChangeInfo.GetValue();\n\tconst auto& DamageLocation = EnemyHitResult.GetActor()->GetActorLocation();\n\tconst auto& ScreenLocation = ProjectWorldToScreen(DamageLocation);\n\n\tFloatingCombatText->SetInfo(Damage, ScreenLocation, true);\n}", "CodeBleu_score": 37.00174401267545}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.AttributeSetName == \"Health\") {\n\t\tif (InMod.AttributeValue.IsNumeric()) {\n\t\t\tif (InMod.AttributeValue.NumericValue < 0) {\n\t\t\t\tif (InMod.AttributeSetActor != nullptr) {\n\t\t\t\t\tif (InMod.AttributeSetActor->IsValidLowLevel()) {\n\t\t\t\t\t\tif (InMod.AttributeSetActor->IsA(AActor::StaticClass())) {\n\t\t\t\t\t\t\tif (InMod.AttributeSetActor->GetName() == \"Enemy\") {\n\t\t\t\t\t\t\t\tif (InMod.AttributeSetActor->GetActorLocation().IsZero()) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tFVector2D ScreenLocation;\n\t\t\t\t\t\t\t\tFVector WorldLocation = InMod.AttributeSetActor->GetActorLocation();\n\t\t\t\t\t\t\t\tFVector2D WorldLocation2D;\n\t\t\t\t\t\t\t\tWorldLocation2D.X = WorldLocation.X;\n\t\t\t\t\t\t\t\tWorldLocation2D.Y = WorldLocation.Y;\n\t\t\t\t\t\t\t\tUGameplayStatics::ProjectWorldToScreen(GetWorld(), WorldLocation2D, ScreenLocation);\n\t\t\t\t\t\t\t\tFString DamageText = FString::Printf(TEXT(\"%.0f\"), InMod.AttributeValue.NumericValue);\n\t\t\t\t\t\t\t\tFloatingCombatText->SetInfo(DamageText, ScreenLocation, 1.0f, 0.0f, 0.0f, 1.0f);\n\t\t\t\t\t\t\t\tFloatingCombatText->SetVisibility(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.6351911173813}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t// Check if the target actor exists\n\tif (InMod.TargetActor) {\n\t\t// Check if the damage value is greater than 0\n\t\tif (InMod.NewValue > 0) {\n\t\t\t// Get the damage location\n\t\t\tconst FVector DamageLocation = InMod.TargetActor->GetActorLocation();\n\t\t\t// Project the damage location to screen coordinates\n\t\t\tconst FVector2D ScreenLocation = UGameplayStatics::ProjectWorldToScreen(DamageLocation, this->PlayerCamera->GetComponentLocation(), this->PlayerCamera->GetComponentRotation());\n\t\t\t// Set the floating combat text with the damage value and screen location\n\t\t\tthis->FloatingCombatText->SetInfo(InMod.NewValue, ScreenLocation);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.81006953056503}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\tif (AbilityInstance) {\n        UARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(AbilityInstance->GetOwner());\n        AARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n        if (Character->HasServerAuthority()) {\n            UARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n            MagazineUpgrade->SetMagazineUpgradeValue(MagazineUpgrade->GetMagazineUpgradeValue() + 1);\n            MagazineUpgrade->ApplyUpgradeEffect(AbilityInstance);\n            OnMagazineUpdateAdded();\n        }\n    }\n}", "CodeBleu_score": 54.55755182252421}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\tif (AbilityInstance) {\n\t\tUARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(GetOwner());\n\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\n\t\tif (Character && Character->HasServerAuthority()) {\n\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\tAbilityInstance->AddMagazineUpgrade(MagazineUpgrade);\n\t\t\tOnMagazineUpdateAdded();\n\t\t}\n\t}\n}", "CodeBleu_score": 52.773309360599896}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\tif (!AbilityInstance) {\n        return;\n    }\n\n    UARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(GetOuter());\n    if (!WeaponComponent) {\n        return;\n    }\n\n    AARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n    if (!Character) {\n        return;\n    }\n\n    if (Character->HasServerAuthority()) {\n        InMagazineUpgrade->DuplicateObject<UARMagazineUpgradeItem>(this);\n        AbilityInstance->AddMagazineUpgrade(InMagazineUpgrade);\n    }\n\n    OnMagazineUpdateAdded();\n}", "CodeBleu_score": 63.506063452872816}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (!OwnerCharacter) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UARWeaponInventoryComponent::OnWeaponReady: Owner is not an AARCharacter!\"));\n\t\treturn;\n\t}\n\n\tUGAAbilityComponent* AbilityComp = OwnerCharacter->GetAbilityComp();\n\tif (!AbilityComp) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UARWeaponInventoryComponent::OnWeaponReady: Owner's ability component is not set!\"));\n\t\treturn;\n\t}\n\n\tUGAAbilityBase* Ability = AbilityComp->BP_GetAbilityByHandle(InAbilityTag, LocalIndex);\n\tif (!Ability) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UARWeaponInventoryComponent::OnWeaponReady: Ability is not set!\"));\n\t\treturn;\n\t}\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 51.262244680218046}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tif (!Owner)\n\t\treturn;\n\n\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\tif (!Character)\n\t\treturn;\n\n\tUGAAbilityBase* Ability = Character->GetAbilityComp()->BP_GetAbilityByHandle(InAbilityTag, LocalIndex);\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Cast<UGAAbilityBase>(Ability));\n}", "CodeBleu_score": 61.27195787534008}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\n\tif (!Character)\n\t\treturn;\n\n\tUGAAbilityBase* Ability = Character->GetAbilityComp()->BP_GetAbilityByHandle(InAbilityTag, LocalIndex);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Cast<UGAAbilityBase>(Ability));\n}", "CodeBleu_score": 62.95517014811583}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (!POwner)\n\t\treturn;\n\tif (!Cast<AARCharacter>(POwner))\n\t\treturn;\n\tAARCharacter* Character = Cast<AARCharacter>(POwner);\n\tFARWeaponRPC Data;\n\tData.Weapon = GetItem<UARItemWeapon>(LocalIndex)->Weapon.ToString();\n\tData.Position = GetItem<UARItemWeapon>(LocalIndex)->HolsteredPosition;\n\tData.Rotation = GetItem<UARItemWeapon>(LocalIndex)->HolsteredRotation;\n\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\tServerHolster(Data);\n\tif (LocalIndex == CurrentWeaponIndex)\n\t\tUnequip(LocalIndex);\n}", "CodeBleu_score": 61.55872877403663}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t\telse {\n\t\t\tFARWeaponRPC Data;\n\t\t\tData.Weapon = Character->GetWeapon(LocalIndex)->Weapon.ToString();\n\t\t\t//Data.SocketName = InWeapon->Socket;\n\t\t\tData.Position = Character->GetWeapon(LocalIndex)->HolsteredPosition;\n\t\t\tData.Rotation = Character->GetWeapon(LocalIndex)->HolsteredRotation;\n\t\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\t\tServerHolster(Data);\n\t\t}\n\t}\n}", "CodeBleu_score": 63.76671512990348}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tFARWeaponRPC Data;\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tif (LocalIndex == CurrentWeaponIndex)\n\t\t{\n\t\t\tUnequip(LocalIndex);\n\t\t\treturn;\n\t\t}\n\t\tData.Weapon = Character->GetEquipedMainWeapon()->GetWeapon()->GetWeaponName();\n\t\tData.Position = Character->GetEquipedMainWeapon()->GetRelativeLocation();\n\t\tData.Rotation = Character->GetEquipedMainWeapon()->GetRelativeRotation();\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tCurrentWeaponIndex = -1;\n\t}\n}", "CodeBleu_score": 65.73310203173313}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.15676266996132}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.15676266996132}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t// If we're not running as a dedicated server, remove all loading screen preparation handlers associated with the module from the movie player.\n    if (!IsRunningDedicatedServer()) {\n        GetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n    }\n}", "CodeBleu_score": 71.65164318559563}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen\"));\n\tif (UAsyncLoadingScreenLibrary::GetIsEnableLoadingScreen())\n\t{\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen: Loading screen enabled\"));\n\t\tUAsyncLoadingScreenLibrary::SetIsStartup(false);\n\t\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>());\n\t}\n\telse\n\t{\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen: Loading screen disabled\"));\n\t}\n}", "CodeBleu_score": 55.34348869423915}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogTemp, Display, TEXT(\"PreSetupLoadingScreen\"));\n\tif (UAsyncLoadingScreenLibrary::GetIsEnableLoadingScreen())\n\t{\n\t\tUE_LOG(LogTemp, Display, TEXT(\"Loading screen enabled\"));\n\t\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>());\n\t}\n}", "CodeBleu_score": 48.940024961887026}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::GetIsEnableLoadingScreen())\n\t{\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen - EnableLoadingScreen\"));\n\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\t// Setup loading screen\n\t\tSetupLoadingScreen(Settings->Default);\n\t}\n}", "CodeBleu_score": 68.7446693626189}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\tfor (const FString& ImagePath : LoadingScreenSettings->StartupBackgroundImages) {\n\t\tUTexture2D* Image = Image.TryLoad(ImagePath);\n\t\tif (Image) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\tfor (const FString& ImagePath : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\tUTexture2D* Image = Image.TryLoad(ImagePath);\n\t\tif (Image) {\n\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.75989169577426}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\tULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\tif (Settings) {\n\t\tfor (const FString& ImagePath : Settings->StartupBackgroundImages) {\n\t\t\tUTexture2D* Image = Image.TryLoad(ImagePath);\n\t\t\tif (Image) {\n\t\t\t\tStartupBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\t\tfor (const FString& ImagePath : Settings->DefaultBackgroundImages) {\n\t\t\tUTexture2D* Image = Image.TryLoad(ImagePath);\n\t\t\tif (Image) {\n\t\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 57.75382156999782}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\tfor (const FString& ImageName : LoadingScreenSettings->StartupBackgroundImages) {\n\t\tUTexture2D* Image = Image.TryLoad(ImageName);\n\t\tif (Image) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\tfor (const FString& ImageName : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\tUTexture2D* Image = Image.TryLoad(ImageName);\n\t\tif (Image) {\n\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.84393949038938}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t// Get the current alpha value\n\tfloat CurrentAlpha = FMath::Clamp(LoadingCompleteText->GetRenderOpacity(), 0.0f, 1.0f);\n\n\t// Get the target alpha value\n\tfloat TargetAlpha = 0.0f;\n\tif (CurrentAlpha < 0.5f) {\n\t\tTargetAlpha = 1.0f;\n\t}\n\telse {\n\t\tTargetAlpha = 0.0f;\n\t}\n\n\t// Adjust the alpha value\n\tfloat AlphaDelta = (TargetAlpha - CurrentAlpha) * AnimationSpeed;\n\tLoadingCompleteText->SetRenderOpacity(CurrentAlpha + AlphaDelta);\n\n\t// Check if the animation should continue\n\tif (CurrentAlpha != TargetAlpha) {\n\t\treturn EActiveTimerReturnType::Continue;\n\t}\n\telse {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n}", "CodeBleu_score": 32.49980844155354}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\tif (LoadingCompleteText->IsVisible()) {\n\t\tfloat NewAlpha = FMath::Clamp(LoadingCompleteText->GetRenderOpacity() + InDeltaTime * AnimationSpeed, 0.0f, 1.0f);\n\t\tLoadingCompleteText->SetRenderOpacity(NewAlpha);\n\t\tif (NewAlpha == 1.0f) {\n\t\t\tAnimationDirection = -1.0f;\n\t\t}\n\t\telse if (NewAlpha == 0.0f) {\n\t\t\tAnimationDirection = 1.0f;\n\t\t}\n\t}\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 27.183827846475207}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t// Set the text's alpha value based on the elapsed time and animation speed\n\tfloat Alpha = FMath::Clamp(\n\t\t(InCurrentTime * AnimationSpeed) % 1,\n\t\tAlphaMin,\n\t\tAlphaMax\n\t);\n\t\n\t// Set the text's alpha value\n\tSetAlpha(Alpha);\n\t\n\t// Check if the animation should continue\n\treturn (Alpha < AlphaMax) ? EActiveTimerReturnType::Continue : EActiveTimerReturnType::Stop;\n}", "CodeBleu_score": 16.456306205842647}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\tstd::lock_guard<std::mutex> lock(Data->Lock);\n\tif (Data->Index == -1) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 40.83080964189336}, {"code": "bool FRaceAwaiter::await_ready(){\n\tData->Lock.lock();\n    if (Data->Index == -1) {\n        Data->Lock.unlock();\n        return false;\n    }\n    Data->Lock.unlock();\n    return true;\n}", "CodeBleu_score": 76.27231822384324}, {"code": "bool FRaceAwaiter::await_ready(){\n\tData->Lock.lock();\n\tif (Data->Index != -1) {\n\t\tData->Lock.unlock();\n\t\treturn true;\n\t}\n\telse {\n\t\tData->Lock.unlock();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 81.84794420449349}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tif (bCleanup) {\n\t\tif (State) {\n\t\t\tFFindPathSharedPtr* FindPathState = static_cast<FFindPathSharedPtr*>(State);\n\t\t\tif (FindPathState) {\n\t\t\t\tFindPathState->AbortAsyncFindPathRequest();\n\t\t\t\tdelete FindPathState;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn true;\n}", "CodeBleu_score": 32.02042624866515}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tFFindPathSharedPtr* FindPathState = static_cast<FFindPathSharedPtr*>(State);\n    if (bCleanup && FindPathState->IsValid()) {\n        FindPathState->AbortAsyncFindPathRequest();\n        FindPathState->Reset();\n    }\n    return !FindPathState->IsValid();\n}", "CodeBleu_score": 33.883014904458356}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tFFindPathSharedPtr* FindPathState = static_cast<FFindPathSharedPtr*>(State);\n\tif (bCleanup) {\n\t\tif (FindPathState) {\n\t\t\tFindPathState->AbortAsyncFindPathRequest();\n\t\t\tdelete FindPathState;\n\t\t\tFindPathState = nullptr;\n\t\t}\n\t}\n\treturn FindPathState == nullptr;\n}", "CodeBleu_score": 35.21707836798505}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (get_viewport()->get_audio_listener_2d() != nullptr) {\n\t\t\t\tget_viewport()->get_audio_listener_2d()->clear_current();\n\t\t\t}\n\t\t\tmake_current();\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 56.625381802485066}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.88362544569358}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.88362544569358}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active) {\n\t\treturn;\n\t}\n\n\tint32_t *mix_buffer = (int32_t *)memalloc(p_frames * 4 * sizeof(int32_t));\n\tint32_t *mix_buffer_ptr = mix_buffer;\n\n\tint32_t *output_buffer = p_buffer;\n\tint32_t *output_buffer_ptr = p_buffer;\n\n\tint32_t mix_frames = p_frames;\n\n\twhile (mix_frames) {\n\t\tint32_t frames = MIN(mix_frames, 1024);\n\n\t\tlock();\n\t\taudio_server_process(frames, mix_buffer_ptr, false);\n\t\tunlock();\n\n\t\tfor (int i = 0; i < frames * 2; i++) {\n\t\t\tint32_t l = mix_buffer_ptr[i];\n\t\t\tint32_t r = mix_buffer_ptr[i + 1];\n\n\t\t\tl = CLAMP(l, -32768, 32767);\n\t\t\tr = CLAMP(r, -32768, 32767);\n\n\t\t\toutput_buffer_ptr[i * 2] = l;\n\t\t\toutput_buffer_ptr[i * 2 + 1] = r;\n\t\t}\n\n\t\tmix_buffer_ptr += frames * 2;\n\t\toutput_buffer_ptr += frames * 2;\n\n\t\tmix_frames -= frames;\n\t}\n\n\tmemfree(mix_buffer);\n}", "CodeBleu_score": 46.87147133099906}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (active.is_set()) {\n\t\tlock();\n\t\tint frames_to_mix = p_frames;\n\t\twhile (frames_to_mix) {\n\t\t\tint frames_to_mix_chunk = MIN(frames_to_mix, 1024);\n\t\t\taudio_server_process(frames_to_mix_chunk, p_buffer);\n\t\t\tp_buffer += frames_to_mix_chunk;\n\t\t\tframes_to_mix -= frames_to_mix_chunk;\n\t\t}\n\t\tunlock();\n\t}\n}", "CodeBleu_score": 30.33887456721031}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (active.is_set() && !use_threads) {\n\t\tlock();\n\t\tint frames_to_mix = p_frames;\n\t\tint32_t *buffer = p_buffer;\n\t\twhile (frames_to_mix) {\n\t\t\tint frames_to_mix_chunk = MIN(frames_to_mix, CHUNK_SIZE);\n\t\t\taudio_server_process(frames_to_mix_chunk, buffer, false);\n\t\t\tbuffer += frames_to_mix_chunk * channels;\n\t\t\tframes_to_mix -= frames_to_mix_chunk;\n\t\t}\n\t\tunlock();\n\t}\n}", "CodeBleu_score": 35.41724823985605}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t// TODO\n}", "CodeBleu_score": 3.597182188093078}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tif (gravity_point) {\n\t\t// point-based gravity\n\t\tr_gravity = get_gravity_point_unit_distance(p_position) * gravity;\n\t} else {\n\t\t// uniform gravity\n\t\tr_gravity = gravity;\n\t}\n}", "CodeBleu_score": 13.083481906120978}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tr_gravity = get_gravity_vector();\n\tif (get_gravity_is_point()) {\n\t\treal_t distance = get_gravity_point_distance_squared();\n\t\tif (distance == 0) {\n\t\t\tr_gravity = Vector2();\n\t\t} else {\n\t\t\tr_gravity *= get_gravity() / distance;\n\t\t}\n\t}\n}", "CodeBleu_score": 24.857941380953402}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_active()) {\n\t\treturn;\n\t}\n\tif (!is_simulating()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif", "CodeBleu_score": 8.301071068395908}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t// TODO\n}", "CodeBleu_score": 1.5759908941150158}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\tif (get_space_state().is_valid()) {\n\t\tArray constraints = get_space_state()->get_constraints();\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\t\tNode *c = constraints[i];\n\t\t\tif (c->is_class(\"Physics2DConstraint\")) {\n\t\t\t\tPhysics2DConstraint *p = (Physics2DConstraint *)c;\n\t\t\t\tif (p->get_body_A() == this) {\n\t\t\t\t\tif (p->get_body_B()->get_mode() == Physics2DServer::BODY_MODE_RIGID) {\n\t\t\t\t\t\tif (!p->get_body_B()->is_active()) {\n\t\t\t\t\t\t\tp->get_body_B()->set_active(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (p->get_body_B() == this) {\n\t\t\t\t\tif (p->get_body_A()->get_mode() == Physics2DServer::BODY_MODE_RIGID) {\n\t\t\t\t\t\tif (!p->get_body_A()->is_active()) {\n\t\t\t\t\t\t\tp->get_body_A()->set_active(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.40605817690842}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\tif (monitoring) {\n\n\t\tif (get_space() && !get_space()->area_in_monitor_query_list(this)) {\n\t\t\tget_space()->area_add_to_monitor_query_list(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.33284240214451}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t// Check if the space is valid\n\tif (!is_inside_world()) {\n\t\treturn;\n\t}\n\n\t// Check if the area is already in the monitor query list\n\tif (monitor_query_list.in_list) {\n\t\treturn;\n\t}\n\n\t// Add the area to the monitor query list\n\tget_space()->area_add_to_monitor_query_list(this);\n}", "CodeBleu_score": 26.062476128320338}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\tif (!is_inside_world()) {\n\t\treturn;\n\t}\n\n\tif (monitoring) {\n\t\tif (get_world()->get_direct_space_state()->intersect_ray(get_global_transform().origin, Vector3(0, -1, 0), get_global_transform().basis, &_monitor_result, get_rid())) {\n\t\t\tif (_monitor_result.collider_id != get_instance_id()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!monitoring) {\n\t\treturn;\n\t}\n\n\tif (get_space()->_monitor_query_list.in_list()) {\n\t\treturn;\n\t}\n\n\tget_space()->area_add_to_monitor_query_list(this);\n}", "CodeBleu_score": 43.60628651025727}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t// TODO\n}", "CodeBleu_score": 2.283015242142766}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t// TODO\n}", "CodeBleu_score": 2.283015242142766}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\tif (is_inside_tree()) {\n\t\t//_update_inertia_tensor();\n\t\t//_update_center_of_mass();\n\t\t//_update_principal_inertia_axes();\n\t}\n}", "CodeBleu_score": 5.755715534389099}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->_driver_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 97.39525990362006}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->_driver_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 97.39525990362006}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->_driver_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 97.39525990362006}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(feeds.find(p_feed->get_id()) == -1);\n\tint feed_id = p_feed->get_id();\n\tString feed_name = p_feed->get_name();\n\tfeeds.remove_at(feed_id);\n\temit_signal(\"feed_removed\", feed_id);\n\tprint_verbose(\"Removed feed \", feed_id, \" \", feed_name);\n}", "CodeBleu_score": 40.070284781777644}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND_MSG(!p_feed.is_valid(), \"Feed is not valid.\");\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tfeeds.remove_at(i);\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.48361132119842}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tif (!p_feed.is_valid()) {\n\t\treturn;\n\t}\n\n\tint feed_id = p_feed->get_id();\n\tString feed_name = p_feed->get_name();\n\tint feed_position = p_feed->get_position();\n\n\t// Remove the feed from the list of feeds.\n\tfeeds.remove_at(feed_position);\n\n\t// Log the removal of the feed.\n\tprint_line(\"Removed feed with id \" + itos(feed_id) + \" and name \" + feed_name + \".\");\n\n\t// Emit the signal indicating the feed has been removed.\n\temit_signal(\"feed_removed\", feed_id);\n}", "CodeBleu_score": 49.18762666644278}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction *ret = new EaseRateAction();\n    if (ret) {\n        if (ret->initWithAction(action, rate)) {\n            ret->autorelease();\n        } else {\n            CC_SAFE_DELETE(ret);\n        }\n    }\n    return ret;\n}", "CodeBleu_score": 47.4272804448188}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction *ret = new EaseRateAction();\n    if (ret) {\n        if (ret->initWithAction(action, rate)) {\n            ret->autorelease();\n        } else {\n            CC_SAFE_DELETE(ret);\n        }\n    }\n    return ret;\n}", "CodeBleu_score": 47.4272804448188}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tCCASSERT(action != NULL, \"Argument action must be non-NULL\");\n    EaseRateAction *ret = new EaseRateAction();\n    if (ret->initWithAction(action, rate)) {\n        ret->autorelease();\n    }\n    else {\n        CC_SAFE_DELETE(ret);\n    }\n\n    return ret;\n}", "CodeBleu_score": 55.237223042998686}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n        return node;\n    }\n    \n    for (auto child : node->getChildren()) {\n        Node* result = findChildByNameRecursively(child, childName);\n        if (result) {\n            return result;\n        }\n    }\n    \n    return nullptr;\n}", "CodeBleu_score": 54.44577716023651}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n        return node;\n    }\n\n    for (auto child : node->getChildren()) {\n        Node* foundChild = findChildByNameRecursively(child, childName);\n        if (foundChild) {\n            return foundChild;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 55.139941197552844}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node == nullptr) {\n        return nullptr;\n    }\n    if (node->getName() == childName) {\n        return node;\n    }\n    for (auto child : node->getChildren()) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode != nullptr) {\n            return foundNode;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 57.251296439936304}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\ts_runningAnimates.erase(this);\n\ts_fadeOutAnimates.erase(this);\n\ts_fadeInAnimates.erase(this);\n}", "CodeBleu_score": 6.2931646537229184}, {"code": "void Animate3D::removeFromMap(){\n\t// Remove the current action from the running animations map\n\tif (s_runningAnimates.find(this) != s_runningAnimates.end()) {\n\t\ts_runningAnimates.erase(this);\n\t}\n\n\t// Remove the current action from the fade-in animations map\n\tif (s_fadeInAnimates.find(this) != s_fadeInAnimates.end()) {\n\t\ts_fadeInAnimates.erase(this);\n\t}\n\n\t// Remove the current action from the fade-out animations map\n\tif (s_fadeOutAnimates.find(this) != s_fadeOutAnimates.end()) {\n\t\ts_fadeOutAnimates.erase(this);\n\t}\n}", "CodeBleu_score": 27.462319567025773}, {"code": "void Animate3D::removeFromMap(){\n\tif (target != NULL) {\n\t\ts_fadeOutAnimates.erase(target);\n\t\ts_fadeInAnimates.erase(target);\n\t\ts_runningAnimates.erase(target);\n\t}\n}", "CodeBleu_score": 17.240131989944565}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tAnimation3D *animation = nullptr;\n    std::string key = fileName + animationName;\n    auto animationCache = Animation3DCache::getInstance();\n    auto cache = animationCache->getAnimation(key);\n    if (cache) {\n        animation = cache;\n    }\n    else {\n        animation = new (std::nothrow) Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            animation->autorelease();\n        }\n        else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n    return animation;\n}", "CodeBleu_score": 65.59708345730093}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tAnimation3D* animation = nullptr;\n    std::string key = fileName + animationName;\n    animation = Animation3DCache::getInstance()->getAnimation(key);\n    if (!animation) {\n        animation = new (std::nothrow) Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            animation->autorelease();\n            Animation3DCache::getInstance()->addAnimation(key, animation, true);\n        } else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n    return animation;\n}", "CodeBleu_score": 62.215747899813636}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tstd::string key = fileName + animationName;\n    Animation3D* animation = static_cast<Animation3D*>(Animation3DCache::getInstance()->getAnimation(key));\n    if (animation == nullptr) {\n        animation = new (std::nothrow) Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            Animation3DCache::getInstance()->addAnimation(key, animation, true);\n            animation->autorelease();\n        } else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n    return animation;\n}", "CodeBleu_score": 61.82559049087636}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto itor = _animations.begin(); itor != _animations.end();) {\n        if (itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 88.18234797140884}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor(auto itor = _animations.begin(); itor != _animations.end();) {\n        if(itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            itor = _animations.erase(itor);\n        }\n        else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 81.48557307453099}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto itor = _animations.begin(); itor != _animations.end(); ++itor) {\n        if (itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            _animations.erase(itor);\n        }\n    }\n}", "CodeBleu_score": 74.86556051537086}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 72.2490442550372}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 79.84023598357491}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 79.84023598357491}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty())\n    {\n        clear();\n        return false;\n    }\n    \n    if (path == _path)\n        return true;\n    \n    clear();\n    \n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \"c3t\")\n    {\n        if (!loadJson(path))\n        {\n            clear();\n            return false;\n        }\n    }\n    else if (ext == \"c3b\")\n    {\n        if (!loadBinary(path))\n        {\n            clear();\n            return false;\n        }\n    }\n    else\n    {\n        clear();\n        CCLOG(\"warning: Invalid file extension: %s\", path.c_str());\n        return false;\n    }\n    \n    _path = path;\n    \n    return true;\n}", "CodeBleu_score": 57.04210042748945}, {"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty() || _path == path)\n    {\n        return true;\n    }\n    \n    _path = path;\n    std::string extension = FileUtils::getInstance()->getFileExtension(_path);\n    if (extension == \"c3t\")\n    {\n        if (!loadJson(_path))\n        {\n            clear();\n            CCLOG(\"warning: Failed to load json file: %s\", _path.c_str());\n            return false;\n        }\n    }\n    else if (extension == \"c3b\")\n    {\n        if (!loadBinary(_path))\n        {\n            clear();\n            CCLOG(\"warning: Failed to load binary file: %s\", _path.c_str());\n            return false;\n        }\n    }\n    else\n    {\n        clear();\n        CCLOG(\"warning: Invalid file extension: %s\", _path.c_str());\n        return false;\n    }\n    \n    return true;\n}", "CodeBleu_score": 47.58992777166418}, {"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty() || path == _path)\n        return false;\n    \n    clear();\n    \n    // get file extension\n    ssize_t index = path.find_last_of('.');\n    std::string extension = path.substr(index + 1);\n    \n    // load\n    if (extension == \"c3b\")\n    {\n        _path = path;\n        if (!loadBinary(path))\n        {\n            CCLOG(\"warning: Failed to load bundle '%s'\", path.c_str());\n            return false;\n        }\n    }\n    else if (extension == \"c3t\")\n    {\n        _path = path;\n        if (!loadJson(path))\n        {\n            CCLOG(\"warning: Failed to load bundle '%s'\", path.c_str());\n            return false;\n        }\n    }\n    else\n    {\n        CCLOG(\"warning: Invalid file extension '%s' for bundle '%s'\", extension.c_str(), path.c_str());\n        return false;\n    }\n    \n    return true;\n}", "CodeBleu_score": 50.5151562974669}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tskindata->resetData();\n    if (_binary) {\n        return loadSkinDataBinary(skindata);\n    } else {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 90.47325637970594}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tskindata->resetData();\n    if (isBinary())\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 65.75597740469865}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tskindata->resetData();\n    if (isBinary()) {\n        return loadSkinDataBinary(skindata);\n    } else {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 86.06576567248008}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n    size_t n = size * nmemb;\n    size_t nread = 0;\n    if (n > thiz->_fileData.getSize() - thiz->_filePos) {\n        n = thiz->_fileData.getSize() - thiz->_filePos;\n    }\n    if (n > 0) {\n        memcpy(ptr, thiz->_fileData.getBytes() + thiz->_filePos, n);\n        thiz->_filePos += n;\n        nread = n / size;\n    }\n    return nread;\n}", "CodeBleu_score": 62.74284738126421}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = std::min(thiz->_fileData.getSize() - thiz->_filePos, size * nmemb);\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_filePos, bytesToRead);\n\t\tthiz->_filePos += bytesToRead;\n\t}\n\treturn bytesToRead;\n}", "CodeBleu_score": 60.71525240059237}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n    size_t bytesToRead = std::min(nmemb, (size_t)thiz->_fileData.getSize() - thiz->_fileData.getPosition());\n    size_t bytesRead = 0;\n    if (bytesToRead > 0) {\n        memcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), bytesToRead);\n        thiz->_fileData.setPosition(thiz->_fileData.getPosition() + bytesToRead);\n        bytesRead = bytesToRead;\n    }\n    return bytesRead;\n}", "CodeBleu_score": 57.26079563342079}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>();\n    pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 52.17768219101042}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>();\n    pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 52.17768219101042}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>();\n    pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 52.17768219101042}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(_downloaderMapMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 66.30458945271478}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(_downloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it == sDownloaderMap.end()) {\n        return nullptr;\n    }\n    return it->second;\n}", "CodeBleu_score": 69.08506912196127}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::recursive_mutex> lock(sDownloaderMapMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 66.52875744787048}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\tend\n", "CodeBleu_score": 3.5404572783644284}, {"code": "function M.playMusic(filename, isLoop)\n\tif not filename then\n\t\treturn\n\tend\n\tif not isLoop then\n\t\tisLoop = false\n\tend\n\t\n\tlocal simpleAudioEngine = cc.SimpleAudioEngine:getInstance()\n\tsimpleAudioEngine:playMusic(filename, isLoop)", "CodeBleu_score": 49.228731774149296}, {"code": "function M.playMusic(filename, isLoop)\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 30.50812406097474}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtEffect = cc.Sprite:create(\"hurtAnimation.c3b\")\n\tlocal animationCache = cc.AnimationCache:getInstance()\n\tlocal animation = animationCache:getAnimation(\"hurtAnimation\")\n\tlocal billboard = cc.BillBoard:create()\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)\n\tlocal scaleAction = cc.ScaleTo:create(0.1, 0.0)\n\tlocal removeSelf = cc.RemoveSelf:create()\n\tlocal sequence = cc.Sequence:create(animation, scaleAction, removeSelf)\n\thurtEffect:setScale(0.5)\n\thurtEffect:runAction(sequence)\n\thurtEffect:setPosition3D(cc.V3(0, 0, 0))\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 57.6196669113294}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtEffect = cc.Sprite3D:create(\"effects/hurt.c3t\")\n\thurtEffect:setScale(0.4)\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)\n\tlocal hurtAnimation = self.animationCache:getAnimation(\"hurtAnimation\")\n\tlocal hurtAction = cc.Sequence:create(\n\t\tcc.Animate:create(hurtAnimation),\n\t\tcc.RemoveSelf:create()\n\t)\n\thurtEffect:runAction(hurtAction)\n\thurtEffect:setPosition3D(target:getPosition3D())\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 57.76927848817205}, {"code": "function BasicCollider:hurtEffect(target)\n\t-- get hurt animation\n\tlocal hurtAnimation = animationCache:getAnimation(\"hurtAnimation\")\n\n\t-- create billboard\n\tlocal hurtEffect = cc.BillBoard:create()\n\n\t-- set animation\n\thurtEffect:setAnimation(hurtAnimation)\n\n\t-- set camera mask\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)\n\n\t-- create sequence\n\tlocal sequence = cc.Sequence:create(\n\t\tcc.Animate:create(hurtAnimation),\n\t\tcc.RemoveSelf:create(),\n\t\tcc.CallFunc:create(function()\n\t\t\ttarget:addChild(hurtEffect)\n\t\tend)\n\t)\n\n\t-- run sequence\n\thurtEffect:runAction(sequence)\n\n\t-- set position\n\thurtEffect:setPosition3D(target:getPosition3D())\n\n\t-- set scale\n\thurtEffect:setScale(target:getScale())\n", "CodeBleu_score": 61.1174135143262}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(\n\t\tcc.DelayTime:create(0.1),\n\t\tcc.RemoveSelf:create()\n\t)\n\tself:runAction(seq)\n\tlocal magic = cc.Sprite:createWithSpriteFrameName(\"magic.png\")\n\tmagic:setPosition(self.sp:getPosition())\n\tmagic:setGlobalZOrder(self.sp:getGlobalZOrder() + 1)\n\tself:addChild(magic)\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic.png\")\n\tlocal magicw = magicf:getRect().size.width\n\tlocal magich = magicf:getRect().size.height\n\tlocal magicr = magicf:getTextureRect()\n\tmagic:setTextureRect(cc.rect(0,0,magicw,magich))\n\tmagic:setScale(0.5)\n\tself.part1 = cc.ParticleSystemQuad:create(\"magic.plist\")\n\tself.part1:setPosition(cc.p(magic:getContentSize().width/2, magic:getContentSize().height/2))\n\tmagic:addChild(self.part1)\n\tself.part2 = cc.ParticleSystemQuad:create(\"magic.plist\")\n\tself.part2:setPosition(cc.p(-magic:getContentSize().width/2, magic:getContentSize().height/2))\n\tmagic:addChild(self.part2)\n\tself.part1:setScale(0.5)\n\tself.part2:setScale(0.5)\n\tself.part1:start()\n\tself.part2:start()\n\tmagic:setRotation3D({x = 0, y = 0, z = 0})\n\tmagic:setScale(0.5)\n\tlocal seq2 = cc.Sequence:create(\n\t\tcc.FadeOut:create(0.1),\n\t\tcc.ScaleTo:create(0.1,", "CodeBleu_score": 56.4548535255668}, {"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.1), cc.RemoveSelf:create())\n\tself:runAction(seq)\n\tlocal magic = cc.Sprite:createWithSpriteFrameName(\"magic_01.png\")\n\tmagic:setScale(0.3)\n\tmagic:setGlobalZOrder(100)\n\tmagic:setPosition(self.sp:getPosition())\n\tself:addChild(magic)\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic_01.png\")\n\tlocal magic2 = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"magic_01\"))\n\tmagic2:setPosition(magicf:getRect()._origin)\n\tmagic2:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tmagic2:setScale(0.3)\n\tmagic2:setRotation3D({x=0, y=0, z=0})\n\tmagic:addChild(magic2)\n\tmagic:setCameraMask(cc.CameraFlag.USER1)\n\tmagic:setPositionZ(100)\n\tlocal seq2 = cc.Sequence:create(cc.FadeOut:create(0.1), cc.DelayTime:create(0.1), cc.RemoveSelf:create())\n\tmagic:runAction(seq2)\n\tself.sp:setTextureRect(cc.rect(0,0,128,128))\n\tself.sp:setScale(0.5)", "CodeBleu_score": 61.45641105469484}, {"code": "function MageNormalAttack:onTimeOut()\n\t--stop two particle systems\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\t--remove object after a delay\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.5), cc.RemoveSelf:create())\n\tself:runAction(seq)\n\t--create and configure particle system\n\tlocal magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"Magic\"))\n\tmagic:setScale(0.5)\n\tself:addChild(magic)\n\tmagic:setGlobalZOrder(1)\n\tmagic:setPositionZ(10)\n\t--update sprite texture\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"Magic.png\")\n\tself.sp:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\t--fade-out action\n\tlocal fade = cc.FadeOut:create(0.5)\n\tself.sp:runAction(fade)\n\t--adjust sprite scale\n\tself.sp:setScale(0.5)", "CodeBleu_score": 59.97061750389263}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\tif hero.name == \"Knight\" then\n\t\tself.KnightAngryClone:setVisible\n\t\tself.KnightAngryFullSignal:setVisible\n\t\tcc.GreyShader:setGreyShader\n\telseif hero.name == \"Archer\" then\n\t\tself.ArcherAngryClone:setVisible\n\t\tself.ArcherAngryFullSignal:setVisible\n\t\tcc.GreyShader:setGreyShader\n\telseif hero.name == \"Mage\" then\n\t\tself.MageAngryClone:setVisible\n\t\tself.MageAngryFullSignal:setVisible\n\t\tcc.GreyShader:setGreyShader\n\tend", "CodeBleu_score": 35.60086639823889}, {"code": "function BattlefieldUI:heroDead(hero)\n\t", "CodeBleu_score": 0.6756756756756757}, {"code": "function BattlefieldUI:heroDead(hero)\n\tif hero == \"Knight\" then\n\t\tself.KnightAngryClone:setVisible\n\t\tself.KnightAngryFullSignal:setVisible\n\t\tcc.GreyShader:setGreyShader\n\telseif hero == \"Mage\" then\n\t\tself.MageAngryClone:setVisible\n\t\tself.MageAngryFullSignal:setVisible\n\t\tcc.GreyShader:setGreyShader\n\telseif hero == \"Archer\" then\n\t\tself.ArcherAngryClone:setVisible\n\t\tself.ArcherAngryFullSignal:setVisible\n\t\tcc.GreyShader:setGreyShader\n\tend", "CodeBleu_score": 31.633135698106194}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\tif cameraSpecialActive then\n\t\tcamera:setPosition(cc.pLerp(camera:getPosition(), cameraSpecialTarget, dt * 2))\n\t\tcamera:lookAt(cameraSpecialLookAt)\n\telseif List.getSize(heroList) > 0 then\n\t\tlocal focusPoint = getFocusPointOfHeros()\n\t\tcamera:setPosition(cc.pLerp(camera:getPosition(), focusPoint, dt * 2))\n\t\tcamera:lookAt(focusPoint)\n\telse\n\t\tcamera:setPosition(cc.pLerp(camera:getPosition(), cameraDefaultPosition, dt * 2))\n\t\tcamera:lookAt(cameraDefaultLookAt)\n\tend", "CodeBleu_score": 29.531796790033514}, {"code": "local function moveCamera(dt)\n\tif (specialCameraActive) then\n\t\tcamera:setPosition(cc.pLerp(camera:getPosition(), specialCameraTarget, dt * 2))\n\t\tcamera:lookAt(specialCameraLookAt)\n\telseif (#heroes > 0) then\n\t\tcamera:setPosition(cc.pLerp(camera:getPosition(), getFocusPointOfHeros(), dt * 2))\n\t\tcamera:lookAt(getFocusPointOfHeros())\n\telse\n\t\tcamera:setPosition(cc.pLerp(camera:getPosition(), cc.p(0, 0), dt * 2))\n\t\tcamera:lookAt(cc.p(0, 0))\n\tend", "CodeBleu_score": 25.085495250401458}, {"code": "local function moveCamera(dt)\n\tif isSpecialCameraActive then\n\t\tcamera:setPosition3D(cc.V3(cc.pLerp(camera:getPosition3D(), specialCameraTarget, dt * 20)))\n\t\tcamera:lookAt(specialCameraLookAt)\n\telse\n\t\tif List.getSize(activeHeroes) > 0 then\n\t\t\tlocal focusPoint = getFocusPointOfHeros()\n\t\t\tcamera:setPosition3D(cc.V3(cc.pLerp(camera:getPosition3D(), focusPoint, dt * 20)))\n\t\t\tcamera:lookAt(focusPoint)\n\t\tend\n\tend", "CodeBleu_score": 27.232578555471488}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\tfor i = 1, #HERO_MANAGER.heroes do\n\t\tlocal hero = HERO_MANAGER.heroes[i]\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero:getPos())\n\t\tend\n\tend", "CodeBleu_score": 33.22456825019627}, {"code": "local function updateParticlePos()\n\tfor i = 1, #heroManager.heroes do\n\t\tlocal hero = heroManager.heroes[i]\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero.posTable.x, hero.posTable.y)\n\t\tend\n\tend", "CodeBleu_score": 35.254302441913694}, {"code": "local function updateParticlePos()\n\tfor i = 1, #heroManager.heroes do\n        local hero = heroManager.heroes[i]\n        if hero.effectNode then\n            hero.effectNode:setPosition(hero.pos)\n        end\n    end", "CodeBleu_score": 39.58994342425652}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self.layer:getChildByTag(100)\n    local heroRaceType = hero:getRaceType()\n    if heroRaceType == \"Knight\" then\n        ccexp.AudioEngine:play2d(\"sounds/knight_rotate.wav\")\n    elseif heroRaceType == \"Archer\" then\n        ccexp.AudioEngine:play2d(\"sounds/archer_rotate.wav\")\n    elseif heroRaceType == \"Mage\" then\n        ccexp.AudioEngine:play2d(\"sounds/mage_rotate.wav\")\n    end", "CodeBleu_score": 54.17362964425936}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t--[[\n\tGets the hero by tag.\n\t]]\n\tlocal hero = self.layer:getChildByTag(self.currentHeroTag)\n\n\t--[[\n\tGets the hero's race type.\n\t]]\n\tlocal heroRace = hero:getRaceType()\n\n\t--[[\n\tPlays a specific audio clip based on the hero's race type.\n\t]]\n\tif heroRace == \"Knight\" then\n\t\tccexp.AudioEngine:play2d(\"sounds/knight.wav\", false, 1)\n\telseif heroRace == \"Archer\" then\n\t\tccexp.AudioEngine:play2d(\"sounds/archer.wav\", false, 1)\n\telseif heroRace == \"Mage\" then\n\t\tccexp.AudioEngine:play2d(\"sounds/mage.wav\", false, 1)\n\tend\n", "CodeBleu_score": 50.211749486021205}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self.layer:getChildByTag(self.selectedHero)\n\tlocal raceType = hero:getRaceType()\n\tif raceType == 1 then\n\t\tccexp.AudioEngine:play2d(\"sounds/knight.mp3\")\n\telseif raceType == 2 then\n\t\tccexp.AudioEngine:play2d(\"sounds/archer.mp3\")\n\telseif raceType == 3 then\n\t\tccexp.AudioEngine:play2d(\"sounds/mage.mp3\")\n\tend", "CodeBleu_score": 45.612624458656356}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t--[[\n\t\tThis function, CreateHero, creates a hero character.\n\t]]\n\tfunction GameMaster:CreateHero(name, heroClass, position, idleMode)\n\t\tlocal hero = display.newImageRect(self.currentLayer, name, 128, 128)\n\t\thero.name = name\n\t\thero.heroClass = heroClass\n\t\thero.x, hero.y = position[1], position[2]\n\t\thero.idleMode = idleMode\n\t\thero:setFillColor(0, 0, 0, 0)\n\t\thero.alpha = 0\n\t\ttransition.to(hero, {time = 1000, alpha = 1, xScale = 1, yScale = 1, transition = easing.outBack})\n\t\treturn hero\n\tend\n\t\n\t--[[\n\t\tThis function, SetHeroPosition, sets the position of a hero character.\n\t]]\n\tfunction GameMaster:SetHeroPosition(hero, position)\n\t\thero.x, hero.y = position[1], position[2]\n\tend\n\t\n\t--[[\n\t\tThis function, IdleMode, sets a hero character to idle mode.\n\t]]\n\tfunction GameMaster:IdleMode(hero)\n\t\thero.alpha = 1\n\t\ttransition.to(hero, {time = 1000, alpha = 0, xScale = 0.5, yScale = 0.5, transition = easing.outBack})\n\tend\n\t\n\t--[[\n\t\tThis function, IdleMode, sets a hero character to idle mode.\n\t]]\n\tfunction GameMaster:IdleMode(hero)\n\t\thero.alpha = 1\n\t\ttransition.to(hero, {time = 1000, alpha = 0, xScale = 0.5, yScale = 0.5, transition = easing.outBack})\n\tend\n\t\n\t--[[\n\t\tThis function, IdleMode, sets a hero character to idle mode.\n\t]]\n\tfunction GameMaster:IdleMode(", "CodeBleu_score": 34.67996810290239}, {"code": "function GameMaster:AddHeros()\n\t-- Create Knight\n\tlocal knight = Knight:create()\n\tknight:setPosition(cc.p(display.left + 100, display.bottom + 200))\n\tcurrentLayer:addChild(knight)\n\tknight:idleMode()\n\ttable.insert(HeroManager, knight)\n\n\t-- Create Mage\n\tlocal mage = Mage:create()\n\tmage:setPosition(cc.p(display.left + 200, display.bottom + 200))\n\tcurrentLayer:addChild(mage)\n\tmage:idleMode()\n\ttable.insert(HeroManager, mage)\n\n\t-- Create Archer\n\tlocal archer = Archer:create()\n\tarcher:setPosition(cc.p(display.left + 300, display.bottom + 200))\n\tcurrentLayer:addChild(archer)\n\tarcher:idleMode()\n\ttable.insert(HeroManager, archer)", "CodeBleu_score": 67.93137624741213}, {"code": "function GameMaster:AddHeros()\n\t--[[\n\tThis variable, knight, is a reference to the Knight character.\n\t]]\n\tlocal knight = Knight:create()\n\t--[[\n\tThis variable, mage, is a reference to the Mage character.\n\t]]\n\tlocal mage = Mage:create()\n\t--[[\n\tThis variable, archer, is a reference to the Archer character.\n\t]]\n\tlocal archer = Archer:create()\n\t--[[\n\tThis function, setPosition, positions the Knight character at the location (0, 0).\n\t]]\n\tknight:setPosition(0, 0)\n\t--[[\n\tThis function, setPosition, positions the Mage character at the location (100, 0).\n\t]]\n\tmage:setPosition(100, 0)\n\t--[[\n\tThis function, setPosition, positions the Archer character at the location (200, 0).\n\t]]\n\tarcher:setPosition(200, 0)\n\t--[[\n\tThis function, idleMode, sets the Knight character to idle mode.\n\t]]\n\tknight:idleMode()\n\t--[[\n\tThis function, idleMode, sets the Mage character to idle mode.\n\t]]\n\tmage:idleMode()\n\t--[[\n\tThis function, idleMode, sets the Archer character to idle mode.\n\t]]\n\tarcher:idleMode()\n\t--[[\n\tThis function, pushlast, adds the Knight character to the HeroManager list.\n\t]]\n\tList.pushlast(HeroManager, knight)\n\t--[[\n\tThis function, pushlast, adds the Mage character to the HeroManager list.\n\t]]\n\tList.pushlast(HeroManager, mage)\n\t--[[\n\tThis function, pushlast, adds the Archer character to the HeroManager list.\n\t]]\n\tList.pushlast(HeroManager, archer)\n\t--[[\n\tThis function, addChild, adds the Knight character to the current layer.\n\t]]\n\tcurrentLayer:addChild(knight)\n\t--[[\n\tThis function, addChild, adds the Mage character to the current layer.\n\t]]", "CodeBleu_score": 61.68792398136328}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\tlocal boss = Rat:new()\n\tboss.layer = self.layer\n\tboss.camMask = self.camMask\n\tboss:setPosition(self.bossStartPos)\n\tboss:setFacingDirection(self.bossStartDir)\n\tboss:setAIEnabled(false)\n\tboss:setVisible(true)\n\tboss:setCollisionEnabled(true)\n\tboss:setMovementEnabled(true)\n\tboss:setScale(1.25)\n\tboss:setBounceOutMove()\n\tboss:setAIEnabled(true)\n\tboss:setAnimationSequence(\"idle\")\n\tboss:setAnimationSpeed(1.0)\n\tboss:setAnimationLooping(true)\n\tboss:setAnimationFramerate(12)\n\tboss:setAnimationFramedelay(0.0)\n\tboss:setAnimationSequence(\"idle\")\n\tboss:setAnimationSpeed(1.0)\n\tboss:setAnimationLooping(true)\n\tboss:setAnimationFramerate(12)\n\tboss:setAnimationFramedelay(0.0)\n\tself.layer:add(boss)\n\tself.boss = boss\n\tself.boss:addEventListener(\"collision\", self)\n\tself.boss:addEventListener(\"animationend\", self)\n\ttable.insert(self.monsterManager.monsters, boss)\n\tself.monsterManager:setBoss(boss)", "CodeBleu_score": 42.388381593813484}, {"code": "function GameMaster:showBoss()\n\tlocal boss = Rat:new()\n\n\tboss:setCameraMask(camMasks.boss)\n\n\tboss:setPosition(bossPositions.boss)\n\n\tboss:setFacing(bossFacing.boss)\n\n\tboss:setAIEnabled(false)\n\n\tboss:bounceOut()\n\n\tboss:setAIEnabled(true)\n\n\tboss:setTag(tags.boss)\n\n\tself:addChild(boss)\n\n\tself.boss = boss\n\n\tMonsterManager:addBoss(boss)\n", "CodeBleu_score": 31.420201637774458}, {"code": "function GameMaster:showBoss()\n\tlocal boss = Rat:new(self.map, 1, 1)\n\tboss:setCameraMask(layers.boss)\n\tboss:setPosition(1, 1)\n\tboss:setFacing(Directions.Down)\n\tboss:setAIEnabled(false)\n\tboss:setLayer(layers.boss)\n\tboss:setName(\"boss\")\n\tself.boss = boss\n\t\n\tboss:bounceOutMove(1, 1, Directions.Down, function()\n\t\tboss:setAIEnabled(true)\n\tend)\n\t\n\tMonsterManager:add(boss)\n\t", "CodeBleu_score": 35.07663005330238}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\tend\n", "CodeBleu_score": 0.9436097572419637}, {"code": "function createAnimation(file, begin, finish, speed)\n\tend\n", "CodeBleu_score": 0.9436097572419637}, {"code": "function createAnimation(file, begin, finish, speed)\n\tend\n", "CodeBleu_score": 0.9436097572419637}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\tfor i = #table, 1, -1 do \n\t\ttable[i] = nil \n\tend ", "CodeBleu_score": 32.97166011307759}, {"code": "function removeAll(table)\n\tfor i = #table, 1, -1 do \n        table[i] = nil \n    end ", "CodeBleu_score": 36.060614103891666}, {"code": "function removeAll(table)\n\tfor i=1,#table do \n        table[i] = nil; \n    end ", "CodeBleu_score": 34.329306776150794}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal functionCall = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delayAction, functionCall)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.08340535717598}, {"code": "function delayExecute(target, func, delay)\n\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delayAction, callFunc)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.69465699306864}, {"code": "function delayExecute(target, func, delay)\n\tlocal delayAction = cc.DelayTime:create(delay)\n    local sequence = cc.Sequence:create(delayAction, cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 63.33900900341855}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\tlocal loadingFont = \"fonts/Marker Felt.ttf\"\n    local loadingText = cc.Label:createWithTTF(loadingFont, \"Loading...\", 24)\n    loadingText:setColor(cc.c4b(0, 0, 0, 255))\n    local loadingTextSize = loadingText:getContentSize()\n    local loadingTextPosition = cc.p(layer:getContentSize().width / 2, layer:getContentSize().height / 2)\n    loadingText:setPosition(loadingTextPosition)\n    layer:addChild(loadingText)\n    self._loading = { loadingText }", "CodeBleu_score": 34.31542219188009}, {"code": "function LoadingScene:addLoadingText(layer)\n\tlocal font = \"fonts/Marker Felt.ttf\"\n\n\t--[[\n\tThe function LoadingScene:addLoadingText(layer) creates and configures \"loading\" text labels using a specified font, sets their position on the screen, and adds them to the provided layer. It stores these labels in the object's _loading property.\n\t]]\n\tlocal loadingText = cc.Label:createWithTTF(self._loadingText, font, 20)\n\tloadingText:setColor(cc.c4b(255,255,255,255))\n\tloadingText:setPosition(cc.p(self._winSize.width/2, self._winSize.height/2))\n\tlayer:addChild(loadingText)\n\n\tlocal loadingText2 = cc.Label:createWithTTF(self._loadingText2, font, 20)\n\tloadingText2:setColor(cc.c4b(255,255,255,255))\n\tloadingText2:setPosition(cc.p(self._winSize.width/2, self._winSize.height/2 - 30))\n\tlayer:addChild(loadingText2)\n\n\tself._loading = {loadingText, loadingText2}", "CodeBleu_score": 41.936411784171334}, {"code": "function LoadingScene:addLoadingText(layer)\n\tlocal loadingText = cc.Label:createWithTTF(\"loading\", \"fonts/Marker Felt.ttf\", 30)\n\tloadingText:setColor(cc.c4b(255, 255, 255, 255))\n\tloadingText:setPosition(cc.p(display.cx, display.cy))\n\tlayer:addChild(loadingText)\n\ttable.insert(self._loading, loadingText)", "CodeBleu_score": 21.53770020967481}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\tlocal scene = MainMenuScene.new()\n\tscene:createLayer()\n\tscene:addChild(scene.layer)\n\treturn scene", "CodeBleu_score": 57.453275405857376}, {"code": "function MainMenuScene.create()\n\tlocal scene = display.newScene(\"MainMenuScene\")\n\tlocal layer = MainMenuScene.new()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.87644566080394}, {"code": "function MainMenuScene.create()\n\tlocal scene = MainMenuScene.new()\n\tscene:createLayer()\n\tscene:addChild(scene.layer)\n\treturn scene", "CodeBleu_score": 57.453275405857376}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\tlocal heroes = HeroManager.getAliveHeroes()\n   local monsters = MonsterManager.getAliveMonsters()\n   \n   for i = 1, #heroes do\n      if object:collidesWith(heroes[i]) then\n         solveCollision(object, heroes[i])\n      end\n   end\n   \n   for i = 1, #monsters do\n      if object:collidesWith(monsters[i]) then\n         solveCollision(object, monsters[i])\n      end\n   end", "CodeBleu_score": 34.58147092840974}, {"code": "local function collision(object)\n\n\t-- If the object is a hero, check for collisions with all monsters.\n    if object.type == \"hero\" then\n        for i = 1, #HeroManager.heroes do\n            if HeroManager.heroes[i].state == \"alive\" then\n                if isColliding(object, HeroManager.heroes[i]) then\n                    solveCollision(object, HeroManager.heroes[i])\n                end\n            end\n        end\n    -- If the object is a monster, check for collisions with all heroes.\n    elseif object.type == \"monster\" then\n        for i = 1, #MonsterManager.monsters do\n            if MonsterManager.monsters[i].state == \"alive\" then\n                if isColliding(object, MonsterManager.monsters[i]) then\n                    solveCollision(object, MonsterManager.monsters[i])\n                end\n            end\n        end\n    end", "CodeBleu_score": 36.13940269749904}, {"code": "local function collision(object)\n\n\tif object.type == \"hero\" then\n        for i = 1, #HeroManager.heroes do\n            if HeroManager.heroes[i].alive then\n                if isCollision(object, HeroManager.heroes[i]) then\n                    solveCollision(object, HeroManager.heroes[i])\n                end\n            end\n        end\n    elseif object.type == \"monster\" then\n        for i = 1, #MonsterManager.monsters do\n            if MonsterManager.monsters[i].alive then\n                if isCollision(object, MonsterManager.monsters[i]) then\n                    solveCollision(object, MonsterManager.monsters[i])\n                end\n            end\n        end\n    end", "CodeBleu_score": 36.527670535287704}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\tfor i = #HeroManager, 1, -1 do\n\t\tlocal sprite = HeroManager[i]\n\t\tlocal isOutOfBound = false\n\t\tlocal collision = false\n\n\t\tif sprite._effectNode:getPositionX() < -100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif sprite._effectNode:getPositionX() > 100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif sprite._effectNode:getPositionY() < -100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif sprite._effectNode:getPositionY() > 100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif isOutOfBound then\n\t\t\tisOutOfBound = sprite:isOutOfBound()\n\t\tend\n\n\t\tif not isOutOfBound then\n\t\t\tcollision = sprite:collision()\n\t\tend\n\n\t\tif collision or isOutOfBound then\n\t\t\tsprite:remove()\n\t\telse\n\t\t\tsprite:update(dt)\n\t\tend\n\tend\n\n\tfor i = #MonsterManager, 1, -1 do\n\t\tlocal sprite = MonsterManager[i]\n\t\tlocal isOutOfBound = false\n\t\tlocal collision = false\n\n\t\tif sprite._effectNode:getPositionX() < -100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif sprite._effectNode:getPositionX() > 100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif sprite._effectNode:getPositionY() < -100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif sprite._effectNode:getPositionY() > 100 then\n\t\t\tisOutOfBound = true\n\t\tend\n\n\t\tif isOutOfBound then\n\t\t\tisOutOfBound = sprite:isOutOfBound()\n\t\tend\n\n\t\tif not isOutOfBound then\n\t\t\tcollision = sprite:", "CodeBleu_score": 43.49483662440386}, {"code": "function collisionDetect(dt)\n\tfor i = #HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        if hero.isAlive then\n            for j = #MonsterManager, 1, -1 do\n                local monster = MonsterManager[j]\n                if monster.isAlive then\n                    local isCollision = isCollision(hero, monster)\n                    if isCollision then\n                        local isOutOfBound = isOutOfBound(hero, monster)\n                        if isOutOfBound then\n                            hero.isAlive = false\n                            hero.isOutOfBound = true\n                            monster.isAlive = false\n                            monster.isOutOfBound = true\n                            hero.isDead = true\n                            monster.isDead = true\n                        else\n                            hero.isOutOfBound = false\n                            monster.isOutOfBound = false\n                            hero.isDead = false\n                            monster.isDead = false\n                            hero.x = hero.x + hero.vx * dt\n                            hero.y = hero.y + hero.vy * dt\n                            monster.x = monster.x + monster.vx * dt\n                            monster.y = monster.y + monster.vy * dt\n                        end\n                    end\n                end\n            end\n        end\n    end", "CodeBleu_score": 39.46422432423604}, {"code": "function collisionDetect(dt)\n\tfor i = #HeroManager, 1, -1 do\n        if HeroManager[i].isAlive then\n            for j = #MonsterManager, 1, -1 do\n                if MonsterManager[j].isAlive then\n                    collision(HeroManager[i], MonsterManager[j])\n                end\n            end\n            isOutOfBound(HeroManager[i])\n        else\n            table.remove(HeroManager, i)\n        end\n    end\n    for i = #MonsterManager, 1, -1 do\n        if MonsterManager[i].isAlive then\n            isOutOfBound(MonsterManager[i])\n        else\n            table.remove(MonsterManager, i)\n        end\n    end", "CodeBleu_score": 45.49589603550041}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\tlocal specialAttackCollider = SpecialAttackCollider.create(self, self.specialAttackProperties)\n\tself:specialAttackSoundEffects(specialAttackCollider)", "CodeBleu_score": 36.833264985789306}, {"code": "function Actor:specialAttack()\n\t--[[", "CodeBleu_score": 3.571428580856504}, {"code": "function Actor:specialAttack()\n\tlocal specialAttackCollider = SpecialAttackCollider.create(self.position, self.direction, self.specialAttackProperties)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 58.55565113433698}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\tif self._angryFace ~= trueFalse then\n        self._angryFace = trueFalse\n        if self._angryFace then\n            self._sprite3d:setTexture(self._angryTexture)\n        else\n            self._sprite3d:setTexture(self._normalTexture)\n        end\n    end", "CodeBleu_score": 67.2093556270381}, {"code": "function Slime:angryFace(trueFalse)\n\tif self._angryFace ~= trueFalse then\n\t\tself._angryFace = trueFalse\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(self._angryTexture)\n\t\telse\n\t\t\tself._sprite3d:setTexture(self._texture)\n\t\tend\n\tend", "CodeBleu_score": 65.26251677692247}, {"code": "function Slime:angryFace(trueFalse)\n\tif self._angryFace ~= trueFalse then\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(self._angryTexture)\n\t\telse\n\t\t\tself._sprite3d:setTexture(self._normalTexture)\n\t\tend\n\t\tself._angryFace = trueFalse\n\tend", "CodeBleu_score": 58.147139773573144}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n        var width = paint.measureText(char.toString()).toInt()\n        var height = ceil(metric.height).toInt()\n        if (width == 0) {\n            height = getFontSize()\n            width = height\n        }\n\n        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n        val canvas = Canvas(bitmap)\n        canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n        val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n        val data = IntArray(width * height)\n        bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n        for (x in 0 until width) {\n            for (y in 0 until height) {\n                pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n            }\n        }\n        bitmap.recycle()\n        return pixmap\n    }", "CodeBleu_score": 87.20056661167762}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n        var width = paint.measureText(char.toString()).toInt()\n        var height = ceil(metric.height).toInt()\n        if (width == 0) {\n            height = getFontSize()\n            width = height\n        }\n\n        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n        val canvas = Canvas(bitmap)\n        canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n        val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n        val data = IntArray(width * height)\n        bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n        for (x in 0 until width) {\n            for (y in 0 until height) {\n                pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n            }\n        }\n        bitmap.recycle()\n        return pixmap\n    }", "CodeBleu_score": 87.20056661167762}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n        var width = paint.measureText(char.toString()).toInt()\n        var height = ceil(metric.height).toInt()\n        if (width == 0) {\n            height = getFontSize()\n            width = height\n        }\n\n        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n        val canvas = Canvas(bitmap)\n        canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n        val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n        val data = IntArray(width * height)\n        bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n        for (x in 0 until width) {\n            for (y in 0 until height) {\n                pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n            }\n        }\n        bitmap.recycle()\n        return pixmap\n    }", "CodeBleu_score": 87.20056661167762}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n        intent.type = \"application/json\"\n        intent.putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\")\n            intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        activity.startActivityForResult(intent, requestCode)\n    }", "CodeBleu_score": 98.16556132939691}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n        intent.type = \"application/json\"\n        intent.putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\")\n            intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        activity.startActivityForResult(intent, requestCode)\n    }", "CodeBleu_score": 98.16556132939691}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n        intent.type = \"application/json\"\n        intent.putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\")\n            intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        activity.startActivityForResult(intent, requestCode)\n    }", "CodeBleu_score": 98.16556132939691}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n            val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n            val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n            val importance = NotificationManager.IMPORTANCE_HIGH\n            val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n            mChannel.description = descriptionText\n            mChannel.setShowBadge(true)\n            mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n            val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n            notificationManager.createNotificationChannel(mChannel)\n        }", "CodeBleu_score": 97.47274603506833}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n            val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n            val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n            val importance = NotificationManager.IMPORTANCE_HIGH\n            val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n            mChannel.description = descriptionText\n            mChannel.setShowBadge(true)\n            mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n            val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n            notificationManager.createNotificationChannel(mChannel)\n        }", "CodeBleu_score": 97.47274603506833}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n            val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n            val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n            val importance = NotificationManager.IMPORTANCE_HIGH\n            val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n            mChannel.description = descriptionText\n            mChannel.setShowBadge(true)\n            mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n            val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n            notificationManager.createNotificationChannel(mChannel)\n        }", "CodeBleu_score": 97.47274603506833}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.6625162225946}, {"code": "fun packImages(workingPath: String){\n\t// Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\")\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 68.75904008449803}, {"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImages(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImages(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 95.19950370357316}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\tval newGameInfo = gameInfo!!\n    val newWorldScreen = loadGame(newGameInfo, AutoPlay(settings.autoPlay))\n    screenStack.removeLast()\n    screenStack.addLast(newWorldScreen)\n    setScreen(newWorldScreen)\n}", "CodeBleu_score": 36.06203228262106}, {"code": "suspend fun reloadWorldscreen(){\n\tval worldScreen = worldScreen\n    if (worldScreen != null) {\n        val gameInfo = gameInfo\n        if (gameInfo != null) {\n            loadGame(gameInfo, autoPlay = AutoPlay(settings.autoPlay), callFromLoadScreen = true)\n        }\n    }\n}", "CodeBleu_score": 51.92830823760248}, {"code": "suspend fun reloadWorldscreen(){\n\tworldScreen?.let {\n        worldScreen = null\n        loadGame(gameInfo!!, autoPlay = AutoPlay(settings.autoPlay), callFromLoadScreen = true)\n    }\n}", "CodeBleu_score": 15.153413727283397}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\tpushScreen(MainMenuScreen())\n    return this\n}", "CodeBleu_score": 4.305800027472614}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tval mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.pushScreen(LanguagePickerScreen())\n    return mainMenuScreen\n}", "CodeBleu_score": 44.61141095908195}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tpushScreen(LoadingScreen())\n    pushScreen(MainMenuScreen())\n    return this\n}", "CodeBleu_score": 17.652469786858482}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\ttry {\n        // Try to flash the window using the platform-specific method\n        flashWindowByPlatform()\n    } catch (e: Exception) {\n        // If that fails, try the fallback method\n        flashWindowByFallback()\n    }\n}", "CodeBleu_score": 3.685082346173032}, {"code": "private fun flashWindow(){\n\ttry {\n        // On Windows, this will attempt to flash the taskbar icon of the application\n        // On Mac, this will attempt to flash the dock icon of the application\n        // On Linux, this will attempt to flash the window\n        // On other platforms, this will do nothing\n        val window = getApplicationWindow()\n        if (window != null) {\n            window.flash()\n        }\n    } catch (e: Exception) {\n        logger.warn(\"Unable to flash window\", e)\n    }\n}", "CodeBleu_score": 24.81414760649224}, {"code": "private fun flashWindow(){\n\t// Attempt to flash the application window\n    try {\n        // Attempt to use the primary method to flash the window\n        if (Platform.isWindows()) {\n            // On Windows, use the Win32 API\n            val user32 = Native.loadLibrary(\"user32\", User32::class.java)\n            user32.FlashWindow(Main.getHwnd(), true)\n        } else if (Platform.isMac()) {\n            // On macOS, use the Cocoa API\n            val coreGraphics = Native.loadLibrary(\"CoreGraphics\", CoreGraphics::class.java)\n            coreGraphics.CGDisplayHideCursor(0)\n            coreGraphics.CGDisplayShowCursor(0)\n        } else if (Platform.isLinux()) {\n            // On Linux, use the X11 API\n            val x11 = Native.loadLibrary(\"X11\", X11::class.java)\n            val display = x11.XOpenDisplay(null)\n            val root = x11.XDefaultRootWindow(display)\n            x11.XBell(display, 0)\n            x11.XFlush(display)\n            x11.XCloseDisplay(display)\n        }\n    } catch (e: Exception) {\n        // If the primary method fails, fall back to a less-preferred method\n        try {\n            // On Windows, use the Win32 API\n            val user32 = Native.loadLibrary(\"user32\", User32::class.java)\n            user32.FlashWindow(Main.getHwnd(), false)\n        } catch (e: Exception) {\n            // On macOS, use the Cocoa API\n            val coreGraphics = Native.loadLibrary(\"CoreGraphics\", CoreGraphics::class.java)\n            coreGraphics.CGDisplayHideCursor(0)\n            coreGraphics.CGDisplayShowCursor(0)\n        } catch (e: Exception) {\n            // On Linux, use the X11 API\n            val x11 = Native.loadLibrary(\"X11\", X11::class.java)\n            val display = x11.XOpenDisplay(null)\n            val root = x11.XDefaultRootWindow", "CodeBleu_score": 41.476340710341155}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\ttry {\n\t\t\tFile filesDir = getFilesDir();\n\t\t\tFile sharedPrefFile = getFile(filesDir, \"shared_prefs\");\n\t\t\tif (sharedPrefFile != null) {\n\t\t\t\tString[] sharedPrefFiles = sharedPrefFile.list();\n\t\t\t\tif (sharedPrefFiles != null) {\n\t\t\t\t\tfor (String sharedPrefFileName : sharedPrefFiles) {\n\t\t\t\t\t\tif (sharedPrefFileName.endsWith(\".xml\")) {\n\t\t\t\t\t\t\tdata.writeEntity(sharedPrefFileName);\n\t\t\t\t\t\t\tdata.writeEntityData(getFile(sharedPrefFile, sharedPrefFileName));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tFile fullBackupFile = getFile(filesDir, \"fullbackup\");\n\t\t\tif (fullBackupFile != null) {\n\t\t\t\tString[] fullBackupFiles = fullBackupFile.list();\n\t\t\t\tif (fullBackupFiles != null) {\n\t\t\t\t\tfor (String fullBackupFileName : fullBackupFiles) {\n\t\t\t\t\t\tif (fullBackupFileName.endsWith(\".xml\")) {\n\t\t\t\t\t\t\tdata.writeEntity(fullBackupFileName);\n\t\t\t\t\t\t\tdata.writeEntityData(getFile(fullBackupFile, fullBackupFileName));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tFile parent = getParent(filesDir);\n\t\t\tif (parent != null) {\n\t\t\t\tString[] files = parent.list();\n\t\t\t\tif (files != null) {\n\t\t\t\t\tfor (String file : files) {\n\t\t\t\t\t\tif (file.endsWith(\".xml\")) {\n\t\t\t\t\t\t\tdata.writeEntity(file);\n\t\t\t\t\t\t\tdata.writeEntityData(getFile(parent, file));\n\t\t\t\t\t\t}\n\t\t\t\t\t}", "CodeBleu_score": 24.523064508941722}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t// TODO: add your code here\n\t\tFile filesDir = getFilesDir();\n\t\tFile fullBackupFile = getFile(filesDir, \"full_backup.dat\");\n\t\tFile parent = getParent(fullBackupFile);\n\t\tif (parent != null && !parent.exists() && !parent.mkdirs()){\n\t\t\tLog.e(TAG, \"Unable to create directory for full backup file\");\n\t\t\treturn;\n\t\t}\n\t\tFileOutputStream out = null;\n\t\ttry {\n\t\t\tout = new FileOutputStream(fullBackupFile);\n\t\t\tSharedPreferences prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\n\t\t\tSharedPreferences.Editor editor = prefs.edit();\n\t\t\teditor.clear();\n\t\t\teditor.commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_VERSION, BACKUP_VERSION).commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_RANKING_VERSION, BACKUP_RANKING_VERSION).commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_BADGE_VERSION, BACKUP_BADGE_VERSION).commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_JOURNAL_VERSION, BACKUP_JOURNAL_VERSION).commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_POINTS_VERSION, BACKUP_POINTS_VERSION).commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_CLEAR_VERSION, BACKUP_CLEAR_VERSION).commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_CLEAR_RANKING_VERSION, BACKUP_CLEAR_RANKING_VERSION).commit();\n\t\t\tprefs.edit().putInt(PREFS_KEY_BACKUP_CLEAR_BADGE_VERSION, BACKUP_CLE", "CodeBleu_score": 20.835396482949335}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t// Write shared preferences file to the backup stream.\n\t\tFile sharedPrefsFile = new File(getFilesDir(), \"shared_prefs\");\n\t\tFile sharedPrefs = getFile(sharedPrefsFile, \"com.example.android.guesstheword.prefs.xml\");\n\t\tif (sharedPrefs != null) {\n\t\t\ttry {\n\t\t\t\tdata.writeEntity(sharedPrefs, getPackageName() + \"/shared_prefs/com.example.android.guesstheword.prefs.xml\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(TAG, \"Unable to write shared preferences file\", e);\n\t\t\t}\n\t\t}\n\n\t\t// Back up rankings data files.\n\t\tFile rankingsFile = new File(getFilesDir(), \"rankings\");\n\t\tFile rankings = getFile(rankingsFile, \"rankings.txt\");\n\t\tif (rankings != null) {\n\t\t\ttry {\n\t\t\t\tdata.writeEntity(rankings, getPackageName() + \"/rankings/rankings.txt\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(TAG, \"Unable to write rankings file\", e);\n\t\t\t}\n\t\t}\n\n\t\t// Back up badges data files.\n\t\tFile badgesFile = new File(getFilesDir(), \"badges\");\n\t\tFile badges = getFile(badgesFile, \"badges.txt\");\n\t\tif (badges != null) {\n\t\t\ttry {\n\t\t\t\tdata.writeEntity(badges, getPackageName() + \"/badges/badges.txt\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(TAG, \"Unable to write badges file\", e);\n\t\t\t}\n\t\t}\n\n\t\t// Back up journal entries data files.\n\t\tFile journalFile = new File(getFilesDir(), \"journal\");\n\t\tFile journal = getFile(journalFile, \"journal.txt\");\n\t\tif (journal != null) {\n\t\t\ttry {", "CodeBleu_score": 23.704366546313764}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 44.24374144001547}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.isConnected() &&\n                (networkInfo.getType() == ConnectivityManager.TYPE_WIFI ||\n                        networkInfo.getType() == ConnectivityManager.TYPE_WIMAX ||\n                        networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH ||\n                        networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 57.83881732536712}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        return networkInfo != null && networkInfo.isConnected() && (\n                networkInfo.getType() == ConnectivityManager.TYPE_WIFI ||\n                        networkInfo.getType() == ConnectivityManager.TYPE_WIMAX ||\n                        networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH ||\n                        networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET\n        );\n    }\n}", "CodeBleu_score": 56.658226510073504}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\tif ( hero.isAlive() ) {\n    hero.play( \"cure\" );\n    hero.cure();\n    hero.curseEquipped( false );\n    hero.satisfy( 100 );\n    hero.restoreHealth( 100 );\n    hero.showStatusWithIcon();\n    return true;\n  }\n  return false;\n}", "CodeBleu_score": 13.261943960343869}, {"code": "protected boolean affectHero( Hero hero ){\n\tif ( !isAlive() ) {\n    return false;\n  }\n  if ( !hero.isAlive() ) {\n    return false;\n  }\n  play( \"heal\" );\n  hero.cure();\n  hero.uncurseEquipped();\n  hero.satisfy();\n  hero.restoreHealth();\n  hero.restoreMana();\n  hero.restoreEnergy();\n  hero.restoreStamina();\n  hero.restoreStrength();\n  hero.restoreIntelligence();\n  hero.restoreAgility();\n  hero.restoreEndurance();\n  hero.restoreCharisma();\n  hero.restoreLuck();\n  hero.restoreHitPoints();\n  hero.restoreManaPoints();\n  hero.restoreEnergyPoints();\n  hero.restoreStaminaPoints();\n  hero.restoreStrengthPoints();\n  hero.restoreIntelligencePoints();\n  hero.restoreAgilityPoints();\n  hero.restoreEndurancePoints();\n  hero.restoreCharismaPoints();\n  hero.restoreLuckPoints();\n  hero.restoreHitPointsMax();\n  hero.restoreManaPointsMax();\n  hero.restoreEnergyPointsMax();\n  hero.restoreStaminaPointsMax();\n  hero.restoreStrengthPointsMax();\n  hero.restoreIntelligencePointsMax();\n  hero.restoreAgilityPointsMax();\n  hero.restoreEndurancePointsMax();\n  hero.restoreCharismaPointsMax();\n  hero.restoreLuckPointsMax();\n  hero.restoreHitPointsPercent();\n  hero.restoreManaPointsPercent();\n  hero.restoreEnergyPointsPercent();\n  hero.restoreStaminaPointsPercent();\n  hero.restoreStrengthPointsPercent();\n  hero.restoreIntelligencePointsPercent();\n  hero.restoreAgilityPointsPercent();\n  hero.restoreEndurancePointsPercent();\n  hero.restoreCharismaPointsPercent();\n  hero.restoreLuckPointsPercent();\n  hero.restoreHitPointsMaxPercent();\n  hero.", "CodeBleu_score": 19.13514799770096}, {"code": "protected boolean affectHero( Hero hero ){\n\tif ( !hero.isAlive() ) {\n    return false;\n  }\n  play( \"heal.wav\" );\n  hero.cure();\n  hero.uncurseEquipped();\n  hero.satisfy();\n  hero.restoreHealth();\n  hero.setStatus( \"You feel healthy again.\" );\n  hero.setStatusWithIcon( \"You feel healthy again.\", \"heal.png\" );\n  return true;\n}", "CodeBleu_score": 23.30761965044008}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\tif (item == null) return null;\n\tif (item.getType() == Item.Type.WATERSKIN) {\n\t\tif (!item.isFull()) {\n\t\t\titem.fill(pos);\n\t\t\treturn item;\n\t\t}\n\t} else if (item.getType() == Item.Type.ANKH) {\n\t\tif (!item.isBlessed()) {\n\t\t\titem.bless(pos);\n\t\t\treturn item;\n\t\t}\n\t} else if (item.getType() == Item.Type.UNCURSABLE) {\n\t\tif (item.isCursed()) {\n\t\t\titem.uncursed(pos);\n\t\t\treturn item;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 29.798580581648366}, {"code": "protected Item affectItem( Item item, int pos ){\n\tif( item == null )\n\t\treturn null;\n\t\n\tif( item.isFull() )\n\t\treturn null;\n\t\n\tif( item.isBlessed() )\n\t\treturn null;\n\t\n\tif( !item.isCursed() )\n\t\treturn null;\n\t\n\tif( !item.isUncursable() )\n\t\treturn null;\n\t\n\tif( item.getType() == Item.Type.WATER_SKIN ) {\n\t\titem.fill();\n\t\tplay( \"fill\" );\n\t\treturn item;\n\t}\n\t\n\tif( item.getType() == Item.Type.ANKH ) {\n\t\titem.bless();\n\t\tplay( \"bless\" );\n\t\treturn item;\n\t}\n\t\n\titem.unc", "CodeBleu_score": 34.71559495318372}, {"code": "protected Item affectItem( Item item, int pos ){\n\tif( item == null ) return null;\n\tif( item.getType() == Item.WATERSKIN ) {\n\t\tif( item.getState() < Item.FULL ) {\n\t\t\titem.setState( Item.FULL );\n\t\t\titem.setName( \"full waterskin\" );\n\t\t\titem.setDescription( \"A full waterskin.\" );\n\t\t\titem.setEffect( \"The waterskin is full.\" );\n\t\t\treturn item;\n\t\t}\n\t}\n\tif( item.getType() == Item.ANKH ) {\n\t\tif( item.getState() < Item.BLESSED ) {\n\t\t\titem.setState( Item.BLESSED );\n\t\t\titem.setName( \"blessed ankh\" );\n\t\t\titem.setDescription( \"A blessed ankh.\" );\n\t\t\titem.setEffect( \"The ankh is blessed.\" );\n\t\t\treturn item;\n\t\t}\n\t}\n\tif( item.getType() == Item.UNCURSABLE ) {\n\t\tif( item.getState() < Item.UNCURSED ) {\n\t\t\titem.setState( Item.UNCURSED );\n\t\t\titem.setName( \"uncursed item\" );\n\t\t\titem.setDescription( \"An uncursed item.\" );\n\t\t\titem.setEffect( \"The item is uncursed.\" );\n\t\t\treturn item;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 38.93941786428652}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.isAlly()) {\n\t\tenemy.buff(buffCls);\n\t\tenemy.setAlly(false);\n\t}\n\tif (enemy.isEnemy()) {\n\t\tenemy.buff(buffCls);\n\t\tenemy.setEnemy(false);\n\t\tif (enemy.getClass().equals(Monster.class)) {\n\t\t\trollToDropLoot((Monster) enemy, hero);\n\t\t}\n\t\tif (hero.getClass().equals(Monk.class)) {\n\t\t\thero.gainEnergy(1);\n\t\t}\n\t\thero.earnExp(enemy.getLevel());\n\t\thero.processEnemyKill(enemy);\n\t\thero.updateStatistics(enemy);\n\t\thero.ascend(enemy);\n\t}\n}", "CodeBleu_score": 23.380062131116073}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tenemy.affect(buffCls);\n\tif (enemy.getAlignment() == Alignment.ENEMY) {\n\t\trollToDropLoot(enemy, hero);\n\t\tprocessEnemyKill(enemy, hero);\n\t\tif (hero.getClass() == Monk.class) {\n\t\t\tgainEnergy(hero);\n\t\t}\n\t}\n}", "CodeBleu_score": 18.218240241262247}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.getAlign() == Align.ENEMY) {\n\t\tenemy.affect(buffCls);\n\t\tenemy.rollToDropLoot(hero);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp(enemy.getExp());\n\t\thero.gainEnergy();\n\t\thero.processEnemyKill(enemy);\n\t\thero.showStatusWithIcon(enemy);\n\t\thero.earnExp", "CodeBleu_score": 24.04906137850459}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\tif (isBuffActive()) {\n        if (enemy instanceof Enemy) {\n            if (enemy.isBoosted()) {\n                enemy.revertToOriginal();\n            }\n            if (enemy.getType() == EnemyType.BOSS) {\n                reduceStacks(5);\n            } else if (enemy.getType() == EnemyType.MINION) {\n                reduceStacks(1);\n            }\n        }\n    }\n    if (hero.getLevel() == hero.getMaxLevel()) {\n        hero.earnExp(10);\n    }\n    refreshHero();\n}", "CodeBleu_score": 10.795089141996469}, {"code": "public static void processEnemyKill(Char enemy){\n\tif (hero.hasBuff(AscensionChallenge.class)) {\n\t\tif (enemy.getClass().equals(AscensionChallenge.class)) {\n\t\t\tif (!enemy.isOriginal()) {\n\t\t\t\tenemy.setOriginal(true);\n\t\t\t\tenemy.setClass(AscensionChallenge.class);\n\t\t\t}\n\t\t}\n\t\tif (enemy.getClass().equals(AscensionChallenge.class)) {\n\t\t\tif (enemy.getOriginal()) {\n\t\t\t\tenemy.setOriginal(false);\n\t\t\t\tenemy.setClass(AscensionChallenge.class);\n\t\t\t}\n\t\t}\n\t\tif (enemy.getClass().equals(AscensionChallenge.class)) {\n\t\t\tif (!enemy.isOriginal()) {\n\t\t\t\tenemy.setOriginal(true);\n\t\t\t\tenemy.setClass(AscensionChallenge.class);\n\t\t\t}\n\t\t}\n\t\tif (enemy.getClass().equals(AscensionChallenge.class)) {\n\t\t\tif (enemy.getOriginal()) {\n\t\t\t\tenemy.setOriginal(false);\n\t\t\t\tenemy.setClass(AscensionChallenge.class);\n\t\t\t}\n\t\t}\n\t\tif (enemy.getClass().equals(AscensionChallenge.class)) {\n\t\t\tif (!enemy.isOriginal()) {\n\t\t\t\tenemy.setOriginal(true);\n\t\t\t\tenemy.setClass(AscensionChallenge.class);\n\t\t\t}\n\t\t}\n\t\tif (enemy.getClass().equals(AscensionChallenge.class)) {\n\t\t\tif (enemy.getOriginal()) {\n\t\t\t\tenemy.setOriginal(false);\n\t\t\t\tenemy.setClass(AscensionChallenge.class);\n\t\t\t}\n\t\t}\n\t\tif (enemy.getClass().equals(AscensionChallenge.class)) {\n\t\t\tif (!enemy.isOriginal()) {", "CodeBleu_score": 14.168478624409323}, {"code": "public static void processEnemyKill(Char enemy){\n\tif (AscensionChallenge.isActive()) {\n\t\tif (AscensionChallenge.isEnemyTypeValid(enemy)) {\n\t\t\tif (!AscensionChallenge.isEnemyBoosted(enemy)) {\n\t\t\t\tAscensionChallenge.revertEnemy(enemy);\n\t\t\t}\n\t\t\tAscensionChallenge.reduceStacks(enemy);\n\t\t\tif (AscensionChallenge.stacksBelowThreshold()) {\n\t\t\t\tAscensionChallenge.logWeakeningMessage();\n\t\t\t}\n\t\t\tif (AscensionChallenge.isHeroAtMaxLevel()) {\n\t\t\t\tAscensionChallenge.earnExp();\n\t\t\t}\n\t\t\tAscensionChallenge.refreshHero();\n\t\t}\n\t}\n}", "CodeBleu_score": 7.364225205587946}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\tif (m == null) {\n\t\treturn 0;\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE);\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE_2)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE_2);\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE_3)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE_3);\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE_4)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE_4);\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE_5)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE_5);\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE_6)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE_6);\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE_7)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE_7);\n\t}\n\tif (m.isBuffed(Buff.CORRUPTION_RESISTANCE_8)) {\n\t\treturn m.getBuffedValue(Buff.CORRUPTION_RESISTANCE_8);\n\t}\n\tif (m.isBuffed", "CodeBleu_score": 21.899129820829515}, {"code": "public static int AscensionCorruptResist(Mob m){\n\tif (m == null) {\n\t\treturn 0;\n\t}\n\tif (m.isAlive()) {\n\t\tif (m.isTransformed()) {\n\t\t\tm = m.getOriginal();\n\t\t}\n\t\tint buff = m.getBuff(Buff.ASCENSION_EFFECTS);\n\t\tif (buff > 0) {\n\t\t\treturn m.getExp();\n\t\t}\n\t\tint corruptResist = m.getCorruptResist();\n\t\tif (corruptResist == 0) {\n\t\t\treturn m.getExp();\n\t\t}\n\t\tif (m.isRipper()) {\n\t\t\treturn 10;\n\t\t}\n\t\tif (m.isGhoul()) {\n\t\t\treturn 7;\n\t\t}\n\t\tif (m.isGhost()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isGolem()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isSkeleton()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isBoss()) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m.isB", "CodeBleu_score": 25.71811969579875}, {"code": "public static int AscensionCorruptResist(Mob m){\n\tint corruptResist = m.getEXP();\n\tif (m.getOriginal() != null) {\n\t\tm = m.getOriginal();\n\t}\n\tif (m.getBuffs() != null) {\n\t\tfor (Buff b : m.getBuffs()) {\n\t\t\tif (b.getId() == Buff.CORRUPTION_RESISTANCE) {\n\t\t\t\tcorruptResist = b.getVal2();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (m.getId() == 9400023) { // Ripper Demon\n\t\tcorruptResist = 10;\n\t} else if (m.getId() == 9400024) { // Ghouls\n\t\tcorruptResist = 7;\n\t} else if (m.getId() == 9400025) { // Cursed Soldier\n\t\tcorruptResist = 13;\n\t} else if (m.getId() == 9400026) { // Cursed Warrior\n\t\tcorruptResist = 13;\n\t} else if (m.getId() == 9400027) { // Cursed Knight\n\t\tcorruptResist = 13;\n\t} else if (m.getId() == 9400028) { // Cursed Sorceress\n\t\tcorruptResist = 13;\n\t} else if (m.getId() == 9400029) { // Cursed Archer\n\t\tcorruptResist = 13;\n\t} else if (m.getId() == 9400030) { // Cursed Priest\n\t\tcorruptResist = 13;\n\t} else if (m.getId() == 9400031) { // Cursed Rogue\n\t\tcorruptResist = 13;\n\t} else if (m.getId() == 9400032) { // Curs", "CodeBleu_score": 23.658006056296244}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\tif (enemy.isAlive() && !enemy.hasBuff(Buff.Corruption)){\n\t\t\tcount++;\n\t\t\tif (count >= 5){\n\t\t\t\tcount = 0;\n\t\t\t\tsetAction(ComboMove.Cleave);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsetAction(getHighestMove());\n\t\t\t}\n\t\t\tvalidateMasteryCombo();\n\t\t\tlog(\"Combo count: \" + count);\n\t\t\trefreshHero();\n\t\t}\n\t\telse{\n\t\t\tcount = 0;\n\t\t\tsetAction(null);\n\t\t\trefreshHero();\n\t\t}\n\t}", "CodeBleu_score": 19.264355749171123}, {"code": "public void hit( Char enemy ){\n\tif (enemy.isAlive()){\n\t\t\tif (enemy.hasBuff(Buff.CORRUPTION)){\n\t\t\t\tif (enemy.getBuff(Buff.CORRUPTION).getHealth() == enemy.getBuff(Buff.CORRUPTION).getMaxHealth()){\n\t\t\t\t\tcomboTimer = comboTimer + (int) (talentPointsInTalent[Talent.CLEAVE] * 1000);\n\t\t\t\t\tcomboCount++;\n\t\t\t\t\tif (comboCount >= 5){\n\t\t\t\t\t\tvalidateMasteryCombo();\n\t\t\t\t\t}\n\t\t\t\t\tif (comboCount == 1){\n\t\t\t\t\t\tsetAction(Action.COMBO_1);\n\t\t\t\t\t}\n\t\t\t\t\telse if (comboCount == 2){\n\t\t\t\t\t\tsetAction(Action.COMBO_2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (comboCount == 3){\n\t\t\t\t\t\tsetAction(Action.COMBO_3);\n\t\t\t\t\t}\n\t\t\t\t\telse if (comboCount == 4){\n\t\t\t\t\t\tsetAction(Action.COMBO_4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (comboCount == 5){\n\t\t\t\t\t\tsetAction(Action.COMBO_5);\n\t\t\t\t\t}\n\t\t\t\t\tif (comboCount >= 5){\n\t\t\t\t\t\tsetAction(Action.COMBO_5);\n\t\t\t\t\t}\n\t\t\t\t\telse if (comboCount >= 4){\n\t\t\t\t\t\tsetAction(Action.COMBO_4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (comboCount >= 3){\n\t\t\t\t\t\tsetAction(Action.COMBO_3);\n\t\t\t\t\t}\n\t\t\t\t\telse if (comboCount >= 2){", "CodeBleu_score": 27.15504881922424}, {"code": "public void hit( Char enemy ){\n\tif (count < 1) {\n\t\t\tcount = 1;\n\t\t}\n\t\tif (count >= 1 && count < 2) {\n\t\t\tcount = 2;\n\t\t}\n\t\tif (count >= 2 && count < 3) {\n\t\t\tcount = 3;\n\t\t}\n\t\tif (count >= 3 && count < 4) {\n\t\t\tcount = 4;\n\t\t}\n\t\tif (count >= 4 && count < 5) {\n\t\t\tcount = 5;\n\t\t}\n\t\tif (count >= 5 && count < 6) {\n\t\t\tcount = 6;\n\t\t}\n\t\tif (count >= 6 && count < 7) {\n\t\t\tcount = 7;\n\t\t}\n\t\tif (count >= 7 && count < 8) {\n\t\t\tcount = 8;\n\t\t}\n\t\tif (count >= 8 && count < 9) {\n\t\t\tcount = 9;\n\t\t}\n\t\tif (count >= 9 && count < 10) {\n\t\t\tcount = 10;\n\t\t}\n\t\tif (count >= 10 && count < 11) {\n\t\t\tcount = 11;\n\t\t}\n\t\tif (count >= 11 && count < 12) {\n\t\t\tcount = 12;\n\t\t}\n\t\tif (count >= 12 && count < 13) {\n\t\t\tcount = 13;\n\t\t}\n\t\tif (count >= 13 && count < 14) {\n\t\t\tcount = 14;\n\t\t}\n\t\tif (count >= 14 && count < 15) {\n\t\t\tcount = 15;\n\t\t}\n\t\tif (count >= 15 && count < 16) {\n\t\t\tcount = 16;\n\t\t}\n\t\tif (count >= 16 && count < 17) {\n\t\t\tcount = 17;\n\t\t}", "CodeBleu_score": 14.830174875261717}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\treturn 1;\n}", "CodeBleu_score": 3.3442456666209166}, {"code": "public int capacity(){\n\treturn baseCapacity;\n}", "CodeBleu_score": 5.700490404232147}, {"code": "public int capacity(){\n\treturn baseCapacity;\n}", "CodeBleu_score": 5.700490404232147}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\tint HT = (int)Math.floor( ( ( ( ( ( ( ( level + 1 ) * 10 ) * HTMultiplier ) + 100 ) * ( 1 + ( ( ( boost + 1 ) * 0.01 ) * ( ( ( boost + 1 ) * 0.01 ) * 100 ) ) ) ) ) * ( 1 + ( ( ( boost + 1 ) * 0.01 ) * ( ( ( boost + 1 ) * 0.01 ) * 100 ) ) ) ) );\n\tif ( boostHP ) {\n\t\tHP = HT;\n\t}\n\tif ( HP > HT ) {\n\t\tHP = HT;\n\t}\n}", "CodeBleu_score": 18.04993258207808}, {"code": "public void updateHT( boolean boostHP ){\n\tint baseHT = 10 + (int)Math.floor( (level-1) * 0.5 );\n\tif ( boostHP ) {\n\t\tif ( htMultiplier == 0 ) {\n\t\t\thtMultiplier = 1;\n\t\t}\n\t\tht = baseHT * htMultiplier;\n\t\tif ( ringOfMight != null ) {\n\t\t\tht = (int)Math.floor( ht * (1 + ringOfMight.getBonus() ) );\n\t\t}\n\t\tif ( elixirOfMight != null ) {\n\t\t\tht = (int)Math.floor( ht * (1 + elixirOfMight.getBonus() ) );\n\t\t}\n\t\tif ( buff != null ) {\n\t\t\tht = (int)Math.floor( ht * (1 + buff.getBonus() ) );\n\t\t}\n\t\tif ( boost != null ) {\n\t\t\tht = (int)Math.floor( ht * (1 + boost.getBonus() ) );\n\t\t}\n\t\tif ( max != null ) {\n\t\t\tht = (int)Math.floor( ht * (1 + max.getBonus() ) );\n\t\t}\n\t\tif ( hp > ht ) {\n\t\t\thp = ht;\n\t\t}\n\t}\n\telse {\n\t\tht = baseHT;\n\t}\n}", "CodeBleu_score": 23.731546822414305}, {"code": "public void updateHT( boolean boostHP ){\n\t// base formula\n\tdouble base = 10 + 5 * level;\n\t\n\t// boosts\n\tdouble buff = 1;\n\tif ( ringOfMight != null ) buff *= ringOfMight.getBuff();\n\tif ( elixirOfMight != null ) buff *= elixirOfMight.getBuff();\n\t\n\t// multipliers\n\tdouble multiplier = 1;\n\tif ( HTMultiplier != null ) multiplier *= HTMultiplier.getBuff();\n\t\n\t// apply formula\n\tdouble newHT = base * buff * multiplier;\n\t\n\t// boost HP if boostHP is true\n\tif ( boostHP ) {\n\t\tif ( HP < newHT ) HP = newHT;\n\t\telse HP += newHT - HT;\n\t}\n\t\n\t// update HT\n\tHT = newHT;\n\t\n}", "CodeBleu_score": 21.067610609955516}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif( enemy.isNeutralMimic() ) {\n\t\tif( wep.isNeutralMimic() ) {\n\t\t\tif( !wep.isThrown() ) {\n\t\t\t\twep.setThrown(true);\n\t\t\t\treturn wep.shoot( enemy );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif( !wep.isThrown() ) {\n\t\t\t\twep.setThrown(true);\n\t\t\t\treturn wep.shoot( enemy );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tif( wep.isNeutralMimic() ) {\n\t\t\tif( !wep.isThrown() ) {\n\t\t\t\twep.setThrown(true);\n\t\t\t\treturn wep.shoot( enemy );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif( !wep.isThrown() ) {\n\t\t\t\twep.setThrown(true);\n\t\t\t\treturn wep.shoot( enemy );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 10.84240059989168}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif ( enemy.isEnemy() ) {\n\t\tif ( !wep.shoot( enemy ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( this.isGladiator() || this.isDuelist() ) {\n\t\t\tif ( this.isGladiator() ) {\n\t\t\t\tthis.addHit( enemy );\n\t\t\t}\n\t\t\tif ( this.isDuelist() ) {\n\t\t\t\tthis.affect( enemy );\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tif ( enemy.isNeutralMimic() ) {\n\t\tif ( !wep.shoot( enemy ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( this.isGladiator() || this.isDuelist() ) {\n\t\t\tif ( this.isGladiator() ) {\n\t\t\t\tthis.addHit( enemy );\n\t\t\t}\n\t\t\tif ( this.isDuelist() ) {\n\t\t\t\tthis.affect( enemy );\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.902441049054374}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t//checks if the enemy is an enemy or a neutral mimic\n\tif (enemy.getTeam() == this.getTeam()) {\n\t\tif (enemy.getType() == \"Mimic\") {\n\t\t\tif (enemy.getMimicType() == \"Enemy\") {\n\t\t\t\tenemy = enemy.getMimickedChar();\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t//attempts the attack\n\tboolean hit = wep.attack(enemy);\n\t//if the attack hits, checks if the character is a Gladiator or Duelist\n\tif (hit) {\n\t\tif (this.getType() == \"Gladiator\") {\n\t\t\tthis.addHit();\n\t\t\tif (this.getHits() == 2) {\n\t\t\t\tthis.addBuff(\"Gladiator\", 1, 2);\n\t\t\t}\n\t\t} else if (this.getType() == \"Duelist\") {\n\t\t\tthis.addHit();\n\t\t\tif (this.getHits() == 2) {\n\t\t\t\tthis.addBuff(\"Duelist\", 1, 2);\n\t\t\t}\n\t\t}\n\t}\n\t//clears the thrown weapon\n\tthis.setThrownWeapon(null);\n\treturn hit;\n}", "CodeBleu_score": 19.37107034934159}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\tint baseAttackSkill = (int) Math.round(Math.pow(2, (int) Math.round(Math.log(attackingWeapon.getAttackSkill())/Math.log(2))));\n\t\tint accuracyMultiplier = 1;\n\t\tif (target.getPosition().getX() == this.getPosition().getX() && target.getPosition().getY() == this.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 + adjacent;\n\t\tif (this.getPosition().getX() == target.getPosition().getX() && this.getPosition().getY() == target.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 + adjacent;\n\t\tif (this.getPosition().getX() == target.getPosition().getX() && this.getPosition().getY() == target.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 + adjacent;\n\t\tif (this.getPosition().getX() == target.getPosition().getX() && this.getPosition().getY() == target.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 + adjacent;\n\t\tif (this.getPosition().getX() == target.getPosition().getX() && this.getPosition().getY() == target.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 + adjacent;\n\t\tif (this.getPosition().getX() == target.getPosition().getX() && this.getPosition().getY() == target.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 + adjacent;\n\t\tif (this.getPosition().getX() == target.getPosition().getX() && this.getPosition().getY() == target.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 + adjacent;\n\t\tif (this.getPosition().getX() == target.getPosition().getX() && this.getPosition().getY() == target.getPosition().getY())\n\t\t\taccuracyMultiplier = 1 +", "CodeBleu_score": 25.53315136652024}, {"code": "public int attackSkill( Char target ){\n\tint attackSkill = 0;\n\tint attackingWeapon = 0;\n\tint accuracyMultiplier = 1;\n\tint accuracyFactor = 0;\n\tint buff = 0;\n\tint fightingUnarmed = 0;\n\tint adjacent = 0;\n\t\n\tif (weapon != null) {\n\t\tattackingWeapon = weapon.attackSkill();\n\t}\n\t\n\tif (buffs.contains(Buff.ACCURACY)) {\n\t\tbuff = 1;\n\t}\n\t\n\tif (target.getWeapon() == null) {\n\t\tfightingUnarmed = 1;\n\t}\n\t\n\tif (target.getLocation().equals(location)) {\n\t\tadjacent = 1;\n\t}\n\t\n\tif (weapon != null) {\n\t\tattackSkill = weapon.attackSkill();\n\t}\n\t\n\tif (weapon != null) {\n\t\tif (weapon.getType() == Weapon.Type.MELEE) {\n\t\t\taccuracyMultiplier = 1;\n\t\t} else if (weapon.getType() == Weapon.Type.RANGED) {\n\t\t\taccuracyMultiplier = 2;\n\t\t}\n\t}\n\t\n\taccuracyFactor = accuracyMultiplier * buff * fightingUnarmed * adjacent;\n\t\n\treturn attackSkill + accuracyFactor;\n}", "CodeBleu_score": 23.94332851902721}, {"code": "public int attackSkill( Char target ){\n\tint baseAttackSkill = 0;\n\t\tif (attackingWeapon == null) {\n\t\t\tbaseAttackSkill = 10 + pointsInTalent(fightingUnarmed);\n\t\t} else {\n\t\t\tbaseAttackSkill = 10 + pointsInTalent(fightingWeapon);\n\t\t}\n\t\tint attackSkill = baseAttackSkill;\n\t\tif (target.isAdjacent(this)) {\n\t\t\tattackSkill *= 1 + pointsInTalent(adjacent);\n\t\t}\n\t\tattackSkill *= accuracyMultiplier;\n\t\tif (attackingWeapon != null) {\n\t\t\tattackSkill *= (1 + attackingWeapon.getAccuracyBonus());\n\t\t}\n\t\tif (buff != null) {\n\t\t\tattackSkill *= (1 + buff.getAttackBonus());\n\t\t}\n\t\treturn attackSkill;\n\t}", "CodeBleu_score": 33.151416518253804}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\tthis.onStart.dispatch();\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));\n\n    this._parent.setFrame(this._frameData.getFrame(0));", "CodeBleu_score": 41.718931574016864}, {"code": "restart: function (){\n\tthis._frameData.getFrame\n    this.onStart.dispatch\n    this._parent.setFrame\n\n\n\n\n", "CodeBleu_score": 36.01418843126719}, {"code": "restart: function (){\n\tthis._frameData.getFrame\n    this.onStart.dispatch\n    this._parent.setFrame\n\n\n\n\n", "CodeBleu_score": 36.01418843126719}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\tif (color == undefined) {\n        color = \"#FFFFFF\";\n    }\n    if (duration == undefined) {\n        duration = 1000;\n    }\n    if (alpha == undefined) {\n        alpha = 1;\n    }\n    if (force == undefined) {\n        force = false;\n    }\n\n    if (this.fx.clear()) {\n        if (this.fx.beginFill(color, alpha)) {\n            if (this.fx.drawRect(0, 0, this.width, this.height)) {\n                if (this.fx.endFill()) {\n                    if (this.fx.setDuration(duration, force)) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 57.01362803184797}, {"code": "flash: function (color, duration, force, alpha){\n\tif (this.fx.isRunning()) {\n\t\tif (!force) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.fx.clear();\n\t}\n\n\tif (typeof(color) == 'undefined') {\n\t\tcolor = '#FFFFFF';\n\t}\n\tif (typeof(duration) == 'undefined') {\n\t\tduration = 100;\n\t}\n\tif (typeof(force) == 'undefined') {\n\t\tforce = false;\n\t}\n\tif (typeof(alpha) == 'undefined') {\n\t\talpha = 1;\n\t}\n\n\tthis.fx.beginFill(color, alpha);\n\tthis.fx.drawRect(0, 0, this.width, this.height);\n\tthis.fx.endFill();\n\tthis.fx.setDuration(duration);\n\n\treturn true;\n}", "CodeBleu_score": 57.027229910377706}, {"code": "flash: function (color, duration, force, alpha){\n\t// if duration is not a number or less than 0, set it to 0\n\tif (typeof duration !== 'number' || duration < 0) duration = 0;\n\n\t// if alpha is not a number or less than 0, set it to 0\n\tif (typeof alpha !== 'number' || alpha < 0) alpha = 0;\n\n\t// if alpha is not a number or greater than 1, set it to 1\n\tif (typeof alpha !== 'number' || alpha > 1) alpha = 1;\n\n\t// if force is not a boolean, set it to false\n\tif (typeof force !== 'boolean') force = false;\n\n\t// if color is not a string, set it to white\n\tif (typeof color !== 'string') color = 'white';\n\n\t// if the object has a flash effect and force is false, return false\n\tif (this.fx.hasFlash && !force) return false;\n\n\t// clear any existing effect\n\tthis.fx.clear();\n\n\t// draw a rectangle with the given color and alpha\n\tthis.fx.beginFill(color, alpha);\n\tthis.fx.drawRect(0, 0, this.width, this.height);\n\tthis.fx.endFill();\n\n\t// set the effect duration\n\tthis.fx.flashDuration = duration;\n\n\t// set the effect flag\n\tthis.fx.hasFlash = true;\n\n\t// return true\n\treturn true;\n\n}", "CodeBleu_score": 58.021097868338465}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FlexLayer(this.game, this.game.world, this.game.camera, this.game.world.bounds, this.game.world.bounds, this.game.world.bounds, this.game.world.bounds);\n    layer.addMultiple(children);\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n    this.layers.push(layer);\n    return layer;\n}", "CodeBleu_score": 56.86105056701446}, {"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FlexLayer(this.game, this.game.world, this.game.camera, this.game.input, this.game.time, this.game.rnd, this.game.scale, this.game.sound, this.game.physics, this.game.plugins, this.game.renderer, this.game.stage, this.game.cache, this.game.cameras, this.game.soundManager, this.game.soundChannel, this.game.soundContext, this.game.soundDecodedEvent, this.game.soundUnlockEvent, this.game.soundMuted, this.game.soundVolume, this.game.soundRate, this.game.soundDetected, this.game.soundTouchLocked, this.game.soundTouchUnlocked, this.game.soundTouchEvent, this.game.soundTouch, this.game.soundDisabled, this.game.soundDisabledEvent, this.game.soundDisabledOverridden, this.game.soundDisabledUnlocked, this.game.soundDisabledVolume, this.game.soundDisabledRate, this.game.soundDisabledDetected, this.game.soundDisabledTouchLocked, this.game.soundDisabledTouchUnlocked, this.game.soundDisabledTouchEvent, this.game.soundDisabledTouch, this.game.soundDisabledMuted, this.game.soundDisabledVolume, this.game.soundDisabledRate, this.game.soundDisabledDetected, this.game.soundDisabledTouchLocked, this.game.soundDisabledTouchUnlocked, this.game.soundDisabledTouchEvent, this.game.soundDisabledTouch, this.game.soundDisabledMuted, this.game.soundDisabledMutedEvent, this.game.soundDisabledMutedOverridden, this.game.soundDisabledMutedUnlocked, this.game.soundDisabledMutedVolume, this.game.soundDisabledMutedRate, this.game.soundDisabledMutedDetected, this.game.soundDisabledMutedTouchLocked, this.game.soundDisabledMutedTouchUnlocked, this.game.soundDisabledMutedTouchEvent, this.game.soundDisabledMutedTouch", "CodeBleu_score": 10.271027153456558}, {"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FlexLayer(this);\n    layer.addMultiple(children);\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n    this.layers.push(layer);\n    return layer;\n}", "CodeBleu_score": 37.82896927948652}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.group();\n\tlayer.name = \"layer\";\n\tlayer.layer = this.layers.length;\n\tlayer.x = 0;\n\tlayer.y = 0;\n\tlayer.width = this.game.width;\n\tlayer.height = this.game.height;\n\tlayer.scale.setTo(this.scale, this.scale);\n\tthis.game.world.add(layer);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.add(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 43.62263789323342}, {"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.group();\n    layer.x = 0;\n    layer.y = 0;\n    layer.scale.x = 1;\n    layer.scale.y = 1;\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 53.605818615315336}, {"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.group();\n    layer.scale.setTo(this.scale);\n    layer.position.setTo(this.position);\n    layer.bounds.setTo(this.bounds);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 51.51461573342668}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\tif (rect) {\n\n        if (copy) {\n            this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n        } else {\n            this.cropRect.x = rect.x;\n            this.cropRect.y = rect.y;\n            this.cropRect.width = rect.width;\n            this.cropRect.height = rect.height;\n        }\n\n        this.updateCrop();\n\n    } else {\n        this.resetFrame();\n    }\n\n}", "CodeBleu_score": 36.71127179201175}, {"code": "crop: function (rect, copy){\n\tif (rect) {\n\n        if (copy) {\n            this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n        } else {\n            this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n            this.updateCrop();\n        }\n\n    } else {\n        this.resetFrame();\n    }\n\n}", "CodeBleu_score": 37.95323100407119}, {"code": "crop: function (rect, copy){\n\tif (rect) {\n        if (copy) {\n            this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n        } else {\n            this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n            this.updateCrop();\n        }\n    } else {\n        this.resetFrame();\n    }\n\n}", "CodeBleu_score": 37.95323100407119}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\tif (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 83.95622410231522}, {"code": "move: function (x, y, wrap){\n\tif (x !== 0) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y !== 0) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 75.82361718287738}, {"code": "move: function (x, y, wrap){\n\tif (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 83.95622410231522}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.stateFramesFrozen)\n    {\n        return false;\n    }\n\n    var frame = this.stateFrames[state];\n\n    if (typeof frame === 'string')\n    {\n        frame = this.game.cache.getFrameByName(this.texture.base, frame);\n    }\n    else if (typeof frame === 'number')\n    {\n        frame = this.texture.getFrame(frame);\n    }\n\n    if (frame)\n    {\n        this.frame = frame;\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 58.52594731917079}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.stateFramesFrozen)\n    {\n        return false;\n    }\n\n    if (typeof state === 'string')\n    {\n        state = this.stateMap[state];\n    }\n\n    if (typeof state === 'number' && this.frameData.getFrame(state) !== null)\n    {\n        this.frame = state;\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 38.03196248845593}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.framesAreFrozen)\n    {\n        return false;\n    }\n\n    if (typeof state === 'string')\n    {\n        if (this.frameKeys[state])\n        {\n            this.frame = this.frameKeys[state];\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else if (typeof state === 'number')\n    {\n        if (this.frameKeys[state])\n        {\n            this.frame = this.frameKeys[state];\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    return false;\n\n}", "CodeBleu_score": 39.20524606555823}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (typeof quantity === 'undefined') { quantity = 1; }\n    if (typeof key === 'undefined') { key = null; }\n    if (typeof frame === 'undefined') { frame = null; }\n    if (typeof group === 'undefined') { group = null; }\n    if (typeof bulletClass === 'undefined') { bulletClass = null; }\n\n    var weapon = new Phaser.Weapon(this, quantity, key, frame, group, bulletClass);\n\n    this.weapons.add(weapon);\n\n    return weapon;\n\n}", "CodeBleu_score": 37.819640937900566}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (quantity === undefined) { quantity = 1; }\n    if (key === undefined) { key = null; }\n    if (frame === undefined) { frame = null; }\n    if (group === undefined) { group = null; }\n    if (bulletClass === undefined) { bulletClass = null; }\n\n    var weapon = new Phaser.Weapon(this.game, quantity, key, frame, group, bulletClass);\n\n    this.weapons.push(weapon);\n\n    return weapon;\n\n}", "CodeBleu_score": 35.461371042897845}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (arguments.length === 0) {\n        return;\n    }\n\n    if (typeof quantity === 'string') {\n        bulletClass = key;\n        group = frame;\n        frame = key;\n        key = quantity;\n        quantity = 1;\n    }\n\n    if (typeof quantity === 'number') {\n        if (typeof key === 'string') {\n            if (typeof frame === 'string') {\n                if (typeof group === 'string') {\n                    bulletClass = group;\n                    group = frame;\n                    frame = key;\n                    key = null;\n                } else {\n                    bulletClass = group;\n                    group = null;\n                }\n            } else {\n                bulletClass = frame;\n                frame = null;\n            }\n        }\n    }\n\n    if (typeof key === 'string') {\n        if (typeof frame === 'string') {\n            if (typeof group === 'string') {\n                bulletClass = group;\n                group = frame;\n                frame = key;\n                key = null;\n            } else {\n                bulletClass = group;\n                group = frame;\n                frame = null;\n            }\n        } else {\n            bulletClass = frame;\n            frame = null;\n        }\n    }\n\n    if (typeof key === 'object') {\n        if (typeof frame === 'string') {\n            if (typeof group === 'string') {\n                bulletClass = group;\n                group = frame;\n                frame = key;\n                key = null;\n            } else {\n                bulletClass = group;\n                group = frame;\n                frame = null;\n            }\n        } else {\n            bulletClass = frame;\n            frame = null;\n        }\n    }\n\n    if (typeof key === 'function') {\n        if (typeof frame === 'string') {\n            if (typeof group === 'string') {\n                bulletClass = group;\n                group = frame;\n                frame = key;\n                key = null;\n            } else {\n                bulletClass = group;\n                group = frame;\n                frame = null;\n            }\n        } else {\n            bulletClass = frame;\n            frame =", "CodeBleu_score": 19.798375760808785}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\tvar x1 = points[0].x;\n    var y1 = points[0].y;\n    var x2 = points[1].x;\n    var y2 = points[1].y;\n    var x3 = points[2].x;\n    var y3 = points[2].y;\n\n    var dx1 = x2 - x1;\n    var dy1 = y2 - y1;\n    var dx2 = x3 - x1;\n    var dy2 = y3 - y1;\n    var normalX = dy1 * dx2 - dx1 * dy2;\n    var normalY = dx1 * dy2 - dy1 * dx2;\n\n    if (cull) {\n        var cameraToFace = new Phaser.Point(normalX, normalY);\n        var cameraToFaceDot = cameraToFace.dot(this.cameraToFace);\n        if (cameraToFaceDot > 0) {\n            this.drawTriangle(points, false);\n        }\n    }\n    else {\n        this.context.beginPath();\n        this.context.moveTo(x1, y1);\n        this.context.lineTo(x2, y2);\n        this.context.lineTo(x3, y3);\n        this.context.closePath();\n        this.context.fill();\n    }\n}", "CodeBleu_score": 35.91227464871839}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\tif (cull) {\n        var a = points[0];\n        var b = points[1];\n        var c = points[2];\n\n        var v0 = new Phaser.Vec2(a.x, a.y);\n        var v1 = new Phaser.Vec2(b.x, b.y);\n        var v2 = new Phaser.Vec2(c.x, c.y);\n\n        var normal = new Phaser.Vec2();\n        normal.cross(v1, v0);\n        normal.normalize();\n\n        var dot = this.cameraToFace.dot(normal);\n\n        if (dot < 0) {\n            this.drawPolygon([a, b, c], true);\n        }\n    } else {\n        this.drawPolygon(points, true);\n    }\n}", "CodeBleu_score": 37.80245519371695}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\tif (cull)\n    {\n        var a = new Phaser.Point(points[0].x, points[0].y);\n        var b = new Phaser.Point(points[1].x, points[1].y);\n        var c = new Phaser.Point(points[2].x, points[2].y);\n\n        var normal = Phaser.Line.normal(a, b, c);\n\n        var cameraToFace = Phaser.Point.subtract(this.game.camera.position, new Phaser.Point(this.game.camera.x, this.game.camera.y));\n        var dot = Phaser.Point.dot(cameraToFace, normal);\n\n        if (dot < 0)\n        {\n            this.drawPolygon(points);\n        }\n    }\n    else\n    {\n        this.drawPolygon(points);\n    }\n\n}", "CodeBleu_score": 49.31196054109728}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\tif (this.video.readyState === 4) {\n        // If video is ready, stop any pending source changes and update the texture for playback.\n        this.video.removeEventListener('canplaythrough', this.checkVideoProgress.bind(this));\n        this.video.removeEventListener('error', this.checkVideoProgress.bind(this));\n        this.video.pause();\n        this.video.currentTime = 0;\n        this.updateTexture();\n    } else if (this.retryCount > 0) {\n        // If video is not ready and we have retries remaining, decrement the retry counter and set a timeout to check progress again.\n        this.retryCount--;\n        console.warn('Video failed to load. Retrying...');\n        window.setTimeout(this.checkVideoProgress.bind(this), 100);\n    } else {\n        // If video is not ready and we have no retries remaining, stop any pending source changes and throw an error.\n        this.video.removeEventListener('canplaythrough', this.checkVideoProgress.bind(this));\n        this.video.removeEventListener('error', this.checkVideoProgress.bind(this));\n        console.error('Video failed to load.');\n    }\n}", "CodeBleu_score": 38.396377163639976}, {"code": "checkVideoProgress: function (){\n\tif (this.video.readyState > 0) {\n    this.video.removeEventListener('canplaythrough', this.checkVideoProgress);\n    this.video.removeEventListener('error', this.checkVideoProgress);\n    this.video.removeEventListener('loadeddata', this.checkVideoProgress);\n    this.video.removeEventListener('loadedmetadata', this.checkVideoProgress);\n    this.video.removeEventListener('progress', this.checkVideoProgress);\n    this.video.removeEventListener('stalled', this.checkVideoProgress);\n    this.video.removeEventListener('waiting', this.checkVideoProgress);\n    this.video.removeEventListener('suspend', this.checkVideoProgress);\n    this.video.removeEventListener('abort', this.checkVideoProgress);\n    this.video.removeEventListener('emptied', this.checkVideoProgress);\n    this.video.removeEventListener('error', this.checkVideoProgress);\n    this.video.removeEventListener('ended', this.checkVideoProgress);\n    this.video.removeEventListener('seeking', this.checkVideoProgress);\n    this.video.removeEventListener('seeked', this.checkVideoProgress);\n    this.video.removeEventListener('durationchange', this.checkVideoProgress);\n    this.video.removeEventListener('timeupdate', this.checkVideoProgress);\n    this.video.removeEventListener('play', this.checkVideoProgress);\n    this.video.removeEventListener('pause', this.checkVideoProgress);\n    this.video.removeEventListener('ratechange', this.checkVideoProgress);\n    this.video.removeEventListener('volumechange', this.checkVideoProgress);\n    this.video.removeEventListener('resize', this.checkVideoProgress);\n    this.video.removeEventListener('scroll', this.checkVideoProgress);\n    this.video.removeEventListener('focus', this.checkVideoProgress);\n    this.video.removeEventListener('blur', this.checkVideoProgress);\n    this.video.removeEventListener('error', this.checkVideoProgress);\n    this.video.removeEventListener('error', this.checkVideoProgress);\n    this.video.removeEventListener('error', this.checkVideoProgress);\n    this.video.removeEventListener('error', this.checkVideoProgress);", "CodeBleu_score": 17.449523828089912}, {"code": "checkVideoProgress: function (){\n\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\n        this.video.removeEventListener('progress', this.checkVideoProgress.bind(this));\n\n        // If the video is ready, stop any pending source changes and update the texture for playback.\n        if (this.video.src !== this.currentSource) {\n\n            this.video.src = this.currentSource;\n            this.video.load();\n\n            this.updateTexture();\n\n        }\n\n    } else if (this.video.readyState === this.video.HAVE_NOTHING) {\n\n        // If the video is not ready, decrement the retry counter and set a timeout to check progress again.\n        if (this.retryCount > 0) {\n\n            this.retryCount--;\n            window.setTimeout(this.checkVideoProgress.bind(this), 100);\n\n        } else {\n\n            console.warn('[VideoTexture] Video failed to start downloading.');\n\n        }\n\n    }\n\n}", "CodeBleu_score": 30.744371939259274}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\tif (this.state !== \"down\") {\n        this.state = \"down\";\n        this.time = this.timeDown = this.timeUp = 0;\n        this.repeat = this.repeatMax = 0;\n        this.value = value;\n        this.event = event;\n        if (event) {\n            this.alt = event.altKey;\n            this.shift = event.shiftKey;\n            this.ctrl = event.ctrlKey;\n        }\n        this.onDown.dispatch(this.state, value);\n    }\n\n}", "CodeBleu_score": 53.75512110629816}, {"code": "start: function (event, value){\n\tif (this.state !== \"down\") {\n        this.state = \"down\";\n        this.repeatCount = 0;\n        this.repeatInterval = 0;\n        this.time = 0;\n        this.modifiers = { alt: false, shift: false, ctrl: false };\n\n        if (event) {\n            this.modifiers.alt = event.altKey;\n            this.modifiers.shift = event.shiftKey;\n            this.modifiers.ctrl = event.ctrlKey;\n        }\n    }\n\n    this.value = value;\n    this.time = Date.now();\n\n    this.onDown.dispatch(this.state, this.value, this.modifiers);\n\n}", "CodeBleu_score": 37.35756964464922}, {"code": "start: function (event, value){\n\t// If the state is already down, do nothing\n    if (this.state == \"down\") return;\n\n    // Set the state to down\n    this.state = \"down\";\n\n    // Initialize timing and repeat counters\n    this.time = 0;\n    this.repeat = 0;\n\n    // Capture the state of modifier keys (alt, shift, ctrl)\n    if (event) {\n        this.alt = event.altKey;\n        this.shift = event.shiftKey;\n        this.ctrl = event.ctrlKey;\n    }\n\n    // Assign event and value parameters\n    if (event) {\n        this.event = event;\n    }\n    if (value !== undefined) {\n        this.value = value;\n    }\n\n    // Dispatch an onDown event\n    this.onDown.dispatch(this.state, this.value, this.event);\n}", "CodeBleu_score": 56.77479293040763}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t", "CodeBleu_score": 6.864115172258767}, {"code": "onMouseDown: function (event){\n\t// store the event\n    this.mouseDownEvent = event\n\n    // prevent default behavior\n    if (this.mouseDownPreventDefault) {\n        event.preventDefault()\n    }\n\n    // invoke the callback\n    if (this.mouseDownCallback) {\n        this.mouseDownCallback.call(this, event)\n    }\n\n    // initialize the mouse pointer\n    if (this.input) {\n        this.input.mousePointer.start(event)\n    }\n\n}", "CodeBleu_score": 47.08703981946294}, {"code": "onMouseDown: function (event){\n\t", "CodeBleu_score": 6.864115172258767}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t// console.log(\"onMouseUpGlobal\", event);\n\tif (this.mouseUpCallback) {\n\t\tthis.mouseUpCallback.call(this, event);\n\t}\n\n\tif (this.input.enabled) {\n\t\tthis.input.mousePointer.stop(event);\n\t}\n}", "CodeBleu_score": 39.52444781353398}, {"code": "onMouseUpGlobal: function (event){\n\tif (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this, event);\n    }\n\n    if (this.input) {\n        this.input.mousePointer.stop(event);\n    }\n\n    return false;\n}", "CodeBleu_score": 44.20863223794179}, {"code": "onMouseUpGlobal: function (event){\n\t//if (this.input.mousePointer.button === 0) {\n    //    this.mouseUpCallback.call(this.mouseUpCallbackScope, event);\n    //}\n\n    //if (this.input.mousePointer.button === 2) {\n    //    this.mouseRightUpCallback.call(this.mouseRightUpCallbackScope, event);\n    //}\n\n    if (this.input.mousePointer.button === 1) {\n        this.mouseMiddleUpCallback.call(this.mouseMiddleUpCallbackScope, event);\n    }\n\n    if (this.input.mousePointer.button === 0) {\n        this.mouseLeftUpCallback.call(this.mouseLeftUpCallbackScope, event);\n    }\n\n    //if (this.input.mousePointer.button === 2) {\n    //    this.mouseRightUpCallback.call(this.mouseRightUpCallbackScope, event);\n    //}\n\n    //if (this.input.mousePointer.button === 1) {\n    //    this.mouseMiddleUpCallback.call(this.mouseMiddleUpCallbackScope, event);\n    //}\n\n    this.mouseUpCallback.call(this.mouseUpCallbackScope, event);\n\n    if (this.input.mousePointer.button === 0) {\n        this.mouseLeftUpCallback.call(this.mouseLeftUpCallbackScope, event);\n    }\n\n    if (this.input.mousePointer.button === 1) {\n        this.mouseMiddleUpCallback.call(this.mouseMiddleUpCallbackScope, event);\n    }\n\n    if (this.input.mousePointer.button === 2) {\n        this.mouseRightUpCallback.call(this.mouseRightUpCallbackScope, event);\n    }\n\n    if (this.input.mousePointer.button === 0) {\n        this.mouseLeftUpCallback.call(this.mouseLeftUpCallbackScope, event);\n    }\n\n    if (this.input.mousePointer.button === 1) {\n        this.mouseMiddleUpCallback.call(this.mouseMiddleUpCallbackScope, event);\n    }\n\n    if (this.input.mousePointer.button === 2) {", "CodeBleu_score": 43.45272382653151}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t// Check if game input and the object are enabled\n    if (!this.game.input.enabled || !this.enabled) {\n        return\n    }\n\n    // Store the event\n    this.touchEnterEvent = event\n\n    // Call the touchEnterCallback if defined\n    if (typeof this.touchEnterCallback === \"function\") {\n        this.touchEnterCallback.call(this.callbackContext, this, this.touchEnterEvent)\n    }\n\n    // Prevent the default action if specified\n    if (this.preventDefault) {\n        event.preventDefault()\n    }\n}", "CodeBleu_score": 46.80082710882296}, {"code": "onTouchEnter: function (event){\n\tif (this.enabled && this.game.input.enabled && this.touchEnabled) {", "CodeBleu_score": 21.033021372708703}, {"code": "onTouchEnter: function (event){\n\tif (this.gameInputEnabled && this.enabled) {\n\t\tthis.touchEnterEvent = event\n\t\tthis.touchEnterCallback.call(this.touchEnterCallbackScope, event)\n\t\tif (this.touchEnterPreventDefault) event.preventDefault()\n\t}\n\n}", "CodeBleu_score": 39.446475879982636}]}
