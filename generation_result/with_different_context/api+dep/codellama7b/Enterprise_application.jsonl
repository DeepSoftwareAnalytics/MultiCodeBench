{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\tattachment_ids = self._get_attachment_ids_from_args(args)\n    self._check_access_rights_and_rules('read', attachment_ids)\n    content = self._build_zip_from_attachments(attachment_ids)\n    headers = self._get_zip_headers(content, self._get_zip_filename(attachment_ids))\n    return request.make_response(content, headers=headers)", "CodeBleu_score": 17.536967933217078}, {"code": "def export_zip_documents(self, **args)\n\tattachment_ids = self.request.httprequest.args.getlist('attachment_ids')\n    if not attachment_ids:\n        return\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    if not attachments:\n        return\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    zip_file = self._build_zip_from_attachments(attachments)\n    headers = self._get_zip_headers(zip_file, 'attachments.zip')\n    return self.make_response(zip_file, headers=headers)", "CodeBleu_score": 34.53926265864654}, {"code": "def export_zip_documents(self, **args)\n\t# Get attachments IDs from request arguments\n    attachment_ids = self._get_attachment_ids_from_request_args(args)\n    # Check read access rights and rules for the attachments\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n    # Build zip file from the attachments' content\n    zip_content = self._build_zip_from_attachments(attachment_ids)\n    # Prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(zip_content, 'attachments.zip')\n    # Return zip file as an HTTP response\n    return request.make_response(zip_content, headers=headers)", "CodeBleu_score": 31.501197249745882}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 74.75909263190782}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 74.75909263190782}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t# get the values from the _prepare_my_invoices_values function\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    # get the invoices recordset from the lambda function\n    invoices = values['invoices'](page - 1)\n    # update the session history with the latest invoice IDs\n    self._update_invoice_session_history(invoices)\n    # render the invoices page with the prepared values\n    return request.render(\"account_portal_invoices.portal_invoices\", values)\n\n", "CodeBleu_score": 32.96481193110511}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    return request.render(\"portal_invoices.portal_my_invoices\", values)", "CodeBleu_score": 23.87214084924268}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    return request.render(\"account_portal_invoices.portal_my_invoices\", values)", "CodeBleu_score": 24.548461680188456}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = self._document_check_access(invoice_id, access_token)\n    if not invoice:\n        return\n    if download:\n        return self._get_invoice_report_attachments(invoice, report_type)\n    return self._invoice_get_page_view_values(invoice, access_token, **kw)\n\n\n\n", "CodeBleu_score": 11.76186195460458}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = self.env['account.invoice'].browse(invoice_id)\n    if invoice.state != 'posted':\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.has_group_access_rights('read', raise_exception=False):\n        raise werkzeug.exceptions.Forbidden()\n    if access_token != invoice.access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if report_type == 'pdf':\n        if not invoice.has_group_access_rights('read_write', raise_exception=False):\n            raise werkzeug.exceptions.Forbidden()\n        if not invoice.state == 'posted':\n            raise werkzeug.exceptions.Forbidden()\n        if invoice.state == 'posted' and not invoice.is_invoice_payment_control_enabled():\n            raise werkzeug.exceptions.Forbidden()\n        if not invoice.is_invoice_payment_control_enabled() and invoice.is_invoice_payment_control_enabled() and invoice.is_invoice_payment_control_enabled() and not invoice.is_invoice_payment_control_enabled():\n            raise werkzeug.exceptions.Forbidden()\n        legal_documents = invoice._get_invoice_legal_documents()\n        if not legal_documents:\n            raise werkzeug.exceptions.Forbidden()\n        zip_file = self._build_zip_from_attachments(invoice, legal_documents)\n        return self._get_http_headers(zip_file, invoice.name)\n    elif report_type == 'html':\n        if not invoice.has_group_access_rights('read', raise_exception=False):\n            raise werkzeug.exceptions.Forbidden()\n        values = self._invoice_get_page_view_values(invoice, access_token, **kw)\n        return request.render('account.invoice', values)\n    elif report_type == 'text':\n        if not invoice.has_group_access_rights('read', raise_exception=False):", "CodeBleu_score": 35.15916439677121}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice_sudo = self.env['account.invoice'].browse(invoice_id).sudo()\n    if not invoice_sudo.exists():\n        return request.redirect('/my/invoices')\n    if not invoice_sudo.has_read_access_rights():\n        return request.redirect('/my/invoices')\n    if invoice_sudo.state == 'draft':\n        return request.redirect('/my/invoices')\n    if download:\n        if report_type == 'pdf':\n            return self._get_pdf_report(invoice_sudo, access_token, download=True)\n        if report_type == 'text':\n            return self._get_text_report(invoice_sudo, access_token, download=True)\n        return self._get_zip_report(invoice_sudo, access_token, download=True)\n    return self._get_page_view_values(invoice_sudo, access_token, **kw)\n\n\n\n", "CodeBleu_score": 25.362536501963117}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\tif not company:\n        company = self.env.company\n    domain = [('company_id', '=', company.id), ('product_tmpl_id', '!=', False)]\n    if company.country_id:\n        domain += [('country_id', '=', company.country_id.id)]\n    if company.currency_id:\n        domain += [('currency_id', '=', company.currency_id.id)]\n    if company.partner_id:\n        domain += [('partner_id', '=', company.partner_id.id)]\n    if company.sale_sequence_id:\n        domain += [('sale_sequence_id', '=', company.sale_sequence_id.id)]\n    if company.purchase_sequence_id:\n        domain += [('purchase_sequence_id', '=', company.purchase_sequence_id.id)]\n    if company.property_account_sale_id:\n        domain += [('property_account_sale', '=', company.property_account_sale_id.id)]\n    if company.property_account_purchase_id:\n        domain += [('property_account_purchase', '=', company.property_account_purchase_id.id)]\n    if company.property_stock_account_input_categ_id:\n        domain += [('property_stock_account_input_categ', '=', company.property_stock_account_input_categ_id.id)]\n    if company.property_stock_account_output_categ_id:\n        domain += [('property_stock_account_output_categ', '=', company.property_stock_account_output_categ_id.id)]\n    if company.property_stock_account_internal_categ_id:\n        domain += [('property_stock_account_internal_categ', '=', company.property_stock_account_internal_categ_id.id)]\n    if company.property_stock_account_valuation_categ_id:\n        domain += [('property_stock_account_valuation_categ', '=', company.property_stock", "CodeBleu_score": 26.23607220019064}, {"code": "def _get_demo_data_products(self, company=False)\n\tdomain = [('company_id', '=', self.company_id.id)]\n    if company:\n        domain = [('company_id', '=', company.id)]\n    templates = self.env['product.template'].search(domain)\n    for template in templates:\n        if template.sale_ok and template.purchase_ok:\n            template.write({'sale_ok': False, 'purchase_ok': False})\n        if template.sale_ok and template.sale_tax_id:\n            template.write({'sale_tax_id': False})\n        if template.purchase_ok and template.purchase_tax_id:\n            template.write({'purchase_tax_id': False})\n        if template.sale_ok and template.company_id.account_sale_tax_id:\n            template.write({'sale_tax_id': template.company_id.account_sale_tax_id.id})\n        if template.purchase_ok and template.company_id.account_purchase_tax_id:\n            template.write({'purchase_tax_id': template.company_id.account_purchase_tax_id.id})\n", "CodeBleu_score": 26.350420072223525}, {"code": "def _get_demo_data_products(self, company=False)\n\tif not company:\n        company = self.env.company\n    domain = self._get_demo_data_products_domain(company)\n    products = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        for product in products:\n            product.sale_ok = True\n            product.sale_tax_id = company.account_sale_tax_id\n    if company.account_purchase_tax_id:\n        for product in products:\n            product.purchase_ok = True\n            product.purchase_tax_id = company.account_purchase_tax_id\n    return products", "CodeBleu_score": 30.409457102450776}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\tdemo_account = None\n    for data in self.env['ir.model.data'].search([('module', '=', 'l10n_latam_ar'), ('name', '=', xml_id), ('model', '=', 'account.account'), ('res_id', '!=', False), ('company_id', '=', company.id)]):\n        demo_account = self.env['account.account'].browse(data.res_id)\n    if not demo_account:\n        demo_accounts = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n        if demo_accounts:\n            demo_account = demo_accounts[0]\n    return demo_account\n\n", "CodeBleu_score": 42.4180458632065}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t# Search for the account in the ir.model.data model.\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id, raise_if_not_found=False)\n    if account:\n        return account\n    # Search for the account in the account_type model.\n    domain = [('company_id', '=', company.id), ('type', '=', account_type)]\n    account = self.env[account_type].search(domain, limit=1)\n    if account:\n        return account\n    # Search for the account in the account_type model.\n    domain = [('company_id', '=', company.id)]\n    account = self.env[account_type].search(domain, limit=1)\n    if account:\n        return account\n    # Return the first account in the company's domain.\n    domain = [('company_id', '=', company.id)]\n    account = self.env[account_type].search(domain, limit=1)\n    if account:\n        return account\n    return False", "CodeBleu_score": 44.806560746694444}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\taccount = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account", "CodeBleu_score": 45.24161462754165}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\tcurrent_year_earning_accounts = self.env['account.account'].search([\n        ('company_id', '=', self.company_id.id),\n        ('account_type', '=', 'earnings'),\n        ('internal_type', '=', 'other'),\n        ('name', '=', 'Current Year Earnings'),\n    ])\n\n    if len(current_year_earning_accounts) > 1:\n        raise ValidationError(_('There is more than one account of type \"Current Year Earnings\" for this company. There should be only one.'))\n", "CodeBleu_score": 24.90234232369739}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\tif self.account_type == \"Current Year Earnings\":\n        accounts = self.env['account.account'].search([\n            ('account_type', '=', 'Current Year Earnings'),\n            ('company_id', '=', self.company_id.id)\n        ])\n        if len(accounts) > 1:\n            raise ValidationError(_('There is already a Current Year Earnings account for this company.'))\n", "CodeBleu_score": 33.42344489336882}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self.env['account.account'].search([\n        ('company_id', '=', self.company_id.id),\n        ('type', '=', 'earnings'),\n        ('internal_type', '=', 'other'),\n        ('name', '=', 'Current Year Earnings'),\n        ('active', '=', True)\n    ])\n    if len(accounts) > 1:\n        raise ValidationError(_('There is more than one account with type \"Current Year Earnings\". There can be only one account of this type per company.'))\n\n\n\n\n", "CodeBleu_score": 25.395888303557317}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and self._context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n    domain = expression.AND([['name', operator, name], domain or []])\n    return super(Account, self)._name_search(name, domain, operator, limit, order)\n\n\n\n\n", "CodeBleu_score": 26.148056787860185}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and self._context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner(domain)\n    if not name:\n        name = ''\n    if not domain:\n        domain = []\n    if not operator:\n        operator = 'ilike'\n    if not limit:\n        limit = self._context.get('limit', 80)\n    if not order:\n        order = self._context.get('order', 'name')\n    domain = expression.AND([[('name', operator, name)], domain])\n    return self._search(domain, limit=limit, order=order)", "CodeBleu_score": 41.94334217004158}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and self._context.get('search_default_partner_id'):\n        return self._order_accounts_by_frequency_for_partner(domain)\n    if not name and self._context.get('search_default_partner_id') is False:\n        return self._search([], limit=limit, order=order)\n    if not name:\n        return self._search([], domain, limit=limit, order=order)\n    if not domain:\n        domain = []\n    domain = expression.AND([\n        expression.OR([\n            ['name', operator, name],\n            ['code', operator, name],\n            ['ref', operator, name],\n            ['account_type', '=', name],\n            ['internal_type', '=', name],\n        ]),\n        '|',\n        domain,\n    ])\n    return self._search(domain, limit=limit, order=order)", "CodeBleu_score": 45.47467756367923}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.27732296095304}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.analytic.line'].with_context(active_ids=self.ids, active_id=self.id).search([])\n    query = query.filtered(lambda line: line.account_analytic_id.type in sale_types)\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    query = query.with_context(active_ids=self.ids, active_id=self.id).", "CodeBleu_score": 19.208878347818686}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.analytic.line'].with_context(active_ids=self.ids).search([])\n    query = query.select([\n        'id',\n        'account_move_id',\n        'account_id',\n        'partner_id',\n        'partner_name',\n        'partner_type',\n        'partner_category_id',\n        'partner_category_id.name',\n        'partner_category_id.sequence',\n        'partner_category_id.parent_id',\n        'partner_category_id.parent_id.name',\n        'partner_category_id.parent_id.sequence',\n        'partner_category_id.parent_id.parent_id',\n        'partner_category_id.parent_id.parent_id.name',\n        'partner_category_id.parent_id.parent_id.sequence',\n        'partner_category_id.parent_id.parent_id.parent_id',\n        'partner_category_id.parent_id.parent_id.parent_id.name',\n        'partner_category_id.parent_id.parent_id.parent_id.sequence',\n        'partner_category_id.parent_id.parent_id.parent_id.parent_id',\n        'partner_category_id.parent_id.parent_id.parent_id.parent_id.name',\n        'partner_category_id.parent_id.parent_id.parent_id.parent_id.sequence',\n        'partner_category_id.parent_id.parent_id.parent_id.parent_id.parent_id',\n        'partner_category_id.parent_id.parent_id.parent_id.parent_id.parent_id.name',\n        'partner_category_id.parent_id.parent_id.parent_id.parent_id.parent_id.sequence',\n        'partner_category_id.parent_id.parent_id.parent_id", "CodeBleu_score": 17.72328770085369}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self._query_analytic_accounts(sale_types)\n    query.select(\n        'account_move_id',\n        'move_id',\n        'account_id',\n        'analytic_account_id',\n        'analytic_tag_ids',\n        'tag_ids',\n        'date_maturity',\n        'date_deadline',\n        'date_invoice',\n        'amount_untaxed',\n        'amount_tax',\n        'amount_total',\n        'state',\n        'invoice_status',\n        'invoice_payment_term_id',\n        'invoice_payment_term_date',\n        'partner_id',\n        'partner_name',\n        'partner_ref',\n        'partner_type',\n        'partner_lang',\n        'partner_is_company',\n        'partner_is_customer',\n        'partner_is_supplier',\n        'partner_is_member',\n        'partner_is_contact',\n        'partner_is_investor',\n        'partner_is_supplier',\n        'partner_is_employee',\n        'partner_is_public',\n        'partner_is_private',\n        'partner_is_other',\n        'partner_is_proprietor',\n        'partner_is_student',\n        'partner_is_purchase_agent',\n        'partner_is_sales_agent',\n        'partner_is_issued',\n        'partner_is_issued_by_group',\n        'partner_is_contacted',\n        'partner_is_contacted_by_group',\n        'partner_is_category',\n        'partner_is_manufacturer',\n        'partner_is_service',\n        'partner_is_service_provider',\n        'partner_is_employee',\n        'partner_is_employee_of',\n        'part", "CodeBleu_score": 5.412498988140914}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line'].with_context(active_ids=self.ids, active_id=self.ids[0]).search([('move_id.type', '=', 'purchase'), ('move_id.purchase_id', '=', self.ids[0])])\n    move_ids = query.distinct(lambda l: l.move_id).ids\n    action = {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'default_move_type': 'in_invoice',\n            'default_type': 'in_invoice',\n            'search_default_move_type': 'in_invoice',\n            'search_default_type': 'in_invoice',\n            'search_default_purchase_id': self.ids[0],\n            'search_default_move_id': move_ids[0],\n            'search_default_move_line_id': query[0].id,\n            'search_default_purchase_type': self.purchase_type_id.id,\n            'search_default_date_from': self.date_order,\n            'search_default_date_to': self.date_order,\n            'search_default_partner_id': self.partner_id.id,\n            'search_default_account_id': self.account_id.id,\n            'search_default_journal_id': self.journal_id.id,\n            'search_default_company_id': self.company_id.id,\n            'search_default_move_ids': move_ids,\n            'search_default_move_line_ids': query.ids,\n            'search_default_purchase_ids': self.ids,\n            'search_default_purchase_type_ids': self.purchase_type_id.ids", "CodeBleu_score": 25.73384991786986}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._query_analytic_accounts()\n    query.select(['move_id', 'account_id'])\n    query.add_where(['AND', ('account_id', 'in', self.get_purchase_types()), ('id', 'in', self.ids)])\n    query.group_by(['move_id'])\n    move_ids = query.execute()\n    move_ids = [move_id for move_id, in move_ids]\n    if move_ids:\n        return {\n            'name': _('Vendor Bills'),\n            'type': 'ir.actions.act_window',\n            'view_type': 'form',\n            'view_mode': 'tree,form',\n            'res_model': 'account.move',\n            'context': {\n                'default_move_type': 'in_invoice',\n                'default_move_id': move_ids[0],\n                'search_default_move_id': move_ids[0],\n                'search_default_move_type': 'in_invoice',\n                'search_default_purchase_type': self.get_purchase_types()[0],\n                'search_default_purchase_id': self.ids[0],\n                'search_default_purchase_ids': self.ids,\n            },\n            'domain': [('id', 'in', move_ids)],\n        }\n    return {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'context': {\n            'search_default_move_type': 'in_invoice',\n            'search_default_purchase_type': self.get_purchase_types()[0],\n            'search_default_purchase_id': self.ids[0],\n            'search_default_purchase_ids': self.ids,\n        },\n    }\n\n\n\n\n", "CodeBleu_score": 28.21693926522232}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line'].with_context(active_id=self.id)._query_analytic_accounts()\n    query = query.filtered(lambda line: line.account_id.internal_type == 'payable')\n    query = query.filtered(lambda line: line.move_id.type == 'in_invoice')\n    query = query.filtered(lambda line: line.move_id.id == line.account_id.id)\n    query = query.filtered(lambda line: line.move_id.ref == self.ref)\n    query = query.filtered(lambda line: line.move_id.journal_id.type == 'purchase')\n    move_ids = query.mapped('move_id').ids\n    return {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'default_move_type': 'in_invoice',\n            'active_id': self.id,\n            'active_ids': [self.id],\n            'active_model': self._name,\n            'search_default_move_type': 'in_invoice',\n            'search_default_purchase_type': self.purchase_type_id.id,\n            'search_default_purchase_id': self.id,\n            'search_default_purchase_ref': self.ref,\n        },\n    }\n\n\n\n\n", "CodeBleu_score": 29.66623102354542}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result", "CodeBleu_score": 93.03832878063925}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if self.env.context.get('no_bank_account_creation'):\n        return self.env['res.partner.bank']\n    return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1) or self.env['res.partner.bank'].create({\n        'acc_number': self.acc_number,\n        'partner_id': self.partner_id.id,\n        'partner_bank_id': self.partner_id.id,\n        'company_id': self.company_id.id,\n        'currency_id': self.currency_id.id,\n        'bank_id': self.bank_id.id,\n        'acc_type': self.acc_type,\n        'acc_use': self.acc_use,\n        'acc_journal_ids': [(6, 0, self.acc_journal_ids.ids)],\n        'name': self.name,\n        'partner_id': self.partner_id.id,\n        'partner_bank_id': self.partner_id.id,\n        'company_id': self.company_id.id,\n        'currency_id': self.currency_id.id,\n        'bank_id': self.bank_id.id,\n        'acc_type': self.acc_type,\n        'acc_use': self.acc_use,\n        'acc_journal_ids': [(6, 0, self.acc_journal_ids.ids)],\n        'name': self.name,\n    })\n\n", "CodeBleu_score": 31.18493735904083}, {"code": "def _find_or_create_bank_account(self)\n\tif not self.env.company:\n        return\n    if self.env.company.bank_account_creation_skip:\n        return self.env['res.partner.bank'].sudo().create({\n            'partner_id': self.env.company.partner_id.id,\n            'acc_number': '000000000000000',\n            'company_id': self.env.company.id,\n        })\n    return self.env['res.partner.bank'].sudo().search([\n        ('partner_id', '=', self.env.company.partner_id.id),\n        ('acc_number', '=', self.env.company.bank_account_number),\n        ('company_id', '=', self.env.company.id),\n    ], limit=1)\n\n", "CodeBleu_score": 34.47170287988574}, {"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if self.env.user.company_id.bank_account_creation_skip:\n        return self.env['res.partner.bank'].create({\n            'acc_number': '000000000000000',\n            'partner_id': self.env.user.partner_id.id,\n            'company_id': self.env.user.company_id.id,\n        })\n    else:\n        return self.env['res.partner.bank'].search([\n            ('acc_number', '=', self.acc_number),\n            ('partner_id', '=', self.env.user.partner_id.id),\n            ('company_id', '=', self.env.user.company_id.id),\n        ], limit=1)\n\n", "CodeBleu_score": 29.89527820114826}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    # In case of to_check or partial reconciliation, we can't trust the suspense line.\n    transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n    transaction_currency = self.foreign_currency_id or self.currency_id\n    liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n    if suspense_line and not other_lines:\n        journal_amount = -suspense_line.amount_currency\n        journal_currency = suspense_line.currency_id\n    else:\n        journal_amount = sum(liquidity_line.mapped('amount_currency'))\n        journal_currency = liquidity_line.currency_id\n    company_amount = sum(liquidity_line.mapped('balance'))\n    company_currency = liquidity_line.company_currency_id\n    if currency == transaction_currency:\n        if balance < 0:\n            transaction_amount = -abs(transaction_amount)\n            balance = -balance\n        if self.reconcile_method == 'full':\n            journal_amount = -journal_amount\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n            'balance': balance,\n            'amount_currency': amount_currency,\n        }\n    if currency == journal_currency:\n        if balance < 0:\n            journal_amount = -abs(journal_amount)\n            balance = -balance\n        if self.reconcile_method == 'full':\n            transaction_amount = -transaction_amount\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,", "CodeBleu_score": 33.87459513238802}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    # We need to ensure the context of the statement line in order to be able to retrieve the accounting amounts and currencies.\n    with self.env.context(self._context):\n        (\n            transaction_amount,\n            transaction_currency,\n            journal_amount,\n            journal_currency,\n            company_amount,\n            company_currency,\n        ) = self._get_accounting_amounts_and_currencies()\n\n    if currency == transaction_currency:\n        amount = transaction_amount\n        balance = balance\n    elif currency == journal_currency:\n        amount = journal_amount\n        balance = balance\n    elif currency == company_currency:\n        amount = company_amount\n        balance = balance\n    else:\n        # In case of foreign currency, we need to convert the transaction amount and balance to the currency of the statement line.\n        if self.foreign_currency_id:\n            amount = transaction_amount\n            balance = balance\n        else:\n            # In case of foreign currency, we need to convert the transaction amount and balance to the currency of the statement line.\n            if self.foreign_currency_id:\n                amount = transaction_amount\n                balance = balance\n            else:\n                amount = self.amount_currency\n                balance = self.amount\n\n    # We need to ensure the context of the statement line in order to be able to retrieve the accounting amounts and currencies.\n    with self.env.context(self._context):\n        (\n            transaction_amount,\n            transaction_currency,\n            journal_amount,\n            journal_currency,\n            company_amount,\n            company_currency,\n        ) = self._get_accounting_amounts_and_currencies()\n\n    if currency == transaction_currency:\n        amount = transaction_amount\n        balance = balance\n    elif currency == journal_currency:\n        amount = journal_amount\n        balance = balance\n    elif currency == company_currency:\n        amount = company_amount\n        balance = balance\n    else:\n        # In case of foreign currency, we need to convert the transaction amount and balance to the currency of the statement line.\n        if self.foreign_currency_id:\n            amount = transaction_amount", "CodeBleu_score": 28.86911431475979}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency == company_currency:\n        if self.statement_line_id.statement_id.statement_type == 'debit':\n            return {\n                'transaction_amount': transaction_amount,\n                'transaction_currency': transaction_currency,\n                'journal_amount': journal_amount,\n                'journal_currency': journal_currency,\n                'company_amount': company_amount,\n                'company_currency': company_currency,\n            }\n        else:\n            return {\n                'transaction_amount': -transaction_amount,\n                'transaction_currency': transaction_currency,\n                'journal_amount': -journal_amount,\n                'journal_currency': journal_currency,\n                'company_amount': -company_amount,\n                'company_currency': company_currency,\n            }\n    elif currency == journal_currency:\n        if self.statement_line_id.statement_id.statement_type == 'debit':\n            return {\n                'transaction_amount': -transaction_amount,\n                'transaction_currency': transaction_currency,\n                'journal_amount': -journal_amount,\n                'journal_currency': journal_currency,\n                'company_amount': -company_amount,\n                'company_currency': company_currency,\n            }\n        else:\n            return {\n                'transaction_amount': transaction_amount,\n                'transaction_currency': transaction_currency,\n                'journal_amount': journal_amount,\n                'journal_currency': journal_currency,\n                'company_amount': company_amount,\n                'company_currency': company_currency,\n            }\n    elif currency == transaction_currency:\n        if self.statement_line_id.statement_id.statement_type == 'debit':\n            return {\n                'transaction_amount': -transaction_amount,\n                'transaction_currency': transaction_currency,\n                'journal_amount': -journal_amount,\n                'journal_currency': journal_", "CodeBleu_score": 23.332002118071024}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        if journal.type in ('bank', 'cash'):\n            payment_method_line_ids = self.env['account.payment.method.line']\n            payment_method_ids = self._default_outbound_payment_methods().ids\n            for payment_method_id in payment_method_ids:\n                payment_method_line_ids += self.env['account.payment.method.line'].create({\n                    'journal_id': journal.id,\n                    'payment_method_id': payment_method_id,\n                    'active': True,\n                })\n            journal.outbound_payment_method_line_ids = payment_method_line_ids\n\n", "CodeBleu_score": 44.70927377685592}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = journal._default_outbound_payment_methods()\n\n", "CodeBleu_score": 18.96405285521581}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        if journal.type == 'bank' or journal.type == 'cash':\n            journal.outbound_payment_method_line_ids = [(6, 0, journal._default_outbound_payment_methods().ids)]\n        else:\n            journal.outbound_payment_method_line_ids = [(6, 0, [])]\n\n", "CodeBleu_score": 27.692526810904596}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date:\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        elif not move.date:\n            move.date = fields.Date.context_today(self)\n\n", "CodeBleu_score": 26.154272173004188}, {"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n        if move.date != move.date_invoice:\n            move.date_invoice = move.date\n            move.schedule_compute_date_invoice()", "CodeBleu_score": 39.28082013765543}, {"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date and move.date:\n            continue\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.context_today(move)\n            continue\n        accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        if move.date != accounting_date:\n            move.date = accounting_date\n            move.recompute()\n\n", "CodeBleu_score": 42.97323623848885}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tfor move in self:\n        if move.is_sale_document():\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document():\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 50.25495940639909}, {"code": "def _compute_invoice_payment_term_id(self)\n\tfor move in self:\n        if move.is_sale_document(include_receipts=True):\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document(include_receipts=True):\n            if move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n\n", "CodeBleu_score": 51.96364535463156}, {"code": "def _compute_invoice_payment_term_id(self)\n\tfor move in self:\n        if move.is_sale_document():\n            if move.partner_id.payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document():\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False", "CodeBleu_score": 43.66671923098348}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t# Categorize taxes by country and company\n    by_country_company = defaultdict(list)\n    for tax in self:\n        by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n\n    # Assign tax groups to taxes\n    for taxes in by_country_company.values():\n        taxes.sort(key=lambda tax: tax.sequence)\n        for tax in taxes:\n            if tax.tax_group_id:\n                continue\n            tax_group = self._find_tax_group(taxes)\n            if tax_group:\n                tax.tax_group_id = tax_group\n\n    # Check for taxes without a tax group\n    for tax in self:\n        if not tax.tax_group_id:\n            _check_company_domain(tax)\n            raise UserError(_('Please assign a tax group to the taxes with the same country and company as the following tax:\n", "CodeBleu_score": 28.277093202797417}, {"code": " def _compute_tax_group_id(self)\n\ttaxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n\n    for taxes in taxes_by_country_company.values():\n        taxes.sort(key=lambda tax: tax.sequence)\n        taxes.sort(key=lambda tax: tax.name)\n        for tax in taxes:\n            tax.tax_group_id = _find_tax_group(taxes)\n\n", "CodeBleu_score": 17.726250321551728}, {"code": " def _compute_tax_group_id(self)\n\ttax_groups_by_country_company = defaultdict(list)\n    for tax in self:\n        tax_groups_by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n    for (country_id, company_id), taxes in tax_groups_by_country_company.items():\n        taxes.sort(key=lambda tax: tax.sequence)\n        for tax in taxes:\n            tax.tax_group_id = tax._find_matching_tax_group(country_id, company_id)\n\n def _find_matching_tax_group(self, country_id, company_id):\n    \"\"\"This function searches for a tax group that matches the tax's country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    tax_groups = self.env['account.tax.group'].search([('company_id', '=', company_id), ('country_id', '=', country_id)])\n    if not tax_groups:\n        tax_groups = self.env['account.tax.group'].search([('company_id', '=', company_id), ('country_id', '=', False)])\n    return tax_groups and tax_groups[0] or False", "CodeBleu_score": 38.22281948858682}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tif not self.session:\n        raise Exception(\"Please login to the server first.\")\n    self.session.post(url, data={\"db\": db})\n    if not self.session.cookies.get(\"token\"):\n        raise Exception(\"Could not login to the server.\")\n    with open(module_file, \"rb\") as f:\n        module_data = f.read()\n    module_data = base64.b64encode(module_data).decode(\"utf-8\")\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n        \"module\": module_data,\n        \"force\": force\n    }\n    return self.session.post(\"{}/base_import_module/login_upload\".format(url), data=data).text", "CodeBleu_score": 43.58315759923962}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tif not self.session:\n        raise Exception('You must login first.')\n    if not self.session.cookies.get('session'):\n        raise Exception('You must login first.')\n    if not module_file:\n        raise Exception('You must specify a module file.')\n    if not os.path.exists(module_file):\n        raise Exception('The module file does not exist.')\n    if not url:\n        raise Exception('You must specify a server URL.')\n    if not login:\n        raise Exception('You must specify a login.')\n    if not password:\n        raise Exception('You must specify a password.')\n    if not db:\n        raise Exception('You must specify a database.')\n    login_url = url + '/login'\n    self.session.get(login_url)\n    if not self.session.cookies.get('session'):\n        raise Exception('Login failed.')\n    module_file = open(module_file, 'rb')\n    module_file_data = module_file.read()\n    module_file.close()\n    module_file_name = os.path.basename(module_file.name)\n    module_file_name = module_file_name.replace(' ', '_')\n    module_file_name = module_file_name.replace('(', '')\n    module_file_name = module_file_name.replace(')', '')\n    module_file_name = module_file_name.replace('\"', '')\n    module_file_name = module_file_name.replace(\"'\", '')\n    module_file_name = module_file_name.replace('\\\\', '')\n    module_file_name = module_file_name.replace('/', '')\n    module_file_name = module_file_name.replace(':', '')\n    module_file_name = module_file_name.replace('*', '')\n    module_file_name = module_file_name.replace('?', '')\n    module_file_name = module_file_name.replace('<', '')\n    module_file_name = module_file_name.replace('>', '')\n    module_file_name = module_file_name.replace", "CodeBleu_score": 34.910848245258755}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tif self.session is None:\n        raise Exception('You must first login to the server.')\n    if not os.path.exists(module_file):\n        raise Exception('The file does not exist.')\n    if not os.path.isfile(module_file):\n        raise Exception('The path is not a file.')\n    if not os.access(module_file, os.R_OK):\n        raise Exception('You do not have read access to the file.')\n    if not os.access(module_file, os.X_OK):\n        raise Exception('You do not have execute access to the file.')\n    if not os.access(module_file, os.W_OK):\n        raise Exception('You do not have write access to the file.')\n    if not os.access(module_file, os.R_OK):\n        raise Exception('You do not have read access to the file.')\n    if not os.access(module_file, os.W_OK):\n        raise Exception('You do not have write access to the file.')\n    if not os.access(module_file, os.X_OK):\n        raise Exception('You do not have execute access to the file.')\n    if not os.access(module_file, os.R_OK):\n        raise Exception('You do not have read access to the file.')\n    if not os.access(module_file, os.W_OK):\n        raise Exception('You do not have write access to the file.')\n    if not os.access(module_file, os.X_OK):\n        raise Exception('You do not have execute access to the file.')\n    if not os.access(module_file, os.R_OK):\n        raise Exception('You do not have read access to the file.')\n    if not os.access(module_file, os.W_OK):\n        raise Exception('You do not have write access to the file.')\n    if not os.access(module_file, os.X_OK):\n        raise Exception('You do not have execute access to the file.')\n    if not os.access(module_file, os.R_OK):\n        raise Exception('You do not have", "CodeBleu_score": 20.208547272971895}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t# Get configuration settings\n    db_name = config['database']['name']\n    overwrite = config['database']['overwrite']\n\n    # Create a new database registry\n    registry = Registry()\n\n    # Create a new cursor\n    cursor = registry.cursor()\n\n    # Initialize a TranslationImporter\n    importer = TranslationImporter(cursor)\n\n    # Load translation files and save translations\n    importer.load_file(\n        '../odoo/addons/base/data/lang/en_US.po',\n        'en_US',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/fr_FR.po',\n        'fr_FR',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/es_ES.po',\n        'es_ES',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/de_DE.po',\n        'de_DE',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/pt_BR.po',\n        'pt_BR',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/it_IT.po',\n        'it_IT',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/nl_NL.po',\n        'nl_NL',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/sv_SE.po',\n        'sv_SE',\n        overwrite=overwrite)\n    importer.load_file(\n        '../odoo/addons/base/data/lang/pl_PL.po',\n        'pl_PL',\n        overwrite=overwrite)\n    importer.load_file(\n        '", "CodeBleu_score": 17.421913873571988}, {"code": "def import_translation()\n\t# Retrieve the configuration settings\n    db_name = request.env['ir.config_parameter'].get_param('database.name')\n    overwrite = request.env['ir.config_parameter'].get_param('database.overwrite')\n\n    # Create a new registry for the database\n    registry = openerp.modules.registry.RegistryManager.get(db_name)\n\n    # Initialize a TranslationImporter\n    importer = registry.cursor.TranslationImporter()\n\n    # Load translation files and save the translations\n    importer.load_file(\n        'l10n_de_ui',\n        'l10n_de_ui.po',\n        overwrite=overwrite\n    )\n    importer.load_file(\n        'l10n_de_ui',\n        'l10n_de_ui.csv',\n        overwrite=overwrite\n    )\n    importer.load_file(\n        'l10n_de_ui',\n        'l10n_de_ui.xml',\n        overwrite=overwrite\n    )\n    importer.load_file(\n        'l10n_de_ui',\n        'l10n_de_ui.py',\n        overwrite=overwrite\n    )\n    importer.save()", "CodeBleu_score": 38.954217300569596}, {"code": "def import_translation()\n\t# Get the database name and whether to overwrite existing translations\n    db_name = get_config_value('database_name')\n    overwrite = get_config_value('overwrite')\n\n    # Create a new registry and cursor\n    registry = Registry()\n    cursor = registry.cursor()\n\n    # Create a new TranslationImporter\n    importer = TranslationImporter(cursor)\n\n    # Load translation files based on the specified configuration\n    importer.load_file(get_config_value('translation_file'))\n\n    # Save the translations, with the option to overwrite existing ones\n    importer.save(db_name, overwrite)", "CodeBleu_score": 27.077969302336463}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        self.children[name] = Node(name, info, self.depth + 1)\n        if hasattr(self, 'info'):\n            self.children[name].info = self.info\n        if hasattr(self, 'children'):\n            self.children[name].children = self.children\n        if hasattr(self, 'parent'):\n            self.children[name].parent = self\n        self.children[name].sort()\n        return self.children[name]\n\n", "CodeBleu_score": 28.33637865669892}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        self.children[name].update(info)\n        return self.children[name]\n    else:\n        new_node = Node(name, info, self.depth + 1)\n        for attr in self.attrs:\n            if hasattr(self, attr):\n                setattr(new_node, attr, getattr(self, attr))\n        self.children[name] = new_node\n        self.children = dict(sorted(self.children.items(), key=lambda x: x[0]))\n        return new_node\n\n", "CodeBleu_score": 34.96360309589724}, {"code": "def add_child(self, name, info)\n\tif name not in self.children:\n        new_child = Node(name, info, self.depth + 1)\n        self.children.append(new_child)\n        self.children.sort(key=lambda x: x.name)\n        return new_child\n    else:\n        return self.children[self.children.index(name)]\n\n", "CodeBleu_score": 37.600416265281524}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\tresult = {}\n    for date in dates:\n        result[date] = {\"balance\": 0.0}\n    for entry in gl_entries:\n        if entry.account == account:\n            if entry.posting_date in result:\n                if entry.is_opening == \"Yes\":\n                    result[entry.posting_date][\"balance\"] = entry.debit - entry.credit\n                else:\n                    result[entry.posting_date][\"balance\"] += entry.debit - entry.credit\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    if root_type not in (\"Asset\", \"Liability\", \"Equity\"):\n        for date in result:\n            result[date][\"balance\"] = -result[date][\"balance\"]\n    elif root_type == \"Asset\":\n        for date in result:\n            result[date][\"balance\"] = sum(\n                [result[d][\"balance\"] for d in result if d <= date]\n            )\n    return result\n\n", "CodeBleu_score": 32.58227623609129}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = {date: 0.0 for date in dates}\n    root_type = frappe.get_cached_value('Account', account, 'root_type')\n    if root_type == \"Asset\" or root_type == \"Liability\" or root_type == \"Equity\":\n        for entry in gl_entries:\n            if entry.account == account:\n                if entry.posting_date in dates:\n                    result[entry.posting_date] += entry.debit - entry.credit\n    else:\n        for entry in gl_entries:\n            if entry.account == account:\n                if entry.posting_date in dates:\n                    result[entry.posting_date] -= entry.debit - entry.credit\n    return result\n\n", "CodeBleu_score": 25.97480799583546}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = frappe._dict()\n    result.account = account\n    result.root_type = frappe.get_cached_value('Account', account, 'root_type')\n    result.balances = dict((d, 0.0) for d in dates)\n    for d in dates:\n        result.balances[d] = gl_entries.get(d, 0.0)\n    if result.root_type not in [\"Asset\", \"Liability\", \"Equity\"]:\n        for d in dates:\n            result.balances[d] = -result.balances[d]\n    else:\n        for d in dates:\n            result.balances[d] = sum(result.balances[max(dates[:d]) : d])\n    return result\n\n", "CodeBleu_score": 23.10939929221516}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.get_doc_before_save().account_type:\n            if self.get_all_gl_entries():\n                frappe.msgprint(_(\"Warning: Account type change for {0} {1} from {2} to {3} may cause issues in the \"\n                                  \"Accounts report. Please check the Accounts report to verify the account balance.\"\n                                  ).format(self.doctype, self.name, self.get_doc_before_save().account_type, self.account_type),\n                                title=_(\"Warning\"),\n                                indicator='orange',\n                                alert=True)\n                self.add_comment(subject=_(\"Account type change\"),\n                                 comment=_(\"Account type changed from {0} to {1}\").format(self.get_doc_before_save().account_type, self.account_type))\n\n", "CodeBleu_score": 26.81830372745551}, {"code": "def validate_receivable_payable_account_type(self)\n\t# if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n    #     if self.account_type != self.get_doc_before_save().account_type:\n    #         if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name):\n    #             frappe.msgprint(_(\"Warning: Changing the account type from {0} to {1} can cause issues in the Accounts report. Please check the Accounts report before changing the account type.\").format(self.get_doc_before_save().account_type, self.account_type), raise_exception=1)\n    #             self.add_comment(\"warning\", _(\"Changing the account type from {0} to {1} can cause issues in the Accounts report. Please check the Accounts report before changing the account type.\").format(self.get_doc_before_save().account_type, self.account_type))\n\n\n\n\n\n", "CodeBleu_score": 0.4032258064516129}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type == \"Receivable\" and self.account_type != self.account_type_before_save:\n        if self.has_gl_entries():\n            frappe.throw(_(\"Cannot change the account type from Receivable to a non-Receivable account type as there are existing general ledger entries for the account.\"))\n        else:\n            self.add_comment(\"Account Type Changed from Receivable to a non-Receivable account type.\")\n    elif self.account_type == \"Payable\" and self.account_type != self.account_type_before_save:\n        if self.has_gl_entries():\n            frappe.throw(_(\"Cannot change the account type from Payable to a non-Payable account type as there are existing general ledger entries for the account.\"))\n        else:\n            self.add_comment(\"Account Type Changed from Payable to a non-Payable account type.\")", "CodeBleu_score": 27.588008088449563}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\tif self.account_currency:\n        self.explicit_currency = 1\n    else:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['Tax', 'Chargeable']:\n        self.account_currency = self.company_currency\n\n    if self.account_type in ['T", "CodeBleu_score": 18.90787143949714}, {"code": "def validate_account_currency(self)\n\tif self.account_type in ['Tax', 'Central Account']:\n        return\n\n    if self.account_currency:\n        self.explicit_currency = 1\n    else:\n        self.account_currency = self.company_currency\n        self.explicit_currency = 0\n\n    if self.account_type in ['Tax', 'Central Account']:\n        return\n\n    if self.account_currency != self.company_currency:\n        if self.is_group:\n            if not self.account_currency:\n                frappe.throw(_(\"Please select a currency for {0}\").format(self.account_name))\n        else:\n            if not self.account_currency:\n                frappe.throw(_(\"Please select a currency for {0}\").format(self.account_name))\n\n    if self.is_group:\n        return\n\n    # check if there are existing transactions with different currency\n    if self.account_currency != self.company_currency:\n        if frappe.db.get_value(\"GL Entry\", {\"account\": self.name, \"company\": self.company, \"is_opening\": \"No\"}, \"name\"):\n            frappe.throw(_(\"Cannot change currency for account {0} as it has transactions with different currency\").format(self.account_name))\n", "CodeBleu_score": 30.124892119530465}, {"code": "def validate_account_currency(self)\n\tif not self.account_currency:\n        self.account_currency = self.company_currency\n        frappe.db.set_value(\"Account\", self.name, \"account_currency\", self.account_currency)\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        self.account_currency = self.company_currency\n        frappe.db.set_value(\"Account\", self.name, \"account_currency\", self.account_currency)\n\n    if self.account_currency != self.company_currency:\n        self.explicit_currency = 1\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if self.account_currency != self.company_currency:\n            frappe.throw(_(\"{0} account cannot have currency other than company's currency\").format(self.account_type))\n\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if self.account_currency != self.company_currency:\n            frappe.throw(_(\"{0} account cannot have currency other than company's currency\").format(self.account_type))\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if self.account_currency != self.company_currency:\n            frappe.throw(_(\"{0} account cannot have currency other than company's currency\").format(self.account_type))\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if self.account_currency != self.company_currency:\n            frappe.throw(_(\"{0} account cannot have currency other than company's currency\").format(self.account_type))\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if self.account_currency != self.company_currency:\n            frappe.throw(_(\"{0} account cannot have currency other than company's currency\").format(self.account_type))\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if self.account_currency != self.company_currency:\n            frappe.throw(_(\"{0} account cannot have currency other than company'", "CodeBleu_score": 27.153680168412723}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {\n            \"account\": key_values[\"account\"],\n            \"account_currency\": key_values[\"account_currency\"],\n            \"cost_center\": key_values[\"cost_center\"],\n            \"project\": key_values[\"project\"],\n            \"finance_book\": key_values[\"finance_book\"],\n            \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n            \"debit\": 0.0,\n            \"credit\": 0.0,\n            \"debit_in_account_currency\": 0.0,\n            \"credit_in_account_currency\": 0.0,\n            \"account_last_balance\": 0.0,\n            \"account_last_balance_in_account_currency\": 0.0,\n            \"dimensions\": key_values,\n            \"vouchers\": []\n        })\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n        merged_entries[key][\"vouchers\"].append(entry)\n\n    return merged_entries\n\n", "CodeBleu_score": 41.7414929884773}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t# Initialize the dictionary\n    merged_entries = {}\n\n    # Iterate through each entry to generate a unique key and corresponding values\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, key_values)\n\n        # Update the debit, credit, and their respective amounts in account currency\n        merged_entries[key][\"debit\"] = flt(merged_entries[key][\"debit\"]) + flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] = flt(merged_entries[key][\"credit\"]) + flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] = flt(merged_entries[key][\"debit_in_account_currency\"]) + flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] = flt(merged_entries[key][\"credit_in_account_currency\"]) + flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 46.79082991320938}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = key_values\n            merged_entries[key][\"debit\"] = 0\n            merged_entries[key][\"credit\"] = 0\n            merged_entries[key][\"debit_in_account_currency\"] = 0\n            merged_entries[key][\"credit_in_account_currency\"] = 0\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 46.671214267628045}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype == \"Payment Entry\":\n        supplier_doc = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier_doc.blocked:\n            if supplier_doc.blocked_by == \"Supplier\":\n                if supplier_doc.blocked_by_transaction_type == \"Payment Entry\":\n                    if supplier_doc.blocked_by_transaction_type_value == self.name:\n                        if supplier_doc.blocked_until > nowdate():\n                            frappe.throw(\n                                \"Supplier {0} is on hold. Please contact the administrator\".format(\n                                    self.supplier\n                                )\n                            )\n\n    elif self.doctype == \"Purchase Invoice\":\n        supplier_doc = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier_doc.blocked:\n            if supplier_doc.blocked_by == \"Supplier\":\n                if supplier_doc.blocked_by_transaction_type == \"Purchase Invoice\":\n                    if supplier_doc.blocked_by_transaction_type_value == self.name:\n                        if supplier_doc.blocked_until > nowdate():\n                            frappe.throw(\n                                \"Supplier {0} is on hold. Please contact the administrator\".format(\n                                    self.supplier\n                                )\n                            )", "CodeBleu_score": 24.021410296080365}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype == \"Payment Entry\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n    else:\n        return\n\n    if supplier.blocked and supplier.blocked_type == self.doctype:\n        if supplier.blocked_until and supplier.blocked_until > nowdate():\n            frappe.throw(_(\"Cannot proceed with this transaction. Supplier {0} is on hold until {1}\").format(supplier.supplier_name, supplier.blocked_until))\n        else:\n            frappe.throw(_(\"Cannot proceed with this transaction. Supplier {0} is on hold\").format(supplier.supplier_name))\n\n", "CodeBleu_score": 30.977053087585045}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype == \"Supplier Payment\":\n        supplier_doc = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier_doc.hold_type == \"Supplier Payment\" and supplier_doc.hold_date > nowdate():\n            frappe.throw(_(\"Supplier {0} is on hold until {1}\").format(self.supplier, formatdate(supplier_doc.hold_date)))\n    elif self.doctype == \"Purchase Invoice\":\n        supplier_doc = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier_doc.hold_type == \"Purchase Invoice\" and supplier_doc.hold_date > nowdate():\n            frappe.throw(_(\"Supplier {0} is on hold until {1}\").format(self.supplier, formatdate(supplier_doc.hold_date)))", "CodeBleu_score": 28.031612035082983}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = [\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"GL Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase In", "CodeBleu_score": 4.024145433848473}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = [\n        \"GL Entry\",\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Payment Request\",\n        \"Payment Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Purchase Invoice", "CodeBleu_score": 3.984376373681785}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = [\n        \"GL Entry\",\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Bank Entry\",\n        \"Payment Request\",\n        \"Payment Entry Reference\",\n        \"Payment Reconciliation\",\n    ]\n\n    if not self.doctype in repost_doctypes:\n        return\n\n    references_map = frappe._dict()\n\n    for repost_doctype in repost_doctypes:\n        repost_doctype_doc = frappe.get_doc(\"DocType\", repost_doctype)\n        if repost_doctype_doc.get(\"issingle\"):\n            continue\n\n        repost_doctype_references = [\n            d.fieldname\n            for d in repost_doctype_doc.get(\"fields\")\n            if d.fieldtype == \"Link\" and d.options == self.doctype\n        ]\n\n        if not repost_doctype_references:\n            continue\n\n        for repost_doctype_reference in repost_doctype_references:\n            repost_vouchers = frappe.db.sql(\n                \"\"\"\n                SELECT parent, parenttype, parentfield\n                FROM `tab{0}`\n                WHERE voucher_type=%s AND voucher_no=%s\n                \"\"\".format(\n                    repost_doctype\n                ),\n                (self.doctype, self.name),\n                as_dict=True,\n            )\n\n            if not repost_vouchers:\n                continue\n\n            for repost_voucher in repost_vouchers:\n                references_map.setdefault(repost_voucher.parenttype, frappe._dict()).setdefault(\n                    repost_voucher.parent, []\n                ).append(repost_voucher.parentfield)\n\n    for parenttype, parent_map in references_map.items():\n        for parent, parentfields in parent_map.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            for parentfield in parentfields", "CodeBleu_score": 26.401532399655853}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\tself.auth()\n    transactions = []\n    while True:\n        try:\n            if account_id:\n                response = self.client.Transactions.get(\n                    start_date=start_date,\n                    end_date=end_date,\n                    account_ids=[account_id],\n                    options={\"count\": 200},\n                )\n            else:\n                response = self.client.Transactions.get(\n                    start_date=start_date,\n                    end_date=end_date,\n                    options={\"count\": 200},\n                )\n            transactions.extend(response.transactions)\n            if len(response.transactions) < 200:\n                break\n            else:\n                start_date = response.transactions[-1].date\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n            elif e.code == \"INVALID_DATE_RANGE\":\n                break\n            elif e.code == \"INVALID_OPTION\":\n                break\n            elif e.code == \"INVALID_ACCOUNT_ID\":\n                break\n            else:\n                frappe.log_error(\n                    \"Plaid: Error in transactions query. Error code: {0}\".format(e.code)\n                )\n                frappe.throw(\n                    _(\n                        \"Plaid: Error in transactions query. Error code: {0}\".format(\n                            e.code\n                        )\n                    )\n                )\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n            elif e.code == \"INVALID_DATE_RANGE\":\n                break\n            elif e.code == \"INVALID_OPTION\":\n                break\n            elif e.code == \"INVALID_ACCOUNT_ID\":\n                break\n            else:\n                frappe.log_error(\n                    \"Plaid: Error in transactions query. Error code: {0}\".format(e.code)\n                )\n                frappe.throw(\n                    _(\n                        \"", "CodeBleu_score": 32.034818304940025}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\tself.auth()\n    transactions = []\n    while True:\n        try:\n            if account_id:\n                transactions.extend(self.client.Transactions.get(\n                    start_date=start_date,\n                    end_date=end_date,\n                    account_ids=[account_id],\n                    options={\"count\": 200}\n                ))\n            else:\n                transactions.extend(self.client.Transactions.get(\n                    start_date=start_date,\n                    end_date=end_date,\n                    options={\"count\": 200}\n                ))\n            if len(transactions) >= 200:\n                break\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transactions error\")\n            frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n    return transactions\n\n", "CodeBleu_score": 34.528233355549}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttransactions = []\n    self.auth()\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"count\": 200\n        }\n    }\n    if account_id:\n        params[\"account_ids\"] = account_id\n\n    while True:\n        try:\n            response = self.client.Transactions.get(**params)\n            transactions.extend(response[\"transactions\"])\n            if response[\"total_transactions\"] <= len(transactions):\n                break\n            params[\"start_date\"] = response[\"transactions\"][-1][\"date\"]\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction fetching error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Fetching Failed\"))\n\n    return transactions\n\n", "CodeBleu_score": 39.37932831488183}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\ttry:\n        institution = response[\"institution\"]\n        name = institution[\"name\"]\n        id = institution[\"institution_id\"]\n        access_token = get_access_token(token, response)\n        bank = frappe.get_doc(\"Bank\", name)\n        if bank.institution_id == id:\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = id\n            bank.name = name\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 39.27419921286872}, {"code": "def add_institution(token, response)\n\tbank_name = response[\"institution\"][\"name\"]\n    bank_id = response[\"institution\"][\"institution_id\"]\n    bank_type = response[\"institution\"][\"primary_color\"]\n    bank_logo = response[\"institution\"][\"primary_logo\"]\n    bank_url = response[\"institution\"][\"url\"]\n    bank_response = {\"name\": bank_name, \"bank_id\": bank_id, \"bank_type\": bank_type, \"bank_logo\": bank_logo, \"bank_url\": bank_url}\n    try:\n        bank = frappe.get_doc(\"Bank\", bank_name)\n        bank.access_token = token\n        bank.save()\n        frappe.log_error(\"Plaid: Updated access token for {0}\".format(bank_name))\n    except frappe.DoesNotExistError:\n        try:\n            bank = frappe.get_doc({\"doctype\": \"Bank\", \"name\": bank_name, \"bank_id\": bank_id, \"bank_type\": bank_type, \"bank_logo\": bank_logo, \"bank_url\": bank_url, \"access_token\": token})\n            bank.insert()\n            frappe.log_error(\"Plaid: Created new bank {0}\".format(bank_name))\n        except frappe.DuplicateEntryError:\n            frappe.log_error(\"Plaid: Bank {0} already exists\".format(bank_name))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Could not add bank {0} to database: {1}\".format(bank_name, e))\n\n", "CodeBleu_score": 33.8248341118992}, {"code": "def add_institution(token, response)\n\ttry:\n        institution_id = response[\"institution_id\"]\n        institution_name = response[\"institution_name\"]\n        access_token = PlaidConnector().get_access_token(token)\n        if frappe.db.exists(\"Bank\", institution_id):\n            bank = frappe.get_doc(\"Bank\", institution_id)\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = institution_id\n            bank.institution_name = institution_name\n            bank.access_token = access_token\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 40.453694557845026}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\tlast_integration_date = frappe.db.get_value(\n        \"Bank\", bank, \"last_integration_date\"\n    )\n\n    if not last_integration_date:\n        last_integration_date = add_months(today(), -1)\n\n    transactions = get_transactions(bank, bank_account, last_integration_date)\n\n    if not transactions:\n        return\n\n    oldest_transaction_date = min(\n        [getdate(transaction[\"date\"]) for transaction in transactions]\n    )\n\n    if oldest_transaction_date < last_integration_date:\n        last_integration_date = oldest_transaction_date\n\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    if new_transactions:\n        frappe.db.set_value(\n            \"Bank\", bank, \"last_integration_date\", last_integration_date\n        )\n\n    frappe.msgprint(\n        _(\"Successfully synced {} new transactions\").format(len(new_transactions))\n    )\n\n", "CodeBleu_score": 35.10062707741442}, {"code": "def sync_transactions(bank, bank_account)\n\tlast_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n    if not last_integration_date:\n        last_integration_date = get_first_day(get_today())\n\n    transactions = get_transactions(bank, bank_account, start_date=last_integration_date)\n    if transactions:\n        oldest_transaction = min(transactions, key=lambda x: x[\"date\"])\n        oldest_transaction_date = getdate(oldest_transaction[\"date\"])\n        if oldest_transaction_date < last_integration_date:\n            last_integration_date = oldest_transaction_date\n\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if new_transactions:\n            frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", last_integration_date)\n            frappe.db.commit()\n\n            msg = _(\"Added {} new transactions.\").format(len(new_transactions))\n            msg += _(\" Last integration date updated to {}.\").format(last_integration_date)\n            frappe.msgprint(msg)\n\n", "CodeBleu_score": 39.06119662166297}, {"code": "def sync_transactions(bank, bank_account)\n\t# Get last integration date\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n\n    # Get transactions\n    transactions = get_transactions(bank, bank_account, last_integration_date)\n\n    # Process transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update last integration date\n    if new_transactions:\n        last_integration_date = max(\n            [getdate(transaction.date) for transaction in new_transactions]\n        )\n        frappe.db.set_value(\n            \"Bank Account\", bank_account, \"last_integration_date\", last_integration_date\n        )\n\n    # Log number of new transactions added\n    msg = _(\"Synced {0} new transactions for Bank {1} and Bank Account {2}\").format(\n        len(new_transactions), bank, bank_account\n    )\n    frappe.log_error(message=msg, title=_(\"New Transactions Added\"))\n\n", "CodeBleu_score": 34.844721038453784}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t# construct the query URI\n    query_uri = self._get_query_uri(entity)\n    # get the total number of entries\n    response = self._get(query_uri, params={\"count\": \"0\"})\n    total = int(response.headers[\"X-Total-Count\"])\n    # retrieve the entries in batches of 1000\n    for offset in range(0, total, 1000):\n        response = self._get(query_uri, params={\"minorversion\": \"45\", \"startPosition\": offset, \"maxResults\": 1000})\n        # preprocess and save the entries\n        entries = response.json()[\"QueryResponse\"][entity]\n        self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 24.063043249564746}, {"code": "def _migrate_entries(self, entity)\n\tself._publish({\"event\": \"progress\", \"message\": _(\"Fetching {0}\").format(entity)})\n    response = self._get(\n        self.api_url,\n        params={\n            \"query\": f\"SELECT * FROM {entity} STARTPOSITION 1 MAXRESULTS 1\",\n            \"minorversion\": self.minorversion,\n        },\n    )\n    total = int(response.headers[\"X-Total-Count\"])\n    for index, start in enumerate(range(1, total + 1, 1000), start=1):\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Fetching {0}\").format(entity),\n                \"count\": index,\n                \"total\": total,\n            }\n        )\n        response = self._get(\n            self.api_url,\n            params={\n                \"query\": f\"SELECT * FROM {entity} STARTPOSITION {start} MAXRESULTS 1000\",\n                \"minorversion\": self.minorversion,\n            },\n        )\n        entries = response.json()\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 33.07519303764143}, {"code": "def _migrate_entries(self, entity)\n\tself._publish({\"event\": \"progress\", \"message\": _(\"Retrieving {0}\").format(entity)})\n    # Construct the URI\n    uri = self._get_uri(entity)\n    # Determine the total number of entries\n    response = self._get(uri, params={\"minorversion\": 4, \"count\": 1})\n    total = response.json()[\"total\"]\n    # Retrieve entries in batches of 1000\n    for offset in range(0, total, 1000):\n        response = self._get(uri, params={\"minorversion\": 4, \"count\": 1000, \"offset\": offset})\n        entries = response.json()[\"QueryResponse\"][entity]\n        self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n    self._publish({\"event\": \"progress\", \"message\": _(\"Finished {0}\").format(entity)})\n\n", "CodeBleu_score": 33.60824177388753}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\ttry:\n        if not frappe.db.exists(\n            {\"doctype\": \"QuickBooks Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            quickbooks_id = self._generate_quickbooks_id(invoice[\"Id\"], \"Invoice\")\n            if invoice[\"LinkedTxn\"]:\n                for linked_txn in invoice[\"LinkedTxn\"]:\n                    if linked_txn[\"TxnType\"] == \"StatementCharge\" or linked_txn[\"TxnType\"] == \"ReimburseCharge\":\n                        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                        break\n            else:\n                self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])", "CodeBleu_score": 42.52285398666707}, {"code": "def _save_invoice(self, invoice)\n\t# Check if the invoice is already saved\n    if not frappe.db.exists(\n        {\"doctype\": \"Quickbooks Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n    ):\n        quickbooks_id = self._get_quickbooks_id(invoice)\n\n        if invoice[\"DocType\"] == \"Invoice\":\n            self._save_sales_invoice(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"CreditMemo\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"DocType\"] == \"Estimate\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"DocType\"] == \"Bill\":\n            self._save_sales_invoice(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"PurchaseOrder\":\n            self._save_purchase_invoice(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"Payment\":\n            self._save_payment(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"RefundReceipt\":\n            self._save_refund_receipt(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"Deposit\":\n            self._save_deposit(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"CreditCardCharge\":\n            self._save_credit_card_charge(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"CreditCardCredit\":\n            self._save_credit_card_credit(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"StatementCharge\":\n            self._save_statement_charge(invoice, quickbooks_id)\n        elif invoice[\"DocType\"] == \"ReimburseCharge\":\n            self._save_reimburse_charge(invoice, quickbooks_id)", "CodeBleu_score": 31.533765237001383}, {"code": "def _save_invoice(self, invoice)\n\ttry:\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        if not quickbooks_id:\n            self._save_invoice_as_journal_entry(invoice)\n        else:\n            if self._get_linked_transactions(invoice, quickbooks_id):\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n            else:\n                self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])", "CodeBleu_score": 36.239987949508254}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# Create a list of dates between start and end dates\n    schedule_list = []\n    if not self.validate_schedule_date_for_holiday_list(start_date, sales_person):\n        return []\n\n    # Add the first visit date to the schedule list\n    schedule_list.append(start_date)\n\n    # Iterate to add the rest of the dates\n    for _i in range(no_of_visit - 1):\n        schedule_list.append(add_days(schedule_list[-1], self.interval))\n\n        if not self.validate_schedule_date_for_holiday_list(schedule_list[-1], sales_person):\n            schedule_list[-1] = add_days(schedule_list[-1], -1)\n\n    # Remove the last date if it is the same as the first date\n    if schedule_list[0] == schedule_list[-1]:\n        schedule_list.pop()\n\n    # Adjust the schedule dates to avoid holidays\n    for _i in range(len(schedule_list)):\n        schedule_list[_i] = self.validate_schedule_date_for_holiday_list(schedule_list[_i], sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 32.22451427011379}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tschedule_list = []\n    interval = 1\n    if no_of_visit > 1:\n        interval = int(no_of_visit / 2)\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n\n", "CodeBleu_score": 29.434743347674917}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tschedule_list = []\n    if start_date and end_date and no_of_visit:\n        if end_date < start_date:\n            frappe.throw(_(\"End date cannot be before start date\"))\n        elif no_of_visit < 1:\n            frappe.throw(_(\"Number of visits cannot be less than 1\"))\n        else:\n            interval = int((end_date - start_date) / no_of_visit)\n            for i in range(no_of_visit):\n                schedule_date = start_date + interval * i\n                schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n                schedule_list.append(schedule_date)\n    return schedule_list\n\n\n", "CodeBleu_score": 33.96173963220065}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    $deleted = 0;\n    $errors = [];\n\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n            $deleted++;\n        } catch (Exception $e) {\n            $errors[] = $e->getMessage();\n        }\n    }\n\n    if ($deleted > 0) {\n        flash(trans('contacts.deleted', ['count' => $deleted]))->success();\n    }\n\n    if (count($errors) > 0) {\n        flash(trans('contacts.error_deleting', ['count' => count($errors), 'contacts' => implode(', ', $errors)]));\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 48.54573939328291}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.39138004594056}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'contacts');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 76.07605441957847}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $transaction->delete();\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n\n            return redirect()->back();\n        }\n    }\n\n    flash('Transactions Deleted')->success();\n\n    return redirect()->back();\n}", "CodeBleu_score": 62.09521526156503}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    $deleted = 0;\n    foreach ($transactions as $transaction) {\n        try {\n            $transaction->delete();\n            $deleted++;\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n\n    flash('Deleted ' . $deleted . ' of ' . $transactions->count() . ' transactions.')->success();\n}", "CodeBleu_score": 59.198023694584066}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request, $this->model->transactions());\n\n    $this->dispatch(new DeleteTransactions($transactions));\n\n    flash('Selected transactions have been deleted.')->success();\n\n    return redirect()->back();\n}", "CodeBleu_score": 43.94564493048918}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t$request = $this->createFromBase($this->request);\n    $rules = $this->getRules();\n    $rules = $this->prepareRules($rules);\n    $validator->setRules($rules);\n    $validator->setData($request->all());\n    if ($this->container && $this->container->bound('Illuminate\\Contracts\\Validation\\Validator')) {\n        $validator->setPresenceVerifier($this->container->make('Illuminate\\Contracts\\Validation\\Validator'));\n    }\n    $validator->setRedirect($this->redirector);\n    $validator->setSession($this->getSession());\n    $validator->setImplicitAttributes($this->getImplicitAttributes());\n    $validator->setRedirector($this->getRedirector());\n    $validator->setFactory($this->getFactory());\n    $validator->addExtensions($this->customAttributes);\n    $validator->after(function ($validator) use ($request) {\n        if ($validator->fails()) {\n            $this->validator = $validator;\n            $this->failedValidation();\n        }\n    });\n    $validator->validate();\n    $this->validator = $validator;\n    return $this;\n}", "CodeBleu_score": 32.75637828340483}, {"code": "<?\npublic function withValidator($validator){\n\tif (!$validator instanceof Validator) {\n        return $validator;\n    }\n\n    $validator->setData($this->validationData());\n    $validator->addRules($this->getValidatorInstance()->getRules());\n    $validator->addCustomAttributes($this->getValidatorInstance()->getCustomAttributes());\n    $validator->addFilters($this->getValidatorInstance()->getFilters());\n\n    if ($this->container && $this->container->bound(FormRequest::class)) {\n        $this->getContainer()->call([$this, 'prepareForValidation'], [\n            'validator' => $validator,\n        ]);\n    }\n\n    try {\n        $validator->validate();\n    } catch (ValidationException $e) {\n        $e->validator = $this->getValidatorInstance();\n\n        $this->validationException($validator, $e);\n    }\n\n    return $validator;\n}", "CodeBleu_score": 31.132732102582466}, {"code": "<?\npublic function withValidator($validator){\n\tif ($this->container && $this->container->bound(FormRequest::class)) {\n        $formRequest = $this->container->make(FormRequest::class);\n        if ($formRequest instanceof FormRequest) {\n            $data = $this->validationData();\n            $rules = $this->getRules();\n            $rules = $this->prepareRules($rules);\n            $messages = $this->messages();\n            $attributes = $this->attributes();\n            $customAttributes = $this->customAttributes();\n            $validator->setContainer($this->container)->setRedirector($this->redirector)->setData($data)->setRules($rules)->setMessages($messages)->setAttributeNames($attributes)->addCustomAttributes($customAttributes);\n            $this->validator = $validator;\n            if ($this->container->bound(ValidatorFactory::class)) {\n                $validator->setValidatorFactory($this->container->make(ValidatorFactory::class));\n            }\n            if ($formRequest->authorize()) {\n                $this->authorizeWithArgument($formRequest, $data);\n            }\n            $this->validateResolved();\n            $this->runValidator();\n            $this->runResponsePipes();\n            $this->addInput($validator);\n            return $this;\n        }\n    }\n    return $this;\n}", "CodeBleu_score": 39.6998357202984}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (!$this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $this->setModel($this->getModelFromArguments($arguments));\n\n    $this->setRequest($this->getRequestFromArguments($arguments));\n}", "CodeBleu_score": 26.329975550527873}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        if ($arguments[0] instanceof Model) {\n            $this->model = $arguments[0];\n        }\n\n        if ($arguments[1] instanceof Request) {\n            $this->request = $arguments[1];\n        }\n\n        $this->update();\n    }\n}", "CodeBleu_score": 59.899167877841656}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        $this->setModel($this->getModelInstance(...$arguments));\n        $this->setRequest($this->getRequestInstance(...$arguments));\n    }\n}", "CodeBleu_score": 21.474235397532055}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$query->usingSearchString()->sortable($sort);\n    $request = request();\n    if ($request->expectsJson() && !$request->isNotApi()) {\n        return $query->get();\n    }\n    $limit = $request->get('limit', $this->getPerPage());\n    return $query->paginate($limit);\n}", "CodeBleu_score": 50.99428473754375}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\treturn $query->usingSearchString()->sortable($sort)->paginate(request()->get('limit', config('settings.pagination_size')));\n    }", "CodeBleu_score": 20.42032516109845}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$query->usingSearchString()\n        ->sortable($sort)\n        ->when($this->request->expectsJson() && !$this->request->isNotApi(), function ($query) {\n            return $query->get();\n        })\n        ->when($this->request->expectsJson() && $this->request->isNotApi(), function ($query) {\n            return $query->paginate($this->request->get('limit', 10));\n        });\n}", "CodeBleu_score": 33.34521788856295}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = 0;\n    $overdue = 0;\n    $paid = 0;\n    $partial = 0;\n    $total = 0;\n    $due_date = $model->due_date;\n    $status = $model->status;\n    $amount = $model->getAmountConvertedToDefault();\n    $total = $amount;\n    if ($status == 'paid') {\n        $open = 0;\n        $overdue = 0;\n        $paid = $amount;\n        $partial = 0;\n        return [$open, $overdue, $paid, $partial, $total];\n    }\n    $transactions = $model->transactions()->get();\n    foreach ($transactions as $transaction) {\n        $amount = $transaction->getAmountConvertedToDefault();\n        if ($transaction->status == 'paid') {\n            $paid += $amount;\n        }\n        if ($transaction->status == 'partial') {\n            $partial += $amount;\n        }\n    }\n    $total = $amount - $paid - $partial;\n    if ($status == 'partial' && $total > 0) {\n        $open = $total;\n        $overdue = 0;\n    }\n    if ($status == 'open' && $total > 0) {\n        $open = $total;\n        $overdue = 0;\n    }\n    if ($status == 'overdue' && $total > 0) {\n        $open = 0;\n        $overdue = $total;\n    }\n    if ($status == 'draft' && $total > 0) {\n        $open = $total;\n        $overdue = 0;\n    }\n    if ($status == 'cancelled' && $total > 0) {\n        $open = 0;\n        $overdue = 0;\n    }\n    if ($status == 'refunded' && $total > 0) {\n        $open = 0;\n        $overdue = 0;\n    }\n    if ($status == 'voided' && $total > 0) {\n        $open", "CodeBleu_score": 34.55478815264416}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n    $transactions = $model->transactions()->where('transaction_type', 'payment')->get();\n    foreach ($transactions as $transaction) {\n        $openAmount += $transaction->getAmountConvertedToDefault();\n        $overdueAmount += $transaction->getAmountConvertedToDefault();\n    }\n    if ($model->status == 'partial') {\n        $openAmount = $model->getAmountConvertedToDefault() - $openAmount;\n        $overdueAmount = $model->getAmountConvertedToDefault() - $overdueAmount;\n    }\n    $now = Carbon::now()->toDateString();\n    if ($model->due_date < $now) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 53.99106975114879}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = 0;\n    $overdue = 0;\n    $paid = false;\n\n    if ($model->status == 'paid') {\n        return [$open, $overdue];\n    }\n\n    $open = $model->total;\n    $overdue = 0;\n\n    foreach ($model->transactions as $transaction) {\n        if ($transaction->type == 'payment') {\n            $open -= $transaction->amount;\n        }\n    }\n\n    if ($model->due_date < Date::today()->toDateString()) {\n        $overdue = $open;\n        $open = 0;\n    }\n\n    return [$open, $overdue];\n}", "CodeBleu_score": 47.323526408203996}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 77.33784119153907}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 77.33784119153907}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 77.33784119153907}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\n    foreach ($reconciliations as $reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n\n            $reconciliation->transactions()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->update(['status' => Transaction::STATUS_RECONCILED]);\n        });\n    }\n}", "CodeBleu_score": 48.74371626858029}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($item) {\n                    $item->reconciliation_id = $item->reconciliation_id ?: $this->getReconciliationId();\n                    $item->save();\n                });\n        }\n    });\n\n    return $reconciliations;\n}", "CodeBleu_score": 61.00837353984863}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                        ->isNotReconciled()\n                        ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                        ->each(function ($item) {\n                            $item->status = Transaction::STATUS_RECONCILED;\n                            $item->save();\n                        });\n        }\n    });\n}", "CodeBleu_score": 61.77358375202753}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->dispatch(new SendInvitationNotification($this->user, $this->invitation));\n    return $this->invitation;\n}", "CodeBleu_score": 7.789065176156969}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->dispatch($this->createInvitation());\n    return $this->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()\n        ->createInvitation()\n        ->dispatch($this->createInvitation())\n        ->deleteExistingInvitations()", "CodeBleu_score": 11.498434817000314}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->dispatch(new SendUserInvitationNotification($this->invitation));\n\n    return $this->invitation;\n}", "CodeBleu_score": 8.213111405157296}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled()) {\n        throw new Exception(\n            'This transaction has already been reconciled. You cannot authorize it again.',\n            400\n        );\n    }\n\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException(\n            'You cannot authorize a transfer transaction.',\n            400\n        );\n    }\n}", "CodeBleu_score": 30.74613371159692}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled()) {\n        throw new \\Exception('Transaction has been reconciled.');\n    }\n    if ($this->model->isTransferTransaction()) {\n        throw new \\Exception('Transaction is a transfer transaction.');\n    }\n}", "CodeBleu_score": 42.36475936193353}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled) {\n        throw new Exception(\n            'This transaction has been reconciled. You cannot authorize it.'\n        );\n    }\n    if ($this->model->isTransferTransaction) {\n        throw new UnauthorizedException(\n            'This transaction is a transfer transaction. You cannot authorize it.'\n        );\n    }\n}", "CodeBleu_score": 26.15846954712727}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"User\")) {\n        return true;\n    }\n    if (tableName.equals(\"User_Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role_Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role_Tenant_User\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role_Tenant_User_Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role_Tenant_User_Tenant_Role\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role_Tenant_User_Tenant_Role_Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role_Tenant_User_Tenant_Role_Tenant_User\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role_User_Tenant_User_Tenant_Role_T", "CodeBleu_score": 16.56476896052362}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"User\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role\")) {\n        return true;\n    }\n    if (tableName.equals(\"RoleMapping\")) {\n        return true;\n    }\n    if (tableName.equals(\"ACL\")) {\n        return true;\n    }\n    if (tableName.equals(\"Authentication\")) {\n        return true;\n    }\n    if (tableName.equals(\"Identity\")) {\n        return true;\n    }\n    if (tableName.equals(\"Group\")) {\n        return true;\n    }\n    if (tableName.equals(\"GroupMember\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUser\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantGroup\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantGroupMember\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantGroupRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantRoleMapping\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserGroup\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserGroupMember\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserGroupRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserRoleMapping\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserRolePermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantRolePermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantRolePermissionMapping\")) {\n        return true;\n    }\n    if (table", "CodeBleu_score": 16.08351716490849}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"User\")) {\n        return true;\n    }\n    if (tableName.equals(\"Role\")) {\n        return true;\n    }\n    if (tableName.equals(\"Permission\")) {\n        return true;\n    }\n    if (tableName.equals(\"UserRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"RolePermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUser\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantRolePermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantRoleTenantPermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRolePermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRoleTenantPermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRoleTenantPermissionTenantRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRoleTenantPermissionTenantRolePermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRoleTenantPermissionTenantRoleTenantPermission\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRoleTenantPermissionTenantRoleTenantPermissionTenantRole\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantUserTenantRoleTenantPermissionTenantRoleTenantPermissionTenantRolePermission\")) {\n        return true;\n    }", "CodeBleu_score": 15.843089552001107}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    Properties properties = new Properties();\n    properties.setProperty(\"notEmpty\", \"false\");\n    properties.setProperty(\"IDENTITY\", \"MYSQL\");\n    properties.setProperty(\"IDENTITY_INSERT\", \"false\");\n    properties.setProperty(\"ORDER_BY\", \"true\");\n    properties.setProperty(\"ORDER_HINT\", \"true\");\n    properties.setProperty(\"NOT_NULL\", \"false\");\n    properties.setProperty(\"NOT_EMPTY\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_TABLE\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_NOT_NULL\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_NOT_EMPTY\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_CHECK_LENGTH\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_CHECK_UNIQUE\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_CHECK_NUMBER\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_CHECK_DATETIME\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_CHECK_DATETIME_FORMAT\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_CHECK_DATETIME_RANGE\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD_CHECK_DATETIME_RANGE_FORMAT\", \"false\");\n    properties.setProperty(\"DB_STRICT_MODE_FIELD", "CodeBleu_score": 48.79146532543448}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Get the current system configuration information.\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getCurrentInfo();\n\t\t\n\t\t// Set the response data.\n\t\tresponse.setResponseCode(HttpServletResponse.SC_OK);\n\t\tresponse.setResponseMsg(systemConfigList.get(0).toString());\n\t\t\n\t} catch (Exception e) {\n\t\t// Log the exception.\n\t\te.printStackTrace();\n\t\t\n\t\t// Set the response data.\n\t\tresponse.setResponseCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n\t\tresponse.setResponseMsg(\"Exception: \" + e.getMessage());\n\t}\n\t\n\t// Return the response object.\n\treturn response;\n}", "CodeBleu_score": 35.11279113422095}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = getSystemConfig();\n        if (list != null && list.size() > 0) {\n            response.setStatusCode(200);\n            response.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(\"Exception: \", e);\n        response.setStatusCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 37.996175724338755}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Get the current system configuration list.\n\t\tList<SystemConfig> systemConfigList = getSystemConfig();\n\t\t// Set the response code to 200.\n\t\tresponse.setResponseCode(ResponseCode.OK);\n\t\t// Set the response data to the first item in the list.\n\t\tresponse.setResponseData(systemConfigList.get(0));\n\t} catch (Exception e) {\n\t\t// Log the error.\n\t\te.printStackTrace();\n\t\t// Set the response code to 500.\n\t\tresponse.setResponseCode(ResponseCode.INTERNAL_SERVER_ERROR);\n\t\t// Set the response data to an error message.\n\t\tresponse.setResponseData(\"There was an error retrieving the system configuration information.\");\n\t}\n\t// Return the response.\n\treturn response;\n}", "CodeBleu_score": 31.12306570928104}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        // \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n        String uploadType = getParameter(request, \"uploadType\");\n        // \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n        String uploadPath = getParameter(request, \"uploadPath\");\n        // \u83b7\u53d6\u6587\u4ef6\u540d\n        String fileName = getParameter(request, \"fileName\");\n        // \u83b7\u53d6\u6587\u4ef6\u5927\u5c0f\n        String fileSize = getParameter(request, \"fileSize\");\n        // \u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\n        String fileType = getParameter(request, \"fileType\");\n        // \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d\n        String fileExt = getParameter(request, \"fileExt\");\n        // \u83b7\u53d6\u6587\u4ef6\n        MultipartFile file = getFile(request);\n        // \u6587\u4ef6\u662f\u5426\u4e3a\u7a7a\n        if (isNotEmpty(file)) {\n            // \u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n            if (StringUtils.isNotBlank(uploadType)) {\n                // \u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u4e3a\u672c\u5730\n                if (\"local\".equals(uploadType)) {\n                    // \u4e0a\u4f20\u672c\u5730\n                    String filePath = uploadLocal(uploadPath, fileName, fileSize, fileType, fileExt, file);\n                    // \u8bbe\u7f6e\u54cd\u5e94\u6570\u636e\n                    baseResponseInfo.setCode(200);\n                    baseResponseInfo.setData(filePath);\n                }\n                // \u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u4e3a\u963f\u91cc\u4e91OSS\n                else if (\"aliOss\".equals(uploadType)) {\n                    // \u4e0a\u4f20\u963f\u91cc\u4e91OSS\n                    String filePath = uploadAliOss(uploadPath, fileName, fileSize, fileType, fileExt, file);\n                    // \u8bbe\u7f6e\u54cd\u5e94\u6570\u636e\n                    baseResponseInfo.setCode(200);\n                    baseResponseInfo.setData(filePath);\n                }\n                // \u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u4e3a\u963f\u91cc\u4e91OSS\n                else {\n                    // \u8bbe\u7f6e\u54cd\u5e94\u6570\u636e\n                    baseResponseInfo.setCode(500);\n                    baseResponseInfo.", "CodeBleu_score": 24.289975993775524}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        String filePath = request.getParameter(\"filePath\");\n        String uploadType = request.getParameter(\"uploadType\");\n        String fileName = request.getParameter(\"fileName\");\n        String fileType = request.getParameter(\"fileType\");\n        String fileSize = request.getParameter(\"fileSize\");\n        String fileExt = request.getParameter(\"fileExt\");\n        String fileMD5 = request.getParameter(\"fileMD5\");\n        String fileSuffix = request.getParameter(\"fileSuffix\");\n        String fileMd5 = request.getParameter(\"fileMd5\");\n        String fileMd5Str = request.getParameter(\"fileMd5Str\");\n        String fileSizeStr = request.getParameter(\"fileSizeStr\");\n        String fileTypeStr = request.getParameter(\"fileTypeStr\");\n        String fileExtStr = request.getParameter(\"fileExtStr\");\n        String filePathStr = request.getParameter(\"filePathStr\");\n        String filePathStr1 = request.getParameter(\"filePathStr1\");\n        String filePathStr2 = request.getParameter(\"filePathStr2\");\n        String filePathStr3 = request.getParameter(\"filePathStr3\");\n        String filePathStr4 = request.getParameter(\"filePathStr4\");\n        String filePathStr5 = request.getParameter(\"filePathStr5\");\n        String filePathStr6 = request.getParameter(\"filePathStr6\");\n        String filePathStr7 = request.getParameter(\"filePathStr7\");\n        String filePathStr8 = request.getParameter(\"filePathStr8\");\n        String filePathStr9 = request.getParameter(\"filePathStr9\");\n        String filePathStr10 = request.getParameter(\"filePathStr10\");\n        String filePathStr11 = request.getParameter(\"filePathStr11\");\n        String filePathStr12 = request.getParameter(\"filePathStr12\");\n        String filePathStr13 = request.getParameter(\"filePathStr13\");\n        String filePathStr14 = request.getParameter(\"filePathStr14\");", "CodeBleu_score": 22.77071135036848}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        // 1. Get the business path and the uploaded file from the request.\n        String businessPath = getParameter(request, \"businessPath\");\n        MultipartFile multipartFile = getFile(request);\n        // 2. Depending on the file upload type, it saves the file either locally or to AliOss.\n        String fileId = uploadLocal(multipartFile, businessPath);\n        if (StringUtils.isNotEmpty(fileId)) {\n            responseInfo.setCode(CommonConstants.RESPONSE_CODE_SUCCESS);\n            responseInfo.setData(fileId);\n        } else {\n            responseInfo.setCode(CommonConstants.RESPONSE_CODE_FAIL);\n            responseInfo.setMsg(\"File upload failed.\");\n        }\n    } catch (Exception e) {\n        responseInfo.setCode(CommonConstants.RESPONSE_CODE_FAIL);\n        responseInfo.setMsg(\"File upload failed.\");\n        log.error(\"File upload failed.\", e);\n    }\n    return responseInfo;\n}", "CodeBleu_score": 32.89260088329053}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\n        try{\n            String name = obj.getString(\"name\");\n            String serialNo = obj.getString(\"serialNo\");\n            String type = obj.getString(\"type\");\n            String remark = obj.getString(\"remark\");\n            String isDefault = obj.getString(\"isDefault\");\n            String enabled = obj.getString(\"enabled\");\n            String initialAmount = obj.getString(\"initialAmount\");\n            Account account = new Account();\n            account.setName(name);\n            account.setSerialNo(serialNo);\n            account.setType(type);\n            account.setRemark(remark);\n            account.setIsDefault(isDefault);\n            account.setEnabled(enabled);\n            account.setInitialAmount(initialAmount);\n            // Determine if the account is the default account\n            if(isDefault.equals(\"true\")){\n                // Determine if there are any existing accounts\n                List<Account> list = accountMapperEx.getAccountByParam(null, null);\n                if(list.size()==0){\n                    account.setIsDefault(\"1\");\n                }else{\n                    account.setIsDefault(\"0\");\n                }\n            }\n            // Set the initial amount to zero if not specified\n            if(initialAmount==null||initialAmount.equals(\"\")){\n                account.setInitialAmount(\"0\");\n            }\n            // Insert the account\n            result = accountMapper.insertSelective(account);\n            // Log the operation\n            Logs logs = new Logs();\n            logs.setId(UUID.randomUUID().toString());\n            logs.setIpaddress(GetIpAddr.getIpAddr(request));\n            logs.setOperationtype(\"\u65b0\u589e\");\n            logs.setBiztype(\"\u8d26\u6237\");\n            logs.setDescription(\"\u65b0\u589e\u8d26\u6237\uff1a\"+name);\n            logs.setCreatorid(Integer.parseInt(request.getAttribute(\"userid\").toString()));\n            logs.setCreator(request.getAttribute(\"username\").toString());\n            logs.setCreatetime(timeService.getCurrentDate());\n            logs.setUpdaterid(0);\n            logs.setUpdater(null", "CodeBleu_score": 31.54487368292671}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\ttry{\n            Account account = JSON.parseObject(obj.toJSONString(), Account.class);\n            account.setId(null);\n            account.setCreateTime(new Date());\n            account.setCreateUser(JshException.getUserId(request));\n            account.setLastUpdateTime(new Date());\n            account.setLastUpdateUser(JshException.getUserId(request));\n            account.setDeleteFlag(0);\n            account.setEnabled(true);\n            account.setIsDefault(false);\n            if(account.getInitialAmount()==null){\n                account.setInitialAmount(new BigDecimal(0));\n            }\n            //Set the default account.\n            List<Account> accountList = this.getAccountByParam(null, null);\n            if(accountList.size()==0){\n                account.setIsDefault(true);\n            }\n            int result = accountMapperEx.insertSelective(account);\n            insertLog(request, account.getId(), \"account\", \"insertAccount\", account.getId(), account.getId());\n            return result;\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return 0;\n    }", "CodeBleu_score": 53.583863664493926}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\ttry{\n        String name = obj.getString(\"name\");\n        String serialNo = obj.getString(\"serialNo\");\n        String remark = obj.getString(\"remark\");\n        String isDefault = obj.getString(\"isDefault\");\n        String enabled = obj.getString(\"enabled\");\n        String initialAmount = obj.getString(\"initialAmount\");\n        Account account = new Account();\n        account.setName(name);\n        account.setSerialNo(serialNo);\n        account.setRemark(remark);\n        account.setIsDefault(Boolean.valueOf(isDefault));\n        account.setEnabled(Boolean.valueOf(enabled));\n        account.setInitialAmount(new BigDecimal(initialAmount));\n        account.setDeleteFlag(BusinessConstants.DELETE_FLAG_FALSE);\n        account.setCreateUserId(Long.valueOf(request.getAttribute(\"userLoginId\").toString()));\n        account.setLastUpdateUserId(Long.valueOf(request.getAttribute(\"userLoginId\").toString()));\n        account.setCreateTime(new Date());\n        account.setLastUpdateTime(new Date());\n        account.setDeleteTime(null);\n        int result=0;\n        try{\n            result=accountMapper.insertSelective(account);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return 0;\n}", "CodeBleu_score": 40.07053334564499}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(e);\n        return null;\n    }\n}", "CodeBleu_score": 28.79538706903777}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n\t\treturn countsByAccount.map(new CountByAccountMapper(name, serialNo)).get(0);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error while counting accounts with name \" + name + \" and serial number \" + serialNo, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.251380258545687}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tLong count = null;\n    try {\n        count = listWithBalanceMapper.countByAccount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error counting accounts with name \" + name + \" and serial number \" + serialNo, e);\n    }\n    return count;\n}", "CodeBleu_score": 47.83836647353638}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\ttry {\n\t\treturn deleteDepotItemByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\thandleException(e, request);\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 26.48895819402123}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n\ttry {\n\t\tresult = getDepotItemMapper().deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tLOGGER.error(e.getMessage(), e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.67728160279317}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n\ttry {\n\t\tresult = getDepotItemMapper().deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error while deleting depot item with ID \" + id + \":\" + e.getMessage());\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 52.42302022032575}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\tString url = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\turl = getUrl(projectName, nodeType, nodeKey);\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() != 200) {\n\t\t\t\tSystem.out.println(\"Request failed: \" + httpResponse.getStatusLine().getReasonPhrase());\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tif (response.contains(nodeKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 47.433801753882605}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = this.withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\tif (statusCode == 200) {\n\t\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\t\tString response = EntityUtils.toString(entity);\n\t\t\t\tif (response.contains(\"\\\"key\\\":\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tthis.close(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 46.95650010667481}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClientBuilder.create().build();\n\t\t\tHttpGet httpGet = new HttpGet(getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"nodes/\" + nodeType + \"/\" + nodeKey);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\tif (statusCode != 200) {\n\t\t\t\tSystem.out.println(\"Unexpected status code: \" + statusCode);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tif (response.contains(\"\\\"key\\\":\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\tprintStackTrace(e);\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 55.03692776972755}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString endpoint = withProjectName(projectName) + \"edges/\";\n\t\t\tHttpPost httpPost = new HttpPost(endpoint);\n\t\t\tList<NameValuePair> urlParameters = new ArrayList<NameValuePair>();\n\t\t\turlParameters.add(new BasicNameValuePair(\"type\", edgeType));\n\t\t\turlParameters.add(new BasicNameValuePair(\"fromType\", fromType));\n\t\t\turlParameters.add(new BasicNameValuePair(\"toType\", toType));\n\t\t\turlParameters.add(new BasicNameValuePair(\"from\", from));\n\t\t\turlParameters.add(new BasicNameValuePair(\"to\", to));\n\t\t\thttpPost.setEntity(new UrlEncodedFormEntity(urlParameters));\n\t\t\thttpResponse = httpClient.execute(httpPost);\n\t\t\tString responseBody = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tif (responseBody.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 44.236027525131156}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(this.baseUrl + this.withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tif (response.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tthis.close(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 53.430917943330925}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(\n\t\t\t\t\t\"http://\" + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject json = new JSONObject(response);\n\t\t\tif (json.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 55.11721013529298}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event != null) {\n    \t\tif (event.getMessage() != null) {\n    \t\t\tif (event.getLocation() == null) {\n    \t\t\t\tevent.setLocation(acquireTestingLocation());\n    \t\t\t}\n    \t\t\tevent.setTime(System.currentTimeMillis());\n    \t\t\tString json = new Gson().toJson(event);\n    \t\t\tProducerRecord<String, String> record;\n    \t\t\tif (event.getTarget() != null) {\n    \t\t\t\trecord = new ProducerRecord<String, String>(event.getTarget(), json);\n    \t\t\t} else {\n    \t\t\t\trecord = new ProducerRecord<String, String>(\"test\", json);\n    \t\t\t}\n    \t\t\tproducer.send(record);\n    \t\t\tproducer.flush();\n    \t\t} else {\n    \t\t\tSystem.out.println(\"Event message is null\");\n    \t\t}\n    \t} else {\n    \t\tSystem.out.println(\"Event is null\");\n    \t}\n\t}", "CodeBleu_score": 44.6636381394316}, {"code": "public void sendEvent(Event event){\n\tif (event == null) {\n    \t\tthrow new IllegalArgumentException(\"event cannot be null\");\n    \t}\n    \tif (event.getMessage() == null) {\n    \t\tthrow new IllegalArgumentException(\"event.message cannot be null\");\n    \t}\n    \tif (event.getLocation() == null) {\n    \t\tevent.setLocation(acquireTestingLocation());\n    \t}\n    \tevent.setTime(System.currentTimeMillis());\n    \tString json = gson.toJson(event);\n    \tProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget() == null ? \"test\" : event.getTarget(), json);\n    \tproducer.send(record);\n    \tproducer.flush();\n\t}", "CodeBleu_score": 43.563976704752314}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n    \t\tthrow new IllegalArgumentException(\"Event or event message is null.\");\n    \t}\n    \tif (event.getLocation() == null) {\n    \t\tevent.setLocation(acquireTestingLocation());\n    \t}\n    \tevent.setTime(Instant.now());\n    \tString json = gson.toJson(event);\n    \tif (event.getTarget() == null) {\n    \t\tevent.setTarget(\"test\");\n    \t}\n    \tProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget(), json);\n    \tproducer.send(record);\n    \tproducer.flush();\n\t}", "CodeBleu_score": 39.74834401759794}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client\n    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n    // Create an OSS bucket\n    if (!ossClient.doesBucketExist(getOssBucket())) {\n        ossClient.createBucket(getOssBucket());\n    }\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 39.06885154693997}, {"code": "public String upload(String objName, byte[] content){\n\t// Initializes a client\n        OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n        // Uploads an object to OSS\n        ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n        // Shuts down the OSS client\n        ossClient.shutdown();\n\n        // Returns the URL of the uploaded object\n        return getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n    }", "CodeBleu_score": 36.18984598460692}, {"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client\n    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n    // Upload the file content as an object with the specified name\n    PutObjectRequest request = new PutObjectRequest(getOssBucket(), objName, new ByteArrayInputStream(content));\n    ossClient.putObject(request);\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"http://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 40.98589505222637}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 30.123816043480357}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 30.123816043480357}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 30.123816043480357}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (this.client != null && this.clientHighLevel != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (this.client != null && this.clientHighLevel != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.clusterHostList == null || this.clusterHostList.isEmpty()) {\n\t\t\t\tthrow new IllegalArgumentException(\"clusterHostList is not set\");\n\t\t\t}\n\t\t\tif (this.clusterHostPort <= 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"clusterHostPort is not set\");\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(this.clusterHostList, this.clusterHostPort);\n\t\t\tthis.client = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\tthis.clientHighLevel = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])));\n\t\t}\n\t}", "CodeBleu_score": 51.15373926457711}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (this.lowLevelClient != null && this.highLevelClient != null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (this.lowLevelClient != null && this.highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.clusterHostList == null || this.clusterHostList.trim().isEmpty()) {\n\t\t\tthrow new Exception(\"clusterHostList is null or empty\");\n\t\t}\n\t\tif (this.clusterHostPort <= 0) {\n\t\t\tthrow new Exception(\"clusterHostPort is not set\");\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(this.clusterHostList, this.clusterHostPort);\n\t\tif (hosts == null || hosts.size() == 0) {\n\t\t\tthrow new Exception(\"clusterHostList is invalid\");\n\t\t}\n\t\tthis.lowLevelClient = new RestClient(hosts);\n\t\tthis.highLevelClient = new RestHighLevelClient(RestClientBuilder.builder(hosts.toArray(new HttpHost[0])));\n\t}\n}", "CodeBleu_score": 56.92200643383839}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (clusterHostList == null) {\n\t\t\t\tthrow new Exception(\"clusterHostList is not set\");\n\t\t\t}\n\t\t\tif (clusterHostPort <= 0) {\n\t\t\t\tthrow new Exception(\"clusterHostPort is not set\");\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tif (hosts.size() == 0) {\n\t\t\t\tthrow new Exception(\"clusterHostList is empty\");\n\t\t\t}\n\t\t\tlowLevelClient = buildLowLevelClient(hosts);\n\t\t\thighLevelClient = buildHighLevelClient(hosts);\n\t\t}\n\t}", "CodeBleu_score": 45.372145690923645}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"Host list is null or empty\");\n\t}\n\tif (clusterPort < 0) {\n\t\tthrow new IllegalArgumentException(\"Cluster port is negative\");\n\t}\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tif (host == null || host.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"Host is null or empty\");\n\t\t}\n\t\tString[] hostPort = host.split(\":\");\n\t\tif (hostPort.length == 1) {\n\t\t\thosts.add(new HttpHost(hostPort[0], clusterPort));\n\t\t} else if (hostPort.length == 2) {\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1])));\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Host is not in a valid format\");\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.59416727367984}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n    if (clusterHostList != null) {\n        String[] hostList = clusterHostList.split(\",\");\n        for (String host : hostList) {\n            String[] hostPort = host.split(\":\");\n            HttpHost hostEntry = null;\n            if (hostPort.length == 1) {\n                hostEntry = new HttpHost(hostPort[0], clusterPort);\n            } else if (hostPort.length == 2) {\n                hostEntry = new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]));\n            }\n            if (hostEntry != null) {\n                hosts.add(hostEntry);\n            }\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 41.38868056503837}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostsArray = clusterHostList.split(\",\");\n    for (String host : hostsArray) {\n        if (host.contains(\":\")) {\n            String[] hostPortArray = host.split(\":\");\n            hosts.add(new HttpHost(hostPortArray[0], Integer.parseInt(hostPortArray[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 44.48728197529196}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t// 30 second timeout\n\t\tint pollInterval = 30;\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\t// Poll for tasks with a 30-second timeout\n\t\t\t\tTaskMessage task = this.getQueue().poll(pollInterval, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\t// Check the task type\n\t\t\t\t\tif (task.getType().equals(TaskMessage.TYPE_SMS)) {\n\t\t\t\t\t\t// Extract the recipient number and message data\n\t\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\t\t// Validate the data\n\t\t\t\t\t\tif (toNumber == null || message == null) {\n\t\t\t\t\t\t\tSystem.out.println(\"SMS to \" + toNumber + \" failed.\\t Invalid data.\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// Send the message\n\t\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"SMS to \" + toNumber + \" failed.\\t \" + e.getMessage());\n\t\t\t\t\t\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\t\t\t\t\t\tString messageContent = String.format(\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 34.49741308702743}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\t// Poll for tasks with a 30-second timeout.\n\t\t\tTaskMessage task = this.getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (task != null) {\n\t\t\t\t// Check the task type.\n\t\t\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t// Extract the recipient number and message data.\n\t\t\t\t\tString toNumber = task.getData().get(\"toNumber\");\n\t\t\t\t\tString message = task.getData().get(\"message\");\n\t\t\t\t\t// Validate the data.\n\t\t\t\t\tif (toNumber == null || toNumber.isEmpty() || message == null || message.isEmpty()) {\n\t\t\t\t\t\tSystem.out.println(\"Invalid task data: \" + task.getData());\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// Send the message.\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tSystem.out.println(\"Failed to send plain text message to \" + toNumber + \": \" + e.getMessage());\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Unknown task type: \" + task.getType());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 33.11511957508849}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\tString taskId = this.getQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (taskId == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tTask task = this.getTaskService().getTask(taskId);\n\t\t\tif (task == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (task.getType() == TaskType.SMS) {\n\t\t\t\ttry {\n\t\t\t\t\tString toNumber = task.getData();\n\t\t\t\t\tString message = task.getData2();\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tSystem.out.println(\"Send SMS to \" + task.getData() + \" failed.\\t\" + e.getMessage());\n\t\t\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\t\t\tString messageContent = String.format(\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r\n%s\", task.getData(), task.getData2(), e.getMessage());\n\t\t\t\t\t\tthis.getSmtpService().send(\"archerliyaqing@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\tthis.getSmtpService().send(\"philip_chang@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\tthis.getSmtpService().send(\"clariones@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 29.85068215851855}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\ttry {\n\t\t\tHttpGet httpget = new HttpGet(uri);\n\t\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\t\ttry {\n\t\t\t\tHttpEntity entity = response.getEntity();\n\t\t\t\tif (entity != null) {\n\t\t\t\t\tString xml = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\t\tSystem.out.println(xml);\n\t\t\t\t\treturn xml;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t} finally {\n\t\t\thttpclient.close();\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 61.142097061848375}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString result = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\tSystem.out.println(result);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 64.25996458509195}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\thttpget.addHeader(\"Accept\", \"application/xml\");\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tif (responseString.length() > 0) {\n\t\t\t\tSystem.out.println(\"Response: \" + responseString);\n\t\t\t}\n\t\t\treturn responseString;\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t}", "CodeBleu_score": 61.279124205925385}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tNode documentElement = document.getDocumentElement();\n\tObject[] result = decodeNodeToMap(documentElement, doTrim);\n\tif (result == null || result.length < 2){\n\t\treturn null;\n\t}\n\tif (result[0] == null || result[1] == null){\n\t\treturn null;\n\t}\n\tString rootNodeName = result[0].toString();\n\tif (!rootNodeName.equals(documentElement.getNodeName())){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) result[1];\n}", "CodeBleu_score": 58.25369699626338}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilder documentBuilder = newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(CHARSET)));\n\tNode rootNode = document.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> rootMap = (Map<String, Object>) rootValue[1];\n\tif (rootMap == null){\n\t\treturn null;\n\t}\n\treturn rootMap;\n}", "CodeBleu_score": 48.61750640644193}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilder documentBuilder = newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\tNode root = document.getDocumentElement();\n\tObject[] rootNode = decodeNodeToMap(root, doTrim);\n\tif (rootNode == null || rootNode.length < 2){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) rootNode[1];\n}", "CodeBleu_score": 39.82776392716595}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\taddLog(orderRecord, MSG_AutoProcessing_Eligible_For_AutoProcessing);\n\t\tenqueueGenerateSchedules(orderRecord);\n\t}\n\telse\n\t{\n\t\taddLog(orderRecord, MSG_AutoProcessing_Ineligible_For_AutoProcessing);\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 20.426129862947345}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (!isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\taddLog(orderRecord, MSG_Order_Not_Eligible_For_Auto_Processing);\n\t\tscheduleIfNotPostponed(orderRecord);\n\t\treturn;\n\t}\n\n\taddLog(orderRecord, MSG_Order_Scheduled_For_Auto_Processing);\n\tfinal String trxName = getTrxName(orderRecord);\n\tfinal int orderId = orderRecord.getC_Order_ID();\n\n\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n\tfinal IAsyncBatchBL asyncBatchBL = Services.get(IAsyncBatchBL.class);\n\tfinal IAsyncBatchDAO asyncBatchDAO = Services.get(IAsyncBatchDAO.class);\n\tfinal IAsyncBatchExecutor asyncBatchExecutor = Services.get(IAsyncBatchExecutor.class);\n\tfinal IAsyncBatchExecutorBL asyncBatchExecutorBL = Services.get(IAsyncBatchExecutorBL.class);\n\n\tfinal I_C_Async_Batch asyncBatch = asyncBatchDAO.retrieveAsyncBatchOrNull(orderRecord.getC_Async_Batch_ID());\n\tfinal String asyncBatchName = asyncBatch != null ? asyncBatch.getName() : null;\n\n\tfinal I_C_Async_Batch_Type asyncBatchType = asyncBatchBL.retrieveAsyncBatchTypeOrNull(orderRecord.getC_Async_Batch_ID());\n\tfinal String asyncBatchTypeName = asyncBatchType != null ? asyncBatchType.getName() : null;\n\n\tfinal I_C_Async_Batch_Type_Workflow asyncBatchTypeWorkflow = asyncBatchBL.retrieveAsyncBatchTypeWorkflowOrNull(orderRecord.getC_Async_Batch_ID());\n\tfinal String asyncBatchTypeWorkflowName = asyncBatchTypeWorkflow != null ? asyncBatchTypeWorkflow.getName() : null;\n\n\tfinal I_C_Async_Batch_Workflow asyncBatchWorkflow = asyncBatchBL.retrieveAsyncBatchWorkflowOrNull(orderRecord.getC_Async_Batch_ID());\n\tfinal String asyncBatchWorkflowName = asyncBatchWorkflow != null ? asyncBatchWorkflow.getName()", "CodeBleu_score": 35.67016458543696}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\taddLog(orderRecord, MSG_AUTO_PROCESSING_ENABLED);\n\t\tenqueueGenerateSchedules(orderRecord);\n\t}\n\telse\n\t{\n\t\taddLog(orderRecord, MSG_AUTO_PROCESSING_DISABLED);\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 19.461948661719696}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n    if (\n        $user &&\n        Hash::check($request->password, $user->password)\n    ) {\n        return $user;\n    }\n    $this->fireFailedEvent($request, $user);\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 50.05504836881084}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (\n        $user &&\n        Hash::check($request->password, $user->password) &&\n        $user->two_factor_secret !== null\n    ) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    if (\n        $user &&\n        Hash::check($request->password, $user->password) &&\n        $user->two_factor_secret === null\n    ) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    if (\n        $user &&\n        Hash::check($request->password, $user->password) &&\n        $user->two_factor_secret === null &&\n        $user->blocked_at !== null\n    ) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    if (\n        $user &&\n        Hash::check($request->password, $user->password) &&\n        $user->two_factor_secret === null &&\n        $user->blocked_at === null\n    ) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    if (\n        $user &&\n        Hash::check($request->password, $user->password) &&\n        $user->two_factor_secret !== null &&\n        $user->blocked_at !== null\n    ) {\n        $this->fireFailedEvent($request, $user);\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    if (\n        $user &&\n        Hash::check($request->password", "CodeBleu_score": 31.764745551270536}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (\n        $user &&\n        $this->hasher->check($request->password, $user->password)\n    ) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 50.64738426927826}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->hit($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        'email' => [__($this->username()) . ' or ' . __('Password') . ' is incorrect.'],\n    ]);\n}", "CodeBleu_score": 60.96241967334684}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($this->throttleKey($request));\n    throw ValidationException::withMessages([\n        $this->username() => [__($this->errorMessages['failed'])],\n    ]);\n}", "CodeBleu_score": 53.89225849064891}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($this->throttleKey($request));\n    throw ValidationException::withMessages([\n        'email' => [__($this->errorMessage())],\n    ]);\n}", "CodeBleu_score": 62.21614379118685}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$data = [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 52.190911039869356}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n\n    if (! $user) {\n        return redirect('/');\n    }\n\n    $data = [\n        'id' => $user->id,\n        'name' => $user->name,\n        'email' => $user->email,\n    ];\n\n    if ($request->session()->has('login.id')) {\n        $data['id'] = $request->session()->get('login.id');\n    }\n\n    $data['twoFactor'] = optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at);\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ])->toResponse($request);\n}", "CodeBleu_score": 62.14948520661604}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('login.user');\n\n    $data = [\n        'user' => $user,\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    if ($user) {\n        $data['twoFactorQr'] = $this->getTwoFactorQrCodeUrl($user);\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 64.81608318745658}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($request, $user, $driver);\n\n        return $user;\n    }\n\n    return $this->getUserOrCreate($socialite);\n}", "CodeBleu_score": 49.78358800281348}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tif ($userToken = UserToken::firstWhere('driver', $driver)->where('driver_id', $socialite->getId())) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($request, $user, $driver);\n        return $user;\n    }\n\n    if ($user = User::where('email', $socialite->getEmail())->first()) {\n        $this->createUserToken($user, $driver, $socialite);\n        return $user;\n    }\n\n    return $this->createUser($socialite);\n}", "CodeBleu_score": 57.544289306187814}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::firstWhere('driver', $driver)\n        ->where('driver_id', $socialite->getId());\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($request, $user, $driver);\n\n        return $user;\n    }\n\n    return $this->getUserOrCreate($socialite);\n}", "CodeBleu_score": 45.422068932404045}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->getUser($request);\n\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! Webauthn::validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    $this->limiter->clear($request);\n\n    return true;\n}", "CodeBleu_score": 60.117777100705496}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$credentials = $this->filterCredentials($request);\n    $user = $this->provider->retrieveByCredentials($credentials);\n\n    if ($user === null) {\n        $this->fireFailedEvent($request);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    if (! $this->validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    $this->limiter->clear($request);\n\n    return true;\n}", "CodeBleu_score": 51.793328835819594}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$credentials = $this->filterCredentials($request);\n    $user = $this->getUser($request);\n    if ($user === null) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n    $result = $this->validateAssertion($credentials, $user);\n    if ($result === false) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n    $this->fireValidatedEvent($request, $user);\n    return true;\n}", "CodeBleu_score": 60.55089249699244}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\n    if ($email) {\n        try {\n            return User::where('email', $email)->firstOrFail();\n        } catch (ModelNotFoundException $e) {\n            $this->error('User not found.');\n            return null;\n        }\n    } else {\n        $this->error('No email provided.');\n        return null;\n    }\n}", "CodeBleu_score": 68.03359505071265}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n\n    if (! $email) {\n        $this->error('An email address is required.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (Exception $e) {\n        $this->error('The user could not be found.');\n\n        return null;\n    }\n}", "CodeBleu_score": 70.92283042298956}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\n    if (empty($email)) {\n        $this->error('Please provide an email address.');\n        return null;\n    }\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found.');\n        return null;\n    }\n}", "CodeBleu_score": 74.08557135428104}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush') && config('scout.driver') === 'meilisearch') {\n        $meilisearch = new MeiliSearchClient(config('scout.meilisearch.hosts'), config('scout.meilisearch.key'));\n        foreach (config('scout.meilisearch.indexes') as $index) {\n            $table = (new $index)->getTable();\n            $this->artisan('scout:flush', ['model' => $table]);\n            $this->info(\"Index '$table' flushed.\");\n        }\n    }\n}", "CodeBleu_score": 53.27421264334649}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush') && config('scout.driver') === 'meilisearch') {\n        $this->info('Flushing indexes...');\n\n        $meilisearch = new Meilisearch();\n\n        $meilisearch->client->keys->deleteAll();\n\n        $meilisearch->client->indexes->reset();\n\n        $meilisearch->client->keys->create('masterKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('apiKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('publicKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('privateKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('systemKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('adminKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('anonymousKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('healthKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('statsKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('dumpsKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('logsKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('tasksKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('versionKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('healthKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->keys->create('versionKey', config('scout.meilisearch.key'));\n\n        $meilisearch->client->", "CodeBleu_score": 24.46094674459643}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch') {\n        $this->info('Flushing MeiliSearch indexes...');\n        foreach (config('scout.meilisearch.indexes') as $index => $meilisearch) {\n            $this->artisan('scout:flush', [\n                '--index' => $index,\n                '--model' => $meilisearch['model'],\n            ]);\n        }\n        $this->info('MeiliSearch indexes flushed!');\n    }\n}", "CodeBleu_score": 32.68625388493949}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->getSource($resource);\n    $vcard = $vcard->read();\n    if ($vcard === null) {\n        $vcard = $this->create($resource);\n    }\n    if ($vcard->getUID() === null) {\n        $vcard->setUID(Uuid::uuid4()->toString());\n    }\n\n    $this->exporters($resource::class)\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n    return $vcard;\n}", "CodeBleu_score": 25.500801635533314}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\n    if (!$vcard->hasUID()) {\n        $vcard->setUID($resource->getUID());\n    }\n\n    $this->exporters($resource::class)\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n    return $vcard;\n}", "CodeBleu_score": 17.954138070393526}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n    if ($vcard === null) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->exporters($resource->getType())->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n    return $vcard;\n}", "CodeBleu_score": 17.959909038037996}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$addressBook = $this->getAddressBook($addressBookId);\n    if (!$addressBook) {\n        return false;\n    }\n    $obj = $this->getObject($addressBook, $cardUri);\n    if (!$obj) {\n        return false;\n    }\n    if ($obj->type === 'contact') {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj->type === 'group') {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 66.39796170668801}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$addressBook = $this->getAddressBook($addressBookId);\n    $obj = $this->getObject($addressBook, $cardUri);\n    if ($obj) {\n        if ($obj instanceof Contact) {\n            DestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $addressBook->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue('high');\n        } elseif ($obj instanceof Group) {\n            DestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $addressBook->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue('high');\n        }\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 68.07359139563712}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$addressBook = $this->getAddressBook($addressBookId);\n    $card = $this->getCard($addressBook, $cardUri);\n    if ($card instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $addressBook->vault_id,\n            'contact_id' => $card->id,\n        ])->onQueue(Queue::HIGH);\n        return true;\n    }\n    if ($card instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $addressBook->vault_id,\n            'group_id' => $card->id,\n        ])->onQueue(Queue::HIGH);\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 64.2109470080004}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create([\n        'user_id' => auth()->guard()->user()->id,\n        'lead_id' => $data['lead_id'],\n        'type' => $data['type'],\n        'description' => $data['description'],\n    ]);\n\n    return $this->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('lead-activities'),\n    ]);\n}", "CodeBleu_score": 39.24559694794972}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create([\n        'type' => $data['type'],\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard()->user()->id,\n        'description' => $data['description'],\n        'file_name' => request()->file('file')->getClientOriginalName(),\n        'file_path' => request()->file('file')->store('leads/' . $data['lead_id'])\n    ]);\n\n    return $this->activityRepository->create([\n        'type' => $data['type'],\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard()->user()->id,\n        'description' => $data['description'],\n        'file_name' => request()->file('file')->getClientOriginalName(),\n        'file_path' => request()->file('file')->store('leads/' . $data['lead_id'])\n    ]);\n}", "CodeBleu_score": 34.64148701919695}, {"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create($data + [\n        'user_id' => auth()->guard()->user()->id,\n    ]);\n\n    return $this->fileRepository->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('uploads'),\n        'activity_id' => $this->activityRepository->getLastRecord()->id,\n    ]);\n}", "CodeBleu_score": 40.90535684115646}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } elseif ($exception instanceof NotFoundHttpException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof MethodNotAllowedHttpException) {\n        $statusCode = 405;\n    } elseif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    if ($exception instanceof ModelNotFoundException && request()->expectsJson()) {\n        return response()->json([\n            'message' => trans('admin::app.common.resource-not-found')\n        ], 404);\n    }\n\n    if ($exception instanceof ModelNotFoundException && ! request()->expectsJson()) {\n        return $this->response('admin', $statusCode);\n    }\n\n    if ($exception instanceof PDOException && request()->expectsJson()) {\n        return response()->json([\n            'message' => trans('admin::app.common.database-connection-error')\n        ], 500);\n    }\n\n    if ($exception instanceof PDOException && ! request()->expectsJson()) {\n        return $this->response('admin', $statusCode);\n    }\n\n    if ($exception instanceof ParseError && request()->expectsJson()) {\n        return response()->json([\n            'message' => trans('admin::app.common.parse-error')\n        ], 500);\n    }\n\n    if ($exception instanceof ParseError && ! request()->expectsJson()) {\n        return $this->response('admin', $statusCode);\n    }\n\n    if ($exception instanceof NotFoundHttpException && request()->expectsJson()) {\n        return response()->json([\n            'message' => trans('admin::app.common.not-found')\n        ], 404);\n    }\n\n    if ($exception instanceof NotFoundHttpException && ! request()->expectsJson()) {\n        return $", "CodeBleu_score": 34.75826781725201}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$path = $this->getPath($exception);\n\n    $statusCode = $exception->getStatusCode();\n\n    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    }\n\n    if ($exception instanceof HttpResponseException) {\n        $statusCode = $exception->getStatusCode();\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        if ($path == 'admin') {\n            return redirect()->route('admin.session.create');\n        }\n    }\n\n    if ($exception instanceof ValidationException) {\n        $statusCode = 422;\n    }\n\n    return $this->response($path, $statusCode);\n}", "CodeBleu_score": 51.40125517003589}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$path = request()->segment(1);\n\n    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } else {\n        $statusCode = $exception->getStatusCode();\n    }\n\n    if ($path == config('app.admin_path')) {\n        return $this->response($path, $statusCode);\n    } elseif ($path == config('app.front_path')) {\n        return redirect()->route('admin.session.create');\n    }\n}", "CodeBleu_score": 47.819646444864105}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t// Get the activity IDs from the request.\n    $activityIds = request()->all();\n\n    // Create a counter to keep track of the number of updates.\n    $updates = 0;\n\n    // Iterate over the specified activity IDs.\n    foreach ($activityIds as $activityId) {\n        // Get the activity.\n        $activity = $this->activityRepository->find($activityId);\n\n        // Dispatch the 'updating' event.\n        Event::dispatch(new Updating($activity));\n\n        // Update the activity's 'is_done' status.\n        $this->activityRepository->update($activityId, ['is_done' => !$activity->is_done]);\n\n        // Increment the number of updates.\n        $updates++;\n\n        // Dispatch the 'updated' event.\n        Event::dispatch(new Updated($activity));\n    }\n\n    // Return a JSON response indicating success or failure.\n    return response()->json([\n        'success' => $updates > 0,\n        'message' => $updates > 0 ? 'Activities updated.' : 'No activities updated.',\n    ]);\n}", "CodeBleu_score": 39.145883154519794}, {"code": "<?\npublic function massUpdate(){\n\t$data = request()->all();\n    $ids = $data['ids'];\n    $is_done = $data['is_done'];\n    $count = 0;\n    foreach($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n        if($activity->is_done != $is_done) {\n            $this->dispatch(new ActivityIsDoneEvent($activity, $is_done));\n            $this->activityRepository->update($id, ['is_done' => $is_done]);\n            $count++;\n        }\n    }\n    if($count > 0) {\n        return response()->json(['message' => 'Successfully updated ' . $count . ' activity' . ($count == 1 ? '' : 's') . '.', 'success' => true]);\n    } else {\n        return response()->json(['message' => 'No changes made.', 'success' => false]);\n    }\n}", "CodeBleu_score": 40.22417186288998}, {"code": "<?\npublic function massUpdate(){\n\t$ids = request()->input('ids');\n    $is_done = request()->input('is_done');\n    $count = 0;\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n        if ($activity->is_done != $is_done) {\n            Event::dispatch(new ActivityStatusWasUpdated($activity));\n            $this->activityRepository->update($id, ['is_done' => $is_done]);\n            $count++;\n        }\n    }\n    if ($count > 0) {\n        return response()->json(['status' => 'success', 'message' => $count . ' activities updated.']);\n    } else {\n        return response()->json(['status' => 'error', 'message' => 'No activities updated.']);\n    }\n}", "CodeBleu_score": 42.41365513670159}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$ids = request('ids');\n        $activities = $this->activityRepository->findMany($ids);\n        $activities->each(function ($activity) {\n            Event::dispatch(new ActivityDeleted($activity));\n        });\n        $this->activityRepository->deleteMany($ids);\n        return response()->json([\n            'message' => trans('admin::app.response.destroy-success', ['name' => 'Activity']),\n        ]);\n    }", "CodeBleu_score": 39.06121218259475}, {"code": "<?\n public function massDestroy(){\n\t$activityIds = request('ids');\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        $this->dispatch(new ActivityDeleted($activity));\n\n        $this->activityRepository->delete($activity);\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.activities.mass-delete-success'),\n    ]);\n}", "CodeBleu_score": 40.26479489661638}, {"code": "<?\n public function massDestroy(){\n\t$ids = request('ids');\n\n        foreach ($ids as $id) {\n            $activity = $this->activityRepository->find($id);\n            $activity->delete();\n            Event::dispatch(new ActivityDeleted($activity));\n        }\n\n        return response()->json([\n            'status' => 'success',\n            'message' => trans('admin::app.response.delete-success', ['name' => 'Activity']),\n        ]);\n    }", "CodeBleu_score": 33.567028905445554}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n        $requestData = request()->all();\n        foreach ($requestData as $key => $value) {\n            $card = $cards->where('id', $key)->first();\n            if ($card) {\n                $card->selected = $value;\n            }\n        }\n        return response()->json($cards);\n    }", "CodeBleu_score": 43.58326892870398}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n    $selectedCards = request()->all();\n    foreach($cards as $card) {\n        foreach($selectedCards as $selectedCard) {\n            if($selectedCard['id'] == $card['id']) {\n                $card['selected'] = $selectedCard['selected'];\n            }\n        }\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 44.6813663310765}, {"code": "<?\n public function updateCards(){\n\t// Retrieve the current cards\n    $cards = $this->dashboardHelper->getCards();\n\n    // Iterate through the request data\n    foreach (request()->all() as $card => $selected) {\n\n        // Check if the card exists\n        if ($cardModel = $cards->where('id', $card)->first()) {\n\n            // Update the card's selected status\n            $cardModel->update(['selected' => $selected]);\n        }\n    }\n\n    // Return the updated cards as a JSON response\n    return response()->json($cards);\n}", "CodeBleu_score": 39.203179740793836}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\tEvent::dispatch('configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 54.595182533635366}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('configuration.create.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.create.after');\n\n    session()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n    return redirect()->back();\n}", "CodeBleu_score": 44.24615257485309}, {"code": "<?\npublic function store(){\n\t// Dispatch the event before saving the configuration\n    event(new ConfigurationWasCreated($configuration = $this->configurationRepository->create(request()->all())));\n\n    // Flash a success message to the session\n    session()->flash('success', trans('configuration.created'));\n\n    // Redirect back to the previous page\n    return redirect()->back();\n}", "CodeBleu_score": 38.53161328157147}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> list1 = new ArrayList<AdminModelSort>();\n    for (String s : list) {\n        AdminModelSort a = new AdminModelSort();\n        a.setModel(s);\n        a.setSort(1);\n        a.setType(AdminModelSort.Type.ASC);\n        list1.add(a);\n    }\n    List<AdminModelSort> list2 = new ArrayList<AdminModelSort>();\n    for (AdminModelSort a : list1) {\n        AdminModelSort b = new AdminModelSort();\n        b.setUserId(getUserId());\n        b.setModel(a.getModel());\n        b.setSort(a.getSort());\n        b.setType(a.getType());\n        list2.add(b);\n    }\n    for (AdminModelSort a : AdminModelSort.find.where().eq(\"userId\", getUserId()).findList()) {\n        AdminModelSort b = new AdminModelSort();\n        b.setUserId(getUserId());\n        b.setModel(a.getModel());\n        b.setSort(a.getSort());\n        b.setType(a.getType());\n        list2.add(b);\n    }\n    for (AdminModelSort a : list2) {\n        AdminModelSort b = AdminModelSort.find.where().eq(\"userId\", getUserId()).eq(\"model\", a.getModel()).findUnique();\n        if (b != null) {\n            b.setSort(a.getSort());\n            b.setType(a.getType());\n            b.update();\n        }\n    }\n    AdminModelSort.deleteAll(AdminModelSort.find.where().eq(\"userId\", getUserId()).ne(\"model\", \"\").findList());\n    AdminModelSort.saveBatch(list2);\n    return ok();\n}", "CodeBleu_score": 37.0084916226988}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<>();\n    list.forEach(e -> {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(e);\n        sort.setSort(\"asc\");\n        sort.setType(\"header\");\n        sortList.add(sort);\n    });\n    sortList.forEach(e -> {\n        AdminModelSort sort = adminModelSortRepository.findByUserIdAndModel(getUserId(), e.getModel());\n        if (sort != null) {\n            adminModelSortRepository.delete(sort);\n        }\n    });\n    adminModelSortRepository.save(sortList);\n    return ok();\n}", "CodeBleu_score": 36.374951780737355}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> list2 = new ArrayList<>();\n    list.forEach(item -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(item);\n        adminModelSort.setSort(AdminModelSort.Sort.ASC);\n        adminModelSort.setType(AdminModelSort.Type.MODEL);\n        list2.add(adminModelSort);\n    });\n    List<AdminModelSort> list3 = new ArrayList<>();\n    list2.forEach(item -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(item);\n        adminModelSort.setSort(AdminModelSort.Sort.ASC);\n        adminModelSort.setType(AdminModelSort.Type.MODEL);\n        list3.add(adminModelSort);\n    });\n    List<AdminModelSort> list4 = new ArrayList<>();\n    list3.forEach(item -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(item);\n        adminModelSort.setSort(AdminModelSort.Sort.ASC);\n        adminModelSort.setType(AdminModelSort.Type.MODEL);\n        list4.add(adminModelSort);\n    });\n    List<AdminModelSort> list5 = new ArrayList<>();\n    list4.forEach(item -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(item);\n        adminModelSort.setSort(AdminModelSort.Sort.ASC);\n        adminModelSort.setType(AdminModelSort.Type.MODEL);\n        list5.add(adminModelSort);\n    });\n    List<AdminModelSort> list6 = new ArrayList<>();\n    list5.forEach(item -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(item);\n        adminModelSort.setSort(AdminModelSort.Sort.ASC);\n        adminModelSort.setType(AdminModelSort.Type.MODEL);\n        list6.add(adminModelSort);\n    });\n    List<AdminModelSort> list7 = new ArrayList<>();\n    list6.forEach(item ->", "CodeBleu_score": 39.27853657613857}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\ttry {\n            User user = getUserFromRequest();\n            UserConfig userConfig = userConfigService.queryUserConfigByName(customKey, user.getId());\n            if (userConfig == null) {\n                userConfig = new UserConfig();\n                userConfig.setName(customKey);\n                userConfig.setUserId(user.getId());\n                userConfig.setValue(json.toJSONString());\n                userConfig.setStatus(0);\n                userConfigService.save(userConfig);\n            } else {\n                userConfig.setValue(json.toJSONString());\n                userConfigService.updateById(userConfig);\n            }\n            return Result.success();\n        } catch (Exception e) {\n            log.error(\"queryCustomSetting error\", e);\n            return Result.error();\n        }\n    }", "CodeBleu_score": 54.01974558324177}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tUserConfig userConfig = new UserConfig();\n        userConfig.setUserId(getUserId());\n        userConfig.setCustomKey(customKey);\n        userConfig.setValue(json);\n        userConfig.setStatus(1);\n        userConfig.setUpdateBy(getUserId());\n        userConfig.setUpdateTime(new Date());\n        userConfig.setCreateBy(getUserId());\n        userConfig.setCreateTime(new Date());\n        if(userConfigMapper.selectCount(new QueryWrapper<>(userConfig))>0){\n            userConfigMapper.updateById(userConfig);\n        }else{\n            userConfigMapper.insert(userConfig);\n        }\n        return Result.success(userConfig);\n    }", "CodeBleu_score": 40.10320274242989}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\ttry {\n   UserConfig userConfig = userConfigService.getUserConfigByName(customKey);\n   if(userConfig != null) {\n    userConfig.setValue(json.toJSONString());\n    userConfigService.updateById(userConfig);\n   } else {\n    userConfig = new UserConfig();\n    userConfig.setName(customKey);\n    userConfig.setValue(json.toJSONString());\n    userConfigService.save(userConfig);\n   }\n   return Result.success();\n  } catch (Exception e) {\n   e.printStackTrace();\n   return Result.error();\n  }\n }", "CodeBleu_score": 63.615071138053295}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = userService.getById(userId);\n    if (user == null) {\n        return Result.failure(ResultCode.USER_NOT_FOUND);\n    }\n    String deptName = userService.getDeptName(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 49.83324076404071}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(\"\u65e0\u6548\u7684\u7528\u6237ID\");\n    }\n    user.setSalt(null);\n    user.setPassword(null);\n    String deptName = adminDeptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    return Result.success(user);\n}", "CodeBleu_score": 52.79466921938116}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        return Result.fail(ResultCodeEnum.USER_NOT_FOUND);\n    }\n    String deptName = adminUserService.getNameByDeptId(adminUser.getDeptId());\n    adminUser.setDeptName(deptName);\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n    return Result.success(adminUser);\n}", "CodeBleu_score": 49.581775753184644}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\tString userId = getUserId();\n \t\n \t// Retrieve all \"readNotice\" entries for the current user\n \tList<ReadNotice> readNotices = readNoticeRepository.findByUserId(userId);\n \t\n \tif (readNotices.size() > 1) {\n \t\t// Update all \"readNotice\" entries for the current user\n \t\treadNotices.forEach(readNotice -> readNotice.setStatus(1));\n \t\treadNoticeRepository.saveAll(readNotices);\n \t} else if (readNotices.size() == 1) {\n \t\t// Create a new \"readNotice\" entry for the current user\n \t\tReadNotice readNotice = new ReadNotice();\n \t\treadNotice.setUserId(userId);\n \t\treadNotice.setStatus(1);\n \t\treadNoticeRepository.save(readNotice);\n \t} else {\n \t\t// Create a new \"readNotice\" entry for the current user\n \t\tReadNotice readNotice = new ReadNotice();\n \t\treadNotice.setUserId(userId);\n \t\treadNotice.setStatus(1);\n \t\treadNoticeRepository.save(readNotice);\n \t}\n \t\n \treturn ok();\n }", "CodeBleu_score": 23.037002690196484}, {"code": " public Result readNotice() {\n\tDynamicForm requestForm = formFactory.form().bindFromRequest();\n  String userId = requestForm.get(\"userId\");\n  String noticeId = requestForm.get(\"noticeId\");\n  String status = requestForm.get(\"status\");\n  String value = requestForm.get(\"value\");\n  String name = requestForm.get(\"name\");\n  String description = requestForm.get(\"description\");\n  String type = requestForm.get(\"type\");\n  String category = requestForm.get(\"category\");\n  String subcategory = requestForm.get(\"subcategory\");\n  String userType = requestForm.get(\"userType\");\n  String user = requestForm.get(\"user\");\n  String userName = requestForm.get(\"userName\");\n  String userEmail = requestForm.get(\"userEmail\");\n  String userMobile = requestForm.get(\"userMobile\");\n  String userAddress = requestForm.get(\"userAddress\");\n  String userGender = requestForm.get(\"userGender\");\n  String userBirthday = requestForm.get(\"userBirthday\");\n  String userAadhaar = requestForm.get(\"userAadhaar\");\n  String userPan = requestForm.get(\"userPan\");\n  String userDob = requestForm.get(\"userDob\");\n  String userPin = requestForm.get(\"userPin\");\n  String userCity = requestForm.get(\"userCity\");\n  String userState = requestForm.get(\"userState\");\n  String userCountry = requestForm.get(\"userCountry\");\n  String userMaritalStatus = requestForm.get(\"userMaritalStatus\");\n  String userChildren = requestForm.get(\"userChildren\");\n  String userEducation = requestForm.get(\"userEducation\");\n  String userOccupation = requestForm.get(\"userOccupation\");\n  String userAnnualIncome = requestForm.get(\"userAnnualIncome\");\n  String userWorkExperience = requestForm.get(\"userWorkExperience\");\n  String userAbout = requestForm.get(\"userAbout\");\n  String userProfilePicture = requestForm.get(\"userProfilePicture\");\n  String userCv = requestForm.get(\"userCv\");\n  String userRole", "CodeBleu_score": 22.09969386342607}, {"code": " public Result readNotice() {\n\tString userId = getUserId();\n \t\n \tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n \t\n \tif(readNoticeList.size() > 1) {\n \t\tfor(ReadNotice readNotice : readNoticeList) {\n \t\t\treadNotice.setStatus(1);\n \t\t\treadNotice.update();\n \t\t}\n \t} else {\n \t\tReadNotice readNotice = new ReadNotice();\n \t\treadNotice.setUserId(userId);\n \t\treadNotice.setStatus(1);\n \t\treadNotice.save();\n \t}\n \t\n \treturn ok();\n }", "CodeBleu_score": 28.197808809715568}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfigBO adminConfigBO = getAdminConfig(AdminConfigType.COMPANY_INFO);\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(AdminConfigType.COMPANY_INFO.getCode());\n        adminConfigBO.setValue(adminCompanyBO.toJSONString());\n        adminConfigBO.setStatus(Status.ACTIVE);\n        adminConfigBO.setDescription(AdminConfigType.COMPANY_INFO.getDescription());\n        adminConfigBO.setCreatedBy(AdminConfigType.COMPANY_INFO.getCode());\n        adminConfigBO.setCreatedDate(new Date());\n        saveOrUpdate(adminConfigBO);\n    } else {\n        adminConfigBO.setValue(adminCompanyBO.toJSONString());\n        adminConfigBO.setStatus(Status.ACTIVE);\n        adminConfigBO.setDescription(AdminConfigType.COMPANY_INFO.getDescription());\n        adminConfigBO.setUpdatedBy(AdminConfigType.COMPANY_INFO.getCode());\n        adminConfigBO.setUpdatedDate(new Date());\n        saveOrUpdate(adminConfigBO);\n    }\n}", "CodeBleu_score": 26.296155685199018}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfigBO adminConfigBO = adminConfigDAO.findByName(\"companyInfo\");\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(\"companyInfo\");\n        adminConfigBO.setDescription(\"Company Information\");\n        adminConfigBO.setStatus(AdminConfigStatus.ACTIVE);\n        adminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigBO.saveOrUpdate();\n    } else {\n        adminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigBO.saveOrUpdate();\n    }\n}", "CodeBleu_score": 37.49576420951213}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfigBO adminConfigBO = adminConfigBOMapper.selectOne(new QueryWrapper<AdminConfigBO>().lambda().eq(AdminConfigBO::getName, \"companyInfo\"));\n\tif (adminConfigBO == null) {\n\t\tadminConfigBO = new AdminConfigBO();\n\t\tadminConfigBO.setName(\"companyInfo\");\n\t\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigBO.setStatus(1);\n\t\tadminConfigBOMapper.insert(adminConfigBO);\n\t} else {\n\t\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigBOMapper.updateById(adminConfigBO);\n\t}\n}", "CodeBleu_score": 49.57082049329724}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String query = \"SELECT * FROM admin_config WHERE key = 'admin_company'\";\n    try {\n        Connection connection = ConnectionManager.getConnection();\n        PreparedStatement statement = connection.prepareStatement(query);\n        ResultSet resultSet = statement.executeQuery();\n        if (resultSet.next()) {\n            adminCompanyBO = parseObject(resultSet);\n        }\n        statement.close();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 39.21500275010132}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    try {\n        String query = \"SELECT * FROM admin_config WHERE config_key = 'admin_config'\";\n        Connection conn = DatabaseConnectionFactory.getConnection();\n        PreparedStatement ps = conn.prepareStatement(query);\n        ResultSet rs = ps.executeQuery();\n        if (rs.next()) {\n            adminCompanyBO = parseObject(rs);\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 40.43880904964802}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    try {\n        String adminConfig = getValue(AdminConstants.ADMIN_CONFIG_KEY);\n        if (adminConfig != null && !adminConfig.isEmpty()) {\n            adminCompanyBO = parseObject(adminConfig, AdminCompanyBO.class);\n        }\n    } catch (Exception e) {\n        logger.error(\"Error retrieving admin configuration\", e);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 45.21558539185928}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tAdminConfig logConfig = AdminConfig.createLogConfig();\n  AdminConfig logConfig2 = AdminConfig.createLogConfig();\n  AdminConfig logConfig3 = AdminConfig.createLogConfig();\n  AdminConfig logConfig4 = AdminConfig.createLogConfig();\n  AdminConfig logConfig5 = AdminConfig.createLogConfig();\n  AdminConfig logConfig6 = AdminConfig.createLogConfig();\n  AdminConfig logConfig7 = AdminConfig.createLogConfig();\n  AdminConfig logConfig8 = AdminConfig.createLogConfig();\n  AdminConfig logConfig9 = AdminConfig.createLogConfig();\n  AdminConfig logConfig10 = AdminConfig.createLogConfig();\n  AdminConfig logConfig11 = AdminConfig.createLogConfig();\n  AdminConfig logConfig12 = AdminConfig.createLogConfig();\n  AdminConfig logConfig13 = AdminConfig.createLogConfig();\n  AdminConfig logConfig14 = AdminConfig.createLogConfig();\n  AdminConfig logConfig15 = AdminConfig.createLogConfig();\n  AdminConfig logConfig16 = AdminConfig.createLogConfig();\n  AdminConfig logConfig17 = AdminConfig.createLogConfig();\n  AdminConfig logConfig18 = AdminConfig.createLogConfig();\n  AdminConfig logConfig19 = AdminConfig.createLogConfig();\n  AdminConfig logConfig20 = AdminConfig.createLogConfig();\n  AdminConfig logConfig21 = AdminConfig.createLogConfig();\n  AdminConfig logConfig22 = AdminConfig.createLogConfig();\n  AdminConfig logConfig23 = AdminConfig.createLogConfig();\n  AdminConfig logConfig24 = AdminConfig.createLogConfig();\n  AdminConfig logConfig25 = AdminConfig.createLogConfig();\n  AdminConfig logConfig26 = AdminConfig.createLogConfig();\n  AdminConfig logConfig27 = AdminConfig.createLogConfig();\n  AdminConfig logConfig28 = AdminConfig.createLogConfig();\n  AdminConfig logConfig29 = AdminConfig.createLogConfig();\n  AdminConfig logConfig30 = AdminConfig.createLogConfig();\n  AdminConfig logConfig31 = AdminConfig.createLogConfig();\n  AdminConfig logConfig32 = AdminConfig.createLogConfig();\n  AdminConfig logConfig33 = AdminConfig", "CodeBleu_score": 17.551708510700724}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t// Create AdminConfig objects for each string in the list\n\t\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n\t\tfor (String string : stringList) {\n\t\t\tAdminConfig config = AdminConfig.createAdminConfig();\n\t\t\tconfig.setName(string);\n\t\t\tconfig.setStatus(\"enabled\");\n\t\t\tconfig.setValue(\"true\");\n\t\t\tconfigList.add(config);\n\t\t}\n\n\t\t// Remove existing configurations with the specified log configuration name\n\t\tAdminConfig.remove(AdminConfig.list(AdminConfig.LOG_WELCOME_SPEECH, \"name=\" + logConfigurationName));\n\n\t\t// Add the new configurations in batch\n\t\tAdminConfig.saveBatch(configList);\n\n\t}", "CodeBleu_score": 39.59285203911266}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t// Create a new AdminConfig object for each string in the list\n    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        configList.add(AdminConfig.createLogWelcomeSpeech(string));\n    }\n    // Remove existing configurations with the specified log configuration name\n    AdminConfig.remove(AdminConfig.listLogWelcomeSpeechs(null, null).get(0));\n    // Save the new list of configurations in batch\n    AdminConfig.saveBatch(configList, true);\n}", "CodeBleu_score": 30.827289912079664}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tif (adminInitDataBO == null) {\n        throw new IllegalArgumentException(\"adminInitDataBO is null\");\n    }\n    if (adminInitDataBO.getPassword() == null) {\n        throw new IllegalArgumentException(\"password is null\");\n    }\n    if (adminInitDataBO.getUsername() == null) {\n        throw new IllegalArgumentException(\"username is null\");\n    }\n\n    String userId = getUserId(adminInitDataBO.getUsername());\n    if (userId == null) {\n        throw new IllegalArgumentException(\"username is not registered\");\n    }\n\n    String salt = getSalt(userId);\n    if (salt == null) {\n        throw new IllegalArgumentException(\"username is not registered\");\n    }\n\n    String password = getPassword(userId);\n    if (password == null) {\n        throw new IllegalArgumentException(\"username is not registered\");\n    }\n\n    String username = getUsername(userId);\n    if (username == null) {\n        throw new IllegalArgumentException(\"username is not registered\");\n    }\n\n    String passwordHash = getPasswordHash(username, adminInitDataBO.getPassword(), salt);\n    if (passwordHash == null) {\n        throw new IllegalArgumentException(\"password is incorrect\");\n    }\n\n    if (!passwordHash.equals(password)) {\n        throw new IllegalArgumentException(\"password is incorrect\");\n    }\n\n    String accessCode = getAccessCode();\n    if (accessCode == null) {\n        throw new IllegalArgumentException(\"accessCode is null\");\n    }\n\n    getRedis().setex(accessCode, 600, userId);\n\n    return accessCode;\n}", "CodeBleu_score": 27.910593448178222}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString userId = adminInitDataBO.getUserId();\n    String password = adminInitDataBO.getPassword();\n    String username = getUsername(userId);\n    String salt = getSalt(username);\n    String storedPassword = getPassword(username);\n    if (password.equals(storedPassword)) {\n        String code = generateAccessCode();\n        setex(code, 600);\n        return code;\n    } else {\n        throw new InvalidPasswordException();\n    }\n}", "CodeBleu_score": 29.749231808040015}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString userId = adminInitDataBO.getUserId();\n    String password = adminInitDataBO.getPassword();\n    String username = adminInitDataBO.getUsername();\n    String salt = adminInitDataBO.getSalt();\n    String hashedPassword = HashUtil.getHashedValue(password, username);\n    String storedHashedPassword = getPassword(userId);\n    if (!storedHashedPassword.equals(hashedPassword)) {\n        throw new InvalidPasswordException();\n    }\n    String accessCode = generateAccessCode();\n    setex(accessCode, 600);\n    return accessCode;\n}", "CodeBleu_score": 34.001620740419206}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t// Get the user ID.\n    String userId = getUserId();\n    // Construct a key.\n    String key = \"initAuth:\" + userId;\n    // Fetch the list of unauthorized menu URLs from Redis.\n    List<String> initAuth = getRedis().lrange(key, 0, -1);\n    // Check if the initial authentication URL is in the list.\n    if (initAuth.contains(get())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 32.435126411353565}, {"code": "private boolean verifyInitAuth(){\n\tdef userId = getUserId()\n    def key = \"initAuth:\" + userId\n    def unauthList = redis.get(key)\n    if (unauthList) {\n        def unauthListArray = unauthList.split(\",\")\n        if (unauthListArray.contains(get())) {\n            return true\n        }\n    }\n    return false\n}", "CodeBleu_score": 30.785339810206093}, {"code": "private boolean verifyInitAuth(){\n\tdef userId = getUserId()\n    def key = \"unauthorized-init-auth-urls-${userId}\"\n    def unauthorizedUrls = redisService.getList(key)\n    return unauthorizedUrls.contains(getInitialAuthenticationUrl())\n}", "CodeBleu_score": 20.936052601074653}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 63.374232765386566}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 63.374232765386566}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    // save in batches\n    saveBatch(list);\n}", "CodeBleu_score": 63.35884330685371}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.remove(\"id\");\n        String createTime = formatDateTime(sysLog.getCreateTime());\n        map.put(\"createTime\", createTime);\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n                @Override\n                public void onResponse(IndexResponse indexResponse) {\n                    if (indexResponse.status() == RestStatus.CREATED) {\n                        log.info(\"\u7cfb\u7edf\u65e5\u5fd7\u521b\u5efa\u6210\u529f,id:{}\", indexResponse.getId());\n                    } else {\n                        log.info(\"\u7cfb\u7edf\u65e5\u5fd7\u521b\u5efa\u5931\u8d25,id:{}\", indexResponse.getId());\n                    }\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u521b\u5efa\u5931\u8d25,msg:{}\", e.getMessage());\n                }\n            });\n        } catch (IOException e) {\n            log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u521b\u5efa\u5931\u8d25,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.63714422420146}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 50.61613298991805}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map, XContentType.JSON);\n        try {\n            restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n                @Override\n                public void onResponse(IndexResponse indexResponse) {\n                    if (indexResponse.status() == RestStatus.CREATED) {\n                        log.info(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u6210\u529f,id:{}\", indexResponse.getId());\n                    }\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25,msg:{}\", e.getMessage());\n                }\n            });\n        } catch (IOException e) {\n            log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 47.7065054408907}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //sort\n        searchSourceBuilder.sort(querySysLogBO.getType() == null ? \"loginTime\" : \"createTime\", SortOrder.DESC);\n        searchSourceBuilder.fetchSource(false);\n        searchSourceBuilder.fetchSource(new String[]{\"id\",\"userId\",\"userName\",\"model\",\"subModelLabel\",\"subModelId\",\"createTime\",\"loginTime\",\"ip\",\"address\"}, null);\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n            return null;\n        }\n        SearchHits hits = searchResponse.getHits();\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit hit : hits.getHits()) {\n            Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n            SysLog sysLog = new SysLog();\n            sysLog.setId(Long.valueOf(sourceAsMap.get(\"id\").toString()));\n            sysLog.setUserId(Long.valueOf(sourceAsMap.get(\"userId\").toString()));\n            sysLog.setUserName(sourceAsMap.get(\"userName\").toString());\n            sysLog.setModel(sourceAsMap.get(\"model\").toString());\n            sysLog.setSubModelLabel(sourceAsMap.get(\"subModelLabel\").toString());\n            sysLog.setSubModelId(Long.valueOf(sourceAsMap.get(\"subModelId\").toString()));\n            sysLog.setCreateTime(LocalDateTime.parse(sourceAsMap.get(\"createTime\").toString()));\n            sysLog.setLoginTime(LocalDateTime.parse(sourceAsMap.get(\"loginTime\").toString()));\n            sysLog.setIp(sourceAsMap.get(\"ip\").toString());\n            sysLog.setAddress(sourceAsMap.get(\"address\").toString());", "CodeBleu_score": 53.54952566630682}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            List<SysLog> sysLogList = getSysLogList(searchResponse);\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setPage(querySysLogBO.getPage());\n            basePage.setLimit(querySysLogBO.getLimit());\n            basePage.setTotal(getTotalHits(searchResponse));\n            basePage.setList(sysLogList);\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 49.35053808432007}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(createSearchSourceBuilder(querySysLogBO));\n        SearchResponse searchResponse;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            return getPage(searchResponse, querySysLogBO.getPageType());\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 28.504871269525484}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 91.45601884193476}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on\n      (\"error\", function (err) {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 89.15337737219762}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 91.45601884193476}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn getLiveModules()\n   .filter(module -> !circularDependencyCheckSet.contains(module.getId()))\n   .flatMapMany(dependentModule -> getDependentModules(dependentModule, new HashSet<>(circularDependencyCheckSet)))\n   .collectList()\n   .onErrorContinue(throwable -> {\n    LOG.warn(getMessage(\"Error retrieving dependent modules for module {0}: {1}\", module.getId(), throwable.getMessage()));\n   })\n   .map(dependentModules -> {\n    circularDependencyCheckSet.add(module.getId());\n    return Stream.concat(Stream.of(module), dependentModules.stream()).collect(Collectors.toList());\n   });\n }", "CodeBleu_score": 48.47207934729436}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn getLiveModules()\n                .filter(m -> m.getId().equals(module.getId()) || m.getId().equals(module.getParentId()))\n                .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n                .doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n                .collectList()\n                .flatMapMany(modules -> Flux.fromIterable(modules))\n                .flatMap(m -> getDependentModules(m, circularDependencyCheckSet));\n    }", "CodeBleu_score": 51.37032468303141}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn this.getLiveModules(module.getDependencies())\n            .filter(module -> !circularDependencyCheckSet.contains(module.getId()))\n            .doOnNext(module -> circularDependencyCheckSet.add(module.getId()))\n            .flatMapMany(module -> this.getDependentModules(module, circularDependencyCheckSet));\n}", "CodeBleu_score": 49.837950378823955}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tif (createThumbnail) {\n            byte[] data = resizeImage(dataBuffer);\n            DataBufferUtils.release(dataBuffer);\n            dataBuffer = new DefaultDataBufferFactory().wrap(data);\n            MediaType contentType = MediaType.IMAGE_JPEG;\n            return new Asset(dataBuffer, contentType);\n        } else {\n            DataBufferUtils.", "CodeBleu_score": 46.41205087371706}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = dataBuffer.asByteArray();\n        MediaType contentType = srcContentType;\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n            contentType = MediaType.IMAGE_JPEG;\n        }\n        DataBufferUtils.release(dataBuffer);\n        Asset asset = new Asset();\n        asset.setContentType(contentType);\n        asset.setData(data);\n        return asset;\n    }", "CodeBleu_score": 58.60108579683132}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = dataBuffer.asByteArray();\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        }\n        DataBufferUtils.release(dataBuffer);\n        Asset asset = new Asset();\n        asset.setContentType(srcContentType);\n        asset.setData(data);\n        return asset;\n    }", "CodeBleu_score": 42.66522512557718}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 45.936941725989094}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(Flux.just(DataBufferUtils.writeString(exchange.getResponse().bufferFactory(), asset.getData(), StandardCharsets.UTF_8)));\n            });\n}", "CodeBleu_score": 46.334872062474055}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(Flux.just(ByteBuffer.wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 44.849396245158616}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getMode().flatMapIterable(mode -> {\n        if (mode.equals(WorkspaceMode.SAAS)) {\n            return Flux.empty();\n        } else {\n            return getOrganizationInEnterpriseMode().flatMapIterable(organization -> {\n                return organization.getAuthConfigs();\n            });\n        }\n    });\n}", "CodeBleu_score": 27.790427721217405}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getWorkspace().flatMapIterable(workspace -> getOrganizationInEnterpriseMode(workspace.getId()))\n        .flatMap(organization -> getAuthConfigs(organization.getId()))\n        .collectList()\n        .map(authConfigs -> authConfigs.stream().map(authConfig -> new FindAuthConfig(authConfig, organization)).collect(Collectors.toList()));\n}", "CodeBleu_score": 27.15465155708465}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn getMode().flatMapIterable(this::getOrganizationInEnterpriseMode)\n        .map(this::getWorkspace)\n        .flatMapIterable(this::getAuthConfigs)\n        .collectList()\n        .map(this::toList)\n        .switchIfEmpty(empty());\n}", "CodeBleu_score": 13.96559838644505}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockSpring5.MongockApplicationRunner runner = MongockSpring5.builder()\n\t\t\t\t.setDriver(mongoTemplate.getDb().getMongoClient())\n\t\t\t\t.setSpringContext(springContext)\n\t\t\t\t.addChangeLogsScanPackages(\"com.example.mongock.changelogs\")\n\t\t\t\t.buildApplicationRunner();\n\t\treturn runner;\n\t}", "CodeBleu_score": 36.13683031114461}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongoClient mongoClient = mongoTemplate.getDb().getMongo();\n    MongoClientSettings settings = mongoClient.getSettings();\n    MongoClientSettings.Builder builder = MongoClientSettings.builder(settings);\n\n    builder.writeConcern(WriteConcern.ACKNOWLEDGED);\n    builder.readConcern(ReadConcern.MAJORITY);\n\n    MongoClientSettings settings2 = builder.build();\n    MongoClient mongoClient2 = MongoClients.create(settings2);\n\n    MongockSpring5.MongockApplicationRunner mongockApplicationRunner = MongockSpring5.builder()\n        .setSpringContext(springContext)\n        .setDriver(mongoClient2)\n        .addChangeLogsScanPackages(\"com.example.changelogs\")\n        .setWriteConcern(WriteConcern.ACKNOWLEDGED)\n        .setReadConcern(ReadConcern.MAJORITY)\n        .buildApplicationRunner();\n\n    return mongockApplicationRunner;\n}", "CodeBleu_score": 45.70065576894089}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockSpring5.MongockApplicationRunner runner = new MongockSpring5.MongockApplicationRunner();\n    runner.setSpringContext(springContext);\n    runner.setDriver(mongoTemplate.getDb().getMongo());\n    runner.setReadConcern(ReadConcern.MAJORITY);\n    runner.setWriteConcern(WriteConcern.MAJORITY);\n    runner.addChangeLogsScanPackages(\"com.mycompany.myproject.changelogs\");\n    runner.setJournal(true);\n    return runner;\n}", "CodeBleu_score": 44.80389633504159}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 76.2414006140919}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        setReadPreference(template);\n        return template;\n    }", "CodeBleu_score": 61.09019508817257}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n    setReadPreference(reactiveMongoTemplate);\n\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 63.64717861011107}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n                .map(LibraryQuery::getDsl)\n                .defaultIfEmpty(Mono.defer(() -> getById(libraryQueryId).map(LibraryQuery::getDsl)))\n                .map(Mono::just)\n                .flatMap(Function.identity())\n                .defaultIfEmpty(Mono.defer(() -> Mono.error(new AppsmithException(ErrorType.INVALID_PARAMETER, \"LIBRARY_QUERY_NOT_FOUND\"))))\n                .map(libraryQueryDsl -> {\n                    Map<String, Object> dsl = new HashMap<>();\n                    dsl.put(\"query\", libraryQueryDsl);\n                    return dsl;\n                });\n    }", "CodeBleu_score": 46.72515219538414}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n                .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n                .flatMap(libraryQueryRecord -> getLiveDSLByLibraryQueryRecordId(libraryQueryRecord.getId()));\n    }", "CodeBleu_score": 33.70076256026233}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n                .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n                .flatMap(libraryQueryRecord -> getLiveDSLByLibraryQueryRecord(libraryQueryRecord));\n    }", "CodeBleu_score": 33.99912436355186}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tMono<QueryExecutionResult> queryExecutionResult;\n        if (isJsDatasourcePlugin(datasource.getType())) {\n            queryExecutionResult = executeByNodeJs(datasource, queryConfig, requestParams);\n        } else {\n            queryExecutionResult = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n        return queryExecutionResult\n                .timeout(parseQueryTimeoutMs(timeoutStr), Mono.just(QueryExecutionResult.error(new PluginException(TIMEOUT_ERROR))))\n                .onErrorMap(e -> {\n                    if (e instanceof TimeoutException) {\n                        return new PluginException(TIMEOUT_ERROR);\n                    } else if (e instanceof PluginException) {\n                        return (PluginException) e;\n                    } else {\n                        return new PluginException(GENERIC_EXECUTION_ERROR);\n                    }\n                })\n                .onErrorResume(e -> Mono.just(QueryExecutionResult.error(e)))\n                .doOnError(e -> log.error(getMessage(GENERIC_EXECUTION_ERROR), e));\n    }", "CodeBleu_score": 53.132023507554095}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t// If the query is a JS plugin, execute it using the plugin\n        if (isJsDatasourcePlugin(datasource)) {\n            return executeByNodeJs(datasource, queryConfig, requestParams)\n                    .onErrorMap(error -> {\n                        if (error instanceof AppsmithPluginException) {\n                            return error;\n                        }\n                        return new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_ERROR,\n                                \"Error while executing the query: \" + error.getMessage()\n                        );\n                    });\n        }\n\n        // If the query is not a JS plugin, execute it locally\n        return Mono.defer(() -> {\n            var timeout = parseQueryTimeoutMs(timeoutStr);\n            return Mono.just(timeout)\n                    .flatMap(queryTimeout -> executeLocally(datasource, queryConfig, requestParams, queryVisitorContext))\n                    .timeout(queryTimeout, Mono.error(new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                            \"Query execution timed out after \" + queryTimeout + \"ms.\"\n                    )))\n                    .onErrorResume(error -> {\n                        if (error instanceof TimeoutException) {\n                            return Mono.error(new AppsmithPluginException(\n                                    AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                                    \"Query execution timed out after \" + timeout + \"ms.\"\n                            ));\n                        }\n                        if (error instanceof AppsmithPluginException) {\n                            return Mono.error(error);\n                        }\n                        return Mono.error(new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_ERROR,\n                                \"Error while executing the query: \" + error.getMessage()\n                        ));\n                    });\n        });\n    }", "CodeBleu_score": 45.55826555715373}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tMono<QueryExecutionResult> queryExecutionResultMono;\n        if (isJsDatasourcePlugin(datasource.getType())) {\n            queryExecutionResultMono = executeByNodeJs(datasource, queryConfig, requestParams);\n        } else {\n            queryExecutionResultMono = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n\n        return queryExecutionResultMono\n                .timeout(parseQueryTimeoutMs(timeoutStr))\n                .onErrorResume(error -> {\n                    if (error instanceof TimeoutException) {\n                        return Mono.error(new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                                \"Query timed out. Please try reducing the time range or the time granularity.\"\n                        ));\n                    }\n\n                    if (error instanceof AppsmithPluginException) {\n                        return Mono.error(error);\n                    }\n\n                    log.error(\"Error executing query\", error);\n                    return Mono.error(new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_ERROR,\n                            \"Error executing query. Please check the server logs for more information.\"\n                    ));\n                });\n    }", "CodeBleu_score": 50.25691359695708}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn getQueryExecutor(datasource)\n                .flatMap(queryExecutor -> buildQueryExecutionContextMono(datasource, queryConfig, requestParams, queryVisitorContext, queryExecutor))\n                .flatMap(queryExecutionContext -> getOrCreateConnection(datasource)\n                        .flatMap(connection -> getT1(connection, queryExecutionContext)\n                                .flatMap(connectionAndQueryExecutionContext -> doExecuteQuery(connectionAndQueryExecutionContext, queryExecutor)\n                                        .onErrorResume(error -> Mono.just(getT2(queryExecutionContext, error))))));\n    }", "CodeBleu_score": 33.5061697592016}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.fromCallable(() -> getQueryExecutor(datasource))\n                .flatMap(queryExecutor -> buildQueryExecutionContextMono(queryExecutor, queryConfig, requestParams, queryVisitorContext))\n                .flatMap(queryExecutionContext -> getOrCreateConnection(datasource, queryExecutionContext.getConnectionRequest()))\n                .flatMap(connection -> Mono.fromCallable(() -> getQueryExecutor(datasource).execute(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getDetail(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getT1(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getT2(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getDetailConfig(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getOnError(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getQuery(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getQueryWithParams(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getQueryWithoutParams(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getQueryExecutorType(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getQueryContext(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> getQueryExecutor(datasource).getQueryContextWithParams(connection, queryExecutionContext)))\n                .flatMap(queryExecutionResult -> Mono.fromCallable(() -> get", "CodeBleu_score": 30.336980342085972}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn getDetailConfig(datasource)\n                .flatMap(config -> {\n                    final Mono<QueryExecutor> queryExecutorMono = getQueryExecutor(config, datasource);\n                    final Mono<Connection> connectionMono = getOrCreateConnection(datasource);\n                    return Mono.zip(queryExecutorMono, connectionMono)\n                            .flatMap(tuple -> {\n                                final QueryExecutor queryExecutor = tuple.getT1();\n                                final Connection connection = tuple.getT2();\n                                final Mono<QueryExecutionContext> queryExecutionContextMono = buildQueryExecutionContextMono(\n                                        datasource,\n                                        queryConfig,\n                                        requestParams,\n                                        queryVisitorContext,\n                                        connection,\n                                        queryExecutor\n                                );\n                                return queryExecutionContextMono\n                                        .flatMap(queryExecutionContext -> {\n                                            final Mono<QueryExecutionResult> queryExecutionResultMono = doExecuteQuery(\n                                                    queryExecutionContext,\n                                                    queryExecutor\n                                            );\n                                            return queryExecutionResultMono\n                                                    .doOnError(throwable -> {\n                                                        if (throwable instanceof StaleConnectionException) {\n                                                            log.error(\"Stale connection error occurred while executing query: {}\",\n                                                                    queryExecutionContext.getQuery());\n                                                            closeConnection(connection);\n                                                        }\n                                                    })\n                                                    .onErrorResume(throwable -> {\n                                                        if (throwable instanceof StaleConnectionException) {\n                                                            log.error(\"Stale connection error occurred while executing query: {}\",\n                                                                    queryExecutionContext.getQuery());\n                                                            return Mono.empty();\n                                                        }\n                                                        return Mono.error(throwable);\n                                                    })\n                                                    .flatMap(queryExecutionResult -> {\n                                                        final Mono<Void> closeConnectionMono = closeConnection(connection);\n                                                        return closeConnectionMono\n                                                                .thenReturn(queryExecutionResult);", "CodeBleu_score": 36.678596039564404}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n        if (unitIndex == -1) {\n            unitIndex = timeoutStr.length();\n        }\n        String valueStr = timeoutStr.substring(0, unitIndex);\n        double value;\n        try {\n            value = Double.parseDouble(valueStr);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(String.format(\"Invalid timeout value: '%s'\", valueStr));\n        }\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs > MAX_TIMEOUT_MS) {\n            throw new IllegalArgumentException(String.format(\"Timeout value (%s) exceeds maximum allowed value (%s)\", timeoutStr, MAX_TIMEOUT_MS));\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 58.33289364128961}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_TIMEOUT_MS;\n        }\n        int unitIndex = StringUtils.indexOfAny(timeoutStr, 'M', 'm');\n        if (unitIndex == -1) {\n            unitIndex = StringUtils.indexOfAny(timeoutStr, 'S', 's');\n        }\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid timeout: \" + timeoutStr);\n        }\n        String unit = timeoutStr.substring(unitIndex).toLowerCase();\n        String valueStr = timeoutStr.substring(0, unitIndex);\n        double value;\n        try {\n            value = Double.parseDouble(valueStr);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid timeout: \" + timeoutStr);\n        }\n        if (value < 0) {\n            throw new IllegalArgumentException(\"Invalid timeout: \" + timeoutStr);\n        }\n        if (unit.equals(\"ms\")) {\n            if (value > MAX_TIMEOUT_MS) {\n                throw new IllegalArgumentException(\"Timeout is too large: \" + timeoutStr);\n            }\n            return (int) value;\n        } else if (unit.equals(\"s\")) {\n            if (value > MAX_TIMEOUT_SECONDS) {\n                throw new IllegalArgumentException(\"Timeout is too large: \" + timeoutStr);\n            }\n            return (int) (value * 1000);\n        } else {\n            throw new IllegalArgumentException(\"Invalid timeout unit: \" + timeoutStr);\n        }\n    }", "CodeBleu_score": 46.90862060123921}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n\n        String numericValue = timeoutStr.substring(0, unitIndex);\n        int numericValueLength = numericValue.length();\n        if (numericValueLength == 0) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n        char lastChar = numericValue.charAt(numericValueLength - 1);\n        if (lastChar == '.') {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n\n        double value;\n        try {\n            value = Double.parseDouble(numericValue);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n\n        if (value < 0) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n\n        if (value > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed value: \" + timeoutStr);\n        }\n\n        return convertToMs(value, unit);\n    }", "CodeBleu_score": 55.87707336561847}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n                .flatMap(queries -> {\n                    if (queries.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_DATASOURCES_FOUND_IN_APPLICATION));\n                    }\n                    return Mono.zip(\n                            Mono.just(queries),\n                            getDatasourceIdFromQueries(queries)\n                    );\n                })\n                .flatMap(tuple -> {\n                    List<Query> queries = tuple.getT1();\n                    List<String> datasourceIds = tuple.getT2();\n\n                    return Mono.zip(\n                            Mono.just(queries),\n                            Mono.just(datasourceIds),\n                            Flux.fromIterable(datasourceIds)\n                                    .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                                    .collectList()\n                    );\n                })\n                .flatMap(tuple -> {\n                    List<Query> queries = tuple.getT1();\n                    List<String> datasourceIds = tuple.getT2();\n                    List<String> copiedDatasourceIds = tuple.getT3();\n\n                    if (datasourceIds.size() != copiedDatasourceIds.size()) {\n                        return Mono.error(new AppsmithException(AppsmithError.FAILED_TO_COPY_DATASOURCES));\n                    }\n\n                    List<Pair<String, String>> datasourceIdPairList = new ArrayList<>();\n\n                    for (int i = 0; i < datasourceIds.size(); i++) {\n                        datasourceIdPairList.add(new Pair<>(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n                    }\n\n                    return Mono.just(datasourceIdPairList);\n                });\n    }", "CodeBleu_score": 42.64101659914995}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n                .flatMap(liveQueries -> {\n                    if (liveQueries.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"Queries\"));\n                    }\n\n                    return Mono.zip(\n                            Mono.just(liveQueries),\n                            getDatasourceIdFromQueries(liveQueries)\n                    );\n                })\n                .flatMap(tuple -> {\n                    List<Query> liveQueries = tuple.getT1();\n                    List<String> datasourceIds = tuple.getT2();\n\n                    return copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, visitorId, datasourceIds)\n                            .collectList()\n                            .map(copiedDatasourceIds -> IntStream.range(0, datasourceIds.size())\n                                    .mapToObj(index -> new Pair<>(datasourceIds.get(index), copiedDatasourceIds.get(index)))\n                                    .collect(Collectors.toList())\n                            );\n                })\n                .flatMap(datasourceIdPairs -> {\n                    List<Pair<String, String>> datasourceIdPairList = datasourceIdPairs;\n\n                    return applicationPageService.getApplicationById(application.getId(), AclPermission.MANAGE_APPLICATIONS)\n                            .flatMap(application1 -> {\n                                List<NewAction> newActions = liveQueries.stream()\n                                        .map(query -> {\n                                            NewAction newAction = new NewAction();\n                                            newAction.setName(query.getName());\n                                            newAction.setPageId(application1.getPages().get(0).getId());\n                                            newAction.setDatasource(datasourceIdPairList.get(0).getT2());\n                                            newAction.setActionConfiguration(query.getActionConfiguration());\n                                            newAction.setActionType(ActionType.getActionType(query.getActionConfiguration().getPluginType()));\n                                            return newAction;\n                                        })", "CodeBleu_score": 39.55884460262519}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n                .flatMap(queries -> {\n                    if (queries.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.QUERY));\n                    }\n                    return Flux.fromIterable(queries)\n                            .flatMap(query -> {\n                                final String datasourceId = query.getDatasource().getId();\n                                return doCopyDatasource(currentOrganizationId, datasourceId, visitorId);\n                            })\n                            .collectList();\n                });\n    }", "CodeBleu_score": 35.29433680948788}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystem() && datasource.getIsSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                    return getId(datasource);\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 54.1767960333551}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystem() == null || !datasource.getIsSystem()) {\n                    if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                        return getId(datasource);\n                    } else {\n                        return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                    }\n                } else {\n                    return Mono.just(datasourceId);\n                }\n            });\n}", "CodeBleu_score": 50.610011900930054}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (isSystemStatic(datasource)) {\n                    return Mono.just(datasource.getId());\n                } else if (isLegacyQuickRestApi(datasource)) {\n                    return getLegacyQuickRestApiId(datasource);\n                } else if (isLegacyOpenblocksApi(datasource)) {\n                    return getLegacyOpenblocksApiId(datasource);\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 52.243026635498936}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t// Get the new avatar\n        Asset newAvatar = new Asset(filePart);\n\n        // If the user already has an avatar, delete it\n        if (!isEmpty(user.getAvatar())) {\n            remove(user.getAvatar());\n        }\n\n        // Save the new avatar\n        save(newAvatar);\n\n        // Update the user's profile with the new avatar\n        return updateUserAvatar(newAvatar, user.getId());\n    }", "CodeBleu_score": 20.817000795365797}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn saveProfilePhoto(filePart, user, null);\n    }", "CodeBleu_score": 8.142472824176606}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t// Create a new asset\n        Asset newAvatar = new Asset();\n        newAvatar.setId(filePart.getSubmittedFileName());\n        newAvatar.setSize(filePart.getSize());\n        newAvatar.setType(filePart.getContentType());\n        newAvatar.setData(filePart.getInputStream());\n\n        // If the user already has an avatar, remove it\n        if (user.getAvatar() != null) {\n            assetRepository.deleteById(user.getAvatar());\n        }\n\n        // Save the new avatar\n        return assetRepository.save(newAvatar)\n                .then(updateUserAvatar(newAvatar, user.getId()));\n    }", "CodeBleu_score": 30.707574444413037}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\treturn Mono.just(new User())\n            .map(user -> {\n                user.setName(authUser.getName());\n                user.setState(UserState.ACTIVE);\n                user.setIsEnabled(true);\n                user.setAvatar(authUser.getAvatar());\n                return user;\n            })\n            .flatMap(user -> {\n                if (authUser.getSource() == AuthSource.EMAIL) {\n                    if (authUser.getAuthContext().containsKey(AuthContextKeys.PASSWORD)) {\n                        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContextKeys.PASSWORD)));\n                    }\n                }\n                return user;\n            })\n            .flatMap(user -> {\n                user.setConnections(authUser.getConnections());\n                user.setIsNewUser(true);\n                return user;\n            })\n            .flatMap(repository::save);\n}", "CodeBleu_score": 35.2336416911828}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\treturn Mono.just(User.builder()\n            .name(authUser.getName())\n            .state(authUser.getState())\n            .isEnabled(authUser.getIsEnabled())\n            .avatar(authUser.getAvatar())\n            .build())\n            .flatMap(user -> {\n                if (authUser.getSource().equals(AuthSource.EMAIL)) {\n                    if (authUser.getAuthContext().containsKey(AuthContextKey.PASSWORD)) {\n                        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContextKey.PASSWORD)));\n                    }\n                }\n                return Mono.just(user);\n            })\n            .flatMap(user -> {\n                if (authUser.getConnections() != null) {\n                    user.setConnections(new HashSet<>(authUser.getConnections()));\n                }\n                return Mono.just(user);\n            })\n            .flatMap(user -> {\n                user.setIsNewUser(true);\n                return Mono.just(user);\n            })\n            .flatMap(repository::save);\n}", "CodeBleu_score": 36.952549633692385}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n        user.setName(authUser.getName());\n        user.setState(authUser.getState());\n        user.setIsEnabled(authUser.isEnabled());\n        user.setIsNewUser(true);\n        user.setAvatar(authUser.getAvatar());\n        user.setConnections(new HashSet<>(authUser.getConnections()));\n        if (authUser.getAuthContext().containsKey(AuthContextKeys.PASSWORD)) {\n            String password = (String) authUser.getAuthContext().get(AuthContextKeys.PASSWORD);\n            user.setPassword(encryptionService.encryptPassword(password));\n        }\n        return repository.save(user);\n    }", "CodeBleu_score": 49.25802507292763}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.from(connectionRepository.findByProviderIdAndProviderUserId(EmailConnection.PROVIDER_ID, email))\n            .switchIfEmpty(Mono.fromCallable(() -> new EmailConnection(email)))\n            .flatMap(connection -> {\n                connection.setUser(user);\n                return connectionRepository.save(connection);\n            })\n            .then(Mono.from(userRepository.save(user)))\n            .thenReturn(true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 28.270675204672436}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.fromCallable(() -> {\n        Connection emailConnection = new Connection(user.getId(), email, Connection.PROVIDER_GOOGLE, Connection.PROVIDER_GOOGLE, Connection.PROVIDER_GOOGLE, Connection.PROVIDER_GOOGLE);\n        emailConnection.setRawId(email);\n        emailConnection.setDisplayName(email);\n        emailConnection.setProfileUrl(email);\n        emailConnection.setImageUrl(email);\n        emailConnection.setAccessToken(email);\n        emailConnection.setRefreshToken(email);\n        emailConnection.setExpiresIn(email);\n        emailConnection.setExpiresAt(email);\n        emailConnection.setRefreshToken(email);\n        emailConnection.setCreatedAt(email);\n        emailConnection.setUpdatedAt(email);\n        emailConnection.setDeletedAt(email);\n        emailConnection.setDeleted(email);\n        emailConnection.setUser(user);\n        emailConnection.setStrategy(Connection.Strategy.JUST_IN_TIME);\n        emailConnection.setConnectionData(new ConnectionData());\n        emailConnection.getConnectionData().setProviderUserId(email);\n        emailConnection.getConnectionData().setDisplayName(email);\n        emailConnection.getConnectionData().setProfileUrl(email);\n        emailConnection.getConnectionData().setImageUrl(email);\n        emailConnection.getConnectionData().setAccessToken(email);\n        emailConnection.getConnectionData().setRefreshToken(email);\n        emailConnection.getConnectionData().setExpiresIn(email);\n        emailConnection.getConnectionData().setExpiresAt(email);\n        emailConnection.getConnectionData().setRefreshToken(email);\n        emailConnection.getConnectionData().setCreatedAt(email);\n        emailConnection.getConnectionData().setUpdatedAt(email);\n        emailConnection.getConnectionData().setDeletedAt(email);\n        emailConnection.getConnectionData().setDeleted(email);\n        emailConnection.getConnectionData().setUser(user);\n        emailConnection.getConnectionData().setStrategy(Connection.Strategy.JUST_IN_TIME);\n        emailConnection.getConnectionData().setConnectionData(new ConnectionData());", "CodeBleu_score": 34.96905410315355}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.defer(() -> {\n        Connection connection = new Connection(user.getId(), email, Connection.ConnectionSource.EMAIL, Connection.ConnectionStatus.PENDING);\n        return connectionRepository.save(connection).then(userRepository.save(user)).then(Mono.just(true)).onErrorResume(e -> {\n            if (e instanceof DuplicateKeyException) {\n                return Mono.just(false);\n            }\n            return Mono.error(e);\n        });\n    });\n}", "CodeBleu_score": 50.8909115824784}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n                .flatMap(user -> {\n                    if (!user.matchPassword(oldPassword)) {\n                        return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n                    }\n\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return repository.save(user);\n                })\n                .thenReturn(true);\n    }", "CodeBleu_score": 23.946296454455243}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!user.getPassword().equals(encryptionService.encryptPassword(oldPassword))) {\n                    throw new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.OLD_PASSWORD);\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 31.90937424320349}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .flatMap(user -> {\n                if (user.getPassword().equals(encryptionService.encryptPassword(oldPassword))) {\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return repository.save(user);\n                }\n\n                return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.PASSWORD));\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 29.021093037466724}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn getUserGroups(userId, orgMember, withoutDynamicGroups)\n                .map(userGroups -> userGroups.stream()\n                        .filter(group -> !group.getId().equals(ALL_USERS_GROUP_ID))\n                        .map(group -> {\n                            String groupName = group.getName(locale);\n                            return ImmutableMap.of(USER_DETAIL_GROUP_ID, group.getId(), USER_DETAIL_GROUP_NAME, groupName);\n                        })\n                        .collect(Collectors.toList())\n                );\n    }", "CodeBleu_score": 27.065246625413536}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn getUserGroupIdsInOrg(orgMember.getOrgId(), orgMember.getUserId())\n                .flatMap(groupIds -> {\n                    if (withoutDynamicGroups) {\n                        return getNonDynamicUserGroupIdsInOrg(orgMember.getOrgId(), orgMember.getUserId())\n                                .map(groupIds::addAll);\n                    }\n                    return Mono.just(groupIds);\n                })\n                .flatMap(groupIds -> {\n                    if (groupIds.isEmpty()) {\n                        return Mono.just(emptyList());\n                    }\n                    return getUserGroupNames(groupIds, locale)\n                            .map(groupNames -> groupNames.stream()\n                                    .filter(groupName -> !groupName.getId().equals(ALL_USERS_GROUP_ID))\n                                    .map(groupName -> {\n                                        Map<String, String> group = new HashMap<>();\n                                        group.put(\"id\", groupName.getId());\n                                        group.put(\"name\", groupName.getName());\n                                        return group;\n                                    })\n                                    .collect(Collectors.toList())\n                            );\n                });\n    }", "CodeBleu_score": 32.3455701522438}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tif (withoutDynamicGroups) {\n            return getNonDynamicUserGroupIdsInOrg(orgMember.getOrgId())\n                    .collectList()\n                    .flatMap(groupIds -> {\n                        if (orgMember.isAdmin()) {\n                            return getUserGroupIdsInOrg(orgMember.getOrgId())\n                                    .collectList()\n                                    .flatMap(allGroupIds -> {\n                                        List<String> groupIdsToExclude = new ArrayList<>(allGroupIds);\n                                        groupIdsToExclude.removeAll(groupIds);\n                                        return getUserGroupNames(groupIds, locale)\n                                                .collectList()\n                                                .map(groupNames -> {\n                                                    List<Map<String, String>> userDetailGroups = new ArrayList<>();\n                                                    for (int i = 0; i < groupIds.size(); i++) {\n                                                        String groupId = groupIds.get(i);\n                                                        String groupName = groupNames.get(i);\n                                                        userDetailGroups.add(ImmutableMap.of(groupId, groupName));\n                                                    }\n                                                    return userDetailGroups;\n                                                });\n                                    });\n                        } else {\n                            return getUserGroupNames(groupIds, locale)\n                                    .collectList()\n                                    .map(groupNames -> {\n                                        List<Map<String, String>> userDetailGroups = new ArrayList<>();\n                                        for (int i = 0; i < groupIds.size(); i++) {\n                                            String groupId = groupIds.get(i);\n                                            String groupName = groupNames.get(i);\n                                            userDetailGroups.add(ImmutableMap.of(groupId, groupName));\n                                        }\n                                        return userDetailGroups;\n                                    });\n                        }\n                    });\n        } else {\n            return getUserGroupIdsInOrg(orgMember.getOrgId())\n                    .collectList()\n                    .flatMap(groupIds -> {\n                        if (orgMember.isAdmin()) {\n                            return get", "CodeBleu_score": 32.558641330969536}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus();\n    userStatus.setId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus)\n            .map(result -> result.wasAcknowledged());\n}", "CodeBleu_score": 37.67036296539993}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus();\n    userStatus.setId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(userStatus)\n        .map(result -> result.wasUpserted());\n}", "CodeBleu_score": 37.78246337056923}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class)\n            .map(result -> result.wasUpserted());\n}", "CodeBleu_score": 38.642148819985586}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\trungroup := new(errgroup.Group)\n\tc.partition.Range(func(k, v any) bool {\n\t\tkstr := k.(string)\n\t\tif predicatePartition(kstr, v.(PartitionManager)) {\n\t\t\trungroup.Go(func() error {\n\t\t\t\tv.(PartitionManager).ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t\treturn true\n\t})\n\trungroup.Wait()\n}", "CodeBleu_score": 38.982725082664814}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\trungroup := &errgroup.Group{}\n\tpartition := make(chan string, 100)\n\tfor i := 0; i < runtime.NumCPU(); i++ {\n\t\trungroup.Go(func() error {\n\t\t\tfor partitionKey := range partition {\n\t\t\t\tif predicatePartition(partitionKey, c.partitions[partitionKey]) {\n\t\t\t\t\tc.partitions[partitionKey].ClearMatching(predicateValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\n\t// Enqueue all partitions that satisfy the partition predicate.\n\tfor partitionKey := range c.partitions {\n\t\tpartition <- partitionKey\n\t}\n\tclose(partition)\n\n\t// Wait for all tasks to complete.\n\tif err := rungroup.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 40.69533284290359}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tif c.closed {\n\t\treturn\n\t}\n\trungroup := new(errgroup.Group)\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trungroup.Go(func() error {\n\t\t\t\tp.mu.Lock()\n\t\t\t\tdefer p.mu.Unlock()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tif err := rungroup.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 43.46662660530796}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / averageWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 50.18488580627163}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"The number of partitions and total weight quantity must be greater than zero.\")\n\t}\n\t// Calculate the average weight per partition.\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\t// Calculate the maximum size per partition.\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / averageWeightPerPartition))\n\t// Return the maximum size per partition.\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 48.82828161234175}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Number of partitions and total weight quantity must be greater than zero.\")\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 51.12478247268042}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(this.getConnectionMetadata()).map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            if (metadata != null) {\n                map.put(\"databaseProductName\", metadata.getDatabaseProductName());\n                map.put(\"databaseVersion\", metadata.getDatabaseVersion());\n            }\n            return map;\n        }).block();\n    }", "CodeBleu_score": 41.50081881216115}, {"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(this.getConnectionMetadata())\n            .map(ConnectionMetadata::getDatabaseProductName)\n            .filter(Objects::nonNull)\n            .map(dbName -> {\n                Map<String, Object> map = new HashMap<>();\n                map.put(\"database_name\", dbName);\n                return map;\n            })\n            .switchIfEmpty(Mono.just(Collections.emptyMap()))\n            .block();\n    }", "CodeBleu_score": 31.97446754115903}, {"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(getConnectionMetadata())\n        .map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            if (metadata != null) {\n                map.put(\"database_product_name\", metadata.getDatabaseProductName());\n                map.put(\"database_version\", metadata.getDatabaseVersion());\n            }\n            return map;\n        })\n        .defaultIfEmpty(Collections.emptyMap())\n        .block();\n}", "CodeBleu_score": 40.245408055872076}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tif (configMap.get(\"userSettings\") == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(configMap.get(\"userSettings\").get(\"allowRegistration\"))\n        info.setMustVerifyEmailOnRegistration(configMap.get(\"userSettings\").get(\"mustVerifyEmailOnRegistration\"))\n    }\n}", "CodeBleu_score": 29.08894049982108}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tboolean allowRegistration = configMap.getBoolean(ConfigMapKey.ALLOW_REGISTRATION.getKey());\n\tboolean mustVerifyEmailOnRegistration = configMap.getBoolean(ConfigMapKey.MUST_VERIFY_EMAIL_ON_REGISTRATION.getKey());\n\t\n\tif (allowRegistration == null && mustVerifyEmailOnRegistration == null) {\n\t\tinfo.setAllowRegistration(false);\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t} else {\n\t\tinfo.setAllowRegistration(allowRegistration);\n\t\tinfo.setMustVerifyEmailOnRegistration(mustVerifyEmailOnRegistration);\n\t}\n}", "CodeBleu_score": 49.88736502233937}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tdef userSetting = configMap.get(\"userSetting\")\n    if (userSetting == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSetting.get(\"allowRegistration\"))\n        info.setMustVerifyEmailOnRegistration(userSetting.get(\"mustVerifyEmailOnRegistration\"))\n    }\n}", "CodeBleu_score": 39.38209282321948}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tThreadGroup group = new ThreadGroup(\"Restart\");\n    Thread thread = new Thread(group, new Runnable() {\n        public void run() {\n            try {\n                ClassLoader loader = getClassLoader();\n                Thread.currentThread().setContextClassLoader(loader);\n                Thread.currentThread().setDaemon(false);\n                start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 43.687713338840396}, {"code": "public Object restart(){\n\t// Create a new thread group and thread to execute the restart process.\n\tThreadGroup group = new ThreadGroup(\"Restart Thread Group\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader.\n\t\t\tThread.currentThread().setDaemon(false);\n\t\t\tThread.currentThread().setContextClassLoader(getClassLoader());\n\t\t\t// Execute the restart process.\n\t\t\trestartProcess();\n\t\t}\n\t});\n\t// Start the thread.\n\tthread.start();\n\t// Return a message indicating the restart has begun.\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 46.52245596331158}, {"code": "public Object restart(){\n\t//TODO: Implement this org.microemu.app.Application method\n\treturn null;\n}", "CodeBleu_score": 1.8633354169493859}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tObjectMapper objectMapper = new ObjectMapper();\n    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new ParameterNamesModule());\n    objectMapper.registerModule(new Jdk8Module());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.registerModule(new JavaTimeModule());\n    object", "CodeBleu_score": 17.5182367361573}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.registerModule(new JavaTimeModule());\n        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_FLOAT_AS_INT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_FLOAT_AS_INT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n        objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);", "CodeBleu_score": 17.87628239638733}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 71.09720633011617}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n                RequestPredicates.GET(\"/console/**\")\n                        .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"html\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"js\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"css\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ico\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"png\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"jpg\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff2\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"map\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"svg\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"eot\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ttf\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"otf\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"wasm\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"mjs\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"mjs\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"js\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"js\")))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"js\")))\n                        .and(", "CodeBleu_score": 11.473453073514388}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.negate(RequestPredicates.pathExtension().matches(\"js|css|png|jpg|gif|ico|woff|woff2|ttf|map\")))\n                .and(RequestPredicates.negate(RequestPredicates.webSocket())),\n            request -> getConsole().flatMap(console -> serveIndex(console.getIndexLocation()))\n        );\n    }", "CodeBleu_score": 24.859072831065863}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n                RequestPredicates.GET(\"/console/**\")\n                        .and(RequestPredicates.accept(MediaType.TEXT_HTML)\n                                .negate())\n                        .and(RequestPredicates.websocket().negate())\n                        .and(RequestPredicates.path(\"/console/assets/**\")\n                                .negate()),\n                request -> {\n                    var consoleLocation = request.path()\n                            .pathWithinApplication()\n                            .value();\n                    return getConsole().map(console -> {\n                        var consoleIndex = console.getIndexLocation();\n                        if (consoleIndex == null) {\n                            throw new IllegalStateException(\"Console index location not set\");\n                        }\n                        return serveIndex(consoleIndex + consoleLocation);\n                    });\n                });\n    }", "CodeBleu_score": 29.127284078273085}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.headers(HttpHeaders.UPGRADE, \"websocket\")))\n                .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))),\n            request -> serveIndex(\"/uc/index.html\")\n        );\n    }", "CodeBleu_score": 23.37740310288395}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML)\n                    .and(RequestPredicates.not(RequestPredicates.headers(HttpHeaders.UPGRADE, HttpHeaders.CONNECTION))))\n                .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n                .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))),\n            request -> serveIndex(\"/uc/index.html\"));\n    }", "CodeBleu_score": 21.658557219062065}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.websocket()))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"html\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"js\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"css\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ico\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"png\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"jpg\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"svg\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"map\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff2\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ttf\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"eot\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"otf\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"json\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"txt\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"xml\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"svg\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"gif\")))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"pdf\")))\n                .and(RequestPredicates", "CodeBleu_score": 14.807661322573127}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tget {\n        if (repository == null) {\n            repository = new ReactiveIndexedSessionRepository<MapSession>()\n            repository.setDefaultMaxInactiveInterval(defaultMaxInactiveInterval)\n            repository.setDefaultLastAccessedTime(defaultLastAccessedTime)\n            repository.setDefaultCreationTime(defaultCreationTime)\n            repository.setDefaultExpirationTime(defaultExpirationTime)\n            repository.setDefaultLastAccessedTime(defaultLastAccessedTime)\n            repository.setDefaultMaxInactiveInterval(defaultMaxInactiveInterval)\n        }\n        return repository\n    }\n}", "CodeBleu_score": 24.848742463159894}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tget {\n\t\tif (reactiveSessionRepository == null) {\n\t\t\treactiveSessionRepository = new ReactiveIndexedSessionRepository<MapSession>()\n\t\t\treactiveSessionRepository.maxInactiveInterval = getDefaultMaxInactiveInterval()\n\t\t}\n\t\treturn reactiveSessionRepository\n\t}\n}", "CodeBleu_score": 21.953010130635988}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tnew ReactiveIndexedSessionRepository<MapSession>()\n\t\t.setDefaultMaxInactiveInterval(getDefaultMaxInactiveInterval())\n\t\t.setDefaultLastAccessedTime(getDefaultLastAccessedTime())\n\t\t.setDefaultCreationTime(getDefaultCreationTime())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())\n\t\t.setDefaultExpirationPolicy(getDefaultExpirationPolicy())", "CodeBleu_score": 11.167511112107247}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n    userDetailsService.setUserService(userService)\n    userDetailsService.setRoleService(roleService)\n    userDetailsService.setTwoFactorAuthDisabled(haloProperties.security.twoFactorAuthDisabled)\n    return userDetailsService\n}", "CodeBleu_score": 33.65464246348557}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    userDetailsService.setTwoFactorAuthEnabled(haloProperties.security.twoFactorAuth.enabled)\n    userDetailsService\n}", "CodeBleu_score": 33.82284026268341}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n    userDetailsService.setUserService(userService)\n    userDetailsService.setRoleService(roleService)\n    userDetailsService.setTwoFactorAuthEnabled(haloProperties.security.twoFactorAuth.enabled)\n    userDetailsService\n}", "CodeBleu_score": 32.68642449009551}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email);\n    owner.setDisplayName(displayName);\n    owner.setAnnotations(annotations);\n    owner.put(\"avatar\", avatar);\n    owner.put(\"website\", website);\n    return owner;\n}", "CodeBleu_score": 31.661485279774315}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email);\n    owner.setDisplayName(displayName);\n    owner.setAnnotations(annotations);\n    owner.setAvatar(new Comment.Avatar(avatarUrl));\n    owner.setWebsite(website);\n    return owner;\n}", "CodeBleu_score": 30.200783000282094}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email);\n    owner.setDisplayName(displayName);\n    owner.setAnnotations(annotations);\n    owner.setAvatar(avatar);\n    owner.setWebsite(website);\n    return owner;\n}", "CodeBleu_score": 29.18069737173689}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n    User user = fetch(commentOwner.getEmail());\n    return user.getName().equals(post.getOwner().getName());\n  }\n  return commentOwner.getName().equals(post.getOwner().getName());\n}", "CodeBleu_score": 33.37757815816953}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n    User user = User.fetch(commentOwner.getName());\n    return user.getEmail().equals(post.getOwner());\n  } else {\n    return commentOwner.getName().equals(post.getOwner());\n  }\n}", "CodeBleu_score": 30.334021346281297}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n    User user = fetch(commentOwner.getName());\n    return post.getOwner().equals(user.getEmail());\n  } else {\n    return post.getOwner().equals(commentOwner.getName());\n  }\n}", "CodeBleu_score": 28.639934471493746}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        listOptions.setFieldSelector(getFieldSelector());\n        listOptions.setLabelSelector(getLabelSelector());\n        listOptions.setKeyword(getKeyword());\n        listOptions.setOwnerName(getOwnerName());\n        listOptions.setOwnerKind(getOwnerKind());\n        return listOptions;\n    }", "CodeBleu_score": 14.462027148076013}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector()));\n    listOptions.setLabelSelector(getLabelSelector());\n    listOptions.setFieldSelector(getFieldSelector());\n    String ownerName = getOwnerName();\n    String ownerKind = getOwnerKind();\n    String keyword = getKeyword();\n    if (isNotBlank(ownerName) && isNotBlank(ownerKind)) {\n        String ownerNameQuery = String.format(\"%s=%s\", ownerKind, ownerName);\n        String keywordQuery = String.format(\"name=%s\", keyword);\n        String fieldQuery = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector());\n        String combinedQuery = String.format(\"%s,%s,%s\", ownerNameQuery, keywordQuery, fieldQuery);\n        listOptions.setFieldSelector(combinedQuery);\n    }\n    return listOptions;\n}", "CodeBleu_score": 44.58716889384904}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        listOptions.setFieldSelector(labelAndFieldSelectorToListOptions());\n        listOptions.setLabelSelector(getLabelSelector());\n        listOptions.setFieldQuery(query());\n        return listOptions;\n    }", "CodeBleu_score": 11.351029715619571}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n            .filter(notNull())\n            .flatMap(getByName())\n            .map(CommentCounter::getUpvote)\n            .defaultIfEmpty(0)\n            .map(upvote -> new CommentStats(commentName, upvote));\n}", "CodeBleu_score": 36.52609425271799}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n            .filter(notNull())\n            .flatMap(getByName())\n            .map(getUpvote())\n            .defaultIfEmpty(new CommentStats())\n            .map(map(CommentStats::new));\n}", "CodeBleu_score": 34.739674930282185}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n        .filter(notNull())\n        .flatMap(nameOf -> counterRepository.findByName(nameOf))\n        .map(Counter::getCount)\n        .defaultIfEmpty(0L)\n        .map(upvote -> new CommentStats(commentName, upvote));\n}", "CodeBleu_score": 35.88081580172886}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason reason = new Subscription.InterestReason();\n    reason.setType(Subscription.InterestReason.Type.REPLY);\n    reason.setCondition(new Subscription.InterestReason.Condition(Subscription.InterestReason.Condition.Type.OWNER, identity.name()));\n    reason.setName(Subscription.InterestReason.Type.REPLY.name());\n    reason.setFormatted(Subscription.InterestReason.Type.REPLY.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReasons(ImmutableList.of(reason));\n\n    try {\n        Subscription result = notificationClient.subscribe(subscription);\n    } catch (Exception e) {\n        logger.error(\"Error subscribing user to reply notifications\", e);\n    }\n}", "CodeBleu_score": 50.670362556865086}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason interestReason = new Subscription.InterestReason();\n    interestReason.setType(Subscription.InterestReasonType.REPLY);\n    interestReason.setCondition(String.format(\"repliedOwner == '%s'\", identity.name()));\n    interestReason.setName(Subscription.InterestReasonType.REPLY.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReasons(Collections.singletonList(interestReason));\n\n    subscribe(subscription);\n}", "CodeBleu_score": 55.479461803748094}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason reason = new Subscription.InterestReason();\n    reason.setReasonType(Subscription.InterestReason.ReasonType.REPLY);\n    reason.setExpression(String.format(\"repliedOwner == '%s'\", identity.name()));\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReasons(Collections.singletonList(reason));\n\n    try {\n        subscriptionService.subscribe(subscription);\n    } catch (Exception e) {\n        log.error(\"Failed to subscribe user to reply notifications: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 51.57779928947834}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), comment -> {\n        comment.setApproved(true);\n        comment.setApprovedTime(now());\n        return comment;\n    });\n}", "CodeBleu_score": 19.14143727273468}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(),\n        c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 11.818959555603248}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), comment -> comment.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 12.014680844852702}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($this->record && $action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.13010644968023}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this);\n    }\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n    return $action;\n}", "CodeBleu_score": 63.995475238562335}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this->livewire);\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 51.277971271173705}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$redirectUrl = $this->evaluate($this->getSuccessRedirectUrl());\n\n    if (! is_null($redirectUrl)) {\n        $this->redirect($redirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 60.23664211525599}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirect);\n\n    if ($url !== '') {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 77.62216519418435}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirect);\n\n    if ($url) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 77.58819188713024}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (\n        ! $record ||\n        ! method_exists($record, 'tags')\n    ) {\n        return;\n    }\n\n    $tagClassName = config('tags.tag_model');\n\n    $record->tags()->sync(\n        collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten\n    );\n}", "CodeBleu_score": 67.92410476606815}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record?->exists() ?? false) {\n        if (method_exists($record, 'tags')) {\n            $tagClassName = config('taggable.tag_model');\n\n            $record->tags()->sync(\n                collect($state)->map(function ($tagName) use ($tagClassName) {\n                    $locale = $tagClassName::getLocale();\n\n                    $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n                    if ($tag?->isEmpty() ?? true) {\n                        $tag = $tagClassName::create([\n                            'name' => [$locale => $tagName],\n                        ]);\n                    }\n\n                    return $tag;\n                })->flatten\n            );\n        }\n    }\n}", "CodeBleu_score": 62.70560804011864}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('tagging.tag_model');\n\n    $tagClassName::create\n    $record->tags()->sync\n    $tags->pluck\n    config\n    $tagClassName::getLocale\n    collect($state)->map\n    collect\n    $tagClassName::findFromStringOfAnyType\n    collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten\n    method_exists\n\n\n\n\n\n    /**\n     * This function syncs tags with a given record. It checks if the record exists and has a tags method. It retrieves the tag model class and processes the provided tag names to find or create tags. Finally, it synchronizes the tags with the record by syncing their IDs.\n     */\n    protected function syncTagsWithAnyType(?Model $record, array $state): void {\n        if (! $record || ! method_exists($record, 'tags')) {\n            return;\n        }\n\n        $tagClassName = config('tagging.tag_model');\n\n        $tagClassName::create\n        $record->tags()->sync\n        $tags->pluck\n        config\n        $tagClassName::getLocale\n        collect($state)->map\n        collect\n        $tagClassName::findFromStringOfAnyType\n        collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $", "CodeBleu_score": 55.38663500933427}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(scopePipeline, repoName)\n\tresource := authz.NewResource(scopePipeline, pipelineIdentifier)\n\n\t// Perform the permission check.\n\tif err := authorizer.Check(ctx, session, authz.ActionPull, scope, resource); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 45.72359484143512}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repositoryName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(\n\t\tauthz.ResourcePipeline,\n\t\tauthz.ResourceAction{\n\t\t\tResource:   authz.PipelineResource(pipelineIdentifier),\n\t\t\tAction:     authz.ActionRead,\n\t\t\tAttributes: []string{},\n\t\t},\n\t)\n\tresource := authz.NewResource(\n\t\tauthz.ResourcePipeline,\n\t\tauthz.PipelineResource(pipelineIdentifier),\n\t)\n\t// Check the permission for the pipeline.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 61.69745160569682}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(spacePath, authz.PipelineResourceType, pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, authz.PipelineResourceType, pipelineIdentifier)\n\n\t// Perform the permission check.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 62.70265865681364}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// If the space is nil, the session does not have the permission for the root space.\n\tif space == nil {\n\t\treturn authz.ErrForbidden\n\t}\n\n\t// If the space is the root space, check the session for the permission.\n\tif space.Parent == nil {\n\t\treturn authorizer.Check(ctx, session, space, permission)\n\t}\n\n\t// If the space is not the root space, dissect the space path to get the parent space and name.\n\tparentSpace, name := paths.DissectLeaf(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.NewScope(parentSpace, name)\n\tresource := authz.NewResource(parentSpace, name)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 52.93312297739888}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Dissect the space path to get the parent space and name.\n\tparent, name := paths.DissectLeaf(space.Path)\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.NewScope(parent, name)\n\tresource := authz.NewResource(space.Path, permission)\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 46.89553686436801}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Dissect the space path to get the parent space and name.\n\tparent, name := paths.DissectSpace(space.Path)\n\n\t// Create a scope based on the parent space and name.\n\tscope := &types.Scope{\n\t\tResource: &types.Resource{\n\t\t\tType: types.ResourceTypeSpace,\n\t\t\tID:   parent,\n\t\t},\n\t\tAction: permission,\n\t}\n\n\t// Create a resource based on the parent space and name.\n\tresource := &types.Resource{\n\t\tType: types.ResourceTypeSpace,\n\t\tID:   name,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 62.450243696722985}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t// Check if the source is empty. If so, marshal the provided data and return.\n\tif len(source) == 0 {\n\t\t// Marshal the data.\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"could not marshal data: %w\", err)\n\t\t}\n\n\t\treturn source, nil\n\t}\n\n\t// Create a new decoder.\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\n\t// Disallow unknown fields.\n\tdecoder.DisallowUnknownFields()\n\n\t// Decode the source.\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, fmt.Errorf(\"could not decode source: %w\", err)\n\t}\n\n\t// Create a new encoder.\n\tencoder := json.NewEncoder(buffer.New(0))\n\n\t// Encode the data.\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"could not encode data: %w\", err)\n\t}\n\n\t// Set escape HTML.\n\tencoder.SetEscapeHTML(false)\n\n\t// Marshal the data.\n\tresult, err := encoder.Bytes()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not marshal data: %w\", err)\n\t}\n\n\t// Remove any trailing newline.\n\tresult = bytes.TrimRightFunc(result, unicode.IsSpace)\n\n\treturn result, nil\n}", "CodeBleu_score": 68.42137642519366}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tif err := json.NewEncoder(buffer.NewBuffer()).Encode(data); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"json: %w\", err)\n\t\t}\n\t\tsource = buffer.Bytes()\n\t}\n\n\tvar decoder = json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, fmt.Errorf(\"json: %w\", err)\n\t}\n\n\tvar encoder = json.NewEncoder(buffer.NewBuffer())\n\tencoder.SetEscapeHTML(false)\n\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"json: %w\", err)\n\t}\n\n\treturn buffer.Bytes(), nil\n}", "CodeBleu_score": 62.31950875695491}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tif err := json.NewEncoder(source).Encode(data); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(data); err != nil {\n\t\treturn nil, err\n\t}\n\tencoder := json.NewEncoder(buffer.New(len(source)))\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, err\n\t}\n\treturn buffer.Bytes(source).Reset().TrimRight('\n'), nil\n}", "CodeBleu_score": 50.23077376222089}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions for the session.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.81574837030536}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.43237687310766}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the reference\n\trepoRef, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.47109044203317}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.38648006721004}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline:   createPipelinePayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.57202777268253}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.434039255653005}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tif not self.attached then\n\t\tself.renderer:attach(self)\n\t\tself.state.on_render = on_render\n\tend\n\treturn self", "CodeBleu_score": 37.56019584122875}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t-- body\n\tif self.state.attached then\n\t\tself.state.on_render = on_render\n\t\treturn self\n\telse\n\t\tself:attach(on_render)\n\t\treturn self\n\tend", "CodeBleu_score": 40.93234102929976}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tif not self.attached then\n\t\tself.renderer:attach(self)\n\t\tself.attached = true\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 48.00124152112183}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tif not self:is_valid() then\n        console.debug.error(\"Buffer is not valid\")\n        return\n    end\n\n    if type(callback) ~= \"function\" then\n        console.debug.error(\"Callback must be a function\")\n        return\n    end\n\n    self.watcher = loop.new_file_watcher(self.filename)\n    self.watcher:watch_file(function(err)\n        if err then\n            console.debug.error(\"Error watching file: \" .. tostring(err))\n            return\n        end\n        callback()\n    end)", "CodeBleu_score": 49.49282716737392}, {"code": "function Buffer:watch(callback)\n\tif not self:is_valid() then\n    console.debug.error(\"Invalid buffer\")\n    return\n  end\n  if type(callback) ~= \"function\" then\n    console.debug.error(\"Callback must be a function\")\n    return\n  end\n  local watcher = self.watcher\n  if watcher then\n    watcher:watch_file(self.filename, callback)\n  else\n    console.debug.error(\"Buffer is not valid\")\n  end", "CodeBleu_score": 45.670951102010356}, {"code": "function Buffer:watch(callback)\n\tif not self:is_valid() then\n\t\treturn\n\tend\n\tif not callback then\n\t\treturn\n\tend\n\tlocal filename = self:get_filename()\n\tif not filename then\n\t\treturn\n\tend\n\tlocal watcher = self.watcher\n\tif not watcher then\n\t\twatcher = {}\n\t\tself.watcher = watcher\n\tend\n\twatcher.filename = filename\n\twatcher.callback = callback\n\twatcher:watch_file()", "CodeBleu_score": 37.863496140411065}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex then \n        return self.hex\n    end\n\n    local color_spec = self:get_color_spec()\n    local attribute = self:get_attribute()\n\n    local highlight_group = vim.api.nvim_get_hl_by_name(attribute, true)\n\n    if highlight_group then\n        local color = highlight_group[color_spec]\n\n        if color then\n            self.hex = Color.to_hex(color)\n            return self.hex\n        end\n    end\n\n    return nil", "CodeBleu_score": 47.57160711649178}, {"code": "function Color:to_hex()\n\tif self._hex_cache then\n        return self._hex_cache\n    end\n\n    local hex\n    if self._specification then\n        if self._specification.foreground then\n            hex = vim.api.nvim_get_hl_by_name(self._specification.foreground, true)\n        else\n            hex = vim.api.nvim_get_hl_by_name(self._specification.background, true)\n        end\n    end\n\n    if hex then\n        self._hex_cache = hex\n        return hex\n    else\n        return nil\n    end", "CodeBleu_score": 42.50467119074981}, {"code": "function Color:to_hex()\n\tif self.hex then\n        return self.hex\n    end\n\n    local hex\n    if self.spec then\n        local attr = self.spec.attr\n        if attr == 'fg' then\n            hex = vim.api.nvim_get_hl_by_name(self.spec.name, true)\n        elseif attr == 'bg' then\n            hex = vim.api.nvim_get_hl_by_name(self.spec.name, false)\n        end\n    end\n\n    if hex then\n        self.hex = bit.tohex(hex, 6)\n        return self.hex\n    end\n\n    return nil", "CodeBleu_score": 53.13956386261559}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n\n  for row, line in ipairs(lines) do\n    local start, finish = string.find(line, pattern)\n\n    if start then\n      buffer:add_highlight(hl, row, start, finish)\n    end\n  end\n\n  return self", "CodeBleu_score": 39.96405650505832}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local hl_id = vim.api.nvim_get_hl_id_by_name(hl)\n\n  for i, line in ipairs(lines) do\n    local start_col, end_col = line:find(pattern)\n\n    if start_col then\n      buffer:add_highlight(hl_id, i - 1, start_col, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 46.07725381097671}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local pattern_obj = vim.regex(pattern)\n\n  for row, line in ipairs(lines) do\n    for col_start, col_end in pattern_obj:iter_captures(line, 0, -1) do\n      buffer:add_highlight(hl, row, col_start, col_end)\n    end\n  end\n\n  return self", "CodeBleu_score": 40.918641771033336}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = self.transpose_virtual_text_id_counter\n    self.transpose_virtual_text_id_counter = self.transpose_virtual_text_id_counter + 1\n\n    local extmark_opts = {\n        id = id,\n        group = \"Transpose\",\n        hl_group = hl,\n        row = row,\n        col = col,\n        text = text,\n        end_row = pos.row,\n        end_col = pos.col,\n        priority = priority\n    }\n\n    vim.api.nvim_buf_set_extmark(buffer, self.ns_id, row, col, extmark_opts)\n\n    return id", "CodeBleu_score": 49.262848371892915}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = self.virtual_text_ids[buffer][row][col]\n    if id then\n        vim.api.nvim_buf_clear_namespace(buffer, id, 0, -1)\n    else\n        id = vim.api.nvim_buf_set_virtual_text(buffer, -1, row, {{text, hl, pos}}, priority)\n        self.virtual_text_ids[buffer][row][col] = id\n    end\n    return id", "CodeBleu_score": 44.9175219116316}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = self.ids[buffer]\n  if not id then\n    id = self.ids[buffer] = {}\n  end\n  local key = tostring(row) .. \":\" .. tostring(col)\n  local id_ = id[key]\n  if not id_ then\n    local ns = self.namespaces[buffer]\n    if not ns then\n      ns = self.namespaces[buffer] = vim.api.nvim_create_namespace(\"transpose_virtual_text\")\n    end\n    id_ = id[key] = vim.api.nvim_buf_set_extmark(buffer, ns, row, col, {\n      virt_text = { text },\n      virt_text_pos = pos,\n      virt_text_highlight = hl,\n      priority = priority,\n    })\n  end\n  return id_", "CodeBleu_score": 45.71600558846399}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal lines = {}\n    local line = ''\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == '", "CodeBleu_score": 27.900115001824766}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n    local i = 1\n    local len = string.len(output)\n    while i <= len do\n        local char = string.sub(output, i, i)\n        if char == \"", "CodeBleu_score": 27.94259490940395}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal i = 1\n\tlocal c = \"\"\n\tlocal n = 0\n\tlocal count = 0\n\tlocal length = string.len(output)\n\n\twhile i <= length do\n\t\tc = string.sub(output, i, i)\n\t\tif c == \"", "CodeBleu_score": 28.03467973586097}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tif self.watchers[path] then\n    return self.watchers[path]\n  end\n  local watcher = vim.loop.new_fs_event()\n  self.watchers[path] = watcher\n  watcher:start(path, handler)\n  return watcher", "CodeBleu_score": 44.62573934126007}, {"code": "function Watcher:watch_file(path, handler)\n\tlocal watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n\n  watcher = vim.loop.new_fs_event()\n  self.watchers[path] = watcher\n  vim.loop.fs_event_start(watcher, path, handler)\n  return watcher", "CodeBleu_score": 51.58415611267867}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watchers[path] then\n    return self.watchers[path]\n  end\n\n  local watcher = vim.loop.new_fs_event()\n  vim.loop.fs_event_start(watcher, path, handler, 0)\n  self.watchers[path] = watcher\n\n  return watcher", "CodeBleu_score": 49.939926915492975}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tlocal hunks = {}\n  local lines = self:get_lines()\n  if not lines then\n    return nil, self.git_object:get_error()\n  end\n  for _, hunk in ipairs(self.git_object:live_hunks(lines)) do\n    local sign_ns_id = self:get_sign_ns_id()\n    for i, line in ipairs(hunk.lines) do\n      vim.fn.sign_define(sign_ns_id .. line.sign_id, {\n        text = line.text,\n        texthl = line.highlight,\n        line1 = line.start + 1,\n        line2 = line.start + 1,\n        priority = line.priority,\n      })\n    end\n    table.insert(hunks, hunk)\n  end\n  self:update_signs()\n  return hunks", "CodeBleu_score": 38.81320460394524}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  if not lines then return self.git_object:get_error() end\n\n  local hunks = self.git_object:live_hunks(lines)\n  if not hunks then return self.git_object:get_error() end\n\n  self:set_signs(hunks)\n  return hunks", "CodeBleu_score": 22.84719352368303}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  if not lines then\n    return nil, \"GitBuffer:live_hunks(): Could not retrieve buffer lines\"\n  end\n  \n  local hunks = self.git_object:live_hunks(lines)\n  if not hunks then\n    return nil, \"GitBuffer:live_hunks(): Could not retrieve hunks\"\n  end\n  \n  local signs = {}\n  for i, hunk in ipairs(hunks) do\n    local sign_id = self:get_sign_ns_id(i)\n    signs[sign_id] = {\n      line = hunk.line,\n      text = hunk.text,\n      type = hunk.type,\n      priority = hunk.priority,\n    }\n  end\n  \n  self:set_signs(signs)\n  return hunks", "CodeBleu_score": 42.47751509627748}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpfile = fs.tmpname()\n  local err = fs.write_file(tmpfile, patch)\n\n  if err then\n    return err\n  end\n\n  local cmd = string.format('git apply --cached --reject --whitespace=nowarn --unidiff-zero %s', tmpfile)\n  local ok, err = self:git_cmd(cmd)\n\n  if ok then\n    return fs.remove_file(tmpfile)\n  end\n\n  return err", "CodeBleu_score": 52.05788326644198}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpfile = fs.tmpname()\n\n  fs.write_file(tmpfile, patch)\n\n  local cmd = 'git apply --cached --index ' .. tmpfile\n  local ok, err = loop.free_textlock(1):execute(cmd, {\n    cwd = self.repo.path,\n    env = self.repo.env\n  })\n\n  fs.remove_file(tmpfile)\n\n  if not ok then\n    return nil, err\n  end\n\n  return true", "CodeBleu_score": 51.58367487352081}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmpfile = fs.tmpname()\n  fs.write_file(tmpfile, patch)\n\n  local success, err = self:stage_hunk_from_file(tmpfile)\n\n  fs.remove_file(tmpfile)\n\n  return success, err", "CodeBleu_score": 44.48780360888406}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tString accessTokenEndpoint = config.getAccessTokenEndpoint();\n        String accessTokenVerb = config.getAccessTokenVerb();\n        String accessTokenBody = config.getAccessTokenBody();\n        String accessTokenExtractor = config.getAccessTokenExtractor();\n\n        OAuthRequest request = new OAuthRequest(accessTokenVerb, accessTokenEndpoint);\n        request.addHeader(getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(accessTokenBody, verifier.getValue());\n        request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n        request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n        request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n        request.addBodyParameter(OAuthConstants.CODE, requestToken.getToken());\n\n        Token accessToken = null;\n        try {\n            accessToken = sendAndExtract(request, accessTokenExtractor, accessTokenEndpoint);\n        } catch (OAuthException e) {\n            if (e.getMessage().contains(\"invalid_grant\")) {\n                throw new OAuthProblemException(OAuthError.TokenResponse.INVALID_REQUEST, \"The provided request token is not valid.\");\n            } else {\n                throw e;\n            }\n        }\n\n        if (accessToken == null) {\n            throw new OAuthProblemException(OAuthError.TokenResponse.INVALID_REQUEST, \"The provided request token is not valid.\");\n        }\n\n        return accessToken;\n    }", "CodeBleu_score": 40.09081338514346}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tToken accessToken = null;\n        OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n        request.addHeader(getHttpBasicAuthHeaderValue());\n        addBodyParameter(request, \"oauth_verifier\", verifier.getValue());\n        addBodyParameter(request, \"oauth_token\", requestToken.getToken());\n        addBodyParameter(request, \"oauth_consumer_key\", config.getApiKey());\n        addBodyParameter(request, \"oauth_signature_method\", \"HMAC-SHA1\");\n        addBodyParameter(request, \"oauth_timestamp\", String.valueOf(System.currentTimeMillis() / 1000));\n        addBodyParameter(request, \"oauth_nonce\", UUID.randomUUID().toString());\n        addBodyParameter(request, \"oauth_version\", \"1.0\");\n        addBodyParameter(request, \"oauth_signature\", getSignature(request));\n        Response response = send(request);\n        accessToken = extract(response);\n        return accessToken;\n    }", "CodeBleu_score": 39.810039251900065}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tToken accessToken = null;\n        OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n        request.addHeader(getHttpBasicAuthHeaderValue());\n        addBodyParameter(request, \"oauth_token\", requestToken.getToken());\n        addBodyParameter(request, \"oauth_verifier\", verifier.getValue());\n        addBodyParameter(request, \"oauth_consumer_key\", config.getApiKey());\n\n        try {\n            Token response = sendRequestForAccessToken(request);\n            accessToken = extractAccessToken(response);\n        } catch (OAuthException e) {\n            throw new RuntimeException(e);\n        }\n\n        return accessToken;\n    }", "CodeBleu_score": 41.50033870163362}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tif (credentialsProvider == null) {\n        credentialsProvider = new BasicCredentialsProvider();\n    }\n    if (authCache == null) {\n        authCache = new BasicAuthCache();\n    }\n    if (credentials == null) {\n        credentials = new UsernamePasswordCredentials(username, password);\n    }\n    if (credentialsProvider != null) {\n        credentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), credentials);\n    }\n    if (authCache != null) {\n        authCache.put(host, new BasicScheme());\n    }\n    if (context != null) {\n        context.setCredentialsProvider(credentialsProvider);\n        context.setAuthCache(authCache);\n    }\n    log.info(\"Added \" + host.getHostName() + \" to the auth cache.\");\n}", "CodeBleu_score": 52.79041268913788}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(new BasicAuthCache());\n    context.getAuthCache().put(host, new BasicScheme());\n    logger.info(\"Added \" + host + \" to auth cache\");\n}", "CodeBleu_score": 42.11917976347349}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(new BasicAuthCache());\n    context.getAuthCache().put(host, new BasicScheme());\n    log.info(\"Adding host {} to the auth cache\", host);\n}", "CodeBleu_score": 50.15184733455351}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCache cache = Jenkins.getInstance().getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is null\");\n    }\n    String key = cache.getKey(source);\n    if (key == null) {\n        throw new IllegalStateException(\"AvatarCache key is null\");\n    }\n    return getRootUrlFromRequest() + \"/avatars/\" + size + \"/\" + encode(key);\n}", "CodeBleu_score": 36.488973904087544}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n        if (jenkins == null) {\n            throw new IllegalStateException(\"Jenkins instance is null\");\n        }\n        AvatarCacheExtension cache = jenkins.getExtensionList(AvatarCacheExtension.class).get(0);\n        if (cache == null) {\n            throw new IllegalStateException(\"AvatarCacheExtension is null\");\n        }\n        String key = cache.getCacheKey(source);\n        if (key == null) {\n            throw new IllegalStateException(\"Cache key is null\");\n        }\n        try {\n            return jenkins.getRootUrlFromRequest() + ActionURI + \"?key=\" + URLEncoder.encode(key, \"UTF-8\") + \"&size=\" + URLEncoder.encode(size, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n        }\n    }", "CodeBleu_score": 48.799801565058075}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins instance = Jenkins.getInstance();\n    AvatarCache cache = instance.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not installed\");\n    }\n    String key = cache.getKey(source);\n    if (key == null) {\n        throw new IllegalStateException(\"AvatarCache key is null\");\n    }\n    try {\n        return instance.getRootUrl() + ActionURI + \"?key=\" + URLEncoder.encode(key, \"UTF-8\") + \"&size=\" + URLEncoder.encode(size, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\");\n    }\n}", "CodeBleu_score": 50.081648655473785}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 40.52488837643977}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = scaleImage(image, 128);\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 47.10404380561333}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = scaleImage(image, 128);\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    } else {\n        this.lastModified = lastModified;\n    }\n}", "CodeBleu_score": 47.481112409522744}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            future = null;\n            return true;\n        }\n    } catch (Exception e) {\n        future = null;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 28.226404810136007}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            future = null;\n            return true;\n        }\n    } catch (Throwable t) {\n        future = null;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 27.82369140291438}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            entry = future.get();\n            if (entry != null) {\n                image = entry.image;\n                lastModified = entry.lastModified;\n                future = null;\n            }\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 62.274990746186155}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        writeImage(baos, node);\n    } finally {\n        baos.close();\n    }\n    rsp.setContentType(\"image/png\");\n    rsp.setContentLength(baos.size());\n    rsp.addDateHeader(\"Expires\", System.currentTimeMillis() + 3600 * 1000);\n    rsp.addHeader(\"Cache-Control\", \"max-age=3600\");\n    rsp.addHeader(\"Pragma\", \"cache\");\n    rsp.getOutputStream().write(baos.toByteArray());\n    rsp.flushBuffer();\n}", "CodeBleu_score": 46.154157322694026}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageOutputStream ios = ImageIO.createImageOutputStream(baos);\n    ImageWriter writer = ImageIO.getImageWritersByFormatName(\"png\").next();\n    writer.setOutput(ios);\n    BufferedImage image = createImage(req, node);\n    writer.write(image);\n    writer.dispose();\n    ios.close();\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"no-cache\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setDateHeader(\"Expires\", 0);\n    rsp.getOutputStream().write(baos.toByteArray());\n    rsp.getOutputStream().flush();\n}", "CodeBleu_score": 41.974228115088394}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(getImage(node), \"png\", baos);\n    if (req.checkIfModified(baos.toByteArray(), -1)) {\n        return;\n    }\n    rsp.setContentType(\"image/png\");\n    rsp.addDateHeader(\"Expires\", System.currentTimeMillis() + 604800000L);\n    rsp.addDateHeader(\"Last-Modified\", System.currentTimeMillis());\n    rsp.addHeader(\"Cache-Control\", \"max-age=604800, public\");\n    rsp.setContentLength(baos.size());\n    baos.writeTo(rsp.getOutputStream());\n    baos.close();\n    rsp.flushBuffer();\n}", "CodeBleu_score": 44.93826164417464}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n    }", "CodeBleu_score": 20.607844077616832}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator, null);\n    }", "CodeBleu_score": 8.911260227148155}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.client = HttpClients.custom();\n        this.context = HttpClientContext.create();\n        this.repositories = new HashMap<>();\n        this.teams = new HashMap<>();\n        this.teamRepositories = new HashMap<>();\n        this.repository = null;\n        this.repositoryUrl = null;\n        this.team = null;\n        this.teamUrl = null;\n        this.teamRepositoriesUrl = null;\n        this.teamRepositoriesUrlWithPaging = null;\n        this.teamRepositoriesUrlWithPagingNext = null;\n        this.teamRepositoriesUrlWithPagingPrevious = null;\n        this.teamRepositoriesUrlWithPagingLast = null;\n        this.teamRepositoriesUrlWithPagingFirst = null;\n        this.teamRepositoriesUrlWithPagingSize = null;\n        this.teamRepositoriesUrlWithPagingPage = null;\n        this.teamRepositoriesUrlWithPagingStart = null;\n        this.teamRepositoriesUrlWithPagingEnd = null;\n        this.teamRepositoriesUrlWithPagingSort = null;\n        this.teamRepositoriesUrlWithPagingDirection = null;\n        this.teamRepositoriesUrlWithPagingFilter = null;\n        this.teamRepositoriesUrlWithPagingState = null;\n        this.teamRepositoriesUrlWithPagingRole = null;\n        this.teamRepositoriesUrlWithPagingPermission = null;\n        this.teamRepositoriesUrlWithPagingSlug = null;\n        this.teamRepositoriesUrlWithPagingUuid = null;\n        this.teamRepositoriesUrlWithPagingLinks = null;\n        this.teamRepositoriesUrlWithPagingPageCount = null;\n        this.teamRepositoriesUrlWithPagingPageSize = null;\n        this.teamRepositoriesUrlWithPagingPageNumber = null;\n        this.teamRepositoriesUrlWithPagingPaging = null;", "CodeBleu_score": 30.16140172369761}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\ttry {\n        String sourceBranch = pullRequest.getSource().getBranchName();\n        String destinationBranch = pullRequest.getDestination().getBranchName();\n\n        BitbucketCloudBranch source = getBranch(sourceBranch);\n        BitbucketCloudBranch destination = getBranch(destinationBranch);\n\n        // Set up commit closures for source and destination branches.\n        source.setCommitClosure(getCommitClosure(source.getRawNode()));\n        destination.setCommitClosure(getCommitClosure(destination.getRawNode()));\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.SEVERE, \"Could not set up commit closures for source and destination branches\", e);\n    }\n}", "CodeBleu_score": 38.84446377037387}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = null;\n    BitbucketCloudBranch destinationBranch = null;\n\n    try {\n        sourceBranch = getSource(pullRequest);\n    } catch (IOException e) {\n        logger.log(Level.WARNING, \"I/O error when getting source branch for pull request {0}.\", pullRequest.getId());\n    } catch (InterruptedException e) {\n        logger.log(Level.WARNING, \"Interrupted error when getting source branch for pull request {0}.\", pullRequest.getId());\n    }\n\n    try {\n        destinationBranch = getDestination(pullRequest);\n    } catch (IOException e) {\n        logger.log(Level.WARNING, \"I/O error when getting destination branch for pull request {0}.\", pullRequest.getId());\n    } catch (InterruptedException e) {\n        logger.log(Level.WARNING, \"Interrupted error when getting destination branch for pull request {0}.\", pullRequest.getId());\n    }\n\n    if (sourceBranch != null) {\n        sourceBranch.setCommitClosure(getCommitClosure(sourceBranch.getRawNode()));\n    }\n    if (destinationBranch != null) {\n        destinationBranch.setCommitClosure(getCommitClosure(destinationBranch.getRawNode()));\n    }\n}", "CodeBleu_score": 36.84052520365936}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = null;\n    BitbucketCloudBranch destinationBranch = null;\n    try {\n        sourceBranch = getSource(pullRequest);\n        destinationBranch = getDestination(pullRequest);\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.WARNING, \"Error getting source or destination branch for pull request {0}.\", pullRequest.getId());\n    }\n    if (sourceBranch != null) {\n        sourceBranch.setCommitClosure(new BitbucketCloudCommitClosure(sourceBranch.getRawNode()));\n    }\n    if (destinationBranch != null) {\n        destinationBranch.setCommitClosure(new BitbucketCloudCommitClosure(destinationBranch.getRawNode()));\n    }\n    pullRequest.setSourceBranch(sourceBranch);\n    pullRequest.setDestinationBranch(destinationBranch);\n}", "CodeBleu_score": 41.02736334608396}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootUrl = getRunURL(build)\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Run URL is null\")\n    }\n    return rootUrl\n}", "CodeBleu_score": 38.10761627993163}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString url = getJenkinsLocationConfiguration().getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    return url + getDisplayURLProvider().getRunURL(build);\n}", "CodeBleu_score": 53.16840491794751}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = JenkinsLocationConfiguration.get().getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins URL is not set\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.all().get(0);\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"Display URL provider is not set\");\n    }\n    return displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 53.66215083800617}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n        try {\n            URL u = new URL(url);\n            String host = u.getHost();\n            if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n                throw new IllegalStateException(\"The URL \" + url + \" is not valid. It must not use the host names 'localhost' or 'unconfigured-jenkins-location'.\");\n            }\n            if (bitbucket.getServerType() == BitbucketServerType.CLOUD) {\n                if (!host.contains(\".\")) {\n                    throw new IllegalStateException(\"The URL \" + url + \" is not valid. It must be fully qualified for Bitbucket Cloud API clients.\");\n                }\n            }\n            return u.toString();\n        } catch (MalformedURLException e) {\n            throw new IllegalStateException(\"The URL \" + url + \" is not valid.\", e);\n        }\n    } else {\n        throw new IllegalStateException(\"The URL \" + url + \" is not valid. It must start with 'http://' or 'https://'.\");\n    }\n}", "CodeBleu_score": 46.908888634216375}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url.endsWith(\"/\")) {\n        url = url.substring(0, url.length() - 1);\n    }\n    try {\n        URI uri = new URI(url);\n        if (uri.getScheme() == null) {\n            throw new IllegalStateException(\"URL must be fully qualified\");\n        }\n        if (uri.getHost() == null) {\n            throw new IllegalStateException(\"URL must be fully qualified\");\n        }\n        if (uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"URL must not be localhost or unconfigured-jenkins-location\");\n        }\n        if (uri.getHost().equals(\"api.bitbucket.org\")) {\n            if (bitbucket.getServerId() == null) {\n                throw new IllegalStateException(\"URL must be fully qualified\");\n            }\n        }\n        if (uri.getHost().equals(\"bitbucket.org\")) {\n            if (bitbucket.getServerId() != null) {\n                throw new IllegalStateException(\"URL must not be bitbucket.org when using a serverId\");\n            }\n        }\n        return url;\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"URL is malformed\", e);\n    }\n}", "CodeBleu_score": 50.09224892171723}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (!url.matches(URL_REGEX)) {\n        throw new IllegalStateException(\"Malformed URL: \" + url);\n    }\n    if (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"The URL \" + url + \" is not valid. Please configure the URL of your Jenkins instance.\");\n    }\n    if (bitbucket.getType() == BitbucketApi.Type.CLOUD) {\n        String host = new URL(url).getHost();\n        if (!host.matches(FQDN_REGEX)) {\n            throw new IllegalStateException(\"The URL \" + url + \" is not valid. Please configure the URL of your Jenkins instance.\");\n        }\n    }\n    return url;\n}", "CodeBleu_score": 42.26294954529266}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = source.fetch(build, listener);\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] Can not retrieve SCM revision\");\n            return;\n        }\n\n        String branch = source.getBranch();\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        BitbucketApi bitbucket = buildBitbucketClient(source);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Can not retrieve SCM revision hash\");\n            return;\n        }\n\n        listener.getLogger().println(\"[Bitbucket] Notifying build status\");\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 50.358669629402684}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        boolean notificationsDisabled = context.disableNotifications();\n        if (notificationsDisabled) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = source.fetch(build, listener);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Unable to determine commit hash for build \" + build.getFullDisplayName());\n            return;\n        }\n\n        String key = getBuildKey(build, source.getBranch(), context.shareBuildKeyBetweenBranchAndPR());\n\n        BitbucketApi bitbucket = source.getBitbucketApi(build, listener);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 45.63276936577721}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = source.fetch(build, listener);\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision found\");\n            return;\n        }\n\n        String branch = revision.getHead().getName();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No hash found\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        BitbucketApi bitbucket = buildBitbucketClient(source, build, listener);\n\n        listener.getLogger().println(\"[Bitbucket] Notifications enabled\");\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 52.10708075347391}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = \"\";\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"/\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 47.915053747957295}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString key = null\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = getFolderName() + \"/\" + branch\n    } else {\n        key = getFullName(build)\n    }\n    return key\n}", "CodeBleu_score": 35.88984243411874}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"/\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 47.977502449391594}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        log.log(Level.WARNING, \"serverUrl is null for {0}, setting to default\", getDisplayName());\n        serverUrl = BitbucketSCMSourceContext.DEFAULT_SERVER_URL;\n    }\n    if (traits == null) {\n        log.log(Level.WARNING, \"traits are null for {0}, reconstructing legacy traits\", getDisplayName());\n        traits = new ArrayList<>();\n        if (isExcludePersonalRepositories()) {\n            traits.add(new BitbucketSCMSourceTrait(BitbucketSCMSourceTrait.EXCLUDE_PERSONAL_REPOSITORIES));\n        }\n        if (isExcludeForkRepositories()) {\n            traits.add(new BitbucketSCMSourceTrait(BitbucketSCMSourceTrait.EXCLUDE_FORK_REPOSITORIES));\n        }\n        if (isExcludeProtectedBranches()) {\n            traits.add(new BitbucketSCMSourceTrait(BitbucketSCMSourceTrait.EXCLUDE_PROTECTED_BRANCHES));\n        }\n        if (isExcludeVirtualRepositories()) {\n            traits.add(new BitbucketSCMSourceTrait(BitbucketSCMSourceTrait.EXCLUDE_VIRTUAL_REPOSITORIES));\n        }\n        if (isExcludeAnonymousRepositories()) {\n            traits.add(new BitbucketSCMSourceTrait(BitbucketSCMSourceTrait.EXCLUDE_ANONYMOUS_REPOSITORIES));\n        }\n        if (isExcludePrivateRepositories()) {\n            traits.add(new BitbucketSCMSourceTrait(BitbucketSCMSourceTrait.EXCLUDE_PRIVATE_REPOSITORIES));\n        }\n        if (isExcludeEmptyRepositories()) {\n            traits.add(new BitbucketSCMSourceTrait(BitbucketSCMSourceTrait.EXCLUDE_EMPTY_REPOSITORIES));\n        }\n        if (isExcludeDisabledRepositories()) {\n            traits.", "CodeBleu_score": 28.98387380714015}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        log.log(Level.WARNING, \"BitbucketSCMNavigator.serverUrl is null. Attempting to resolve server URL from BitbucketSCMNavigator.serverName and BitbucketSCMNavigator.credentialsId.\");\n        serverUrl = readResolveServerUrl(serverName, credentialsId);\n    }\n    if (traits == null) {\n        log.log(Level.WARNING, \"BitbucketSCMNavigator.traits is null. Attempting to reconstruct legacy traits.\");\n        traits = reconstructLegacyTraits(serverUrl, credentialsId, repositoryOwner, repository, repositorySlug, repositoryName, repositorySlug);\n    }\n    return this;\n}", "CodeBleu_score": 19.657761083752323}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = Jenkins.get().getDescriptorByType(BitbucketSCMSourceContextTrait.DescriptorImpl.class).getBitbucketServerUrl();\n        if (serverUrl == null) {\n            log.log(Level.WARNING, \"Bitbucket server URL is null, using default URL\");\n            serverUrl = defaultIfBlank(serverUrl, \"https://bitbucket.org\");\n        }\n    }\n    if (traits == null) {\n        log.log(Level.WARNING, \"Bitbucket server traits are null, reconstructing from legacy properties\");\n        traits = new ArrayList<>();\n        if (isExcludedRepositories()) {\n            traits.add(new ExcludedRepositoriesTrait(excludedRepositories));\n        }\n        if (isIncludedRegions()) {\n            traits.add(new IncludedRegionsTrait(includedRegions));\n        }\n        if (isExcludedRegions()) {\n            traits.add(new ExcludedRegionsTrait(excludedRegions));\n        }\n        if (isIncludedBranches()) {\n            traits.add(new IncludedBranchesTrait(includedBranches));\n        }\n        if (isExcludedBranches()) {\n            traits.add(new ExcludedBranchesTrait(excludedBranches));\n        }\n        if (isIncludedUsers()) {\n            traits.add(new IncludedUsersTrait(includedUsers));\n        }\n        if (isExcludedUsers()) {\n            traits.add(new ExcludedUsersTrait(excludedUsers));\n        }\n        if (isIncludedGroups()) {\n            traits.add(new IncludedGroupsTrait(includedGroups));\n        }\n        if (isExcludedGroups()) {\n            traits.add(new ExcludedGroupsTrait(excludedGroups));\n        }\n        if (isIncludedPublicForks()) {\n            traits.add(new IncludedPublicForksTrait());\n        }\n        if (isExcludedPublicForks()) {\n            traits.add(new ExcludedPublicForksTrait());", "CodeBleu_score": 44.59049232736364}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tBitbucketRepository repository = getBitbucketRepository(name)\n    if (!repository) {\n        return\n    }\n\n    String fullName = getFullName(repository)\n    if (isMatch) {\n        logger.info(\"Proposing repository $fullName\")\n        repository.propose()\n        count++\n    } else {\n        logger.info(\"Ignoring repository $fullName\")\n    }\n}", "CodeBleu_score": 51.130368197752965}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tBitbucketRepository repository = getBitbucketRepository(name)\n    if (repository) {\n        if (isMatch) {\n            logger.info(\"Proposing repository {}\", repository.getFullName())\n            repository.propose()\n            count++\n        } else {\n            logger.info(\"Ignoring repository {}\", repository.getFullName())\n            repository.ignore()\n        }\n    }\n}", "CodeBleu_score": 47.41843977586576}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tdef repository = getBitbucketRepository(name)\n    def logger = getLogger()\n    def message = format(\"{0} {1}\", repository.fullName, isMatch ? \"proposed\" : \"ignored\")\n    logger.info(message)\n    if (isMatch) {\n        repository.proposedCount++\n    }\n}", "CodeBleu_score": 41.845184298826624}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getType() == RevisionType.TAG) {\n            return rev;\n        }\n\n        String branchName = rev.getBranch();\n        String hash = rev.getSha1String();\n\n        // Check if the commit exists locally. If not, fetch it from the remote repository.\n        if (!commitExists(git, hash)) {\n            // Check if the branch exists locally. If not, fetch it from the remote repository.\n            if (!git.hasBranch(branchName)) {\n                // Check if the branch exists in the remote repository. If not, throw an exception.\n                if (!git.hasRemoteBranch(branchName)) {\n                    throw new AbortException(\"The branch \" + branchName + \" does not exist in the remote repository.\");\n                }\n\n                // Create a RefSpec for the branch.\n                RefSpec refSpec = new RefSpec(branchName + \":\" + branchName);\n\n                // Fetch the branch from the remote repository.\n                fetch_(git, scm.getUserRemoteConfigs(), refSpec, listener);\n            }\n\n            // Check if the commit exists locally. If not, fetch it from the remote repository.\n            if (!commitExists(git, hash)) {\n                // Check if the commit exists in the remote repository. If not, throw an exception.\n                if (!git.hasRemoteBranch(hash)) {\n                    throw new AbortException(\"The commit \" + hash + \" does not exist in the remote repository.\");\n                }\n\n                // Create a RefSpec for the commit.\n                RefSpec refSpec = new RefSpec(hash + \":\" + hash);\n\n                // Fetch the commit from the remote repository.\n                fetch_(git, scm.getUserRemoteConfigs(), refSpec, listener);\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 36.67967040798975}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (marked != null) {\n            return marked;\n        }\n        if (rev.getType() == RevisionType.TAG) {\n            return rev;\n        }\n        List<RefSpec> refSpecs = new ArrayList<>();\n        for (String branch : toList(rev.getBranches())) {\n            if (!branch.startsWith(\"origin/\")) {\n                continue;\n            }\n            String hash = getHash(branch);\n            if (hash == null || !commitExists(git, hash)) {\n                refSpecs.add(new RefSpec(branch));\n            }\n        }\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n        String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n        try {\n            fetch_(git, cloneLink, refSpecs);\n        } catch (GitException e) {\n            listener.getLogger().println(\"Failed to fetch missing commits from \" + cloneLink + \" for branch \" + rev.getBranches());\n            throw new AbortException(e.getMessage());\n        }\n        return rev;\n    }", "CodeBleu_score": 38.994807490875054}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tString branchName = getBranch(scm, build, listener);\n        String hash = rev.getSha1String();\n        String branchHash = getHash(git, branchName);\n        if (branchHash != null && !branchHash.equals(hash)) {\n            return rev;\n        }\n        if (commitExists(git, hash)) {\n            return rev;\n        }\n        List<RefSpec> refSpecs = new ArrayList<>();\n        for (BranchSpec branchSpec : scm.getBranches()) {\n            if (branchSpec.matches(branchName)) {\n                refSpecs.add(branchSpec.getRefSpec());\n            }\n        }\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n        String remoteUrl = scm.getUserRemoteConfigs().get(0).getUrl();\n        String cloneLink = remoteUrl + \".git\";\n        listener.getLogger().println(\"Fetching missing commits from \" + cloneLink);\n        try {\n            git.fetch_().from(cloneLink, refSpecs).execute();\n        } catch (GitException e) {\n            throw new RuntimeException(e);\n        }\n        return rev;\n    }", "CodeBleu_score": 44.18403917847667}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        newLinks.put(entry.getKey(), new BitbucketHref(entry.getValue()));\n    }\n    return newLinks;\n}", "CodeBleu_score": 52.390082896258775}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        newLinks.put(entry.getKey(), new BitbucketHref(entry.getValue()));\n    }\n    return newLinks;\n}", "CodeBleu_score": 52.390082896258775}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tMap<String, BitbucketHref> links = this.get(\"links\");\n  if (links == null) {\n    return null;\n  }\n  Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n  for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n    newLinks.put(entry.getKey(), entry.getValue().getFirstHref());\n  }\n  return newLinks;\n}", "CodeBleu_score": 52.97294972609006}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = distinct(resourceStates, r => r.resourceUri).map(r => r.resourceUri);\n\tconst resources = await Promise.all(uris.map(uri => this.workingTreeGroup.resource(uri)));\n\tconst groupedResources = groupBy(resources, r => r.repository.rootUri);\n\tconst addPromises = [];\n\n\tfor (const [root, resources] of groupedResources) {\n\t\tconst repository = resources[0].repository;\n\t\tconst paths = resources.map(r => r.resourceUri.fsPath);\n\t\taddPromises.push(repository.add(paths));\n\t}\n\n\tawait Promise.all(addPromises);\n}", "CodeBleu_score": 47.230879113132026}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t// Check for a selection\n\tif (resourceStates.length === 0) {\n\t\tthis.logger.info('No resources selected.');\n\t\treturn;\n\t}\n\n\t// Group by repository\n\tconst groups = groupBy(resourceStates, resourceState => this.getRepository(resourceState.resourceUri));\n\n\t// Execute on each repository\n\tfor (const [repository, resources] of groups) {\n\n\t\t// Get the repository's root\n\t\tconst root = repository.rootUri;\n\n\t\t// Get the repository's remote\n\t\tconst remote = await this.getRemote(repository);\n\n\t\t// Get the remote's push URL\n\t\tconst remoteUrl = remote?.pushUrl;\n\n\t\t// Get the repository's working tree\n\t\tconst workingTree = await this.getWorkingTree(repository);\n\n\t\t// Get the repository's index\n\t\tconst index = await workingTree.getIndex();\n\n\t\t// Get the repository's HEAD\n\t\tconst head = await workingTree.getHead();\n\n\t\t// Convert the resources to file paths\n\t\tconst filePaths = resources.map(resource => this.getFilePath(root, resource.resourceUri));\n\n\t\t// Add the files to the index\n\t\tconst addResults = await index.add(filePaths);\n\n\t\t// Check for errors\n\t\tif (addResults.some(addResult => addResult.code !== 0)) {\n\t\t\tthis.logger.error(`Failed to add the following files to the index: ${addResults.map(addResult => addResult.path).join(', ')}`);\n\t\t\treturn;\n\t\t}\n\n\t\t// Create a commit\n\t\tconst commit = await index.createCommit('', head.commit, this.config.user);\n\n\t\t// Push the commit\n\t\tconst pushResults = await workingTree.push(commit, remoteUrl);\n\n\t\t// Check for errors\n\t\tif (pushResults.some(pushResult => pushResult.code !== 0)) {\n\t\t\tthis.logger.error(`Failed to push the following files: ${pushResults.map(pushResult => pushResult.path", "CodeBleu_score": 39.90142073694029}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (!resourceStates.length) {\n        return;\n    }\n\n    const resources = resourceStates.map(r => r.resourceUri);\n    const uris = resources.map(r => r.toString());\n    const repoPaths = uris.map(uri => this.repository.rootUri.fsPath);\n    const paths = uris.map(uri => uri.replace(this.repository.rootUri.fsPath, ''));\n\n    const addPromises = this.repository.add(paths);\n    const results = await Promise.all(addPromises);\n\n    const failedResults = results.filter(r => r.success === false);\n    if (failedResults.length) {\n        const message = failedResults.map(r => r.message).join('\n');\n        window.showErrorMessage(message);\n    }\n}", "CodeBleu_score": 46.26778467845395}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (!resourceStates || !resourceStates.length || !(resourceStates[0] instanceof Uri)) {\n\t\tconst resource = await this.getSCMResource();\n\n\t\tif (resource) {\n\t\t\tresourceStates = [resource];\n\t\t}\n\t}\n\n\treturn resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 41.99522893306972}, {"code": "protected async getResourceStates{\n\t/**\n\t * If the provided resource states are empty or the first resource URI is not an instance of Uri, then we attempt to get a single SCM resource and update the resource states.\n\t */\n\tif (resourceStates.length === 0 || !(resourceStates[0].resource instanceof Uri)) {\n\t\tlet resource = await this.getSCMResource();\n\n\t\tif (resource) {\n\t\t\tresourceStates = [new ResourceState(resource, this.sourceControl.inputBox.resourceGroup.id)];\n\t\t}\n\t}\n\n\t/**\n\t * Finally, we filter and return the resource states that are instances of Resource.\n\t */\n\treturn resourceStates.filter(r => r.resource instanceof Resource);\n}", "CodeBleu_score": 39.582820938888176}, {"code": "protected async getResourceStates{\n\t/**\n     * If the resource states are empty or the first resource URI is not an instance of Uri, attempt to get a single SCM resource and update the resource states.\n     */\n    if (resourceStates.length === 0 || !(resourceStates[0].resource instanceof Uri)) {\n\n        /**\n         * Attempt to get a single SCM resource and update the resource states.\n         */\n        const resource = await this.getResource();\n\n        /**\n         * If the resource is not an instance of Resource, return an empty array.\n         */\n        if (!(resource instanceof Resource)) {\n            return [];\n        }\n\n        /**\n         * Update the resource states.\n         */\n        resourceStates = [\n            {\n                resource,\n                command: {\n                    title: 'Sync',\n                    command: 'scm.sync',\n                    arguments: [resource]\n                }\n            }\n        ];\n    }\n\n    /**\n     * Filter the resource states that are instances of Resource.\n     */\n    return resourceStates.filter((resourceState: ResourceState) => resourceState.resource instanceof Resource);\n}", "CodeBleu_score": 42.662637572771544}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri ?? window.activeTextEditor?.document.uri;\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.path);\n    }\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n    const repository = await this.sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 44.8708573794398}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n    const sourceControlManager = workspace.scm.createSourceControl('svn', 'Subversion');\n    const repository = sourceControlManager.createRepository(uri.fsPath);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResource(uri.fsPath);\n  }", "CodeBleu_score": 50.36711851665221}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tconst activeTextEditor = window.activeTextEditor;\n    if (activeTextEditor) {\n      uri = uri || activeTextEditor.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n    const sourceControlManager = workspace.scm.createSourceControl('svn', 'SVN');\n    const repository = sourceControlManager.createRepository(uri.fsPath);\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 53.34048944465618}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remoteRepo: string = this.model.getRemoteRepository(element);\n  let diffCmd: string = `svn diff -r ${element.oldRevision} ${element.path}`;\n  if (element.status === 'A') {\n    diffCmd = `svn diff ${remoteRepo} -r ${element.newRevision} ${element.path}`;\n  }\n  this.terminalService.runInTerminal(diffCmd);\n }", "CodeBleu_score": 34.6856893500505}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remoteRepo = await this.model.getRemoteRepository(element);\n  if (remoteRepo) {\n    if (element.changeType == ChangeType.Modified) {\n      this.openDiff(element, remoteRepo);\n    } else if (element.changeType == ChangeType.Added) {\n      this.openFileRemote(element, remoteRepo);\n    }\n  }\n}", "CodeBleu_score": 37.24714327717288}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepo = await this.model.getRemoteRepository(element);\n    if (remoteRepo) {\n        const diff = await this.model.getDiff(element, remoteRepo);\n        if (diff) {\n            this.openDiff(diff);\n        }\n    }\n}", "CodeBleu_score": 25.633496815294432}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (clipboard.writeText) {\n\t\tif (item.commit) {\n\t\t\tif (what === \"message\") {\n\t\t\t\tclipboard.writeText(item.commit.message);\n\t\t\t} else if (what === \"revision\") {\n\t\t\t\tclipboard.writeText(item.commit.revision);\n\t\t\t}\n\t\t} else {\n\t\t\twindow.showErrorMessage(\"The item is not a commit\");\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(\"The clipboard is not supported\");\n\t}\n}", "CodeBleu_score": 31.42496559170648}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (clipboard.writeText) {\n\t\tlet message = item.commit.message;\n\t\tif (what === 'revision') {\n\t\t\tmessage = item.commit.hash;\n\t\t}\n\t\tclipboard.writeText(message);\n\t} else {\n\t\twindow.showErrorMessage('Clipboard is not supported');\n\t}\n}", "CodeBleu_score": 29.465709626691766}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (clipboard.writeText) {\n\t\tif (item.commit) {\n\t\t\tif (item.commit.message) {\n\t\t\t\tclipboard.writeText(item.commit.message);\n\t\t\t} else if (item.commit.revision) {\n\t\t\t\tclipboard.writeText(item.commit.revision);\n\t\t\t}\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(\"Clipboard not supported\");\n\t}\n}", "CodeBleu_score": 26.03101540592595}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tdef jenkins = Jenkins.getInstanceOrNull()\n    def classLoader = jenkins?.pluginManager?.classLoader\n    if (classLoader == null) {\n        classLoader = this.class.classLoader\n    }\n    this.classLoader = classLoader\n    return this\n}", "CodeBleu_score": 36.00492621919779}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        setClassLoader(jenkins.pluginManager.uberClassLoader);\n    } else {\n        setClassLoader(Gitea.class.getClassLoader());\n    }\n    return this;\n}", "CodeBleu_score": 37.74140235698656}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tif (instance == null) {\n        instance = new Gitea(Jenkins.getInstance() == null ? Gitea.class.getClassLoader() : Jenkins.getInstance().pluginManager.uberClassLoader);\n    }\n    return instance;\n}", "CodeBleu_score": 48.590680487658155}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tsuper(displayName, serverUrl, manageHooks, credentialsId, aliasUrl);\n}", "CodeBleu_score": 13.281725701487671}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName != null ? displayName : normalizeServerUrl(serverUrl);\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = aliasUrl != null ? aliasUrl : normalizeServerUrl(serverUrl);\n}", "CodeBleu_score": 43.03616909539099}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = aliasUrl != null ? aliasUrl.trim() : null;\n    this.displayName = displayName != null ? displayName : serverUrl;\n}", "CodeBleu_score": 45.03237187788506}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\ttry {\n        // Check if the user has administrative permissions\n        checkPermission(Item.EXTENDED_READ, Jenkins.getInstance());\n\n        // Normalize the server URL\n        String normalizedServerUrl = normalizeServerUrl(serverUrl);\n\n        // Get the credentials\n        ListBoxModel items = new ListBoxModel();\n        for (GiteaAuth giteaAuth : get(normalizedServerUrl)) {\n            // Include matching credentials\n            items.add(giteaAuth.getId(), giteaAuth.getId());\n        }\n        return items;\n    } catch (Exception e) {\n        LOGGER.log(Level.WARNING, \"Failed to populate credentials dropdown list\", e);\n        return new ListBoxModel();\n    }\n}", "CodeBleu_score": 36.68550041595612}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\treturn doFillCredentialsIdItems(serverUrl, false);\n}", "CodeBleu_score": 6.249762296735685}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (hasAdminPermissions()) {\n        ListBoxModel items = new ListBoxModel();\n        String normalizedServerUrl = normalizeServerUrl(serverUrl);\n        for (GiteaAuth auth : get()) {\n            if (matcher(normalizedServerUrl, auth.getServerUrl())) {\n                items.add(auth.getId(), auth.getId());\n            }\n        }\n        return items;\n    }\n    return new ListBoxModel();\n}", "CodeBleu_score": 35.33502858992128}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        if (host == null) {\n            return null;\n        }\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme);\n        sb.append(\"://\");\n        sb.append(host);\n        if (port != -1 && ((\"http\".equals(scheme) && port != 80) || (\"https\".equals(scheme) && port != 443))) {\n            sb.append(\":\");\n            sb.append(port);\n        }\n        if (path != null && path.length() > 0 && !path.startsWith(\"/\")) {\n            sb.append(\"/\");\n        }\n        if (path != null) {\n            sb.append(path);\n        }\n        if (query != null) {\n            sb.append(\"?\");\n            sb.append(query);\n        }\n        if (fragment != null) {\n            sb.append(\"#\");\n            sb.append(fragment);\n        }\n        return sb.toString().toLowerCase(Locale.ENGLISH).replaceAll(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 43.48856821491993}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URL url = new URL(serverUrl);\n        String host = url.getHost();\n        String scheme = url.getProtocol();\n        int port = url.getPort();\n        String path = url.getPath();\n        String query = url.getQuery();\n        String fragment = url.getRef();\n        String userInfo = url.getUserInfo();\n        if (host == null) {\n            return null;\n        }\n        if (scheme == null) {\n            return null;\n        }\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(scheme);\n        builder.append(\"://\");\n        if (userInfo != null) {\n            builder.append(userInfo);\n            builder.append(\"@\");\n        }\n        builder.append(host);\n        if (port != -1) {\n            builder.append(\":\");\n            builder.append(port);\n        }\n        if (path != null) {\n            builder.append(path);\n        }\n        if (query != null) {\n            builder.append(\"?\");\n            builder.append(query);\n        }\n        if (fragment != null) {\n            builder.append(\"#\");\n            builder.append(fragment);\n        }\n        String normalizedUrl = builder.toString();\n        normalizedUrl = normalizedUrl.toLowerCase(Locale.ENGLISH);\n        normalizedUrl = normalizedUrl.replaceAll(\"\\\\s\", \"%20\");\n        return normalizedUrl;\n    } catch (MalformedURLException e) {\n        return null;\n    }\n}", "CodeBleu_score": 36.950892393763134}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            return null;\n        }\n        scheme = scheme.toLowerCase();\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            port = 80;\n            if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(host);\n        if (port != 80 && port != 443) {\n            sb.append(\":\").append(port);\n        }\n        sb.append(uri.getPath());\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.5120586276825}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        if (server.isBlank()) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(server.getDisplayName(), server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 40.197938978298865}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            displayName = server.getServerUrl();\n        }\n        items.add(displayName, server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 50.69711174542408}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        items.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 32.98631925854368}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tJenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer s : servers) {\n        if (s != null) {\n            newServers.add(s);\n        }\n    }\n    newServers.removeIf(GiteaServer::isBlank);\n    newServers.removeIf(GiteaServer::isInvalid);\n    newServers.removeIf(s -> s.getUrl() == null);\n    newServers.removeIf(s -> s.getUrl().isBlank());\n    newServers.removeIf(s -> s.getUrl().isEmpty());\n    newServers.removeIf(s -> s.getUrl().equals(\"http://\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"https://\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"http://:\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"https://:\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"http:///\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"https:///\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"http://:/\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"https://:/\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"http:////\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"https:////\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"http://///\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"https://///\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"http:////\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"https:////\"));\n    newServers.removeIf(s -> s.getUrl().equals(\"http://///", "CodeBleu_score": 29.555939660744702}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n        if (servers == null) {\n            servers = Collections.emptyList();\n        }\n        servers = new ArrayList<>(servers);\n        servers.removeIf(GiteaServer::isBlank);\n        servers.removeIf(s -> s.getServerUrl().isBlank());\n        servers.sort(Comparator.comparing(GiteaServer::getServerUrl));\n        this.servers = Collections.unmodifiableList(servers);\n        save();\n    }", "CodeBleu_score": 34.25286100247584}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n    List<GiteaServer> serverList = new ArrayList<>();\n    if (servers != null) {\n        for (GiteaServer server : servers) {\n            if (server != null && !server.getUrl().isEmpty()) {\n                serverList.add(server);\n            }\n        }\n    }\n    this.servers = serverList;\n    save();\n}", "CodeBleu_score": 33.88043136288735}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (StringUtils.isBlank(serverUrl)) {\n            return false;\n        }\n        serverUrl = normalizeServerUrl(serverUrl);\n        List<GiteaServer> newServers = new ArrayList<>();\n        for (GiteaServer server : servers) {\n            if (!serverUrl.equals(server.getServerUrl())) {\n                newServers.add(server);\n            }\n        }\n        if (newServers.size() == servers.size()) {\n            return false;\n        }\n        servers = newServers;\n        save();\n        return true;\n    }", "CodeBleu_score": 35.1351052545191}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl = normalizeServerUrl(serverUrl);\n        if (serverUrl == null) {\n            return false;\n        }\n        List<GiteaServer> newServers = new ArrayList<>(servers);\n        for (Iterator<GiteaServer> iterator = newServers.iterator(); iterator.hasNext(); ) {\n            GiteaServer server = iterator.next();\n            if (serverUrl.equals(server.getServerUrl())) {\n                iterator.remove();\n                break;\n            }\n        }\n        if (newServers.equals(servers)) {\n            return false;\n        }\n        servers = newServers;\n        save();\n        return true;\n    }", "CodeBleu_score": 47.03219258272263}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (StringUtils.isBlank(serverUrl)) {\n            return false;\n        }\n        serverUrl = normalizeServerUrl(serverUrl);\n        boolean removed = false;\n        List<GiteaServer> newServers = new ArrayList<>(servers);\n        for (Iterator<GiteaServer> iterator = newServers.iterator(); iterator.hasNext(); ) {\n            GiteaServer server = iterator.next();\n            String serverUrlToRemove = normalizeServerUrl(server.getServerUrl());\n            if (serverUrlToRemove.equals(serverUrl)) {\n                iterator.remove();\n                removed = true;\n            }\n        }\n        if (removed) {\n            servers = newServers;\n            save();\n        }\n        return removed;\n    }", "CodeBleu_score": 49.9697070021062}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\n      String type = el.asType().toString();\n\n      // add a new element to the set of descriptor elements\n      descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n  }", "CodeBleu_score": 52.444940802876005}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\n      String type = asType(el.asType());\n      String name = el.getSimpleName().toString();\n\n      descriptorElements.add(new DescriptorElement(name, type, attributes));\n    }\n  }", "CodeBleu_score": 49.84241592053563}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el);\n      descriptorElements.add(new DescriptorElement(el, type, attributes));\n    }\n  }", "CodeBleu_score": 38.31070790033906}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace('$', '.')\n                .equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.84383909289184}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.66643932085251}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotationClass.getName().replace(\"$\", \".\").equals(annotation.getQualifiedName().toString())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 52.16582083609247}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n    }\n    if approver_id:\n        filters[\"approver\"] = approver_id\n        filters[\"status\"] = (\"not in\", [\"Approved\", \"Rejected\"])\n    if for_approval:\n        filters[\"status\"] = (\"in\", get_allowed_states_for_workflow(\n            frappe.get_meta(\"Leave Application\").get_workflow(), frappe.session.user\n        ))\n    return filters\n\n", "CodeBleu_score": 34.42103342500733}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\"employee\": employee}\n    if approver_id:\n        filters.update({\"approver\": approver_id})\n    if for_approval:\n        workflow = frappe.get_workflow(\"Leave Application\")\n        allowed_states = get_allowed_states_for_workflow(workflow, employee)\n        filters.update({\"docstatus\": 1, \"status\": (\"in\", allowed_states)})\n    else:\n        filters.update({\"docstatus\": 1, \"status\": \"Open\"})\n    return filters\n\n", "CodeBleu_score": 38.222627538811984}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"status\": [\"not in\", [\"Cancelled\"]],\n    }\n    if for_approval:\n        filters[\"status\"] = get_allowed_states_for_workflow(\n            frappe.get_workflow(\"Leave Application\"), approver_id\n        )\n    return filters\n\n", "CodeBleu_score": 26.44899607729063}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t# Get the current date\n    current_date = getdate()\n\n    # Get the leave details for the specified employee\n    leave_details = get_leave_details(employee)\n\n    # Construct the leave balance map\n    leave_balance_map = {\n        leave_type: {\n            \"allocated\": allocation,\n            \"balance\": allocation - leave_details.get(leave_type, 0)\n        }\n        for leave_type, allocation in allocation.items()\n    }\n\n    return leave_balance_map\n\n\n\n\n", "CodeBleu_score": 37.0330910048913}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tcurrent_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type].get(\"allocated_leaves\"),\n            \"balance\": leave_details[leave_type].get(\"balance_leaves\")\n        }\n    return leave_balance_map\n\n\n", "CodeBleu_score": 42.290960553565384}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tleave_details_map = get_leave_details(employee)\n    current_date = getdate()\n    leave_balance_map = {}\n    for leave_type in leave_details_map:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details_map[leave_type][\"allocated\"],\n            \"balance\": leave_details_map[leave_type][\"balance\"]\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 35.12918277378321}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = frappe.get_doc(\"Holiday List\", get_holiday_list_for_employee(employee))\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\"Holiday\", filters={\"parent\": holiday_list.name, \"is_weekly_off\": 0}, fields=[\"name\", \"holiday_date\", \"description\"])\n    holidays = sorted(holidays, key=lambda holiday: holiday[\"holiday_date\"])\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 39.4203334536032}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\"Holiday\", filters={\"parent\": holiday_list.name}, fields=[\"holiday_date\", \"description\"], order_by=\"holiday_date\")\n    holidays = [holiday for holiday in holidays if holiday.holiday_date.weekday() != 5 and holiday.holiday_date.weekday() != 6]\n    holidays = [dict(holiday_date=holiday.holiday_date, description=strip_html(holiday.description)) for holiday in holidays]\n    return holidays\n\n", "CodeBleu_score": 41.26236887161196}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"select\n            holiday_date,\n            description,\n            holiday_type\n        from\n            `tabHoliday`\n        where\n            parent = %(holiday_list)s\n            and holiday_date >= %(start_date)s\n            and holiday_date <= %(end_date)s\n            and holiday_type != 'Weekly Off'\"\"\",\n        {\n            \"holiday_list\": holiday_list,\n            \"start_date\": add_days(today(), -1),\n            \"end_date\": today(),\n        },\n        as_dict=True,\n    )\n    holidays = [\n        {\n            \"date\": holiday[\"holiday_date\"],\n            \"description\": strip_html(holiday[\"description\"]),\n            \"type\": holiday[\"holiday_type\"],\n        }\n        for holiday in holidays\n    ]\n    return sorted(holidays, key=lambda holiday: holiday[\"date\"])\n\n", "CodeBleu_score": 34.35655219636848}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\tholidays_in_advance = get_holidays_in_advance()\n    if holidays_in_advance:\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 14.029874763640002}, {"code": "def send_reminders_in_advance_weekly()\n\tsend_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.3235977382994575}, {"code": "def send_reminders_in_advance_weekly()\n\tfrequency = frappe.get_single(\"HR Settings\").holiday_reminder_frequency\n    if frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 19.720266620156504}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\tself.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 21.805223259204425}, {"code": "def calculate_self_appraisal_score(self)\n\tself.self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self.self_appraisal_score += entry.rating * entry.weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n\n\n\n", "CodeBleu_score": 28.09870625240571}, {"code": "def calculate_self_appraisal_score(self)\n\tself_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 21.777448263771916}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_using_formula:\n        data = {}\n        data.update(self.as_dict())\n        data.update(self.employee_appraisal.as_dict())\n        data.update(self.appraisal_form.as_dict())\n        data.update(self.employee_doc.as_dict())\n        data.update(self.appraisal_cycle_doc.as_dict())\n        data.update(self.appraisal_template_doc.as_dict())\n        data.update(self.feedback_doc.as_dict())\n        data.update(self.self_appraisal_doc.as_dict())\n        data.update(self.manager_appraisal_doc.as_dict())\n        data.update(self.peers_appraisal_doc.as_dict())\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        final_score = frappe.safe_eval(formula, None, data)\n        self.db_set(\"final_score\", final_score)\n    else:\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n        self.db_set(\"final_score\", final_score)\n\n", "CodeBleu_score": 35.10387745933459}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score:\n        appraisal_formula = appraisal_cycle_doc.appraisal_formula\n        appraisal_formula = sanitize_expression(appraisal_formula)\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        final_score = frappe.safe_eval(appraisal_formula, None, data)\n        final_score = flt(final_score, self.precision)\n    else:\n        final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n        final_score = flt(final_score, self.precision)\n    self.db_set(\"final_score\", final_score)\n\n", "CodeBleu_score": 34.55656940585029}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        final_score_formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        data = {\n            \"appraisal_cycle\": self.appraisal_cycle,\n            \"employee\": self.employee,\n            \"employee_name\": self.employee_name,\n            \"appraisal_cycle_doc\": appraisal_cycle_doc.as_dict(),\n            \"employee_doc\": frappe.get_cached_doc(\"Employee\", self.employee).as_dict(),\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        final_score = frappe.safe_eval(final_score_formula, None, data)\n        self.final_score = flt(final_score, appraisal_cycle_doc.precision)\n    else:\n        self.final_score = (\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score)\n            / 3\n        )\n        self.final_score = flt(self.final_score, appraisal_cycle_doc.precision)\n\n", "CodeBleu_score": 42.013391393960745}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            if not self.leave_application:\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n        else:\n            if self.leave_application:\n                frappe.throw(_(\"Attendance cannot be marked for future dates for employees on leave.\"))\n    if self.attendance_date < self.employee_name.date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining.\"))\n", "CodeBleu_score": 28.875230007617326}, {"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'.\"))\n        else:\n            if not frappe.db.get_value(\"Leave Application\", {\"employee\": self.employee, \"status\": \"Approved\", \"from_date\": self.attendance_date, \"to_date\": self.attendance_date}):\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless there is a leave application approved for the same date.\"))\n\n    if self.attendance_date < getdate(self.employee_name.date_of_joining):\n        frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining.\"))\n\n", "CodeBleu_score": 31.63394747818061}, {"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            if not self.leave_application:\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\"))\n        else:\n            if self.leave_application:\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\"))\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining\"))\n\n", "CodeBleu_score": 29.058464657770894}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tduplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        frappe.throw(\n            _(\n                \"Attendance already exists for Employee {0} on {1}. Link to existing attendance record: {2}\"\n            ).format(\n                self.employee,\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate_attendance_record),\n            ),\n            DuplicateAttendanceError,\n        )", "CodeBleu_score": 32.05450159554214}, {"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Duplicate attendance record for {0} on {1}. Link to existing record: {2}\".format(\n                    self.employee,\n                    format_date(self.attendance_date),\n                    get_link_to_form(\"Attendance\", duplicate),\n                )\n            )\n        )\n\n", "CodeBleu_score": 35.23787334502229}, {"code": "def validate_duplicate_record(self)\n\tduplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        frappe.throw(\n            _(\n                \"Attendance record for employee {0} on {1} already exists. Please use the link below to view the existing record: {2}\".format(\n                    self.employee,\n                    format_date(self.attendance_date),\n                    get_link_to_form(\"Attendance\", duplicate_attendance_record),\n                )\n            )\n        )\n\n", "CodeBleu_score": 30.17296552552112}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\tfrom frappe.utils.file_manager import get_file\n    from frappe.email.email_body import get_email_body\n\n    message_details = self.get_message_details()\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    if not emails:\n        frappe.msgprint(\n            _(\"No users found in the group {0}\").format(self.daily_work_summary_group)\n        )\n        return\n\n    if not self.message:\n        frappe.msgprint(_(\"Please enter the message to be sent.\"))\n        return\n\n    email_content = get_email_body(\n        message_details[\"original_message\"],\n        message_details[\"title\"],\n        message_details[\"replies\"],\n        message_details[\"did_not_reply\"],\n        message_details[\"did_not_reply_title\"],\n    )\n\n    frappe.sendmail(\n        recipients=emails,\n        subject=_(\"Work Summary for {0}\").format(global_date_format(self.creation)),\n        message=email_content,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        unsubscribe_message=_(\"Unsubscribe from Daily Work Summary\"),\n        unsubscribe_method=\"daily_work_summary.daily_work_summary.doctype.daily_work_summary.daily_work_summary.unsubscribe_from_daily_work_summary\",\n        unsubscribe_params={\"daily_work_summary\": self.name},\n        attachments=get_file(\"Daily Work Summary\", self.name),\n    )\n\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 49.57167269071105}, {"code": "def send_summary(self)\n\tif self.daily_work_summary_group:\n        emails = get_user_emails_from_group(self.daily_work_summary_group)\n        if not emails:\n            frappe.msgprint(_(\"There are no users in the group {0}.\").format(self.daily_work_summary_group))\n            return\n\n        self.get_message_details()\n        self.db_set(\"status\", \"Sent\")\n\n        frappe.sendmail(\n            recipients=emails,\n            sender=frappe.session.user,\n            subject=_(\"Work Summary for {0}\").format(global_date_format(self.creation)),\n            message=self.message,\n            reference_doctype=self.doctype,\n            reference_name=self.name,\n            unsubscribe_message=_(\"Unsubscribe from Daily Work Summary\"),\n            unsubscribe_method=\"unsubscribe_daily_work_summary\",\n            unsubscribe_params={\"daily_work_summary_group\": self.daily_work_summary_group},\n            attachments=self.attachments,\n            communication_medium=\"Email\",\n        )\n\n", "CodeBleu_score": 47.18756937313942}, {"code": "def send_summary(self)\n\tif self.daily_work_summary_group:\n        emails = get_user_emails_from_group(self.daily_work_summary_group)\n        if emails:\n            self.db_set(\"email_sent_to\", \", \".join(emails))\n            self.db_set(\"status\", \"Sent\")\n            frappe.sendmail(\n                recipients=emails,\n                sender=frappe.session.user,\n                subject=_(\"Work Summary for {0}\").format(global_date_format(self.creation)),\n                message=self.get_message_details(),\n                reference_doctype=self.doctype,\n                reference_name=self.name,\n                unsubscribe_method=\"unsubscribe_daily_work_summary\",\n                unsubscribe_params={\"daily_work_summary_group\": self.daily_work_summary_group},\n                unsubscribe_message=_(\"Unsubscribe from Daily Work Summary\"),\n            )\n        else:\n            frappe.throw(\n                _(\"No users found in the Daily Work Summary Group {0}\").format(\n                    self.daily_work_summary_group\n                )\n            )\n\n", "CodeBleu_score": 46.501469784448325}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t# Check if the interview is for the same round\n    if self.interview_round != self.interview_round:\n        frappe.throw(_(\"Interview for job applicant {0} is already scheduled for round {1} on {2} at {3}. Please check the existing interview record.\").format(self.job_applicant, self.interview_round, self.interview_date, self.interview_time))\n    # Check if the interview is for the same job opening\n    if self.job_opening != self.job_opening:\n        frappe.throw(_(\"Interview for job applicant {0} is already scheduled for job opening {1} on {2} at {3}. Please check the existing interview record.\").format(self.job_applicant, self.job_opening, self.interview_date, self.interview_time))\n    # Check if the interview is for the same interview panel\n    if self.interview_panel != self.interview_panel:\n        frappe.throw(_(\"Interview for job applicant {0} is already scheduled for interview panel {1} on {2} at {3}. Please check the existing interview record.\").format(self.job_applicant, self.interview_panel, self.interview_date, self.interview_time))\n    # Check if the interview is for the same interview round and interview panel\n    if self.interview_round == self.interview_round and self.interview_panel == self.interview_panel:\n        frappe.throw(_(\"Interview for job applicant {0} is already scheduled for round {1} and interview panel {2} on {3} at {4}. Please check the existing interview record.\").format(self.job_applicant, self.interview_round, self.interview_panel, self.interview_date, self.interview_time))\n\n\n", "CodeBleu_score": 29.535133908221283}, {"code": "def validate_duplicate_interview(self)\n\tif self.interview_round:\n        duplicate_interview = frappe.db.sql(\"\"\"SELECT name FROM `tabInterview` WHERE job_applicant = %s AND interview_round = %s AND name != %s\"\"\", (self.job_applicant, self.interview_round, self.name))\n        if duplicate_interview:\n            frappe.throw(_(\"This job applicant has already been interviewed in this round. Please <a href='{0}'>{1}</a> to view the existing interview record.\").format(get_link_to_form(\"Interview\", duplicate_interview[0][0]), duplicate_interview[0][0]), title=_(\"Duplicate Interview\"))\n\n", "CodeBleu_score": 42.09780948483615}, {"code": "def validate_duplicate_interview(self)\n\tif self.interview_round:\n        duplicate_interview = frappe.db.sql(\"\"\"\n            SELECT\n                name\n            FROM\n                `tabInterview`\n            WHERE\n                job_applicant = %s\n                AND interview_round = %s\n                AND name != %s\n        \"\"\", (self.job_applicant, self.interview_round, self.name), as_dict=1)\n\n        if duplicate_interview:\n            frappe.throw(_(\"An interview for this job applicant and interview round already exists. Please check the existing interview record <a href='{0}'>{1}</a> and the job applicant's information.\").format(\n                get_link_to_form('Interview', duplicate_interview[0].name),\n                duplicate_interview[0].name\n            ), title=_('Duplicate Interview'))\n\n", "CodeBleu_score": 41.80594054245375}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total += assessment.rating\n            count += 1\n    if count == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total / count\n\n", "CodeBleu_score": 24.63085406458518}, {"code": "def calculate_average_rating(self)\n\ttotal_rating = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n    if len(self.assessments) > 0:\n        self.average_rating = total_rating / len(self.assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 35.21019557891114}, {"code": "def calculate_average_rating(self)\n\tif len(self.skill_assessments) == 0:\n        self.average_rating = 0\n    else:\n        ratings = []\n        for assessment in self.skill_assessments:\n            if assessment.rating is not None:\n                ratings.append(assessment.rating)\n        self.average_rating = sum(ratings) / len(ratings)\n\n", "CodeBleu_score": 30.167241318243804}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_date = doc.interview_date\n    interview.interview_time = doc.interview_time\n    interview.interview_venue = doc.interview_venue\n    interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 41.326855578062}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 33.09404726967814}, {"code": "def create_interview(doc):\n\tinterview_doc = frappe.new_doc(\"Interview\")\n    interview_doc.interview_round = doc.get(\"interview_round\")\n    interview_doc.designation = doc.get(\"designation\")\n    interview_doc.interviewers = doc.get(\"interviewers\")\n    interview_doc.save()\n    return interview_doc\n\n", "CodeBleu_score": 31.181896505564417}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.get_all('Job Offer', filters={'designation': self.designation, 'company': self.company, 'status': 1, 'creation': ['between', [from_date, to_date]]}, fields=['name'])\n    return [job_offer.name for job_offer in job_offers]\n\n\n\n\n", "CodeBleu_score": 53.121509860619476}, {"code": "def get_job_offer(self, from_date, to_date)\n\tfilters = {'company': self.company, 'designation': self.designation, 'docstatus': 1}\n    job_offers = frappe.get_all(\"Job Offer\", filters=filters, fields=['name'])\n    return job_offers\n\n\n\n\n", "CodeBleu_score": 50.43177867306152}, {"code": "def get_job_offer(self, from_date, to_date)\n\t# Get the list of job offers created within the date range\n    job_offers = frappe.get_all('Job Offer',\n                                 filters={\n                                     'creation': ['between', [from_date, to_date]],\n                                     'status': 1\n                                 },\n                                 fields=['name'])\n\n    # Return the list of job offer names\n    return [job_offer.name for job_offer in job_offers]\n\n\n\n\n", "CodeBleu_score": 41.20339115250786}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tjob_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1}, fields=[\"*\"])\n    job_offers_accepted = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"}, fields=[\"*\"])\n    job_offers_accepted_count = len(job_offers_accepted)\n    job_offers_count = len(job_offers)\n    if job_offers_count == 0:\n        return 0\n    else:\n        return flt((job_offers_accepted_count / job_offers_count) * 100, 2)\n\n", "CodeBleu_score": 31.72509201784915}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company:\n        total = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company})\n        accepted = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company, 'status': 'Accepted'})\n    elif department:\n        total = frappe.db.count('Job Offer', {'docstatus': 1, 'department': department})\n        accepted = frappe.db.count('Job Offer', {'docstatus': 1, 'department': department, 'status': 'Accepted'})\n    else:\n        total = frappe.db.count('Job Offer', {'docstatus': 1})\n        accepted = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted'})\n    return (accepted/total)*100\n\n", "CodeBleu_score": 30.170172496810476}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\ttotal_job_offers = frappe.db.count('Job Offer', {'docstatus': 1})\n    if not company and not department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted'})\n    elif company and not department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted', 'company': company})\n    elif not company and department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted', 'department': department})\n    else:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted', 'company': company, 'department': department})\n    if total_job_offers == 0:\n        return 0\n    else:\n        return (accepted_job_offers / total_job_offers) * 100\n\n", "CodeBleu_score": 29.486700880283156}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\t\tif (!result.isSuccess())\n\t\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\t\treturn ResponseEntity.ok(result);\n\t}", "CodeBleu_score": 89.74307879426813}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\t\t}\n\t\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}", "CodeBleu_score": 37.911075760980204}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tCompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\t\tResult result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (result instanceof ErrorResult) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 46.85412188228989}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff staff = this.findById(companyStaffForUpdateDto.getId());\n\t\tif (staff == null) {\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\t\t}\n\t\tfinal Result result = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (result.isSuccess()) {\n\t\t\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\tstaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\t\tthis.save(staff);\n\t\t\treturn new SuccessResult(Messages.staffUpdated);\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 46.18295916365417}]}
