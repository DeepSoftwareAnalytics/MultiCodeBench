{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self.env['ir.attachment'].browse(self._context.get('active_ids'))\n    attachments._build_zip_from_attachments()\n    return attachments.check_access_rights() and attachments.check_access_rule() and attachments._get_zip_headers() and attachments.get()\n\n", "CodeBleu_score": 15.942838010682935}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self._build_zip_from_attachments(**args)\n    if not attachments:\n        return request.make_response(_('No documents to export'), status=404)\n    headers = self._get_zip_headers(attachments, 'export.zip')\n    return request.make_response(attachments, headers=headers)\n", "CodeBleu_score": 20.47334702096858}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self._build_zip_from_attachments(args)\n    response = self.request.make_response(attachments, headers=_get_zip_headers(attachments, 'attachments.zip'))\n    response.headers['Content-Type'] = 'application/zip'\n    return response\n\n", "CodeBleu_score": 15.900187486204645}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    values.update(self._get_portal_my_invoices_values())\n    return request.render(\"website_sale.portal_my_invoices\", values)\n", "CodeBleu_score": 27.591033991006825}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t # Prepare the values for the portal layout\n    values = self._prepare_portal_layout_values()\n    # Get the invoices\n    AccountInvoice = request.env['account.move']\n    domain = expression.AND([\n        self._get_invoices_domain(),\n    ])\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n    searchbar_filters = self._get_account_searchbar_filters()\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    domain += searchbar_filters[filterby]['domain']\n    if date_begin and date_end:\n        domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n    # Get the pager\n    pager = portal.pager(\n        url=self._get_portal_my_invoices_url(),\n        url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby},\n        total=AccountInvoice.search_count(domain),\n        page=page,\n        step=self._items_per_page,\n    )\n    # Update the values with the 'invoices' key set to the pager's method\n    values.update({\n        'invoices': lambda offset: AccountInvoice.search(domain, order=order, limit=self._items_per_page, offset=offset),\n        'page_name': 'invoice',\n        'pager': pager,\n        'default_url': self._get_portal_my_invoices_url(),\n       'searchbar_sortings': searchbar_sortings,\n       'sortby': sortby,\n       'searchbar_filters': OrderedDict(sorted(searchbar_filters.items())),\n        'filterby': filterby,\n    })\n    return request.render(\"website_sale.portal_my_invoices\", values)\n", "CodeBleu_score": 33.826335080412875}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 24.69731627253179}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = self.env['account.move'].browse(int(invoice_id))\n    if not invoice.check_access_rights('read', raise_exception=False):\n        raise AccessError(_('Access denied'))\n    if not invoice.check_access_rule('read'):\n        raise AccessError(_('Access denied'))\n    if not invoice.state in ('posted','reconciled'):\n        raise AccessError(_('Access denied'))\n    if not invoice.invoice_line_ids:\n        raise AccessError(_('No lines on invoice'))\n    if not invoice.invoice_line_ids.filtered(lambda l: l.product_id):\n        raise AccessError(_('No products on invoice'))\n    if not invoice.invoice_payment_state == 'not_paid':\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.email:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.vat:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.street:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.street2:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.zip:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.city:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.country_id:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.country_id.code:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.phone:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.mobile:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.website:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.partner_id.lang:\n        raise AccessError(_('Access denied'))\n    if not invoice.company_id.currency_id:\n        raise AccessError(_('Access denied'))", "CodeBleu_score": 18.241112701702107}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice.access_token_valid(access_token):\n        return request.redirect('/my/invoices')\n    if report_type == 'pdf':\n        if not invoice.state == 'posted':\n            return request.redirect('/my/invoices')\n        if invoice.type == 'out_invoice' and invoice.state == 'posted':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'out_refund' and invoice.state == 'posted':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'in_invoice' and invoice.state == 'posted':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'in_refund' and invoice.state == 'posted':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'out_invoice' and invoice.state == 'open':\n            return request.redirect('/my/invoices')\n        if invoice.type == 'out_refund' and invoice.state == 'open':\n            return request.redirect('/my/invoices')\n        if invoice.type == 'in_invoice' and invoice.state == 'open':\n            return request.redirect('/my/invoices')\n        if invoice.type == 'in_refund' and invoice.state == 'open':\n            return request.redirect('/my/invoices')\n        if invoice.type == 'out_invoice' and invoice.state == 'paid':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'out_refund' and invoice.state == 'paid':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'in_invoice' and invoice.state == 'paid':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'in_refund' and invoice.state == 'paid':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'out_invoice' and invoice.state == 'cancel':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'out_refund' and invoice.state == 'cancel':\n            return request.redirect('/my/invoices/history')\n        if invoice.type == 'in_invoice'", "CodeBleu_score": 19.896688858633453}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.invoice'].browse(int(invoice_id))\n    if not invoice.check_access_rights('read', raise_exception=False):\n        request.access_denied()\n    if not invoice.check_access_rule('read'):\n        request.unauthorized()\n    if access_token:\n        if not invoice.check_access_rights('read', access_token=access_token, raise_exception=False):\n            request.access_denied()\n        if not invoice.check_access_rule('read', access_token=access_token):\n            request.unauthorized()\n    if report_type == 'pdf':\n        if invoice.state not in ('posted', 'open'):\n            request.not_found()\n        if not invoice.legal_document_ids:\n            request.not_found()\n        if len(invoice.legal_document_ids) > 1:\n            return self._build_zip_from_attachments(invoice, invoice.legal_document_ids)\n        attachment = invoice.legal_document_ids[0]\n        return request.make_response(attachment.datas, [('Content-Type', attachment.mimetype)], [('Content-Disposition', 'attachment; filename=%s' % attachment.name)], 200)\n    elif report_type == 'text':\n        if not invoice.legal_document_ids:\n            request.not_found()\n        if len(invoice.legal_document_ids) > 1:\n            request.not_found()\n        attachment = invoice.legal_document_ids[0]\n        return request.make_response(attachment.datas, [('Content-Type', attachment.mimetype)], [('Content-Disposition', 'attachment; filename=%s' % attachment.name)], 200)\n    else:\n        return self._invoice_get_page_view_values(invoice, access_token, **kw)\n\n", "CodeBleu_score": 32.18548469356944}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    templates = self.env['product.template'].search(domain)\n    if company and company.account_sale_tax_id:\n        templates.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company and company.account_purchase_tax_id:\n        templates.write({'taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return templates\n", "CodeBleu_score": 29.98714504557462}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    if company.is_company_demo:\n        domain = [('domain', 'in', self.env.context.get('active_ids'))]\n        if company.domain:\n            domain.append(('domain', 'in', company.domain))\n        prod_templates = self.env['product.template'].search(domain)\n        if prod_templates:\n            if company.account_sale_tax_id:\n                prod_templates.filtered(lambda template: template.taxes_id == False).write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n            if company.account_purchase_tax_id:\n                prod_templates.filtered(lambda template: template.taxes_id == False).write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})\n            return prod_templates\n        return False\n    return False\n", "CodeBleu_score": 40.54294831176609}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = self._get_demo_data_products_domain(company)\n    prod_templates = self.env['product.template'].search(domain)\n    if prod_templates:\n        prod_templates.filtered(lambda r: r.taxes_id.write({'company_id': company.id})).filtered(lambda r: r.taxes_id.write({'company_id': False}))\n        prod_templates_sale = prod_templates.filtered(lambda r: r.sale_tax_id)\n        prod_templates_sale.filtered(lambda r: r.sale_tax_id.write({'company_id': company.id})).filtered(lambda r: r.sale_tax_id.write({'company_id': False}))\n        prod_templates_purchase = prod_templates.filtered(lambda r: r.purchase_tax_id)\n        prod_templates_purchase.filtered(lambda r: r.purchase_tax_id.write({'company_id': company.id})).filtered(lambda r: r.purchase_tax_id.write({'company_id': False}))\n    return prod_templates\n\n", "CodeBleu_score": 30.686893781432286}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not account_type:\n        account_type = 'other'\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id)\n    if account_id:\n        account = self.env['account.account'].browse(account_id)\n    else:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', account_type)], limit=1)\n    return account\n", "CodeBleu_score": 39.33844187489839}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id)\n    if account_id:\n        return self.env['account.account'].browse(account_id)\n    account_id = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)], limit=1)\n    if account_id:\n        return account_id\n    return self.env['account.account'].search([('company_id', '=', company.id), ('type', '=', account_type)], limit=1)\n", "CodeBleu_score": 46.88075598376018}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if account_type == 'customer':\n        account_type_id = '4'\n    elif account_type =='supplier':\n        account_type_id = '5'\n    elif account_type == 'account_payable':\n        account_type_id = '10'\n    elif account_type == 'account_receivable':\n        account_type_id = '9'\n    elif account_type == 'account_expense':\n        account_type_id = '8'\n    elif account_type == 'account_revenue':\n        account_type_id = '7'\n    else:\n        raise UserError(_('Invalid account type'))\n    demo_account = self.env['ir.model.data'].get_object('account', xml_id, company_id=company.id)\n    if demo_account:\n        return demo_account\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('type', '=', account_type_id)], limit=1)\n    if account:\n        return account\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n", "CodeBleu_score": 41.36153222796401}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == 'Current Year Earnings':\n        if self.company.account_set.filter(account_type='Current Year Earnings').exclude(pk=self.pk).exists():\n            raise ValidationError('There is already an account with the \"Current Year Earnings\" type for this company.')\n\n\n\n\n", "CodeBleu_score": 18.076066582748847}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == 'Current Year Earnings':\n        query = Account.objects.filter(company=self.company, account_type='Current Year Earnings')\n        if self.id:\n            query = query.exclude(id=self.id)\n        if query.exists():\n            raise ValidationError('There can be only one account with the \"Current Year Earnings\" type for each company.')", "CodeBleu_score": 32.86941992382014}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self._read_group(\n            ['account_id', 'account_type'],\n            ['account_id', 'account_type'],\n            ['account_type', '=', 'current_year_earnings'],\n            ['company_id', '=', self.company_id.id],\n            ['date_from', '<=', self.date_to],\n            ['date_to', '>=', self.date_from],\n            ['date_to', '<=', self.date_to],\n            ['date_from', '>=', self.date_from],\n            ['account_id', '!=', self.id],\n            ['account_id.company_id', '=', self.company_id.id],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_id.type', '=', 'view'],\n            ['account_", "CodeBleu_score": 12.40915724748997}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id'):\n            return self._order_accounts_by_frequency_for_partner(limit=limit, order=order)\n        else:\n            return self.search(domain, limit=limit, order=order)\n    else:\n        return self.search(self._get_name_search_domain(name, operator), limit=limit, order=order)\n", "CodeBleu_score": 22.19337762639749}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and self._context.get('account_report_partner_id'):\n        return self._order_accounts_by_frequency_for_partner(name, domain, operator, limit, order)\n    return super(AccountReport, self)._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 15.428001980911969}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('active_test'):\n            return self.search([])\n        if self._context.get('partner_id'):\n            return self.search([('partner_id', '=', self._context['partner_id'])])\n        return self.search([])\n    return super(AccountInvoice, self)._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 23.291367007902682}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super(Record, self).copy_translations(new, excluded=tuple(excluded) + ('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 77.85106507855042}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_line_tree').read()[0]\n    action['domain'] = [('id', 'in', self._query_analytic_accounts(self.id))]\n    action['context'] = {'search_default_move_type': 1}\n    return action\n", "CodeBleu_score": 16.28920418527258}, {"code": "def action_view_invoice(self)\n\t\n    if self.ensure_one():\n        domain = [('sale_type_id', 'in', self.get_sale_types().ids)]\n        domain.append(('id', '=', self.id))\n        domain.append(('analytic_account_id', 'in', self._query_analytic_accounts()))\n        query = self.env['account.move.line'].with_context(active_test=False).search_read(domain, ['move_id'])\n        move_ids = [line['move_id'][0] for line in query]\n        return {\n            'name': _('Customer Invoices'),\n            'type': 'ir.actions.act_window',\n            'view_type': 'form',\n            'view_mode': 'tree,form',\n           'res_model': 'account.move',\n            'domain': [('id', 'in', move_ids)],\n            'context': {'type': 'out_invoice'},\n        }\n\n", "CodeBleu_score": 40.647467939670825}, {"code": "def action_view_invoice(self)\n\t\n    context = self.env.context.copy()\n    active_ids = context.get('active_ids')\n    active_model = context.get('active_model')\n    if active_model =='sale.order':\n        context['search_default_sale_type'] = self.env.context.get('search_default_sale_type')\n        context['search_default_analytic_account'] = self.env.context.get('search_default_analytic_account')\n        context['search_default_analytic_tag'] = self.env.context.get('search_default_analytic_tag')\n        context['search_default_analytic_tag_2'] = self.env.context.get('search_default_analytic_tag_2')\n        context['search_default_analytic_tag_3'] = self.env.context.get('search_default_analytic_tag_3')\n        context['search_default_analytic_tag_4'] = self.env.context.get('search_default_analytic_tag_4')\n        context['search_default_analytic_tag_5'] = self.env.context.get('search_default_analytic_tag_5')\n        context['search_default_analytic_tag_6'] = self.env.context.get('search_default_analytic_tag_6')\n        context['search_default_analytic_tag_7'] = self.env.context.get('search_default_analytic_tag_7')\n        context['search_default_analytic_tag_8'] = self.env.context.get('search_default_analytic_tag_8')\n        context['search_default_analytic_tag_9'] = self.env.context.get('search_default_analytic_tag_9')\n        context['search_default_analytic_tag_10'] = self.env.context.get('search_default_analytic_tag_10')\n        context['search_default_analytic_tag_11'] = self.env.context.get('search_default_analytic_tag_11')\n        context['search_default_analytic_tag_12'] = self.env.context.get('search_default_analytic_tag", "CodeBleu_score": 22.690504098472893}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    context = self.env.context\n    active_ids = context.get('active_ids', [])\n    active_model = context.get('active_model', 'account.move')\n    active_id = context.get('active_id', False)\n    if active_model == 'account.move' and active_id:\n        move_ids = self.env['account.move'].browse(active_id).mapped('line_ids').mapped('move_id').ids\n    else:\n        move_ids = self.env['account.move'].search([('line_ids.purchase_type', 'in', self.get_purchase_types()), ('line_ids.purchase_type', '!=', 'purchase_line')]).mapped('line_ids').mapped('move_id').ids\n    if not move_ids:\n        raise UserError(_('There is no vendor bill related to this record.'))\n    action = self.env.ref('account.action_move_tree').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'type': 'in_invoice', 'default_purchase_type': self.get_purchase_types()}\n    return action\n\n", "CodeBleu_score": 44.80966454473976}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    domain = [('purchase_type', 'in', self.get_purchase_types()), ('purchase_type', '!=', False), ('purchase_type', '!=', None), ('purchase_type', '=', self.id)]\n    action = self.env.ref('account.action_move_line_tree').read()[0]\n    action['domain'] = domain\n    action['context'] = {'default_purchase_type': self.id, 'default_move_type': 'in_invoice'}\n    return action\n", "CodeBleu_score": 19.959017223267285}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    account_move_ids = self._search([('purchase_type', '=', self.purchase_type.id), ('purchase_type', '=', self.purchase_type.id)])\n    account_move_lines = self.env['account.move.line'].search([('account_move_id', 'in', account_move_ids), ('purchase_type', '=', self.purchase_type.id), ('purchase_type', '=', self.purchase_type.id)])\n    move_ids = account_move_lines.mapped('move_id')\n    action = self.env.ref('account.action_move_tree').read()[0]\n    action['domain'] = [('id', 'in', move_ids.ids)]\n    action['context'] = {'default_purchase_type': self.purchase_type.id}\n    return action\n", "CodeBleu_score": 30.85535276900278}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result", "CodeBleu_score": 90.03869238361304}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.ensure_one():\n        return self\n    if self.env['ir.config_parameter'].sudo().get_param('account.bank_account.skip_creation') == '1':\n        return self.env['account.bank.statement'].new(self.company_id.id)\n    bank_account = self.env['account.bank.statement'].search([('partner_id', '=', self.partner_id.id), ('acc_number', '=', self.acc_number)], limit=1)\n    if bank_account:\n        return bank_account\n    return self.env['account.bank.statement'].new(self.company_id.id)\n\n", "CodeBleu_score": 40.754275822539384}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.company_id.skip_bank_account_creation:\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'acc_name': self.acc_name,\n            'partner_id': self.partner_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 52.77285497666166}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.ensure_one():\n        return\n    if self.env['ir.config_parameter'].sudo().get_param('bank_account.skip_creation'):\n        return\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('acc_number', '=', self.bank_account_number)])\n    if bank_account:\n        return bank_account\n    bank_account = self.env['res.partner.bank'].create({\n        'acc_number': self.bank_account_number,\n        'partner_id': self.id,\n        'company_id': self.company_id.id,\n    })\n    return bank_account\n", "CodeBleu_score": 50.280840482193}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if transaction_currency!= currency:\n        transaction_amount = self.currency_id.with_context(date=self.date).compute(transaction_amount, currency)\n        balance = self.currency_id.with_context(date=self.date).compute(balance, currency)\n    if journal_currency!= currency:\n        journal_amount = self.currency_id.with_context(date=self.date).compute(journal_amount, currency)\n    if company_currency!= currency:\n        company_amount = self.currency_id.with_context(date=self.date).compute(company_amount, currency)\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': journal_amount,\n        'journal_currency': journal_currency,\n        'company_amount': company_amount,\n        'company_currency': company_currency,\n    }\n\n", "CodeBleu_score": 23.805976275621816}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if transaction_currency == currency:\n        return {\n            'amount': balance,\n            'amount_currency': amount_currency,\n        }\n    # The transaction amount is already in the currency of the statement line.\n    # We just need to adjust it to the currency of the counterpart.\n    transaction_amount = currency.with_context(date=self.date).compute(transaction_amount, transaction_currency)\n    # The balance is already in the currency of the statement line.\n    # We just need to adjust it to the currency of the counterpart.\n    balance = currency.with_context(date=self.date).compute(balance, transaction_currency)\n    # The journal amount is already in the currency of the statement line.\n    # We just need to adjust it to the currency of the counterpart.\n    journal_amount = currency.with_context(date=self.date).compute(journal_amount, journal_currency)\n    # The company amount is already in the currency of the statement line.\n    # We just need to adjust it to the currency of the counterpart.\n    company_amount = currency.with_context(date=self.date).compute(company_amount, company_currency)\n    return {\n        'amount': balance,\n        'amount_currency': amount_currency,\n    }\n\n", "CodeBleu_score": 21.897868597750684}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if not self.foreign_currency_id:\n        return {'amount': balance, 'currency': currency}\n    if self.foreign_currency_id == currency:\n        return {'amount': balance, 'currency': currency}\n    if self.foreign_currency_id.is_zero(balance):\n        return {'amount': 0.0, 'currency': currency}\n    if self.foreign_currency_id.is_zero(amount_currency):\n        return {'amount': 0.0, 'currency': currency}\n    if self.foreign_currency_id == currency and not self.foreign_currency_id.is_zero(balance):\n        return {'amount': balance, 'currency': currency}\n    if self.foreign_currency_id == currency and not self.foreign_currency_id.is_zero(amount_currency):\n        return {'amount': amount_currency, 'currency': currency}\n    if not self.foreign_currency_id.is_zero(balance):\n        return {'amount': balance, 'currency': currency}\n    if not self.foreign_currency_id.is_zero(amount_currency):\n        return {'amount': amount_currency, 'currency': currency}\n    return {'amount': 0.0, 'currency': currency}\n\n", "CodeBleu_score": 16.42267277857383}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            payment_methods = journal._default_outbound_payment_methods()\n            for payment_method in payment_methods:\n                payment_method_line = self.env['account.payment.method.line'].create({\n                    'journal_id': journal.id,\n                    'payment_method_id': payment_method.id,\n                })\n                payment_method_line.action_create_payment_method_line()\n\n", "CodeBleu_score": 45.40659928438549}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            payment_method_line_ids = journal._default_outbound_payment_methods()\n            if not payment_method_line_ids:\n                raise UserError(_(\"No outbound payment methods found for journal '%s'.\") % (journal.name))\n            journal.payment_method_line_ids = payment_method_line_ids\n        else:\n            journal.payment_method_line_ids = False\n\n", "CodeBleu_score": 40.07008542844847}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            journal._clear_outbound_payment_method_lines()\n            for method in journal._default_outbound_payment_methods():\n                journal._create_outbound_payment_method_line(method)\n        else:\n            journal._clear_outbound_payment_method_lines()\n\n", "CodeBleu_score": 32.6079345545439}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t   for move in self:\n        if not move.invoice_date:\n            if not move.date:\n                move.date = fields.Date.context_today(move)\n            continue\n        if not move.is_sale_document(include_receipts=True):\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            if move.date!= fields.Date.context_today(move):\n                move.date_invoice = move.date\n                move._scheduled_date_update = True\n                move._scheduled_date_update_fields = ['date', 'date_invoice']\n        else:\n            move.date = move.invoice_date\n            move.date_invoice = move.invoice_date\n            move._scheduled_date_update = True\n            move._scheduled_date_update_fields = ['date', 'date_invoice']\n\n", "CodeBleu_score": 48.68681076845576}, {"code": "def _compute_date(self)\n\t   for move in self:\n        invoice_date = move.invoice_date or fields.Date.context_today(move)\n        has_tax = move._affect_tax_report()\n        if not move.date:\n            move.date = fields.Date.context_today(move)\n        elif move.date!= fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n        elif move.date!= _get_accounting_date(move, invoice_date, has_tax):\n            move.date = _get_accounting_date(move, invoice_date, has_tax)\n            move.date_maturity = move.date_maturity or move.date\n            move.date_due = move.date_due or move.date\n            move.date_expected = move.date_expected or move.date\n            move.date_order = move.date_order or move.date\n            move.date_invoice = move.date_invoice or move.date\n            move.date_maturity = move.date_maturity or move.date\n            move.date_maturity_invoice = move.date_maturity_invoice or move.date\n            move.date_invoice_due = move.date_invoice_due or move.date\n            move.date_invoice_due_expected = move.date_invoice_due_expected or move.date\n            move.date_invoice_due_expected_invoice = move.date_invoice_due_expected_invoice or move.date\n            move.date_invoice_due_expected_invoice_date = move.date_invoice_due_expected_invoice_date or move.date\n            move.date_invoice_due_expected_invoice_date_invoice = move.date_invoice_due_expected_invoice_date_invoice or move.date\n            move.date_invoice_due_expected_invoice_date_invoice_date = move.date_invoice_due_expected_invoice_date_invoice_date or move.date\n            move.date_invoice_due_expected_invoice_date_invoice_date_invoice = move.date_invoice_due_expected_invoice_date_invoice_date_invoice or move.date\n            move.date_invoice_due_expected_invoice_date_invoice_date_invoice_date = move.date_", "CodeBleu_score": 29.75456299386931}, {"code": "def _compute_date(self)\n\t   self.ensure_one()\n    if not self.invoice_date:\n        if self.date:\n            self.date = self.date\n        else:\n            self.date = fields.Date.context_today(self)\n    else:\n        if not self.is_sale_document(include_receipts=True):\n            self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n        else:\n            self.date = self.invoice_date\n    if self.date!= fields.Date.context_today(self):\n        self.date = fields.Date.context_today(self)\n        self._recompute_fields()\n\n", "CodeBleu_score": 35.078791344163726}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.payment_term_id = False\n        else:\n            move.payment_term_id = False\n\n", "CodeBleu_score": 42.7564621077774}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id and move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        elif move.is_purchase_document:\n            if move.partner_id and move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 48.76140933755473}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document():\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document():\n            if move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.payment_term_id = False\n\n", "CodeBleu_score": 46.14746275621465}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)])\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id)])\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([])\n    return tax_group_id.id\n\n", "CodeBleu_score": 19.361931265517818}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    tax_groups_by_country_company = self._get_tax_groups_by_country_company()\n    for tax in self:\n        country = tax.country_id\n        company = tax.company_id\n        tax_group_id = tax_groups_by_country_company.get((country, company))\n        if tax_group_id:\n            tax.tax_group_id = tax_group_id\n        else:\n            tax_group_id = tax_groups_by_country_company.get((country, False))\n            if tax_group_id:\n                tax.tax_group_id = tax_group_id\n            else:\n                tax_group_id = tax_groups_by_country_company.get((False, company))\n                if tax_group_id:\n                    tax.tax_group_id = tax_group_id\n                else:\n                    tax_group_id = tax_groups_by_country_company.get((False, False))\n                    if tax_group_id:\n                        tax.tax_group_id = tax_group_id\n                    else:\n                        tax.tax_group_id = False\n", "CodeBleu_score": 24.273877890597078}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)])\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id)])\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([])\n    self.tax_group_id = tax_group_id\n", "CodeBleu_score": 19.658403169346716}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.session.get(url + '/base_import_module/login_upload')\n    # Prepare the POST request data\n    post_data = {'login': login, 'password':, 'db': db, 'force': force}\n    # Read the module file\n    module_file = open(module_file, 'rb')\n    # Prepare the POST request\n    post_request = self.session.post(url + '/base_import_module/login_upload', data=post_data, files={'module': module_file})\n    # Raise an exception if the server does not have the required module installed or is outdated\n    if 'Module not found' in post_request.text or 'Module outdated' in post_request.text:\n        raise Exception(post_request.text)\n    # Return the server's response text\n    return post_request.text\n\n\n\n\n", "CodeBleu_score": 38.80946430650125}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    session = requests.Session()\n    session.get(url + '/login')\n    data = {'login': login, 'password':, 'db': db, 'force': force}\n    files = {'file': (module_file, open(module_file, 'rb'), 'application/x-python-code')}\n    response = session.post(url + '/base_import_module/login_upload', data=data, files=files)\n    return response.text\n", "CodeBleu_score": 32.290281089972375}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set database in session\n    with requests.Session() as session:\n        session.get(url + '/login')\n        session.headers.update({'Referer': url + '/login'})\n        session.headers.update({'X-Requested-With': 'XMLHttpRequest'})\n        session.headers.update({'Content-Type': 'application/x-www-form-urlencoded'})\n        post_data = {'login': login, 'password':, 'db': db, 'force': force}\n        session.post(url + '/login', data=post_data)\n        # Prepare POST request data\n        post_data = {'login': login, 'password':, 'db': db, 'force': force,'module': (None, open(module_file, 'rb'))}\n        # Upload module file\n        response = session.post(url + '/base_import_module/login_upload', data=post_data)\n        return response.text\n", "CodeBleu_score": 42.1961506693293}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    db_name = get_db_name()\n    overwrite = get_overwrite()\n    registry = Registry(db_name)\n    with registry.cursor() as cursor:\n        translation_importer = TranslationImporter(cursor, overwrite=overwrite)\n        translation_importer.save()\n        translation_importer.load_file()", "CodeBleu_score": 24.82800906262505}, {"code": "def import_translation()\n\t\n    config = get_config()\n    db_name = config['db_name']\n    overwrite = config['overwrite']\n    registry = RegistryManager.get(db_name)\n    translation_importer = TranslationImporter(registry.cursor)\n    translation_importer.save = overwrite\n    translation_importer.load_file()\n", "CodeBleu_score": 18.937905163831655}, {"code": "def import_translation()\n\t\n    config = get_config()\n    overwrite = config.get('overwrite', False)\n    database_name = config.get('database_name', 'test')\n    database_registry = RegistryManager.get(database_name)\n    with database_registry.cursor() as cursor:\n        translation_importer = TranslationImporter(cursor, overwrite=overwrite)\n        translation_importer.load_file()\n        translation_importer.save()", "CodeBleu_score": 35.945838151163656}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info, self.depth + 1)\n    if new_node.name not in [child.name for child in self.children]:\n        self.children.append(new_node)\n        if hasattr(self, 'parent'):\n            new_node.parent = self.parent\n            new_node.parent.children.append(new_node)\n        if hasattr(self, 'children'):\n            new_node.children = self.children\n        if hasattr(self, 'depth'):\n            new_node.depth = self.depth + 1\n        if hasattr(self, 'info'):\n            new_node.info = self.info\n        if hasattr(self, 'name'):\n            new_node.name = self.name\n        new_node.children.sort(key=lambda x: x.name)\n        return new_node\n    else:\n        return None\n\n", "CodeBleu_score": 41.09853113555439}, {"code": "def add_child(self, name, info)\n\t\n    if not self.children:\n        self.children = []\n    if name not in [child.name for child in self.children]:\n        new_node = Node(name, info, self.depth + 1)\n        if self.parent:\n            new_node.parent = self.parent\n            new_node.depth = self.depth + 1\n            if self.parent.children:\n                self.parent.children.append(new_node)\n                self.parent.children.sort(key=lambda x: x.name)\n        self.children.append(new_node)\n        self.children.sort(key=lambda x: x.name)\n        return new_node\n    else:\n        return None\n", "CodeBleu_score": 41.47761177294633}, {"code": "def add_child(self, name, info)\n\t\n    if not self.has_child(name):\n        new_node = Node(name, info, self.depth + 1)\n        self.children.append(new_node)\n        if hasattr(self, 'parent'):\n            new_node.parent = self.parent\n            new_node.depth = self.depth + 1\n            if hasattr(self, 'children'):\n                new_node.children = self.children\n        self.children.sort(key=lambda x: x.name)\n        return new_node\n    else:\n        return self.get_child(name)\n\n", "CodeBleu_score": 44.51966816193953}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {date: 0 for date in dates}\n    root_type = account.root_type\n    for entry in gl_entries:\n        date = entry.posting_date\n        if entry.account == account.name:\n            result[date] += entry.debit - entry.credit\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in result:\n            result[date] *= -1\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for date in result:\n            result[date] = sum(result[date:date])\n    return result\n", "CodeBleu_score": 36.16370803720038}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    result[\"dates\"] = dates\n    result[\"balances\"] = [0] * len(dates)\n    root_type = get_root_type(account)\n    if root_type not in (\"Asset\", \"Expense\"):\n        for i, date in enumerate(dates):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    for gl_entry in gl_entries:\n        date = gl_entry.get(\"posting_date\")\n        if date not in dates:\n            continue\n        if gl_entry.get(\"account\")!= account:\n            continue\n        if gl_entry.get(\"credit\"):\n            result[\"balances\"][dates.index(date)] += gl_entry.get(\"credit\")\n        else:\n            result[\"balances\"][dates.index(date)] -= gl_entry.get(\"debit\")\n    return result\n", "CodeBleu_score": 29.269582544981215}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n    root_type = account.root_type\n    for gl_entry in gl_entries:\n        if gl_entry.account == account:\n            date = gl_entry.posting_date\n            balance = gl_entry.debit - gl_entry.credit\n            result[\"balances\"][dates.index(date)] += balance\n            if root_type == \"Asset\":\n                result[\"balances\"][dates.index(date)] -= balance\n            elif root_type == \"Liability\":\n                result[\"balances\"][dates.index(date)] += balance\n            elif root_type == \"Equity\":\n                result[\"balances\"][dates.index(date)] += balance\n    if root_type not in (\"Asset\", \"Expense\"):\n        for i in range(len(result[\"balances\"])):\n            result[\"balances\"][i] *= -1\n    return result\n\n", "CodeBleu_score": 25.42512068492234}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.get(\"account_type\") in [\"Receivable\", \"Payable\"]:\n        return\n    if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n        if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n            if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                    if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                        if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                            if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                    if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                        if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                            if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                    if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                        if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                            if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                    if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                        if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                            if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                                if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                                    if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                                        if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                                            if self.get(\"account_type\") not in [\"Receivable\", \"Payable\"]:\n                                                                                                if self", "CodeBleu_score": 15.29569883356357}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if (\n        self.get_value", "CodeBleu_score": 0.5895777915835785}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.receivable_account_type", "CodeBleu_score": 0.5033503838590709}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n    if self.account_currency!= self.currency:\n        self.flags.account_currency_mismatch = True\n        if self.get(\"account_currency_mismatch_message\"):\n            self.flags.account_currency_mismatch_message = self.get(\n                \"account_currency_mismatch_message\"\n            )\n        else:\n            self.flags.account_currency_mismatch_message = _(\n                \"Account currency is different from the ledger entries.\"\n            )\n\n", "CodeBleu_score": 35.721264486671956}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency:\n        if self.account_type == \"Asset\" or self.account_type == \"Liability\":\n            self.is_currency_explicit = 1\n        else:\n            self.is_currency_explicit = 0\n    else:\n        self.currency = frappe.db.get_value(\"Company\", frappe.defaults.get_user_default(\"company\"), \"default_currency\")\n        self.is_currency_explicit = 0\n", "CodeBleu_score": 29.104342197189613}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency and self.account_currency!= self.company:\n        frappe.throw(_(\"Account currency must be same as Company Currency\"))\n\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n\n    if self.account_currency and self.account_currency!= self.company:\n        frappe.throw(_(\"Account currency must be same as Company Currency\"))\n\n    if not self.account_currency:\n        frappe.throw(_(\"Please specify Account Currency\"))\n\n    self.is_currency_explicitly_specified = 1\n\n", "CodeBleu_score": 41.33000103064132}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += entry[\"debit\"]\n            aggregated_entries[key][\"credit\"] += entry[\"credit\"]\n            aggregated_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n            aggregated_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n            aggregated_entries[key][\"debit_amount_in_account_currency\"] += entry[\"debit_amount_in_account_currency\"]\n            aggregated_entries[key][\"credit_amount_in_account_currency\"] += entry[\"credit_amount_in_account_currency\"]\n            aggregated_entries[key][\"key_values\"].update(key_values)\n        else:\n            aggregated_entries[key] = {\n                \"debit\": entry[\"debit\"],\n                \"credit\": entry[\"credit\"],\n                \"debit_amount\": entry[\"debit_amount\"],\n                \"credit_amount\": entry[\"credit_amount\"],\n                \"debit_amount_in_account_currency\": entry[\"debit_amount_in_account_currency\"],\n                \"credit_amount_in_account_currency\": entry[\"credit_amount_in_account_currency\"],\n                \"key_values\": key_values\n            }\n    return aggregated_entries\n\n", "CodeBleu_score": 33.485492439248}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in merged_entries:\n            merged_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n            merged_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n            merged_entries[key][\"debit_amount_account_currency\"] += entry[\"debit_amount_account_currency\"]\n            merged_entries[key][\"credit_amount_account_currency\"] += entry[\"credit_amount_account_currency\"]\n        else:\n            merged_entries[key] = {\n                \"debit_amount\": entry[\"debit_amount\"],\n                \"credit_amount\": entry[\"credit_amount\"],\n                \"debit_amount_account_currency\": entry[\"debit_amount_account_currency\"],\n                \"credit_amount_account_currency\": entry[\"credit_amount_account_currency\"],\n                \"key_values\": key_values,\n            }\n\n    return merged_entries\n\n", "CodeBleu_score": 38.48752454690544}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"company\": key_values[\"company\"],\n                \"account\": key_values[\"account\"],\n                \"account_currency\": key_values[\"account_currency\"],\n                \"cost_center\": key_values[\"cost_center\"],\n                \"project\": key_values[\"project\"],\n                \"finance_book\": key_values[\"finance_book\"],\n                \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n                \"debit\": 0,\n                \"credit\": 0,\n                \"amount\": 0,\n            }\n        merged_entries[key][\"debit\"] += cfloat(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += cfloat(entry.get(\"credit\"))\n        merged_entries[key][\"amount\"] += cfloat(entry.get(\"amount\"))\n    return merged_entries\n\n", "CodeBleu_score": 44.42431113535649}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.block_type == \"Hold\" and self.transaction_type == \"Supplier Payment\":\n                if supplier.release_date and supplier.release_date < nowdate():\n                    frappe.throw(_(\"Supplier {0} is on hold. Please release the hold before proceeding with the transaction.\").format(supplier.supplier_name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold. Please release the hold before proceeding with the transaction.\").format(supplier.supplier_name))\n            elif supplier.block_type == \"Block\" and self.transaction_type == \"Buying Invoice\":\n                frappe.throw(_(\"Supplier {0} is blocked. Please unblock the supplier before proceeding with the transaction.\").format(supplier.supplier_name))\n\n\n\n\n", "CodeBleu_score": 28.543184093829453}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.block_type == \"Hold\" and self.transaction_type == \"Supplier Payment\":\n                if supplier.release_date and supplier.release_date < nowdate():\n                    frappe.throw(_(\"Supplier {0} is on hold and cannot be paid\").format(supplier.supplier_name))\n            elif supplier.block_type == \"Hold\" and self.transaction_type == \"Buying Invoice\":\n                if supplier.release_date and supplier.release_date < nowdate():\n                    frappe.throw(_(\"Supplier {0} is on hold and cannot be invoiced\").format(supplier.supplier_name))\n            elif supplier.block_type == \"Block\" and self.transaction_type == \"Supplier Payment\":\n                frappe.throw(_(\"Supplier {0} is blocked and cannot be paid\").format(supplier.supplier_name))\n            elif supplier.block_type == \"Block\" and self.transaction_type == \"Buying Invoice\":\n                frappe.throw(_(\"Supplier {0} is blocked and cannot be invoiced\").format(supplier.supplier_name))", "CodeBleu_score": 27.7387405764279}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.hold_type == \"Purchase\" and self.doctype == \"Supplier Payment\":\n                if supplier.release_date and nowdate() > supplier.release_date:\n                    frappe.throw(\n                        \"Supplier {0} is blocked. Please release the supplier before proceeding with this transaction.\".format(\n                            supplier.supplier_name\n                        )\n                    )\n            elif supplier.hold_type == \"Sales\" and self.doctype == \"Buying Invoice\":\n                if supplier.release_date and nowdate() > supplier.release_date:\n                    frappe.throw(\n                        \"Supplier {0} is blocked. Please release the supplier before proceeding with this transaction.\".format(\n                            supplier.supplier_name\n                        )\n                    )\n            else:\n                frappe.throw(\n                    \"Supplier {0} is blocked. Please release the supplier before proceeding with this transaction.\".format(\n                        supplier.supplier_name\n                    )\n                )\n\n", "CodeBleu_score": 24.326188262833416}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    repost_doctypes = repost_doctypes.split(\",\")\n    repost_doctypes = [repost_doctype.strip() for repost_doctype in repost_doctypes]\n    if not repost_doctypes:\n        return\n    references_map = {}\n    for repost_doctype in repost_doctypes:\n        references_map[repost_doctype] = {}\n    for repost_doctype in repost_doctypes:\n        for repost_doc in frappe.get_all(repost_doctype, fields=[\"name\", \"parent\", \"parenttype\"], filters={\"parent\": self.name, \"parenttype\": self.doctype}):\n            references_map[repost_doctype][repost_doc.parent] = repost_doc.name\n    for repost_doctype, references in references_map.items():\n        for parent_doctype, parent in references.items():\n            parent_doc = frappe.get_doc(parent_doctype, parent)\n            if not parent_doc:\n                continue\n            if repost_doctype in [\"Vouchers\", \"Repost Vouchers\"]:\n                parent_doc.repost_vouchers.remove(self.name)\n            else:\n                parent_doc.vouchers.remove(self.name)\n            parent_doc.ignore_validate_links = 1\n            parent_doc.save()\n", "CodeBleu_score": 27.524141553293983}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    voucher_type = self.voucher_type\n    voucher_number = self.voucher_number\n    for doctype in repost_doctypes:\n        query = f\"\"\"select parent, parenttype from `tab{doctype}` where voucher_type = '{voucher_type}' and voucher_number = '{voucher_number}'\"\"\"\n        references_map = frappe._dict()\n        for parent, parenttype in frappe.db.sql(query):\n            references_map.setdefault(parenttype, [])\n            references_map[parenttype].append(parent)\n        for parenttype, parents in references_map.items():\n            parent_doc = frappe.get_doc(parenttype, parents[0])\n            if parenttype in repost_doctypes:\n                parent_doc.repost_vouchers.remove(self.name)\n            else:\n                parent_doc.vouchers.remove(self.name)\n            parent_doc.ignore_validate_links = 1\n            parent_doc.ignore_validate_update_after_submit = 1\n            parent_doc.save()", "CodeBleu_score": 29.052036784750356}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\n        \"Repost DocType\",\n        fields=[\"repost_doctype\"],\n        filters={\"is_repost_doctype\": 1},\n    )\n    if repost_doctypes:\n        repost_doctypes = [\n            d.repost_doctype for d in repost_doctypes\n        ]  # get the list of repost doctypes\n        for repost_doctype in repost_doctypes:\n            if repost_doctype == self.doctype:\n                continue\n            references_map = self._get_references_map(repost_doctype)\n            if not references_map:\n                continue\n            for parent_doctype, parent_map in references_map.items():\n                parent_doc = frappe.get_doc(parent_doctype, parent_map)\n                self._remove_references_in_repost_doctypes(\n                    parent_doc, references_map\n                )\n                parent_doc.repost_vouchers = [\n                    d for d in parent_doc.repost_vouchers if d.name not in parent_map\n                ]\n                parent_doc.repost_vouchers = [\n                    d for d in parent_doc.repost_vouchers if d.name not in parent_map\n                ]\n                parent_doc.ignore_validation = 1\n                parent_doc.set_ignore_links()\n                parent_doc.save()\n\n", "CodeBleu_score": 22.06244110820604}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    transactions = []\n    try:\n        self.auth()\n        for i in range(0, 1000000000):\n            params = {\n                \"count\": 250,\n                \"offset\": i,\n                \"start_date\": start_date,\n                \"end_date\": end_date,\n            }\n            if account_id:\n                params[\"account_id\"] = account_id\n            response = self.client.Transactions.get(self.access_token, **params)\n            transactions.extend(response[\"transactions\"])\n            if len(response[\"transactions\"]) < params[\"count\"]:\n                break\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Error retrieving transactions\")\n        frappe.throw(_(str(e)), title=_(\"Error Retrieving Transactions\"))\n    return transactions\n", "CodeBleu_score": 36.7155103641862}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    transactions = []\n    start_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n    end_date = datetime.strptime(end_date, \"%Y-%m-%d\")\n    if not account_id:\n        accounts = self.client.Accounts.get(self.access_token)\n        account_id = accounts[0][\"account_id\"]\n    transactions_count = 0\n    while True:\n        try:\n            transactions_response = self.client.Transactions.get(\n                self.access_token, account_id, start_date, end_date\n            )\n            transactions_count += len(transactions_response[\"transactions\"])\n            transactions.extend(transactions_response[\"transactions\"])\n            if transactions_count >= transactions_response[\"total_transactions\"]:\n                break\n            start_date = transactions_response[\"transactions\"][-1][\"date\"]\n            start_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction retrieval error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n    return transactions\n\n", "CodeBleu_score": 33.14493811922845}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    transactions = []\n    start_date = frappe.utils.get_datetime(start_date).date()\n    end_date = frappe.utils.get_datetime(end_date).date()\n    if account_id:\n        account_id = self.get_account_id(account_id)\n    while True:\n        try:\n            response = self.client.Transactions.get(\n                self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                count=self.count,\n                offset=self.offset,\n                account_ids=[account_id],\n            )\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Error fetching transactions\")\n            frappe.throw(_(str(e)), title=_(\"Error Fetching Transactions\"))\n        transactions.extend(response[\"transactions\"])\n        self.offset += self.count\n        if len(transactions) >= response[\"total_transactions\"]:\n            break\n    return transactions\n\n", "CodeBleu_score": 44.20105228725841}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"item\"][\"institution_id\"]\n        bank = frappe.get_doc(\"Bank\", {\"plaid_id\": bank_id})\n        if not bank:\n            bank = frappe.new_doc(\"Bank\")\n            bank.plaid_id = bank_id\n            bank.name = bank_name\n            bank.access_token = token\n            bank.save()\n            frappe.msgprint(\"Bank added successfully\")\n        else:\n            bank.access_token = token\n            bank.save()\n            frappe.msgprint(\"Bank updated successfully\")\n    except Exception as e:\n        frappe.log_error(str(e))\n\n", "CodeBleu_score": 38.02811668266397}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank = frappe.get_doc(\"Bank\", token)\n        bank.access_token = response[\"access_token\"]\n        bank.save()\n    except Exception as e:\n        frappe.log_error(\"Error while adding bank: {0}\".format(e))\n", "CodeBleu_score": 20.20116644786757}, {"code": "def add_institution(token, response)\n\t\n    bank = frappe.get_doc(\"Bank\", response[\"institution\"][\"institution_id\"])\n    if not bank:\n        bank = frappe.new_doc(\"Bank\")\n        bank.name = response[\"institution\"][\"name\"]\n        bank.institution_id = response[\"institution\"][\"institution_id\"]\n        bank.access_token = token\n        bank.save()\n    else:\n        bank.access_token = token\n        bank.save()\n    return bank\n", "CodeBleu_score": 31.304313032216903}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    start_date = last_integration_date\n    end_date = today()\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    if not transactions:\n        return\n\n    new_bank_transactions = []\n    for transaction in transactions:\n        new_bank_transactions += new_bank_transaction(transaction)\n\n    if new_bank_transactions:\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", transactions[-1][\"date\"])\n        frappe.msgprint(_(\"Added {0} new bank transactions.\").format(len(new_bank_transactions)))\n    else:\n        frappe.msgprint(_(\"No new bank transactions to add.\"))\n\n", "CodeBleu_score": 29.98092968274948}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n    start_date = last_integration_date + timedelta(days=1)\n    end_date = today()\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    new_bank_transactions = []\n    for transaction in transactions:\n        new_bank_transactions += new_bank_transaction(transaction)\n    frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", transactions[0][\"date\"])\n    frappe.msgprint(\n        _(\"{} new transactions added\").format(len(new_bank_transactions)),\n        alert=True,\n    )\n\n", "CodeBleu_score": 27.584679382246858}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    last_integration_date = getdate(last_integration_date) if last_integration_date else None\n\n    transactions = get_transactions(bank, bank_account, last_integration_date)\n\n    if transactions:\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", transactions[-1][\"date\"])\n\n        if new_transactions:\n            frappe.msgprint(\n                _(\"New Bank Transactions Added: {0}\").format(len(new_transactions)),\n                title=_(\"Bank Transactions Synced\"),\n                indicator=\"green\",\n            )\n        else:\n            frappe.msgprint(\n                _(\"No new Bank Transactions Added\"),\n                title=_(\"Bank Transactions Synced\"),\n                indicator=\"orange\",\n            )\n    else:\n        frappe.msgprint(\n            _(\"No new Bank Transactions Added\"),\n            title=_(\"Bank Transactions Synced\"),\n            indicator=\"orange\",\n        )\n\n", "CodeBleu_score": 28.92744393529587}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n        }\n    )\n    query = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/query?query=select * from {entity}\"\n    response = self._get(query)\n    if response.status_code!= 200:\n        self._log_error(\n            \"Unable to fetch {0} from QuickBooks\".format(entity), response.text\n        )\n        return\n    entries = response.json()\n    total_entries = entries.get(\"QueryResponse\", {}).get(\"totalCount\", 0)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total_entries,\n        }\n    )\n    entries = entries.get(\"QueryResponse\", {}).get(\"Report\", [])\n    entries = self._preprocess_entries(entity, entries)\n    while len(entries) > 0:\n        self._save_entries(entity, entries)\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Fetching {0}\").format(entity),\n                \"count\": len(entries),\n                \"total\": total_entries,\n            }\n        )\n        entries = self._get_next_page(response, entity)", "CodeBleu_score": 33.146330899804916}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Get the total number of entries for the specified entity\n    query_uri = f\"{self.base_uri}/{entity}\"\n    response = self._get(query_uri)\n    total_entries = response.json()[\"QueryResponse\"][\"total_records\"]\n    # Determine the number of batches to fetch\n    batch_size = 1000\n    total_batches = total_entries // batch_size + (total_entries % batch_size > 0)\n    # Fetch and process each batch\n    for batch_index in range(total_batches):\n        # Construct the query URI for the current batch\n        query_uri = f\"{self.base_uri}/{entity}?start_position={batch_index * batch_size}&max_results={batch_size}\"\n        # Fetch the batch\n        response = self._get(query_uri)\n        # Preprocess and save the entries\n        entries = response.json()[\"QueryResponse\"][\"entries\"]\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)", "CodeBleu_score": 34.46724612711854}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total_entries = self._get_total_entries(query_uri)\n    entries = []\n    for offset in range(0, total_entries, 1000):\n        query_uri = self._get_query_uri(entity, offset)\n        response = self._get(query_uri)\n        response_data = response.json()\n        entries.extend(response_data[\"QueryResponse\"][\"Report\"][\"ReportResult\"][\"Row\"])\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Migrating {0}\").format(entity),\n                \"count\": offset + 1000,\n                \"total\": total_entries,\n            }\n        )\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)", "CodeBleu_score": 25.38286318376972}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"DocType\"] == \"SalesReceipt\":\n        self._save_sales_receipt(invoice)\n    elif invoice[\"DocType\"] == \"SalesInvoice\":\n        self._save_sales_invoice(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"Estimate\":\n        self._save_estimate(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"Invoice\":\n        self._save_invoice(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"ItemReceipt\":\n        self._save_item_receipt(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"JournalEntry\":\n        self._save_journal_entry(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"PurchaseInvoice\":\n        self._save_purchase_invoice(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"PurchaseOrder\":\n        self._save_purchase_order(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"Payment\":\n        self._save_payment(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"CashSale\":\n        self._save_cash_sale(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"CreditNote\":\n        self._save_credit_note(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"DebitNote\":\n        self._save_debit_note(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"VendorBill\":\n        self._save_vendor_bill(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"PurchaseReceipt\":\n        self._save_purchase_receipt(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"Estimate\":\n        self._save_estimate(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"JournalEntry\":\n        self._save_journal_entry(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"DocType\"] == \"SalesOrder\":\n        self._save_sales_order(", "CodeBleu_score": 20.97279901675743}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"Type\"] == \"SalesInvoice\":\n        self._save_sales_invoice(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"Return\":\n        self._save_sales_invoice(invoice, quickbooks_id=invoice[\"Id\"], is_return=True)\n    elif invoice[\"Type\"] == \"SalesReceipt\":\n        self._save_sales_receipt(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"CreditMemo\":\n        self._save_sales_credit_memo(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"Bill\":\n        self._save_bill(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"BillPayment\":\n        self._save_bill_payment(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"VendorCredit\":\n        self._save_vendor_credit(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"VendorBill\":\n        self._save_vendor_bill(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"VendorPayment\":\n        self._save_vendor_payment(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"VendorReturn\":\n        self._save_vendor_return(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"Estimate\":\n        self._save_estimate(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"Invoice\":\n        self._save_invoice(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"JournalEntry\":\n        self._save_journal_entry(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"Deposit\":\n        self._save_deposit(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"Check\":\n        self._save_check(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"TimeActivity\":\n        self._save_time_activity(invoice, quickbooks_id=invoice[\"Id\"])\n    elif invoice[\"Type\"] == \"PurchaseInvoice\":\n        self._save_purchase_invoice(invoice, quickbooks", "CodeBleu_score": 19.81360481282119}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"Type\"] == \"Invoice\":\n            if invoice[\"LinkedTxn\"]:\n                for linked_txn in invoice[\"LinkedTxn\"]:\n                    if linked_txn[\"TxnType\"] == \"StatementCharge\" or linked_txn[\"TxnType\"] == \"ReimburseCharge\":\n                        self._save_invoice_as_journal_entry(invoice, linked_txn[\"LinkedTxnId\"])\n                        return\n            self._save_sales_invoice(invoice)\n        elif invoice[\"Type\"] == \"Return\":\n            self._save_sales_invoice(invoice, quickbooks_id=invoice[\"Id\"], is_return=True)\n        elif invoice[\"Type\"] == \"SalesReceipt\":\n            self._save_sales_invoice(invoice, quickbooks_id=invoice[\"Id\"], is_pos=True)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 27.315806097637807}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    no_of_days = get_diff_in_days(start_date, end_date)\n    no_of_days = no_of_days + 1\n    if no_of_days > 0:\n        no_of_days = no_of_days - 1\n    if no_of_visit > 0:\n        days_between_visits = no_of_days / no_of_visit\n        if days_between_visits < 1:\n            days_between_visits = 1\n    else:\n        days_between_visits = 0\n    if days_between_visits > 0:\n        for i in range(no_of_visit):\n            schedule_list.append(schedule_date)\n            schedule_date = add_days(schedule_date, days_between_visits)\n            schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n    else:\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 29.09401762871722}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    no_of_days = no_of_visit * (end_date - start_date).days\n    no_of_days_per_visit = no_of_days / no_of_visit\n\n    for _i in range(no_of_visit):\n        schedule_date = add_days(schedule_date, no_of_days_per_visit)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 33.87096549571375}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n    schedule_date = start_date\n    while schedule_date <= end_date:\n        schedule_date = validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, no_of_visit)\n\n    return schedule_list\n", "CodeBleu_score": 22.671602524137963}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t = request()->get('handle', 'edit');\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n$html = view('components.index.bulkaction.modal', [\n'url' => $url,\n'handle' => $handle,\n'selected' => $data['selected']?? $this->getSelectedInput(request()),\n'html' => view($view, $data)->render(),\n])->render();\nreturn response()->json([\n'success' => true,\n'error' => false,\n'message' => '',\n'data' => [\n'title' => $this->findTranslation($this->text),\n'path' => $url,\n'handle' => $handle,\n],\n'html' => $html,\n]);\n}", "CodeBleu_score": 79.02083588594881}, {"code": "<?\n   public function response($view, $data = []){\n\t = request()->get('handle', 'edit');\n\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n\n$html = view('components.index.bulkaction.modal', [\n    'url' => $url,\n    'handle' => $handle,\n   'selected' => $data['selected']?? $this->getSelectedInput(request()),\n    'html' => view($view, $data)->render(),\n])->render();\n\nreturn response()->json([\n   'success' => true,\n    'error' => false,\n   'message' => '',\n    'data' => [\n        'title' => $this->findTranslation($this->text),\n        'path' => $url,\n        'handle' => $handle,\n    ],\n    'html' => $html,\n]);\n}", "CodeBleu_score": 82.21542069004151}, {"code": "<?\n   public function response($view, $data = []){\n\t = request()->get('handle', 'edit');\n\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n\n$html = view('components.index.bulkaction.modal', [\n    'url' => $url,\n    'handle' => $handle,\n   'selected' => $data['selected']?? $this->getSelectedInput(request()),\n    'html' => view($view, $data)->render(),\n])->render();\n\nreturn response()->json([\n   'success' => true,\n    'error' => false,\n   'message' => '',\n    'data' => [\n        'title' => $this->findTranslation($this->text),\n        'path' => $url,\n        'handle' => $handle,\n    ],\n    'html' => $html,\n]);\n}", "CodeBleu_score": 82.21542069004151}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request);\n\t\t$contacts->each(function ($contact) {\n\t\t\t$contact->delete();\n\t\t});\n\t\tflash('Contacts deleted successfully')->success();\n\t} catch (\\Exception $e) {\n\t\tflash($e->getMessage())->error();\n\t}\n}", "CodeBleu_score": 47.52328740595054}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request);\n\t\t$contacts->each(function ($contact) {\n\t\t\t$contact->delete();\n\t\t});\n\t\tflash('Contacts deleted successfully')->success();\n\t} catch (\\Exception $e) {\n\t\tflash($e->getMessage())->error()->important();\n\t}\n\treturn redirect()->route('contacts.index');\n}", "CodeBleu_score": 51.79160946552801}, {"code": "<?\npublic function deleteContacts($request){\n\t$selectedRecords = $this->getSelectedRecords($request);\n\nforeach ($selectedRecords as $selectedRecord) {\n    try {\n        $this->dispatch(new DeleteContact($selectedRecord));\n    } catch (Exception $e) {\n        flash($e->getMessage())->error();\n    }\n}\n\nreturn redirect()->back();\n}", "CodeBleu_score": 50.81696891620955}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$this->getSelectedRecords($request)->each(function ($transaction) {\n    $this->dispatch(new DeleteTransactionJob($transaction));\n});\n\nflash('Transactions deleted successfully.')->success();\n}", "CodeBleu_score": 31.352957743148725}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\tforeach ($transactions as $transaction) {\n\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t}\n\n\tflash('Transactions deleted successfully')->success();\n\n\treturn redirect()->route('transactions.index');\n}", "CodeBleu_score": 48.23291440376217}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 58.81326394475661}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t//        $validator = $this->prepareValidator($validator);\n//\n//        try {\n//            $validator->validate($this->all());\n//        } catch (ValidationException $e) {\n//            $this->failed = true;\n//\n//            $this->failedValidation($validator);\n//\n//            throw $e;\n//        }\n//\n//        $this->failed = false;\n//\n//        return $this;\n    }", "CodeBleu_score": 7.9136354944001415}, {"code": "<?\npublic function withValidator($validator){\n\t\t$this->validator = $validator;\n\t$this->validator->setFactory($this->container);\n\t$this->validator->setContainer($this->container);\n\t$this->validator->setSessionStore($this->session);\n\t$this->validator->setRedirector($this->redirector);\n\t$this->validator->setRequest($this);\n\n\t$this->prepareForValidation();\n\n\t$this->validator->setData($this->all());\n\n\t$this->validator->setRules($this->prepareRules($this->rules()));\n\n\t$this->validator->validate();\n\n\tif ($this->validator->fails()) {\n\t\t$this->failedValidation($this->validator);\n\t}\n}", "CodeBleu_score": 20.579902829973367}, {"code": "<?\npublic function withValidator($validator){\n\t\t$request = $this->createRequest();\n\t$validator->setData($request->all());\n\t$validator->setRules($this->prepareRules($request->rules()));\n\ttry {\n\t\t$validator->validate();\n\t} catch (\\Illuminate\\Validation\\ValidationException $e) {\n\t\t$this->addFailures($e->validator->failed());\n\t\tthrow $e;\n\t}\n}", "CodeBleu_score": 17.456182460251668}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->shouldUpdate(...$arguments)) {\n\t\t$this->update(...$arguments);\n\t}\n}", "CodeBleu_score": 10.126554954469974}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$model = null;\n\t$request = null;\n\n\tif (count($arguments) == 1) {\n\t\t$model = $arguments[0];\n\t} elseif (count($arguments) == 2) {\n\t\t$model = $arguments[0];\n\t\t$request = $arguments[1];\n\t}\n\n\tif ($model instanceof ShouldUpdate) {\n\t\t$this->model = $model;\n\t}\n\n\tif ($request instanceof ShouldUpdate) {\n\t\t$this->request = $request;\n\t}\n\n\tif ($this->model) {\n\t\t$this->initializeUpdate($this->model);\n\t}\n}", "CodeBleu_score": 40.346477918257264}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$model = $this->getModel();\n\t$request = $this->getRequest();\n\n\tif ($model && $request) {\n\t\t$this->update($model, $request);\n\t}\n}", "CodeBleu_score": 20.70566492593291}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n$request->expectsJson() &&!$request->isNotApi()\n? $query->get()\n: $query->paginate($request->get('limit', 20));\n}", "CodeBleu_score": 24.36458129212055}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\n$request = request();\n\n// Get the sorting parameter from the request\n$sort = $request->get('sort', $sort);\n\n// Apply search and sorting to the query\n$query->when($request->has('search'), function ($query, $search) {\n$query->where('name', 'like', \"%$search%\")\n->orWhere('email', 'like', \"%$search%\");\n})->orderBy($sort);\n\n// Check if the request expects a JSON response and is not an API request\nif ($request->expectsJson() &&!$request->isNotApi()) {\nreturn $query->get();\n}\n\n// Paginate the results based on a limit from the request or a default setting\n$limit = $request->get('limit', config('app.pagination_limit', 10));\nreturn $query->paginate($limit);\n}", "CodeBleu_score": 54.05572191777338}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n$request->expectsJson();\n$request->isNotApi();\n$query->usingSearchString()->sortable($sort);\nif ($request->get('limit')) {\n$query->paginate($request->get('limit'));\n} else {\n$query->paginate(10);\n}\n}", "CodeBleu_score": 34.50595101616331}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\tif ($model->status == 'paid') {\n\t\t$open = 0;\n\t\t$overdue = 0;\n\t} else {\n\t\t$open = $model->amount;\n\t\t$overdue = $model->amount;\n\t\t$transactions = Transaction::where('document_id', $model->id)->get();\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$open -= $transaction->amount;\n\t\t\t$overdue -= $transaction->amount;\n\t\t}\n\t\tif ($model->due_date < Date::today()) {\n\t\t\t$overdue = 0;\n\t\t}\n\t}\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 43.044924371812854}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$openAmount = $model->getAmountConvertedToDefault();\n\t$overdueAmount = $model->getAmountConvertedToDefault();\n\tif ($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$transactions = Transaction::where('document_id', $model->id)->get();\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$openAmount = $openAmount - $transaction->amount_converted_to_default;\n\t\t\tif ($transaction->status == 'paid') {\n\t\t\t\t$openAmount = $openAmount - $transaction->amount_converted_to_default;\n\t\t\t}\n\t\t}\n\t\tif ($model->due_date < Date::today()->toDateString()) {\n\t\t\t$overdueAmount = $model->getAmountConvertedToDefault();\n\t\t}\n\t}\n\treturn [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 44.53694483916981}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$dueDate = $model->getDueDate();\n\t$today = Carbon::today();\n\tif ($model->getStatus() === 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$openAmount = $model->getAmount();\n\t\t$overdueAmount = $model->getAmount();\n\t\tif ($dueDate->lt($today)) {\n\t\t\t$overdueAmount = $model->getAmount() - $model->getAmountConvertedToDefault();\n\t\t} else {\n\t\t\t$overdueAmount = 0;\n\t\t}\n\t}\n\t$openAmount = $model->getAmountConvertedToDefault();\n\t$overdueAmount = $model->getAmountConvertedToDefault();\n\treturn [\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount,\n\t];\n}", "CodeBleu_score": 34.90583833235811}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n\t$this->forPage($page, $perPage);\n\n\t$results = $this->get($columns);\n\n\t$paginator = $this->paginator($results, $this->getCountForPagination(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\n\treturn $paginator;\n}", "CodeBleu_score": 64.60189627403544}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$path = Paginator::resolveCurrentPath();\n\t$this->setPageName($pageName, $page);\n\t$total = $this->getCountForPagination($columns);\n\t$this->forPage($page, $perPage);\n\t$results = $this->get($columns);\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => $path,\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 60.339660248032565}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$this->setPageName($pageName, $page);\n\t$this->applyScopes();\n\t$results = $this->get($columns);\n\t$total = $this->getCountForPagination();\n\t$paginator = new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\t$paginator->setCollection($results);\n\treturn $paginator;\n}", "CodeBleu_score": 66.5181131282895}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('account_id', $request->account_id)\n                    ->whereBetween('started_at', [$request->start_date, $request->end_date])->get();\n\n\\DB::transaction(function () use ($reconciliations) {\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = Reconciliation::RECONCILED;\n$reconciliation->save();\n\n$this->getSelectedRecords($reconciliation)->each(function ($item) use ($reconciliation) {\n$item->status = Transaction::RECONCILED;\n$item->save();\n});\n\nTransaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()\n                    ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n$item->status = Transaction::RECONCILED;\n$item->save();\n});\n}\n});\n}", "CodeBleu_score": 50.22002281860951}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('account_id', $request->account_id)->whereBetween('started_at', [$request->start_date, $request->end_date])->get();\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->markAsReconciled();\n$reconciliation->save();\n$reconciliation->markRelatedTransactionsAsReconciled();\n$reconciliation->save();\n}\n}", "CodeBleu_score": 35.56491025508227}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('account_id', $request->account_id)->whereBetween('started_at', [$request->started_at, $request->ended_at])->get();\n\\DB::transaction(function () use ($reconciliations, $request) {\n$reconciliations->each(function ($reconciliation) use ($request) {\n$reconciliation->status = Reconciliation::RECONCILED;\n$reconciliation->save();\n$reconciliation->transactions()->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n$item->reconciled_at = Carbon::now();\n$item->save();\n});\n});\n$reconciliation->transactions()->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n$item->reconciled_at = Carbon::now();\n$item->save();\n});\n});\n}", "CodeBleu_score": 41.43357764404191}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$invitation = UserInvitation::where('user_id', $this->user->id)->get()->first();\nif ($invitation) {\n$invitation->delete();\n}\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\ntry {\n$this->dispatch(new NotifyUserInvitationJob($invitation));\n} catch (Exception $e) {\nthrow new Exception('Failed to send notification: '. $e->getMessage());\n}\nreturn $invitation; }", "CodeBleu_score": 35.602530972761016}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n\tforeach ($invitations as $invitation) {\n\t\t$invitation->delete();\n\t}\n\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $this->user->id,\n\t\t'token' => Str::uuid(),\n\t]);\n\n\ttry {\n\t\t$this->dispatch(new NotifyUserInvitation($invitation));\n\t} catch (Exception $e) {\n\t\tthrow new Exception('Failed to send notification: '. $e->getMessage());\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 44.02142134733852}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n$token = Str::uuid();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => $token,\n]);\ntry {\n$this->dispatch(new NotifyUserInvitationJob($invitation));\n} catch (Exception $e) {\nthrow new Exception('Failed to send invitation email: '. $e->getMessage());\n}\nreturn $invitation; }", "CodeBleu_score": 44.099947053466806}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled()) {\nthrow new Exception('Transaction already reconciled.');\n}\nif ($this->model->isTransferTransaction()) {\nthrow new Exception('Unauthorized.');\n}\n}", "CodeBleu_score": 32.63206701837492}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isReconciled) {\n\t\tthrow new \\Exception(\"The transaction has already been reconciled. Please use the reconcile method instead.\");\n\t}\n\n\tif ($this->model->isTransferTransaction) {\n\t\tthrow new \\Exception(\"Unauthorized\");\n\t}\n\n\t$this->model->authorize();\n}", "CodeBleu_score": 26.332977374659393}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isReconciled()) {\n\t\tthrow new \\Exception(\"This transaction has already been reconciled.\");\n\t}\n\tif ($this->model->isTransferTransaction()) {\n\t\tthrow new \\Exception(\"Unauthorized\");\n\t}\n}", "CodeBleu_score": 32.25592312941682}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (getTenantIdByToken()!= 0) {\n\t\tif (tableName.equals(\"user\") || tableName.equals(\"role\") || tableName.equals(\"tenant\") || tableName.equals(\"tenant_user\") || tableName.equals(\"tenant_role\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 17.91857137446596}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\n\tif (tableName.equals(\"tbl_user\")) {\n\t\treturn true;\n\t}\n\n\tif (tableName.equals(\"tbl_user_role\")) {\n\t\treturn true;\n\t}\n\n\tif (tableName.equals(\"tbl_role\")) {\n\t\treturn true;\n\t}\n\n\tif (tableName.equals(\"tbl_role_permission\")) {\n\t\treturn true;\n\t}\n\n\tif (tableName.equals(\"tbl_permission\")) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 17.224974129066027}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (getTenantIdByToken()!= 0) {\n\t\tswitch (tableName) {\n\t\tcase \"user\":\n\t\tcase \"user_profile\":\n\t\tcase \"user_role\":\n\t\tcase \"user_role_permission\":\n\t\tcase \"role\":\n\t\tcase \"role_permission\":\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 10.263953381836364}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(sqlSessionFactoryBeanName());\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 62.95320669804205}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(sqlSessionFactoryBeanName());\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 62.77466118850873}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 89.60914056154388}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n    res.code = 200;\n    res.data = map;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.01639408025623}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 91.68885436739134}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tres.code = 200;\n\t\tres.data = platformConfig;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 94.00192888523921}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(getSystemConfig());\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseData(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 25.775386663044248}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(getSystemConfig());\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseData(e.getMessage());\n\t\tlogger.error(e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 26.808464880962056}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(getSystemConfig());\n\t\treturn response;\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving current system configuration\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t\treturn response;\n\t}\n}", "CodeBleu_score": 28.557221378897324}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tString businessPath = getParameter(request, \"businessPath\");\n\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\tMultipartFile multipartFile = multipartRequest.getFile(\"file\");\n\tString fileName = multipartFile.getOriginalFilename();\n\tString fileExtension = getExtension(fileName);\n\tString filePath = getFileDirectory(businessPath, fileExtension);\n\tString fileFullPath = filePath + fileName;\n\tString fileUrl = \"\";\n\ttry {\n\t\tif (uploadLocal(fileFullPath, multipartFile)) {\n\t\t\tfileUrl = getFileUrl(businessPath, fileName);\n\t\t\tresponseInfo.setCode(ResponseCode.SUCCESS);\n\t\t\tresponseInfo.setData(fileUrl);\n\t\t} else {\n\t\t\tresponseInfo.setCode(ResponseCode.FAILURE);\n\t\t\tresponseInfo.setMessage(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\", e);\n\t\tresponseInfo.setCode(ResponseCode.FAILURE);\n\t\tresponseInfo.setMessage(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 38.44952574140257}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Get the business path from the request\n\t\tString businessPath = getBusinessPath(request);\n\t\tif (StringUtils.isEmpty(businessPath)) {\n\t\t\tresponseInfo.setCode(ResponseCode.FAILURE);\n\t\t\tresponseInfo.setMessage(\"Business path is empty\");\n\t\t\treturn responseInfo;\n\t\t}\n\n\t\t// Get the uploaded file from the request\n\t\tMultipartFile multipartFile = getMultipartFile(request);\n\t\tif (multipartFile == null) {\n\t\t\tresponseInfo.setCode(ResponseCode.FAILURE);\n\t\t\tresponseInfo.setMessage(\"Uploaded file is empty\");\n\t\t\treturn responseInfo;\n\t\t}\n\n\t\t// Get the upload type from the request\n\t\tString uploadType = getUploadType(request);\n\t\tif (StringUtils.isEmpty(uploadType)) {\n\t\t\tresponseInfo.setCode(ResponseCode.FAILURE);\n\t\t\tresponseInfo.setMessage(\"Upload type is empty\");\n\t\t\treturn responseInfo;\n\t\t}\n\n\t\t// Save the uploaded file to the local file system\n\t\tif (uploadType.equalsIgnoreCase(UploadType.LOCAL.getValue())) {\n\t\t\tsaveLocal(businessPath, multipartFile, responseInfo);\n\t\t}\n\n\t\t// Save the uploaded file to AliOss\n\t\tif (uploadType.equalsIgnoreCase(UploadType.ALI_OSS.getValue())) {\n\t\t\tsaveAliOss(businessPath, multipartFile, responseInfo);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception occurred while uploading file\", e);\n\t\tresponseInfo.setCode(ResponseCode.FAILURE);\n\t\tresponseInfo.setMessage(e.getMessage());\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 29.18641073470495}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n//        String title = jsonObject.getString(\"title\");\n//        String head = jsonObject.getString(\"head\");\n//        String tip = jsonObject.getString(\"tip\");\n//        JSONArray arr = jsonObject.getJSONArray(\"list\");\n//        systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n    }", "CodeBleu_score": 4.842893009750053}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry{\n\t\tAccount account = new Account();\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setAmount(obj.getDouble(\"amount\"));\n\t\taccount.setCurrency(obj.getString(\"currency\"));\n\t\taccount.setCurrencySymbol(obj.getString(\"currencySymbol\"));\n\t\taccount.setCurrencyCode(obj.getString(\"currencyCode\"));\n\t\taccount.setEnabled(true);\n\t\taccount.setCreatedBy(request.getRemoteAddr());\n\t\taccount.setUpdatedBy(request.getRemoteAddr());\n\t\tif(obj.containsKey(\"isDefault\")){\n\t\t\taccount.setIsDefault(obj.getBoolean(\"isDefault\"));\n\t\t}else{\n\t\t\taccount.setIsDefault(false);\n\t\t}\n\t\tif(obj.containsKey(\"initialAmount\")){\n\t\t\taccount.setInitialAmount(obj.getDouble(\"initialAmount\"));\n\t\t}else{\n\t\t\taccount.setInitialAmount(0);\n\t\t}\n\t\tresult = accountMapperEx.insertSelective(account);\n\t\tif(result > 0){\n\t\t\tinsertLog(account, request);\n\t\t}\n\t}catch(Exception e){\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 41.86904973718112}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tAccount account=parseObject(obj);\n\t\taccount.setInitialAmount(account.getInitialAmount()==null?0:account.getInitialAmount());\n\t\tif(account.getIsDefault()!=null && account.getIsDefault()){\n\t\t\tList<Account> list=getAccountByParam(null, null);\n\t\t\tfor(Account acct:list){\n\t\t\t\tacct.setIsDefault(false);\n\t\t\t\tupdateAccount(acct, request);\n\t\t\t}\n\t\t}\n\t\taccount.setEnabled(true);\n\t\tresult=insertSelective(account);\n\t\tinsertLog(account, request, result);\n\t}catch(Exception e){\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 44.732108576982746}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\tAccount account = new Account();\n\ttry {\n\t\taccount = parseObject(obj);\n\t\tif (account.getInitialAmount() == null) {\n\t\t\taccount.setInitialAmount(new BigDecimal(0));\n\t\t}\n\t\tif (account.getIsDefault() == null) {\n\t\t\taccount.setIsDefault(false);\n\t\t}\n\t\taccount.setEnabled(true);\n\t\tresult = insertSelective(account);\n\t\tinsertLog(request, \"Insert account\", \"Insert account \" + account.getName() + \" successfully\", \"Account\", account.getId());\n\t} catch (Exception e) {\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 41.684217499327595}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceMapper.count(name, serialNo);\n\t} catch (Exception e) {\n\t\tLOG.error(\"Error counting accounts with name {} and serial no {}\", name, serialNo, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.96506641614348}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = listWithBalanceMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error counting accounts with name '\" + name + \"' and serial number '\" + serialNo + \"': \" + e.getMessage());\n\t}\n\treturn count;\n}", "CodeBleu_score": 39.66459599340939}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceMapper.countByAccount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while counting accounts with name \" + name + \" and serial number \" + serialNo, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 27.009161846997536}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting depot item with id \" + id + \" in DepotItemController: \" + e.getMessage());\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 57.616465584668155}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item with id: \" + id, e);\n\t\tthrow new Exception(\"Error deleting depot item with id: \" + id);\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.51995812017323}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting depot item with id \" + id, e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 60.29898662101376}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\tString url = protocol + host + \":\" + port + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\tHttpGet httpGet = new HttpGet(url);\n\ttry {\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tif (response.contains(nodeKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.902453393269404}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"api/types/\" + nodeType + \"/instances/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 201) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 44.68086909666132}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + getHost() + getPort() + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.678763206854086}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"edge?fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to + \"&edgeType=\" + edgeType);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode()!= 200) {\n\t\t\tSystem.out.println(\"Error adding edge: \" + httpResponse.getStatusLine().getStatusCode());\n\t\t\treturn false;\n\t\t}\n\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\tJsonNode jsonNode = new ObjectMapper().readTree(response);\n\t\tif (!jsonNode.has(\"key\")) {\n\t\t\tSystem.out.println(\"Error adding edge: \" + response);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 49.800712906082225}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClientBuilder.create().build();\n\t\tHttpGet getRequest = new HttpGet(protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"edge?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n\t\tgetRequest.addHeader(\"accept\", \"application/json\");\n\t\thttpResponse = httpClient.execute(getRequest);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tString result = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tif (result.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.062187176566475}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + getHost() + getPort() + withProjectName(projectName) + \"edge/\" + edgeType + \"/from/\" + fromType + \"/to/\" + toType + \"/\" + from + \"/\" + to;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tif (response.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.662735207360235}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event and message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(new Date());\n\tString jsonString = null;\n\ttry {\n\t\tjsonString = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tString topic = event.getTarget() == null? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 49.62028233901334}, {"code": "public void sendEvent(Event event){\n\t\tif(event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tLocation location = event.getLocation();\n\tif(location == null) {\n\t\tlocation = acquireTestingLocation();\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString jsonString = writeValueAsString(event);\n\tString topic = \"test\";\n\tif(event.getTarget()!= null) {\n\t\ttopic = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 43.63214577724763}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tLocation location = event.getLocation();\n\tif (location == null) {\n\t\tlocation = acquireTestingLocation();\n\t}\n\tevent.setTime(new Date());\n\tString json = writeValueAsString(event);\n\tString topic = event.getTarget() == null? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 43.52167918778134}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSS client.\n\tOSSClient client = new OSSClient(getConfig().getEndpoint(), getConfig().getAccessKeyId(), getConfig().getAccessKeySecret());\n\n\t// Upload the file.\n\tclient.putObject(getConfig().getOssBucket(), objName, new ByteArrayInputStream(content));\n\n\t// Shut down the client.\n\tclient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"http://\" + getConfig().getOssBucket() + \".\" + getConfig().getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 49.69648870540483}, {"code": "public String upload(String objName, byte[] content){\n\t\t// 1. Initialize the OSS client with access credentials.\n\tOssClient ossClient = new OssClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n\t// 2. Upload the file as an object with the specified name.\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n\t// 3. Shut down the OSS client.\n\tossClient.shutdown();\n\n\t// 4. Return the URL of the uploaded object.\n\treturn getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 32.8649473070131}, {"code": "public String upload(String objName, byte[] content){\n\t\t// 1. Initialize the OSSClient.\n\tOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n\t// 2. Create a PutObjectRequest to describe the file content to be uploaded.\n\tPutObjectRequest putObjectRequest = new PutObjectRequest(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n\t// 3. Upload the file.\n\tPutObjectResult putObjectResult = ossClient.putObject(putObjectRequest);\n\n\t// 4. Shut down the OSSClient.\n\tossClient.shutdown();\n\n\t// 5. Get the URL of the uploaded object.\n\tString url = putObjectResult.getETag();\n\treturn url;\n}", "CodeBleu_score": 36.64285855458392}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t       if (ipAddress == null || ipAddress.length() == 0) {\n//            return null;\n//        }\n//        ensureIpToLocationWorker();\n//        IpToLocationWorker worker = getIpToLocationWorker();\n//        if (worker == null) {\n//            return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n//        }\n//        return worker.ipToLocation(ipAddress);\n        return getLocationInfoByIP(ipAddress);\n    }", "CodeBleu_score": 8.8583135426526}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tureIpToLocationWorker();\nLocationInfo result = getLocationInfoByIP(ipAddress);\nsetMainInfo(result);\nsetSubInfo(result);\nreturn result;\n}", "CodeBleu_score": 16.594913990645}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t       \u786e\u4fddIpToLocationWorker\u53ef\u7528\n        ensureIpToLocationWorker();\n//        \u83b7\u53d6IpToLocationWorker\n        IpToLocationWorker worker = getIpToLocationWorker();\n//        \u8f6c\u6362IP\u5730\u5740\n        String newIPAddress = setIpAddress(ipAddress);\n//        \u83b7\u53d6IP\u5730\u5740\u6240\u5728\u5730\u533a\n        LocationInfo result = getLocationInfoByIP(newIPAddress);\n//        \u8bbe\u7f6eIP\u5730\u5740\n        setMainInfo(result, newIPAddress);\n//        \u8fd4\u56deIP\u5730\u5740\u6240\u5728\u5730\u533a\n        return result;\n    }", "CodeBleu_score": 35.76462775828945}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (esClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\tif (hosts.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"No hosts specified in \" + clusterHostList);\n\t\t}\n\t\t// create low-level client\n\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()]));\n\t\tbuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t@Override\n\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\treturn httpClientBuilder.setSSLHostnameVerifier(new NoopHostnameVerifier());\n\t\t\t}\n\t\t});\n\t\tesClient = builder.build();\n\t\t// create high-level client\n\t\tesClientHighLevel = new RestHighLevelClient(esClient);\n\t}\n}", "CodeBleu_score": 49.90489506790899}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (esClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\t\tthrow new ElasticsearchException(\"Cluster host list cannot be empty\");\n\t\t}\n\t\tif (clusterHostList.indexOf(':') < 0) {\n\t\t\tthrow new ElasticsearchException(\"Cluster host list must contain at least one host\");\n\t\t}\n\t\tif (clusterHostPort < 0) {\n\t\t\tthrow new ElasticsearchException(\"Cluster port cannot be negative\");\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\tif (hosts.isEmpty()) {\n\t\t\tthrow new ElasticsearchException(\"Cluster host list must contain at least one host\");\n\t\t}\n\t\tesClient = new RestClientBuilder().setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t@Override\n\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\treturn httpClientBuilder.setConnectionManager(new PoolingHttpClientConnectionManager());\n\t\t\t}\n\t\t}).setFailureListener(new RestClientBuilder.FailureListener() {\n\t\t\t@Override\n\t\t\tpublic void onFailure(Node node) {\n\t\t\t\tlog.error(\"Failed to connect to node {}\", node);\n\t\t\t}\n\t\t}).build(hosts.toArray(new HttpHost[hosts.size()]));\n\t\tesClient.start();\n\t\tesLowLevelClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t}\n}", "CodeBleu_score": 43.7882073877725}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (esClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\tif (hosts.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"No hosts configured for Elasticsearch client.\");\n\t\t}\n\t\tesClient = new RestHighLevelClient(new RestClient.Builder(hosts.toArray(new HttpHost[0])));\n\t}\n}", "CodeBleu_score": 49.69826654053813}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = clusterPort;\n\t\tif (host.indexOf(\":\")!= -1) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\thost = hostAndPort[0];\n\t\t\tport = Integer.parseInt(hostAndPort[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port, \"http\"));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 43.221723464648164}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostsList = clusterHostList.split(\",\");\n\tfor (String host : hostsList) {\n\t\tString[] hostAndPort = host.split(\":\");\n\t\tString hostName = hostAndPort[0];\n\t\tint port = (hostAndPort.length > 1)? Integer.parseInt(hostAndPort[1]) : clusterPort;\n\t\thosts.add(new HttpHost(hostName, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.019448852546425}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tif (clusterHostList == null) {\n\t\treturn hosts;\n\t}\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint colonIndex = host.indexOf(\":\");\n\t\tif (colonIndex == -1) {\n\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t} else {\n\t\t\tString hostName = host.substring(0, colonIndex);\n\t\t\tint port = Integer.parseInt(host.substring(colonIndex + 1));\n\t\t\thosts.add(new HttpHost(hostName, port));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.569671784345694}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\tString message = this.getQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (message!= null) {\n\t\t\t\tString[] msg = message.split(\";\");\n\t\t\t\tif (msg.length == 2) {\n\t\t\t\t\tString toNumber = msg[0];\n\t\t\t\t\tString messageContent = msg[1];\n\t\t\t\t\tif (StringUtils.isNotBlank(toNumber) && StringUtils.isNotBlank(messageContent)) {\n\t\t\t\t\t\tsendPlainTextMessage(toNumber, messageContent);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"SMS to \" + toNumber+\" failed. Message content is invalid.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"SMS to \" + msg[0]+\" failed. Message content is invalid.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"SMS to \" + e.getMessage()+\" failed. Exception is \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 34.013419899477185}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\tString task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (task.startsWith(PLAIN_TEXT_MESSAGE_TASK_PREFIX)) {\n\t\t\t\tString[] taskParts = task.split(PLAIN_TEXT_MESSAGE_TASK_PREFIX);\n\t\t\t\tString toNumber = taskParts[1];\n\t\t\t\tString message = taskParts[2];\n\t\t\t\ttry {\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.error(\"Failed to send SMS to \" + toNumber + \" with message \" + message, e);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Failed to poll for tasks\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 33.42235534483719}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\t// Get a task from the queue with a 30-second timeout.\n\t\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task!= null) {\n\t\t\t\t// Check the type of the task.\n\t\t\t\tif (task.getType() == Task.Type.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t// Extract the recipient number and message data from the task.\n\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\t\t// Validate the data.\n\t\t\t\t\tif (toNumber!= null && message!= null) {\n\t\t\t\t\t\t// Send the message.\n\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Log an error message if the data is invalid.\n\t\t\t\t\t\tSystem.err.println(\"Invalid data for task \" + task);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Log an error message if the task type is not supported.\n\t\t\t\t\tSystem.err.println(\"Unsupported task type \" + task.getType());\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// Log an error message if an exception occurs.\n\t\t\tSystem.err.println(\"Exception occurred while processing task \" + task);\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 29.165421865931307}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"Response content: \" + responseString);\n\t\t}\n\t\treturn responseString;\n\t} finally {\n\t\tresponse.close();\n\t}\n}", "CodeBleu_score": 63.17802468230278}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tInputStream instream = entity.getContent();\n\t\t\tString responseStr = convertStreamToString(instream);\n\t\t\tSystem.out.println(\"Response content: \" + responseStr);\n\t\t\treturn responseStr;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 61.610574510485975}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tresponse = getHttpClient().execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseContent = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tlog.info(\"Response content: \" + responseContent);\n\t\t\treturn responseContent;\n\t\t}\n\t} finally {\n\t\tif (response!= null) {\n\t\t\tresponse.close();\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 46.15610993151368}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tDocument doc = newDocumentBuilder().parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode rootNode = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tresult.put(rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 48.03067836704666}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\treturn decodeNodeToMap(doc.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 37.65192751412466}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tif (StringUtils.isBlank(messageXmlStr)){\n\t\treturn null;\n\t}\n\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\tNode rootNode = document.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootValue[0].toString(), rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 59.692333636149385}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing. Enqueueing order for automatic shipping and invoicing.\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t} else {\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing. Scheduling creation of missing shipment schedules.\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 20.314064188683492}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing) {\n\t\taddLog(orderRecord, \"Auto-processing order. Enqueueing generate schedules after commit\");\n\t\tscheduleIfNotPostponed(orderRecord, \"Generate Schedules After Commit\");\n\t} else {\n\t\taddLog(orderRecord, \"Not auto-processing order. Enqueueing create missing shipment schedules\");\n\t\tscheduleIfNotPostponed(orderRecord, \"Create Missing Shipment Schedules\");\n\t}\n}", "CodeBleu_score": 24.601513574538806}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlog.info(\"Order {} is eligible for auto-processing. Enqueuing generate schedules after commit\", orderRecord.getDocumentNo());\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n\telse\n\t{\n\t\tlog.info(\"Order {} is not eligible for auto-processing. Enqueuing generate schedules if not postponed\", orderRecord.getDocumentNo());\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 24.209689900118274}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t Retrieve the user by email address\n    $user = $this->provider->retrieveByCredentials($request->only('email'));\n\n// If the user doesn't exist, return null\n    if (!$user) {\n        return null;\n    }\n\n// If the credentials are invalid, return null\n    if (!$this->provider->validateCredentials($user, $request->only('password'))) {\n        return null;\n    }\n\n// If the user is not approved, return null\n    if (!$user->approved) {\n        return null;\n    }\n\n// If the user is suspended, return null\n    if ($user->suspended) {\n        return null;\n    }\n\n// If the user is banned, return null\n    if ($user->banned) {\n        return null;\n    }\n\n// If the user is not confirmed, return null\n    if (!$user->confirmed) {\n        return null;\n    }\n\n// If the user is not active, return null\n    if (!$user->active) {\n        return null;\n    }\n\n// If the user is not verified, return null\n    if (!$user->verified) {\n        return null;\n    }\n\n// If the user is not unlocked, return null\n    if (!$user->unlocked) {\n        return null;\n    }\n\n// Otherwise, return the user\n    return $user;\n}", "CodeBleu_score": 32.49364662620391}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->limiter->increment();\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [\n\t\t\t$this->getFailedLoginMessage(),\n\t\t],\n\t]);\n}", "CodeBleu_score": 24.086236150977946}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->limiter->increment($request->ip());\n\tthrow ValidationException::withMessages([\n\t\t'email' => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 55.54342638505969}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment\n$this->throwValidationException($request, ValidationException::withMessages([\n$this->username() => [trans('auth.failed')],\n]));\n}", "CodeBleu_score": 31.85976545586794}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\tuser = User::find(session('login.id'));\n\n\tif (! $user) {\n\t\treturn response()->json([\n\t\t\t'error' => 'User not found',\n\t\t], 404);\n\t}\n\n\t$data = [\n\t\t'user' => $user,\n\t\t'publicKey' => $user->two_factor_secret,\n\t];\n\n\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t'remember' => $request->session()->get('login.remember'),\n\t])->toResponse($request);\n}", "CodeBleu_score": 53.1922875022429}, {"code": "<?\npublic function toResponse($request){\n\tuser = User::find($request->session()->get('login.id'));\n\n\tif ($user) {\n\t\t$assertion = Webauthn::prepareAssertion($user);\n\n\t\treturn Inertia::render('Auth/TwoFactorChallenge', [\n\t\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t\t'remember' => $request->session()->get('login.remember'),\n\t\t\t'publicKey' => $assertion['publicKey'],\n\t\t])->toResponse($request);\n\t}\n\n\treturn Inertia::render('Auth/TwoFactorChallenge', [\n\t\t'twoFactor' => false,\n\t\t'remember' => $request->session()->get('login.remember'),\n\t])->toResponse($request);\n}", "CodeBleu_score": 46.628083277722524}, {"code": "<?\npublic function toResponse($request){\n\tuser = User::find($request->session()->get('login.id'));\n\tif ($user) {\n\t\t$assertion = Webauthn::prepareAssertion($user);\n\t\t$data = [\n\t\t\t'publicKey' => $assertion->publicKey,\n\t\t\t'user' => $user,\n\t\t\t'login' => [\n\t\t\t\t'remember' => $request->session()->get('login.remember'),\n\t\t\t],\n\t\t];\n\n\t\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t])->toResponse($request);\n\t}\n\n\treturn redirect()->route('login');\n}", "CodeBleu_score": 59.83711113648438}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::firstWhere([\n\t\t'driver' => $driver,\n\t\t'driver_id' => $socialite->getId(),\n\t]);\n\n\tif ($userToken) {\n\t\treturn $this->getUserOrCreate($userToken->user);\n\t}\n\n\treturn $this->createUser($socialite);\n}", "CodeBleu_score": 31.47362064157035}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = $this->getUserToken($request, $driver, $socialite);\n\n\tif (!$userToken) {\n\t\treturn $this->createUser($socialite);\n\t}\n\n\treturn $this->getUserOrCreate($userToken);\n}", "CodeBleu_score": 25.290563510921736}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::firstWhere([\n\t\t'driver' => $driver,\n\t\t'driver_id' => $socialite->getId(),\n\t]);\n\n\tif ($token) {\n\t\t$user = $token->user;\n\t\t$this->checkUserAssociation($request, $user, $driver);\n\t\treturn $user;\n\t}\n\n\treturn $this->getUserOrCreate($socialite);\n}", "CodeBleu_score": 40.063198348157336}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tetrieve the user from the request\n$user = $request->user();\n\n// If no user is found, return false\nif ($user === null) {\n    return false;\n}\n\n// Filter the credentials from the request\n$credentials = $this->filterCredentials($request);\n\n// Validate the assertion using the filtered credentials\n$validated = $this->validateAssertion($user, $credentials);\n\n// If validation fails, trigger a failed authentication event, throw an authentication exception, and return false\nif (!$validated) {\n    $this->fireFailedEvent($request, $user);\n    $this->throwFailedAuthenticationException($request);\n    return false;\n}\n\n// If validation succeeds, return true\nreturn true;\n}", "CodeBleu_score": 77.80108079059343}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\ter = $request->user();\n\tif ($user === null) {\n\t\treturn false;\n\t}\n\t$this->fireFailedEvent($request, $user);\n\t$this->throwFailedAuthenticationException($request);\n\treturn true;\n}", "CodeBleu_score": 39.82295210504859}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n\tif (!$email) {\n\t\t$this->error('No email provided.');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $email)->firstOrFail();\n\t} catch (ModelNotFoundException $exception) {\n\t\t$this->error('User not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 65.36794936325683}, {"code": "<?\nprivate function user(): ?User{\n\ttry {\n\t\t$user = User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error = 'User not found';\n\t\treturn null;\n\t}\n\treturn $user;\n}", "CodeBleu_score": 38.759066020744214}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n\n\tif (empty($email)) {\n\t\t$this->error('No email provided.');\n\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $email)->firstOrFail();\n\t} catch (ModelNotFoundException $exception) {\n\t\t$this->error('User not found.');\n\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 65.5147026778933}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tf (config('scout.driver') ==='meilisearch') {\n$indexes = config('scout.indexes');\nforeach ($indexes as $index) {\n$this->artisan('scout:flush', $index, ['--force' => true]);\n}\n$this->info('Scout indexes flushed.');\n}\n}", "CodeBleu_score": 36.67233260761567}, {"code": "<?\nprotected function scoutFlush(): void{\n\tf (config('scout.driver') ==='meilisearch') {\n$indexes = config('scout.indexes');\nforeach ($indexes as $index => $settings) {\n$table = $settings['meilisearch']['table'];\n$this->artisan('scout:flush', [\n'--index' => $index,\n'--table' => $table,\n]);\n$this->info(\"Scout index $index flushed\");\n}\n}\n}", "CodeBleu_score": 46.90602212322171}, {"code": "<?\nprotected function scoutFlush(): void{\n\tf ($this->option('flush')) {\n$this->info('Flushing Scout indexes...');\n$indexes = $this->getMeilisearchIndexes();\nforeach ($indexes as $index) {\n$this->artisan('scout:flush', [\n'--index' => $index['name'],\n]);\n}\n$this->info('Scout indexes flushed successfully.');\n}\n}", "CodeBleu_score": 40.84840765604428}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard: $vcard = $this->read($resource);\n$vcard: $vcard = $this->setUid($vcard, $resource);\n$vcard: $vcard = $this->applyExporters($vcard, $resource);\nreturn $vcard;\n}", "CodeBleu_score": 16.558944853158327}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t// 1. Read the VCard from the resource, setting a UID if it is missing.\n    $vcard = $this->read($resource);\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->setUid($resource->getUid());\n    }\n\n// 2. Apply the exporters to add more details to the VCard from the resource.\n    $this->exporters($resource::class)->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n// 3. Return the populated VCard.\n    return $vcard;\n}", "CodeBleu_score": 20.79934462719252}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\nif ($obj === null) {\nreturn false;\n}\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\n}\nif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\n}\nreturn true;\n}", "CodeBleu_score": 76.35648497132365}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\nif ($obj) {\nif ($obj->type === 'contact') {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\n}\nelseif ($obj->type === 'group') {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\n}\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 70.0145472515257}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\nif (!$obj) {\nreturn false;\n}\nif ($obj->type === 'contact') {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\n} elseif ($obj->type === 'group') {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\n}\nreturn true;\n}", "CodeBleu_score": 69.47422567387662}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$user = auth()->guard()->user();\n\t$activity = $this->activityRepository->create($data);\n\t$path = request()->file('file')->store('leads');\n\t$this->activityRepository->createFile($activity, $path, request()->file('file')->getClientOriginalName());\n}", "CodeBleu_score": 43.99032031081996}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->activityRepository->create($data, auth()->guard()->user());\n\t$file = request()->file('file');\n\t$fileName = $file->getClientOriginalName();\n\t$storagePath = $file->store('lead_activities');\n\n\t$this->activityRepository->createFile($leadActivity, $fileName, $storagePath);\n}", "CodeBleu_score": 46.426773073570665}, {"code": "<?\npublic function upload(array $data){\n\t\tif (request()->hasFile('file')) {\n\t\t$activity = $this->activityRepository->create([\n\t\t\t'title' => $data['title'],\n\t\t\t'description' => $data['description'],\n\t\t\t'user_id' => auth()->guard()->user()->id,\n\t\t\t'lead_id' => $data['lead_id'],\n\t\t]);\n\n\t\t$file = request()->file('file');\n\t\t$filename = $file->getClientOriginalName();\n\t\t$path = $file->store('public/uploads');\n\n\t\t$fileRecord = $this->fileRepository->create([\n\t\t\t'name' => $filename,\n\t\t\t'storage_path' => $path,\n\t\t\t'activity_id' => $activity->id,\n\t\t]);\n\n\t\treturn $fileRecord;\n\t}\n}", "CodeBleu_score": 51.6057223384289}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tf ($exception instanceof ModelNotFoundException) {\n    return response()->view('errors.404', [], 404);\n}\n\nif ($exception instanceof PDOException) {\n    return response()->view('errors.500', [], 500);\n}\n\nif ($exception instanceof ParseError) {\n    return response()->view('errors.500', [], 500);\n}\n\nif ($exception instanceof HttpException) {\n    return response()->view('errors.'.$exception->getStatusCode(), [], $exception->getStatusCode());\n}\n\nreturn response()->view('errors.500', [], 500);\n}", "CodeBleu_score": 33.64718173627009}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tf ($exception instanceof ModelNotFoundException) {\n    return $this->response('admin::errors.404');\n}\n\nif ($exception instanceof PDOException) {\n    return $this->response('admin::errors.500');\n}\n\nif ($exception instanceof ParseError) {\n    return $this->response('admin::errors.500');\n}\n\nif ($exception instanceof HttpException) {\n    return $this->response('admin::errors.'.$exception->getStatusCode(), $exception->getStatusCode());\n}\n\nreturn $this->response('admin::errors.500');\n}", "CodeBleu_score": 33.664462037962984}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tf ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->view('admin::errors.404');\n\t} elseif ($exception instanceof PDOException) {\n\t\treturn response()->view('admin::errors.500');\n\t} elseif ($exception instanceof ParseError) {\n\t\treturn response()->view('admin::errors.500');\n\t} elseif ($exception instanceof HttpException) {\n\t\tif ($exception->getStatusCode() == 404) {\n\t\t\treturn response()->view('admin::errors.404');\n\t\t}\n\t\treturn response()->view('admin::errors.500');\n\t}\n}", "CodeBleu_score": 30.444372430462902}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tf (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 82.29609339514016}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 82.65535839686906}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 82.65535839686906}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$ids = request('ids');\n$is_done = request('is_done');\n$count = 0;\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\n$activity->is_done = $is_done;\n$this->activityRepository->update($activity);\n$count++;\n}\nif ($count > 0) {\nreturn response()->json([\n'success' => true,\n'count' => $count\n]);\n} else {\nreturn response()->json([\n'success' => false\n]);\n}\n}", "CodeBleu_score": 33.398619618066235}, {"code": "<?\npublic function massUpdate(){\n\t$activities = $this->activityRepository->findWhereIn('id', request()->get('ids'));\n$count = 0;\nforeach ($activities as $activity) {\n$this->activityRepository->update(['is_done' => request()->get('is_done')], $activity->id);\n$count++;\n}\nreturn response()->json(['success' => $count > 0]);\n}", "CodeBleu_score": 30.168169893170283}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('activity_ids');\n$isDone = request('is_done');\n\n$count = 0;\n\nforeach ($activityIds as $id) {\n$activity = $this->activityRepository->find($id);\n\nif ($activity->is_done!= $isDone) {\n$activity->is_done = $isDone;\n$activity->save();\n\n$count++;\n}\n}\n\nif ($count > 0) {\nreturn response()->json(['status' =>'success','message' => 'Updated '. $count.'activities.']);\n} else {\nreturn response()->json(['status' => 'error','message' => 'No activities were updated.']);\n}\n}", "CodeBleu_score": 36.16466033322895}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t $ids = request('ids');\n if ($ids === null) {\n return response()->json(['error' => 'No activity IDs were provided.']);\n }\n $ids = explode(',', $ids);\n foreach ($ids as $id) {\n $activity = $this->activityRepository->find($id);\n $this->activityRepository->delete($id);\n }\n return response()->json(['message' => 'Activities were successfully deleted.']);\n }", "CodeBleu_score": 28.304575651924534}, {"code": "<?\n public function massDestroy(){\n\t $ids = request('ids');\n $activities = $this->activityRepository->findWhereIn('id', $ids);\n $activities->each(function ($activity) {\n $this->activityRepository->delete($activity->id);\n });\n return response()->json(['message' => 'Activity successfully deleted.']);\n }", "CodeBleu_score": 24.955622070333845}, {"code": "<?\n public function massDestroy(){\n\t$ids = request('ids');\n\nif ($ids) {\n$ids = explode(',', $ids);\n\nforeach ($ids as $id) {\n$activity = $this->activityRepository->findWithoutFail($id);\n\nif (empty($activity)) {\ncontinue;\n}\n\n$this->activityRepository->delete($id);\n}\n}\n\nreturn response()->json([\n'success' => true,\n'message' => trans('admin.activities.delete_success'),\n]);\n}", "CodeBleu_score": 29.98168631402127}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\tcards = $this->dashboardHelper->getCards();\n$selectedCards = [];\nforeach ($cards as $card) {\nif (in_array($card['id'], request()->all())) {\n$selectedCards[] = $card;\n}\n}\nreturn response()->json($selectedCards);\n}", "CodeBleu_score": 25.339850997729975}, {"code": "<?\n public function updateCards(){\n\tcards = $this->dashboardHelper->getCards();\nforeach ($cards as $card) {\n$card->selected = false;\nforeach ($request->all() as $key => $value) {\nif ($card->id == $key) {\n$card->selected = true;\n}\n}\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 24.927475328354266}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n $requestCards = request()->all();\n foreach ($cards as $card) {\n foreach ($requestCards as $requestCard) {\n if ($card->id == $requestCard['id']) {\n $card->selected = $requestCard['selected'];\n }\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 42.524851579071594}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\tEvent::dispatch('before.store.configuration');\n\n\t$configuration = $this->configurationRepository->create(request()->all());\n\n\tEvent::dispatch('after.store.configuration');\n\n\tsession()->flash('success', trans('configuration.store.success'));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 44.71208489767392}, {"code": "<?\npublic function store(){\n\tEvent::dispatch\nrequest\nsession()->flash\nredirect()->back\n$this->configurationRepository->create\nsession\ntrans\nrequest()->all\n}", "CodeBleu_score": 11.749124880992682}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch('configuration.before.create', $this->configurationRepository->create(request()->all()));\n\tsession()->flash('success', trans('configuration.create.success'));\n\treturn redirect()->back();\n}", "CodeBleu_score": 38.21931449459864}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/'. $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/'. $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n\tfor (String model : list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setModel(model);\n\t\tsort.setSort(0);\n\t\tsort.setUserId(getUserId());\n\t\tsortList.add(sort);\n\t}\n\tremoveHeaderModelSort();\n\tsaveBatch(sortList);\n\treturn new Result(true);\n}", "CodeBleu_score": 24.48754386537791}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> list1 = new ArrayList<>();\n\tfor (String s : list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setSort(s);\n\t\tadminModelSort.setType(SortType.HEADER);\n\t\tadminModelSort.setUserId(getUserId());\n\t\tlist1.add(adminModelSort);\n\t}\n\tadminModelSortService.remove(getUserId());\n\tadminModelSortService.saveBatch(list1);\n\treturn Result.success();\n}", "CodeBleu_score": 39.38285833753266}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> list2 = new ArrayList<AdminModelSort>();\n\tfor (String str : list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setSort(str);\n\t\tlist2.add(adminModelSort);\n\t}\n\tadminModelSortService.remove(adminModelSortService.findByUserId(getUserId()));\n\tadminModelSortService.saveBatch(list2);\n\treturn Result.successResult();\n}", "CodeBleu_score": 29.555705805294956}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 90.3314367438484}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 90.3314367438484}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t//        Result result = new Result();\n//        User user = (User) SecurityUtils.getSubject().getPrincipal();\n//        UserConfig userConfig = userConfigService.queryUserConfigByName(user.getId(), customKey);\n//        if (userConfig!= null) {\n//            userConfig.setValue(json.toString());\n//            userConfigService.updateById(userConfig);\n//        } else {\n//            UserConfig newUserConfig = new UserConfig();\n//            newUserConfig.setUserId(user.getId());\n//            newUserConfig.setCustomKey(customKey);\n//            newUserConfig.setValue(json.toString());\n//            userConfigService.save(newUserConfig);\n//        }\n//        result.setSuccess(true);\n//        return result;\n//    }", "CodeBleu_score": 7.0194569965130595}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n//        System.out.println(json);\n//        System.out.println(customKey);\n        //get user id\n        String userId = SecurityContextHolder.getContext().getAuthentication().getName();\n\n        //get user config\n        UserConfig userConfig = userConfigService.queryUserConfigByName(userId, customKey);\n\n        //if config exists\n        if(userConfig!= null) {\n            userConfig.setValue(json.toString());\n            userConfigService.updateById(userConfig);\n        }\n        //if config doesn't exist\n        else {\n            UserConfig userConfigNew = new UserConfig();\n            userConfigNew.setUserId(userId);\n            userConfigNew.setCustomKey(customKey);\n            userConfigNew.setValue(json.toString());\n            userConfigService.save(userConfigNew);\n        }\n\n        return Result.success(\"success\");\n    }", "CodeBleu_score": 52.820767628667966}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n// 1. Get the user configuration by the custom key.\n UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\n// 2. If the user configuration exists, update its value with the provided JSON.\n if (userConfig!= null) {\n userConfig.setValue(json);\n userConfigService.updateById(userConfig);\n }\n\n// 3. If not, create a new user configuration with the provided JSON and save it.\n else {\n UserConfig newUserConfig = new UserConfig();\n newUserConfig.setUserId(getUserId());\n newUserConfig.setCustomKey(customKey);\n newUserConfig.setValue(json);\n userConfigService.save(newUserConfig);\n }\n\n// 4. Return a successful result.\n return Result.success(\"Successfully updated the user configuration.\");\n }", "CodeBleu_score": 46.633176591555625}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserDao.getUserById(userId);\n\tif (user == null) {\n\t\treturn new Result<AdminUser>(false, \"User does not exist\");\n\t}\n\tString deptName = adminUserDao.getDeptName(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn new Result<AdminUser>(true, \"User retrieved successfully\", user);\n}", "CodeBleu_score": 45.060048935395024}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserDao.getAdminUserById(userId);\n\tif (user!= null) {\n\t\tString deptName = adminUserDao.getDeptName(user.getDeptId());\n\t\tuser.setDeptName(deptName);\n\t\tuser.setSalt(null);\n\t\tuser.setPassword(null);\n\t}\n\treturn Result.success(user);\n}", "CodeBleu_score": 47.586795994266126}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"User not found.\");\n\t}\n\tuser.setDeptName(adminUserService.getDeptName(user.getDeptId()));\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.ok(user);\n}", "CodeBleu_score": 40.286832312070956}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t // Retrieve the user ID from the session\n String userId = session.get(\"userId\");\n // Check if there are multiple \"readNotice\" entries for the user\n List readNotices = readNoticeDao.query().where(ReadNotice.userId.eq(userId)).findList();\n if (readNotices.size() > 1) {\n // Update the \"readNotice\" status to 1 for all matching entries\n ReadNotice.update(ReadNotice.status.eq(0)).set(ReadNotice.status, 1).where(ReadNotice.userId.eq(userId)).execute();\n } else if (readNotices.size() == 1) {\n // Update the \"readNotice\" status to 1 for the matching entry\n ReadNotice.update(ReadNotice.status.eq(0)).set(ReadNotice.status, 1).where(ReadNotice.userId.eq(userId)).execute();\n } else {\n // Create a new \"readNotice\" entry with status 1 and save it\n ReadNotice readNotice = new ReadNotice();\n readNotice.setUserId(userId);\n readNotice.setStatus(1);\n readNotice.save();\n }\n return ok();\n }", "CodeBleu_score": 33.912157056410045}, {"code": " public Result readNotice() {\n\t\tUser user = getCurrentUser();\n\tString userId = user.getId();\n\tList<ReadNotice> readNotices = readNoticeRepository.findByUserId(userId);\n\tif (readNotices.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNoticeRepository.save(readNotice);\n\t\t}\n\t\treturn ok(\"readNotice updated successfully!\");\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setStatus(1);\n\t\treadNoticeRepository.save(readNotice);\n\t\treturn ok(\"readNotice created successfully!\");\n\t}\n}", "CodeBleu_score": 25.68210649850302}, {"code": " public Result readNotice() {\n\t String userId = getUserId();\n List<ReadNotice> readNoticeList = ReadNotice.lambdaQuery().eq(ReadNotice::getUserId, userId).list();\n if (readNoticeList.size() > 0) {\n readNoticeList.forEach(readNotice -> readNotice.setStatus(1).update());\n } else {\n ReadNotice readNotice = new ReadNotice();\n readNotice.setUserId(userId);\n readNotice.setStatus(1);\n readNotice.save();\n }\n return Result.success(\"Successfully updated readNotice status\");\n}", "CodeBleu_score": 31.67287016271941}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// TODO Auto-generated method stub\n\n}", "CodeBleu_score": 1.7832668431601406}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfigBO adminConfigBO = new AdminConfigBO();\n\tadminConfigBO.setName(\"companyInfo\");\n\tadminConfigBO.setLast(false);\n\tadminConfigBO.setDescription(\"Company information\");\n\tadminConfigBO.setSetName(\"setCompanyInfo\");\n\tadminConfigBO.setLambdaQuery(\"lambdaQuery\");\n\tadminConfigBO.setEq(\"eq\");\n\tadminConfigBO.setStatus(\"setStatus\");\n\tadminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n\tAdminConfigBO adminConfigBO1 = adminConfigService.saveOrUpdate(adminConfigBO);\n\tAdminConfigBO adminConfigBO2 = adminConfigService.findOne(adminConfigBO1.getId());\n\tadminConfigBO2.setValue(JSON.toJSONString(adminCompanyBO));\n\tadminConfigService.saveOrUpdate(adminConfigBO2);\n}", "CodeBleu_score": 39.34162258789618}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// TODO Auto-generated method stub\n\n}", "CodeBleu_score": 1.7832668431601406}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString configValue = getCompanyConfigValue(ADMIN_CONFIG_KEY);\n\tif (configValue!= null) {\n\t\tadminCompanyBO = parseObject(configValue);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 31.647518236645116}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString adminConfigKey = \"admin.company\";\n\tString adminConfigValue = null;\n\tadminConfigValue = this.query(adminConfigKey);\n\tif (adminConfigValue!= null) {\n\t\tadminCompanyBO = this.parseObject(adminConfigValue, AdminCompanyBO.class);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 46.89531590766098}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t", "CodeBleu_score": 1.4416851606689172}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig.remove(getWelcomeSpeechConfig())\n for (String string : stringList) {\n AdminConfig.create(\"log\", AdminConfig.list(\"LogConfig\", getLogConfig()), \"WelcomeSpeech\", string)\n }\n AdminConfig.save()\n }", "CodeBleu_score": 13.471982381049802}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tfor (String string : stringList) {\n\t\tAdminConfig.add(AdminConfig.getObjectName(logWelcomeSpeech), null, \"name\", string);\n\t}\n\tAdminConfig.remove(AdminConfig.getObjectName(logWelcomeSpeech), null, \"name\", logWelcomeSpeechName);\n\tAdminConfig.saveBatch();\n}", "CodeBleu_score": 17.168039310484197}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t for (String string : stringList) {\n AdminConfig.add(AdminConfig.getObjectType(LOG_WELCOME_SPEECH_CLASS), AdminConfig.getid(LOG_WELCOME_SPEECH_CLASS), null, \"value\", string);\n }\n AdminConfig.saveBatch();\n AdminConfig.remove(AdminConfig.list(LOG_WELCOME_SPEECH_CLASS, null, null, null, null, null));\n AdminConfig.save();\n }", "CodeBleu_score": 18.304219508831434}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = ();\n\tString username = adminInitDataBO.getUsername();\n\tString salt = adminInitDataBO.getSalt();\n\tString userId = adminInitDataBO.getUserId();\n\n\tString storedPassword = getPassword(userId);\n\tString storedSalt = getSalt(userId);\n\tString storedUsername = getUsername(userId);\n\n\tif (!storedUsername.equals(username)) {\n\t\tthrow new InvalidPasswordException(\"The username does not match the stored username.\");\n\t}\n\n\tif (!storedSalt.equals(salt)) {\n\t\tthrow new InvalidPasswordException(\"The salt does not match the stored salt.\");\n\t}\n\n\tif (!password.equals(storedPassword)) {\n\t\tthrow new InvalidPasswordException(\"The password does not match the stored password.\");\n\t}\n\n\tString accessCode = generateAccessCode();\n\tsetex(userId, accessCode, 600);\n\treturn accessCode;\n}", "CodeBleu_score": 28.178800925419665}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = adminInitDataBO.getPassword();\n\tString salt = adminInitDataBO.getSalt();\n\tString userId = getUserId(username);\n\tif (userId == null) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\tString storedPassword = getPassword(userId);\n\tString storedSalt = getSalt(userId);\n\tString storedUsername = getUsername(userId);\n\tif (!storedUsername.equals(username)) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\tif (!storedSalt.equals(salt)) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\tif (!password.equals(storedPassword)) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\tString accessCode = generateAccessCode();\n\tsetex(userId, accessCode);\n\treturn accessCode;\n}", "CodeBleu_score": 29.80695989741301}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = ();\n\tString salt = adminInitDataBO.getSalt();\n\tString userId = adminInitDataBO.getUserId();\n\tString redisKey = String.format(REDIS_KEY_FORMAT, userId);\n\tString redisValue = adminInitDataBO.getRedis();\n\tString code = null;\n\tif (password == null || password.isEmpty() || salt == null || salt.isEmpty()) {\n\t\tthrow new InvalidPasswordException(\"Password is empty\");\n\t}\n\tif (redisValue == null || redisValue.isEmpty()) {\n\t\tthrow new InvalidPasswordException(\"Redis is empty\");\n\t}\n\tString storedPassword = getPassword(username);\n\tif (storedPassword == null || storedPassword.isEmpty()) {\n\t\tthrow new InvalidPasswordException(\"Password is empty\");\n\t}\n\tString storedSalt = getSalt(username);\n\tif (storedSalt == null || storedSalt.isEmpty()) {\n\t\tthrow new InvalidPasswordException(\"Salt is empty\");\n\t}\n\tString hashedPassword = hashPassword(password, salt);\n\tif (!storedPassword.equals(hashedPassword)) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\tString codeValue = generateCode();\n\tsetex(redisKey, codeValue, 600);\n\tcode = codeValue;\n\treturn code;\n}", "CodeBleu_score": 31.16088719148802}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauth:\" + userId;\n\tList<String> unauthUrls = getRedis().lrange(key, 0, -1);\n\tfor (String unauthUrl : unauthUrls) {\n\t\tif (unauthUrl.equals(getInitAuthUrl())) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.461517016072182}, {"code": "private boolean verifyInitAuth(){\n\t\t// get the user ID\n\tString userId = getUserId();\n\t// construct a key\n\tString key = \"unauthorized_menu_urls:\" + userId;\n\t// fetch the list of unauthorized menu URLs from Redis\n\tList<String> unauthorizedMenuUrls = getRedis().lrange(key, 0, -1);\n\t// check if the initial authentication URL is in the list\n\tif (unauthorizedMenuUrls.contains(getInitAuthUrl())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.99112043077099}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"auth:\" + userId;\n\tString unauthorized = getRedis().get(key);\n\tif (unauthorized!= null && unauthorized.contains(getInitAuthUrl())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.241828203259978}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(list);\n}", "CodeBleu_score": 52.43855136938139}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (menuIdList == null || menuIdList.isEmpty()) {\n\t\treturn;\n\t}\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(roleMenuList);\n}", "CodeBleu_score": 54.825629680060906}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (roleId == null) {\n\t\tthrow new IllegalArgumentException(\"roleId is required\");\n\t}\n\tif (menuIdList == null || menuIdList.size() == 0) {\n\t\tthrow new IllegalArgumentException(\"menuIdList is required\");\n\t}\n\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tsaveBatch(list);\n}", "CodeBleu_score": 48.7150293027962}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> logMap = beanToMap(sysLog);\nlogMap.remove(ID);\nlogMap.put(CREATE_TIME, formatDateTime(sysLog.getCreateTime()));\nIndexRequest indexRequest = new IndexRequest(index);\nindexRequest.id(sysLog.getId());\nindexRequest.source(logMap, XContentType.JSON);\ntry {\nrestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 47.548802244982625}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> map = beanToMap(sysLog);\nmap.remove(\"id\");\nmap.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\nIndexRequest request = new IndexRequest(index).source(map, XContentType.JSON);\ntry {\nrestHighLevelClient.index(request, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 47.68024342073205}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> map = beanToMap(sysLog);\nmap.remove(\"id\");\nmap.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\nIndexRequest indexRequest = new IndexRequest(index);\nindexRequest.source(map);\ntry {\nrestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 45.45645699501236}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    //\u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n//        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n//        //\u521d\u59cb\u5316\u67e5\u8be2\u7ed3\u679c\n//        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n//        searchRequest.source(searchSourceBuilder);\n//        //\u6267\u884c\u67e5\u8be2\n//        SearchResponse searchResponse = null;\n//        try {\n//            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n//        } catch (IOException e) {\n//            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n//        }\n//        //\u89e3\u6790\u67e5\u8be2\u7ed3\u679c\n//        BasePage<SysLog> basePage = new BasePage<>();\n//        if (searchResponse!= null) {\n//            //\u83b7\u53d6\u603b\u6761\u6570\n//            long totalHits = searchResponse.getHits().getTotalHits();\n//            basePage.setTotalHits(totalHits);\n//            //\u83b7\u53d6\u5f53\u524d\u9875\n//            int currentPage = querySysLogBO.getPage();\n//            basePage.setCurrent(currentPage);\n//            //\u83b7\u53d6\u603b\u9875\u6570\n//            int totalPages = (int) Math.ceil((double) totalHits / querySysLogBO.getLimit());\n//            basePage.setTotalPages(totalPages);\n//            //\u83b7\u53d6\u6570\u636e\n//            List<SysLog> sysLogs = new ArrayList<>();\n//            SearchHit[] searchHits = searchResponse.getHits().getHits();\n//            for (SearchHit searchHit : searchHits) {\n//                SysLog sysLog = mapToBean(searchHit);\n//                sysLogs.add(sysLog);\n//            }\n//            basePage.setList(sysLogs);\n//        }\n//        return basePage;\n        return null;\n    }", "CodeBleu_score": 2.243006093581348}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n// \u6784\u5efa\u67e5\u8be2\u8bf7\u6c42\nSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\nsearchRequest.source(searchSourceBuilder);\n// \u6267\u884c\u67e5\u8be2\u8bf7\u6c42\ntry {\n    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    SearchHits hits = searchResponse.getHits();\n    long totalHits = hits.getTotalHits().value;\n    // \u6784\u5efa\u5206\u9875\u7ed3\u679c\n    BasePage<SysLog> sysLogPage = new BasePage<>();\n    sysLogPage.setTotalHits(totalHits);\n    sysLogPage.setCurrent(querySysLogBO.getPage());\n    sysLogPage.setLimit(querySysLogBO.getLimit());\n    // \u6620\u5c04\u641c\u7d22\u7ed3\u679c\n    List<SysLog> sysLogList = new ArrayList<>();\n    for (SearchHit hit : hits) {\n        SysLog sysLog = mapToBean(hit);\n        sysLogList.add(sysLog);\n    }\n    sysLogPage.setList(sysLogList);\n    return sysLogPage;\n} catch (IOException e) {\n    log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5931\u8d25,msg:{}\", e.getMessage());\n}\nreturn null;\n}", "CodeBleu_score": 58.61867476472261}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\ty {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await https.get(url);\n\t\tresponse.pipe(file);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfile.on(\"finish\", () => {\n\t\t\t\tfile.close(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t\tfile.on(\"error\", (err) => {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t}\n}", "CodeBleu_score": 56.282346341889}, {"code": "async function downloadFile(url, dest){\n\ty {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await https.get(url);\n\t\tresponse.pipe(file);\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tfile.on(\"finish\", resolve);\n\t\t\tfile.on(\"error\", reject);\n\t\t});\n\t\tfile.close();\n\t} catch (err) {\n\t\tfs.unlink(dest, () => {});\n\t\tthrow err;\n\t}\n}", "CodeBleu_score": 40.97078110381695}, {"code": "async function downloadFile(url, dest){\n\tnst file = fs.createWriteStream(dest);\n\tconst response = await https.get(url);\n\tresponse.pipe(file);\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on(\"finish\", () => {\n\t\t\tfile.close();\n\t\t\tresolve();\n\t\t});\n\t\tfile.on(\"error\", (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 50.89603958377927}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.just(module)\n.flatMapMany(this::getLiveModules)\n.filter(m ->!m.getId().equals(module.getId()))\n.filter(m ->!circularDependencyCheckSet.contains(m.getId()))\n.doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n.flatMap(m -> getDependentModules(m, circularDependencyCheckSet))\n.concatWith(Flux.just(module));\n }", "CodeBleu_score": 50.2336433004239}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(module.getDependencies())\n.flatMap(dependency -> {\n String dependencyId = dependency.getId();\n if (circularDependencyCheckSet.contains(dependencyId)) {\n return Mono.empty();\n }\n circularDependencyCheckSet.add(dependencyId);\n return getModule(dependencyId);\n })\n.doOnNext(dependentModule -> circularDependencyCheckSet.remove(dependentModule.getId()))\n.doOnError(e -> warn(\"Failed to retrieve dependent modules for module '\" + module.getId() + \"'\"))\n.onErrorContinue((e, module) -> warn(\"Failed to retrieve dependent modules for module '\" + module.getId() + \"'\"))\n.collectList();\n }", "CodeBleu_score": 43.31652086013439}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn Flux.fromIterable(module.getDependencies())\n\t\t.filter(dependency ->!circularDependencyCheckSet.contains(dependency.getId()))\n\t\t.doOnNext(dependency -> circularDependencyCheckSet.add(dependency.getId()))\n\t\t.flatMap(dependency -> getModule(dependency.getId()))\n\t\t.flatMap(this::getDependentModules)\n\t\t.onErrorContinue(this::logWarning)\n\t\t.collectList();\n}", "CodeBleu_score": 49.983068512424076}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = new Asset();\n if (createThumbnail) {\n byte[] data = resizeImage(dataBuffer);\n asset.setContentType(MediaType.IMAGE_JPEG);\n asset.setData(data);\n }\n else {\n asset.setContentType(srcContentType);\n asset.setData(dataBuffer.getData());\n }\n DataBufferUtils.release(dataBuffer);\n return asset;\n }", "CodeBleu_score": 37.632960370505295}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = null;\n if (createThumbnail) {\n byte[] data = resizeImage(dataBuffer);\n asset = new Asset(data, MediaType.IMAGE_JPEG);\n } else {\n asset = new Asset(dataBuffer.asInputStream(), srcContentType);\n }\n DataBufferUtils.release(dataBuffer);\n return asset;\n }", "CodeBleu_score": 43.295671134614366}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t byte[] data = dataBuffer.getData();\n if (createThumbnail) {\n data = resizeImage(dataBuffer);\n }\n String contentType = srcContentType.toString();\n if (createThumbnail) {\n contentType = MediaType.IMAGE_JPEG.toString();\n }\n return new Asset(data, contentType);\n }", "CodeBleu_score": 40.46649668432369}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getById(assetId)\n\t\t.map(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.IMAGE_JPEG);\n\t\t\treturn asset.getData();\n\t\t})\n\t\t.flatMap(data -> exchange.getResponse().writeWith(Mono.just(data)));\n}", "CodeBleu_score": 26.659602760087413}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn this.getById(assetId)\n\t\t.flatMap(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.IMAGE_PNG);\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t});\n}", "CodeBleu_score": 26.20408005539236}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn this.getById(assetId)\n\t\t.flatMap(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t\t}\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t});\n}", "CodeBleu_score": 33.31436476818196}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn this.getOrganizationInEnterpriseMode()\n\t.flatMapIterable(org -> org.getAuthConfigs())\n\t.map(authConfig -> new FindAuthConfig(authConfig.getAuthConfigId(), authConfig.getAuthConfigName(), authConfig.getAuthConfigType(), authConfig.getAuthConfigDetails(), authConfig.getAuthConfigStatus(), authConfig.getAuthConfigCreatedDate(), authConfig.getAuthConfigUpdatedDate(), authConfig.getAuthConfigDeletedDate(), authConfig.getAuthConfigDeletedBy(), authConfig.getAuthConfigDeletedReason()));\n}", "CodeBleu_score": 19.87432997715849}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (isWorkspaceModeSaas()) {\n\t\treturn Flux.empty();\n\t}\n\treturn findAllOrganizations()\n\t\t.flatMapIterable(organization -> organization.getAuthConfigs())\n\t\t.map(authConfig -> new FindAuthConfig(authConfig.getAuthType(), authConfig.getAuthId()));\n}", "CodeBleu_score": 24.90887515864784}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (this.workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn this.organizations.map(organization -> {\n\t\treturn organization.getAuthConfigs().collect(Collectors.toList())\n\t\t\t\t.stream()\n\t\t\t\t.map(authConfig -> new FindAuthConfig(authConfig, organization))\n\t\t\t\t.collect(Collectors.toList());\n\t}).flatMapIterable(Function.identity());\n}", "CodeBleu_score": 36.39970031149423}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn new MongockApplicationRunner\n.Builder\n.withDriver\n.withSpringContext\n.withDefaultWriteConcern\n.withDefaultReadConcern\n.addChangeLogsScanPackages\n.withJournal\n.buildApplicationRunner\n.setSpringContext\n.setDriver\n.build();\n}", "CodeBleu_score": 14.49225689512067}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongockApplicationRunner.Builder builder = MongockApplicationRunner.builder()\n\t\t.withSpringContext(springContext)\n\t\t.withDriver(mongoTemplate)\n\t\t.withDefaultWriteConcern(WriteConcern.MAJORITY)\n\t\t.withDefaultReadConcern(ReadConcern.MAJORITY)\n\t\t.addChangeLogsScanPackages(\"com.github.cloudyrock.mongock.changelogs\")\n\t\t.withJournal(new MongoChangeLogJournal(mongoTemplate));\n\treturn builder.buildApplicationRunner();\n}", "CodeBleu_score": 45.253439149871035}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn\nMongockApplicationRunner\n.builder\n.springContext\n(\nspringContext\n)\n.driver\n(\nnew\nMongoDriver\n(\nmongoTemplate\n)\n)\n.buildApplicationRunner\n(\n)\n;\n}", "CodeBleu_score": 14.255481473404991}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tmappingMongoConverter.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 44.68873929612591}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.map(LibraryQuery::getDsl)\n\t\t\t.switchIfEmpty(getDSLByLibraryQueryId(libraryQueryId));\n}", "CodeBleu_score": 38.47989161148955}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.flatMap(libraryQuery -> getDSLByLibraryQueryId(libraryQuery.getLibraryQueryId()));\n}", "CodeBleu_score": 27.18254602547365}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.map(LibraryQuery::getDsl)\n\t\t\t.switchIfEmpty(getDSLByLibraryQueryId(libraryQueryId));\n}", "CodeBleu_score": 38.47989161148955}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t   var timeout = parseQueryTimeoutMs(timeoutStr);\n+        var timeout = parseQueryTimeoutMs(timeoutStr, datasource.getType());\n         return Mono.defer(() -> {\n             if (datasource.getType().equals(DatasourceType.JS)) {\n                 return executeByNodeJs(datasource, queryConfig, requestParams);\n             } else {\n                 return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n             }\n         }).timeout(timeout, timeoutUnit)\n                .onErrorResume(throwable -> {\n                     if (throwable instanceof TimeoutException) {\n                         return Mono.error(new QueryExecutionError(QueryExecutionErrorType.TIMEOUT, \"Query execution timed out after \" + timeout + \" ms\"));@@ -129,19 +129,19 @@\n         }\n         return queryTimeoutMs;\n     }\n }", "CodeBleu_score": 52.103870398750104}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t   long timeout = parseQueryTimeoutMs(timeoutStr);\n-        return executeQueryWithTimeout(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n+        var timeout = parseQueryTimeoutMs(timeoutStr);\n+        return executeQueryWithTimeout(datasource, queryConfig, requestParams, timeout, queryVisitorContext)\n+               .onErrorResume(this::onErrorMap);\n     }", "CodeBleu_score": 23.569641823181694}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tatasource.getType().equals(DatasourceType.JS_DATASOURCE_PLUGIN)) {\n return executeByNodeJs(datasource, queryConfig, requestParams);\n } else {\n return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n }\n }", "CodeBleu_score": 23.4723480018044}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.just(datasource)\n\t.flatMap(this::buildQueryExecutionContext)\n\t.flatMap(executionContext -> {\n\t\treturn Mono.just(executionContext)\n\t\t.flatMap(this::getOrCreateConnection)\n\t\t.flatMap(connection -> {\n\t\t\treturn Mono.just(connection)\n\t\t\t.flatMap(conn -> {\n\t\t\t\treturn Mono.just(conn)\n\t\t\t\t.flatMap(this::executeQuery)\n\t\t\t\t.onErrorResume(e -> {\n\t\t\t\t\tif (e instanceof DataAccessException) {\n\t\t\t\t\t\treturn Mono.just(e);\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.error(e);\n\t\t\t\t})\n\t\t\t\t.doFinally(signalType -> {\n\t\t\t\t\tif (signalType == SignalType.ON_ERROR) {\n\t\t\t\t\t\texecutionContext.close();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 29.519372487645544}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// Get the query executor based on the datasource type\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n\t// Acquire a connection from the datasource connection pool\n\tMono<Connection> connectionMono = getOrCreateConnection(datasource);\n\n\t// Execute the query using the connection and handle any errors that occur during execution\n\treturn connectionMono.flatMap(connection -> {\n\t\ttry {\n\t\t\treturn doExecuteQuery(queryExecutor, queryExecutionContext, connection, queryVisitorContext);\n\t\t} catch (SQLException | QueryExecutionException e) {\n\t\t\treturn Mono.error(e);\n\t\t}\n\t});\n}", "CodeBleu_score": 34.996190913122085}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\nreturn getOrCreateConnection(datasource)\n.flatMap(connection -> doExecuteQuery(queryExecutor, connection, queryExecutionContext));\n}", "CodeBleu_score": 34.6359991822301}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t (isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getLeft();\nint unitIndex = unitInfo.getRight();\nif (unitIndex == -1) {\nthrow new IllegalArgumentException(\"Invalid query timeout format: \" + timeoutStr);\n}\ndouble value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\nif (value < 0 || value > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Invalid query timeout value: \" + timeoutStr);\n}\nreturn convertToMs(value, unit);\n}", "CodeBleu_score": 48.69485780906299}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getLeft();\nint value = Integer.parseInt(timeoutStr.substring(0, unitInfo.getRight()));\nint timeoutMs = convertToMs(value, unit);\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n}\nreturn timeoutMs;\n}", "CodeBleu_score": 39.20452056829902}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t (StringUtils.isBlank(timeoutStr)) {\n    return DEFAULT_QUERY_TIMEOUT_MS;\n}\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getLeft();\nint unitIndex = unitInfo.getRight();\nint value = Integer.parseInt(timeoutStr.substring(0, unitIndex));\nint ms = convertToMs(value, unit);\nif (ms > MAX_QUERY_TIMEOUT_MS) {\n    throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n}\nreturn ms;\n}", "CodeBleu_score": 42.18701882465902}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t/**\n * Get the live queries from the application\n */\nreturn getLiveQueries(application)\n.flatMap(queries -> {\n\n/**\n * If there are no live queries, return an error\n */\nif (queries.isEmpty()) {\nreturn Mono.error(new IllegalArgumentException(\"No live queries found in application\"));\n}\n\n/**\n * Get the datasource IDs from the live queries\n */\nreturn getDatasourceIds(queries)\n.flatMap(datasourceIds -> {\n\n/**\n * If there are no datasource IDs, return an error\n */\nif (datasourceIds.isEmpty()) {\nreturn Mono.error(new IllegalArgumentException(\"No datasources found in live queries\"));\n}\n\n/**\n * Copy each datasource to the current organization\n */\nreturn datasourceIds.stream()\n.map(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n.collect(Collectors.toList())\n.stream()\n.map(Mono::block)\n.collect(Collectors.toList())\n.stream()\n.map(Pair::of)\n.collect(Collectors.toList());\n});\n});\n}", "CodeBleu_score": 35.03664422586193}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t//        return getDatasourceIdsFromLiveQueries(application)\n//               .flatMap(datasourceIds -> {\n//                    if (datasourceIds.isEmpty()) {\n//                        return Mono.error(new DatasourceCopyException(\"No datasource found in application: \" + application.getName()));\n//                    }\n//                    return copyDatasource(currentOrganizationId, datasourceIds, visitorId);\n//                });\n//\n//    }", "CodeBleu_score": 6.641082161100504}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n           .flatMapMany(query -> getDatasourceIds(query))\n           .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n           .collectList()\n           .map(datasources -> datasources.stream()\n                   .map(Pair::of)\n                   .collect(Collectors.toList()));\n}", "CodeBleu_score": 30.06113864746985}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.getById(datasourceId)\n       .switchIfEmpty(Mono.error(new IllegalArgumentException(String.format(\"Datasource with ID '%s' not found\", datasourceId))))\n       .flatMap(datasource -> {\n            if (isSystemStatic(datasource)) {\n                return Mono.just(datasourceId);\n            } else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                return Mono.just(datasource.getDetailConfig().getDatasourceId());\n            } else {\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            }\n        });\n}", "CodeBleu_score": 44.41758025621115}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.getById(datasourceId)\n       .flatMap(datasource -> {\n            if (isSystemStatic(datasource)) {\n                return Mono.just(datasourceId);\n            }\n            if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                return Mono.just(datasource.getDetailConfig().getDatasourceId());\n            }\n            return createNewDatasourceFrom(organizationId, visitorId, datasource);\n        });\n}", "CodeBleu_score": 50.804531463525436}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.get(datasourceId)\n\n       .flatMap(datasource -> {\n            if (isSystemStatic(datasource)) {\n                return Mono.just(datasourceId);\n            } else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                return getNewIdForLegacyDatasource(datasource, visitorId);\n            } else {\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            }\n        });\n}", "CodeBleu_score": 39.09281328447173}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t//        String userId = user.getId();\n//        String avatarId = user.getAvatar();\n//        String filename = filePart.getSubmittedFileName();\n//        String contentType = filePart.getContentType();\n//        String extension = FilenameUtils.getExtension(filename);\n//        String newAvatarId = UUID.randomUUID().toString();\n//\n//        if (avatarId!= null) {\n//            return deleteAvatar(avatarId)\n//                   .then(uploadAvatar(filePart, newAvatarId, contentType, extension))\n//                   .then(updateUserAvatar(newAvatarId, userId));\n//        } else {\n//            return uploadAvatar(filePart, newAvatarId, contentType, extension)\n//                   .then(updateUserAvatar(newAvatarId, userId));\n//        }\n//    }", "CodeBleu_score": 6.277227342940204}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return upload(filePart)\n.flatMap(newAvatar -> removeAvatar(user)\n.then(updateUserAvatar(newAvatar, user.getId()))\n );\n }", "CodeBleu_score": 14.173249743840035}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t//        if (filePart.getSize() > 0) {\n//            return Mono.just(filePart)\n//                   .map(part -> {\n//                        String fileName = part.getSubmittedFileName();\n//                        String contentType = part.getContentType();\n//                        InputStream inputStream = part.getInputStream();\n//                        Asset asset = new Asset();\n//                        asset.setFileName(fileName);\n//                        asset.setContentType(contentType);\n//                        asset.setInputStream(inputStream);\n//                        return asset;\n//                    })\n//                   .flatMap(asset -> {\n//                        return upload(asset);\n//                    })\n//                   .flatMap(asset -> {\n//                        if (user.getAvatar()!= null) {\n//                            return deleteAsset(user.getAvatar());\n//                        }\n//                        return Mono.just(true);\n//                    })\n//                   .flatMap(success -> {\n//                        user.setAvatar(asset.getId());\n//                        return updateUser(user);\n//                    });\n//        } else {\n//            return Mono.just(false);\n//        }\n//    }", "CodeBleu_score": 6.277227342940204}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\turn Mono.zip(\n        Mono.just(authUser),\n        Mono.just(authUser.getAuthContext()),\n        Mono.just(authUser.getSource()),\n        (authUser, authContext, source) -> {\n            String name = authUser.getName();\n            String state = authUser.getState();\n            boolean enabled = authUser.getIsEnabled();\n            String avatarLink = authUser.getAvatarLink();\n            String password = ();\n            String authSource = source.toString();\n            User user = new User();\n            user.setName(name);\n            user.setState(state);\n            user.setIsEnabled(enabled);\n            user.setAvatarLink(avatarLink);\n            if (authSource.equals(AuthSource.EMAIL.toString()) && password!= null) {\n                user.setPassword(encryptionService.encryptPassword(password));\n            }\n            user.setIsNewUser(true);\n            return user;\n        })\n       .flatMap(user -> {\n            if (authUser.getAuthContext().getConnections()!= null) {\n                user.setConnections(authUser.getAuthContext().getConnections());\n            }\n            return repository.save(user);\n        });\n}", "CodeBleu_score": 40.21567601556955}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\turn Mono.just(authUser)\n       .map(authUser1 -> {\n            User user = new User();\n            user.setName(authUser1.getName());\n            user.setState(authUser1.getState());\n            user.setIsEnabled(authUser1.getIsEnabled());\n            user.setAvatar(authUser1.getAvatar());\n            if (authUser1.getSource().equals(AuthSource.EMAIL.toString()) && authUser1.getAuthContext().containsKey(\"password\")) {\n                String password = authUser1.getAuthContext().get(\"password\");\n                user.setPassword(encryptionService.encryptPassword(password));\n            }\n            user.setConnections(authUser1.getConnections());\n            user.setIsNewUser(true);\n            return user;\n        })\n       .flatMap(repository::save)\n       .flatMap(user -> {\n            return Mono.just(user);\n        });\n}", "CodeBleu_score": 42.29326242552888}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tturn Mono.just(authUser)\n\t\t\t.map(authUser -> {\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(authUser.getName());\n\t\t\t\tuser.setState(authUser.getState());\n\t\t\t\tuser.setEnabled(true);\n\t\t\t\tuser.setTpAvatarLink(authUser.getTpAvatarLink());\n\t\t\t\tif (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext()!= null && authUser.getAuthContext().get(\"password\")!= null) {\n\t\t\t\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\").toString()));\n\t\t\t\t}\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tuser.addConnections(authUser.getConnections());\n\t\t\t\tuser.setIsNewUser(true);\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(repository::save)\n\t\t\t.then(Mono.just(authUser));\n}", "CodeBleu_score": 42.65698199873964}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.defer(() -> {\n\t\tif (user.getConnections() == null) {\n\t\t\tuser.setConnections(new ArrayList<>());\n\t\t}\n\t\tuser.getConnections().add(new Connection(email, \"email\"));\n\t\treturn save(user);\n\t})\n\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 18.032299719397283}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono\n.fromCallable(()\n-> {\nif\n(user\n.\ngetConnections\n()\n.\nstream\n()\n.\nanyMatch\n(connection\n->\nconnection\n.\ngetSource\n(\n)\n.\nequals\n(\nEmailSource\n.\nEMAIL_SOURCE_NAME\n)\n&&\nconnection\n.\ngetEmailAddress\n(\n)\n.\nequals\n(\nemail\n)\n)\n)\n{\nthrow\nnew\nDuplicateKeyException\n(\n\"\nEmail\n\"\n+\nemail\n+\n\"\nalready\nexists\nin\nuser\n\"\n+\nuser\n.\ngetUuid\n(\n)\n)\n;\n}\nreturn\ntrue\n;\n}\n)\n.\nflatMap\n(\nsuccess\n-\n>\n{\nif\n(\nsuccess\n)\n{\nreturn\ncreateConnection\n(\nuser\nEmailSource\n.\nEMAIL_SOURCE_NAME\nemail\n)\n.\nthen\n(\nuser\n.\nsave\n(\n)\n)\n;\n}\nelse\n{\nreturn\nMono\n.\nempty\n(\n)\n;\n}\n}\n)\n.\nonErrorResume\n(\nDuplicateKeyException\n.\nclass\n:\n:\nwrap\n)\n.\nthen\n(\nMono\n.\njust\n(\nfalse\n)\n)\n;\n}", "CodeBleu_score": 27.83944701175357}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn\nbind\n(\nuser\n,\nemail\n,\nEmailSource\n.\nbuilder\n(\n)\n.\nbuild\n(\n)\n)\n;\n}", "CodeBleu_score": 6.825315126773256}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t", "CodeBleu_score": 6.058344569053697}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tturn findById(userId)\n\t\t.filter(user -> encryptionService.matchPassword(oldPassword, user.getPassword()))\n\t\t.map(user -> {\n\t\t\tuser.setPassword(encryptionService.encryptPassword(newPassword));\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(repository::save)\n\t\t.thenReturn(true);\n}", "CodeBleu_score": 23.857345588575686}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t", "CodeBleu_score": 6.058344569053697}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t", "CodeBleu_score": 5.956160929320657}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\turn Mono.zip(\nMono.just(orgMember)\n.map(this::getOrgId)\n.flatMap(this::getNonDynamicUserGroupIdsInOrg)\n.filter(id ->!id.equals(ALL_USERS_GROUP_ID))\n.collectList()\n.map(groupIds -> groupIds.stream()\n.map(id -> Map.of(\n\"id\", id,\n\"name\", getGroupLocalizedName(id, locale)\n))\n.collect(Collectors.toList())),\nMono.just(orgMember)\n.map(this::getOrgId)\n.flatMap(this::getUserGroupIdsInOrg)\n.filter(id ->!id.equals(ALL_USERS_GROUP_ID))\n.collectList()\n.map(groupIds -> groupIds.stream()\n.map(id -> Map.of(\n\"id\", id,\n\"name\", getGroupLocalizedName(id, locale)\n))\n.collect(Collectors.toList()))\n)\n.map(tuple -> {\nList<Map<String, String>> groups = new ArrayList<>();\nList<Map<String, String>> nonDynamicGroups = tuple.getT1();\nif (withoutDynamicGroups) {\ngroups.addAll(nonDynamicGroups);\n} else {\ngroups.addAll(nonDynamicGroups);\ngroups.addAll(tuple.getT2());\n}\nreturn groups;\n});\n}", "CodeBleu_score": 38.10472491707003}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t", "CodeBleu_score": 5.956160929320657}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n}", "CodeBleu_score": 28.631604009821704}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n}", "CodeBleu_score": 28.631604009821704}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n}", "CodeBleu_score": 28.631604009821704}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(fmt.Errorf(\"predicatePartition is nil\"))\n\t}\n\tif predicateValue == nil {\n\t\tpanic(fmt.Errorf(\"predicateValue is nil\"))\n\t}\n\tg := rungroup.New(context.Background())\n\tfor partition := range c.partitions {\n\t\tif predicatePartition(partition, c.partitions[partition]) {\n\t\t\tg.Enqueue(func() {\n\t\t\t\tc.partitions[partition].ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 36.27758741127996}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\trungroup := run.Group{}\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p) {\n\t\t\trungroup.Run(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 35.789574669887074}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg := rungroup.New(1)\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Key(), p) {\n\t\t\tg.Enqueue(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 35.89077009428346}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := math.Floor(float64(averageWeightPerPartition))\n\treturn int(maxSizePerPartition)\n}", "CodeBleu_score": 38.67979415167269}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\tpanic(\"Invalid input\")\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal / avgWeightPerPartition)))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 42.10440667825106}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\tpanic(\"Invalid input: maxItemsTotal, totalWeightQuantity, or numPartitions must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 50.048331943910675}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\treturn getConnectionMetadata()\n\t\t.map(metadata -> {\n\t\t\tif (metadata!= null) {\n\t\t\t\tcontributorMap.put(DatabaseConnectionMetadata.PRODUCT_NAME, metadata.getDatabaseProductName());\n\t\t\t\tcontributorMap.put(DatabaseConnectionMetadata.VERSION, metadata.getDatabaseProductVersion());\n\t\t\t}\n\t\t\treturn contributorMap;\n\t\t})\n\t\t.block();\n}", "CodeBleu_score": 34.16626473780453}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\nMono<ConnectionMetadata> metadataMono = getConnectionMetadata();\nmetadataMono.subscribe(metadata -> {\nif (metadata!= null) {\ncontributorMap.put(DatabaseMetaData.DATABASE_PRODUCT_NAME, metadata.getDatabaseProductName());\ncontributorMap.put(DatabaseMetaData.DATABASE_PRODUCT_VERSION, metadata.getDatabaseProductVersion());\n}\n});\nreturn contributorMap;\n}", "CodeBleu_score": 35.28211270343739}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tConnectionMetadata metadata = getConnectionMetadata().block();\n\tif (metadata!= null) {\n\t\tcontributorMap.put(DatabaseContributor.DB_PRODUCT_NAME, metadata.getDatabaseProductName());\n\t\tcontributorMap.put(DatabaseContributor.DB_VERSION, metadata.getDatabaseProductVersion());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 42.794730595943435}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setAllowRegistration(false);\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t} else {\n\t\tinfo.setAllowRegistration(configMap.getBoolean(\"allowRegistration\"));\n\t\tinfo.setMustVerifyEmailOnRegistration(configMap.getBoolean(\"mustVerifyEmailOnRegistration\"));\n\t}\n}", "CodeBleu_score": 33.34626509748956}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tString mustVerifyEmailOnRegistration = configMap.getString(GlobalInfo.MUST_VERIFY_EMAIL_ON_REGISTRATION);\n\tString allowRegistration = configMap.getString(GlobalInfo.ALLOW_REGISTRATION);\n\tif (mustVerifyEmailOnRegistration!= null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(mustVerifyEmailOnRegistration));\n\t}\n\tif (allowRegistration!= null) {\n\t\tinfo.setAllowRegistration(Boolean.parseBoolean(allowRegistration));\n\t}\n}", "CodeBleu_score": 32.813787958327794}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Get the user settings from the configuration map\n\tString registrationSettings = configMap.getString(REGISTRATION_SETTINGS);\n\tString emailVerificationSettings = configMap.getString(EMAIL_VERIFICATION_SETTINGS);\n\n\t// If the user settings are null, disable registration and email verification on registration\n\tif (registrationSettings == null && emailVerificationSettings == null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\tinfo.setAllowRegistration(false);\n\t}\n\n\t// If the user settings are not null, update the GlobalInfo object with the retrieved settings for registration and email verification\n\telse {\n\t\tinfo.setMustVerifyEmailOnRegistration(registrationSettings.equals(\"true\"));\n\t\tinfo.setAllowRegistration(emailVerificationSettings.equals(\"true\"));\n\t}\n}", "CodeBleu_score": 36.08020397512676}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tif (isRunning()) {\n\t\ttry {\n\t\t\t// Create a new thread group and thread to execute the restart process\n\t\t\tThreadGroup group = new ThreadGroup(this.getName() + \"-restart\");\n\t\t\tThread thread = new Thread(group, new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\t// Set the thread as non-daemon\n\t\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\t\t// Set the application class loader as its context class loader\n\t\t\t\t\tThread.currentThread().setContextClassLoader(getClassLoader());\n\t\t\t\t\t// Start the restart process\n\t\t\t\t\trestartProcess();\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Start the thread\n\t\t\tthread.start();\n\t\t\t// Return a message indicating the restart has begun\n\t\t\treturn \"Restarting application...\";\n\t\t} catch (Exception e) {\n\t\t\tthrow new IllegalStateException(\"Could not initiate application restart\", e);\n\t\t}\n\t} else {\n\t\tthrow new IllegalStateException(\"Application is not running\");\n\t}\n}", "CodeBleu_score": 35.564589644723554}, {"code": "public Object restart(){\n\t\tfinal ThreadGroup group = new ThreadGroup(\"restart\");\n\tfinal Thread thread = new Thread(group, \"restart\") {\n\t\tpublic void run() {\n\t\t\tClassLoader classLoader = getClassLoader();\n\t\t\ttry {\n\t\t\t\tsetContextClassLoader(classLoader);\n\t\t\t\tsetDaemon(false);\n\t\t\t\trestart();\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsetContextClassLoader(null);\n\t\t\t}\n\t\t}\n\t};\n\tthread.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 41.10509645895311}, {"code": "public Object restart(){\n\t\tfinal ThreadGroup group = new ThreadGroup(\"RestartThreadGroup\");\n\tfinal Thread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClassLoader());\n\t\t\t\trestartInternal();\n\t\t\t} finally {\n\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Restarting application\";\n}", "CodeBleu_score": 43.5881977810005}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tJackson2JsonDecoder decoder = new Jackson2JsonDecoder(objectMapper);\n\tJackson2JsonEncoder encoder = new Jackson2JsonEncoder(objectMapper);\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(encoder).jackson2JsonDecoder(decoder);\n}", "CodeBleu_score": 43.59051786888964}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tJackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();\n\tbuilder.indentOutput(true);\n\tJackson2JsonDecoder decoder = new Jackson2JsonDecoder(builder.build());\n\tJackson2JsonEncoder encoder = new Jackson2JsonEncoder(builder.build());\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(decoder).jackson2JsonEncoder(encoder);\n}", "CodeBleu_score": 32.69797885047577}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions\n   .route(GET(\"/console/**\").and(negate(path(\"/console/assets/**\"))).and(accept(MediaType.TEXT_HTML)), this::serveIndex)\n   .andRoute(GET(\"/console/**\").and(negate(path(\"/console/assets/**\"))).and(accept(MediaType.ALL)), this::serveIndex);\n}", "CodeBleu_score": 24.939214387494424}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(GET(\"/console/**\").and(negate(path(\"/console/assets/**\"))).and(accept(MediaType.TEXT_HTML)),\n    this::serveIndex);\n}", "CodeBleu_score": 15.12289502254364}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n.and(RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\"))),\nrequest -> ServerResponse.permanentRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 17.161313537298785}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\").and(negate(RequestPredicates.path(\"/uc/assets/**\"))).and(accept(MediaType.TEXT_HTML))).and(method(HttpMethod.GET)), this::serveIndex);\n}", "CodeBleu_score": 19.180749074309052}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n   .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n   .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))),\nrequest -> {\n    String ucLocation = request.pathVariable(\"ucLocation\");\n    String indexLocation = ucLocation + \"/index.html\";\n    return serveIndex(indexLocation);\n});\n}", "CodeBleu_score": 25.516759023979656}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tr indexLocation = applicationContext.getRequiredProperty(\"uc.index.location\", String.class);\nvar indexPredicate = and(path(UC_INDEX_PATH), not(path(UC_ASSETS_PATH)), accept(TEXT_HTML), negate(isWebSocket()));\nreturn RouterFunctions.route(indexPredicate, serveIndex(indexLocation));\n}", "CodeBleu_score": 32.74976330984727}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tpublic static ReactiveIndexedSessionRepository<MapSession> create() {\n\t\treturn create(new ConcurrentHashMap<>());\n\t}\n}", "CodeBleu_score": 13.944370304950532}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveIndexedSessionRepository<>(new ConcurrentHashMapSessionRepository(), sessionRepositoryProperties.getDefaultMaxInactiveInterval());\n}", "CodeBleu_score": 14.178174112181413}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n}", "CodeBleu_score": 8.115039031832884}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n}", "CodeBleu_score": 8.115039031832884}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t//    DefaultUserDetailService userDetailService = new DefaultUserDetailService();\n//    userDetailService.setUserDetailsService(userService);\n//    userDetailService.setRoleService(roleService);\n//    userDetailService.setEnableTwoFactorAuthentication(haloProperties.isTwoFactorAuthEnabled());\n//    return userDetailService;\n}", "CodeBleu_score": 8.115039031832884}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tString email = getEmail();\nString displayName = getDisplayName();\nString avatarUrl = getAvatarUrl();\nString websiteUrl = getWebsiteUrl();\nComment.CommentOwner.Builder builder = Comment.CommentOwner.newBuilder();\nbuilder.setKind(\"email\");\nif (email!= null) {\nbuilder.setEmail(email);\n}\nelse {\nbuilder.setEmail(\"\");\n}\nbuilder.setDisplayName(displayName);\nif (avatarUrl!= null) {\nbuilder.setAvatarUrl(avatarUrl);\n}\nif (websiteUrl!= null) {\nbuilder.setWebsiteUrl(websiteUrl);\n}\nreturn builder.build();\n}", "CodeBleu_score": 28.676205456443032}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tString displayName = getDisplayName();\nString email = getEmail();\nString avatar = getAvatar();\nString website = getWebsite();\nif (displayName == null) {\ndisplayName = \"\";\n}\nif (email == null) {\nemail = \"\";\n}\nif (avatar == null) {\navatar = \"\";\n}\nif (website == null) {\nwebsite = \"\";\n}\nComment.CommentOwner owner = new Comment.CommentOwner();\nowner.setKind(\"email\");\nowner.setEmail(email);\nowner.setDisplayName(displayName);\nowner.setAvatar(avatar);\nowner.setWebsite(website);\nreturn owner;\n}", "CodeBleu_score": 30.072734141869912}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\ncommentOwner.setKind(\"email\");\ncommentOwner.setEmail(email);\ncommentOwner.setDisplayName(displayName);\ncommentOwner.setAnnotations(new HashMap<String, String>());\ncommentOwner.getAnnotations().put(\"avatar\", avatar);\ncommentOwner.getAnnotations().put(\"website\", website);\nreturn commentOwner;\n}", "CodeBleu_score": 44.37962325105852}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (post\n.getOwner\n.getKind\nequals\n(\nComment\n.\nCommentOwner\n.\nEMAIL\n)\n)\n{\nUser user\n=\nfetch\n(\npost\n.\ngetOwner\n.\ngetName\n)\n;\nreturn\nuser\n.\ngetEmail\n(\n)\n.\nequals\n(\ncommentOwner\n.\ngetName\n(\n)\n)\n;\n}\nelse\n{\nreturn\npost\n.\ngetOwner\n.\ngetName\n(\n)\n.\nequals\n(\ncommentOwner\n.\ngetName\n(\n)\n)\n;\n}\n}", "CodeBleu_score": 24.416373272059182}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = fetch(commentOwner.getName());\n\t\tif (user.getEmail().equals(post.getOwner().getName())) {\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tif (commentOwner.getName().equals(post.getOwner().getName())) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.914346221994172}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = fetch(commentOwner.getName());\n\t\treturn user.getEmail().equals(commentOwner.getName());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 29.38535003812457}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\nString field = getLabelSelector() + \" \" + getFieldSelector();\nif (StringUtils.isNotBlank(getKeyword())) {\nfield += \" AND \" + getKeyword();\n}\nif (StringUtils.isNotBlank(getOwnerName())) {\nfield += \" AND \" + getOwnerIdentity() + \" = '\" + getOwnerName() + \"'\";\n}\n\nlistOptions.setFields(field);\nreturn listOptions;\n}", "CodeBleu_score": 22.431659542936835}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nString field = getLabelSelector() + \" \" + getFieldSelector();\nlistOptions.setFields(field);\nif (StringUtils.isNotBlank(getKeyword())) {\nlistOptions.setQuery(getQuery(field, getKeyword()));\n}\nif (StringUtils.isNotBlank(getOwnerName())) {\nlistOptions.setQuery(getQuery(field, getOwnerName()));\n}\nif (StringUtils.isNotBlank(getOwnerKind())) {\nlistOptions.setQuery(getQuery(field, getOwnerKind()));\n}\nreturn listOptions;\n}", "CodeBleu_score": 24.3047125140189}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nString fieldSelector = getFieldSelector();\nif (fieldSelector!= null) {\nlistOptions.setFields(fieldSelector);\n}\nString keyword = getKeyword();\nif (keyword!= null) {\nlistOptions.setKeyword(keyword);\n}\nString ownerName = getOwnerName();\nif (ownerName!= null) {\nlistOptions.setOwnerName(ownerName);\n}\nString ownerKind = getOwnerKind();\nif (ownerKind!= null) {\nlistOptions.setOwnerKind(ownerKind);\n}\nreturn listOptions;\n}", "CodeBleu_score": 29.524586019672082}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono\n.just(commentName)\n.filter(notNull())\n.flatMap(name -> counterRepository.getCounter(name))\n.map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 33.68939132945792}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n.filter(notNull())\n.flatMap(name -> counterRepository.findById(name))\n.map(counter -> CommentStats.builder()\n.commentName(counter.getName())\n.upvoteCount(counter.getUpvote())\n.build())\n.defaultIfEmpty(CommentStats.builder()\n.commentName(commentName)\n.upvoteCount(0)\n.build());\n}", "CodeBleu_score": 51.72749275054329}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.just(commentName)\n\t\t\t.filter(name ->!name.isEmpty())\n\t\t\t.flatMap(name -> Mono.just(name)\n\t\t\t\t\t.flatMap(this::getUpvote)\n\t\t\t\t\t.map(upvote -> new CommentStats(name, upvote.getUpvote()))\n\t\t\t\t\t.defaultIfEmpty(new CommentStats(name, 0)));\n}", "CodeBleu_score": 34.36892960604349}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t//    Subscriber subscriber = createSubscriber(identity);\n//    if (subscriber == null) {\n//        return;\n//    }\n//\n//    setReasonType(subscriber, \"someone replied to you\");\n//    setExpression(subscriber, \"owner == \" + identity.name());\n//\n//    subscribe(subscriber);\n}", "CodeBleu_score": 1.6078250809239212}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\nif (subscriber == null) {\nreturn;\n}\n\nSubscription.InterestReason reason = new Subscription.InterestReason();\nreason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\nreason.setCondition(new Subscription.InterestReason.Condition());\nreason.getCondition().setOwnerName(identity.name());\n\nSubscription subscription = new Subscription();\nsubscription.setSubscriber(subscriber);\nsubscription.setInterestReason(reason);\n\nSubscription.Response response = subscription.create();\nif (response.isSuccessful()) {\nsubscription.subscribe();\n}\n}", "CodeBleu_score": 51.085960095977214}, {"code": "void subscribeReply(UserIdentity identity){\n\t//        Subscriber subscriber = createSubscriber(identity);\n//        if (subscriber == null) {\n//            return;\n//        }\n//\n//        Subscription.InterestReason reason = new Subscription.InterestReason();\n//        reason.setReasonType(Subscription.ReasonType.SOMEONE_REPLIED_TO_YOU);\n//        reason.setCondition(new Subscription.Condition());\n//        reason.getCondition().setExpression(new Subscription.Expression());\n//        reason.getCondition().getExpression().setOwner(identity.name());\n//        reason.getCondition().getExpression().setOwnerType(Subscription.OwnerType.USER);\n//        subscriber.setInterestReason(reason);\n//\n//        Subscription subscription = new Subscription();\n//        subscription.setSubscriber(subscriber);\n//        subscription.setNotificationType(Subscription.NotificationType.REPLY);\n//        subscription.setNotificationFormat(Subscription.NotificationFormat.JSON);\n//        subscription.setNotificationDelivery(Subscription.NotificationDelivery.PUSH);\n//        subscription.setNotificationDelivery(Subscription.NotificationDelivery.EMAIL);\n//        subscription.setNotificationDelivery(Subscription.NotificationDelivery.SMS);\n//\n//        Subscription.Subscriber result = service.createSubscriber(subscription);\n//        if (result == null) {\n//            return;\n//        }\n//\n//        // Block until the subscription is created.\n//        service.subscribe(result);\n//        service.block();\n    }", "CodeBleu_score": 1.6078250809239212}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\trn Mono.just(comment)\n.map(comment -> {\ncomment.setApproved(true);\ncomment.setApprovedTime(Instant.now());\nreturn comment;\n})\n.flatMap(comment -> client.update(comment));\n}", "CodeBleu_score": 21.48305505347162}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn Mono.defer(() -> client.get(Comment.class, comment.getName())\n   .map(c -> c.setApproved(true)\n       .setApprovedTime(Instant.now()))\n   .flatMap(client::update)\n   .onErrorResume(OptimisticLockingFailureException.class, e -> updateCommentWithRetry(comment.getName(), c -> c.setApproved(true)\n       .setApprovedTime(Instant.now()))));\n}", "CodeBleu_score": 30.152507619252045}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn updateCommentWithRetry(comment.getName(), c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 12.75092186562134}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif ($action instanceof HasRecord && $this->getRecord()) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 55.12084927642296}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 53.85865645256368}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif ($action instanceof HasRecord && $this->getRecord()) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 55.12084927642296}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t", "CodeBleu_score": 2.4193548387096917}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t//...\n    $this->redirect($this->getSuccessRedirect());\n//...\n}", "CodeBleu_score": 13.689907634509876}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$this->evaluate\n$this->redirect\nreturn $this\n}", "CodeBleu_score": 13.027483240828207}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tf (!$record instanceof Model) {\n    return;\n}\n\nif (!method_exists($record, 'tags')) {\n    return;\n}\n\n$tagClassName = config('taggable.tag_model_class');\n$locale = $tagClassName::getLocale();\n\n$tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n    $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n    if ($tag?->isEmpty()?? true) {\n        $tag = $tagClassName::create([\n            'name' => [$locale => $tagName],\n        ]);\n    }\n\n    return $tag;\n})->flatten();\n\n$record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 72.21303022664539}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tf ($record?->hasMethod('tags')?? false) {\n    $tagClassName = $this->getTagClassName();\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty()?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id'));\n}\n}", "CodeBleu_score": 72.6890275795193}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"error dissecting repository path: %w\", err)\n\t}\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(enum.ResourcePipeline)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 49.865609164473675}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(scope, authz.PipelineResourceType)\n\n\t// Perform the authorization check\n\treturn authorizer.Check(ctx, authorizer.Session(), session, resource, permission)\n}", "CodeBleu_score": 47.069925362770434}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, repoName, pipelineIdentifier)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 53.514314066118004}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope, resource, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 45.1339579581752}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope, resource, err := getScopeAndResource(ctx, authorizer, session, parentSpace, name)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 61.41045542545507}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, parentName, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope := &auth.Scope{\n\t\tSpace: parentSpace,\n\t\tName:  parentName,\n\t}\n\n\tresource := &auth.Resource{\n\t\tSpace: scope.Space,\n\t\tName:  scope.Name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 65.67707598492952}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// Check if the source is empty. If so, marshal the provided data and return the result.\n\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\t// Decode the source JSON and disallow unknown fields.\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\t// Encode the data to ensure it conforms to the required format.\n\tencoder := json.NewEncoder(buffer)\n\terr := encoder.Encode(data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result.\n\tresult := buffer.Bytes()\n\tif len(result) > 0 && result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\n\treturn result, nil\n}", "CodeBleu_score": 55.34853929644572}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar payload map[string]any\n\tif err := json.NewDecoder(bytes.NewReader(source)).Decode(&payload); err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode JSON payload: %w\", err)\n\t}\n\n\tif err := json.NewEncoder(bytes.NewBuffer(source)).Encode(data); err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode JSON payload: %w\", err)\n\t}\n\n\treturn bytes.TrimRight(source, \"\n\"), nil\n}", "CodeBleu_score": 44.97797399679834}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the provided data and return the result\n\tif len(source) == 0 {\n\t\t// Marshal the provided data to JSON\n\t\tmarshaledData, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t// Return the marshaled data as a JSON payload\n\t\treturn marshaledData, nil\n\t}\n\n\t// Decode the source JSON into a map[string]interface{}\n\tvar sourceMap map[string]any\n\terr := json.Unmarshal(source, &sourceMap)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Disallow unknown fields in the source map\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\t// Encode the source map to ensure it conforms to the required format\n\tencoder := json.NewEncoder(buffer.New(nil))\n\tencoder.SetEscapeHTML(false)\n\terr = encoder.Encode(sourceMap)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result\n\tsanitizedJSON := buffer.Bytes()\n\tif len(sanitizedJSON) > 0 && sanitizedJSON[len(sanitizedJSON)-1] == '\n' {\n\t\tsanitizedJSON = sanitizedJSON[:len(sanitizedJSON)-1]\n\t}\n\n\treturn sanitizedJSON, nil\n}", "CodeBleu_score": 59.31693326334631}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.FindByRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.NewBadRequest(err)\n\t}\n\n\tif err := c.repoStore.CheckAccess(repo, session, reqPermission); err!= nil {\n\t\treturn nil, usererror.NewBadRequest(err)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.10922010902317}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := c.validateRepoRef(repoRef); err!= nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.repoStore.FindByRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkRepoAccess(session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.41769829748497}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := c.repoStore.ValidateRef(repoRef); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.repoStore.FindByRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 40.83353657139301}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 61.75213330985834}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 61.75213330985834}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizerMap := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizerMap[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn sanitizerMap\n}", "CodeBleu_score": 61.18491462809092}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.attached_to_renderer then\n\t\tself.attached_to_renderer = true\n\t\tself.on_render = on_render\n\t\tself.state.attached_to_renderer = true\n\tend\n\treturn self", "CodeBleu_score": 56.20829723496615}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer ~= nil then\n\t\terror(\"Buffer already attached to renderer\")\n\tend\n\tself.renderer = renderer\n\tself.state.on_render = on_render\n\tself:update_state()\n\treturn self", "CodeBleu_score": 45.24580916559181}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self._attached then\n\t\tself._attached = true\n\t\tself._on_render = on_render\n\t\tself._state.renderer:add_buffer(self)\n\t\tself._state.renderer:update_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 52.02516343282204}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tlocal loop = self.free_textlock:get_loop()\n\tlocal watcher = self.watcher\n\tlocal filename = self.filename\n\tlocal is_valid = self.is_valid\n\tlocal coroutine = loop.coroutine\n\tlocal debug = console.debug\n\tlocal error = console.debug.error\n\tlocal format = string.format\n\tlocal watch_file = self.watcher:watch_file\n\n\tif not is_valid(self) then\n\t\terror(format(\"Buffer %q is not valid\", filename))\n\t\treturn\n\tend\n\n\tif not callback then\n\t\terror(format(\"No callback provided for buffer %q\", filename))\n\t\treturn\n\tend\n\n\tlocal function callback_wrapper()\n\t\tlocal ok, err = coroutine(callback)\n\t\tif not ok then\n\t\t\tdebug(format(\"Error running callback for buffer %q: %q\", filename, err))\n\t\tend\n\tend\n\n\twatch_file(filename, callback_wrapper)", "CodeBleu_score": 37.51651523631383}, {"code": "function Buffer:watch(callback)\n\t\tlocal loop = self.loop\n\tlocal filename = self.filename\n\tlocal watcher = self.watcher\n\n\tif not self:is_valid() then\n\t\treturn\n\tend\n\n\tif not callback then\n\t\treturn\n\tend\n\n\tif not loop.free_textlock then\n\t\treturn\n\tend\n\n\tif not watcher then\n\t\twatcher = loop.free_textlock()\n\t\tself.watcher = watcher\n\tend\n\n\tlocal function watch_callback(err)\n\t\tif err then\n\t\t\tconsole.debug.error(\"Error watching file: %s\", err)\n\t\telse\n\t\t\tcallback(self)\n\t\tend\n\tend\n\n\tif not filename then\n\t\treturn\n\tend\n\n\tself.watcher:watch_file(filename, watch_callback)", "CodeBleu_score": 44.92572895887526}, {"code": "function Buffer:watch(callback)\n\t\tif not self:is_valid() then\n\t\treturn\n\tend\n\n\tif callback == nil then\n\t\treturn\n\tend\n\n\tlocal filename = self.filename\n\tlocal watcher = self.watcher\n\n\tif watcher == nil then\n\t\twatcher = FileWatcher.new()\n\tend\n\n\tif not watcher:watch_file(filename, callback) then\n\t\tconsole.debug.error(\"Error watching file: \".. filename)\n\tend\n\n\tself.watcher = watcher", "CodeBleu_score": 41.48221802522754}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal attr = self.foreground and 'fg' or 'bg'\n\tlocal color = vim.api.nvim_get_hl_by_name(self.name, true)[attr]\n\tif color then\n\t\tself.hex = string.format('#%06x', color)\n\t\treturn self.hex\n\tend\n\n\tlocal hex = self:to_rgb():to_hex()\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 45.7725083223477}, {"code": "function Color:to_hex()\n\t\tlocal hex = self._hex\n\tif hex then return hex end\n\n\tlocal color = self._color\n\tlocal attr = self._attr\n\tlocal hl_group = self._hl_group\n\tlocal hex_str = self._hex_str\n\n\tif not hl_group then\n\t\tlocal result, hl_group = pcall(nvim.api.nvim_get_hl_by_name, attr, true)\n\t\tif not result then return end\n\tend\n\n\tlocal result, highlight = pcall(nvim.api.nvim_get_hl_by_id, hl_group)\n\tif not result then return end\n\n\tlocal hex_str = highlight.foreground\n\tif attr == \"Normal\" then\n\t\thex_str = highlight.background\n\tend\n\n\tif not hex_str then return end\n\n\tself._hex_str = hex_str\n\tself._hex = hex_str:gsub(\"#\", \"0x\")\n\treturn self._hex", "CodeBleu_score": 41.17282354325603}, {"code": "function Color:to_hex()\n\t\tlocal hex = self.hex\n\tif hex then return hex end\n\tlocal fg = self.foreground\n\tlocal bg = self.background\n\tlocal hl_fg = vim.api.nvim_get_hl_by_id(fg)\n\tlocal hl_bg = vim.api.nvim_get_hl_by_id(bg)\n\tlocal hl_fg_name = hl_fg and hl_fg.name\n\tlocal hl_bg_name = hl_bg and hl_bg.name\n\tlocal fg_name = hl_fg_name or self.name\n\tlocal bg_name = hl_bg_name or self.name\n\tlocal fg_hex = hl_fg_name and string.format(\"#%06x\", hl_fg.foreground)\n\tlocal bg_hex = hl_bg_name and string.format(\"#%06x\", hl_bg.background)\n\tlocal hex_fg = fg_hex or fg_name\n\tlocal hex_bg = bg_hex or bg_name\n\thex = string.format(\"%s%s\", hex_fg, hex_bg)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 36.32278458293615}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal n = 1\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.regex(pattern):match_iter(line)\n\t\twhile true do\n\t\t\tlocal match = matches:next()\n\t\t\tif match == nil then break end\n\t\t\tbuffer:add_highlight(hl, n, match.start, match.end)\n\t\tend\n\t\tn = n + 1\n\tend\n\treturn self", "CodeBleu_score": 49.89402697438406}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tfor match in string.gmatch(line, pattern) do\n\t\t\tbuffer:add_highlight(hl, i - 1, match:len() + 1, match:len() + 1)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 39.222346897445476}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.regex(pattern):match_iter(line)\n\t\twhile true do\n\t\t\tlocal match = matches:next()\n\t\t\tif not match then break end\n\t\t\tlocal col_top = match.pos + 1\n\t\t\tlocal col_end = match.pos + #match[0]\n\t\t\tbuffer:add_highlight(hl, match.pos, col_top, col_end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 46.91319596193513}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 100000 + col\n\tvim.api.nvim_buf_set_extmark(buffer, self.ns_id, {row, col}, {text = text, hl_group = hl, virt_text_pos = pos, virt_text_priority = priority}, {})\n\treturn id", "CodeBleu_score": 51.34049952294881}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 100000 + col * 100 + pos\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, self.ns, id, {\n\t\ttext = text,\n\t\thl_group = hl,\n\t\trow = row,\n\t\tcol = col,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 47.61693410051486}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = vim.api.nvim_buf_set_extmark(buffer, self.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_priority = priority\n\t})\n\treturn id", "CodeBleu_score": 52.25344600526432}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal len = string.len(output)\n\tlocal i = 1\n\twhile i <= len do\n\t\tlocal c = string.sub(output, i, i)\n\t\tif c == \"", "CodeBleu_score": 25.767271630923577}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal line_count = 0\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 8.203308403389178}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 10.982358467774171}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher == nil then\n\t\tlocal watcher = Watcher:new()\n\t\tself.watchers[path] = watcher\n\t\twatcher:watch(path, handler)\n\tend\n\treturn watcher", "CodeBleu_score": 38.22750635621055}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher[path] then\n\t\treturn self.watcher[path]\n\tend\n\n\tlocal watcher = vim.loop.new_fs_event()\n\tself.watcher[path] = watcher\n\n\tvim.loop.fs_event_start(watcher, path, handler)\n\n\treturn watcher", "CodeBleu_score": 49.248570097281466}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher == nil then\n\t\tlocal watcher = {\n\t\t\tpath = path,\n\t\t\thandler = handler,\n\t\t\twatcher = vim.loop.new_fs_event(path),\n\t\t\tevents = {\n\t\t\t\t\"create\",\n\t\t\t\t\"modify\",\n\t\t\t\t\"delete\",\n\t\t\t\t\"rename\",\n\t\t\t\t\"move\",\n\t\t\t\t\"access\",\n\t\t\t},\n\t\t}\n\t\twatcher.watcher:start(path, table.unpack(watcher.events))\n\t\tself.watchers[path] = watcher\n\tend\n\treturn watcher", "CodeBleu_score": 40.42598935410574}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks, err = self.git_object:live_hunks(lines)\n\tif err then\n\t\treturn err\n\tend\n\tself:set_signs(hunks)\n\treturn hunks", "CodeBleu_score": 21.04696140347678}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer = self.buffer\n\tlocal git_object = self.git_object\n\tlocal signs_setting = self.signs_setting\n\tlocal namespace = self.namespace\n\tlocal get_lines = self.get_lines\n\tlocal get_sign_ns_id = self.get_sign_ns_id\n\tlocal lines = get_lines(buffer)\n\tlocal hunks = git_object:live_hunks(lines)\n\tif not hunks then\n\t\treturn hunks\n\tend\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal sign_ns_id = get_sign_ns_id(namespace, hunk.type)\n\t\tlocal sign_id = buffer:get_sign(sign_ns_id, hunk.line)\n\t\tif not sign_id then\n\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line - 1)\n\t\t\tif not sign_id then\n\t\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line + 1)\n\t\t\tend\n\t\tend\n\t\tif not sign_id then\n\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line - 2)\n\t\t\tif not sign_id then\n\t\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line + 2)\n\t\t\tend\n\t\tend\n\t\tif not sign_id then\n\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line - 3)\n\t\t\tif not sign_id then\n\t\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line + 3)\n\t\t\tend\n\t\tend\n\t\tif not sign_id then\n\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line - 4)\n\t\t\tif not sign_id then\n\t\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.line + 4)\n\t\t\tend\n\t\tend\n\t\tif not sign_id then\n\t\t\tsign_id = buffer:get_sign(sign_ns_id, hunk.", "CodeBleu_score": 37.84183692002335}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif not hunks then\n\t\treturn hunks\n\tend\n\n\tlocal signs_setting = signs_setting:get()\n\tlocal sign_ns_id = self.namespace:get_sign_ns_id()\n\tlocal sign_types = signs_setting.sign_types\n\tlocal sign_priorities = signs_setting.sign_priorities\n\n\tlocal sign_types_by_priority = {}\n\tfor _, sign_type in ipairs(sign_types) do\n\t\tsign_types_by_priority[sign_type] = {}\n\tend\n\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal sign_type = hunk.type\n\t\tlocal priority = sign_priorities[sign_type]\n\t\tif priority then\n\t\t\tsign_types_by_priority[sign_type][priority] = hunk\n\t\tend\n\tend\n\n\tlocal signs = {}\n\tfor _, sign_type in ipairs(sign_types) do\n\t\tlocal sign_type_signs = signs_by_priority[sign_type]\n\t\tfor priority, hunk in ipairs(sign_type_signs) do\n\t\t\tlocal sign_id = self.namespace:get_sign_id(sign_type, priority)\n\t\t\tlocal line = hunk.line\n\t\t\tlocal sign = {\n\t\t\t\tid = sign_id,\n\t\t\t\tbuffer = self.buffer,\n\t\t\t\tgroup = sign_ns_id,\n\t\t\t\thl_group = sign_type,\n\t\t\t\tpriority = priority,\n\t\t\t\tline = line,\n\t\t\t\ttext = hunk.text,\n\t\t\t\ttext_hl_group = sign_type,\n\t\t\t\tend_line = line + hunk.lines - 1,\n\t\t\t\tend_text = hunk.end_text,\n\t\t\t\tend_text_hl_group = sign_type,\n\t\t\t\tvirt_text = hunk.virt_text,\n\t\t\t\tvirt_text_hl_group = sign_type,\n\t\t\t}\n\t\t\ttable.insert(signs, sign)\n\t\tend\n\tend\n\n\tself.buffer:set_signs(sign_ns_id, signs)\n\treturn hunks", "CodeBleu_score": 49.54855691928765}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = fs.tmpname()\n\tfs.write_file(tmp_file, patch)\n\tlocal result = self.git:stage_hunk_from_patch(tmp_file)\n\tfs.remove_file(tmp_file)\n\treturn result", "CodeBleu_score": 50.96083361430747}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_filename = fs.tmpname()\n\tfs.write_file(tmp_filename, patch)\n\tlocal result, err = self.git:stage_hunk_from_patch(tmp_filename)\n\tfs.remove_file(tmp_filename)\n\treturn result, err", "CodeBleu_score": 54.14231864178165}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tfs.write_file(tmpfile, patch)\n\tlocal result = self.git:stage_hunk(tmpfile)\n\tfs.remove_file(tmpfile)\n\treturn result", "CodeBleu_score": 43.798465638122295}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\nOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\nrequest.addHeader(getOAuthHeader(requestToken));\n\nrequest.addBodyParameter(OAuth.OAUTH_TOKEN, requestToken.getToken());\nrequest.addBodyParameter(OAuth.OAUTH_VERIFIER, verifier.getValue());\n\nResponse response = send(request);\n\nreturn extract(response);\n}", "CodeBleu_score": 51.25493082097336}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString accessTokenEndpoint = config.getAccessTokenEndpoint();\n\tString accessTokenVerb = config.getAccessTokenVerb();\n\tString body = getBody(requestToken, verifier);\n\tString accessTokenHeader = getHttpBasicAuthHeaderValue();\n\n\tOAuthRequest request = new OAuthRequest(accessTokenVerb, accessTokenEndpoint);\n\trequest.addHeader(\"Authorization\", accessTokenHeader);\n\trequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\n\trequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\trequest.addBodyParameter(\"oauth_signature_method\", \"HMAC-SHA1\");\n\trequest.addBodyParameter(\"oauth_signature\", getSignature(request, body));\n\n\tResponse response = send(request);\n\treturn extract(response);\n}", "CodeBleu_score": 44.46548574288715}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString accessTokenEndpoint = getAccessTokenEndpoint();\n\tString accessTokenVerb = getAccessTokenVerb();\n\n\tOAuthRequest request = new OAuthRequest(accessTokenVerb, accessTokenEndpoint);\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\n\trequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n\tResponse response = send(request);\n\treturn extract(response);\n}", "CodeBleu_score": 46.708879305387285}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added \" + host + \" to the authentication cache\");\n}", "CodeBleu_score": 51.539798504130886}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(\"user\", \"password\"));\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n\tSystem.out.println(\"Added \" + host.getHostName() + \" to the authentication cache.\");\n}", "CodeBleu_score": 58.80843130530958}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(\"username\", \"\"));\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added \" + host + \" to the authentication cache\");\n}", "CodeBleu_score": 50.588612287212776}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t/        Jenkins jenkins = Jenkins.getInstance();\n//        if (jenkins == null) {\n//            throw new IllegalStateException(\"Jenkins instance is null\");\n//        }\n//        AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n//        if (avatarCache == null) {\n//            throw new IllegalStateException(\"Avatar cache is null\");\n//        }\n//        String rootUrl = getRootUrlFromRequest(request);\n//        if (rootUrl == null) {\n//            throw new IllegalStateException(\"Root URL is null\");\n//        }\n//        String key = hashKey(source);\n//        if (key == null) {\n//            throw new IllegalStateException(\"Key is null\");\n//        }\n//        String url = rootUrl + \"avatar/\" + key + \"/\" + size;\n//        try {\n//            return URLEncoder.encode(url, \"UTF-8\");\n//        } catch (UnsupportedEncodingException e) {\n//            throw new IllegalStateException(\"UTF-8 encoding is not supported\");\n//        }\n//    }", "CodeBleu_score": 12.101379997062201}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tatarCache cache = Jenkins.getInstance().getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"AvatarCache is null\");\n}\nString key = cache.getDigestOf(source);\nif (key == null) {\nthrow new IllegalStateException(\"Unable to generate cache key for \" + source);\n}\nString rootUrl = getRootUrlFromRequest(request);\nif (rootUrl == null) {\nthrow new IllegalStateException(\"Unable to determine root URL\");\n}\ntry {\nreturn rootUrl + \"/avatars/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"Unable to encode key\", e);\n}\n}", "CodeBleu_score": 48.218138001511846}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t/    Jenkins jenkins = Jenkins.getInstanceOrNull();\n//    AvatarCache cache = AvatarCache.get();\n//    if (jenkins == null || cache == null) {\n//        throw new IllegalStateException(\"AvatarCache is not configured\");\n//    }\n//    String key = getDigestOf(jenkins, cache, source);\n//    String encodedKey = rawEncode(key);\n//    if (encodedKey == null) {\n//        throw new IllegalStateException(\"Unable to encode key\");\n//    }\n//    String url = getRootUrlFromRequest(jenkins) + \"/user/avatar/\" + encodedKey + \"/\" + size;\n//    return url;\n    return null;\n}", "CodeBleu_score": 12.135407616518275}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n    image = scaleImage(image, 128);\n}\nthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 53.40869113839054}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nif (lastModified <= 0) {\nthis.lastModified = System.currentTimeMillis();\n} else {\nthis.lastModified = lastModified;\n}\n}", "CodeBleu_score": 34.98195584728225}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\nimage = scaleImage(image, 128);\n}\nthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified >= 0? lastModified : System.currentTimeMillis();\n}", "CodeBleu_score": 45.74763086435304}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (!future.isDone()) {\n\t\t\treturn true;\n\t\t}\n\t\tObject value = future.get();\n\t\tif (value instanceof ImageCacheEntry) {\n\t\t\tImageCacheEntry entry = (ImageCacheEntry) value;\n\t\t\tif (entry.isDone()) {\n\t\t\t\timage = entry.getImage();\n\t\t\t\tlastModified = entry.getLastModified();\n\t\t\t\tfuture = null;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} catch (Exception e) {\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 46.18091354518792}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null)\n\t\treturn false;\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tImage image = future.get();\n\t\t\tif (image!= null) {\n\t\t\t\tset(image, System.currentTimeMillis(), future);\n\t\t\t\tfuture = null;\n\t\t\t}\n\t\t}\n\t} catch (InterruptedException e) {\n\t\t// ignore\n\t} catch (ExecutionException e) {\n\t\t// ignore\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 34.04506752467686}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tcacheEntry = future.get();\n\t\t\tlastModified = cacheEntry.lastModified;\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\t// ignore\n\t} catch (ExecutionException e) {\n\t\t// ignore\n\t}\n\treturn true;\n}", "CodeBleu_score": 42.568099796340235}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tByteArrayOutputStream bos = new ByteArrayOutputStream();\nif (image!= null) {\nimage.write(bos);\n}\nif (flush) {\nbos.flush();\n}\nrsp.setContentType(\"image/png\");\nrsp.addHeader(\"Cache-Control\", \"max-age=31536000\");\nrsp.addDateHeader(\"Expires\", new Date(System.currentTimeMillis() + 31536000000L));\nrsp.addHeader(\"Content-Length\", Integer.toString(bos.size()));\nrsp.getOutputStream().write(bos.toByteArray());\n}", "CodeBleu_score": 43.37428046004161}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tbyte[] bytes = new byte[0];\nif (node instanceof AbstractBuild) {\nAbstractBuild build = (AbstractBuild) node;\nif (build.getResult() == null) {\nreturn;\n}\nbytes = build.getIconImage().getData();\n}\nif (bytes.length == 0) {\nreturn;\n}\nrsp.setContentType(\"image/png\");\nrsp.addHeader(\"Cache-Control\", \"max-age=3600\");\nrsp.addHeader(\"Content-Length\", Long.toString(bytes.length));\nrsp.addDateHeader(\"Expires\", new Date(System.currentTimeMillis() + 3600000).toString());\nOutputStream out = rsp.getOutputStream();\nout.write(bytes);\nout.flush();\n}", "CodeBleu_score": 39.39406751605333}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\nbyte[] bytes = getBytes();\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nbaos.write(bytes);\nbaos.flush();\n\nif (cache) {\nrsp.addHeader(\"Cache-Control\", \"max-age=31536000\");\n} else {\nrsp.addHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n}\n\nrsp.addHeader(\"Content-Type\", \"image/png\");\nrsp.addDateHeader(\"Expires\", 0);\nrsp.addDateHeader(\"Last-Modified\", new Date().getTime());\nrsp.addDateHeader(\"Date\", new Date().getTime());\nrsp.setContentLength(bytes.length);\n\nOutputStream out = rsp.getOutputStream();\nbaos.writeTo(out);\nout.flush();\n}", "CodeBleu_score": 42.656435374017995}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t      if (enableCache) {\n//            cache = new Cache(teamCacheDuration, repositoriesCacheDuration);\n//        }\n\n        if (authenticator!= null) {\n            authenticator.configureContext(context, null);\n            authenticator.configureBuilder(builder);\n        }\n\n        setClientProxyParams(owner + \".\" + projectKey + \".\" + repositoryName, builder);\n\n        // set up a keep-alive strategy\n        KeepAliveStrategy keepAliveStrategy = new DefaultConnectionKeepAliveStrategy();\n        builder.setKeepAliveStrategy(keepAliveStrategy);\n\n        // set up a connection manager\n        ConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n        builder.setConnectionManager(connectionManager);\n\n        // set up a retry handler\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, false));\n\n        // set up a connection manager shared\n        connectionManager.setDefaultMaxPerRoute(100);\n        connectionManager.setMaxTotal(100);\n\n        // set up a client proxy parameters\n        setClientProxyParams(owner + \".\" + projectKey + \".\" + repositoryName, builder);\n\n        // build the HTTP client\n        client = builder.build();\n    }", "CodeBleu_score": 31.545695437364845}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\n\tif (enableCache) {\n\t\tteamCache = CacheBuilder.newBuilder().maximumSize(1000).expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES).build(new CacheLoader<String, BitbucketCloudTeam>() {\n\t\t\t@Override\n\t\t\tpublic BitbucketCloudTeam load(String teamId) throws Exception {\n\t\t\t\treturn getTeam(teamId);\n\t\t\t}\n\t\t});\n\t\trepositoriesCache = CacheBuilder.newBuilder().maximumSize(1000).expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES).build(new CacheLoader<String, BitbucketCloudRepositories>() {\n\t\t\t@Override\n\t\t\tpublic BitbucketCloudRepositories load(String teamId) throws Exception {\n\t\t\t\treturn getRepositories(teamId);\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 36.626762140854616}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t", "CodeBleu_score": 7.452943353488384}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t   BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getName());\n//    BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getName());\n\n//    if (sourceBranch!= null) {\n//        pullRequest.setSource(new CommitClosure(sourceBranch.getRawNode()));\n//    }\n\n//    if (destinationBranch!= null) {\n//        pullRequest.setDestination(new CommitClosure(destinationBranch.getRawNode()));\n//    }\n}", "CodeBleu_score": 19.366116230469032}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t      BitbucketCloudBranch sourceBranch = getSourceBranch(pullRequest);\n//        BitbucketCloudBranch destinationBranch = getDestinationBranch(pullRequest);\n//        if (sourceBranch!= null) {\n//            setCommitClosure(sourceBranch, pullRequest.getSource(), pullRequest.getSourceBranch());\n//        }\n//        if (destinationBranch!= null) {\n//            setCommitClosure(destinationBranch, pullRequest.getDestination(), pullRequest.getDestinationBranch());\n//        }\n    }", "CodeBleu_score": 6.137371325053965}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tucketCloudBranch sourceBranch = pullRequest.getSourceBranch();\nif (sourceBranch!= null) {\n    String sourceBranchName = sourceBranch.getName();\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestinationBranch();\n    if (destinationBranch!= null) {\n        String destinationBranchName = destinationBranch.getName();\n        if (!sourceBranchName.equals(destinationBranchName)) {\n            BitbucketCloudBranch sourceBranchFromRawNode = getBranch(sourceBranchName);\n            if (sourceBranchFromRawNode!= null) {\n                CommitClosure sourceClosure = new CommitClosure(sourceBranchFromRawNode.getRawNode());\n                pullRequest.setSourceCommitClosure(sourceClosure);\n            }\n            BitbucketCloudBranch destinationBranchFromRawNode = getBranch(destinationBranchName);\n            if (destinationBranchFromRawNode!= null) {\n                CommitClosure destinationClosure = new CommitClosure(destinationBranchFromRawNode.getRawNode());\n                pullRequest.setDestinationCommitClosure(destinationClosure);\n            }\n        }\n    }\n}\n}", "CodeBleu_score": 33.07352341535355}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString url = getRunURL(build);\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins location configuration or URL specified for \" + build);\n\t}\n\treturn new DisplayURLProvider(build).getRootURL(url);\n}", "CodeBleu_score": 43.2611775130504}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = null;\n\tString url = build.getUrl();\n\tif (url!= null) {\n\t\trootURL = url;\n\t} else {\n\t\tJenkins jenkins = Jenkins.getInstance();\n\t\tif (jenkins == null) {\n\t\t\tthrow new IllegalStateException(\"Jenkins is not initialized\");\n\t\t}\n\t\tJenkinsLocationConfiguration config = jenkins.getDescriptorByType(JenkinsLocationConfiguration.class);\n\t\tif (config == null) {\n\t\t\tthrow new IllegalStateException(\"JenkinsLocationConfiguration is not initialized\");\n\t\t}\n\t\trootURL = config.getUrl();\n\t}\n\tDisplayURLProvider provider = DisplayURLProvider.get();\n\tif (provider == null) {\n\t\tthrow new IllegalStateException(\"DisplayURLProvider is not initialized\");\n\t}\n\treturn provider.getRootURL(rootURL);\n}", "CodeBleu_score": 44.32184105697711}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tfinal Jenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is null\");\n\t}\n\tfinal String url = getRunURL(build);\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is null\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build, url);\n}", "CodeBleu_score": 48.637094102100505}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t", "CodeBleu_score": 7.399760459247054}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null) {\nthrow new IllegalArgumentException(\"URL cannot be null\");\n}\nif (url.isEmpty()) {\nthrow new IllegalArgumentException(\"URL cannot be empty\");\n}\nif (!url.startsWith(\"http://\") &&!url.startsWith(\"https://\")) {\nthrow new IllegalArgumentException(\"URL must start with http:// or https://\");\n}\nif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\nthrow new IllegalStateException(\"URL cannot contain 'localhost' or 'unconfigured-jenkins-location'\");\n}\nif (url.contains(\"bitbucket.org\")) {\nif (!url.startsWith(\"https://bitbucket.org\")) {\nthrow new IllegalStateException(\"URL must start with https://bitbucket.org\");\n}\nif (!url.endsWith(\"/rest/api/1.0\")) {\nthrow new IllegalStateException(\"URL must end with /rest/api/1.0\");\n}\n}\nreturn url;\n}", "CodeBleu_score": 38.851679296119144}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null) {\nthrow new IllegalStateException(\"URL cannot be null\");\n}\nif (!url.matches(\"^(http|https)://.+$\")) {\nthrow new IllegalStateException(\"URL must be well-formed\");\n}\nif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\nthrow new IllegalStateException(\"URL cannot use localhost or unconfigured-jenkins-location\");\n}\nif (url.contains(\"bitbucket.org\")) {\nthrow new IllegalStateException(\"URL cannot use bitbucket.org\");\n}\nif (bitbucket.isCloud() &&!url.matches(\"^(http|https)://.+\\\\..+$\")) {\nthrow new IllegalStateException(\"URL must be fully qualified\");\n}\nreturn url;\n}", "CodeBleu_score": 38.897512686743994}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\ttifications: try {\n        BitbucketApi bitbucket = buildBitbucketClient(source, listener);\n        if (notificationsDisabled(source, listener)) {\n            return;\n        }\n\n        SCMRevision revision = build.getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Revision is null\");\n            return;\n        }\n\n        String branch = source.getBranch(build);\n        if (branch == null) {\n            listener.getLogger().println(\"[Bitbucket] Branch is null\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = source.getShareBuildKeyBetweenBranchAndPR();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        createStatus(build, listener, bitbucket, key, hash);\n    } catch (Exception e) {\n        listener.getLogger().println(\"[Bitbucket] Failed to send build status notification\");\n        e.printStackTrace(listener.getLogger());\n    }\n}", "CodeBleu_score": 43.128676256563324}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = branch;\n+    String buildKey = branch; // default to branch name\n     if (shareBuildKeyBetweenBranchAndPR) {\n         buildKey = build.getParent().getFullName() + \"/\" + branch;\n     }\n     return buildKey;\n }", "CodeBleu_score": 40.04369416187325}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = shareBuildKeyBetweenBranchAndPR\n-           ? build.getParent().getFullName() + \"/\" + branch\n-            : build.getParent().getFullName();\n+    String buildKey = shareBuildKeyBetweenBranchAndPR? build.getParent().getFullName() + \"/\" + branch : build.getParent().getFullName();\n     return buildKey;\n }", "CodeBleu_score": 42.91281834486767}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = build.getFullName();\n+    String key = build.getFullDisplayName();\n     if (shareBuildKeyBetweenBranchAndPR) {\n         key += branch;\n     }\n     return key;\n }", "CodeBleu_score": 37.46526794576991}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nget\n(\n)\n.\ngetServerUrl\n(\n)\n;\n}\nif\n(\nserverUrl\n==\nnull\n)\n{\nLOGGER\n.\nlog\n(\nWARNING\n,\n\"\nNo\nserver\nURL\nset\nfor\nBitbucketSCMNavigator\n;\nusing\ndefault\n\"\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nBitbucketSCMNavigator\n.\nTrait\n(\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 8.160125520047805}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\ngetDefaultServerUrl\n(\n)\n;\nlog\n.\nwarn\n(\n\"\nDefault\nBitbucket\nserver\nURL\n\"\n+\nserverUrl\n+\n\"\nwas\nused\nfor\ndeserialization\n\"\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nBitbucketSCMNavigator\n.\nTrait\n(\n)\n;\nlog\n.\nwarn\n(\n\"\nLegacy\nBitbucket\nSCM\nNavigator\ntraits\nwere\nused\nfor\ndeserialization\n\"\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 8.317969756966603}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\nlog\n.\nwarn\n(\n\"\nServer\nURL\nis\nnull\n.\nSetting\nto\n{\n}\n.\n\",\nserverUrl\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nBitbucketSCMNavigator\n.\nBitbucketSCMNavigatorTraits\n(\n)\n;\nlog\n.\nwarn\n(\n\"\nTraits\nare\nnull\n.\nReconstructing\nlegacy\ntraits\n.\n\"\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 9.578546717245898}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\t// Retrieve the Bitbucket repository by name\n\tRepository repository = getRepository(name);\n\n\t// Log the match status\n\tif (isMatch) {\n\t\tlogger.info(\"Proposed repository: \" + repository.getFullName());\n\t\tproposedRepositoryCount++;\n\t} else {\n\t\tlogger.info(\"Ignored repository: \" + repository.getFullName());\n\t}\n}", "CodeBleu_score": 42.25605294697032}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\t// Get the Bitbucket repository by name\n\tBitbucketRepository repository = getRepository(name);\n\n\t// Log a message indicating whether the repository is proposed or ignored based on the isMatch flag\n\tif (isMatch) {\n\t\tgetLogger().info(\"Repository {} is proposed\", repository.getFullName());\n\t} else {\n\t\tgetLogger().info(\"Repository {} is ignored\", repository.getFullName());\n\t}\n\n\t// Increment the count if the repository is proposed\n\tif (isMatch) {\n\t\tproposedCount++;\n\t}\n}", "CodeBleu_score": 52.34788432706448}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tif (isProposed(name)) {\n\t\t\tproposedCount++;\n\t\t} else {\n\t\t\tignoredCount++;\n\t\t}\n\t}\n}", "CodeBleu_score": 17.425057449882964}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tist<RefSpec> refSpecs = new ArrayList<>();\nList<String> branches = new ArrayList<>();\nList<String> tags = new ArrayList<>();\nList<String> commits = new ArrayList<>();\n\nif (marked instanceof GitRevisionImpl) {\n    GitRevisionImpl gitRev = (GitRevisionImpl) marked;\n    branches.addAll(gitRev.getBranches());\n    tags.addAll(gitRev.getTags());\n    commits.addAll(gitRev.getSha1s());\n}\n\nif (rev instanceof GitRevisionImpl) {\n    GitRevisionImpl gitRev = (GitRevisionImpl) rev;\n    branches.addAll(gitRev.getBranches());\n    tags.addAll(gitRev.getTags());\n    commits.addAll(gitRev.getSha1s());\n}\n\nif (branches.isEmpty() && tags.isEmpty() && commits.isEmpty()) {\n    return rev;\n}\n\nif (commits.isEmpty()) {\n    branches.forEach(branch -> {\n        if (!commitExists(git, branch)) {\n            refSpecs.add(new RefSpec(\"+\" + branch + \":refs/remotes/origin/\" + branch));\n        }\n    });\n} else {\n    commits.forEach(commit -> {\n        if (!commitExists(git, commit)) {\n            refSpecs.add(new RefSpec(\"+\" + commit + \":refs/remotes/origin/\" + commit));\n        }\n    });\n}\n\nif (!refSpecs.isEmpty()) {\n    listener.getLogger().println(\"Fetching missing commits from remote repository\");\n    try {\n        git.fetch(scm.getRemote(), refSpecs, null, null);\n    } catch (GitException e) {\n        throw new AbortException(\"Failed to fetch missing commits from remote repository: \" + e.getMessage());\n    }\n}\n\nreturn rev;\n}", "CodeBleu_score": 35.49173983572928}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tRevision decorated = decorateRevision(scm, build, git, listener, marked, rev);\n if (decorated!= null) {\n return decorated;\n }\n return rev;\n }", "CodeBleu_score": 11.361215224846188}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t..\nif (scm.getBranches().isEmpty()) {\nreturn rev;\n}\n\n// Find branches that don't exist locally\nList<String> missingBranches = new ArrayList<>();\nfor (BranchSpec branchSpec : scm.getBranches()) {\nif (!commitExists(git, branchSpec.getSha1String())) {\nmissingBranches.add(branchSpec.getSha1String());\n}\n}\n\nif (missingBranches.isEmpty()) {\nreturn rev;\n}\n\n// Create RefSpecs for the missing branches\nRefSpec refSpec = new RefSpec();\nrefSpec.setSource(String.format(\"+%s:%s\", missingBranches.get(0), missingBranches.get(0)));\nfor (int i = 1; i < missingBranches.size(); i++) {\nrefSpec.setSource(String.format(\"%s +%s:%s\", refSpec.getSource(), missingBranches.get(i), missingBranches.get(i)));\n}\n\n// Fetch missing commits\ntry {\ngit.fetch(scm.getRemote(), refSpec);\n} catch (GitException e) {\nthrow new AbortException(e.getMessage());\n}\n\nreturn rev;\n}", "CodeBleu_score": 33.14222282131538}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\nfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue());\n}\nreturn result;\n}", "CodeBleu_score": 54.130376382851495}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.33753925993029}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<>();\n\tfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.618439112545516}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = resourceStates.map(resourceState => resourceState.resource);\n\tconst resourceUris = await this.getResourceUris(resources);\n\n\tif (resourceUris.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repositories = await this.getRepositories(resourceUris);\n\n\tfor (const repository of repositories) {\n\t\tconst filePaths = await this.getFilePaths(repository, resourceUris);\n\t\tawait this.addFiles(repository, filePaths);\n\t}\n}", "CodeBleu_score": 46.384285688993074}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst selectedResourceStates = resourceStates.filter(state => state.resource);\n\tconst selectedResourceUris = selectedResourceStates.map(state => state.resource.uri);\n\tconst selectedResourcePaths = selectedResourceUris.map(uri => uri.fsPath);\n\n\tconst repositories = await this.getRepositories(selectedResourcePaths);\n\tconst repositorysToProcess = repositories.filter(repository => repository.hasUncommittedChanges);\n\tconst repositorysToAdd = repositories.filter(repository =>!repository.hasUncommittedChanges);\n\n\tif (repositorysToProcess.length > 0) {\n\t\tconst result = await this.processRepositories(repositorysToProcess);\n\t\tif (result === false) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (repositorysToAdd.length > 0) {\n\t\tawait this.addRepositories(repositorysToAdd);\n\t}\n}", "CodeBleu_score": 45.156002202352376}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = await this.getWorkspaceResources(resourceStates);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst workspaceFolders = resources.map(r => r.resource.fsPath);\n\tconst repository = await this.getRepository(workspaceFolders);\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst filePaths = resources.map(r => r.resource.fsPath);\n\ttry {\n\t\tawait repository.add(filePaths);\n\t} catch (e) {\n\t\tthis.logError(e);\n\t\treturn;\n\t}\n\n\tthis.log(localize('added', 'Added {0} to {1}', filePaths.length, repository.rootUri.fsPath));\n}", "CodeBleu_score": 53.50287768366038}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tlet resourceStates = this.resourceStates;\n\tif (resourceStates.length === 0 ||!isUri(resourceStates[0].resourceUri)) {\n\t\tconst scmResource = await this.scmService.getResource(this.scmUri);\n\t\tif (scmResource) {\n\t\t\tresourceStates = [scmResource];\n\t\t}\n\t}\n\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 40.96078403270445}, {"code": "protected async getResourceStates{\n\t\tconst resourceStates: IResourceState[] = [];\n\tconst resourceUri = this.resourceUri;\n\tif (resourceStates.length === 0 && resourceUri &&!isUri(resourceUri)) {\n\t\tconst resource = await this.scmResourceProvider.getResource(resourceUri);\n\t\tif (resource) {\n\t\t\tresourceStates.push(resource);\n\t\t}\n\t}\n\treturn resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 38.3357450729786}, {"code": "protected async getResourceStates{\n\t", "CodeBleu_score": 3.381342689188379}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\tconst activeEditor = window.activeTextEditor;\n\t\tif (activeEditor) {\n\t\t\turi = activeEditor.document.uri;\n\t\t}\n\t}\n\n\tif (uri && uri.scheme ==='svn') {\n\t\turi = Uri.file(uri.fsPath);\n\t}\n\n\tif (uri && uri.scheme === 'file') {\n\t\tconst sourceControlManager = sourceControlManager.getInstance();\n\t\tconst repository = sourceControlManager.getRepository(uri);\n\t\tif (repository) {\n\t\t\treturn repository.getResourceFromFile(uri);\n\t\t}\n\t}\n\n\treturn undefined;\n}", "CodeBleu_score": 41.56641874243477}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t fileUri = uri?? commands.executeCommand<Uri>('vscode.openFolder');\n\tconst resource = fileUri && fileUri.scheme ==='svn'? Uri.file(fromSvnUri(fileUri)) : fileUri;\n\tif (!resource) {\n\t\treturn undefined;\n\t}\n\tconst repository = sourceControlManager.getRepository(resource);\n\treturn repository? repository.getResourceFromFile(resource) : undefined;\n}", "CodeBleu_score": 39.2715130954649}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t fileUri = uri? Uri.file(uri.toString()) : undefined;\n\tconst svnUri = fileUri? Uri.from(fileUri) : undefined;\n\n\tif (svnUri) {\n\t\tconst sourceControlManager = await commands.executeCommand<SourceControlManager>('sourceControlManager');\n\t\tconst repository = await sourceControlManager.getRepository(svnUri);\n\t\treturn repository? repository.getResourceFromFile(fileUri) : undefined;\n\t}\n\n\treturn undefined;\n  }", "CodeBleu_score": 37.00694439810125}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.changeType === SvnChangeType.Modified) {\nlet remoteRepository = this.model.getRemoteRepository(element.path);\nif (remoteRepository) {\nlet remotePath = element.path;\nlet revision = element.revision;\nlet revisionType = SvnRevisionType.Revision;\nif (element.isDeleted) {\nrevisionType = SvnRevisionType.RevisionNumber;\nrevision = element.revisionNumber;\n}\nlet command = this.getDiffCommand(remoteRepository, remotePath, revision, revisionType);\nif (command) {\nlet commandLine = command.commandLine;\nthis.openDiff(commandLine);\n}\n}\n} else if (element.changeType === SvnChangeType.Added) {\nlet remoteRepository = this.model.getRemoteRepository(element.path);\nif (remoteRepository) {\nlet remotePath = element.path;\nlet revision = element.revision;\nlet revisionType = SvnRevisionType.Revision;\nlet command = this.getDiffCommand(remoteRepository, remotePath, revision, revisionType);\nif (command) {\nlet commandLine = command.commandLine;\nthis.openFileRemote(commandLine);\n}\n}\n}\n}", "CodeBleu_score": 34.5443960121595}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tif (element.action === \"A\") {\n\t\treturn await this.openFileRemote(element.path, element.revision);\n\t}\n\tconst remoteRepository = await this.model.getRemoteRepository(element.path);\n\tif (remoteRepository) {\n\t\treturn await this.openDiff(element.path, element.revision, remoteRepository);\n\t}\n}", "CodeBleu_score": 37.22103364403236}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepository = await this.model.getRemoteRepository(element.path);\nif (remoteRepository) {\nconst diffCommand = await remoteRepository.getDiffCommand(element);\nif (diffCommand) {\nawait diffCommand.execute();\n}\n}\n}", "CodeBleu_score": 32.95654804636911}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!isClipboardSupported()) {\n\t\twindow.showErrorMessage(\"Clipboard is not supported.\");\n\t\treturn;\n\t}\n\n\tlet text: string;\n\tif (what === \"message\") {\n\t\ttext = item.message;\n\t} else if (what === \"revision\") {\n\t\ttext = item.revision;\n\t} else {\n\t\tthrow new Error(`Unexpected value for what: ${what}`);\n\t}\n\n\tclipboard.writeText(text);\n\twindow.showInformationMessage(`Commit ${text} copied to clipboard.`);\n}", "CodeBleu_score": 32.620507877267855}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!isClipboardSupported()) {\n\t\twindow.showErrorMessage(`Clipboard is not supported on this platform.`);\n\t\treturn;\n\t}\n\tif (item.type === 'commit') {\n\t\tconst message = what ==='message'? item.message : item.revision;\n\t\tclipboard.writeText(message);\n\t}\n}", "CodeBleu_score": 33.26310914921249}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage(\"Clipboard is not supported\");\n\t\treturn;\n\t}\n\n\tconst commit = item as ICommitTreeItem;\n\tif (commit) {\n\t\tif (what === \"message\") {\n\t\t\tclipboard.writeText(commit.message);\n\t\t} else if (what === \"revision\") {\n\t\t\tclipboard.writeText(commit.revision);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.72944825706413}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\tlong priority = 0L;\n\tGiteaConnectionFactory best = null;\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\tif (factory.canOpen(this)) {\n\t\t\tlong p = factory.priority(this);\n\t\t\tif (best == null || p > priority) {\n\t\t\t\tbest = factory;\n\t\t\t\tpriority = p;\n\t\t\t}\n\t\t}\n\t}\n\tif (best!= null) {\n\t\treturn best.open(this);\n\t}\n\tthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 91.40853531201444}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t/ Load the available GiteaConnectionFactory implementations\nServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n// Set the priority to 0\nlong priority = 0L;\n// Set the best factory to null\nGiteaConnectionFactory best = null;\n// Iterate through the available GiteaConnectionFactory implementations\nfor (GiteaConnectionFactory factory : loader) {\n// Check if the factory can open the connection\nif (factory.canOpen(this)) {\n// Get the priority of the factory\nlong p = factory.priority(this);\n// Check if the factory is the best so far\nif (best == null || p > priority) {\n// Set the best factory to the current factory\nbest = factory;\n// Set the priority to the current factory's priority\npriority = p;\n}\n}\n}\n// Check if a best factory was found\nif (best!= null) {\n// Open the connection using the best factory\nreturn best.open(this);\n}\n// Throw an IOException if no suitable factory was found\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 78.87734291720302}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\tlong priority = 0L;\n\tGiteaConnectionFactory best = null;\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\tif (factory.canOpen(this)) {\n\t\t\tlong p = factory.priority(this);\n\t\t\tif (best == null || p > priority) {\n\t\t\t\tbest = factory;\n\t\t\t\tpriority = p;\n\t\t\t}\n\t\t}\n\t}\n\tif (best!= null) {\n\t\treturn best.open(this);\n\t}\n\tthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 91.40853531201444}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = this;\n\tif (jenkins!= null) {\n\t\tgitea = jenkins.getPluginManager().uberClassLoader;\n\t}\n\treturn gitea;\n}", "CodeBleu_score": 28.736073463813344}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tGitea gitea = new Gitea(this);\nif (jenkins!= null) {\ngitea.setClassLoader(jenkins.getPluginManager().getPlugin(\"gitea\").getPluginClassLoader());\n} else {\ngitea.setClassLoader(this.getClass().getClassLoader());\n}\nreturn gitea;\n}", "CodeBleu_score": 28.73299669647087}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = new Gitea();\n\tgitea.setClassLoader(jenkinsPluginClassLoader());\n\treturn gitea;\n}", "CodeBleu_score": 18.40604790139707}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\nthis.serverUrl = serverUrl;\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = aliasUrl;\nif (displayName == null) {\nthis.displayName = deriveDisplayName(serverUrl);\n}\nif (aliasUrl!= null) {\nthis.aliasUrl = aliasUrl.trim();\n}\n}", "CodeBleu_score": 31.295680736734255}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t//        super(displayName, serverUrl, credentialsId, aliasUrl);\n        this.displayName = displayName;\n        this.serverUrl = serverUrl;\n        this.manageHooks = manageHooks;\n        this.credentialsId = credentialsId;\n        this.aliasUrl = aliasUrl;\n        this.displayName = displayName;\n        this.serverUrl = serverUrl;\n        this.manageHooks = manageHooks;\n        this.credentialsId = credentialsId;\n        this.aliasUrl = aliasUrl;\n    }", "CodeBleu_score": 31.737585510081566}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.defaultIfBlank(displayName, serverUrl);\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = StringUtils.trimToNull(aliasUrl);\n}", "CodeBleu_score": 35.40592111317148}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<String> credentials = new ArrayList<>();\n\tif (hasAdminPermission()) {\n\t\t// Normalizing the server URL\n\t\tString normalizedServerUrl = normalizeServerUrl(serverUrl);\n\n\t\t// Including matching credentials based on the server URL requirements\n\t\tcredentials.addAll(includeMatchingAs(normalizedServerUrl, GiteaAuth.class));\n\t}\n\treturn new ListBoxModel(credentials);\n}", "CodeBleu_score": 25.482824811512216}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<String> credentials = new ArrayList<>();\n\tif (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\tString normalizedUrl = normalizeServerUrl(serverUrl);\n\t\tif (normalizedUrl!= null) {\n\t\t\tfor (GiteaAuth giteaAuth : GiteaAuth.all()) {\n\t\t\t\tif (giteaAuth.getMatcher().matches(normalizedUrl)) {\n\t\t\t\t\tcredentials.add(giteaAuth.getDisplayName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn new StandardListBoxModel().withEmptySelection().withAll(credentials);\n}", "CodeBleu_score": 36.25692785542965}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn new ListBoxModel();\n\t}\n\tList<String> credentials = new ArrayList<>();\n\tif (hasAdminPermission()) {\n\t\tString normalizedUrl = normalizeServerUrl(serverUrl);\n\t\tif (normalizedUrl!= null) {\n\t\t\tcredentials.addAll(includeMatchingAs(normalizedUrl, getMatcher()));\n\t\t}\n\t}\n\treturn new ListBoxModel(credentials.toArray(new String[0]));\n}", "CodeBleu_score": 26.364622884863508}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\ttry {\nURI uri = new URI(serverUrl);\nString scheme = uri.getScheme();\nString host = uri.getHost();\nint port = uri.getPort();\nString path = uri.getPath();\nString query = uri.getQuery();\nString fragment = uri.getFragment();\nString userInfo = uri.getUserInfo();\nString normalizedUrl = uri.normalize().toString();\nif (scheme!= null) {\nnormalizedUrl = normalizedUrl.toLowerCase();\n}\nif (scheme!= null && host!= null) {\nif (scheme.equals(\"http\") && port == 80) {\nnormalizedUrl = normalizedUrl.replace(\"http://\", \"http://\");\n} else if (scheme.equals(\"https\") && port == 443) {\nnormalizedUrl = normalizedUrl.replace(\"https://\", \"https://\");\n}\n}\nif (path!= null && path.length() > 0 && path.charAt(path.length() - 1) == '/') {\nnormalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n}\nif (normalizedUrl.length() == 0) {\nnormalizedUrl = \"/\";\n}\nreturn normalizedUrl;\n} catch (URISyntaxException e) {\nreturn null;\n}\n}", "CodeBleu_score": 44.55503793801244}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme().toLowerCase();\n\t\tif (scheme.equals(\"http\")) {\n\t\t\turi = uri.normalize().toURL().toURI();\n\t\t} else if (scheme.equals(\"https\")) {\n\t\t\turi = uri.normalize().toURL().toURI();\n\t\t} else {\n\t\t\turi = uri.normalize();\n\t\t}\n\t\treturn uri.toString().replaceAll(\"/+$\", \"\");\n\t} catch (URISyntaxException | MalformedURLException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 23.93159958671868}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\ttry {\nURL url = new URL(serverUrl);\nString host = url.getHost().toLowerCase();\nint port = url.getPort();\nif (port == -1) {\nif (url.getProtocol().equals(\"http\")) {\nport = 80;\n} else if (url.getProtocol().equals(\"https\")) {\nport = 443;\n}\n}\nString path = url.getPath();\nif (path!= null && path.length() > 0 && path.charAt(path.length() - 1) == '/') {\npath = path.substring(0, path.length() - 1);\n}\nString query = url.getQuery();\nString fragment = url.getFragment();\nString userInfo = url.getUserInfo();\nString scheme = url.getProtocol();\nreturn scheme + \"://\" + host + (port!= -1? \":\" + port : \"\") + path + (query!= null? \"?\" + query : \"\") + (fragment!= null? \"#\" + fragment : \"\") + (userInfo!= null? \":\" + userInfo : \"\");\n} catch (Exception e) {\nreturn null;\n}\n}", "CodeBleu_score": 33.96662424628586}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tist<GiteaServer> servers = getServers();\nif (servers.isEmpty()) {\nreturn ListBoxModel.create().withEmptyMessage(Jenkins.get().getDescriptorByType(GiteaServer.class).getNoServersMessage());\n}\n\nListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : servers) {\nString displayName = server.getDisplayName();\nif (isBlank(displayName)) {\nitems.add(server.getServerUrl());\n} else {\nitems.add(server.getServerUrl(), displayName);\n}\n}\nreturn items;\n}", "CodeBleu_score": 37.95641003286869}, {"code": "public ListBoxModel getServerItems(){\n\tist<GiteaServer> servers = getServers();\nif (servers.isEmpty()) {\nreturn ListBoxModel.EMPTY;\n}\nListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : servers) {\nif (isBlank(server.getDisplayName())) {\nitems.add(server.getServerUrl());\n} else {\nitems.add(server.getServerUrl(), server.getDisplayName());\n}\n}\nreturn items;\n}", "CodeBleu_score": 32.75338806789455}, {"code": "public ListBoxModel getServerItems(){\n\tList<GiteaServer> servers = getServers();\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : servers) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (isBlank(displayName)) {\n\t\t\titems.add(server.getServerUrl());\n\t\t} else {\n\t\t\titems.add(server.getServerUrl(), displayName);\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 40.864442031246426}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\n\t// Check for admin permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\tthrow new AccessDeniedException();\n\t}\n\n\t// Remove duplicates\n\tservers = new ArrayList<>(new LinkedHashSet<>(servers));\n\n\t// Remove empty URLs\n\tservers.removeIf(server -> server.getUrl() == null || server.getUrl().isBlank());\n\n\t// Update servers\n\tthis.servers = servers;\n\n\t// Save configuration\n\tsave();\n}", "CodeBleu_score": 25.5031432927333}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tthrow new IllegalArgumentException(\"servers cannot be null\");\n\t}\n\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!server.getAdmin().hasPermission(GiteaServer.PERMISSION_ADMIN)) {\n\t\t\tthrow new PermissionException(GiteaServer.PERMISSION_ADMIN);\n\t\t}\n\n\t\tif (server.getUrl() == null || server.getUrl().trim().isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnewServers.add(server);\n\t}\n\n\tif (newServers.size() == 0) {\n\t\tthrow new IllegalArgumentException(\"no servers were provided\");\n\t}\n\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 32.143577207808036}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t", "CodeBleu_score": 2.7391285144891953}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\trverUrl = normalizeServerUrl(serverUrl);\nfor (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nString serverUrl2 = endpoint.getServerUrl();\nif (serverUrl2.equals(serverUrl)) {\niterator.remove();\nsave();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 37.08695535142495}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t (serverUrl == null) {\nreturn false;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nList<GiteaServer> eps = new ArrayList<>(servers);\nfor (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nString endpointUrl = endpoint.getServerUrl();\nif (endpointUrl.equals(serverUrl)) {\niterator.remove();\nbreak;\n}\n}\nif (eps.equals(servers)) {\nreturn false;\n}\nservers = eps;\nsave();\nreturn true;\n}", "CodeBleu_score": 44.80901379991643}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tnkins.get().checkPermission(Jenkins.ADMINISTER);\nserverUrl = normalizeServerUrl(serverUrl);\nList<GiteaServer> servers = getServers();\nfor (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (endpoint.getServerUrl().equals(serverUrl)) {\niterator.remove();\nsave();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 38.97909402570225}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n\n      descriptorElements.add(new DescriptorElement(attributes, type));\n    }\n  }", "CodeBleu_score": 46.056667067262694}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n  String type = el.asType().toString();\n  Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\n  if (attributes.isEmpty()) {\n    // if there are no attributes, add the element's type as a default\n    attributes.put(TYPE, type);\n  }\n\n  descriptorElements.add(new DescriptorElement(type, attributes));\n}\n}", "CodeBleu_score": 44.45863320597446}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      String type = el.asType().toString();\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n  }", "CodeBleu_score": 43.17151930516715}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor\n(TypeElement annotation : annotations) {\nif\n(annotationClass.getName\n.equals\n(annotation.getQualifiedName\n.toString\n(\n)\n.replace\n(\n'\n$\n'\n,\n'\n.\n'\n)\n)\n)\nreturn\nannotation\n;\n}\nreturn\nnull\n;\n}", "CodeBleu_score": 39.33090756071812}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor\n(\nTypeElement\nannotation\n:\nannotations\n)\n{\nif\n(\nannotation\n.\ngetQualifiedName\n(\n)\n.\ntoString\n(\n)\n.\nequals\n(\nannotationClass\n.\ngetName\n(\n)\n.\nreplace\n(\n'\n'\n'\n.\n'\n)\n)\n)\n{\nreturn\nannotation\n;\n}\n}\nreturn\nnull\n;\n}", "CodeBleu_score": 35.37713349030823}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor\n(TypeElement annotation : annotations)  {\nString annotationName = annotation.getQualifiedName\n.replace\n(\n'\n'\n,\n'\n.\n'\n)\n;\nif\n(annotationName\n.\nequals\n(annotationClass\n.\ngetName\n(\n)\n)\n)  {\nreturn\nannotation\n;\n}\n}\nreturn\nnull\n;\n}", "CodeBleu_score": 38.29273324855391}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {}\n    if employee:\n        filters[\"employee\"] = employee\n    if approver_id:\n        filters[\"approver\"] = approver_id\n    if for_approval:\n        filters[\"workflow_state\"] = get_allowed_states_for_workflow(\n            frappe.get_doc(\"Workflow\", \"Leave Application\"), approver_id\n        )\n        filters[\"workflow_state\"] = [\n            state for state in filters[\"workflow_state\"] if state!= \"Open\"\n        ]\n        filters[\"workflow_state\"] = [\"Pending Approval\"] + filters[\"workflow_state\"]\n    else:\n        filters[\"workflow_state\"] = [\"Open\"]\n    filters[\"docstatus\"] = 1\n    filters[\"is_cancelled\"] = 0\n    return filters\n\n", "CodeBleu_score": 32.56312345796434}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {}\n    if approver_id:\n        filters[\"approver\"] = approver_id\n    else:\n        filters[\"employee\"] = employee\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n    if for_approval:\n        filters[\"status\"] = [\"in\", [\"Pending Approval\", \"Submitted\"]]\n        filters[\"docstatus\"] = 1\n    else:\n        filters[\"docstatus\"] = 1\n    return filters\n\n", "CodeBleu_score": 25.523215569152534}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"docstatus\"] = 1\n        filters[\"workflow_state\"] = get_allowed_states_for_workflow(\n            frappe.get_doc(\"Workflow\", \"Leave Application\"), approver_id\n        )\n    else:\n        filters[\"workflow_state\"] = [\"Open\", \"Approved\"]\n\n    filters[\"docstatus\"] = [\"!=\", 2]\n\n    return filters\n\n", "CodeBleu_score": 34.44655740680936}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details.keys():\n        allocated_leave = leave_details[leave_type][\"allocated\"]\n        balance_leave = leave_details[leave_type][\"balance\"]\n        leave_balance_map[leave_type] = {\"allocated\": allocated_leave, \"balance\": balance_leave}\n    return leave_balance_map\n\n", "CodeBleu_score": 44.925639014272534}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail.get(\"allocated\", 0),\n            \"balance\": leave_detail.get(\"balance\", 0),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.634458559020736}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leave_details = leave_details[leave_type]\n        allocated_leaves = allocated_leave_details[\"allocated\"]\n        balance_leaves = allocated_leave_details[\"balance\"]\n        leave_balance_map[leave_type] = {\"allocated\": allocated_leaves, \"balance\": balance_leaves}\n    return leave_balance_map\n\n", "CodeBleu_score": 38.735241137736324}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = db.query(\n        f\"\"\"select\n            date,\n            holiday_name,\n            description,\n            strip_html(description) as strip_html,\n            run\n        from\n            holiday\n        where\n            employee = '{employee}'\n            and run = 'Y'\n            and date not in (select date from weekly_off)\n        order by\n            date\"\"\")\n    holidays = holidays.fetchall()\n    return [\n        {\n            \"date\": holiday[\"date\"],\n            \"holiday_name\": holiday[\"holiday_name\"],\n            \"description\": holiday[\"description\"],\n            \"strip_html\": holiday[\"strip_html\"],\n            \"run\": holiday[\"run\"]\n        }\n        for holiday in holidays\n    ]\n\n", "CodeBleu_score": 23.874785666458838}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = db.select(\n        from_=\"holidays\",\n        where=\"employee = $employee and not (type = 'Weekly Off' and day_of_week = $day_of_week)\",\n        vars={\"employee\": employee, \"day_of_week\": get_day_of_week()},\n    )\n    holidays = [\n        {\n            \"date\": holiday[\"date\"],\n            \"description\": strip_html(holiday[\"description\"]),\n        }\n        for holiday in holidays\n    ]\n    holidays.sort(key=lambda holiday: holiday[\"date\"])\n    return holidays\n\n", "CodeBleu_score": 36.09356806963679}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list: list[dict] = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays: list[dict] = db_select(\n        f\"\"\"select", "CodeBleu_score": 9.501533563206621}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if not get_single_value(\"HR Settings\", \"send_holiday_reminders_in_advance\"):\n        return\n\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 19.326055168001187}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if frappe.db.get_value(\"HR Settings\", None, \"send_weekly_holiday_reminders\") and frappe.db.get_value(\"HR Settings\", None, \"weekly_holiday_reminder_frequency\") == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n", "CodeBleu_score": 27.71187748172053}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.378922231120049}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * self_rating.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self.self_appraisal_score", "CodeBleu_score": 24.135644138442483}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * self_rating.weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self.self_appraisal_score\n", "CodeBleu_score": 23.692993984294045}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * self_rating.weightage / 100\n    self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self_appraisal_score\n\n", "CodeBleu_score": 26.029716619311255}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        final_score_formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        final_score = frappe.safe_eval(final_score_formula, data)\n        self.final_score = flt(final_score, appraisal_cycle_doc.precision)\n    else:\n        self.final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n\n", "CodeBleu_score": 34.14031378737475}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        formula = appraisal_cycle_doc.final_score_formula\n        employee_doc = frappe.get_doc(\"Employee\", self.employee)\n        self.as_dict\n        frappe.get_cached_doc\n        self.precision\n        flt\n        sanitize_expression\n        data.update\n        employee_doc.as_dict\n        frappe.safe_eval\n        appraisal_cycle_doc.as_dict\n        if self.final_score is None:\n            self.final_score = flt(eval(formula, data))\n            self.final_score = round(self.final_score, self.precision)\n        else:\n            self.final_score = flt(eval(formula, data))\n            self.final_score = round(self.final_score, self.precision)\n    else:\n        self.final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n        self.final_score = round(self.final_score, self.precision)\n\n", "CodeBleu_score": 36.28020226338503}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.formula:\n        formula = appraisal_cycle_doc.formula\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        try:\n            formula = sanitize_expression(formula)\n            final_score = flt(frappe.safe_eval(formula, data))\n            self.final_score = final_score\n        except Exception:\n            self.final_score = None\n\n    else:\n        self.final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n\n    self.final_score = flt(self.final_score, appraisal_cycle_doc.precision)\n\n", "CodeBleu_score": 36.5307957677738}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    employee = frappe.get_doc(\"Employee\", self.employee)\n    if not employee.date_of_joining or not employee.date_of_joining < self.attendance_date:\n        frappe.throw(\n            \"Attendance date should be later than the employee's date of joining.\"\n        )\n    if not employee.status == \"On Leave\":\n        leave_application = frappe.db.sql(\n            \"\"\"\n            SELECT name\n            FROM `tabLeave Application`\n            WHERE employee = %s AND status = \"Approved\" AND from_date <= %s AND to_date >= %s\n            \"\"\",\n            (self.employee, self.attendance_date, self.attendance_date),\n            as_list=True,\n        )\n        if leave_application:\n            frappe.throw(\n                \"Attendance date should be earlier than the leave application date.\"\n            )\n\n", "CodeBleu_score": 33.70568263077202}, {"code": "def validate_attendance_date(self)\n\t\n    employee = frappe.get_doc(\"Employee\", self.employee)\n    if not employee.date_of_joining:\n        frappe.throw(_(\"Employee {0} does not have a date of joining.\").format(employee.name))\n    if self.attendance_date < employee.date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining.\"))\n    if self.status == \"On Leave\" and not self.leave_application:\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining.\"))\n    if self.attendance_date > nowdate():\n        frappe.throw(_(\"Attendance date cannot be a future date.\"))\n\n", "CodeBleu_score": 33.6739625784491}, {"code": "def validate_attendance_date(self)\n\t\n    if not self.employee:\n        frappe.throw(_(\"Please select Employee\"))\n    if not self.attendance_date:\n        frappe.throw(_(\"Please select Attendance Date\"))\n    if not frappe.db.exists(\"Employee\", self.employee):\n        frappe.throw(_(\"Employee {0} does not exist\").format(self.employee))\n    employee = frappe.get_doc(\"Employee\", self.employee)\n    if employee.status == \"Active\":\n        if self.attendance_date < employee.date_of_joining:\n            frappe.throw(_(\"Attendance date cannot be earlier than date of joining\"))\n    else:\n        if self.attendance_date < employee.date_of_joining:\n            frappe.throw(_(\"Attendance date cannot be earlier than date of joining\"))\n        if employee.status == \"On Leave\":\n            if frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"from_date\": (\"<\", self.attendance_date), \"to_date\": (\">\", self.attendance_date)}):\n                frappe.throw(_(\"Attendance date cannot be earlier than leave application\"))\n", "CodeBleu_score": 37.28505996864474}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t   duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\"Duplicate Attendance Record for {0} on {1}\").format(\n                self.employee,\n                format_date(self.attendance_date),\n            ),\n            title=_(\"Duplicate Attendance Record\"),\n            help_url=get_link_to_form(\"Attendance\", duplicate),\n        )\n\n", "CodeBleu_score": 36.7674679031245}, {"code": "def validate_duplicate_record(self)\n\t   duplicate = self.get_duplicate_attendance_record()\n\n    if duplicate:\n        frappe.throw(\n            \"Duplicate Attendance Record Found for Employee {0} on {1}. <a href='{2}'>Click here</a> to view the existing attendance record.\".format(\n                self.employee,\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate),\n            )\n        )\n\n", "CodeBleu_score": 34.462766052965}, {"code": "def validate_duplicate_record(self)\n\t   duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        msg = \"Duplicate Attendance Record found for {0} on {1}.\n", "CodeBleu_score": 9.591714280350464}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if not frappe.db.exists(\"Daily Work Summary Group\", self.daily_work_summary_group):\n        frappe.throw(_(\"Daily Work Summary Group {0} does not exist\").format(self.daily_work_summary_group))\n\n    self.get_message_details()\n    self.get_user_emails_from_group()\n    self.send_email()\n    self.db_set(\"status\", \"Sent\")", "CodeBleu_score": 33.56740445871706}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n\n    if not emails:\n        return\n\n    email_content = frappe.render_template(\"templates/email/daily_work_summary.html\", message_details)\n\n    frappe.sendmail(\n        recipients=emails,\n        sender=self.owner,\n        subject=_(\"Daily Work Summary\"),\n        message=email_content,\n    )\n\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 43.03040207419445}, {"code": "def send_summary(self)\n\t\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Please select a group\"))\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Please select at least one email\"))\n\n    if not self.message:\n        frappe.throw(_(\"Please enter a message\"))\n\n    if not self.send_summary_at_midnight:\n        frappe.throw(_(\"Please select a time to send the summary\"))\n\n    if self.status == \"Sent\":\n        frappe.throw(_(\"This Daily Work Summary has already been sent\"))\n\n    if self.send_summary_at_midnight == \"Now\":\n        self.send_summary_now()\n\n    elif self.send_summary_at_midnight == \"Later\":\n        self.send_summary_later()\n\n    elif self.send_summary_at_midnight == \"At\":\n        self.send_summary_at()\n\n    else:\n        frappe.throw(_(\"Please select a time to send the summary\"))\n", "CodeBleu_score": 20.81149066215164}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        if self.job_applicant.interview_round:\n            interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n            if interview_round.interview_type == \"Onsite\":\n                interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                if interview_round.interview_type == \"Onsite\":\n                    job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n                    interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                    interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                    if interview_round.interview_type == \"Onsite\":\n                        interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                        if interview_round.interview_type == \"Onsite\":\n                            if interview_round.interview_type == \"Onsite\":\n                                interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                                if interview_round.interview_type == \"Onsite\":\n                                    interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                                    if interview_round.interview_type == \"Onsite\":\n                                        interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                                        if interview_round.interview_type == \"Onsite\":\n                                            interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                                            if interview_round.interview_type == \"Onsite\":\n                                                interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                                                if interview_round.interview_type == \"Onsite\":\n                                                    interview_round = frappe.get_doc(\"Interview Round\", self.job_applicant.interview_round)\n                                                   ", "CodeBleu_score": 25.983378184161136}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n        if interview_round.interview_round_type == \"Interview\":\n            applicant = frappe.get_doc(\"Job Applicant\", self.name)\n            interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n            if interview_round.job_applicant == applicant.name:\n                existing_interview = frappe.get_list(\n                    \"Interview\",\n                    filters={\n                        \"interview_round\": self.interview_round,\n                        \"job_applicant\": applicant.name,\n                        \"docstatus\": 1,\n                    },\n                    fields=[\"name\"],\n                )\n                if existing_interview:\n                    existing_interview = frappe.get_doc(\"Interview\", existing_interview[0].name)\n                    frappe.throw(\n                        _(\n                            \"Job applicant {0} is already scheduled for interview round {1}. Please check the existing interview record {2} and update the interview status.\".format(\n                                applicant.name,\n                                interview_round.interview_round_type,\n                                existing_interview.name,\n                            )\n                        )\n                    )\n\n", "CodeBleu_score": 38.046853364244484}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        if self.interview_round.interview_type == 'Interview':\n            if self.interview_round.interview_status == 'Interview Scheduled':\n                if self.interview_round.interview_status == 'Interview Scheduled':\n                    if self.interview_round.interview_status == 'Interview Scheduled':\n                        if self.interview_round.interview_status == 'Interview Scheduled':\n                            if self.interview_round.interview_status == 'Interview Scheduled':\n                                if self.interview_round.interview_status == 'Interview Scheduled':\n                                    if self.interview_round.interview_status == 'Interview Scheduled':\n                                        if self.interview_round.interview_status == 'Interview Scheduled':\n                                            if self.interview_round.interview_status == 'Interview Scheduled':\n                                                if self.interview_round.interview_status == 'Interview Scheduled':\n                                                    if self.interview_round.interview_status == 'Interview Scheduled':\n                                                        if self.interview_round.interview_status == 'Interview Scheduled':\n                                                            if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                    if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                        if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                            if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                    if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                        if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                            if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                                if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                                    if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                                        if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                                            if self.interview_round.interview_status == 'Interview Scheduled':\n                                                                                                               ", "CodeBleu_score": 14.578397061459686}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total_rating / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 26.25669003947709}, {"code": "def calculate_average_rating(self)\n\t\n    if len(self.assessments) == 0:\n        self.average_rating = 0\n    else:\n        ratings = []\n        for assessment in self.assessments:\n            if assessment.rating!= None:\n                ratings.append(assessment.rating)\n        self.average_rating = sum(ratings) / len(ratings)\n", "CodeBleu_score": 27.901750397245973}, {"code": "def calculate_average_rating(self)\n\t\n    sum = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            sum += assessment.rating\n    if len(self.assessments) > 0:\n        self.average_rating = sum / len(self.assessments)\n    else:\n        self.average_rating = 0\n", "CodeBleu_score": 32.47574334225058}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_date = doc.interview_date\n    interview.interview_time = doc.interview_time\n    interview.interview_venue = doc.interview_venue\n    interview.interview_type = doc.interview_type\n    interview.interview_status = \"Scheduled\"\n    interview.interview_mode = doc.interview_mode\n    interview.interview_details = doc.interview_details\n    interview.interview_notes = doc.interview_notes\n    interview.interview_location = doc.interview_location\n    interview.interview_location_details = doc.interview_location_details\n    interview.interview_location_type = doc.interview_location_type\n    interview.interview_location_address = doc.interview_location_address\n    interview.interview_location_city = doc.interview_location_city\n    interview.interview_location_state = doc.interview_location_state\n    interview.interview_location_country = doc.interview_location_country\n    interview.interview_location_pincode = doc.interview_location_pincode\n    interview.interview_location_email = doc.interview_location_email\n    interview.interview_location_phone = doc.interview_location_phone\n    interview.interview_location_website = doc.interview_location_website\n    interview.interview_location_fax = doc.interview_location_fax\n    interview.interview_location_contact_person = doc.interview_location_contact_person\n    interview.interview_location_contact_person_email = doc.interview_location_contact_person_email\n    interview.interview_location_contact_person_phone = doc.interview_location_contact_person_phone\n    interview.interview_location_contact_person_mobile = doc.interview_location_contact_person_mobile\n    interview.interview_location_contact_person_designation = doc.interview_location_contact_person_designation", "CodeBleu_score": 28.72541052387234}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.insert()\n    return interview\n", "CodeBleu_score": 48.583608153567205}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interview_date = doc.get(\"interview_date\")\n    interview.interview_time = doc.get(\"interview_time\")\n    interview.interview_venue = doc.get(\"interview_venue\")\n    interview.interview_venue_address = doc.get(\"interview_venue_address\")\n    interview.interview_venue_city = doc.get(\"interview_venue_city\")\n    interview.interview_venue_state = doc.get(\"interview_venue_state\")\n    interview.interview_venue_pincode = doc.get(\"interview_venue_pincode\")\n    interview.interview_venue_country = doc.get(\"interview_venue_country\")\n    interview.interview_venue_contact_number = doc.get(\"interview_venue_contact_number\")\n    interview.interview_venue_email = doc.get(\"interview_venue_email\")\n    interview.interview_venue_website = doc.get(\"interview_venue_website\")\n    interview.interview_venue_description = doc.get(\"interview_venue_description\")\n    interview.interview_venue_map_link = doc.get(\"interview_venue_map_link\")\n    interview.interview_venue_image = doc.get(\"interview_venue_image\")\n    interview.interview_venue_video = doc.get(\"interview_venue_video\")\n    interview.interview_venue_image_caption = doc.get(\"interview_venue_image_caption\")\n    interview.interview_venue_video_caption = doc.get(\"interview_venue_video_caption\")\n    interview.interview_venue_image_link = doc.get(\"interview_venue_image_link\")\n    interview.interview_venue_video_link = doc.get(\"interview_venue_video_link\")\n    interview.interview_venue_image_link_caption = doc.get(\"", "CodeBleu_score": 34.76508746109469}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    query = \"\"\"SELECT job_offer_name FROM job_offer WHERE designation = '%s' AND company = '%s' AND document_status = 1 AND created_at BETWEEN '%s' AND '%s'\"\"\" % (self.designation, self.company, from_date, to_date)\n    return self.frappe.db.sql(query, as_dict=True)\n\n", "CodeBleu_score": 45.794155829367334}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    for job_offer in self.env['hr.job.offer'].search([('date_start', '>=', from_date), ('date_start', '<=', to_date)]):\n        if job_offer.state == 'draft':\n            job_offers.append(job_offer.name)\n    return job_offers\n\n\n\n\n", "CodeBleu_score": 38.937218241943576}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return self.env['hr.job'].search([('date_start', '>=', from_date), ('date_start', '<=', to_date), ('company_id', '=', self.company_id.id), ('state', '=', 'open')])\n", "CodeBleu_score": 39.204331946838586}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        company_filter = \"AND job_offers.company_id = %s\" % company\n    else:\n        company_filter = \"\"\n    if department:\n        department_filter = \"AND job_offers.department_id = %s\" % department\n    else:\n        department_filter = \"\"\n    sql = \"\"\"SELECT count(job_offers.id) AS total_offers, count(accepted_job_offers.id) AS accepted_offers FROM job_offers\n    LEFT JOIN accepted_job_offers ON job_offers.id = accepted_job_offers.job_offer_id\n    WHERE job_offers.docstatus = 1 %s %s\"\"\" % (company_filter, department_filter)\n    cursor = frappe.db.sql(sql, as_dict=True)\n    total_offers = cursor[0].total_offers\n    accepted_offers = cursor[0].accepted_offers\n    if total_offers == 0:\n        return 0\n    else:\n        return round(accepted_offers / total_offers * 100, 2)\n", "CodeBleu_score": 26.36739771860413}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company == None and department == None:\n        query = f\"\"\"SELECT COUNT(*) AS total_offers, COUNT(CASE WHEN docstatus = 1 THEN 1 END) AS accepted_offers FROM job_offer\"\"\"\n    elif company == None and department!= None:\n        query = f\"\"\"SELECT COUNT(*) AS total_offers, COUNT(CASE WHEN docstatus = 1 THEN 1 END) AS accepted_offers FROM job_offer WHERE department = '{department}'\"\"\"\n    elif company!= None and department == None:\n        query = f\"\"\"SELECT COUNT(*) AS total_offers, COUNT(CASE WHEN docstatus = 1 THEN 1 END) AS accepted_offers FROM job_offer WHERE company = '{company}'\"\"\"\n    elif company!= None and department!= None:\n        query = f\"\"\"SELECT COUNT(*) AS total_offers, COUNT(CASE WHEN docstatus = 1 THEN 1 END) AS accepted_offers FROM job_offer WHERE company = '{company}' AND department = '{department}'\"\"\"\n    else:\n        return \"Please enter a valid company or department\"\n\n    df = pd.read_sql(query, con)\n    total_offers = df['total_offers'][0]\n    accepted_offers = df['accepted_offers'][0]\n    acceptance_rate = accepted_offers / total_offers * 100\n    acceptance_rate = round(acceptance_rate, 2)\n    acceptance_rate = str(acceptance_rate) + \"%\"\n    return acceptance_rate\n", "CodeBleu_score": 23.51427965909304}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company == None and department == None:\n        query = f\"\"\"\n        SELECT \n            SUM(CASE WHEN docstatus = 1 THEN 1 ELSE 0 END) as total_offers, \n            SUM(CASE WHEN docstatus = 1 AND accepted = 1 THEN 1 ELSE 0 END) as accepted_offers\n        FROM job_offer\n        \"\"\"\n    elif company == None and department!= None:\n        query = f\"\"\"\n        SELECT \n            SUM(CASE WHEN docstatus = 1 THEN 1 ELSE 0 END) as total_offers, \n            SUM(CASE WHEN docstatus = 1 AND accepted = 1 AND department = '{department}' THEN 1 ELSE 0 END) as accepted_offers\n        FROM job_offer\n        \"\"\"\n    elif company!= None and department == None:\n        query = f\"\"\"\n        SELECT \n            SUM(CASE WHEN docstatus = 1 THEN 1 ELSE 0 END) as total_offers, \n            SUM(CASE WHEN docstatus = 1 AND accepted = 1 AND company = '{company}' THEN 1 ELSE 0 END) as accepted_offers\n        FROM job_offer\n        \"\"\"\n    else:\n        query = f\"\"\"\n        SELECT \n            SUM(CASE WHEN docstatus = 1 THEN 1 ELSE 0 END) as total_offers, \n            SUM(CASE WHEN docstatus = 1 AND accepted = 1 AND company = '{company}' AND department = '{department}' THEN 1 ELSE 0 END) as accepted_offers\n        FROM job_offer\n        \"\"\"\n    query_result = frappe.db.sql(query)\n    total_offers = query_result[0][0]\n    accepted_offers = query_result[0][1]\n    acceptance_rate = accepted_offers / total_offers * 100\n    return acceptance_rate, \"Percent\"\n", "CodeBleu_score": 20.362818397983773}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tif (companyStaffForUpdateDto.getId() == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\n\tfinal CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\n\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\tcompanyStaff.setRole(companyStaffForUpdateDto.getRole());\n\n\tsave(companyStaff);\n\n\treturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 43.51368141134251}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\tif (this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()).isSuccess()) {\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}\n\treturn new ErrorResult(Messages.passwordsNotMatch);\n}", "CodeBleu_score": 39.94102148758165}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElseThrow(() -> new NotFoundException(Messages.staffNotFound));\n\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 47.90982160558768}]}
