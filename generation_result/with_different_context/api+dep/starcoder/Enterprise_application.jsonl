{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    self.ensure_one()\n    Attachment = self.env['ir.attachment']\n    attachment_ids = Attachment.search([('res_model', '=', self._name), ('res_id', '=', self.id), ('id', 'in', args.get('attachment_ids'))])\n    if not attachment_ids:\n        raise UserError(_(\"No attachment selected.\"))\n    for attachment in attachment_ids:\n        if not attachment.check_access_rule('read'):\n            raise UserError(_(\"No read access for %s.\") % attachment.name)\n    attachments = attachment_ids.sudo().read(['name', 'datas', 'mimetype'])\n    if not attachments:\n        raise UserError(_(\"No attachments selected.\"))\n    filename = \"%s_%s.zip\" % (self._name.replace('.', '_'), self.id)\n    content = _build_zip_from_attachments(attachments)\n    headers = _get_zip_headers(content, filename)\n    return request.make_response(content, headers)\n", "CodeBleu_score": 49.387361633088844}, {"code": "def export_zip_documents(self, **args)\n\t\n    self.ensure_one()\n    if not self.env.user.has_group('base.group_erp_manager'):\n        raise AccessError(_(\"Access Denied\"))\n    attachment_ids = self.env['ir.http'].parse_list_as_int(args.get('attachment_ids'))\n    attachments = self.env['ir.attachment'].sudo().browse(attachment_ids)\n    if not attachments:\n        raise UserError(_(\"No attachments selected.\"))\n    for attachment in attachments:\n        if not attachment.res_model or attachment.res_model != self._name or attachment.res_id != self.id:\n            raise UserError(_(\"Invalid attachment.\"))\n        if not attachment.can_access_from(self):\n            raise AccessError(_(\"Access Denied.\"))\n    if not self.env.user.has_group('base.group_erp_manager'):\n        raise AccessError(_(\"Access Denied\"))\n    zip_content = self.env['ir.attachment']._build_zip_from_attachments(attachments)\n    headers = self.env['ir.http']._get_zip_headers(zip_content, 'attachments.zip')\n    return self.env['ir.http'].make_response(zip_content, headers)\n", "CodeBleu_score": 39.333969090433804}, {"code": "def export_zip_documents(self, **args)\n\t\n    self.ensure_one()\n    # get attachment IDs from HTTP request arguments\n    attachment_ids = self.env['ir.attachment'].search([\n        ('res_model', '=', self._name),\n        ('res_id', '=', self.id),\n        ('id', 'in', args.get('attachment_ids', []))\n    ]).ids\n    # verify read access rights and rules for the attachments\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n    # build zip file from attachments' content\n    zip_content = self._build_zip_from_attachments(attachment_ids)\n    # prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(zip_content, self.name_get()[0][1])\n    # return the zip file as an HTTP response\n    return request.make_response(zip_content, headers)\n", "CodeBleu_score": 37.921025188658106}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 24.506143719841095}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    # update the session history with the latest invoice IDs\n    if values.get('invoices'):\n        invoice_ids = [invoice.id for invoice in values['invoices']]\n        if invoice_ids:\n            self._update_session_history('invoice', invoice_ids)\n    return request.render(\"portal.portal_my_invoices\", values)\n", "CodeBleu_score": 44.722281399625686}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    if values.get('invoices'):\n        invoices = values['invoices'](values['pager']['offset'])\n        values.update({\n            'invoices': invoices,\n            'page_name': 'invoice',\n            'pager': self._get_pager(\n                url=values['default_url'],\n                url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n                total=values['pager']['total'],\n                page=page,\n                step=values['pager']['step']\n            ),\n            'date': date_begin,\n            'default_url': values['default_url'],\n            'searchbar_sortings': values['searchbar_sortings'],\n            'sortby': sortby,\n            'searchbar_filters': values['searchbar_filters'],\n            'filterby': filterby,\n        })\n    return request.render(\"portal_account.portal_my_invoices\", values)\n", "CodeBleu_score": 40.99275973336145}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice_sudo.exists():\n        return request.redirect('/my')\n    if not invoice_sudo.check_access_rights('read', raise_exception=False):\n        return request.redirect('/my')\n    if not invoice_sudo.check_access_rule('read', raise_exception=False):\n        return request.redirect('/my')\n    if report_type:\n        report_type = report_type.lower()\n    if report_type not in ('html', 'pdf', 'text', 'qweb-pdf'):\n        report_type = None\n    if report_type:\n        if report_type == 'pdf':\n            report_type = 'qweb-pdf'\n        report_sudo = request.env['ir.actions.report'].sudo().search([('report_name', '=', 'account.report_invoice'), ('report_type', '=', report_type)], limit=1)\n        if report_sudo:\n            report_sudo.check_access_rights('read')\n            report_sudo.check_access_rule('read')\n            if report_type == 'qweb-pdf':\n                report_sudo.render_qweb_pdf(invoice_sudo.ids, data={'model': 'account.move', 'docs': invoice_sudo})\n            else:\n                return request.render('web.qweb', {\n                    'docs': invoice_sudo,\n                    'report_type': report_type,\n                    'report_object': invoice_sudo,\n                    'report_header': report_sudo.print_report_name,\n                })\n        else:\n            return request.render('portal.portal_my_invoice_detail', {\n                'invoice': invoice_sudo,\n                'error': 'Invalid report type.',\n            })\n    if download:\n        if not invoice_sudo.state == 'posted':\n            return request.redirect('/my')\n        attachments = invoice_sudo.attachment_ids\n        if len(attachments) == 1:\n            return request.redirect(attachments[0].url)\n        if len(attachments) > 1:\n            zip_file = _build_zip_from_attachments(attachments)\n            if zip_file:\n                return _get_zip_headers(zip_file)\n            else:\n                return request.redirect('/my')\n    return request.render('portal", "CodeBleu_score": 39.86434330597746}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check access\n    invoice_sudo = self.env['account.move'].sudo().browse(invoice_id)\n    self._document_check_access(invoice_sudo, 'read')\n    # redirect if invoice is not posted\n    if not invoice_sudo.is_posted():\n        return request.redirect('/my')\n    # redirect if report is requested\n    if report_type:\n        return self._show_report(invoice_sudo, report_type)\n    # prepare values for rendering\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    # download PDF\n    if download:\n        return self._download_invoice(invoice_sudo, access_token)\n    # render invoice\n    return request.render(\"account.portal_my_invoice_page\", values)\n\n", "CodeBleu_score": 23.533163901047345}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check access\n    invoice_sudo = self.env['account.move'].sudo().browse(int(invoice_id))\n    self._document_check_access(invoice_sudo, 'read')\n    # check if download\n    if download:\n        # get legal documents\n        documents = invoice_sudo._get_invoice_legal_documents(report_type)\n        # create zip if multiple attachments\n        if len(documents) > 1:\n            zip_stream, zip_filename = self._build_zip_from_attachments(documents)\n            headers = self._get_zip_headers(zip_filename)\n            return self.make_response(zip_stream, headers=headers)\n        # return single file\n        return self.env['ir.http']._serve_file(documents[0], download=download)\n    # render invoice page view\n    return self._invoice_get_page_view_values(invoice_sudo, access_token, report_type=report_type, **kw)\n", "CodeBleu_score": 24.441141311011013}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('sale_ok', '=', True), ('purchase_ok', '=', True)]\n    if company:\n        if company.domain:\n            domain = expression.AND([domain, [('domain', '=', company.domain)]])\n        if company.account_sale_tax_id:\n            domain = expression.AND([domain, [('sale_taxes_id', '=', company.account_sale_tax_id.id)]])\n        if company.account_purchase_tax_id:\n            domain = expression.AND([domain, [('purchase_taxes_id', '=', company.account_purchase_tax_id.id)]])\n    return self.search(domain)\n", "CodeBleu_score": 29.049555265996073}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.user.company_id\n    domain = [('sale_ok', '=', True), ('purchase_ok', '=', True)]\n    if company.partner_id.commercial_partner_id.country_id:\n        domain.append(('company_id', '=', company.id))\n    product_templates = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        product_templates.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        product_templates.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return product_templates\n", "CodeBleu_score": 35.84916216680387}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    if not company:\n        company = self\n    domain = [('sale_ok', '=', True), ('purchase_ok', '=', True)]\n    if company.env.context.get('force_company'):\n        domain = expression.AND([domain, [('company_id', '=', company.env.context['force_company'])]])\n    domain = expression.AND([domain, [('company_id', '=', company.id)]])\n    product_template_obj = self.env['product.template']\n    product_template_ids = product_template_obj.search(domain)\n    if company.account_sale_tax_id:\n        product_template_obj.browse(product_template_ids).write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        product_template_obj.browse(product_template_ids).write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return product_template_ids\n", "CodeBleu_score": 41.10045635992606}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['ir.model.data'].xmlid_to_res_id('base.' + xml_id)\n    if account_id:\n        account = self.env['account.account'].browse(account_id)\n        if account.company_id.id == company.id:\n            return account\n    domain = [('type', '=', account_type), ('company_id', '=', company.id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    if not account:\n        domain = [('company_id', '=', company.id)]\n        account = self.env['account.account'].search(domain, limit=1)\n    return account\n", "CodeBleu_score": 49.70252800671004}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    try:\n        return self.env['res.users'].search([('company_id', '=', company.id), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.type', '=', account_type), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.res_model_id.model', '=', 'account.account'), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.res_id.model', '=', 'account.account'), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.res_id.name', '=', xml_id)], limit=1)\n    except:\n        pass\n    try:\n        return self.env['res.users'].search([('company_id', '=', company.id), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.type', '=', account_type), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.res_model_id.model', '=', 'account.account'), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.res_id.model', '=', 'res.partner'), ('company_id.partner_id.property_account_receivable_id.property_account_receivable_line_ids.account_id.user_type_id.res_id.name', '=', company.partner_id.id)], limit=1)\n    except:\n        pass\n    try:\n        return self.env['res.users'].search([('company_id', '=', company.id", "CodeBleu_score": 45.10692749051597}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    domain = [('company_id', '=', company.id), ('xml_id', '=', xml_id)]\n    account = self.env['account.account'].search(domain)\n    if not account:\n        domain = [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)]\n        account = self.env['account.account'].search(domain)\n    if not account:\n        domain = [('company_id', '=', company.id)]\n        account = self.env['account.account'].search(domain, limit=1)\n    return account\n", "CodeBleu_score": 48.954095076300334}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == \"Current Year Earnings\":\n        company_accounts = self.company.accounts.filter(account_type=\"Current Year Earnings\")\n        if company_accounts.count() > 1:\n            raise ValidationError(\"There can be only one Current Year Earnings account per company.\")", "CodeBleu_score": 22.853160461324855}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == \"Current Year Earnings\":\n        accounts = frappe.db.sql(\"\"\"\n            SELECT\n                company,\n                name\n            FROM\n                `tabAccount`\n            WHERE\n                account_type = %(account_type)s AND\n                company = %(company)s AND\n                is_group = 0 AND\n                name != %(name)s\"\"\", {\n                    \"account_type\": \"Current Year Earnings\",\n                    \"company\": self.company,\n                    \"name\": self.name\n                }, as_dict=True)\n\n        if len(accounts) > 0:\n            msg = _(\"There can only be one Current Year Earnings account per company\")\n            msg += \"\n", "CodeBleu_score": 28.466113615403106}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == 'Current Year Earnings':\n        if self.company:\n            # Get all accounts of type \"Current Year Earnings\" for the same company as the current account\n            accounts = self.company.accounts.filtered(lambda a: a.account_type == 'Current Year Earnings' and a.id != self.id)\n            if accounts:\n                raise ValidationError(_('There is already an account of type \"Current Year Earnings\" defined for this company.'))", "CodeBleu_score": 29.30414432882455}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t, returning the result.\n\n    :param name: The name to search on.\n    :type name: str\n    :param domain: The domain to search within.\n    :type domain: list\n    :param operator: The operator to use for the search.\n    :type operator: str\n    :param limit: The maximum number of records to return.\n    :type limit: int\n    :param order: The order in which to return the results.\n    :type order: str\n    :returns: The search results, as a list of records.\n    :rtype: list\n    \"\"\"\n    if not name and self._context.get('search_default_account'):\n        return self._order_accounts_by_frequency_for_partner(limit, order)\n    if not domain:\n        domain = []\n    if name:\n        domain += [(operator, 'name', name)]\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 17.23997395062678}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t):\n    :param name: string\n    :param domain: list of tuples\n    :param operator: string\n    :param limit: integer\n    :param order: string\n    :return: list of records\n    \"\"\"\n    if not name and self._context.get('active_model') == 'res.partner' and self._context.get('active_id'):\n        return self.env['account.account'].search([('partner_id', '=', self._context['active_id'])], order='frequency desc', limit=limit)\n    if not (name or operator) and not domain:\n        return []\n    if operator not in expression.NEGATIVE_TERM_OPERATORS:\n        operator = expression.OR\n    domain = expression.AND([domain, [(operator, '|', ('name', operator, name), ('code', operator, name))]])\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 9.884664077710351}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t, returning a list of records.\n\n    :param name: The name to search for\n    :type name: str\n    :param domain: The domain to search within\n    :type domain: list\n    :param operator: The operator to use for the search, defaults to 'ilike'\n    :type operator: str, optional\n    :param limit: The maximum number of records to return, defaults to None\n    :type limit: int, optional\n    :param order: The order in which to return the records, defaults to None\n    :type order: str, optional\n    :return: The list of matching records\n    :rtype: list\n    \"\"\"\n    if not name and self._context.get('active_model') == 'res.partner' and self._context.get('active_ids'):\n        order = order or 'account_invoice_line.account_id.partner_id.commercial_partner_id.name'\n        return self.env['account.move.line'].read_group(\n            domain=expression.AND([\n                [('account_id.partner_id', 'in', self._context.get('active_ids'))],\n                [('account_id.reconcile', '=', True)],\n                [('reconciled', '=', False)],\n                [('account_id.internal_type', 'in', ['receivable', 'payable'])],\n                domain or []\n            ]),\n            fields=['account_id'],\n            groupby=['account_id'],\n            orderby=order,\n            lazy=False\n        )[:limit]\n\n    domain = domain or []\n    if name:\n        domain = expression.AND([domain, [(operator, 'ilike', name)]])\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 18.913961321931996}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    # Ensure a single record context\n    invoice_ids = self.env['account.move'].search([('sale_type', '=', 'invoice'), ('id', '=', self.id)])\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'create': False,\n        'edit': False,\n        'delete': False,\n        'search_default_sale_type': 'invoice',\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env['account.move'].default_get(['journal_id'])['journal_id'],\n        'search_default_customer': self.id,\n        'search_default_draft': False,\n        'search_default_cancel': False,\n        'search_default_sent': False,\n        'search_default_invoice_received': False,\n        'search_default_invoice_to_invoice': False,\n        'search_default_in_refund': False,\n        'search_default_out_refund': False,\n        'search_default_out_invoice': True,\n        'search_default_in_invoice': False,\n        'search_default_reconciled': False,\n        'search_default_to_reconcile': False,\n        'search_default_paid': False,\n        'search_default_posted': False,\n        'search_default_waiting_payment': False,\n        'search_default_partially_paid': False,\n        'search_default_no_payment': False,\n        'search_default_date_from': False,\n        'search_default_date_to': False,\n        'search_default_amount_from': False,\n        'search_default_amount_to': False,\n        'search_default_partner_ids': False,\n        'search_default_analytic_account_ids': False,\n        'search_default_analytic_tag_ids': False,\n        'search_default_analytic_tag_ids': False,\n        'search_default_analytic_tag_ids': False,\n        'search_default_analytic_tag_ids': False,\n        'search_default_analytic_tag_ids': False,\n        'search_default_analytic_tag_ids': False,", "CodeBleu_score": 20.71401032207353}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    account_move_lines = self.env['account.move.line']\n    if self.type in ['out_invoice', 'out_refund']:\n        account_move_lines = account_move_lines.search([('sale_line_ids', 'in', self.ids)])\n    elif self.type in ['in_invoice', 'in_refund']:\n        account_move_lines = account_move_lines.search([('purchase_line_ids', 'in', self.ids)])\n    elif self.type == 'out_receipt':\n        account_move_lines = account_move_lines.search([('sale_line_ids', 'in', self.ids)])\n    elif self.type == 'in_receipt':\n        account_move_lines = account_move_lines.search([('purchase_line_ids', 'in', self.ids)])\n    elif self.type == 'entry':\n        account_move_lines = account_move_lines.search([('account_id', '=', self.account_id.id), ('credit', '>', 0), ('amount_currency', '=', 0.0)])\n    else:\n        account_move_lines = account_move_lines.search([('account_id', '=', self.account_id.id), ('debit', '>', 0), ('amount_currency', '=', 0.0)])\n    account_move_lines = account_move_lines.filtered(lambda l: l.reconciled is False)\n    account_move_lines = account_move_lines.filtered(lambda l: l.account_id.reconcile)\n    account_move_lines = account_move_lines.filtered(lambda l: l.account_id.internal_type in ('receivable', 'payable'))\n    account_move_lines = account_move_lines.filtered(lambda l: l.company_id.id == self.company_id.id)\n    account_move_lines = account_move_lines.filtered(lambda l: l.partner_id.id == self.partner_id.id)\n    account_move_lines = account_move_lines.filtered(lambda l: l.account_id.user_type_id.type in ('receivable', 'payable'))\n    account_move_lines = account_move_lines.", "CodeBleu_score": 20.63668649685043}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    if self.env.context.get('active_model') == 'account.move':\n        return {'type': 'ir.actions.act_window',\n                'view_mode': 'tree,form',\n                'res_model': 'account.move',\n                'domain': [('id', 'in', self.env.context['active_ids'])],\n                'context': {'default_type': 'out_invoice',\n                            'default_journal_id': self.env.context.get('default_journal_id'),\n                            'default_partner_id': self.env.context.get('default_partner_id', self.partner_id.id),\n                            'search_default_customer': 1}}\n    if self.env.context.get('active_model') == 'account.analytic.account':\n        return {'type': 'ir.actions.act_window',\n                'view_mode': 'tree,form',\n                'res_model': 'account.move',\n                'domain': [('id', 'in', self.env.context['active_ids'])],\n                'context': {'default_type': 'out_invoice',\n                            'default_journal_id': self.env.context.get('default_journal_id'),\n                            'default_partner_id': self.env.context.get('default_partner_id', self.partner_id.id),\n                            'search_default_customer': 1}}\n    return {'type': 'ir.actions.act_window',\n            'view_mode': 'tree,form',\n            'res_model': 'account.move',\n            'domain': [('id', 'in', self.env['account.move'].search([('partner_id', '=', self.partner_id.id), ('type', '=', 'out_invoice')]).ids)],\n            'context': {'default_type': 'out_invoice',\n                        'default_journal_id': self.env.context.get('default_journal_id'),\n                        'default_partner_id': self.env.context.get('default_partner_id', self.partner_id.id),\n                        'search_default_customer': 1}}\n", "CodeBleu_score": 23.185953546662084}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    account_move_lines = self.env['account.move.line'].search([('purchase_line_id', 'in', self.ids)])\n    move_ids = account_move_lines.mapped('move_id')\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids.ids)]\n    action['context'] = {\n        'create': False,\n        'search_default_purchase_type': self.type,\n        'default_move_type': 'in_invoice',\n    }\n    return action\n", "CodeBleu_score": 29.975832835270644}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = {\n        \"default_type\": \"in_invoice\",\n        \"search_default_purchase\": 1,\n        \"search_default_group\": 1,\n        \"search_default_partner_id\": self.id,\n        \"search_default_date_invoice\": self.create_date,\n        \"search_default_state\": \"posted\",\n    }\n    return action\n", "CodeBleu_score": 21.164118498957617}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    self.ensure_one_company()\n    action = self.env.ref('account.action_move_in_invoice_type')\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'default_journal_id': self.env.ref('account.purchase_journal').id,\n        'search_default_purchase': 1,\n        'default_purchase_id': self.id,\n        'search_default_supplier': 1,\n        'search_default_date_from': self.invoice_date,\n        'search_default_date_to': self.invoice_date,\n        'search_default_partner_ids': self.partner_id.id,\n    }\n    return action\n", "CodeBleu_score": 28.142773143149114}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 93.54198523107293}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.company_id.bank_account_required:\n        if not self.env.user.has_group('account.group_account_invoice'):\n            raise UserError(_('You cannot create a bank account on a customer without having the necessary access rights.'))\n        if self.env.user.company_id != self.company_id and not self.env.user.has_group('account.group_account_invoice'):\n            raise UserError(_('You cannot create a bank account on a customer from another company than your own.'))\n        if self.env['res.users'].has_group('base.group_partner_manager'):\n            return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id)], limit=1)\n        else:\n            return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id), ('company_id', '=', self.company_id.id)], limit=1)\n    return self.env['res.partner.bank']\n\n", "CodeBleu_score": 31.2978466492082}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.company_id.bank_account_required:\n        if not self.company_id.bank_account_code_prefix:\n            raise UserError(_(\"You must define a Bank Account Code Prefix for this company.\"))\n        if self.env.context.get('skip_bank_account_creation'):\n            return self.env['res.partner.bank'].new()\n        return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id)], limit=1)\n    return self.env['res.partner.bank'].new()\n\n", "CodeBleu_score": 30.636886014918158}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self = self.with_context(check_move_validity=False)\n    if self.env.user.company_id.bank_account_required:\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n        ('state', '!=', 'closed')\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account.filtered(lambda x: x.company_id == self.company_id)\n\n", "CodeBleu_score": 60.28451862543272}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # In case of to_check or partial reconciliation, we can't trust the suspense line.\n    if self.foreign_currency_id:\n        return {\n            'transaction_amount': self.amount_currency,\n            'transaction_currency': self.foreign_currency_id,\n            'journal_amount': amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance,\n            'company_currency': self.company_id.currency_id,\n        }\n    # In case of foreign currency, we need to use the exchange rate to compute the amounts\n    else:\n        # Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        # from the journal entry linked to the statement line.\n        # All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n        transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n        # Compute the transaction amount in the foreign currency\n        if transaction_currency == currency:\n            transaction_amount_foreign = transaction_amount\n        else:\n            transaction_amount_foreign = transaction_currency._convert(transaction_amount, currency, self.company_id, self.date)\n        # Compute the journal amount in the foreign currency\n        if journal_currency == currency:\n            journal_amount_foreign = journal_amount\n        else:\n            journal_amount_foreign = journal_currency._convert(journal_amount, currency, self.company_id, self.date)\n        # Compute the company amount in the foreign currency\n        if company_currency == currency:\n            company_amount_foreign = company_amount\n        else:\n            company_amount_foreign = company_currency._convert(company_amount, currency, self.company_id, self.date)\n        return {\n            'transaction_amount': transaction_amount_foreign,\n            'transaction_currency': currency,\n            'journal_amount': journal_amount_foreign,\n            'journal_currency': currency,\n            'company_amount': company_amount_foreign,\n            'company_currency': currency,\n        }\n\n", "CodeBleu_score": 32.43540224560876}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id\n    if currency == company_currency:\n        # In case of foreign currency, we need to compute the amount in the journal currency\n        # and the balance in the company currency.\n        # In case of foreign currency, the journal amount is the balance in the journal currency.\n        # The transaction amount is the balance in the company currency.\n        return {\n            'transaction_amount': balance,\n            'journal_amount': balance,\n            'company_amount': balance,\n        }\n    elif currency == journal_currency:\n        # In case of foreign currency, we need to compute the amount in the company currency\n        # and the balance in the journal currency.\n        # In case of foreign currency, the journal amount is the balance in the journal currency.\n        # The transaction amount is the balance in the company currency.\n        return {\n            'transaction_amount': -amount_currency,\n            'journal_amount': balance,\n            'company_amount': -balance,\n        }\n    else:\n        # In case of foreign currency, we need to compute the amount in the company currency\n        # and the balance in the journal currency.\n        # In case of foreign currency, the journal amount is the balance in the journal currency.\n        # The transaction amount is the balance in the company currency.\n        return {\n            'transaction_amount': -amount_currency,\n            'journal_amount': balance,\n            'company_amount': -balance,\n        }\n\n", "CodeBleu_score": 11.163553579065038}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    company_currency = self.company_currency_id\n    journal_currency = self.journal_id.currency_id\n    if currency == company_currency:\n        # The transaction is in company currency.\n        transaction_amount = amount_currency\n        journal_amount = balance\n        company_amount = balance\n    elif currency == journal_currency:\n        # The transaction is in journal currency.\n        transaction_amount = amount_currency\n        journal_amount = amount_currency\n        company_amount = balance\n    else:\n        # The transaction is in an other currency.\n        transaction_amount = amount_currency / currency.rate\n        journal_amount = balance / currency.rate\n        company_amount = balance / currency.rate\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n", "CodeBleu_score": 17.244502188584306}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids += journal._create_outbound_payment_method_line_commands(method)\n        journal.outbound_payment_method_line_ids = sorted(journal.outbound_payment_method_line_ids, key=lambda l: l.sequence)\n\n", "CodeBleu_score": 40.71059632202918}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal._default_outbound_payment_methods.clear()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods:\n                journal._default_outbound_payment_methods |= method.create_payment_method_line()\n        journal.outbound_payment_method_line_ids = journal._default_outbound_payment_methods\n", "CodeBleu_score": 34.07218964540339}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_line_ids.create(journal._default_outbound_payment_methods())\n", "CodeBleu_score": 29.103776363106775}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date:\n            if not move.invoice_date:\n                move.date = fields.Date.context_today(move)\n            else:\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        if move.date != fields.Date.context_today(move) and move.date > fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n        if move.date != move.invoice_date and move.date > move.invoice_date:\n            move.date = move.invoice_date\n", "CodeBleu_score": 42.7969330259383}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date:\n            continue\n        if move.invoice_date:\n            if not move.is_sale_document():\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            else:\n                move.date = move.invoice_date\n        else:\n            move.date = fields.Date.context_today(move)\n\n", "CodeBleu_score": 33.005303314966085}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date:\n            if not move.invoice_date:\n                move.date = fields.Date.context_today(self)\n            else:\n                if not move.is_sale_document(include_receipts=True):\n                    has_tax = move._affect_tax_report()\n                    move.date = move._get_accounting_date(move.invoice_date, has_tax)\n                    if move.date != move.date_maturity:\n                        move.date_maturity = move.date\n                else:\n                    move.date = move.invoice_date\n        if move.date != move.date_maturity:\n            move.date_maturity = move.date\n", "CodeBleu_score": 42.01345568965868}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_invoice():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        elif self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 31.397147634478657}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        elif self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id.property_customer_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_customer_payment_term_id.id\n        elif self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n", "CodeBleu_score": 27.160630234878564}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document(include_receipts=True) and self.partner_id.property_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_payment_term.id\n    elif self.is_purchase_document(include_receipts=True) and self.partner_id.property_supplier_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term.id\n    else:\n        self.invoice_payment_term_id = False\n", "CodeBleu_score": 39.14224046005316}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    if self.company_id:\n        company = self.company_id\n    else:\n        company = self.env.company\n    if self.country_id:\n        country = self.country_id\n    else:\n        country = self.env.company.country_id\n    if self.tax_group_id:\n        return\n    if company.tax_calculation_rounding_method == 'round_globally':\n        return\n    if self.type_tax_use == 'sale':\n        tax_group_domain = [('country_id', '=', country.id), ('company_id', '=', company.id), ('type_tax_use', '=', 'sale')]\n    else:\n        tax_group_domain = [('country_id', '=', country.id), ('company_id', '=', company.id), ('type_tax_use', '=', 'purchase')]\n    tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n    if tax_group:\n        self.tax_group_id = tax_group.id\n        return\n    if company.tax_calculation_rounding_method == 'round_per_line':\n        return\n    if self.type_tax_use == 'sale':\n        tax_group_domain = [('company_id', '=', company.id), ('type_tax_use', '=', 'sale')]\n    else:\n        tax_group_domain = [('company_id', '=', company.id), ('type_tax_use', '=', 'purchase')]\n    tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n    if tax_group:\n        self.tax_group_id = tax_group.id\n        return\n    raise UserError(_(\"No tax group found for this tax.\"))\n", "CodeBleu_score": 29.15220160308285}, {"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    tax_group_id = False\n    if self.company_id and self.country_id:\n        tax_group_domain = [\n            ('country_id', '=', self.country_id.id),\n            ('company_id', '=', self.company_id.id),\n        ]\n        if self.tax_group_id:\n            tax_group_domain += [('id', '!=', self.tax_group_id.id)]\n        tax_group_id = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n    if not tax_group_id:\n        if self.company_id:\n            tax_group_domain = [\n                ('company_id', '=', self.company_id.id),\n            ]\n            if self.tax_group_id:\n                tax_group_domain += [('id', '!=', self.tax_group_id.id)]\n            tax_group_id = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n    return tax_group_id\n", "CodeBleu_score": 31.20976260718707}, {"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    self.tax_group_id = False\n    tax_group_obj = self.env['account.tax.group']\n    tax_group_ids = tax_group_obj.search([('company_id', '=', self.company_id.id), ('country_id', '=', self.country_id.id), ('name', '=', self.name)])\n    if not tax_group_ids:\n        tax_group_ids = tax_group_obj.search([('company_id', '=', self.company_id.id), ('country_id', '=', False), ('name', '=', self.name)])\n    if tax_group_ids:\n        self.tax_group_id = tax_group_ids[0].id\n", "CodeBleu_score": 23.119633268318346}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session.\n    self.get(url)\n    # Get the CSRF token from the session cookie.\n    csrf_token = self.cookies['csrftoken']\n    # Prepare the POST request data.\n    data = {\n        'csrfmiddlewaretoken': csrf_token,\n        'login': login,\n        'password': password,\n        'database': db,\n        'force': force\n    }\n    # Read the module file.\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n    # Prepare the POST request.\n    req = requests.Request(\n        'POST',\n        urljoin(url, 'base_import_module/login_upload'),\n        files={'module_file': module_data},\n        data=data\n    )\n    # Send the POST request and get the response.\n    prepped = self.session.prepare_request(req)\n    resp = self.session.send(prepped)\n    # Raise an exception if the server responded with an error.\n    resp.raise_for_status()\n    # Return the response text.\n    return resp.text\n", "CodeBleu_score": 50.472444526817384}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.set_db(db)\n    data = {'login': login, 'password': password, 'force': force}\n    files = {'file': open(module_file, 'rb')}\n    response = requests.post(url + '/base_import_module/login_upload', data=data, files=files)\n    response.raise_for_status()\n    return response.text\n", "CodeBleu_score": 29.79934137728042}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set database in session\n    self.session.get(url + '/login', params={'login': login, 'password': password, 'db': db})\n    # Get module name from module file\n    module_name = module_file.split('/')[-1].split('.')[0]\n    # Prepare POST request data\n    data = {\n        'module_name': module_name,\n        'force': force\n    }\n    files = {\n        'file': open(module_file, 'rb')\n    }\n    # Upload module file\n    response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n    # Check if server has the required module installed\n    if 'The module is already installed' in response.text:\n        raise Exception('Module is already installed')\n    # Check if server has the required module version\n    if 'The module version is outdated' in response.text:\n        raise Exception('Module version is outdated')\n    # Return server's response\n    return response.text\n", "CodeBleu_score": 46.31126403014016}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Set up the database registry and cursor\n    new_db_name = \"new_db_name\"\n    overwrite_existing = False\n    db_registry = Registry(new_db_name)\n    db_cursor = db_registry.cursor()\n    # Create a new TranslationImporter\n    translation_importer = TranslationImporter(db_cursor)\n    # Load translation files\n    translation_importer.load_file(\"module_name\", \"path_to_file\", \"language_code\")\n    # Save translations\n    translation_importer.save(overwrite_existing)\n\n", "CodeBleu_score": 28.249217825573623}, {"code": "def import_translation()\n\t\n    # Retrieve configuration settings.\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    # Create a new database registry.\n    registry = odoo.modules.registry.Registry.new(db_name)\n    # Use a cursor to initialize a TranslationImporter.\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, overwrite=overwrite)\n        # Load translation files based on the specified configuration.\n        translation_importer.load_file(config.get('file'))\n        # Save the translations.\n        translation_importer.save()\n", "CodeBleu_score": 51.43708858024456}, {"code": "def import_translation()\n\t\n    config = ConfigParser.ConfigParser()\n    config.read(os.path.join(os.path.dirname(__file__), 'config.ini'))\n    db_name = config.get('general', 'db_name')\n    overwrite = config.getboolean('general', 'overwrite')\n    registry = openerp.modules.registry.RegistryManager.new(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, overwrite)\n        translation_importer.save()\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_FR.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_BE.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_CH.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_LU.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_MC.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_ML.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_RE.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_YT.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_GF.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_GP.csv'))\n        translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_MQ.csv'))\n        translation_importer.load_", "CodeBleu_score": 44.19446409340138}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info)\n    node.depth = self.depth + 1\n    if node not in self.children:\n        self.children.append(node)\n    if hasattr(self, \"parent\"):\n        if hasattr(self.parent, \"name\"):\n            node.parent_name = self.parent.name\n        if hasattr(self.parent, \"info\"):\n            node.parent_info = self.parent.info\n        if hasattr(self.parent, \"depth\"):\n            node.parent_depth = self.parent.depth\n        if hasattr(self.parent, \"children\"):\n            node.parent_children = self.parent.children\n    self.children.sort(key=lambda x: x.name)\n    return node\n", "CodeBleu_score": 48.88000862580083}, {"code": "def add_child(self, name, info)\n\t\n    if not hasattr(self, 'children'):\n        self.children = []\n    if not hasattr(self, 'depth'):\n        self.depth = 0\n    if not hasattr(self, 'parent'):\n        self.parent = None\n    if not hasattr(self, 'name'):\n        self.name = ''\n    if not hasattr(self, 'info'):\n        self.info = ''\n    if not hasattr(self, 'hasattr'):\n        self.hasattr = []\n    if not hasattr(self, 'setattr'):\n        self.setattr = []\n    if not hasattr(self, 'sort'):\n        self.sort = []\n    if name not in [child.name for child in self.children]:\n        new_node = Node(name, info, self.depth + 1)\n        new_node.parent = self\n        self.children.append(new_node)\n        self.children.sort(key=lambda x: x.name)\n        return new_node\n    else:\n        return None\n", "CodeBleu_score": 34.61648747344608}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        child = Node(name, info)\n        child.depth = self.depth + 1\n        self.children[name] = child\n        self.children_list.append(child)\n        self.children_list.sort(key=lambda x: x.name)\n        if hasattr(self, 'parent'):\n            child.parent = self.parent\n            child.parent_name = self.parent_name\n            child.parent_id = self.parent_id\n            child.parent_type = self.parent_type\n            child.parent_info = self.parent_info\n            child.parent_depth = self.parent_depth\n            child.parent_attr = self.parent_attr\n            child.parent_attr_id = self.parent_attr_id\n            child.parent_attr_type = self.parent_attr_type\n            child.parent_attr_info = self.parent_attr_info\n            child.parent_attr_depth = self.parent_attr_depth\n            child.parent_attr_attr = self.parent_attr_attr\n            child.parent_attr_attr_id = self.parent_attr_attr_id\n            child.parent_attr_attr_type = self.parent_attr_attr_type\n            child.parent_attr_attr_info = self.parent_attr_attr_info\n            child.parent_attr_attr_depth = self.parent_attr_attr_depth\n        return child\n    else:\n        return self.children[name]\n", "CodeBleu_score": 33.94797130834829}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    result[\"account\"] = account\n    result[\"dates\"] = dates\n    result[\"balances\"] = [0] * len(dates)\n    for entry in gl_entries:\n        if entry.account == account:\n            result[\"balances\"][entry.date - dates[0]] += entry.debit - entry.credit\n    if account.root_type not in (\"Asset\", \"Expense\"):\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n    if account.root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        result[\"accumulated_values\"] = [0] * len(dates)\n        for i in range(1, len(dates)):\n            result[\"accumulated_values\"][i] = result[\"accumulated_values\"][i - 1] + result[\"balances\"][i]\n    return result\n", "CodeBleu_score": 31.338092123536853}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # Initialize the result with the dates and zeros for balances.\n    result = []\n    for date in dates:\n        result.append({\n            \"date\": date,\n            \"opening_balance\": 0.0,\n            \"debit\": 0.0,\n            \"credit\": 0.0,\n            \"closing_balance\": 0.0\n        })\n\n    # Determine the root type of the account.\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    # Iterate through the general ledger entries.\n    for entry in gl_entries:\n        # If the entry's account is the account specified in the function call, update the balance for the entry's date.\n        if entry.account == account:\n            # Get the index of the entry's date in the result.\n            index = dates.index(entry.posting_date)\n\n            # If the entry is a debit, add the entry's debit amount to the balance.\n            if entry.debit > 0:\n                result[index][\"debit\"] += entry.debit\n\n            # If the entry is a credit, add the entry's credit amount to the balance.\n            elif entry.credit > 0:\n                result[index][\"credit\"] += entry.credit\n\n            # If the entry is a debit, add the entry's debit amount to the balance.\n            if entry.debit < 0:\n                result[index][\"debit\"] += entry.debit\n\n            # If the entry is a credit, add the entry's credit amount to the balance.\n            elif entry.credit < 0:\n                result[index][\"credit\"] += entry.credit\n\n    # Iterate through the result, updating the closing balance for each date.\n    for i in range(1, len(result)):\n        result[i][\"opening_balance\"] = result[i - 1][\"closing_balance\"]\n        result[i][\"closing_balance\"] = result[i - 1][\"closing_balance\"] + result[i][\"debit\"] - result[i][\"credit\"]\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances.\n    if root_type not in (\"Asset\", \"Expense\"):\n        for entry in result:\n            entry[\"opening_balance\"] *= -1\n            entry[\"debit\"] *= -1\n            entry[\"credit\"] *= -1\n            entry[\"closing_balance\"] *= -1\n\n    # If the root type is \"", "CodeBleu_score": 27.4321252043704}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = frappe._dict()\n    result.update({\n        \"account\": account,\n        \"account_name\": account.account_name,\n        \"account_type\": account.account_type,\n        \"root_type\": account.root_type,\n        \"is_group\": account.is_group,\n        \"parent_account\": account.parent_account,\n        \"report_date\": dates[-1],\n        \"total_debit\": 0.0,\n        \"total_credit\": 0.0,\n        \"balance\": 0.0,\n        \"account_currency\": account.account_currency,\n        \"account_balance\": 0.0,\n        \"account_balance_in_account_currency\": 0.0,\n        \"account_balance_in_company_currency\": 0.0,\n        \"has_value\": False,\n        \"opening_debit\": 0.0,\n        \"opening_credit\": 0.0,\n        \"opening_balance\": 0.0,\n        \"closing_debit\": 0.0,\n        \"closing_credit\": 0.0,\n        \"closing_balance\": 0.0,\n        \"values\": []\n    })\n\n    if result.root_type in [\"Asset\", \"Expense\"]:\n        sign = 1\n    else:\n        sign = -1\n\n    for date in dates:\n        result.values.append(frappe._dict({\n            \"date\": date,\n            \"debit\": 0.0,\n            \"credit\": 0.0,\n            \"balance\": 0.0,\n            \"balance_in_account_currency\": 0.0,\n            \"balance_in_company_currency\": 0.0\n        }))\n\n    for entry in gl_entries:\n        if entry.posting_date < dates[0] or entry.posting_date > dates[-1]:\n            continue\n\n        result.has_value = True\n\n        # accumulate balance\n        if result.root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            result.balance += entry.debit - entry.credit\n        else:\n            result.balance -= entry.debit - entry.credit\n\n        # update balance\n        for i, date in enumerate(dates):\n            if entry.posting_date <= date:\n                result.values[i].debit += entry.debit\n                result.values[i].credit += entry.credit\n                result.", "CodeBleu_score": 19.571678188317815}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not self.flags.ignore_mandatory:\n        if self.doctype == \"Account\":\n            if self.account_type in [\"Receivable\", \"Payable\"] and self.doctype == \"Account\":\n                if not self.receivable_payable_account:\n                    frappe.throw(_(\"Receivable/Payable account is mandatory for Receivable/Payable type account.\"))\n                else:\n                    if self.get_doc_before_save():\n                        if self.get_doc_before_save().account_type in [\"Receivable\", \"Payable\"]:\n                            if self.get_doc_before_save().account_type != self.account_type:\n                                if self.check_gl_entries():\n                                    frappe.msgprint(_(\"Warning: Changing the account type from Receivable/Payable to a non-receivable/payable type will result in loss of existing transactions. Please ensure that all the transactions against this account are fetched into the General Ledger before changing the account type. You can use the 'Get Items from' button to fetch the transactions.\"), title=_(\"Warning\"), indicator=\"orange\")\n                                    self.add_comment(\"Warning\", _(\"Warning: Changing the account type from Receivable/Payable to a non-receivable/payable type will result in loss of existing transactions. Please ensure that all the transactions against this account are fetched into the General Ledger before changing the account type. You can use the 'Get Items from' button to fetch the transactions.\"))\n", "CodeBleu_score": 22.151164206775515}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.doctype == \"Account\" and self.is_group:\n        return\n\n    if not self.flags.ignore_mandatory:\n        if self.doctype == \"Account\" and self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.account_type_changed():\n                if self.check_if_gl_entries_exist():\n                    frappe.msgprint(\n                        _(\n                            \"Warning: Account type change will affect existing General Ledger Entries. Please check the Accounts report for details.\"\n                        ),\n                        title=\"Warning\",\n                        indicator=\"orange\",\n                    )\n                    self.add_comment(\n                        _(\n                            \"Account type change will affect existing General Ledger Entries. Please check the Accounts report for details.\"\n                        )\n                    )\n\n    if self.doctype == \"Account\" and self.account_type == \"Tax\":\n        self.set_tax_template()\n\n", "CodeBleu_score": 22.744235675886966}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.doctype == \"Account\" and self.is_group != self.db_get(\"is_group\"):\n        # validate if the account type is changed from receivable/payable to non-receivable/payable\n        if not (self.is_group or self.parent_account):\n            if self.is_group != self.db_get(\"is_group\") and not self.get_balance_on():\n                frappe.throw(_(\"Cannot change type of root account. Please make a new account.\"))\n        else:\n            if self.is_group != self.db_get(\"is_group\") and self.get_balance_on():\n                frappe.throw(_(\"Cannot change type of non-root account with existing transactions. Please cancel or delete them.\"))\n\n    if self.doctype == \"Account\" and self.account_type != self.db_get(\"account_type\"):\n        # validate if the account type is changed from receivable/payable to non-receivable/payable\n        if self.account_type in [\"Receivable\", \"Payable\"] and not self.is_group:\n            frappe.throw(_(\"Cannot change type of a non group account to {0}\").format(self.account_type))\n        elif self.account_type not in [\"Receivable\", \"Payable\"] and self.is_group:\n            frappe.throw(_(\"Cannot change type of a group account to {0}\").format(self.account_type))\n        elif self.account_type in [\"Receivable\", \"Payable\"] and self.is_group:\n            # validate if the account type is changed from receivable/payable to non-receivable/payable\n            if self.get_balance_on():\n                frappe.throw(_(\"Cannot change type of a group account with existing transactions. Please cancel or delete them.\"))\n            else:\n                # check if there are any existing general ledger entries for the account\n                gl_entries = frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name)\n                if gl_entries:\n                    frappe.msgprint(_(\"Warning: Changing the account type to {0} will result in loss of existing transactions.\").format(self.account_type), title=_(\"Warning\"))\n                    frappe.msgprint(_(\"Please cancel or delete the existing transactions to avoid this loss.\"))", "CodeBleu_score": 33.58404198247648}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n        self.set_default_in_company_currency()\n\n    if self.get(\"__islocal\") or not self.account_currency:\n        self.account_currency = self.currency\n    elif self.account_currency != self.currency:\n        if not self.get(\"__unsaved\"):\n            existing_gle_currency = frappe.db.sql(\"\"\"select distinct account_currency from `tabGL Entry` where account=%s\"\"\", self.name)\n            existing_gle_currency = existing_gle_currency[0][0] if existing_gle_currency else None\n            if existing_gle_currency:\n                if existing_gle_currency != self.currency:\n                    frappe.throw(_(\"Account {0} has existing transactions in currency {1}. Please select a different account or cancel the existing transactions.\").format(self.name, existing_gle_currency))\n            else:\n                frappe.throw(_(\"Account {0} has existing transactions in currency {1}. Please select a different account or cancel the existing transactions.\").format(self.name, self.account_currency))\n\n", "CodeBleu_score": 36.6714110662275}, {"code": "def validate_account_currency(self)\n\t\n    if self.is_group:\n        return\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n    if not self.account_currency:\n        frappe.throw(_(\"Please enter a currency in the Company master.\"))\n    if self.account_currency != self.company_currency:\n        self.set_as_explicit_currency()\n    if self.account_currency != self.company_currency:\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s and company=%s and ifnull(is_cancelled, 'No')='No' limit 1\"\"\", (self.name, self.company)):\n            frappe.throw(_(\"Account currency can not be changed after making entries with another currency. Please cancel related GL Entries to allow currency change.\"))\n", "CodeBleu_score": 41.86693687565627}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency:\n        self.set_explicit_currency()\n    else:\n        self.account_currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n    self.validate_currency()\n    self.check_gle_currency()\n\n", "CodeBleu_score": 20.17782056023818}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {\n            \"debit\": 0,\n            \"credit\": 0,\n            \"debit_in_account_currency\": 0,\n            \"credit_in_account_currency\": 0,\n            \"key_values\": key_values\n        })\n        if entry.get(\"debit\"):\n            merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n            merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        if entry.get(\"credit\"):\n            merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n            merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n    return merged_entries\n\n", "CodeBleu_score": 52.396932580748334}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {\n            \"debit_in_account_currency\": 0.0,\n            \"credit_in_account_currency\": 0.0,\n            \"debit\": 0.0,\n            \"credit\": 0.0,\n            \"is_opening\": 1,\n            \"opening_debit\": 0.0,\n            \"opening_credit\": 0.0,\n            \"closing_debit\": 0.0,\n            \"closing_credit\": 0.0,\n            \"closing_balance\": 0.0,\n            \"account\": \"\",\n            \"account_currency\": \"\",\n            \"cost_center\": \"\",\n            \"project\": \"\",\n            \"finance_book\": \"\",\n            \"is_period_closing_voucher_entry\": 0,\n        })\n\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.debit_in_account_currency)\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.credit_in_account_currency)\n        merged_entries[key][\"debit\"] += flt(entry.debit)\n        merged_entries[key][\"credit\"] += flt(entry.credit)\n\n        for field in [\"account\", \"account_currency\", \"cost_center\", \"project\", \"finance_book\", \"is_period_closing_voucher_entry\"]:\n            if merged_entries[key][field]:\n                if merged_entries[key][field] != key_values[field]:\n                    merged_entries[key][field] = \"Multiple Values\"\n            else:\n                merged_entries[key][field] = key_values[field]\n\n    return merged_entries\n", "CodeBleu_score": 38.40182785620937}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, key_values)\n        merged_entries[key][\"debit\"] += flt(entry.debit)\n        merged_entries[key][\"credit\"] += flt(entry.credit)\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.debit_in_account_currency)\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.credit_in_account_currency)\n\n    return merged_entries\n\n", "CodeBleu_score": 42.001187442353434}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold:\n            if supplier.hold_type == \"All\":\n                if getdate(self.posting_date) < getdate(supplier.release_date):\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold until {1}. Transactions cannot be made until the hold is lifted.\"\n                        ).format(supplier.name, formatdate(supplier.release_date))\n                    )\n            elif supplier.hold_type == \"Payments\":\n                if getdate(self.posting_date) < getdate(supplier.release_date):\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold for payment until {1}. Transactions cannot be made until the hold is lifted.\"\n                        ).format(supplier.name, formatdate(supplier.release_date))\n                    )\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold:\n            if supplier.hold_type == \"All\":\n                if getdate(self.posting_date) < getdate(supplier.release_date):\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold until {1}. Transactions cannot be made until the hold is lifted.\"\n                        ).format(supplier.name, formatdate(supplier.release_date))\n                    )\n            elif supplier.hold_type == \"Invoices\":\n                if getdate(self.posting_date) < getdate(supplier.release_date):\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold for invoices until {1}. Transactions cannot be made until the hold is lifted.\"\n                        ).format(supplier.name, formatdate(supplier.release_date))\n                    )\n", "CodeBleu_score": 24.96765305525751}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n    else:\n        return\n\n    if supplier.on_hold:\n        if supplier.hold_type == self.doctype:\n            if getdate(self.posting_date) < getdate(supplier.release_date):\n                frappe.throw(\n                    _(\"Supplier is on hold until {0}\").format(\n                        formatdate(supplier.release_date)\n                    )\n                )\n        else:\n            frappe.throw(_(\"Supplier is on hold\"))\n\n", "CodeBleu_score": 27.152357098645275}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if supplier.release_date and getdate(self.posting_date) > getdate(supplier.release_date):\n                supplier.on_hold = 0\n                supplier.save()\n            else:\n                frappe.throw(_(\"Supplier is on hold for this transaction\"))\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if supplier.release_date and getdate(self.posting_date) > getdate(supplier.release_date):\n                supplier.on_hold = 0\n                supplier.save()\n            else:\n                frappe.throw(_(\"Supplier is on hold for this transaction\"))\n\n", "CodeBleu_score": 30.624540407570468}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # Get all repost doctypes that reference the current doctype\n    repost_doctypes = frappe.get_all(\n        \"DocType\",\n        filters={\"is_submittable\": 1, \"repost_of\": self.doctype},\n        fields=[\"name\", \"repost_of\"],\n    )\n\n    # Find all rows that reference the current document\n    references = frappe.db.sql(\n        \"\"\"\n            SELECT\n                dt.name,\n                dt.repost_of,\n                dt.reference_doctype,\n                dt.reference_docname,\n                voucher_type,\n                voucher_no\n            FROM `tab{repost_doctype}` dt\n            WHERE dt.reference_doctype = %(doctype)s AND dt.reference_docname = %(docname)s\n        \"\"\".format(\n            repost_doctype=self.doctype\n        ),\n        values={\"doctype\": self.doctype, \"docname\": self.name},\n        as_dict=1,\n    )\n\n    # Group rows by parent doctype and parent\n    references_map = {}\n    for row in references:\n        references_map.setdefault(\n            (row.reference_doctype, row.reference_docname), []\n        ).append(row)\n\n    # Retrieve parent documents and update them\n    for (parent_doctype, parent_docname), rows in references_map.items():\n        parent = frappe.get_doc(parent_doctype, parent_docname)\n\n        for row in rows:\n            if row.voucher_type == self.doctype:\n                # Remove from repost_vouchers\n                if row.voucher_no in parent.repost_vouchers:\n                    parent.repost_vouchers.remove(row.voucher_no)\n                # Remove from vouchers\n                if row.voucher_no in parent.vouchers:\n                    parent.vouchers.remove(row.voucher_no)\n            else:\n                # Remove from repost_vouchers\n                if row.voucher_no in parent.vouchers:\n                    parent.vouchers.remove(row.voucher_no)\n                # Remove from vouchers\n                if row.voucher_no in parent.repost_vouchers:\n                    parent.repost_vouchers.remove(row.voucher_no)\n\n        # Set flags\n        parent.flags.ignore_links = True\n        parent.flags.ignore_mandatory =", "CodeBleu_score": 27.92512362422875}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.is_return:\n        for doctype in self.get_repost_doctypes():\n            # get the parent document type and parent field\n            parent_dt, parent_field = frappe.get_cached_value(\"Repost Item\", doctype, [\"parent\", \"parent_field\"])\n            # get the parent documents\n            parent_docs = frappe.db.get_all(parent_dt, filters={parent_field: self.name}, pluck=parent_field)\n            # get the repost items\n            repost_items = frappe.get_all(\n                \"Repost Item\",\n                filters={\"parent\": doctype, \"docstatus\": 1, \"parenttype\": \"Repost Item\"},\n                fields=[\"name\", \"parenttype\", \"parent_field\", \"reference_doctype\", \"reference_fieldname\", \"condition\"],\n                order_by=\"idx\",\n            )\n            # get the repost items that match the parent document type and parent\n            repost_items = [\n                repost_item\n                for repost_item in repost_items\n                if repost_item.get(\"parenttype\") == parent_dt and repost_item.get(\"parent_field\") == parent_field\n            ]\n            # if there are no repost items, move on\n            if not repost_items:\n                continue\n            # get the repost items that match the current document\n            repost_items = [\n                repost_item\n                for repost_item in repost_items\n                if repost_item.get(\"reference_doctype\") == self.doctype and repost_item.get(\"reference_fieldname\") == self.name\n            ]\n            # if there are no repost items, move on\n            if not repost_items:\n                continue\n            # get the repost items that match the current document\n            repost_items = [\n                repost_item\n                for repost_item in repost_items\n                if repost_item.get(\"condition\") == \"\" or repost_item.get(\"condition\") is None\n            ]\n            # if there are no repost items, move on\n            if not repost_items:\n                continue\n            # get the repost items that match the current document\n            repost_items = [\n                repost_item\n                for repost_item in repost_items\n                if repost_item.get(\"condition\") == \"\"", "CodeBleu_score": 17.471247585548934}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if self.is_return:\n        return\n    for repost_doctype in self.get_repost_doctypes():\n        if not repost_doctype.get(\"reference_document\"):\n            continue\n        repost_doc = frappe.get_doc(repost_doctype.reference_document)\n        repost_doc.set_posting_time = False\n        repost_doc.ignore_links = True\n        repost_doc.flags.ignore_mandatory = True\n        repost_doc.flags.ignore_permissions = True\n        repost_doc.flags.ignore_links = True\n        repost_doc.flags.ignore_validate = True\n        if repost_doctype.get(\"reference_doctype\"):\n            repost_doc.set_posting_time = False\n            repost_doc.ignore_links = True\n            repost_doc.flags.ignore_mandatory = True\n            repost_doc.flags.ignore_permissions = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.flags.ignore_validate = True\n            repost_doc.set_posting_time = False\n            repost_doc.ignore_links = True\n            repost_doc.flags.ignore_mandatory = True\n            repost_doc.flags.ignore_permissions = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.flags.ignore_validate = True\n            if repost_doctype.get(\"reference_doctype\"):\n                repost_doc.set_posting_time = False\n                repost_doc.ignore_links = True\n                repost_doc.flags.ignore_mandatory = True\n                repost_doc.flags.ignore_permissions = True\n                repost_doc.flags.ignore_links = True\n                repost_doc.flags.ignore_validate = True\n                repost_doc.set_posting_time = False\n                repost_doc.ignore_links = True\n                repost_doc.flags.ignore_mandatory = True\n                repost_doc.flags.ignore_permissions = True\n                repost_doc.flags.ignore_links = True\n                repost_doc.flags.ignore_validate = True\n                repost_doc.set_posting_time = False\n                repost_doc.ignore_links = True\n                repost_doc.flags.ignore_mandatory", "CodeBleu_score": 20.229981429463507}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    transactions = []\n    cursor = None\n    while True:\n        try:\n            response = self.client.Transactions.get(\n                start_date=start_date,\n                end_date=end_date,\n                account_ids=[account_id] if account_id else None,\n                count=100,\n                offset=len(transactions),\n                cursor=cursor,\n            )\n            transactions.extend(response.transactions)\n            cursor = response.cursor\n            if len(transactions) >= response.total_transactions:\n                break\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Error fetching transactions\")\n            frappe.throw(_(str(e)), title=_(\"Error Fetching Transactions\"))\n    return transactions\n\n", "CodeBleu_score": 30.897802564186662}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    transactions = []\n    self.auth()\n    kwargs = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"account_ids\": [account_id] if account_id else None,\n    }\n    try:\n        transactions.extend(\n            self.client.Transactions.get(\n                self.access_token, **kwargs\n            ).transactions\n        )\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transaction retrieval error\")\n        frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n    while len(transactions) < self.total_transactions:\n        kwargs.update({\"offset\": len(transactions)})\n        try:\n            transactions.extend(\n                self.client.Transactions.get(\n                    self.access_token, **kwargs\n                ).transactions\n            )\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction retrieval error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n    return transactions\n\n", "CodeBleu_score": 34.9930257777871}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    transactions = []\n    cursor = None\n    while True:\n        try:\n            query_params = {\n                \"gte\": start_date,\n                \"lte\": end_date,\n            }\n            if account_id:\n                query_params[\"account_ids\"] = account_id\n            if cursor:\n                query_params[\"cursor\"] = cursor\n            response = self.client.Transactions.get(self.access_token, query_params)\n            transactions.extend(response.transactions)\n            if response.total_transactions < len(transactions):\n                break\n            cursor = response.next_cursor\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                self.auth()\n            else:\n                frappe.log_error(\"Plaid: Item error\")\n                frappe.throw(_(str(e)), title=_(\"Item Error\"))\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                frappe.log_error(\"Plaid: Planned Maintenance\")\n                frappe.throw(_(str(e)), title=_(\"Planned Maintenance\"))\n        except requests.Timeout:\n            frappe.log_error(\"Plaid: Timeout\")\n            frappe.throw(_(\"Timed out. Please try again.\"), title=_(\"Timeout\"))\n        except Exception as e:\n            frappe.log_error(\"Plaid: General error\")\n            frappe.throw(_(str(e)), title=_(\"General Error\"))\n    return transactions\n", "CodeBleu_score": 31.397983945570502}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse response\n        response = json.loads(response)\n        # Retrieve access token\n        access_token = bank.get_access_token(response[\"public_token\"])\n        # Check if bank already exists\n        if not bank.exists(response[\"institution\"][\"name\"]):\n            # Create bank record\n            bank.insert(response[\"institution\"][\"name\"], access_token)\n        else:\n            # Update bank record\n            bank.save(response[\"institution\"][\"name\"], access_token)\n    except Exception as e:\n        # Log error\n        frappe.log_error(frappe.get_traceback())\n", "CodeBleu_score": 33.64930908331095}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse response\n        institution = response[\"institution\"]\n        name = institution[\"name\"]\n        institution_id = institution[\"institution_id\"]\n        url = institution[\"url\"]\n        logo = institution[\"logo\"]\n        primary_color = institution[\"primary_color\"]\n        error = response[\"error\"]\n\n        # Get access token\n        access_token = plaid.get_access_token(token)\n\n        # Check if bank exists\n        bank = frappe.get_doc(\"Bank\", name)\n        if bank:\n            # Update access token\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create new bank record\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = name\n            bank.bank_url = url\n            bank.bank_logo = logo\n            bank.bank_primary_color = primary_color\n            bank.access_token = access_token\n            bank.insert()\n    except Exception as e:\n        # Log error\n        frappe.log_error(frappe.get_traceback(), \"Plaid: Error adding institution\")\n\n", "CodeBleu_score": 39.61894129328559}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # parse response\n        response = json.loads(response)\n        # retrieve access token\n        access_token = plaid.get_access_token(response[\"public_token\"])\n        # check if bank exists\n        bank = frappe.get_doc(\"Bank\", response[\"institution\"][\"name\"])\n        if bank:\n            # update access token\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # create new bank record\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = response[\"institution\"][\"name\"]\n            bank.bank_code = response[\"institution\"][\"code\"]\n            bank.access_token = access_token\n            bank.insert()\n    except Exception as e:\n        # log error\n        frappe.log_error(frappe.get_traceback(), \"Bank Creation Error\")\n\n", "CodeBleu_score": 49.84720218972992}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        access_token = frappe.db.get_value(\"Bank\", bank, \"plaid_access_token\")\n        account_id = frappe.db.get_value(\"Bank Account\", bank_account, \"integration_id\")\n        last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n\n        plaid = PlaidConnector(access_token)\n\n        start_date = None\n        end_date = None\n\n        if last_integration_date:\n            start_date = last_integration_date\n            end_date = add_days(last_integration_date, 1)\n\n        transactions = plaid.get_transactions(start_date=start_date, end_date=end_date, account_id=account_id)\n\n        if transactions:\n            for transaction in transactions:\n                new_bank_transaction(transaction)\n\n            oldest_transaction_date = getdate(transactions[-1][\"date\"])\n            frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date)\n\n            if len(transactions) == 1:\n                frappe.msgprint(_(\"Synced 1 new bank transaction\"))\n            else:\n                frappe.msgprint(_(\"Synced {0} new bank transactions\").format(len(transactions)))\n        else:\n            frappe.msgprint(_(\"No new bank transactions to sync\"))\n\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n        frappe.throw(_(\"There was an error syncing transactions. Please try again later.\"))\n", "CodeBleu_score": 43.59773060764266}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        if not last_integration_date:\n            last_integration_date = add_months(today(), -1)\n\n        transactions = get_transactions(\n            bank=bank, bank_account=bank_account, start_date=last_integration_date\n        )\n\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if new_transactions:\n            oldest_transaction_date = min(\n                [getdate(t[\"date\"]) for t in transactions]\n            )\n            frappe.db.set_value(\n                \"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date\n            )\n\n        frappe.db.commit()\n\n        return len(new_transactions)\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n        frappe.db.rollback()\n", "CodeBleu_score": 42.86564427027722}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    if not last_integration_date:\n        last_integration_date = add_months(today(), -1)\n\n    transactions = get_transactions(\n        bank,\n        bank_account=bank_account,\n        start_date=last_integration_date,\n        end_date=today(),\n    )\n\n    new_transactions = []\n\n    for transaction in transactions:\n        try:\n            new_transactions += new_bank_transaction(transaction)\n        except Exception:\n            frappe.log_error(\n                title=_(\"Bank Transaction Creation Error\"),\n                message=frappe.get_traceback(),\n            )\n\n    if new_transactions:\n        frappe.db.set_value(\n            \"Bank Account\",\n            bank_account,\n            \"last_integration_date\",\n            getdate(min([t[\"date\"] for t in transactions])),\n        )\n\n    return len(new_transactions)\n", "CodeBleu_score": 36.399807833755055}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query = self._get_query(entity)\n    total = self._get_count(entity, query)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Total {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total,\n        }\n    )\n    for offset in range(0, total, 1000):\n        entries = self._get_entries(entity, query, offset, 1000)\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n    self._publish({\"event\": \"progress\", \"message\": _(\"Done\")})", "CodeBleu_score": 25.104043101035607}, {"code": "def _migrate_entries(self, entity)\n\t\n    uri = self._get_entity_uri(entity)\n    total = self._get_total(uri)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total,\n        }\n    )\n    for index, offset in enumerate(range(0, total, 1000), start=1):\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Fetching {0}\").format(entity),\n                \"count\": index,\n                \"total\": total,\n            }\n        )\n        response = self._get(uri, params={\"offset\": offset, \"limit\": 1000})\n        if response.status_code == 200:\n            entries = response.json()[\"QueryResponse\"][entity]\n            entries = self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n        else:\n            self._log_error(response.text, response.json())", "CodeBleu_score": 27.801570084395756}, {"code": "def _migrate_entries(self, entity)\n\t\n    query = self._construct_query(entity)\n    total = self._get_total(query)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total,\n        }\n    )\n    entries = []\n    for offset in range(0, total, 1000):\n        response = self._get(query, params={\"offset\": offset})\n        response.raise_for_status()\n        entries.extend(response.json()[\"QueryResponse\"][entity])\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n        entries = []", "CodeBleu_score": 30.23953570123333}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"LinkedTxn\"]:\n            for linked_txn in invoice[\"LinkedTxn\"]:\n                linked_txn_doc = frappe.get_doc(\"QuickBooks LinkedTxn\", linked_txn[\"TxnId\"])\n                if linked_txn_doc.linked_txn_type == \"StatementCharge\" or linked_txn_doc.linked_txn_type == \"ReimburseCharge\":\n                    self._save_invoice_as_journal_entry(invoice, linked_txn_doc.quickbooks_id)\n                    break\n        else:\n            if invoice[\"CustomerRef\"][\"value\"]:\n                self._save_sales_invoice(invoice, invoice[\"Id\"])\n            else:\n                self._save_sales_invoice(invoice, invoice[\"Id\"], is_return=True)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 32.46003295542806}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"LinkedTxn\"]:\n            linked_txns = [\n                frappe.get_doc(\"QuickBooks LinkedTxn\", linked_txn[\"TxnId\"])\n                for linked_txn in invoice[\"LinkedTxn\"]\n                if linked_txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]\n            ]\n            if linked_txns:\n                self._save_invoice_as_journal_entry(invoice, invoice[\"Id\"])\n            else:\n                self._save_sales_invoice(invoice, invoice[\"Id\"])\n        else:\n            self._save_sales_invoice(invoice, invoice[\"Id\"])\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 34.46565839849646}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"LinkedTxn\"]:\n            for linked_txn in invoice[\"LinkedTxn\"]:\n                if linked_txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, linked_txn[\"TxnId\"])\n                    return\n\n        if invoice[\"DocType\"] == \"SalesInvoice\":\n            self._save_sales_invoice(invoice, invoice[\"Id\"])\n        elif invoice[\"DocType\"] == \"CreditMemo\":\n            self._save_sales_invoice(invoice, invoice[\"Id\"], is_return=True)\n        elif invoice[\"DocType\"] == \"Bill\":\n            self._save_sales_invoice(invoice, invoice[\"Id\"], is_pos=True)\n    except Exception as e:\n        self._log_error(e, [invoice])", "CodeBleu_score": 26.073688416190024}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    interval = 1\n    validated = False\n\n    while not validated:\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n        validated = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        if validated:\n            interval += 1\n            validated = False\n\n    # Adjust the schedule dates to avoid holidays\n    schedule_list = self.adjust_schedule_dates_to_avoid_holidays(schedule_list, sales_person)\n\n    # Adjust the schedule dates to avoid weekends\n    schedule_list = self.adjust_schedule_dates_to_avoid_weekends(schedule_list)\n\n    # Adjust the schedule dates to avoid visits on holidays\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_holidays(schedule_list, sales_person)\n\n    # Adjust the schedule dates to avoid visits on weekends\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_weekends(schedule_list)\n\n    # Adjust the schedule dates to avoid visits on public holidays\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_public_holidays(schedule_list)\n\n    # Adjust the schedule dates to avoid visits on national holidays\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_national_holidays(schedule_list)\n\n    # Adjust the schedule dates to avoid visits on sundays\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_sundays(schedule_list)\n\n    # Adjust the schedule dates to avoid visits on saturdays\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_saturdays(schedule_list)\n\n    # Adjust the schedule dates to avoid visits on holidays\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_holidays(schedule_list, sales_person)\n\n    # Adjust the schedule dates to avoid visits on weekends\n    schedule_list = self.adjust_schedule_dates_to_avoid_visits_on_week", "CodeBleu_score": 23.915604825808423}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n\n    # validate dates\n    self.validate_dates(start_date, end_date)\n\n    # validate number of visits\n    self.validate_no_of_visits(no_of_visit)\n\n    # validate sales person\n    self.validate_sales_person(sales_person)\n\n    # calculate interval between visits\n    interval = self.get_interval(no_of_visit)\n\n    # generate schedule\n    schedule_date = start_date\n    while schedule_date <= end_date:\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n\n    # adjust dates to avoid holidays\n    self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 20.339606923696184}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n    schedule_date = start_date\n    interval = 0\n    i = 0\n\n    while i < no_of_visit:\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n        if i == 0:\n            interval = (end_date - start_date) / no_of_visit\n        else:\n            schedule_date = add_days(schedule_date, interval)\n\n        i += 1\n\n    return schedule_list\n\n", "CodeBleu_score": 30.37028423201174}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$this->getSelectedRecords($request)->each(function ($contact) {\n$contact->delete();\n})->count();\n}", "CodeBleu_score": 17.901118710064658}, {"code": "<?\npublic function deleteContacts($request){\n\t$selectedContacts = $this->getSelectedRecords($request, 'contacts');\n\nforeach ($selectedContacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 76.40212647685541}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}\n}", "CodeBleu_score": 58.06231370813681}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t", "CodeBleu_score": 6.372549019607843}, {"code": "<?\npublic function deleteTransactions($request){\n\t", "CodeBleu_score": 6.372549019607843}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request, 'transactions');\n\n$deleted = 0;\n\nforeach ($transactions as $transaction) {\ntry {\n$transaction->delete();\n$deleted++;\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}\n\nreturn redirect()->back()->with('success', \"Successfully deleted {$deleted} transactions\");\n}", "CodeBleu_score": 59.86009015617052}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t", "CodeBleu_score": 7.6190476190476195}, {"code": "<?\npublic function withValidator($validator){\n\t$request = $this->getRequest();\n$rules = $this->prepareRules($request->rules());\nforeach ($this->data as $row) {\n$request->initialize(array_merge($request->all(), $row));\n$validator->setData($request->all());\ntry {\nValidator::make($request->all(), $rules)->validate();\n} catch (ValidationException $e) {\n$validator->addFailure($request, $e->validator);\n}\n}\nif ($validator->failed()) {\nthrow new ValidationException($validator);\n}\n}", "CodeBleu_score": 35.8729127916637}, {"code": "<?\npublic function withValidator($validator){\n\t$this->validator = $validator;\n$this->validator->after(function ($validator) {\n$this->addValidationErrors($validator);\n});\n}", "CodeBleu_score": 12.752406745322622}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\n$this->model = $this->getModelInstance($arguments[0]);\n\n$this->request = $this->getRequestInstance($arguments[1]);\n\n$this->update();\n\n}", "CodeBleu_score": 30.678927488667973}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t", "CodeBleu_score": 7.9787234042553195}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\n}", "CodeBleu_score": 8.637453922545667}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n$request->expectsJson() || $request->isNotApi() ? $query = $query->get() : $query = $query->usingSearchString()->sortable($sort)->paginate(request()->get('limit', 10));\nreturn $query;\n}", "CodeBleu_score": 43.989026947111576}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $request = request();\n $sort = $request->get('sort', $sort);\n $query->usingSearchString($request->get('search'));\n $query->sortable($sort);\n if ($request->expectsJson() && ! $request->isNotApi()) {\n return $query->get();\n }\n return $query->paginate();\n }", "CodeBleu_score": 47.120756843296405}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t", "CodeBleu_score": 10.364635364635365}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t,\n    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [0, 0];\n    }\n\n    $transactions = $model->transactions;\n    foreach ($transactions as $transaction) {\n        $openAmount += $transaction->amount;\n    }\n\n    $due_date = $model->getDueDate();\n    if ($due_date) {\n        $today = Date::today();\n        if ($today > $due_date) {\n            $overdueAmount = $openAmount;\n            $openAmount = 0;\n        }\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 47.50554162732684}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t", "CodeBleu_score": 7.647058823529412}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t(\n    $model->open_amount = $model->total;\n    $model->overdue_amount = 0;\n    $model->total_amount = $model->total;\n    $model->partial_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n            'total_amount' => $model->total,\n            'partial_amount' => 0\n        ];\n    }\n\n    $model->partial_amount = $model->payments()->sum('amount');\n    $model->total_amount = $model->total;\n    $model->open_amount = $model->total - $model->partial_amount;\n\n    if ($model->status == 'partial') {\n        if ($model->due_date < Date::today()) {\n            $model->overdue_amount = $model->total;\n            $model->open_amount = 0;\n        }\n    }\n\n    return [\n        'open_amount' => $model->open_amount,\n        'overdue_amount' => $model->overdue_amount,\n        'total_amount' => $model->total_amount,\n        'partial_amount' => $model->partial_amount\n    ];\n}", "CodeBleu_score": 36.23653122242326}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n$perPage = $perPage ?: $this->model->getPerPage();\n$total = $this->toBase()->getCountForPagination();\n$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\nreturn $this->paginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 82.40295140834317}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t// If we are not given a specific page, we'll resolve it using the page resolver. If the page is null, we\n// will assume the page is the current page.\n$page = $page ?: $this->resolveCurrentPage($pageName);\n\n$perPage = $perPage ?: $this->model->getPerPage();\n\n$total = $this->toBase()->getCountForPagination();\n\n$results = ($total) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\nreturn $this->paginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 75.5467046274844}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: $this->resolveCurrentPage($pageName);\n$perPage = $perPage ?: $this->model->getPerPage();\n$total = $this->total();\n$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\nreturn $this->paginator($results, $total, $perPage, $page, [\n'path' => $this->resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 66.38170015195055}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $request->get('reconciliations');\nforeach ($reconciliations as $reconciliation) {\n\\DB::transaction(function () use ($reconciliation) {\n$reconciliation = Reconciliation::find($reconciliation['id']);\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n$reconciliation->transactions()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->update(['reconciled' => true]);\n$reconciliation->transactions()->where('account_id', $reconciliation->account_id)->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->update(['reconciled' => true]);\n});\n}\n}", "CodeBleu_score": 44.37112589229398}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('account_id', $request->account_id)->where('status', 'open')->get();\n\nforeach($reconciliations as $reconciliation) {\n\\DB::transaction(function() use ($reconciliation) {\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('account_id', $reconciliation->account_id)\n->isNotReconciled()\n->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n->get();\n\nforeach($transactions as $transaction) {\n$transaction->reconciled_at = \\Carbon\\Carbon::now();\n$transaction->reconciled = true;\n$transaction->save();\n}\n});\n}\n}", "CodeBleu_score": 44.45726592438643}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $request->input('reconciliations');\n\nforeach ($reconciliations as $reconciliation) {\n\\DB::transaction(function () use ($reconciliation) {\n$reconciliation = Reconciliation::find($reconciliation);\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n\n$reconciled_transactions = Transaction::where('account_id', $reconciliation->account_id)\n->isNotReconciled()\n->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n->get();\n\nforeach ($reconciled_transactions as $transaction) {\n$transaction->reconciled = true;\n$transaction->save();\n}\n});\n}\n}", "CodeBleu_score": 51.655767908925895}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\n$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\n\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\n$invitation->delete();\nthrow new Exception('Failed to send invitation notification.');\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 44.25755898147663}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n$invitations->each->delete();\n\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\n\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\n$invitation->delete();\n\nthrow $e;\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 35.04139558880437}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\n\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (\\Exception $exception) {\n$invitation->delete();\nthrow new \\Exception('Failed to dispatch notification: ' . $exception->getMessage());\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 44.89774304829422}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isTransferTransaction) {\nthrow new UnauthorizedException('Transfer transactions are not authorized');\n}\nif ($this->model->isReconciled) {\nthrow new UnauthorizedException('Reconciled transactions are not authorized');\n}\n}", "CodeBleu_score": 27.247360195731552}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled) {\nthrow new Exception(\"This transaction has been reconciled. Please create a new transaction to make changes to this transaction.\");\n}\nif ($this->model->isTransferTransaction) {\nthrow new UnauthorizedException(\"This is a transfer transaction. Please create a new transaction to make changes to this transaction.\");\n}\n}", "CodeBleu_score": 19.743421602351578}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled) {\nthrow new Exception('Transaction is already reconciled');\n}\nif ($this->model->isTransferTransaction) {\nthrow new UnauthorizedException('Transfer transactions are not authorized');\n}\n}", "CodeBleu_score": 27.07126715975893}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\t// Get the tenant ID from the request's access token.\n\tString tenantId = getTenantIdByToken();\n\n\t// If the tenant ID is not zero, allow access to certain predefined tables.\n\tif (tenantId != null && !tenantId.isEmpty()) {\n\t\tif (tableName.equals(\"Table1\") || tableName.equals(\"Table2\") || tableName.equals(\"Table3\")) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Otherwise, deny access.\n\treturn false;\n}", "CodeBleu_score": 12.927660712870559}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName == null || tableName.isEmpty()) {\n\t\treturn false;\n\t}\n\t// Allow access to the following tables if the tenant ID is not zero.\n\tif (tableName.equals(\"Employee\") || tableName.equals(\"Employee_Territory\") || tableName.equals(\"Order\") || tableName.equals(\"OrderDetail\") || tableName.equals(\"Product\") || tableName.equals(\"Customer\") || tableName.equals(\"Region\") || tableName.equals(\"Shipper\") || tableName.equals(\"Supplier\") || tableName.equals(\"Territory\") || tableName.equals(\"Category\") || tableName.equals(\"CustomerCustomerDemo\") || tableName.equals(\"CustomerDemographic\") || tableName.equals(\"EmployeeTerritory\") || tableName.equals(\"OrderDetail\") || tableName.equals(\"ProductDetail\") || tableName.equals(\"Region\") || tableName.equals(\"Shipper\") || tableName.equals(\"Supplier\") || tableName.equals(\"Territory\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 13.096444849718738}, {"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t// Store the data in a JSON array\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null != dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t// Settlement account name\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 87.71271269671657}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tList<Account> dataList = accountService.findBySelect();\n// Store the data in a JSON array\nJSONArray dataArray = new JSONArray();\nif (null != dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n// Settlement account name\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nreturn dataArray.toJSONString();\n}", "CodeBleu_score": 51.132395319582315}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tList<Account> dataList = accountService.findBySelect();\n// store the list of accounts in a JSON array\nJSONArray dataArray = new JSONArray();\nif (null != dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n// set the account name\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nreturn dataArray.toJSONString();\n}", "CodeBleu_score": 51.132395319582315}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n    res.code = 200;\n    res.data = map;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.01639408025623}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null != dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 90.65801886635958}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\n}", "CodeBleu_score": 6.799418567643893}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null != dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 90.65801886635958}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n    res.code = 200;\n    res.data = platformConfig;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.42693528602554}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(new ArrayList<SystemConfigInfo>());\n\t\tresponse.getData().add(getSystemConfig());\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setData(\"Error occurred while retrieving system configuration.\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 32.27123001010504}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList != null && systemConfigList.size() > 0) {\n\t\t\tresponse.setResultCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t} else {\n\t\t\tresponse.setResultCode(500);\n\t\t\tresponse.setResultMessage(\"No system configuration found.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setResultCode(500);\n\t\tresponse.setResultMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 35.7007666107615}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setMessage(\"No system configuration information found.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 37.67946746594153}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartFile file = request.getFile(\"file\");\n\t\tString uploadType = request.getParameter(\"uploadType\");\n\t\tif (StringUtils.isEmpty(businessPath)) {\n\t\t\tresponseInfo.setCode(ResponseCode.FAIL_CODE);\n\t\t\tresponseInfo.setMessage(\"businessPath is empty!\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\tif (file == null) {\n\t\t\tresponseInfo.setCode(ResponseCode.FAIL_CODE);\n\t\t\tresponseInfo.setMessage(\"file is empty!\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\tif (StringUtils.isEmpty(uploadType)) {\n\t\t\tresponseInfo.setCode(ResponseCode.FAIL_CODE);\n\t\t\tresponseInfo.setMessage(\"uploadType is empty!\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\tif (uploadType.equals(UploadType.LOCAL.getValue())) {\n\t\t\tString filePath = saveLocal(businessPath, file);\n\t\t\tresponseInfo.setCode(ResponseCode.SUCCESS_CODE);\n\t\t\tresponseInfo.setData(filePath);\n\t\t\treturn responseInfo;\n\t\t} else if (uploadType.equals(UploadType.ALI_OSS.getValue())) {\n\t\t\tString filePath = uploadAliOss(businessPath, file);\n\t\t\tresponseInfo.setCode(ResponseCode.SUCCESS_CODE);\n\t\t\tresponseInfo.setData(filePath);\n\t\t\treturn responseInfo;\n\t\t} else {\n\t\t\tresponseInfo.setCode(ResponseCode.FAIL_CODE);\n\t\t\tresponseInfo.setMessage(\"uploadType is not supported!\");\n\t\t\treturn responseInfo;\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"upload error\", e);\n\t\tresponseInfo.setCode(ResponseCode.FAIL_CODE);\n\t\tresponseInfo.setMessage(e.getMessage());\n\t\treturn responseInfo;\n\t}\n}", "CodeBleu_score": 30.73920854133708}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\t// Get the business path from the request.\n\tString businessPath = getParameter(request, \"businessPath\");\n\n\t// Get the uploaded file from the request.\n\tMultipartFile file = getFile(request);\n\n\t// Get the file upload type from the request.\n\tString uploadType = getParameter(request, \"uploadType\");\n\n\t// Set the response code and data.\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tresponseInfo.setCode(200);\n\tresponseInfo.setData(null);\n\n\t// Try to upload the file.\n\ttry {\n\t\t// Save the file locally.\n\t\tif (\"local\".equals(uploadType)) {\n\t\t\tresponseInfo = uploadLocal(businessPath, file);\n\t\t}\n\t\t// Save the file to AliOss.\n\t\telse if (\"aliyun\".equals(uploadType)) {\n\t\t\tresponseInfo = uploadAliOss(businessPath, file);\n\t\t}\n\t}\n\t// Catch any exceptions and return the response.\n\tcatch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponseInfo.setCode(500);\n\t\tresponseInfo.setData(e.getMessage());\n\t}\n\n\t// Set the response code and data.\n\tresponse.setStatus(responseInfo.getCode());\n\tresponse.setContentType(\"application/json;charset=UTF-8\");\n\tresponse.setCharacterEncoding(\"UTF-8\");\n\ttry {\n\t\tresponse.getWriter().write(JSON.toJSONString(responseInfo));\n\t}\n\tcatch (IOException e) {\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\n\t// Return the response.\n\treturn responseInfo;\n}", "CodeBleu_score": 30.324916577699916}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Retrieve the business path and the file from the request\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\t// Determine the upload type and save the file\n\t\tif (UploadType.LOCAL.equals(UploadType.valueOf(request.getParameter(\"uploadType\")))) {\n\t\t\tuploadLocal(businessPath, file);\n\t\t} else if (UploadType.ALI_OSS.equals(UploadType.valueOf(request.getParameter(\"uploadType\")))) {\n\t\t\tuploadAliOss(businessPath, file);\n\t\t}\n\t\t// Set the response code and data\n\t\tresponseInfo.setCode(BaseResponseCode.SUCCESS.getCode());\n\t\tresponseInfo.setData(BaseResponseCode.SUCCESS.getMessage());\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponseInfo.setCode(BaseResponseCode.FAIL.getCode());\n\t\tresponseInfo.setData(BaseResponseCode.FAIL.getMessage());\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 33.47083061358103}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t", "CodeBleu_score": 3.3888212609146513}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tAccount account=new Account();\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setRemark(obj.getString(\"remark\"));\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setCategory(obj.getString(\"category\"));\n\t\taccount.setAccountBook(obj.getString(\"accountBook\"));\n\t\taccount.setInitAmount(obj.getDouble(\"initAmount\"));\n\t\taccount.setCreateTime(new Date());\n\t\taccount.setLastUpdateTime(new Date());\n\t\taccount.setEnabled(true);\n\t\taccount.setIsDefault(false);\n\t\tif(obj.containsKey(\"isDefault\")){\n\t\t\taccount.setIsDefault(obj.getBoolean(\"isDefault\"));\n\t\t}\n\t\tif(obj.containsKey(\"enabled\")){\n\t\t\taccount.setEnabled(obj.getBoolean(\"enabled\"));\n\t\t}\n\t\tresult=accountMapper.insertSelective(account);\n\t\tif(account.getIsDefault()){\n\t\t\tupdateDefaultAccount(account.getAccountBook(), account.getId());\n\t\t}\n\t\t//\u65e5\u5fd7\u8bb0\u5f55\n\t\tlogService.insertLog(BusinessConstants.LOG_INTERFACE_NAME_ACCOUNT, \n\t\t\t\tnew StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getRemark()).toString(), request);\n\t}catch(Exception e){\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 45.386558483072704}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t//        String clientIp = RequestUtils.getClientIp(request);\n//        String userAgent = RequestUtils.getUserAgent(request);\n//        String requestUri = RequestUtils.getRequestUri(request);\n//        String requestMethod = RequestUtils.getRequestMethod(request);\n        Account account = new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setInitAmount(obj.getDouble(\"initAmount\"));\n        account.setCreateTime(new Date());\n        account.setLastUpdateTime(new Date());\n        account.setEnabled(obj.getInteger(\"enabled\"));\n        account.setIsDefault(obj.getInteger(\"isDefault\"));\n        account.setTenant_id(Long.valueOf(obj.getString(\"tenant_id\")));\n        account.setDeleteFlag(0);\n        int result = 0;\n        try {\n            result = accountMapperEx.insertAccount(account);\n        } catch (Exception e) {\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 39.24236746536646}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in listWithBalanceCount()\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.14053194953389}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in listWithBalanceCount()\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.324423657683603}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceCountMapper(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception in listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.988366719171072}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"deleteDepotItem failed\", e);\n\t\trequest.setAttribute(\"exception\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 57.416214596628265}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\trequest.setAttribute(\"error\", e.getMessage());\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.90588803945038}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"deleteDepotItem failed\", e);\n\t\trequest.setAttribute(\"exception\", e);\n\t\trequest.setAttribute(\"errorMessage\", \"deleteDepotItem failed\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 55.60885326477154}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tString requestUrl = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tSystem.out.println(\"Adding node: \" + requestUrl);\n\t\thttpClient = HttpClients.createDefault();\n\t\thttpResponse = httpClient.execute(new HttpGet(requestUrl));\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tSystem.out.println(\"Node added successfully.\");\n\t\t\treturn true;\n\t\t} else {\n\t\t\tSystem.out.println(\"Failed to add node: \" + httpResponse.getStatusLine().getStatusCode());\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Failed to add node: \" + e.getMessage());\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 44.058912803808646}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tCloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\tJSONObject json = new JSONObject(response);\n\t\t\treturn json.has(\"key\");\n\t\t} else {\n\t\t\tSystem.err.println(\"Error: \" + statusCode);\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 48.34944749869469}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\thttpClient = HttpClients.createDefault();\n\t\thttpResponse = httpClient.execute(new HttpGet(url));\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 41.24336901919048}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tString endpoint = withProjectName(projectName) + \"addEdge\";\n\tString uri = protocol + \"://\" + host + \":\" + port + \"/\" + endpoint;\n\tHttpGet httpGet = new HttpGet(uri);\n\thttpGet.addHeader(\"Content-Type\", \"application/json\");\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() != 200) {\n\t\t\tthrow new RuntimeException(\"Failed : HTTP error code : \" + httpResponse.getStatusLine().getStatusCode());\n\t\t}\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tString json = EntityUtils.toString(entity);\n\t\tSystem.out.println(json);\n\t\tJSONObject obj = new JSONObject(json);\n\t\tif (obj.has(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 50.90340421406167}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"addEdge\";\n\tString params = \"type=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpResponse = httpClient.execute(new HttpGet(url + \"?\" + params));\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tInputStream instream = entity.getContent();\n\t\t\t\ttry {\n\t\t\t\t\tString result = IOUtils.toString(instream, \"UTF-8\");\n\t\t\t\t\tJSONObject obj = new JSONObject(result);\n\t\t\t\t\tif (obj.has(\"key\")) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tinstream.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (ClientProtocolException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 55.15844384375548}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\tboolean result = false;\n\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"graph/edges/add\";\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString params = \"?type=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tHttpGet httpGet = new HttpGet(url + params);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tInputStream instream = entity.getContent();\n\t\t\ttry {\n\t\t\t\tresult = readValue(instream, Boolean.class);\n\t\t\t} finally {\n\t\t\t\tinstream.close();\n\t\t\t}\n\t\t}\n\t} catch (ClientProtocolException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn result;\n}", "CodeBleu_score": 51.13720298251454}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"Event cannot be null\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = event.writeValueAsString();\n\tif (target == null) {\n\t\tproducer.send(new ProducerRecord<String, String>(topic, json));\n\t} else {\n\t\tproducer.send(new ProducerRecord<String, String>(target, json));\n\t}\n\tproducer.flush();\n}", "CodeBleu_score": 33.802391357861794}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tSystem.out.println(\"Event or event message is null\");\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString jsonString = event.writeValueAsString();\n\tString topic = \"test\";\n\tif (event.getTarget() != null) {\n\t\ttopic = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 44.54291617072793}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event or event message cannot be null\");\n\t}\n\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\n\tevent.setTime(System.currentTimeMillis());\n\tString json = new JSONObject(event).toString();\n\n\tString topic = \"test\";\n\tif (event.getTarget() != null) {\n\t\ttopic = event.getTarget();\n\t}\n\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 44.34503567008106}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 36.420112151296046}, {"code": "public String upload(String objName, byte[] content){\n\t//        String endpoint = config.getEndpoint();\n//        String accessKeyId = config.getAccessKeyId();\n//        String accessKeySecret = config.getAccessKeySecret();\n//        String bucketName = config.getOssBucket();\n//\n//        // Create an OSSClient instance.\n//        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n//\n//        // Upload a file to an OSS bucket.\n//        ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n//\n//        // Shut down the OSS client.\n//        ossClient.shutdown();\n//\n//        // Return the URL of the uploaded object.\n//        return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 4.075365161109065}, {"code": "public String upload(String objName, byte[] content){\n\t// 1. Initialize the OSS client with access credentials.\n        OSSClient client = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n// 2. Upload the file content as an object with the specified name.\n        client.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n// 3. Shut down the OSS client.\n        client.shutdown();\n// 4. Return the URL of the uploaded object.\n        return config.getEndpoint() + \"/\" + config.getOssBucket() + \"/\" + objName;\n    }", "CodeBleu_score": 32.95061343869079}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tensureIpToLocationWorker();\n\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 28.79028805380891}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\nif (worker != null) {\n    return worker.ipToLocation(ipAddress);\n}\nreturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n}", "CodeBleu_score": 24.780588297103385}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\n    return new LocationInfo(\"unknown\", \"unknown\");\n}\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 26.320226661139984}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient != null && esRestClient != null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (esClient != null && esRestClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tif (clusterHostList == null || clusterHostPort == 0) {\n\t\t\tthrow new Exception(\"Elasticsearch cluster host list or port is not set.\");\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\tesClient = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])));\n\t\tesRestClient = new RestClient(hosts.toArray(new HttpHost[hosts.size()]));\n\t}\n}", "CodeBleu_score": 57.68595110955014}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\t// Initialize the low-level and high-level REST clients.\n\t\t\t\tList<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\t\t\tesClient = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])));\n\t\t\t\tesClientLowLevel = new RestClient(RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.830819995187504}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tif (clusterHostList == null) {\n\t\t\t\t\tclusterHostList = System.getProperty(\"es.cluster.host.list\");\n\t\t\t\t\tif (clusterHostList == null) {\n\t\t\t\t\t\tthrow new Exception(\"System property es.cluster.host.list is not set\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (clusterHostPort == 0) {\n\t\t\t\t\tclusterHostPort = Integer.parseInt(System.getProperty(\"es.cluster.host.port\", \"9200\"));\n\t\t\t\t}\n\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\t\tif (clusterUserName != null) {\n\t\t\t\t\tbuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\t\t\treturn httpClientBuilder.setDefaultCredentialsProvider(new BasicCredentialsProvider()).setDefaultCredentialsProvider(new BasicCredentialsProvider()).setDefaultCredentialsProvider(new BasicCredentialsProvider()).setDefaultCredentialsProvider(new BasicCredentialsProvider());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tesClient = new RestHighLevelClient(builder);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.0532380792716}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostsList = clusterHostList.split(\",\");\n\tfor (String host : hostsList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0].trim();\n\t\tint port = clusterPort;\n\t\tif (hostParts.length == 2) {\n\t\t\tport = Integer.parseInt(hostParts[1].trim());\n\t\t}\n\t\thosts.add(new HttpHost(hostName, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 43.651792365292636}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0].trim();\n\t\tint hostPort = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\thostPort = Integer.parseInt(hostParts[1].trim());\n\t\t}\n\t\thosts.add(new HttpHost(hostName, hostPort, \"http\"));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 40.88334428253242}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tif (clusterHostList != null) {\n\t\tString[] hostStrings = clusterHostList.split(\",\");\n\t\tfor (String hostString : hostStrings) {\n\t\t\tString[] hostParts = hostString.split(\":\");\n\t\t\tString host = hostParts[0];\n\t\t\tint port = clusterPort;\n\t\t\tif (hostParts.length > 1) {\n\t\t\t\tport = Integer.parseInt(hostParts[1]);\n\t\t\t}\n\t\t\thosts.add(new HttpHost(host, port));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 40.987165407186545}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\tSystem.out.println(\"SMS polling thread started.\");\n\twhile (true) {\n\t\t// Wait for a task to arrive\n\t\tSystem.out.println(\"Waiting for a task to arrive.\");\n\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null) {\n\t\t\tSystem.out.println(\"No task was received within the specified timeout.\");\n\t\t\tcontinue;\n\t\t}\n\t\tSystem.out.println(\"Received a task.\");\n\t\ttry {\n\t\t\t// Process the task\n\t\t\tif (task.getTaskType() == TaskType.SEND_PLAIN_TEXT_MESSAGE) {\n\t\t\t\tSendPlainTextMessageTask plainTextMessageTask = (SendPlainTextMessageTask) task;\n\t\t\t\tsendPlainTextMessage(plainTextMessageTask.getToNumber(), plainTextMessageTask.getMessage());\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Unknown task type: \" + task.getTaskType());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"An error occurred when processing the task.\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 28.79855287444888}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (this.isAlive()) {\n\t\ttry {\n\t\t\tString task = this.poll();\n\t\t\tif (task == null) {\n\t\t\t\tThread.sleep(30000);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.println(\"Retrieved task: \" + task);\n\t\t\tMap<String, Object> taskObj = XMLDecodeUtils.decodeXmlString(task);\n\t\t\tString type = (String) taskObj.get(\"type\");\n\t\t\tif (type == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"Task type is missing\");\n\t\t\t}\n\t\t\tif (type.equals(\"sendPlainTextMessage\")) {\n\t\t\t\tString toNumber = (String) taskObj.get(\"toNumber\");\n\t\t\t\tString message = (String) taskObj.get(\"message\");\n\t\t\t\tif (toNumber == null || message == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Recipient number or message is missing\");\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 34.822553636347884}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t// Retrieve a task from the queue.\n\tQueueMessage message = this.getQueue().retrieveMessage();\n\tif (message == null) {\n\t\t// No messages, so wait a while.\n\t\tThread.sleep(30000);\n\t\treturn;\n\t}\n\n\t// Process the message.\n\ttry {\n\t\t// Retrieve the message content.\n\t\tString content = message.getMessageContentAsString();\n\t\t// Deserialize the message content.\n\t\tMap<String, String> data = XMLDecodeUtils.decodeXmlString(content);\n\n\t\t// Check the message type.\n\t\tString type = data.get(\"Type\");\n\t\tif (type.equals(\"Text\")) {\n\t\t\t// Process a plain text message.\n\t\t\tString toNumber = data.get(\"To\");\n\t\t\tString messageBody = data.get(\"Body\");\n\t\t\ttry {\n\t\t\t\tsendPlainTextMessage(toNumber, messageBody);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// Log the error.\n\t\t\t\tSystem.out.println(\"Error sending message: \" + ex.getMessage());\n\t\t\t}\n\t\t}\n\t} finally {\n\t\t// Delete the message.\n\t\tmessage.delete();\n\t}\n}", "CodeBleu_score": 33.059175772230574}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient client = getHttpClient();\n\ttry {\n\t\tHttpGet request = new HttpGet(uri);\n\t\trequest.addHeader(\"Accept\", \"application/xml\");\n\t\tHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\tString result = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tSystem.out.println(result);\n\t\t\treturn result;\n\t\t}\n\t} finally {\n\t\tclient.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 59.09476444786499}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\ttry {\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\treturn EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} finally {\n\t\thttpGet.releaseConnection();\n\t}\n}", "CodeBleu_score": 50.00831231062194}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient client = getHttpClient();\n\tHttpGet request = new HttpGet(uri);\n\trequest.addHeader(\"Accept\", \"application/xml\");\n\tHttpResponse response = client.execute(request);\n\tHttpEntity entity = response.getEntity();\n\tif (entity != null) {\n\t\tString result = EntityUtils.toString(entity, \"UTF-8\");\n\t\tSystem.out.println(result);\n\t\treturn result;\n\t}\n\treturn null;\n}", "CodeBleu_score": 61.54395102373395}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] root = decodeNodeToMap(doc.getDocumentElement(), doTrim);\n\tif (root == null || root.length < 2){\n\t\treturn null;\n\t}\n\tif (!(root[1] instanceof Map)){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) root[1];\n}", "CodeBleu_score": 45.964802413146415}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\treturn decodeNodeToMap(doc.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 26.67290882995697}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (StringUtils.isBlank(messageXmlStr)){\n\t\treturn null;\n\t}\n\tDocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new InputSource(new StringReader(messageXmlStr)));\n\treturn decodeNodeToMap(document.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 30.136415412345986}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tif (!isEligibleForAutoProcessing)\n\t{\n\t\tfinal String trxName = getTrxName();\n\t\tfinal String asyncBatchId = AsyncBatchId.toRepoIdOrNone(orderRecord.getC_Async_Batch_ID());\n\t\tlogger.debug(\"Enqueueing order {} for auto-processing. Async batch ID: {}\", orderRecord, asyncBatchId);\n\t\tenqueue(orderRecord, trxName);\n\t\treturn;\n\t}\n\n\tfinal AsyncBatchId asyncBatchId = AsyncBatchId.ofRepoId(orderRecord.getC_Async_Batch_ID());\n\tfinal String trxName = getTrxName();\n\tlogger.debug(\"Enqueueing order {} for auto-processing. Async batch ID: {}\", orderRecord, asyncBatchId);\n\tenqueue(orderRecord, trxName);\n}", "CodeBleu_score": 42.458140638944855}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\treturn;\n\t}\n\n\tfinal I_C_Async_Batch asyncBatch = asyncBatchBL.createAsyncBatch()\n\t\t\t.setContext(getTrxName())\n\t\t\t.setC_Async_Batch_Type(AsyncBatchType.C_ORDER_MFG_SHIPMENT_SCHEDULE_CREATION)\n\t\t\t.setAD_PInstance_Creator_ID(Env.getAD_PInstance_ID(getTrxName()))\n\t\t\t.save();\n\n\tfinal I_C_Async_Batch_Type asyncBatchType = asyncBatchBL.getAsyncBatchType(AsyncBatchType.C_ORDER_MFG_SHIPMENT_SCHEDULE_CREATION);\n\tfinal I_C_Async_Batch_Type asyncBatchType_MFGWarehouse = asyncBatchBL.getAsyncBatchType(AsyncBatchType.C_ORDER_MFG_SHIPMENT_SCHEDULE_CREATION_MFG_WAREHOUSE);\n\n\tfinal AsyncBatchId asyncBatchId = AsyncBatchId.ofRepoId(asyncBatch.getC_Async_Batch_ID());\n\n\tfinal List<I_C_Async_Batch_Type> asyncBatchTypes = ImmutableList.of(asyncBatchType, asyncBatchType_MFGWarehouse);\n\tasyncBatchBL.enqueueAsyncBatch(asyncBatchTypes, asyncBatchId, orderRecord);\n\n\taddLog(orderRecord, asyncBatchId, X_C_Async_Batch.STATUS_Enqueued, null);\n}", "CodeBleu_score": 38.26413791529634}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\tfinal I_C_Async_Batch asyncBatch = asyncBatchBL.createAsyncBatch()\n\t\t\t\t.setContext(getTrxName())\n\t\t\t\t.setC_Async_Batch_Type(AsyncBatchType.C_ORDER_MFG_SHIPMENT_SCHEDULES)\n\t\t\t\t.setC_Async_Batch_Template_ID(AsyncBatchTemplateId.C_ORDER_MFG_SHIPMENT_SCHEDULES.getRepoId())\n\t\t\t\t.setAD_PInstance_Creator_ID(Env.getAD_PInstance_Creator_ID())\n\t\t\t\t.build();\n\n\t\torderRecord.setC_Async_Batch_ID(asyncBatch.getC_Async_Batch_ID());\n\t\tInterfaceWrapperHelper.save(orderRecord);\n\n\t\tfinal String message = StringUtils.formatMessage(\"Created Async Batch {} for order {}\", asyncBatch.getValue(), orderRecord.getDocumentNo());\n\t\taddLog(orderRecord, message);\n\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n\telse\n\t{\n\t\tfinal String message = StringUtils.formatMessage(\"Order {} is eligible for auto processing\", orderRecord.getDocumentNo());\n\t\taddLog(orderRecord, message);\n\n\t\tfinal String trxName = getTrxName();\n\t\tServices.get(ITrxManager.class).runAfterCommit(this::enqueue, trxName);\n\t}\n}", "CodeBleu_score": 45.71708351018301}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t) {\n$this->limiter->increment($request, $this->maxAttempts);\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\n/**\n * Get the rate limiter instance.\n */\npublic function getLimiter(): RateLimiter {\nreturn $this->limiter;\n}\n\n/**\n * Get the maximum number of attempts to allow.\n */\npublic function getMaxAttempts(): int {\nreturn $this->maxAttempts;\n}\n\n/**\n * Get the decay time for the throttle.\n */\npublic function getDecayMinutes(): int {\nreturn $this->decayMinutes;\n}\n}", "CodeBleu_score": 45.20817864386878}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t,\n    $this->limiter->increment($request);\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 91.08599285871377}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t", "CodeBleu_score": 6.451612903225811}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = User::find($request->session()->get('login.id'));\n\n$data = [\n'user' => $user,\n'username' => $user->username,\n'email' => $user->email,\n];\n\nif ($user->two_factor_secret && ! is_null($user->two_factor_confirmed_at)) {\n$request->session()->put('login.remember', $request->filled('remember'));\n\n$request->session()->put('login.id', $user->id);\n\n$request->session()->put('login.username', $user->username);\n\n$request->session()->put('login.email', $user->email);\n\n$data['twoFactor'] = true;\n\n$data['publicKey'] = Webauthn::generateAssertion(\n$user->two_factor_secret,\n$request->session()->get('login.id'),\n$request->session()->get('login.username'),\n$request->session()->get('login.email'),\n$request->session()->get('login.remember')\n);\n}\n\nreturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n'remember' => $request->session()->get('login.remember'),\n])->toResponse($request);\n}", "CodeBleu_score": 58.10886987733317}, {"code": "<?\npublic function toResponse($request){\n\t$userId = $request->session()->get('login.id');\n$user = User::find($userId);\n$data = [\n'user' => $user,\n'url' => url('login.two-factor.verify'),\n];\nif ($user && $user->two_factor_secret && ! is_null($user->two_factor_confirmed_at)) {\n$publicKey = $request->session()->get('login.publicKey');\n$assertion = Webauthn::prepareAssertion($publicKey, $user->two_factor_secret, $request->session()->get('login.challenge'), $request->ip());\n$data = $data + [\n'assertion' => $assertion,\n'twoFactor' => true,\n'remember' => $request->session()->get('login.remember'),\n];\n}\nreturn Inertia::render('Auth/TwoFactorChallenge', $data);\n}", "CodeBleu_score": 53.05820305295752}, {"code": "<?\npublic function toResponse($request){\n\t// Retrieve the user ID from the session\n$id = $request->session()->get('login.id');\n\n// Retrieve the user\n$user = User::find($id);\n\n// Prepare a WebAuthn assertion\n$assertion = Webauthn::prepareAssertion($request, $user);\n\n// Include the user's public key in the response data\n$data = [\n'publicKey' => $user->webauthn_key_id,\n'assertion' => $assertion,\n];\n\n// Render the 'TwoFactorChallenge' view\nreturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n'remember' => $request->session()->get('login.remember'),\n])->toResponse($request);\n}", "CodeBleu_score": 72.865070980278}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\n$user = $this->getUserOrCreate($socialite);\n$this->checkUserAssociation($request, $user, $driver);\n$token = $this->createUserToken($user, $driver, $socialite);\n\nAuth::login($user, $request->filled('remember'));\n$request->session()->put('token', $token);\n\nreturn $user;\n}", "CodeBleu_score": 35.70231522144768}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t//    $this->checkProviderIsSupported($driver);\n//    $user = $this->getUserOrCreate($socialite);\n//    $this->checkUserAssociation($request, $user, $driver);\n//    $token = $this->createUserToken($user, $driver, $socialite);\n//\n//    Auth::login($user, $request->filled('remember'));\n//\n//    return $user;\n}", "CodeBleu_score": 10.165360998795467}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t// Retrieve the user token for the given driver and socialite user ID.\n$userToken = UserToken::firstWhere([\n'driver' => $driver,\n'driver_id' => $socialite->getId()\n]);\n\n// If a user token was found, retrieve the associated user.\nif ($userToken) {\n$user = $userToken->user;\n// Verify the user association.\n$this->checkUserAssociation($request, $user, $driver);\n} else {\n// Create a new user or associate the socialite token with an existing user.\n$user = $this->getUserOrCreate($socialite);\n$userToken = $this->createUserToken($user, $driver, $socialite);\n}\n\n// Authenticate the user.\nAuth::login($user, $this->getRememberUser($request));\n\nreturn $user;\n}", "CodeBleu_score": 59.583752412783284}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\n$user = $this->retrieveUser($request);\nif (is_null($user)) {\n    return false;\n}\n\n$credentials = $this->filterCredentials($request);\n\n$this->webauthn->validateAssertion($user, $credentials);\n\n$this->fireSuccessfulEvent($request, $user);\n\nreturn true;\n}", "CodeBleu_score": 39.23959556604881}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $request->user();\n\tif (is_null($user)) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentials($request);\n\tif (! $this->validateAssertion($user, $credentials)) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\t$this->throwFailedAuthenticationException($request);\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 62.544892772669215}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\n$this->validate($request, [\n    'id' => 'required|string',\n    'rawId' => 'required|string',\n    'response' => 'required|string',\n    'type' => 'required|string',\n]);\n\n$user = $request->user();\nif (! $user) {\n    return false;\n}\n\n$credentials = $this->filterCredentials($request);\n\nif (! WebauthnFacade::validateAssertion($credentials, $user)) {\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n\n    return false;\n}\n\nreturn true;\n}", "CodeBleu_score": 63.75378026793298}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\nif (empty($email)) {\n$this->error('Please provide an email address');\nreturn null;\n}\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('No user found with that email address');\nreturn null;\n}\n}", "CodeBleu_score": 70.98465928776334}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\nif (!$email) {\n$this->error('No email address provided.');\nreturn null;\n}\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found.');\nreturn null;\n}\n}", "CodeBleu_score": 65.09340440637763}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\nif (empty($email)) {\n$this->error('Email is required.');\nreturn null;\n}\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found.');\nreturn null;\n}\n}", "CodeBleu_score": 64.23385666528164}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t$this->info('Flushing Scout indexes...');\nforeach (config('scout.algolia.indices') as $index) {\n$this->artisan(\"Flushing index [{$index}]...\", 'scout:flush', ['model' => $index]);\n}\n$this->info('Scout indexes flushed.');\n}", "CodeBleu_score": 25.335609457038018}, {"code": "<?\nprotected function scoutFlush(): void{\n\t", "CodeBleu_score": 1.25}, {"code": "<?\nprotected function scoutFlush(): void{\n\t", "CodeBleu_score": 1.25}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\t$this->applyExporters($vcard, $resource);\n\treturn $vcard;\n}", "CodeBleu_score": 13.427276730428956}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $resource->read();\n\tif ($vcard === null) {\n\t\t$vcard = new VCard();\n\t}\n\t$vcard->uid = $vcard->uid ?? $resource->getUid();\n\t$vcard->url = $vcard->url ?? $resource->getUrl();\n\t$vcard->source = $vcard->source ?? $this->getSource($resource);\n\t$vcard->name = $vcard->name ?? $resource->getName();\n\t$vcard->description = $vcard->description ?? $resource->getDescription();\n\t$vcard->emails = $vcard->emails ?? $resource->getEmails();\n\t$vcard->phones = $vcard->phones ?? $resource->getPhones();\n\t$vcard->addresses = $vcard->addresses ?? $resource->getAddresses();\n\t$vcard->socials = $vcard->socials ?? $resource->getSocials();\n\t$vcard->bday = $vcard->bday ?? $resource->getBday();\n\t$vcard->anniversary = $vcard->anniversary ?? $resource->getAnniversary();\n\t$vcard->photo = $vcard->photo ?? $resource->getPhoto();\n\t$vcard->logo = $vcard->logo ?? $resource->getLogo();\n\t$vcard->categories = $vcard->categories ?? $resource->getCategories();\n\t$vcard->urls = $vcard->urls ?? $resource->getUrls();\n\t$vcard->exporters = $vcard->exporters ?? $this->exporters(get_class($resource));\n\t$vcard->exporters->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard));\n\treturn $vcard;\n}", "CodeBleu_score": 36.750571944464355}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\t$vcard = $this->applyExporters($vcard, $resource);\n\treturn $vcard;\n}", "CodeBleu_score": 15.315363668375001}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t(1)\n    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if (is_null($obj)) {\n        return false;\n    }\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 83.00943524753337}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t()\n    $addressBook = AddressBook::where('account_id', $this->user->account_id)\n        ->where('id', $addressBookId)\n        ->first();\n\n    if (!$addressBook) {\n        return false;\n    }\n\n    $card = Card::where('account_id', $this->user->account_id)\n        ->where('address_book_id', $addressBookId)\n        ->where('uri', $cardUri)\n        ->first();\n\n    if (!$card) {\n        return false;\n    }\n\n    if ($card->type === 'contact') {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $card->vault_id,\n            'contact_id' => $card->id,\n        ])->onQueue('high');\n    } else if ($card->type === 'group') {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $card->vault_id,\n            'group_id' => $card->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 56.14604784209229}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t(Session: 1577216106.260.159)\n$obj = $this->getObject($addressBookId, $cardUri);\nif ($obj instanceof Contact) {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\n} elseif ($obj instanceof Group) {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\n} else {\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 75.62191110965313}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn false;\n}\n$leadActivity = $this->create($data);\n$leadActivity->file()->create([\n'name' => request()->file('file')->getClientOriginalName(),\n'storage_path' => request()->file('file')->store('lead_activities', 'public'),\n]);\nreturn $leadActivity;\n}", "CodeBleu_score": 28.30754700807974}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn;\n}\n$leadActivity = $this->activityRepository->create($data);\n$file = $leadActivity->file()->create([\n'name' => request()->file('file')->getClientOriginalName(),\n'storage_path' => request()->file('file')->store('uploads', 'public'),\n]);\nreturn $file;\n}", "CodeBleu_score": 47.817981774680504}, {"code": "<?\npublic function upload(array $data){\n\t// Check if a file is included in the request. If not, return immediately.\nif (! request()->hasFile('file')) {\nreturn;\n}\n// Create a lead activity record with details from the provided data and the authenticated user.\n$leadActivity = $this->activityRepository->create($data, auth()->guard()->user());\n// Create and return a new record with the file's name and storage path, associating it with the created lead activity.\nreturn [\n'file' => [\n'name' => request()->file('file')->getClientOriginalName(),\n'storage_path' => request()->file('file')->store('public/uploads/lead_activities')\n],\n'lead_activity' => $leadActivity\n];\n}", "CodeBleu_score": 44.30535064452027}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\n}", "CodeBleu_score": 5.85509506350618}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$this->exception = $exception;\n\n$this->statusCode = $exception->getStatusCode();\n\nif (request()->is('admin*')) {\n$this->statusCode = 404;\n}\n\nif (request()->is('api*')) {\n$this->statusCode = 500;\n}\n\n$this->route = request()->route()->getName();\n\nif (request()->is('admin*')) {\nif ($this->statusCode == 404 && $this->routeIs('admin.session.create')) {\nreturn redirect()->route('admin.session.create');\n}\n}\n\nif ($this->statusCode == 404) {\nif (request()->is('api*')) {\nreturn $this->response('api', 404);\n}\n\nreturn $this->response('shop', 404);\n}\n\nif ($this->statusCode == 401) {\nif (request()->is('api*')) {\nreturn $this->response('api', 401);\n}\n\nreturn $this->response('shop', 401);\n}\n\nif ($this->statusCode == 403) {\nif (request()->is('api*')) {\nreturn $this->response('api', 403);\n}\n\nreturn $this->response('shop', 403);\n}\n\nif ($this->statusCode == 405) {\nif (request()->is('api*')) {\nreturn $this->response('api', 405);\n}\n\nreturn $this->response('shop', 405);\n}\n\nif ($this->statusCode == 500) {\nif (request()->is('api*')) {\nreturn $this->response('api', 500);\n}\n\nreturn $this->response('shop', 500);\n}\n\nif ($this->statusCode == 404 && in_array($this->route, ['admin.session.create', 'admin.session.destroy'])) {\nreturn redirect()->route('admin.session.create');\n}\n\nreturn $this->response('shop', 500);\n}", "CodeBleu_score": 30.589959061558382}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\n}", "CodeBleu_score": 5.85509506350618}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode]) ? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 91.60501426817184}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode]) ? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 91.60501426817184}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 91.60501426817184}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activityIds = request()->input('activity_ids');\n$isDone = request()->input('is_done');\n$count = 0;\nforeach ($activityIds as $activityId) {\n$activity = $this->activityRepository->find($activityId);\n$activity->is_done = $isDone;\n$activity->save();\nevent(new ActivityWasUpdated($activity));\n$count++;\n}\nreturn response()->json(['success' => true, 'count' => $count]);\n}", "CodeBleu_score": 35.29405418843036}, {"code": "<?\npublic function massUpdate(){\n\t$ids = $this->request->input('ids');\n$updates = 0;\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\nEvent::dispatch('activity.updating', [$activity]);\n$activity->is_done = $this->request->input('is_done');\n$activity->save();\nEvent::dispatch('activity.updated', [$activity]);\n$updates++;\n}\nreturn response()->json(['success' => true, 'message' => 'Updated ' . $updates . ' activities.']);\n}", "CodeBleu_score": 36.30769480591055}, {"code": "<?\npublic function massUpdate(){\n\t$ids = request('ids');\n$count = 0;\n$is_done = request('is_done');\nforeach($ids as $id) {\n$activity = $this->activityRepository->find($id);\nevent(new ActivityUpdated($activity));\n$activity->update(['is_done' => $is_done]);\nevent(new ActivityUpdated($activity));\n$count++;\n}\nreturn response()->json(['success' => true, 'updated' => $count]);\n}", "CodeBleu_score": 31.10299340951656}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$this->activityRepository->massDestroy(request('ids'));\nreturn response(null, Response::HTTP_NO_CONTENT);\n}", "CodeBleu_score": 12.912721104930986}, {"code": "<?\n public function massDestroy(){\n\t$this->authorize('delete', Activity::class);\n$ids = request('ids');\n$ids = explode(',', $ids);\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\nif ($activity) {\n$this->activityRepository->delete($id);\n$this->activityRepository->pushCriteria(new RequestCriteria($request));\n$this->activityRepository->pushCriteria(new LimitOffsetCriteria($request));\n}\n}\n$this->activityRepository->resetScope();\nreturn response()->json(['message' => trans('global.deleted')]);\n}", "CodeBleu_score": 27.819157343272327}, {"code": "<?\n public function massDestroy(){\n\t$this->activityRepository->massDestroy(request('ids'));\nreturn response(null, Response::HTTP_NO_CONTENT);\n}", "CodeBleu_score": 12.912721104930986}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n$requestData = request()->all();\nforeach ($cards as $card) {\nif (isset($requestData[$card['id']])) {\n$card['selected'] = $requestData[$card['id']];\n}\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 38.06510840023343}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n$requestData = request()->all();\nforeach ($cards as $card) {\nif (isset($requestData[$card->id])) {\n$card->selected = $requestData[$card->id];\n$card->save();\n}\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 34.33419054579977}, {"code": "<?\n public function updateCards(){\n\t $cards = $this->getCards();\n $requestData = request()->all();\n foreach ($cards as $card) {\n if (isset($requestData[$card['id']])) {\n $card['selected'] = $requestData[$card['id']];\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 35.95178189181668}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t$this->dispatch(new ConfigurationIsCreating($configuration = $this->configurationRepository->create(request()->all())));\n\n$this->flashSuccess(trans('admin/configuration/message.create.success'));\n\nreturn redirect()->back();\n}", "CodeBleu_score": 35.72559745902287}, {"code": "<?\npublic function store(){\n\t$this->event->dispatch('configuration.create.before');\n$configuration = $this->configurationRepository->create($this->request->all());\n$this->event->dispatch('configuration.create.after', $configuration);\n\n$this->session->flash('success', trans('response.success.create', ['name' => 'Configuration']));\n\nreturn redirect()->back();\n}", "CodeBleu_score": 33.82976664903764}, {"code": "<?\npublic function store(){\n\t// dispatch the event\nEvent::dispatch('configuration.creating', array($this->request->all()));\n// create the configuration\n$configuration = $this->configurationRepository->create($this->request->all());\n// dispatch the event\nEvent::dispatch('configuration.created', array($configuration));\n// flash a success message\nflash()->success(trans('configuration::configuration.messages.created'));\n// redirect to the previous page\nreturn redirect()->back();\n}", "CodeBleu_score": 34.96368077517692}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/' . $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 87.13303462207247}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/' . $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 87.13303462207247}, {"code": "<?\npublic function download(){\n\t\n$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.98612804233142}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\nList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n\nfor (String sortString : list) {\n\nString[] sortParts = sortString.split(\",\");\n\nAdminModelSort modelSort = new AdminModelSort();\n\nmodelSort.setSort(sortParts[0]);\nmodelSort.setType(sortParts[1]);\n\nsortList.add(modelSort);\n\n}\n\nadminService.setHeaderModelSort(getUserId(), sortList);\n\nreturn ok();\n\n}", "CodeBleu_score": 26.66904558561835}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSortList = new ArrayList<AdminModelSort>();\n\tfor (String modelName : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setModel(modelName);\n\t\tmodelSort.setSort(0);\n\t\tmodelSort.setType(\"ASC\");\n\t\tmodelSortList.add(modelSort);\n\t}\n\treturn adminService.setHeaderModelSort(modelSortList, userId);\n}", "CodeBleu_score": 27.980545161544384}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tResult result = new Result();\n\tList<AdminModelSort> modelSorts = new ArrayList<AdminModelSort>();\n\tAdminModelSort modelSort;\n\tfor (String modelName : list) {\n\t\tmodelSort = new AdminModelSort();\n\t\tmodelSort.setSort(0);\n\t\tmodelSort.setType(AdminModelSort.TYPE_ASC);\n\t\tmodelSort.setModel(modelName);\n\t\tmodelSorts.add(modelSort);\n\t}\n\tadminService.removeUserModelSort(userId);\n\tadminService.saveBatchUserModelSort(modelSorts);\n\tresult.setSuccess(true);\n\treturn result;\n}", "CodeBleu_score": 34.067767855779806}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t // Get the user's ID from the session\n String userId = (String) session.getAttribute(\"userId\");\n // Get the user's configuration by the provided key\n UserConfig userConfig = userConfigService.queryUserConfigByName(userId, customKey);\n // If the configuration exists, update its value with the provided JSON\n if (userConfig != null) {\n userConfig.setValue(json.toJSONString());\n userConfigService.updateById(userConfig);\n }\n // If the configuration does not exist, create a new user configuration with the provided JSON and save it\n else {\n userConfig = new UserConfig();\n userConfig.setName(customKey);\n userConfig.setValue(json.toJSONString());\n userConfig.setUserId(userId);\n userConfigService.save(userConfig);\n }\n return Result.ok();\n }", "CodeBleu_score": 61.61762801284005}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t UserConfig userConfig = new UserConfig();\n userConfig.setCustomKey(customKey);\n userConfig.setUserId(getUserId());\n userConfig.setValue(json.toJSONString());\n UserConfig userConfig1 = userConfigService.queryUserConfigByName(userConfig);\n if (userConfig1 != null) {\n userConfig1.setValue(json.toJSONString());\n userConfig1.updateById();\n } else {\n userConfig.setValue(json.toJSONString());\n userConfigService.save(userConfig);\n }\n return Result.ok();\n }", "CodeBleu_score": 52.673427110398286}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\nJSONObject jsonObj = json.getJSONObject(0);\n\nString value = jsonObj.getString(\"value\");\n\nString userId = jsonObj.getString(\"userId\");\n\nUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\nif (userConfig == null) {\n\nUserConfig newUserConfig = new UserConfig();\n\nnewUserConfig.setUserId(userId);\n\nnewUserConfig.setName(customKey);\n\nnewUserConfig.setValue(value);\n\nuserConfigService.save(newUserConfig);\n\n} else {\n\nuserConfig.setValue(value);\n\nuserConfig.setUserId(userId);\n\nuserConfigService.updateById(userConfig);\n\n}\n\nreturn new Result(true, StatusCode.OK, \"successful\", null);\n\n}", "CodeBleu_score": 49.692239009923036}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"User not found\");\n\t}\n\tuser.setDeptName(deptService.getDeptNameById(user.getDeptId()));\n\tuser.setSalt(null);\n\tuser.setPassword(<PASSWORD>);\n\treturn Result.ok(user);\n}", "CodeBleu_score": 40.598722863804284}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tResult<AdminUser> result = new Result<>();\n\ttry {\n\t\tAdminUser user = adminUserService.queryById(userId);\n\t\tif (user == null) {\n\t\t\tresult.setCode(ResultCode.Fail);\n\t\t\tresult.setMessage(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t\t\treturn result;\n\t\t}\n\t\tString deptName = adminUserService.getDeptNameByDeptId(user.getDeptId());\n\t\tuser.setDeptName(deptName);\n\t\tuser.setSalt(null);\n\t\tuser.setPassword(<PASSWORD>);\n\t\tresult.setData(user);\n\t\tresult.setCode(ResultCode.Success);\n\t\tresult.setMessage(\"\u67e5\u8be2\u6210\u529f\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tresult.setCode(ResultCode.Fail);\n\t\tresult.setMessage(\"\u67e5\u8be2\u5931\u8d25\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 46.95663141466744}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.getUserById(userId);\nif (user == null) {\nreturn Result.error(\"User not found\");\n}\n\nString deptName = adminUserService.getDeptName(user.getDeptId());\nuser.setDeptName(deptName);\nuser.setSalt(null);\nuser.setPassword(null);\nreturn Result.ok(user);\n}", "CodeBleu_score": 49.82067478222191}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\t// get the current user's ID\n\tString userId = getUserId();\n\t// create a query to find all \"readNotice\" entries for the current user\n\tQuery query = new Query(Notice.class).setAncestor(Notice.getNoticeParent()).setFilter(new Query.FilterPredicate(\"userId\", Query.FilterOperator.EQUAL, userId));\n\t// execute the query\n\tList<Notice> notices = query.fetch();\n\t// if there are more than one \"readNotice\" entry for the current user, update the status to 1 for all matching entries\n\tif (notices.size() > 1) {\n\t\tfor (Notice notice : notices) {\n\t\t\tnotice.setStatus(1);\n\t\t\tnotice.save();\n\t\t}\n\t}\n\t// otherwise, create a new \"readNotice\" entry with status 1 and save it\n\telse {\n\t\tNotice notice = new Notice();\n\t\tnotice.setUserId(userId);\n\t\tnotice.setStatus(1);\n\t\tnotice.save();\n\t}\n\t// return a success result\n\treturn ok();\n}", "CodeBleu_score": 31.022322628315603}, {"code": " public Result readNotice() {\n\t\n// Retrieve the current user's ID.\nString userId = getUserId();\n\n// Retrieve all \"readNotice\" entries for the current user.\nList<Notice> notices = Notice.where(Notice.userId.eq(userId)).find();\n\n// Check if there are multiple \"readNotice\" entries for the current user.\nif (notices.size() > 1) {\n\n// Update the status to 1 for all matching entries.\nfor (Notice notice : notices) {\nnotice.setStatus(1);\nnotice.save();\n}\n}\n\n// If not, create a new \"readNotice\" entry with status 1 and save it.\nelse {\nNotice notice = new Notice();\nnotice.setUserId(userId);\nnotice.setStatus(1);\nnotice.save();\n}\n\n// Return a success result.\nreturn ok();\n}", "CodeBleu_score": 25.302434590444417}, {"code": " public Result readNotice() {\n\t\n// Get the current user ID\nString userId = getUserId();\n\n// Create a query to retrieve all \"readNotice\" entries for the current user\nQuery q = new Query(\"readNotice\");\nq.addFilter(\"userId\", Query.FilterOperator.EQUAL, userId);\n\n// Retrieve all \"readNotice\" entries for the current user\nList<Entity> notices = datastore.prepare(q).asList(FetchOptions.Builder.withDefaults());\n\n// If there are multiple \"readNotice\" entries for the current user, update the status to 1 for all matching entries\nif (notices.size() > 1) {\nfor (Entity notice : notices) {\nnotice.setProperty(\"status\", 1);\ndatastore.put(notice);\n}\n}\n\n// If there are no \"readNotice\" entries for the current user, create a new \"readNotice\" entry with status 1 and save it\nelse if (notices.size() == 0) {\nEntity notice = new Entity(\"readNotice\");\nnotice.setProperty(\"userId\", userId);\nnotice.setProperty(\"status\", 1);\ndatastore.put(notice);\n}\n\n// Return a success result\nreturn ok();\n}", "CodeBleu_score": 28.154112790170306}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tList<AdminConfigBO> adminConfigBOs = adminConfigService.findAll();\n\tAdminConfigBO companyInfoConfig = null;\n\tfor (AdminConfigBO adminConfigBO : adminConfigBOs) {\n\t\tif (adminConfigBO.getName().equals(\"companyInfo\")) {\n\t\t\tcompanyInfoConfig = adminConfigBO;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (companyInfoConfig == null) {\n\t\tcompanyInfoConfig = new AdminConfigBO();\n\t\tcompanyInfoConfig.setName(\"companyInfo\");\n\t\tcompanyInfoConfig.setValue(\"{}\");\n\t\tcompanyInfoConfig = adminConfigService.save(companyInfoConfig);\n\t}\n\tcompanyInfoConfig.setValue(adminCompanyBO.toJSONString());\n\tadminConfigService.save(companyInfoConfig);\n}", "CodeBleu_score": 36.27864351331143}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// Get the existing company info configuration\n\tAdminConfig adminConfig = adminConfigService.getConfigByName(\"companyInfo\");\n\tif (adminConfig == null) {\n\t\t// Create a new company info configuration\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t\tadminConfig.setValue(\"{}\");\n\t\tadminConfig.setDescription(\"Company information\");\n\t\tadminConfigService.saveOrUpdate(adminConfig);\n\t}\n\t// Update the company info configuration\n\tadminConfig.setValue(adminCompanyBO.toJSONString());\n\tadminConfigService.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 46.03534544252632}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfigService adminConfigService = (AdminConfigService) ServiceUtil.getService(\"adminConfigService\", request);\n\tif (adminCompanyBO == null) {\n\t\tadminCompanyBO = new AdminCompanyBO();\n\t}\n\tAdminConfig adminConfig = null;\n\ttry {\n\t\tadminConfig = adminConfigService.getAdminConfig(\"companyInfo\");\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while getting company info admin config\", e);\n\t}\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t}\n\tadminConfig.setValue(adminCompanyBO.toJSONString());\n\ttry {\n\t\tadminConfigService.saveOrUpdate(adminConfig);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while saving company info admin config\", e);\n\t}\n}", "CodeBleu_score": 48.18104663694924}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString adminConfig = null;\n\ttry {\n\t\tadminConfig = getValue(AdminConfigKey.ADMIN_CONFIG_KEY.getKey());\n\t} catch (Exception e) {\n\t\t// do nothing\n\t}\n\tif (adminConfig != null) {\n\t\ttry {\n\t\t\tadminCompanyBO = parseObject(adminConfig, AdminCompanyBO.class);\n\t\t} catch (Exception e) {\n\t\t\t// do nothing\n\t\t}\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 47.27604642686303}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\ttry {\n\t\t// Query the admin configuration for the company\n\t\tAdminConfiguration adminConfig = (AdminConfiguration) this.getEntityManager().createNamedQuery(\"AdminConfiguration.getByKey\").setParameter(\"key\", \"company\").getSingleResult();\n\t\t// If the admin configuration is found, parse the value into an AdminCompanyBO object\n\t\tif (adminConfig != null && adminConfig.getValue() != null) {\n\t\t\tadminCompany = (AdminCompanyBO) JSON.parse(adminConfig.getValue());\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 47.10814118333151}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString query = \"SELECT * FROM admin_company WHERE key = 'company_config'\";\n\ttry {\n\t\tQueryRunner queryRunner = new QueryRunner(dataSource);\n\t\tResultSet rs = queryRunner.query(query, new MapListHandler());\n\t\tif (rs.next()) {\n\t\t\tString value = rs.getString(\"value\");\n\t\t\tadminCompanyBO = parseObject(value, AdminCompanyBO.class);\n\t\t}\n\t} catch (SQLException e) {\n\t\te.printStackTrace();\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 46.22557565982612}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig.list( \"LogModule\", null, null ).forEach( new Operation() {\n public void execute( Object obj ) {\n AdminConfig.remove( obj );\n }\n } );\n for ( String string : stringList ) {\n AdminConfig.create( \"LogModule\", string );\n }\n AdminConfig.save();\n }", "CodeBleu_score": 21.618590759691937}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig[] adminConfigs = new AdminConfig[stringList.size()];\n int i = 0;\n for (String string : stringList) {\n AdminConfig adminConfig = AdminConfig.getid(\"/Log/\"+string);\n adminConfig.create();\n adminConfig.set(\"level\", \"10\");\n adminConfig.set(\"logType\", \"1\");\n adminConfig.set(\"message\", string);\n adminConfigs[i] = adminConfig;\n i++;\n }\n AdminConfig.remove(\"/Log/\"+getLogConfigName());\n AdminConfig.save(adminConfigs);\n }", "CodeBleu_score": 32.8837513470458}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig.list( \"LogConfig\", \"*\").forEach(new Operation() {\n public void execute(Object object) {\n try {\n String logConfigName = (String) AdminConfig.showAttribute(object, \"name\");\n if (logConfigName.equals(\"com.ibm.ws.webcontainer.webapp.WebApp\")) {\n AdminConfig.remove(object);\n }\n } catch (Exception e) {\n // do nothing\n }\n }\n });\n for (String string : stringList) {\n AdminConfig.create(\"LogConfig\", \"[-name \" + string + \" -module com.ibm.ws.webcontainer.webapp.WebApp -class com.ibm.ws.webcontainer.webapp.WebApp -level info -custom true -properties [[name com.ibm.ws.webcontainer.webapp.WebApp.welcomeFiles][value [index.html]]]]\");\n }\n AdminConfig.save();\n }", "CodeBleu_score": 31.170373638232928}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// Retrieve the user's ID and details\n\tString userId = adminInitDataBO.getUserId();\n\tAdmin admin = adminDAO.getById(userId);\n\tString username = admin.getUsername();\n\tString salt = admin.getSalt();\n\tString password = <PASSWORD>InitDataBO.getPassword();\n\n\t// Check the password\n\tif (!password.equals(passwordEncoder.encode(username + salt + password))) {\n\t\tthrow new IllegalArgumentException(\"Invalid password\");\n\t}\n\n\t// Generate a temporary access code\n\tString accessCode = generateRandomString();\n\n\t// Store the access code in Redis\n\tString key = \"accessCode:\" + accessCode;\n\tredis.setex(key, 600, userId);\n\n\treturn accessCode;\n}", "CodeBleu_score": 32.509904522414296}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\tString salt = adminInitDataBO.getSalt();\n\tString hashedPassword = getPassword(username, salt);\n\tif (!hashedPassword.equals(password)) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\tString userId = getUserId(username);\n\tString randomString = getRandomString();\n\tsetex(userId, randomString, 600);\n\treturn randomString;\n}", "CodeBleu_score": 28.123562626685484}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\tString salt = adminInitDataBO.getSalt();\n\n\t// Get the user ID and user details from the database.\n\tUserBO userBO = userDAO.getById(username);\n\tString userId = userBO.getId();\n\tString storedPassword = userBO.getPassword();\n\n\t// Check the provided password against the stored password.\n\tif (!verify(password, storedPassword, salt)) {\n\t\tthrow new InvalidPasswordException(\"Invalid password.\");\n\t}\n\n\t// Generate a temporary access code.\n\tString accessCode = generateRandomString();\n\n\t// Store the access code in Redis with a 10-minute expiration.\n\tredis.setex(userId, accessCode, 600);\n\n\t// Return the access code.\n\treturn accessCode;\n}", "CodeBleu_score": 31.53050069761764}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\t// Get the user ID.\n\tString userId = getUserId();\n\t// Construct a key.\n\tString key = \"unauthorized-menu-urls:\" + userId;\n\t// Fetch the list of unauthorized menu URLs from Redis.\n\tSet<String> unauthorizedUrls = getRedis().smembers(key);\n\t// If the initial authentication URL is in the list, it means no authorization.\n\tif (unauthorizedUrls.contains(INIT_AUTH_URL)) {\n\t\treturn true;\n\t}\n\t// Otherwise, it means authorization.\n\treturn false;\n}", "CodeBleu_score": 29.574550340957583}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"initAuth:\" + userId;\n\tList<String> unauthUrls = getRedis().lrange(key, 0, -1);\n\tboolean authorized = true;\n\tfor (String unauthUrl : unauthUrls) {\n\t\tif (unauthUrl.equals(getInitAuthUrl())) {\n\t\t\tauthorized = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn authorized;\n}", "CodeBleu_score": 33.547210648443006}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized_menu_urls:\" + userId;\n\tSet<String> unauthorizedMenuUrls = getRedis().smembers(key);\n\treturn unauthorizedMenuUrls.contains(INIT_AUTH_URL);\n}", "CodeBleu_score": 27.756432484883454}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tsaveBatch(roleMenuList);\n}", "CodeBleu_score": 53.25343747517651}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (roleId == null || menuIdList == null || menuIdList.isEmpty()) {\n\t\treturn;\n\t}\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tsaveBatch(roleMenuList);\n}", "CodeBleu_score": 46.05549426936057}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (roleId == null || menuIdList == null || menuIdList.size() == 0) {\n\t\treturn;\n\t}\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(roleMenuList);\n}", "CodeBleu_score": 45.697732391895876}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> sourceMap = BeanUtil.beanToMap(sysLog);\nsourceMap.put(\"createTime\", DateUtil.formatDateTime(sysLog.getCreateTime()));\nsourceMap.remove(\"id\");\nIndexRequest indexRequest = new IndexRequest(index).source(sourceMap);\ntry {\nrestHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n@Override\npublic void onResponse(IndexResponse indexResponse) {\nlog.info(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u6210\u529f,id:{}\", indexResponse.getId());\n}\n\n@Override\npublic void onFailure(Exception e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25,msg:{}\", e.getMessage());\n}\n});\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 58.51553491295799}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t//        String index = getSysLogIndex();\n        String index = getIndexAliases(SYS_LOG_TYPE);\n        Map<String, Object> source = beanToMap(sysLog);\n        source.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        source.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(source);\n        try {\n            restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n                @Override\n                public void onResponse(IndexResponse indexResponse) {\n                    log.info(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u6210\u529f,id:{}\", indexResponse.getId());\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25,msg:{}\", e.getMessage());\n                }\n            });\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 50.63667006309267}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tIndexRequest indexRequest = new IndexRequest(getSysLogIndex());\nindexRequest.id(sysLog.getId());\ntry {\nMap<String, Object> source = beanToMap(sysLog);\nsource.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\nsource.remove(\"id\");\nindexRequest.source(source);\nrestHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n@Override\npublic void onResponse(IndexResponse indexResponse) {\nlog.info(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u6210\u529f,id:{}\", sysLog.getId());\n}\n@Override\npublic void onFailure(Exception e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25,id:{},msg:{}\", sysLog.getId(), e.getMessage());\n}\n});\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,id:{},msg:{}\", sysLog.getId(), e.getMessage());\n}\n}", "CodeBleu_score": 50.42859645441153}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// 1. Initialize the search criteria\nSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n// 2. Sort the results by creation time in descending order\nsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n// 3. Exclude specific fields from the response\nsearchSourceBuilder.exclude(\"hits.hits._source.password\");\n// 4. Execute the search request using a REST client\nSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\nsearchRequest.source(searchSourceBuilder);\ntry {\n    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    // 5. Map the search results to SysLog objects\n    SearchHit[] hits = searchResponse.getHits().getHits();\n    List<SysLog> sysLogList = new ArrayList<>();\n    for (SearchHit hit : hits) {\n        SysLog sysLog = mapToBean(hit.getSourceAsMap());\n        sysLogList.add(sysLog);\n    }\n    // 6. Populate a BasePage object with the results, including total hits and current page\n    return new BasePage<>(sysLogList, searchResponse.getHits().getTotalHits().value, querySysLogBO.getPage());\n} catch (IOException e) {\n    log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    return null;\n}\n}", "CodeBleu_score": 51.99136090680945}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// Initialize the search criteria.\nSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n// Sort the results by creation time in descending order.\nsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n// Exclude specific fields from the response.\nsearchSourceBuilder.fetchSource(false, \"model\", \"subModelLabel\", \"userId\", \"loginTime\", \"ip\", \"ipLocation\", \"browser\", \"os\", \"remark\", \"createTime\");\n// Execute the search request using a REST client.\nSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\nsearchRequest.source(searchSourceBuilder);\ntry {\n    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    // Map the search results to SysLog objects.\n    SearchHit[] searchHits = searchResponse.getHits().getHits();\n    List<SysLog> sysLogList = Arrays.stream(searchHits).map(searchHit -> mapToBean(searchHit, SysLog.class)).collect(Collectors.toList());\n    // Populate a BasePage object with the results, including total hits and current page.\n    return new BasePage<>(sysLogList, searchResponse.getHits().getTotalHits().value, querySysLogBO.getPage());\n} catch (IOException e) {\n    log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    return new BasePage<>();\n}\n}", "CodeBleu_score": 51.353660969846615}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// Create the search source builder.\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n// Create the search request.\n    SearchRequest searchRequest = new SearchRequest(getIndexAliases(querySysLogBO.getType()), searchSourceBuilder);\n// Set the search type to query_then_fetch.\n    searchRequest.searchType(SearchType.QUERY_THEN_FETCH);\n// Execute the search request.\n    SearchResponse searchResponse;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        return null;\n    }\n// Map the search results to a list of SysLog objects.\n    List<SysLog> sysLogList = Arrays.stream(searchResponse.getHits().getHits())\n            .map(searchHit -> {\n                SysLog sysLog = new SysLog();\n                try {\n                    sysLog = mapToBean(searchHit.getSourceAsString(), SysLog.class);\n                } catch (IOException e) {\n                    log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n                }\n                return sysLog;\n            }).collect(Collectors.toList());\n// Populate the BasePage object with the search results.\n    BasePage<SysLog> basePage = new BasePage<>();\n    basePage.setPage(querySysLogBO.getPage());\n    basePage.setPageSize(querySysLogBO.getLimit());\n    basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n    basePage.setList(sysLogList);\n    return basePage;\n}", "CodeBleu_score": 53.203300631541225}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t} catch (err) {\n\t\tfs.unlink(dest);\n\t\treject(err.message);\n\t}\n}", "CodeBleu_score": 68.7497985043268}, {"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n\nhttps.get(url, function (response) {\n  response.pipe(file);\n\n  file.on(\"finish\", function () {\n    file.close(function () {\n      resolve();\n    });\n  });\n}).on(\"error\", function (err) {\n  fs.unlink(dest);\n  reject(err.message);\n});\n}", "CodeBleu_score": 48.356836013254565}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, function (response) {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", function () {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", function (err) {\n\t\t\t\tfs.unlink(dest);\n\t\t\t\treject(err.message);\n\t\t\t});\n\t});\n}", "CodeBleu_score": 75.62147197116458}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(module.getDependentModules())\n .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()))\n .doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n .concatMap(dependentModule -> getLiveModules(dependentModule.getId())\n .onErrorContinue((error, data) -> log.warn(\"Error retrieving dependent module {} for module {}. Error: {}\", dependentModule.getId(), module.getId(), error.getMessage())))\n .map(dependentModule -> {\n dependentModule.setDependentModules(module.getDependentModules());\n return dependentModule;\n });\n }", "CodeBleu_score": 46.78558106253583}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.just(module)\n .map(Application::getDependentModuleIds)\n .flatMapMany(Flux::fromIterable)\n .filter(id -> !circularDependencyCheckSet.contains(id))\n .doOnNext(id -> circularDependencyCheckSet.add(id))\n .flatMap(id -> getLiveModules(id)\n .onErrorContinue((exception, id) -> {\n log.warn(\"Could not retrieve module with ID {} for application with ID {}: {}\", id, module.getId(), exception.getMessage());\n return;\n })\n .map(application -> {\n application.setParentModule(module);\n return application;\n }));\n }", "CodeBleu_score": 51.83076099950218}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn Flux.fromIterable(module.getDependsOn())\n\t\t.filter(id -> !circularDependencyCheckSet.contains(id))\n\t\t.doOnNext(id -> circularDependencyCheckSet.add(id))\n\t\t.flatMap(id -> getLiveModules(id)\n\t\t\t.doOnError(e -> log.warn(\"Error retrieving module {}: {}\", id, e.getMessage()))\n\t\t\t.onErrorResume(e -> Flux.empty()))\n\t\t.doOnNext(dependentModule -> log.info(\"Retrieved dependent module {} for module {}\", dependentModule.getId(), module.getId()))\n\t\t.map(dependentModule -> {\n\t\t\tdependentModule.setDependentOn(module.getId());\n\t\t\treturn dependentModule;\n\t\t});\n}", "CodeBleu_score": 50.151382599962226}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tObject compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?, ?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?, ?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?, ?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 91.49922158780672}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tObject compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?, ?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?, ?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?, ?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 91.49922158780672}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tObject compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?, ?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?, ?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?, ?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 91.49922158780672}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n//    // Read the image data from the DataBuffer.\n//    InputStream in = dataBuffer.asInputStream();\n//    byte[] data = IOUtils.toByteArray(in);\n//    in.close();\n//\n//    // Resize the image if necessary.\n//    if (createThumbnail) {\n//        data = resizeImage(dataBuffer);\n//    }\n//\n//    // Set the content type to JPEG.\n//    String contentType = \"image/jpeg\";\n//\n//    // Create a new Asset object and return it.\n//    return new Asset(data, contentType);\n}", "CodeBleu_score": 8.045619396733148}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n//        if (createThumbnail) {\n//            dataBuffer = resizeImage(dataBuffer);\n//            srcContentType = MediaType.IMAGE_JPEG;\n//        }\n\n        // Create an Asset object from the DataBuffer and return it\n        return Asset.create(dataBuffer, srcContentType);\n    }", "CodeBleu_score": 9.87502444412835}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tif (createThumbnail) {\n\t\tbyte[] data = resizeImage(dataBuffer);\n\t\tDataBufferUtils.release(dataBuffer);\n\t\treturn new Asset(data, \"image/jpeg\");\n\t} else {\n\t\tbyte[] data = DataBufferUtils.read(dataBuffer);\n\t\tDataBufferUtils.release(dataBuffer);\n\t\treturn new Asset(data, srcContentType.toString());\n\t}\n}", "CodeBleu_score": 35.70746696140649}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n.map(asset -> {\nexchange.getResponse().setStatusCode(HttpStatus.OK);\nif (asset.getContentType() != null) {\nexchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n}\nreturn asset;\n})\n.map(asset -> exchange.getResponse().writeWith(Flux.just(DataBufferUtils.write(asset.getData(), exchange.getResponse().bufferFactory()))));\n}", "CodeBleu_score": 36.94741788803823}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tMono<Asset> asset = repository.findById(assetId);\nreturn asset.flatMap(a -> {\nif (a.getData() == null) {\nreturn Mono.error(new AssetNotFoundException(assetId));\n}\n\n// Set the response status to OK\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\n\n// Set the content type header if available\nString contentType = a.getContentType();\nif (contentType != null) {\nresponse.getHeaders().setContentType(MediaType.parseMediaType(contentType));\n}\n\n// Write the asset data to the response using a data buffer\nDataBuffer buffer = response.bufferFactory().wrap(a.getData());\nreturn response.writeWith(Flux.just(buffer));\n});\n}", "CodeBleu_score": 54.50396401677003}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n        .map(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            return asset;\n        })\n        .map(asset -> exchange.getResponse().writeWith(Flux.just(DataBufferFactory.wrap(asset.getData()))))\n        .then();\n}", "CodeBleu_score": 41.111908008840956}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspace.getMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn enterpriseService.getOrganizationInEnterpriseMode(workspace.getId())\n\t\t.map(org -> org.getAuthConfig())\n\t\t.map(authConfig -> FindAuthConfig.builder()\n\t\t\t.id(authConfig.getId())\n\t\t\t.name(authConfig.getName())\n\t\t\t.type(authConfig.getType())\n\t\t\t.build());\n}", "CodeBleu_score": 30.366880307272158}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspace.getMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.getOrganizationsInEnterpriseMode(workspace.getId())\n\t\t.map(org -> FindAuthConfig.builder()\n\t\t\t.id(org.getId())\n\t\t\t.name(org.getName())\n\t\t\t.build())\n\t\t.collectList()\n\t\t.map(FindAuthConfig.class::cast);\n}", "CodeBleu_score": 29.612577596686045}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspace.getMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t} else {\n\t\treturn organizationService.getOrganizationsInEnterpriseMode(workspace.getId())\n\t\t\t.map(FindAuthConfig::fromOrganization)\n\t\t\t.collectList()\n\t\t\t.map(Flux::fromIterable);\n\t}\n}", "CodeBleu_score": 26.75952305446372}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t// Configure the MongoDB driver\nMongoClientSettings mongoClientSettings = MongoClientSettings.builder()\n.writeConcern(WriteConcern.MAJORITY)\n.readConcern(ReadConcern.MAJORITY)\n.applyToClusterSettings(builder -> builder.hosts(Arrays.asList(new ServerAddress(\"localhost\", 27017))))\n.build();\n\n// Configure Mongock\nMongock.builder()\n.setDriver(new MongoDriverInformation(mongoClientSettings))\n.setLockRepository(new MongoRepository(mongoTemplate.getDb()))\n.addChangeLogsScanPackages(Collections.singletonList(\"com.github.cloudyrock.mongock.integrationtests.spring5.springdata3.changelogs\"))\n.setSpringContext(springContext)\n.buildApplicationRunner();\n}", "CodeBleu_score": 46.6590197918894}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongoClientSettings mongoClientSettings = MongoClientSettings.builder()\n.applyConnectionString(new ConnectionString(mongoTemplate.getMongoDbFactory().getMongoDatabase().getURI()))\n.writeConcern(WriteConcern.MAJORITY)\n.readConcern(ReadConcern.MAJORITY)\n.build();\nMongoClient mongoClient = MongoClients.create(mongoClientSettings);\nreturn MongockSpring5.builder()\n.setDriver(mongoClient)\n.setSpringContext(springContext)\n.addChangeLogsScanPackages(changeLogPackage)\n.buildApplicationRunner();\n}", "CodeBleu_score": 45.04940568158331}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n.setDriver(mongoTemplate.getMongoDbFactory().getLegacyDb())\n.setSpringContext(springContext)\n.addChangeLogsScanPackages(changeLogPackage)\n.setWriteConcern(WriteConcern.MAJORITY)\n.setReadConcern(ReadConcern.MAJORITY)\n.buildApplicationRunner();\n}", "CodeBleu_score": 26.705956844602973}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn reactiveMongoTemplate(mongoDbFactory, mappingMongoConverter, ReadPreference.secondaryPreferred());\n}", "CodeBleu_score": 28.813809698757442}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 26.11799355653882}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQuery::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 53.3075427643007}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.map(LibraryQuery::getLiveDsl)\n\t\t\t.switchIfEmpty(libraryQueryRepository.getLiveDslById(libraryQueryId)\n\t\t\t\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n\t\t\t);\n}", "CodeBleu_score": 50.30403258806948}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.getLatestRecordByLibraryQueryId(libraryQueryId)\n.switchIfEmpty(getById(libraryQueryId)\n.map(libraryQuery -> libraryQuery.getDsl())\n.map(dsl -> {\nMap<String, Object> liveDsl = new HashMap<>();\nliveDsl.put(\"query\", dsl);\nreturn liveDsl;\n}))\n.map(dsl -> {\n// Validate the DSL\nQueryValidationResult validationResult = queryValidator.validate(dsl);\nif (!validationResult.isValid()) {\nthrow new ElasticsearchStatusException(\"Invalid DSL: \" + validationResult.getErrorMessage(), RestStatus.BAD_REQUEST);\n}\nreturn dsl;\n});\n}", "CodeBleu_score": 44.1834437237529}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n/**\n * If the timeout is not specified, we use the default timeout duration.\n */\n        int timeout = timeoutStr == null ? defaultQueryTimeoutMs : Integer.parseInt(timeoutStr);\n\n/**\n * If the datasource type is a JavaScript datasource plugin, we execute the query using Node.js.\n */\n        if (isJsDatasourcePlugin(datasource.getType())) {\n            return executeByNodeJs(datasource, queryConfig, requestParams)\n                    .timeout(Duration.ofMillis(timeout))\n                    .onErrorMap(this::mapNodeJsException);\n        }\n\n/**\n * If the datasource type is not a JavaScript datasource plugin, we execute the query locally.\n */\n        return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                .timeout(Duration.ofMillis(timeout))\n                .onErrorResume(TimeoutException.class, this::mapTimeoutException)\n                .onErrorResume(Exception.class, this::mapException);\n    }", "CodeBleu_score": 42.12238497916555}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//        String timeoutStr = (String) queryConfig.get(QueryExecutor.QUERY_TIMEOUT_MS);\n        long timeoutMs = timeoutStr == null ? 0 : Long.parseLong(timeoutStr);\n        if (timeoutMs > 0) {\n            return defer(datasource, queryConfig, requestParams, timeoutMs, queryVisitorContext);\n        } else {\n            if (isJsDatasourcePlugin(datasource.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        }\n    }", "CodeBleu_score": 38.848924413251204}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t//        var queryExecutor = datasourceMetaInfoService.getQueryExecutor(datasource.getType());\n//        return queryExecutor.buildQueryExecutionContextMono(datasource.getDetailConfig(), queryConfig, requestParams, queryVisitorContext)\n//                .zipWhen(context -> datasourceConnectionPool.getOrCreateConnection(datasource))\n//                .flatMap(tuple -> {\n//                    QueryExecutionContext queryExecutionRequest = tuple.getT1();\n//                    DatasourceConnectionHolder connectionHolder = tuple.getT2();\n//                    return queryExecutor.doExecuteQuery(connectionHolder.connection(), queryExecutionRequest)\n//                            .doOnError(connectionHolder::onQueryError);\n//                });\n\n        try {\n            var timeoutDuration = Duration.ofMillis(Long.parseLong(timeoutStr));\n            return executeByNodeJs(datasource, queryConfig, requestParams)\n                    .timeout(timeoutDuration)\n                    .onErrorMap(e -> new DatasourceQueryExecutionError(e.getMessage(), e));\n        } catch (NumberFormatException e) {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                    .onErrorResume(e -> Mono.just(QueryExecutionResult.error(new DatasourceQueryExecutionError(e.getMessage(), e))));\n        }\n    }", "CodeBleu_score": 40.23814727047979}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\treturn getOrCreateConnection(datasource).flatMap(connection -> {\n\t\ttry {\n\t\t\treturn Mono.just(queryExecutor.execute(connection, queryExecutionContext));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn Mono.error(e);\n\t\t}\n\t}).onErrorResume(doOnError(queryExecutionContext, queryVisitorContext));\n}", "CodeBleu_score": 33.41508805268485}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource, queryConfig, requestParams, queryVisitorContext);\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\nreturn getOrCreateConnection(datasource, queryConfig, queryExecutionContext).flatMap(conn -> executeQuery(queryExecutor, queryExecutionContext, conn));\n}", "CodeBleu_score": 27.701241470430183}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource, queryConfig, requestParams);\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryExecutor, queryVisitorContext);\nreturn getOrCreateConnection(datasource)\n        .flatMap(connection -> executeQuery(connection, queryExecutionContext))\n        .onErrorResume(error -> doOnError(error, datasource, queryExecutionContext));\n}", "CodeBleu_score": 32.55930945106231}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nint unitIndex = unitInfo.getRight();\nString unit = unitInfo.getLeft();\n\nString valueStr = timeoutStr.substring(0, unitIndex);\ndouble value = Double.parseDouble(valueStr);\n\nint convertedValue = convertToMs(value, unit);\nif (convertedValue > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(String.format(\"Query timeout %s exceeds maximum value of %s\", timeoutStr, MAX_QUERY_TIMEOUT_MS));\n}\nreturn convertedValue;\n}", "CodeBleu_score": 47.13555952565906}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getKey();\nint unitIndex = unitInfo.getValue();\n\nif (unitIndex == 0) {\n// This means the unit is missing.\nthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n}\n\nString valueStr = timeoutStr.substring(0, unitIndex);\ntry {\ndouble value = Double.parseDouble(valueStr);\nint timeoutMs = convertToMs(value, unit);\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout exceeds the maximum allowed value of \" + MAX_QUERY_TIMEOUT_MS + \"ms: \" + timeoutStr);\n}\nreturn timeoutMs;\n} catch (NumberFormatException e) {\nthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n}\n}", "CodeBleu_score": 55.50588867613742}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n\tString unit = unitInfo.getLeft();\n\tint unitIndex = unitInfo.getRight();\n\tif (unitIndex == 0) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\tString valueStr = timeoutStr.substring(0, unitIndex);\n\tdouble value = toDouble(valueStr);\n\tif (value > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed value: \" + timeoutStr);\n\t}\n\treturn convertToMs(value, unit);\n}", "CodeBleu_score": 50.78772696333298}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\n}", "CodeBleu_score": 6.7517121984820445}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t//        List<String> queryIds = application.getLiveQueries().stream().map(LiveQuery::getQueryId).collect(Collectors.toList());\n//        return queryService.getByIds(queryIds)\n//                .collectList()\n//                .map(queries -> {\n//                    if (queries.isEmpty()) {\n//                        throw new DatasourceCopyError(\"No queries found for application \" + application.getId());\n//                    }\n//\n//                    List<String> datasourceIds = queries.stream().map(Query::getDatasourceId).collect(Collectors.toList());\n//                    return datasourceService.getByIds(datasourceIds)\n//                            .collectList()\n//                            .map(datasources -> {\n//                                if (datasources.isEmpty()) {\n//                                    throw new DatasourceCopyError(\"No datasources found for queries \" + queryIds);\n//                                }\n//\n//                                List<Pair<String, String>> copiedDatasources = new ArrayList<>();\n//                                for (Datasource datasource : datasources) {\n//                                    if (datasource.isSystemStatic()) {\n//                                        continue;\n//                                    }\n//\n//                                    // return new QUICK_REST_API id for legacy quick rest api\n//                                    if (datasource.isLegacyQuickRestApi()) {\n//                                        copiedDatasources.add(Pair.of(datasource.getId(), Datasource.QUICK_REST_API.getId()));\n//                                        continue;\n//                                    }\n//\n//                                    if (datasource.isLegacyOpenblocksApi()) {\n//                                        copiedDatasources.add(Pair.of(datasource.getId(), Datasource.OPENBLOCKS_API.getId()));\n//                                        continue;\n//                                    }\n//\n//                                    Mono<String> newDatasourceId = createNewDatasourceFrom(currentOrganizationId, visitorId, datasource);\n//                                    copiedDatasources.add(Pair.of(datasource.getId(), newDatasourceId.block()));\n//                                }\n//\n//                                return copiedDatasources;\n//                            });\n//                });\n    }", "CodeBleu_score": 6.7517121984820445}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\n}", "CodeBleu_score": 6.7517121984820445}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\tDatasource datasource = new Datasource();\ndatasource.setId(datasourceId);\nreturn datasourceService.getDatasource(datasource)\n.flatMap(datasource1 -> {\nif (datasource1.isSystemStatic()) {\nreturn Mono.just(datasourceId);\n} else if (datasource1.isLegacyQuickRestApi() || datasource1.isLegacyOpenblocksApi()) {\nreturn createNewDatasourceFrom(organizationId, visitorId, datasource1);\n} else {\nreturn createNewDatasourceFrom(organizationId, visitorId, datasource1);\n}\n})\n.switchIfEmpty(Mono.error(new DatasourceNotFoundException(datasourceId)));\n}", "CodeBleu_score": 40.09578207213562}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n\n.switchIfEmpty(Mono.error(new IllegalArgumentException(\"Datasource with ID \" + datasourceId + \" does not exist\")))\n\n.filter(datasource -> !datasource.isSystemStatic())\n\n.map(datasource -> datasource.getId())\n\n.switchIfEmpty(createNewDatasourceFrom(organizationId, visitorId, datasource))\n\n.map(datasourceId -> {\nif (datasourceId.equals(datasource.getId())) {\nreturn datasourceId;\n}\nelse {\nreturn datasource.getId();\n}\n});\n}", "CodeBleu_score": 43.19781187293344}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n.filter(Datasource::isSystemStatic)\n.map(Datasource::getId)\n.switchIfEmpty(Mono.just(datasourceId))\n.switchIfEmpty(datasourceService.getById(datasourceId)\n.filter(datasource -> datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi())\n.map(datasource -> datasource.getLegacyId())\n.switchIfEmpty(createNewDatasourceFrom(organizationId, visitorId, datasource)))\n.switchIfEmpty(createNewDatasourceFrom(organizationId, visitorId, datasource));\n}", "CodeBleu_score": 42.86022602361214}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t//        return Mono.just(user)\n//                .filter(u -> !u.getAvatar().isEmpty())\n//                .flatMap(u -> assetService.remove(u.getAvatar()))\n//                .then(assetService.upload(filePart, AssetType.IMAGE))\n//                .flatMap(a -> updateUserAvatar(a, user.getId()))\n//                .defaultIfEmpty(false);\n        return assetService.upload(filePart, AssetType.IMAGE)\n                .flatMap(a -> updateUserAvatar(a, user.getId()))\n                .defaultIfEmpty(false);\n    }", "CodeBleu_score": 13.776493528502382}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t", "CodeBleu_score": 6.277227342940204}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\n// Get the user's old avatar\n        Asset oldAvatar = user.getAvatar();\n\n// Upload the new avatar\n        Asset newAvatar = assetService.upload(filePart);\n\n// If the user has a previous avatar, remove it\n        if (!isEmpty(oldAvatar)) {\n            assetService.remove(oldAvatar);\n        }\n\n// Update the user's profile with the new avatar\n        user.setAvatar(newAvatar.getId());\n        return mongoUpsertHelper.updateById(user, user.getId());\n    }", "CodeBleu_score": 27.8759707260675}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t.map(this::create)\n\t\t.map(user -> {\n\t\t\tuser.setName(authUser.getName());\n\t\t\tuser.setState(UserState.ACTIVE);\n\t\t\tuser.setIsEnabled(true);\n\t\t\tuser.setTpAvatarLink(authUser.getAvatar());\n\t\t\tif (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(AuthContextKey.PASSWORD)) {\n\t\t\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContextKey.PASSWORD)));\n\t\t\t}\n\t\t\tuser.setConnections(authUser.getConnections());\n\t\t\tuser.setIsNewUser(true);\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(repository::save);\n}", "CodeBleu_score": 37.286186672410274}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\nUser user = new User();\nuser.setName(authUser.getName());\nuser.setState(UserState.ENABLED);\nuser.setIsNewUser(true);\nuser.setAuthSource(authUser.getAuthSource());\nuser.setAuthContext(authUser.getAuthContext());\n\nif (authUser.getAuthSource().equals(AuthSource.EMAIL) && !Strings.isNullOrEmpty(authUser.getPassword())) {\nuser.setPassword(encryptionService.encryptPassword(authUser.getPassword()));\n}\n\nuser.setAvatar(authUser.getAvatar());\nuser.setTpAvatarLink(authUser.getTpAvatarLink());\n\nreturn create(user)\n.flatMap(newUser -> {\n\n// Establish user connections\nif (authUser.getConnections() != null) {\nreturn Flux.fromIterable(authUser.getConnections())\n.map(connection -> {\nconnection.setUserId(newUser.getId());\nreturn connection;\n})\n.collectList()\n.map(connections -> {\nnewUser.setConnections(connections);\nreturn newUser;\n});\n}\n\nreturn Mono.just(newUser);\n})\n.flatMap(newUser -> {\n\n// Set user's enabled status\nif (authUser.isEnabled()) {\nreturn setEnabled(newUser.getId(), true);\n}\n\nreturn Mono.just(newUser);\n});\n}", "CodeBleu_score": 51.510900473076845}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tString userId = authUser.getId();\n\tString authSource = authUser.getSource();\n\tString authContext = authUser.getAuthContext();\n\tString name = authUser.getName();\n\tString avatar = authUser.getAvatar();\n\tString password = authUser.getPassword();\n\tString state = authUser.getState();\n\tboolean isEnabled = authUser.isEnabled();\n\tboolean isNewUser = authUser.isNewUser();\n\tSet<String> connections = authUser.getConnections();\n\n\treturn Mono.just(new User(userId, name, state, isEnabled, avatar, authSource, authContext, isNewUser))\n\t\t\t.map(user -> {\n\t\t\t\tif (password != null && authSource.equals(\"email\")) {\n\t\t\t\t\tuser.setPassword(encryptionService.encryptPassword(password));\n\t\t\t\t}\n\t\t\t\tuser.setConnections(connections);\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.map(this::setTpAvatarLink)\n\t\t\t.map(this::setState)\n\t\t\t.map(this::add)\n\t\t\t.map(user -> {\n\t\t\t\tif (isNewUser) {\n\t\t\t\t\tlog.info(\"Created new user from auth user: \" + user);\n\t\t\t\t}\n\t\t\t\treturn user;\n\t\t\t});\n}", "CodeBleu_score": 31.770089445760284}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.fromSupplier(() -> {\n\t\ttry {\n\t\t\tConnection connection = new Connection(email, Connection.Type.EMAIL);\n\t\t\tuser.addConnection(connection);\n\t\t\tuserRepository.save(user);\n\t\t\treturn true;\n\t\t} catch (DuplicateKeyException e) {\n\t\t\tthrow new DuplicateEmailException(email);\n\t\t}\n\t});\n}", "CodeBleu_score": 23.898457053201444}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(email)\n\t\t.map(e -> new Connection(e, Connection.Type.EMAIL))\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(Error.EMAIL_ALREADY_IN_USE))\n\t\t.map(c -> user.addConnection(c))\n\t\t.then(Mono.fromCallable(() -> user.save()))\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(Error.EMAIL_ALREADY_IN_USE));\n}", "CodeBleu_score": 24.508681588542668}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn connectionRepository.createConnection(Connection.builder().userId(user.getId()).providerId(emailProviderId).providerUserId(email).build())\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.error(new EmailAlreadyExistsException(email)))\n\t\t.then(Mono.defer(() -> {\n\t\t\tuser.getConnections().add(email);\n\t\t\treturn userRepository.save(user);\n\t\t}))\n\t\t.map(u -> true);\n}", "CodeBleu_score": 22.115217618716557}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> matchPassword(user, oldPassword)\n.then(Mono.just(user)))\n.map(user -> {\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true);\n}", "CodeBleu_score": 20.644483880649965}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.filter(user -> matchPassword(user, oldPassword))\n.map(user -> {\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true);\n}", "CodeBleu_score": 18.651766319145086}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.filter(user -> matchPassword(user, oldPassword))\n.map(user -> {\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true)\n.onErrorResume(e -> {\nif (e instanceof BizException && ((BizException) e).getError() == BizError.INVALID_PASSWORD) {\nreturn Mono.error(e);\n}\nreturn Mono.error(new BizException(BizError.UNKNOWN));\n});\n}", "CodeBleu_score": 26.82606887575536}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\nreturn Mono.just(new ArrayList<>())\n        .filter(it -> !withoutDynamicGroups)\n        .switchIfEmpty(getNonDynamicUserGroupIdsInOrg(orgMember.getOrgId())\n                .collectList()\n                .map(it -> it.stream()\n                        .filter(groupId -> !groupId.equals(ALL_USERS_GROUP_ID))\n                        .collect(Collectors.toList()))\n                .map(it -> it.stream()\n                        .map(groupId -> new HashMap<String, String>() {{\n                            put(\"id\", groupId);\n                            put(\"name\", groupService.getGroupName(groupId, locale));\n                        }})\n                        .collect(Collectors.toList()))\n        )\n        .map(it -> it.stream()\n                .filter(userGroup -> !userGroup.get(\"id\").equals(ALL_USERS_GROUP_ID))\n                .collect(Collectors.toList())\n        );\n}", "CodeBleu_score": 29.16023980534751}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\nList<Mono<UserGroup>> userGroupsMono;\n\nif (withoutDynamicGroups) {\n    userGroupsMono = orgMember.isAdmin() ?\n            userGroupRepository.getAllUserGroupsInOrg(orgMember.getOrgId()) :\n            userGroupRepository.getUserGroupsInOrg(orgMember.getOrgId(), userId);\n} else {\n    userGroupsMono = orgMember.isAdmin() ?\n            userGroupRepository.getAllUserGroupsInOrg(orgMember.getOrgId()) :\n            userGroupRepository.getUserGroupsInOrg(orgMember.getOrgId(), userId, false);\n}\n\nreturn userGroupsMono.collectList()\n        .map(userGroups -> userGroups.stream()\n                .filter(userGroup -> !userGroup.isAllUsersGroup())\n                .map(userGroup -> new HashMap<String, String>() {{\n                    put(\"id\", userGroup.getId());\n                    put(\"name\", userGroup.getName());\n                }})\n                .collect(Collectors.toList())\n        );\n}", "CodeBleu_score": 37.670550461247565}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t//        return userGroupService.getUserGroupIdsInOrg(orgMember.getOrgId())\n//                .filter(it -> !it.equals(ALL_USERS_GROUP_ID))\n//                .filter(it -> !withoutDynamicGroups || !userGroupService.isDynamicUserGroup(it))\n//                .map(it -> userGroupService.getOrgId(it))\n//                .collectList()\n//                .map(it -> it.stream()\n//                        .map(orgId -> new UserDetailGroup(orgId, userGroupService.getName(it, locale)))\n//                        .collect(Collectors.toList())\n//                );\n\n}", "CodeBleu_score": 6.028157562186501}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus, \"UserStatus\")\n\t.map(result -> result.wasAcknowledged());\n}", "CodeBleu_score": 36.32398664169948}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setUserId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus, USER_STATUS_COLLECTION_NAME);\n}", "CodeBleu_score": 34.92536919048506}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn Mono.fromSupplier(() -> {\n\t\tUserStatus userStatus = new UserStatus();\n\t\tuserStatus.setUserId(userId);\n\t\tuserStatus.setHasShowNewUserGuidance(true);\n\t\treturn userStatus;\n\t}).flatMap(userStatus -> mongoUpsertHelper.doUpsert(userStatus, UserStatus.class))\n\t.map(result -> result.wasAcknowledged());\n}", "CodeBleu_score": 32.726050569654426}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg := rungroup.New(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\tg.Go(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 36.59547427703871}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate must not be nil\")\n\t}\n\tg := rungroup.New(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\tg.Run(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 36.75092189314946}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate cannot be nil\")\n\t}\n\n\trungroup := rungroup.New()\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\trungroup.Queue(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 35.64519942676604}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"calculateMaxSizePerPartition: numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := maxItemsTotal / numPartitions\n\tif averageWeightPerPartition > maxSizePerPartition {\n\t\tmaxSizePerPartition = averageWeightPerPartition\n\t}\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 43.51475617672736}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"invalid arguments\")\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn maxItemsTotal / averageWeightPerPartition\n}", "CodeBleu_score": 38.01558695154314}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / float64(numPartitions)))\n\n\tif averageWeightPerPartition > maxSizePerPartition {\n\t\treturn averageWeightPerPartition\n\t}\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 52.975001915175156}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = this.getConnectionMetadata().block();\n\tif (metadata != null) {\n\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"databaseVersion\", metadata.getDatabaseVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 48.574822074727074}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tgetConnectionMetadata()\n\t\t.map(ConnectionMetadata::getDatabaseProductName)\n\t\t.doOnNext(productName -> map.put(\"databaseProductName\", productName))\n\t\t.subscribe();\n\tgetConnectionMetadata()\n\t\t.map(ConnectionMetadata::getDatabaseProductVersion)\n\t\t.doOnNext(productVersion -> map.put(\"databaseProductVersion\", productVersion))\n\t\t.subscribe();\n\treturn map;\n}", "CodeBleu_score": 35.23515641797992}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = this.getConnectionMetadata().block();\n\tif (metadata != null) {\n\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 48.66167722942825}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.containsKey(ConfigKeys.USER_SETTINGS)) {\n\t\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(ConfigKeys.USER_SETTINGS);\n\t\tif (userSettings == null) {\n\t\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\t\tinfo.setAllowRegistration(false);\n\t\t} else {\n\t\t\tinfo.setMustVerifyEmailOnRegistration((boolean) userSettings.get(ConfigKeys.USER_SETTINGS_MUST_VERIFY_EMAIL_ON_REGISTRATION));\n\t\t\tinfo.setAllowRegistration((boolean) userSettings.get(ConfigKeys.USER_SETTINGS_ALLOW_REGISTRATION));\n\t\t}\n\t}\n}", "CodeBleu_score": 41.7272374542845}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\tinfo.setAllowRegistration(false);\n\t} else {\n\t\tboolean mustVerifyEmailOnRegistration = configMap.getBoolean(\"mustVerifyEmailOnRegistration\", false);\n\t\tboolean allowRegistration = configMap.getBoolean(\"allowRegistration\", false);\n\t\tinfo.setMustVerifyEmailOnRegistration(mustVerifyEmailOnRegistration);\n\t\tinfo.setAllowRegistration(allowRegistration);\n\t}\n}", "CodeBleu_score": 36.73574201872286}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.containsKey(USER_SETTINGS)) {\n\t\tConfigMap userSettings = configMap.getMap(USER_SETTINGS);\n\t\tif (userSettings.containsKey(MUST_VERIFY_EMAIL_ON_REGISTRATION)) {\n\t\t\tinfo.setMustVerifyEmailOnRegistration(userSettings.getBoolean(MUST_VERIFY_EMAIL_ON_REGISTRATION));\n\t\t}\n\t\tif (userSettings.containsKey(ALLOW_REGISTRATION)) {\n\t\t\tinfo.setAllowRegistration(userSettings.getBoolean(ALLOW_REGISTRATION));\n\t\t}\n\t}\n}", "CodeBleu_score": 27.326557012895115}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\t// Create a new thread group and thread to execute the restart process\n\tThreadGroup group = new ThreadGroup(\"Restart\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tThread.currentThread().setContextClassLoader(Restart.class.getClassLoader());\n\t\t\t\t// Start the thread\n\t\t\t\tThread.currentThread().start();\n\t\t\t} catch (Exception e) {\n\t\t\t\t// If an exception occurs, log it\n\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t});\n\t// Return a message indicating the restart has begun\n\treturn \"Application restart has begun\";\n}", "CodeBleu_score": 45.48818447023953}, {"code": "public Object restart(){\n\t\ttry {\n\t\tThreadGroup group = new ThreadGroup(\"Restart\");\n\t\tThread thread = new Thread(group, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tClassLoader loader = Thread.currentThread().getContextClassLoader();\n\t\t\t\t\tThread.currentThread().setContextClassLoader(loader);\n\t\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\tRuntime.getRuntime().exec(new String[] { \"java\", \"-jar\", loader.getResource(\"app.jar\").getPath() });\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthread.start();\n\t\treturn \"Application restart initiated.\";\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn \"Application restart failed.\";\n}", "CodeBleu_score": 39.50422888185534}, {"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(\"Restart\");\n\tThread restartThread = new Thread(threadGroup, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t\t\t\tThread.currentThread().setContextClassLoader(classLoader);\n\t\t\t\tClass<?> applicationClass = Class.forName(Application.class.getName(), true, classLoader);\n\t\t\t\tMethod restartMethod = applicationClass.getDeclaredMethod(\"restart\", new Class[0]);\n\t\t\t\trestartMethod.setAccessible(true);\n\t\t\t\trestartMethod.invoke(null, new Object[0]);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"Application restarting...\";\n}", "CodeBleu_score": 43.13820322334417}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper mapper = Jackson2ObjectMapperBuilder.json().build();\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(mapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(mapper));\n }", "CodeBleu_score": 53.484655684421625}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper mapper = Jackson2ObjectMapperBuilder.json().build();\n Jackson2JsonEncoder jacksonEncoder = new Jackson2JsonEncoder(mapper);\n Jackson2JsonDecoder jacksonDecoder = new Jackson2JsonDecoder(mapper);\n configurer.defaultCodecs().jackson2JsonEncoder(jacksonEncoder);\n configurer.defaultCodecs().jackson2JsonDecoder(jacksonDecoder);\n }", "CodeBleu_score": 39.54575840422768}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(getObjectMapper());\n configurer.defaultCodecs().jackson2JsonDecoder(getObjectMapper());\n }", "CodeBleu_score": 44.57222639792211}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn RouterFunctions.route(GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(negate(WebSocketRequest.class)), this::serveIndex);\n}", "CodeBleu_score": 14.505083350237785}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn RouterFunctions.route(GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(negate(WebSocketHandler.WEBSOCKET_HANDSHAKE_PATH_PATTERN)), this::serveIndex);\n}", "CodeBleu_score": 15.278662030972633}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t", "CodeBleu_score": 1.7307821270007306}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\"), accept(MediaType.TEXT_HTML), (request) -> {\n\t\tif (request.headers().asHttpHeaders().get(HttpHeaders.UPGRADE) != null) {\n\t\t\treturn Mono.empty();\n\t\t}\n\t\treturn serveIndex(\"classpath:/uc/index.html\");\n\t});\n}", "CodeBleu_score": 20.888871033962857}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(header(\"Upgrade\", not(containsString(\"websocket\")))).and(not(path(\"/uc/assets/**\"))), request -> serveIndex(ucLocation));\n}", "CodeBleu_score": 18.70360768806083}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(not(WebSocket.handshake().negate())), this::serveIndex);\n}", "CodeBleu_score": 17.697794422447345}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveRedisIndexedSessionRepository(sessionRedisTemplate, this.sessionSerializationStrategy)\n}", "CodeBleu_score": 5.12251539206227}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveSessionRepositoryFilter(new MapSessionRepository(new ConcurrentHashMap<>()), this.serverWebExchange.getReactiveSessionManager())\n\t\t\t.setDefaultMaxInactiveInterval(this.serverWebExchange.getSession().getMaxIdleTime())\n\t\t\t.setSessionTimeout(this.serverWebExchange.getSession().getMaxIdleTime())\n\t\t\t.getReactive()\n\t\t\t.getSessionRepository();\n}", "CodeBleu_score": 26.496212331721846}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveRedisIndexedSessionRepository(new MapSessionRepository(), redisConnectionFactory);\n}", "CodeBleu_score": 8.201190174964516}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n// Create the DefaultUserDetailService instance.\nDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\n// Configure the DefaultUserDetailService instance with the provided user and role services.\nuserDetailsService.setUserService(userService);\nuserDetailsService.setRoleService(roleService);\n\n// Configure the DefaultUserDetailService instance to enable or disable two-factor authentication based on the security settings in HaloProperties.\nif (haloProperties.getSecurity().isTwoFactorAuthEnabled()) {\nuserDetailsService.setTwoFactorAuthenticationEnabled(true);\n} else {\nuserDetailsService.setTwoFactorAuthenticationEnabled(false);\n}\n\n// Return the configured DefaultUserDetailService instance.\nreturn userDetailsService;\n}", "CodeBleu_score": 35.097061589901365}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\nuserDetailService.setTwoFactorAuthEnabled(haloProperties.getSecurity().isTwoFactorAuthEnabled());\nreturn userDetailService;\n}", "CodeBleu_score": 49.547445121602735}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t//    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n//    userDetailsService.setTwoFactorAuthEnabled(haloProperties.getSecurity().getTwoFactorAuth().isEnabled());\n//    return userDetailsService;\n}", "CodeBleu_score": 8.115039031832884}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\nowner.setKind(\"email\");\nowner.setDisplayName(displayName);\nif (email != null) {\nowner.setEmail(email);\n}\nowner.setAvatarUrl(avatarUrl);\nowner.setWebsiteUrl(websiteUrl);\nowner.setAnnotations(annotations);\nreturn owner;\n}", "CodeBleu_score": 28.29008701202304}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(email);\n\towner.setAvatarUrl(avatarUrl);\n\towner.setUrl(website);\n\towner.setAnnotations(new ArrayList<Object>());\n\treturn owner;\n}", "CodeBleu_score": 26.243080489448996}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\nowner.setKind(\"email\");\nif (email != null) {\nowner.setDisplayName(email);\n}\nowner.setAvatarUrl(avatarUrl);\nowner.setUrl(website);\nowner.setAnnotations(new ArrayList<Comment.Annotation>());\nreturn owner;\n}", "CodeBleu_score": 27.574630406779406}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tboolean isOwner = false;\n\tif (commentOwner.getKind().equals(\"user\")) {\n\t\tisOwner = commentOwner.getName().equals(post.getOwner().getName());\n\t} else if (commentOwner.getKind().equals(\"group\")) {\n\t\tisOwner = commentOwner.getName().equals(post.getOwner().getGroupName());\n\t} else if (commentOwner.getKind().equals(\"domain\")) {\n\t\tisOwner = commentOwner.getName().equals(post.getOwner().getDomain());\n\t} else if (commentOwner.getKind().equals(\"email\")) {\n\t\tUser user = User.fetch(commentOwner.getName());\n\t\tisOwner = user.getEmail().equals(post.getOwner().getEmail());\n\t}\n\treturn isOwner;\n}", "CodeBleu_score": 35.83726699073608}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"anonymous\")) {\n\t\treturn true;\n\t}\n\tif (commentOwner.getKind().equals(\"group\")) {\n\t\treturn false;\n\t}\n\tif (commentOwner.getKind().equals(\"user\")) {\n\t\tif (commentOwner.getName().equals(post.getOwner().getName())) {\n\t\t\treturn true;\n\t\t}\n\t\tif (commentOwner.getEmail() != null) {\n\t\t\tUser user = UserServiceFactory.getUserService().getUser(commentOwner.getEmail());\n\t\t\tif (user != null && user.getName().equals(post.getOwner().getName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\treturn false;\n}", "CodeBleu_score": 34.901543485845316}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t", "CodeBleu_score": 3.7030608954755904}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\nlistOptions.setFieldSelector(getFieldSelector());\n\nif (StringUtils.isNotBlank(getKeyword())) {\nlistOptions.addLabelSelector(\"keyword=\" + getKeyword());\n}\n\nif (StringUtils.isNotBlank(getOwnerName())) {\nlistOptions.addLabelSelector(\"ownerName=\" + getOwnerName());\n}\n\nif (StringUtils.isNotBlank(getOwnerKind())) {\nlistOptions.addLabelSelector(\"ownerKind=\" + getOwnerKind());\n}\n\nreturn listOptions;\n}", "CodeBleu_score": 19.309813600753237}, {"code": "public ListOptions toListOptions(){\n\tListOptions options = new ListOptions();\noptions.setSortBy(getFieldSelector());\noptions.setFilter(and(contains(getOwnerKind()), equal(getOwnerName(), getOwnerIdentity())));\nif (StringUtils.isNotBlank(getKeyword())) {\noptions.setFilter(and(options.getFilter(), contains(getLabelSelector()), contains(getFieldSelector()), contains(getKeyword())));\n}\noptions.setFieldSelector(getFieldSelector());\nreturn options;\n}", "CodeBleu_score": 17.840051096372957}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\nString fieldSelector = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector());\nif (StringUtils.isNotBlank(fieldSelector)) {\n    listOptions.setFieldSelector(fieldSelector);\n}\nString keyword = getKeyword();\nif (StringUtils.isNotBlank(keyword)) {\n    listOptions.setKeyword(keyword);\n}\nString ownerName = getOwnerName();\nif (StringUtils.isNotBlank(ownerName)) {\n    listOptions.setOwnerName(ownerName);\n}\nString ownerKind = getOwnerKind();\nif (StringUtils.isNotBlank(ownerKind)) {\n    listOptions.setOwnerKind(ownerKind);\n}\nreturn listOptions;\n}", "CodeBleu_score": 45.05029640848966}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.filter(name -> !name.isEmpty())\n\t\t.flatMap(name -> this.counterRepository.getByName(name))\n\t\t.map(counter -> new CommentStats(counter.getName(), counter.getUpvotes()))\n\t\t.defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 37.665307688038176}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.map(comment -> getByName(comment))\n\t\t.map(comment -> comment.getUpvote())\n\t\t.map(upvote -> map(upvote))\n\t\t.defaultIfEmpty(empty());\n}", "CodeBleu_score": 32.44104239232798}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.map(commentRepository::getByName)\n\t\t.map(Comment::getUpvote)\n\t\t.map(upvote -> new CommentStats(commentName, upvote))\n\t\t.defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 29.329795135638157}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\n}", "CodeBleu_score": 1.6078250809239212}, {"code": "void subscribeReply(UserIdentity identity){\n\t\n}", "CodeBleu_score": 1.6078250809239212}, {"code": "void subscribeReply(UserIdentity identity){\n\t// Create a subscriber from the given user identity.\n    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n// Set up an interest reason for the subscription.\n    Subscription.Reason reason = new Subscription.Reason();\n    reason.setReasonType(Subscription.Reason.ReasonType.SOMEONE_REPLIED_TO_YOU);\n    reason.setExpression(Subscription.Reason.Expression.OWNER_IS(identity.name()));\n\n// Subscribe the user to the notification center.\n    Subscription subscription = new Subscription(subscriber, reason);\n    notificationCenter.subscribe(subscription);\n\n// Block until the subscription is completed.\n    subscription.await();\n}", "CodeBleu_score": 55.30566131329206}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn updateCommentWithRetry(comment.getName(), comment1 -> {\n\t\tcomment1.setApproved(true);\n\t\tcomment1.setApprovedTime(Instant.now());\n\t\treturn comment1;\n\t});\n}", "CodeBleu_score": 18.577628219510856}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), comment -> {\ncomment.setApproved(true);\ncomment.setApprovedTime(Instant.now());\nreturn comment;\n});\n}", "CodeBleu_score": 18.09705900686835}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn updateCommentWithRetry(comment.getName(), c -> {\n\t\tc.setApproved(true);\n\t\tc.setApprovedTime(Instant.now());\n\t\treturn c;\n\t});\n}", "CodeBleu_score": 16.872345976833586}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->mount($this->getLivewire());\n}\n\nif ($action instanceof HasRecord && $this->getRecord()) {\n$action->record($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 57.807197370747744}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction && $this->getLivewire()) {\n$action->setLivewire($this->getLivewire());\n}\n\nif ($action instanceof HasRecord && $this->getRecord()) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 54.695510189637766}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif($action instanceof MountableAction) {\n$action->mount($this->getLivewire());\n}\n\nif($action instanceof HasRecord && $this->getRecord()) {\n$action->record($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 56.6814643726369}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\n}", "CodeBleu_score": 3.570348081383481}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\n$this->evaluate($this->successRedirect)\n\n}", "CodeBleu_score": 15.25812538535721}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\n}", "CodeBleu_score": 3.570348081383481}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\t$tagClassName = config('tagging.models.tag');\n\n\tif (is_null($record) || ! method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n\t\t$locale = $tagClassName::getLocale();\n\n\t\t$tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n\t\tif ($tag?->isEmpty() ?? true) {\n\t\t\t$tag = $tagClassName::create([\n\t\t\t\t'name' => [$locale => $tagName],\n\t\t\t]);\n\t\t}\n\n\t\treturn $tag;\n\t})->flatten();\n\n\t$record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 73.20684381619282}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (is_null($record)) {\nreturn;\n}\n\nif (!method_exists($record, 'tags')) {\nreturn;\n}\n\n$tagClassName = get_class($record->tags()->getRelated());\n\n$tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n$locale = $tagClassName::getLocale();\n\n$tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\nif ($tag?->isEmpty() ?? true) {\n$tag = $tagClassName::create([\n'name' => [$locale => $tagName],\n]);\n}\n\nreturn $tag;\n})->flatten();\n\n$record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 74.29356262198709}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(authz.UserScope, spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(PipelineResourceType, pipelineIdentifier)\n\n\t// Check if the user has the required permission for the pipeline.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 53.04904660857308}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tif repoPath == \"\" {\n\t\treturn fmt.Errorf(\"empty repo path\")\n\t}\n\tif pipelineIdentifier == \"\" {\n\t\treturn fmt.Errorf(\"empty pipeline identifier\")\n\t}\n\tif permission == enum.Permission_NONE {\n\t\treturn fmt.Errorf(\"invalid permission\")\n\t}\n\n\tspacePath, repoName, err := paths.DisectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope, err := authz.NewRepositoryScope(spacePath, repoName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresource, err := authz.NewPipelineResource(pipelineIdentifier)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 52.03257621810018}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewRepositoryScope(spacePath, repoName)\n\tresource := authz.NewPipelineResource(pipelineIdentifier)\n\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 48.049247912818615}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := paths.DisectLeaf(space.Path)\n\tscope := authz.NewSpaceScope(parentSpace.Name)\n\tresource := authz.NewSpaceResource(name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 36.789147252215884}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name, err := paths.DisectSpace(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := fmt.Sprintf(\"space:%s\", parent)\n\tresource := fmt.Sprintf(\"space:%s:%s\", parent, name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 51.313738913063446}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name, err := paths.DisectSpace(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.NewSpaceScope(parentSpace.ID, name)\n\tresource := authz.NewSpaceResource(space.ID)\n\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 56.90490724488727}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tvar err error\n\tif source == nil {\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar payload map[string]interface{}\n\terr = json.NewDecoder(bytes.NewReader(source)).Decode(&payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sanitized bytes.Buffer\n\tsanitized.Grow(len(source))\n\terr = json.NewEncoder(&sanitized).Encode(payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized.Truncate(sanitized.Len() - 1)\n\treturn sanitized.Bytes(), nil\n}", "CodeBleu_score": 41.858580352221885}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tsanitized, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn sanitized, nil\n\t}\n\n\tvar decoded map[string]any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 41.10794014576535}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the provided data.\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields.\n\tvar decoded map[string]any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the data to ensure it conforms to the required format.\n\tvar encoded json.RawMessage\n\tencoder := json.NewEncoder(bytes.NewBuffer(encoded))\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result.\n\treturn bytes.TrimSuffix(encoded, []byte(\"\n\")), nil\n}", "CodeBleu_score": 51.60569079244256}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := c.repoStore.ValidateRef(ctx, repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.auth.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 49.45604346270676}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := reference.Validate(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the access permissions.\n\tif err := auth.CheckAccess(ctx, session, reqPermission, repo); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.44299900323459}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the user's access to the repository.\n\tif err := c.auth.CheckRepo(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 42.343762895263545}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 63.443034537526586}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 55.900697663129804}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 61.787367292169236}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer == nil then\n\t\tself.renderer = Renderer()\n\t\tself.renderer.attach(self)\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 44.41373444387715}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer == nil then\n\t\tself.renderer = Renderer()\n\tend\n\tself.renderer.on_render = on_render\n\treturn self", "CodeBleu_score": 38.47318174934386}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer == nil then\n\t\tself.renderer = Renderer()\n\tend\n\tself.renderer.attach(self)\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 44.38875137701528}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() then\n\t\tself.watcher = FileWatcher(self.filename)\n\t\tself.watcher:watch_file(function(filename)\n\t\t\tif self:is_valid() then\n\t\t\t\tif callback then\n\t\t\t\t\tcallback()\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tself.watcher:stop()\n\t\t\t\tself.watcher = nil\n\t\t\tend\n\t\tend)\n\tend", "CodeBleu_score": 47.63801281207642}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tlocal watcher = self.watcher\n\t\tif not watcher then\n\t\t\twatcher = self.watcher = Watcher()\n\t\tend\n\t\twatcher:watch_file(self.filename, callback)\n\tend", "CodeBleu_score": 33.204489860120965}, {"code": "function Buffer:watch(callback)\n\t\tif self.is_valid and callback then\n\t\tself.watcher:watch_file(self.filename, callback)\n\telse\n\t\tif not self.is_valid then\n\t\t\tconsole.debug.error(\"Cannot watch invalid buffer\")\n\t\tend\n\t\tif not callback then\n\t\t\tconsole.debug.error(\"No callback provided\")\n\t\tend\n\tend", "CodeBleu_score": 40.068011187438465}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self._hex then\n\t\treturn self._hex\n\tend\n\n\tlocal spec = self._spec\n\tlocal attr = self._attr\n\n\tif not spec then\n\t\treturn nil\n\tend\n\n\tlocal hex = spec.fg\n\n\tif attr == 'bg' then\n\t\thex = spec.bg\n\telseif attr == 'hl' then\n\t\tlocal hl = vim.api.nvim_get_hl_by_name(spec.hl)\n\t\tif hl then\n\t\t\tif hl[attr] ~= nil then\n\t\t\t\thex = hl[attr]\n\t\t\tend\n\t\tend\n\tend\n\n\tif hex:sub(1, 1) == '#' then\n\t\thex = hex:sub(2)\n\tend\n\n\tself._hex = hex\n\treturn hex", "CodeBleu_score": 50.814300540301716}, {"code": "function Color:to_hex()\n\t\tif self._hex ~= nil then\n\t\treturn self._hex\n\tend\n\n\tlocal spec = self._spec\n\tlocal attr = self._attr\n\tlocal hl_group = self._hl_group\n\n\tif spec == nil then\n\t\treturn nil\n\tend\n\n\tlocal hex = spec.hex\n\tif hex ~= nil then\n\t\tself._hex = hex\n\t\treturn hex\n\tend\n\n\tlocal rgb = spec.rgb\n\tif rgb ~= nil then\n\t\thex = string.format('#%02x%02x%02x', rgb[1], rgb[2], rgb[3])\n\t\tself._hex = hex\n\t\treturn hex\n\tend\n\n\tlocal hsl = spec.hsl\n\tif hsl ~= nil then\n\t\tlocal rgb = hsl_to_rgb(hsl)\n\t\thex = string.format('#%02x%02x%02x', rgb[1], rgb[2], rgb[3])\n\t\tself._hex = hex\n\t\treturn hex\n\tend\n\n\tlocal hsv = spec.hsv\n\tif hsv ~= nil then\n\t\tlocal rgb = hsv_to_rgb(hsv)\n\t\thex = string.format('#%02x%02x%02x', rgb[1], rgb[2], rgb[3])\n\t\tself._hex = hex\n\t\treturn hex\n\tend\n\n\tlocal name = spec.name\n\tif name ~= nil then\n\t\tif hl_group == nil then\n\t\t\thl_group = name\n\t\tend\n\n\t\tlocal hl = vim.api.nvim_get_hl_by_name(hl_group)\n\t\tif hl == nil then\n\t\t\treturn nil\n\t\tend\n\n\t\tlocal fg = hl[attr][1]\n\t\tif fg == nil then\n\t\t\treturn nil\n\t\tend\n\n\t\thex = fg:gsub('^#?', '')\n\t\tself._hex = hex\n\t\treturn hex\n\tend\n\n\treturn nil", "CodeBleu_score": 43.27164110489154}, {"code": "function Color:to_hex()\n\t\tlocal hex = self._hex\n\tif hex then\n\t\treturn hex\n\tend\n\tlocal spec = self._spec\n\tlocal fg = spec.fg\n\tlocal bg = spec.bg\n\tlocal hl = nil\n\tif fg and fg.name == spec.name then\n\t\thl = fg\n\telseif bg and bg.name == spec.name then\n\t\thl = bg\n\telse\n\t\thl = vim.api.nvim_get_hl_by_name(spec.name)\n\tend\n\tif hl then\n\t\tlocal fg = hl.foreground\n\t\tlocal bg = hl.background\n\t\tif fg and bg then\n\t\t\thex = Color._rgb_to_hex(fg)\n\t\t\tif hex == Color._rgb_to_hex(bg) then\n\t\t\t\thex = nil\n\t\t\telse\n\t\t\t\thex = hex .. Color._rgb_to_hex(bg)\n\t\t\tend\n\t\telseif fg then\n\t\t\thex = Color._rgb_to_hex(fg)\n\t\telseif bg then\n\t\t\thex = Color._rgb_to_hex(bg)\n\t\tend\n\tend\n\tif hex then\n\t\tself._hex = hex\n\tend\n\treturn hex", "CodeBleu_score": 39.978553645528756}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal regex = vim.regex(pattern)\n\tfor i, line in ipairs(lines) do\n\t\tfor match in regex:gmatch(line) do\n\t\t\tbuffer:add_highlight(hl, i - 1, match.start, match.finish)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 39.96940351169938}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\nend\n", "CodeBleu_score": 2.642495415569507}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\nend\n", "CodeBleu_score": 2.642495415569507}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = buffer:get_id() .. row .. col\n\tbuffer:set_extmark(row, col, pos, {\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = \"right_align\",\n\t\tpriority = priority,\n\t\tid = id,\n\t})\n\treturn id", "CodeBleu_score": 50.104248071065946}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 10000 + col\n\tbuffer:set_extmark(pos, id, row, col, {virt_text = {{\" \" .. text .. \" \", hl}}, virt_text_pos = \"overlay\", priority = priority})\n\treturn id", "CodeBleu_score": 50.4295143699087}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = self:get_id(row, col)\n\tlocal hl_id = self:get_hl_id(hl)\n\tlocal pos_id = self:get_pos_id(pos)\n\tlocal priority_id = self:get_priority_id(priority)\n\tlocal virtual_text = {\n\t\tid = id,\n\t\thl_id = hl_id,\n\t\tpos_id = pos_id,\n\t\tpriority_id = priority_id,\n\t\ttext = text,\n\t}\n\tbuffer:set_extmark(self.ns_id, row, col, {virt_text = {virtual_text}})\n\treturn id", "CodeBleu_score": 45.07420785595648}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal lines = {}\n\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 10.982358467774171}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = ''\n\tfor char in output:gmatch('.') do\n\t\tif char == '", "CodeBleu_score": 11.000403415452855}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = ''\n\tfor char in output:gmatch('.') do\n\t\tif char == '", "CodeBleu_score": 11.000403415452855}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\nend\n", "CodeBleu_score": 1.7515213379056636}, {"code": "function Watcher:watch_file(path, handler)\n\t\nend\n", "CodeBleu_score": 1.7515213379056636}, {"code": "function Watcher:watch_file(path, handler)\n\t\nend\n", "CodeBleu_score": 1.7515213379056636}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines, err = self:get_lines()\n\tif err then return err end\n\tlocal hunks, err = self.git_object:hunks(lines)\n\tif err then return err end\n\tself:setup_signs(hunks)\n\treturn hunks", "CodeBleu_score": 16.838366387399375}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tif lines == nil then\n\t\treturn lines\n\tend\n\tlocal hunks = self.git_object:hunks(lines)\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\tlocal signs_setting = self:get_sign_setting()\n\tlocal namespace = self.namespace\n\tlocal sign_ns_id = namespace:get_sign_ns_id()\n\tlocal sign_id = namespace:get_sign_id()\n\tlocal sign_priority = namespace:get_sign_priority()\n\tlocal sign_priority_current = namespace:get_sign_priority_current()\n\tlocal sign_priority_added = namespace:get_sign_priority_added()\n\tlocal sign_priority_removed = namespace:get_sign_priority_removed()\n\tlocal sign_priority_changed = namespace:get_sign_priority_changed()\n\tlocal sign_priority_untracked = namespace:get_sign_priority_untracked()\n\tlocal sign_priority_ignored = namespace:get_sign_priority_ignored()\n\tlocal sign_priority_unmerged = namespace:get_sign_priority_unmerged()\n\tlocal sign_priority_deleted = namespace:get_sign_priority_deleted()\n\tlocal sign_priority_renamed = namespace:get_sign_priority_renamed()\n\tlocal sign_priority_copied = namespace:get_sign_priority_copied()\n\tlocal sign_priority_unchanged = namespace:get_sign_priority_unchanged()\n\tlocal sign_priority_staged = namespace:get_sign_priority_staged()\n\tlocal sign_priority_unstaged = namespace:get_sign_priority_unstaged()\n\tlocal sign_priority_untracked_deleted = namespace:get_sign_priority_untracked_deleted()\n\tlocal sign_priority_untracked_changed = namespace:get_sign_priority_untracked_changed()\n\tlocal sign_priority_untracked_added = namespace:get_sign_priority_untracked_added()\n\tlocal sign_priority_ignored_deleted = namespace:get_sign_priority_ignored_deleted()\n\tlocal sign_priority_ignored_changed = namespace:get_sign_priority_ignored", "CodeBleu_score": 23.27853178799043}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer_lines = self:get_lines()\n\tif buffer_lines then\n\t\tlocal hunks = self.git_object:get_hunks(buffer_lines)\n\t\tif hunks then\n\t\t\tself:setup_signs(hunks)\n\t\t\treturn hunks\n\t\tend\n\tend", "CodeBleu_score": 15.1847643082662}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = fs.tmpname()\n\tlocal f = io.open(temp_file, 'wb')\n\n\tf:write(patch)\n\tf:close()\n\n\tlocal _, err = self.git:stage_hunk(temp_file)\n\tfs.remove_file(temp_file)\n\n\treturn err", "CodeBleu_score": 45.915769603196765}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_name = fs.tmpname()\n\tlocal f = io.open(tmp_name, 'wb')\n\n\tfor i = 1, #patch.hunks do\n\t\tf:write(patch.hunks[i])\n\t\tf:write('", "CodeBleu_score": 36.97695272146856}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = fs.tmpname()\n\tfs.write_file(temp_file, patch.lines)\n\tlocal _, err = self.git:stage_hunk(self.path, patch.start, patch.length, temp_file)\n\tfs.remove_file(temp_file)\n\treturn err", "CodeBleu_score": 46.065907815695034}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n//        String accessTokenEndpoint = getAccessTokenEndpoint();\n        String accessTokenVerb = getAccessTokenVerb();\n        String accessTokenBody = getBody(requestToken, verifier);\n        String accessTokenHeader = getAccessTokenHeader();\n\n        String response = send(accessTokenEndpoint, accessTokenVerb, accessTokenHeader, accessTokenBody);\n        return extract(response);\n    }", "CodeBleu_score": 35.968904299908914}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t//        String authHeaderValue = getHttpBasicAuthHeaderValue();\n//        String body = getBody(requestToken, verifier);\n//        String verb = getAccessTokenVerb();\n//        String endpoint = getAccessTokenEndpoint();\n//        String response = send(endpoint, verb, authHeaderValue, body);\n//        return extract(response);\n//    }", "CodeBleu_score": 4.73347987450327}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\n\tResponse response = send(request);\n\treturn extract(response);\n}", "CodeBleu_score": 46.30619134473637}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create a credentials provider\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\n\t// Create credentials\n\tCredentials creds = new UsernamePasswordCredentials(\"username\", \"password\");\n\n\t// Add the credentials to the provider\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), creds);\n\n\t// Create an auth cache\n\tBasicAuthCache authCache = new BasicAuthCache();\n\n\t// Generate BASIC scheme object and add it to the local auth cache\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\n\t// Add the cache to the execution context\n\tcontext.setAuthCache(authCache);\n\n\t// Log the action\n\tlogger.info(\"Configured context for host: \" + host.getHostName());\n}", "CodeBleu_score": 46.75987211593361}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tBasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tBasicAuthCache authCache = new BasicAuthCache();\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\tcontext.setAuthCache(authCache);\n\tLOG.info(\"Configured context with host: \" + host);\n}", "CodeBleu_score": 57.333458745362584}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t// Create a credentials provider\nCredentialsProvider credsProvider = new BasicCredentialsProvider();\ncredsProvider.setCredentials(\nnew AuthScope(host.getHostName(), host.getPort()),\nnew UsernamePasswordCredentials(username, password));\n// Create an auth cache\nBasicAuthCache authCache = new BasicAuthCache();\n// Generate BASIC scheme object and add it to the local auth cache\nBasicScheme basicAuth = new BasicScheme();\nauthCache.put(host, basicAuth);\n// Add our newly created authentication cache to the execution context\ncontext.setAuthCache(authCache);\n// Log the host to which we are connecting\nlog.info(\"Connecting to host: \" + host.getHostName());\n}", "CodeBleu_score": 45.86543386214434}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCache avatarCache = AvatarCache.get();\nif (avatarCache == null) {\nthrow new IllegalStateException(\"AvatarCache is not enabled\");\n}\nString key = avatarCache.getDigestOf(source);\navatarCache.seed(source);\ntry {\nreturn avatarCache.getRootUrlFromRequest() + \"/\" + avatarCache.rawEncode(key, size);\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n}\n}", "CodeBleu_score": 38.66213514032503}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCache avatarCache = AvatarCache.get();\nif (avatarCache == null) {\nthrow new IllegalStateException(\"AvatarCache is not configured\");\n}\nString key = avatarCache.hashKey(source);\navatarCache.seedCache(source);\nString rootUrl = Jenkins.get().getRootUrl();\nif (rootUrl == null) {\nthrow new IllegalStateException(\"Jenkins root URL is not configured\");\n}\ntry {\nreturn rootUrl + avatarCache.rawEncode(key, size);\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n}\n}", "CodeBleu_score": 43.33698262302471}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCache avatarCache = AvatarCache.get();\nif (avatarCache == null) {\nthrow new IllegalStateException(\"AvatarCache instance is null\");\n}\nString key = avatarCache.getDigestOf(source);\navatarCache.seedCache(source);\nString encodedKey = avatarCache.rawEncode(key);\ntry {\nreturn avatarCache.getRootUrlFromRequest() + avatarCache.getUrlName() + \"/\" + encodedKey + \"/\" + size;\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n}\n}", "CodeBleu_score": 41.290364521746945}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\timage = scaleImage(image, 128);\n\t}\n\tthis.source = source;\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 47.61726332122797}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\timage = scaleImage(image, 128);\n\t}\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 53.29955311705373}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\timage = scaleImage(image, 128);\n\t}\n\tthis.source = source;\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 47.61726332122797}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tif (cacheEntry == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\timage = cacheEntry.getImage();\n\t\t\tlastModified = cacheEntry.getLastModified();\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.93033469646861}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tif (cacheEntry != null) {\n\t\t\t\tcacheEntry.image = image;\n\t\t\t\tcacheEntry.lastModified = lastModified;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tcacheEntry = null;\n\t\t}\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 41.96543031052508}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tfinal Image image = future.get();\n\t\t\tif (image != null) {\n\t\t\t\tupdateImage(image);\n\t\t\t}\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t}\n\t} catch (final Exception e) {\n\t\t// ignore\n\t}\n\treturn true;\n}", "CodeBleu_score": 36.99178799495203}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Cache-Control\", \"no-cache\");\n\trsp.setHeader(\"Expires\", \"Fri, 01 Jan 1990 00:00:00 GMT\");\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\twrite(baos);\n\tif (flush) {\n\t\trsp.getOutputStream().flush();\n\t}\n\trsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 33.121188365724905}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\nrsp.setContentType(\"image/png\");\n\nByteArrayOutputStream out = new ByteArrayOutputStream();\n\nImageIO.write(new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB), \"PNG\", out);\n\nrsp.setContentLength(out.size());\n\nrsp.setHeader(\"Expires\", \"Sat, 12 Dec 2011 00:00:00 GMT\");\n\nrsp.setHeader(\"Cache-Control\", \"max-age=3600\");\n\nrsp.setHeader(\"Last-Modified\", \"Sat, 12 Dec 2011 00:00:00 GMT\");\n\nrsp.setHeader(\"Pragma\", \"no-cache\");\n\nout.writeTo(rsp.getOutputStream());\n\nif (out.size() > 0) {\n\nrsp.flushBuffer();\n\n}\n\n}", "CodeBleu_score": 36.94079992711137}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\nOutputStream out = rsp.getOutputStream();\n\n// set the content type and cache headers\nrsp.setContentType(\"image/png\");\nrsp.addHeader(\"Cache-Control\", \"no-cache\");\n\n// get the image\nBufferedImage image = getImage();\n\n// write the image to the output stream\nImageIO.write(image, \"PNG\", out);\n\n// flush the output stream if required\nif(flush) {\nout.flush();\n}\n}", "CodeBleu_score": 29.46456796761784}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t", "CodeBleu_score": 7.452943353488384}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n//        this.owner = owner;\n//        this.projectKey = projectKey;\n//        this.repositoryName = repositoryName;\n\n        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n\n        this.client = HttpClientBuilder.create().build();\n        this.context = HttpClientContext.create();\n\n        if (authenticator != null) {\n            authenticator.configureContext(context, null);\n        }\n\n        if (enableCache) {\n            this.teamCache = CacheBuilder.newBuilder()\n                    .expireAfterWrite(teamCacheDuration, TimeUnit.SECONDS)\n                    .build();\n            this.repositoriesCache = CacheBuilder.newBuilder()\n                    .expireAfterWrite(repositoriesCacheDuration, TimeUnit.SECONDS)\n                    .build();\n        }\n\n        this.retryHandler = new BitbucketApiRetryHandler();\n        this.client.setRetryHandler(retryHandler);\n\n        if (enableCache) {\n            this.client = this.client.newBuilder()\n                    .cache(new BitbucketApiCache(this.teamCache, this.repositoriesCache))\n                    .build();\n        }\n\n        // set client proxy parameters\n        setClientProxyParams(\"bitbucket.org\", this.client);\n    }", "CodeBleu_score": 42.47371580776772}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\nthis(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName);\n\nif (authenticator != null) {\nauthenticator.configureContext(context, null);\nauthenticator.configureBuilder(builder);\n}\n\nsetClientProxyParams(bitbucketServerUrl, builder);\n\nclient = builder.build();\n}", "CodeBleu_score": 19.38298109384474}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketCloudBranch sourceBranch = pullRequest.getSource();\n\ttry {\n\t\tif (sourceBranch != null) {\n\t\t\tString rawNode = sourceBranch.getRawNode();\n\t\t\tif (rawNode != null) {\n\t\t\t\tCommitClosure sourceCommitClosure = new CommitClosure(rawNode);\n\t\t\t\tpullRequest.setSourceCommitClosure(sourceCommitClosure);\n\t\t\t}\n\t\t}\n\t} catch (IOException | InterruptedException e) {\n\t\tLOGGER.error(\"Error setting up commit closure for source branch of pull request \" + pullRequest.getTitle(), e);\n\t}\n\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\ttry {\n\t\tif (destinationBranch != null) {\n\t\t\tString rawNode = destinationBranch.getRawNode();\n\t\t\tif (rawNode != null) {\n\t\t\t\tCommitClosure destinationCommitClosure = new CommitClosure(rawNode);\n\t\t\t\tpullRequest.setDestinationCommitClosure(destinationCommitClosure);\n\t\t\t}\n\t\t}\n\t} catch (IOException | InterruptedException e) {\n\t\tLOGGER.error(\"Error setting up commit closure for destination branch of pull request \" + pullRequest.getTitle(), e);\n\t}\n}", "CodeBleu_score": 35.31916347755958}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranchName = pullRequest.getSource().getBranch().getName();\n\tString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\ttry {\n\t\tBitbucketCloudBranch sourceBranch = getBranch(sourceBranchName);\n\t\tif (sourceBranch != null) {\n\t\t\tpullRequest.getSource().setCommitClosure(new BitbucketCloudCommitClosure(sourceBranch.getRawNode()));\n\t\t}\n\t\tBitbucketCloudBranch destinationBranch = getBranch(destinationBranchName);\n\t\tif (destinationBranch != null) {\n\t\t\tpullRequest.getDestination().setCommitClosure(new BitbucketCloudCommitClosure(destinationBranch.getRawNode()));\n\t\t}\n\t} catch (IOException | InterruptedException e) {\n\t\tLOGGER.log(Level.WARNING, \"Could not retrieve source or destination branch for pull request \" + pullRequest.getId() + \" in repository \" + owner + \"/\" + repositoryName, e);\n\t}\n}", "CodeBleu_score": 42.880596918875234}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tif (pullRequest.getSource() != null) {\n\t\ttry {\n\t\t\tBitbucketCloudBranch branch = getBranch(pullRequest.getSource().getBranch().getName());\n\t\t\tpullRequest.getSource().setCommitClosure(new BitbucketCloudCommitClosure(branch.getRawNode()));\n\t\t} catch (IOException | InterruptedException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Could not retrieve source branch \" + pullRequest.getSource().getBranch().getName() + \" for pull request \" + pullRequest.getId() + \" from Bitbucket Cloud repository \" + owner + \"/\" + repositoryName, e);\n\t\t}\n\t}\n\tif (pullRequest.getDestination() != null) {\n\t\ttry {\n\t\t\tBitbucketCloudBranch branch = getBranch(pullRequest.getDestination().getBranch().getName());\n\t\t\tpullRequest.getDestination().setCommitClosure(new BitbucketCloudCommitClosure(branch.getRawNode()));\n\t\t} catch (IOException | InterruptedException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Could not retrieve destination branch \" + pullRequest.getDestination().getBranch().getName() + \" for pull request \" + pullRequest.getId() + \" from Bitbucket Cloud repository \" + owner + \"/\" + repositoryName, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.01008898227326}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tString jenkinsLocationConfigurationUrl = JenkinsLocationConfiguration.get().getUrl();\n\tif (jenkinsLocationConfigurationUrl == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured\");\n\t}\n\treturn JenkinsLocationConfiguration.get().getURLFor(build);\n}", "CodeBleu_score": 58.10701754428019}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tString url = build.getAbsoluteUrl();\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"Could not retrieve Jenkins root URL.\");\n\t}\n\turl = url.substring(0, url.lastIndexOf('/'));\n\treturn url;\n}", "CodeBleu_score": 48.5287319895005}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get()\n\tString url = locationConfiguration.getUrl()\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured\")\n\t}\n\tString rootUrl = locationConfiguration.getRootUrl()\n\tif (rootUrl == null) {\n\t\trootUrl = url\n\t}\n\treturn rootUrl\n}", "CodeBleu_score": 46.21747709126141}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tString host = URI.create(url).getHost()\n\tif (host == null) {\n\t\tthrow new IllegalStateException(\"Invalid URL: ${url}\")\n\t}\n\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Invalid URL: ${url}\")\n\t}\n\tif (host.contains(\"localhost\") || host.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Invalid URL: ${url}\")\n\t}\n\tif (bitbucket.isCloud() && host.contains(\"bitbucket.org\") && !host.endsWith(\"bitbucket.org\")) {\n\t\tthrow new IllegalStateException(\"Invalid URL: ${url}\")\n\t}\n\treturn url\n}", "CodeBleu_score": 38.22468278585257}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURI uri = new URI(url);\n\t\tString host = uri.getHost();\n\t\tif (host == null) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t\t}\n\t\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudClient) {\n\t\t\tif (host.contains(\".\")) {\n\t\t\t\treturn url;\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t\t}\n\t\treturn url;\n\t} catch (URISyntaxException e) {\n\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t}\n}", "CodeBleu_score": 46.15644954531686}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL u = new URL(url);\n\t\tString host = u.getHost();\n\t\tif (host == null) {\n\t\t\tthrow new IllegalStateException(\"Invalid URL: \" + url);\n\t\t}\n\t\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Invalid URL: \" + url + \" -- Do not use localhost or unconfigured-jenkins-location as the host.\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (!host.contains(\".\")) {\n\t\t\t\tthrow new IllegalStateException(\"Invalid URL: \" + url + \" -- Bitbucket Cloud API clients require a fully qualified host name.\");\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Invalid URL: \" + url, e);\n\t}\n}", "CodeBleu_score": 52.15359497231595}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\nif (revision == null) {\n    listener.getLogger().println(\"[Bitbucket] No SCM revision found, skipping build status notification\");\n    return;\n}\n\nboolean notificationsDisabled = source.getTraits().contains(BitbucketSCMSourceTrait.NO_NOTIFICATIONS);\nif (notificationsDisabled) {\n    listener.getLogger().println(\"[Bitbucket] Build status notifications are disabled\");\n    return;\n}\n\nString branch = revision.getBranches().isEmpty() ? null : revision.getBranches().get(0);\nboolean shareBuildKeyBetweenBranchAndPR = source.getTraits().contains(BitbucketSCMSourceTrait.SHARE_BUILD_KEY_WITH_PR_BRANCH);\nString key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\nString hash = getHash(revision);\n\nif (hash == null) {\n    listener.getLogger().println(\"[Bitbucket] No commit hash found, skipping build status notification\");\n    return;\n}\n\nBitbucketApi bitbucket = buildBitbucketClient(source, listener);\n\nlistener.getLogger().println(\"[Bitbucket] Sending build status notification\");\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 44.791039876308176}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.disableNotification()) {\nlistener.getLogger().println(\"[Bitbucket] Skip result notification\");\nreturn;\n}\n\nSCMRevision revision = build.getAction(GitRevisionBuildParameters.class).getRevision();\nif (revision == null) {\nrevision = build.getRevision();\n}\n\nString hash = getHash(revision);\nif (hash == null) {\nlistener.getLogger().println(\"[Bitbucket] Skip result notification, hash is null\");\nreturn;\n}\n\nboolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\nString branch = context.getBranch();\nString buildKey = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\nBitbucketApi bitbucket = buildBitbucketClient(source, build, listener);\n\ncreateStatus(build, listener, bitbucket, buildKey, hash);\n}", "CodeBleu_score": 45.89625745511001}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nSCMHead head = getHead(build);\nif (head == null) {\n    return;\n}\n\nString branch = head.getName();\nboolean shareBuildKeyBetweenBranchAndPR = false;\nfor (SCMHeadFilter filter : source.getTraits()) {\n    if (filter instanceof ExcludeOriginPRBranchesSCMHeadFilter) {\n        shareBuildKeyBetweenBranchAndPR = true;\n        break;\n    }\n}\n\nString key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\nString hash = getHash(getRevision(build));\nif (hash == null) {\n    listener.getLogger().println(\"[Bitbucket] Could not determine the hash of the revision for the build\");\n    return;\n}\n\nBitbucketApiClient bitbucket = buildBitbucketClient(source, build, listener);\nif (bitbucket == null) {\n    return;\n}\n\nif (notificationsDisabled(source, build, listener)) {\n    listener.getLogger().println(\"[Bitbucket] Commit status notifications are disabled\");\n    return;\n}\n\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 43.60447826478241}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString key = null\nif (shareBuildKeyBetweenBranchAndPR) {\nkey = build.getParent().getFullName() + \" \" + branch\n} else {\nkey = build.getDisplayName()\n}\nreturn key\n}", "CodeBleu_score": 40.48314864105276}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t//    String buildKey = build.getParent().getFullName();\n//    if (shareBuildKeyBetweenBranchAndPR) {\n//        buildKey = build.getParent().getFullName() + \"-\" + branch;\n//    }\n//    return buildKey;\n    return build.getParent().getFullName();\n}", "CodeBleu_score": 15.278798556112083}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t\ndef branchName = branch\n\nif (branchName == null) {\n    branchName = \"master\"\n}\n\nString key = null\n\nif (shareBuildKeyBetweenBranchAndPR) {\n    String folderName = build.getParent().getFullName()\n    key = folderName + \"-\" + branchName\n} else {\n    key = build.getParent().getFullName()\n}\n\nreturn key\n}", "CodeBleu_score": 52.35267861260492}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nserverUrl = Jenkins.get().getDescriptorByType(BitbucketSCMNavigator.DescriptorImpl.class).getServerUrl();\nif (serverUrl == null) {\nLOGGER.log(Level.WARNING, \"Could not resolve serverUrl for BitbucketSCMNavigator {0}. ServerUrl is null, and the Jenkins Bitbucket Server Plugin is not configured.\", name);\n}\n}\nif (traits == null) {\ntraits = new ArrayList<>();\ntraits.add(new BitbucketSCMNavigatorTrait(serverUrl));\n}\nreturn this;\n}", "CodeBleu_score": 26.149799028925237}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nString url = BitbucketSCMNavigator.getDeprecatedServerUrl();\nif (url != null) {\nserverUrl = url;\n} else {\nLOGGER.warning(\"Could not resolve server URL for Bitbucket SCM navigator '\" + name + \"'. This navigator will be ignored.\");\nreturn null;\n}\n}\n\nif (traits == null) {\ntraits = new BitbucketSCMNavigatorTrait.Builder().autoBuild();\n}\n\nreturn this;\n}", "CodeBleu_score": 15.452714299370236}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nString url = (String) get(SERVER_URL_KEY);\nif (url != null) {\nserverUrl = new URL(url);\n}\nelse {\nlog.warn(\"The \" + SERVER_URL_KEY + \" property is null. This is likely due to a Jenkins upgrade. The \" + SERVER_URL_KEY + \" property will be set to \" + DEFAULT_SERVER_URL + \".\");\nserverUrl = DEFAULT_SERVER_URL;\n}\n}\nif (traits == null) {\nString traitsString = (String) get(TRAITS_KEY);\nif (traitsString != null) {\ntraits = new BitbucketSCMNavigatorTrait.Builder().traits(traitsString).build();\n}\nelse {\ntraits = new BitbucketSCMNavigatorTrait.Builder().autoBuild(false).build();\n}\n}\nreturn this;\n}", "CodeBleu_score": 24.082659657400026}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (isMatch) {\n\t\tlogger.info(\"Proposing repository {} ({})\", repository.getFullName(), repository.getSlug());\n\t\tproposedCount++;\n\t} else {\n\t\tlogger.info(\"Ignoring repository {} ({})\", repository.getFullName(), repository.getSlug());\n\t\tignoredCount++;\n\t}\n}", "CodeBleu_score": 48.98661257491537}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tString message = \"Checking Bitbucket repository \" + getFullName(repository) + \" against \" + name + \": \";\n\tif (isMatch) {\n\t\tmessage += \"MATCH!\";\n\t\tcount++;\n\t} else {\n\t\tmessage += \"no match.\";\n\t}\n\tgetLogger().format(\"%s%n\", message);\n}", "CodeBleu_score": 50.12959353852783}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tString message = format(\"Repository '%s' %s\", repository.getFullName(), isMatch ? \"is\" : \"is not\");\n\tif (isMatch) {\n\t\tcount++;\n\t\tgetLogger().info(message);\n\t}\n\telse {\n\t\tgetLogger().info(message + \" ignored\");\n\t}\n}", "CodeBleu_score": 51.81924653874654}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n//    if (marked == null) {\n//        return rev;\n//    }\n//\n//    String sha1 = marked.getSha1();\n//    if (sha1 == null) {\n//        return rev;\n//    }\n//\n//    String branch = marked.getBranches().isEmpty() ? null : marked.getBranches().get(0);\n//    if (branch == null) {\n//        return rev;\n//    }\n//\n//    List<RefSpec> refspecs = scm.getExtensions().stream()\n//        .filter(GitSCMSourceTrait::isBranch)\n//        .filter(trait -> trait.getBranch() != null && !trait.getBranch().equals(branch))\n//        .map(trait -> new RefSpec(trait.getBranch() + \":\" + trait.getBranch()))\n//        .collect(toList());\n//\n//    if (refspecs.isEmpty()) {\n//        return rev;\n//    }\n//\n//    if (commitExists(git, sha1)) {\n//        return rev;\n//    }\n//\n//    try {\n//        listener.getLogger().format(\"Fetching %s from %s%n\", sha1, scm.getRemote());\n//        git.fetch_().from(scm.getRemote(), refspecs).execute();\n//    } catch (GitException e) {\n//        throw new AbortException(\"Failed to fetch \" + sha1 + \" from \" + scm.getRemote());\n//    }\n//\n//    return rev;\n    return rev;\n}", "CodeBleu_score": 8.469890856279827}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\nGitSCM.GitSCMRevisionType type = scm.getRevisionType(marked);\nif (type != GitSCM.GitSCMRevisionType.BRANCH && type != GitSCM.GitSCMRevisionType.TAG && type != GitSCM.GitSCMRevisionType.HASH) {\n    return rev;\n}\n\nString sha1 = marked.getSha1();\n\nif (type == GitSCM.GitSCMRevisionType.HASH && !commitExists(git, sha1)) {\n    listener.getLogger().format(\"Commit %s not found, checking out %s%n\", sha1, marked.getBranches());\n    return new GitSCM.GitSCMRevision(scm, marked.getBranches(), sha1);\n}\n\nif (type == GitSCM.GitSCMRevisionType.BRANCH) {\n    String branch = marked.getBranches().get(0);\n    List<String> refspecs = new ArrayList<>();\n    List<String> branches = new ArrayList<>();\n    for (RemoteConfig remote : scm.getRepositories()) {\n        for (BranchSpec branchSpec : remote.getBranches()) {\n            if (branchSpec.getName().equals(branch)) {\n                String remoteName = remote.getName();\n                String remoteUrl = remote.getUrl();\n                if (remoteUrl.endsWith(\"/\")) {\n                    remoteUrl = remoteUrl.substring(0, remoteUrl.length() - 1);\n                }\n                String remoteBranch = branchSpec.getSrc();\n                if (!remoteBranch.startsWith(branch + \"/\")) {\n                    remoteBranch = branch + \"/\" + remoteBranch;\n                }\n                String refspec = remoteName + \":\" + remoteBranch;\n                listener.getLogger().format(\"Checking remote %s for branch %s%n\", remoteName, remoteBranch);\n                if (!commitExists(git, remoteBranch)) {\n                    refspecs.add(refspec);\n                    branches.add(remoteBranch);\n                }\n            }\n        }\n    }\n    if (!refspecs.isEmpty()) {\n        listener.getLogger().format(\"Fetching remote branches %s%n\", branches);\n        git.fetch_().from(remoteUrl, refspecs).execute();\n    }\n    return new GitSCM.GitSCMRevision(scm, marked.getBranches(), sha1);\n}\n\nreturn rev;\n}", "CodeBleu_score": 37.70565116230798}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\nList<RefSpec> refspecs = new ArrayList<RefSpec>();\n\nfor (BranchSpec branch : scm.getBranches()) {\n    String branchName = branch.getName();\n    if (branchName.contains(\"*\")) {\n        continue;\n    }\n\n    String branchSha1 = git.revParse(branchName);\n    if (!commitExists(git, branchSha1)) {\n        refspecs.add(new RefSpec(\"+\" + branchName + \":\" + branchName));\n    }\n}\n\nif (refspecs.isEmpty()) {\n    return rev;\n}\n\nlistener.getLogger().format(\"Fetching from %s%n\", scm.getRemote());\n\ngit.fetch_().from(scm.getRemote(), refspecs).execute();\n\nreturn rev;\n}", "CodeBleu_score": 32.78732912909201}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> result = null;\n\tif (links != null) {\n\t\tresult = new HashMap<String, BitbucketHref>();\n\t\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\t\tList<BitbucketHref> list = entry.getValue();\n\t\t\tif (list != null && !list.isEmpty()) {\n\t\t\t\tresult.put(entry.getKey(), list.get(0));\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.846197150789216}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tList<BitbucketHref> hrefs = entry.getValue();\n\t\tif (hrefs != null && !hrefs.isEmpty()) {\n\t\t\tresult.put(entry.getKey(), hrefs.get(0));\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 59.38227274458221}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t}\n\treturn result;\n}", "CodeBleu_score": 52.41446233685336}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t", "CodeBleu_score": 2.2664046881289432}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates.length) {\n\t\treturn;\n\t}\n\n\tconst repository = this.repository;\n\n\tconst resources = await Promise.all(resourceStates.map(async resourceState => {\n\t\tconst resourceUri = resourceState.resourceUri;\n\t\tconst resource = this.toResource(resourceUri);\n\n\t\treturn { resourceUri, resource };\n\t}));\n\n\tconst filePaths = resources.map(resource => resource.resource.toString());\n\n\ttry {\n\t\tawait repository.add(filePaths);\n\t} catch (error) {\n\t\tconst message = localize('add.failure', \"Unable to add '{0}' to the index. Please ensure there are no missing files, the file is not ignored, and your workspace is not ignored.\", resources[0].resourceUri.path);\n\t\tconst actions: MessageItem[] = [{\n\t\t\ttitle: localize('add.open.folder', \"Open Workspace Folder\"),\n\t\t\trun: () => this.openFolder(repository.rootUri)\n\t\t}];\n\n\t\tthis.messageService.show(Severity.Error, message, ...actions);\n\t}\n}", "CodeBleu_score": 38.11030862556635}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t", "CodeBleu_score": 2.2664046881289432}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getSCMResource();\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 32.888142484675}, {"code": "protected async getResourceStates{\n\t\tconst resourceStates = await this.getResourceStatesCore();\n\tif (!resourceStates || resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n\t\tconst uri = await this.getUri();\n\t\tif (uri) {\n\t\t\tresourceStates.unshift(uri);\n\t\t}\n\t}\n\n\treturn resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 39.0556882915155}, {"code": "protected async getResourceStates{\n\t\tconst resourceStates = this.resourceStates;\n\tconst resourceUris = this.resourceUris;\n\n\tif (resourceStates.length === 0 || !(resourceUris[0] instanceof Uri)) {\n\t\tconst resource = await this.getResource(resourceUris[0]);\n\t\tthis.resourceStates = [resource];\n\t\treturn this.resourceStates;\n\t}\n\n\tconst resourceStates = await this.getResourceStatesFromResourceUris(resourceUris);\n\treturn this.filterResourceStates(resourceStates);\n}", "CodeBleu_score": 34.61700285412698}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t(\nconst remoteRepository = await this.model.getRemoteRepository(element.repository);\nif (element.status === SvnStatus.Modified) {\nconst oldUri = Uri.parse(element.oldUri);\nconst newUri = Uri.parse(element.newUri);\nconst oldFileUri = this.svnUri.fromUri(oldUri, remoteRepository);\nconst newFileUri = this.svnUri.fromUri(newUri, remoteRepository);\nthis.openDiff(oldFileUri, newFileUri);\n} else if (element.status === SvnStatus.Added) {\nconst newUri = Uri.parse(element.newUri);\nconst newFileUri = this.svnUri.fromUri(newUri, remoteRepository);\nthis.openFileRemote(newFileUri);\n}\n)}", "CodeBleu_score": 39.2862760216255}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t(\n this.model.getRemoteRepository(element.repository).then((remoteRepository: SvnRepository) => {\n let oldPath = element.oldPath;\n let newPath = element.newPath;\n let oldRevision = element.oldRevision;\n let newRevision = element.newRevision;\n let uri = Uri.parse(remoteRepository.rootUri).with({ path: newPath, query: `revision=${newRevision}` });\n let uriOld = Uri.parse(remoteRepository.rootUri).with({ path: oldPath, query: `revision=${oldRevision}` });\n let diffArgs = ['diff', uriOld.toString(), uri.toString()];\n this.openDiff(diffArgs);\n });\n }", "CodeBleu_score": 33.0175382595585}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t", "CodeBleu_score": 2.6796502104451685}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Clipboard access is not supported in this environment');\n\t\treturn;\n\t}\n\n\tif (item.type !== 'commit') {\n\t\treturn;\n\t}\n\n\tconst commit = item.commit;\n\tif (what === 'commit') {\n\t\tclipboard.writeText(commit.message);\n\t} else if (what === 'revision') {\n\t\tclipboard.writeText(commit.hash.full);\n\t}\n}", "CodeBleu_score": 35.42793475286346}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Your system does not support copying to the clipboard');\n\t\treturn;\n\t}\n\n\tif (item.type === 'commit') {\n\t\tclipboard.writeText(item.message || item.hash);\n\t} else {\n\t\twindow.showErrorMessage('You can only copy commits to the clipboard');\n\t}\n}", "CodeBleu_score": 27.545420045186443}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Copy to clipboard is not supported in this environment');\n\t\treturn;\n\t}\n\n\tif (item.type === LogType.Commit) {\n\t\tconst commit = item.commit;\n\t\tif (what === 'message') {\n\t\t\tawait clipboard.writeText(commit.message);\n\t\t} else {\n\t\t\tawait clipboard.writeText(commit.hash.full);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.488325924111535}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best != null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.2522206350899}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\tlong priority = 0L;\n\tGiteaConnectionFactory best = null;\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\tif (factory.canOpen(this)) {\n\t\t\tlong p = factory.priority(this);\n\t\t\tif (best == null || p > priority) {\n\t\t\t\tbest = factory;\n\t\t\t\tpriority = p;\n\t\t\t}\n\t\t}\n\t}\n\tif (best != null) {\n\t\treturn best.open(this);\n\t}\n\tthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.50873005983576}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\tlong priority = 0L;\n\tGiteaConnectionFactory best = null;\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\tif (factory.canOpen(this)) {\n\t\t\tlong p = factory.priority(this);\n\t\t\tif (best == null || p > priority) {\n\t\t\t\tbest = factory;\n\t\t\t\tpriority = p;\n\t\t\t}\n\t\t}\n\t}\n\tif (best != null) {\n\t\treturn best.open(this);\n\t}\n\tthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.50873005983576}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = Jenkins.getInstanceOrNull().getPluginManager().getPlugin(\"gitea\").classLoader;\nif (classLoader == null) {\nclassLoader = getClass().getClassLoader();\n}\nreturn this.getClass().cast(classLoader.loadClass(\"org.jenkinsci.plugins.gitea.Gitea\").newInstance());\n}", "CodeBleu_score": 45.43249264737707}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = Jenkins.getInstance() == null ? getClass().getClassLoader() : Jenkins.getInstance().getPluginManager().uberClassLoader;\nreturn new Gitea(classLoader);\n}", "CodeBleu_score": 54.146184362612274}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = Jenkins.getInstanceOrNull() != null ? Jenkins.getInstance().getPluginManager().getPlugin(\"gitea\").classLoader : Gitea.class.getClassLoader();\nreturn classLoader.loadClass(\"org.jenkinsci.plugins.gitea.Gitea\").newInstance();\n}", "CodeBleu_score": 43.318639720678334}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName == null ? getDisplayNameFromUrl(serverUrl) : displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 32.28009901639561}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tif (isBlank(displayName)) {\ndisplayName = fromUrl(serverUrl);\n}\n\nthis.displayName = displayName;\nthis.serverUrl = normalizeServerUrl(serverUrl);\nthis.manageHooks = manageHooks;\nif (manageHooks && isBlank(credentialsId)) {\nthrow new IllegalArgumentException(\"Credentials ID must be specified when managing hooks\");\n}\n\nthis.credentialsId = credentialsId;\nthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 35.962978283120336}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = trimToNull(aliasUrl);\n\tif (isBlank(displayName)) {\n\t\tthis.displayName = fromUrl(serverUrl);\n\t}\n\tif (manageHooks && isBlank(credentialsId)) {\n\t\tthrow new IllegalArgumentException(\"credentialsId is required if hooks are managed\");\n\t}\n}", "CodeBleu_score": 36.71768890648}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tif (!checkPermission()) {\n\t\treturn items;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaAuth> credentials = includeMatchingAs(GiteaAuth.getAll(), serverUrl);\n\tfor (GiteaAuth credential : credentials) {\n\t\titems.add(credential.getId(), credential.getId());\n\t}\n\treturn items;\n}", "CodeBleu_score": 36.98219397845117}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tif (StringUtils.isEmpty(serverUrl)) {\n\t\treturn items;\n\t}\n\n\ttry {\n\t\t// Check if the user has administrative permissions.\n\t\tif (!checkPermission(serverUrl)) {\n\t\t\titems.add(\"No credentials with administrative permissions found for this server URL.\", \"\");\n\t\t\treturn items;\n\t\t}\n\n\t\t// Normalize the server URL.\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\n\t\t// Include matching credentials based on the server URL requirements and authentication tokens for GiteaAuth.\n\t\titems.add(\"Select a credential\", \"\");\n\t\titems.addAll(includeMatchingAs(serverUrl, GiteaAuth.class));\n\t} catch (Exception e) {\n\t\tLOGGER.log(Level.WARNING, \"Failed to populate credentials dropdown list for server URL: \" + serverUrl, e);\n\t\titems.add(\"Failed to populate credentials dropdown list for server URL: \" + serverUrl, \"\");\n\t}\n\treturn items;\n}", "CodeBleu_score": 34.06185006799692}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tif (serverUrl == null) {\n\t\treturn items;\n\t}\n\ttry {\n\t\tif (!checkPermission(serverUrl)) {\n\t\t\treturn items;\n\t\t}\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\titems.add(includeMatchingAs(get(serverUrl), serverUrl), serverUrl);\n\t} catch (Exception e) {\n\t\tLOGGER.log(Level.WARNING, \"Failed to get credentials list for server URL: \" + serverUrl, e);\n\t}\n\treturn items;\n}", "CodeBleu_score": 35.89782689127487}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURL url = new URL(serverUrl);\n\t\tString protocol = url.getProtocol();\n\t\tString host = url.getHost();\n\t\tint port = url.getPort();\n\t\tString file = url.getFile();\n\t\tString fragment = url.getRef();\n\n\t\tif (file != null && file.endsWith(\"/\")) {\n\t\t\tfile = file.substring(0, file.length() - 1);\n\t\t}\n\n\t\tif (port == -1) {\n\t\t\tport = url.getDefaultPort();\n\t\t}\n\n\t\tif (port == 80 && protocol.equals(\"http\")) {\n\t\t\tport = -1;\n\t\t} else if (port == 443 && protocol.equals(\"https\")) {\n\t\t\tport = -1;\n\t\t}\n\n\t\tif (port != -1) {\n\t\t\thost = host + \":\" + port;\n\t\t}\n\n\t\treturn new URL(protocol, host, file, null).toString();\n\t} catch (MalformedURLException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 36.649191332691466}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\n\ntry {\nURI uri = new URI(serverUrl);\nString scheme = uri.getScheme();\nString host = uri.getHost();\nint port = uri.getPort();\nString path = uri.getPath();\nString query = uri.getQuery();\nString fragment = uri.getFragment();\nString userInfo = uri.getUserInfo();\n\nif (scheme != null) {\nscheme = scheme.toLowerCase();\n}\n\nif (host != null) {\nhost = host.toLowerCase();\n}\n\nif (port == -1) {\nif (\"http\".equals(scheme)) {\nport = 80;\n} else if (\"https\".equals(scheme)) {\nport = 443;\n}\n}\n\nif (path != null) {\npath = path.replaceAll(\"/$\", \"\");\n}\n\nif (query != null) {\nquery = query.replaceAll(\"&\", \"%26\");\n}\n\nif (fragment != null) {\nfragment = fragment.replaceAll(\"&\", \"%26\");\n}\n\nif (userInfo != null) {\nuserInfo = userInfo.replaceAll(\"&\", \"%26\");\n}\n\nStringBuilder builder = new StringBuilder();\nif (scheme != null) {\nbuilder.append(scheme);\nbuilder.append(\"://\");\n}\n\nif (userInfo != null) {\nbuilder.append(userInfo);\nbuilder.append(\"@\");\n}\n\nif (host != null) {\nbuilder.append(host);\n}\n\nif (port != -1) {\nbuilder.append(\":\");\nbuilder.append(port);\n}\n\nif (path != null) {\nbuilder.append(path);\n}\n\nif (query != null) {\nbuilder.append(\"?\");\nbuilder.append(query);\n}\n\nif (fragment != null) {\nbuilder.append(\"#\");\nbuilder.append(fragment);\n}\n\nreturn builder.toString();\n} catch (URISyntaxException e) {\nreturn serverUrl;\n}\n}", "CodeBleu_score": 42.71605663798518}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\n\ntry {\nURI uri = new URI(serverUrl);\nif (uri.getPort() == 80) {\nuri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n} else if (uri.getPort() == 443) {\nuri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n}\n\nreturn uri.normalize().toString();\n} catch (URISyntaxException e) {\nreturn serverUrl.toLowerCase().replace(\"http://\", \"http://\").replace(\"https://\", \"https://\").replace(\"://\", \"://\").replace(\":/\", \"://\").replace(\":\\\\\", \"://\").replaceAll(\"/$\", \"\");\n}\n}", "CodeBleu_score": 31.928680066610866}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nString displayName = server.getDisplayName();\nif (StringUtils.isBlank(displayName)) {\ndisplayName = server.getServerUrl();\n}\nmodel.add(displayName, server.getServerUrl());\n}\nreturn model;\n}", "CodeBleu_score": 50.05561015498743}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nif (StringUtils.isBlank(server.getDisplayName())) {\nmodel.add(server.getUrl());\n} else {\nmodel.add(server.getDisplayName(), server.getUrl());\n}\n}\nreturn model;\n}", "CodeBleu_score": 37.242793517780136}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nString serverUrl = server.getServerUrl();\nString displayName = server.getDisplayName();\nif (StringUtils.isBlank(displayName)) {\ndisplayName = serverUrl;\n}\nmodel.add(displayName, serverUrl);\n}\nreturn model;\n}", "CodeBleu_score": 58.336100143433754}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\nList<GiteaServer> serverList = new ArrayList<GiteaServer>();\nif (servers != null) {\n    for (GiteaServer server : servers) {\n        if (server.getUrl() != null && !server.getUrl().isEmpty()) {\n            serverList.add(server);\n        }\n    }\n}\n\n// remove duplicates\nSet<GiteaServer> serverSet = new HashSet<GiteaServer>(serverList);\nserverList.clear();\nserverList.addAll(serverSet);\n\n// remove empty urls\nfor (GiteaServer server : serverList) {\n    server.setUrl(fixNull(server.getUrl()));\n}\n\n// sort list\nCollections.sort(serverList, new Comparator<GiteaServer>() {\n    @Override\n    public int compare(GiteaServer o1, GiteaServer o2) {\n        return o1.getUrl().compareTo(o2.getUrl());\n    }\n});\n\n// update servers\nGiteaServers.this.servers = serverList;\n\n// save\nsave();\n}", "CodeBleu_score": 32.91889567891103}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\n\t// Check for admin permission\n\tcheckPermission();\n\n\t// Remove duplicates and empty URLs\n\tSet<GiteaServer> serverSet = new HashSet<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server.getUrl() != null && !server.getUrl().isEmpty()) {\n\t\t\tserverSet.add(server);\n\t\t}\n\t}\n\tservers = new ArrayList<>(serverSet);\n\n\t// Update the list of servers\n\tget().replaceBy(servers);\n\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 30.27502423583514}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tthrow new IllegalArgumentException(\"The server list cannot be null\");\n\t}\n\n\tList<GiteaServer> serverList = new ArrayList<GiteaServer>(servers.size());\n\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tserverList.add(server);\n\t}\n\n\tif (serverList.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"The server list cannot be empty\");\n\t}\n\n\t// Check for admin permission\n\tfor (GiteaServer server : serverList) {\n\t\tif (!hasPermission(server, Permission.CONFIGURE)) {\n\t\t\tthrow new AccessDeniedException(\n\t\t\t\t\t\"You are not permitted to configure this server\");\n\t\t}\n\t}\n\n\t// Remove duplicates\n\tList<GiteaServer> deduplicatedServerList = new ArrayList<GiteaServer>(serverList.size());\n\tfor (GiteaServer server : serverList) {\n\t\tif (!deduplicatedServerList.contains(server)) {\n\t\t\tdeduplicatedServerList.add(server);\n\t\t}\n\t}\n\n\t// Remove empty URLs\n\tfor (GiteaServer server : deduplicatedServerList) {\n\t\tif (StringUtils.isBlank(server.getUrl())) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"The server URL cannot be empty\");\n\t\t}\n\t}\n\n\t// Update the list of servers\n\tthis.servers = deduplicatedServerList;\n\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 31.66532822217044}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tfor (Iterator<GiteaServer> iterator = getServers().iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (endpoint.getServerUrl().equals(serverUrl)) {\n\t\t\titerator.remove();\n\t\t\tsave();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.18770523250256}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tif (servers == null) {\n\t\treturn false;\n\t}\n\tfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (serverUrl.equals(server.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t\tsave();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.131924163051266}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t//        Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n//        if (serverUrl == null) {\n//            return false;\n//        }\n//        serverUrl = normalizeServerUrl(serverUrl);\n//        List<GiteaServer> newList = new ArrayList<>();\n//        for (GiteaServer server : getServers()) {\n//            if (!server.getServerUrl().equals(serverUrl)) {\n//                newList.add(server);\n//            }\n//        }\n//        if (newList.size() != getServers().size()) {\n//            setServers(newList);\n//            return true;\n//        }\n//        return false;\n}", "CodeBleu_score": 2.5488376945022435}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t//    Set<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n//    for (Element el : annotatedElements) {\n//      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n//      descriptorElements.add(new DescriptorElement(el.getSimpleName().toString(),\n//        el.asType().toString(), attributes));\n//    }\n}", "CodeBleu_score": 7.826411051197965}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\nSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\nfor (Element el : annotatedElements) {\n  String type = asType(el);\n  Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n  descriptorElements.add(new DescriptorElement(type, attributes));\n}\n}", "CodeBleu_score": 56.84884746541194}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t//    Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(annotation);\n    Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(annotation);\n    for (Element el : elements) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = asType(el.asType());\n      descriptorElements.add(new DescriptorElement(el, attributes, type));\n    }\n  }", "CodeBleu_score": 62.93022029156151}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getCanonicalName();\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotationClassName.equals(annotation.getQualifiedName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t\tif (annotationClassName.endsWith(\".\" + annotation.getSimpleName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 44.15717475225714}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().contentEquals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.95928941949381}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tString annotationClassName = annotationClass.getCanonicalName();\nfor (TypeElement annotation : annotations) {\nString qualifiedName = annotation.getQualifiedName().toString();\nif (qualifiedName.equals(annotationClassName) || qualifiedName.replace('$', '.').equals(annotationClassName)) {\nreturn annotation;\n}\n}\nreturn null;\n}", "CodeBleu_score": 37.28823534622049}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = [\n        [\"employee\", \"=\", employee],\n        [\"docstatus\", \"=\", 1],\n        [\"from_date\", \"<=\", today()],\n        [\"to_date\", \">=\", today()],\n    ]\n    if for_approval:\n        filters.append([\"status\", \"not in\", [\"Rejected\", \"Approved\"]])\n    else:\n        filters.append([\"status\", \"not in\", [\"Rejected\", \"Approved\", \"Cancelled\"]])\n    if approver_id:\n        filters.append([\"approver_id\", \"=\", approver_id])\n    return filters\n\n", "CodeBleu_score": 26.53514820692488}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"not in\", [\"Approved\", \"Rejected\"]),\n                \"leave_approver\": (\"!=\", approver_id),\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"status\": (\"not in\", [\"Rejected\", \"Cancelled\"]),\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 25.33649714051414}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 0,\n        \"status\": \"Open\",\n    }\n\n    if for_approval:\n        filters[\"status\"] = (\"!=\", \"Approved\")\n        filters[\"status\"] = (\"!=\", \"Rejected\")\n\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n\n    return filters\n\n", "CodeBleu_score": 22.235250963850323}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type].get(\"allocated\"),\n            \"balance\": leave_details[leave_type].get(\"balance\")\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 31.07864378332818}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail.get(\"allocated\"),\n            \"balance\": leave_detail.get(\"balance\")\n        }\n    return leave_balance_map\n", "CodeBleu_score": 37.1159454186547}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_balance_map = {}\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": details[\"allocated\"],\n            \"balance\": details[\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 37.209318970823965}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_all(\"Holiday List\", filters={\"employee\": employee}, fields=[\"name\", \"from_date\", \"to_date\"])\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\"\"\"\n        SELECT\n            name,\n            holiday_date,\n            description,\n            weekly_off\n        FROM\n            `tabHoliday`\n        WHERE\n            parent IN %(holiday_list)s\n            AND weekly_off = 0\n        ORDER BY\n            holiday_date ASC\n    \"\"\", {\"holiday_list\": [d.name for d in holiday_list]}, as_dict=True)\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n", "CodeBleu_score": 37.91211388318596}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.sql(\n        \"\"\"\n        select\n            name,\n            employee,\n            holiday_date,\n            description,\n            weekly_off\n        from\n            `tabHoliday`\n        where\n            employee = %s\n        order by\n            holiday_date\n        \"\"\",\n        (employee),\n        as_dict=True,\n    )\n    if not holiday_list:\n        return []\n    else:\n        for holiday in holiday_list:\n            holiday[\"description\"] = frappe.utils.strip_html(holiday[\"description\"])\n        return holiday_list\n\n", "CodeBleu_score": 30.104888297510758}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Holiday List\", {\"employee\": employee})\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n        select\n            name,\n            holiday_date,\n            description,\n            weekly_off\n        from\n            `tabHoliday`\n        where\n            parent = %(holiday_list)s\n        order by\n            holiday_date\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=True,\n    )\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n", "CodeBleu_score": 37.30034885637757}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_weekly_reminder_in_advance\"):\n        return\n\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 24.68300677372853}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.378922231120049}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_weekly_holiday_reminders\"):\n        return\n\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 24.583559549828465}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += rating.rating * rating.percentage_weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n    return self.self_appraisal_score\n", "CodeBleu_score": 21.418311893666154}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n    return self.self_appraisal_score\n", "CodeBleu_score": 22.807793796049776}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += rating.rating * rating.percentage_weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n    self.save()\n    return self.self_appraisal_score\n\n", "CodeBleu_score": 20.912093362822503}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        # Get necessary data\n        employee_doc = frappe.get_cached_doc(\"Employee\", self.employee)\n        manager_doc = frappe.get_cached_doc(\"Employee\", employee_doc.reports_to)\n        manager_name = manager_doc.employee_name\n        self_appraisal_score = self.self_appraisal_score\n        average_feedback_score = self.average_feedback_score\n        total_score = self.total_score\n\n        # Sanitize formula\n        formula = appraisal_cycle_doc.formula\n        formula = sanitize_expression(formula)\n\n        # Evaluate formula\n        data = {\n            \"self\": self,\n            \"employee\": employee_doc.as_dict(),\n            \"manager\": manager_doc.as_dict(),\n            \"self_appraisal_score\": self_appraisal_score,\n            \"average_feedback_score\": average_feedback_score,\n            \"total_score\": total_score,\n            \"manager_name\": manager_name,\n            \"precision\": self.precision,\n        }\n        try:\n            score = frappe.safe_eval(formula, None, data)\n        except Exception as e:\n            frappe.throw(\n                title=_(\"Invalid Formula\"),\n                msg=_(\"The formula for calculating the final score is invalid. Please check the formula and try again. The error message is: {0}\").format(\n                    e\n                ),\n            )\n    else:\n        score = (\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score)\n            / 3\n        )\n\n    # Set final score with precision\n    score = flt(score, self.precision)\n    self.final_score = score\n    self.db_update()\n", "CodeBleu_score": 38.52909163265728}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = self.as_dict()\n        data.update(\n            {\n                \"employee_name\": frappe.get_cached_value(\n                    \"Employee\", self.employee, \"employee_name\"\n                ),\n                \"manager_name\": frappe.get_cached_value(\n                    \"Employee\", self.employee, \"reports_to\"\n                ),\n            }\n        )\n        sanitized_expr = sanitize_expression(appraisal_cycle_doc.formula)\n        final_score = frappe.safe_eval(sanitized_expr, None, data)\n    else:\n        total_score = self.total_score or 0\n        average_feedback_score = self.average_feedback_score or 0\n        self_appraisal_score = self.self_appraisal_score or 0\n        final_score = (\n            total_score + average_feedback_score + self_appraisal_score\n        ) / 3\n    self.final_score = flt(final_score, appraisal_cycle_doc.precision)\n\n", "CodeBleu_score": 36.7257017266947}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        self.final_score = frappe.safe_eval(sanitize_expression(appraisal_cycle_doc.final_score_formula), None, self.as_dict())\n    else:\n        self.final_score = round((self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, self.precision)\n    self.db_update()\n\n", "CodeBleu_score": 23.71718896664998}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date:\n        if self.attendance_date > getdate(nowdate()):\n            frappe.throw(_(\"Attendance date cannot be a future date.\"))\n        elif self.attendance_date < self.employee.date_of_joining:\n            frappe.throw(_(\"Attendance date cannot be before employee's joining date.\"))\n        elif self.status == \"Present\" and self.attendance_date > getdate(nowdate()):\n            frappe.throw(_(\"Attendance for future dates can only be marked as 'On Leave'.\"))\n", "CodeBleu_score": 25.26446237335026}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date:\n        if self.attendance_date > getdate():\n            if self.status != \"On Leave\":\n                frappe.throw(_(\"Attendance date cannot be a future date unless the status is 'On Leave'\"))\n        if self.attendance_date < self.employee.date_of_joining:\n            frappe.throw(_(\"Attendance date cannot be before employee's joining date\"))\n\n", "CodeBleu_score": 22.756759250406702}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date:\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(_(\"Attendance date cannot be a future date.\"))\n        elif getdate(self.attendance_date) < getdate(self.employee_id.date_of_joining):\n            frappe.throw(_(\"Attendance date cannot be before employee's joining date.\"))\n        elif self.status == \"Present\" and not self.leave_application:\n            if not frappe.db.exists(\"Leave Application\", {\"attendance_date\": self.attendance_date, \"employee\": self.employee, \"docstatus\": 1}):\n                frappe.throw(_(\"Attendance for employee {0} cannot be marked for the day {1} without a leave application.\").format(self.employee, formatdate(self.attendance_date)))\n", "CodeBleu_score": 36.06353802581007}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1}. Please check {2} for more details.\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate),\n            ),\n            title=_(\"Duplicate Entry\"),\n        )\n", "CodeBleu_score": 40.761697873322134}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1} <a href='{2}'>{3}</a>\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate),\n                duplicate,\n            ),\n            title=_(\"Duplicate Attendance Record\"),\n        )\n", "CodeBleu_score": 40.61765343588053}, {"code": "def validate_duplicate_record(self)\n\t\n    if not self.name:\n        self.name = \"New Attendance\"\n\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for Employee {0} on {1}. Please check {2}\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", duplicate),\n            ),\n            title=\"Duplicate Record\",\n        )\n\n", "CodeBleu_score": 47.019122334701194}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\"\"\n    if self.status == \"Draft\":\n        self.status = \"Sending\"\n        self.save()\n\n        emails = self.get_user_emails_from_group()\n        if emails:\n            frappe.sendmail(\n                recipients=emails,\n                subject=self.get_message_details().title,\n                message=frappe.get_template(\"templates/emails/daily_work_summary.html\").render(\n                    self.get_message_details()\n                ),\n                delayed=False,\n            )\n\n        self.status = \"Sent\"\n        self.save()\n        frappe.msgprint(_(\"Email sent to {0}\").format(\", \".join(emails)))\n    else:\n        frappe.msgprint(_(\"Email has already been sent.\"))\n", "CodeBleu_score": 34.35363122357644}, {"code": "def send_summary(self)\n\t\n    if self.daily_work_summary_group and self.daily_work_summary_group_status != \"Sent\":\n        emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n        message_details = self.get_message_details()\n        for email in emails:\n            frappe.sendmail(\n                recipients=email,\n                subject=message_details.get(\"title\"),\n                message=frappe.render_template(\n                    \"templates/emails/daily_work_summary.html\", message_details\n                ),\n                reference_doctype=self.doctype,\n                reference_name=self.name,\n            )\n        self.db_set(\"daily_work_summary_group_status\", \"Sent\")\n", "CodeBleu_score": 46.44931142069938}, {"code": "def send_summary(self)\n\t\n    if self.status != \"Draft\":\n        frappe.throw(\n            _(\"Daily Work Summary {0} is not in Draft status\").format(self.name),\n            title=_(\"Invalid Status\"),\n        )\n\n    self.status = \"Sending\"\n    self.save()\n\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    if not emails:\n        frappe.throw(\n            _(\"No email address found in the group {0}\").format(self.daily_work_summary_group),\n            title=_(\"No Email Address\"),\n        )\n\n    message_details = self.get_message_details()\n\n    try:\n        frappe.sendmail(\n            recipients=emails,\n            subject=message_details.get(\"title\"),\n            message=frappe.render_template(\n                \"templates/emails/daily_work_summary.html\", message_details\n            ),\n        )\n    except frappe.OutgoingEmailError:\n        frappe.throw(\n            _(\n                \"Unable to send emails. Please check your email account settings or contact your System Manager.\"\n            ),\n            title=_(\"Email Delivery Failed\"),\n        )\n    else:\n        self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 43.318658576160885}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    # Check for duplicate interview records for the same job applicant in the same interview round\n    interview = frappe.db.sql(\"\"\"SELECT name FROM `tabInterview` WHERE job_applicant=%s AND interview_round=%s AND name!=%s\"\"\", (self.job_applicant, self.interview_round, self.name), as_dict=True)\n    if interview:\n        # Raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round, including a link to the existing interview record and the job applicant's information\n        frappe.throw(_(\"Job Applicant {0} has already been interviewed for Interview Round {1}. Please check the existing interview record {2} or the Job Applicant record {3}.\").format(get_link_to_form(\"Job Applicant\", self.job_applicant), get_link_to_form(\"Interview Round\", self.interview_round), get_link_to_form(\"Interview\", interview[0].name), get_link_to_form(\"Job Applicant\", self.job_applicant)), DuplicateInterviewError)\n\n", "CodeBleu_score": 28.47906565951869}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n        if interview_round.round_status == \"Open\":\n            interview_exists = frappe.db.exists(\n                \"Interview\",\n                {\n                    \"job_applicant\": self.job_applicant,\n                    \"interview_round\": self.interview_round,\n                    \"docstatus\": [\"!=\", 2],\n                },\n            )\n            if interview_exists:\n                interview_doc = frappe.get_doc(\"Interview\", interview_exists)\n                interview_url = get_link_to_form(\"Interview\", interview_exists)\n                applicant_url = get_link_to_form(\"Job Applicant\", self.job_applicant)\n                frappe.throw(\n                    _(\n                        \"This job applicant has already been scheduled for the same interview round. Please check {0} or {1} for more details.\"\n                    ).format(interview_url, applicant_url),\n                    DuplicateEntryError,\n                )\n", "CodeBleu_score": 44.3788525987193}, {"code": "def validate_duplicate_interview(self)\n\t\n    # check if there is a duplicate interview record for the same job applicant in the same interview round\n    duplicate_interview = frappe.db.sql(\"\"\"SELECT name, job_applicant, interview_round FROM `tabInterview` WHERE job_applicant = %s AND interview_round = %s AND docstatus = 1\"\"\", (self.job_applicant, self.interview_round), as_dict=True)\n    if duplicate_interview:\n        # if duplicate is found, raise exception with a message indicating that job applicants are not allowed to appear twice for the same interview round, including a link to the existing interview record and the job applicant's information\n        frappe.throw(_(\"The job applicant {0} has already been interviewed in the interview round {1}. Please check the existing interview record {2} or the job applicant's information {3}\").format(get_link_to_form(\"Job Applicant\", self.job_applicant), self.interview_round, get_link_to_form(\"Interview\", duplicate_interview[0].name), get_link_to_form(\"Job Applicant\", self.job_applicant)))\n", "CodeBleu_score": 27.471332862727284}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_ratings = 0\n    total_assessments = 0\n    for assessment in self.assessment_set.all():\n        if assessment.rating:\n            total_ratings += assessment.rating\n            total_assessments += 1\n    if total_assessments:\n        self.average_rating = total_ratings / total_assessments\n    else:\n        self.average_rating = 0\n    self.save()\n", "CodeBleu_score": 26.442379346948382}, {"code": "def calculate_average_rating(self)\n\t\n    # First, check if there are any ratings. If not, set the average rating to 0.\n    if len(self.skill_assessments) == 0:\n        self.average_rating = 0\n    else:\n        # Get the total rating by summing all ratings.\n        total_rating = sum([assessment.rating for assessment in self.skill_assessments])\n        # Get the number of assessments with ratings.\n        num_ratings = len([assessment for assessment in self.skill_assessments if assessment.rating])\n        # Calculate the average rating.\n        self.average_rating = total_rating / num_ratings\n\n", "CodeBleu_score": 25.41649394696427}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    number_of_ratings = 0\n    for assessment in self.assessments:\n        if assessment.rating != None:\n            self.average_rating += assessment.rating\n            number_of_ratings += 1\n    if number_of_ratings == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating /= number_of_ratings\n    return self.average_rating\n", "CodeBleu_score": 22.179089810963237}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.designation = doc[\"designation\"]\n    interview.interview_round = doc[\"interview_round\"]\n    if \"interviewers\" in doc:\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    interview.save()\n    return interview\n", "CodeBleu_score": 49.085965227959285}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.designation = doc[\"designation\"]\n    interview.interview_round = doc[\"interview_round\"]\n    interview.interviewers = doc[\"interviewers\"]\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 46.322974490211685}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc[\"interview_round\"]\n    interview.designation = doc[\"designation\"]\n    for interviewer in doc[\"interviewers\"]:\n        interview.append(\"interview_details\", {\"interviewer\": interviewer})\n    return interview\n", "CodeBleu_score": 36.66380655863672}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND docstatus = 1 AND creation BETWEEN %s AND %s\"\"\", (self.designation, self.company, from_date, to_date), as_list=1)\n\n", "CodeBleu_score": 27.677734104430673}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offer_list = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND document_status = 1 AND posting_date BETWEEN %s AND %s\"\"\", (self.designation, self.company, from_date, to_date), as_dict=True)\n    return job_offer_list\n", "CodeBleu_score": 33.75952729231931}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    if from_date:\n        from_date = getdate(from_date)\n    if to_date:\n        to_date = getdate(to_date)\n    if from_date and to_date:\n        return frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and posting_date between %s and %s and status = 1\"\"\", (self.designation, self.company, from_date, to_date), as_dict=True)\n    elif from_date:\n        return frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and posting_date >= %s and status = 1\"\"\", (self.designation, self.company, from_date), as_dict=True)\n    elif to_date:\n        return frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and posting_date <= %s and status = 1\"\"\", (self.designation, self.company, to_date), as_dict=True)\n    else:\n        return frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and status = 1\"\"\", (self.designation, self.company), as_dict=True)\n\n\n", "CodeBleu_score": 38.893508034791694}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company and department:\n        filters = {'offer_status': 'Accepted', 'company': company, 'department': department}\n    elif company:\n        filters = {'offer_status': 'Accepted', 'company': company}\n    elif department:\n        filters = {'offer_status': 'Accepted', 'department': department}\n    else:\n        filters = {'offer_status': 'Accepted'}\n    offer_count = frappe.db.count('Job Offer', filters=filters)\n    if offer_count:\n        return offer_count/flt(frappe.db.count('Job Offer')) * 100\n    else:\n        return 0\n", "CodeBleu_score": 35.72157790577807}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    # Get the total number of job offers\n    total_job_offers = frappe.db.count(\"Job Offer\")\n\n    # Get the total number of accepted job offers\n    accepted_job_offers = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\"})\n\n    # Get the offer acceptance rate\n    offer_acceptance_rate = accepted_job_offers / total_job_offers * 100\n\n    # Return the offer acceptance rate\n    return offer_acceptance_rate\n\n", "CodeBleu_score": 24.4364454588585}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS offer_count, SUM(CASE WHEN offer_acceptance = 1 THEN 1 ELSE 0 END) AS accepted_count FROM `tabJob Offer` WHERE offer_acceptance IS NOT NULL AND offer_acceptance != '' AND offer_acceptance != '0' AND offer_acceptance != 'None' AND offer_acceptance != 'none' AND offer_acceptance != 'No' AND offer_acceptance != 'no' AND offer_acceptance != 'No Response' AND offer_acceptance != 'no response' AND offer_acceptance != 'Declined' AND offer_acceptance != 'declined' AND offer_acceptance != 'Declined Offer' AND offer_acceptance != 'declined offer' AND offer_acceptance != 'Not Offered' AND offer_acceptance != 'not offered' AND offer_acceptance != 'Not Offered (Candidate)' AND offer_acceptance != 'not offered (candidate)' AND offer_acceptance != 'Not Offered (Company)' AND offer_acceptance != 'not offered (company)' AND offer_acceptance != 'Not Offered (HR)' AND offer_acceptance != 'not offered (hr)' AND offer_acceptance != 'Not Offered (HR/Candidate)' AND offer_acceptance != 'not offered (hr/candidate)' AND offer_acceptance != 'Not Offered (HR/Company)' AND offer_acceptance != 'not offered (hr/company)' AND offer_acceptance != 'Not Offered (HR/Company/Candidate)' AND offer_acceptance != 'not offered (hr/company/candidate)' AND offer_acceptance != 'Not Offered (HR/Company/Candidate/Interviewer)' AND offer_acceptance != 'not offered (hr/company/candidate/interviewer)' AND offer_acceptance != 'Not Offered (HR/Company/Interviewer)' AND offer_acceptance != 'not offered (hr/company/interviewer)' AND offer_acceptance != 'Not Offered (HR/Interviewer)' AND offer_acceptance != 'not offered (hr/interviewer)' AND offer_acceptance != 'Not Offered (Interviewer)' AND offer_acceptance != 'not offered (interviewer)' AND offer_acceptance != 'Not Offered (Interviewer/Candidate", "CodeBleu_score": 7.256334532005614}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaffOptional = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaffOptional.isEmpty()) {\n\t\treturn new ErrorResult(Messages.notFound);\n\t}\n\tfinal CompanyStaff companyStaff = companyStaffOptional.get();\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.passwordNotMatch);\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\treturn this.companyStaffRepository.save(companyStaff) != null ? new SuccessResult(Messages.updated) : new ErrorResult(Messages.notFound);\n}", "CodeBleu_score": 45.02218721478577}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal var staff = this.staffRepository.findById(companyStaffForUpdateDto.getId());\n\tif (staff.isEmpty()) {\n\t\treturn new ErrorResult(Messages.notFound);\n\t}\n\tfinal var companyStaff = staff.get();\n\tif (!companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\n\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tthis.staffRepository.save(companyStaff);\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 40.40199245162876}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Result result = this.findById(companyStaffForUpdateDto.getId());\n\tif (result.isSuccess()) {\n\t\tfinal CompanyStaff companyStaff = (CompanyStaff) result.getData();\n\t\tif (!this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()).isSuccess()) {\n\t\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\tthis.save(companyStaff);\n\t\treturn new SuccessResult(Messages.updated);\n\t}\n\treturn new ErrorResult(Messages.notFound);\n}", "CodeBleu_score": 45.875109511766546}]}
