{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (let i = 0; i < template.length; i++) {\n\t\tlet item = template[i];\n\t\tif (item.type == \"separator\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif (!item.label) {\n\t\t\titem.label = \"\";\n\t\t}\n\t\tif (!item.accelerator) {\n\t\t\titem.accelerator = \"\";\n\t\t}\n\t\tif (!item.command) {\n\t\t\titem.command = \"\";\n\t\t}\n\t\tif (!item.id) {\n\t\t\titem.id = \"\";\n\t\t}\n\t\tif (!item.enabled) {\n\t\t\titem.enabled = true;\n\t\t}\n\t\tif (!item.visible) {\n\t\t\titem.visible = true;\n\t\t}\n\t\tif (!item.checked) {\n\t\t\titem.checked = false;\n\t\t}\n\t\tif (!item.submenu) {\n\t\t\titem.submenu = null;\n\t\t}\n\t\tif (item.command) {\n\t\t\tlet keystrokes = keystrokesByCommand[item.command];\n\t\t\tif (keystrokes) {\n\t\t\t\tlet keystroke = keystrokes[0];\n\t\t\t\tif (keystroke.includes(\" \")) {\n\t\t\t\t\titem.label = keystroke;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\titem.accelerator = keystroke;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (item.command.startsWith(\"application:\")) {\n\t\t\titem.windowSpecific = false;\n\t\t}\n\t\telse {\n\t\t\titem.windowSpecific = true;\n\t\t}\n\t\tif (item.submenu) {\n\t\t\titem.submenu = this.translateTemplate(item.submenu, keystrokesByCommand);\n\t\t}\n\t}\n\treturn template;\n}", "CodeBleu_score": 39.33380409017479}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (let i = 0; i < template.length; i++) {\n\t\tlet item = template[i]\n\t\tif (!item.command) {\n\t\t\tif (item.type === 'separator') {\n\t\t\t\titem.enabled = false\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tlet keystrokes = keystrokesByCommand[item.command]\n\t\tif (!keystrokes) {\n\t\t\titem.enabled = false\n\t\t\tcontinue\n\t\t}\n\t\tif (!item.label) {\n\t\t\titem.label = keystrokes[0]\n\t\t} else if (item.label.includes(' ')) {\n\t\t\titem.label = keystrokes[0]\n\t\t} else {\n\t\t\titem.accelerator = keystrokes[0]\n\t\t}\n\t\tif (!item.enabled) {\n\t\t\titem.enabled = true\n\t\t}\n\t\tif (!item.click) {\n\t\t\titem.click = () => {\n\t\t\t\tatomApplication.sendCommand(item.command)\n\t\t\t}\n\t\t}\n\t\tif (item.command.startsWith('application:')) {\n\t\t\titem.windowSpecific = false\n\t\t}\n\t\tif (item.submenu) {\n\t\t\titem.submenu = this.translateTemplate(item.submenu, keystrokesByCommand)\n\t\t}\n\t}\n\treturn template\n}", "CodeBleu_score": 36.84832851364739}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tif (!template) {\n\t\treturn template\n\t}\n\tfor (let i = 0; i < template.length; i++) {\n\t\tlet item = template[i]\n\t\tif (!item.metadata) {\n\t\t\titem.metadata = {}\n\t\t}\n\t\tif (item.command) {\n\t\t\tlet command = item.command\n\t\t\titem.metadata.accelerator = keystrokesByCommand[command]\n\t\t\tif (!item.label) {\n\t\t\t\titem.label = item.metadata.accelerator\n\t\t\t}\n\t\t\telse if (item.label.includes(\" \")) {\n\t\t\t\titem.label = item.label.replace(\"%l\", item.metadata.accelerator)\n\t\t\t}\n\t\t\tif (!item.accelerator) {\n\t\t\t\titem.accelerator = item.metadata.accelerator\n\t\t\t}\n\t\t\tif (!item.click) {\n\t\t\t\titem.click = () => {\n\t\t\t\t\tatomApplication.sendCommand(command)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (command.startsWith(\"application:\")) {\n\t\t\t\titem.metadata.windowSpecific = false\n\t\t\t}\n\t\t\telse {\n\t\t\t\titem.metadata.windowSpecific = true\n\t\t\t}\n\t\t}\n\t\tif (item.submenu) {\n\t\t\titem.submenu = this.translateTemplate(item.submenu, keystrokesByCommand)\n\t\t}\n\t}\n\treturn template\n}", "CodeBleu_score": 35.507774509875986}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\t\tconst object = menu.items || {};\n\tlet items = [];\n\tfor (let index in object) {\n\t\tconst item = object[index];\n\t\titems.push(item);\n\t\tif (item.submenu)\n\t\t\titems = items.concat(this.flattenMenuItems(item.submenu));\n\t}\n\treturn items;\n}", "CodeBleu_score": 95.68511089229261}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\n  const item = object[index];\n  items.push(item);\n  if (item.submenu)\n    items = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 97.24802033803455}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\nconst item = object[index];\nitems.push(item);\nif (item.submenu)\nitems = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 95.57498943568349}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tconst encrypted = cipher.update(JSON.stringify(options));\n\tcipher.final();\n\treturn JSON.stringify({\n\t\tiv: iv.toString('hex'),\n\t\tcontent: encrypted.toString('hex'),\n\t\ttag: cipher.getAuthTag().toString('hex')\n\t});\n}", "CodeBleu_score": 49.150708640549134}, {"code": "const encryptOptions = (options, secret) =>{\n\tconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\nconst encrypted = cipher.update(JSON.stringify(options));\ncipher.final();\nreturn {\niv: iv.toString('hex'),\ncontent: encrypted.toString('hex'),\ntag: cipher.getAuthTag().toString('hex')\n};\n}", "CodeBleu_score": 46.82043879868304}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tconst encrypted = cipher.update(JSON.stringify(options));\n\tcipher.final();\n\treturn {\n\t\tiv: iv.toString('hex'),\n\t\tcontent: encrypted.toString('hex'),\n\t\ttag: cipher.getAuthTag().toString('hex')\n\t};\n}", "CodeBleu_score": 47.04114326514709}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t\tfor (var i = 0; i < template.length; i++) {\n\t\tif (template[i].command) {\n\t\t\tif (!template[i].commandDetail) {\n\t\t\t\ttemplate[i].commandDetail = {};\n\t\t\t}\n\t\t\ttemplate[i].commandDetail.contextCommand = true;\n\t\t}\n\t\tif (template[i].submenu) {\n\t\t\tcreateClickHandlers(template[i].submenu);\n\t\t}\n\t\tif (template[i].command) {\n\t\t\ttemplate[i].click = () => {\n\t\t\t\tatomApplication.sendCommandToWindow(template[i].command, window);\n\t\t\t};\n\t\t}\n\t}\n}", "CodeBleu_score": 33.76684952398945}, {"code": "createClickHandlers(template){\n\t\tfor (var i = 0; i < template.length; i++) {\n\t\tvar item = template[i];\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command;\n\t\t\titem.contextCommand = true;\n\t\t\titem.click = function(event) {\n\t\t\t\tatomApplication.sendCommandToWindow(this.commandDetail, this.commandDetail, this.commandDetail);\n\t\t\t};\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.951544647542704}, {"code": "createClickHandlers(template){\n\t\tif (template) {\n\t\tfor (var i = 0; i < template.length; i++) {\n\t\t\tvar item = template[i];\n\t\t\tif (item.command) {\n\t\t\t\tif (!item.commandDetail) {\n\t\t\t\t\titem.commandDetail = {};\n\t\t\t\t}\n\t\t\t\titem.commandDetail.contextCommand = true;\n\t\t\t}\n\t\t\tif (item.submenu) {\n\t\t\t\tthis.createClickHandlers(item.submenu);\n\t\t\t}\n\t\t\tif (item.command) {\n\t\t\t\titem.click = (event) => {\n\t\t\t\t\tthis.sendCommandToWindow(item.command, item.commandDetail);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.897269390375676}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\nif (recoveryFile) {\ntry {\nawait recoveryFile.release();\n} catch (err) {\nconsole.error(\n`Recovery file for saved path '${path}' could not be released:`,\nerr\n);\n}\nthis.recoveryFilesByFilePath.delete(path);\nthis.windowsByRecoveryFile.delete(recoveryFile);\nthis.recoveryFilesByWindow.delete(window);\n}\n}", "CodeBleu_score": 56.802385815212865}, {"code": "async didSavePath(window, path){\n\tthis.recoveryFilesByFilePath.get(path).release().catch(error => this.log(error));\nthis.recoveryFilesByWindow.get(window).release().catch(error => this.log(error));\nthis.windowsByRecoveryFile.get(this.recoveryFilesByFilePath.get(path)).delete();\nthis.recoveryFilesByFilePath.delete(path);\nthis.recoveryFilesByWindow.delete(window);\n}", "CodeBleu_score": 27.50588269325994}, {"code": "async didSavePath(window, path){\n\ttry {\n    const recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (recoveryFile) await recoveryFile.release();\n  } catch (error) {\n    console.error(error);\n  }\n}", "CodeBleu_score": 41.1721558236447}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\tconst recoveryFiles = this.recoveryFilesByWindow.get(window);\nif (recoveryFiles.size === 0) {\nreturn;\n}\n\nconst promises = [];\nrecoveryFiles.forEach(recoveryFile => {\npromises.push(recoveryFile.recover().catch(error => {\nconst message = 'A file that Atom was saving could be corrupted';\nconst detail =\n`Error ${error.code}. There was a crash while saving \"${\nrecoveryFile.originalPath\n}\", so this file might be blank or corrupted.\n` +\n`Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\nrecoveryFile.recoveryPath\n}\".`;\nconsole.log(detail);\ndialog.showMessageBox(window, {\ntype: 'info',\nbuttons: ['OK'],\nmessage,\ndetail\n});\n}).then(() => {\nthis.windowsByRecoveryFile.delete(recoveryFile);\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.recoveryFilesByFilePath.delete(recoveryFile.originalPath);\n}));\n});\nawait Promise.all(promises);\n}", "CodeBleu_score": 67.54649674104017}, {"code": "async didCrashWindow(window){\n\t", "CodeBleu_score": 2.7930095370516357}, {"code": "async didCrashWindow(window){\n\tlet recoveryFiles\nrecoveryFiles = this.recoveryFilesByWindow.get(window)\nif (recoveryFiles) {\nfor (recoveryFile of recoveryFiles) {\nawait recoveryFile\n          .recover()\n          .catch(error => {\n            const message = 'A file that Atom was saving could be corrupted';\n            const detail =\n              `Error ${error.code}. There was a crash while saving \"${\n                recoveryFile.originalPath\n              }\", so this file might be blank or corrupted.\n` +\n              `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n                recoveryFile.recoveryPath\n              }\".`;\n            console.log(detail);\n            dialog.showMessageBox(window, {\n              type: 'info',\n              buttons: ['OK'],\n              message,\n              detail\n            });\n          })\n          .then\n}\n}\nthis.recoveryFilesByWindow.delete(window)\nthis.recoveryFilesByFilePath.delete(recoveryFile.originalPath)\nthis.windowsByRecoveryFile.delete(recoveryFile)\n}", "CodeBleu_score": 68.4982369682872}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\t\twriteStream.on('error', reject).once('open', () => {\n\t\t\tconst readStream = fs.createReadStream(source);\n\t\t\treadStream.on('error', reject).pipe(writeStream).on('error', reject).once('close', () => resolve());\n\t\t});\n\t});\n}", "CodeBleu_score": 53.93165567770334}, {"code": "async function copyFile(source, destination, mode){\n\tconst readStream = fs.createReadStream(source);\nconst writeStream = fs.createWriteStream(destination, { mode });\n\nreturn new Promise((resolve, reject) => {\n  readStream\n    .on('error', reject)\n    .on('open', () => {\n      writeStream\n        .on('error', reject)\n        .on('open', () => readStream.pipe(writeStream))\n        .once('finish', resolve);\n    })\n    .once('open', () => {\n      mkdirp(Path.dirname(destination), { mode }, (err) => {\n        if (err) reject(err);\n      });\n    });\n});\n}", "CodeBleu_score": 65.59218048315194}, {"code": "async function copyFile(source, destination, mode){\n\tconst sourceStream = fs.createReadStream(source);\nconst destinationStream = fs.createWriteStream(destination, { mode });\n\nreturn new Promise((resolve, reject) => {\n  sourceStream\n    .on('error', reject)\n    .on('open', () => {\n      destinationStream\n        .on('error', reject)\n        .on('open', () => sourceStream.pipe(destinationStream))\n        .once('finish', resolve);\n    })\n    .once('end', resolve);\n});\n}", "CodeBleu_score": 53.91447055622917}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform != 'win32') {\n\t\treturn false;\n\t}\n\tconst SquirrelUpdate = require('./SquirrelUpdate');\n\tconst squirrelCommand = process.argv[1];\n\treturn SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 89.26231278598567}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform !== 'win32') {\n\t\treturn false;\n\t}\n\n\tconst SquirrelUpdate = require('electron-squirrel-startup');\n\tconst squirrelCommand = process.argv[1];\n\n\treturn SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 92.72956265453993}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform !== 'win32') {\n\t\treturn false;\n\t}\n\tconst SquirrelUpdate = require('electron-squirrel-startup');\n\tconst squirrelCommand = process.argv[1];\n\treturn SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 92.72956265453993}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === \"win32\" && filePath) {\n\t\treturn filePath.charAt(0).toUpperCase() + filePath.slice(1);\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 52.524853441383215}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32' && filePath && filePath.length > 1 && filePath[0] === filePath[0].toLowerCase()) {\n\t\treturn filePath[0].toUpperCase() + filePath.slice(1);\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 54.35071588446249}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (isWindowsPlatform()) {\n\t\tif (filePath) {\n\t\t\treturn filePath.replace(/^[a-z]:/i, function(match) {\n\t\t\t\treturn match.toUpperCase();\n\t\t\t});\n\t\t}\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 43.824554550705265}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\t\n}", "CodeBleu_score": 1.4760605196147227}, {"code": "register(callback){\n\t\tlet doneCount = this.parts.length;\n\tthis.parts.forEach(part => {\n\t\tlet reg = new Registry({\n\t\t\thive: 'HKCU',\n\t\t\tkey: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n\t\t});\n\t\treturn reg.create(() =>\n\t\t\treg.set(part.name, Registry.REG_SZ, part.value, () => {\n\t\t\t\tif (--doneCount === 0) return callback();\n\t\t\t})\n\t\t);\n\t});\n}", "CodeBleu_score": 94.83239444878089}, {"code": "register(callback){\n\t\tlet doneCount = this.parts.length;\n\tthis.parts.forEach(part => {\n\t\tlet reg = new Registry({\n\t\t\thive: 'HKCU',\n\t\t\tkey: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n\t\t});\n\t\treturn reg.create(() =>\n\t\t\treg.set(part.name, Registry.REG_SZ, part.value, () => {\n\t\t\t\tif (--doneCount === 0) return callback();\n\t\t\t})\n\t\t);\n\t});\n}", "CodeBleu_score": 94.83239444878089}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\tif (typeof callback === 'function') {\n// Async\nthis.getCurrentWindow().showSaveDialog(options, callback);\n} else {\n// Sync\nif (typeof options === 'string') {\noptions = { defaultPath: options };\n}\nreturn this.getCurrentWindow().showSaveDialog(options);\n}\n}", "CodeBleu_score": 96.07829298833084}, {"code": "showSaveDialog(options, callback){\n\tif (typeof callback === 'function') {\n  // Async\n  this.getCurrentWindow().showSaveDialog(options, callback);\n} else {\n  // Sync\n  if (typeof options === 'string') {\n    options = { defaultPath: options };\n  }\n  return this.getCurrentWindow().showSaveDialog(options);\n}\n}", "CodeBleu_score": 97.92720077778458}, {"code": "showSaveDialog(options, callback){\n\t\n}", "CodeBleu_score": 2.8750960861215313}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\t\tconst { width, height } = this.getDefaultWindowDimensions();\n\tconst { x, y } = this.getLoadSettings();\n\tif (!this.isValidDimensions({ x, y, width, height })) {\n\t\tawait this.setWindowDimensions({ width, height });\n\t} else {\n\t\tawait this.setWindowDimensions({ x, y, width, height });\n\t}\n\treturn { x, y, width, height };\n}", "CodeBleu_score": 22.886544771399254}, {"code": "async restoreWindowDimensions(){\n\t\tconst dimensions = this.getWindowDimensions();\n\tif (this.isValidDimensions(dimensions)) {\n\t\treturn dimensions;\n\t}\n\n\tconst defaultDimensions = this.getDefaultWindowDimensions();\n\tawait this.setWindowDimensions(defaultDimensions);\n\treturn defaultDimensions;\n}", "CodeBleu_score": 27.875160179302817}, {"code": "async restoreWindowDimensions(){\n\t", "CodeBleu_score": 2.5925680697773066}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t\tif (this.installShellCommandsInteractivelyAtom()) {\n\t\tif (this.installShellCommandsInteractivelyApm()) {\n\t\t\tthis.confirm(\"Shell commands successfully installed.\")\n\t\t} else {\n\t\t\tthis.confirm(\"Shell command installation failed.\")\n\t\t}\n\t} else {\n\t\tthis.confirm(\"Shell command installation failed.\")\n\t}\n}", "CodeBleu_score": 7.785697326777871}, {"code": "installShellCommandsInteractively(){\n\t\tthis.installAtomCommandInteractively()\n\t.then(() => this.installApmCommandInteractively())\n\t.then(() => this.applicationDelegate.confirm(this.installShellCommandsInteractivelySuccessMessage))\n\t.catch((error) => this.applicationDelegate.alert(this.installShellCommandsInteractivelyErrorMessage, error))\n}", "CodeBleu_score": 9.251512436067502}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t\n}", "CodeBleu_score": 2.909522538749249}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t\tif (process.platform !== 'darwin') return callback();\n\n\tconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n\tfs.readlink(destinationPath, (error, realpath) => {\n\t\tif (error && error.code !== 'ENOENT') return callback(error);\n\t\tif (realpath === commandPath) return callback(null, commandName);\n\t\tthis.createSymlink(fs, commandPath, destinationPath, error => {\n\t\t\tif (error && error.code === 'EACCES' && askForPrivilege) {\n\t\t\t\tconst fsAdmin = require('fs-admin');\n\t\t\t\tthis.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n\t\t\t\t\tcallback(error, commandName);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(error);\n\t\t\t}\n\t\t});\n\t});\n}", "CodeBleu_score": 96.05102840137538}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tif (process.platform !== 'darwin') return callback();\n\nconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\nfs.readlink(destinationPath, (error, realpath) => {\n  if (error && error.code !== 'ENOENT') return callback(error);\n  if (realpath === commandPath) return callback(null, commandName);\n  this.createSymlink(fs, commandPath, destinationPath, error => {\n    if (error && error.code === 'EACCES' && askForPrivilege) {\n      const fsAdmin = require('fs-admin');\n      this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n        callback(error, commandName);\n      });\n    } else {\n      callback(error);\n    }\n  });\n});\n}", "CodeBleu_score": 98.56420970498544}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t\tlet row, column;\n\tconst range = this.marker.getScreenRange();\n\tif (moveToEndOfSelection && !range.isEmpty()) {\n\t\t({ row, column } = range.start);\n\t} else {\n\t\t({ row, column } = this.getScreenPosition());\n\t}\n\n\tif (this.goalColumn != null) column = this.goalColumn;\n\tthis.setScreenPosition(\n\t\t{ row: row - rowCount, column },\n\t\t{ skipSoftWrapIndentation: true }\n\t);\n\tthis.goalColumn = column;\n}", "CodeBleu_score": 96.67612744621592}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t\tlet row, column;\n\tconst range = this.marker.getScreenRange();\n\tif (moveToEndOfSelection && !range.isEmpty()) {\n\t\t({ row, column } = range.start);\n\t} else {\n\t\t({ row, column } = this.getScreenPosition());\n\t}\n\n\tif (this.goalColumn != null) column = this.goalColumn;\n\tthis.setScreenPosition(\n\t\t{ row: row - rowCount, column },\n\t\t{ skipSoftWrapIndentation: true }\n\t);\n\tthis.goalColumn = column;\n}", "CodeBleu_score": 96.67612744621592}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tlet row, column;\nconst range = this.marker.getScreenRange();\nif (moveToEndOfSelection && !range.isEmpty()) {\n({ row, column } = range.start);\n} else {\n({ row, column } = this.getScreenPosition());\n}\n\nif (this.goalColumn != null) column = this.goalColumn;\nthis.setScreenPosition(\n{ row: row - rowCount, column },\n{ skipSoftWrapIndentation: true }\n);\nthis.goalColumn = column;\n}", "CodeBleu_score": 96.61669246156298}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t\n}", "CodeBleu_score": 2.05456993804073}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t\tconst decorationsByMarkerId = {};\n\tfor (const layer of this.decorationCountsByLayer.keys()) {\n\t\tfor (const marker of layer.findMarkers({\n\t\t\tintersectsScreenRowRange: [startScreenRow, endScreenRow]\n\t\t})) {\n\t\t\tconst decorations = this.decorationsByMarker.get(marker);\n\t\t\tif (decorations) {\n\t\t\t\tdecorationsByMarkerId[marker.id] = Array.from(decorations);\n\t\t\t}\n\t\t}\n\t}\n\treturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.82565299797736}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t\n}", "CodeBleu_score": 2.05456993804073}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t", "CodeBleu_score": 1.3249204060962545}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\n}", "CodeBleu_score": 1.8269894317795843}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\n}", "CodeBleu_score": 1.8269894317795843}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\n}", "CodeBleu_score": 2.150921685459608}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n\tthis.decorationCountsByLayer.set(layer, newCount);\n\tif (newCount === 1) {\n\t\tthis.layerUpdateDisposablesByLayer.set(\n\t\t\tlayer,\n\t\t\tlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n\t\t);\n\t}\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n}", "CodeBleu_score": 95.80301962795797}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n\tthis.decorationCountsByLayer.set(layer, newCount);\n\tif (newCount === 1) {\n\t\tthis.layerUpdateDisposablesByLayer.set(\n\t\t\tlayer,\n\t\t\tlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n\t\t);\n\t}\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n}", "CodeBleu_score": 95.80301962795797}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t\tthis.measure('loadTime', () => {\n\t\tthis.path = path.join(this.packageManager.resourcePath, this.path);\n\t\tModuleCache.add(this.path, this.metadata);\n\n\t\tthis.loadStylesheets();\n\t\t// Unfortunately some packages are accessing `@mainModulePath`, so we need\n\t\t// to compute that variable eagerly also for preloaded packages.\n\t\tthis.getMainModulePath();\n\t});\n}", "CodeBleu_score": 71.59424069509669}, {"code": "finishLoading(){\n\t\n}", "CodeBleu_score": 3.8651941562977528}, {"code": "finishLoading(){\n\t", "CodeBleu_score": 2.8993430574334047}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\nswitch (\nthis.applicationDelegate.getUserDefault(\n'AppleActionOnDoubleClick',\n'string'\n)\n) {\ncase 'Minimize':\nthis.applicationDelegate.minimizeWindow();\nbreak;\ncase 'Maximize':\nif (this.applicationDelegate.isWindowMaximized()) {\nthis.applicationDelegate.unmaximizeWindow();\n} else {\nthis.applicationDelegate.maximizeWindow();\n}\nbreak;\n}\n}", "CodeBleu_score": 67.90737649029185}, {"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\nswitch (\n  this.applicationDelegate.getUserDefault(\n    'AppleActionOnDoubleClick',\n    'string'\n  )\n) {\n  case 'Minimize':\n    this.applicationDelegate.minimizeWindow();\n    break;\n  case 'Maximize':\n    if (this.applicationDelegate.isWindowMaximized()) {\n      this.applicationDelegate.unmaximizeWindow();\n    } else {\n      this.applicationDelegate.maximizeWindow();\n    }\n    break;\n}\n}", "CodeBleu_score": 72.56990139253571}, {"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\nswitch (\nthis.applicationDelegate.getUserDefault(\n'AppleActionOnDoubleClick',\n'string'\n)\n) {\ncase 'Minimize':\nthis.applicationDelegate.minimizeWindow();\nbreak;\ncase 'Maximize':\nif (this.applicationDelegate.isWindowMaximized()) {\nthis.applicationDelegate.unmaximizeWindow();\n} else {\nthis.applicationDelegate.maximizeWindow();\n}\nbreak;\n}\n}", "CodeBleu_score": 67.90737649029185}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\t\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n\tif (settingWins.length >= 1) {\n\t\t// A setting window is already created\n\t\tconst browserSettingWindow = settingWins[0].win.browserWindow\n\t\tbrowserSettingWindow.webContents.send('settings::change-tab', category)\n\t\tif (isLinux) {\n\t\t\tbrowserSettingWindow.focus()\n\t\t} else {\n\t\t\tbrowserSettingWindow.moveTop()\n\t\t}\n\t\treturn\n\t}\n\tthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.25706267515326}, {"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\nif (settingWins.length >= 1) {\n// A setting window is already created\nconst browserSettingWindow = settingWins[0].win.browserWindow\nbrowserSettingWindow.webContents.send('settings::change-tab', category)\nif (isLinux) {\nbrowserSettingWindow.focus()\n} else {\nbrowserSettingWindow.moveTop()\n}\nreturn\n}\nthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.15924676665757}, {"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\nif (settingWins.length >= 1) {\n// A setting window is already created\nconst browserSettingWindow = settingWins[0].win.browserWindow\nbrowserSettingWindow.webContents.send('settings::change-tab', category)\nif (isLinux) {\nbrowserSettingWindow.focus()\n} else {\nbrowserSettingWindow.moveTop()\n}\nreturn\n}\nthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.15924676665757}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t\n}", "CodeBleu_score": 1.049955448136996}, {"code": "findBestWindowToOpenIn (fileList){\n\t\tif (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n\tconst { windows } = this\n\tconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\n\tif (this.windowCount <= 1) {\n\t\treturn [{ windowId: lastActiveEditorId, fileList }]\n\t}\n\n\t// Array of scores, same order like fileList.\n\tlet filePathScores = null\n\tfor (const window of windows.values()) {\n\t\tif (window.type === WindowType.EDITOR) {\n\t\t\tconst scores = window.getCandidateScores(fileList)\n\t\t\tif (!filePathScores) {\n\t\t\t\tfilePathScores = scores\n\t\t\t} else {\n\t\t\t\tconst len = filePathScores.length\n\t\t\t\tfor (let i = 0; i < len; ++i) {\n\t\t\t\t\t// Update score only if the file is not already opened.\n\t\t\t\t\tif (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n\t\t\t\t\t\tfilePathScores[i] = scores[i]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst buf = []\n\tconst len = filePathScores.length\n\tfor (let i = 0; i < len; ++i) {\n\t\tlet { id: windowId, score } = filePathScores[i]\n\n\t\tif (score === -1) {\n\t\t\t// Skip files that already opened.\n\t\t\tcontinue\n\t\t} else if (score === 0) {\n\t\t\t// There is no best window to open the file(s) in.\n\t\t\twindowId = lastActiveEditorId\n\t\t}\n\n\t\tlet item = buf.find(w => w.windowId === windowId)\n\t\tif (!item) {\n\t\t\titem = { windowId, fileList: [] }\n\t\t\tbuf.push(item)\n\t\t}\n\t\titem.fileList.push(fileList[i])\n\t}\n\treturn buf\n}", "CodeBleu_score": 95.01450489956866}, {"code": "findBestWindowToOpenIn (fileList){\n\tif (!fileList || !Array.isArray(fileList) || !fileList.length) return []\nconst { windows } = this\nconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\nif (this.windowCount <= 1) {\nreturn [{ windowId: lastActiveEditorId, fileList }]\n}\n\n// Array of scores, same order like fileList.\nlet filePathScores = null\nfor (const window of windows.values()) {\nif (window.type === WindowType.EDITOR) {\nconst scores = window.getCandidateScores(fileList)\nif (!filePathScores) {\nfilePathScores = scores\n} else {\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\n// Update score only if the file is not already opened.\nif (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\nfilePathScores[i] = scores[i]\n}\n}\n}\n}\n}\n\nconst buf = []\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\nlet { id: windowId, score } = filePathScores[i]\n\nif (score === -1) {\n// Skip files that already opened.\ncontinue\n} else if (score === 0) {\n// There is no best window to open the file(s) in.\nwindowId = lastActiveEditorId\n}\n\nlet item = buf.find(w => w.windowId === windowId)\nif (!item) {\nitem = { windowId, fileList: [] }\nbuf.push(item)\n}\nitem.fileList.push(fileList[i])\n}\nreturn buf\n}", "CodeBleu_score": 94.80344506720115}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t", "CodeBleu_score": 0.48051040193975003}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8';\n\tlet isBom = false;\n\tfor (const bom of bomEncodings) {\n\t\tconst bomSequence = bomEncodings[bom];\n\t\tconst bomLength = bomSequence.length;\n\t\tif (buffer.slice(0, bomLength).equals(Buffer.from(bomSequence))) {\n\t\t\tencoding = bom;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer);\n\t\tif (guessedEncoding) {\n\t\t\tencoding = guessedEncoding.toLowerCase();\n\t\t\tif (encodingMap[encoding]) {\n\t\t\t\tencoding = encodingMap[encoding];\n\t\t\t}\n\t\t}\n\t}\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 44.246700605167106}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tconst encoding = 'utf8';\n\tlet isBom = false;\n\tconst bomEncodingMap = {\n\t\t'\\\\xff\\\\xfe': 'utf-16le',\n\t\t'\\\\xfe\\\\xff': 'utf-16be',\n\t\t'\\\\xef\\\\xbb\\\\xbf': 'utf-8',\n\t};\n\tconst bomEncodingMapKeys = Object.keys(bomEncodingMap);\n\tfor (let i = 0; i < bomEncodingMapKeys.length; i++) {\n\t\tconst bomEncoding = bomEncodingMapKeys[i];\n\t\tif (buffer.indexOf(bomEncoding) === 0) {\n\t\t\tencoding = bomEncodingMap[bomEncoding];\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer);\n\t\tif (guessedEncoding) {\n\t\t\tencoding = guessedEncoding.toLowerCase();\n\t\t\tif (encoding === 'ascii') {\n\t\t\t\tencoding = 'utf8';\n\t\t\t}\n\t\t\tif (encoding === 'iso-8859-1') {\n\t\t\t\tencoding = 'latin1';\n\t\t\t}\n\t\t\tif (encoding === 'windows-1252') {\n\t\t\t\tencoding = 'cp1252';\n\t\t\t}\n\t\t}\n\t}\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 39.21971783237392}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst { encoding = 'utf8', bom = false } = options || {}\n\tconst { lineEnding = 'lf', convertLineEndings = true } = options || {}\n\tconst { extname = '.md' } = options || {}\n\tconst { writeFile } = fs.promises\n\tconst { ext } = path.parse(pathname)\n\tconst lineEndingBuffer = Buffer.from(lineEnding)\n\tconst encodingBuffer = Buffer.from(encoding)\n\tconst contentBuffer = Buffer.from(content)\n\tconst contentWithAdjustedLineEndings = convertLineEndings ? contentBuffer.replace(lineEndingBuffer, '\n') : contentBuffer\n\tconst contentWithAdjustedEncoding = encodingBuffer.concat(contentWithAdjustedLineEndings)\n\tconst contentWithAdjustedBOM = bom ? Buffer.concat([encodingBuffer, contentWithAdjustedLineEndings]) : contentWithAdjustedEncoding\n\treturn writeFile(pathname.endsWith(extname) ? pathname : `${pathname}${extname}`, contentWithAdjustedBOM)\n}", "CodeBleu_score": 24.37839104905248}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst { lineEndings, encoding, bom } = extractLineEndingsAndEncoding(options);\n\tconst convertedContent = convertLineEndings(content, lineEndings);\n\tconst encodedContent = iconv.encode(convertedContent, encoding);\n\twriteFile(pathname, encodedContent, bom);\n}", "CodeBleu_score": 25.270043990980863}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst {\n\t\tlineEndings,\n\t\tencoding,\n\t\tbom\n\t} = extractOptions(options);\n\n\tif (lineEndings) {\n\t\tcontent = convertLineEndings(content, lineEndings);\n\t}\n\n\tconst buffer = encode(content, encoding, bom);\n\n\twriteFile(pathname, buffer);\n}", "CodeBleu_score": 27.809816180973314}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\tconst { ipcMain } = require('electron')\nconst { getKeyboardInfo } = require('./keyboard-info')\nconst { writeFile } = require('fs')\nconst { tmpdir } = require('os')\nconst { join } = require('path')\nconst { log } = require('./logger')\n\nconst dumpPath = join(tmpdir(), 'keyboard-info.json')\n\nipcMain.handle('getKeyboardInfo', () => getKeyboardInfo())\n\nipcMain.on('dumpKeyboardInfo', (event, content) => {\n  writeFile(dumpPath, content, 'utf8', (err) => {\n    if (err) log.error(err)\n    else {\n      console.log(`Keyboard information written to \"${dumpPath}\".`)\n      shell.openPath(dumpPath)\n    }\n  })\n})\n}", "CodeBleu_score": 47.04263718857775}, {"code": "export const registerKeyboardListeners = () =>{\n\tconst getKeyboardInfo = () => {\n  const keyboardInfo = {\n    keyboardLayout: keyboardLayout,\n    keyboardLocale: keyboardLocale,\n    keyboardLocked: keyboardLocked,\n    keyboardCapsLock: keyboardCapsLock,\n    keyboardNumLock: keyboardNumLock,\n    keyboardScrollLock: keyboardScrollLock,\n    keyboardAutoRepeat: keyboardAutoRepeat,\n    keyboardCurrentLayout: keyboardCurrentLayout,\n    keyboardCurrentLocale: keyboardCurrentLocale,\n    keyboardCurrentLocked: keyboardCurrentLocked,\n    keyboardCurrentCapsLock: keyboardCurrentCapsLock,\n    keyboardCurrentNumLock: keyboardCurrentNumLock,\n    keyboardCurrentScrollLock: keyboardCurrentScrollLock,\n    keyboardCurrentAutoRepeat: keyboardCurrentAutoRepeat,\n  }\n  return keyboardInfo\n}\n\nipcMain.handle('getKeyboardInfo', getKeyboardInfo)\n\nipcMain.on('dumpKeyboardInfo', (event, dumpPath) => {\n  const content = JSON.stringify(getKeyboardInfo(), null, 2)\n  fsPromises.writeFile(dumpPath, content, 'utf8')\n    .then(() => {\n      console.log(`Keyboard information written to \"${dumpPath}\".`)\n      shell.openPath(dumpPath)\n    })\n    .catch(error => {\n      log.error(error)\n    })\n})\n}", "CodeBleu_score": 56.06678353461797}, {"code": "export const registerKeyboardListeners = () =>{\n\t\nconst log = require('electron-log')\nconst { ipcMain } = require('electron')\nconst os = require('os')\nconst fs = require('fs')\nconst path = require('path')\nconst shell = require('electron').shell\n\nconst getKeyboardInfo = () => {\n  return {\n    os: os.type(),\n    hostname: os.hostname(),\n    platform: os.platform(),\n    release: os.release(),\n    arch: os.arch(),\n    cpus: os.cpus(),\n    totalmem: os.totalmem(),\n    freemem: os.freemem(),\n    tmpdir: os.tmpdir(),\n    homedir: os.homedir(),\n    endianness: os.endianness(),\n    networkInterfaces: os.networkInterfaces()\n  }\n}\n\nipcMain.handle('getKeyboardInfo', async () => {\n  return getKeyboardInfo()\n})\n\nipcMain.on('dumpKeyboardInfo', (event, dumpPath) => {\n  const content = JSON.stringify(getKeyboardInfo())\n  fs.writeFile(dumpPath, content, 'utf8', (err) => {\n    if (err) {\n      log.error(err)\n      return\n    }\n    console.log(`Keyboard information written to \"${dumpPath}\".`)\n    shell.openPath(dumpPath)\n  })\n})\n}", "CodeBleu_score": 48.87981136121999}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n  if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n    console.log('[DEBUG] Keyboard layout changed:\n', layout)\n  }\n  electronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 87.51800024591708}, {"code": "_prepareKeyMapper (){\n\t\n}", "CodeBleu_score": 3.4588146509825073}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\n    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\n    keyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n      if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n        console.log('[DEBUG] Keyboard layout changed:\n', layout)\n      }\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 87.91865202636015}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\nObject.keys(others).forEach(key => {\nthis.systemConfig.delete(key)\n})\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\nthis.setSystemConfig('all-proxy', server)\nthis.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 97.39636058984549}, {"code": "fixSystemConfig (){\n\t\n}", "CodeBleu_score": 1.0107397220095637}, {"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\nObject.keys(others).forEach(key => {\nthis.systemConfig.delete(key)\n})\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\nthis.setSystemConfig('all-proxy', server)\nthis.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 97.39636058984549}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\t\n}", "CodeBleu_score": 2.8592438618011533}, {"code": "closeClient (){\n\t\n}", "CodeBleu_score": 2.8592438618011533}, {"code": "closeClient (){\n\t\n}", "CodeBleu_score": 2.8592438618011533}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\tlet bar = this.bars[page] || null\nif (!bar) {\ntry {\nconst items = this.build(this.template)\nbar = new TouchBar({ items })\nthis.bars[page] = bar\n} catch (e) {\nlogger.info('getTouchBarByPage fail', e)\n}\n}\nreturn bar\n}", "CodeBleu_score": 93.81392090039007}, {"code": "getTouchBarByPage (page){\n\tlet bar = this.bars[page] || null\nif (!bar) {\n  try {\n    const items = this.build(this.template)\n    bar = new TouchBar({ items })\n    this.bars[page] = bar\n  } catch (e) {\n    logger.info('getTouchBarByPage fail', e)\n  }\n}\nreturn bar\n}", "CodeBleu_score": 97.1345340669617}, {"code": "getTouchBarByPage (page){\n\t\n}", "CodeBleu_score": 2.05058064706927}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\t\n}", "CodeBleu_score": 4.494364307329031}, {"code": "handleWindowClose (pageOptions, page, window){\n\twindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide && !this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 98.03803270458879}, {"code": "handleWindowClose (pageOptions, page, window){\n\twindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide && !this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 98.03803270458879}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tif (process.platform === 'darwin') {\n\t\t\tapp.moveToApplicationsFolder(error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(errorMsg || error)\n\t\t\t\t} else {\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tresolve()\n\t\t}\n\t})\n}", "CodeBleu_score": 37.13453284026919}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tapp.moveToApplicationsFolder((error) => {\n\t\t\tif (error) {\n\t\t\t\treject(errorMsg || error.message);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}", "CodeBleu_score": 35.694899259309395}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\ttry {\n\t\t\t// Get the path to the Applications folder\n\t\t\tconst applicationsFolderPath = getApplicationsFolderPath();\n\t\t\t// Get the path to the app's folder\n\t\t\tconst appFolderPath = getAppFolderPath();\n\t\t\t// Move the app's folder to the Applications folder\n\t\t\tapp.moveToApplicationsFolder(appFolderPath, {\n\t\t\t\tonSuccess: () => {\n\t\t\t\t\t// The app's folder was successfully moved to the Applications folder\n\t\t\t\t\tresolve();\n\t\t\t\t},\n\t\t\t\tonError: (error) => {\n\t\t\t\t\t// The app's folder was not successfully moved to the Applications folder\n\t\t\t\t\treject(errorMsg + error);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\t// The app's folder was not successfully moved to the Applications folder\n\t\t\treject(errorMsg + error);\n\t\t}\n\t});\n}", "CodeBleu_score": 36.56969486208879}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 4.730158994484676}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 4.730158994484676}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t", "CodeBleu_score": 4.689580994804317}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst hash = crypto.createHash('md5');\nhash.update(url);\nconst normalizedAppName = `${appName.toLowerCase()\n.replace(/[,:.]/g, '')\n.replace(/ /g, '-')\n.replace(/_/g, '-')\n}-nativefier-${hash.digest('hex').substring(0, 6)}`;\nreturn normalizedAppName;\n}", "CodeBleu_score": 65.77521035138354}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst hash = crypto.createHash('md5');\nhash.update(url);\nconst hashString = hash.digest('hex').substring(0, 6);\nconst normalizedAppName = `${appName\n    .toLowerCase()\n    .replace(/[,:.]/g, '')\n    .replace(/ /g, '-')\n    .replace(/_/g, '-')}-nativefier-${hashString}`;\nreturn normalizedAppName;\n}", "CodeBleu_score": 72.6958431074948}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst hash = crypto.createHash('md5');\nhash.update(url);\nreturn `${appName\n    .toLowerCase()\n    .replace(/[,:.]/g, '')\n    .replace(/\\s/g, '-')\n    .replace(/_/g, '-')}-nativefier-${hash.digest('hex').substring(0, 6)}`;\n}", "CodeBleu_score": 47.22613136463603}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 6.584793506668511}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\n}", "CodeBleu_score": 29.86584669194794}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\n}", "CodeBleu_score": 29.86584669194794}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\n}", "CodeBleu_score": 29.86584669194794}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t\n}", "CodeBleu_score": 3.20705706652424}, {"code": "export function camelCased(str: string): string{\n\t\n}", "CodeBleu_score": 3.20705706652424}, {"code": "export function camelCased(str: string): string{\n\t\treturn str\n\t\t.split(\"-\")\n\t\t.filter(Boolean)\n\t\t.map((word, index) => (index === 0 ? word : word[0].toUpperCase() + word.substring(1)))\n\t\t.join(\"\");\n}", "CodeBleu_score": 37.52330029734314}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\n}", "CodeBleu_score": 13.4938861775731}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\n}", "CodeBleu_score": 13.4938861775731}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tconst sanitizedFilename = sanitize(filenameToSanitize);\n\tif (platform === 'linux') {\n\t\tconst sanitizedFilenameWithoutUnicode = sanitizedFilename.replace(/[\\\\\\/\\:\\*\\?\\\"\\<\\>\\|]/g, '');\n\t\tif (sanitizedFilenameWithoutUnicode.length === 0) {\n\t\t\tlog.warn('The sanitized filename is empty, using default application name instead');\n\t\t\treturn 'Code';\n\t\t} else {\n\t\t\tlog.debug(`Sanitized filename: ${sanitizedFilename}`);\n\t\t\treturn sanitizedFilenameWithoutUnicode;\n\t\t}\n\t} else {\n\t\tlog.debug(`Sanitized filename: ${sanitizedFilename}`);\n\t\treturn sanitizedFilename;\n\t}\n}", "CodeBleu_score": 46.8331296821623}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tconst { cacheTime, cacheDuration } = savedCache;\n\tconst now = new Date().getTime();\n\tconst cacheTimeInt = parseInt(cacheTime, 10);\n\tconst cacheDurationInt = parseInt(cacheDuration, 10);\n\tconst sum = cacheTimeInt + cacheDurationInt;\n\treturn sum < now;\n}", "CodeBleu_score": 21.601449652675328}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tconst cacheTime = parseInt(savedCache.cacheTime);\nconst duration = parseInt(savedCache.duration);\nconst now = new Date().getTime();\n\nreturn cacheTime + duration < now;\n}", "CodeBleu_score": 32.00155120910841}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\n}", "CodeBleu_score": 2.7224589722803434}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (timestampOptionArgument === undefined || timestampOptionArgument === null) {\n\t\treturn Date.now();\n\t}\n\n\tif (typeof timestampOptionArgument !== \"number\") {\n\t\tthrow new TypeORMError(`\"${timestampOptionArgument}\" option's value must be a number`);\n\t}\n\n\tif (timestampOptionArgument < 0) {\n\t\tthrow new TypeORMError(`\"${timestampOptionArgument}\" option's value must be a positive number`);\n\t}\n\n\treturn new Date(Number(timestampOptionArgument)).getTime();\n}", "CodeBleu_score": 54.83655760226584}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (typeof timestampOptionArgument === \"number\" && timestampOptionArgument > 0)\n\t\treturn timestampOptionArgument;\n\n\tif (typeof timestampOptionArgument === \"string\" && timestampOptionArgument.length > 0) {\n\t\tconst timestamp = parseInt(timestampOptionArgument, 10);\n\t\tif (!isNaN(timestamp) && timestamp > 0)\n\t\t\treturn timestamp;\n\t}\n\n\tthrow new TypeORMError(`Provided timestamp '${timestampOptionArgument}' is not a valid timestamp. ` +\n\t\t`It must be a number or string and must be greater than 0. ` +\n\t\t`If you are using a string, consider using the static method now()`);\n}", "CodeBleu_score": 41.15837457028009}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\n}", "CodeBleu_score": 3.2699915406560898}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t\n}", "CodeBleu_score": 1.7662619599923286}, {"code": " async dropDatabase(): Promise<void>{\n\t\n}", "CodeBleu_score": 1.7662619599923286}, {"code": " async dropDatabase(): Promise<void>{\n\t\n}", "CodeBleu_score": 1.7662619599923286}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n}", "CodeBleu_score": 5.777452253928204}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n}", "CodeBleu_score": 5.777452253928204}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n}", "CodeBleu_score": 5.777452253928204}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\nthis.connection.getMetadata: p\nplainObjectToDatabaseEntityTransformer.transform: p\nthis.merge: p\n\n}", "CodeBleu_score": 12.812266934023969}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\nconst [showNote, setShowNote] = React.useState(compression > 0)\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <label className=\"text-center text-sm font-medium\">Compression</label>\n      <div className=\"flex items-center w-full\">\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          step=\"1\"\n          value={compression}\n          className=\"w-full\"\n          onChange={handleCompressionChange}\n        />\n        <div className=\"ml-2\">\n          <span className=\"text-xs font-medium\">{compression}%</span>\n        </div>\n      </div>\n      {showNote && (\n        <div className=\"mt-2 text-xs font-medium\">\n          PNG and JPG compression is lossless. WebP compression is lossy.\n        </div>\n      )}\n    </div>\n  )\n}", "CodeBleu_score": 40.258045881804144}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\n/**\n * The handleCompressionChange function is called when the slider value changes.\n * It updates the compression state with the new value.\n */\n  function handleCompressionChangeCallback(\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) {\n    const value = Number(event.target.value)\n    handleCompressionChange(value)\n  }\n\n  return (\n    <div className=\"flex flex-row justify-between items-center\">\n      <p className=\"text-xs\">Compression: {compression}%</p>\n      <input\n        className=\"w-32\"\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChangeCallback}\n      />\n      {compression > 0 && (\n        <p className=\"text-xs\">\n          PNG, JPG, and WebP are lossy image formats. The compression value\n          affects the quality of the image.\n        </p>\n      )}\n    </div>\n  )\n}", "CodeBleu_score": 41.49236962470687}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\treturn (\n\t\t<div className=\"flex flex-col\">\n\t\t\t<label className=\"flex items-center\">\n\t\t\t\t<span className=\"mr-2\">Compression</span>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"100\"\n\t\t\t\t\tstep=\"1\"\n\t\t\t\t\tvalue={compression}\n\t\t\t\t\tonChange={handleCompressionChange}\n\t\t\t\t\tclassName=\"w-full h-3 px-3 py-1 bg-gray-300 rounded-full cursor-pointer appearance-none\"\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t<span className=\"text-sm text-gray-500\">\n\t\t\t\t{compression > 0 ? (\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{compression}% of the image will be compressed\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<span className=\"text-xs text-gray-400\">\n\t\t\t\t\t\t\tPNG uses lossless compression, JPG uses lossy compression, and WebP uses lossy compression with alpha channel.\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t<span>\n\t\t\t\t\t\tNo compression will be applied.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<span className=\"text-xs text-gray-400\">\n\t\t\t\t\t\t\tPNG uses lossless compression, JPG uses lossy compression, and WebP uses lossy compression with alpha channel.\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</span>\n\t\t</div>\n\t)\n}", "CodeBleu_score": 44.497991551485164}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\t\tconst resArr = [];\n\tconst key = `${type}-${name}`;\n\n\tfor (const idx in this.attributeIndex) {\n\t\tif (idx.startsWith(key)) {\n\t\t\tresArr.push(this.attributeIndex[idx]);\n\t\t}\n\t}\n\n\treturn resArr.flat();\n}", "CodeBleu_score": 93.2764422468637}, {"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\nif (idx.startsWith(key)) {\nresArr.push(this.attributeIndex[idx]);\n}\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 93.03868818200118}, {"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\nif (idx.startsWith(key)) {\nresArr.push(this.attributeIndex[idx]);\n}\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 93.03868818200118}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t\tvar childNote = db.notes.findOne({_id: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = '';\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\tvar parentNote = db.notes.findOne({_id: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 61.76735565477328}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne({_id: branchRow.childNoteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = [];\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\tvar parentNote = becca.notes.findOne({_id: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 61.43244286587779}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne({_id: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = '';\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\tvar parentNote = becca.notes.findOne({_id: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 60.30378087747087}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t\tif (!mime || mime == 'text/html') return mime;\n\tif (mimeCache[mime]) return mimeCache[mime];\n\tvar parts = mime.split('/');\n\tif (parts[0] == 'text') parts.shift();\n\telse if (parts[0] == 'application') parts.shift();\n\tif (parts[0].substr(0, 1) == '-') parts.shift();\n\tmimeCache[mime] = parts.join('/');\n\treturn mimeCache[mime];\n}", "CodeBleu_score": 39.24197297758544}, {"code": "function trimMime(mime){\n\t\tif (mime == null || mime == 'text/html') {\n\t\treturn mime;\n\t}\n\tif (mime in mimeCache) {\n\t\treturn mimeCache[mime];\n\t}\n\tvar parts = mime.split('/');\n\tif (parts.length < 2) {\n\t\treturn mime;\n\t}\n\tvar prefix = parts[0];\n\tif (prefix == 'text' || prefix == 'application') {\n\t\tparts.shift();\n\t}\n\tif (parts.length < 2) {\n\t\treturn mime;\n\t}\n\tparts[0] = parts[0].replace('-', '');\n\tmime = parts.join('/');\n\tmimeCache[mime] = mime;\n\treturn mime;\n}", "CodeBleu_score": 37.62702673593243}, {"code": "function trimMime(mime){\n\t\tif (mime === null || mime === 'text/html') {\n\t\treturn mime;\n\t}\n\tif (mime in trimMime.cache) {\n\t\treturn trimMime.cache[mime];\n\t}\n\tconst parts = mime.split('/');\n\tif (parts.length < 2) {\n\t\treturn mime;\n\t}\n\tconst prefix = parts[0];\n\tif (prefix === 'text' || prefix === 'application') {\n\t\tparts.shift();\n\t}\n\tif (parts.length < 2) {\n\t\treturn mime;\n\t}\n\tconst suffix = parts.pop();\n\tif (suffix.startsWith('-')) {\n\t\tparts.push(suffix.substr(1));\n\t}\n\ttrimMime.cache[mime] = parts.join('/');\n\treturn trimMime.cache[mime];\n}", "CodeBleu_score": 37.13028138048624}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t", "CodeBleu_score": 0.5758063541610249}, {"code": "function buildDateLimits(baseNote){\n\t\tconst creationDate = dateUtils.parseDateTime(baseNote.utcDateCreated);\n\tconst creationTimestamp = creationDate.getTime();\n\tconst minDate = dateUtils.utcDateTimeStr(creationTimestamp - 1000 * 60 * 60 * 24 * 30 * 6);\n\tconst minExcludedDate = dateUtils.utcDateTimeStr(creationTimestamp - 1000 * 60 * 60 * 24 * 30 * 5);\n\tconst maxExcludedDate = dateUtils.utcDateTimeStr(creationTimestamp + 1000 * 60 * 60 * 24 * 30 * 5);\n\tconst maxDate = dateUtils.utcDateTimeStr(creationTimestamp + 1000 * 60 * 60 * 24 * 30 * 6);\n\treturn { minDate, minExcludedDate, maxExcludedDate, maxDate };\n}", "CodeBleu_score": 32.465666950434425}, {"code": "function buildDateLimits(baseNote){\n\t\tvar dateCreated = dateUtils.parseDateTime(baseNote.utcDateCreated);\n\tvar minDate = dateUtils.utcDateTimeStr(dateCreated.getTime() - 1000 * 60 * 60 * 24 * 30);\n\tvar minExcludedDate = dateUtils.utcDateTimeStr(dateCreated.getTime() - 1000 * 60 * 60 * 24 * 7);\n\tvar maxExcludedDate = dateUtils.utcDateTimeStr(dateCreated.getTime() + 1000 * 60 * 60 * 24 * 7);\n\tvar maxDate = dateUtils.utcDateTimeStr(dateCreated.getTime() + 1000 * 60 * 60 * 24 * 30);\n\treturn {\n\t\tminDate: minDate,\n\t\tminExcludedDate: minExcludedDate,\n\t\tmaxExcludedDate: maxExcludedDate,\n\t\tmaxDate: maxDate\n\t};\n}", "CodeBleu_score": 33.50823733147409}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t\n}", "CodeBleu_score": 1.0851200219377866}, {"code": "_setContent(content, opts = {}){\n\t}", "CodeBleu_score": 1.0851200219377866}, {"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await dateNoteService.getInboxNote();\n\tif (!inboxNote) {\n\t\treturn;\n\t}\n\tconst newNote = await server.post(\n\t\t'note',\n\t\t{\n\t\t\ttitle: 'New Note',\n\t\t\tparent_id: inboxNote.id,\n\t\t\tcontent: '',\n\t\t\ttype: 1,\n\t\t\tprotected: false,\n\t\t},\n\t);\n\tawait appContext.triggerEvent('note.created', newNote);\n\tawait appContext.tabManager.openTabWithNoteWithHoisting(newNote);\n\tawait appContext.triggerEvent('note.focus', newNote);\n\tawait appContext.triggerEvent('note.selectTitle', newNote);\n}", "CodeBleu_score": 49.46924451655502}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await dateNoteService.getInboxNote();\n\tconst newNote = await server.post({\n\t\tpath: '/api/notes',\n\t\tbody: {\n\t\t\tparent_id: inboxNote.id,\n\t\t\ttitle: 'New Note',\n\t\t\tcontent: 'This is a new note.',\n\t\t\ttype: 'note',\n\t\t\tprotection: {\n\t\t\t\tstatus: 'protected'\n\t\t\t}\n\t\t}\n\t});\n\tawait appContext.triggerEvent('note.focus', {\n\t\tnoteId: newNote.id\n\t});\n\tawait appContext.tabManager.openTabWithNoteWithHoisting(newNote);\n}", "CodeBleu_score": 49.049443363489026}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await dateNoteService.getInboxNote();\n\tconst note = await server.post(\"/rest/api/content\", {\n\t\ttype: \"note\",\n\t\ttitle: \"New note\",\n\t\tparent: {\n\t\t\tid: inboxNote.id\n\t\t},\n\t\tproperties: {\n\t\t\t\"sn-sync-state\": \"NOT_SYNCED\"\n\t\t}\n\t});\n\tawait protectedSessionHolder.isProtectedSessionAvailable();\n\tappContext.triggerEvent(\n\t\t\"sn-note-created\",\n\t\t{\n\t\t\tnoteId: note.id,\n\t\t\tnoteTitle: note.title\n\t\t}\n\t);\n\tawait ws.waitForMaxKnownEntityChangeId();\n\tappContext.tabManager.openTabWithNoteWithHoisting(note.id);\n\tappContext.triggerEvent(\n\t\t\"sn-note-focused\",\n\t\t{\n\t\t\tnoteId: note.id\n\t\t}\n\t);\n}", "CodeBleu_score": 50.51205565597926}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst activeNoteContext = await appContext.tabManager.getActiveContext();\n\tconst note = await activeNoteContext.getNote(noteId);\n\tif (note.is_search) {\n\t\treturn;\n\t}\n\tif (note.is_hoisted) {\n\t\tawait activeNoteContext.unhoist();\n\t} else {\n\t\tawait activeNoteContext.setHoistedNoteId(noteId);\n\t}\n}", "CodeBleu_score": 61.17490301204573}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t const activeNoteContext = appContext.tabManager.getActiveContext();\n if (activeNoteContext.isSearchContext()) {\n return;\n }\n const note = await appContext.fileManager.getNote(noteId);\n if (note.isHoisted) {\n activeNoteContext.unhoist();\n } else {\n activeNoteContext.setHoistedNoteId(noteId);\n }\n }", "CodeBleu_score": 53.548091645147665}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\tconst activeNoteContext = appContext.tabManager.getActiveContext();\nconst note = await appContext.fileManager.getNote(noteId);\nif (note.is_search_note) {\nreturn;\n}\nif (activeNoteContext.hoistedNoteId === noteId) {\nactiveNoteContext.unhoist();\n} else {\nactiveNoteContext.setHoistedNoteId(noteId);\n}\n}", "CodeBleu_score": 52.5071019154811}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = this.generateHash({notePath, hoistedNoteId, viewScope});\n\tconst url = `${window.location.origin}/#${hash}`;\n\n\tif (utils.isElectron()) {\n\t\tipcRenderer.send('open-in-window', {url, width: 1000, height: 600});\n\t} else {\n\t\twindow.open(url, '_blank', 'width=1000,height=600');\n\t}\n}", "CodeBleu_score": 36.121279284426656}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = this.calculateHash({notePath, hoistedNoteId, viewScope});\n\tif (utils.isElectron()) {\n\t\tipcRenderer.send('open-window', hash);\n\t} else {\n\t\twindow.open(`file://${__dirname}/index.html#${hash}`);\n\t}\n}", "CodeBleu_score": 26.87179752356502}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst notePathHash = await this.generateNotePathHash(notePath)\n\tconst windowId = `${notePathHash}${hoistedNoteId}`\n\tconst windowOptions = {\n\t\twidth: 1200,\n\t\theight: 800,\n\t\ttitle: `Obsidian${viewScope ? ` ${viewScope}` : ''}`,\n\t\tframe: false,\n\t\tshow: false,\n\t}\n\tconst windowUrl = `${window.location.origin}/?windowId=${windowId}`\n\n\tif (utils.isElectron) {\n\t\tipcRenderer.send('create-window', windowId, windowUrl, windowOptions)\n\t} else {\n\t\twindow.open(windowUrl, windowId, `width=${windowOptions.width},height=${windowOptions.height},title=${windowOptions.title}`)\n\t}\n}", "CodeBleu_score": 39.256032223062775}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst note = activeContext.note;\n\tconst ntxId = activeContext.ntxId;\n\tconst mime = note.mime;\n\n\tif (mime.endsWith('code/javascript')) {\n\t\tconst bundle = await bundleService.getAndExecuteBundle(note, ntxId);\n\t\tconsole.log(bundle);\n\t} else if (mime.endsWith('code/sql')) {\n\t\tconst sql = note.body;\n\t\tconst results = await dbService.execute(sql);\n\t\tconsole.log(results);\n\t\tif (results.error) {\n\t\t\ttoastService.showError(results.error);\n\t\t} else {\n\t\t\ttoastService.showMessage('Query executed successfully');\n\t\t\tappContext.triggerEvent('sql-executed', results);\n\t\t}\n\t} else {\n\t\tconst script = note.body;\n\t\tconst response = await server.post('/script', { script });\n\t\tconsole.log(response);\n\t\ttoastService.showMessage('Script executed successfully');\n\t}\n}", "CodeBleu_score": 36.95347127133045}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst ntxId = activeContext.ntxId;\n\tconst note = activeContext.note;\n\tconst noteType = note.mime.split('/')[0];\n\tconst noteId = note.id;\n\n\tif (noteType === 'code') {\n\t\tif (note.mime.endsWith('javascript')) {\n\t\t\tconst bundle = await bundleService.getAndExecuteBundle(noteId);\n\t\t\tconsole.log('runActiveNoteCommand: bundle', bundle);\n\t\t} else if (note.mime.endsWith('sql')) {\n\t\t\tconst query = note.content;\n\t\t\tconst result = await sqlService.execute(ntxId, query);\n\t\t\tconsole.log('runActiveNoteCommand: result', result);\n\t\t\tif (result.error) {\n\t\t\t\ttoastService.showError(result.error);\n\t\t\t} else {\n\t\t\t\ttoastService.showMessage('Query executed successfully!');\n\t\t\t\tappContext.triggerEvent('note-query-executed', {\n\t\t\t\t\tntxId,\n\t\t\t\t\tresult\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (note.mime.endsWith('http')) {\n\t\t\tconst script = note.content;\n\t\t\tconst response = await server.post(script);\n\t\t\tconsole.log('runActiveNoteCommand: response', response);\n\t\t\ttoastService.showMessage('Script executed successfully!');\n\t\t\tappContext.triggerEvent('note-script-executed', {\n\t\t\t\tntxId,\n\t\t\t\tresponse\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 37.127691062449166}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t\n}", "CodeBleu_score": 1.0558091672813128}, {"code": "async isReadOnly(){\n\t//    if (this.note.options.get('read-only') === false) {\n//        return false;\n//    }\n\n    if (this.note.options.get('read-only') === true) {\n        return true;\n    }\n\n    if (this.note.options.get('read-only') === 'auto') {\n        if (this.note.options.get('read-only-disabled') === true) {\n            return false;\n        }\n\n        if (this.note.isLabelTruthy('readOnly')) {\n            return true;\n        }\n\n        if (this.note.options.get('view') === 'source') {\n            return true;\n        }\n\n        const blob = await this.note.getBlob();\n\n        if (blob.type === 'text' || blob.type === 'code') {\n            return blob.size > this.options.get('read-only-size-limit');\n        }\n\n        return false;\n    }\n\n    return false;\n}", "CodeBleu_score": 52.765552689549224}, {"code": "async isReadOnly(){\n\t\tif (this.note.isLabelTruthy('readOnly')) {\n\t\treturn true;\n\t}\n\n\tif (this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n\t\treturn false;\n\t}\n\n\tif (this.note.isLabelTruthy('source')) {\n\t\treturn true;\n\t}\n\n\tlet blob = await this.note.getBlob();\n\n\tif (!blob) {\n\t\treturn false;\n\t}\n\n\tlet size = blob.size;\n\n\tif (size > this.note.options.get('maxTextSize') && this.note.type !== 'code') {\n\t\treturn true;\n\t}\n\n\tif (size > this.note.options.get('maxCodeSize') && this.note.type === 'code') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 50.68423510551972}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\n}", "CodeBleu_score": 3.8604757429109626}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\n}", "CodeBleu_score": 3.8604757429109626}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\n}", "CodeBleu_score": 3.8604757429109626}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\t\tconst branchIdPos = {};\n\n\tfor (const branchId of Object.values(this.childToBranch)) {\n\t\tbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n\t}\n\n\tthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.14186072237196}, {"code": "sortChildren(){\n\t\tconst branchIdPos = {};\n\n\tfor (const branchId of Object.values(this.childToBranch)) {\n\t\tbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n\t}\n\n\tthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.14186072237196}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\nfor (const branchId of Object.values(this.childToBranch)) {\nbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.10497917881968}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\n}", "CodeBleu_score": 0.4468052959495121}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (!newParentBranch) {\n\t\ttoastService.showError('Invalid parent branch');\n\t\treturn;\n\t}\n\n\tif (newParentBranch.noteId === 'root') {\n\t\ttoastService.showError('Cannot move to root note');\n\t\treturn;\n\t}\n\n\tconst branchIdsToMove = filterRootNote(branchIdsToMove);\n\n\tfor (const branchId of branchIdsToMove) {\n\t\tconst branch = froca.getBranch(branchId);\n\n\t\tif (branch.noteId === hoistedNoteService.getHoistedNoteId()) {\n\t\t\ttoastService.showError('Cannot move hoisted note');\n\t\t\treturn;\n\t\t}\n\n\t\tif (branch.parentNote.type === 'search') {\n\t\t\ttoastService.showError('Cannot move search note');\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait server.put('/api/note/move', {\n\t\t\t\tbranchId,\n\t\t\t\tnewParentNoteId: newParentBranch.noteId,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\ttoastService.showError(err.message);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.90670230187901}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (newParentBranch.noteType !== 'note') {\n\t\ttoastService.showError('You can only move branches to notes.');\n\n\t\treturn;\n\t}\n\n\tconst branchIdsToMove = filterRootNote(branchIdsToMove);\n\n\tfor (const branchId of branchIdsToMove) {\n\t\tconst branch = froca.getBranch(branchId);\n\t\tconst parentNote = branchToMove.getParentNote(branch);\n\n\t\tif (parentNote.noteType === 'search') {\n\t\t\ttoastService.showError('You cannot move branches to search results.');\n\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait server.put('move-branch', {\n\t\t\t\tbranchId,\n\t\t\t\tnewParentBranchId\n\t\t\t});\n\t\t} catch (error) {\n\t\t\ttoastService.showError('Failed to move branch.');\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\ttoastService.showSuccess('Moved branch(es).');\n}", "CodeBleu_score": 47.48270635260795}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst activeNotePathArr = activeContext.notePathArray;\n\tconst activeNotePathStr = activeNotePathArr.join();\n\tconst parentNotePathArr = activeNotePathArr.slice(0, activeNotePathArr.length - 1);\n\tconst parentNotePathStr = parentNotePathArr.join();\n\tif (parentNotePathStr !== '') {\n\t\tactiveContext.setNote(parentNotePathStr);\n\t}\n}", "CodeBleu_score": 52.16814868005777}, {"code": "async function activateParentNotePath(){\n\t\t// Get the active context.\n\tconst activeContext = appContext.tabManager.getActiveContext();\n\t// Get the active note path array.\n\tconst activeNotePathArr = activeContext.notePathArray;\n\t// Remove the last element from the active note path array.\n\tactiveNotePathArr.pop();\n\t// Get the parent note path by joining the active note path array.\n\tconst parentNotePath = activeNotePathArr.join();\n\t// Check if the parent note path exists.\n\tif (await appContext.fileManager.exists(parentNotePath)) {\n\t\t// Set the active note to the parent note path.\n\t\tactiveContext.setNote(parentNotePath);\n\t}\n}", "CodeBleu_score": 52.753060088962876}, {"code": "async function activateParentNotePath(){\n\t\tconst activeContext = appContext.tabManager.getActiveContext();\n\tconst notePathArray = activeContext.notePathArray;\n\tconst parentNotePathArr = notePathArray.slice(0, -1);\n\tconst parentNotePath = parentNotePathArr.join('/');\n\tif (parentNotePath) {\n\t\tactiveContext.setNote(parentNotePath);\n\t}\n}", "CodeBleu_score": 61.84442882999137}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t\t// If running in an Electron environment, use the Electron clipboard module.\n\tif (utils.isElectron()) {\n\t\t// Set the clipboard mode to 'copy'.\n\t\tclipboard.writeMode('copy');\n\t\t// Create a reference link for each branch to be copied.\n\t\tconst links = branchIds.map(id => linkService.createLink(id));\n\t\t// Collect the HTML representations of these links.\n\t\tconst html = links.map(link => link.toHTML());\n\t\t// Write the HTML links to the clipboard.\n\t\tclipboard.writeHTML(html.join(''));\n\t\t// Show a message indicating the branches have been copied to the clipboard.\n\t\ttoastService.showMessage('Copied to clipboard');\n\t}\n\t// Else, if running in a browser environment, use the browser clipboard API.\n\telse {\n\t\t// Create a reference link for each branch to be copied.\n\t\tconst links = branchIds.map(id => linkService.createLink(id));\n\t\t// Collect the HTML representations of these links.\n\t\tconst html = links.map(link => link.toHTML());\n\t\t// Write the HTML links to the clipboard.\n\t\tclipboard.writeText(html.join(''));\n\t\t// Show a message indicating the branches have been copied to the clipboard.\n\t\ttoastService.showMessage('Copied to clipboard');\n\t}\n}", "CodeBleu_score": 37.698206306319825}, {"code": "async function copy(branchIds){\n\t\tif (utils.isElectron()) {\n\t\tconst clipboard = require('electron').clipboard;\n\t\tclipboard.writeHTML('');\n\t\tclipboard.writeHTML(\n\t\t\t'<div style=\"white-space: pre-wrap\">' +\n\t\t\tlinks.join(\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tbranchIds.map(\n\t\t\t\t\t\tasync branchId =>\n\t\t\t\t\t\t\tawait linkService.createLink(branchId)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) +\n\t\t\t'</div>',\n\t\t\t'copy'\n\t\t);\n\t\ttoastService.showMessage('Copied to clipboard');\n\t} else {\n\t\tconst branchNames = await froca.getBranches(branchIds);\n\t\tconst branchLinks = await Promise.all(\n\t\t\tbranchIds.map(\n\t\t\t\tasync branchId =>\n\t\t\t\t\tawait linkService.createLink(branchId)\n\t\t\t)\n\t\t);\n\t\tconst branchHTML = branchLinks.map(\n\t\t\t(branchLink, index) =>\n\t\t\t\t'<a href=\"' + branchLink + '\">' + branchNames[index] + '</a>'\n\t\t);\n\t\tconst html = '<div style=\"white-space: pre-wrap\">' + branchHTML.join('\n') + '</div>';\n\t\tdocument.addEventListener('copy', event => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.clipboardData.setData('text/html', html);\n\t\t\tevent.clipboardData.setData('text/plain', branchHTML.join('\n'));\n\t\t});\n\t\tdocument.execCommand('copy');\n\t\ttoastService.showMessage('Copied to clipboard');\n\t}\n}", "CodeBleu_score": 38.17985937565863}, {"code": "async function copy(branchIds){\n\t\tconst clipboard = require('clipboard');\n\tconst links = [];\n\tconst toastService = require('services/toastService');\n\tconst utils = require('utils');\n\tconst linksService = require('services/linksService');\n\n\tif (utils.isElectron()) {\n\t\tconst froca = require('froca');\n\t\tconst branches = await froca.getBranches(branchIds);\n\t\tfor (let branch of branches) {\n\t\t\tconst link = await linksService.createLink(branch.id);\n\t\t\tlinks.push(link);\n\t\t}\n\t\tclipboard.writeHTML(links.join(''));\n\t\ttoastService.showMessage('Branches copied to clipboard');\n\t}\n}", "CodeBleu_score": 46.51665260357328}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\t// Make a copy of the data\n\tconst newData = JSON.parse(JSON.stringify(data))\n\n\t// Iterate through each item in the data\n\tnewData.forEach((item) => {\n\t\t// If the item is a folder, ensure the children property is an array\n\t\tif (item.type === 'folder') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = []\n\t\t\t}\n\t\t}\n\n\t\t// If the item is a group, ensure the include property is an array\n\t\tif (item.type === 'group') {\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = []\n\t\t\t}\n\t\t}\n\n\t\t// Set the content property to an empty string\n\t\titem.content = ''\n\t})\n\n\treturn newData\n}", "CodeBleu_score": 46.2878637070182}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tconst newData = data.map((item) => {\n\t\tif (item.type === 'folder') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = []\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = []\n\t\t\t}\n\t\t}\n\n\t\titem.content = ''\n\n\t\treturn item\n\t})\n\n\treturn newData\n}", "CodeBleu_score": 43.273848695076765}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tconst cleanedData: IHostsBasicData = []\n\tdata.forEach((item: IHostsBasicDataItem) => {\n\t\tif (item.type === 'folder') {\n\t\t\tif (!isArray(item.children)) {\n\t\t\t\titem.children = []\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!isArray(item.include)) {\n\t\t\t\titem.include = []\n\t\t\t}\n\t\t}\n\t\titem.content = ''\n\t\tcleanedData.push(item)\n\t})\n\treturn cleanedData\n}", "CodeBleu_score": 42.8528788566519}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = configGet('historyLimit');\n\tif (historyLimit === undefined || historyLimit <= 0) return;\n\n\tconst history = await swhdb.collection.history.all;\n\tif (history.length > historyLimit) {\n\t\tconst deleteCount = history.length - historyLimit;\n\t\tconst ids = history.map(record => record.id);\n\t\tconst oldest = ids.slice(0, deleteCount);\n\t\tawait swhdb.collection.history.remove(oldest);\n\t}\n\n\tconst id = uuid4();\n\tconst timestamp = new Date().getTime();\n\tawait swhdb.collection.history.insert({ id, content, timestamp });\n}", "CodeBleu_score": 37.523047882163226}, {"code": "const addHistory = async (content: string) =>{\n\tconst historyLimit = parseInt(configGet('historyLimit'));\nif (historyLimit && historyLimit > 0) {\nconst history = await swhdb.collection.history.all;\nconst historyCount = history.length;\nif (historyCount >= historyLimit) {\nawait swhdb.collection.history.delete(history[0].uuid);\n}\nawait swhdb.collection.history.insert({\nuuid: uuid4(),\ncontent,\ntimestamp: new Date().getTime()\n});\n}\n}", "CodeBleu_score": 34.77333615037648}, {"code": "const addHistory = async (content: string) =>{\n\tconst historyLimit = parseInt(await configGet('historyLimit'));\nif (historyLimit && historyLimit > 0) {\nconst history = await swhdb.collection.history.all;\nif (history.length >= historyLimit) {\nawait deleteHistory(history.length - historyLimit);\n}\nawait swhdb.collection.history.insert({\nid: uuid4(),\ncontent,\ntimestamp: new Date().getTime(),\n});\n}\n}", "CodeBleu_score": 36.6886984611903}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = getDataFolder();\n\tconst oldDataFilePath = path.join(dataFolder, \"hosts-old.json\");\n\tconst defaultData: IHostsBasicData = {\n\t\ttimestamp: 0,\n\t\thosts: [],\n\t\tblocked: [],\n\t\tcustom: [],\n\t};\n\tif (fs.existsSync(oldDataFilePath)) {\n\t\ttry {\n\t\t\tconst fileContent = await fs.promises.readFile(oldDataFilePath, \"utf8\");\n\t\t\tconst oldData = JSON.parse(fileContent);\n\t\t\tconst cleanedData = cleanHostsList(oldData);\n\t\t\treturn cleanedData;\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\treturn defaultData;\n\t\t}\n\t} else {\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 45.42986283765556}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder: string = getDataFolder();\n\tconst dataFile: string = path.join(dataFolder, \"hosts-basic.json\");\n\tconst defaultData: IHostsBasicData = {\n\t\thosts: [],\n\t\tip: \"\",\n\t\tlastUpdate: \"\",\n\t};\n\n\tif (!fs.existsSync(dataFile)) {\n\t\treturn defaultData;\n\t}\n\n\ttry {\n\t\tconst data: string = await fs.promises.readFile(dataFile, \"utf8\");\n\t\tconst jsonData: IHostsBasicData = JSON.parse(data);\n\t\treturn cleanHostsList(jsonData);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 47.11268159759419}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder: string = getDataFolder();\n\tconst filePath: string = path.join(dataFolder, \"hosts_old.json\");\n\tconst defaultData: IHostsBasicData = {\n\t\thosts: [],\n\t\thostnames: [],\n\t\tipAddresses: [],\n\t};\n\n\tif (!fs.existsSync(filePath)) {\n\t\treturn defaultData;\n\t}\n\n\ttry {\n\t\tconst fileContent: string = await fs.promises.readFile(filePath, \"utf8\");\n\t\tconst parsedData: IHostsBasicData = JSON.parse(fileContent);\n\n\t\treturn cleanHostsList(parsedData);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 47.609725508417526}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) {\n\t\treturn swhdb;\n\t}\n\tdata_dir = await localdb.dict.local.get('data_dir');\n\tif (!data_dir) {\n\t\tconsole.log('No data directory path found in local storage');\n\t\treturn;\n\t}\n\tconst db_dir = path.join(data_dir, 'swhdb');\n\tswhdb = new PotDb(db_dir);\n\tconsole.log('Using swhdb at', db_dir);\n\treturn swhdb;\n}", "CodeBleu_score": 44.78031754066919}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) return swhdb;\n\tconst data_dir = await localdb.dict.local.get('data_dir');\n\tif (data_dir) {\n\t\tdata_dir_path = path.join(data_dir, 'swhdb');\n\t\tconsole.log(`Using data directory: ${data_dir_path}`);\n\t\tswhdb = new PotDb(data_dir_path);\n\t\treturn swhdb;\n\t}\n\tthrow new Error('No data directory found');\n}", "CodeBleu_score": 42.860670995415916}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tconst swhdb_initialized = await localdb.dict.local.get('swhdb_initialized')\n\tif (!swhdb_initialized) {\n\t\tconst data_dir = await localdb.dict.local.get('data_dir')\n\t\tif (data_dir) {\n\t\t\tglobal.data_dir = data_dir\n\t\t} else {\n\t\t\tconst data_dir = await get_data_dir()\n\t\t\tawait localdb.dict.local.set('data_dir', data_dir)\n\t\t\tglobal.data_dir = data_dir\n\t\t}\n\t\tconst db_dir = path.join(data_dir, 'swhdb')\n\t\tconst swhdb = new PotDb(db_dir)\n\t\tawait swhdb.log_db_dir()\n\t\tglobal.swhdb = swhdb\n\t\tawait localdb.dict.local.set('swhdb_initialized', true)\n\t}\n\treturn global.swhdb\n}", "CodeBleu_score": 43.97065825230953}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { lastRefresh, refreshInterval, url } = hosts;\n\tif (!lastRefresh) {\n\t\treturn true;\n\t}\n\tconst timeElapsed = new Date().getTime() - lastRefresh;\n\tconst isUrlValid = url && url.match(regex);\n\treturn timeElapsed >= refreshInterval * 60 * 1000 && isUrlValid;\n}", "CodeBleu_score": 31.537396930354532}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { lastRefresh, refreshInterval, url } = hosts;\n\tif (!lastRefresh || !refreshInterval || !url) return true;\n\tconst timeElapsed = new Date().getTime() - lastRefresh;\n\tconst refreshIntervalMs = refreshInterval * 60 * 60 * 1000;\n\treturn timeElapsed >= refreshIntervalMs;\n}", "CodeBleu_score": 31.327496191054095}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { url, refreshInterval } = hosts;\n\tconst { lastRefresh, lastUrl } = url;\n\n\tif (!url || !refreshInterval || !url.match) {\n\t\treturn false;\n\t}\n\n\tconst now = new Date().getTime();\n\tconst timeSinceLastRefresh = now - lastRefresh;\n\n\tif (!lastRefresh) {\n\t\treturn true;\n\t}\n\n\tif (!lastUrl || !lastUrl.match) {\n\t\treturn true;\n\t}\n\n\tif (timeSinceLastRefresh > refreshInterval) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 37.86274788030386}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\tconst callbackId = `${action} ${Date.now()} ${Math.random()}`;\n\treturn new Promise((resolve, reject) => {\n\t\tipcRenderer.once(callbackId, (event: any, response: any) => {\n\t\t\tif (response.success) {\n\t\t\t\tresolve(response.data);\n\t\t\t} else {\n\t\t\t\treject(response.error);\n\t\t\t}\n\t\t});\n\t\tipcRenderer.send('action', { action, params, callbackId });\n\t});\n}", "CodeBleu_score": 42.4562130700239}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\tconst callbackId = `${Date.now()}${Math.random()}`;\n\tconst promise = new Promise((resolve, reject) => {\n\t\tipcRenderer.once(callbackId, (event, response) => {\n\t\t\tif (response.success) {\n\t\t\t\tresolve(response.data);\n\t\t\t} else {\n\t\t\t\treject(new Error(response.error));\n\t\t\t}\n\t\t});\n\t});\n\tipcRenderer.send('action', { action, params, callbackId });\n\treturn promise;\n}", "CodeBleu_score": 40.85657403383287}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst callbackId = Date.now()\n\t\tconst listener = (event: any, response: any) => {\n\t\t\tif (response.callbackId === callbackId) {\n\t\t\t\tipcRenderer.removeListener(channel, listener)\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve(response.data)\n\t\t\t\t} else {\n\t\t\t\t\treject(response.error)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tipcRenderer.on(channel, listener)\n\t\tipcRenderer.send(channel, { action, callbackId, params })\n\t})\n}", "CodeBleu_score": 39.725485028731356}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t\tif (cm_editor) {\n\t\tif (is_new) {\n\t\t\tcm_editor.clearHistory()\n\t\t}\n\t\tif (hosts_id) {\n\t\t\tif (hosts_id == 'system') {\n\t\t\t\tconst hosts_content = await actions.getSystemHosts()\n\t\t\t} else {\n\t\t\t\tconst hosts_content = await actions.getHostsContent(hosts_id)\n\t\t\t}\n\t\t\tif (hosts_content) {\n\t\t\t\tcm_editor.setValue(hosts_content)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tsetTimeout(loadContent, 100)\n\t}\n}", "CodeBleu_score": 48.277903719555226}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (cm_editor === undefined) {\n\t\tsetTimeout(loadContent, 100);\n\t\treturn;\n\t}\n\tif (is_new) {\n\t\tcm_editor.clearHistory();\n\t}\n\tif (hosts_id === undefined) {\n\t\tlet hosts_content = await actions.getSystemHosts();\n\t\tcm_editor.setValue(hosts_content);\n\t} else {\n\t\tlet hosts_content = await actions.getHostsContent(hosts_id);\n\t\tcm_editor.setValue(hosts_content);\n\t}\n}", "CodeBleu_score": 44.974410675037234}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (cm_editor) {\n\t\tif (is_new) {\n\t\t\tcm_editor.clearHistory();\n\t\t}\n\t\tcm_editor.setValue(await (await fetch(hosts_id ? `${hosts_id}` : `${hosts_id ? hosts_id : 'system'}/content`)).text());\n\t} else {\n\t\tsetTimeout(loadContent, 100);\n\t}\n}", "CodeBleu_score": 40.849660590280465}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t// Check if the editor is in read-only mode or if the editor instance is unavailable\nif (cm_editor.getDoc().isReadOnly() || !cm_editor) {\n  return;\n}\n// Retrieve information about the clicked line\nconst { line } = cm_editor.lineInfo(n);\n// Ignore lines that are empty or whitespace\nif (/^\\s*$/.test(line)) {\n  return;\n}\n// Toggle a comment on the line\ncm_editor\n  .getDoc()\n  .replaceRange(\n    /^#/.test(line) ? line.replace(/^#/, '') : `#${line}`,\n    { line },\n    { line }\n  );\n}", "CodeBleu_score": 38.469727639481604}, {"code": "const onGutterClick = (n: number) =>{\n\tif (cm_editor.getOption('readOnly') || !cm_editor) {\nreturn;\n}\nconst info = cm_editor.lineInfo(n);\nif (!info) {\nreturn;\n}\nconst { line, text } = info;\nconst is_empty_or_whitespace = /^\\\\s*$/.test(text);\nif (is_empty_or_whitespace) {\nreturn;\n}\nconst is_comment = /^#/.test(text);\nconst new_line = is_comment ? text.replace(/^#/, '') : `# ${text}`;\ncm_editor.getDoc().replaceRange(new_line, { line, ch: 0 }, { line, ch: text.length });\n}", "CodeBleu_score": 45.179634622526976}, {"code": "const onGutterClick = (n: number) =>{\n\t// Check if the editor is in read-only mode or if the editor instance is unavailable\n  if (cm_editor.getOption('readOnly') || !cm_editor) {\n    return;\n  }\n\n// Retrieve information about the clicked line\n  const { line } = cm_editor.lineInfo(n);\n\n// Ignore lines that are empty or whitespace\n  if (/^\\s*$/.test(cm_editor.getDoc().getLine(line))) {\n    return;\n  }\n\n// Toggle a comment on the line\n  const comment = /^#/.test(cm_editor.getDoc().getLine(line));\n  cm_editor\n    .getDoc()\n    .replaceRange(\n      comment ? '' : '# ',\n      { line, ch: 0 },\n      { line, ch: cm_editor.getDoc().getLine(line).length },\n    );\n}", "CodeBleu_score": 41.598491767017066}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t//    qDebug() << \"parse\";\n    m_foundOptions.clear();\n    m_foundArgs.clear();\n    m_generalErrorMessage.clear();\n    err.enableMessageHeader = false;\n    err.enablePrefix = false;\n    // check for version\n    if (versionOption.contains(args)) {\n        printVersion();\n        return true;\n    }\n    // check for help\n    if (helpOption.contains(args)) {\n        m_foundOptions << helpOption;\n        printHelp(args);\n        return true;\n    }\n    // check for args\n    if (args.isEmpty()) {\n        return true;\n    }\n    // process the arguments\n    QStringList::const_iterator it = args.cbegin();\n    Node* node = &rootNode;\n    while (it != args.cend()) {\n        QString arg = *it;\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            // process option\n            if (!processOptions(args, it, node)) {\n                return false;\n            }\n        } else {\n            // process argument\n            if (!processArgs(args, it, node)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "CodeBleu_score": 44.24151203099096}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\tm_foundOptions.clear();\nm_foundArgs.clear();\nm_generalErrorMessage.clear();\nm_generalErrorMessage.reserve(100);\nerr.enableMessageHeader = false;\nif (args.isEmpty()) {\n    return true;\n}\n// check for version\nif (versionOption.contains(args)) {\n    printVersion();\n    return true;\n}\n// check for help\nif (helpOption.contains(args)) {\n    printHelp(args);\n    return true;\n}\n// check for --help\nif (helpOption.dashedNames().contains(args.first())) {\n    printHelp(args);\n    return true;\n}\n// initialize variables\nNode* actualNode = &rootNode;\nQStringList::const_iterator actualIt = args.cbegin();\n// process\nwhile (actualIt != args.cend()) {\n    // check for options\n    if (actualIt->startsWith(QLatin1String(\"-\"))) {\n        if (!processOptions(args, actualIt, actualNode)) {\n            return false;\n        }\n    } else {\n        if (!processArgs(args, actualIt, actualNode)) {\n            return false;\n        }\n    }\n    ++actualIt;\n}\n// check for required options\nfor (Node& n : rootNode.subNodes) {\n    auto requiredOptions = n.argument.requiredOptions();\n    if (!requiredOptions.isEmpty()) {\n        auto found = false;\n        for (CommandOption& opt : m_foundOptions) {\n            if (requiredOptions.contains(opt.name())) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            QString msg = QStringLiteral(\"The argument '%1' requires the \"\n                                        \"option '%2'.\")\n                              .arg(n.argument.name())\n                              .arg(requiredOptions.first());\n            err << msg;\n            return false;\n        }\n    }\n}\nreturn true;\n}", "CodeBleu_score": 44.21687340689612}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t//    qDebug() << \"CommandLineParser::parse(args)\";\n    // clear previous\n    m_foundOptions.clear();\n    m_foundArgs.clear();\n    m_generalErrorMessage.clear();\n    m_generalError = false;\n    // initialize variables\n    QStringList::const_iterator actualIt = args.cbegin();\n    Node* actualNode = &m_root;\n    // check for version\n    ok = processIfOptionIsVersion(args, actualIt, actualNode);\n    if (!ok) {\n        return ok;\n    }\n    // check for help\n    ok = processIfOptionIsHelp(args, actualIt, actualNode);\n    if (!ok) {\n        return ok;\n    }\n    // process other arguments\n    while (actualIt != args.cend()) {\n        if (actualNode->argument.name().isEmpty()) {\n            ok = false;\n            err << QStringLiteral(\"Unexpected argument '%1'.\")\n                     .arg(*actualIt);\n            return ok;\n        }\n        ok = processArgs(args, actualIt, actualNode);\n        if (!ok) {\n            return ok;\n        }\n    }\n    // check for required options\n    ok = checkRequiredOptions();\n    if (!ok) {\n        return ok;\n    }\n    return ok;\n}", "CodeBleu_score": 42.41589613442366}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t\n//    qDebug() << \"ButtonListView::updateComponents()\";\n    // Retrieve a list of button types from the configuration.\n    QList<CaptureTool::Type> listTypes = ConfigHandler().buttons();\n\n    // Retrieve an iterable list of button types from CaptureToolButton.\n    QList<CaptureToolButton::Type> listButtonTypes = CaptureToolButton::getIterableButtonTypes();\n\n    // For each item in the list, check if the corresponding button type is in the configuration list.\n    for (int i = 0; i < this->count(); ++i) {\n        QListWidgetItem* item = this->item(i);\n        CaptureToolButton::Type buttonType = listButtonTypes.at(i);\n        if (listTypes.contains(buttonType)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 80.64297301809742}, {"code": "void ButtonListView::updateComponents(){\n\t\tconst QList<CaptureTool::Type> listTypes = ConfigHandler().buttons();\n\tfor (QListWidgetItem* item : m_listButtons) {\n\t\tif (listTypes.contains(static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt()))) {\n\t\t\titem->setCheckState(Qt::Checked);\n\t\t} else {\n\t\t\titem->setCheckState(Qt::Unchecked);\n\t\t}\n\t}\n}", "CodeBleu_score": 37.597884784929086}, {"code": "void ButtonListView::updateComponents(){\n\t//    qDebug() << \"updateComponents\";\n    QList<CaptureTool::Type> listTypes = ConfigHandler().buttons;\n    for (int i = 0; i < this->count(); i++) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type type = static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt());\n        item->setCheckState(listTypes.contains(type) ? Qt::Checked : Qt::Unchecked);\n    }\n}", "CodeBleu_score": 54.82669605877295}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t\tQColor color = m_colorList.currentData();\n\tif (m_colorList.contains(color))\n\t\treturn;\n\tif (m_colorList.size() >= 17) {\n\t\tQMessageBox::critical(this, tr(\"Color Picker\"), tr(\"You can only have 17 presets.\"));\n\t\treturn;\n\t}\n\tm_colorList.append(color);\n\tm_config.setUserColors(m_colorList);\n\tupdatePresetList();\n}", "CodeBleu_score": 47.57117807168525}, {"code": "void ColorPickerEditor::addPreset(){\n\tQColor color = m_colorPicker->currentColor();\nif (m_colorList.contains(color)) {\nreturn;\n}\nif (m_colorList.size() == 17) {\nQMessageBox::critical(this, tr(\"Error\"), tr(\"You have reached the maximum number of presets\"));\nreturn;\n}\nm_colorList.append(color);\nm_config.setUserColors(m_colorList);\nm_presetList.addItem(color.name());\nm_presetList.setCurrentRow(m_presetList.count() - 1);\n}", "CodeBleu_score": 58.114660589829114}, {"code": "void ColorPickerEditor::addPreset(){\n\tQColor color = m_colorList.currentColor();\nif (m_colorList.contains(color))\nreturn;\nif (m_colorList.size() >= m_config.maxPresets()) {\nQMessageBox::critical(this, tr(\"Error\"), tr(\"The maximum number of presets has been reached\"));\nreturn;\n}\nm_colorList.addItem(color);\nm_config.setUserColors(m_colorList.colorList());\n}", "CodeBleu_score": 53.97217500344129}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\tm_vLayout = new QVBoxLayout(this);\nm_hLayout = new QHBoxLayout();\nm_vLayout->addLayout(m_hLayout);\nm_vLayout->setAlignment(Qt::AlignCenter);\nm_vLayout->setSpacing(QApplication::fontMetrics().lineSpacing());\ninitButtons();\ninitColorWheel();\nm_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing());\nupdateComponents();\nsetLayout(m_hLayout);\n}", "CodeBleu_score": 41.69456610299947}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\nm_vLayout = new QVBoxLayout();\nm_hLayout = new QHBoxLayout();\nm_vLayout->setSpacing(QApplication::fontMetrics().lineSpacing());\nm_vLayout->setAlignment(Qt::AlignCenter);\nm_hLayout->setSpacing(QApplication::fontMetrics().lineSpacing());\nm_hLayout->setAlignment(Qt::AlignCenter);\n\nsetSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\nsetLayout(m_hLayout);\ninitButtons();\ninitColorWheel();\nm_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing());\nm_hLayout->addItem(m_vLayout);\nupdateComponents();\n}", "CodeBleu_score": 54.144776671252494}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\n}", "CodeBleu_score": 8.609116303676233}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t\tif (!resolveAnyConfigErrors()) {\n\t\treturn;\n\t}\n\tQPixmap capture = grabEntireDesktop();\n\tQRect selection = req.initialSelection();\n\tif (!selection.isNull()) {\n\t\tcapture = capture.copy(selection);\n\t}\n\texportCapture(capture, selection, req);\n}", "CodeBleu_score": 46.873361023872505}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t\n}", "CodeBleu_score": 2.8576486640386958}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t#if QT_VERSION >= QT_VERSION_CHECK(5, 13, 0)\n    if (!QGuiApplication::platformName().compare(QStringLiteral(\"wayland\"),\n                                                    Qt::CaseInsensitive)) {\n        QGuiApplication::primaryScreen()->grabWindow(0).save(\n          req.path(), \"png\");\n        return;\n    }\n#endif\n    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QPixmap capture;\n    QRect selection;\n    if (req.initialSelection().isNull()) {\n        capture = QGuiApplication::primaryScreen()->grabWindow(0);\n    } else {\n        capture = QGuiApplication::primaryScreen()->grabWindow(\n          0, req.initialSelection());\n    }\n\n    if (capture.isNull()) {\n        emit captureFailed();\n        return;\n    }\n\n    exportCapture(capture, selection, req);\n}", "CodeBleu_score": 49.77223030074114}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\tQ_UNUSED(capture)\nQDBusConnection sessionBus = QDBusConnection::sessionBus();\ncheckDBusConnection(sessionBus);\nQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\nm.setArguments(QVariantList() << QVariant(QPixmap(capture)));\ncall(m);\n}", "CodeBleu_score": 41.36891736109551}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\tif (instance) {\ninstance->attachScreenshotToClipboard(capture);\n} else {\nQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\nm << capture;\ncall(m);\n}\n}", "CodeBleu_score": 43.1806905488941}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\tQ_D(FlameshotDaemon);\nif (d->instance) {\nd->instance->attachScreenshotToClipboard(capture);\n} else {\nQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\nm << capture;\ncall(m);\n}\n}", "CodeBleu_score": 44.23557576592033}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#ifdef Q_OS_LINUX\n  if (!notification.isEmpty()) {\n    qDebug() << \"FlameshotDaemon::attachTextToClipboard\" << notification;\n    qDebug() << \"FlameshotDaemon::attachTextToClipboard\" << \"clipboard->setText\" << text;\n  }\n#endif\n  QClipboard* clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text, QClipboard::Clipboard);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 56.59005644750283}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\tif (!text.isEmpty()) {\nif (!notification.isEmpty()) {\nqDebug() << notification;\n}\nQApplication::clipboard()->blockSignals(true);\nQApplication::clipboard()->setText(text);\nQApplication::clipboard()->blockSignals(false);\n}\n}", "CodeBleu_score": 49.90131467937245}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#ifdef Q_OS_LINUX\n  if (!notification.isEmpty()) {\n    qInfo() << notification;\n  }\n  QClipboard* clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text);\n  clipboard->blockSignals(false);\n#else\n  QClipboard* clipboard = QApplication::clipboard();\n  clipboard->setText(text);\n#endif\n}", "CodeBleu_score": 69.99497799526291}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tQRectF selectionGeometry = context.selectionGeometry();\n\tif (!selectionGeometry.isEmpty()) {\n\t\tif (context.request.hasTask(Task::Type::Pin)) {\n\t\t\tQPointF widgetOffset = context.widgetOffset();\n\t\t\tQRectF adjustedSelectionGeometry(selectionGeometry);\n\t\t\tadjustedSelectionGeometry.translate(widgetOffset.x(), widgetOffset.y());\n\t\t\tcontext.selectionGeometry = adjustedSelectionGeometry;\n\t\t\tcontext.request.addTask(Task::Type::Pin);\n\t\t}\n\t\temit requestCapture(context.request);\n\t}\n\temit requestClose();\n}", "CodeBleu_score": 49.388225302595146}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tQPointF captureOffset = context.request.geometry.topLeft();\n\tcontext.request.geometry = QRect(QPoint(0, 0), context.request.geometry.size());\n\tif (context.request.tasks.contains(PIN_TASK_NAME)) {\n\t\tQRectF selection = context.request.geometry;\n\t\tQPointF offset = context.widget->mapToGlobal(context.widget->rect().topLeft());\n\t\tselection.moveTopLeft(offset);\n\t\tcontext.request.tasks[PIN_TASK_NAME].data.value<QRectF>() = selection;\n\t}\n\tcontext.request.addTask(new CloseGuiTask());\n}", "CodeBleu_score": 43.57707013384524}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tif (context.request.tasks.size() == 0) {\n\t\t// No tasks, so just close the GUI.\n\t\temit context.request.closeGui();\n\t\treturn;\n\t}\n\n\t// If the last task is a PIN task, adjust the selection geometry based on the widget offset.\n\tif (context.request.tasks.back().type == TaskType::PIN) {\n\t\tauto& pin = dynamic_cast<PinTask&>(context.request.tasks.back());\n\t\tpin.geometry.moveTopLeft(QPoint(pin.widgetOffset.x(), pin.widgetOffset.y()));\n\t}\n\n\temit context.request.addTask(context.request.tasks.back());\n\temit context.request.closeGui();\n}", "CodeBleu_score": 46.17329119301908}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tint initialLength = m_appList.length();\nQDirIterator it(dir.absolutePath(), QStringList() << QLatin1String(\"*.desktop\"),\n                QDir::Files, QDirIterator::Subdirectories);\nwhile (it.hasNext()) {\nDesktopAppData appData;\nbool ok = false;\nappData = parseDesktopFile(it.next(), ok);\nif (ok) {\nm_appList.append(appData);\n}\n}\nreturn m_appList.length() - initialLength;\n}", "CodeBleu_score": 56.822641299455825}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tint count = 0;\nQDirIterator it(dir.absolutePath(), QStringList() << QStringLiteral(\"*.desktop\"),\n               QDir::Files, QDirIterator::Subdirectories);\nwhile (it.hasNext()) {\nDesktopAppData app = parseDesktopFile(it.next(), m_ok);\nif (m_ok) {\nm_appList.append(app);\n++count;\n}\n}\nreturn count;\n}", "CodeBleu_score": 42.568497738025044}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tint newEntries = 0;\nQDirIterator it(dir, QStringList() << QStringLiteral(\"*.desktop\"),\n                QDir::Files, QDirIterator::Subdirectories);\nwhile (it.hasNext()) {\nDesktopAppData appData = parseDesktopFile(it.next(), ok);\nif (ok) {\nm_appList.append(appData);\nnewEntries++;\n}\n}\nreturn newEntries;\n}", "CodeBleu_score": 42.284802713557724}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> result;\nfor (const auto& app : appList) {\nfor (const auto& category : app.categories) {\nif (categories.contains(category)) {\nresult[category].append(app);\n}\n}\n}\nreturn result;\n}", "CodeBleu_score": 62.55850942971926}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> res;\nfor (const auto& app : apps) {\nfor (const auto& cat : app.categories) {\nif (categories.contains(cat)) {\nres[cat].append(app);\n}\n}\n}\nreturn res;\n}", "CodeBleu_score": 65.8830272307417}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> appsByCategory;\nfor (const auto& app : m_apps) {\nif (app.categories.contains(categories)) {\nappsByCategory[app.categories[0]].append(app);\n}\n}\nreturn appsByCategory;\n}", "CodeBleu_score": 49.08845132710269}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t#if defined(Q_OS_WIN)\n    QString completePath = FileNameHandler().properScreenshotPath(path);\n#else\n    QString completePath = FileNameHandler().properScreenshotPath(path);\n#endif\n    QFileInfo file(completePath);\n    if (file.suffix().toLower() == \"jpg\") {\n        QFile file(completePath);\n        if (file.open(QFile::WriteOnly)) {\n            QByteArray jpegData;\n            QBuffer buffer(&jpegData);\n            buffer.open(QIODevice::WriteOnly);\n            capture.save(&buffer, \"JPG\", ConfigHandler().jpegQuality());\n            file.write(jpegData);\n            buffer.close();\n            file.close();\n            AbstractLogger::info()\n                << messagePrefix << completePath << \" saved successfully\";\n            return true;\n        } else {\n            AbstractLogger::error()\n                << messagePrefix << completePath << \" could not be saved\"\n                << file.errorString();\n            return false;\n        }\n    } else {\n        QFile file(completePath);\n        if (file.open(QFile::WriteOnly)) {\n            capture.save(&file, file.suffix().toLower().toLatin1());\n            file.close();\n            AbstractLogger::info()\n                << messagePrefix << completePath << \" saved successfully\";\n            return true;\n        } else {\n            AbstractLogger::error()\n                << messagePrefix << completePath << \" could not be saved\"\n                << file.errorString();\n            return false;\n        }\n    }\n}", "CodeBleu_score": 45.23728524397189}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t#ifdef __linux__\n    // Make sure the file path exists\n    QDir().mkpath(QFileInfo(path).absolutePath());\n#endif\n\n    // Make sure the file extension is valid\n    if (!FileNameHandler().isValidExtension(path)) {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << \"File extension for \" << path << \" is not valid\";\n        return false;\n    }\n\n    // Determine the save format\n    QFileInfo fileInfo(path);\n    QByteArray format;\n    if (fileInfo.suffix().toLower() == \"jpg\") {\n        format = \"jpeg\";\n    } else {\n        format = fileInfo.suffix().toLower().toUtf8();\n    }\n\n    // Save the image\n    QFile file(path);\n    if (!file.open(QIODevice::WriteOnly)) {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << \"Could not open file \" << path << \" for writing\";\n        return false;\n    }\n    if (!capture.save(&file, format.constData(), ConfigHandler().jpegQuality)) {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << \"Could not save file \" << path;\n        return false;\n    }\n\n    // Construct the save message\n    QString saveMessage = messagePrefix;\n    saveMessage += \" to \";\n    saveMessage += path;\n    if (file.error() == QFile::NoError) {\n        AbstractLogger::info(AbstractLogger::Stdout) << saveMessage;\n        return true;\n    } else {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << \"Could not save \" << saveMessage << \": \" << file.errorString();\n        return false;\n    }\n}", "CodeBleu_score": 46.84814574273164}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\tQFileInfo file(FileNameHandler().properScreenshotPath(path));\nif (file.error() != QFileInfo::NoError) {\nAbstractLogger::error() << \"Could not save file: \" << file.errorString();\nreturn false;\n}\n\nQFile fileHandle(file.absoluteFilePath());\nif (!fileHandle.open(QIODevice::WriteOnly)) {\nAbstractLogger::error() << \"Could not open file: \" << fileHandle.errorString();\nreturn false;\n}\n\nconst auto& format = file.suffix().toLower();\nif (format == \"jpg\" || format == \"jpeg\") {\nconst auto& quality = ConfigHandler().jpegQuality();\nif (!capture.save(&fileHandle, \"JPG\", quality)) {\nAbstractLogger::error() << \"Could not save file: \" << fileHandle.errorString();\nreturn false;\n}\n} else {\nif (!capture.save(&fileHandle, format.toLocal8Bit().constData())) {\nAbstractLogger::error() << \"Could not save file: \" << fileHandle.errorString();\nreturn false;\n}\n}\n\nconst auto& saveMessage = messagePrefix + \" saved to \" + file.absoluteFilePath();\nif (fileHandle.error() == QFile::NoError) {\nAbstractLogger::info() << saveMessage;\n} else {\nAbstractLogger::error() << \"Could not save file: \" << fileHandle.errorString();\n}\nreturn fileHandle.error() == QFile::NoError;\n}", "CodeBleu_score": 45.27694564891393}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->set_load_order(load_order);\n\tthis->active.clear();\n\tfor (const std::string &modpack_id : this->load_order) {\n\t\tauto modpack = this->available.at(modpack_id);\n\t\tthis->active.emplace(modpack_id, modpack);\n\t\tlog::log(\"Activated modpack \" + modpack_id + \" (\" + modpack.name + \")\", LogLevel::Info);\n\t}\n}", "CodeBleu_score": 65.25902564667958}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (const std::string &modpack_id : load_order) {\n\t\tif (this->available.contains(modpack_id)) {\n\t\t\tthis->active.emplace(modpack_id, this->available.at(modpack_id));\n\t\t\tlog::log(\"Modpack activated: \" + modpack_id);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.16603974875841}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (const std::string &modpack_id : load_order) {\n\t\tif (this->available.find(modpack_id) != this->available.end()) {\n\t\t\tthis->active.emplace(modpack_id, this->available.at(modpack_id));\n\t\t\tlog::log(log::info, \"Modpack activated: \" + modpack_id);\n\t\t} else {\n\t\t\tlog::log(log::warning, \"Modpack not found: \" + modpack_id);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.941152777297056}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tthis->requested.clear();\n\tfor (const std::string &modpack : load_order) {\n\t\tthis->requested.insert(modpack);\n\t}\n\tthis->check_load_order();\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 15.460155376085282}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested;\n\tfor (std::string modpack_name : load_order) {\n\t\tif (modpack_name.empty()) {\n\t\t\tthrow std::runtime_error(\"Empty modpack name in load order\");\n\t\t}\n\t\tif (!this->available.contains(modpack_name)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack_name + \" is not available\");\n\t\t}\n\t\trequested.insert(modpack_name);\n\t}\n\tfor (std::string modpack_name : load_order) {\n\t\tif (!this->available.at(modpack_name).satisfied_dependencies(requested)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack_name + \" has unsatisfied dependencies\");\n\t\t}\n\t\tif (!this->available.at(modpack_name).satisfied_conflicts(requested)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack_name + \" conflicts with another modpack\");\n\t\t}\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 42.47947159971706}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested;\n\tfor(std::string modpack : load_order) {\n\t\tif(modpacks.find(modpack) == modpacks.end()) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" is not available\");\n\t\t}\n\t\trequested.insert(modpack);\n\t}\n\tfor(std::string modpack : requested) {\n\t\tif(modpacks[modpack].depends_on.size() > 0) {\n\t\t\tfor(std::string dependency : modpacks[modpack].depends_on) {\n\t\t\t\tif(requested.find(dependency) == requested.end()) {\n\t\t\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" depends on \" + dependency + \" which is not in the load order\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(std::string modpack : requested) {\n\t\tfor(std::string conflict : modpacks[modpack].conflicts_with) {\n\t\t\tif(requested.find(conflict) != requested.end()) {\n\t\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" conflicts with \" + conflict);\n\t\t\t}\n\t\t}\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 46.8528749464478}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (const auto &sound : sound_files) {\n\t\tauto key = std::make_tuple(sound.category, sound.id);\n\t\tif (this->resources.find(key) == std::end(this->resources)) {\n\t\t\tthis->resources.insert(std::make_pair(key, std::make_unique<Resource>(sound.path)));\n\t\t}\n\t}\n}", "CodeBleu_score": 54.27077010998409}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (const resource_def &sound_file : sound_files) {\n\t\tstd::string key = sound_file.category + \"_\" + std::to_string(sound_file.id);\n\t\tif (this->resources.find(key) == this->resources.end()) {\n\t\t\tthis->resources.insert(std::make_pair(key, std::make_shared<Resource>(sound_file)));\n\t\t}\n\t}\n}", "CodeBleu_score": 48.265698364369015}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (const auto &sound_file : sound_files) {\n\t\tauto key = std::make_tuple(sound_file.category, sound_file.id);\n\t\tif (this->resources.find(key) == this->resources.end()) {\n\t\t\tthis->resources.insert(std::make_pair(key, std::make_shared<Resource>(sound_file)));\n\t\t}\n\t}\n}", "CodeBleu_score": 57.690417368659354}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!audio_manager_available) {\n\t\tthrow std::runtime_error(\"Audio manager is not available\");\n\t}\n\tauto resource = resources.find(std::make_tuple(category, id));\n\tif (resource == resources.end()) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist\");\n\t}\n\treturn Sound(audio_manager, resource->second);\n}", "CodeBleu_score": 38.382376548692434}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (audio_manager_ == nullptr) {\n\t\tthrow std::runtime_error(\"Audio manager is not initialized.\");\n\t}\n\tauto resource_key = std::make_tuple(category, id);\n\tauto resource_iter = resources_.find(resource_key);\n\tif (resource_iter == resources_.end()) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist.\");\n\t}\n\tauto sound_impl = std::make_shared<SoundImpl>(audio_manager_, resource_iter->second);\n\treturn Sound(audio_manager_, sound_impl);\n}", "CodeBleu_score": 45.57200808886991}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!is_initialized()) {\n\t\tthrow std::runtime_error(\"Audio manager not initialized\");\n\t}\n\n\tauto resource_key = std::make_tuple(category, id);\n\tauto resource_iter = resources.find(resource_key);\n\tif (resource_iter == resources.end()) {\n\t\tthrow std::runtime_error(\"Sound resource not found\");\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(resource_iter->second);\n\treturn Sound(audio_manager, sound_impl);\n}", "CodeBleu_score": 47.589937484379575}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\t// TODO: Check if the sound is already playing\n\tauto category = sound->get_category();\n\tauto it = playing_sounds.find(category);\n\tif (it != playing_sounds.end()) {\n\t\tit->second.push_back(sound);\n\t} else {\n\t\tstd::vector<std::shared_ptr<SoundImpl>> sounds;\n\t\tsounds.push_back(sound);\n\t\tplaying_sounds.insert(std::make_pair(category, sounds));\n\t}\n}", "CodeBleu_score": 65.43465494948933}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto &playing_sounds = this->playing_sounds[category];\n\tauto it = playing_sounds.find(sound);\n\tif (it == playing_sounds.end()) {\n\t\tplaying_sounds.push_back(sound);\n\t}\n}", "CodeBleu_score": 70.37772244814926}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto it = playing_sounds.find(category);\n\tif (it != playing_sounds.end()) {\n\t\tauto &sounds = it->second;\n\t\tsounds.push_back(sound);\n\t} else {\n\t\tstd::vector<std::shared_ptr<SoundImpl>> sounds;\n\t\tsounds.push_back(sound);\n\t\tplaying_sounds[category] = sounds;\n\t}\n}", "CodeBleu_score": 65.5041501356586}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tstd::unique_lock<std::mutex> lock(mutex);\n\tauto now = std::chrono::steady_clock::now();\n\tauto elapsed = now - last_check;\n\tlast_check = now;\n\tif (state == ClockState::RUNNING) {\n\t\tif (elapsed < min_tick_time) {\n\t\t\tstd::this_thread::sleep_for(min_tick_time - elapsed);\n\t\t}\n\t\telse if (elapsed > max_tick_time) {\n\t\t\telapsed = max_tick_time;\n\t\t}\n\t\tsimulated_time += elapsed * speed;\n\t\treal_time += std::chrono::duration_cast<std::chrono::milliseconds>(elapsed).count();\n\t}\n}", "CodeBleu_score": 46.20962103499854}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock<std::mutex> lk(mtx);\n\tauto now = std::chrono::steady_clock::now();\n\tauto elapsed = now - last_check;\n\tauto ms = std::chrono::duration_cast<std::chrono::milliseconds>(elapsed).count();\n\tif (ms < 1) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\tif (ms > max_tick_ms) {\n\t\tms = max_tick_ms;\n\t}\n\tlast_check = now;\n\tsim_time += ms * speed;\n\treal_time += ms;\n}", "CodeBleu_score": 35.944284082794596}, {"code": "void Clock::update_time(){\n\t\tif (state == RUNNING) {\n\t\tstd::unique_lock<std::mutex> lock(mutex);\n\t\tauto now = simclock_t::now();\n\t\tauto elapsed = now - last_check;\n\t\tif (elapsed < tick_time) {\n\t\t\tstd::this_thread::sleep_for(tick_time - elapsed);\n\t\t}\n\t\tauto delta = std::chrono::duration_cast<std::chrono::milliseconds>(now - start_time);\n\t\tauto real_delta = std::chrono::duration_cast<std::chrono::milliseconds>(now - real_start_time);\n\t\tauto elapsed_ms = std::chrono::duration_cast<std::chrono::milliseconds>(elapsed);\n\t\tif (elapsed_ms > tick_time) {\n\t\t\tdelta = std::chrono::milliseconds(tick_time.count * speed);\n\t\t\treal_delta = std::chrono::milliseconds(tick_time.count * speed);\n\t\t} else {\n\t\t\tdelta = elapsed;\n\t\t\treal_delta = elapsed;\n\t\t}\n\t\tlast_check = now;\n\t\ttime += delta;\n\t\treal_time += real_delta;\n\t}\n}", "CodeBleu_score": 48.46108550913062}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\t// Get the current scene position\n\tEigen::Vector3f current_scene_pos = this->get_scene_pos();\n\t// Calculate the vertical distance between the current and target scene positions\n\tfloat y_delta = current_scene_pos.y() - scene_pos.y();\n\t// Calculate the horizontal distance between the current and target scene positions\n\tfloat xz_distance = sqrt(pow(current_scene_pos.x() - scene_pos.x(), 2) + pow(current_scene_pos.z() - scene_pos.z(), 2));\n\t// Calculate the horizontal distance the camera needs to move\n\tfloat x_delta = (xz_distance / 2) * (1 - cos(M_PI / 4));\n\t// Calculate the vertical distance the camera needs to move\n\tfloat z_delta = (xz_distance / 2) * (1 - sin(M_PI / 4));\n\t// Calculate the new camera position\n\tEigen::Vector3f new_pos = current_scene_pos + Eigen::Vector3f(x_delta, y_delta, z_delta);\n\t// Move the camera to the new position\n\tthis->move_to(new_pos);\n}", "CodeBleu_score": 36.21284668458243}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\t// Compute the vertical distance between the current and target scene positions\n\tfloat y_delta = scene_pos.y() - this->scene_pos.y();\n\t// Compute the horizontal distance between the current and target scene positions\n\tfloat xz_distance = sqrt(pow(scene_pos.x() - this->scene_pos.x(), 2) + pow(scene_pos.z() - this->scene_pos.z(), 2));\n\t// Compute the horizontal distance between the current and target scene positions\n\tfloat x_delta = xz_distance * sin(y_delta);\n\t// Compute the horizontal distance between the current and target scene positions\n\tfloat z_delta = xz_distance * cos(y_delta);\n\t// Compute the new camera position\n\tEigen::Vector3f new_pos = this->scene_pos + Eigen::Vector3f(x_delta, 0.0f, z_delta);\n\t// Move the camera to the new position\n\tthis->move_to(new_pos);\n}", "CodeBleu_score": 40.726931407836354}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\t// Get the current scene position\n\tEigen::Vector3f current_scene_pos = get_scene_pos();\n\n\t// Compute the vertical distance between the current and target scene positions\n\tfloat y_delta = scene_pos.y() - current_scene_pos.y();\n\n\t// Compute the horizontal distance between the current and target scene positions\n\tfloat xz_distance = sqrt(pow(scene_pos.x() - current_scene_pos.x(), 2) + pow(scene_pos.z() - current_scene_pos.z(), 2));\n\n\t// Compute the horizontal angle between the current and target scene positions\n\tfloat x_angle = atan(scene_pos.x() - current_scene_pos.x() / scene_pos.z() - current_scene_pos.z());\n\n\t// Compute the new camera position\n\tEigen::Vector3f new_pos = Eigen::Vector3f(scene_pos.x() - xz_distance * sin(x_angle), current_scene_pos.y() + y_delta, scene_pos.z() - xz_distance * cos(x_angle));\n\n\t// Move the camera to the new position\n\tmove_to(new_pos);\n}", "CodeBleu_score": 38.05259923834994}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url))\n\t\treturn DragTarget::ProjectFile;\n\telse if (url.isLocalFile()) {\n\t\tif (muse::audio::synth::isSoundFont(url.toLocalFile()))\n\t\t\treturn DragTarget::SoundFont;\n\t\telse if (extensionInstaller()->isFileSupported(url.toLocalFile()))\n\t\t\treturn DragTarget::Extension;\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 53.850789893631166}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\tif (url.isLocalFile()) {\n\t\tif (muse::audio::synth::isSoundFont(url.toLocalFile())) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t}\n\t\tif (extensionInstaller()->isFileSupported(url.toLocalFile())) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 62.02548031761073}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\tif (url.isLocalFile()) {\n\t\tif (muse::audio::synth::isSoundFont(url.toLocalFile())) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t}\n\t\tif (extensionInstaller()->isFileSupported(url.toLocalFile())) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 62.02548031761073}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tauto configuration = muse::config::Configuration::instance();\n\tauto sessionProjectsPaths = configuration->sessionProjectsPaths();\n\tif (!sessionProjectsPaths.empty()) {\n\t\tauto it = std::remove(sessionProjectsPaths.begin(), sessionProjectsPaths.end(), projectPath);\n\t\tif (it != sessionProjectsPaths.end()) {\n\t\t\tconfiguration->setSessionProjectsPaths(sessionProjectsPaths);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.69781725188412}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tif (projectPath.empty()) {\n\t\treturn;\n\t}\n\n\tauto configuration = muse::io::Configuration::getConfiguration();\n\tauto sessionProjectsPaths = configuration->getSessionProjectsPaths();\n\tif (!sessionProjectsPaths.empty()) {\n\t\tauto it = std::remove(sessionProjectsPaths.begin(), sessionProjectsPaths.end(), projectPath);\n\t\tif (it != sessionProjectsPaths.end()) {\n\t\t\tsessionProjectsPaths.erase(it, sessionProjectsPaths.end());\n\t\t\tconfiguration->setSessionProjectsPaths(sessionProjectsPaths);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.518512067344886}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t", "CodeBleu_score": 5.315324362744822}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\nThemeList themes = allThemes();\nThemeList::const_iterator it;\nfor (it = themes.constBegin(); it != themes.constEnd(); ++it) {\nconst QString &code = it.value().code();\nif (code == QLatin1String(\"org.kde.breeze.desktop\") || code == QLatin1String(\"org.kde.breezedark.desktop\")) {\nQVariantMap themeMap;\nthemeMap[\"name\"] = it.value().name();\nthemeMap[\"code\"] = it.value().code();\nthemeMap[\"path\"] = it.value().path();\nresult.append(themeMap);\n}\n}\nreturn result;\n}", "CodeBleu_score": 45.37272662213194}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const Theme &theme : allThemes()) {\nif (theme.code() == \"org.kde.breeze.desktop\" || theme.code() == \"org.kde.breezedark.desktop\") {\nresult.append(theme.toMap());\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 56.57849362141438}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const Theme &theme : allThemes()) {\nif (theme.code() == \"org.qt-project.qt5.highcontrast.white\" ||\ntheme.code() == \"org.qt-project.qt5.highcontrast.black\") {\nresult.append(theme.toMap());\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 56.70209769019194}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList result;\n\nauto childPages = [this, &result](QStandardItem* item) {\nfor (int i = 0; i < item->rowCount(); ++i) {\nauto child = item->child(i);\nauto page = QVariantMap{{\"id\", child->data(Qt::UserRole).toString()}, {\"path\", child->path()}};\nresult.append(page);\nchildPages(child);\n}\n};\n\nchildPages(rootItem);\nreturn result;\n}", "CodeBleu_score": 39.84983104863266}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList pages;\n\nauto childPages = [&pages](const QStandardItem *item) {\nfor (int i = 0; i < item->rowCount(); ++i) {\nauto child = item->child(i);\nauto page = QVariantMap();\npage[\"id\"] = child->data(Qt::UserRole);\npage[\"path\"] = child->data(Qt::UserRole + 1);\npages.append(page);\nchildPages(child);\n}\n};\n\nchildPages(rootItem);\nreturn pages;\n}", "CodeBleu_score": 45.9997540288191}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t\treturn childPages(rootItem());\n}", "CodeBleu_score": 3.3672019248617855}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList items;\n\tRecentFilesController* recentFilesController = RecentFilesController::instance();\n\tconst RecentFilesList& recentFiles = recentFilesController->recentFilesList();\n\tfor (int i = 0; i < recentFiles.size(); ++i) {\n\t\tconst RecentFile& file = recentFiles[i];\n\t\tMenuItem* item = new MenuItem;\n\t\titem->setCode(ActionCode::FileOpen);\n\t\titem->setArgs(file.path.toQUrl(), file.displayName);\n\t\titem->setId(makeId(ActionCode::FileOpen, i));\n\t\titem->setEnabled(true);\n\t\titem->setSelectable(true);\n\t\tif (projectConfiguration()->isCloudProject(file.path)) {\n\t\t\titem->setIcon(Icon(FileIconProvider::cloudFileIcon()));\n\t\t}\n\t\titems.append(item);\n\t}\n\treturn items;\n}", "CodeBleu_score": 48.53573487566566}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\n}", "CodeBleu_score": 1.2908576285607285}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentScoresItems;\n\trecentFilesController()->updateRecentFiles();\n\tconst RecentFilesList& recentFiles = recentFilesController()->recentFilesList();\n\tfor (int i = 0; i < recentFiles.size(); ++i) {\n\t\tconst RecentFile& file = recentFiles.at(i);\n\t\tMenuItem* item = new MenuItem;\n\t\titem->setCode(ActionCode::FileOpen);\n\t\titem->setArgs(file.path.toQUrl(), file.displayName);\n\t\titem->setId(makeId(item->code(), i));\n\t\titem->setEnabled(true);\n\t\titem->setSelectable(true);\n\t\tif (projectConfiguration()->isCloudProject()) {\n\t\t\titem->setIcon(appIcon(\"cloud\"));\n\t\t}\n\t\trecentScoresItems.append(item);\n\t}\n\treturn recentScoresItems;\n}", "CodeBleu_score": 45.22432543326724}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t//    qDebug() << \"NavigableAppMenuModel::openMenu(\" << menuId << \", \" << byHover << \")\";\n\n    if (!isNavigationStarted()) {\n        return;\n    }\n\n    if (isMenuOpened()) {\n        return;\n    }\n\n    if (!byHover) {\n        saveMUNavigationSystemState();\n    }\n\n    setHighlightedMenuId(menuId);\n\n    emit menuOpened(menuId, byHover);\n}", "CodeBleu_score": 36.34331973388615}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tif (!isNavigationStarted()) {\n    return;\n}\n\nif (menuId == m_openedMenuId) {\n    return;\n}\n\nif (!byHover && isMenuOpened()) {\n    saveMUNavigationSystemState();\n} else if (byHover && !isMenuOpened()) {\n    restoreMUNavigationSystemState();\n}\n\nif (byHover) {\n    setHighlightedMenuId(menuId);\n} else {\n    setHighlightedMenuId(\"\");\n}\n\nm_openedMenuId = menuId;\nemit openedMenuIdChanged(m_openedMenuId);\nemit requestOpenMenu(m_openedMenuId, byHover);\n}", "CodeBleu_score": 61.187456963702594}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tif (!isNavigationStarted()) {\nreturn;\n}\n\nif (menuId == m_openedMenuId) {\nreturn;\n}\n\nif (m_openedMenuId.isEmpty()) {\nsaveMUNavigationSystemState();\n}\nelse {\nrestoreMUNavigationSystemState();\n}\n\nm_openedMenuId = menuId;\nemit openedMenuIdChanged(m_openedMenuId);\nemit menuOpened(menuId, byHover);\n}", "CodeBleu_score": 42.679005812591235}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\tif (!notation()) {\n\t\treturn QVariant();\n\t}\n\n\tViewMode currentViewMode = notation()->viewMode();\n\n\tfor (const ViewMode& viewMode : ALL_MODE_MAP.keys()) {\n\t\tif (viewMode == currentViewMode) {\n\t\t\tActionCode code = ALL_MODE_MAP[viewMode];\n\t\t\tUiAction action = actionsRegister()->action(code);\n\n\t\t\tif (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM) {\n\t\t\t\taction->setTitle(muse::TranslatableString(\"Continuous view\"));\n\t\t\t}\n\n\t\t\treturn QVariant::fromValue(action);\n\t\t}\n\t}\n\n\treturn QVariant();\n}", "CodeBleu_score": 56.17873381213032}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\tif (!notation()) {\n\t\treturn QVariant();\n\t}\n\n\tViewMode viewMode = notation()->viewMode();\n\tQString title = QString::fromStdString(viewMode.toString());\n\n\tif (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM) {\n\t\ttitle = \"Continuous view\";\n\t}\n\n\tfor (const auto& item: m_availableViewModeList) {\n\t\tif (item->id() == title) {\n\t\t\treturn QVariant::fromValue(item);\n\t\t}\n\t}\n\n\treturn QVariant();\n}", "CodeBleu_score": 56.25598400903347}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\n}", "CodeBleu_score": 3.5139663558225225}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t", "CodeBleu_score": 6.212095447328747}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t", "CodeBleu_score": 6.212095447328747}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t", "CodeBleu_score": 6.212095447328747}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t", "CodeBleu_score": 4.620599216203722}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t#ifdef WIDECHARS_ARE_UCS4\n    uint8_t* outputbuf = nullptr;\n    size_t outlen = 0;\n    widechar inbuf[MAXSTRING];\n    widechar transbuf[MAXSTRING];\n    int inlen = 0;\n    int translen = 0;\n#endif\n    std::vector<std::string> lines;\n    std::string ret;\n\n    lines = split_string(txt, MAXSTRING);\n\n    if (lines.size() == 0) {\n        return std::string();\n    }\n\n#ifdef WIDECHARS_ARE_UCS4\n    inlen = _lou_extParseChars(lines.front().c_str(), inbuf);\n\n    translen = MAXSTRING;\n    lou_translateString(\n        table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n    outputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n\n    if (!outputbuf) {\n        return std::string();\n    }\n\n    ret = std::string(outputbuf, outputbuf + outlen);\n    free(outputbuf);\n#else\n    ret = braille_translate(table_name, lines.front());\n#endif\n\n    for (size_t i = 1; i < lines.size(); i++) {\n#ifdef WIDECHARS_ARE_UCS4\n        inlen = _lou_extParseChars(lines[i].c_str(), inbuf);\n\n        translen = MAXSTRING;\n        lou_translateString(\n            table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n        outputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n\n        if (!outputbuf) {\n            return std::string();\n        }\n\n        ret += \" \";\n        ret += std::string(outputbuf, outputbuf + outlen);\n        free(outputbuf);\n#else\n        ret += \" \";\n        ret += braille_translate(table_name, lines[i]);\n#endif\n    }\n\n    return ret;\n}", "CodeBleu_score": 55.47560618046169}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::vector<std::string> lines;\n\tstd::string output;\n\n\tlines = split_string(txt, 256);\n\n\tif (lines.size() == 0) {\n\t\treturn std::string();\n\t}\n\n\toutput = braille_translate(table_name, lines[0]);\n\n\tfor (int i = 1; i < lines.size(); i++) {\n\t\toutput += \" \" + braille_translate(table_name, lines[i]);\n\t}\n\n\treturn output;\n}", "CodeBleu_score": 65.07948837793181}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t", "CodeBleu_score": 5.501182108488154}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\t// Initialize a temporary ProxyEntity to check the validity and type of the JSON.\n\tProxyEntity tempEntity;\n\t// If the JSON is valid, create a new ProxyEntity of the determined type.\n\tif (tempEntity.Load(jsonPath)) {\n\t\t// Check the version of the entity and, if valid, set the load control flag, assign the JSON path, and load the entity.\n\t\tif (tempEntity.GetVersion() == PROXY_ENTITY_VERSION) {\n\t\t\tauto entity = std::make_shared<ProxyEntity>();\n\t\t\tentity->SetLoadControl(true);\n\t\t\tentity->SetJsonPath(jsonPath);\n\t\t\tentity->Load();\n\t\t\treturn entity;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 28.427042798086084}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\t// Initialize a temporary ProxyEntity to check the validity and type of the JSON\n\tProxyEntity tempProxyEntity;\n\t// Check if the JSON is valid\n\tif (!tempProxyEntity.Load(jsonPath)) {\n\t\treturn nullptr;\n\t}\n\t// Create a new ProxyEntity of the determined type\n\tstd::shared_ptr<ProxyEntity> proxyEntity = std::make_shared<ProxyEntity>();\n\t// Check the version of the entity and, if valid, set the load control flag, assign the JSON path, and load the entity\n\tif (!proxyEntity->SetVersion(tempProxyEntity.GetVersion())) {\n\t\treturn nullptr;\n\t}\n\tproxyEntity->SetLoadControl(true);\n\tproxyEntity->SetJsonPath(jsonPath);\n\tproxyEntity->Load();\n\t// Return the loaded ProxyEntity\n\treturn proxyEntity;\n}", "CodeBleu_score": 28.870920159046065}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\turl = QUrl(link);\n\tif (!url.isValid()) {\n\t\treturn false;\n\t}\n\tprotocol = url.scheme();\n\tif (protocol != \"https\" && protocol != \"quic\") {\n\t\treturn false;\n\t}\n\tname = url.host();\n\tif (name.isEmpty()) {\n\t\treturn false;\n\t}\n\tserverAddress = url.host();\n\tport = url.port();\n\tif (port == -1) {\n\t\tif (protocol == \"https\") {\n\t\t\tport = 443;\n\t\t} else {\n\t\t\tport = 784;\n\t\t}\n\t}\n\tusername = url.userName();\n\tpassword = url.password();\n\treturn !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 67.24649036463359}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\turl = QUrl(link);\n\tif (!url.isValid())  {\n\t\treturn false;\n\t}\n\tprotocol = url.scheme();\n\tif (protocol != \"https\" && protocol != \"quic\")  {\n\t\treturn false;\n\t}\n\tserverAddress = url.host();\n\tport = url.port();\n\tif (port == -1)  {\n\t\tport = 443;\n\t}\n\tusername = url.userName();\n\tpassword = url.password();\n\treturn !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 68.32508004365296}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\turl = QUrl(link);\n\tif (url.isValid()) {\n\t\tprotocol = url.scheme();\n\t\tif (protocol != \"https\" && protocol != \"quic\") {\n\t\t\tprotocol = \"https\";\n\t\t}\n\t\tusername = url.userName();\n\t\tpassword = url.password();\n\t\tserverAddress = url.host();\n\t\tport = url.port();\n\t\tif (username.isEmpty() || password.isEmpty() || serverAddress.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 66.96447698787583}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t\tif (callback_before_save) {\n\t\tcallback_before_save();\n\t}\n\tif (flag_save_disabled) {\n\t\treturn false;\n\t}\n\tbool flag_changed = false;\n\tif (file.open(QIODevice::ReadOnly | QIODevice::Text)) {\n\t\tQByteArray json_bytes = ToJsonBytes();\n\t\tQByteArray json_bytes_last_saved = file.readAll();\n\t\tif (json_bytes != json_bytes_last_saved) {\n\t\t\tflag_changed = true;\n\t\t\tfile.close();\n\t\t\tif (file.open(QIODevice::WriteOnly | QIODevice::Text)) {\n\t\t\t\tfile.write(json_bytes);\n\t\t\t}\n\t\t}\n\t}\n\treturn flag_changed;\n}", "CodeBleu_score": 48.19138814276865}, {"code": "bool JsonStore::Save(){\n\t\tif (callback_before_save) {\n\t\tcallback_before_save(this);\n\t}\n\tif (!is_saving_allowed) {\n\t\treturn false;\n\t}\n\tif (!is_saving_allowed) {\n\t\treturn false;\n\t}\n\tbool is_changed = false;\n\tif (last_saved_content.size() != content.size()) {\n\t\tis_changed = true;\n\t} else {\n\t\tfor (int i = 0; i < content.size(); i++) {\n\t\t\tif (last_saved_content[i] != content[i]) {\n\t\t\t\tis_changed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (!is_changed) {\n\t\treturn false;\n\t}\n\tlast_saved_content = content;\n\tfile.open(QIODevice::WriteOnly);\n\tif (!file.isOpen()) {\n\t\treturn false;\n\t}\n\tfile.write(ToJsonBytes());\n\tfile.close();\n\treturn true;\n}", "CodeBleu_score": 41.09251262846397}, {"code": "bool JsonStore::Save(){\n\t\tif (callback_before_save != nullptr) {\n\t\tcallback_before_save();\n\t}\n\tif (save_disabled) {\n\t\treturn false;\n\t}\n\tstd::string json_bytes = ToJsonBytes();\n\tbool content_changed = json_bytes != last_saved_content;\n\tif (content_changed) {\n\t\tlast_saved_content = json_bytes;\n\t\tfile.open(QIODevice::WriteOnly);\n\t\tfile.write(last_saved_content.c_str());\n\t\tfile.close();\n\t}\n\treturn content_changed;\n}", "CodeBleu_score": 53.335203631596826}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\ttimer->start();\n}", "CodeBleu_score": 62.01232263943708}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *t = new QTimer(obj);\n\tt->setSingleShot(true);\n\tt->setInterval(timeout);\n\tQObject::connect(t, &QTimer::timeout, callback);\n\tt->start();\n}", "CodeBleu_score": 54.832013541112225}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\tQObject::connect(timer, SIGNAL(timeout()), callback);\n\ttimer->start();\n}", "CodeBleu_score": 53.69348546631525}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t", "CodeBleu_score": 2.594683713400702}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t", "CodeBleu_score": 2.594683713400702}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t", "CodeBleu_score": 2.594683713400702}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tQ_UNUSED(request)\n\tQ_UNUSED(rpcOK)\n\treturn QString();\n}", "CodeBleu_score": 21.698385944349784}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tgrpc::ClientContext context;\n\tlibcore::LoadConfigResp reply;\n\tgrpc::Status status = default_grpc_channel->Call(\n\t\tcontext,\n\t\tlibcore::LoadConfigMethod(),\n\t\trequest,\n\t\t&reply);\n\tif (status.ok()) {\n\t\t*rpcOK = true;\n\t\treturn reply.error();\n\t}\n\t*rpcOK = false;\n\treturn \"\";\n}", "CodeBleu_score": 56.059936230618}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t", "CodeBleu_score": 6.451239584021294}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t\tui->inbound_auth->setText(\"\");\n\tif (NekoSettings::dataStore->inbound_auth->NeedAuth()) {\n\t\tui->inbound_auth->setIcon(QIcon(\":/icons/icons/lock.png\"));\n\t} else {\n\t\tui->inbound_auth->setIcon(QIcon(\":/icons/icons/unlock.png\"));\n\t}\n}", "CodeBleu_score": 55.95346191598459}, {"code": "void DialogBasicSettings::refresh_auth(){\n\tui->inbound_auth->setText(\"\");\nif (DataStore::inbound_auth->NeedAuth()) {\nui->inbound_auth->setIcon(QIcon(\":/icons/icons/lock.png\"));\n} else {\nui->inbound_auth->setIcon(QIcon(\":/icons/icons/unlock.png\"));\n}\n}", "CodeBleu_score": 52.745039540054094}, {"code": "void DialogBasicSettings::refresh_auth(){\n\tui->inbound_auth->setText(\"\")\nif (dataStore->inbound_auth->NeedAuth()) {\nui->inbound_auth->setIcon(QIcon::fromTheme(\"lock\"))\n} else {\nui->inbound_auth->setIcon(QIcon::fromTheme(\"unlock\"))\n}\n}", "CodeBleu_score": 55.42173815419852}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t", "CodeBleu_score": 3.3892240801453246}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tQDialog *dialog = new QDialog(this);\n\tdialog->setWindowTitle(\"Add new group\");\n\tdialog->setModal(true);\n\tQGridLayout *layout = new QGridLayout(dialog);\n\tQLineEdit *name = new QLineEdit(dialog);\n\tname->setPlaceholderText(\"Group name\");\n\tlayout->addWidget(name, 0, 0);\n\tQPushButton *ok = new QPushButton(\"OK\", dialog);\n\tQPushButton *cancel = new QPushButton(\"Cancel\", dialog);\n\tlayout->addWidget(ok, 1, 0);\n\tlayout->addWidget(cancel, 1, 1);\n\tconnect(ok, SIGNAL(clicked()), dialog, SLOT(accept()));\n\tconnect(cancel, SIGNAL(clicked()), dialog, SLOT(reject()));\n\tif (dialog->exec() == QDialog::Accepted) {\n\t\tQString name_str = name->text();\n\t\tif (name_str.isEmpty()) {\n\t\t\tMW_dialog_message(\"Error\", \"Group name is empty\", this);\n\t\t} else if (Neko::profileManager->GetGroup(name_str) != NULL) {\n\t\t\tMW_dialog_message(\"Error\", \"Group already exists\", this);\n\t\t} else {\n\t\t\tNeko::profileManager->AddGroup(name_str);\n\t\t\tMW_dialog_message(\"Success\", \"Group added\", this);\n\t\t\ton_refresh_clicked();\n\t\t}\n\t}\n\tdialog->deleteLater();\n}", "CodeBleu_score": 43.644371652180155}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tQDialog *dialog = new QDialog();\n\tdialog->setWindowTitle(\"New group\");\n\tdialog->setMinimumSize(QSize(300, 100));\n\tdialog->setMaximumSize(QSize(300, 100));\n\tdialog->setSizePolicy(QSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed, QSizePolicy::DefaultType));\n\tdialog->setModal(true);\n\n\tQLineEdit *name = new QLineEdit();\n\tname->setPlaceholderText(\"Name\");\n\tQLineEdit *description = new QLineEdit();\n\tdescription->setPlaceholderText(\"Description\");\n\tQPushButton *ok = new QPushButton(\"Ok\");\n\tQPushButton *cancel = new QPushButton(\"Cancel\");\n\n\tQHBoxLayout *layout = new QHBoxLayout();\n\tlayout->addWidget(name);\n\tlayout->addWidget(description);\n\tlayout->addWidget(ok);\n\tlayout->addWidget(cancel);\n\n\tconnect(ok, SIGNAL(clicked()), dialog, SLOT(accept()));\n\tconnect(cancel, SIGNAL(clicked()), dialog, SLOT(reject()));\n\n\tdialog->setLayout(layout);\n\n\tif (dialog->exec() == QDialog::Accepted) {\n\t\tQString newName = name->text();\n\t\tQString newDescription = description->text();\n\t\tif (newName == \"\") {\n\t\t\tQMessageBox::critical(this, \"Error\", \"Name must not be empty\");\n\t\t\treturn;\n\t\t}\n\t\tif (newDescription == \"\") {\n\t\t\tQMessageBox::critical(this, \"Error\", \"Description must not be empty\");\n\t\t\treturn;\n\t\t}\n\t\tif (mw->profileManager->AddGroup(newName, newDescription)) {\n\t\t\tmw->UpdateGroupsList();\n\t\t\tmw->SendRefreshMessage();\n\t\t} else {\n\t\t\tQMessageBox::critical(this, \"Error\", \"Group already exists\");\n\t\t}\n\t}\n\tdialog->deleteLater();\n}", "CodeBleu_score": 37.20332477012471}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t\t//\n\tQDialog::accept();\n\t//\n\tif (ui->custom_route->isChecked()) {\n\t\t//\n\t\tNekoConfig::writeConfig();\n\t\t//\n\t\tif (ui->routing_combo->currentText() != NekoConfig::routing_function_name) {\n\t\t\t//\n\t\t\tui->info_msg->setText(tr(\"Routing function changed!\"));\n\t\t\t//\n\t\t\tNekoConfig::routing_function_name = ui->routing_combo->currentText();\n\t\t\t//\n\t\t\tNekoConfig::writeConfig();\n\t\t\t//\n\t\t\tNekoConfig::loadConfig();\n\t\t\t//\n\t\t\temit dataStore->routing->Save();\n\t\t}\n\t\t//\n\t\telse {\n\t\t\t//\n\t\t\tui->info_msg->setText(tr(\"No changes detected!\"));\n\t\t}\n\t}\n\t//\n\telse {\n\t\t//\n\t\tui->info_msg->setText(tr(\"No changes detected!\"));\n\t}\n}", "CodeBleu_score": 31.806842434453575}, {"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\txml.setDevice(device);\n\txml.readNextStartElement();\n\tif (xml.name() != \"tileset\") {\n\t\tmError.set(tr(\"The file is not a tileset. The root element must be 'tileset'.\"), xml.lineNumber(), xml.columnNumber());\n\t\treturn SharedTileset();\n\t}\n\treturn readTileset();\n}", "CodeBleu_score": 45.39064119185431}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\tmError.clear\nmPath.setPath(path)\nxml.setDevice(device)\nxml.readNextStartElement()\nif (xml.name() != \"tileset\") {\nmError.set(tr(\"The file is not a tileset.\"))\nreturn SharedTileset()\n}\nreturn readTileset()\n}", "CodeBleu_score": 39.49090885838698}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\txml.setDevice(device);\n\txml.readNextStartElement();\n\tif (xml.name() != \"tileset\") {\n\t\tmError.setFormat(tr(\"The file %1 is not a tileset.\").arg(path));\n\t\treturn SharedTileset();\n\t}\n\treturn readTileset();\n}", "CodeBleu_score": 43.53431279622271}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\treturn NULL;\n\t}\n\t// Check if the library is blacklisted\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\treturn NULL;\n\t}\n\t// Call the original function to load the library\n\treturn LoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 62.29445096344695}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\t/*\n\t * If the library file name is not provided, return null.\n\t */\n\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_FILE_NOT_FOUND);\n\t\treturn NULL;\n\t}\n\n\t/*\n\t * Check if the library file name is blacklisted.\n\t */\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\treturn NULL;\n\t}\n\n\t/*\n\t * Call the original LoadLibraryExW function to load the library.\n\t */\n\treturn RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 62.401613613271934}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn NULL;\n\t}\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn NULL;\n\t}\n\treturn pfn_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 63.16179040914985}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\tQUrl url;\nQUrl localFile;\nQFile file;\nQByteArray data;\n\n// Create the HTTP client\nQNetworkAccessManager manager;\nQNetworkRequest request;\nQNetworkReply* reply = NULL;\n\n// Create the cache path for the box art\nQDir dir = m_BoxArtDir;\n\n// Create the cache directory if it did not already exist\nif (!dir.exists(computer->uuid)) {\ndir.mkdir(computer->uuid);\n}\n\n// Change to this computer's box art cache folder\ndir.cd(computer->uuid);\n\n// Try to open the cached file\nlocalFile = QUrl::fromLocalFile(dir.filePath(QString::number(appId) + \".png\"));\n\n// Create the HTTP request\nrequest.setUrl(QUrl(\"http://%1:%2/boxart/%3\").arg(computer->ip).arg(computer->port).arg(appId));\nrequest.setRawHeader(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20121011 Firefox/16.0\");\nrequest.setRawHeader(\"Accept\", \"image/png\");\n\n// Download the box art from the network\nreply = manager.get(request);\n\n// Wait for the HTTP request to finish\nwhile (!reply->isFinished()) {\nQCoreApplication::processEvents();\n}\n\n// Check the HTTP status code\nif (reply->error() == QNetworkReply::NoError) {\n// Save the box art to the cache\nfile.setFileName(localFile.toLocalFile());\nif (file.open(QIODevice::WriteOnly)) {\ndata = reply->readAll();\nfile.write(data);\nfile.close();\n}\n\n// Return the local file URL of the cached box art\nreturn localFile;\n}\n\n// Ensure any zero-byte file is removed\nfile.setFileName(localFile.toLocalFile());\nif (file.exists()) {\nfile.remove();\n}\n\n// Return an empty URL\nreturn QUrl();\n}", "CodeBleu_score": 42.41469959972645}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t", "CodeBleu_score": 3.16607573165284}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\tQNetworkAccessManager *manager = new QNetworkAccessManager(this);\nQNetworkRequest request(QUrl::fromLocalFile(getFilePathForBoxArt(computer, appId)));\n\n// Set the HTTP header so that the server knows we are not a bot\nrequest.setRawHeader(\"User-Agent\", \"NVIDIA-NVSMI-Client/1.0\");\n\n// Download the image\nQNetworkReply *reply = manager->get(request);\n\n// Wait for the download to complete\nQEventLoop loop;\nQObject::connect(reply, SIGNAL(finished()), &loop, SLOT(quit()));\nloop.exec();\n\n// Save the image to the cache path\nif (reply->error() == QNetworkReply::NoError) {\n    QFile file(getFilePathForBoxArt(computer, appId));\n    if (file.open(QIODevice::WriteOnly)) {\n        file.write(reply->readAll());\n        file.close();\n\n        // Return the local file URL of the cached image\n        return QUrl::fromLocalFile(getFilePathForBoxArt(computer, appId));\n    }\n}\n\n// Ensure any zero-byte file is removed\nQFile(getFilePathForBoxArt(computer, appId)).remove();\n\n// Return an empty URL\nreturn QUrl();\n}", "CodeBleu_score": 43.522869331972004}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\tQHostAddress address = getBestGlobalAddressV6(addresses);\nif (address.protocol() == QAbstractSocket::IPv6Protocol) {\nif (address.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n// Link-local\naddNewHost(address, true, computer->getMdnsIpv6Address());\n} else if (address.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\nqInfo() << \"Ignoring site-local address:\" << address;\n} else if (address.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\nqInfo() << \"Ignoring ULA:\" << address;\n} else if (address.isInSubnet(QHostAddress(\"2002::\"), 16)) {\nqInfo() << \"Ignoring 6to4 address:\" << address;\n} else if (address.isInSubnet(QHostAddress(\"2001::\"), 32)) {\nqInfo() << \"Ignoring Teredo address:\" << address;\n} else {\naddNewHost(address, true, computer->getMdnsIpv6Address());\n}\n} else {\nbool foundIpv4 = false;\nfor (const QHostAddress& address : addresses) {\nif (address.protocol() == QAbstractSocket::IPv4Protocol) {\nfoundIpv4 = true;\naddNewHost(address, true, computer->getMdnsIpv6Address());\nbreak;\n}\n}\n\nif (!foundIpv4) {\naddNewHost(computer->getMdnsIpv6Address(), true, computer->getMdnsIpv6Address());\n}\n}\n\nm_PendingResolution.removeOne(computer);\ncomputer->deleteLater();\n}", "CodeBleu_score": 59.892256328729154}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t\n//    qDebug() << \"handleMdnsServiceResolved\";\n    QHostAddress bestAddress = getBestGlobalAddressV6(addresses);\n    bool added = false;\n\n    // First try IPv4 addresses\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            // Add the host with the IPv4 address\n            addNewHost(address, false, bestAddress);\n            added = true;\n            break;\n        }\n    }\n\n    // If no IPv4 address was found, try IPv6\n    if (!added) {\n        for (const QHostAddress& address : addresses) {\n            if (address.protocol() == QAbstractSocket::IPv6Protocol) {\n                if (address.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n                    // Link-local\n                    addNewHost(address, false, bestAddress);\n                    added = true;\n                    break;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n                    // Site-local\n                    addNewHost(address, false, bestAddress);\n                    added = true;\n                    break;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n                    // Unique local\n                    addNewHost(address, false, bestAddress);\n                    added = true;\n                    break;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n                    // 6to4\n                    addNewHost(address, false, bestAddress);\n                    added = true;\n                    break;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n                    // Teredo\n                    addNewHost(address, false, bestAddress);\n                    added = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    if (!added) {\n        // No address was added, remove the computer\n        m_PendingResolution.removeOne(computer);\n        delete computer;\n    } else {\n        // Schedule the computer for deletion\n        QTimer::singleShot(10000, computer, &QObject::deleteLater);\n    }\n}", "CodeBleu_score": 67.11379747402134}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQ_ASSERT(m_DelayedFlushThread != nullptr && m_DelayedFlushThread->isRunning());\n\nQMutexLocker computerLock(&computer->mutex);\n\nQVariantMap m_LastSerializedHosts = m_LastSerializedHosts;\nQVariantMap m_CurrentSerializedHosts = m_CurrentSerializedHosts;\n\nif (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(m_CurrentSerializedHosts.value(computer->uuid))) {\n    computerLock.unlock();\n    return;\n}\n\nm_CurrentSerializedHosts.insert(computer->uuid, m_CurrentSerializedHosts.value(computer->uuid));\nm_CurrentSerializedHosts.remove(computer->uuid);\n\nm_LastSerializedHosts.insert(computer->uuid, m_LastSerializedHosts.value(computer->uuid));\nm_LastSerializedHosts.remove(computer->uuid);\n\ncomputerLock.unlock();\n\nsaveHosts();\n}", "CodeBleu_score": 46.55542269902499}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQMutexLocker computerLock(&m_ComputerListMutex);\n\nQVariantMap currentSerializedHost = computer->serialize();\n\nif (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(currentSerializedHost)) {\n    // No changes, nothing to do\n    return;\n}\n\nm_LastSerializedHosts.insert(computer->uuid, currentSerializedHost);\nm_LastSerializedHosts.remove(computer->uuid);\n\ncomputerLock.unlock();\nsaveHosts();\n}", "CodeBleu_score": 52.49905930253228}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQ_ASSERT(m_DelayedFlushThread != nullptr && m_DelayedFlushThread->isRunning());\n\nQMutexLocker locker(&m_DelayedFlushMutex);\n\n// If the computer's serialized data is the same as the last saved state,\n// don't save it again.\nif (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(computer)) {\n    return;\n}\n\n// The current serialized data is different from the last saved state.\n// Update the last saved state and queue a request to save the hosts to QSettings.\nm_LastSerializedHosts.insert(computer->uuid, computer);\nm_NeedsDelayedFlush = true;\nm_DelayedFlushCondition.wakeOne();\n}", "CodeBleu_score": 50.63247221041555}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tbool changed = false;\n\n\tif (appList.size() != newAppList.size()) {\n\t\tchanged = true;\n\t} else {\n\t\tfor (int i = 0; i < appList.size(); i++) {\n\t\t\tif (appList[i].id != newAppList[i].id) {\n\t\t\t\tchanged = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (changed) {\n\t\tfor (int i = 0; i < appList.size(); i++) {\n\t\t\tfor (int j = 0; j < newAppList.size(); j++) {\n\t\t\t\tif (appList[i].id == newAppList[j].id) {\n\t\t\t\t\tnewAppList[j].hidden = appList[i].hidden;\n\t\t\t\t\tnewAppList[j].directLaunch = appList[i].directLaunch;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tappList = newAppList;\n\t\tsortAppList();\n\t}\n\n\treturn changed;\n}", "CodeBleu_score": 49.86138406968404}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tbool different = false;\n\tfor (auto &app : appList) {\n\t\tfor (auto &newApp : newAppList) {\n\t\t\tif (app.id == newApp.id) {\n\t\t\t\tapp.hidden = newApp.hidden;\n\t\t\t\tapp.directLaunch = newApp.directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (appList != newAppList) {\n\t\tappList = newAppList;\n\t\tsortAppList();\n\t\tdifferent = true;\n\t}\n\treturn different;\n}", "CodeBleu_score": 59.180515521801034}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tbool changed = false;\n\n\t// If the new list is identical to the old list, do nothing.\n\tif (appList == newAppList)\n\t\treturn false;\n\n\t// Propagate client-side attributes from the existing apps to the corresponding new apps based on their IDs.\n\tfor (NvApp &app : appList) {\n\t\tfor (NvApp &newApp : newAppList) {\n\t\t\tif (app.id == newApp.id) {\n\t\t\t\tnewApp.hidden = app.hidden;\n\t\t\t\tnewApp.directLaunch = app.directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the app list with the new list.\n\tappList = newAppList;\n\tsortAppList();\n\n\treturn true;\n}", "CodeBleu_score": 68.55690899353257}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setApplicationDescription(tr(\"Quit the application on a remote host\"));\n\tparser.addPositionalArgument(\"host\", tr(\"The host to quit the application on\"));\n\n\tif (!parser.parse(args)) {\n\t\tparser.showError();\n\t\treturn;\n\t}\n\n\thandleHelpAndVersionOptions(parser);\n\thandleUnknownOptions(parser);\n\n\tconst QStringList positionalArguments = parser.positionalArguments();\n\tif (positionalArguments.isEmpty()) {\n\t\tparser.showError(tr(\"No host argument provided\"));\n\t\treturn;\n\t}\n\n\tconst QString host = positionalArguments.at(0);\n\tif (host.isEmpty()) {\n\t\tparser.showError(tr(\"No host argument provided\"));\n\t\treturn;\n\t}\n\n\tm_Host = host;\n}", "CodeBleu_score": 52.57102195218201}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setApplicationDescription(tr(\"Quit the application on a specified host\"));\n\tparser.addPositionalArgument(tr(\"host\"), tr(\"The host to quit the application on\"));\n\tif (!parser.parse(args)) {\n\t\tparser.showError();\n\t\treturn;\n\t}\n\tif (parser.handleHelpAndVersionOptions())\n\t\treturn;\n\tif (parser.positionalArguments().count() != 1) {\n\t\tparser.showError(tr(\"A host must be specified\"));\n\t\treturn;\n\t}\n\tm_Host = parser.positionalArguments().at(0);\n}", "CodeBleu_score": 48.580762993955254}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setApplicationDescription(tr(\"Quit the application on a specified host\"));\n\tparser.addPositionalArgument(\"host\", tr(\"The host to quit\"));\n\tparser.addPositionalArgument(\"quit\", tr(\"The command to quit\"));\n\tif (!parser.parse(args)) {\n\t\tparser.showError();\n\t\treturn;\n\t}\n\tif (parser.positionalArguments().count() != 2) {\n\t\tparser.showError(tr(\"Please provide a host and a quit command\"));\n\t\treturn;\n\t}\n\tm_Host = parser.positionalArguments().at(0);\n\tm_QuitCommand = parser.positionalArguments().at(1);\n\tif (parser.handleHelpAndVersionOptions())\n\t\treturn;\n\tif (parser.handleUnknownOptions())\n\t\treturn;\n}", "CodeBleu_score": 56.81102629185336}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nNapi::HandleScope scope(env);\n\nQDateWrap* dateWrap = Napi::ObjectWrap<QDateWrap>::Unwrap(info.This().As<Napi::Object>());\n\nQDate date = dateWrap->instance;\n\nint years = info[0].As<Napi::Number>().Int32Value();\n\nQDate newDate = date.addYears(years);\n\nNapi::Value arg = Napi::External<QDate>::New(env, &newDate);\n\nQDateWrap* dateWrapInstance = new QDateWrap(arg);\n\nreturn dateWrapInstance->Value();\n}", "CodeBleu_score": 57.61988728507372}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nNapi::Date date = this->instance->date();\n\nif (info.Length() != 1 || !info[0].IsNumber()) {\nNapi::TypeError::New(env, \"Number expected\").ThrowAsJavaScriptException();\n}\n\nint years = info[0].As<Napi::Number>().Int32Value();\n\nQDate newDate = date.addYears(years);\n\nNapi::Object instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, &newDate)});\n\nreturn instance;\n}", "CodeBleu_score": 63.155585545318125}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nNapi::HandleScope scope(env);\n\nQDateWrap* dateObject = Napi::ObjectWrap<QDateWrap>::Unwrap(info.This().As<Napi::Object>());\n\nQDate date = dateObject->instance;\n\nint years = info[0].As<Napi::Number>().Int32Value();\n\nQDate newDate = date.addYears(years);\n\nNapi::Value arg = Napi::External<QDate>::New(env, &newDate);\n\nNapi::Object instance = QDateWrap::constructor.New({arg});\n\nreturn instance;\n}", "CodeBleu_score": 60.17742431784235}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\nQDate date = QDate::currentDate();\nNapi::Object dateWrap = StaticDateWrap::constructor.New({Napi::External<QDate>::New(env, &date)});\nreturn dateWrap;\n}", "CodeBleu_score": 64.25907447621539}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\nQDate date = QDate::currentDate();\nNapi::Object dateWrap = QDateWrap::constructor.New({Napi::External<QDate>::New(env, &date)});\nreturn dateWrap;\n}", "CodeBleu_score": 64.27152459714277}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\nQDateWrap* wrap = new QDateWrap(env, QDate::currentDate());\nreturn wrap->instance;\n}", "CodeBleu_score": 42.777641674860675}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\")\n\t\t\t.ThrowAsJavaScriptException();\n\t}\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\")\n\t\t\t.ThrowAsJavaScriptException();\n\t}\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tQDate date(year, 1, 1);\n\tbool result = date.isLeapYear();\n\treturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 64.89510417681129}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\n// Check the number of arguments passed.\nif (info.Length() != 1) {\nNapi::TypeError::New(env, \"Wrong number of arguments\")\n.ThrowAsJavaScriptException();\n}\n\n// Check the argument's type.\nif (!info[0].IsNumber()) {\nNapi::TypeError::New(env, \"Wrong arguments\")\n.ThrowAsJavaScriptException();\n}\n\n// Retrieve the argument's value.\nint year = info[0].As<Napi::Number>().Int32Value();\n\n// Call the C++ function.\nbool result = QDate::isLeapYear(year);\n\n// Return the result.\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 67.22213188906842}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\n// Check if the number of arguments passed is correct\nif (info.Length() != 1) {\nNapi::TypeError::New(env, \"Wrong number of arguments\")\n.ThrowAsJavaScriptException();\n}\n\n// Check if argument 0 is of type number\nif (!info[0].IsNumber()) {\nNapi::TypeError::New(env, \"Wrong arguments\")\n.ThrowAsJavaScriptException();\n}\n\n// Retrieve argument 0\nint year = info[0].As<Napi::Number>().Int32Value();\n\n// Check if year is a leap year\nbool result = QDate::isLeapYear(year);\n\n// Return result\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 67.22213188906842}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\nreturn Napi::Value::From(env, this->instance->daysTo(otherWrap->instance));\n}", "CodeBleu_score": 57.240917598168586}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\nreturn Napi::Number::New(env, this->instance->daysTo(otherWrap->getInternalInstance()));\n}", "CodeBleu_score": 57.43209125711319}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\nint days = this->instance->daysTo(otherWrap->instance);\nreturn Napi::Value::From(env, days);\n}", "CodeBleu_score": 63.25671528249206}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\nQDateTime* otherInstance = otherWrap->getInternalInstance();\nint result = this->instance->msecsTo(*otherInstance);\nreturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 82.94847368786482}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n\nthis->instance->msecsTo\notherWrap->getInternalInstance\n\nreturn Napi::Value::From(env, this->instance->msecsTo\notherWrap->getInternalInstance\n);\n}", "CodeBleu_score": 76.80458382413548}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n\nqint64 result = this->instance->msecsTo(otherWrap->getInternalInstance());\n\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 87.46673455005998}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nif (info.Length() != 2) {\nNapi::TypeError::New(env, \"Wrong number of arguments\")\n.ThrowAsJavaScriptException();\n}\n\nQItemSelectionModelWrap* parentWrap = Napi::ObjectWrap<QItemSelectionModelWrap>::Unwrap(info.This().As<Napi::Object>());\n\nif (info[0].IsNull()) {\nNapi::TypeError::New(env, \"QModelIndex is expected\").ThrowAsJavaScriptException();\n}\n\nif (info[1].IsNull()) {\nNapi::TypeError::New(env, \"Number is expected\").ThrowAsJavaScriptException();\n}\n\nQModelIndex* row = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[0].As<Napi::Object>())->getInternalInstance();\nint number = info[1].As<Napi::Number>().Int32Value();\n\nbool result = parentWrap->instance->rowIntersectsSelection(*row, number);\n\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 60.99626846021919}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nQModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\nQModelIndex* parent = parentWrap->getInternalInstance();\n\nint row = info[0].As<Napi::Number>().Int32Value();\n\nbool result = this->instance->rowIntersectsSelection(row, *parent);\n\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 82.1590966317877}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t [](const Napi::CallbackInfo& info) {\n  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  if (info.Length() != 2) {\n   Napi::TypeError::New(env, \"Wrong number of arguments\")\n   .ThrowAsJavaScriptException();\n   return env.Null();\n  }\n\n  Napi::Object self = info.This().As<Napi::Object>();\n\n  QItemSelectionModelWrap* obj = Napi::ObjectWrap<QItemSelectionModelWrap>::Unwrap(self);\n\n  if (info[0].IsNumber() && info[1].IsObject()) {\n   int row = info[0].As<Napi::Number>().Int32Value();\n   Napi::Object parentIndexObject = info[1].As<Napi::Object>();\n   QModelIndex* parentIndexInstance = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentIndexObject);\n   bool result = obj->instance->rowIntersectsSelection(row, *parentIndexInstance);\n   return Napi::Boolean::New(env, result);\n  } else {\n   Napi::TypeError::New(env, \"Wrong arguments\")\n   .ThrowAsJavaScriptException();\n   return env.Null();\n  }\n }\n}", "CodeBleu_score": 64.78279715158546}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQSize otherSize = otherSizeWrap->getInternalInstance();\nQSize result = this->instance->expandedTo(otherSize);\nNapi::Object resultInstance = QSizeWrap::constructor.New({Napi::External<QSize>::New(env, new QSize(result))});\nreturn resultInstance;\n}", "CodeBleu_score": 82.69290221908517}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherSizeWrapObject = info[0].As<Napi::Object>();\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrapObject);\nQSize otherSize = otherSizeWrap->getInternalInstance();\nQSize result = this->instance->expandedTo(otherSize);\nNapi::Object resultObject = QSizeWrap::constructor.New({Napi::External<QSize>::New(env, &result)});\nreturn resultObject;\n}", "CodeBleu_score": 69.50774655242716}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQSize otherSize = otherSizeWrap->getInternalInstance();\nQSize result = this->instance->expandedTo(otherSize);\nreturn QSizeWrap::constructor.New({Napi::External<QSize>::New(env, new QSize(result))});\n}", "CodeBleu_score": 73.39867775806385}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t [](const Napi::CallbackInfo& info) {\n  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n  Napi::String returnValue;\n  if (info.Length() != 0) {\n   Napi::TypeError::New(env, \"No arguments expected\").ThrowAsJavaScriptException();\n   return env.Null();\n  }\n  returnValue = Napi::String::New(env, QApplication::desktopFileName());\n  return returnValue;\n }\n}", "CodeBleu_score": 62.337188249160505}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t [](const Napi::CallbackInfo& info) {\n  Napi::Env env = info.Env();\n  if (!info.IsConstructCall()) {\n   Napi::TypeError::New(env, \"Use 'new' to construct QApplication\").ThrowAsJavaScriptException();\n   return env.Null();\n  }\n  QApplication* application = new QApplication();\n  Napi::String result = Napi::String::New(env, application->desktopFileName().toStdString());\n  return result;\n }\n}", "CodeBleu_score": 62.35048933402689}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nQApplicationWrap* obj = Napi::ObjectWrap<QApplicationWrap>::Unwrap(info.This().As<Napi::Object>());\n\nQString result = obj->instance->desktopFileName();\n\nreturn Napi::String::New(env, result.toStdString());\n}", "CodeBleu_score": 64.26400705509668}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nQClipboard* thisInstance = this->instance;\n\nif (info.Length() != 0) {\nNapi::TypeError::New(env, \"No arguments expected\").ThrowAsJavaScriptException();\nreturn env.Null();\n}\n\nQMimeData* mimeData = new QMimeData();\n\nif (thisInstance->mimeData(mimeData, QClipboard::Clipboard)) {\nNapi::TypeError::New(env, \"Failed to get mime data from clipboard\").ThrowAsJavaScriptException();\nreturn env.Null();\n}\n\nQMimeDataWrap* wrapper = new QMimeDataWrap(env, mimeData);\nwrapper->instance = mimeData;\n\nreturn wrapper->getJsObject();\n}", "CodeBleu_score": 50.80188660028977}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nQClipboard* thisInstance = this->instance;\n\nQMimeData* mimeData = new QMimeData();\n\nQClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\n\nthisInstance->mimeData(mimeData, mode);\n\nQMimeDataWrap* wrapper = new QMimeDataWrap(env, mimeData);\n\nreturn wrapper->getInternalInstance();\n}", "CodeBleu_score": 56.39612038962751}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nQClipboard* thisInstance = this->instance;\n\nif (info.Length() != 2) {\nNapi::TypeError::New(env, \"Wrong number of arguments\")\n.ThrowAsJavaScriptException();\n}\n\nQClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\nQMimeData* mimeData = new QMimeData();\n\nmimeData->clear();\n\nif (mode == QClipboard::Clipboard) {\nmimeData = QApplication::clipboard()->mimeData();\n} else if (mode == QClipboard::Selection) {\nmimeData = QApplication::clipboard()->selection();\n} else {\nNapi::Error::New(env, \"Invalid clipboard mode\").ThrowAsJavaScriptException();\n}\n\nreturn Napi::External<QMimeData>::New(env, mimeData);\n}", "CodeBleu_score": 57.55041645769966}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nNapi::Object self = info.This().As<Napi::Object>();\n\nQDragWrap* qt_wrap = Napi::ObjectWrap<QDragWrap>::Unwrap(self);\n\nif(qt_wrap->instance->source()) {\nQObjectWrap* source_wrap = new QObjectWrap(env, qt_wrap->instance->source());\nreturn source_wrap->getInternalInstance();\n}\n\nreturn env.Null();\n}", "CodeBleu_score": 51.596494781086285}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nNapi::Object self = info.This().As<Napi::Object>();\n\nQDragWrap* qDragWrapInstance = Napi::ObjectWrap<QDragWrap>::Unwrap(self);\n\nQDrag* qDragInstance = qDragWrapInstance->getInternalInstance();\n\nQObject* source = qDragInstance->source();\n\nNapi::Object result = Napi::Object::New(env);\n\nresult.Set(\"instance\", Napi::External<QObject>::New(env, source));\n\nreturn result;\n}", "CodeBleu_score": 57.51011762109856}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nQDragWrap* dragInstance = Napi::ObjectWrap<QDragWrap>::Unwrap(info.This().As<Napi::Object>());\n\nQObject* source = dragInstance->instance->source();\n\nNapi::Object sourceObject = Napi::Value(source)->ToObject();\n\nNapi::External<QObject> sourceExternal = Napi::External<QObject>::New(env, source);\n\nNapi::Object sourceObjectWrap = QObjectWrap::constructor.New({sourceExternal});\n\nreturn sourceObjectWrap;\n}", "CodeBleu_score": 57.700590183765996}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (Bars.Count == 0 || Bars[0].Count == 0) {\nreturn;\n}\n\nint selectIndex = CalculateSelectIndex(e.X, e.Y);\nif (selectIndex == -1) {\nToolTip.IsOpen = false;\nreturn;\n}\n\nif (selectIndex != SelectIndex) {\nSelectIndex = selectIndex;\nToolTip.IsOpen = true;\nUpdateToolTip();\n}\n\nif (ToolTip.IsOpen) {\nCalculateToolTipPosition(e.X, e.Y);\n}\n}", "CodeBleu_score": 11.70688286410052}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (Bars.Count > 0 && Bars[0].Count > 0) {\n\t\tint selectIndex = CalculateSelectIndex(e.Location);\n\t\tif (selectIndex >= 0 && selectIndex < Bars[0].Count) {\n\t\t\tif (Bars[0][selectIndex].Tips.IsValid) {\n\t\t\t\tstring text = Bars[0][selectIndex].Tips.Text;\n\t\t\t\tSize size = TextRenderer.MeasureText(text, Font, Size.Empty, TextFormatFlags.NoPadding);\n\t\t\t\tif (size.Width > Tips.Size.Width) {\n\t\t\t\t\tTips.Size = new Size(size.Width + 10, Tips.Size.Height);\n\t\t\t\t}\n\t\t\t\tTips.Text = text;\n\t\t\t\tPoint location = new Point(Bars[0][selectIndex].Location.X, Bars[0][selectIndex].Location.Y - Tips.Size.Height - 10);\n\t\t\t\tif (location.X + Tips.Size.Width > ClientSize.Width) {\n\t\t\t\t\tlocation.X = ClientSize.Width - Tips.Size.Width;\n\t\t\t\t}\n\t\t\t\tif (location.Y < 0) {\n\t\t\t\t\tlocation.Y = 0;\n\t\t\t\t}\n\t\t\t\tTips.Location = location;\n\t\t\t\tTips.Visible = true;\n\t\t\t} else {\n\t\t\t\tTips.Visible = false;\n\t\t\t}\n\t\t} else {\n\t\t\tTips.Visible = false;\n\t\t}\n\t} else {\n\t\tTips.Visible = false;\n\t}\n}", "CodeBleu_score": 28.784759279134892}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.5376086127673959}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\t\tif (Option == null || !Option.Show) return;\n\tif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) DrawToolTip(g);\n\tDrawSeries(g, Option.Series);\n\tDrawAxis(g);\n\tif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) DrawToolTip(g);\n\tDrawTitle(g);\n\tDrawLegend(g);\n\tDrawAxisScales(g);\n}", "CodeBleu_score": 64.59785624083871}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null) return;\nif (!Option.Show) return;\nif (Option.ToolTip.Show) {\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nDrawToolTip(g);\n}\n}\nDrawSeries(g, Series);\nDrawAxis(g);\nDrawTitle(g);\nif (Option.ToolTip.Show) {\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nDrawToolTip(g);\n}\n}\nDrawLegend(g);\nDrawAxisScales(g);\n}", "CodeBleu_score": 54.74845726669801}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null || !Option.Show) return;\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nDrawToolTip(g);\n}\nDrawSeries(g, Series);\nDrawAxis(g);\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nDrawToolTip(g);\n}\nif (Option.Title.Show) {\nDrawTitle(g);\n}\nif (Option.Legend.Show) {\nDrawLegend(g);\n}\nDrawAxisScales(g);\n}", "CodeBleu_score": 60.77534490473544}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t.\n\tif (this.SelectedIndex == -1) return;\n\tif (this.ToolTipType == ToolTipType.None) return;\n\tif (this.ToolTipType == ToolTipType.Shadow) {\n\t\tg.FillRectangle(Brushes.Black, this.DrawingOrigin.X + (this.SelectedIndex * this.BarWidth), this.DrawingOrigin.Y, this.BarWidth, this.ChartHeight);\n\t\treturn;\n\t}\n\tg.DrawLine(Pens.Black, this.DrawingOrigin.X + (this.SelectedIndex * this.BarWidth), this.DrawingOrigin.Y, this.DrawingOrigin.X + (this.SelectedIndex * this.BarWidth), this.DrawingOrigin.Y + this.ChartHeight);\n}", "CodeBleu_score": 33.634238335998354}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t.\n\t// Check if a bar is selected\n\tif (this.SelectedIndex == -1) return;\n\t// Check if the tooltip type is a line\n\tif (this.ToolTipType == ChartToolTipType.Line) {\n\t\t// Draw a vertical line\n\t\tg.DrawLine(Pens.Black, this.DrawingOrigin.X + this.BarWidth * this.SelectedIndex, this.DrawingOrigin.Y, this.DrawingOrigin.X + this.BarWidth * this.SelectedIndex, this.DrawingOrigin.Y + this.Height);\n\t}\n\t// Check if the tooltip type is a shadow\n\telse if (this.ToolTipType == ChartToolTipType.Shadow) {\n\t\t// Fill a rectangle\n\t\tg.FillRectangle(Brushes.Black, this.DrawingOrigin.X + this.BarWidth * this.SelectedIndex, this.DrawingOrigin.Y, this.BarWidth, this.Height);\n\t}\n}", "CodeBleu_score": 25.037160363382537}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t.\n\tif (this.SelectedIndex == -1) {\n\t\treturn;\n\t}\n\tif (this.ToolTipType == ToolTipType.Line) {\n\t\tg.DrawLine(this.ToolTipLinePen, this.DrawingOrigin.X + (this.SelectedIndex + 1) * this.BarWidth, this.DrawingOrigin.Y, this.DrawingOrigin.X + (this.SelectedIndex + 1) * this.BarWidth, this.DrawingOrigin.Y + this.ChartHeight);\n\t} else if (this.ToolTipType == ToolTipType.Shadow) {\n\t\tg.FillRectangle(this.ToolTipShadowBrush, this.DrawingOrigin.X + (this.SelectedIndex + 1) * this.BarWidth, this.DrawingOrigin.Y, this.BarWidth, this.ChartHeight);\n\t}\n}", "CodeBleu_score": 24.406540213555385}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\tif (title.Text.IsValid && title.SubText.IsValid) {\n// Get the size of the title text\nSizeF titleSize = TextRenderer.MeasureText(g, title.Text, title.Font, Size.Empty, TextFormatFlags.Left | TextFormatFlags.WordBreak);\n\n// Draw the title text\nRectangle titleRectangle = new Rectangle(title.Location, new Size((int)titleSize.Width, (int)titleSize.Height));\nTextRenderer.DrawText(g, title.Text, title.Font, titleRectangle, title.TextColor, TextFormatFlags.Left | TextFormatFlags.WordBreak);\n\n// Draw the subtitle text\nif (title.SubText.IsValid) {\n// Get the size of the subtitle text\nSizeF subTitleSize = TextRenderer.MeasureText(g, title.SubText, title.SubFont, Size.Empty, TextFormatFlags.Left | TextFormatFlags.WordBreak);\n\n// Create a temporary scaled font\nFont subTitleFont = new Font(title.SubFont, (float)(title.SubFont.Size * title.Scale));\n\n// Get the size of the title text\nRectangle subTitleRectangle = new Rectangle(title.Location, new Size((int)subTitleSize.Width, (int)subTitleSize.Height));\nTextRenderer.DrawText(g, title.SubText, subTitleFont, subTitleRectangle, title.SubTextColor, TextFormatFlags.Left | TextFormatFlags.WordBreak);\n\n// Dispose the temporary scaled font\nsubTitleFont.Dispose();\n}\n}\n}", "CodeBleu_score": 35.77588767181615}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t// Set the chart title and subtitle\noption.Title = new Title { Text = \"Doughnut Chart\" };\noption.Title.Subtext = \"empty doughnut chart\";\n\n// Add a doughnut series\nvar serie = new Serie {\nName = \"Doughnut\",\nType = SerieType.Doughnut,\nRadius = new List<string> { \"50%\", \"70%\" },\nCenter = new List<string> { \"50%\", \"50%\" },\nData = new List<object> { 10, 20, 30, 40, 50 }\n};\noption.Series.Add(serie);\n\n// Add data to the series\nserie.Data.Add(10);\nserie.Data.Add(20);\nserie.Data.Add(30);\nserie.Data.Add(40);\nserie.Data.Add(50);\n}", "CodeBleu_score": 22.663231838249445}, {"code": "protected override void CreateEmptyOption(){\n\tif (emptyOption == null) {\nemptyOption = new DoughnutChartOptions();\nemptyOption.Title = new Title() {\nText = \"Empty Doughnut Chart\"\n};\nemptyOption.SubTitle = new Subtitle() {\nText = \"This chart is empty because it is not configured with any data source.\"\n};\nemptyOption.Series.Add(new Series() {\nName = \"Series 1\",\nColorByPoint = true,\nData = new Data() {\nDataLabels = new DataLabels() {\nEnabled = true,\nFormat = \"<b>{point.name}</b>: {point.percentage:.1f} %\"\n},\nPie = new PieData() {\nCenter = new List<int>() {\n200,\n150\n},\nInnerSize = 0,\nShowInLegend = false,\nSize = 150\n},\nType = \"pie\"\n},\nId = \"Series 1\",\nIndex = 0,\nLegendIndex = 0\n});\n}\n}", "CodeBleu_score": 24.107773500380006}, {"code": "protected override void CreateEmptyOption(){\n\tif (emptyOption == null) {\nemptyOption = new DoughnutChartOptions {\nTitle = new TitleOptions {\nDisplay = true,\nText = \"Empty Doughnut Chart\"\n},\nLegend = new LegendOptions {\nDisplay = true,\nPosition = Position.Right\n},\nTooltips = new TooltipsOptions {\nEnabled = true\n},\n}\nemptyOption.Scales = new Scales {\nXAxes = new List<CartesianAxis> {\nnew CartesianAxis {\nDisplay = true,\nScaleLabel = new ScaleLabel {\nLabelString = \"Data\"\n}\n}\n},\nYAxes = new List<CartesianAxis> {\nnew CartesianAxis {\nDisplay = true,\nScaleLabel = new ScaleLabel {\nLabelString = \"Value\"\n}\n}\n}\n};\nvar serie = new DoughnutDataset {\nLabel = \"My First Dataset\",\nData = new List<double> { 10, 20, 30, 40, 50 },\nBackgroundColor = new List<string> { \"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#E7E9ED\" },\nBorderColor = new List<string> { \"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#E7E9ED\" },\nBorderWidth = 1,\nHoverBackgroundColor = new List<string> { \"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#E7E9EB\" },\nHoverBorderColor = new List<string> { \"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#E7E9ED\" }\n};\nemptyOption.Data.Datasets.Add(serie);\n}\n}", "CodeBleu_score": 16.02934529683696}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 dt = Start;\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = dt.ToOADate();\n\t\t\tdt.AddMilliseconds(Interval);\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = Start + i * Interval;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 48.71433636723748}, {"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tdouble interval = Interval;\n\tdouble start = Start;\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 dt = new DateTimeInt64(start);\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = dt.DateTime;\n\t\t\tdt.AddMilliseconds(interval);\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = start;\n\t\t\tstart += interval;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 44.69250374197696}, {"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tdouble start = Start;\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 dateTime = new DateTimeInt64(start);\n\t\tfor (int i = 0; i < values.Length; i++) {\n\t\t\tvalues[i] = dateTime.ToOADate();\n\t\t\tdateTime.AddMilliseconds(Interval);\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i < values.Length; i++) {\n\t\t\tvalues[i] = start;\n\t\t\tstart += Interval;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 50.10125972343378}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tif (control.Width != width)\nreturn;\nif (control.BorderColor == color)\nreturn;\ncontrol.BorderColor = color;\nIntPtr hDC = m.LParam;\nif (hDC.ToInt32() == 0)\nhDC = control.Handle;\nif (hDC.ToInt32() == 0)\nreturn;\nusing (Graphics g = Graphics.FromHdc(hDC)) {\nif (g == null)\nreturn;\ng.SmoothingMode = SmoothingMode.AntiAlias;\ng.DrawRectangle(new Pen(color, width), control.ClientRectangle);\n}\n}", "CodeBleu_score": 47.50622943175862}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\n// Retrieve the device context for the window handle from the message.\nIntPtr hDC = m.LParam;\n\n// If the device context is valid,\nif (hDC.ToInt32() != IntPtr.Zero) {\n\n// Create a Graphics object for the device context.\nGraphics g = Graphics.FromHdc(hDC);\n\n// Set the smoothing mode to anti-alias.\ng.SmoothingMode = SmoothingMode.AntiAlias;\n\n// Draw a rectangle around the control's border.\ng.DrawRectangle(new Pen(color, width), 0, 0, control.Width, control.Height);\n\n// Release the device context.\ng.Dispose();\n}\n}", "CodeBleu_score": 39.032214340006874}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tif (m.HWnd.ToInt32() == control.Handle.ToInt32()) {\nif (width > 0) {\nusing (Pen pen = new Pen(color, width)) {\nusing (Graphics g = Graphics.FromHdc(m.WParam)) {\ng.SmoothingMode = SmoothingMode.AntiAlias;\ng.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n}\n}\n}\n}\n}", "CodeBleu_score": 45.7170887800842}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t2}", "CodeBleu_score": 1.370812683914783}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t3}", "CodeBleu_score": 1.370812683914783}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t2}", "CodeBleu_score": 1.370812683914783}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t\tif (button == null) {\n\t\tthrow new ArgumentNullException(\"button\");\n\t}\n\n\tFieldInfo fi = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\tif (fi != null) {\n\t\tDelegate d = fi.GetValue(null) as Delegate;\n\t\tif (d != null) {\n\t\t\tobject key = Delegate.Remove(d, button.Click);\n\t\t\tif (key != null) {\n\t\t\t\tEventInfo ei = button.Events[typeof(Button.ClickEvent)];\n\t\t\t\tif (ei != null) {\n\t\t\t\t\tei.RemoveEventHandler(button, key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.55461448402174}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\tFieldInfo fi = typeof(Control).GetField(\"EventClick\", BindingFlags.NonPublic | BindingFlags.Static);\n\tif (fi != null) {\n\t\tIntPtr key = fi.GetValue(null);\n\t\tif (key != IntPtr.Zero) {\n\t\t\tEventHandlers eh = button.Events;\n\t\t\tif (eh != null) {\n\t\t\t\teh.RemoveHandler(key);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 22.81948798527125}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\tFieldInfo fi = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\tif (fi != null) {\n\t\tobject key = fi.GetValue(null);\n\t\tif (button.Events.ContainsKey(key))\n\t\t\tbutton.Events.RemoveHandler(key, button.OnClick);\n\t}\n}", "CodeBleu_score": 49.6636114502237}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t\ttry {\n\t\tusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\")) {\n\t\t\tif (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n\t\t\t\treturn CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \".NET Framework 4.5 or later is not detected.\";\n\t\t\t}\n\t\t}\n\t}\n\tcatch {\n\t\treturn \".NET Framework 4.5 or later is not detected.\";\n\t}\n}", "CodeBleu_score": 70.97740527910346}, {"code": "public static string CheckVersion(){\n\t\ttry {\n\t\tusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\")) {\n\t\t\tif (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n\t\t\t\treturn CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \".NET Framework 4.5 or later is not detected.\";\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception) {\n\t\treturn \".NET Framework 4.5 or later is not detected.\";\n\t}\n}", "CodeBleu_score": 71.08290248439823}, {"code": "public static string CheckVersion(){\n\t\t// Opens the registry key for the .NET Framework setup.\n\tusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\")) {\n\t\t// Checks whether the specified key exists.\n\t\tif (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n\t\t\t// Retrieves the .NET Framework version string.\n\t\t\treturn CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n\t\t}\n\t\telse {\n\t\t\t// Returns a string indicating that .NET Framework 4.5 or later is not detected.\n\t\t\treturn \".NET Framework 4.5 or later is not detected\";\n\t\t}\n\t}\n}", "CodeBleu_score": 67.36991562633688}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == null) {\n\t\tthrow new ArgumentNullException(\"source\");\n\t}\n\tif (target == null) {\n\t\tthrow new ArgumentNullException(\"target\");\n\t}\n\tif (source == target) {\n\t\tthrow new ArgumentException(\"source and target must not be the same bitmap\");\n\t}\n\tif (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n\t\treturn false;\n\t}\n\tsource.FastLock(delegate(IntPtr sourceData, IntPtr sourceRowBytes, int sourceHeight) {\n\t\ttarget.FastLock(delegate(IntPtr targetData, IntPtr targetRowBytes, int targetHeight) {\n\t\t\tif (sourceRowBytes == targetRowBytes && sourceHeight == targetHeight) {\n\t\t\t\t// same row bytes and height -> memcpy\n\t\t\t\tMarshal.Copy(sourceData, targetData, sourceRowBytes * sourceHeight);\n\t\t\t} else {\n\t\t\t\t// different row bytes or height -> copy row by row\n\t\t\t\tfor (int y = 0; y < sourceHeight; y++) {\n\t\t\t\t\tMarshal.Copy(sourceData, targetData, sourceRowBytes, sourceRowBytes);\n\t\t\t\t\tsourceData += sourceRowBytes;\n\t\t\t\t\ttargetData += targetRowBytes;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn true;\n}", "CodeBleu_score": 53.63618448237841}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) throw new ArgumentException(\"The source and target bitmaps must not be the same bitmap.\");\n\tif (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) return false;\n\tsource.FastLock();\n\ttarget.FastLock();\n\tMarshal.Copy(source.Data, target.Data, 0, source.Data.Length);\n\tsource.FastUnlock();\n\ttarget.FastUnlock();\n\treturn true;\n}", "CodeBleu_score": 59.779831296105044}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new InvalidOperationException(\"Source and target bitmaps must not be the same bitmap.\");\n\t}\n\tif (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n\t\treturn false;\n\t}\n\tsource.FastLock(out IntPtr sourceData, out int sourceStride);\n\ttarget.FastLock(out IntPtr targetData, out int targetStride);\n\tmemcpy(targetData, sourceData, source.Width * source.Height * source.BytesPerPixel);\n\tsource.FastUnlock();\n\ttarget.FastUnlock();\n\treturn true;\n}", "CodeBleu_score": 63.17410059404398}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF mousePos = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(mousePos.X);\n}\n}", "CodeBleu_score": 53.10540615627409}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tPointF mousePos = new PointF(e.X, e.Y);\n\tif (e.Button == MouseButtons.Left) {\n\t\tSetPercent(mousePos.X);\n\t}\n}", "CodeBleu_score": 53.09719237507614}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF p = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(p.X);\n}\n}", "CodeBleu_score": 51.01549438074524}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t\t// Calculate the size of the color bar\n\tSizeF size = new SizeF(m_colorBarRect.Width, m_colorBarRect.Height);\n\t// Create a pen to draw the color bar\n\tusing Pen pen = new Pen(Color.CadetBlue);\n\t// Create a brush to draw the color bar\n\tusing Brush brush = new SolidBrush(Color.CadetBlue);\n\t// Draw the color bar\n\tdc.DrawRectangle(pen, m_colorBarRect);\n\t// Draw the color bar\n\tdc.FillRectangle(brush, m_colorBarRect);\n\t// Draw the color bar\n\tif (m_colors.Count == 2) {\n\t\t// Draw the color bar\n\t\tDraw2ColorBar(dc, m_colorBarRect, Orientation.Horizontal, m_percentSet);\n\t}\n\telse if (m_colors.Count == 3) {\n\t\t// Draw the color bar\n\t\tDraw3ColorBar(dc, m_colorBarRect, Orientation.Horizontal, m_percentSet);\n\t}\n\t// Draw the selector\n\tDrawSelector(dc, m_colorBarRect, Orientation.Horizontal, m_percentSet);\n}", "CodeBleu_score": 41.44608001508241}, {"code": "protected void DrawColorBar(Graphics dc){\n\t", "CodeBleu_score": 1.937489352683406}, {"code": "protected void DrawColorBar(Graphics dc){\n\t\t// Create a rectangle for the color bar\n\tRectangleF rect = new RectangleF(0, 0, this.Size.Width, this.Size.Height);\n\n\t// Calculate the number of colors to be used\n\tint numColors = m_colors.Length;\n\tif (numColors == 1) {\n\t\tnumColors = 2;\n\t}\n\n\t// Calculate the width of each color bar segment\n\tfloat width = rect.Width / (float)(numColors - 1);\n\n\t// Draw the color bar segments\n\tfor (int i = 0; i < numColors - 1; i++) {\n\t\tRectangleF r = new RectangleF(rect.Left + (i * width), rect.Top, width, rect.Height);\n\t\tdc.FillRectangle(new SolidBrush(m_colors[i]), r);\n\t}\n\n\t// Draw the selector\n\tfloat percentSet = (float)(m_value - m_minimum) / (float)(m_maximum - m_minimum);\n\tDrawSelector(dc, rect, Orientation.Horizontal, percentSet);\n}", "CodeBleu_score": 27.02785154287472}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (Visible) {\n\t\tif (dropSymbol == SymbolDropDown) {\n\t\t\tdropSymbol = SymbolNormal;\n\t\t\tInvalidate();\n\t\t}\n\t}\n\telse {\n\t\tif (dropSymbol == SymbolNormal) {\n\t\t\tdropSymbol = SymbolDropDown;\n\t\t\tInvalidate();\n\t\t}\n\t}\n}", "CodeBleu_score": 59.314333379063}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (Visible) {\n\t\tif (droppedDown) {\n\t\t\tdropSymbol = SymbolDropDown;\n\t\t} else {\n\t\t\tdropSymbol = SymbolNormal;\n\t\t}\n\t\tInvalidate();\n\t}\n}", "CodeBleu_score": 57.31389039053237}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (Visible) {\n\t\tdropSymbol = SymbolDropDown;\n\t} else {\n\t\tdropSymbol = SymbolNormal;\n\t}\n\tInvalidate();\n}", "CodeBleu_score": 57.07758112900816}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\nif (!edit.Visible) {\nif (Text.Length > 0) {\ng.DrawString(Text, Font, new SolidBrush(ForeColor), 4 + Padding.Left, (Height - Font.Height) / 2);\n} else {\ng.DrawString(Watermark, Font, new SolidBrush(ForeColor), 4 + Padding.Left, (Height - Font.Height) / 2);\n}\n}\n\ng.FillRectangle(new SolidBrush(GetRectColor()), Width - RectSize, 0, RectSize, Height);\n\nif (edit.Visible) {\ng.DrawString(Text, Font, new SolidBrush(GetForeColor()), 4 + Padding.Left, (Height - Font.Height) / 2);\n}\n\nif (ClearButton) {\ng.DrawFontImage(\"e001\", new SolidBrush(GetFillColor()), 0, 0, 16, 16);\n} else {\ng.DrawFontImage(\"e002\", new SolidBrush(GetFillColor()), 0, 0, 16, 16);\n}\n}", "CodeBleu_score": 46.14291757075222}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\n\nif (edit.Visible) {\ng.FillRectangle(new SolidBrush(GetRectColor()), edit.Left, edit.Top, edit.Width, edit.Height);\n\nif (Text.Length > 0) {\ng.DrawString(Text, Font, new SolidBrush(GetForeColor()), edit.Left, edit.Top);\n}\nelse {\ng.DrawString(Watermark, Font, new SolidBrush(GetForeColor()), edit.Left, edit.Top);\n}\n}\nelse {\nif (Text.Length > 0) {\ng.DrawString(Text, Font, new SolidBrush(GetForeColor()), (Width - g.MeasureString(Text, Font).Width) / 2, (Height - g.MeasureString(Text, Font).Height) / 2);\n}\nelse {\ng.DrawString(Watermark, Font, new SolidBrush(GetForeColor()), (Width - g.MeasureString(Watermark, Font).Width) / 2, (Height - g.MeasureString(Watermark, Font).Height) / 2);\n}\n}\n\nif (ClearButton) {\ng.DrawFontImage(Font, GetFillColor(), \"\u00d7\", new Point(Width - Font.Height - 2, (Height - Font.Height) / 2));\n}\nelse {\ng.DrawFontImage(Font, GetFillColor(), \"\u25bc\", new Point(Width - Font.Height - 2, (Height - Font.Height) / 2));\n}\n}", "CodeBleu_score": 41.0014938934174}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!showClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nif (e.X >= (Width - 16)) {\nif (e.X <= (Width - 3)) {\nif (e.Y >= 2) {\nif (e.Y <= (Height - 3)) {\nif (NeedDrawClearButton != true) {\nNeedDrawClearButton = true;\nInvalidate();\n}\n}\n}\n}\n}\n}", "CodeBleu_score": 48.61209798073721}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (Text.IsValid) {\n\t\tif (e.X >= ClientSize.Width - ClearButtonWidth) {\n\t\t\tif (NeedDrawClearButton != true) {\n\t\t\t\tNeedDrawClearButton = true;\n\t\t\t\tInvalidate();\n\t\t\t}\n\t\t} else {\n\t\t\tif (NeedDrawClearButton != false) {\n\t\t\t\tNeedDrawClearButton = false;\n\t\t\t\tInvalidate();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.9542306387097}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!ShowClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nif (ClientRectangle.Contains(e.X, e.Y)) {\nif (NeedDrawClearButton != _mouseInControlBox) {\nNeedDrawClearButton = _mouseInControlBox;\nInvalidate();\n}\n} else {\nif (NeedDrawClearButton != false) {\nNeedDrawClearButton = false;\nInvalidate();\n}\n}\n}", "CodeBleu_score": 49.40965546920397}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t", "CodeBleu_score": 3.209620182859464}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\tif (AutoSize) {\nSize preferredSize = GetPreferredSize(Size.Empty);\nif (preferredSize != Size && !preferredSize.IsEmpty) {\nSize = preferredSize;\n}\n}\nSetDisplayItems();\nOnLayoutCompleted(EventArgs.Empty);\nInvalidate();\n}", "CodeBleu_score": 51.25352080416056}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\tbase.OnLayout(e);\n\tif (AutoSize) {\n\t\tSize prefSize = GetPreferredSize(Size.Empty);\n\t\tif (prefSize.Width != ClientSize.Width || prefSize.Height != ClientSize.Height) {\n\t\t\tSize = prefSize;\n\t\t}\n\t}\n\tSetDisplayItems();\n\tOnLayoutCompleted(EventArgs.Empty);\n\tInvalidate();\n}", "CodeBleu_score": 52.24381762693749}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\n\n// Set the foreground color to the dropdown panel foreground color.\nm_DropdownPanel.SetForegroundSprite(m_DropdownPanel.GetForegroundSprite());\n\n// Set the fill color to white.\nm_DropdownPanel.SetFillColor(new Color(1f, 1f, 1f, 1f));\n\n// Set the rectangle color from the provided style.\nm_DropdownPanel.SetRectColor(uiColor.GetForegroundColor());\n\n// Iterate through all UISymbolButton controls within the component and apply the style color to each of them.\nforeach (UISymbolButton item in GetControls<UISymbolButton>()) {\nitem.SetStyleColor(uiColor);\n}\n}", "CodeBleu_score": 38.186985281481455}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\n\n// Set the foreground color to the dropdown panel foreground color\nm_foregroundColor = m_dropdownPanel.GetForegroundColor();\n\n// Set the rectangle color to the dropdown panel rectangle color\nm_rectangleColor = m_dropdownPanel.GetRectangleColor();\n\n// Iterate through all UISymbolButton controls within the component and apply the style color to each of them\nforeach (UISymbolButton item in this.GetControls<UISymbolButton>()) {\nitem.SetStyleColor(uiColor);\n}\n}", "CodeBleu_score": 48.51273031474326}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.SetStyleColor(uiColor.fillColor, uiColor.foregroundColor);\n\tthis.SetStyleColor(uiColor.rectangleColor);\n\tforeach (UISymbolButton item in this.GetControls<UISymbolButton>()) {\n\t\titem.SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 42.11776207391447}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (this.AnalogMeter == null) return false;\nColor BodyColor = this.AnalogMeter.BodyColor;\nColor DarkerBodyColor = Color.FromArgb(BodyColor.R - 20, BodyColor.G - 20, BodyColor.B - 20);\nLinearGradientBrush LGB = new LinearGradientBrush(rc, BodyColor, DarkerBodyColor, LinearGradientMode.ForwardDiagonal);\nGr.FillEllipse(LGB, rc);\nrc.Inflate(-this.AnalogMeter.DrawRatio, -this.AnalogMeter.DrawRatio);\nLGB.LinearColors = new Color[] { DarkerBodyColor, Color.FromArgb(BodyColor.R - 20, BodyColor.G - 20, BodyColor.B - 20) };\nGr.FillEllipse(LGB, rc);\nreturn true;\n}", "CodeBleu_score": 41.136804643231365}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (this.AnalogMeter == null) return false;\nColor clr = this.AnalogMeter.BodyColor;\nColor clrDark = LBColorManager.StepColor(clr, 35);\nusing (LinearGradientBrush lgb = new LinearGradientBrush(rc, clr, clrDark, 90.0F)) {\nGr.FillEllipse(lgb, rc);\n}\nrc.Inflate(-1.0F, -1.0F);\nusing (LinearGradientBrush lgb = new LinearGradientBrush(rc, clrDark, clr, 90.0F)) {\nGr.FillEllipse(lgb, rc);\n}\nreturn true;\n}", "CodeBleu_score": 39.20961365977076}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (this.AnalogMeter == null) return false;\nColor BodyColor = this.AnalogMeter.BodyColor;\nColor DarkerBodyColor = LBColorManager.StepColor(BodyColor, 100);\nLinearGradientBrush BodyBrush = new LinearGradientBrush(rc, BodyColor, DarkerBodyColor, LinearGradientMode.ForwardDiagonal);\nGr.FillEllipse(BodyBrush, rc);\nrc.Inflate(-this.AnalogMeter.DrawRatio, -this.AnalogMeter.DrawRatio);\nBodyBrush.LinearColors = new Color[] { DarkerBodyColor, BodyColor };\nGr.FillEllipse(BodyBrush, rc);\nreturn true;\n}", "CodeBleu_score": 42.497056663661525}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n\tif (this.AnalogMeter == null) {\n\t\treturn;\n\t}\n\tColor bodyColor = this.AnalogMeter.BodyColor;\n\tColor darkerColor = Color.FromArgb(bodyColor.R - 20, bodyColor.G - 20, bodyColor.B - 20);\n\tRectangleF rc = new RectangleF(this.AnalogMeter.Location.X + 1, this.AnalogMeter.Location.Y + 1, this.AnalogMeter.Width - 2, this.AnalogMeter.Height - 2);\n\tusing (LinearGradientBrush bodyBrush = new LinearGradientBrush(rc, bodyColor, darkerColor, LinearGradientMode.Vertical)) {\n\t\te.Graphics.FillEllipse(bodyBrush, rc);\n\t}\n\trc.Inflate(-1, -1);\n\tusing (LinearGradientBrush borderBrush = new LinearGradientBrush(rc, Color.Transparent, bodyColor, LinearGradientMode.Vertical)) {\n\t\te.Graphics.FillEllipse(borderBrush, rc);\n\t}\n}", "CodeBleu_score": 33.89299706234245}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n\tif (m_AnalogMeter == null)\n\t\treturn;\n\tColor darkerBodyColor = Color.FromArgb(m_AnalogMeter.BodyColor.R - 10, m_AnalogMeter.BodyColor.G - 10, m_AnalogMeter.BodyColor.B - 10);\n\tColor[] colors = { m_AnalogMeter.BodyColor, darkerBodyColor };\n\tfloat[] positions = { 0.0f, 1.0f };\n\tLinearGradientBrush bodyBrush = new LinearGradientBrush(m_AnalogMeter.ClientRectangle, colors[0], colors[1], LinearGradientMode.ForwardDiagonal);\n\tbodyBrush.InterpolationColors = new ColorBlend(3) {\n\t\tColors = colors,\n\t\tPositions = positions\n\t};\n\tGraphics g = CreateGraphics();\n\tg.FillEllipse(bodyBrush, m_AnalogMeter.ClientRectangle);\n\tg.Dispose();\n\tm_AnalogMeter.DrawRatio = m_AnalogMeter.DrawRatio + 0.05f;\n\tif (m_AnalogMeter.DrawRatio > 1.0f)\n\t\tm_AnalogMeter.DrawRatio = 1.0f;\n\tColor[] colors2 = { m_AnalogMeter.BodyColor, m_AnalogMeter.BodyColor };\n\tfloat[] positions2 = { 0.0f, 1.0f };\n\tLinearGradientBrush bodyBrush2 = new LinearGradientBrush(new Rectangle(0, 0, (int)(m_AnalogMeter.ClientRectangle.Width * m_AnalogMeter.DrawRatio), (int)(m_AnalogMeter.ClientRectangle.Height * m_AnalogMeter.DrawRatio)), colors2[0], colors2[1], LinearGradientMode.ForwardDiagonal);\n\tbodyBrush2.InterpolationColors = new ColorBlend(3) {\n\t\tColors = colors2,\n\t\tPositions = positions2\n\t};\n\tg = CreateGraphics();\n\tg.FillEllipse(bodyBrush2, new Rectangle(0, 0, (int)(m_AnalogMeter.ClientRectangle.Width * m_AnalogMeter.DrawRatio), (int)(m_AnalogMeter.ClientRectangle.Height * m_AnalogMeter.DrawRatio)));\n\tg.Dispose();\n}", "CodeBleu_score": 35.91023351440411}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tif (AnalogMeter1 == null) return;\nColor c = AnalogMeter1.BodyColor;\nColor c1 = Color.FromArgb(c.R + 20, c.G + 20, c.B + 20);\nSolidBrush sb = new SolidBrush(c);\nSolidBrush sb1 = new SolidBrush(c1);\nLinearGradientBrush lg = new LinearGradientBrush(AnalogMeter1.ClientRectangle, c, c1, 90);\nGraphics g = e.Graphics;\ng.FillEllipse(sb, AnalogMeter1.ClientRectangle);\ng.FillEllipse(lg, new Rectangle(AnalogMeter1.ClientRectangle.X, AnalogMeter1.ClientRectangle.Y, (int)(AnalogMeter1.ClientRectangle.Width * AnalogMeter1.DrawRatio), AnalogMeter1.ClientRectangle.Height));\ng.FillEllipse(sb1, new Rectangle(AnalogMeter1.ClientRectangle.X, AnalogMeter1.ClientRectangle.Y, (int)(AnalogMeter1.ClientRectangle.Width * AnalogMeter1.DrawRatio), AnalogMeter1.ClientRectangle.Height));\nAnalogMeter1.Invalidate();\n}", "CodeBleu_score": 29.856112111713784}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t\tlock (LoadLock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n\t}\n}", "CodeBleu_score": 62.872958757739326}, {"code": "public static void Load(){\n\t\tlock (ProxySettings.Instance) {\n\t\tProxySettings.Instance.LoadAddresses();\n\t\tProxySettings.Instance.LoadOverrides();\n\t\tProxySettings.Instance.IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n\t}\n}", "CodeBleu_score": 49.2233269615054}, {"code": "public static void Load(){\n\t\tlock (LoadLock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n\t}\n}", "CodeBleu_score": 62.872958757739326}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t\ttry {\n\t\t// Get the proxy override value from the registry.\n\t\t_proxyKey = Registry.CurrentUser.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\", true);\n\t\tif (_proxyKey != null) {\n\t\t\tstring proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\t\t\tif (!string.IsNullOrWhiteSpace(proxyOverride)) {\n\t\t\t\t// Split the override string into an array of individual overrides.\n\t\t\t\tstring[] overrides = proxyOverride.Split(';');\n\t\t\t\tforeach (string overrideEntry in overrides) {\n\t\t\t\t\t// Check if the override entry is for local addresses.\n\t\t\t\t\tif (overrideEntry.Contains(\"<local>\")) {\n\t\t\t\t\t\t// Set the ignore local flag.\n\t\t\t\t\t\tIgnoreLocal = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Add the override to the list if it is not a duplicate.\n\t\t\t\t\t\tif (!Overrides.Contains(overrideEntry)) {\n\t\t\t\t\t\t\tOverrides.Add(overrideEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception) {\n\t\t// If any errors occur, ignore them.\n\t}\n}", "CodeBleu_score": 56.518243226702644}, {"code": "private static void LoadOverrides(){\n\t\t// Get the proxy override value from the registry.\n\tobject proxyOverride = _proxyKey.GetValue(\"ProxyOverride\");\n\t// If the value is null or empty, return.\n\tif (string.IsNullOrWhiteSpace(proxyOverride?.ToString())) {\n\t\treturn;\n\t}\n\t// Split the string into an array of individual overrides.\n\tstring[] overrides = proxyOverride.ToString().Split(';');\n\t// Iterate through each override.\n\tforeach (string overrideEntry in overrides) {\n\t\t// If the entry is null or empty, continue.\n\t\tif (string.IsNullOrWhiteSpace(overrideEntry)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Set the ignore local flag if the entry is \"localhost\".\n\t\tbool ignoreLocal = overrideEntry.Equals(\"localhost\", StringComparison.OrdinalIgnoreCase);\n\t\t// If the entry is not \"localhost\", add it to the list of overrides.\n\t\tif (!ignoreLocal) {\n\t\t\tOverrides.Add(overrideEntry);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.31313870151938}, {"code": "private static void LoadOverrides(){\n\t\ttry {\n\t\t// Get the \"ProxyOverride\" value from a registry key and check if it is null or empty.\n\t\tstring proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\t\tif (string.IsNullOrWhiteSpace(proxyOverride)) return;\n\n\t\t// Split the override string into an array of individual overrides.\n\t\tstring[] overrides = proxyOverride.Split(';');\n\n\t\t// Iterate through each override, setting a flag if local traffic should be ignored and adding unique overrides to the Overrides list.\n\t\tforeach (string overrideString in overrides) {\n\t\t\tstring[] parts = overrideString.Split('=');\n\n\t\t\tif (parts.Length == 2) {\n\t\t\t\tif (parts[0] == \"<local>\") {\n\t\t\t\t\tif (parts[1] == \"bypass\") {\n\t\t\t\t\t\tIgnoreLocal = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!Overrides.Contains(parts[0])) {\n\t\t\t\t\t\tOverrides.Add(parts[0], parts[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\t// Ignore exceptions.\n\t}\n}", "CodeBleu_score": 58.771941180346}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t\tstring line;\n\tList<string> headers = new List<string>();\n\tstring method = null;\n\tstring requestUri = null;\n\tbool isConnect = false;\n\twhile (!string.IsNullOrWhiteSpace((line = await ReadNonBufferedLine()))) {\n\t\tif (method is null) {\n\t\t\tmethod = line.Split(' ')[0].ToUpper();\n\t\t\trequestUri = line.Split(' ')[1];\n\t\t\tif (method == \"CONNECT\") {\n\t\t\t\tisConnect = true;\n\t\t\t\tbaseUri = new UriBuilder(requestUri).Uri;\n\t\t\t\trequestUri = null;\n\t\t\t}\n\t\t} else {\n\t\t\theaders.Add(line);\n\t\t}\n\t}\n\tif (isConnect) {\n\t\tif (!SecureTunnel(baseUri.Host)) {\n\t\t\tawait SendResponseAsync(HttpStatusCode.Forbidden);\n\t\t\treturn null;\n\t\t}\n\t\tawait SendResponseAsync(HttpStatusCode.OK);\n\t\treturn await ReadRequestAsync();\n\t}\n\treturn CreateRequest(method, headers, new Uri(baseUri, requestUri));\n}", "CodeBleu_score": 40.99560117594891}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\tstring command = await ReadNonBufferedLine();\nif (string.IsNullOrWhiteSpace(command)) return null;\n\nList<string> headers = new List<string>();\nstring method = command.Split(' ')[0];\nstring requestUri = command.Split(' ')[1];\nif (baseUri != null) requestUri = baseUri.ToString().TrimEnd('/') + '/' + requestUri.TrimStart('/');\nif (method == \"CONNECT\") {\nif (requestUri.Contains(\":\")) {\nstring[] host = requestUri.Split(':');\nbaseUri = new UriBuilder(\"https\", host[0], int.Parse(host[1])).Uri;\n} else {\nbaseUri = new UriBuilder(\"https\", requestUri).Uri;\n}\nSendResponseAsync(HttpStatusCode.OK, \"OK\", null, null);\nif (SecureTunnel(baseUri.Host)) {\nawait ReadRequestAsync(baseUri);\n}\nreturn null;\n}\nif (method == \"GET\" || method == \"HEAD\") {\nrequestUri += \"?\" + command.Split(' ')[2];\n}\nHttpWebRequest request = CreateRequest(method, headers, new Uri(requestUri));\nreturn request;\n}", "CodeBleu_score": 49.38537657673636}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\tstring description = \"OK\";\n\tvar status = HttpStatusCode.OK;\n\tif (response is HttpWebResponse httpResponse) {\n\t\tstatus = httpResponse.StatusCode;\n\t\tdescription = httpResponse.StatusDescription;\n\t}\n\treturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.26408305370772}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\tstring description = \"OK\";\n\tvar status = HttpStatusCode.OK;\n\tif (response is HttpWebResponse httpResponse) {\n\t\tstatus = httpResponse.StatusCode;\n\t\tdescription = httpResponse.StatusDescription;\n\t}\n\treturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.26408305370772}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\tstring description = \"OK\";\n\tvar status = HttpStatusCode.OK;\n\tif (response is HttpWebResponse httpResponse) {\n\t\tstatus = httpResponse.StatusCode;\n\t\tdescription = httpResponse.StatusDescription;\n\t}\n\treturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.26408305370772}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t\ttry {\n\t\t// Create a TCP/IP client socket.\n\t\t_client = new TcpClient(host, 443);\n\n\t\t// Create an SSL stream that will close the client's stream.\n\t\t_secureStream = new SslStream(_client.GetStream(), false, ValidateServerCertificate);\n\n\t\t// The server name must match the name on the server certificate.\n\t\t_secureStream.AuthenticateAsServer(\n\t\t\tnew X509Certificate2(\n\t\t\t\t\"cert.pfx\",\n\t\t\t\t\"password\"),\n\t\t\tfalse,\n\t\t\tSslProtocols.Tls,\n\t\t\tfalse);\n\n\t\treturn true;\n\t}\n\tcatch (Exception e) {\n\t\tConsole.WriteLine(\"The client could not establish a secure connection.\");\n\t\tConsole.WriteLine(\"Exception: \" + e.Message);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 42.85664318466447}, {"code": "private bool SecureTunnel(string host){\n\ttry {\n// Create an SSL certificate for the host.\n// The certificate is valid for 10 days.\nX509Certificate2 cert = new X509Certificate2();\ncert.CreateSelfSignedCertificate(new X500DistinguishedName(\"CN=localhost\"), DateTime.Now, DateTime.Now.AddDays(10));\n// Create an SSL stream for the host.\n_secureStream = new SslStream(_client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate));\n// Authenticate the stream as a server.\n_secureStream.AuthenticateAsServer(cert);\n}\ncatch (Exception e) {\n// An exception occurred while creating the secure tunnel.\nConsole.WriteLine(\"An exception occurred while creating the secure tunnel.\");\nConsole.WriteLine(e.ToString());\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 45.90951214755551}, {"code": "private bool SecureTunnel(string host){\n\ttry {\n    // Create an SSL certificate for the host.\n    Certificate cert = new Certificate(host);\n    // Create an SSL stream for the host.\n    _secureStream = new SecureStream(cert.GetStream());\n    // Authenticate the server using the generated certificate.\n    _secureStream.AuthenticateAsServer(cert);\n    return true;\n}\ncatch (Exception ex) {\n    Console.WriteLine(ex.Message);\n    return false;\n}\n}", "CodeBleu_score": 45.3677524743895}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tStream responseStream = response.GetResponseStream();\nif (responseStream == null) {\nresponse.Dispose();\nreturn null;\n}\nlong contentLength = response.ContentLength;\nint bufferSize = contentLength > 0 ? (int)contentLength : 4096;\nreturn new StreamContent(responseStream, bufferSize);\n}", "CodeBleu_score": 32.605527278954774}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tif (response == null) {\nthrow new ArgumentNullException(\"response\");\n}\nif (response.ContentLength == 0) {\nresponse.Dispose();\nreturn null;\n}\nelse {\nlong bufferSize = response.ContentLength < 4096 ? response.ContentLength : 4096;\nStream responseStream = response.GetResponseStream();\nreturn new StreamContent(responseStream, bufferSize);\n}\n}", "CodeBleu_score": 44.49753259747774}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tStreamContent streamContent = null;\nStream responseStream = response.GetResponseStream();\nif (responseStream != null) {\n// If the response has content, create a new StreamContent object\n// with a buffer size based on the content length or a default value of 4096 if the content length is not specified.\nlong contentLength = response.ContentLength;\nif (contentLength < 0) {\ncontentLength = 4096;\n}\nstreamContent = new StreamContent(responseStream, (int)contentLength);\n}\nelse {\n// If the response has no content, dispose of the response stream.\nresponse.GetResponseStream().Dispose();\n}\nreturn streamContent;\n}", "CodeBleu_score": 39.420855240011456}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (path == \"\") {\nOpenFileDialog ofd = new OpenFileDialog();\nofd.Filter = \"JSON files (*.json)|*.json\";\nofd.Title = \"Select a JSON file\";\nif (ofd.ShowDialog() == DialogResult.OK) {\npath = ofd.FileName;\n}\n}\nif (path != \"\") {\nActivityConfigJsonPath.Text = path;\ntry {\nLoadActivityConfig(path);\nMessageBox.Show(\"OK\", \"Activity configuration loaded\");\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"Error loading activity configuration\");\n}\n}\n}", "CodeBleu_score": 34.935778911599925}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t", "CodeBleu_score": 3.464990510405845}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nOpenFileDialog openFileDialog = new OpenFileDialog();\nopenFileDialog.Filter = \"JSON files (*.json)|*.json\";\nopenFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nif (openFileDialog.ShowDialog() == DialogResult.OK) {\npath = openFileDialog.FileName;\n}\n}\nif (!string.IsNullOrEmpty(path)) {\nActivityConfigJsonPath.Text = path;\ntry {\nLoadActivityConfig(path);\nMessageBox.Show(\"Configuration loaded successfully!\");\n} catch (Exception ex) {\nMessageBox.Show(\"Error loading configuration:\n\" + ex.ToString());\n}\n}\n}", "CodeBleu_score": 40.75857185690052}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t\tstring json = File.ReadAllText(path);\n\tList<ActivityConfigItem> activityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\tActivityConfigItems.Select(Convert).ToArray();\n\tListActivityConfigItems.BeginUpdate();\n\tListActivityConfigItems.Items.Clear();\n\tListActivityConfigItems.Items.AddRange(activityConfigItems);\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 42.251523216362855}, {"code": "private void LoadActivityConfig(string path){\n\t\ttry {\n\t\tstring json = File.ReadAllText(path);\n\t\tList<ActivityConfigItem> list = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\t\tActivityConfigItems.Select(Convert).ToArray();\n\t\tListActivityConfigItems.BeginUpdate();\n\t\tListActivityConfigItems.Items.Clear();\n\t\tListActivityConfigItems.Items.AddRange(list);\n\t\tListActivityConfigItems.EndUpdate();\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 38.17088613215345}, {"code": "private void LoadActivityConfig(string path){\n\t\ttry {\n\t\tActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\t\tListActivityConfigItems.Items.Clear();\n\t\tListActivityConfigItems.Items.AddRange(ActivityConfigItems);\n\t\tListActivityConfigItems.EndUpdate();\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.Message);\n\t}\n}", "CodeBleu_score": 51.749651256408505}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nSaveFileDialog sfd = new SaveFileDialog();\nsfd.Filter = \"JSON files (*.json)|*.json\";\nsfd.Title = \"Save Activity Configuration\";\nsfd.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nsfd.FileName = \"ActivityConfig.json\";\nsfd.CheckPathExists = true;\nif (sfd.ShowDialog() == DialogResult.OK) {\npath = sfd.FileName;\nActivityConfigJsonPath.Text = path;\n}\nelse {\nreturn;\n}\n}\n\ntry {\nstring json = JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented);\nFile.WriteAllText(path, json);\nMessageBox.Show(\"Activity Configuration saved successfully.\", \"Activity Configuration\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\nMessageBox.Show(\"An error occurred while saving the activity configuration.\n\n\" + ex.ToString(), \"Activity Configuration\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 42.25779819073427}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (path == string.Empty) {\nSaveFileDialog sfd = new SaveFileDialog();\nsfd.Filter = \"JSON Files (*.json)|*.json\";\nsfd.Title = \"Save Activity Configuration\";\nsfd.FileName = \"ActivityConfiguration.json\";\nsfd.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\nif (sfd.ShowDialog() == DialogResult.OK) {\npath = sfd.FileName;\nActivityConfigJsonPath.Text = path;\n}\nelse {\nreturn;\n}\n}\ntry {\nstring json = ActivityConfigItems.SerializeObject(ActiveActivityConfigItems);\nFile.WriteAllText(path, json);\nMessageBox.Show(\"Configuration saved successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 44.29080434681758}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nSaveFileDialog sfd = new SaveFileDialog();\nsfd.Filter = \"JSON files (*.json)|*.json\";\nsfd.Title = \"Save Configuration\";\nif (sfd.ShowDialog() == DialogResult.OK) {\npath = sfd.FileName;\n} else {\nreturn;\n}\n}\ntry {\nstring json = ActivityConfigItems.SerializeObject(Activ\nityConfigItems);\nFile.WriteAllText(path, json);\nMessageBox.Show(\"Configuration saved successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 46.2521852387735}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\tListAllActivity.BeginUpdate();\nListAllActivity.Groups.Clear();\nforeach (ActivityGroup grp in GameData.Activity) {\nListViewGroup lvg = new ListViewGroup(grp.Value.Name);\nListAllActivity.Groups.Add(lvg);\nforeach (ActivityID id in grp.Value.Ids) {\nListViewItem lvi = new ListViewItem(id.ToString());\nlvi.SubItems.Add(GameData.Activity[id].Name);\nListAllActivity.Items.Add(lvi);\n}\n}\nListAllActivity.EndUpdate();\n}", "CodeBleu_score": 41.53513956937317}, {"code": "private void LoadAllActivity(){\n\t// Disable updates to the ListView for efficient bulk processing.\nListAllActivity.BeginUpdate();\n\n// Iterate through each activity group in the GameData.Activity collection.\nforeach (ActivityGroup grp in GameData.Activity) {\n// Create a new group control in the ListView and add items representing the activity IDs and names to this group.\nListViewGroup lvg = new ListViewGroup(grp.Name);\nListAllActivity.Groups.Add(lvg);\nforeach (ActivityID id in grp.Value.Ids) {\nListViewItem lvi = new ListViewItem(id.ToString());\nlvi.Group = lvg;\nListAllActivity.Items.Add(lvi);\n}\n}\n\n// Re-enable updates to the ListView.\nListAllActivity.EndUpdate();\n}", "CodeBleu_score": 39.41468747837396}, {"code": "private void LoadAllActivity(){\n\t\t// Disable updates to the ListView for efficient bulk processing\n\tListAllActivity.BeginUpdate();\n\tListAllActivity.Groups.Clear();\n\n\t// Iterate through each activity group in the GameData.Activity collection\n\tforeach (ActivityGroup grp in GameData.Activity) {\n\t\t// Create a new group control in the ListView\n\t\tListViewGroup lvg = new ListViewGroup(grp.Value.Name);\n\t\tListAllActivity.Groups.Add(lvg);\n\n\t\t// Add items representing the activity IDs and names to this group\n\t\tforeach (int id in grp.Value.Ids) {\n\t\t\tListAllActivity.Items.Add(id.ToString(), grp.Value.Name);\n\t\t}\n\t}\n\n\t// Re-enable updates to the ListView\n\tListAllActivity.EndUpdate();\n}", "CodeBleu_score": 42.1046110248441}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\tif (ListAllActivity.SelectedItems.Count == 0) return;\n\ttry {\n\t\tNUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.ToString());\n\t}\n}", "CodeBleu_score": 57.79718659105434}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\tif (ListAllActivity.SelectedIndex == -1) {\n\t\treturn;\n\t}\n\ttry {\n\t\tNUDActivityId.Value = Convert.ToInt32(ListAllActivity.SelectedItem.ToString());\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(\"Error: \" + ex.ToString());\n\t}\n}", "CodeBleu_score": 45.67441636006539}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\tif (ListAllActivity.SelectedItem == null) {\n\t\treturn;\n\t}\n\ttry {\n\t\tNUDActivityId.Value = Convert.ToInt32(ListAllActivity.SelectedItem.ToString());\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(\"Error: \" + ex.ToString());\n\t}\n}", "CodeBleu_score": 45.89945544126219}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t// Get the file path from the text box\nstring path = TxtDropJsonPath.Text.Trim();\n\n// If the file path is empty, open a file dialog to select a JSON file\nif (string.IsNullOrEmpty(path)) {\nOpenFileDialog fileDialog = new OpenFileDialog();\nfileDialog.Title = \"Select a JSON file\";\nfileDialog.Filter = \"JSON files (*.json)|*.json\";\n\n// If the user selects a file, update the text box with the file path\nif (fileDialog.ShowDialog() == DialogResult.OK) {\npath = fileDialog.FileName;\nTxtDropJsonPath.Text = path;\n}\n}\n\n// Attempt to deserialize and load the banners from the specified file path\ntry {\n// Deserialize the banners from the specified file path\nList<Banner> banners = Json.Deserialize<List<Banner>>(path);\n\n// Load the banners\nBannerManager.LoadBanners(banners);\n\n// Show a success message\nMessageBox.Show(\"Banners loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\n// Show an error message\nMessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 39.83786796851121}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = TxtDropJsonPath.Text.Trim();\n\nif (path == string.Empty) {\nOpenFileDialog ofd = new OpenFileDialog();\nofd.Title = \"Select a JSON file\";\nofd.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n\nif (ofd.ShowDialog() == DialogResult.OK) {\npath = ofd.FileName;\nTxtDropJsonPath.Text = path;\n}\n}\n\nif (path != string.Empty) {\ntry {\nList<Banner> banners = JsonHelper.Deserialize<List<Banner>>(path);\n\nif (banners != null) {\nMessageBox.Show(\"JSON file loaded successfully\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}\n}", "CodeBleu_score": 44.01546427840526}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tstring path = TxtDropJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nOpenFileDialog openFileDialog = new OpenFileDialog();\nopenFileDialog.Filter = \"JSON file (*.json)|*.json\";\nif (openFileDialog.ShowDialog() == DialogResult.OK) {\npath = openFileDialog.FileName;\n}\n}\nif (!string.IsNullOrEmpty(path)) {\nTxtDropJsonPath.Text = path;\ntry {\nList<Banner> banners = Json.DeserializeFromFile<List<Banner>>(path);\nif (banners != null) {\nif (banners.Count > 0) {\nforeach (Banner banner in banners) {\n_banners.Add(banner);\n}\nMessageBox.Show(\"Banners loaded successfully!\");\n} else {\nMessageBox.Show(\"No banners found!\");\n}\n} else {\nMessageBox.Show(\"No banners found!\");\n}\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString());\n}\n}\n}", "CodeBleu_score": 37.66880033318961}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t\nif (dropList == null) return;\n\nif (dropList.Count > 0) {\n\nta.BeginUpdate();\n\nta.Items.Clear();\n\nta.Items.AddRange(dropList.Select(it => it.ToString()).ToArray());\n\nta.SelectedIndex = 0;\n\nta.EndUpdate();\n\n}\n\n}", "CodeBleu_score": 62.5045105195543}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\nif (dropList.Count > 0) {\n\nta.BeginUpdate();\n\nta.Items.Clear();\n\nta.Items.AddRange(dropList.Select(it => it.\nelect(it => it.ToString()).ToArray());\n\nta.SelectedIndex = 0;\n\nta.EndUpdate();\n\n}\n\n}", "CodeBleu_score": 64.94542127346391}, {"code": "private void ShowDropList(List<DropData> dropList){\n\tta.BeginUpdate();\nta.Items.Clear();\n\nif (dropList.Count > 0) {\nta.Items.AddRange(dropList.Select(it => it.\nelect(it => it.ToString()).ToArray());\nta.SelectedIndex = 0;\n}\n\nta.EndUpdate();\n}", "CodeBleu_score": 60.50034376181556}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t\tif (data == null)\n\t\treturn;\n\tif (SelectedDropList.Contains(data))\n\t\tSelectedDropList.Remove(data);\n\tif (dropList.Contains(data))\n\t\tdropList.Remove(data);\n\tif (SelectedDropList.Count > 0)\n\t\tSelectedDropList.SelectedIndex = 0;\n\telse\n\t\tUpdateDropList();\n}", "CodeBleu_score": 29.10033157471829}, {"code": "private void RemoveDrop(DropData data){\n\t", "CodeBleu_score": 1.580193456861919}, {"code": "private void RemoveDrop(DropData data){\n\t", "CodeBleu_score": 1.580193456861919}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t", "CodeBleu_score": 4.520949790988226}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t", "CodeBleu_score": 4.520949790988226}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t", "CodeBleu_score": 4.520949790988226}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\t", "CodeBleu_score": 0.7898236434181539}, {"code": " private void SaveSettings(){\n\t", "CodeBleu_score": 0.7898236434181539}, {"code": " private void SaveSettings(){\n\t", "CodeBleu_score": 0.7898236434181539}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tif (PageTabOrders != null) return PageTabOrders;\n\nPageTabOrders = new List<Tuple<string, bool>>();\n\nstring pageOrders = Settings.Default.PageTabOrders;\nif (pageOrders == \"\") {\nPageTabOrders = new List<Tuple<string, bool>>();\n\nforeach (var page in Pages) {\nPageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n}\n\nreturn PageTabOrders;\n}\n\nstring[] pageOrderStrings = pageOrders.Split(new string[] { \"\\r\n\" }, StringSplitOptions.RemoveEmptyEntries);\nforeach (string pageOrderString in pageOrderStrings) {\nstring[] pageOrder = pageOrderString.Split(new string[] { \"|\" }, StringSplitOptions.RemoveEmptyEntries);\nif (pageOrder.Length != 2) continue;\n\nbool isVisible = true;\nif (pageOrder[1] == \"False\") isVisible = false;\n\nPageTabOrders.Add(new Tuple<string, bool>(pageOrder[0], isVisible));\n}\n\nreturn PageTabOrders;\n}", "CodeBleu_score": 41.72007276183818}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t List<Tuple<string, bool>> pageTabOrders;\n if (PageTabOrders != null) return PageTabOrders;\n pageTabOrders = new List<Tuple<string, bool>>();\n string[] pageOrders = Settings.Default.PageTabOrders.Split('|');\n foreach (string pageOrder in pageOrders) {\n string[] pageOrderSplit = pageOrder.Split(',');\n string pageName = pageOrderSplit[0];\n bool isVisible = bool.Parse(pageOrderSplit[1]);\n pageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n }\n if (pageTabOrders.Count == 0) {\n foreach (string pageName in Pages.Keys) {\n pageTabOrders.Add(new Tuple<string, bool>(pageName, true));\n }\n }\n return pageTabOrders;\n}", "CodeBleu_score": 37.49382095523048}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tif (pageTabOrders != null) return pageTabOrders;\npageTabOrders = new List<Tuple<string, bool>>();\n\n// First, check if there are any page tab orders in the settings.\nif (!settings.Contains(\"PageTabOrders\")) {\n// If not, create a default list with all pages visible.\nforeach (var page in pages) {\npageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n}\nreturn pageTabOrders;\n}\n\n// If there are, read them from the settings.\nvar pageTabOrdersString = settings.GetValue(\"PageTabOrders\", \"\");\nvar pageTabOrdersArray = pageTabOrdersString.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\nforeach (var pageTabOrder in pageTabOrdersArray) {\nvar pageTabOrderArray = pageTabOrder.Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);\nif (pageTabOrderArray.Length != 2) continue;\nvar pageName = pageTabOrderArray[0].Trim();\nvar isVisible = pageTabOrderArray[1].Trim() == \"1\";\npageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n}\nreturn pageTabOrders;\n}", "CodeBleu_score": 32.20183999168367}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t\tif (info == null)\n\t\tthrow new ArgumentNullException(\"info\");\n\tif (info.Data == null)\n\t\tthrow new InvalidOperationException(\"Cannot save a frame with no data.\");\n\tif (info.Data.Length == 0)\n\t\tthrow new InvalidOperationException(\"Cannot save a frame with no data.\");\n\n\t// Log the length of the frame data and the current file stream length\n\tSystem.Diagnostics.Debug.WriteLine(\"Saving frame with length \" + info.Data.Length.ToString() + \" and file stream length \" + _compressStream.Length.ToString());\n\n\t// Write the frame data to the compression stream\n\t_compressStream.WriteBytes(info.Data);\n\n\t// Flush the stream\n\t_compressStream.Flush();\n\n\t// Set the frame data to null\n\tinfo.Data = null;\n\n\t// Add the frame information to the project's frames collection\n\t_project.Frames.Add(info);\n}", "CodeBleu_score": 50.66625297667272}, {"code": "public override void Save(FrameInfo info){\n\t\tif (info.Data == null) {\n\t\treturn;\n\t}\n\tSystem.Diagnostics.Debug.WriteLine(\"Saving frame \" + info.FrameNumber + \" of type \" + info.FrameType);\n\tSystem.Diagnostics.Debug.WriteLine(\"Data length: \" + info.Data.Length);\n\tSystem.Diagnostics.Debug.WriteLine(\"Current file stream length: \" + _compressStream.Length);\n\t_compressStream.WriteBytes(info.Data);\n\t_compressStream.Flush();\n\tinfo.Data = null;\n\tinfo.Length = _compressStream.Length;\n\tinfo.CompressedLength = _compressStream.Length;\n\t_project.Frames.Add(info);\n}", "CodeBleu_score": 51.96981922799148}, {"code": "public override void Save(FrameInfo info){\n\tSystem.Diagnostics.Debug.WriteLine(\"Saving frame {0} of {1}...\", info.Index, info.Project.Frames.Count);\nSystem.Diagnostics.Debug.WriteLine(\"Frame data length: {0}\", info.Data.Length);\nSystem.Diagnostics.Debug.WriteLine(\"File stream length: {0}\", _fileStream.Length);\n_compressStream.WriteBytes(info.Data);\n_compressStream.Flush();\ninfo.Data = null;\ninfo.Project.Frames.Add(info);\n}", "CodeBleu_score": 52.917138248639404}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t\tvar surface = texture.QueryInterface<Surface>();\n\tvar rect = surface.Map();\n\n\t//The pitch is the number of bytes per row.\n\tvar pitch = rect.Pitch;\n\n\t//The offset is the number of bytes to skip at the beginning of each row.\n\tvar offset = pitch * topCut + leftCut * 4;\n\n\t//The height is the number of bytes to copy per row.\n\tvar height = pitch * cursorHeight;\n\n\tswitch (info.Type) {\n\t\tcase 0:\n\t\t\tDrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer, info.Height);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n\t\t\tbreak;\n\t}\n\n\tsurface.Unmap();\n}", "CodeBleu_score": 58.28203673177277}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t", "CodeBleu_score": 8.160576900365587}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t\t//Gets the surface interface of the texture.\n\tvar surface = texture.QueryInterface<Surface>();\n\n\t//Maps the surface for CPU access.\n\tvar rect = surface.Map();\n\n\t//The pitch of the surface.\n\tvar pitch = rect.Pitch;\n\n\t//The dimensions of the surface.\n\tvar width = rect.Width;\n\tvar height = rect.Height;\n\n\t//The cursor type.\n\tvar cursorType = info.Type;\n\n\t//The offset from the top left corner of the surface to the top left corner of the cursor.\n\tvar offsetX = info.HotSpot.X - leftCut;\n\tvar offsetY = info.HotSpot.Y - topCut;\n\n\t//Checks if the cursor is out of bounds.\n\tif (offsetX < 0 || offsetY < 0 || offsetX + cursorWidth > width || offsetY + cursorHeight > height) {\n\t\t//Unmaps the surface.\n\t\tsurface.Unmap();\n\n\t\t//Returns.\n\t\treturn;\n\t}\n\n\t//Checks if the cursor is a color cursor.\n\tif (cursorType == OutputDuplicatePointerShapeInformationType.Color) {\n\t\t//Draws the color cursor.\n\t\tDrawColorCursor(offsetX, offsetY, cursorWidth, cursorHeight, rect, pitch, buffer);\n\t}\n\t//Checks if the cursor is a masked color cursor.\n\telse if (cursorType == OutputDuplicatePointerShapeInformationType.MaskedColor) {\n\t\t//Draws the masked color cursor.\n\t\tDrawMaskedColorCursor(offsetX, offsetY, cursorWidth, cursorHeight, rect, pitch, buffer);\n\t}\n\t//Checks if the cursor is a monochrome cursor.\n\telse if (cursorType == OutputDuplicatePointerShapeInformationType.Monochrome) {\n\t\t//Draws the monochrome cursor.\n\t\tDrawMonochromeCursor(offsetX, offsetY, cursorWidth, cursorHeight, rect, pitch, buffer, height);\n\t}\n\n\t//Unmaps the surface.\n\tsurface.Unmap();\n}", "CodeBleu_score": 45.65288231882988}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.YandexDisk:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 70.00862462461959}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\tcase UploadDestinations.Imgur:\n\t\treturn new ImgurUploader();\n\tcase UploadDestinations.Yandex:\n\t\treturn new YandexUploader();\n\tdefault:\n\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 71.7624922831063}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 71.80852813415206}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t\tif (!IsCapturing) {\n\t\tIsCapturing = true;\n\n\t\tif (UserSettings.All.ForcedGCEnabled) {\n\t\t\tGarbageTimer.Start();\n\t\t}\n\n\t\tusing (var locker = new UserSettingsLocker()) {\n\t\t\tvar token = new CancellationTokenSource();\n\t\t\tvar task = Task.Run(() => CaptureLoop(token.Token), token.Token);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.033901106458437}, {"code": "internal virtual void StartCapture(){\n\t\tif (CaptureTask != null && CaptureTask.Status == TaskStatus.Running) {\n\t\treturn;\n\t}\n\n\tCaptureTask = new Task(CaptureLoop, CancellationTokenSource.Token, TaskCreationOptions.LongRunning);\n\tCaptureTask.Start();\n\n\tif (UserSettings.All.ForceGarbageCollection) {\n\t\tGarbageTimer.Start();\n\t}\n}", "CodeBleu_score": 39.74201765417631}, {"code": "internal virtual void StartCapture(){\n\t\tif (IsCapturing) return;\n\tIsCapturing = true;\n\tHasImpreciseCapture = false;\n\tif (UserSettings.All.ForceGarbageCollection) StartGarbageCollection();\n\tUserSettings.All.Lock();\n\tvar cts = new CancellationTokenSource();\n\tvar token = cts.Token;\n\tTask.Run(() => {\n\t\ttry {\n\t\t\tPrepareCaptureLoop(GetCaptureInterval());\n\t\t}\n\t\tfinally {\n\t\t\tcts.Cancel();\n\t\t\tIsCapturing = false;\n\t\t\tUserSettings.All.Unlock();\n\t\t}\n\t}, token);\n}", "CodeBleu_score": 40.45963380924501}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\tStopwatch sw = new Stopwatch();\nwhile (true) {\nsw.Restart();\nFrame frame = new Frame();\nframe.Add(Capture.CaptureCursor());\nKeyList.Clear();\nDispatcher.Invoke(DispatcherPriority.Render, new Action(() => {\nframe.Add(Capture.CaptureCursor());\n}));\nint frameCount = frame.Count;\nif (sw.ElapsedMilliseconds < interval) {\nThread.Sleep(1);\n}\nsw.Stop();\n}\n}", "CodeBleu_score": 47.02907217848595}, {"code": "private void CaptureWithCursor(int interval){\n\t\tStopwatch sw = new Stopwatch();\n\tsw.Start();\n\twhile (true) {\n\t\tsw.Restart();\n\t\tFrame f = new Frame();\n\t\tf.Cursor = GetCursor();\n\t\tKeyList.Clear();\n\t\tDispatcher.Invoke(() => {\n\t\t\tCapture.Capture(f);\n\t\t\tFrameCount++;\n\t\t});\n\t\tif (sw.ElapsedMilliseconds < interval) {\n\t\t\tThread.Sleep(1);\n\t\t}\n\t\tsw.Stop();\n\t}\n}", "CodeBleu_score": 38.63610182431536}, {"code": "private void CaptureWithCursor(int interval){\n\tStopwatch sw = new Stopwatch();\nwhile (!captureToken.IsCancellationRequested) {\nsw.Restart();\nFrame frame = new Frame();\nframe.Clear();\nframe.AddCursor();\nframe.AddKeys(KeyList.GetPressedKeys());\nframe.Capture();\nframeCount++;\nif (sw.ElapsedMilliseconds < interval) {\nThread.Sleep(1);\n}\nsw.Stop();\n}\n}", "CodeBleu_score": 41.332694360885526}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t} else {\n\t\tif (child != null) {\n\t\t\tif (padding.IsDefault) {\n\t\t\t\tchild.Arrange(new Rect(arrangeSize));\n\t\t\t} else {\n\t\t\t\tchild.Arrange(new Rect(\n\t\t\t\t\tarrangeSize.Width - padding.Left - padding.Right,\n\t\t\t\t\tarrangeSize.Height - padding.Top - padding.Bottom,\n\t\t\t\t\t0,\n\t\t\t\t\t0));\n\t\t\t}\n\t\t}\n\t\treturn arrangeSize;\n\t}\n}", "CodeBleu_score": 41.802279667104294}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\tif (UsingBorderImplementation) {\nreturn base.ArrangeOverride(arrangeSize);\n}\n\nSize childSize = new Size(\nMath.Max(0, arrangeSize.Width - Padding.Left - Padding.Right),\nMath.Max(0, arrangeSize.Height - Padding.Top - Padding.Bottom));\n\nchild.Arrange(new Rect(Padding.Left, Padding.Top, childSize.Width, childSize.Height));\n\nreturn arrangeSize;\n}", "CodeBleu_score": 38.58453035513929}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\tif (UsingBorderImplementation) {\nreturn base.ArrangeOverride(arrangeSize);\n}\n\nif (child != null) {\nRect childRect = new Rect(Padding.Left, Padding.Top, Math.Max(0, arrangeSize.Width - Padding.Horizontal), Math.Max(0, arrangeSize.Height - Padding.Vertical));\nchild.Arrange(childRect);\n}\n\nreturn arrangeSize;\n}", "CodeBleu_score": 28.5804711459774}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t\tbase.OnLostFocus(e);\n\tif (!UpdateOnInput && (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text))) {\n\t\tText = DefaultValue.ToString();\n\t\treturn;\n\t}\n\tIgnoreTextChanges = true;\n\ttry {\n\t\tif (string.IsNullOrEmpty(Text)) {\n\t\t\tText = DefaultValue.ToString();\n\t\t}\n\t\telse {\n\t\t\tvar value = Convert.ToDecimal(Text);\n\t\t\tText = value.ToString(FormatString);\n\t\t}\n\t}\n\tfinally {\n\t\tIgnoreTextChanges = false;\n\t}\n\tif (UpdateOnInput) {\n\t\tUpdateTextFormat();\n\t}\n}", "CodeBleu_score": 32.599034647759474}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t\tbase.OnLostFocus(e);\n\tif (!UpdateOnInput) {\n\t\tif (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n\t\t\tText = DefaultValue.ToString();\n\t\t\treturn;\n\t\t}\n\t}\n\tvar ignore = this.IgnoreTextChanges;\n\tthis.IgnoreTextChanges = true;\n\ttry {\n\t\tvar value = decimal.Parse(Text);\n\t\tif (value > MaxValue) {\n\t\t\tvalue = MaxValue;\n\t\t\tText = value.ToString();\n\t\t}\n\t\tif (value < MinValue) {\n\t\t\tvalue = MinValue;\n\t\t\tText = value.ToString();\n\t\t}\n\t\tif (value == 0) {\n\t\t\tText = \"0\";\n\t\t}\n\t\telse {\n\t\t\tText = value.ToString(FormatString);\n\t\t}\n\t}\n\tfinally {\n\t\tthis.IgnoreTextChanges = ignore;\n\t}\n}", "CodeBleu_score": 39.853003697226306}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t\tbase.OnLostFocus(e);\n\tif (!UpdateOnInput && (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text))) {\n\t\tText = DefaultValue.ToString();\n\t\treturn;\n\t}\n\tvar ignore = IgnoreChanges;\n\tIgnoreChanges = true;\n\ttry {\n\t\tif (string.IsNullOrEmpty(Text)) {\n\t\t\tText = DefaultValue.ToString();\n\t\t} else {\n\t\t\tvar value = Convert.ToDecimal(Text);\n\t\t\tText = value.ToString(TextFormat, CultureInfo.CurrentCulture);\n\t\t}\n\t} finally {\n\t\tIgnoreChanges = ignore;\n\t}\n\tUpdateTextFormat();\n}", "CodeBleu_score": 39.16729745098462}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n\t\te.Handled = true;\n\t\tMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 81.731190273334}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\nMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n}\nbase.OnKeyDown(e);\n}", "CodeBleu_score": 81.58862770183283}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\nMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n}\nbase.OnKeyDown(e);\n}", "CodeBleu_score": 81.58862770183283}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tif (_isCaptured) {\n\t\tif (_isLeftButtonDown) {\n\t\t\tif (_isSelectionMode) {\n\t\t\t\tif (_selectionRect == null) {\n\t\t\t\t\t_selectionRect = new Rectangle();\n\t\t\t\t\t_mainCanvas.Children.Add(_selectionRect);\n\t\t\t\t}\n\t\t\t\t_selectionRect.Stroke = SelectionRectangleStroke;\n\t\t\t\t_selectionRect.StrokeThickness = SelectionRectangleStrokeThickness;\n\t\t\t\t_selectionRect.StrokeDashArray = SelectionRectangleStrokeDashArray;\n\t\t\t\t_selectionRect.Fill = SelectionRectangleFill;\n\t\t\t\t_selectionRect.Width = Math.Abs(_currentPoint.X - _mostDistantPoint.X);\n\t\t\t\t_selectionRect.Height = Math.Abs(_currentPoint.Y - _mostDistantPoint.Y);\n\t\t\t\tCanvas.SetLeft(_selectionRect, Math.Min(_currentPoint.X, _mostDistantPoint.X));\n\t\t\t\tCanvas.SetTop(_selectionRect, Math.Min(_currentPoint.Y, _mostDistantPoint.Y));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (_currentShape != null) {\n\t\t\t\t\t_currentShape.Stroke = Stroke;\n\t\t\t\t\t_currentShape.StrokeThickness = StrokeThickness;\n\t\t\t\t\t_currentShape.StrokeDashArray = StrokeDashArray;\n\t\t\t\t\t_currentShape.Fill = Fill;\n\t\t\t\t\t_currentShape.RadiusX = Radius;\n\t\t\t\t\t_currentShape.RadiusY = Radius;\n\n\t\t\t\t\tif (_currentShape is Arrow arrow) {\n\t\t\t\t\t\tarrow.X1 = RenderRegion.Left - _mostDistantPoint.X;\n\t\t\t\t\t\tarrow.X2 = RenderRegion.Left - Math.Abs(_isRightToLeft ? _mostDistantPoint.X - _currentPoint.X : _currentPoint.X - _mostDistantPoint.X);\n\t\t\t\t\t\tarrow.Y1 = RenderRegion.Top - _mostDistantPoint.Y;\n\t\t\t\t\t\tarrow.Y2 = RenderRegion.Top - Math.Abs(_mostDistantPoint.Y - _currentPoint.Y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tRenderRegion = new Rect(GetBoundedCoordinates(e));\n\t\t\t\t\tCalculateOrientation(_mostDistantPoint, _currentPoint);\n\t\t\t\t\tRenderShape();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 32.74670824996224}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tif (_isCaptured && e.LeftButton == MouseButtonState.Pressed) {\n\t\tif (_isSelectionMode && (_selectedShapes.Count == 0 || (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))) {\n\t\t\t_selectionRect.Width = e.GetPosition(this).X - _selectionRect.Left;\n\t\t\t_selectionRect.Height = e.GetPosition(this).Y - _selectionRect.Top;\n\t\t} else {\n\t\t\tif (_currentPoint == null) {\n\t\t\t\t_currentPoint = e.GetPosition(this);\n\t\t\t\t_mostDistantPoint = _currentPoint;\n\t\t\t} else {\n\t\t\t\tCalculateOrientation(_mostDistantPoint, e.GetPosition(this));\n\t\t\t\tRenderRegion = new Rect(_mostDistantPoint, new Size(_currentPoint.X - _mostDistantPoint.X, _currentPoint.Y - _mostDistantPoint.Y));\n\t\t\t\tRenderShape();\n\t\t\t}\n\t\t}\n\t}\n\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 32.228034683371924}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tif (IsMouseCaptured && e.LeftButton == MouseButtonState.Pressed) {\n\t\tif (SelectedShapes.Count == 0 || (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))) {\n\t\t\tvar current = GetBoundedCoordinates(e);\n\t\t\tvar rect = new Rect(new Point(Math.Min(_startPoint.X, current.X), Math.Min(_startPoint.Y, current.Y)), new Point(Math.Max(_startPoint.X, current.X), Math.Max(_startPoint.Y, current.Y)));\n\n\t\t\tif (_selectionRectangle == null)\n\t\t\t\t_selectionRectangle = new Rectangle { Stroke = Stroke, StrokeThickness = StrokeThickness, StrokeDashArray = StrokeDashArray, Fill = Fill };\n\n\t\t\t_selectionRectangle.Width = rect.Width;\n\t\t\t_selectionRectangle.Height = rect.Height;\n\t\t\tCanvas.SetLeft(_selectionRectangle, rect.Left);\n\t\t\tCanvas.SetTop(_selectionRectangle, rect.Top);\n\t\t\t_mainCanvas.Children.Add(_selectionRectangle);\n\t\t\t_mainCanvas.Children.BringToFront(_selectionRectangle);\n\t\t} else {\n\t\t\tvar current = GetBoundedCoordinates(e);\n\n\t\t\tif (_currentShape == null) {\n\t\t\t\t_mostDistantPoint = current;\n\t\t\t\t_currentPoint = current;\n\t\t\t} else {\n\t\t\t\tCalculateOrientation(_currentPoint, current);\n\t\t\t\tRenderShape();\n\t\t\t}\n\n\t\t\t_currentPoint = current;\n\t\t}\n\t}\n\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 35.93250944521702}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t\tif (sender is Thumb)\n\t\te.Handled = true;\n\n\tdouble newWidth = Math.Max(10, Width + e.HorizontalChange);\n\tdouble newHeight = Math.Max(10, Height + e.VerticalChange);\n\n\tif (Parent is FrameworkElement) {\n\t\tnewWidth = Math.Min(newWidth, ((FrameworkElement)Parent).ActualWidth);\n\t\tnewHeight = Math.Min(newHeight, ((FrameworkElement)Parent).ActualHeight);\n\t}\n\n\tif (newWidth != Width || newHeight != Height) {\n\t\tWidth = newWidth;\n\t\tHeight = newHeight;\n\t\tRaiseManipulatedEvent(AngleDiff);\n\t\tAfterManipulation();\n\t}\n}", "CodeBleu_score": 36.83202220073654}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender is Thumb)\n{\n    e.Handled = true;\n    double width = Math.Max(10, Canvas.GetLeft(this) + ActualWidth - e.HorizontalChange);\n    double height = Math.Max(10, Canvas.GetTop(this) + ActualHeight - e.VerticalChange);\n    width = Math.Min(width, Canvas.GetLeft(this) + Parent.ActualWidth - 10);\n    height = Math.Min(height, Canvas.GetTop(this) + Parent.ActualHeight - 10);\n    Canvas.SetLeft(this, width - ActualWidth);\n    Canvas.SetTop(this, height - ActualHeight);\n    RaiseManipulatedEvent(Math.Atan2(Canvas.GetTop(this) - Canvas.GetTop(Parent), Canvas.GetLeft(this) - Canvas.GetLeft(Parent)) * 180 / Math.PI);\n    AfterManipulation();\n}\n}", "CodeBleu_score": 38.033235529591515}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender is Thumb) {\ne.Handled = true;\n\ndouble newWidth = Math.Max(10, Math.Max(0, AdornedElement.Width + e.HorizontalChange));\ndouble newHeight = Math.Max(10, Math.Max(0, AdornedElement.Height + e.VerticalChange));\n\nAdornedElement.Width = newWidth;\nAdornedElement.Height = newHeight;\n\nRaiseManipulatedEvent(e.HorizontalChange);\nAfterManipulation();\n}\n}", "CodeBleu_score": 24.127945673116876}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = Enumerable.Range(0, 1000).ToList();\n\tShortStringList = new List<string> { \"First\", \"Second\", \"Third\" };\n\tLongStringList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongStringList.Add(Path.GetRandomFileName());\n\t}\n\tSelectedInteger = IntegerList[500];\n\tSelectedText = null;\n}", "CodeBleu_score": 55.914384318167365}, {"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = Enumerable.Range(0, 1000);\n\tShortList = new List<string> { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\" };\n\tIntegerList.Skip(2).First();\n\tLongStringList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongStringList.Add(Path.GetRandomFileName());\n\t}\n\tSelectedInteger = IntegerList.Skip(2).First();\n\tSelectedText = null;\n}", "CodeBleu_score": 63.65917337751269}, {"code": "public ComboBoxesViewModel(){\n\tIntegerList = Enumerable.Range(0, 1000).ToList();\nShortList = new List<string>() { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\" };\nSelectedInteger = IntegerList[2];\nSelectedText = null;\nLongStringList = new List<string>();\nfor (int i = 0; i < 1000; i++) {\nLongStringList.Add(Path.GetRandomFileName());\n}\n}", "CodeBleu_score": 60.09978323891618}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t\tvar dialog = new SampleDialog();\n\tdialog.DataContext = new SampleDialogViewModel();\n\tvar result = await DialogHost.Show(dialog, \"RootDialog\");\n\tDebug.WriteLine(result);\n}", "CodeBleu_score": 18.221271959105163}, {"code": "private async Task RunDialog() {\n\t\tvar sampleDialogViewModel = new SampleDialogViewModel();\n\tvar sampleDialog = new SampleDialog();\n\tsampleDialog.DataContext = sampleDialogViewModel;\n\tsampleDialog.Closing += SampleDialog_Closing;\n\tsampleDialog.Closed += SampleDialog_Closed;\n\tawait DialogHost.Show(sampleDialog, \"RootDialog\");\n\tDebug.WriteLine(sampleDialogViewModel.Result);\n}", "CodeBleu_score": 20.22163855720404}, {"code": "private async Task RunDialog() {\n\t\tvar dialog = new SampleDialog();\n\tvar vm = new SampleDialogViewModel();\n\tdialog.DataContext = vm;\n\tvar result = await DialogHost.Show(dialog, \"RootDialog\");\n\tDebug.WriteLine(result);\n}", "CodeBleu_score": 18.88243488912094}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tPaletteHelper paletteHelper = new PaletteHelper();\n\tTheme theme = paletteHelper.GetTheme();\n\tif (modificationAction != null) {\n\t\tmodificationAction(theme);\n\t}\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 61.28956398502227}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tPaletteHelper paletteHelper = new PaletteHelper();\n\tTheme theme = paletteHelper.GetTheme();\n\tif (modificationAction != null) modificationAction(theme);\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 62.00229423284791}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tPaletteHelper paletteHelper = new PaletteHelper();\n\tTheme theme = paletteHelper.GetTheme();\n\tif (modificationAction != null) {\n\t\tmodificationAction(theme);\n\t}\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 61.28956398502227}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t\tobject? content = Activator.CreateInstance(ContentType);\n\tif (content is FrameworkElement element && DataContext is not null) {\n\t\telement.DataContext = DataContext;\n\t}\n\treturn content;\n}", "CodeBleu_score": 42.42506214395724}, {"code": "private object? CreateContent(){\n\t\tif (Content == null) {\n\t\treturn null;\n\t}\n\tobject? content = Activator.CreateInstance(Content.GetType());\n\tif (content is FrameworkElement element && DataContext != null) {\n\t\telement.DataContext = DataContext;\n\t}\n\treturn content;\n}", "CodeBleu_score": 37.70956050454766}, {"code": "private object? CreateContent(){\n\t\t// Create the content instance.\n\tobject? content = Activator.CreateInstance(ContentType);\n\t// If the content is a FrameworkElement, set its DataContext to the provided data context.\n\tif (content is FrameworkElement fe) {\n\t\tfe.DataContext = DataContext;\n\t}\n\t// Return the content.\n\treturn content;\n}", "CodeBleu_score": 42.01121582956918}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\t// Initialize the Sample4Content with a new SampleProgressDialog.\nSample4Content.Content = new SampleProgressDialog();\n\n// Wait for 3 seconds before setting IsSample4DialogOpen to false, using the current synchronization context to ensure it runs on the UI thread.\nTask.Delay(TimeSpan.FromSeconds(3))\n.ContinueWith(\n(Task _) => {\nIsSample4DialogOpen = false;\n},\nTaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 58.12138955046859}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\n\n// Simulate a long-running task\nTask.Delay(TimeSpan.FromSeconds(3)).ContinueWith(_ => {\nIsSample4DialogOpen = false;\n}, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 48.302521799037834}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\nSample4Content.IsOpen = true;\nTask.Delay(TimeSpan.FromSeconds(3))\n.ContinueWith(t => {\nSample4Content.IsOpen = false;\n}, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 46.82674017530645}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tif (_deviceTriggers == null) {\n\t\treturn;\n\t}\n\n\tforeach (AudioDeviceTrigger trigger in _deviceTriggers) {\n\t\tif (trigger.DeviceID == device.DeviceID && option == trigger.Option) {\n\t\t\ttrigger.Triggered?.Invoke();\n\t\t}\n\t}\n}", "CodeBleu_score": 46.83423684834483}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tif (device == null) {\n\t\treturn;\n\t}\n\n\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Device.Id == device.Id && trigger.Option == option) {\n\t\t\ttrigger.Triggered?.Invoke();\n\t\t}\n\t}\n}", "CodeBleu_score": 59.610760655775344}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Device.ID == device.ID && trigger.Option == option) {\n\t\t\ttrigger.Triggered?.Invoke()\n\t\t}\n\t}\n}", "CodeBleu_score": 56.018002626607164}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\tvar actions = Settings.Get<List<Action>>(_settingsKey);\n\tif (actions == null) return;\n\tactions.SelectMany(a => a.Triggers).ToList().ForEach(_triggerManager.Register);\n}", "CodeBleu_score": 31.662048099303743}, {"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear()\n\tvar actions = Settings.Get<List<Action>>(_settingsKey)\n\tif (actions == null) return\n\tactions.SelectMany(a => a.Triggers).ToList().ForEach(_triggerManager.Register)\n}", "CodeBleu_score": 25.732028605925876}, {"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\tvar actions = Settings.Get(SettingsKey);\n\tif (actions != null) {\n\t\tactions.SelectMany(a => a.Triggers).ToList().ForEach(_triggerManager.Register);\n\t}\n}", "CodeBleu_score": 31.72294767574738}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n\tif (action != null) {\n\t\tif (ConditionProcessor.IsMet(action.Conditions)) {\n\t\t\tTriggerAction(action);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.84487325257986}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n\tif (action != null && ConditionProcessor.IsMet(action.Conditions)) {\n\t\tTriggerAction(action);\n\t}\n}", "CodeBleu_score": 55.49057601716789}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n\tif (action != null) {\n\t\tif (action.Conditions.All(c => ConditionProcessor.IsMet(c))) {\n\t\t\tTriggerAction(action);\n\t\t}\n\t}\n}", "CodeBleu_score": 84.57071373942723}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t", "CodeBleu_score": 3.866313172019029}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet mut mentioned_vars = self.scope_graph.borrow().find_mentioning_vars(name);\nlet poll_vars = mentioned_vars.iter().filter_map(|v| v.as_poll_var());\nfor poll_var in poll_vars {\nlet result = self.scope_graph\n.borrow()\n.evaluate_simplexpr_in_scope(scope_graph.root_index, &poll_var.run_while_expr);\nif let Ok(Some(true)) = result {\nself.script_var_handler.add(poll_var);\n} else {\nself.script_var_handler.stop_for_variable(poll_var.name.clone());\n}\n}\n}", "CodeBleu_score": 22.10383753054038}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet mut mentioned_vars = self.scope_graph.borrow().get_mentioned_vars(name);\nmentioned_vars.retain(|v| v.is_script_var());\nlet mut poll_vars = mentioned_vars.into_iter().filter_map(|v| v.as_poll_var());\nwhile let Some(poll_var) = poll_vars.next() {\nif self.eww_config.get_run_while_mentions_of(poll_var.name.clone()).unwrap_or(true) {\nif let Ok(run_while_expr) = self.eww_config.get_script_var(poll_var.name.clone()) {\nif let Ok(run_while_expr_value) =\nscope_graph.evaluate_simplexpr_in_scope(scope_graph.root_index, &run_while_expr)\n.map(|v| v.as_bool()) {\nif run_while_expr_value {\nself.script_var_handler.add(poll_var.clone());\n} else {\nself.script_var_handler.stop_for_variable(poll_var.name.clone());\n}\n} else {\nerror_handling_ctx.print_error(format!(\n\"Error while evaluating run-while expression for variable `{}`\",\npoll_var.name\n));\n}\n} else {\nerror_handling_ctx.print_error(format!(\n\"Error while retrieving run-while expression for variable `{}`\",\npoll_var.name\n));\n}\n}\n}\n}", "CodeBleu_score": 41.36109882669646}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tlet instance_id = instance_id.to_string();\nlet mut window = self.open_windows.get_mut(&instance_id).ok_or(Error::NoWindowWithThatId)?;\nwindow.close();\nself.window_close_timer_abort_senders.remove(&instance_id);\nlet scope = self.scope_graph.borrow_mut().remove_scope(&instance_id);\nself.instance_id_to_args.remove(&instance_id);\nself.scope_graph.borrow_mut().currently_unused_globals.extend(scope.borrow().currently_unused_globals.clone());\nOk(())\n}", "CodeBleu_score": 46.308488215593854}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tself.window_close_timer_abort_senders.remove(instance_id);\nself.open_windows.remove(instance_id).with_context(|| format!(\"No window with instance ID {}\", instance_id))?;\nself.scope_graph.borrow_mut().remove_scope(instance_id);\nself.instance_id_to_args.remove(instance_id);\nself.scope_graph.borrow().currently_unused_globals.iter().for_each(|unused_var| {\nself.script_var_handler.stop_for_variable(unused_var.clone());\n});\nOk(())\n}", "CodeBleu_score": 51.66354062819789}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tlet mut window_close_timer_abort_senders = self.window_close_timer_abort_senders.borrow_mut();\nif let Some(old_abort_send) = window_close_timer_abort_senders.get(instance_id) {\nold_abort_send.send(());\n}\nwindow_close_timer_abort_senders.remove(instance_id);\n\nlet mut open_windows = self.open_windows.borrow_mut();\nif let Some(eww_window) = open_windows.get_mut(instance_id) {\neww_window.close();\n}\nopen_windows.remove(instance_id);\n\nself.instance_id_to_args.remove(instance_id);\n\nself.scope_graph.borrow_mut().remove_scope(instance_id);\n\nself.script_var_handler.stop_for_variable(instance_id);\n\nself.scope_graph.borrow().currently_unused_globals.iter().cloned().for_each(self.script_var_handler.stop_for_variable);\n\nOk(())\n}", "CodeBleu_score": 57.423945394885465}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tself.log(format!(\"Reloading configuration...\"))?;\nself.script_var_handler.stop_all();\nlet old_handler = std::mem::replace(&mut self.script_var_handler, script_var_handler::ScriptVarHandler::new(config.clone())?);\nold_handler.join_thread();\nself.log(format!(\"New configuration: {:#?}\", config))?;\nself.eww_config = config;\nself.scope_graph.borrow_mut().clear();\nlet initial_state = self.eww_config.generate_initial_state();\nself.scope_graph.borrow_mut().insert(initial_state);\nlet open_window_ids = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().collect::<Vec<_>>();\nlet open_window_args = open_window_ids.iter().map(|instance_id| self.instance_id_to_args.get(instance_id).with_context(|| format!(\"Instance ID {} not found in instance_id_to_args\", instance_id))).collect::<Result<Vec<_>, _>>()?;\nfor window_arguments in open_window_args {\nself.open_window(window_arguments)?;\n}\nOk(())\n}", "CodeBleu_score": 64.71484383227354}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tlet old_handler = std::mem::replace(&mut self.script_var_handler, script_var_handler::ScriptVarHandler::new());\nlog::info!(\"Reloading configuration\");\nold_handler.stop_all();\nstd::mem::drop(old_handler);\nlog::info!(\"Successfully stopped all script variable handlers\");\nlog::info!(\"New configuration: {:#?}\", config);\nself.eww_config = config;\nself.scope_graph.borrow_mut().clear();\nlog::info!(\"Successfully cleared scope graph\");\nlet mut open_window_ids: Vec<WindowId> = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().collect();\nlog::info!(\"Successfully gathered all open window IDs\");\nlet mut open_window_args: Vec<window_arguments::WindowArguments> = open_window_ids.iter().map(|instance_id| self.instance_id_to_args.get(instance_id).with_context(|| format!(\"Failed to get arguments for window {}\", instance_id))).collect::<Result<Vec<_>, _>>()?;\nlog::info!(\"Successfully gathered all open window arguments\");\nself.open_windows.clear();\nself.failed_windows.clear();\nlog::info!(\"Successfully cleared window state\");\nfor (instance_id, args) in open_window_ids.iter().zip(open_window_args.iter()) {\nself.open_window(instance_id, args.clone())?;\n}\nlog::info!(\"Successfully reopened all windows\");\nOk(())\n}", "CodeBleu_score": 61.543265102806764}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t\tself.log.info(\"Reloading configuration...\")\n\tself.script_var_handler.stop_all();\n\n\tlet old_handler = std::mem::replace(&mut self.script_var_handler, ScriptVarHandler::new(self.eww_config.clone()));\n\told_handler.join_thread();\n\n\tself.log.info(\"New configuration:\n{:#?}\", config);\n\tself.eww_config = config;\n\tself.scope_graph.borrow_mut().clear();\n\tself.scope_graph.borrow_mut().update_initial_state(self.eww_config.generate_initial_state());\n\n\tlet instance_ids = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().collect::<Vec<_>>();\n\tfor instance_id in instance_ids {\n\t\tlet window_arguments = self.instance_id_to_args.get(instance_id).with_context(|| format!(\"Failed to retrieve arguments for window {}\", instance_id))?;\n\t\tself.open_window(window_arguments.clone())?;\n\t}\n\n\tOk(())\n}", "CodeBleu_score": 68.59038182205597}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\tlet css = css.as_bytes();\nself.css_provider.load_from_data(css, gtk::STYLE_PROVIDER_PRIORITY_USER);\nOk(())\n}", "CodeBleu_score": 14.02429997507728}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::default().expect(\"Could not connect to a display\");\nlet monitor = get_monitor_from_display(&display, &identifier.unwrap_or(MonitorIdentifier::Primary));\nif let Some(monitor) = monitor {\n    Ok(monitor)\n} else {\n    Err(format!(\"No monitor found for identifier: {}\", identifier.unwrap_or(MonitorIdentifier::Primary)).into())\n}\n}", "CodeBleu_score": 15.738608786332389}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::default().expect(\"Could not get default display\");\nif let Some(monitor) = get_monitor_from_display(&display, &identifier) {\nreturn Ok(Monitor::new(monitor));\n}\nlet monitors: Vec<String> = (0..display.n_monitors()).map(|m| {\nif let Some(model) = display.monitor(m).and_then(|x| x.model()) {\nformat!(\"[{}] {}\", m, model)\n} else {\nformat!(\"{}\", m)\n}\n}).collect();\nlet monitors_str = monitors.join(\"\n\\t\");\nlet identifier_str = format!(\"{:?}\", identifier);\nlet err_msg = format!(\"Could not find monitor with identifier {}\nAvailable monitors:\n\\t{}\", identifier_str, monitors_str);\nErr(Error::new(err_msg))\n}", "CodeBleu_score": 29.10310668768823}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::default().expect(\"Could not get default display\");\nlet monitor = get_monitor_from_display(&display, &identifier.unwrap_or(MonitorIdentifier::Primary));\nif monitor.is_none() {\nlet monitors = get_monitors_from_display(&display);\nlet monitors_str = monitors.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\", \");\nlet identifier_str = identifier.unwrap_or(MonitorIdentifier::Primary).to_string();\nreturn Err(Error::MonitorNotFound { monitors, identifier: identifier_str });\n}\nOk(monitor.unwrap())\n}", "CodeBleu_score": 20.792521039997897}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tlet mut offset = geometry.offset.relative_to(screen_rect.size());\noffset.x += screen_rect.x();\noffset.y += screen_rect.y();\nlet mut size = geometry.size.relative_to(screen_rect.size());\nlet mut anchor_point = geometry.anchor_point.relative_to(screen_rect.size());\nlet mut x = offset.x;\nlet mut y = offset.y;\nx += anchor_point.x.alignment_to_coordinate(size.width);\ny += anchor_point.y.alignment_to_coordinate(size.height);\ngdk::Rectangle::new(x, y, size.width, size.height)\n}", "CodeBleu_score": 57.90664878178773}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tgeometry.offset.relative_to\ngeometry.size.relative_to\ngeometry.anchor_point.x.alignment_to_coordinate\nscreen_rect.x\ngdk::Rectangle::new\nscreen_rect.width\ngeometry.size.relative_to\nscreen_rect.height\nscreen_rect.y\ngeometry.anchor_point.y.alignment_to_coordinate\ngeometry.offset.relative_to\n}", "CodeBleu_score": 39.58259757973334}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tlet mut window_rect = gdk::Rectangle::new(0, 0, 0, 0);\nwindow_rect.x = geometry.offset.relative_to(screen_rect.width);\nwindow_rect.y = geometry.offset.relative_to(screen_rect.height);\nwindow_rect.width = geometry.size.relative_to(screen_rect.width);\nwindow_rect.height = geometry.size.relative_to(screen_rect.height);\nwindow_rect.x += geometry.anchor_point.x.alignment_to_coordinate(window_rect.width);\nwindow_rect.y += geometry.anchor_point.y.alignment_to_coordinate(window_rect.height);\nwindow_rect\n}", "CodeBleu_score": 49.03197878410204}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t\n}", "CodeBleu_score": 12.968031476502267}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t//    if let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n//        if let Ok(diagnostic_str) = stringify_diagnostic(diagnostic) {\n//            eprintln!(\"error: {}\", diagnostic_str);\n//            return;\n//        }\n//    }\n    eprintln!(\"error: {}\", err);\n}", "CodeBleu_score": 7.3107511255808095}, {"code": "pub fn print_error(err: anyhow::Error){\n\t\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(diagnostic_str) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"error: {}\", diagnostic_str);\n\t\t} else {\n\t\t\teprintln!(\"error: {}\", err);\n\t\t}\n\t} else {\n\t\teprintln!(\"error: {}\", err);\n\t}\n}", "CodeBleu_score": 29.786973540210447}, {"code": "pub fn print_error(err: anyhow::Error){\n\t\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(msg) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"error: {}\", msg);\n\t\t} else {\n\t\t\teprintln!(\"error: {}\", err);\n\t\t}\n\t} else {\n\t\teprintln!(\"error: {}\", err);\n\t}\n}", "CodeBleu_score": 29.410413351944097}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t", "CodeBleu_score": 12.666546576762801}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t", "CodeBleu_score": 12.666546576762801}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t", "CodeBleu_score": 12.666546576762801}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\n}", "CodeBleu_score": 11.759821037371573}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\n}", "CodeBleu_score": 11.759821037371573}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t", "CodeBleu_score": 11.710432998417224}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut message_byte_length = [0u8; 4];\nstream_read.read_exact(&mut message_byte_length).await.context\nVec::<u8>::with_capacity\nbincode::deserialize\nraw_message.len\nu32::from_be_bytes\nbincode::deserialize(&raw_message).context\nstream_read.read_exact\nstream_read.read_buf(&mut raw_message).await.context\n}", "CodeBleu_score": 45.81706569052425}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut message_byte_length = [0; 4];\nstream_read.read_exact(&mut message_byte_length).await.context\nVec::<u8>::with_capacity\nbincode::deserialize\nraw_message.len\nu32::from_be_bytes\nbincode::deserialize(&raw_message).context\nstream_read.read_exact\nstream_read.read_buf(&mut raw_message).await.context\n}", "CodeBleu_score": 44.22512853182927}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut message_byte_length = [0; 4];\nstream_read.read_exact(&mut message_byte_length).await.context\nVec::<u8>::with_capacity\nbincode::deserialize\nraw_message.len\nu32::from_be_bytes\nbincode::deserialize(&raw_message).context\nstream_read.read_exact\nstream_read.read_buf(&mut raw_message).await.context\n}", "CodeBleu_score": 44.22512853182927}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\tlet proxy = zbus::fdo::DBusProxy::new(con.clone(), service.clone())?;\nlet mut owner_changes = proxy.receive_name_owner_changed_with_args();\nlet owner = proxy.name_has_owner().await?;\nif owner.is_none() {\nreturn Ok(());\n}\nloop {\nlet args = owner_changes.next().await?;\nif args.new_owner().is_none() {\nreturn Ok(());\n}\n}\n}", "CodeBleu_score": 49.67734841274131}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\n}", "CodeBleu_score": 15.315238213067389}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\tlet proxy = zbus::fdo::DBusProxy::new(con, &service, \"/org/freedesktop/DBus\").await?;\nproxy.receive_name_owner_changed_with_args().await?;\nOk(())\n}", "CodeBleu_score": 26.359448128866443}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow::anyhow!(\"Unsupported export format: {}\", format)),\n\t}\n}", "CodeBleu_score": 65.98069439897252}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::SVG),\n\t\t\"xopp\" => Ok(DocExportFormat::XOPP),\n\t\t\"pdf\" => Ok(DocExportFormat::PDF),\n\t\t_ => Err(anyhow!(\"Unsupported format: {}\", format)),\n\t}\n}", "CodeBleu_score": 57.831509300516196}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow::Error::msg(format!(\"unsupported format: {}\", format))),\n\t}\n}", "CodeBleu_score": 65.29351814468582}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tif path.extension() != Some(OsStr::new(expected_ext)) {\n    return Err(anyhow::anyhow!(\n        \"Expected file with extension \\\"{}\\\", found \\\"{}\\\"\",\n        expected_ext,\n        path.extension().unwrap().to_string_lossy()\n    ));\n}\nOk(())\n}", "CodeBleu_score": 29.283927013744943}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t\n}", "CodeBleu_score": 8.15781770131275}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tif let Some(ext) = path.extension() {\nif ext == expected_ext {\nreturn Ok(());\n}\n}\nErr(anyhow::anyhow!(\n\"Expected file with extension \\\"{}\\\", found \\\"{}\\\"\",\nexpected_ext,\npath.display()\n))\n}", "CodeBleu_score": 29.62420999939304}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.set_name(name_);\n\tlabel_.set_id(id);\n\tlabel_.set_format(config[\"format\"]);\n\tlabel_.set_interval(config[\"interval\"]);\n\tthread_ = [this] {\n\t\twhile (true) {\n\t\t\tauto data = get_data();\n\t\t\tif (data.has_value()) {\n\t\t\t\tlabel_.set_text(data.value());\n\t\t\t\tlabel_.emit();\n\t\t\t}\n\t\t\tsleep_for(label_.get_interval());\n\t\t}\n\t};\n}", "CodeBleu_score": 52.68364203400901}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.reset(new ALabel(config, \"CPU \", \"%\", id, \"{:.1f}\"));\n\tthread_ = [this] {\n\t\twhile (true) {\n\t\t\tauto value = CpuUsage::getCpuUsage();\n\t\t\tlabel_->set_text(value);\n\t\t\tlabel_->emit();\n\t\t\tsleep_for(std::chrono::seconds(this->interval_));\n\t\t}\n\t};\n}", "CodeBleu_score": 56.302404326448794}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.set_name(name_);\n\tlabel_.set_id(id);\n\tlabel_.set_format(config);\n\tlabel_.set_interval(std::chrono::seconds(config[\"interval\"].asUInt()));\n\tthread_ = [this] {\n\t\twhile (true) {\n\t\t\tauto [user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice] = read_cpu_stat();\n\t\t\tauto total = user + nice + system + idle + iowait + irq + softirq + steal;\n\t\t\tauto usage = 100.0 * (total - idle) / total;\n\t\t\tauto data = {{\"percentage\", usage}};\n\t\t\tlabel_.set_data(data);\n\t\t\tsleep_for(label_.interval_);\n\t\t}\n\t};\n}", "CodeBleu_score": 50.169665865161505}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tstruct Tags *tags = static_cast<struct Tags *>(data);\nif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\ntags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 2));\n} else if (strcmp(interface, wl_seat_interface.name) == 0) {\ntags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n}\n}", "CodeBleu_score": 55.72461698350766}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tstruct Tags *tags = static_cast<struct Tags *>(data);\nif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\ntags->status_manager_ =\nstatic_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, version));\n} else if (strcmp(interface, wl_seat_interface.name) == 0) {\ntags->seat_ =\nstatic_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n}\n}", "CodeBleu_score": 56.48323580016997}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tstruct Tags *tags = static_cast<struct Tags *>(data);\nif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0)  {\ntags->status_manager_ =\nstatic_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1));\n}\nif (strcmp(interface, wl_seat_interface.name) == 0)  {\ntags->seat_ =\nstatic_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n}\n}", "CodeBleu_score": 57.32615472254714}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t\t// Extract the request type from the event string up to the first '>' character.\n\tsize_t gt = ev.find_first_of('>');\n\tif (gt == std::string::npos)\n\t\treturn;\n\tstd::string request(ev.substr(0, gt));\n\n\t// Acquire a unique lock on the callback mutex to ensure thread safety.\n\tstd::unique_lock<std::mutex> lock(callbackMutex);\n\n\t// Iterate through registered callbacks and invoke the handler's onEvent method if the event name matches the extracted request type.\n\tfor (auto& handler : handlers) {\n\t\tif (request == handler->requestType)\n\t\t\thandler->onEvent(ev.substr(gt + 1));\n\t}\n}", "CodeBleu_score": 51.340836782819984}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\t// Extract the request type from the event string up to the first '>' character.\n\tstd::size_t pos = ev.find_first_of('>');\n\tstd::string requestType = ev.substr(0, pos);\n\n\t// Acquire a unique lock on the callback mutex to ensure thread safety.\n\tstd::unique_lock<std::mutex> lock(callbackMutex);\n\n\t// Iterate through registered callbacks and invoke the handler's onEvent method if the event name matches the extracted request type.\n\tfor (auto& callback : callbacks) {\n\t\tif (callback.first == requestType) {\n\t\t\tcallback.second->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.36657114989798}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\t// Extract the request type from the event string\n\tstd::string requestType = ev.substr(0, ev.find_first_of('>'));\n\n\t// Acquire a unique lock on the callback mutex to ensure thread safety\n\tstd::unique_lock<std::mutex> lock(callbackMutex);\n\n\t// Iterate through registered callbacks and invoke the handler's onEvent method if the event name matches the extracted request type\n\tfor (auto& pair : callbacks) {\n\t\tif (pair.first == requestType) {\n\t\t\tpair.second->onEvent(ev.substr(ev.find_first_of('>') + 1));\n\t\t}\n\t}\n}", "CodeBleu_score": 52.16861013501344}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\tstd::unique_lock<std::mutex> lock(callbacks_mutex_);\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end();) {\n\t\tif (it->second == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 67.94361386752385}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\tstd::unique_lock<std::mutex> lock(callbacks_mutex_);\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end();) {\n\t\tif (it->first == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 67.8601288036048}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock<std::mutex> lock(callback_mutex_);\n\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end();) {\n\t\tif (it->second == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 67.93436143143109}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\talwaysOn = config[\"always-on\"].asBool();\ndefaultSubmap = config[\"default-submap\"].asString();\n}", "CodeBleu_score": 26.02989940527383}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\talwaysOn = config[\"always-on\"].asBool();\ndefaultSubmap = config[\"default-submap\"].asString();\n}", "CodeBleu_score": 26.02989940527383}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isObject()) {\n\t\tif (config.isMember(\"always-on\")) {\n\t\t\tif (config[\"always-on\"].isBool()) {\n\t\t\t\talways_on_ = config[\"always-on\"].asBool();\n\t\t\t}\n\t\t}\n\t\tif (config.isMember(\"default-submap\")) {\n\t\t\tif (config[\"default-submap\"].isString()) {\n\t\t\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.245083632530104}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(this->window)) {\n\t\treturn std::get<Repr>(this->window);\n\t} else if (std::holds_alternative<ClassAndTitle>(this->window)) {\n\t\tauto &class_and_title = std::get<ClassAndTitle>(this->window);\n\t\tauto workspace = workspace_manager.getWorkspace(class_and_title.workspace_name);\n\t\tif (workspace) {\n\t\t\treturn workspace_manager.getRewrite(class_and_title.workspace_name, class_and_title.class_name, class_and_title.title);\n\t\t} else {\n\t\t\tspdlog::error(\"No such workspace: {}\", class_and_title.workspace_name);\n\t\t\tthrow std::runtime_error(\"No such workspace\");\n\t\t}\n\t} else {\n\t\tspdlog::error(\"WindowCreationPayload::repr called on a payload with an unknown type\");\n\t\tthrow std::runtime_error(\"Unknown type in WindowCreationPayload::repr\");\n\t}\n}", "CodeBleu_score": 47.25984784393461}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(window)) {\n\t\treturn std::get<Repr>(window);\n\t} else if (std::holds_alternative<ClassAndTitle>(window)) {\n\t\tauto &class_and_title = std::get<ClassAndTitle>(window);\n\t\tauto class_and_title_repr = class_and_title.repr();\n\t\tauto workspace_name = workspace_manager.getRewrite(class_and_title_repr);\n\t\treturn class_and_title_repr + \" (\" + workspace_name + \")\";\n\t} else {\n\t\tspdlog::error(\"WindowCreationPayload::repr: Unknown window type\");\n\t\tthrow std::runtime_error(\"WindowCreationPayload::repr: Unknown window type\");\n\t}\n}", "CodeBleu_score": 56.63761346802143}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(window)) {\n\t\treturn std::get<Repr>(window);\n\t} else if (std::holds_alternative<ClassAndTitle>(window)) {\n\t\tauto &class_and_title = std::get<ClassAndTitle>(window);\n\t\tauto &class_name = class_and_title.class_name;\n\t\tauto &title = class_and_title.title;\n\t\tauto workspace_name = workspace_manager.getRewrite(class_name, title);\n\t\treturn fmt::format(\"workspace name: {}\", workspace_name);\n\t} else {\n\t\tspdlog::error(\"window_creation_payload.hpp: WindowCreationPayload::repr: window is neither of type Repr nor of type ClassAndTitle\");\n\t\tthrow std::runtime_error(\"unreachable code path\");\n\t}\n}", "CodeBleu_score": 59.42142984277654}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t\tif (!m_workspacesToCreate.empty()) {\n\t\tauto workspace_data = m_workspacesToCreate.front();\n\t\tauto clients_data = m_clientsToCreate.front();\n\t\tm_workspacesToCreate.pop_front();\n\t\tm_clientsToCreate.pop_front();\n\t\tcreateWorkspace(workspace_data, clients_data);\n\t}\n\tif (m_workspacesToCreate.empty()) {\n\t\tupdateWindowCount();\n\t\tsortWorkspaces();\n\t}\n}", "CodeBleu_score": 57.64127080243271}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t\twhile (!m_workspacesToCreate.empty()) {\n\t\tauto workspace = std::move(m_workspacesToCreate.front());\n\t\tm_workspacesToCreate.pop_front();\n\t\tcreateWorkspace(workspace.first, workspace.second);\n\t}\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 46.403890884513075}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\twhile (!m_workspacesToCreate.empty()) {\n  auto workspace_data = m_workspacesToCreate.front();\n  m_workspacesToCreate.pop_front();\n  auto clients_data = m_workspacesToCreateClients.front();\n  m_workspacesToCreateClients.pop_front();\n  createWorkspace(workspace_data, clients_data);\n}\nupdateWindowCount();\nsortWorkspaces();\n}", "CodeBleu_score": 54.93450881078614}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tauto mpris = static_cast<Mpris*>(data);\nif (mpris == nullptr) {\nspdlog::warn(\"Mpris::onPlayerNameVanished: mpris is nullptr\");\nreturn;\n}\nspdlog::debug(\"Mpris::onPlayerNameVanished: name vanished: {}\", player_name->get_name());\nif (mpris->current_player_ == nullptr) {\nspdlog::warn(\"Mpris::onPlayerNameVanished: current player is nullptr\");\nreturn;\n}\nif (mpris->current_player_->get_name() == player_name->get_name()) {\nspdlog::debug(\"Mpris::onPlayerNameVanished: current player name matches vanished player name\");\nmpris->current_player_ = nullptr;\nmpris->event_box_.set_visible(false);\nmpris->dp.emit();\n}\n}", "CodeBleu_score": 59.88120946899394}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tstatic_cast<Mpris*>\nmanager->dp.emit\nspdlog::debug\nif (player_name->name == mpris->current_player_) {\nmpris->current_player_ = nullptr;\nmpris->event_box_.set_visible(false);\nmpris->dp.emit\n}\n}", "CodeBleu_score": 40.19326888288599}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tauto mpris = static_cast<Mpris*>(data);\nif (!mpris) {\nspdlog::error(\"onPlayerNameVanished: Invalid Mpris instance\");\nreturn;\n}\nspdlog::debug(\"onPlayerNameVanished: {}\", player_name->get_name());\nif (player_name->get_name() == mpris->player_name_) {\nspdlog::debug(\"onPlayerNameVanished: Player name vanished for current player\");\nmpris->player_ = nullptr;\nmpris->event_box_.set_visible(false);\nmpris->dp.emit();\n}\n}", "CodeBleu_score": 66.5176219765451}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\nspdlog::debug(\"Player \\\"{}\\\" paused\", mpris->player.name);\nmpris->dp.emit();\n}", "CodeBleu_score": 68.3986153692668}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t", "CodeBleu_score": 8.466958978055528}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\nspdlog::debug(\"Player {}: Paused\", mpris->name);\nmpris->dp.emit();\n}", "CodeBleu_score": 73.97821605328525}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tspdlog::info(\"initial config for {}\", bar_.bar_id);\n\tauto payload = res.payload;\n\tif (!payload.isObject()) {\n\t\tthrow std::runtime_error(\"Invalid response payload\");\n\t}\n\tif (!payload[\"success\"].asBool()) {\n\t\tauto err = payload[\"error\"].asString();\n\t\tspdlog::error(\"Error getting initial configuration for {}: {}\", bar_.bar_id, err);\n\t\tthrow std::runtime_error(err);\n\t}\n\tauto conf = parseConfig(payload[\"config\"]);\n\tonConfigUpdate(conf);\n}", "CodeBleu_score": 49.20138287709593}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tspdlog::info(\"initial config for {}\", bar_.bar_id);\n\tauto payload = res.payload;\n\tif (!payload.isObject()) {\n\t\tthrow std::runtime_error(\"invalid payload\");\n\t}\n\tif (!payload[\"success\"].asBool()) {\n\t\tauto err = payload[\"error\"];\n\t\tif (!err.isString()) {\n\t\t\tthrow std::runtime_error(\"invalid error\");\n\t\t}\n\t\tthrow std::runtime_error(err.asString());\n\t}\n\tbar_config_ = parseConfig(payload);\n\tonConfigUpdate(bar_config_);\n}", "CodeBleu_score": 56.82352151315043}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tspdlog::info(\"initial config response for {}\", bar_.bar_id);\n\tif (!res.success.asBool()) {\n\t\tauto err = res.payload.get(\"error\", \"\");\n\t\tspdlog::error(\"error in initial config response for {}: {}\", bar_.bar_id, err.asString());\n\t\tthrow std::runtime_error(err.asString());\n\t}\n\tauto payload = res.payload.get(\"config\", \"\");\n\tbar_config_ = parseConfig(payload);\n\tonConfigUpdate(bar_config_);\n}", "CodeBleu_score": 53.52550272986314}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tassert(hooks_);\nassert(!name.empty());\nhooks_->doAction(this, name.c_str());\n}", "CodeBleu_score": 50.020812006672465}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tassert(hooks_);\nassert(!name.empty());\nhooks_->doAction(this, name.c_str());\n}", "CodeBleu_score": 50.020812006672465}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(hooks_);\n\tif (!name.empty()) {\n\t\thooks_->doAction(name.c_str());\n\t}\n}", "CodeBleu_score": 53.62700053056344}]}
