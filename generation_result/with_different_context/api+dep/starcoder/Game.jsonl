{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t", "CodeBleu_score": 3.033744540365542}, {"code": "public static void PreloadDll(string dllName){\n\t\tvar dllPath = Path.Combine(GetDirectedDllDirectory(), dllName);\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadDll(dllPath);\n\t} else {\n\t\tPosix.LoadDll(dllPath);\n\t}\n}", "CodeBleu_score": 32.08217089176705}, {"code": "public static void PreloadDll(string dllName){\n\t\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadDll(dllName);\n\t} else {\n\t\tPosix.LoadDll(dllName);\n\t}\n}", "CodeBleu_score": 24.21366885985437}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileList.Contains(originalPath)) {\n\t\tLogger.Info(\"Skipping previously loaded asset file \" + originalPath);\n\t\treturn;\n\t}\n\tvar assetsFile = new SerializedFile(originalPath, reader);\n\tCheckStrippedVersion(assetsFile);\n\tassetsFileList.Add(assetsFile);\n\tassetsFileListHash.Add(assetsFile.Path, assetsFile.Header.Hash);\n\tLogger.Info(\"Loaded asset file \" + originalPath);\n}", "CodeBleu_score": 28.82985761058876}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileListHash.Contains(originalPath)) {\n\t\treturn;\n\t}\n\n\tassetsFileListHash.Add(originalPath);\n\n\ttry {\n\t\tvar assetsFile = new SerializedFile(originalPath, unityVersion);\n\t\tassetsFileList.Add(assetsFile);\n\n\t\tCheckStrippedVersion(assetsFile);\n\n\t\tvar resourceFileReaders = new List<ResourceFileReader>();\n\t\tvar assetsFileReader = new AssetsFileReader(reader, assetsFile, resourceFileReaders);\n\t\tassetsFileReader.Load();\n\n\t\tassetsFile.resourceFileReaders = resourceFileReaders;\n\t}\n\tcatch (Exception e) {\n\t\tLogger.Error(e.Message);\n\t}\n}", "CodeBleu_score": 40.009020912326555}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileList.Contains(originalPath)) {\n\t\tLogger.Info(\"Skipping already loaded file: \" + originalPath);\n\t\treturn;\n\t}\n\tif (assetsFileListHash.Contains(reader.GetMD5Hash())) {\n\t\tLogger.Info(\"Skipping duplicate file: \" + originalPath);\n\t\treturn;\n\t}\n\tSerializedFile assetsFile = new SerializedFile(originalPath, reader);\n\tCheckStrippedVersion(assetsFile);\n\tassetsFileList.Add(assetsFile);\n\tassetsFileListHash.Add(reader.GetMD5Hash());\n\tresourceFileReaders.Add(assetsFile);\n\tLogger.Info(\"Loading assets file: \" + assetsFile.path);\n\tassetsFile.Load(reader, unityVersion);\n}", "CodeBleu_score": 42.51455490305429}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tvar name = Path.Substring(path.LastIndexOf('/') + 1);\n\tforeach (var child in children) {\n\t\tif (child.Name == name) {\n\t\t\tif (child.Path == path) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 61.208249778269774}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring[] pathSegments = path.Split('/');\n\tstring name = pathSegments[pathSegments.Length - 1];\n\treturn FindChildFrame(name);\n}", "CodeBleu_score": 15.231935645531086}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring[] splitPath = path.Split('/');\n\tstring frameName = splitPath[splitPath.Length - 1];\n\tImportedFrame[] frames = FindChilds(frameName).ToArray();\n\tif (frames.Length == 0) {\n\t\treturn null;\n\t}\n\tImportedFrame frame = frames[0];\n\tstring framePath = frame.Path;\n\tif (framePath == path) {\n\t\treturn frame;\n\t}\n\treturn null;\n}", "CodeBleu_score": 50.33282457934357}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream();\n\tGZipStream gs = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tgs.CopyTo(ms);\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 33.8381789246028}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memoryStream = new MemoryStream();\n\tGZipStream gzipStream = new GZipStream(reader.GetStream(), CompressionMode.Decompress);\n\tgzipStream.CopyTo(memoryStream);\n\tgzipStream.Close();\n\treturn new FileReader(memoryStream);\n}", "CodeBleu_score": 35.519104647011034}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\t// Create a new memory stream to hold the decompressed data.\n\tMemoryStream ms = new MemoryStream();\n\t\n\t// Create a new GZipStream object, using the memory stream as the decompression target.\n\tGZipStream gz = new GZipStream(ms, CompressionMode.Decompress);\n\t\n\t// Read the compressed data from the FileReader object into the GZipStream object.\n\tint bytesRead = 0;\n\tbyte[] buffer = new byte[2048];\n\twhile((bytesRead = reader.Read(buffer, 0, buffer.Length)) > 0) {\n\t\tgz.Write(buffer, 0, bytesRead);\n\t}\n\t\n\t// Close the GZipStream object, which also closes the memory stream.\n\tgz.Close();\n\t\n\t// Create a new FileReader object, using the memory stream as the source.\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 30.607227628416116}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tif (ParseString(commandStrings[i], switchForms))\n\t\t\tcontinue;\n\t\t_nonSwitchStrings.Add(commandStrings[i]);\n\t}\n}", "CodeBleu_score": 27.828964750349417}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tif (ParseString(commandStrings[i], switchForms)) {\n\t\t\t_nonSwitchStrings.Add(commandStrings[i]);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.3131590987575}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tint len = commandStrings.Length;\n\tfor (int i = 0; i < len; i++) {\n\t\tstring commandString = commandStrings[i];\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tcontinue;\n\t\t_nonSwitchStrings.Add(commandString);\n\t}\n}", "CodeBleu_score": 44.16061478984435}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_OutputSize = new Vector2(m_Texture2D.width, m_Texture2D.height);\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = EditorUserBuildSettings.activeBuildTarget.ToString();\n\tthis.m_ImageData = m_Texture2D.GetRawTextureData();\n}", "CodeBleu_score": 33.785814538325724}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.platform;\n\tthis.m_OutputSize = m_Texture2D.GetRawTextureData().Length;\n}", "CodeBleu_score": 34.81505934868853}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.platform;\n\tthis.m_OutputSize = m_Texture2D.GetRawTextureData().Length;\n}", "CodeBleu_score": 34.81505934868853}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue != \"\") {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\telse {\n\t\tstring resultString = \"\";\n\t\tfor (int i = 0; i < result.Count; i++) {\n\t\t\tresultString += result[i];\n\t\t\tif (i < result.Count - 1) {\n\t\t\t\tresultString += \", \";\n\t\t\t}\n\t\t}\n\t\treturn resultString;\n\t}\n}", "CodeBleu_score": 42.32771471020704}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tif (element.FindPropertyRelative(\"active\").boolValue) {\n\t\t\tresult.Add(element.FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tstring resultString = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tresultString += result[i];\n\t\tif (i < result.Count - 1) {\n\t\t\tresultString += \", \";\n\t\t}\n\t}\n\treturn resultString;\n}", "CodeBleu_score": 40.656533746305044}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"m_Enabled\").boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"m_Name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tstring names = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tif (i > 0) {\n\t\t\tnames += \", \";\n\t\t}\n\t\tnames += result[i];\n\t}\n\treturn names;\n}", "CodeBleu_score": 40.566653700494896}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add) {\n\t\tif (sp.arraySize == 0 || !s_ActiveNames.Contains(prop.name)) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, AddProperty, new AddPropertyArgs(sp, prop.name));\n\t\t}\n\t}\n\telse {\n\t\tif (s_ActiveNames.Contains(prop.name)) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, RemoveProperty, new RemovePropertyArgs(sp, prop.name));\n\t\t}\n\t}\n}", "CodeBleu_score": 27.514907222388423}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add) {\n\t\tif (sp.arraySize == 0) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\t\tsp.arraySize++;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").intValue = prop.type;\n\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t});\n\t\t} else if (!s_ActiveNames.Contains(prop.name)) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\t\tsp.arraySize++;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").intValue = prop.type;\n\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t});\n\t\t} else {\n\t\t\tmenu.AddDisabledItem(new GUIContent(prop.name));\n\t\t}\n\t} else {\n\t\tif (sp.arraySize > 0) {\n\t\t\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\t\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue == prop.name) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\t\t\t\tsp.DeleteArrayElementAtIndex(i);\n\t\t\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tmenu.AddDisabledItem(new GUIContent(prop.name));\n\t\t}\n\t}\n}", "CodeBleu_score": 32.75045684387002}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add) {\n\t\tif (!s_ActiveNames.Contains(prop.name)) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, AddProperty, new AddPropertyArgs(sp, prop));\n\t\t}\n\t} else {\n\t\tif (s_ActiveNames.Contains(prop.name)) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, RemoveProperty, new RemovePropertyArgs(sp, prop));\n\t\t}\n\t}\n}", "CodeBleu_score": 24.094036630184863}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\t// Check if the property can be displayed as a Vector3\n\tbool isVector3 = true;\n\tfloat x = sp.FindPropertyRelative(\"x\").floatValue;\n\tfloat y = sp.FindPropertyRelative(\"y\").floatValue;\n\tfloat z = sp.FindPropertyRelative(\"z\").floatValue;\n\tif (Mathf.Approximately(x, y) && Mathf.Approximately(x, z)) {\n\t\tisVector3 = false;\n\t}\n\telse if (Mathf.Approximately(y, z)) {\n\t\tisVector3 = false;\n\t}\n\t// Draw the UI field\n\tEditorGUI.BeginChangeCheck();\n\tif (showXyz) {\n\t\tEditorGUILayout.PropertyField(sp, isVector3);\n\t}\n\telse {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), new GUIContent(\"X\"));\n\t\tif (isVector3) {\n\t\t\tEditorGUI.BeginChangeCheck();\n\t\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"y\"), new GUIContent(\"Y\"));\n\t\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\t\tsp.FindPropertyRelative(\"z\").floatValue = sp.FindPropertyRelative(\"y\").floatValue;\n\t\t\t}\n\t\t\tEditorGUI.BeginChangeCheck();\n\t\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"z\"), new GUIContent(\"Z\"));\n\t\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\t\tsp.FindPropertyRelative(\"y\").floatValue = sp.FindPropertyRelative(\"z\").floatValue;\n\t\t\t}\n\t\t}\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\treturn EditorGUI.EndChangeCheck();\n}", "CodeBleu_score": 35.51083487473715}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t", "CodeBleu_score": 1.5486635295409983}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tEditorGUI.BeginChangeCheck();\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUI.BeginChangeCheck();\n\tEditorGUILayout.PropertyField(sp, showXyz ? new GUIContent(\"Value\") : new GUIContent(\"X\"), showXyz ? EditorStyles.vectorValueField : EditorStyles.numberField);\n\tif (!EditorGUI.EndChangeCheck()) {\n\t\treturn false;\n\t}\n\tif (showXyz) {\n\t\tEditorGUI.indentLevel += 1;\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"y\"), new GUIContent(\"Y\"), EditorStyles.numberField);\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"z\"), new GUIContent(\"Z\"), EditorStyles.numberField);\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUI.indentLevel -= 1;\n\t}\n\tEditorGUILayout.EndHorizontal();\n\tEditorGUILayout.BeginHorizontal();\n\tif (showXyz) {\n\t\tif (GUILayout.Button(\"Single\", EditorStyles.miniButtonLeft)) {\n\t\t\tshowXyz = false;\n\t\t}\n\t\tif (GUILayout.Button(\"Vector3\", EditorStyles.miniButtonRight)) {\n\t\t\tshowXyz = true;\n\t\t}\n\t}\n\telse {\n\t\tif (GUILayout.Button(\"Vector3\", EditorStyles.miniButtonLeft)) {\n\t\t\tshowXyz = true;\n\t\t}\n\t\tif (GUILayout.Button(\"Single\", EditorStyles.miniButtonRight)) {\n\t\t\tshowXyz = false;\n\t\t}\n\t}\n\tEditorGUILayout.EndHorizontal();\n\tEditorGUILayout.EndHorizontal();\n\treturn EditorGUI.EndChangeCheck();\n}", "CodeBleu_score": 34.24346640367779}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial mat = null;\n\tif (baseMat != null) {\n\t\tmat = Get(baseMat, texture, id, props);\n\t\tif (mat != null) {\n\t\t\tmat.m_Count++;\n\t\t\treturn mat;\n\t\t}\n\t}\n\tmat = new Material(baseMat, texture, id, props);\n\ts_Entries.Add(mat);\n\treturn mat;\n}", "CodeBleu_score": 17.40510747219284}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tif (baseMat == null) return null;\n\tif (texture == null) return null;\n\tif (id < 0) return null;\n\tif (props < 0) return null;\n\tint index = FindEntry(baseMat, texture, id, props);\n\tif (index < 0) {\n\t\tindex = AddEntry(baseMat, texture, id, props);\n\t\tif (index < 0) return null;\n\t}\n\treturn m_Entries[index].material;\n}", "CodeBleu_score": 12.804072667382616}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn Material.Add(baseMat, texture, id, props);\n}", "CodeBleu_score": 11.424087473396519}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t", "CodeBleu_score": 1.8215476104057635}, {"code": "public static void Remove(Material customMat){\n\t", "CodeBleu_score": 1.8215476104057635}, {"code": "public static void Remove(Material customMat){\n\t", "CodeBleu_score": 1.8215476104057635}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\tList<ParticleSystem> systems = new List<ParticleSystem>();\n\troot.GetComponentsInChildren<ParticleSystem>(true, systems);\n\tfor (int i = systems.Count - 1; i >= 0; i--) {\n\t\tParticleSystem ps = systems[i];\n\t\tif (!ps.gameObject.GetComponent<UIParticle>() || ps.gameObject.GetComponent<UIParticle>() != this) {\n\t\t\tsystems.RemoveAt(i);\n\t\t}\n\t}\n\tfor (int i = 0; i < systems.Count; i++) {\n\t\tParticleSystem ps = systems[i];\n\t\tif (ps.textureSheetAnimation) {\n\t\t\tps.textureSheetAnimation.enabled = true;\n\t\t\tps.textureSheetAnimation.mode = ParticleSystemAnimationMode.Tile;\n\t\t\tps.textureSheetAnimation.numTilesX = particleCount;\n\t\t\tps.textureSheetAnimation.numTilesY = 1;\n\t\t}\n\t}\n\tRefreshParticles(systems);\n}", "CodeBleu_score": 43.41503694945875}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}, {"code": "private void RefreshParticles(GameObject root){\n\t\tif (root == null)\n\t\treturn;\n\n\tList<ParticleSystem> particles = new List<ParticleSystem>();\n\n\tParticleSystemRenderer[] particleRenderers = root.GetComponentsInChildren<ParticleSystemRenderer>();\n\tforeach (ParticleSystemRenderer particleRenderer in particleRenderers) {\n\t\tParticleSystem particleSystem = particleRenderer.GetComponent<ParticleSystem>();\n\t\tif (particleSystem != null) {\n\t\t\tparticles.Add(particleSystem);\n\t\t}\n\t}\n\n\tforeach (ParticleSystem ps in particles) {\n\t\tif (ps.GetComponentInParent<UIParticle>() != this) {\n\t\t\tps.Clear();\n\t\t\tps.gameObject.SetActive(false);\n\t\t\tparticles.Remove(ps);\n\t\t}\n\t}\n\n\tforeach (ParticleSystem ps in particles) {\n\t\tif (ps.main.simulationSpace == ParticleSystemSimulationSpace.Custom) {\n\t\t\tif (ps.main.customSimulationSpace != transform) {\n\t\t\t\tps.main.customSimulationSpace = transform;\n\t\t\t}\n\t\t}\n\n\t\tif (ps.main.simulationSpace == ParticleSystemSimulationSpace.Local) {\n\t\t\tif (ps.main.customSimulationSpace != transform) {\n\t\t\t\tps.main.customSimulationSpace = transform;\n\t\t\t}\n\t\t}\n\n\t\tif (ps.main.simulationSpace == ParticleSystemSimulationSpace.World) {\n\t\t\tif (ps.main.customSimulationSpace != null) {\n\t\t\t\tps.main.customSimulationSpace = null;\n\t\t\t}\n\t\t}\n\n\t\tif (ps.main.simulationSpace == ParticleSystemSimulationSpace.Local) {\n\t\t\tif (ps.main.customSimulationSpace != transform) {\n\t\t\t\tps.main.customSimulationSpace = transform;\n\t\t\t}\n\t\t}\n\n\t\tif (ps.main.simulationSpace == ParticleSystemSimulationSpace.Custom) {\n\t\t\tif (ps.main.customSimulationSpace != transform) {\n\t\t\t\tps.main.customSimulationSpace = transform;\n\t\t\t}\n\t\t}\n\t}\n\n\tforeach (ParticleSystem ps in particles) {\n\t\tps.Play();\n\t}\n\n\tRefreshParticles(particles);\n}", "CodeBleu_score": 30.612899641464438}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tAssembly currentAssembly = Assembly.GetCallingAssembly();\n\tcontainerBuilder.RegisterAssemblyTypes(currentAssembly).AssignableTo<IColorSwapManager>().As<IColorSwapManager>().SingleInstance();\n}", "CodeBleu_score": 50.839422395407354}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tvar currentAssembly = Assembly.GetCallingAssembly();\n\tcontainerBuilder.RegisterAssemblyTypes(currentAssembly).AssignableTo<IColorSwapManager>().As<IColorSwapManager>().SingleInstance();\n}", "CodeBleu_score": 51.2710305185051}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tcontainerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly()).AssignableTo<IColorSwapManager>().As<IColorSwapManager>().SingleInstance();\ncontainerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly()).AssignableTo<IColorSwapManager>().As<IColorSwapManager>();\ncontainerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly()).AssignableTo<IColorSwapManager>();\n}", "CodeBleu_score": 44.65452852848339}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\n// Set the IP address and port.\n_ipAddress = ipAddress;\n_port = port;\n\n// Wait for the serializer initialization task to complete.\nawait _serializer.InitializeAsync();\n\n// Start a reservation negotiation.\nawait _currentState.NegotiateReservationAsync();\n}", "CodeBleu_score": 39.7319260984128}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t if (ipAddress == null) throw new ArgumentNullException(nameof(ipAddress));\n if (port < 0 || port > 65535) throw new ArgumentOutOfRangeException(nameof(port));\n if (CurrentState != ConnectionState.Disconnected) throw new InvalidOperationException(\"Cannot connect while the connection state is not disconnected.\");\n if (IsConnected) throw new InvalidOperationException(\"Cannot connect while the connection is already connected.\");\n _ipAddress = ipAddress;\n _port = port;\n _state = ConnectionState.Connecting;\n _stateChanged.Invoke(this, new ConnectionStateChangedEventArgs(ConnectionState.Connecting));\n await _serializer.InitializeAsync();\n await NegotiateReservationAsync();\n }", "CodeBleu_score": 41.34873272437187}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t this.ipAddress = ipAddress;\n this.port = port;\n await this.serializer.InitializeAsync(ipAddress, port);\n await this.NegotiateReservationAsync();\n }", "CodeBleu_score": 42.39495649051535}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t", "CodeBleu_score": 1.3969615207900739}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t", "CodeBleu_score": 1.3969615207900739}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tValidate.NotNull(sessionConnectionState, nameof(sessionConnectionState));\nif (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Inactive) {\nLog.Debug(\"Multiplayer session connection state changed to Inactive.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Connecting) {\nLog.Debug(\"Multiplayer session connection state changed to Connecting.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Connected) {\nLog.Debug(\"Multiplayer session connection state changed to Connected.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Disconnecting) {\nLog.Debug(\"Multiplayer session connection state changed to Disconnecting.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Disconnected) {\nLog.Debug(\"Multiplayer session connection state changed to Disconnected.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Synchronizing) {\nLog.Debug(\"Multiplayer session connection state changed to Synchronizing.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Synchronized) {\nLog.Debug(\"Multiplayer session connection state changed to Synchronized.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.SessionEmpty) {\nLog.Debug(\"Multiplayer session connection state changed to SessionEmpty.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.SessionClosed) {\nLog.Debug(\"Multiplayer session connection state changed to SessionClosed.\");\n} else if (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Failed) {\nLog.Debug(\"Multiplayer session connection state changed to Failed.\");\n} else {\nLog.Debug(\"Multiplayer session connection state changed to Unknown.\");\n}\nif (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.Connected) {\nLog.Debug(\"Multiplayer session player name: \" + sessionConnectionState.GetPlayerName());\n}\nConnectionStateChanged?.Invoke(sessionConnectionState);\n}", "CodeBleu_score": 29.61823419640489}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tif (ipAddress == null) throw new ArgumentNullException(nameof(ipAddress));\n\tif (serverPort < 0 || serverPort > 65535) throw new ArgumentOutOfRangeException(nameof(serverPort));\n\n\tawait Task.Run(() => {\n\t\tclient.Start();\n\t\tclient.Connect(ipAddress, serverPort, \"nitrox\");\n\t}).ConfigureAwait(false);\n\n\tawait connectedEvent.WaitOneAsync(2000).ConfigureAwait(false);\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 72.429565031318}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait Task.Run(() => {\n\t\tclient.Start();\n\t\tclient.Connect(ipAddress, serverPort, \"nitrox\");\n\t}).ConfigureAwait(false);\n\tconnectedEvent.WaitOne(2000);\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 76.34507832143481}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\t// Initialize a new LiteNetLibClient\n\tclient = new LiteNetLibClient();\n\t// Wait for a connection event for up to 2000 milliseconds\n\tawait connectedEvent.WaitAsync(2000);\n\t// Reset the connection event\n\tconnectedEvent.Reset();\n\t// Start the client\n\tclient.Start();\n\t// Connect the client to the server\n\tawait client.ConnectAsync(ipAddress, serverPort, \"nitrox\");\n}", "CodeBleu_score": 41.22376074466488}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = CyclopsManager.GetCyclops(id);\n\tif (cyclops == null) {\n\t\treturn;\n\t}\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton == null) {\n\t\treturn;\n\t}\n\tfireSuppButton.StartCooldown();\n\tStartCoroutine(fireSuppButton.subFire.StartFireSuppressionSystem(fireSuppButton.subFire));\n}", "CodeBleu_score": 49.04801461984546}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclopsEntity cyclops = CyclopsManager.GetCyclops(id);\n\tif (cyclops == null) {\n\t\treturn;\n\t}\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton == null) {\n\t\treturn;\n\t}\n\tfireSuppButton.StartCooldown();\n\tcyclops.StartCoroutine(StartFireSuppressionSystem(fireSuppButton.subFire));\n}", "CodeBleu_score": 37.07352614031923}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = Cyclops.GetCyclops(id);\n\tif (cyclops == null) return;\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton == null) return;\n\tfireSuppButton.StartCooldown();\n\tStartCoroutine(fireSuppButton.subFire.StartFireSuppressionSystem(fireSuppButton.subFire));\n}", "CodeBleu_score": 48.66354603132507}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.TryGetIdOrWarn(out int subRootId)) {\n\t\tif (damagePoint.TryGetIndexOrWarn(out int damagePointIndex)) {\n\t\t\tvar packet = new RepairPacket(subRootId, damagePointIndex, repairAmount);\n\t\t\tpacketSender.Send(packet);\n\t\t}\n\t}\n}", "CodeBleu_score": 26.06191225878708}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot == null) {\n\t\tDebug.LogError(\"The SubRoot object was not found.\");\n\t\treturn;\n\t}\n\tif (damagePoint == null) {\n\t\tDebug.LogError(\"The CyclopsDamagePoint object was not found.\");\n\t\treturn;\n\t}\n\tif (repairAmount <= 0) {\n\t\tDebug.LogError(\"The repair amount must be greater than zero.\");\n\t\treturn;\n\t}\n\tif (packetSender == null) {\n\t\tDebug.LogError(\"The packet sender was not found.\");\n\t\treturn;\n\t}\n\tint subRootId = subRoot.TryGetIdOrWarn();\n\tif (subRootId == null) {\n\t\treturn;\n\t}\n\tint damagePointId = damagePoint.TryGetIdOrWarn();\n\tif (damagePointId == null) {\n\t\treturn;\n\t}\n\tRepairCyclopsDamagePointPacket repairCyclopsDamagePointPacket = new RepairCyclopsDamagePointPacket();\n\trepairCyclopsDamagePointPacket.subRootId = subRootId;\n\trepairCyclopsDamagePointPacket.damagePointId = damagePointId;\n\trepairCyclopsDamagePointPacket.repairAmount = repairAmount;\n\tpacketSender.Send(repairCyclopsDamagePointPacket);\n}", "CodeBleu_score": 35.03696372597539}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot == null) {\n\t\treturn;\n\t}\n\tif (!subRoot.TryGetIdOrWarn(out var subRootId)) {\n\t\treturn;\n\t}\n\tvar packet = new RepairPacket();\n\tpacket.subRootId = subRootId;\n\tpacket.damagePoint = damagePoint;\n\tpacket.repairAmount = repairAmount;\n\tpacketSender.Send(packet);\n}", "CodeBleu_score": 31.98623238980072}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n\t\treturn;\n\t}\n\n\tif (subRoot.healthManager.health <= 0) {\n\t\treturn;\n\t}\n\n\tif (info.HasValue) {\n\t\tvar damage = new CyclopsDamageInfoData(subRootId, info.Value.damage, info.Value.position.ToDto(), info.Value.force);\n\t\tvar packet = new CyclopsDamage(damage);\n\t\tpacketSender.Send(packet);\n\t}\n\n\tforeach (int damagePoint in GetActiveDamagePoints(subRoot)) {\n\t\tvar damage = new CyclopsDamageData(subRootId, damagePoint);\n\t\tpacketSender.Send(new CyclopsDamage(damage));\n\t}\n\n\tforeach (CyclopsFireData fire in GetActiveRoomFires(subRoot.GetComponent<SubFire>())) {\n\t\tvar damage = new CyclopsDamageData(subRootId, fire);\n\t\tpacketSender.Send(new CyclopsDamage(damage));\n\t}\n}", "CodeBleu_score": 36.206139692278335}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n\t\treturn;\n\t}\n\n\tif (subRoot.health.health <= 0) {\n\t\treturn;\n\t}\n\n\tCyclopsDamage damage = new CyclopsDamage();\n\tdamage.subRootId = subRootId;\n\n\tif (info.TryGet(out DamageInfo damageInfo)) {\n\t\tdamage.damageInfo = new CyclopsDamageInfoData(damageInfo.damage, damageInfo.attackerId, damageInfo.attackerPosition);\n\t}\n\n\tdamage.activeDamagePoints = GetActiveDamagePoints(subRoot).ToArray();\n\tdamage.activeFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n\n\tpacketSender.Send(damage);\n}", "CodeBleu_score": 46.19118090473772}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n\t\treturn;\n\t}\n\n\tif (subRoot.healthManager.health <= 0) {\n\t\treturn;\n\t}\n\n\tCyclopsDamage damage = new CyclopsDamage();\n\tdamage.subRootId = subRootId;\n\tdamage.health = subRoot.healthManager.health;\n\tdamage.position = subRoot.transform.position.ToDto();\n\n\tif (info.TryGet(out DamageInfo damageInfo)) {\n\t\tdamage.damageInfo = new CyclopsDamageInfoData(damageInfo.sourceId, damageInfo.damageType, damageInfo.damage);\n\t}\n\n\tdamage.activeDamagePoints = GetActiveDamagePoints(subRoot).ToArray();\n\tdamage.activeFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n\n\tpacketSender.Send(damage);\n}", "CodeBleu_score": 48.00537782443843}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject go = GameObject.Find(entity.Id);\n\t\tif (go != null) {\n\t\t\tObject.Destroy(go);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.72241998178755}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity dirtyEntity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(dirtyEntity);\n\n\t\tGameObject gameObject = NitroxEntity.GetObjectFrom(dirtyEntity.Id);\n\n\t\tif (gameObject != null) {\n\t\t\tObject.Destroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.590305949681834}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity dirtyEntity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(dirtyEntity);\n\t\tGameObject gameObject = GameObject.Find(dirtyEntity.Id);\n\t\tif (gameObject != null) {\n\t\t\tGameObject.Destroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.00941885466712}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t\t// Check if the entity has a parent\n\tif (entity.HasParent) {\n\t\t// Get the parent ID\n\t\tuint parentId = entity.Parent.Id;\n\t\t// Check if the parent ID already has an associated list in the dictionary\n\t\tif (!pendingParentEntitiesByParentId.ContainsKey(parentId)) {\n\t\t\t// Create a new list\n\t\t\tList<Entity> newList = new List<Entity>();\n\t\t\t// Add the entity to the list\n\t\t\tnewList.Add(entity);\n\t\t\t// Add the list to the dictionary\n\t\t\tpendingParentEntitiesByParentId.Add(parentId, newList);\n\t\t} else {\n\t\t\t// Get the list associated with the parent ID\n\t\t\tList<Entity> list = pendingParentEntitiesByParentId[parentId];\n\t\t\t// Add the entity to the list\n\t\t\tlist.Add(entity);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.942725352316636}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntitiesByParentId.ContainsKey(entity.ParentEntityId)) {\n\t\tpendingParentEntitiesByParentId[entity.ParentEntityId].Add(entity);\n\t}\n\telse {\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentEntityId, new List<Entity> { entity });\n\t}\n}", "CodeBleu_score": 27.384956610535617}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentEntityId, out var pendingParentEntities)) {\n\t\tpendingParentEntities = new List<Entity>();\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentEntityId, pendingParentEntities);\n\t}\n\tpendingParentEntities.Add(entity);\n}", "CodeBleu_score": 49.7773232381226}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n\t\tif (cooldown <= clawArm.pickupCooldown) {\n\t\t\tBroadcastArmAction(clawArm.techType, clawArm, ExosuitArmAction.START_USE_TOOL, null, null);\n\t\t} else if (cooldown <= clawArm.punchCooldown) {\n\t\t\tBroadcastArmAction(clawArm.techType, clawArm, ExosuitArmAction.ALT_HIT, null, null);\n\t\t} else {\n\t\t\tLog.Error($\"Exosuit claw {clawArm.name} cooldown {cooldown} is greater than pickup {clawArm.pickupCooldown} and punch {clawArm.punchCooldown}\");\n\t\t}\n\t}\n}", "CodeBleu_score": 36.01144857381073}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n\t\tExosuitClawAction action = ExosuitClawAction.NONE;\n\t\tif (cooldown > clawArm.pickupTime) {\n\t\t\taction = ExosuitClawAction.START_USE_TOOL;\n\t\t}\n\t\telse if (cooldown > clawArm.punchTime) {\n\t\t\taction = ExosuitClawAction.ALT_HIT;\n\t\t}\n\t\telse {\n\t\t\tLog.Error(\"Exosuit claw action broadcast failed. Cooldown time is less than pickup or punch time.\");\n\t\t}\n\t\tBroadcastArmAction(clawArm.techType, clawArm, action, null, null);\n\t}\n}", "CodeBleu_score": 53.001780563757706}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n\t\tExosuitArmAction action = ExosuitArmAction.START_USE_TOOL;\n\t\tif (cooldown < clawArm.pickupTime) {\n\t\t\taction = ExosuitArmAction.ALT_HIT;\n\t\t}\n\t\telse if (cooldown < clawArm.pickupTime + clawArm.punchTime) {\n\t\t\taction = ExosuitArmAction.HIT;\n\t\t}\n\t\telse {\n\t\t\tLog.Error(\"Exosuit claw use cooldown exceeded: \" + cooldown);\n\t\t}\n\t\tBroadcastArmAction(TechType.ExosuitClaw, clawArm, action, null, null);\n\t}\n}", "CodeBleu_score": 55.61498774633166}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null || parent == null) return;\n\tif (!gameObject.TryGetIdOrWarn(out var entityId)) return;\n\tif (!parent.TryGetIdOrWarn(out var parentEntityId)) return;\n\tvar metadata = entityMetadataManager.Extract(gameObject);\n\tif (metadata == null) return;\n\tvar entity = new InstalledBatteryEntity {\n\t\tEntityId = entityId,\n\t\tParentEntityId = parentEntityId,\n\t\tMetadata = metadata,\n\t\tTechType = techType.ToDto()\n\t};\n\tpacketSender.Send(new EntitySpawnedByClient(entity));\n}", "CodeBleu_score": 43.104601858989334}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null) {\n\t\tDebug.LogWarning(\"gameObject is null!\");\n\t\treturn;\n\t}\n\tif (parent == null) {\n\t\tDebug.LogWarning(\"parent is null!\");\n\t\treturn;\n\t}\n\tif (techType == TechType.None) {\n\t\tDebug.LogWarning(\"techType is None!\");\n\t\treturn;\n\t}\n\tint entityId = gameObject.GetComponent<EntityBehaviour>().entity.ID;\n\tint parentId = parent.GetComponent<EntityBehaviour>().entity.ID;\n\tif (entityId == 0 || parentId == 0) {\n\t\tDebug.LogWarning(\"entityId or parentId is 0!\");\n\t\treturn;\n\t}\n\tEntityData entityData = entityMetadataManager.Extract(gameObject);\n\tInstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity();\n\tinstalledBatteryEntity.entityId = entityId;\n\tinstalledBatteryEntity.parentId = parentId;\n\tinstalledBatteryEntity.entityData = entityData;\n\tinstalledBatteryEntity.techType = techType;\n\tpacketSender.Send(new EntitySpawnedByClient(installedBatteryEntity));\n}", "CodeBleu_score": 46.258546036277274}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject.TryGetIdOrWarn(out var entityId) && parent.TryGetIdOrWarn(out var parentEntityId)) {\n\t\tvar entityMetadata = entityMetadataManager.Extract(gameObject);\n\t\tvar entitySpawnData = new InstalledBatteryEntity(entityId, parentEntityId, entityMetadata, techType);\n\t\tvar packet = packetSender.Send(new EntitySpawnedByClient(entitySpawnData));\n\t\tif (packet == null) {\n\t\t\tDebug.LogError(\"Failed to create packet for EntitySpawnedByClient\");\n\t\t}\n\t}\n}", "CodeBleu_score": 44.210655907056676}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) {\n\t\tthrow new ArgumentNullException(nameof(gameObject));\n\t}\n\n\tif (gameObject.TryGetComponent(out Pickupable pickupable)) {\n\t\tpickupable.Pickup(techType);\n\t}\n\n\tif (gameObject.TryGetComponent(out RemoteControl remoteControl)) {\n\t\tremoteControl.Remove();\n\t}\n\n\tif (gameObject.TryGetNitroxId(out NitroxId nitroxId)) {\n\t\tLog.Debug(\"[Items] Object {0} has an existing NitroxId {1}\", gameObject, nitroxId);\n\t} else {\n\t\tnitroxId = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\t\tLog.Debug(\"[Items] Object {0} doesn't have a NitroxId, generated {1}\", gameObject, nitroxId);\n\t}\n\n\tgameObject.GetComponent<EntityPositionBroadcaster>().StopWatchingEntity();\n\tInventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, EntityMetadataManager.Instance);\n\tentities.MarkAsSpawned(inventoryItemEntity);\n\tLog.Debug(\"[Items] Picked up {0} with id {1}\", gameObject, nitroxId);\n\tpacketSender.Send(new PickupItem(nitroxId, inventoryItemEntity.ToDto()));\n\tPickingUpObject = null;\n}", "CodeBleu_score": 49.90030837069753}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId nitroxId = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tint classId = gameObject.GetComponent<PrefabIdentifier>().classId;\n\tTechType techType = gameObject.GetComponent<TechTag>()?.type ?? TechType.None;\n\tList<InventoryItemEntity> childEntities = GetPrefabChildren(gameObject, nitroxId, entityMetadataManager).ToList();\n\tint playerId = Player.main.GetComponent<PlayerIdentification>().GetNitroxId();\n\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n\tif (metadata.HasValue) {\n\t\tInventoryItemEntity entity = new InventoryItemEntity(nitroxId, classId, techType.ToDto(), metadata.Value, playerId, childEntities);\n\n\t\tBatteryChildEntityHelper.TryPopulateInstalledBattery(entity);\n\n\t\treturn entity;\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 49.94784075110324}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n\tif (metadata.HasValue) {\n\t\tTechTag techTag = gameObject.GetComponent<TechTag>();\n\t\tTechType techType = (techTag) ? techTag.type : TechType.None;\n\n\t\tList<InventoryItemChildEntity> childEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\t\tInventoryItemEntity entity = new InventoryItemEntity(id, techType.ToDto(), metadata.Value, childEntities, Player.main.TryGetNitroxId());\n\n\t\tBatteryChildEntityHelper.TryPopulateInstalledBattery(entity);\n\n\t\treturn entity;\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 45.841456457521254}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n\tif (metadata.HasValue) {\n\t\tTechTag techTag = gameObject.GetComponent<TechTag>();\n\t\tTechType techType = (techTag) ? techTag.type : TechType.None;\n\n\t\tInventoryItemEntity entity = new InventoryItemEntity(id, techType.ToDto(), metadata.Value);\n\n\t\tentity.children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n\t\tif (gameObject.TryGetComponent<Pickupable>(out Pickupable pickupable)) {\n\t\t\tentity.techType = pickupable.GetTechType();\n\t\t}\n\n\t\tif (Player.main.TryGetNitroxId(out NitroxId nitroxId)) {\n\t\t\tentity.playerId = nitroxId;\n\t\t}\n\n\t\tif (BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, entity)) {\n\t\t\treturn entity;\n\t\t}\n\n\t\treturn entity;\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 57.5552866762336}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\t// Get the player's head\n\t\tGameObject head = transform.Find (\"Head\").gameObject;\n\n\t\t// Make sure the head is visible\n\t\thead.GetComponent<MeshRenderer> ().shadowCastingMode = ShadowCastingMode.On;\n\n\t\t// Instantiate a clone of the body prototype\n\t\tGameObject clone = GameObject.Instantiate (bodyPrototype);\n\n\t\t// Reset the head's shadow casting mode\n\t\thead.GetComponent<MeshRenderer> ().shadowCastingMode = ShadowCastingMode.Off;\n\n\t\t// Deactivate the clone and rename it\n\t\tclone.SetActive (false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\n\t\t// Remove all items held in hand\n\t\tforeach (Transform child in clone.transform) {\n\t\t\tif (child.name.Contains (\"Hand\")) {\n\t\t\t\tchild.gameObject.SetActive (false);\n\t\t\t}\n\t\t}\n\n\t\t// Return the clone\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 45.6834689836396}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tGameObject head = player.head.gameObject;\n\t\tif (head.activeSelf == false) {\n\t\t\thead.SetActive(true);\n\t\t}\n\t\thead.GetComponent<MeshRenderer> ().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\tGameObject clone = Object.Instantiate (bodyPrototype);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\tclone.SetActive (false);\n\t\tforeach (Transform child in clone.transform) {\n\t\t\tif (child.gameObject.name == \"Head\") {\n\t\t\t\tchild.gameObject.SetActive (true);\n\t\t\t} else {\n\t\t\t\tchild.gameObject.SetActive (false);\n\t\t\t}\n\t\t}\n\t\tforeach (Transform child in clone.transform) {\n\t\t\tif (child.gameObject.name == \"LeftHand\" || child.gameObject.name == \"RightHand\") {\n\t\t\t\tforeach (Transform item in child.transform) {\n\t\t\t\t\titem.gameObject.SetActive (false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 35.17430835003626}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\t// Ensure the head is visible\n\t\tif (head.GetComponent<MeshRenderer>().shadowCastingMode == ShadowCastingMode.Off) {\n\t\t\thead.GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.On;\n\t\t}\n\t\t// Instantiate the body prototype\n\t\tGameObject clone = Object.Instantiate(body);\n\t\t// Reset the head's shadow casting mode\n\t\thead.GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.Off;\n\t\t// Deactivate and rename the clone\n\t\tclone.SetActive(false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\t// Remove items held in hand from the clone\n\t\tforeach (GameObject item in clone.transform.Find(\"RightHand\").GetComponentsInChildren<GameObject>()) {\n\t\t\tif (item.name.Contains(\"Item\")) {\n\t\t\t\tObject.DestroyImmediate(item);\n\t\t\t}\n\t\t}\n\t\tforeach (GameObject item in clone.transform.Find(\"LeftHand\").GetComponentsInChildren<GameObject>()) {\n\t\t\tif (item.name.Contains(\"Item\")) {\n\t\t\t\tObject.DestroyImmediate(item);\n\t\t\t}\n\t\t}\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 39.5070783313431}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().FullName);\nbw.Write(Location);\nbw.Write(Metadata);\nbw.Write(Processes);\nbw.Write(Dependencies);\nbw.Write(Incompatibilities);\nbw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 17.40563589658964}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().FullName);\nbw.Write(Location);\nbw.Write(Metadata);\nbw.Write(Processes.ToList());\nbw.Write(Dependencies.ToList());\nbw.Write(Incompatibilities.ToList());\n((ICacheable) this).Save(bw);\nbw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 21.059570783358968}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().FullName);\nbw.Write(Location);\nbw.Write(Metadata);\nbw.Write(Processes.ToList());\nbw.Write(Dependencies.ToList());\nbw.Write(Incompatibilities.ToList());\n((ICacheable) bepInIncompatibility).Save(bw);\nTargettedBepInExVersion.ToString(bw);\n((ICacheable) bepInDependency).Save(bw);\n}", "CodeBleu_score": 29.064315694186977}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tif (pluginAssembly == null) {\n\t\tthrow new ArgumentNullException(nameof(pluginAssembly));\n\t}\n\n\tif (pluginInfo == null) {\n\t\tthrow new ArgumentNullException(nameof(pluginInfo));\n\t}\n\n\t// Get the plugin type\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tif (pluginType == null) {\n\t\tthrow new InvalidOperationException(\"Unable to get plugin type \" + pluginInfo.PluginType);\n\t}\n\n\t// Create an instance of the plugin\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\t// Invoke the plugin load event\n\tPluginLoad?.Invoke(pluginInstance);\n\n\t// Call the load method\n\tpluginInstance.Load();\n\n\t// Return the plugin instance\n\treturn pluginInstance;\n}", "CodeBleu_score": 53.59286086566494}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tif (pluginInfo == null) {\n\t\tthrow new ArgumentNullException(\"pluginInfo\");\n\t}\n\tif (pluginAssembly == null) {\n\t\tthrow new ArgumentNullException(\"pluginAssembly\");\n\t}\n\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tif (pluginType == null) {\n\t\tthrow new InvalidOperationException(string.Format(\"Could not find type {0} in assembly {1}\", pluginInfo.PluginType, pluginAssembly.FullName));\n\t}\n\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tif (pluginInstance == null) {\n\t\tthrow new InvalidOperationException(string.Format(\"Could not create instance of type {0} in assembly {1}\", pluginInfo.PluginType, pluginAssembly.FullName));\n\t}\n\n\t// Invoke the PluginLoad event.\n\tPluginLoadEventArgs pluginLoadEventArgs = new PluginLoadEventArgs(pluginInfo, pluginAssembly, pluginInstance);\n\tOnPluginLoad(pluginLoadEventArgs);\n\n\t// Call the Load method on the plugin instance.\n\tpluginInstance.Load();\n\n\treturn pluginInstance;\n}", "CodeBleu_score": 49.53422086572324}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// Get the plugin type from the assembly\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tif (pluginType == null) {\n\t\tthrow new Exception(\"The plugin type \" + pluginInfo.PluginType + \" could not be found.\");\n\t}\n\n\t// Create an instance of the plugin\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\t// Invoke the plugin load event\n\tPluginLoadEventArgs pluginLoadArgs = new PluginLoadEventArgs(pluginInfo);\n\tpluginInstance.OnPluginLoad(pluginLoadArgs);\n\n\t// Load the plugin\n\tpluginInstance.Load();\n\n\t// Return the plugin instance\n\treturn pluginInstance;\n}", "CodeBleu_score": 53.56187028046631}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tTrampolineMethod = TrampolineHelper.CreateTrampoline(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 86.15516259333384}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tif (signature == null)\n\t\t\tTrampolineMethod = TrampolineHelper.GenerateTrampoline(TrampolinePtr);\n\t\telse\n\t\t\tTrampolineMethod = TrampolineHelper.GenerateTrampoline(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 65.3211426692812}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tif (!IsPrepared) Prepare();\n\t\tif (signature == null) TrampolineMethod = TrampolineHelper.CreateTrampoline(TrampolinePtr);\n\t\telse TrampolineMethod = TrampolineHelper.CreateTrampoline(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 62.93185351049122}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\t// Get the stream from the resources.\n\tStream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"Assets.Resources.Languages.\" + code + \".json\");\n\t// Check if the stream is null.\n\tif (stream == null) {\n\t\t// If it is, throw an exception.\n\t\tthrow new NullReferenceException(\"The language file for the given code could not be found.\");\n\t}\n\t// Deserialize the stream into a dictionary.\n\tDictionary<string, string> dictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t// Check if the dictionary is null.\n\tif (dictionary == null) {\n\t\t// If it is, throw an exception.\n\t\tthrow new JsonException(\"The language file for the given code could not be deserialized.\");\n\t}\n\t// Return the dictionary.\n\treturn dictionary;\n}", "CodeBleu_score": 46.01283543807734}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tStream stream = GetLanguageStream(code);\n\tstring json = new StreamReader(stream).ReadToEnd();\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n}", "CodeBleu_score": 9.193873585177831}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tAssembly assembly = typeof(LocalizationLoader).Assembly;\n\tusing (Stream stream = assembly.GetManifestResourceStream(\"Localization.Languages.\" + code + \".json\")) {\n\t\tif (stream == null) {\n\t\t\tthrow new NullReferenceException(\"Language file not found.\");\n\t\t}\n\t\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\t\tstring json = reader.ReadToEnd();\n\t\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n\t\t}\n\t}\n}", "CodeBleu_score": 22.511039137188156}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tthis.Visit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 43.30958765122572}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tthis.Visit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 43.30958765122572}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tthis.Visit(node);\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 36.961967224704445}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// Visit all expressions in the line's text\n\tvar expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.text);\n\n\t// Retrieve the line ID, if one exists\n\tvar lineID = context.hashtag.text;\n\tif (string.IsNullOrEmpty(lineID)) {\n\t\tthrow new InvalidOperationException($\"Line {context.start.line}:{context.start.column} has no line ID tag.\");\n\t}\n\n\t// Emit a RunLine opcode with the line ID and expression count\n\tthis.compiler.Emit(Opcode.RunLine);\n\tthis.compiler.EmitString(lineID);\n\tthis.compiler.Emit(expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 52.19948637372305}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar expressions = this.GenerateCodeForExpressionsInFormattedText(context.text);\n\n\t// Get the line ID tag, if any\n\tstring lineID = this.compiler.GetLineIDTag(context);\n\n\tif (string.IsNullOrEmpty(lineID)) {\n\t\tthrow new InvalidOperationException($\"Line statement without a line ID tag\");\n\t}\n\n\tthis.compiler.Emit(OpCode.RunLine, lineID, expressions.Count);\n\n\treturn 0;\n}", "CodeBleu_score": 34.27760159592461}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar text = context.text();\n\tvar hashtags = text.hashtag();\n\n\tvar lineIDTag = hashtags.Length == 0 ? null : this.compiler.GetLineIDTag(hashtags[0]);\n\n\t// If we couldn't find a line ID tag, throw an exception\n\tif (lineIDTag == null) {\n\t\tthrow new InvalidOperationException($\"Couldn't find a line ID tag on line {context.Start.Line}\");\n\t}\n\n\t// Generate code for any expressions in the line\n\tvar expressionCount = this.GenerateCodeForExpressionsInFormattedText(text);\n\n\t// Emit a RunLine opcode with the line ID and expression count\n\tthis.compiler.Emit(OpCode.RunLine, lineIDTag, expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 45.38010024687825}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar knownCommandNames = yarnFile.Project.AllKnownCommands.Select(x => x.Name);\n\tvar unknownCommands = yarnFile.AllCommandReferences.Where(x => !knownCommandNames.Contains(x.Name));\n\n\tforeach (var unknownCommand in unknownCommands) {\n\t\tvar diagnostic = Diagnostic.Create(\n\t\t\tDiagnosticIDs.UnknownCommand,\n\t\t\tunknownCommand.Node.ToLocation(),\n\t\t\t$\"Command '{unknownCommand.Name}' is not defined in the project's known commands.\",\n\t\t\tDiagnosticSeverity.Warning,\n\t\t\tDiagnosticSeverity.Warning,\n\t\t\ttrue,\n\t\t\thelpLinkUri: $\"https://github.com/YarnSpinnerTool/YarnSpinner/blob/master/Documentation/YarnSpinner.md#21-command-syntax\"\n\t\t);\n\t\tyield return diagnostic;\n\t}\n}", "CodeBleu_score": 21.64115951475138}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\t// Get the set of all known commands\n\tvar knownCommandNames = yarnFile.NodeNames;\n\n\t// Get the set of all command names used in this file\n\tvar allCommandNames = yarnFile.AllCommandNames;\n\n\t// Get the set of all command names used in this file that are not known\n\tvar unknownCommandNames = allCommandNames.Except(knownCommandNames);\n\n\t// Generate a diagnostic for each unknown command\n\tforeach (var unknownCommandName in unknownCommandNames) {\n\t\tvar diagnostic = Diagnostic.Create(\n\t\t\tDiagnosticDescriptors.UnknownCommand,\n\t\t\tyarnFile.NodeMap[unknownCommandName].Node.Position,\n\t\t\tyarnFile.NodeMap[unknownCommandName].Node.EndPosition,\n\t\t\tunknownCommandName,\n\t\t\tyarnFile.FilePath);\n\t\tyield return diagnostic;\n\t}\n}", "CodeBleu_score": 16.142823464393263}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tforeach (Command command in yarnFile.Commands) {\n\t\tif (command.Name != \"set_global_variable\" && command.Name != \"show_yarn_version\" && command.Name != \"stop_all_yarn_processes\") {\n\t\t\t// If the command isn't a built-in command, check if it's defined in the project's known commands.\n\t\t\tif (command.Name.StartsWith(\"<<\")) {\n\t\t\t\t// If the command is a variable declaration, ignore it.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!commandReference.KnownCommands.Any(c => c.Name == command.Name)) {\n\t\t\t\t// If the command isn't defined in the project's known commands, yield a diagnostic.\n\t\t\t\tvar diagnostic = Diagnostic.Create(\n\t\t\t\t\tnew DiagnosticDescriptor(\n\t\t\t\t\t\t\"YRN0002\",\n\t\t\t\t\t\t\"Unknown command\",\n\t\t\t\t\t\t$\"The command {command.Name} is not defined in the project's known commands.\",\n\t\t\t\t\t\t\"Yarn Spinner\",\n\t\t\t\t\t\tDiagnosticSeverity.Warning,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t),\n\t\t\t\t\tcommand.Node.Start.Line,\n\t\t\t\t\tcommand.Node.Start.Column,\n\t\t\t\t\tcommand.Node.End.Line,\n\t\t\t\t\tcommand.Node.End.Column\n\t\t\t\t);\n\n\t\t\t\tdiagnostic.Properties.Add(\"commandName\", command.Name);\n\t\t\t\tdiagnostic.Properties.Add(\"commandText\", command.Text);\n\t\t\t\tdiagnostic.Properties.Add(\"commandNodeText\", command.Node.Text);\n\n\t\t\t\tyield return diagnostic;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.085916559724932}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n\t\tResolveProvider = false,\n\t};\n}", "CodeBleu_score": 60.275754410207895}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions();\n\toptions.DocumentSelector = DocumentSelectorFactory.Create();\n\toptions.CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix);\n\toptions.ResolveProvider = false;\n\treturn options;\n}", "CodeBleu_score": 49.58037482354772}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions();\n\toptions.DocumentSelector = new DocumentSelector(\n\t\tnew DocumentFilter() {\n\t\t\tPattern = \"**\\\\/*.yarn\"\n\t\t}\n\t);\n\toptions.ResolveProvider = false;\n\toptions.CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix);\n\treturn options;\n}", "CodeBleu_score": 38.10687731648091}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variables.ContainsKey(variableName)) {\n\t\tif (variables[variableName].GetType() == typeof(T)) {\n\t\t\tresult = (T)variables[variableName];\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tthrow new ArgumentException(\"Variable \" + variableName + \" is not of type \" + typeof(T).ToString());\n\t\t}\n\t}\n\telse {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 44.90256690304511}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (!this.variables.ContainsKey(variableName)) {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n\tif (typeof(T).IsAssignableFrom(this.variables[variableName].GetType())) {\n\t\tresult = (T)this.variables[variableName];\n\t\treturn true;\n\t}\n\tthrow new ArgumentException(\"The variable is not of the correct type.\");\n}", "CodeBleu_score": 34.253655820607754}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (this.variables.TryGetValue(variableName, out var value)) {\n\t\tif (value is T variableValue) {\n\t\t\tresult = variableValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(string.Format(\"The variable \\\"{0}\\\" is not of type {1}.\", variableName, typeof(T).Name));\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 49.896788395923316}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\n}", "CodeBleu_score": 3.1620707511852335}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Yarn.Library();\n\tthis.vm = new Yarn.VirtualMachine(library);\n\tthis.library.ImportLibrary(typeof(Yarn.StandardLibrary));\n\tthis.lineParser = new Yarn.LineParser();\n\tthis.lineParser.RegisterMarkerProcessor(\"select\", new Yarn.Unity.DialogueUI.SelectOptionMarkerProcessor(this.library));\n\tthis.lineParser.RegisterMarkerProcessor(\"plural\", new Yarn.Unity.DialogueUI.PluralMarkerProcessor(this.library));\n\tthis.lineParser.RegisterMarkerProcessor(\"ordinal\", new Yarn.Unity.DialogueUI.OrdinalMarkerProcessor(this.library));\n\tnameof(GetNodeVisitCount);\n\tnameof(IsNodeVisited);\n}", "CodeBleu_score": 35.45677694150221}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\n}", "CodeBleu_score": 3.1620707511852335}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\n\tfor (int i = 0; i < this.LoopListBankData.Count; i++) {\n\t\tif (this.LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 64.30444053414}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < this.Count; i++) {\n\t\tif (this[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 60.80241806661129}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < this.LoopListBankData.Count; i++) {\n\t\tif (this.LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 64.30444053414}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.uniqueID = Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 41.87862480907544}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.guid = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 58.76086896726598}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_ID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 58.975190577271654}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tm_GameObject.name = m_PrefabName + \" \" + m_IndexID.ToString();\n\t}\n\tif (m_OnClick != null) {\n\t\tm_OnClick(m_IndexID, content, ClickUniqueID, ClickObject);\n\t}\n}", "CodeBleu_score": 56.6874586801872}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t", "CodeBleu_score": 10.244596408321145}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t", "CodeBleu_score": 10.244596408321145}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\t// Determine the number of items to add.\n\tint numToAdd = 1;\n\tif (int.TryParse(m_InputFieldAddData.text, out numToAdd)) {\n\t\t// Ensure at least one item is added.\n\t\tnumToAdd = Mathf.Max(numToAdd, 1);\n\t} else {\n\t\t// If the input field text could not be parsed as an integer, default to adding one item.\n\t\tnumToAdd = 1;\n\t}\n\n\t// Add random integers between 0 and 10 to the list bank.\n\tfor (int i = 0; i < numToAdd; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 11));\n\t}\n\n\t// Update the total count of the scroll rect.\n\tm_InitOnStart.m_LoopScrollRect.RefreshCells();\n\n\t// Refresh the displayed cells.\n\tm_InitOnStart.m_LoopListBank.GetListLength();\n}", "CodeBleu_score": 45.14987333628781}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint itemCount = 0;\n\tif (int.TryParse(m_InputFieldItemCount.text, out itemCount) == false) {\n\t\titemCount = 1;\n\t}\n\tif (itemCount < 1) {\n\t\titemCount = 1;\n\t}\n\tfor (int i = 0; i < itemCount; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\tm_LoopScrollRect.RefreshCells();\n\tm_LoopListBank.GetListLength();\n}", "CodeBleu_score": 36.7983739196662}, {"code": "private void OnButtonAddDataClickk(){\n\t\t// Parse the input field text to determine how many items to add\n\tint itemsToAdd = 0;\n\tint.TryParse(m_InputFieldAddData.text, out itemsToAdd);\n\titemsToAdd = Mathf.Max(itemsToAdd, 1);\n\n\t// Add the specified number of random integers to the list bank\n\tfor (int i = 0; i < itemsToAdd; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\n\t// Update the total count of the scroll rect\n\tm_ScrollRect.content.sizeDelta = new Vector2(m_ScrollRect.content.sizeDelta.x, m_ListBank.GetListLength() * m_ListBank.m_CellHeight);\n\n\t// Refresh the displayed cells\n\tm_LoopScrollRect.RefreshCells();\n}", "CodeBleu_score": 46.05630875388631}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\tif (m_Content.ChildCount != m_TempContent.ChildCount) {\n\t\tDebug.LogError(\"Content pool does not have the expected number of children\");\n\t}\n\tif (m_StartDeleteIndex < m_EndDeleteIndex) {\n\t\tfor (int i = m_StartDeleteIndex; i < m_EndDeleteIndex; ++i) {\n\t\t\tm_Content.ReturnObject(m_TempContent[i]);\n\t\t}\n\t\tm_StartDeleteIndex = m_EndDeleteIndex = 0;\n\t}\n}", "CodeBleu_score": 20.014659733572124}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_TempContent != null) {\n\t\tif (m_TempContent.GetChildCount() != m_TempContentCount) {\n\t\t\tDebug.LogError(\"ClearTempPool: Temp content has \" + m_TempContent.GetChildCount() + \" children, but expected \" + m_TempContentCount);\n\t\t}\n\t\tif (m_TempContentStartIndex != -1) {\n\t\t\tfor (int i = 0; i < m_TempContentStartIndex; i++) {\n\t\t\t\tm_TempContent.ReturnObject(m_TempContent.GetChild(i));\n\t\t\t}\n\t\t\tm_TempContentStartIndex = -1;\n\t\t}\n\t\tif (m_TempContentEndIndex != -1) {\n\t\t\tfor (int i = m_TempContentCount - 1; i > m_TempContentEndIndex; i--) {\n\t\t\t\tm_TempContent.ReturnObject(m_TempContent.GetChild(i));\n\t\t\t}\n\t\t\tm_TempContentEndIndex = -1;\n\t\t}\n\t\tm_TempContent = null;\n\t\tm_TempContentCount = 0;\n\t}\n}", "CodeBleu_score": 43.12924068847384}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_Content.Count != m_StartCount + m_EndCount) {\n\t\tDebug.Assert(false, \"ClearTempPool: Content count does not match start and end count\");\n\t\treturn;\n\t}\n\n\tif (m_StartCount > 0) {\n\t\tm_Content.ReturnRange(0, m_StartCount);\n\t\tm_StartCount = 0;\n\t}\n\n\tif (m_EndCount > 0) {\n\t\tm_Content.ReturnRange(m_Content.Count - m_EndCount, m_EndCount);\n\t\tm_EndCount = 0;\n\t}\n}", "CodeBleu_score": 27.876809307044446}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t", "CodeBleu_score": 1.9669683836209269}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (networker.isServer) {\n\t\tif (networker.isListening) {\n\t\t\tlocalScale = newScale;\n\t\t\tanticipatedScale = newScale;\n\t\t\tif (networker.canUpdate) {\n\t\t\t\tnetworker.UpdateAuthoritativeScale(this);\n\t\t\t}\n\t\t\tanticipatedTransform = transform;\n\t\t\tanticipatedTime = Time.time;\n\t\t\tanticipatedCounter = 0;\n\t\t\tsmoothTime = 0;\n\t\t\tsmoothDuration = 0;\n\t\t}\n\t}\n}", "CodeBleu_score": 27.65481381782412}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif(NetworkManager.singleton.isNetworkActive && NetworkManager.singleton.isListening) {\n\t\tlocalScale = newScale;\n\t\tanticipatedScale = newScale;\n\t\tif(NetworkManager.singleton.isServer) {\n\t\t\tNetworkManager.singleton.client.Send(NetworkUpdateTransformMsgType.Scale, new ScaleMessage(newScale));\n\t\t}\n\t\tanticipateTime = Time.time;\n\t\tanticipateCounter++;\n\t\tsmoothTime = 0;\n\t\tsmoothDuration = 0;\n\t}\n}", "CodeBleu_score": 27.439652183413628}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\tif (m_SendAnimationUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendAnimStateClientRpc(m_SendAnimationUpdates);\n\t\tm_SendAnimationUpdates.Clear();\n\t}\n\tif (m_SendParameterUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates);\n\t\tm_SendParameterUpdates.Clear();\n\t}\n\tif (m_SendTriggerUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates);\n\t\tm_SendTriggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 27.64762736747852}, {"code": "private void FlushMessages(){\n\t\tif (m_SendAnimationUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendAnimStateClientRpc(m_SendAnimationUpdates);\n\t\tm_SendAnimationUpdates.Clear();\n\t}\n\tif (m_SendParameterUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates);\n\t\tm_SendParameterUpdates.Clear();\n\t}\n\tif (m_SendTriggerUpdates.Count > 0) {\n\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates);\n\t\tm_SendTriggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 27.64762736747852}, {"code": "private void FlushMessages(){\n\t\tif (m_SendAnimationUpdates.Count == 0 && m_SendParameterUpdates.Count == 0 && m_SendTriggerUpdates.Count == 0) {\n\t\treturn;\n\t}\n\tforeach (var update in m_SendAnimationUpdates) {\n\t\tm_NetworkAnimator.SendAnimStateClientRpc(update.Hash, update.NormalizedTime);\n\t}\n\tm_SendAnimationUpdates.Clear();\n\tforeach (var update in m_SendParameterUpdates) {\n\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(update.Hash, update.NormalizedTime);\n\t}\n\tm_SendParameterUpdates.Clear();\n\tforeach (var update in m_SendTriggerUpdates) {\n\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(update.Hash, update.NormalizedTime);\n\t}\n\tm_SendTriggerUpdates.Clear();\n}", "CodeBleu_score": 60.12087415306843}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (IsServer || IsLocalPlayer) {\n\t\t\tFlushMessages();\n\t\t}\n\t}\n\telse if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (m_NetworkAnimator.IsServerAuthoritative) {\n\t\t\tm_ProcessParameterUpdates.Clear();\n\t\t\tm_NetworkAnimator.UpdateParameters();\n\t\t\tm_NetworkAnimator.CheckForAnimatorChanges();\n\t\t}\n\t}\n}", "CodeBleu_score": 22.06190925409998}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_IsServer || m_IsClientOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\t}\n\tif (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (m_IsServer || m_IsClientOwner) {\n\t\t\tm_ProcessParameterUpdates.Clear();\n\t\t\tm_NetworkAnimator.CheckForAnimatorChanges();\n\t\t}\n\t}\n}", "CodeBleu_score": 28.76465859952382}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (IsServer || IsLocalPlayer) {\n\t\t\tFlushMessages();\n\t\t}\n\n\t\tif (IsServer && IsServerAuthoritative) {\n\t\t\tm_NetworkAnimator.CheckForAnimatorChanges();\n\t\t}\n\t} else if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (IsServer || IsLocalPlayer) {\n\t\t\tm_NetworkAnimator.UpdateParameters();\n\t\t}\n\t}\n}", "CodeBleu_score": 27.043159416594747}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t", "CodeBleu_score": 2.2389150259391823}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (ownershipAuthority == OwnershipAuthority.Server) {\n\t\tif (isServer) {\n\t\t\tif (isLocalPlayer) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\tif (isLocalPlayer) {\n\t\t\t\t\tif (isLocalPlayer) {\n\t\t\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.Extrapolate;\n\t\t\trigidbody.isKinematic = true;\n\t\t}\n\t}\n\telse if (ownershipAuthority == OwnershipAuthority.Client) {\n\t\tif (isLocalPlayer) {\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\trigidbody.isKinematic = false;\n\t\t}\n\t\telse {\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.Extrapolate;\n\t\t\trigidbody.isKinematic = true;\n\t\t}\n\t}\n\telse if (ownershipAuthority == OwnershipAuthority.ServerAndClient) {\n\t\tif (isServer) {\n\t\t\tif (isLocalPlayer) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Extrapolate;\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.Extrapolate;\n\t\t\trigidbody.isKinematic = true;\n\t\t}\n\t}\n}", "CodeBleu_score": 19.087927538958674}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (isServer) {\n\t\tif (ownershipStatus == OwnershipStatus.ServerAuthoritative) {\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t}\n\t\t\tGetComponent<NetworkIdentity>().SetClientAuthority(connectionToClient);\n\t\t}\n\t\telse if (ownershipStatus == OwnershipStatus.ClientAuthoritative) {\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t}\n\t\t\tGetComponent<NetworkIdentity>().RemoveClientAuthority(connectionToClient);\n\t\t}\n\t\telse {\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t}\n\t\t\tGetComponent<NetworkIdentity>().RemoveClientAuthority(connectionToClient);\n\t\t}\n\t}\n}", "CodeBleu_score": 21.224263096293072}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tfloat magSq = 1.0f;\n\tfloat x = 0.0f;\n\tfloat y = 0.0f;\n\tfloat z = 0.0f;\n\tfloat w = 0.0f;\n\n\t// Check the highest bit to determine which component to skip\n\tif ((compressed & 0x80000000) != 0) {\n\t\t// The highest bit is set, so the quaternion is compressed\n\t\tcompressed &= 0x7FFFFFFF;\n\t\t// Decompress the remaining components\n\t\tx = (compressed & 0x3FF00000) >> 20;\n\t\ty = (compressed & 0x000FFC00) >> 10;\n\t\tz = (compressed & 0x000003FF) >> 0;\n\t\t// Calculate the sum of squared magnitudes\n\t\tmagSq = 1.0f / (x * x + y * y + z * z + 1.0f);\n\t\t// Reconstruct the skipped component\n\t\tw = 1.0f - magSq;\n\t}\n\telse {\n\t\t// The highest bit is not set, so the quaternion is not compressed\n\t\t// Decompress the remaining components\n\t\tx = (compressed & 0x3F800000) >> 23;\n\t\ty = (compressed & 0x007F0000) >> 16;\n\t\tz = (compressed & 0x0000FE00) >> 9;\n\t\tw = (compressed & 0x000001FF) >> 0;\n\t}\n\n\t// Calculate the magnitude of the reconstructed quaternion\n\tfloat mag = Mathf.Sqrt(magSq);\n\t// Normalize the reconstructed quaternion\n\tquaternion.x = x * mag;\n\tquaternion.y = y * mag;\n\tquaternion.z = z * mag;\n\tquaternion.w = w * mag;\n}", "CodeBleu_score": 27.008256699089888}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tif (AppDomain.CurrentDomain.GetAssemblies().Length > 1) {\n\t\tUnityEngine.Debug.LogError(\"More than one assemblies have been loaded. Please make sure to clear the console before running this script.\");\n\t\treturn;\n\t}\n\n\t// Create a new domain, and initialize ILRuntime.\n\tAppDomain domain = AppDomain.CreateDomain(\"Temp\");\n\tusing (FileStream fs = new FileStream(AssemblyFilePath, FileMode.Open, FileAccess.Read)) {\n\t\tAssembly assembly = domain.Load(fs.GetBuffer());\n\t}\n\n\t// Initialize.\n\tILRuntime.Runtime.Enviorment.AppDomain appdomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n\tappdomain.LoadAssembly(assembly);\n\n\t// Generate binding code.\n\tILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(appdomain, \"Assets/Dependencies/ILRuntime/Generated\");\n\n\t// Refresh.\n\tAssetDatabase.Refresh();\n}", "CodeBleu_score": 31.343713487519604}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tDebug.Log(\"GenerateCLRBindingByAnalysis Start...\");\n\n\t// Create a new AppDomain\n\tAppDomain domain = AppDomain.CreateDomain(\"Temp\");\n\n\t// Load analysis DLL\n\tAssembly assembly = Assembly.LoadFile(\"Assets/Dependencies/ILRuntime/ILRuntime/Runtime/CLRBinding/Analysis/Analysis.dll\");\n\n\t// Initialize the domain with ILRuntime\n\tILRuntime.Runtime.Enviorment.AppDomain appdomain = new ILRuntime.Runtime.Enviorment.AppDomain(domain);\n\tappdomain.LoadAssembly(assembly);\n\n\t// Generate CLR binding code\n\tILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(appdomain, \"Assets/Dependencies/ILRuntime/ILRuntime/Runtime/CLRBinding/BindingCodeGenerator/BindingCodeGenerator.cs\");\n\n\t// Refresh asset database\n\tAssetDatabase.Refresh();\n\n\tDebug.Log(\"GenerateCLRBindingByAnalysis Complete!\");\n}", "CodeBleu_score": 22.219035634040043}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tDebug.Log(\"GenerateCLRBindingByAnalysis: Generating CLR bindings...\");\n\ttry {\n\t\tAssembly assembly = Assembly.LoadFrom(AssemblyDefinitionFilePath);\n\t\tif (assembly == null)\n\t\t\tthrow new FileNotFoundException(\"GenerateCLRBindingByAnalysis: Assembly not found at \" + AssemblyDefinitionFilePath);\n\t\tType[] types = assembly.GetTypes();\n\t\tList<Type> validTypes = new List<Type>();\n\t\tforeach (Type type in types) {\n\t\t\tif (type.IsClass && !type.IsAbstract && type.Namespace == \"ILRuntime.Runtime.Generated\") {\n\t\t\t\tvalidTypes.Add(type);\n\t\t\t}\n\t\t}\n\t\tILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(validTypes, \"Assets/Dependencies/ILRuntime/Generated\");\n\t\tAssetDatabase.Refresh();\n\t}\n\tcatch (Exception e) {\n\t\tDebug.LogException(e);\n\t}\n\tDebug.Log(\"GenerateCLRBindingByAnalysis: Finished.\");\n}", "CodeBleu_score": 19.475339485187238}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigHelperInfo\"));\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && IsPrefabInHierarchy());\n\tEditorGUILayout.LabelField(\"Config Count: \" + m_ConfigHelperInfo.Count.ToString());\n\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + m_ConfigHelperInfo.CachedBytesSize.ToString());\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 39.49015441089021}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(m_ConfigHelperInfo);\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && IsPrefabInHierarchy);\n\tEditorGUILayout.LabelField(\"Config Count: \" + t.Count.ToString());\n\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + t.CachedBytesSize.ToString());\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 40.69620172439927}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigHelperInfo\"));\n\tEditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && IsPrefabInHierarchy());\n\tEditorGUILayout.LabelField(\"Count: \" + t.Count.ToString());\n\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + t.CachedBytesSize.ToString());\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 38.86086559148698}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultSceneNames = new HashSet<string>();\n\tdefaultSceneNames.Add(\"Assets/Scenes/SampleScene.unity\");\n\tList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tEditorBuildSettingsScene scene = new EditorBuildSettingsScene(sceneName, true);\n\t\tdefaultScenes.Add(scene);\n\t}\n\tEditorBuildSettings.scenes = defaultScenes.ToArray();\n\tDebug.Log(\"Default Scenes Set\");\n}", "CodeBleu_score": 57.41613437274714}, {"code": "public static void DefaultScenes(){\n\t\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tHashSet<string> sceneNames = new HashSet<string>();\n\n\tsceneNames.Add(\"Assets/Scenes/MainMenu.unity\");\n\tsceneNames.Add(\"Assets/Scenes/Credits.unity\");\n\tsceneNames.Add(\"Assets/Scenes/GameOver.unity\");\n\n\tforeach (string sceneName in sceneNames) {\n\t\tscenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\n\tDebug.Log(\"Default scenes set.\");\n}", "CodeBleu_score": 68.44085557954607}, {"code": "public static void DefaultScenes(){\n\t", "CodeBleu_score": 1.3756526078371607}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\tif (m_helperType == null) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PrefixLabel(new GUIContent(\"Helper Type\"));\n\t\tm_helperType = (Type)EditorGUILayout.ObjectField(m_helperType, typeof(Type), false);\n\t\tEditorGUILayout.EndHorizontal();\n\t} else {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PrefixLabel(new GUIContent(\"Helper Type\"));\n\t\tEditorGUILayout.LabelField(m_helperType.Name, EditorStyles.boldLabel);\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\n\tif (m_helperType != null) {\n\t\tm_selectedIndex = EditorGUILayout.Popup(m_selectedIndex, m_helperTypeNames);\n\t\tif (m_selectedIndex >= 0 && m_selectedIndex < m_helperTypeNames.Length) {\n\t\t\tm_helper = (MonoBehaviour)EditorGUILayout.ObjectField(m_helper, m_helperType, false);\n\t\t\tif (m_helper == null) {\n\t\t\t\tEditorGUILayout.HelpBox(\"Helper is not set\", MessageType.Error);\n\t\t\t}\n\t\t} else {\n\t\t\tEditorGUILayout.HelpBox(\"Invalid helper index\", MessageType.Error);\n\t\t}\n\t} else {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PrefixLabel(new GUIContent(\"Helper\"));\n\t\tm_helper = (MonoBehaviour)EditorGUILayout.ObjectField(m_helper, typeof(MonoBehaviour), false);\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n}", "CodeBleu_score": 35.667767594151215}, {"code": "public void Draw(){\n\t\tif (helperTypeNames == null) {\n\t\thelperTypeNames = new List<string>();\n\t\tforeach (Type t in helperTypes) {\n\t\t\thelperTypeNames.Add(t.Name);\n\t\t}\n\t}\n\n\tif (helperTypes == null) {\n\t\thelperTypes = new List<Type>();\n\t\tforeach (Type t in Assembly.GetAssembly(typeof(Editor)).GetTypes()) {\n\t\t\tif (t.IsSubclassOf(typeof(Helper)) && t != typeof(Helper)) {\n\t\t\t\thelperTypes.Add(t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (selectedHelperTypeIndex == -1) {\n\t\tselectedHelperTypeIndex = 0;\n\t}\n\n\tselectedHelperTypeIndex = EditorGUILayout.Popup(\"Helper Type\", selectedHelperTypeIndex, helperTypeNames.ToArray());\n\n\tif (selectedHelperTypeIndex == 0) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(\"Custom Helper\");\n\t\tcustomHelper = (Helper)EditorGUILayout.ObjectField(customHelper, typeof(Helper), true);\n\t\tEditorGUILayout.EndHorizontal();\n\n\t\tif (customHelper == null) {\n\t\t\tEditorGUILayout.HelpBox(\"No helper selected.\", MessageType.Error);\n\t\t}\n\t}\n\telse {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(\"Custom Helper\");\n\t\tcustomHelper = null;\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n}", "CodeBleu_score": 32.81092412246715}, {"code": "public void Draw(){\n\t\tSerializedProperty helperTypeProp = serializedObject.FindProperty(\"helperType\");\n\tSerializedProperty customHelperProp = serializedObject.FindProperty(\"customHelper\");\n\n\tEditorGUILayout.BeginVertical();\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.PrefixLabel(\"Helper Type\");\n\tEditorGUILayout.BeginVertical();\n\n\tint selectedIndex = helperTypeProp.enumValueIndex;\n\tselectedIndex = EditorGUILayout.Popup(selectedIndex, helperTypeNames);\n\thelperTypeProp.enumValueIndex = selectedIndex;\n\n\tif (selectedIndex == (int)HelperType.Custom) {\n\t\tEditorGUILayout.PropertyField(customHelperProp);\n\t}\n\telse {\n\t\tcustomHelperProp.objectReferenceValue = null;\n\t}\n\n\tEditorGUILayout.EndVertical();\n\tEditorGUILayout.EndHorizontal();\n\tEditorGUILayout.EndVertical();\n\n\tif (selectedIndex == (int)HelperType.Custom) {\n\t\tif (customHelperProp.objectReferenceValue == null) {\n\t\t\tEditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.15519040170085}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\tif (!Application.isEditor) {\n\t\treturn;\n\t}\n\t#if ENABLE_LOGGING\n\tRemoveScriptingDefineSymbol(\"ENABLE_LOGGING\");\n\t#endif\n\t#if ENABLE_LOGGING_INFO\n\tRemoveScriptingDefineSymbol(\"ENABLE_LOGGING_INFO\");\n\t#endif\n\t#if ENABLE_LOGGING_WARNING\n\tRemoveScriptingDefineSymbol(\"ENABLE_LOGGING_WARNING\");\n\t#endif\n\t#if ENABLE_LOGGING_ERROR\n\tRemoveScriptingDefineSymbol(\"ENABLE_LOGGING_ERROR\");\n\t#endif\n}", "CodeBleu_score": 19.957939059343442}, {"code": "public static void DisableAllLogs(){\n\t\t//Remove the general logging symbol\n\tRemoveScriptingDefineSymbol(kLogAllSymbol);\n\n\t//Iterate through all the log symbols and remove them if they are enabled\n\tforeach(string symbol in kLogSymbols) {\n\t\tRemoveScriptingDefineSymbol(symbol);\n\t}\n}", "CodeBleu_score": 20.76537226546553}, {"code": "public static void DisableAllLogs(){\n\t\t// remove general log symbol\n\tRemoveScriptingDefineSymbol(Log.GENERAL_LOG_SYMBOL);\n\n\t// iterate through all log symbols\n\tforeach (string symbol in Log.ALL_LOG_SYMBOLS) {\n\t\t// remove log symbol\n\t\tRemoveScriptingDefineSymbol(symbol);\n\t}\n}", "CodeBleu_score": 19.242507018966677}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent current = m_GameFrameworkComponents;\n\twhile (current != null) {\n\t\tif (current.GetType() == type) {\n\t\t\treturn current;\n\t\t}\n\t\tcurrent = current.Next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 57.63383306836873}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent current = m_components;\n\twhile (current != null) {\n\t\tif (current.GetType() == type) {\n\t\t\treturn current;\n\t\t}\n\t\tcurrent = current.m_next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 49.35226101008014}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\treturn GetComponent(type, false);\n}", "CodeBleu_score": 6.971144137987794}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"Game Framework is shutting down...\");\n\tif (s_BaseComponent != null) {\n\t\ts_BaseComponent.Shutdown();\n\t}\n\tLog.Info(\"Game Framework has shut down.\");\n\tif (shutdownType == ShutdownType.RestartGame) {\n\t\tSceneManager.LoadScene(s_GameScene);\n\t} else if (shutdownType == ShutdownType.QuitApplication) {\n\t\tApplication.Quit();\n\t}\n\ts_GameFrameworkComponents.Clear();\n}", "CodeBleu_score": 27.130166071988484}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"Shutting down game framework...\");\n\n\t// Shut down the BaseComponent if it exists\n\tif (BaseComponent.TryGetComponent(out BaseComponent baseComponent)) {\n\t\tbaseComponent.Shutdown();\n\t}\n\n\t// Clear the game framework components\n\ts_GameFrameworkComponents.Clear();\n\n\t// Restart the game scene, quit the application, or do nothing based on the shutdown type\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.RestartGameScene:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t\t\tbreak;\n\t\tcase ShutdownType.QuitApplication:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 22.907769414823253}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.RestartGameScene) {\n\t\tLog.Info(\"Restarting game scene...\");\n\t\tGetComponent<BaseComponent>().Shutdown();\n\t\tSceneManager.LoadScene(s_GameFrameworkComponents.Get<SceneManager> ().GameScene);\n\t} else if (shutdownType == ShutdownType.QuitApplication) {\n\t\tLog.Info(\"Quitting application...\");\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 20.090299674265164}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tconfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (configManager == null) {\n\t\tLog.Fatal(\"ConfigManager is not set in GameFrameworkEntry!\");\n\t}\n\tconfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tconfigManager.ReadDataFailure += OnReadDataFailure;\n\tif (updateOnDependencyAssetLoaded) {\n\t\tconfigManager.UpdateData += OnUpdateData;\n\t}\n\tif (updateOnDependencyAssetUnloaded) {\n\t\tconfigManager.DependencyAssetLoaded += OnDependencyAssetLoaded;\n\t}\n\tif (updateOnDependencyAssetUnloaded) {\n\t\tconfigManager.DependencyAssetUnloaded += OnDependencyAssetUnloaded;\n\t}\n}", "CodeBleu_score": 60.37165861223266}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tif (GameFrameworkEntry.GetModule<IConfigManager>() == null) {\n\t\tLog.Fatal(\"ConfigManager is not set in GameFrameworkEntry\");\n\t\treturn;\n\t}\n\tif (m_ReadDataSuccessEvent == null) {\n\t\tm_ReadDataSuccessEvent = new GameFramework.Event();\n\t}\n\tif (m_ReadDataFailureEvent == null) {\n\t\tm_ReadDataFailureEvent = new GameFramework.Event();\n\t}\n\tif (m_UpdateEvent == null) {\n\t\tm_UpdateEvent = new GameFramework.Event();\n\t}\n\tif (m_DependencyAssetEvent == null) {\n\t\tm_DependencyAssetEvent = new GameFramework.Event();\n\t}\n\tif (m_ReadDataSuccessEvent != null) {\n\t\tGameFrameworkEntry.GetModule<IConfigManager>().ReadDataSuccessEvent += m_ReadDataSuccessEvent.Invoke;\n\t}\n\tif (m_ReadDataFailureEvent != null) {\n\t\tGameFrameworkEntry.GetModule<IConfigManager>().ReadDataFailureEvent += m_ReadDataFailureEvent.Invoke;\n\t}\n\tif (m_UpdateEvent != null) {\n\t\tGameFrameworkEntry.GetModule<IConfigManager>().UpdateEvent += m_UpdateEvent.Invoke;\n\t}\n\tif (m_DependencyAssetEvent != null) {\n\t\tGameFrameworkEntry.GetModule<IConfigManager>().DependencyAssetEvent += m_DependencyAssetEvent.Invoke;\n\t}\n}", "CodeBleu_score": 29.918795153214813}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tif (GameFrameworkEntry.GetModule<IConfigManager>() == null) {\n\t\tLog.Fatal(\"ConfigManager is null. Can not load configuration.\");\n\t\treturn;\n\t}\n\tconfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (configManager == null) {\n\t\tLog.Fatal(\"ConfigManager is null. Can not load configuration.\");\n\t\treturn;\n\t}\n\tif (loadOnAwake) {\n\t\tLoad();\n\t}\n\tif (loadOnStart) {\n\t\tStartCoroutine(LoadOnStart());\n\t}\n\tif (updateOnAwake) {\n\t\tconfigManager.AddUpdateCallback(Update);\n\t}\n\tif (dependencyAssetEventOnAwake) {\n\t\tconfigManager.AddDependencyAssetEventCallback(OnDependencyAssetEvent);\n\t}\n}", "CodeBleu_score": 37.536208638370326}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\"Config asset is null! Cannot read data!\", this);\n\t\treturn false;\n\t}\n\n\t// Check if the config asset is a TextAsset\n\tif (configAsset is TextAsset) {\n\t\t// Check if the config asset ends with a specific byte extension\n\t\tif (configAssetName.EndsWith(ConfigManager.BYTE_EXTENSION)) {\n\t\t\t// Parse the data as bytes\n\t\t\treturn configManager.ParseData(configAssetName, (TextAsset)configAsset, ConfigManager.BYTE_PARSER, userData);\n\t\t}\n\t\telse {\n\t\t\t// Parse the data as text\n\t\t\treturn configManager.ParseData(configAssetName, (TextAsset)configAsset, ConfigManager.TEXT_PARSER, userData);\n\t\t}\n\t}\n\telse {\n\t\t// The config asset is not a TextAsset\n\t\tLog.Warning(\"Config asset is not a TextAsset! Cannot read data!\", this);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 53.657143081465684}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\"Config asset is null\");\n\t\treturn false;\n\t}\n\n\tif (configAsset is TextAsset) {\n\t\tTextAsset textAsset = configAsset as TextAsset;\n\t\tif (textAsset.text.Length == 0) {\n\t\t\tLog.Warning(\"Config asset is empty\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\t\treturn configManager.ParseData(textAsset.bytes, configAssetName, userData);\n\t\t}\n\t\telse {\n\t\t\treturn configManager.ParseData(textAsset.text, configAssetName, userData);\n\t\t}\n\t}\n\telse {\n\t\tLog.Warning(\"Config asset is not a TextAsset\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 59.3036465373444}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\"Config asset is null.\");\n\t\treturn false;\n\t}\n\n\tif (configAsset is TextAsset) {\n\t\tTextAsset textAsset = (TextAsset)configAsset;\n\t\tif (textAsset.bytes == null || textAsset.bytes.Length == 0) {\n\t\t\tLog.Warning(\"Config asset is empty.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\t\treturn configManager.ParseData(textAsset.bytes, userData);\n\t\t}\n\t\telse {\n\t\t\treturn configManager.ParseData(textAsset.text, userData);\n\t\t}\n\t}\n\telse {\n\t\tLog.Warning(\"Config asset is not a TextAsset.\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 58.13930008501763}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream ms = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader br = new BinaryReader(ms)) {\n\t\t\t\tint numConfigs = br.ReadInt32();\n\t\t\t\tfor (int i = 0; i < numConfigs; i++) {\n\t\t\t\t\tstring configName = br.ReadString();\n\t\t\t\t\tstring configValue = br.ReadString();\n\t\t\t\t\tconfigManager.AddConfig(configName, configValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tLog.Warning(ex.Message);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 35.77848979274761}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (binaryReader.PeekChar() != -1) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Invalid config entry: \" + configName + \"=\" + configValue);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} catch (Exception ex) {\n\t\tLog.Exception(ex, \"Exception parsing config data.\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 53.84671781999598}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tLog.Warning(\"Duplicate config entry found: \" + configName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tLog.Error(\"Exception occurred while parsing config data: \" + ex);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 56.54934288981595}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 71.88402467711936}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configManager != null && configAsset != null) {\n\t\tconfigManager.ResourceComponent.UnloadAsset(configAsset);\n\t}\n}", "CodeBleu_score": 39.21137473739085}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configAsset == null) {\n\t\treturn;\n\t}\n\n\tIResourceComponent resourceComponent = configManager.ResourceComponent;\n\tif (resourceComponent == null) {\n\t\treturn;\n\t}\n\n\tresourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 38.792664112568566}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t return new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n }", "CodeBleu_score": 12.618138436931773}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t return new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n}", "CodeBleu_score": 12.560816357020158}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tif (lastActiveScene == null || activeScene == null) {\n\t\treturn null;\n\t}\n\treturn new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n}", "CodeBleu_score": 17.52729959137162}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"The scene asset name is null or empty.\");\n\t}\n\telse if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"The scene asset name must start with \\\"Assets/\\\" and end with \\\".unity\\\".\");\n\t}\n\telse {\n\t\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n\t}\n}", "CodeBleu_score": 49.031214662412765}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"SceneManager\", \"LoadScene\", \"Scene asset name is null or empty.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tLog.Error(\"SceneManager\", \"LoadScene\", \"Scene asset name must start with \\\"Assets/\\\".\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"SceneManager\", \"LoadScene\", \"Scene asset name must end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 56.50418332140199}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"SceneManager.LoadScene: Scene asset name cannot be null or empty.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tLog.Error(\"SceneManager.LoadScene: Scene asset name must start with \\\"Assets/\\\".\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"SceneManager.LoadScene: Scene asset name must end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 57.038613661437495}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tTArray<IBinariesDiffPatchFeature*> Features = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>();\n\tfor (IBinariesDiffPatchFeature* Feature : Features) {\n\t\tEBinariesPatchFeature::Append(Feature->GetFeatureName());\n\t}\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 58.23652725850405}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tFBinariesPatchFeatureModule::Get().RegisterBinariesPatchFeatureNames();\n\tFBinariesPatchFeatureModule::Get().SetupBinariesPatchFeatureCallbacks();\n}", "CodeBleu_score": 16.3976782012666}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Retrieve all registered feature implementations\n\tTArray<IBinariesPatchFeature*> Features = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>();\n\tfor (IBinariesPatchFeature* Feature : Features) {\n\t\t// Append the feature name to the binaries patch feature enumerations\n\t\tEBinariesPatchFeature::Append(Feature->GetFeatureName());\n\t}\n\n\t// Register callbacks for when modular features are registered or unregistered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 57.19795854186258}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Tokens;\n\tTArray<FString> KeyValues;\n\tTMap<FString, FString> ParamsMap;\n\tTArray<FString> ParamValues;\n\tFString TokenString = FString(TEXT(\" -\")) + Token;\n\tFString ParamString = FString(TEXT(\" -\")) + Token + TEXT(\"=\");\n\tFString ParamString2 = FString(TEXT(\" -\")) + Token + TEXT(\":\");\n\tFString ParamString3 = FString(TEXT(\" -\")) + Token + TEXT(\" \");\n\tFString ParamString4 = FString(TEXT(\" --\")) + Token + TEXT(\"=\");\n\tFString ParamString5 = FString(TEXT(\" --\")) + Token + TEXT(\":\");\n\tFString ParamString6 = FString(TEXT(\" --\")) + Token + TEXT(\" \");\n\tif (Commandline.Contains(TokenString)) {\n\t\tCommandline.ParseIntoArray(Tokens, *TokenString, true);\n\t\tif (Tokens.Num() > 1) {\n\t\t\tTokens[1].ParseIntoArray(KeyValues, *ParamString, true);\n\t\t\tif (KeyValues.Num() < 2) {\n\t\t\t\tTokens[1].ParseIntoArray(KeyValues, *ParamString2, true);\n\t\t\t}\n\t\t\tif (KeyValues.Num() < 2) {\n\t\t\t\tTokens[1].ParseIntoArray(KeyValues, *ParamString3, true);\n\t\t\t}\n\t\t\tif (KeyValues.Num() < 2) {\n\t\t\t\tTokens[1].ParseIntoArray(KeyValues, *ParamString4, true);\n\t\t\t}\n\t\t\tif (KeyValues.Num() < 2) {\n\t\t\t\tTokens[1].ParseIntoArray(KeyValues, *ParamString5, true);\n\t\t\t}\n\t\t\tif (KeyValues.Num() < 2) {\n\t\t\t\tTokens[1].ParseIntoArray(KeyValues, *ParamString6, true);\n\t\t\t}\n\t\t\tif (KeyValues.Num() > 1) {\n\t\t\t\tKeyValues[1].ParseIntoArray(ParamValues, *TEXT(\",\"), true);\n\t\t\t}\n\t\t}\n\t}\n\treturn ParamValues;\n}", "CodeBleu_score": 46.80210054502736}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t", "CodeBleu_score": 9.464279801391635}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> OutArray;\n\tFString ParamValue;\n\tFString ParamName;\n\tFString TokenString = FString(TEXT(\" -\")) + Token;\n\tFString CommandlineString = Commandline;\n\tif (CommandlineString.Contains(TokenString)) {\n\t\tint32 TokenStart = CommandlineString.Find(TokenString) + TokenString.Len();\n\t\tint32 TokenEnd = CommandlineString.Find(TEXT(\" \"), TokenStart);\n\t\tif (TokenEnd == -1) {\n\t\t\tTokenEnd = CommandlineString.Len();\n\t\t}\n\t\tParamValue = CommandlineString.Mid(TokenStart, TokenEnd - TokenStart);\n\t\tParamName = Token;\n\t\tOutArray.Add(ParamName);\n\t\tOutArray.Add(ParamValue);\n\t}\n\treturn OutArray;\n}", "CodeBleu_score": 48.03778967636393}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = GetCommandletName();\n\treturn !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"Cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 22.396552650311538}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tbool bIsCookCommandlet = false;\n\tFString CommandletName;\n\tif (IsRunningCommandlet()) {\n\t\tCommandletName = FApp::GetCommandletName();\n\t\tif (!CommandletName.IsEmpty() && CommandletName.Equals(\"cook\", ESearchCase::IgnoreCase)) {\n\t\t\tbIsCookCommandlet = true;\n\t\t}\n\t}\n\treturn bIsCookCommandlet;\n}", "CodeBleu_score": 48.027513327410674}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\t// Check if a commandlet is running\n\tFString CommandletName;\n\tif (IsRunningCommandlet(CommandletName)) {\n\t\t// Check if the commandlet name is not empty and matches \"cook\" (case-insensitive)\n\t\treturn !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 26.413403463635632}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\t// Extract commandlet name from command line\n\tFString CommandletName = FCommandLine::Get()->GetCommandletName();\n\tif (CommandletName.IsEmpty()) {\n\t\tCommandletName = TEXT(\"Unknown\");\n\t}\n\t// Check if serverless counting is enabled in the settings\n\tUHotPatcherSettings* Settings = GetDefault<UHotPatcherSettings>();\n\tif (Settings->bEnableServerlessCounting) {\n\t\t// Initialize the counter with server request and project information\n\t\tFString ProjectName = FApp::GetProjectName();\n\t\tFString ServerRequestInfo = FCountServerlessWrapper::MakeServerRequestInfo();\n\t\tFString CurrentProject = FCountServerlessWrapper::MakeCurrentProject(ProjectName, CommandletName);\n\t\tFCountServerlessWrapper::Init(ServerRequestInfo, CurrentProject);\n\t\t// Modify the project name to include the commandlet name if applicable\n\t\tFString ProjectNameWithCommandlet = FCountServerlessWrapper::MakeCurrentProject(ProjectName, CommandletName);\n\t\t// Process the counter\n\t\tFCountServerlessWrapper::Process(ProjectNameWithCommandlet);\n\t}\n}", "CodeBleu_score": 49.360388745849484}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName = FCommandLine::Get()->GetCommandletName();\n\tif (CommandletName.IsEmpty()) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"Commandlet name is empty!\"));\n\t\treturn;\n\t}\n\tUE_LOG(LogHotPatcher, Log, TEXT(\"Commandlet name: %s\"), *CommandletName);\n\n\tUHotPatcherSettings* Settings = GetDefault<UHotPatcherSettings>();\n\tif (!Settings) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"UHotPatcherSettings is not loaded!\"));\n\t\treturn;\n\t}\n\n\tif (!Settings->bEnableServerlessHotPatch) {\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Serverless hot patch is not enabled!\"));\n\t\treturn;\n\t}\n\n\tUE_LOG(LogHotPatcher, Log, TEXT(\"Serverless hot patch is enabled!\"));\n\n\tFString ProjectName = FApp::GetProjectName();\n\tif (!ProjectName.IsEmpty()) {\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Project name: %s\"), *ProjectName);\n\t\tif (Settings->bEnableServerlessHotPatch) {\n\t\t\tFString ProjectNameWithCommandlet = ProjectName + TEXT(\"_\") + CommandletName;\n\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Project name with commandlet: %s\"), *ProjectNameWithCommandlet);\n\t\t\tFCountServerlessWrapper::MakeCurrentProject(ProjectNameWithCommandlet);\n\t\t}\n\t}\n\tFCountServerlessWrapper::MakeServerRequestInfo();\n\tFCountServerlessWrapper::Get().Process();\n}", "CodeBleu_score": 48.17946929909447}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName;\n\tFParse::Value(*Params, TEXT(\"CommandletName=\"), CommandletName);\n\tif (CommandletName.IsEmpty()) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"CommandletName is not specified!\"));\n\t\treturn;\n\t}\n\tauto* Settings = GetDefault<UHotPatcherSettings>();\n\tif (!Settings) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"UHotPatcherSettings is not found!\"));\n\t\treturn;\n\t}\n\tif (!Settings->bEnableServerless) {\n\t\tUE_LOG(LogHotPatcher, Display, TEXT(\"Serverless counting is not enabled!\"));\n\t\treturn;\n\t}\n\tauto* Counter = UHPC::Get().GetCounter();\n\tif (!Counter) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"UHPC is not found!\"));\n\t\treturn;\n\t}\n\tauto* CurrentProject = FHotPatcherEditorModule::Get().GetCurrentProject();\n\tif (!CurrentProject) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"CurrentProject is not found!\"));\n\t\treturn;\n\t}\n\tFString ProjectName = CurrentProject->GetName();\n\tif (CommandletName != TEXT(\"AllCommandlets\")) {\n\t\tProjectName = ProjectName + TEXT(\"_\") + CommandletName;\n\t}\n\tCounter->Init(FString::Printf(TEXT(\"%s_%s\"), *ProjectName, *FApp::GetBranchName()), FApp::GetBuildVersion());\n\tCounter->Processor();\n}", "CodeBleu_score": 46.461971722830754}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.68564258733266}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tSCOPED_NAMED_EVENT_TEXT(\"UFlibHotCookerHelper::IsAppleMetalPlatform\");\n\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 40.35477624747094}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.68564258733266}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tconst UObject* ObjectOuter = Object->GetOuter();\n\tif (!ObjectOuter) {\n\t\treturn;\n\t}\n\tUPackage* Package = ObjectOuter->GetOutermost();\n\tif (!Package) {\n\t\treturn;\n\t}\n\tFName AssetPathName = Package->GetPathName();\n\tif (!CookerAssetsSet.Contains(AssetPathName) && AllAssetsSet.Contains(AssetPathName) && !IsAlwayPostLoadClasses(Package, Object)) {\n\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(Object);\n\t\tFreezeObjects.Add(Object);\n\t}\n\tObjectOuter->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n}", "CodeBleu_score": 56.37104446855755}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tconst UObject* ObjectOuter = Object->GetOuter();\n\tif (ObjectOuter) {\n\t\tconst UPackage* Package = ObjectOuter->GetOutermost();\n\t\tif (Package) {\n\t\t\tif (Package->HasAnyPackageFlags(PKG_ContainsMap)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst bool bIsAlwaysPostLoad = IsAlwayPostLoadClasses(Package, const_cast<UObject*>(Object));\n\t\t\tif (!bIsAlwaysPostLoad && CookerAssetsSet.Contains(Package)) {\n\t\t\t\tPackageObjectsMap.FindOrAdd(Package->GetPathName()).Add(Object);\n\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t}\n\t\t\telse if (AllAssetsSet.Contains(Package)) {\n\t\t\t\tPackageObjectsMap.FindOrAdd(Package->GetPathName()).Add(Object);\n\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.33915093299684}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUObject* ObjectOuter = Object->GetOuter();\n\tif (ObjectOuter) {\n\t\t// If the object is in a package, check if it is in the list of assets that should always be loaded.\n\t\tif (ObjectOuter->IsA<UPackage>()) {\n\t\t\tUPackage* Package = CastChecked<UPackage>(ObjectOuter);\n\t\t\tif (!IsAlwayPostLoadClasses(Package, Object)) {\n\t\t\t\t// If the package is not in the list of assets that should always be loaded, check if it is in the list of assets that should be loaded.\n\t\t\t\tif (AllAssetsSet.Contains(Package)) {\n\t\t\t\t\t// If the package is in the list of assets that should be loaded, add the object to the list of objects that should be loaded.\n\t\t\t\t\tPackageObjectsMap.FindOrAdd(Package->GetPathName()).Add(Object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags.\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 39.59668688783551}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t// Iterate through each bulk data record\n\tfor (const FRecordData& RecordData : Record.Data)\n\t{\n\t\t// Check the bulk data type\n\t\tif (RecordData.Type == ERecordDataType::BulkData)\n\t\t{\n\t\t\t// Check if the bulk data is appended to exports\n\t\t\tif (RecordData.BulkDataFlags.IsAppendedToExports())\n\t\t\t{\n\t\t\t\t// Get the export buffer\n\t\t\t\tconst FExportBundleData* ExportBundleData = RecordData.BulkDataFlags.GetAppendedToExports();\n\t\t\t\tconst FExportBundleData& ExportBundle = *ExportBundleData;\n\n\t\t\t\t// Get the export buffer list\n\t\t\t\tTArray<FExportBundleData>& ExportBundles = Context.ExportsBuffers[ExportBundle.MultiOutputIndex];\n\n\t\t\t\t// Add the export buffer to the list\n\t\t\t\tExportBundles.Add(ExportBundle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Get the bulk data\n\t\t\t\tconst FBulkData& BulkData = RecordData.BulkData;\n\n\t\t\t\t// Create an output file entry\n\t\t\t\tFOutputFileEntry& OutputFile = Context.OutputFiles.Emplace_GetRef();\n\n\t\t\t\t// Set the output file's filename\n\t\t\t\tOutputFile.Filename = FPaths::Combine(Context.OutputDirectory, FPackageName::GetShortName(BulkData.Filename));\n\n\t\t\t\t// Set the output file's buffer\n\t\t\t\tOutputFile.Buffer = BulkData.Data;\n\n\t\t\t\t// Set the output file's regions\n\t\t\t\tOutputFile.Regions = BulkData.Regions;\n\n\t\t\t\t// Set the output file's flags\n\t\t\t\tOutputFile.Flags = EOutputFileFlags::None;\n\t\t\t\tif (BulkData.Flags.HasFlag(EBulkDataFlags::Sidecar))\n\t\t\t\t{\n\t\t\t\t\tOutputFile.Flags |= EOutputFileFlags::HasSidecar;\n\t\t\t\t}\n\t\t\t\tif (BulkData.Flags.HasFlag(EBulkDataFlags::HashContribution))\n\t\t\t\t{\n\t\t\t\t\tOutputFile.Flags |= EOutputFileFlags::HashContribution;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.60609998871331}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (const auto& BulkRecord : Record.BulkData)\n\t{\n\t\tif (BulkRecord.Info.Type == EBulkDataType::AppendToExport)\n\t\t{\n\t\t\tif (Context.ExportsBuffers.Num() <= BulkRecord.Info.MultiOutputIndex)\n\t\t\t{\n\t\t\t\tContext.ExportsBuffers.Add(TArray<FBuffer>());\n\t\t\t}\n\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (Context.OutputFiles.Emplace(BulkRecord.Info.FileName, FOutputFile()) == nullptr)\n\t\t\t{\n\t\t\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"Failed to emplace output file %s\"), *BulkRecord.Info.FileName);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tauto& OutputFile = Context.OutputFiles.FindOrAdd(BulkRecord.Info.FileName);\n\t\t\tOutputFile.Buffer = BulkRecord.Data;\n\t\t\tOutputFile.Regions = BulkRecord.Info.Regions;\n\t\t\tOutputFile.Flags = BulkRecord.Info.Flags;\n\t\t\tOutputFile.HashContribution = BulkRecord.Info.HashContribution;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.745250715369416}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (const auto& BulkRecord : Record.BulkDataRecords)\n\t{\n\t\tif (BulkRecord.Info.bIsForExport)\n\t\t{\n\t\t\tCollectForSaveBulkDataForExport(BulkRecord, Context);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCollectForSaveBulkDataForOther(BulkRecord, Context);\n\t\t}\n\t}\n}", "CodeBleu_score": 23.24849248271179}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tFExportBundleData& BundleData = Context.ExportBundles[Record.GetPackageIndex()];\nif (BundleData.bIsDiffCompleted) {\nreturn;\n}\n\n// add a footer buffer to each package's export buffers\nfor (const FExportBundleData::FExportBundleEntry& Entry : BundleData.ExportBundleEntries) {\nFExportBundleData::FExportBundleEntry& NewEntry = Context.ExportsBuffers[Entry.PackageIndex].AddDefaulted_GetRef();\nNewEntry = Entry;\nNewEntry.Data = FMemoryWriter(NewEntry.Data);\nNewEntry.Data.Serialize(FFileTag());\n}\n\nBundleData.bIsDiffCompleted = true;\n}", "CodeBleu_score": 42.71052346697084}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tCast<UGDCharacterMovementComponent>(Character->GetCharacterMovement()).SavedMove.Sprinting = ClientData.bWantsToSprint;\n\tCast<UGDCharacterMovementComponent>(Character->GetCharacterMovement()).SavedMove.ADS = ClientData.bWantsToADS;\n}", "CodeBleu_score": 59.44172608657738}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tauto * gdChar = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (gdChar) {\n\t\tbIsSprinting = gdChar->bIsSprinting;\n\t\tbIsAimingDownSights = gdChar->bIsAimingDownSights;\n\t}\n}", "CodeBleu_score": 66.49788094102016}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * gdCharMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (gdCharMovement) {\n\t\tbIsSprinting = gdCharMovement->bIsSprinting;\n\t\tbIsADS = gdCharMovement->bIsADS;\n\t}\n}", "CodeBleu_score": 73.65147721051638}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!IsValid(AbilitySystemComponent) || !Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* AttributeChangedTask = NewObject<UAsyncTaskAttributeChanged>();\n\tAttributeChangedTask->Attribute = Attribute;\n\tAttributeChangedTask->AbilitySystemComponent = AbilitySystemComponent;\n\tAttributeChangedTask->AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(AttributeChangedTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\tAttributeChangedTask->AddToRoot();\n\n\treturn AttributeChangedTask;\n}", "CodeBleu_score": 66.56795202438559}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent || !Attribute.IsValid()) {\n\t\tABILITY_LOG(Error, TEXT(\"ListenForAttributeChange called with invalid parameters!\"));\n\t\treturn nullptr;\n\t}\n\n\tABILITY_LOG(Verbose, TEXT(\"ListenForAttributeChange called on AbilitySystemComponent %s for Attribute %s\"), *AbilitySystemComponent->GetFName().ToString(), *Attribute.GetFName().ToString());\n\n\tUAsyncTaskAttributeChanged* AttributeChangedTask = NewObject<UAsyncTaskAttributeChanged>();\n\tAttributeChangedTask->AbilitySystemComponent = AbilitySystemComponent;\n\tAttributeChangedTask->Attribute = Attribute;\n\tAttributeChangedTask->AttributeChangedDelegate = FOnGameplayAttributeValueChangeDelegate::CreateUObject(AttributeChangedTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\n\tif (AttributeChangedTask->IsValid()) {\n\t\tABILITY_LOG(Verbose, TEXT(\"ListenForAttributeChange task is valid! Adding delegate and waiting for attribute change!\"));\n\t\tAttributeChangedTask->AttributeChangedDelegate.Get().AddUObject(AttributeChangedTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\t\tAttributeChangedTask->AddToRoot();\n\t\treturn AttributeChangedTask;\n\t}\n\n\tABILITY_LOG(Error, TEXT(\"ListenForAttributeChange task is invalid! Removing from root and returning null!\"));\n\tAttributeChangedTask->RemoveFromRoot();\n\treturn nullptr;\n}", "CodeBleu_score": 51.58640065035366}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent && Attribute.IsValid()) {\n\t\tUAsyncTaskAttributeChanged* AttributeChangedTask = NewObject<UAsyncTaskAttributeChanged>(GetTransientPackage(), UAsyncTaskAttributeChanged::StaticClass());\n\t\tAttributeChangedTask->Attribute = Attribute;\n\t\tAttributeChangedTask->AbilitySystemComponent = AbilitySystemComponent;\n\t\tAttributeChangedTask->OnAttributeChangedDelegate = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute);\n\t\tAttributeChangedTask->OnAttributeChangedDelegate.AddUObject(AttributeChangedTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\t\tAttributeChangedTask->AddToRoot();\n\t\treturn AttributeChangedTask;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 57.469967640514376}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC != nullptr) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll();\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll();\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 29.453674016776638}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC != nullptr && ASC->IsValidLowLevel()) {\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll();\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll();\n\t}\n\n\tMarkAsGarbage();\n}", "CodeBleu_score": 30.828045906905444}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC.IsValid()) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll();\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll();\n\t}\n\tMarkAsGarbage();\n}", "CodeBleu_score": 29.565975174847082}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EGameplayEffectStackChange::Removed);\n\t}\n}", "CodeBleu_score": 85.80075509806174}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t", "CodeBleu_score": 4.368904444289419}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (!ListenForGameplayEffectStackChange) {\n\t\treturn nullptr;\n\t}\n\tListenForGameplayEffectStackChange->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n\tif (!ListenForGameplayEffectStackChange->AbilitySystemComponent || !ListenForGameplayEffectStackChange->EffectGameplayTag.IsValid()) {\n\t\tListenForGameplayEffectStackChange->EndTask();\n\t\treturn nullptr;\n\t}\n\tListenForGameplayEffectStackChange->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\tListenForGameplayEffectStackChange->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectRemoved);\n\treturn ListenForGameplayEffectStackChange;\n}", "CodeBleu_score": 68.11159480555354}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t", "CodeBleu_score": 4.368904444289419}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// Get the asset tags from the effect\n\tTArray<FGameplayTag> AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\t// Get the granted tags from the effect\n\tTArray<FGameplayTag> GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\t// Iterate over each tag\n\tfor (const FGameplayTag & Tag : AssetTags) {\n\t\t// Check if the tag is the specified tag\n\t\tif (Tag == EffectGameplayTag) {\n\t\t\t// Broadcast a stack change event\n\t\t\tUAsyncTaskEffectStackChanged::BroadcastStackChange(Tag, EffectRemoved.Handle, StackChangeDetails::Removed);\n\t\t}\n\t}\n\n\tfor (const FGameplayTag & Tag : GrantedTags) {\n\t\t// Check if the tag is the specified tag\n\t\tif (Tag == EffectGameplayTag) {\n\t\t\t// Broadcast a stack change event\n\t\t\tUAsyncTaskEffectStackChanged::BroadcastStackChange(Tag, EffectRemoved.Handle, StackChangeDetails::Removed);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.064797326119454}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag)) {\n\t\tFGameplayEffectSpecHandle Handle = EffectRemoved.Handle;\n\t\tFActiveGameplayEffectHandle ActiveHandle = Handle.GetHandle();\n\t\tFActiveGameplayEffect * ActiveEffect = GetActiveGameplayEffect(ActiveHandle);\n\t\tif (ActiveEffect) {\n\t\t\tFActiveGameplayEffectHandle ActiveHandle = Handle.GetHandle();\n\t\t\tFActiveGameplayEffect * ActiveEffect = GetActiveGameplayEffect(ActiveHandle);\n\t\t\tif (ActiveEffect) {\n\t\t\t\tUAbilitySystemComponent * TargetActorAbilitySystemComponent = ActiveEffect->GetTargetActorAbilitySystemComponent();\n\t\t\t\tif (TargetActorAbilitySystemComponent) {\n\t\t\t\t\tTargetActorAbilitySystemComponent->OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, Handle, ActiveEffect->GetCurrentStackCount(), ActiveEffect->GetStackCount(), 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tUAbilitySystemComponent * TargetActorAbilitySystemComponent = EffectRemoved.GetTargetActorAbilitySystemComponent();\n\t\tif (TargetActorAbilitySystemComponent) {\n\t\t\tTargetActorAbilitySystemComponent->OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.GetCurrentStackCount(), EffectRemoved.GetStackCount(), 0);\n\t\t}\n\t}\n}", "CodeBleu_score": 60.430630958302615}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (AbilitySystemComponent == nullptr) {\n\t\treturn;\n\t}\n\n\tif (bActivateAbilityOnGranted) {\n\t\tif (AbilitySystemComponent->IsAbilitySystemActive()) {\n\t\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.70241597435991}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tif (AbilitySystemComponent->ShouldActivateAbility(GetHandle(), true)) {\n\t\t\tAbilitySystemComponent->TryActivateAbility(GetHandle());\n\t\t}\n\t}\n}", "CodeBleu_score": 54.607806950446005}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle, this);\n\t\t}\n\t}\n}", "CodeBleu_score": 62.755062355361666}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\tif (!ShouldBroadcastAbilityTaskDelegates()) {\nreturn;\n}\n\nFGameplayTag EventTag = GetEventTag();\nFGameplayEventData EventData = GetEventData();\nOnCompleted.Broadcast(EventTag, EventData);\nEndTask();\n}", "CodeBleu_score": 53.95517202352033}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tSuper::OnMontageEnded(Montage, bInterrupted);\n\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\t\tOnCompleted.Broadcast(GetDefaultGameplayTag(), GetDefaultGameplayEventData());\n\t}\n\tEndTask();\n}", "CodeBleu_score": 60.03169355774198}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\tSuper::OnMontageEnded(Montage, bInterrupted);\nif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\nOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n}\nEndTask();\n}", "CodeBleu_score": 67.40067065007}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\t// Remove the event tag container delegate from the ability system component, if valid\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(GameplayEventTag);\n\t}\n\n\tif (AbilityEnded && StopMontageOnEnd)\n\t{\n\t\tStopPlayingMontage();\n\t}\n}", "CodeBleu_score": 54.10848412354736}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilityEnded && StopOnAbilityEnd)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(GameplayEventTag);\n\t}\n}", "CodeBleu_score": 54.542803093159854}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilityEnded)\n\t{\n\t\tif (bStopOnAbilityEnd)\n\t\t{\n\t\t\tStopPlayingMontage();\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTag);\n\t}\n}", "CodeBleu_score": 56.07123346694961}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (!AbilitySystemComponent || !AbilitySystemComponent->GetCurrentMontage()) {\n\t\treturn false;\n\t}\n\tif (Ability) {\n\t\tAbility->GetCurrentActorInfo()->GetAnimInstance()->OnMontageBlendingOutStarted.Unbind();\n\t\tAbility->GetCurrentActorInfo()->GetAnimInstance()->OnMontageEnded.Unbind();\n\t}\n\tAbilitySystemComponent->CurrentMontageStop();\n\treturn true;\n}", "CodeBleu_score": 30.13946725303118}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn false;\n\t}\n\tif (!AbilitySystemComponent->GetCurrentMontage()) {\n\t\treturn false;\n\t}\n\tif (AbilitySystemComponent->GetAnimatingAbility()) {\n\t\tif (AbilitySystemComponent->CurrentMontageStop()) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.152614146012894}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent != nullptr && AbilitySystemComponent->GetCurrentMontage() != nullptr) {\n\t\t// Stop the montage\n\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 18.692568340310427}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAIOwner = Cast<AActor>(OwnerComp.GetAIOwner());\n\tBlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tMyController = AIOwner->GetController();\n\n\t// Get the target actor from the blackboard.\n\tTargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TEXT(\"TargetActor\")));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\t// Calculate the distance to the target actor.\n\tDistanceToTarget = (MyController->GetPawn()->GetActorLocation() - TargetActor->GetActorLocation()).Size();\n\n\t// Check if the target is within the maximum attack range.\n\tif (DistanceToTarget <= MaxAttackRange) {\n\t\t// Check for line of sight to the target.\n\t\tif (MyController->LineOfSightTo(TargetActor)) {\n\t\t\t// The target is visible, set the blackboard value to true.\n\t\t\tBlackBoardComp->SetValueAsBool(TEXT(\"TargetVisible\"), true);\n\t\t}\n\t\telse {\n\t\t\t// The target is not visible, set the blackboard value to false.\n\t\t\tBlackBoardComp->SetValueAsBool(TEXT(\"TargetVisible\"), false);\n\t\t}\n\t}\n\telse {\n\t\t// The target is not visible, set the blackboard value to false.\n\t\tBlackBoardComp->SetValueAsBool(TEXT(\"TargetVisible\"), false);\n\t}\n}", "CodeBleu_score": 53.88680059021117}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tauto BlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tauto MyController = OwnerComp.GetAIOwner();\n\tif (MyController && BlackBoardComp) {\n\t\tauto TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(BlackboardKey.TargetActor));\n\t\tif (TargetActor) {\n\t\t\tauto DistanceToTarget = (MyController->GetPawn()->GetActorLocation() - TargetActor->GetActorLocation()).Size();\n\t\t\tBlackBoardComp->SetValueAsFloat(BlackboardKey.DistanceToTarget, DistanceToTarget);\n\t\t\tauto bIsVisible = MyController->LineOfSightTo(TargetActor);\n\t\t\tBlackBoardComp->SetValueAsBool(BlackboardKey.TargetVisible, bIsVisible);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.63151481287621}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tif (!OwnerComp.GetBlackboardComponent()) {\n\t\treturn;\n\t}\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TEXT(\"Target\")));\n\tif (!TargetActor) {\n\t\treturn;\n\t}\n\tAIOwner = OwnerComp.GetAIOwner();\n\tif (!AIOwner) {\n\t\treturn;\n\t}\n\tAPawn* AI = AIOwner->GetPawn();\n\tif (!AI) {\n\t\treturn;\n\t}\n\tFVector AILocation = AI->GetActorLocation();\n\tfloat Distance = FVector::Distance(AILocation, TargetActor->GetActorLocation());\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TEXT(\"InRange\"), Distance <= AttackRange);\n\tif (Distance > AttackRange) {\n\t\treturn;\n\t}\n\tbool bHasLOSToTarget = OwnerComp.GetBlackboardComponent()->GetValueAsBool(TEXT(\"HasLOSToTarget\"));\n\tif (bHasLOSToTarget) {\n\t\treturn;\n\t}\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TEXT(\"HasLOSToTarget\"), OwnerComp.GetBlackboardComponent()->GetValueAsBool(TEXT(\"InRange\")) && OwnerComp.GetBlackboardComponent()->GetValueAsBool(TEXT(\"TargetVisible\")));\n}", "CodeBleu_score": 50.09106153202464}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tAPawn* OwnerPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (OwnerPawn) {\n\t\tUSAttributeComponent* AttributeComp = OwnerPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComp) {\n\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), false);\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 55.134242809790265}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tAIOwner = Cast<AAIOwnerBase>(OwnerComp.GetAIOwner());\n\tif (AIOwner) {\n\t\tAttributeComp = Cast<USAttributeComponent>(AIOwner->GetPawn()->FindComponentByClass(USAttributeComponent::StaticClass()));\n\t\tif (AttributeComp) {\n\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), false);\n\t\t\treturn EBTNodeResult::Succeeded;\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Failed;\n}", "CodeBleu_score": 48.43559422478585}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tAPawn* OwnerPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (OwnerPawn) {\n\t\tUAttributeComponent* AttributeComp = OwnerPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (AttributeComp) {\n\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 54.408374865528245}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\nGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.154794332341936}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\nauto* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\nTickables->DeRegisterComponent(PrimaryComponentTick);\n}", "CodeBleu_score": 67.94156615199071}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\nauto* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\nTickables->DeRegisterComponent(this);\n}", "CodeBleu_score": 64.90876830449169}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\nauto* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\nTickables->DeRegisterComponent(this);\n}", "CodeBleu_score": 64.90876830449169}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// If managing significance, check if the owner implements the significance interface\n\tif (bManagingSignificance)\n\t{\n\t\tif (Implements<USSignificanceInterface>())\n\t\t{\n\t\t\t// Register with the significance manager\n\t\t\tRegisterWithManager();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Owner %s does not implement the significance interface.\"), *GetOwner()->GetName());\n\t\t}\n\t}\n\n\t// Manage particle significance\n\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponents<UParticleSystemComponent>())\n\t{\n\t\tif (ParticleSystemComponent->IsSignificanceManaged())\n\t\t{\n\t\t\tParticleSystemComponent->SetSignificance(ParticleSystemComponent->GetSignificance());\n\t\t}\n\t}\n}", "CodeBleu_score": 44.29920585686931}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManagingSignificance) {\n\t\tif (Implements<USSignificanceInterface>()) {\n\t\t\tRegisterWithManager();\n\t\t}\n\t\telse {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t}\n\t}\n\n\t// manage particle significance for any particle system components owned by the actor\n\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tif (ParticleSystemComponent->bAutoActivate) {\n\t\t\tParticleSystemComponent->SetManagingSignificance(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.799016766812606}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManagingSignificance) {\n\t\tif (!Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogTemp, Error, TEXT(\"Owner does not implement USSignificanceInterface, disabling managing significance for %s\"), *GetOwner()->GetName());\n\t\t\tbManagingSignificance = false;\n\t\t}\n\t}\n\tif (bManagingSignificance) {\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t}\n\t\telse {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tParticleSystemComponent->OnSystemFinishedPlaying().AddDynamic(this, &USSignificanceComponent::OnParticleSystemFinishedPlaying);\n\t}\n}", "CodeBleu_score": 64.04057463011502}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (USignificanceManager* SignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>()) {\n\t\tFSignificanceManager::FOnCalcSignificance OnCalcSignificance = FSignificanceManager::FOnCalcSignificance::CreateUObject(this, &USSignificanceComponent::CalcSignificance);\n\t\tFSignificanceManager::FOnPostSignificanceUpdate OnPostSignificanceUpdate = FSignificanceManager::FOnPostSignificanceUpdate::CreateUObject(this, &USSignificanceComponent::PostSignificanceUpdate);\n\t\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), OnCalcSignificance, OnPostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 34.59746944197247}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tUSignificanceManager* SignificanceManager = World->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\t\tif (SignificanceManager) {\n\t\t\tSignificanceManager->RegisterObject(this, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n\t\t\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t\t\t}, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\t\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t\t\t}, GetOwner()->GetClass()->GetFName());\n\t\t}\n\t}\n}", "CodeBleu_score": 60.94186320669917}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (USignificanceManager* SignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>()) {\n\t\t// Define lambda functions for significance calculation and post-significance updates\n\t\tauto CalcSignificance = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n\t\t\treturn this->CalcSignificance(ObjectInfo, Viewpoint);\n\t\t};\n\t\tauto PostSignificanceUpdate = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\t\tthis->PostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t\t};\n\t\t// Register the component with the manager using the owner's class name as the tag and specifying the lambda functions\n\t\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), CalcSignificance, PostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 63.8798242119641}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT_TEXT(\"USActorPoolingSubsystem::ReleaseToPool\", FColor::Red);\n\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\tif (!Actor->IsA(AActor::StaticClass())) {\n\t\treturn false;\n\t}\n\tif (!Actor->GetIsPoolingEnabled()) {\n\t\treturn false;\n\t}\n\tUWorld* World = Actor->GetWorld();\n\tif (World == nullptr) {\n\t\treturn false;\n\t}\n\tUSActorPoolingSubsystem* PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>();\n\tif (PoolingSubsystem == nullptr) {\n\t\treturn false;\n\t}\n\treturn PoolingSubsystem->ReleaseToPool_Internal(Actor);\n}", "CodeBleu_score": 55.415194797520215}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT_TICKS(ReleaseToPool, 100);\n\tif (!Actor->IsActorPoolingEnabled()) {\n\t\treturn false;\n\t}\n\n\tUSActorPoolingSubsystem* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\tif (PoolingSubsystem) {\n\t\tPoolingSubsystem->ReleaseToPool_Internal(Actor);\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 55.34805405571268}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT_TEXT(\"ReleaseToPool\", FColor::Green);\n\tif (Actor->IsActorPoolingEnabled()) {\n\t\tauto PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\t\tif (PoolingSubsystem) {\n\t\t\tPoolingSubsystem->ReleaseToPool_Internal(Actor);\n\t\t\treturn true;\n\t\t}\n\t}\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 55.60955973713975}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT_COLOR(FColorList::Green, TEXT(\"PrimeActorPool\"));\n\tUE_LOG(LogTemp, Display, TEXT(\"Initializing Actor Pool of Class %s with %i Actors\"), *ActorClass->GetName(), Amount);\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseActorToPool(Actor);\n\t}\n}", "CodeBleu_score": 55.198684077747814}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT_TEXT(\"USActorPoolingSubsystem::PrimeActorPool\", FColor::Green);\n\tUE_LOG(LogTemp, Log, TEXT(\"Priming actor pool for class %s with %d\"), *ActorClass->GetName(), Amount);\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseActorToPool(Actor);\n\t}\n}", "CodeBleu_score": 46.760582368360154}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT_WITH_FORMAT(FColor::Green, TEXT(\"ActorPoolingSubsystem.PrimeActorPool %s\"), *ActorClass->GetName());\n\tUE_LOG(LogActorPooling, Log, TEXT(\"ActorPoolingSubsystem.PrimeActorPool %s\"), *ActorClass->GetName());\n\tTArray<AActor*> SpawnedActors;\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* SpawnedActor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tSpawnedActors.Add(SpawnedActor);\n\t\tReleaseActorToPool(SpawnedActor);\n\t}\n}", "CodeBleu_score": 52.251238983766235}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MoviePaths = GetMoviePaths(MapName);\n\tLoadingScreenAttributes.MoviePlayer = GetMoviePlayer();\n\tLoadingScreenAttributes.MoviePlayer->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 46.98342567362131}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t", "CodeBleu_score": 8.21000268905031}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t", "CodeBleu_score": 8.21000268905031}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (!Instigator) {\n\t\treturn;\n\t}\n\tif (Role == EActionRole::ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\tif (Instigator->HasAuthority()) {\n\t\tInstigator->GetOwningComponent()->GetOwnerRole();\n\t}\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\tComp->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 37.366915894364595}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator) {\n\t\tUE_LOG(LogSAction, Verbose, TEXT(\"Starting action %s for %s\"), *GetFName().ToString(), *Instigator->GetFName().ToString());\n\t} else {\n\t\tUE_LOG(LogSAction, Verbose, TEXT(\"Starting action %s\"), *GetFName().ToString());\n\t}\n\n\tif (HasAuthority()) {\n\t\tif (Instigator) {\n\t\t\tOwnerRole->RecordActionStart(Instigator, this);\n\t\t} else {\n\t\t\tOwnerRole->RecordActionStart(this);\n\t\t}\n\t}\n\n\tif (Instigator) {\n\t\tComp->ActiveGameplayTags.AppendTags(OwnerRole->GetGrantedTags(Instigator));\n\t} else {\n\t\tComp->ActiveGameplayTags.AppendTags(OwnerRole->GetGrantedTags());\n\t}\n\n\tComp->UpdateReplicationData();\n\tComp->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 43.93918366843879}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\t// Log the start of the action\n\tUE_LOG(LogTemp, Log, TEXT(\"Action %s started by %s\"), *GetName(), *Instigator->GetName());\n\n\t// Append granted tags to the owning component's active gameplay tags\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\n\t// If the component's owner role is authoritative, record the start time\n\tif (Comp->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast an action started event from the owning component\n\tComp->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 45.55937348976294}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tfloat TimeRemaining = 0.f;\n\tif (GetWorld() && GetWorld()->GetGameState()) {\n\t\tTimeRemaining = GetWorld()->GetGameState()->GetServerWorldTimeSeconds() - EffectStartTime;\n\t}\n\telse {\n\t\tTimeRemaining = EffectDuration;\n\t}\n\treturn TimeRemaining;\n}", "CodeBleu_score": 36.58036299084285}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (HasValidGameState()) {\n\t\treturn GetGameState<AGameStateBase>()->GetServerWorldTimeSeconds() - GetStartTime();\n\t}\n\treturn GetDuration();\n}", "CodeBleu_score": 22.516486463315065}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (auto GS = GetWorld()->GetGameState<AGameStateBase>()) {\n\t\treturn Duration - (GS->GetServerWorldTimeSeconds() - StartTime);\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 52.56244854209727}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Invalid actor specified for interaction\"));\n\t\treturn;\n\t}\n\n\tAPawn* OwnerPawn = CastChecked<APawn>(GetOwner());\n\tif (OwnerPawn == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Invalid owner specified for interaction\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(OwnerPawn);\n}", "CodeBleu_score": 61.85785056149907}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Invalid Interact Actor\"));\n\t\treturn;\n\t}\n\n\tAPawn* Owner = CastChecked<APawn>(GetOwner());\n\tif (!Owner) {\n\t\treturn;\n\t}\n\n\tInFocus->Interact(Owner);\n}", "CodeBleu_score": 56.17057944175971}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Null actor passed to ServerInteract\"));\n\t\treturn;\n\t}\n\tAPawn* OwningPawn = Cast<APawn>(GetOwner());\n\tif (OwningPawn == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Null pawn passed to ServerInteract\"));\n\t\treturn;\n\t}\n\tInFocus->Interact(OwningPawn);\n}", "CodeBleu_score": 61.50579099640821}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\tUAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn false;\n\t}\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 53.20443254338603}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (!DamageCauser) {\n\t\treturn false;\n\t}\n\n\tif (!TargetActor) {\n\t\treturn false;\n\t}\n\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UAttributeComponent>();\n\n\tif (AttributeComp) {\n\t\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 58.267196246018806}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\tif (DamageCauser->GetClass()->ImplementsInterface(UGameplayTagAssetInterface::StaticClass())) {\n\t\tFGameplayTagContainer DamageTags;\n\t\tDamageCauser->GetGameplayTags(DamageTags);\n\t\tif (DamageTags.HasTag(FGameplayTag::RequestGameplayTag(FName(\"Status.Dying\")))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tUSHealthComponent* HealthComp = TargetActor->FindComponentByClass<USHealthComponent>();\n\tif (HealthComp == nullptr) {\n\t\treturn false;\n\t}\n\tfloat Health = HealthComp->GetHealth();\n\tif (Health <= 0.0f) {\n\t\treturn false;\n\t}\n\tHealthComp->ApplyDamage(-DamageAmount, DamageCauser->GetInstigatorController(), DamageCauser);\n\treturn true;\n}", "CodeBleu_score": 44.853279702193646}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > this->PersonalRecord) {\n\t\tthis->PersonalRecord = NewTime;\n\t\tthis->OnPersonalRecordChanged.Broadcast();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 36.55411441872274}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > GetPersonalRecordTime()) {\n\t\tSetPersonalRecordTime(NewTime);\n\t\tOnPersonalRecordChanged.Broadcast();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 37.15895266193452}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > GetPersonalRecord()) {\n\t\tSetPersonalRecord(NewTime);\n\t\tOnPersonalRecordChanged.Broadcast();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 36.02350127645016}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\tauto AttributeComp = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn;\n\t}\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\tauto PS = Cast<APlayerState>(InstigatorPawn->GetPlayerState());\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\tif (!PS->RemoveCredits(Cost)) {\n\t\treturn;\n\t}\n\tAttributeComp->ApplyHealthChange(HealingAmount);\n\tGetWorld()->GetTimerManager().SetTimer(CooldownHandle, this, &ASPowerup_HealthPotion::EndCooldown, Cooldown, false);\n}", "CodeBleu_score": 45.54916311294853}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tauto AttributeComp = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComp && !AttributeComp->IsFullHealth()) {\n\t\t\tauto PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\t\t\tif (PS && PS->RemoveCredits(GetCost())) {\n\t\t\t\tAttributeComp->ApplyHealthChange(GetHealthChange());\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(PowerupCooldownHandle, this, &ASPowerup_HealthPotion::EndInteract, GetCooldown(), false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.16569282007383}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\tauto AttributeComp = InstigatorPawn->FindComponentByClass<UPawnAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn;\n\t}\n\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\n\tauto PS = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\n\tif (!PS->RemoveCredits(CreditsRequired)) {\n\t\treturn;\n\t}\n\n\tAttributeComp->ApplyHealthChange(HealthChange);\n\tCooldownPowerup();\n}", "CodeBleu_score": 48.05943387472677}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn an impact visual effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactEffect, GetActorLocation(), FRotator::ZeroRotator, true);\n\t// Play an impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\t// Trigger a camera shake\n\tUGameplayStatics::PlayWorldCameraShake(this, CameraShake, GetActorLocation());\n\t// Release the projectile back to the actor pool\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 50.09351120560817}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ImpactParticles != nullptr) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactParticles, GetActorLocation(), true);\n\t}\n\tif (ImpactSound != nullptr) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\t}\n\tif (CameraShake != nullptr) {\n\t\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), CameraShake, GetActorLocation());\n\t}\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 54.76290182727945}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the projectile's impact effect\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), FRotator::ZeroRotator, true);\n\t// Play the projectile's impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t// Play the projectile's impact camera shake\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactCameraShake, GetActorLocation());\n\t// Get the actor pooling subsystem\n\tUSActorPoolingSubsystem* PoolingSubsystem = GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\t// Release the projectile back to the actor pool\n\tPoolingSubsystem->ReleaseToPool(this);\n}", "CodeBleu_score": 68.74299639331221}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (!PlayerState) {\n\t\treturn nullptr;\n\t}\n\n\tif (GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"USSaveGame::GetPlayerData: Play in editor is enabled.  Returning first player data entry instead of player %s.\"), *PlayerState->GetPlayerName());\n\t\treturn SavedPlayers.Num() > 0 ? SavedPlayers[0] : nullptr;\n\t}\n\n\treturn SavedPlayers.FindByPredicate([PlayerState](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerUniqueId == PlayerState->GetUniqueId();\n\t});\n}", "CodeBleu_score": 48.615347514582425}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (!PlayerState) {\n\t\treturn nullptr;\n\t}\n\n\tif (GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"GetPlayerData called in PIE, using first saved player entry instead\"));\n\t\treturn SavedPlayers.Num() > 0 ? SavedPlayers[0].Data : nullptr;\n\t}\n\n\treturn SavedPlayers.FindByPredicate([PlayerState](const FSavedPlayerData& SavedPlayer) {\n\t\treturn SavedPlayer.PlayerUniqueId == PlayerState->GetUniqueId();\n\t});\n}", "CodeBleu_score": 46.9556870866255}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"PlayerState is null. Returning null player data.\"), *GetFullName());\n\t\treturn nullptr;\n\t}\n\n\tif (GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"Play-In-Editor (PIE) mode. Returning first saved player data.\"), *GetFullName());\n\t\treturn SavedPlayers.Num() > 0 ? SavedPlayers[0] : nullptr;\n\t}\n\n\tFString PlayerID = PlayerState->GetUniqueId().ToString();\n\treturn SavedPlayers.FindByPredicate([PlayerID](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerID == PlayerID;\n\t});\n}", "CodeBleu_score": 57.246302024849086}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (PS) {\n\t\tPS->LoadPlayerState();\n\t}\n}", "CodeBleu_score": 70.02237931802185}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (!PS) {\n\t\treturn;\n\t}\n\tif (!PS->IsValid()) {\n\t\treturn;\n\t}\n\tLoadPlayerState(PS);\n}", "CodeBleu_score": 70.94968558482253}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (!PS) {\n\t\tUE_LOG(LogSaveGameSubsystem, Error, TEXT(\"Unable to retrieve Player State from new player %s\"), *(NewPlayer->GetName()));\n\t\treturn;\n\t}\n\n\tif (!PS->IsPlayerStateValid()) {\n\t\tUE_LOG(LogSaveGameSubsystem, Error, TEXT(\"Player State for new player %s is invalid\"), *(NewPlayer->GetName()));\n\t\treturn;\n\t}\n\n\tPS->LoadPlayerState();\n}", "CodeBleu_score": 47.78819303836802}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tif (CurrentSaveGame) {\n\t\t// Clear the current save game data.\n\t\tCurrentSaveGame->SavedPlayers.Empty();\n\t\tCurrentSaveGame->SavedActors.Empty();\n\n\t\t// Retrieve the game state.\n\t\tUWorld* World = GetWorld();\n\t\tif (World) {\n\t\t\tAGameStateBase* GS = World->GetGameState();\n\t\t\tif (GS) {\n\t\t\t\t// Iterate through the players in the game state and save their data.\n\t\t\t\tfor (int32 i = 0; i < GS->PlayerArray.Num(); ++i) {\n\t\t\t\t\tAPlayerState* PS = CastChecked<APlayerState>(GS->PlayerArray[i]);\n\t\t\t\t\tif (PS) {\n\t\t\t\t\t\tCurrentSaveGame->SavedPlayers.Add(PS->SavePlayerState());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Iterate through all actors in the world and save those that implement the USGameplayInterface.\n\t\t\t\tfor (TActorIterator<AActor> It(World); It; ++It) {\n\t\t\t\t\tAActor* Actor = *It;\n\t\t\t\t\tif (Actor && Actor->GetClass()->Implements<USGameplayInterface>()) {\n\t\t\t\t\t\t// Create a new save game actor object.\n\t\t\t\t\t\tUSaveGameActor* SaveGameActor = NewObject<USaveGameActor>(CurrentSaveGame);\n\n\t\t\t\t\t\t// Set the actor name.\n\t\t\t\t\t\tSaveGameActor->ActorName = Actor->GetFName();\n\n\t\t\t\t\t\t// Set the actor transform.\n\t\t\t\t\t\tSaveGameActor->ActorTransform = Actor->GetActorTransform();\n\n\t\t\t\t\t\t// Serialize the actor.\n\t\t\t\t\t\tActor->Serialize(SaveGameActor->SerializedData);\n\n\t\t\t\t\t\t// Add the save game actor to the current save game.\n\t\t\t\t\t\tCurrentSaveGame->SavedActors.Add(SaveGameActor);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Write the current save game to the save slot.\n\t\t\t\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveSlotName, SaveSlotDescription);\n\n\t\t\t\t// Broadcast an event to signal the save is complete.\n\t\t\t\tOnSaveGameWritten.Broadcast();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 60.73805398583293}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Get the game state.\n\tUGameInstance* GameInstance = GetGameInstance();\n\tif (!GameInstance) {\n\t\treturn;\n\t}\n\tAGameStateBase* GS = GameInstance->GetWorld()->GetGameState();\n\tif (!GS) {\n\t\treturn;\n\t}\n\n\t// Clear existing saved player and actor data.\n\tUSaveGame* CurrentSaveGame = GetSaveGame();\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Save player data for each player in the game state.\n\tfor (FConstPlayerControllerIterator Iterator = GS->GetPlayerControllerIterator(); Iterator; ++Iterator) {\n\t\tAPlayerController* PC = Iterator->Get();\n\t\tif (PC) {\n\t\t\tUSPlayerState* PS = CastChecked<USPlayerState>(PC->PlayerState);\n\t\t\tif (PS) {\n\t\t\t\tCurrentSaveGame->SavedPlayers.Add(PS);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface.\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (Actor->GetClass()->Implements<USGameplayInterface>()) {\n\t\t\t// Save actor data.\n\t\t\tFActorSaveData ActorSaveData;\n\t\t\tActorSaveData.Name = Actor->GetFName();\n\t\t\tActorSaveData.Transform = Actor->GetActorTransform();\n\t\t\tActorSaveData.Serialize = Actor->Serialize(ActorSaveData.Data);\n\n\t\t\t// Save actor data to the current save game.\n\t\t\tCurrentSaveGame->SavedActors.Add(ActorSaveData);\n\t\t}\n\t}\n\n\t// Write the save game to a slot.\n\tFSaveGameArchive Ar(CurrentSaveGame);\n\tFSaveGameFileHandle SaveFileHandle = FSaveGameSystem::Get().WriteSaveGame(Ar, CurrentSaveGame->SaveSlotName);\n\tif (SaveFileHandle.IsValid()) {\n\t\t// Broadcast an event to signal the save is complete.\n\t\tOnSaveGameWritten.Broadcast();\n\t}\n}", "CodeBleu_score": 49.331443015757195}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tif (CurrentSaveGame == nullptr) {\n\t\treturn;\n\t}\n\n\t// Clear the current save game's player and actor data\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Get the game state\n\tUGameplayStatics::GetAllActorsOfClass(GetWorld(), APlayerState::StaticClass(), PlayerArray);\n\n\t// Save player data for each player in the game state\n\tfor (APlayerState* PS : PlayerArray) {\n\t\tif (IsValid(PS)) {\n\t\t\tCurrentSaveGame->SavedPlayers.Add(PS->SavePlayerState());\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\n\t\tif (Actor->GetClass()->Implements<USGameplayInterface>()) {\n\t\t\t// Save actor name, transform, and serialized data\n\t\t\tFActorSaveData* ActorSaveData = new FActorSaveData();\n\t\t\tActorSaveData->Name = Actor->GetFName();\n\t\t\tActorSaveData->Transform = Actor->GetActorTransform();\n\t\t\tActorSaveData->Data = Actor->Serialize(nullptr);\n\n\t\t\t// Add the actor data to the current save game\n\t\t\tCurrentSaveGame->SavedActors.Add(ActorSaveData);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveGameSlotName, SaveGameSlotDescription);\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 49.86676789315279}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::CollapsingHeader(\"Theme\")) {\n\t\tImGui::Text(\"Theme:\");\n\t\tImGui::SameLine();\n\t\tif (ImGui::BeginCombo(\"##theme\", m_theme.c_str())) {\n\t\t\tfor (auto&& theme : m_themes) {\n\t\t\t\tif (ImGui::MenuItem(theme.c_str())) {\n\t\t\t\t\tm_theme = theme;\n\t\t\t\t\tset_theme(m_theme);\n\t\t\t\t}\n\t\t\t}\n\t\t\tImGui::EndCombo();\n\t\t}\n\n\t\tImGui::Text(\"Font size:\");\n\t\tImGui::SameLine();\n\t\tif (ImGui::SliderInt(\"##font_size\", &m_font_size, 10, 20)) {\n\t\t\tg_framework->set_font_size(m_font_size);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.074677310641}, {"code": "void FrameworkConfig::draw_themes(){\n\t", "CodeBleu_score": 2.9382092570235954}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::CollapsingHeader(\"Themes\")) {\n\t\tImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.25f);\n\t\tif (ImGui::Combo(\"Theme\", &m_selected_theme, \"Default\\0Dark\\0Light\\0Classic\\0\")) {\n\t\t\tset_theme(m_selected_theme);\n\t\t}\n\t\tImGui::PopItemWidth();\n\t\tImGui::SameLine();\n\t\tImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.25f);\n\t\tif (ImGui::SliderInt(\"Font Size\", &m_font_size, 6, 20)) {\n\t\t\tg_framework->set_font_size(m_font_size);\n\t\t}\n\t\tImGui::PopItemWidth();\n\t}\n}", "CodeBleu_score": 42.454484549947004}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Menu Key\");\nImGui::SameLine();\nm_menu_key->draw();\nImGui::Text(\"Show Cursor Key\");\nImGui::SameLine();\nm_show_cursor_key->draw();\nImGui::Text(\"Remember Menu State\");\nImGui::SameLine();\nm_remember_menu_state->draw();\nImGui::Text(\"Enable L3 + R3 Toggle\");\nImGui::SameLine();\nm_enable_l3_r3_toggle->draw();\nImGui::Text(\"Always Show Cursor\");\nImGui::SameLine();\nm_always_show_cursor->draw();\nImGui::Text(\"Log Level\");\nImGui::SameLine();\nm_log_level->draw();\nImGui::Separator();\nif (m_log_level->value() != spdlog::level::off && m_log_level->value() != spdlog::level::trace && m_log_level->value() != spdlog::level::debug && m_log_level->value() != spdlog::level::info && m_log_level->value() != spdlog::level::warn && m_log_level->value() != spdlog::level::err && m_log_level->value() != spdlog::level::critical) {\nspdlog::set_level(spdlog::level::off);\n} else {\nspdlog::set_level(m_log_level->value());\n}\n}", "CodeBleu_score": 55.05699637154435}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Checkbox(\"Menu key\", &m_menu_key->value);\nImGui::Checkbox(\"Show cursor key\", &m_show_cursor_key->value);\nImGui::Checkbox(\"Remember menu state\", &m_remember_menu_state->value);\nImGui::Checkbox(\"Enable L3 + R3 toggle\", &m_enable_l3_r3_toggle->value);\nImGui::Checkbox(\"Always show cursor\", &m_always_show_cursor->value);\nImGui::Separator();\nspdlog::level::level_enum level = m_log_level->value;\nImGui::Text(\"Log level\");\nImGui::SameLine();\nImGui::PushItemWidth(-1);\nImGui::Combo(\"##log_level\", &level, \"trace\\0debug\\0info\\0warn\\0err\\0critical\\0off\\0\");\nImGui::PopItemWidth();\nif (level != m_log_level->value) {\nm_log_level->value = level;\nspdlog::set_level(level);\n}\n}", "CodeBleu_score": 52.41502931429438}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Begin(\"Main\");\nImGui::Text(\"Menu Key\");\nm_menu_key->draw();\nImGui::Text(\"Show Cursor Key\");\nm_show_cursor_key->draw();\nImGui::Text(\"Remember Menu State\");\nm_remember_menu_state->draw();\nImGui::Text(\"Enable L3 + R3 Toggle\");\nm_enable_l3_r3_toggle->draw();\nImGui::Text(\"Always Show Cursor\");\nm_always_show_cursor->draw();\nImGui::Text(\"Log Level\");\nm_log_level->draw();\nif (m_log_level->value() != m_log_level_last_value) {\nspdlog::set_level(m_log_level->value());\nm_log_level_last_value = m_log_level->value();\n}\nImGui::End();\n}", "CodeBleu_score": 56.34682745020226}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\nAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\nUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\nif (StreetMapComponent) {\nStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n}\n}", "CodeBleu_score": 70.4092674390808}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tStreetMapComponent->SetStreetMap(CastChecked<UStreetMap>(Asset));\n}", "CodeBleu_score": 71.25243874599315}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n}", "CodeBleu_score": 67.63815909644414}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tUStreetMapComponent* SelectedStreetMapComponent = GetSelectedStreetMapComponent();\n\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 80.692141997833}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif(SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.70267832537972}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif(SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 96.56746496998856}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\tFStreetMapStyle::Initialize();\n\tFModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get().RegisterAssetTypeActions( FStreetMapAssetTypeActions::GetActions().ToSharedRef() );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentCustomization::MakeInstance ) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 38.64039099388252}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools.\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions));\n\n\t// Initialize the StreetMap style.\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module.\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapCustomization::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed.\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 63.56750787841128}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\tFStreetMapStyle::Initialize();\n\n\t// Register the StreetMap asset type with the asset tools\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get();\n\tAssetTools.RegisterAssetTypeActions( MakeShareable( new FStreetMapAssetTypeActions() ) );\n\n\t// Register the StreetMap style\n\tFSlateStyleRegistry::RegisterSlateStyle( *FStreetMapStyle::Get() );\n\n\t// Register the StreetMap component custom class layout\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>( \"PropertyEditor\" );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentCustomization::MakeInstance ) );\n\n\t// Notify the property editor that the customization has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 66.9409921044915}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// If the component's mesh is not valid, return nullptr.\n\tif (!HasValidMesh()) {\n\t\treturn nullptr;\n\t}\n\n\t// Create a new FStreetMapSceneProxy.\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\n\t// Initialize the scene proxy with the component's vertices and indices.\n\tStreetMapSceneProxy->Init(this->GetLocalBounds(), this->GetLocalVertexData(), this->GetLocalIndices());\n\n\t// Return the scene proxy.\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 49.31777895147882}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (!HasValidMesh()) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\tStreetMapSceneProxy->Init(this);\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 49.440204626656076}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (!HasValidMesh()) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\tStreetMapSceneProxy->Init(this->GetWorld());\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 49.73972800655551}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t(void)Spec;(void)ClientHandle;\n\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFInputID> InputIds;\n\tInputIds.Add(Ability01InputID);\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 60.580852309520154}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t(void)Spec;(void)ClientHandle;\nTestAbility01Handle = ServerHandle;\n\nAbility01InputIds.SetNum(1);\nAbility01InputIds[0] = EInputID::Ability01;\nAbilities->BindAbilityToInputIDs(TestAbility01Handle, Ability01InputIds);\n}", "CodeBleu_score": 46.2118599383844}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t(void)Spec;(void)ServerHandle;(void)ClientHandle;\n\tTestAbility01Handle = ClientHandle;\n\tTArray<FName> InputIds;\n\tInputIds.Add(FName(TEXT(\"Ability01\"));\n\tAbilities->BindAbilityToInputIDs(TestAbility01Handle, InputIds);\n}", "CodeBleu_score": 50.520391751880524}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (GetCharacterMovement()->IsMovingOnGround()) {\n\t\tif (Value != 0.0f) {\n\t\t\tFRotator Rotation = GetControlRotation();\n\t\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\t\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\t\tAddMovementInput(Direction, Value);\n\t\t}\n\t}\n}", "CodeBleu_score": 69.00802650108375}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller == nullptr) {\n\t\treturn;\n\t}\n\tif (Value != 0.0f) {\n\t\tFRotator Rotation = Controller->GetControlRotation();\n\t\tRotation.Yaw += 180.0f;\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 77.33131956985949}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\t// Do nothing if we don't have a controller.\n\tif (GetCharacterMovement()->IsMovingOnGround() == false) {\n\t\treturn;\n\t}\n\n\tif (Value != 0.0f) {\n\t\t// Find out which way is forward\n\t\tconst FRotator Rotation = GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// Get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\t// Add movement in that direction\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 70.51048090703557}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\t// If the main weapon mesh component is not available, it defaults to returning the location of the \"headSocket\" on the character's mesh.\n\tif (GetMesh()->GetSocketComponent(FName(\"MainWeapon\")) == nullptr) {\n\t\treturn GetMesh()->GetSocketLocation(FName(\"headSocket\"));\n\t}\n\t// Otherwise, it returns the location of the specified socket on the main weapon mesh component.\n\treturn GetMesh()->GetSocketComponent(FName(\"MainWeapon\"))->GetSocketLocation(Socket);\n}", "CodeBleu_score": 55.468655943323085}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMesh() && GetMainWeaponMesh()) {\n\t\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(\"headSocket\");\n\t}\n}", "CodeBleu_score": 47.97720561431078}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (WeaponMeshComponent && WeaponMeshComponent->SkeletalMesh) {\n\t\treturn WeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 56.000426836045705}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num < MinNumEnemies) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 56.133063580018884}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority)\n\t{\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num < MinimumEnemies)\n\t\t{\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 55.385554238972375}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num < MinimumNumberOfEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 53.92769749823601}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\t// First, we need to call the parent method\n\tauto Result = Super::ApproveLogin(Options);\n\n\t// Now we need to parse the options string into an array of parameters\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\" \"), true);\n\n\t// Now we need to search for the \"PlayerId\" parameter\n\tFString PlayerId;\n\tfor (auto& Param : Params) {\n\t\tauto KeyValue = Param.Split(TEXT(\"=\"), ESearchCase::IgnoreCase, ESearchDir::FromStart);\n\t\tif (KeyValue.Num() == 2 && KeyValue[0] == TEXT(\"PlayerId\")) {\n\t\t\tPlayerId = KeyValue[1];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Finally, we can return the result from the parent method\n\treturn Result;\n}", "CodeBleu_score": 56.40235590024041}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\t// Call the base class implementation first\n\tauto Result = Super::ApproveLogin(Options);\n\n\t// Parse the options string into an array of parameters\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\" \"), true);\n\n\t// Search for the PlayerId parameter\n\tfor (auto& Param : Params) {\n\t\tauto KeyValue = Param.Split(TEXT(\"=\"), ESearchCase::IgnoreCase, ESearchDir::FromStart);\n\t\tif (KeyValue.Num() == 2 && KeyValue[0] == TEXT(\"PlayerId\")) {\n\t\t\t// Found the PlayerId parameter, extract the player ID value\n\t\t\tauto PlayerId = KeyValue[1];\n\n\t\t\t// Check if the player ID is valid\n\t\t\tif (!PlayerId.IsEmpty()) {\n\t\t\t\t// The player ID is valid, approve the login\n\t\t\t\tResult = TEXT(\"Success\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 50.61384466928771}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\t// Call the parent class's ApproveLogin method\n\tFString Result = Super::ApproveLogin(Options);\n\n\t// Parse the options string into an array of parameters\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\" \"), true);\n\n\t// Search for the PlayerId parameter\n\tfor (auto& Param : Params) {\n\t\tif (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\t// Extract the player ID value\n\t\t\tPlayerId = Param.Mid(9);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the result from the parent method\n\treturn Result;\n}", "CodeBleu_score": 53.21928960009904}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t// Retrieve username, display name, and password from input fields\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check if any of these fields are empty\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\t// Display warning message\n\t\tWarrningText->SetText(FText::FromString(\"Please fill in all fields!\"));\n\t\treturn;\n\t}\n\n\t// Hide register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Call the RegisterNewPlayer method from the game instance to register the new player\n\tGetOwningPlayer()->GetGameInstance()->RegisterNewPlayer(DisplayName, UserName, Password);\n}", "CodeBleu_score": 53.7195766614638}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please fill all the fields\"));\n\t\treturn;\n\t}\n\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Call the game instance to register the new player\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 61.869757274001316}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\tif (DisplayName.Len() == 0 || UserName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please fill all fields!\"));\n\t\treturn;\n\t}\n\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Get the game instance\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\n\t// Call the RegisterNewPlayer method from the game instance\n\tGI->RegisterNewPlayer(DisplayName, UserName, Password);\n}", "CodeBleu_score": 59.11549666253042}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\t// If the target actor exists\n\tif (InMod.TargetActor) {\n\t\t// Project the damage location to screen coordinates\n\t\tFVector2D DamageLocation = UGameplayStatics::ProjectWorldToScreen(InMod.TargetActor->GetWorld(), InMod.TargetActor->GetActorLocation());\n\t\t// Set the floating combat text with the damage value and screen location\n\t\tFloatingCombatText->SetInfo(InMod.Value, DamageLocation);\n\t}\n}", "CodeBleu_score": 26.3265664542445}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Attribute.GetFName() == FName(TEXT(\"Health\"))) {\n\t\tAActor* Target = Cast<AActor>(InMod.Target);\n\t\tif (Target) {\n\t\t\tFVector Location = Target->GetActorLocation();\n\t\t\tFVector2D ScreenLocation = UGameplayStatics::ProjectWorldToScreen(GetWorld(), Location);\n\t\t\tif (ScreenLocation.X != 0 && ScreenLocation.Y != 0) {\n\t\t\t\tFText DamageText = FText::Format(LOCTEXT(\"Damage\", \"{0}\"), FText::AsNumber(InMod.Value));\n\t\t\t\tFloatingCombatText->SetInfo(DamageText, ScreenLocation);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.9364644251084}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Attribute == EAFAttributeName::EAFA_Health) {\n\t\tif (InMod.Value > 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (InMod.Value < 0) {\n\t\t\tAActor* TargetActor = Cast<AActor>(InMod.Source);\n\t\t\tif (TargetActor) {\n\t\t\t\tFVector DamageLocation = TargetActor->GetActorLocation();\n\t\t\t\tFVector2D ScreenLocation = UGameplayStatics::ProjectWorldToScreen(GetWorld(), DamageLocation);\n\t\t\t\tif (ScreenLocation.X != 0 && ScreenLocation.Y != 0) {\n\t\t\t\t\tFText DamageText = FText::AsNumber(-InMod.Value);\n\t\t\t\t\tSetInfo(DamageText, ScreenLocation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 38.83748544691575}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade) {\n\t\tif (AbilityInstance) {\n\t\t\tWeaponComponent = Cast<AARWeapon>(GetOwner()->GetWeaponComponent());\n\t\t\tif (WeaponComponent) {\n\t\t\t\tAARCharacter* CharacterOwner = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\t\t\tif (CharacterOwner) {\n\t\t\t\t\tUARWeaponInventoryComponent* WeaponInventory = Cast<UARWeaponInventoryComponent>(WeaponComponent->GetWeaponInventory());\n\t\t\t\t\tif (WeaponInventory) {\n\t\t\t\t\t\tUARItemWeapon* DuplicatedMagazineUpgrade = DuplicateObject<UARItemWeapon>(InMagazineUpgrade, WeaponInventory);\n\t\t\t\t\t\tif (CharacterOwner->GetLocalRole() == ROLE_Authority) {\n\t\t\t\t\t\t\tDuplicatedMagazineUpgrade->UpdateValue(WeaponInventory);\n\t\t\t\t\t\t\tAbilityInstance->AddMagazineUpgrade(DuplicatedMagazineUpgrade);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tOnMagazineUpdateAdded();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.5021692802442}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t", "CodeBleu_score": 3.400341160727512}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance == nullptr) {\n\t\treturn;\n\t}\n\tWeaponComponent = GetOwner()->FindComponentByClass<UARWeaponComponent>();\n\tif (WeaponComponent == nullptr) {\n\t\treturn;\n\t}\n\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOuter());\n\tif (OwnerCharacter == nullptr) {\n\t\treturn;\n\t}\n\tUARWeaponInventoryComponent* Inventory = Cast<UARWeaponInventoryComponent>(OwnerCharacter->GetInventoryComponent());\n\tif (Inventory == nullptr) {\n\t\treturn;\n\t}\n\tUARAbilityInstance* NewAbilityInstance = DuplicateObject<UARAbilityInstance>(AbilityInstance, Inventory);\n\tNewAbilityInstance->MagazineUpgrade = InMagazineUpgrade;\n\tif (OwnerCharacter->HasAuthority()) {\n\t\tNewAbilityInstance->MagazineUpgradeValue = InMagazineUpgrade->GetWeaponValue();\n\t\tNewAbilityInstance->ApplyMagazineUpgradeEffect();\n\t}\n\tOnMagazineUpdateAdded();\n}", "CodeBleu_score": 54.76679995555178}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\n\tif (!Owner)\n\t\treturn;\n\n\tUGAAbilitySystemComponent* AbilityComp = Owner->GetAbilityComp();\n\n\tif (!AbilityComp)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilityComp->BP_GetAbilityByHandle(InAbilityTag);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 57.786047868201905}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\n\tif (!Owner)\n\t\treturn;\n\n\tUAbilitySystemComponent* AbilityComp = Owner->GetAbilitySystemComponent();\n\n\tif (!AbilityComp)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilityComp->GetAbilityByHandle(InAbilityTag);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 56.70016885774564}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\n\tif (!Character)\n\t\treturn;\n\n\tUAbilitySystemComponent* AbilityComp = Character->GetAbilitySystemComponent();\n\n\tif (!AbilityComp)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilityComp->GetAbilityByHandle(InAbilityTag);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 62.49306333283301}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = Character->GetEquipedMainWeapon()->Weapon.ToString();\n\t\t//Data.SocketName = Character->GetEquipedMainWeapon()->Socket;\n\t\tData.Position = Character->GetEquipedMainWeapon()->HolsteredPosition;\n\t\tData.Rotation = Character->GetEquipedMainWeapon()->HolsteredRotation;\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tCurrentWeaponIndex = -1;\n\t}\n}", "CodeBleu_score": 52.39765715887026}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = Character->GetEquipedMainWeapon()->Weapon.ToString();\n\t\t//Data.SocketName = Character->GetEquipedMainWeapon()->Socket;\n\t\tData.Position = Character->GetEquipedMainWeapon()->HolsteredPosition;\n\t\tData.Rotation = Character->GetEquipedMainWeapon()->HolsteredRotation;\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tCurrentWeaponIndex = -1;\n\t}\n}", "CodeBleu_score": 52.44266430811244}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tif (!Character->GetEquipedMainWeapon()->GetChildActor()) {\n\t\t\treturn;\n\t\t}\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = Character->GetEquipedMainWeapon()->GetChildActor()->GetClass()->GetName();\n\t\t//Data.SocketName = Character->GetEquipedMainWeapon()->Socket;\n\t\tData.Position = Character->GetEquipedMainWeapon()->RelativeLocation;\n\t\tData.Rotation = Character->GetEquipedMainWeapon()->RelativeRotation;\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tCurrentWeaponIndex = -1;\n\t}\n}", "CodeBleu_score": 52.542075228541776}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// Only shutdown if we are not running as a dedicated server\n\tif (!FApp::IsDedicatedServer()) {\n\t\t// Remove all loading screen preparation handlers associated with the module\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 50.045209669336586}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// If we're not running as a dedicated server, remove all loading screen preparation handlers associated with this module from the movie player.\n\tif (!FApp::IsGame() && FApp::CanEverRender()) {\n\t\tIMoviePlayer* MoviePlayer = GetMoviePlayer();\n\t\tif (MoviePlayer) {\n\t\t\tMoviePlayer->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 23.326959071771615}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.1566962303026}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"FAsyncLoadingScreenModule::PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::GetIsEnableLoadingScreen()) {\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t\tif (LoadingScreenSettings) {\n\t\t\tLoadingScreenSettings->bStartupLoadingScreen = false;\n\n\t\t\tSetupLoadingScreen(*LoadingScreenSettings);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.57702543108917}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing to setup loading screen\"));\n\n\t// Check if loading screen is enabled\n\tif (IsLoadingScreenEnabled()) {\n\t\t// Get the default loading screen settings\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t\t// Set the startup flag to false\n\t\tLoadingScreenSettings->bStartupLoadingScreen = false;\n\n\t\t// Setup the loading screen\n\t\tSetupLoadingScreen(*LoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 38.897252580317456}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t", "CodeBleu_score": 2.8445293320117564}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tif (GConfig == nullptr) {\n\t\treturn;\n\t}\n\n\t// Remove all existing background images\n\tRemoveAllBackgroundImages();\n\n\t// Retrieve the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings == nullptr) {\n\t\treturn;\n\t}\n\n\t// Retrieve the startup loading screen images\n\tconst FLoadingScreenDescription& StartupLoadingScreenDescription = LoadingScreenSettings->LoadingScreenDescription;\n\tif (StartupLoadingScreenDescription.LoadingImage.IsEmpty() == false) {\n\t\tconst FLoadingScreenImageEntry& StartupLoadingScreenImageEntry = StartupLoadingScreenDescription.LoadingImage;\n\t\tFString StartupLoadingScreenImagePath = FPaths::Combine(FPaths::ProjectContentDir(), StartupLoadingScreenImageEntry.ImageFilePath);\n\t\tTArray<FString> StartupLoadingScreenImagePaths;\n\t\tStartupLoadingScreenImagePaths.Add(StartupLoadingScreenImagePath);\n\t\tLoadImages(StartupLoadingScreenImagePaths, StartupBackgroundImages);\n\t}\n\n\t// Retrieve the default loading screen images\n\tconst FLoadingScreenDescription& DefaultLoadingScreenDescription = LoadingScreenSettings->LoadingScreenDescription;\n\tif (DefaultLoadingScreenDescription.LoadingImage.IsEmpty() == false) {\n\t\tconst FLoadingScreenImageEntry& DefaultLoadingScreenImageEntry = DefaultLoadingScreenDescription.LoadingImage;\n\t\tFString DefaultLoadingScreenImagePath = FPaths::Combine(FPaths::ProjectContentDir(), DefaultLoadingScreenImageEntry.ImageFilePath);\n\t\tTArray<FString> DefaultLoadingScreenImagePaths;\n\t\tDefaultLoadingScreenImagePaths.Add(DefaultLoadingScreenImagePath);\n\t\tLoadImages(DefaultLoadingScreenImagePaths, DefaultBackgroundImages);\n\t}\n}", "CodeBleu_score": 37.63139889506123}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tFLoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tRemoveAllBackgroundImages();\n\t\tif (LoadingScreenSettings->LoadingImage) {\n\t\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->LoadingImage.TryLoad());\n\t\t\tif (Image) {\n\t\t\t\tStartupBackgroundImages.Add(Image);\n\t\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\t\tif (LoadingScreenSettings->AlternateLoadingImage) {\n\t\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->AlternateLoadingImage.TryLoad());\n\t\t\tif (Image) {\n\t\t\t\tStartupBackgroundImages.Add(Image);\n\t\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\t\tif (LoadingScreenSettings->BackgroundImage) {\n\t\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->BackgroundImage.TryLoad());\n\t\t\tif (Image) {\n\t\t\t\tStartupBackgroundImages.Add(Image);\n\t\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\t\tif (LoadingScreenSettings->AlternateBackgroundImage) {\n\t\t\tUTexture2D* Image = Cast<UTexture2D>(LoadingScreenSettings->AlternateBackgroundImage.TryLoad());\n\t\t\tif (Image) {\n\t\t\t\tStartupBackgroundImages.Add(Image);\n\t\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.07041496843122}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tFLoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\tif (Settings) {\n\t\tRemoveAllBackgroundImages();\n\t\tif (Settings->StartupBackgroundImage) {\n\t\t\tif (UTexture2D* Texture = Cast<UTexture2D>(Settings->StartupBackgroundImage.TryLoad())) {\n\t\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t\tfor (const FLoadingScreenEntry& Entry : Settings->DefaultBackgroundImages) {\n\t\t\tif (UTexture2D* Texture = Cast<UTexture2D>(Entry.Image.TryLoad())) {\n\t\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.47255317422697}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Get the alpha value.\n\tfloat Alpha = FMath::Clamp(FMath::FInterpTo(0.0f, 1.0f, InCurrentTime, 0.0f, 1.0f), 0.0f, 1.0f);\n\t\n\t// Update the text's alpha value.\n\tText->SetOpacity(Alpha);\n\t\n\t// Return the timer status.\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 12.040736680039418}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Calculate the new alpha value.\n\tfloat NewAlpha = FMath::FInterpTo(LoadingCompleteText->GetColorAndOpacity().A, 255.0f, InDeltaTime, LoadingCompleteTextFadeInDuration, EInterpCurveType::Linear);\n\t// Set the text's new alpha value.\n\tLoadingCompleteText->SetColorAndOpacity(FLinearColor(LoadingCompleteText->GetColorAndOpacity().R, LoadingCompleteText->GetColorAndOpacity().G, LoadingCompleteText->GetColorAndOpacity().B, NewAlpha));\n\t// Check if the animation is complete.\n\tif (NewAlpha >= 255.0f) {\n\t\t// Reset the animation.\n\t\tLoadingCompleteText->SetColorAndOpacity(FLinearColor(LoadingCompleteText->GetColorAndOpacity().R, LoadingCompleteText->GetColorAndOpacity().G, LoadingCompleteText->GetColorAndOpacity().B, 0.0f));\n\t\t// Stop the timer.\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\t// Continue the animation.\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 23.106912695916566}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// If the text is not visible, return immediately\n\tif (!IsVisible()) {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\n\t// If the animation is not complete, calculate the new alpha value\n\tif (InCurrentTime < AnimationEndTime) {\n\t\tfloat Alpha = FMath::FInterpTo(MinAlpha, MaxAlpha, InCurrentTime, AnimationStartTime, AnimationEndTime, EInterpCurveType::Linear);\n\t\tSetTextAlpha(Alpha);\n\t}\n\t// Otherwise, stop the animation\n\telse {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\n\t// Continue the animation\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 26.094689206080446}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool ready = Data->Index != -1;\n\tData->Lock.unlock();\n\treturn ready;\n}", "CodeBleu_score": 51.7139679433825}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tif (Data->Index != -1) {\n\t\tData->Lock.unlock();\n\t\treturn true;\n\t}\n\tData->Lock.unlock();\n\treturn false;\n}", "CodeBleu_score": 78.841855801989}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool ready = Data->Index != -1;\n\tData->Lock.unlock();\n\treturn ready;\n}", "CodeBleu_score": 51.7139679433825}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t", "CodeBleu_score": 3.2389656853681807}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathState* FindPathState = static_cast<FFindPathState*>(State);\n\tif (FindPathState->QueryID == INVALID_QUERY_ID) {\n\t\treturn false;\n\t}\n\tif (bCleanup) {\n\t\tFindPathState->QueryID = INVALID_QUERY_ID;\n\t\tif (FindPathState->AsyncFindPathRequest.IsValid()) {\n\t\t\tFindPathState->AsyncFindPathRequest->Abort();\n\t\t\tFindPathState->AsyncFindPathRequest.Reset();\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 36.870759669330866}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tauto* This = static_cast<FFindPathState*>(State);\n\tif (!This) {\n\t\treturn false;\n\t}\n\tif (!This->QueryID.IsValid()) {\n\t\treturn false;\n\t}\n\tif (bCleanup) {\n\t\tThis->AbortAsyncFindPathRequest();\n\t\tThis->QueryID.Invalidate();\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 37.3080049725288}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_inside_tree() || is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (current) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_inside_tree() || is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (current) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.957993883710934}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (get_viewport()->get_audio_listener_2d() == nullptr) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (get_viewport()->get_audio_listener_2d() == this) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 58.852207571691025}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_inside_tree() || is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_inside_tree() || is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 61.171252859774064}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (active.is_set()) {\n\t\tERR_FAIL_COND(thread_owner);\n\t\tlock();\n\t\taudio_server_process(p_frames, p_buffer, true);\n\t\tunlock();\n\t}\n}", "CodeBleu_score": 12.071815290688793}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active.is_set()) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint tomix = MIN(todo, chunk_size);\n\n\t\tlock();\n\t\taudio_server_process(tomix, p_buffer, false);\n\t\tunlock();\n\n\t\tp_buffer += tomix * 2;\n\t\ttodo -= tomix;\n\t}\n}", "CodeBleu_score": 32.618803838842695}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active.is_set() || audio_server_thread.is_active()) {\n\t\treturn;\n\t}\n\n\tconst int chunk_frames = 256;\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tconst int tomix = MIN(todo, chunk_frames);\n\n\t\tlock();\n\t\taudio_server_process(tomix, p_buffer, false);\n\t\tunlock();\n\n\t\tp_buffer += tomix * 2;\n\t\ttodo -= tomix;\n\t}\n}", "CodeBleu_score": 39.20979999570259}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n}", "CodeBleu_score": 3.597182188093078}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_point.is_equal_approx(Vector2())) {\n\t\tr_gravity = gravity_vector;\n\t} else {\n\t\tVector2 to_point = gravity_point - p_position;\n\t\tr_gravity = gravity_vector;\n\t\tr_gravity *= (1.0 / to_point.length_squared());\n\t}\n}", "CodeBleu_score": 30.084208495237792}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n#if 0\n\t// This is the old way of doing things, which is wrong.\n\t// See https://github.com/godotengine/godot/issues/32930\n\tif (gravity_point != Vector2()) {\n\t\tVector2 gvec = gravity_vector;\n\t\tif (gvec == Vector2()) {\n\t\t\tgvec = Vector2(0, -1);\n\t\t}\n\n\t\tVector2 diff = gravity_point - p_position;\n\t\tfloat dist = diff.length();\n\t\tif (dist < 0.00001) {\n\t\t\tr_gravity = gvec;\n\t\t} else {\n\t\t\tdiff /= dist;\n\t\t\tr_gravity = gvec - diff * (dist * dist);\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n#else\n\tif (gravity_point != Vector2()) {\n\t\tVector2 gvec = gravity_vector;\n\t\tif (gvec == Vector2()) {\n\t\t\tgvec = Vector2(0, -1);\n\t\t}\n\n\t\tVector2 diff = gravity_point - p_position;\n\t\tfloat dist = diff.length();\n\t\tif (dist < 0.00001) {\n\t\t\tr_gravity = gvec;\n\t\t} else {\n\t\t\tdiff /= dist;\n\t\t\tr_gravity = gvec - diff * (dist * dist);\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n#endif\n}", "CodeBleu_score": 52.58761314530393}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_body_count(); i++) {\n\t\tBody2D *b = get_body_ptr(i);\n\t\tif (b->get_mode() == Body2D::MODE_RIGID && !b->is_active()) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.59214569644407}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tConstraint2D *c = constraints[i];\n\t\tBody2D *a = c->get_body_ptr(0);\n\t\tBody2D *b = c->get_body_ptr(1);\n\t\tif (a->is_active() && b->is_active() && !b->is_in_group(a)) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.871991010664566}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotBody2D *b = (GodotBody2D *)constraints[i]->get_body_ptr();\n\t\tif (b->mode == MODE_RIGID && !b->is_active) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.838384563922993}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (area_add_to_monitor_query_list.in_list()) {\n\t\treturn;\n\t}\n\tif (space) {\n\t\tarea_add_to_monitor_query_list.add_to_list(space);\n\t}\n}", "CodeBleu_score": 49.36459153365879}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space().is_valid() && !area_add_to_monitor_query_list.in_list()) {\n\t\tget_space().add_to_monitor_query_list(area_add_to_monitor_query_list);\n\t}\n}", "CodeBleu_score": 55.99251316661204}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (area_add_to_monitor_query_list.is_valid() && !area_add_to_monitor_query_list.in_list()) {\n\t\tarea_add_to_monitor_query_list.get_space().get_monitor_query_list().add(&area_add_to_monitor_query_list);\n\t}\n}", "CodeBleu_score": 37.31733913327923}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (!is_inside_world())\n\t\treturn;\n\n\tBasis basis = get_transform().basis;\n\n\tVector3 local_inertia_diagonal = basis.xform(inertia_tensor);\n\tVector3 local_inertia_position = basis.xform(inertia_position);\n\n\tVector3 local_inertia_position2 = local_inertia_position.abs();\n\tVector3 local_inertia_diagonal2 = local_inertia_diagonal.abs();\n\n\tVector3 local_inertia_scale = local_inertia_diagonal2.x > local_inertia_diagonal2.y ? local_inertia_diagonal2 : local_inertia_diagonal2.y > local_inertia_diagonal2.z ? local_inertia_diagonal2.y : local_inertia_diagonal2.z;\n\tlocal_inertia_scale.x = local_inertia_scale.x == 0 ? 1 : 1 / local_inertia_scale.x;\n\tlocal_inertia_scale.y = local_inertia_scale.y == 0 ? 1 : 1 / local_inertia_scale.y;\n\tlocal_inertia_scale.z = local_inertia_scale.z == 0 ? 1 : 1 / local_inertia_scale.z;\n\n\tlocal_inertia_diagonal = local_inertia_diagonal * local_inertia_scale;\n\tlocal_inertia_position = local_inertia_position * local_inertia_scale;\n\n\t// Update the body's center of mass and inertia tensor\n\tTransform transform = get_transform();\n\ttransform.orthonormalize();\n\t_update_mass_and_inertia(transform, local_inertia_position, local_inertia_diagonal);\n}", "CodeBleu_score": 42.346848094420366}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (!is_inside_world())\n\t\treturn;\n\n\t// Update center of mass and inertia tensor.\n\tTransform gt = get_transform();\n\tBasis inverse_inertia_tensor = gt.basis.transposed() * _inv_inertia_tensor * gt.basis;\n\tVector3 center_of_mass_offset = gt.xform(get_center_of_mass_offset());\n\t_inv_inertia_tensor = inverse_inertia_tensor.scaled(1.0 / _inv_mass);\n\t_center_of_mass = gt.get_origin() + center_of_mass_offset;\n\t_principal_inertia_axes = inverse_inertia_tensor.get_eigenvectors();\n\n\t// Update transform-dependent properties.\n\t_inv_inertia_tensor_world = gt.basis.xform(_inv_inertia_tensor * gt.basis.transposed());\n\t_transform_inv.origin = -_center_of_mass;\n\t_transform_inv.basis = _transform_inv.basis.scaled(1.0 / _scale);\n\t_transform_inv = gt.xform(_transform_inv);\n\t_transform.origin = _transform_inv.origin;\n\t_transform.basis = _transform_inv.basis.scaled(_scale);\n\t_aabb = AABB(_transform.xform(Vector3(-_extents.x, -_extents.y, -_extents.z)), _transform.xform(Vector3(_extents.x, _extents.y, _extents.z)));\n\t_aabb_cache = _aabb;\n\t_margin = get_margin();\n}", "CodeBleu_score": 38.55966673028727}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (get_script_instance()) {\n\t\treturn;\n\t}\n\n\tif (mode == MODE_RIGID) {\n\t\tTransform gt = get_transform();\n\t\tBasis gb = gt.basis;\n\t\tVector3 gpos = gt.origin;\n\t\tVector3 local_inertia = get_rid().get_inertia();\n\n\t\tTransform gi = get_inv_transform();\n\t\tBasis gi_basis = gi.basis;\n\n\t\t// Update center of mass\n\t\tVector3 com = gpos + gi_basis.xform(local_inertia_origin);\n\t\tset_center_of_mass(com);\n\n\t\t// Update principal axes\n\t\tVector3 p1 = gi_basis.get_axis(0);\n\t\tVector3 p2 = gi_basis.get_axis(1);\n\t\tVector3 p3 = gi_basis.get_axis(2);\n\n\t\t// Update inertia tensor\n\t\tBasis local_inertia_basis(p1, p2, p3);\n\t\tlocal_inertia_basis.scale(local_inertia);\n\t\tset_inertia_tensor(local_inertia_basis);\n\t}\n}", "CodeBleu_score": 42.65542888501047}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 87.48735383021885}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 87.48735383021885}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 87.48735383021885}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tif (p_feed.is_valid()) {\n\t\t// Find the feed and remove it.\n\t\tfor (int i = 0; i < feeds.size(); i++) {\n\t\t\tif (feeds[i]->get_id() == p_feed->get_id()) {\n\t\t\t\tprint_verbose(vformat(\"Removing feed %d: %s\", vformat(SNAME), p_feed->get_name()));\n\t\t\t\tfeeds.remove_at(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Emit the signal.\n\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t}\n}", "CodeBleu_score": 54.15082579385477}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\tCameraFeed *feed = p_feed.ptr();\n\n\tprint_verbose(vformat(\"Removing feed '%s' (%d)...\", *feed->get_name(), feed->get_id()));\n\n\tfeeds.remove_at(feed->get_position());\n\temit_signal(SNAME(\"feed_removed\"), feed->get_id());\n}", "CodeBleu_score": 32.92687148081438}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\tFeeds::iterator it = feeds.find(p_feed->get_id());\n\tif (it == feeds.end()) {\n\t\tWARN_PRINT(String(\"Feed with ID \") + itos(p_feed->get_id()) + \" not found in CameraServer.\");\n\t\treturn;\n\t}\n\n\tFeed *p_feed_ptr = *it;\n\tprint_verbose(vformat(\"Removing feed: %d (%s)\", itos(p_feed->get_id()), p_feed->get_name()));\n\tfeeds.remove_at(it);\n\tmemdelete(p_feed_ptr);\n\temit_signal(SNAME(\"feed_removed\"), p_feed->get_id());\n}", "CodeBleu_score": 48.73337425752812}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tCCASSERT(action != NULL, \"Argument must be non-nil\");\nEaseRateAction* easeRateAction = new EaseRateAction();\nif (easeRateAction && easeRateAction->initWithAction(action, rate))\n{\neaseRateAction->autorelease();\nreturn easeRateAction;\n}\nCC_SAFE_DELETE(easeRateAction);\nreturn NULL;\n}", "CodeBleu_score": 75.59178292718573}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != NULL, \"Argument must be non-nil\");\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 57.034536708103346}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != NULL, \"Argument must be non-nil\");\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 52.48189584418235}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (Node* child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode != nullptr) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 49.780869162362286}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto child : node->getChildren()) {\n\t\tauto result = findChildByNameRecursively(child, childName);\n\t\tif (result != nullptr) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 47.558293350588244}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode != nullptr) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 50.1797870183636}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\t// If the target exists, remove the current action from the fade-in, fade-out, and running animation maps.\n\tif (target) {\n\t\ts_fadeInAnimates.erase(s_fadeInAnimates.find(target));\n\t\ts_fadeOutAnimates.erase(s_fadeOutAnimates.find(target));\n\t\ts_runningAnimates.erase(s_runningAnimates.find(target));\n\t}\n}", "CodeBleu_score": 25.50888947571992}, {"code": "void Animate3D::removeFromMap(){\n\t\t//If the target exists, search for the action in the fade-in, fade-out, and running animation maps and remove it if it exists.\n\tif (target) {\n\t\ts_fadeInAnimates.find(target, &Animate3D::removeFromMap);\n\t\ts_fadeOutAnimates.find(target, &Animate3D::removeFromMap);\n\t\ts_runningAnimates.find(target, &Animate3D::removeFromMap);\n\t}\n}", "CodeBleu_score": 17.74313016626476}, {"code": "void Animate3D::removeFromMap(){\n\t\t// If the target exists, it searches for and erases the action from fade-in, fade-out, and running animation maps if it matches the current instance.\n\tif (target) {\n\t\ts_fadeInAnimates.erase(target);\n\t\ts_fadeOutAnimates.erase(target);\n\t\ts_runningAnimates.erase(target);\n\t}\n}", "CodeBleu_score": 17.406562196183298}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\t// generate a unique key\n\tstd::string key = fileName + animationName;\n\t// check the cache for an existing animation\n\tAnimation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\n\tif (!animation) {\n\t\t// animation not found, create a new animation\n\t\tanimation = new (std::nothrow) Animation3D();\n\t\t// if creation failed, return nullptr\n\t\tif (!animation)\n\t\t\treturn nullptr;\n\t\t// attempt to initialize the animation\n\t\tif (!animation->initWithFile(fileName, animationName)) {\n\t\t\t// initialization failed, delete the animation\n\t\t\tCC_SAFE_DELETE(animation);\n\t\t\treturn nullptr;\n\t\t}\n\t\t// animation successfully initialized, add it to the cache\n\t\tAnimation3DCache::getInstance()->addAnimation(key, animation);\n\t}\n\t// return the animation\n\treturn animation;\n}", "CodeBleu_score": 53.29985084488791}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D *animation = Animation3DCache::getInstance()->getAnimation(key);\n\tif (!animation) {\n\t\tanimation = new (std::nothrow) Animation3D();\n\t\tif (animation && !animation->initWithFile(fileName, animationName)) {\n\t\t\tCC_SAFE_DELETE(animation);\n\t\t\tanimation = nullptr;\n\t\t} else {\n\t\t\tanimation->autorelease();\n\t\t}\n\t\tAnimation3DCache::getInstance()->addAnimation(key, animation);\n\t}\n\treturn animation;\n}", "CodeBleu_score": 55.552178895975466}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* ret = Animation3DCache::getInstance()->getAnimation(key);\n\tif (!ret) {\n\t\tret = new (std::nothrow) Animation3D();\n\t\tif (ret && !ret->initWithFile(fileName, animationName)) {\n\t\t\tCC_SAFE_DELETE(ret);\n\t\t\tret = nullptr;\n\t\t} else {\n\t\t\tret->autorelease();\n\t\t}\n\t}\n\treturn ret;\n}", "CodeBleu_score": 44.569426699178926}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tAnimationMap::iterator itor = _animations.begin();\n\twhile (itor != _animations.end()) {\n\t\tAnimation* animation = itor->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\titor = _animations.erase(itor);\n\t\t}\n\t\telse {\n\t\t\titor++;\n\t\t}\n\t}\n}", "CodeBleu_score": 57.48174114950218}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tstd::map<std::string, Animation3D*>::iterator itor;\n\tfor (itor = _animations.begin(); itor != _animations.end();) {\n\t\tAnimation3D* animation = itor->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\titor = _animations.erase(itor);\n\t\t}\n\t\telse {\n\t\t\titor++;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.275736013970295}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor = _animations.begin(); itor != _animations.end(); ++itor) {\n\t\tif (itor->second->getReferenceCount() == 1) {\n\t\t\titor->second->release();\n\t\t\titor = _animations.erase(itor);\n\t\t}\n\t}\n}", "CodeBleu_score": 78.32011083346772}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = BillBoard::create();\nif (billboard && billboard->initWithTexture(texture, mode))\n{\nbillboard->autorelease();\n}\nelse\n{\nCC_SAFE_DELETE(billboard);\n}\nreturn billboard;\n}", "CodeBleu_score": 55.561760628560855}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new BillBoard();\nif (billboard && billboard->initWithTexture(texture, mode))\n{\nbillboard->autorelease();\nreturn billboard;\n}\nCC_SAFE_DELETE(billboard);\nreturn nullptr;\n}", "CodeBleu_score": 67.91385207526126}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new BillBoard();\nif (billboard && billboard->initWithTexture(texture, mode))\n{\nbillboard->autorelease();\n}\nelse\n{\nCC_SAFE_DELETE(billboard);\n}\nreturn billboard;\n}", "CodeBleu_score": 59.00157017408575}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path)\n\t\treturn true;\n\n\tclear();\n\n\t_path = path;\n\n\tstd::string extension = FileUtils::getInstance()->getFileExtension(_path);\n\n\tif (extension == \"c3t\") {\n\t\tif (!loadJson(path))\n\t\t\tCCLOG(\"warning: Failed to load bundle: %s\", path.c_str());\n\t}\n\telse if (extension == \"c3b\") {\n\t\tif (!loadBinary(path))\n\t\t\tCCLOG(\"warning: Failed to load bundle: %s\", path.c_str());\n\t}\n\telse {\n\t\tCCLOG(\"warning: Unknown bundle format: %s\", path.c_str());\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 50.341009980459596}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path)\n\t\treturn true;\n\n\tclear();\n\n\t_path = path;\n\n\t// get file extension\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(_path);\n\n\tif (ext == \".c3b\") {\n\t\treturn loadBinary(_path);\n\t}\n\telse if (ext == \".c3t\") {\n\t\treturn loadJson(_path);\n\t}\n\telse {\n\t\tclear();\n\t\tCCLOG(\"warning: Unknown file extension for bundle '%s'.\", _path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 45.00951345686791}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\t// Check if path is empty or already loaded\n\tif (path.empty() || _path == path)\n\t\treturn true;\n\t\n\t// Check file extension\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(path);\n\tif (ext == \".c3t\")\n\t\treturn loadJson(path);\n\telse if (ext == \".c3b\")\n\t\treturn loadBinary(path);\n\telse {\n\t\tCCLOG(\"warning: Invalid bundle format: %s\", path.c_str());\n\t\tclear();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 41.16425711773852}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\n\tif (_binary)\n\t\treturn loadSkinDataBinary(skindata);\n\telse\n\t\treturn loadSkinDataJson(skindata);\n}", "CodeBleu_score": 61.634963238625474}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tif (_isBinary) {\n\t\treturn loadSkinDataBinary(skindata);\n\t}\n\telse {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 90.83479861409403}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (!skindata)\n\t\treturn false;\n\n\tskindata->resetData();\n\n\tif (_isBinary)\n\t\treturn loadSkinDataBinary(skindata);\n\telse\n\t\treturn loadSkinDataJson(skindata);\n}", "CodeBleu_score": 63.26728136717021}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tif (bytesToRead > thiz->_fileData.getSize() - thiz->_fileData.getPosition()) {\n\t\tbytesToRead = thiz->_fileData.getSize() - thiz->_fileData.getPosition();\n\t}\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), bytesToRead);\n\t\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + bytesToRead);\n\t}\n\treturn bytesToRead;\n}", "CodeBleu_score": 57.29746011432818}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tsize_t bytesRead = 0;\n\tsize_t bytesLeft = thiz->_fileData.getSize() - thiz->_fileData.getPosition();\n\tif (bytesToRead > bytesLeft) {\n\t\tbytesToRead = bytesLeft;\n\t}\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), bytesToRead);\n\t\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + bytesToRead);\n\t\tbytesRead = bytesToRead;\n\t}\n\treturn bytesRead;\n}", "CodeBleu_score": 56.8000033481079}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\n\tsize_t bytesToRead = size * nmemb;\n\tsize_t bytesRead = 0;\n\n\tif (thiz->_fileData.getSize() > 0) {\n\t\tsize_t bytesRemaining = thiz->_fileData.getSize() - thiz->_fileData.getPosition();\n\n\t\tif (bytesRemaining > 0) {\n\t\t\tbytesToRead = std::min(bytesToRead, bytesRemaining);\n\n\t\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), bytesToRead);\n\t\t\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + bytesToRead);\n\t\t\tbytesRead = bytesToRead;\n\t\t}\n\t}\n\n\treturn bytesRead;\n}", "CodeBleu_score": 55.13483103513761}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>();\npcmBuffer->reserve(4096);\n}", "CodeBleu_score": 50.84508547369844}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>(4096);\npcmBuffer->reserve(4096);\n}", "CodeBleu_score": 43.905406804246496}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>();\npcmBuffer->reserve(4096);\n}", "CodeBleu_score": 50.84508547369844}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::unique_lock<std::mutex> lock(sDownloaderMapMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it == sDownloaderMap.end()) {\n\t\treturn nullptr;\n\t}\n\treturn it->second;\n}", "CodeBleu_score": 64.2220571667467}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tcocos2d::Mutex::ScopedLock lock(sDownloaderMapMutex);\n\tauto it = sDownloaderMap.find(id);\n\treturn (it != sDownloaderMap.end()) ? it->second : nullptr;\n}", "CodeBleu_score": 51.602092406148884}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tcocos2d::Mutex::ScopedLock lock(_mutexMap);\n\tauto it = sDownloaderMap.find(id);\n\tif (it != sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 55.55526119413025}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\treturn cc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 31.590239665877462}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename)\n\telse\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)\n\tend", "CodeBleu_score": 46.2982235126695}, {"code": "function M.playMusic(filename, isLoop)\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 30.627005567523202}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\nend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn self.detect", "CodeBleu_score": 6.655686801442134}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn self._detect()", "CodeBleu_score": 5.110276168861432}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\nend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\t\nend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\t\nend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create(\"res/images/hurtEffect.png\")\n\thurtEffect:setScale(0.5)\n\thurtEffect:setPosition3D(cc.V3(target:getPositionX(), target:getPositionY(), target:getPositionZ()))\n\tlocal hurtAnimation = self.animationCache:getAnimation(\"hurtAnimation\")\n\tlocal hurtAnimate = cc.Animate:create(hurtAnimation)\n\tlocal hurtRemove = cc.RemoveSelf:create()\n\tlocal hurtSequence = cc.Sequence:create(hurtAnimate, hurtRemove, nil)\n\thurtEffect:runAction(hurtSequence)\n\ttarget:addChild(hurtEffect)\n\thurtEffect:setCameraMask(2)", "CodeBleu_score": 55.28828807796534}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create(\"hurtAnimation\")\n\thurtEffect:setCameraMask(1)\n\thurtEffect:setScale(0.5)\n\tlocal hurtEffectPosition = cc.V3(target:getPosition3D().x, target:getPosition3D().y + 1.0, target:getPosition3D().z)\n\thurtEffect:setPosition3D(hurtEffectPosition)\n\tlocal hurtEffectAnimation = cc.Animate:create(self.hurtAnimation)\n\tlocal hurtEffectRemoveSelf = cc.RemoveSelf:create(true)\n\thurtEffect:runAction(cc.Sequence:create(hurtEffectAnimation, hurtEffectRemoveSelf))\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 51.51636869170121}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.animationCache:getAnimation(\"hurtAnimation\")\n\tlocal hurtEffect = cc.BillBoard:create(\"res/hurt.png\")\n\tlocal scale = cc.V3(0.5, 0.5, 0.5)\n\thurtEffect:setScale(scale)\n\thurtEffect:setPosition3D(target:getPosition3D())\n\thurtEffect:setCameraMask(0x1)\n\ttarget:addChild(hurtEffect)\n\thurtEffect:runAction(cc.Sequence:create(hurtAnimation, cc.RemoveSelf:create()))", "CodeBleu_score": 61.39609104428361}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tself.seq:clear()\n\tself.seq:append(cc.DelayTime:create(0.1))\n\tself.seq:append(cc.CallFunc:create(self.removeFromParent))\n\tself.seq:append(cc.DelayTime:create(0.5))\n\tself.part3 = cc.ParticleSystemQuad:create(\"particles/fireball.plist\")\n\tself:addChild(self.part3)\n\tself.part3:setPosition(self.sp:convertToWorldSpace(cc.p(0, 0)))\n\tself.part3:setGlobalZOrder(self:getGlobalZOrder())\n\tself.part3:setScale(0.2)\n\tself.part3:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tself.part3:setLifeVar(0.5)\n\tself.part3:setStartSizeVar(10)\n\tself.part3:setEndSizeVar(0)\n\tself.part3:setStartColor(cc.c3b(100, 100, 100))\n\tself.part3:setEndColor(cc.c3b(0, 0, 0))\n\tself.part3:setAngle(90)\n\tself.part3:setSpeed(200)\n\tself.part3:setGravity(cc.p(0, 0))\n\tself.part3:setEmissionRate(20)\n\tself.part3:setTangentialAccel(0)\n\tself.part3:setRadialAccel(0)\n\tself.part3:setScaleY(0.1)\n\tself.part3:setOpacity(255)\n\tself.part3:setBlendAdditive(true)\n\tself.part3:setDuration(0.5)\n\tself.part3:setTotalParticles(50)\n\tself.part3:setTexture(magicf:getTexture())\n\tself.part3:setTextureRect(magicf:getRect())\n\tself.part3:setPosition(self.sp:convertToWorldSpace(cc", "CodeBleu_score": 44.20300648495322}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(1.0), cc.CallFunc:create(self.removeFromParent), nil)\n\tself:runAction(seq)\n\tlocal magic = cc.ParticleSystemQuad:create(\"particles/MagicBlue.plist\")\n\tmagic:setPosition(self.getPosition())\n\tmagic:setLife(2.0)\n\tmagic:setStartSizeVar(1.0)\n\tmagic:setEndSizeVar(1.0)\n\tmagic:setDuration(0.5)\n\tmagic:setTexture(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particles/MagicBlue.png\"))\n\tmagic:setBlendAdditive(true)\n\tmagic:setGlobalZOrder(self:getGlobalZOrder())\n\tmagic:setCameraMask(self:getCameraMask())\n\tself:addChild(magic)\n\tmagic:runAction(cc.RepeatForever:create(cc.RotateBy:create(2.0, 360.0)))\n\tmagic:setScale(0.01)\n\tself.sp:setTextureRect(magicf:getRect())\n\tself.sp:runAction(cc.FadeOut:create(1.0))\n\tself.sp:setScale(0.1)", "CodeBleu_score": 55.14674583606711}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(1), cc.RemoveSelf:create())\n\tself:runAction(seq)\n\tself.part3 = cc.ParticleSystemQuad:create(\"particles/fireball.plist\")\n\tself.part3:setPosition(cc.p(self:convertToWorldSpace(cc.p(0,0))))\n\tself:addChild(self.part3)\n\tself.part3:setScale(0.5)\n\tself.part3:setGlobalZOrder(self:getGlobalZOrder())\n\tself.part3:setLife(1)\n\tself.part3:setTotalParticles(100)\n\tself.part3:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"fireball.png\"))\n\tself.part3:setBlendAdditive(true)\n\tself.part3:setEmissionRate(100)\n\tself.part3:setSpeed(100)\n\tself.part3:setAngle(90)\n\tself.part3:setGravity(cc.p(0,0))\n\tself.part3:setTangentialAccel(100)\n\tself.part3:setRadialAccel(0)\n\tself.part3:setStartSize(10)\n\tself.part3:setEndSize(10)\n\tself.part3:setStartColor(cc.c3b(255,255,255))\n\tself.part3:setEndColor(cc.c3b(255,255,255))\n\tself.part3:setAngleVar(360)\n\tself.part3:setStartRadius(0)\n\tself.part3:setEndRadius(0)\n\tself.part3:setRotatePerS(1)\n\tself.part3:setRotatePerSecond(1)\n\tself.part3:setDuration(-1)\n\tself.part3:setEmissionRate(100)\n\tself.part3:setLifeVar(1)\n\tself.part3:setAngle", "CodeBleu_score": 50.325874562861294}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tcc.GreyShader:setGreyShader(self.Knight, true)\n\telseif hero.name == \"Archer\" then\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tcc.GreyShader:setGreyShader(self.Archer, true)\n\telseif hero.name == \"Mage\" then\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\t\tcc.GreyShader:setGreyShader(self.Mage, true)\n\tend", "CodeBleu_score": 48.16290105408924}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero == \"Knight\" then\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngryClone:setShader(cc.GreyShader:create())\n\telseif hero == \"Mage\" then\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngryClone:setShader(cc.GreyShader:create())\n\telseif hero == \"Archer\" then\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngryClone:setShader(cc.GreyShader:create())\n\tend", "CodeBleu_score": 44.091529837703405}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngryImage:addShader(self.GreyShader)\n\telseif hero.name == \"Archer\" then\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngryImage:addShader(self.GreyShader)\n\telseif hero.name == \"Mage\" then\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngryImage:addShader(self.GreyShader)\n\tend", "CodeBleu_score": 49.99304221232344}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\nend\n", "CodeBleu_score": 0.2515050076448044}, {"code": "local function moveCamera(dt)\n\t\tif not camera then\n\t\treturn\n\tend\n\tif camera.target then\n\t\tcamera.position = cc.pLerp(camera.position, camera.target, 20 * dt)\n\tend\n\tif camera.focus then\n\t\tcamera.position = cc.pLerp(camera.position, camera.focus, 20 * dt)\n\tend\n\tcamera:setPosition(camera.position.x, camera.position.y)\n\tcamera:setPosition3D(camera.position)\n\tif camera.target then\n\t\tcamera:lookAt(camera.target.x, camera.target.y)\n\tend\n\tif camera.focus then\n\t\tcamera:lookAt(camera.focus.x, camera.focus.y)\n\tend", "CodeBleu_score": 27.369768427328427}, {"code": "local function moveCamera(dt)\n\t\tif camera == nil then\n\t\treturn\n\tend\n\tif camera.mode == \"followHero\" then\n\t\tlocal heroes = getHeroes()\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tcamera:setPosition(focusPoint.x, focusPoint.y)\n\t\tcamera:lookAt(focusPoint.x, focusPoint.y)\n\telseif camera.mode == \"followHero2\" then\n\t\tlocal heroes = getHeroes()\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tcamera:setPosition(focusPoint.x, focusPoint.y)\n\t\tcamera:lookAt(focusPoint.x, focusPoint.y)\n\telseif camera.mode == \"followHero3\" then\n\t\tlocal heroes = getHeroes()\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tcamera:setPosition(focusPoint.x, focusPoint.y)\n\t\tcamera:lookAt(focusPoint.x, focusPoint.y)\n\telseif camera.mode == \"followHero4\" then\n\t\tlocal heroes = getHeroes()\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tcamera:setPosition(focusPoint.x, focusPoint.y)\n\t\tcamera:lookAt(focusPoint.x, focusPoint.y)\n\telseif camera.mode == \"followHero5\" then\n\t\tlocal heroes = getHeroes()\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tcamera:setPosition(focusPoint.x, focusPoint.y)\n\t\tcamera:lookAt(focusPoint.x, focusPoint.y)\n\telseif camera.mode == \"followHero6\" then\n\t\tlocal heroes = getHeroes()\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tcamera:setPosition(focusPoint.x, focusPoint.y)\n\t\tcamera:lookAt(focusPoint.x, focusPoint.y)\n\telseif camera.mode == \"followHero7\" then\n\t\tlocal heroes = getHeroes()\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tcamera:setPosition(focusPoint.x, focusPoint.y)\n\t\tcamera:lookAt(focusPoint.x, focusPoint", "CodeBleu_score": 36.98196975687998}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor i = 1, HeroManager.GetNumHeroes(), 1 do \n\t\tlocal hero = HeroManager.GetHero(i)\n\t\tlocal particle = hero:FindModifierByName(\"modifier_generic_bonus_gold\")\n\t\tif particle then \n\t\t\tparticle:SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 35.87496365148445}, {"code": "local function updateParticlePos()\n\t\tfor i = 1, HeroManager:GetNumHeroes() do \n\t\tlocal hero = HeroManager:GetHero(i)\n\t\tlocal effectNode = hero.effectNode\n\t\tif effectNode then \n\t\t\tlocal pos = hero:GetAbsOrigin()\n\t\t\teffectNode:SetAbsOrigin(pos)\n\t\tend\n\tend", "CodeBleu_score": 37.41336692308474}, {"code": "local function updateParticlePos()\n\t\tfor i,hero in ipairs(HeroManager.getAliveHeroes()) do \n\t\tif hero.effectNode then \n\t\t\thero.effectNode:setPosition(hero:getUnit():getPosition())\n\t\tend\n\tend", "CodeBleu_score": 23.501223240064693}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\nend\n", "CodeBleu_score": 1.5380261479777244}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.selectedHeroTag)\n\tlocal raceType = hero:getRaceType()\n\tif raceType == \"Knight\" then\n\t\taudio.play(self.knightAudio)\n\telseif raceType == \"Archer\" then\n\t\taudio.play(self.archerAudio)\n\telseif raceType == \"Mage\" then\n\t\taudio.play(self.mageAudio)\n\tend", "CodeBleu_score": 46.41866728576184}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.currentHeroTag)\n\tlocal race = hero:getRaceType()\n\tif race == \"Knight\" then\n\t\taudio.play(self.knightAudio)\n\telseif race == \"Archer\" then\n\t\taudio.play(self.archerAudio)\n\telseif race == \"Mage\" then\n\t\taudio.play(self.mageAudio)\n\tend", "CodeBleu_score": 45.89711759912673}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:create()\n\tlocal mage = Mage:create()\n\tlocal archer = Archer:create()\n\tknight:setPosition(cc.p(100, 100))\n\tmage:setPosition(cc.p(300, 100))\n\tarcher:setPosition(cc.p(500, 100))\n\tcurrentLayer:addChild(knight)\n\tcurrentLayer:addChild(mage)\n\tcurrentLayer:addChild(archer)\n\tHeroManager:pushlast(knight)\n\tHeroManager:pushlast(mage)\n\tHeroManager:pushlast(archer)", "CodeBleu_score": 58.162723392664276}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:create()\n\tlocal mage = Mage:create()\n\tlocal archer = Archer:create()\n\tknight:setPosition(200, 300)\n\tmage:setPosition(300, 300)\n\tarcher:setPosition(400, 300)\n\tcurrentLayer:addChild(knight)\n\tcurrentLayer:addChild(mage)\n\tcurrentLayer:addChild(archer)\n\theroManager:pushLast(knight)\n\theroManager:pushLast(mage)\n\theroManager:pushLast(archer)", "CodeBleu_score": 52.49195362647136}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:create()\n\tlocal mage = Mage:create()\n\tlocal archer = Archer:create()\n\tknight:setPosition(0, 0)\n\tmage:setPosition(100, 0)\n\tarcher:setPosition(200, 0)\n\tcurrentLayer:addChild(knight)\n\tcurrentLayer:addChild(mage)\n\tcurrentLayer:addChild(archer)\n\tknight:idleMode()\n\tmage:idleMode()\n\tarcher:idleMode()\n\tHeroManager:pushlast(knight)\n\tHeroManager:pushlast(mage)\n\tHeroManager:pushlast(archer)", "CodeBleu_score": 58.23058780863839}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal newBoss = Rat(self.game)\n\tnewBoss.mask = MASK_MONSTER\n\tnewBoss.x = 150\n\tnewBoss.y = 150\n\tnewBoss.direction = DIRECTION_RIGHT\n\tnewBoss:setAIEnabled(false)\n\tnewBoss:bounceOut()\n\tself.game:addMonster(newBoss)", "CodeBleu_score": 23.563788819119203}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss:setCameraMask(1)\n\tboss:setFacingDirection(1)\n\tboss:setPosition(0, 0)\n\tboss:setAIEnabled(false)\n\tboss:setScale(1.25, 1.25)\n\tboss:setSpeed(1)\n\tboss:move(0, 100)\n\tboss:move(0, -100)\n\tboss:setAIEnabled(true)\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 29.77878566335551}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat(self.game, self.game.player)\n\tboss.cameraMask = self.game.cameraMask\n\tboss.x, boss.y = self.game.player.x, self.game.player.y\n\tboss.facing = self.game.player.facing\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tself.game.monsterManager:add(boss)", "CodeBleu_score": 37.02825014004222}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 58.106581541073375}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 58.106581541073375}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation3d = cc.Animation3D:create(file)\n\tlocal animate3d = cc.Animate3D:create(animation3d, begin, finish)\n\tanimate3d:setSpeed(speed)\n\tanimate3d:retain()\n\treturn animate3d", "CodeBleu_score": 75.57713964898959}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i = #table, 1, -1 do \n\t\ttable.remove(table, i) \n\tend ", "CodeBleu_score": 26.304689299629104}, {"code": "function removeAll(table)\n\t\tfor i=#table, 1, -1 do \n\t\ttable.remove(table, i) \n\tend ", "CodeBleu_score": 26.06602827669041}, {"code": "function removeAll(table)\n\t\tfor i = #table, 1, -1 do \n\t\ttable.remove(table, i) \n\tend ", "CodeBleu_score": 26.304689299629104}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal seq = cc.Sequence:create(cc.DelayTime:create(delay), func)\n\ttarget:runAction(seq)", "CodeBleu_score": 50.85493859234196}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal call = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(action, call, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 59.54034305042127}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callAction = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(delayAction, callAction, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 57.6877562251489}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loading = {}\n\tlocal fontSize = 32\n\tlocal fontName = \"Arial\"\n\tlocal fontColor = cc.c3b(255, 255, 255)\n\tlocal font = cc.Label:createWithTTF(fontName, fontSize, fontColor)\n\tfont:setPosition(cc.p(visibleSize.width / 2, visibleSize.height / 2))\n\tfont:setAnchorPoint(cc.p(0.5, 0.5))\n\tfont:setTag(TAG_LOADING)\n\tlayer:addChild(font)\n\tloading.font = font\n\tlocal fontSize2 = 24\n\tlocal fontName2 = \"Arial\"\n\tlocal fontColor2 = cc.c3b(255, 255, 255)\n\tlocal font2 = cc.Label:createWithTTF(fontName2, fontSize2, fontColor2)\n\tfont2:setPosition(cc.p(visibleSize.width / 2, visibleSize.height / 2 - 100))\n\tfont2:setAnchorPoint(cc.p(0.5, 0.5))\n\tfont2:setTag(TAG_LOADING)\n\tlayer:addChild(font2)\n\tloading.font2 = font2\n\treturn loading", "CodeBleu_score": 33.599888745493615}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loading = {\n\t\tlayer:addChild(cc.Label:createWithTTF(\"Loading\", \"fonts/arial.ttf\", 30)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"0%\", \"fonts/arial.ttf\", 30)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"0%\", \"fonts/arial.ttf\", 30)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"0%\", \"fonts/arial.ttf\", 30))\n\t}\n\tloading[1]:setPosition(cc.p(winSize.width / 2, winSize.height / 2 + 100))\n\tloading[2]:setPosition(cc.p(winSize.width / 2, winSize.height / 2))\n\tloading[3]:setPosition(cc.p(winSize.width / 2, winSize.height / 2 - 100))\n\tloading[4]:setPosition(cc.p(winSize.width / 2, winSize.height / 2 - 200))\n\tself._loading = loading", "CodeBleu_score": 39.85131006712755}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tlocal font = cc.Font:create(\"Helvetica\", 24)\n\tlocal label = cc.Label:createWithTTF(font, \"Loading...\")\n\tlabel:setPosition(cc.p(self.centerX, self.centerY - 50))\n\tlayer:addChild(label)\n\tself._loading[1] = label\n\tlabel = cc.Label:createWithTTF(font, \"Loading..\")\n\tlabel:setPosition(cc.p(self.centerX, self.centerY))\n\tlayer:addChild(label)\n\tself._loading[2] = label\n\tlabel = cc.Label:createWithTTF(font, \"Loading.\")\n\tlabel:setPosition(cc.p(self.centerX, self.centerY + 50))\n\tlayer:addChild(label)\n\tself._loading[3] = label", "CodeBleu_score": 36.09471464078145}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.32233247160328}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuScene.createLayer()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 58.83760795393551}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tscene:addChild(MainMenuLayer.create())\n\treturn scene", "CodeBleu_score": 42.006636281451506}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\tlocal objectType = object.type\n\tlocal objectX = object.x\n\tlocal objectY = object.y\n\tlocal objectWidth = object.width\n\tlocal objectHeight = object.height\n \n\tlocal heroes = HeroManager.heroes\n\tlocal monsters = MonsterManager.monsters\n \n\tfor i = 1, #heroes do\n\t\tlocal hero = heroes[i]\n\t\tlocal heroType = hero.type\n\t\tlocal heroX = hero.x\n\t\tlocal heroY = hero.y\n\t\tlocal heroWidth = hero.width\n\t\tlocal heroHeight = hero.height\n \n\t\tif hero.alive and objectType == heroType and heroX < objectX + objectWidth and objectX < heroX + heroWidth and heroY < objectY + objectHeight and objectY < heroY + heroHeight then\n\t\t\tsolveCollision(object, hero)\n\t\tend\n\tend\n \n\tfor i = 1, #monsters do\n\t\tlocal monster = monsters[i]\n\t\tlocal monsterType = monster.type\n\t\tlocal monsterX = monster.x\n\t\tlocal monsterY = monster.y\n\t\tlocal monsterWidth = monster.width\n\t\tlocal monsterHeight = monster.height\n \n\t\tif monster.alive and objectType == monsterType and monsterX < objectX + objectWidth and objectX < monsterX + monsterWidth and monsterY < objectY + objectHeight and objectY < monsterY + monsterHeight then\n\t\t\tsolveCollision(object, monster)\n\t\tend\n\tend", "CodeBleu_score": 44.108660263022045}, {"code": "local function collision(object)\n\n\t\tif object.type == \"hero\" then\n\t\tfor i, v in pairs(HeroManager.heroes) do\n\t\t\tif v.id ~= object.id and v.isAlive == true then\n\t\t\t\tif object.x < v.x + v.width and object.x + object.width > v.x and object.y < v.y + v.height and object.height + object.y > v.y then\n\t\t\t\t\tif object.speedX > 0 then\n\t\t\t\t\t\tobject.x = v.x - object.width\n\t\t\t\t\telse\n\t\t\t\t\t\tobject.x = v.x + v.width\n\t\t\t\t\tend\n\t\t\t\t\tsolveCollision(object, v)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\telseif object.type == \"monster\" then\n\t\tfor i, v in pairs(MonsterManager.monsters) do\n\t\t\tif v.id ~= object.id and v.isAlive == true then\n\t\t\t\tif object.x < v.x + v.width and object.x + object.width > v.x and object.y < v.y + v.height and object.height + object.y > v.y then\n\t\t\t\t\tif object.speedX > 0 then\n\t\t\t\t\t\tobject.x = v.x - object.width\n\t\t\t\t\telse\n\t\t\t\t\t\tobject.x = v.x + v.width\n\t\t\t\t\tend\n\t\t\t\t\tsolveCollision(object, v)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 33.33183617254684}, {"code": "local function collision(object)\n\n\t\tlocal heroes = HeroManager.heroes\n\tlocal monsters = MonsterManager.monsters\n\n\tfor i = 1, #heroes do\n\t\tif heroes[i].alive then\n\t\t\tif object.collision(heroes[i]) then\n\t\t\t\tsolveCollision(object, heroes[i])\n\t\t\tend\n\t\tend\n\tend\n\n\tfor i = 1, #monsters do\n\t\tif monsters[i].alive then\n\t\t\tif object.collision(monsters[i]) then\n\t\t\t\tsolveCollision(object, monsters[i])\n\t\t\tend\n\t\tend\n\tend\n", "CodeBleu_score": 31.204417071721252}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager, 1, -1 do\n\t\tif HeroManager[i].isAlive then\n\t\t\tfor j=#MonsterManager, 1, -1 do\n\t\t\t\tif MonsterManager[j].isAlive then\n\t\t\t\t\tif HeroManager[i].collision(MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i].isOutOfBound(MonsterManager[j])\n\t\t\t\t\t\tMonsterManager[j].isOutOfBound(HeroManager[i])\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\ttable.remove(MonsterManager, j)\n\t\t\t\tend\n\t\t\tend\n\t\t\tHeroManager[i].updatePosition(dt)\n\t\telse\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend", "CodeBleu_score": 36.43981825421048}, {"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i]:alive() then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j]:alive() then\n\t\t\t\t\tif HeroManager[i]:collision(MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i]:isOutOfBound()\n\t\t\t\t\t\tMonsterManager[j]:isOutOfBound()\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tMonsterManager:remove(j)\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tHeroManager:remove(i)\n\t\tend\n\tend", "CodeBleu_score": 25.24827374854974}, {"code": "function collisionDetect(dt)\n\t\t-- Iterate through HeroManager list in reverse order\n\tfor i=#HeroManager,1,-1 do\n\t\t-- Check if sprite is alive\n\t\tif HeroManager[i].alive == true then\n\t\t\t-- Check if sprite collides with any monster\n\t\t\tfor j=1,#MonsterManager do\n\t\t\t\t-- Check if sprite collides with monster\n\t\t\t\tif HeroManager[i].collision(MonsterManager[j]) == true then\n\t\t\t\t\t-- Check if sprite is out of bound\n\t\t\t\t\tif HeroManager[i].isOutOfBound(MonsterManager[j]) == true then\n\t\t\t\t\t\t-- Remove sprite from HeroManager list\n\t\t\t\t\t\tHeroManager:remove(HeroManager[i])\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Update sprite position\n\t\t\t\t\t\tHeroManager[i]:setPosition(MonsterManager[j].x, MonsterManager[j].y)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t-- Iterate through MonsterManager list in reverse order\n\tfor i=#MonsterManager,1,-1 do\n\t\t-- Check if sprite is alive\n\t\tif MonsterManager[i].alive == true then\n\t\t\t-- Check if sprite collides with any hero\n\t\t\tfor j=1,#HeroManager do\n\t\t\t\t-- Check if sprite collides with hero\n\t\t\t\tif MonsterManager[i].collision(HeroManager[j]) == true then\n\t\t\t\t\t-- Check if sprite is out of bound\n\t\t\t\t\tif MonsterManager[i].isOutOfBound(HeroManager[j]) == true then\n\t\t\t\t\t\t-- Remove sprite from MonsterManager list\n\t\t\t\t\t\tMonsterManager:remove(MonsterManager[i])\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Update sprite position\n\t\t\t\t\t\tMonsterManager[i]:setPosition(HeroManager[j].x, HeroManager[j].y)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 36.11281290586382}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tlocal collider = self:specialAttackCollider()\n\tcollider:setCollisionGroup(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionMask(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionEnabled(true)\n\tcollider:setPosition(self:getPosition())\n\tcollider:setFacingDirection(self:getFacingDirection())\n\tcollider:setVelocity(self:getVelocity())\n\tcollider:setAcceleration(0, 0)\n\tcollider:setAngularVelocity(0)\n\tcollider:setMass(0)\n\tcollider:setBounciness(0)\n\tcollider:setFriction(0)\n\tcollider:setDensity(0)\n\tcollider:setRestitution(0)\n\tcollider:setLinearDamping(0)\n\tcollider:setAngularDamping(0)\n\tcollider:setAwake(true)\n\tcollider:setFixedRotation(true)\n\tcollider:setAngularDamping(0)\n\tcollider:setLinearDamping(0)\n\tcollider:setDensity(0)\n\tcollider:setFriction(0)\n\tcollider:setBounciness(0)\n\tcollider:setMass(0)\n\tcollider:setVelocity(0, 0)\n\tcollider:setAcceleration(0, 0)\n\tcollider:setAngularVelocity(0)\n\tcollider:setFacingDirection(self:getFacingDirection())\n\tcollider:setPosition(self:getPosition())\n\tcollider:setCollisionEnabled(true)\n\tcollider:setCollisionGroup(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionMask(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionEnabled(true)\n\tcollider:setCollisionGroup(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionMask(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionEnabled(true)\n\tcollider:setCollisionGroup(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionMask(COLLISION_GROUP_ACTOR_SPECIAL_ATTACK)\n\tcollider:setCollisionEnabled(true)\n\tcollider:setCollisionGroup(COLLISION_GROUP_ACTOR", "CodeBleu_score": 34.749095947023825}, {"code": "function Actor:specialAttack()\n\t\tlocal attackCollider = self:specialAttackCollider()\n\tlocal attackCollider.colliderType = ColliderType.Attack\n\tattackCollider.attack = self.specialAttack\n\tattackCollider.attacker = self\n\tattackCollider.attackerPosition = self.position\n\tattackCollider.attackerDirection = self.direction\n\tattackCollider.attackerSpeed = self.speed\n\tattackCollider.attackerSpeedModifier = self.speedModifier\n\tattackCollider.attackerHealth = self.health\n\tattackCollider.attackerMaxHealth = self.maxHealth\n\tattackCollider.attackerArmor = self.armor\n\tattackCollider.attackerMaxArmor = self.maxArmor\n\tattackCollider.attackerDamage = self.damage\n\tattackCollider.attackerKnockback = self.knockback\n\tattackCollider.attackerKnockbackModifier = self.knockbackModifier\n\tattackCollider.attackerAttackSpeed = self.attackSpeed\n\tattackCollider.attackerAttackSpeedModifier = self.attackSpeedModifier\n\tattackCollider.attackerSpecialAttackSpeed = self.specialAttackSpeed\n\tattackCollider.attackerSpecialAttackSpeedModifier = self.specialAttackSpeedModifier\n\tattackCollider.attackerSpecialAttackCooldown = self.specialAttackCooldown\n\tattackCollider.attackerSpecialAttackCooldownModifier = self.specialAttackCooldownModifier\n\tattackCollider.attackerSpecialAttack = self.specialAttack\n\tattackCollider.attackerSpecialAttackSoundEffects = self.specialAttackSoundEffects\n\tattackCollider.attackerSpecialAttackCollider = self.specialAttackCollider\n\tattackCollider.attackerSpecialAttackCollider.colliderType = ColliderType.Attack\n\tattackCollider.attackerSpecialAttackCollider.attack = self.specialAttack\n\tattackCollider.attackerSpecialAttackCollider.attacker = self\n\tattackCollider.attackerSpecialAttackCollider.attackerPosition = self.position\n\tattackCollider.attackerSpecialAttackCollider.attackerDirection = self.direction\n\tattackCollider.attackerSpecialAttackCollider.attackerSpeed = self.speed\n\tattackCollider.attackerSpecialAttackCollider.attackerSpeedModifier = self.speedModifier\n\tattackCollider.attackerSpecialAttackCollider.attackerHealth = self.health\n\tattackCollider.attackerSpecialAttackCollider.attackerMaxHealth = self.maxHealth\n\tattackCollider.attackerSpecialAttackCollider", "CodeBleu_score": 41.9089192853803}, {"code": "function Actor:specialAttack()\n\t\tlocal collider = self:createSpecialAttackCollider()\n\tcollider:setVelocity(self:getForwardVector() * self.specialAttackSpeed)\n\tcollider:setCollisionCallback(self, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback(self.collider, self.specialAttackCollisionCallback)\n\tcollider:setCollisionCallback", "CodeBleu_score": 41.81124256830985}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse ~= self._angry and self._sprite3d:getTexture() ~= nil then\n\t\tself._angry = trueFalse\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(self._angryTexture)\n\t\telse\n\t\t\tself._sprite3d:setTexture(self._normalTexture)\n\t\tend\n\tend", "CodeBleu_score": 54.63576623863132}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angry == trueFalse then\n\t\treturn\n\tend\n\n\tself._angry = trueFalse\n\n\tif trueFalse then\n\t\tself._sprite3d:setTexture(self._angryTexture)\n\telse\n\t\tself._sprite3d:setTexture(self._normalTexture)\n\tend", "CodeBleu_score": 54.754862575180674}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true then\n\t\tself._sprite3d:setTexture(self._angryTexture)\n\telseif trueFalse == false then\n\t\tself._sprite3d:setTexture(self._normalTexture)\n\tend", "CodeBleu_score": 36.76606597719299}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval metric = getMetrics()\n\tval width = ceil(paint.measureText(char.toString())).toInt()\n\tval height = ceil(metric.height).toInt()\n\n\tval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tcanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n\tval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n\tval data = IntArray(width * height)\n\tbitmap.getPixels(data, 0, width, 0, 0, width, height)\n\tfor (x in 0 until width) {\n\t\tfor (y in 0 until height) {\n\t\t\tpixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n\t\t}\n\t}\n\tbitmap.recycle()\n\treturn pixmap\n}", "CodeBleu_score": 78.47836148418581}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\n}", "CodeBleu_score": 0.9724385895435943}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\n}", "CodeBleu_score": 0.9724385895435943}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 13.991633962012584}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\n    intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 97.2419287461217}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n\tintent.type = \"application/json\"\n\tintent.putExtra(Intent.EXTRA_TITLE, fileName)\n\tif (uri.scheme == \"content\")\n\t\tintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.80076040995861}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\nval name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\nval descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\nval importance = NotificationManager.IMPORTANCE_HIGH\nval mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\nmChannel.description = descriptionText\nmChannel.setShowBadge(true)\nmChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\nval notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\nnotificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 97.99820659160187}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t//    val gameInfo = gameInfo ?: return\n    worldScreen?.dispose()\n    loadGame(gameInfo!!, worldScreen!!.autoPlay, true)\n}", "CodeBleu_score": 9.30211438380176}, {"code": "suspend fun reloadWorldscreen(){\n\t//    val workingPath = settings.workingPath\n    val workingPath = \"C:/Users/Jakub/Desktop/Unciv/Unciv/src/main/assets\"\n    packImages(workingPath)\n    val modPaths = getModPaths()\n    for (modPath in modPaths) {\n        try {\n            packImages(modPath)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 28.60049087344933}, {"code": "suspend fun reloadWorldscreen(){\n\t//    val workingPath = File(System.getProperty(\"user.dir\"))\n    val workingPath = File(System.getProperty(\"user.dir\") + \"/Unciv\")\n    packImages(workingPath)\n    for (mod in File(workingPath, \"mods\").listFiles()!!) {\n        if (mod.name.startsWith(\".\")) continue\n        try {\n            packImages(mod)\n        } catch (e: Exception) {\n            println(\"Failed to pack images for mod $mod\")\n            e.printStackTrace()\n        }\n    }\n\n    loadGame(gameInfo!!, callFromLoadScreen = true)\n}", "CodeBleu_score": 31.16745014985158}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t//        val mainMenuScreen = MainMenuScreen()\n//        pushScreen(mainMenuScreen)\n//        return mainMenuScreen\n}", "CodeBleu_score": 1.8487999365766887}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\t// TODO: Implement this\n}", "CodeBleu_score": 1.8487999365766887}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenuScreen = MainMenuScreen()\n\tpushScreen(mainMenuScreen)\n\treturn mainMenuScreen\n}", "CodeBleu_score": 50.41317668144243}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\nisAccessible = true\nget(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.07133990723558}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\nisAccessible = true\nget(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.07133990723558}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t\tval osRelease: Map<String,String> = try {\n\t\tFileHandle(\"/etc/os-release\")\n\t\t\t.readString()\n\t\t\t.split('\n')\n\t\t\t.map { it.split('=') }\n\t\t\t.filter { it.size == 2 }\n\t\t\t.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n\t} catch (_: Throwable) { mapOf() }\n\tif (\"NAME\" !in osRelease) return \"\"\n\treturn osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 88.56852557601982}, {"code": "private fun getLinuxDistro(): String{\n\t\n}", "CodeBleu_score": 1.6981536748015083}, {"code": "private fun getLinuxDistro(): String{\n\t\n}", "CodeBleu_score": 1.6981536748015083}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t\ttry {\n\t\t// Try to use the native Java API for flashing the window\n\t\tval window = SwingUtilities.getWindowAncestor(this) as? Window\n\t\tif (window != null) {\n\t\t\twindow.toFront()\n\t\t\twindow.flash()\n\t\t}\n\t} catch (e: Exception) {\n\t\t// Fallback to using the native OS API for flashing the window\n\t\ttry {\n\t\t\tval hwnd = getWindowHandle()\n\t\t\tif (hwnd != null) {\n\t\t\t\tval user32 = WinDef.HMODULE(\"user32\")\n\t\t\t\tval FlashWindowEx = user32.GetProcAddress(\"FlashWindowEx\")\n\t\t\t\tval FLASHW_ALL = 3\n\t\t\t\tval FLASHW_TIMERNOFG = 12\n\t\t\t\tval flashInfo = WinUser.FLASHWINFO(FLASHW_ALL or FLASHW_TIMERNOFG, hwnd, 0, 0)\n\t\t\t\tval result = FlashWindowEx!!.invoke(flashInfo, null)\n\t\t\t\tif (result == false) {\n\t\t\t\t\tprintln(\"Failed to flash window\")\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e: Exception) {\n\t\t\t// Failed to flash the window, log the error\n\t\t\tprintln(\"Failed to flash window: $e\")\n\t\t}\n\t}\n}", "CodeBleu_score": 40.375881261739806}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\t// First, check if the window is focused. If it is, do nothing.\n\t\tif (window.isFocused) return\n\n\t\t// Next, check if the window is visible. If it is, flash it.\n\t\tif (window.isVisible) {\n\t\t\twindow.flashFrame(true)\n\t\t\treturn\n\t\t}\n\n\t\t// Next, check if the window is iconified. If it is, restore it.\n\t\tif (window.isIconified) {\n\t\t\twindow.isIconified = false\n\t\t\treturn\n\t\t}\n\n\t\t// Next, check if the window is maximized. If it is, restore it.\n\t\tif (window.isMaximized) {\n\t\t\twindow.isMaximized = false\n\t\t\treturn\n\t\t}\n\n\t\t// Finally, check if the window is minimized. If it is, restore it.\n\t\tif (window.isMinimized) {\n\t\t\twindow.isMinimized = false\n\t\t\treturn\n\t\t}\n\n\t\t// If none of the above are true, attempt to flash the window.\n\t\twindow.flashFrame(true)\n\t} catch (e: Exception) {\n\t\t// Ignore errors.\n\t}\n}", "CodeBleu_score": 40.23700424698464}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\t// Get the current window\n\t\tval window = currentWindow\n\n\t\t// If the window is focused, return\n\t\tif (window.isActive) return\n\n\t\t// If the window is not focused, attempt to flash the window\n\t\twindow.flashFrame(true)\n\t}\n\tcatch (e: Exception) {\n\t\t// Catch any errors during this process and log them without interrupting execution\n\t\tLogger.log(e)\n\t}\n}", "CodeBleu_score": 12.751306165910275}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t//Backup shared preferences\n\tSharedPreferences prefs = getApplicationContext().getSharedPreferences(PREFS_NAME, 0);\n\tdata.writeEntityHeader(PREFS_NAME, prefs.getAll());\n\n\t//Backup game data\n\tFile filesDir = getFilesDir();\n\tFile rankingsDir = getFile(filesDir, \"rankings\");\n\tif (rankingsDir != null){\n\t\tFile[] rankingsFiles = rankingsDir.listFiles();\n\t\tfor (File file : rankingsFiles){\n\t\t\tdata.writeEntityHeader(file.getName(), file);\n\t\t}\n\t}\n\n\tFile badgesDir = getFile(filesDir, \"badges\");\n\tif (badgesDir != null){\n\t\tFile[] badgesFiles = badgesDir.listFiles();\n\t\tfor (File file : badgesFiles){\n\t\t\tdata.writeEntityHeader(file.getName(), file);\n\t\t}\n\t}\n\n\tFile journalDir = getFile(filesDir, \"journal\");\n\tif (journalDir != null){\n\t\tFile[] journalFiles = journalDir.listFiles();\n\t\tfor (File file : journalFiles){\n\t\t\tdata.writeEntityHeader(file.getName(), file);\n\t\t}\n\t}\n}", "CodeBleu_score": 26.058390358807188}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t\treturn !cm.isActiveNetworkMetered();\n\t} else {\n\t\treturn (activeNetwork != null && activeNetwork.isConnected() &&\n\t\t\t\t(activeNetwork.getType() == ConnectivityManager.TYPE_WIFI ||\n\t\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_WIMAX ||\n\t\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH ||\n\t\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_ETHERNET));\n\t}\n}", "CodeBleu_score": 70.0323423624602}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (activeNetwork != null) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t\t\treturn !activeNetwork.isMetered();\n\t\t} else {\n\t\t\treturn activeNetwork.getType() == ConnectivityManager.TYPE_WIFI ||\n\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_WIMAX ||\n\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH ||\n\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 63.55261673487313}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager connMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo networkInfo = connMgr.getActiveNetworkInfo();\n\tif (networkInfo == null) {\n\t\treturn false;\n\t}\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn !networkInfo.isMetered();\n\t} else {\n\t\tint type = networkInfo.getType();\n\t\treturn type == ConnectivityManager.TYPE_WIFI || type == ConnectivityManager.TYPE_WIMAX || type == ConnectivityManager.TYPE_BLUETOOTH || type == ConnectivityManager.TYPE_ETHERNET;\n\t}\n}", "CodeBleu_score": 51.445322249548944}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\t// play sound\n\t\thero.play( \"resurrection\" );\n\n\t\t// cure ailments\n\t\thero.cureAilments();\n\n\t\t// remove curses from equipped items\n\t\thero.uncurseEquipped();\n\n\t\t// satisfy hunger\n\t\thero.satisfy();\n\n\t\t// fully restore health\n\t\thero.restoreHealth();\n\n\t\t// display visual effects\n\t\thero.buff();\n\n\t\t// interrupt current action\n\t\thero.interrupt();\n\n\t\t// log message\n\t\thero.log( \"You have been resurrected.\" );\n\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 15.186134140642931}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\thero.heal( hero.getMaxHealth() );\n\t\thero.cureAll();\n\t\thero.satisfyHunger();\n\t\thero.setHunger( 0 );\n\t\thero.start();\n\t\thero.play( \"resurrect\" );\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 13.035054239948868}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\thero.setHealth( hero.getHealth() + hero.getMaxHealth() );\n\t\thero.setHunger( 0 );\n\t\thero.setCurse( null );\n\t\thero.setBuff( null );\n\t\thero.setSatisfied( true );\n\t\thero.setInterrupt( new Interrupt( \"A hero's health is restored.\", true ) );\n\t\thero.play( \"health\" );\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.37153128200557}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif ( item == null ) return null;\n\tif ( item.type == ItemType.ANKH ) {\n\t\tif ( !item.isBlessed ) {\n\t\t\tAnkh ankh = (Ankh)item;\n\t\t\tankh.isBlessed = true;\n\t\t\tankh.image = ankhBlessed;\n\t\t\tGdx.app.postRunnable( () -> {\n\t\t\t\tAnkh.playSound();\n\t\t\t} );\n\t\t\treturn null;\n\t\t}\n\t} else if ( item.type == ItemType.WATERSKIN ) {\n\t\tWaterskin waterskin = (Waterskin)item;\n\t\tif ( !waterskin.isFull ) {\n\t\t\twaterskin.fill();\n\t\t\tGdx.app.postRunnable( () -> {\n\t\t\t\tWaterskin.playSound();\n\t\t\t} );\n\t\t\treturn null;\n\t\t}\n\t} else if ( item.type == ItemType.CURSED ) {\n\t\tif ( item.isCursed ) {\n\t\t\titem.isCursed = false;\n\t\t\tGdx.app.postRunnable( () -> {\n\t\t\t\tCursed.playSound();\n\t\t\t} );\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn item;\n}", "CodeBleu_score": 28.5193043476118}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif ( item == null ) return null;\n\tif ( item.type == ItemType.Waterskin && !item.isFull() ) {\n\t\titem.fill();\n\t\tGdx.app.log( \"Game\", \"You filled your waterskin.\" );\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Ankh && !item.isBlessed() ) {\n\t\titem.bless();\n\t\tGdx.app.log( \"Game\", \"You blessed your ankh.\" );\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Uncursable ) {\n\t\titem.removeCurses();\n\t\tGdx.app.log( \"Game\", \"You removed your curses.\" );\n\t\treturn null;\n\t}\n\treturn item;\n}", "CodeBleu_score": 34.866649416976905}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item == null) return null;\n\tif (item.type == ItemType.Waterskin && !item.isFull) {\n\t\titem.fill();\n\t\tGdx.audio.newSound(Assets.fill).play();\n\t} else if (item.type == ItemType.Ankh && !item.isBlessed) {\n\t\titem.bless();\n\t\tGdx.audio.newSound(Assets.bless).play();\n\t} else if (item.type == ItemType.Cursed) {\n\t\tif (item.isCursed) {\n\t\t\titem.isCursed = false;\n\t\t\tGdx.audio.newSound(Assets.uncurse).play();\n\t\t} else if (item.isUncursed) {\n\t\t\titem.isUncursed = false;\n\t\t\tGdx.audio.newSound(Assets.uncurse).play();\n\t\t}\n\t}\n\treturn item;\n}", "CodeBleu_score": 27.21266549674246}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\tif ( enemy.isDead() || enemy.hasBuff(\"Corruption\") && enemy.getBuff(\"Corruption\").getStacks() == enemy.getBuff(\"Corruption\").getMax() ) {\n\t\tcomboTimer.set( comboTimer.get() + 1000 * talentPointsInCleave );\n\t} else {\n\t\tcomboTimer.set( comboTimer.get() + 1000 );\n\t}\n\tcomboCount++;\n\tsetAction( Action.HIT );\n\tvalidateMasteryCombo();\n\tif ( comboCount > 1 ) {\n\t\tLogger.log( \"Combo count: \" + comboCount );\n\t}\n\trefreshHero();\n}", "CodeBleu_score": 21.85028220647766}, {"code": "public void hit( Char enemy ){\n\t\tcomboCount++;\n\tif ( enemy.isDead() || ( enemy.hasBuff( Corruption.class ) && enemy.getBuff( Corruption.class ).getDuration() >= enemy.getBuff( Corruption.class ).maxDuration() ) ) {\n\t\tif ( enemy.hasTalent( Talent.CLEAVE ) ) {\n\t\t\tcomboTimer += enemy.getTalentPointsInTalent( Talent.CLEAVE ) * 0.2f;\n\t\t}\n\t} else {\n\t\tcomboTimer = 0.5f;\n\t}\n\n\tsetAction( Action.ATTACKING );\n\tvalidateMasteryCombo();\n\n\tif ( enemy.isDead() ) {\n\t\tLog.debug( \"Combo\", \"Enemy is dead!\" );\n\t} else if ( enemy.hasBuff( Corruption.class ) && enemy.getBuff( Corruption.class ).getDuration() >= enemy.getBuff( Corruption.class ).maxDuration() ) {\n\t\tLog.debug( \"Combo\", \"Enemy has full corruption!\" );\n\t}\n\n\tLog.debug( \"Combo\", \"Combo count: \" + comboCount );\n\trefreshHero();\n}", "CodeBleu_score": 31.81153259346071}, {"code": "public void hit( Char enemy ){\n\t\tcomboCount++;\n\tif ( enemy.isDead() || ( enemy.hasBuff( Buff.CORRUPTION ) && enemy.getBuff( Buff.CORRUPTION ).getDuration() == enemy.getBuff( Buff.CORRUPTION ).maxDuration() ) ) {\n\t\tcomboTimer = 0.5f + ( 0.5f * talentPointsInCleave );\n\t} else {\n\t\tcomboTimer = 0.5f;\n\t}\n\tsetAction( Action.ATTACKING );\n\tvalidateMasteryCombo();\n\tif ( enemy.isEnemy() ) {\n\t\tenemy.getMoveLog().logCombo( enemy, this );\n\t}\n\trefreshHero();\n}", "CodeBleu_score": 27.422091286515954}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.72577435205949}, {"code": "public int capacity(){\n\t\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.72577435205949}, {"code": "public int capacity(){\n\t\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.72577435205949}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\t// Apply base formula\n\tHT = (int) Math.floor( 1.0 + 0.01 * level + 0.1 * HTMultiplier );\n\n\t// Apply RingOfMight buff\n\tif ( buff == RingOfMight.instance ) {\n\t\tHT += 10;\n\t}\n\n\t// Apply ElixirOfMight buff\n\tif ( buff == ElixirOfMight.instance ) {\n\t\tHT += 10;\n\t}\n\n\t// Increase current health (HP) if boosting\n\tif ( boostHP ) {\n\t\tHP = Math.min( HP + 1, HT );\n\t}\n\n\t// Ensure HP does not exceed HT\n\tHP = Math.min( HP, HT );\n}", "CodeBleu_score": 24.146444565437815}, {"code": "public void updateHT( boolean boostHP ){\n\t\tint newHT = (int) Math.floor( ( 100.0 + ( 100.0 * level ) / 100.0 + ( 100.0 * HTMultiplier ) / 100.0 ) * 1.05 );\n\tif ( buff.contains( RingOfMight.class ) ) {\n\t\tnewHT = (int) Math.floor( newHT * 1.1 );\n\t}\n\tif ( buff.contains( ElixirOfMight.class ) ) {\n\t\tnewHT = (int) Math.floor( newHT * 1.15 );\n\t}\n\tif ( boostHP ) {\n\t\tnewHT = (int) Math.floor( newHT * 1.25 );\n\t}\n\tif ( HP > newHT ) {\n\t\tHP = newHT;\n\t}\n\tHT = newHT;\n}", "CodeBleu_score": 18.922023299309092}, {"code": "public void updateHT( boolean boostHP ){\n\t\t// Calculate HT\n\tfloat baseHT = (float) Math.floor( 100 + ( (float) level * 0.15 ) + ( (float) HTMultiplier * 0.05 ) );\n\tfloat ringHT = 0;\n\tfloat elixirHT = 0;\n\tfor( Buff buff : buffs ) {\n\t\tif( buff.name.equals( \"RingOfMight\" ) ) {\n\t\t\tringHT = buff.value;\n\t\t} else if( buff.name.equals( \"ElixirOfMight\" ) ) {\n\t\t\telixirHT = buff.value;\n\t\t}\n\t}\n\tHT = (int) Math.floor( baseHT + ringHT + elixirHT );\n\tif( boostHP ) {\n\t\tHP += 20;\n\t}\n\tHP = Math.min( HP, HT );\n}", "CodeBleu_score": 25.342257346614943}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif ( !enemy.isEnemy() && !enemy.isNeutral() ) {\n\t\treturn false;\n\t}\n\tif ( wep.ammo > 0 ) {\n\t\twep.ammo--;\n\t\twep.thrown = true;\n\t\tif ( enemy.isEnemy() ) {\n\t\t\tenemy.getCharacter().hit( wep.damage );\n\t\t\tif ( enemy.getCharacter().isGladiator() || enemy.getCharacter().isDuelist() ) {\n\t\t\t\tenemy.getCharacter().applyComboBuff();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tenemy.getCharacter().hit( wep.damage );\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.533058952984327}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif ( enemy.isEnemy() || enemy.isMimic() ) {\n\t\t// Attempt the attack\n\t\tboolean hit = enemy.attack( wep );\n\t\t// If successful, set the weapon as thrown\n\t\tif ( hit ) {\n\t\t\twep.setThrown( true );\n\t\t\t// If the character is a gladiator or duelist, apply combo effects\n\t\t\tif ( this.isGladiator() || this.isDuelist() ) {\n\t\t\t\t// Apply combo buffs\n\t\t\t\tif ( this.getCombo() == 1 ) {\n\t\t\t\t\tthis.applyBuff( new StunBuff( enemy, 1 ) );\n\t\t\t\t}\n\t\t\t\telse if ( this.getCombo() == 2 ) {\n\t\t\t\t\tthis.applyBuff( new StunBuff( enemy, 2 ) );\n\t\t\t\t}\n\t\t\t\telse if ( this.getCombo() == 3 ) {\n\t\t\t\t\tthis.applyBuff( new StunBuff( enemy, 3 ) );\n\t\t\t\t}\n\t\t\t\telse if ( this.getCombo() == 4 ) {\n\t\t\t\t\tthis.applyBuff( new StunBuff( enemy, 4 ) );\n\t\t\t\t}\n\t\t\t\telse if ( this.getCombo() == 5 ) {\n\t\t\t\t\tthis.applyBuff( new StunBuff( enemy, 5 ) );\n\t\t\t\t}\n\t\t\t\t// Clear the combo\n\t\t\t\tthis.setCombo( 0 );\n\t\t\t}\n\t\t}\n\t\treturn hit;\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.46337702016823}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = 0;\n\tint attackBonus = 0;\n\tint accuracyFactor = 0;\n\tint accuracyMultiplier = 0;\n\tint fightingUnarmed = 0;\n\tint adjacent = 0;\n\tint buff = 0;\n\tint attackingWeapon = 0;\n\n\t// Get the attack skill value from the weapon\n\tattackingWeapon = getAttackSkill();\n\n\t// Get the attack bonus from the buffs\n\tfor (Buff b : buffs) {\n\t\tif (b.getType() == Buff.BUFF_TYPE_ATTACK) {\n\t\t\tattackBonus += b.getBonus();\n\t\t}\n\t}\n\n\t// Get the accuracy multiplier from the buffs\n\tfor (Buff b : buffs) {\n\t\tif (b.getType() == Buff.BUFF_TYPE_ACCURACY) {\n\t\t\taccuracyMultiplier += b.getBonus();\n\t\t}\n\t}\n\n\t// Get the accuracy factor from the weapon\n\taccuracyFactor = getAccuracyFactor();\n\n\t// Get the fighting unarmed bonus from the buffs\n\tfor (Buff b : buffs) {\n\t\tif (b.getType() == Buff.BUFF_TYPE_FIGHTING_UNARMED) {\n\t\t\tfightingUnarmed += b.getBonus();\n\t\t}\n\t}\n\n\t// Get the adjacent bonus from the buffs\n\tfor (Buff b : buffs) {\n\t\tif (b.getType() == Buff.BUFF_TYPE_ADJACENT) {\n\t\t\tadjacent += b.getBonus();\n\t\t}\n\t}\n\n\t// Get the buff from the weapon\n\tbuff = getBuff();\n\n\t// Calculate the attack skill value\n\tattackSkill = (int) Math.floor( ( attackingWeapon + attackBonus ) * ( accuracyFactor + accuracyMultiplier + fightingUnarmed + adjacent + buff ) );\n\n\t// Return the attack skill value\n\treturn attackSkill;\n}", "CodeBleu_score": 20.539847555827038}, {"code": "public int attackSkill( Char target ){\n\t\tint skill = baseAttackSkill;\n\tskill += weapon.attackSkill();\n\tskill += accuracyFactor( target );\n\tskill += buff.attackSkill();\n\treturn skill;\n}", "CodeBleu_score": 11.84803309931913}, {"code": "public int attackSkill( Char target ){\n\t\tint skill = baseAttackSkill();\n\tif ( fightingUnarmed() ) {\n\t\treturn skill;\n\t}\n\tif ( target == null ) {\n\t\treturn skill;\n\t}\n\tif ( adjacent() ) {\n\t\tskill += pointsInTalent( Talent.ACCURACY_ADJACENT );\n\t} else {\n\t\tskill += pointsInTalent( Talent.ACCURACY_DISTANT );\n\t}\n\tif ( target.fightingUnarmed() ) {\n\t\tskill += pointsInTalent( Talent.ACCURACY_TARGET_UNARMED );\n\t}\n\tif ( target.adjacent() ) {\n\t\tskill += pointsInTalent( Talent.ACCURACY_TARGET_ADJACENT );\n\t} else {\n\t\tskill += pointsInTalent( Talent.ACCURACY_TARGET_DISTANT );\n\t}\n\tif ( target.buff( Buff.ACCURACY_BOOST ) ) {\n\t\tskill += pointsInTalent( Talent.ACCURACY_BOOST );\n\t}\n\tif ( target.buff( Buff.ACCURACY_PENALTY ) ) {\n\t\tskill -= pointsInTalent( Talent.ACCURACY_PENALTY );\n\t}\n\tif ( attackingWeapon() != null ) {\n\t\tif ( attackingWeapon().type() == WeaponType.MELEE ) {\n\t\t\tskill += pointsInTalent( Talent.ACCURACY_WEAPON_MELEE );\n\t\t} else {\n\t\t\tskill += pointsInTalent( Talent.ACCURACY_WEAPON_RANGED );\n\t\t}\n\t}\n\treturn skill;\n}", "CodeBleu_score": 29.47268843563437}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\nrepeat(repeats) {\nthis.start()\noperation()\nthis.stop()\nthis.tick()\n}\nif (printResults) {\nprettyPrint()\n}\n}", "CodeBleu_score": 92.92877462717524}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t\n}", "CodeBleu_score": 34.76218478512051}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t\n}", "CodeBleu_score": 34.76218478512051}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\n}", "CodeBleu_score": 29.962864407193813}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\n  if (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\n  cell.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n});\n\nif (this.tiles.heightmap) {\n  if (this.tiles.heightmap.polygon.top){\n    this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n  }\n  if (this.tiles.heightmap.polygon.slope){\n    this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n  }\n}\n}", "CodeBleu_score": 97.86477945955943}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\n  if (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\n  cell.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n});\n\nif (this.tiles.heightmap) {\n  if (this.tiles.heightmap.polygon.top){\n    this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n  }\n  if (this.tiles.heightmap.polygon.slope){\n    this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n  }\n}\n}", "CodeBleu_score": 97.86477945955943}, {"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.tiles.sprites.forEach((sprite) => {\n\t\tif (sprite.visible) sprite.setTint(0xaa0000);\n\t});\n\n\tthis.related.forEach((cell) => {\n\t\tcell.tiles.sprites.forEach((sprite) => {\n\t\t\tif (sprite.visible) sprite.setTint(0xaa0000);\n\t\t});\n\t});\n\n\tif (this.tiles.heightmap) {\n\t\tif (this.tiles.heightmap.polygon.top){\n\t\t\tthis.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n\t\t}\n\t\tif (this.tiles.heightmap.polygon.slope){\n\t\t\tthis.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n\t\t}\n\t}\n}", "CodeBleu_score": 96.16936989131777}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t\n}", "CodeBleu_score": 2.7840380783372893}, {"code": "getTrafficDensity (){\n\t\n}", "CodeBleu_score": 2.7840380783372893}, {"code": "getTrafficDensity (){\n\t\n}", "CodeBleu_score": 2.7840380783372893}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\n}", "CodeBleu_score": 0.4984274449288218}, {"code": "restart: function (){\n\t\tthis.reset();\n\tthis.start();\n}", "CodeBleu_score": 8.33425232698659}, {"code": "restart: function (){\n\t\tthis.start();\n}", "CodeBleu_score": 8.334248340466873}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\tif (!color) {\n\t\tcolor = 'white';\n\t}\n\tif (!duration) {\n\t\tduration = 100;\n\t}\n\tif (!force) {\n\t\tforce = false;\n\t}\n\tif (!alpha) {\n\t\talpha = 1;\n\t}\n\tif (this.fx.clear() || force) {\n\t\tthis.fx.beginFill(color);\n\t\tthis.fx.drawRect(0, 0, this.width, this.height);\n\t\tthis.fx.endFill();\n\t\tthis.fx.alpha = alpha;\n\t\tthis.fx.visible = true;\n\t\tthis.fx.duration = duration;\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.52366362688455}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (!this.visible) {\n\t\treturn false;\n\t}\n\tif (this.fx.duration && !force) {\n\t\treturn false;\n\t}\n\tthis.fx.clear();\n\tthis.fx.beginFill(color);\n\tthis.fx.drawRect(0, 0, this.width, this.height);\n\tthis.fx.endFill();\n\tthis.fx.alpha = alpha || 1;\n\tthis.fx.duration = duration || 500;\n\treturn true;\n}", "CodeBleu_score": 31.728343793519986}, {"code": "flash: function (color, duration, force, alpha){\n\t\t// If the object is not visible, return false\n\tif (!this.visible) {\n\t\treturn false;\n\t}\n\t// If force is true, clear any existing effect\n\tif (force) {\n\t\tthis.fx.clear();\n\t}\n\t// If duration is undefined, set it to 1000\n\tif (duration === undefined) {\n\t\tduration = 1000;\n\t}\n\t// If alpha is undefined, set it to 1\n\tif (alpha === undefined) {\n\t\talpha = 1;\n\t}\n\t// Set the effect's color, duration, and alpha\n\tthis.fx.beginFill(color, alpha);\n\tthis.fx.drawRect(0, 0, this.width, this.height);\n\tthis.fx.endFill();\n\tthis.fx.visible = true;\n\tthis.fx.alpha = 1;\n\tthis.fx.duration = duration;\n\t// Return true\n\treturn true;\n}", "CodeBleu_score": 61.00337278433764}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t", "CodeBleu_score": 2.218908958697607}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.width, this.height, this.resolution, this.resolution, this.useSquare, this.forceSquare, this.gravity, this.damping, this.numIterations, this.drag);\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.game.world.add(layer);\n\t}\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 57.53257786731268}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new createjs.FlexLayer();\n\tlayer.setDensity(100);\n\tlayer.setViscosity(0.8);\n\tlayer.setX(this.game.world.width/2);\n\tlayer.setY(this.game.world.height/2);\n\tlayer.setSpeed(0.1);\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.game.world.add(layer);\n\t}\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 46.913417045560315}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.width, this.height, this.bounds, this.scale, this.position);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 59.94899925084161}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.layers.length, this.position, this.bounds, this.scale);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 60.159420893404516}, {"code": "createFullLayer: function (children){\n\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.game.world.width, this.game.world.height, this.game.world.scale.x, this.game.world.scale.y);\nthis.layers.push(layer);\nthis.game.world.add(layer);\nif (children) {\nlayer.addMultiple(children);\n}\nreturn layer;\n}", "CodeBleu_score": 58.66895884922473}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect.copyFrom(rect);\n\t\t} else {\n\t\t\tthis.cropRect.setTo(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 16.84018202749184}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (typeof copy === 'undefined') copy = true;\n\t\tthis.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n\t\tif (copy) {\n\t\t\tthis.cropRect.copy(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 30.4452450532009}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tthis.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n\t\tif (copy) {\n\t\t\tthis.cropRect.copy(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 26.93860693957416}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\tvar config = {\n\t\tbulletClass: bulletClass,\n\t\tbullets: quantity,\n\t\tbulletKey: key,\n\t\tbulletFrame: frame,\n\t\tbulletSpeed: 600,\n\t\tfireRate: 60,\n\t\ttrackSprite: false,\n\t\ttrackOffset: new Phaser.Point(0, 0),\n\t\trotateToSprite: false,\n\t\toffsetY: 0,\n\t\tbulletAngleOffset: 0,\n\t\tbulletKillType: Phaser.Weapon.KILL_WORLD,\n\t\tbulletKillDistance: 0,\n\t\tfireOnCeiling: false,\n\t\tfireOnFloor: false,\n\t\tfireOnWall: false,\n\t\tfireOnLeft: false,\n\t\tfireOnRight: false,\n\t\tfireOnNothing: false,\n\t\tbulletWorldWrap: true,\n\t\tbulletWorldWrapMargin: new Phaser.Point(0, 0),\n\t\tbulletKillOutside: false,\n\t\tbulletKillInside: false,\n\t\tsingleFire: false,\n\t\tmultiFire: false,\n\t\tfireButton: null,\n\t\tfireButtonB: null,\n\t\tfireCallback: null,\n\t\tfireParams: [],\n\t\tfireTime: 0,\n\t\tnextFire: 0,\n\t\tautoFire: false,\n\t\tautoFireRate: 0,\n\t\tautoReset: false,\n\t\tcheckWorldBounds: true,\n\t\tdebug: false,\n\t\tcustomParams: {},\n\t\tbulletGroup: group\n\t};\n\n\treturn this.plugins.add(Phaser.Weapon, config);\n}", "CodeBleu_score": 25.33715019896533}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n}", "CodeBleu_score": 2.789282050127807}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = true; }\n\n\tif (cull) {\n\t\t//  If the triangle is facing away from the camera we can safely ignore it\n\t\tvar camera = this.game.camera.camera;\n\t\tvar cameraX = camera.worldView.x;\n\t\tvar cameraY = camera.worldView.y;\n\t\tvar cameraZ = camera.worldView.z;\n\n\t\tvar a = points[0];\n\t\tvar b = points[1];\n\t\tvar c = points[2];\n\n\t\tvar normal = new Phaser.Vec3(b.x - a.x, b.y - a.y, b.z - a.z);\n\t\tvar normal2 = new Phaser.Vec3(c.x - a.x, c.y - a.y, c.z - a.z);\n\n\t\tvar normalDot = normal.dot(normal2);\n\n\t\tif (normalDot < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tnormal.add(normal2);\n\n\t\tvar cameraToFace = new Phaser.Vec3(cameraX - a.x, cameraY - a.y, cameraZ - a.z);\n\n\t\tif (normal.dot(cameraToFace) > 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.drawPolygon(points);\n}", "CodeBleu_score": 40.8753562613986}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar normal = this.getNormal(points);\n\t\tif (normal.dot(this.cameraToFace) < 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\tthis.drawPolygon(points);\n}", "CodeBleu_score": 9.999734588632366}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = 0;\n\t\tthis.texture.needsUpdate = true;\n\t\tthis.retryCount = 0;\n\t} else {\n\t\tif (this.retryCount === this.maxRetries) {\n\t\t\tconsole.warn('THREE.VideoTexture: Unable to download video \"' + this.src + '\"');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.retryCount++;\n\t\twindow.setTimeout(this.checkVideoProgress.bind(this), 100);\n\t}\n}", "CodeBleu_score": 25.546395458245076}, {"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = 0;\n\t\tthis.texture.needsUpdate = true;\n\t\tthis.retryCount = 0;\n\t\tthis.video.removeEventListener('canplaythrough', this.checkVideoProgress);\n\t} else if (this.retryCount > 0) {\n\t\tthis.retryCount--;\n\t\tthis.warn('Video failed to load, trying again in ' + this.retryInterval + 'ms');\n\t\tsetTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n\t} else {\n\t\tthis.warn('Video failed to load, giving up');\n\t\tthis.video.removeEventListener('canplaythrough', this.checkVideoProgress);\n\t}\n}", "CodeBleu_score": 25.969810501107883}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\tif (!this.isDown) {\n\t\tthis.isDown = true;\n\t\tthis.isPressed = true;\n\t\tthis.timeDown = this.timeUp = Date.now();\n\t\tthis.timeElapsed = 0;\n\t\tthis.timeDelay = this.timeElapsed - this.timeDown;\n\t\tthis.timeRepeat = 0;\n\t\tthis.timeElapsedDelay = 0;\n\t\tthis.timeElapsedRepeat = 0;\n\t\tthis.event = event;\n\t\tthis.value = value;\n\t\tthis.onDown.dispatch(this.event, this.value);\n\t}\n}", "CodeBleu_score": 39.2897033458763}, {"code": "start: function (event, value){\n\t\tif (this.state !== \"down\") {\n\t\tthis.state = \"down\";\n\t\tthis.time = this.time + this.timeElapsed;\n\t\tthis.timeElapsed = 0;\n\t\tthis.repeats = 0;\n\t\tthis.alt = event.altKey;\n\t\tthis.shift = event.shiftKey;\n\t\tthis.ctrl = event.ctrlKey;\n\t\tthis.value = value;\n\t\tthis.onDown.dispatch(this.state, this.value);\n\t}\n}", "CodeBleu_score": 36.648129318195274}, {"code": "start: function (event, value){\n\t\tif (this.state !== 'down') {\n\t\tthis.state = 'down';\n\n\t\tthis.time = Date.now();\n\t\tthis.value = value;\n\n\t\tthis.alt = event.altKey;\n\t\tthis.ctrl = event.ctrlKey;\n\t\tthis.shift = event.shiftKey;\n\n\t\tthis.onDown.dispatch(this.state, this.value);\n\t}\n}", "CodeBleu_score": 34.352845939486286}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\tthis.mouseDownEvent = event;\n\tif (this.mouseDownCallback) {\n\t\tthis.mouseDownCallback(event);\n\t}\n\tif (this.input) {\n\t\tthis.input.mousePointer.start(event);\n\t}\n\tevent.preventDefault();\n}", "CodeBleu_score": 36.86111759477376}, {"code": "onMouseDown: function (event){\n\t\tthis.mouseDownEvent = event;\n\tif (this.mouseDownCallback) {\n\t\tthis.mouseDownCallback(event);\n\t}\n\tif (this.inputEnabled) {\n\t\tthis.input.mousePointer.start(event);\n\t}\n\tif (this.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 40.87805838761174}, {"code": "onMouseDown: function (event){\n\t\tthis.mouseDownEvent = event;\n\tif (this.mouseDownCallback) {\n\t\tthis.mouseDownCallback(event);\n\t}\n\tif (this.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n\tif (this.input.enabled) {\n\t\tthis.input.mousePointer.start(event);\n\t}\n}", "CodeBleu_score": 43.45825833181652}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t\tthis.mouseUpEvent = event;\n\tif (this.mouseUpCallback) this.mouseUpCallback.call(this, event);\n\tif (event.preventDefault) event.preventDefault();\n\tif (this.input.enabled && this.input.mousePointer) {\n\t\tthis.input.mousePointer.stop();\n\t\tthis.input.mousePointer.start(event.clientX, event.clientY);\n\t\tthis.input.mousePointer.identifier = event.identifier;\n\t}\n}", "CodeBleu_score": 47.098808215255936}, {"code": "onMouseUpGlobal: function (event){\n\t// Store the event.\nthis.mouseUpEvent = event;\n\n// If the mouse down callback is defined, invoke it.\nif (this.mouseUpCallback)\nthis.mouseUpCallback.call(this, event);\n\n// If the event has been prevented, do not process it further.\nif (event.defaultPrevented)\nreturn;\n\n// If input is disabled, do not process it further.\nif (!this.input.enabled)\nreturn;\n\n// If the mouse pointer is not currently active, do not process it further.\nif (!this.input.mousePointer.active)\nreturn;\n\n// If the mouse pointer is not within the canvas, do not process it further.\nif (!this.input.mousePointer.withinCanvas(event))\nreturn;\n\n// If the mouse pointer is locked, do not process it further.\nif (this.input.mousePointer.locked)\nreturn;\n\n// Prevent default behavior.\nevent.preventDefault();\n\n// If the event has been handled, do not process it further.\nif (event.handled)\nreturn;\n\n// If the mouse pointer is currently locked, do not process it further.\nif (this.input.mousePointer.locked)\nreturn;\n\n// If the mouse pointer is currently active, do not process it further.\nif (this.input.mousePointer.active)\nreturn;\n\n// Start the mouse pointer input process.\nthis.input.mousePointer.start(event);\n}", "CodeBleu_score": 48.140185549547446}, {"code": "onMouseUpGlobal: function (event){\n\tif (this.mouseUpCallback) {\nthis.mouseUpCallback.call(this, event);\n}\nif (event.preventDefault) {\nevent.preventDefault();\n}\nif (this.input.enabled) {\nthis.input.mousePointer.stop();\nthis.input.mousePointer.id = event.identifier;\nthis.input.mousePointer.start(event);\n}\n}", "CodeBleu_score": 57.19161220671825}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled && this.touchEnterCallback) {\n\t\tthis.touchEnterEvent = event;\n\t\tthis.touchEnterCallback.call(this.game.input, this);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 36.067293474007634}, {"code": "onTouchEnter: function (event){\n\tif (this.game.input.enabled && this.inputEnabled) {\nthis.touchEnterCallback.call(this, event);\nif (this.preventDefault) {\nevent.preventDefault();\n}\n}\n}", "CodeBleu_score": 26.203784045547796}, {"code": "onTouchEnter: function (event){\n\t\tif (this.game.input.enabled && this.inputEnabled) {\n\t\tthis.touchEnterCallback.call(this.game.input.activePointer, event);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 18.19839782027285}]}
