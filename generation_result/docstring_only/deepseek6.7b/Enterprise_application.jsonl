{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n    from io import BytesIO\n    from zipfile import ZipFile\n    import json\n    import base64\n    from odoo import http\n    from odoo.http import request\n    from odoo.tools import html2plaintext\n    from odoo.tools import html2text\n    from odoo.tools.mimetypes import guess_mimetype\n\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.httprequest.args.getlist(\"attachment_ids\")\n\n    # Verify read access rights and rules for the attachments\n    attachments = request.env[\"ir.attachment\"].browse(attachment_ids)\n    attachments.check_access_rights(\"read\")\n    attachments.check_access_rule(\"read\")\n\n    # Build a zip file from the attachments' content\n    zip_buffer = BytesIO()\n    with ZipFile(zip_buffer, \"a\") as zip_file:\n        for attachment in attachments:\n            # Determine the content type of the attachment\n            content_type = attachment.mimetype or guess_mimetype(attachment.url)\n\n            # Determine the filename of the attachment\n            filename = attachment.name or \"attachment\"\n\n            # Determine the content of the attachment\n            content = attachment.datas or attachment.url\n\n            # Add the attachment to the zip file\n            zip_file.writestr(filename, content)\n\n    # Prepare HTTP headers for the zip file\n    headers = [\n        (\"Content-Type\", \"application/zip\"),\n        (\"Content-Disposition\", \"attachment; filename=attachments.zip\"),\n    ]\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_buffer.getvalue(), headers=headers)", "CodeBleu_score": 39.998417898313356}, {"code": "def export_zip_documents(self, **args)\n    attachment_ids = self.get_requested_attachments()\n    attachments = self.get_attachments_from_ids(attachment_ids)\n    self.verify_attachments(attachments)\n    zip_content = self.get_zip_content(attachments)\n    return self.prepare_response(zip_content)\n", "CodeBleu_score": 11.159749712572815}, {"code": "def export_zip_documents(self, **args)\n    attachment_ids = self.request.args.getlist(\"attachment_ids[]\")\n    if not attachment_ids:\n        raise ValidationError(_(\"No attachment IDs provided.\"))\n    attachments = self.env[\"ir.attachment\"].browse(attachment_ids)\n    if not attachments.check_access_rights(\"read\", raise_exception=False):\n        raise AccessError(_(\"You do not have access to all attachments.\"))\n    if not attachments.filtered(lambda a: a.res_model == \"ir.ui.view\"):\n        raise ValidationError(_(\"Only UI views can be exported.\"))\n    if not attachments.filtered(lambda a: a.res_field == \"arch\"):\n        raise ValidationError(_(\"Only UI views archives can be exported.\"))\n    if not attachments.filtered(lambda a: a.mimetype == \"application/xml\"):\n        raise ValidationError(_(\"Only UI views archives can be exported.\"))\n    if not attachments.filtered(lambda a: a.res_id in attachments.mapped(\"res_id\")):\n        raise ValidationError(_(\"Only UI views archives can be exported.\"))\n    if not attachments.filtered(lambda a: a.res_id in attachments.mapped(\"res_id\")):\n        raise ValidationError(_(\"Only UI views archives can be exported.\"))\n    if not attachments.filtered(lambda a: a.res_id in attachments.mapped(\"res_id\")):\n        raise ValidationError(_(\"Only UI views archives can be exported.\"))\n    if not attachments.filtered(lambda a: a.res_id in attachments.mapped(\"res_id\")):\n        raise ValidationError(_(\"Only UI views archives can be exported.\"))\n    if not attachments.filtered(lambda a: a.res_id in attachments.mapped(\"res_id\")):\n        raise ValidationError(_(\"Only UI views archives can be exported.\"))\n    if not attachments.filtered(lambda a: a.res_id in attachments.mapped(\"res_id\")):\n", "CodeBleu_score": 23.280209837234185}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n    values = super()._prepare_home_portal_values(counters)\n    if self.env['account.move'].check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = counters['account.move']\n    if self.env['account.move.line'].check_access_rights('read', raise_exception=False):\n        values['bill_count'] = counters['account.move.line']\n    return values", "CodeBleu_score": 28.46143728136753}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super()._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_readonly'):\n        invoice_count = counters.get('account.move', {}).get('in_invoice', 0)\n        bill_count = counters.get('account.move', {}).get('out_invoice', 0)\n        values['invoice_count'] = invoice_count\n        values['bill_count'] = bill_count\n    return values", "CodeBleu_score": 28.66641578767306}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super(HomePortal, self)._prepare_home_portal_values(counters)\n\n    # Check if the user has read access to 'account.move'\n    if self.env['ir.model.access'].check('account.move', 'read', self.env.uid):\n        # Count the number of invoices and bills\n        invoices_count = self.env['account.move'].search_count([\n            ('move_type', 'in', ['out_invoice', 'out_refund']),\n            ('partner_id', '=', self.env.user.partner_id.id)\n        ])\n        bills_count = self.env['account.move'].search_count([\n            ('move_type', 'in', ['in_invoice', 'in_refund']),\n            ('partner_id', '=', self.env.user.partner_id.id)\n        ])\n\n        # Add the counts to the values dictionary\n        values['invoices_count'] = invoices_count\n        values['bills_count'] = bills_count\n\n    return values", "CodeBleu_score": 40.48393286293842}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    # Get the invoices\n    invoices = self.get_invoices(page, date_begin, date_end, sortby, filterby, **kw)\n    # Update the session history with the latest invoice IDs\n    self.update_session_history(invoices)\n    # Prepare the values for rendering the invoices page\n    values = self.prepare_portal_layout_values()\n    values.update({\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'invoices': invoices,\n        'sortby': sortby,\n        'filterby': filterby,\n        'page': page,\n    })\n    # Render the invoices page\n    return request.render(\"account.portal_my_invoices\", values)", "CodeBleu_score": 40.84709952323797}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    # Check if the user is logged in\n    if not self.user_has_groups('base.group_user'):\n        return request.redirect('/web/login')\n\n    # Retrieve the invoices based on the provided parameters\n    invoices = self.get_invoices(page, date_begin, date_end, sortby, filterby)\n\n    # Update the session history with the latest invoice IDs\n    self.update_session_history(invoices)\n\n    # Render the invoices page with the prepared values\n    return request.render('account.portal_my_invoices', {\n        'invoices': invoices,\n        'page_name': 'invoices',\n        'pager': self.pager,\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n        'default_url': '/my/invoices',\n    })\n", "CodeBleu_score": 37.91753227004595}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    # Get the current user's invoices\n    invoices = self.get_invoices(page=page, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby, **kw)\n\n    # Update the session history with the latest invoice IDs\n    session_history = self.session.get('session_history', {})\n    session_history['invoices'] = invoices.ids\n    self.session['session_history'] = session_history\n\n    # Prepare the values for rendering the invoices page\n    values = {\n        'invoices': invoices,\n        'page': page,\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n        'kw': kw,\n    }\n\n    return self.render('portal_my_invoices.html', values)", "CodeBleu_score": 34.56146285583544}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    # Check access\n    invoice = request.env['account.move'].sudo().browse(invoice_id)\n    if not invoice.exists():\n        raise exceptions.AccessError(_(\"Invoice %s does not exist.\") % invoice_id)\n    if invoice.state != 'posted':\n        raise exceptions.AccessError(_(\"Invoice %s is not posted.\") % invoice_id)\n    if invoice.type != 'out_invoice':\n        raise exceptions.AccessError(_(\"Invoice %s is not a customer invoice.\") % invoice_id)\n    if invoice.partner_id != request.env.user.partner_id:\n        raise exceptions.AccessError(_(\"Invoice %s is not accessible.\") % invoice_id)\n    # Prepare report\n    if report_type == 'html':\n        report = request.env.ref('account.action_account_invoice_report_html').sudo().render_qweb_pdf([invoice.id])[0]\n        report_name = _('Invoice %s') % invoice.number\n    elif report_type == 'pdf':\n        report = request.env.ref('account.account_invoices').sudo().render_qweb_pdf([invoice.id])[0]\n        report_name = _('Invoice %s') % invoice.number\n    elif report_type == 'text':\n        report = request.env.ref('account.account_invoices').sudo().render_qweb_text([invoice.id])[0]\n        report_name = _('Invoice %s') % invoice.number\n    else:\n        raise exceptions.AccessError(_(\"Report type %s is not supported.\") % report_type)\n    # Download report\n    if download:\n        if len(invoice.invoice_line_ids.mapped('invoice_line_tax_ids.sequence')) > 1:\n            return request.env['ir.actions.report']._get_pdf(invoice, report_name)\n        else:\n            return request.env['ir.actions.report']._get_pdf(invoice, report_name, report)\n    # Display report", "CodeBleu_score": 34.4375908818904}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    # Check access\n    invoice = self.env['account.move'].sudo().browse(invoice_id)\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n    if invoice.state == 'draft':\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.state == 'cancel':\n        raise werkzeug.exceptions.Gone()\n    if invoice.type != 'out_invoice':\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.state != 'posted':\n        if not invoice.can_invoice_be_posted():\n            raise werkzeug.exceptions.Forbidden()\n    if invoice.company_id.invoice_download_access not in ('all', 'portal') and not access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.company_id.invoice_download_access == 'all' and not access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.company_id.invoice_download_access == 'portal' and not access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.company_id.invoice_download_access == 'portal' and access_token and access_token != invoice.access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.company_id.invoice_download_access == 'user' and not invoice.access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.company_id.invoice_download_access == 'user' and access_token and access_token != invoice.access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if invoice.company_id.invoice_download_access == 'all' and access_token and access_token != invoice.access_token:\n        raise werkzeug.exceptions.Forbidden()\n    if invoice", "CodeBleu_score": 25.04572806918391}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    # check access\n    invoice = self.env[\"account.move\"].browse(invoice_id)\n    if not invoice.exists():\n        raise UserError(_(\"Invoice not found\"))\n    if invoice.state != \"posted\":\n        raise UserError(_(\"You can only access the invoice after it has been validated.\"))\n    if invoice.type != \"out_invoice\":\n        raise UserError(_(\"You can only access customer invoices.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group_by_date\":\n        raise UserError(_(\"You can only access invoices grouped by date.\"))\n    if invoice.company_id.portal_invoice_grouping != \"group", "CodeBleu_score": 19.377124011021277}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n    # This function is used to create demo data for the module\n    # 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_sale_order_1\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_purchase_order_1\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_sale_order_2\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_purchase_order_2\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_sale_order_3\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_purchase_order_3\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_sale_order_4\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_purchase_order_4\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_sale_order_5\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_purchase_order_5\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_sale_order_6\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_purchase_order_6\n    # in the module 'product_template_tags_groups'\n    # The function is called from the function _get_demo_data_", "CodeBleu_score": 1.105006105006105}, {"code": "def _get_demo_data_products(self, company=False)\n    # Get the company's domain\n    domain = self._get_company_domain(company)\n    # Get the products\n    products = self.env['product.template'].search(domain)\n    # Update the sale taxes for the products\n    if company and company.account_sale_tax_id:\n        for product in products:\n            product.taxes_id = company.account_sale_tax_id\n    # Update the purchase taxes for the products\n    if company and company.account_purchase_tax_id:\n        for product in products:\n            product.supplier_taxes_id = company.account_purchase_tax_id\n    return products", "CodeBleu_score": 18.85430737801189}, {"code": "def _get_demo_data_products(self, company=False)\n    # Get products\n    products = self.env['product.product'].search([('company_id', '=', company.id)])\n    # Update sale taxes\n    if company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    # Update purchase taxes\n    if company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return products", "CodeBleu_score": 18.057422475772366}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n    # Get the account from the ir.model.data model\n    account = self.env['ir.model.data'].sudo().get_object(\n        'account', xml_id)\n    if not account:\n        # Search for an account matching the account_type within the company's domain\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        # If still not found, return the first account within the company's domain\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id)], limit=1)\n    return account", "CodeBleu_score": 44.60930288090074}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)])\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)])\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account", "CodeBleu_score": 44.68945675079696}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    # Try to find the account using the company's ID and the xml_id in the 'ir.model.data' model\n    account = self.env['ir.model.data'].get_object('account', xml_id)\n    if not account:\n        # If not found, search for an account matching the account_type within the company's domain\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        # If still not found, return the first account within the company's domain\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 41.556462240751856}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n    for company in self:\n        account_type_current_year_earning = self.env.ref('l10n_br_coa_generic.data_account_type_current_year_earning').id\n        accounts = self.search([('company_id', '=', company.id), ('user_type_id', '=', account_type_current_year_earning)])\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account of the \"Current Year Earnings\" type for each company.'))", "CodeBleu_score": 35.97960510385222}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    account_type = self.env.ref('account.data_account_type_current_year_earnings')\n    accounts = self.env['account.account'].search([('user_type_id', '=', account_type.id), ('company_id', '=', self.company_id.id)])\n    if len(accounts) > 1:\n        raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" for each company.'))", "CodeBleu_score": 39.12095130890558}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    account_type = self.env.ref('account.data_account_type_current_year_earnings')\n    accounts = self.env['account.account'].search([\n        ('user_type_id', '=', account_type.id),\n        ('company_id', '=', self.company_id.id)\n    ])\n    if len(accounts) > 1:\n        raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" for each company.'))\n", "CodeBleu_score": 39.28312435805405}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name:\n        if self.env.context.get('partner_id'):\n            return self.search_by_partner_id(self.env.context['partner_id'], domain=domain, limit=limit, order=order)\n        elif self.env.context.get('partner_name'):\n            return self.search_by_partner_name(self.env.context['partner_name'], domain=domain, limit=limit, order=order)\n        else:\n            return self.search([], limit=limit, order=order)\n    return self.search([('name', operator, name)] + (domain or []), limit=limit, order=order)\n", "CodeBleu_score": 28.77306652685113}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if name:\n        if operator == 'ilike':\n            operator = 'like'\n        elif operator == 'not ilike':\n            operator = 'not like'\n        domain = [('name', operator, name)]\n    if not domain:\n        if self._context.get('partner_id'):\n            partner_id = self._context['partner_id']\n            domain = [('partner_id', '=', partner_id)]\n        else:\n            domain = []\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 34.33979226214916}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    # TODO: This function is not yet implemented. It is a placeholder for a future implementation.\n    pass\n", "CodeBleu_score": 7.907857997606701}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n    if not new:\n        return\n    for lang in self.env['res.lang'].get_installed():\n        if lang.code not in excluded:\n            self._cr.execute('INSERT INTO %s (%s, %s, %s, %s) SELECT %%s, %%s, %%s, %%s FROM %s WHERE %s=%%s AND %s=%%s' % (\n                self._table,\n                self._cr.column_exists('name', self._table) and 'name' or '',\n                self._cr.column_exists('description', self._table) and 'description' or '',\n                self._cr.column_exists('help', self._table) and 'help' or '',\n                self._table,\n                self._cr.column_exists('name', self._table) and 'name' or '',\n                self._cr.column_exists('description', self._table) and 'description' or '',\n                self._cr.column_exists('help', self._table) and 'help' or '',\n                self._table,\n                self.id,\n                self._cr.column_exists('name', self._table) and 'name' or '',\n                self._cr.column_exists('description', self._table) and 'description' or '',\n                self._cr.column_exists('help', self._table) and 'help' or '',\n            ), (lang.code, self.name, self.description, self.help, self.id, self.name, self.description, self.help))\n    if new.name and new.name.startswith('%s, ' % self.name):\n        new.name = new.name[len(self.name) + 2:]\n        new.with_context(overwrite=True).name = self.name\n\n", "CodeBleu_score": 21.62708222820771}, {"code": "def copy_translations(self, new, excluded=())\n    if not new:\n        return\n    new.ensure_one()\n    excluded = excluded + ('name',)\n    for field in self._fields:\n        if field in excluded:\n            continue\n        if field.startswith('x_'):\n            continue\n        if field.startswith('__'):\n            continue\n        if field in ('create_uid', 'create_date', 'write_uid', 'write_date', 'id'):\n            continue\n        if field in ('parent_id', 'parent_path', 'parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_right'):\n            continue\n        if field in ('parent_left', 'parent_", "CodeBleu_score": 19.00104070445551}, {"code": "def copy_translations(self, new, excluded=())\n    new.ensure_one()\n    if new.id == self.id:\n        return\n    if not excluded:\n        excluded = self.env['ir.model.fields'].search([\n            ('model_id', '=', self.env['ir.model']._get_id(new._name)),\n            ('name', '=', 'name'),\n            ('translatable', '=', True),\n        ])\n    else:\n        excluded = self.env['ir.model.fields'].search([\n            ('model_id', '=', self.env['ir.model']._get_id(new._name)),\n            ('name', 'in', excluded),\n            ('translatable', '=', True),\n        ])\n    for field in self._fields:\n        if field in excluded.mapped('name'):\n            continue\n        if new[field] != self[field]:\n            new[field] = self[field]\n    if new._name_pattern:\n        new.name = new._name_pattern % new._name_pattern_values()\n        new.name_get()\n", "CodeBleu_score": 32.42160248109537}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n    invoices = self.env['account.move'].search([('invoice_origin_id', '=', self.id)])\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', invoices.ids)]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_partner_id': self.id,\n        'default_invoice_origin': self.name,\n        'default_invoice_date': fields.Date.today(),\n        'default_invoice_date_due': fields.Date.today() + timedelta(days=30),\n        'default_analytic_account_id': self.analytic_account_id.id,\n    }\n    return action\n\n", "CodeBleu_score": 31.84676547761708}, {"code": "def action_view_invoice(self)\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = {}\n    action[\"domain\"] = [(\"id\", \"in\", self.get_invoice_ids())]\n    return action\n", "CodeBleu_score": 14.671237845539608}, {"code": "def action_view_invoice(self)\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['context'] = {'search_default_invoice_type': self.id}\n    action['domain'] = [('move_id', 'in', self.env['account.move.line'].search([('sale_line_ids', 'in', self.sale_order_line_ids.ids), ('account_id', 'in', self.analytic_account_ids.ids)]).mapped('move_id').ids)]\n    return action", "CodeBleu_score": 26.63538898910536}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    move_ids = self.env['account.move.line'].search([('purchase_line_id', '=', self.id)]).mapped('move_id')\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids.ids)]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_vendor_bill_id': self.id}\n    return action", "CodeBleu_score": 25.840402467156697}, {"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    move_lines = self.env['account.move.line'].search([\n        ('purchase_line_id', 'in', self.purchase_line_ids.ids),\n        ('move_id', 'in', self.move_ids.ids)\n    ])\n    move_ids = move_lines.mapped('move_id').ids\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['views'] = [(False, 'form')]\n    action['res_id'] = move_ids\n    action['domain'] = [('id', 'in', move_ids)]\n    return action\n", "CodeBleu_score": 27.174252936112776}, {"code": "def action_view_vendor_bill(self)\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_type': 'in_invoice', 'default_vendor_bill_id': self.id}\n    action['domain'] = [('id', 'in', self.mapped('invoice_ids').ids)]\n    return action\n", "CodeBleu_score": 20.501618233730255}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.do_in_draft():\n        attachments = self.env['ir.attachment'].browse(values.get('attachment_ids'))\n        for attachment in attachments:\n            if attachment.res_model == 'hr.employee':\n                attachment.unlink()\n    return super(HrEmployee, self).write(values)", "CodeBleu_score": 43.49791652990275}, {"code": "def write(self, values)\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.do_in_draft():\n        attachments = self.mapped('attachment_ids')\n        result = super(ResPartner, self.with_context(attachments=attachments)).write(values)\n    return result", "CodeBleu_score": 48.57041419718393}, {"code": "def write(self, values)\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.do_in_draft():\n        attachments = self.env['ir.attachment'].search([('res_model', '=', self._name), ('res_id', 'in', self.ids)])\n        if attachments:\n            attachments.unlink()\n        return super(IrAttachment, self).write(values)", "CodeBleu_score": 44.41395173404612}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id)\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id\n        })\n    return bank_account", "CodeBleu_score": 56.4845421512736}, {"code": "def _find_or_create_bank_account(self)\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n\n    return self.env['res.partner.bank'].with_company(self.company_id)._find_or_create(\n        self.account_number, self.partner_id.id, self.bank_id.id,\n        self.bank_branch_id.id, self.bank_account_type_id.id, self.bank_holder,\n        self.company_id.id)", "CodeBleu_score": 24.391544151937016}, {"code": "def _find_or_create_bank_account(self)\n    self.ensure_one()\n    if self.env.context.get(\"skip_bank_account_creation\"):\n        return self.env[\"account.bank.account\"].browse()\n    return self.env[\"account.bank.account\"].search(\n        [\n            (\"company_id\", \"=\", self.company_id.id),\n            (\"acc_number\", \"=\", self.acc_number),\n            (\"partner_id\", \"=\", self.partner_id.id),\n        ],\n        limit=1,\n    )", "CodeBleu_score": 25.35024858896504}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    res = super()._prepare_counterpart_amounts_using_st_line_rate(currency, balance, amount_currency)\n    if self.currency_id.is_st_currency:\n        res['amount_currency'] = res['amount']\n        res['amount_company_currency'] = res['amount']\n        res['amount_company'] = res['amount']\n    return res", "CodeBleu_score": 3.3646066928225777}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    res = {}\n    if not currency:\n        return res\n    # Ensure single record context\n    self.ensure_one()\n    # Retrieve relevant accounting amounts and currencies\n    amount = amount_currency\n    journal_amount = amount_currency\n    company_amount = amount_currency\n    # Compute transaction amount, journal amount, and company amount using various exchange rates\n    if self.currency_id != currency:\n        amount = currency._convert(amount, self.currency_id, self.company_id, self.date)\n    if self.journal_id.currency_id != currency:\n        journal_amount = currency._convert(journal_amount, self.journal_id.currency_id, self.company_id, self.date)\n    if self.company_id.currency_id != currency:\n        company_amount = currency._convert(company_amount, self.company_id.currency_id, self.company_id, self.date)\n    # Adjust transaction amount and balance accordingly\n    if self.type in ('in_invoice', 'in_refund'):\n        if self.currency_id != currency:\n            amount = -amount\n            balance = -balance\n    elif self.type in ('out_invoice', 'out_refund'):\n        if self.currency_id != currency:\n            amount = amount\n            balance = balance\n    # Return the transaction amount, journal amount, and company amount in a dictionary\n    res = {\n        'amount': amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'balance': balance\n    }\n    return res", "CodeBleu_score": 27.425929980482806}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    res = super()._prepare_counterpart_amounts_using_st_line_rate(currency, balance, amount_currency)\n    if currency.is_zero(amount_currency):\n        return res\n    if self.type == 'in_invoice':\n        res['amount'] = -amount_currency\n        res['amount_company'] = -amount_currency\n        res['amount_journal'] = -amount_currency\n    elif self.type == 'in_refund':\n        res['amount'] = amount_currency\n        res['amount_company'] = amount_currency\n        res['amount_journal'] = amount_currency\n    elif self.type == 'out_invoice':\n        res['amount'] = amount_currency\n        res['amount_company'] = amount_currency\n        res['amount_journal'] = amount_currency\n    elif self.type == 'out_refund':\n        res['amount'] = -amount_currency\n        res['amount_company'] = -amount_currency\n        res['amount_journal'] = -amount_currency\n    return res", "CodeBleu_score": 12.574631556472337}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n    # Clear existing payment method lines\n    self.outbound_payment_method_line_ids.unlink()\n\n    # Retrieve default outbound payment methods for journal type\n    if self.type == 'bank':\n        default_methods = self.env['account.payment.method'].search([('code', '=', 'outbound'), ('payment_type', '=', 'inbound')])\n    elif self.type == 'cash':\n        default_methods = self.env['account.payment.method'].search([('code', '=', 'outbound'), ('payment_type', '=', 'outbound')])\n    else:\n        return\n\n    # Create new payment method lines for each method\n    for method in default_methods:\n        self.outbound_payment_method_line_ids = [(0, 0, {\n            'payment_method_id': method.id,\n            'bank_account_link': method.bank_account_link,\n            'payment_difference': method.payment_difference,\n            'payment_difference_handling': method.payment_difference_handling,\n            'payment_journal_id': method.payment_journal_id.id,\n            'payment_line_ids': [(0, 0, {\n                'payment_method_id': method.id,\n                'bank_account_link': method.bank_account_link,\n                'payment_difference': method.payment_difference,\n                'payment_difference_handling': method.payment_difference_handling,\n                'payment_journal_id': method.payment_journal_id.id,\n            })],\n        })]\n", "CodeBleu_score": 29.25680524036631}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    self.ensure_one()\n    self.outbound_payment_method_line_ids = [(5, 0, 0)]\n    if self.type in ('bank', 'cash'):\n        default_payment_methods = self.env['account.payment.method'].search([('code', '=', 'default_payment_method')])\n        for method in default_payment_methods:\n            self.outbound_payment_method_line_ids = [(0, 0, {\n                'name': method.name,\n                'code': method.code,\n            })]\n    return True\n", "CodeBleu_score": 30.94328634587099}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    outbound_payment_method_line_ids = []\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            outbound_payment_method_line_ids = journal._get_default_outbound_payment_method_line_ids()\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)] + [(0, 0, x) for x in outbound_payment_method_line_ids]", "CodeBleu_score": 28.70822504856918}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n    for move in self:\n        if not move.date and move.invoice_date:\n            move.date = move.invoice_date\n        if move.date and move.date != fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n            move._recompute_fields()\n            move._recompute_dynamic_lines()\n\n", "CodeBleu_score": 29.12550283145855}, {"code": "def _compute_date(self)\n    if not self.invoice_date and not self.date:\n        self.date = fields.Date.context_today(self)\n    elif self.invoice_date and not self.date:\n        if self.move_type not in ['in_invoice', 'in_refund']:\n            self.date = self._compute_accounting_date_from_invoice_date(self.invoice_date)\n        else:\n            self.date = self.invoice_date\n    elif self.date != self.invoice_date:\n        self.date = self.invoice_date\n        self.env.add_to_compute(self._fields.get('date_due'), self)\n        self.env.add_to_compute(self._fields.get('date_maturity'), self)\n        self.env.add_to_compute(self._fields.get('date_reconcile'), self)\n        self.env.add_to_compute(self._fields.get('date_expected'), self)\n        self.env.add_to_compute(self._fields.get('date_done'), self)\n        self.env.add_to_compute(self._fields.get('date_invoice'), self)\n        self.env.add_to_compute(self._fields.get('date_due'), self)\n        self.env.add_to_compute(self._fields.get('date_maturity'), self)\n        self.env.add_to_compute(self._fields.get('date_reconcile'), self)\n        self.env.add_to_compute(self._fields.get('date_expected'), self)\n        self.env.add_to_compute(self._fields.get('date_done'), self)\n        self.env.add_to_compute(self._fields.get('date_invoice'), self)\n        self.env.add_to_compute(self._fields.get('date_due'), self)\n        self.env.add_to_compute(self._fields.get('date_maturity'), self)\n        self.env.add_to_compute(self._fields.get('date_re", "CodeBleu_score": 23.09221502379334}, {"code": "def _compute_date(self)\n    date = self.invoice_date or self.date\n    if not date:\n        date = fields.Date.context_today(self)\n    if self.invoice_date and self.move_type in ('in_invoice', 'in_refund'):\n        if self.company_id.tax_report_invoice_date_policy == 'invoice_date':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_tax':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_tax_and_discount':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_discount':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_tax_and_discount_and_late_fee':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_late_fee':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_tax_and_late_fee':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_tax_and_discount_and_late_fee':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_late_fee_and_discount':\n            date = self.invoice_date\n        elif self.company_id.tax_report_invoice_date_policy == 'invoice_date_with_tax_and_late_fee_and_discount':\n           ", "CodeBleu_score": 19.406679380148756}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n    if self.move_type in ('out_invoice', 'out_refund'):\n        self.invoice_payment_term_id = self.partner_id.property_payment_term_id\n    elif self.move_type in ('in_invoice', 'in_refund'):\n        self.invoice_payment_term_id = self.partner_id.supplier_payment_term_id\n    else:\n        self.invoice_payment_term_id = False", "CodeBleu_score": 27.328465929854772}, {"code": "def _compute_invoice_payment_term_id(self)\n    if self.move_type in ('in_invoice', 'in_refund'):\n        self.invoice_payment_term_id = self.partner_id.property_payment_term_id\n    elif self.move_type in ('out_invoice', 'out_refund'):\n        self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id\n    else:\n        self.invoice_payment_term_id = False", "CodeBleu_score": 27.96580502124364}, {"code": "def _compute_invoice_payment_term_id(self)\n    invoice_payment_term_id = False\n    if self.type in ['out_invoice', 'out_refund']:\n        invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n    elif self.type in ['in_invoice', 'in_refund']:\n        invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n    self.invoice_payment_term_id = invoice_payment_term_id", "CodeBleu_score": 26.27129834232583}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n    tax_groups = self.env['account.tax.group'].search([])\n    group_by_country = defaultdict(lambda: defaultdict(list))\n    group_by_company = defaultdict(list)\n    for group in tax_groups:\n        if group.country_id:\n            group_by_country[group.country_id][group.company_id].append(group)\n        else:\n            group_by_company[group.company_id].append(group)\n    for tax in self:\n        if tax.country_id:\n            groups = group_by_country[tax.country_id][tax.company_id]\n        else:\n            groups = group_by_company[tax.company_id]\n        for group in groups:\n            if group.match_tax(tax):\n                tax.tax_group_id = group\n                break\n    return True", "CodeBleu_score": 27.630010676222494}, {"code": " def _compute_tax_group_id(self)\n    grouped_taxes = {}\n    for tax in self:\n        key = (tax.country_id.id, tax.company_id.id)\n        if key not in grouped_taxes:\n            grouped_taxes[key] = []\n        grouped_taxes[key].append(tax)\n    for key, taxes in grouped_taxes.items():\n        country_id, company_id = key\n        tax_group = self.env['account.tax.group'].search([\n            ('country_id', '=', country_id),\n            ('company_id', '=', company_id),\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', company_id),\n            ], limit=1)\n        for tax in taxes:\n            tax.tax_group_id = tax_group\n", "CodeBleu_score": 41.00655116801895}, {"code": " def _compute_tax_group_id(self)\n    for tax in self:\n      tax_group_ids = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n      if not tax_group_ids:\n        tax_group_ids = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n      tax.tax_group_id = tax_group_ids[0] if tax_group_ids else False", "CodeBleu_score": 23.559547466161618}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    # Set the database in the session\n    response = requests.get(url)\n    session = response.cookies\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        response = requests.post(url + '/base_import_module/login_upload', data=data, files=files, cookies=session)\n\n    # Check if the server has the required module installed or is outdated\n    if 'Module not installed' in response.text or 'Module outdated' in response.text:\n        raise Exception(response.text)\n\n    return response.text\n\n", "CodeBleu_score": 45.411955768066996}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    # Set the database in the session\n    self.session.get(url)\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n    # Upload the module file to the server\n    response = self.session.post(\n        'base_import_module/login_upload',\n        data=data,\n        files={'file': ('module.xml', module_data)}\n    )\n    # Check if the server has the required module installed or is outdated\n    if 'Module not installed' in response.text or 'Module outdated' in response.text:\n        raise Exception(\n            'Module not installed or outdated on server. Please install or update the module before uploading.')\n    return response.text\n\n", "CodeBleu_score": 52.30185230943582}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    # Set the database in the session\n    self.session.get(url)\n\n    # Prepare the POST request data\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force\n    }\n\n    # Read the module file and upload it to the server\n    with open(module_file, \"rb\") as f:\n        files = {\"file\": f}\n        response = self.session.post(f\"{url}/base_import_module/login_upload\", data=data, files=files)\n\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 404:\n        raise Exception(\"The server does not have the required module installed or is outdated.\")\n\n    # Return the server's response text\n    return response.text\n\n", "CodeBleu_score": 42.710588519763164}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n    import odoo\n    from odoo.tools.translate import TranslationImporter\n\n    db_name = odoo.tools.config['db_name']\n    overwrite = odoo.tools.config['overwrite']\n\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        importer.import_()\n", "CodeBleu_score": 42.1949791119274}, {"code": "def import_translation()\n    import logging\n    import os\n    import odoo\n    from odoo.tools.translate import TranslationImporter\n    from odoo.tools.config import config\n    from odoo.modules.module import get_resource_from_path\n    _logger = logging.getLogger(__name__)\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, get_resource_from_path(os.path.join('odoo', 'addons', 'base', 'i18n', 'fr_FR')), 'fr_FR', overwrite=overwrite)\n        importer.import_()\n        _logger.info(\"Translations imported successfully.\")\n", "CodeBleu_score": 43.70144881342758}, {"code": "def import_translation()\n    from odoo import api, SUPERUSER_ID\n    from odoo.tools.translate import TranslationImporter\n\n    # Get configuration settings\n    db_name = api.Environment.get_cr().dbname\n    overwrite = api.Environment.get_cr().config['overwrite']\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = api.registry(db_name)\n    with api.Environment.manage(), registry.cursor() as cr:\n        importer = TranslationImporter(cr, SUPERUSER_ID, overwrite=overwrite)\n\n        # Load translation files based on the specified configuration\n        importer.import_()\n\n        # Save the translations, with the option to overwrite existing ones\n        importer.save(overwrite=overwrite)", "CodeBleu_score": 44.40262368367587}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n    # Check if the child already exists\n    for child in self.children:\n        if child.name == name:\n            return child\n\n    # Create a new child node\n    child = Node(name, info)\n\n    # Set the depth of the child\n    child.depth = self.depth + 1\n\n    # Inherit certain attributes from the parent\n    if self.parent:\n        child.parent = self.parent\n        child.root = self.root\n        child.path = self.path + \"/\" + name\n        child.full_path = self.full_path + \"/\" + name\n\n    # Add the child to the current node's children\n    self.children.append(child)\n\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n\n    return child", "CodeBleu_score": 46.46865017653666}, {"code": "def add_child(self, name, info)\n    # Create a new node with the given name and info\n    new_node = Node(name, info)\n\n    # Set the depth of the new node to be one greater than the current node\n    new_node.depth = self.depth + 1\n\n    # Check if the new node is already in the children list\n    if new_node not in self.children:\n        # If not, add it to the list\n        self.children.append(new_node)\n\n    # Inherit certain attributes from the parent if they exist\n    if self.parent is not None:\n        if self.parent.color is not None:\n            new_node.color = self.parent.color\n        if self.parent.size is not None:\n            new_node.size = self.parent.size\n        if self.parent.shape is not None:\n            new_node.shape = self.parent.shape\n        if self.parent.material is not None:\n            new_node.material = self.parent.material\n\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n\n    # Return the new node\n    return new_node", "CodeBleu_score": 40.903718446210426}, {"code": "def add_child(self, name, info)\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if self.parent:\n        new_node.parent = self.parent\n        new_node.parent_name = self.parent.name\n        new_node.parent_id = self.parent.id\n        new_node.parent_type = self.parent.type\n        new_node.parent_info = self.parent.info\n        new_node.parent_info_type = self.parent.info_type\n    if self.children:\n        for child in self.children:\n            if child.name == new_node.name:\n                return child\n    self.children.append(new_node)\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n", "CodeBleu_score": 37.617794622261854}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"root_type\": account.root_type,\n        \"account\": account,\n    }\n\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-b for b in result[\"balances\"]]\n\n    for entry in gl_entries:\n        if entry.account == account:\n            date_index = dates.index(entry.date)\n            result[\"balances\"][date_index] += entry.amount\n\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        result[\"balances\"] = [sum(result[\"balances\"][:i + 1]) for i in range(len(dates))]\n\n    return result\n\n", "CodeBleu_score": 27.99873610067154}, {"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n\n    root_type = account[\"root_type\"]\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i, _ in enumerate(dates):\n            result[\"balances\"][i] *= -1\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for gl_entry in gl_entries:\n            date_index = dates.index(gl_entry[\"date\"])\n            result[\"balances\"][date_index] += gl_entry[\"amount\"]\n\n    return result\n\n", "CodeBleu_score": 26.213479693008}, {"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n    root_type = account.root_type\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i in range(len(dates)):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for entry in gl_entries:\n            if entry.account == account:\n                date_index = dates.index(entry.date)\n                result[\"balances\"][date_index] += entry.amount\n    return result\n\n", "CodeBleu_score": 28.57306430463064}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n    if self.account_type == 'Receivable' or self.account_type == 'Payable':\n        if self.account_type != self.account_type_before_save:\n            if self.account_type_before_save == 'Receivable' or self.account_type_before_save == 'Payable':\n                if self.account_type == 'Non-Receivable' or self.account_type == 'Non-Payable':\n                    if self.account_type_before_save == 'Receivable':\n                        account_type_before_save_label = 'Receivable'\n                    else:\n                        account_type_before_save_label = 'Payable'\n                    if self.account_type == 'Non-Receivable':\n                        account_type_label = 'Non-Receivable'\n                    else:\n                        account_type_label = 'Non-Payable'\n                    self.add_comment(\n                        'Warning',\n                        f'Account type changed from \"{account_type_before_save_label}\" to \"{account_type_label}\". Potential issues in the \"Accounts\" report may occur.')\n                    self.add_comment(\n                        'Warning',\n                        'Please review the \"Accounts\" report to ensure that the account is correctly classified as a receivable or payable account.')\n                    self.add_comment(\n                        'Warning',\n                        'If the account is a receivable or payable account, please ensure that the \"Accounts\" report is generated with the correct account type selected.')\n                    self.add_comment(\n                        'Warning',\n                        'If the account is not a receivable or payable account, please ensure that the \"Accounts\" report is generated with the correct account type selected.')\n                    self.add_comment(\n                        'Warning',\n                        'If the account is a receivable or payable account, please ensure that the \"Accounts\" report is generated with the correct account type selected.')\n                    self.add_comment(\n                        'Warning',\n                        'If the account is not a receivable or payable account, please ensure that the \"Accounts\" report is generated with the correct account type selected.')", "CodeBleu_score": 18.19255824710451}, {"code": "def validate_receivable_payable_account_type(self)\n    if self.account_type != \"Receivable\" and self.account_type != \"Payable\":\n        return\n    if self.account_type == \"Receivable\" and self.receivable_account_type == \"Receivable\":\n        return\n    if self.account_type == \"Payable\" and self.payable_account_type == \"Payable\":\n        return\n    if self.account_type == \"Receivable\" and self.receivable_account_type == \"Payable\":\n        return\n    if self.account_type == \"Payable\" and self.payable_account_type == \"Receivable\":\n        return\n    if self.account_type == \"Receivable\" and self.receivable_account_type == \"Non-Receivable\":\n        return\n    if self.account_type == \"Payable\" and self.payable_account_type == \"Non-Payable\":\n        return\n    if self.account_type == \"Receivable\" and self.receivable_account_type == \"Non-Payable\":\n        return\n    if self.account_type == \"Payable\" and self.payable_account_type == \"Non-Receivable\":\n        return\n    if self.account_type == \"Receivable\" and self.receivable_account_type == \"Receivable and Payable\":\n        return\n    if self.account_type == \"Payable\" and self.payable_account_type == \"Receivable and Payable\":\n        return\n    if self.account_type == \"Receivable\" and self.receivable_account_type == \"Non-Receivable and Payable\":\n        return\n    if self.account_type == \"Payable\" and self.payable_account_type == \"Non-Receivable and Payable\":\n        return\n    if self.account_type == \"Receivable\" and self.receivable_account_type == \"Non-Receivable and Non-Payable\":\n        return\n    if self.account_type == \"Payable\" and", "CodeBleu_score": 16.134679358669636}, {"code": "def validate_receivable_payable_account_type(self)\n    if self.account_type == \"Receivable\" and self.old_account_type != \"Receivable\":\n        general_ledger_entries = frappe.db.get_values(\"General Ledger Entry\", {\"account\": self.name}, \"name\")\n        if general_ledger_entries:\n            frappe.msgprint(_(\"Account Type change to a non-Receivable/Payable account will affect the 'Accounts' report. Please check the 'Accounts' report for potential issues before making the change.\"), title=_(\"Warning\"), as_list=1)\n            self.add_comment(\"Comment\", {\"comment_type\": \"Comment\", \"comment_by\": frappe.session.user, \"comment\": _(\"Account Type change to a non-Receivable/Payable account will affect the 'Accounts' report. Please check the 'Accounts' report for potential issues before making the change.\")})\n\n    elif self.account_type == \"Payable\" and self.old_account_type != \"Payable\":\n        general_ledger_entries = frappe.db.get_values(\"General Ledger Entry\", {\"account\": self.name}, \"name\")\n        if general_ledger_entries:\n            frappe.msgprint(_(\"Account Type change to a non-Receivable/Payable account will affect the 'Accounts' report. Please check the 'Accounts' report for potential issues before making the change.\"), title=_(\"Warning\"), as_list=1)\n            self.add_comment(\"Comment\", {\"comment_type\": \"Comment\", \"comment_by\": frappe.session.user, \"comment\": _(\"Account Type change to a non-Receivable/Payable account will affect the 'Accounts' report. Please check the 'Accounts' report for potential issues before making the change.\")})", "CodeBleu_score": 29.995083201293955}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n    from frappe.utils import cint\n    if not self.currency:\n        self.currency = frappe.defaults.get_global_default('currency')\n    if self.account_currency != self.currency:\n        self.account_currency = self.currency\n        self.is_explicit_currency = 1\n    else:\n        self.is_explicit_currency = 0\n\n    if cint(self.is_explicit_currency) and self.account_currency != self.currency:\n        frappe.throw(_(\"Currency of Account {0} must be {1}\").format(self.name, self.currency))\n\n    if not self.company:\n        self.company = frappe.defaults.get_global_default('company')\n\n    if self.company and self.company != frappe.defaults.get_user_default('Company'):\n        self.company = frappe.defaults.get_user_default('Company')\n\n    if not self.company:\n        self.company = frappe.defaults.get_global_default('company')\n\n    if not self.company:\n        frappe.throw(_(\"Please select a Company\"))\n\n    if self.is_group:\n        self.account_type = 'Group'\n    else:\n        self.account_type = 'Normal'\n\n    if self.is_group:\n        self.is_group = 1\n    else:\n        self.is_group = 0\n\n    if self.account_type == 'Group' and not self.parent_account:\n        frappe.throw(_(\"Parent Account is mandatory for Group Account\"))\n\n    if self.account_type == 'Group' and not self.root_type:\n        frappe.throw(_(\"Root Type is mandatory for Group Account\"))\n\n    if self.account_type == 'Group' and not self.account_controller:\n        frappe.throw(_(\"Account Controller is mandatory for Group Account\"))\n\n    if self.account_type == 'Group' and not self.account_category:\n        frappe.throw(_(\"Account Category is mandatory for Group Account\"))\n\n    if self.account_type == '", "CodeBleu_score": 32.04916063511831}, {"code": "def validate_account_currency(self)\n    if not self.currency:\n        self.currency = self.company_id.currency_id.name\n        self.currency_explicit = True\n\n    if self.currency_explicit:\n        if self.ledger_balance != 0:\n            if self.currency != self.ledger_balance_currency:\n                raise ValidationError(_(\"Account currency cannot be changed to '%s' because it differs from the currency of the existing general ledger entries (%s).\") % (self.currency, self.ledger_balance_currency))\n\n    self.currency_explicit = True", "CodeBleu_score": 28.395220783509657}, {"code": "def validate_account_currency(self)\n    if self.currency:\n        self.currency_explicit = True\n    else:\n        self.currency_explicit = False\n        self.currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\n    if self.currency:\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry`\n\t\t\twhere account=%s and currency != %s\"\"\", (self.name, self.currency)):\n            frappe.throw(_(\"Currency of the account must be the same as the currency of the general ledger entries\"))", "CodeBleu_score": 37.57987380640155}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = tuple(entry[dim] for dim in accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_amount\": 0,\n                \"credit_amount\": 0,\n            }\n        aggregated_entries[key][\"debit\"] += entry[\"debit\"]\n        aggregated_entries[key][\"credit\"] += entry[\"credit\"]\n        aggregated_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n        aggregated_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n    return aggregated_entries\n\n", "CodeBleu_score": 34.85322183376135}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    entries_dict = {}\n    for entry in entries:\n        key = tuple(entry[dim] for dim in accounting_dimensions)\n        if key not in entries_dict:\n            entries_dict[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_amount\": 0,\n                \"credit_amount\": 0,\n            }\n        entries_dict[key][\"debit\"] += entry[\"debit\"]\n        entries_dict[key][\"credit\"] += entry[\"credit\"]\n        entries_dict[key][\"debit_amount\"] += entry[\"debit_amount\"]\n        entries_dict[key][\"credit_amount\"] += entry[\"credit_amount\"]\n    return entries_dict\n\n", "CodeBleu_score": 33.43705571416694}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                'debit': 0,\n                'credit': 0,\n                'debit_amount': 0,\n                'credit_amount': 0,\n                'last_account_closing_balance': 0\n            }\n        aggregated_entries[key]['debit'] += entry['debit']\n        aggregated_entries[key]['credit'] += entry['credit']\n        aggregated_entries[key]['debit_amount'] += entry['debit_amount']\n        aggregated_entries[key]['credit_amount'] += entry['credit_amount']\n        aggregated_entries[key]['last_account_closing_balance'] = entry['last_account_closing_balance']\n    return aggregated_entries", "CodeBleu_score": 28.85703467077436}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n    if self.transaction_type == 'supplier_payment':\n        supplier_id = self.supplier_payment_id.partner_id.id\n    elif self.transaction_type == 'buying_invoice':\n        supplier_id = self.buying_invoice_id.partner_id.id\n    else:\n        return\n    supplier = self.env['res.partner'].browse(supplier_id)\n    if supplier.blocked_reason == 'supplier_payment' and self.transaction_type == 'supplier_payment':\n        if supplier.blocked_until < fields.Datetime.now():\n            raise exceptions.Warning(\n                _('The supplier %s is blocked for supplier payments.') % supplier.name)\n    elif supplier.blocked_reason == 'buying_invoice' and self.transaction_type == 'buying_invoice':\n        if supplier.blocked_until < fields.Datetime.now():\n            raise exceptions.Warning(\n                _('The supplier %s is blocked for buying invoices.') % supplier.name)\n    elif supplier.blocked_reason == 'both' and self.transaction_type in ('supplier_payment', 'buying_invoice'):\n        if supplier.blocked_until < fields.Datetime.now():\n            raise exceptions.Warning(\n                _('The supplier %s is blocked for both supplier payments and buying invoices.') % supplier.name)\n\n", "CodeBleu_score": 30.633966317754503}, {"code": "def ensure_supplier_is_not_blocked(self)\n    if self.env.context.get(\"transaction_type\") == \"supplier_payment\":\n        supplier = self.env[\"res.partner\"].browse(self.env.context.get(\"supplier_id\"))\n        if supplier.blocked_supplier_payment:\n            if supplier.blocked_supplier_payment_type == \"hold\":\n                if supplier.blocked_supplier_payment_release_date:\n                    if supplier.blocked_supplier_payment_release_date <= fields.Date.today():\n                        raise UserError(\n                            _(\"Supplier %s is blocked for supplier payment. Please contact your administrator.\")\n                            % supplier.name\n                        )\n                else:\n                    raise UserError(\n                        _(\"Supplier %s is blocked for supplier payment. Please contact your administrator.\")\n                        % supplier.name\n                    )\n            elif supplier.blocked_supplier_payment_type == \"block\":\n                raise UserError(\n                    _(\"Supplier %s is blocked for supplier payment. Please contact your administrator.\")\n                    % supplier.name\n                )\n    elif self.env.context.get(\"transaction_type\") == \"buying_invoice\":\n        supplier = self.env[\"res.partner\"].browse(self.env.context.get(\"supplier_id\"))\n        if supplier.blocked_buying_invoice:\n            if supplier.blocked_buying_invoice_type == \"hold\":\n                if supplier.blocked_buying_invoice_release_date:\n                    if supplier.blocked_buying_invoice_release_date <= fields.Date.today():\n                        raise UserError(\n                            _(\"Supplier %s is blocked for buying invoice. Please contact your administrator.\")\n                            % supplier.name\n                        )\n                else:\n                    raise UserError(\n                        _(\"Supplier %s is blocked for buying invoice. Please contact your administrator.\")\n                        % supplier.name\n                    )\n            elif supplier.blocked_buying_invoice_type == \"block\":\n                raise UserError(\n                    _(\"Supplier %s is blocked for buying invoice. Please contact your administrator.\")\n                    % supplier.name\n                )\n\n   ", "CodeBleu_score": 25.022926393665333}, {"code": "def ensure_supplier_is_not_blocked(self)\n    if self.supplier_id:\n        supplier = self.env['res.partner'].browse(self.supplier_id.id)\n        if supplier.blocked:\n            if self.transaction_type == 'payment':\n                if supplier.hold_type == 'supplier_payment':\n                    if supplier.hold_until < fields.Date.today():\n                        raise ValidationError(_('Supplier is blocked. Please contact your administrator.'))\n            elif self.transaction_type == 'buying_invoice':\n                if supplier.hold_type == 'buying_invoice':\n                    if supplier.hold_until < fields.Date.today():\n                        raise ValidationError(_('Supplier is blocked. Please contact your administrator.'))\n            else:\n                raise ValidationError(_('Supplier is blocked. Please contact your administrator.'))", "CodeBleu_score": 27.252817066187195}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = frappe.get_all(\"Repost Doctypes\", filters={\"parent\": self.name})\n    if not repost_doctypes:\n        return\n\n    parent_map = {}\n    for repost_doctype in repost_doctypes:\n        repost_doctype_name = repost_doctype.repost_doctype\n        if repost_doctype_name == self.doctype:\n            continue\n\n        rows = frappe.get_all(\n            repost_doctype_name,\n            filters={\n                \"voucher_type\": self.doctype,\n                \"voucher_no\": self.name,\n            },\n        )\n\n        if not rows:\n            continue\n\n        for row in rows:\n            if row.parenttype not in parent_map:\n                parent_map[row.parenttype] = {}\n\n            if row.parent not in parent_map[row.parenttype]:\n                parent_map[row.parenttype][row.parent] = []\n\n            parent_map[row.parenttype][row.parent].append(row)\n\n    for parent_type, parents in parent_map.items():\n        for parent, rows in parents.items():\n            parent_doc = frappe.get_doc(parent_type, parent)\n            for row in rows:\n                parent_doc.remove(row)\n\n            parent_doc.ignore_validate = True\n            parent_doc.ignore_links = True\n            parent_doc.save()\n", "CodeBleu_score": 26.388750626590618}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    for repost_doctype in repost_doctypes:\n        parent_doctype = repost_doctype.parent_doctype\n        repost_doctype_name = repost_doctype.name\n        repost_doctype_voucher_type_field = repost_doctype.voucher_type_field\n        repost_doctype_voucher_no_field = repost_doctype.voucher_no_field\n        repost_doctype_voucher_field = repost_doctype.voucher_field\n        repost_doctype_voucher_item_code_field = repost_doctype.voucher_item_code_field\n        repost_doctype_voucher_item_field = repost_doctype.voucher_item_field\n        repost_doctype_voucher_item_rate_field = repost_doctype.voucher_item_rate_field\n        repost_doctype_voucher_item_amount_field = repost_doctype.voucher_item_amount_field\n        repost_doctype_voucher_item_qty_field = repost_doctype.voucher_item_qty_field\n        repost_doctype_voucher_item_uom_field = repost_doctype.voucher_item_uom_field\n        repost_doctype_voucher_item_warehouse_field = repost_doctype.voucher_item_warehouse_field\n        repost_doctype_voucher_item_batch_no_field = repost_doctype.voucher_item_batch_no_field\n        repost_doctype_voucher_item_expiry_date_field = repost_doctype.voucher_item_expiry_date_field\n        repost_do", "CodeBleu_score": 15.68631390029552}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = frappe.get_all('Repost Doctypes', filters={'parent': self.doctype}, fields=['repost_doctype'])\n    repost_doctypes = [d.repost_doctype for d in repost_doctypes]\n    if self.doctype not in repost_doctypes:\n        return\n\n    repost_documents = frappe.db.sql(f\"\"\"\n        SELECT parenttype, parent, voucher_type, voucher_no\n        FROM `tab{self.doctype}`\n        WHERE voucher_type=%s AND voucher_no=%s\n    \"\"\", (self.voucher_type, self.voucher_no), as_dict=1)\n\n    if not repost_documents:\n        return\n\n    repost_map = {}\n    for repost_document in repost_documents:\n        if repost_document.parenttype not in repost_map:\n            repost_map[repost_document.parenttype] = {}\n        if repost_document.parent not in repost_map[repost_document.parenttype]:\n            repost_map[repost_document.parenttype][repost_document.parent] = []\n        repost_map[repost_document.parenttype][repost_document.parent].append(repost_document)\n\n    for parenttype in repost_map:\n        for parent in repost_map[parenttype]:\n            parent_doc = frappe.get_doc(parenttype, parent)\n            if parent_doc.repost_vouchers:\n                for repost_document in repost_map[parenttype][parent]:\n                    parent_doc.repost_vouchers = [\n                        v for v in parent_doc.repost_vouchers\n                        if v.voucher_type != repost_document.voucher_type or v.voucher_no != repost_document.voucher_no\n                    ]\n            if parent_doc.vouchers:\n                for repost_document in repost_map", "CodeBleu_score": 20.546656860758507}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        self.authenticate()\n        params = {\n            'startDate': start_date,\n            'endDate': end_date\n        }\n        if account_id:\n            params['accountId'] = account_id\n        transactions = []\n        has_more = True\n        offset = 0\n        while has_more:\n            params['offset'] = offset\n            response = self.client.get('/transactions', params=params)\n            response.raise_for_status()\n            data = response.json()\n            transactions.extend(data['transactions'])\n            has_more = data['hasMore']\n            offset += data['limit']\n        return transactions\n    except requests.exceptions.RequestException as e:\n        raise e\n    except Exception as e:\n        self.logger.exception(e)\n        raise e\n\n", "CodeBleu_score": 37.86971178278547}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        # Authenticate the client\n        self.client.authenticate()\n\n        # Construct the query parameters\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_id\": account_id,\n            \"page_size\": 100,\n            \"page\": 1\n        }\n\n        # Fetch the transactions\n        transactions = []\n        while True:\n            response = self.client.get_transactions(params)\n            transactions.extend(response.get(\"transactions\", []))\n            if len(transactions) >= response.get(\"total_transactions\", 0):\n                break\n            params[\"page\"] += 1\n\n        # Return the transactions\n        return transactions\n    except requests.exceptions.RequestException as e:\n        # Handle specific errors\n        if isinstance(e, requests.exceptions.HTTPError) and e.response.status_code == 401:\n            raise UnauthorizedError(\"Invalid credentials\")\n        elif isinstance(e, requests.exceptions.HTTPError) and e.response.status_code == 403:\n            raise ForbiddenError(\"Insufficient permissions\")\n        elif isinstance(e, requests.exceptions.HTTPError) and e.response.status_code == 404:\n            raise NotFoundError(\"Resource not found\")\n        else:\n            # Log any other exceptions\n            logger.error(f\"An error occurred: {e}\")\n            raise e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.47591111009531}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        # Authenticate the client\n        self.client.authenticate()\n\n        # Construct the query parameters\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date\n        }\n        if account_id:\n            params[\"account_id\"] = account_id\n\n        # Fetch the transactions from the client\n        transactions = []\n        offset = 0\n        while True:\n            response = self.client.get_transactions(params=params, offset=offset)\n            transactions.extend(response[\"transactions\"])\n            offset += len(response[\"transactions\"])\n            if len(response[\"transactions\"]) < response[\"total\"]:\n                continue\n            break\n\n        # Return the transactions\n        return transactions\n    except requests.exceptions.RequestException as e:\n        # Handle specific errors\n        if isinstance(e, requests.exceptions.HTTPError):\n            if e.response.status_code == 401:\n                raise UnauthorizedError(\"Invalid API credentials\")\n            elif e.response.status_code == 403:\n                raise ForbiddenError(\"Insufficient permissions\")\n            elif e.response.status_code == 404:\n                raise NotFoundError(\"Resource not found\")\n            elif e.response.status_code == 429:\n                raise TooManyRequestsError(\"Too many requests\")\n            elif e.response.status_code == 500:\n                raise InternalServerError(\"Internal server error\")\n            elif e.response.status_code == 503:\n                raise ServiceUnavailableError(\"Service unavailable\")\n        # Log any other exceptions\n        logger.error(f\"An error occurred while fetching transactions: {e}\")\n        raise e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.846286981206134}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n    try:\n        # Parse the response\n        institution_id = response.get(\"institution_id\")\n        name = response.get(\"name\")\n        products = response.get(\"products\")\n        country_codes = response.get(\"country_codes\")\n        primary_color = response.get(\"primary_color\")\n        logo = response.get(\"logo\")\n\n        # Retrieve the access token using the PlaidConnector\n        access_token = PlaidConnector.retrieve_access_token(token)\n\n        # Check if the bank already exists in the database\n        bank = Bank.query.filter_by(institution_id=institution_id).first()\n        if bank:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n            db.session.commit()\n            return jsonify({\"message\": \"Bank already exists\"})\n        else:\n            # Create and insert a new bank record\n            bank = Bank(\n                institution_id=institution_id,\n                name=name,\n                products=products,\n                country_codes=country_codes,\n                primary_color=primary_color,\n                logo=logo,\n                access_token=access_token,\n            )\n            db.session.add(bank)\n            db.session.commit()\n            return jsonify({\"message\": \"Bank added successfully\"})\n    except Exception as e:\n        current_app.logger.error(e)\n        return jsonify({\"message\": \"Error adding bank\"}), 500", "CodeBleu_score": 33.72234622344826}, {"code": "def add_institution(token, response)\n    try:\n        # Parse the response\n        institution_id = response['institution_id']\n        institution_name = response['institution_name']\n        institution_type = response['institution_type']\n        institution_url = response['institution_url']\n        institution_logo = response['institution_logo']\n        institution_country = response['institution_country']\n        institution_country_code = response['institution_country_code']\n\n        # Retrieve an access token using the PlaidConnector\n        access_token = PlaidConnector.get_access_token(token)\n\n        # Check if the bank already exists in the database\n        bank = Bank.objects.filter(institution_id=institution_id).first()\n        if bank:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create and insert a new bank record\n            bank = Bank(institution_id=institution_id, institution_name=institution_name, institution_type=institution_type,\n                        institution_url=institution_url, institution_logo=institution_logo, institution_country=institution_country,\n                        institution_country_code=institution_country_code, access_token=access_token)\n            bank.save()\n\n        return bank\n    except Exception as e:\n        # Log any errors that occur during the process\n        logger.error(f\"Error adding institution: {e}\")\n        return None\n\n", "CodeBleu_score": 35.693766386201055}, {"code": "def add_institution(token, response)\n    try:\n        institution = response.json()\n        access_token = PlaidConnector.get_access_token(token, institution['access_token'])\n        bank = Bank.query.filter_by(access_token=access_token).first()\n        if not bank:\n            bank = Bank(\n                name=institution['name'],\n                institution_id=institution['institution_id'],\n                access_token=access_token\n            )\n            db.session.add(bank)\n            db.session.commit()\n        else:\n            bank.access_token = access_token\n            db.session.commit()\n    except Exception as e:\n        current_app.logger.error(e)\n", "CodeBleu_score": 38.49066407704926}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n    try:\n        # Get the last integration date for the specified bank and bank account\n        last_integration_date = get_last_integration_date(bank, bank_account)\n\n        # Determine the start and end dates for the transaction retrieval\n        start_date = last_integration_date or bank_account.start_date\n        end_date = datetime.now()\n\n        # Attempt to fetch the transactions for the specified bank and bank account\n        transactions = fetch_transactions(bank, bank_account, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        new_transactions = process_transactions(transactions)\n\n        # Update the last integration date to the date of the oldest transaction\n        last_integration_date = min(t.date for t in transactions)\n        update_last_integration_date(bank, bank_account, last_integration_date)\n\n        # Log the number of new transactions added\n        logger.info(f\"Added {len(new_transactions)} new transactions for bank {bank} and bank account {bank_account}\")\n    except Exception as e:\n        # Log an error message if an exception occurs\n        logger.error(f\"Error syncing transactions for bank {bank} and bank account {bank_account}: {e}\")\n", "CodeBleu_score": 26.864337494686314}, {"code": "def sync_transactions(bank, bank_account)\n    try:\n        # Get the last integration date for the specified bank and bank account\n        last_integration_date = bank_account.last_integration_date\n\n        # Determine the start and end dates for the transaction retrieval\n        start_date = last_integration_date + timedelta(days=1) if last_integration_date else datetime.now() - timedelta(days=30)\n        end_date = datetime.now()\n\n        # Fetch the transactions from the bank API\n        transactions = bank.fetch_transactions(bank_account, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions.append(bank_account.create_bank_transaction(transaction))\n\n        # Update the last integration date to the date of the oldest transaction\n        bank_account.last_integration_date = min(transaction.date for transaction in new_transactions)\n\n        # Log the number of new transactions added\n        logger.info(f\"Synced {len(new_transactions)} transactions for bank account {bank_account.id}\")\n    except Exception as e:\n        # Log an error message if an exception occurs\n        logger.error(f\"Error syncing transactions for bank account {bank_account.id}: {e}\")", "CodeBleu_score": 28.300484841027636}, {"code": "def sync_transactions(bank, bank_account)\n    try:\n        last_integration_date = bank_account.last_integration_date\n        start_date = last_integration_date or bank.get_start_date()\n        end_date = datetime.datetime.now()\n        transactions = bank.get_transactions(bank_account, start_date, end_date)\n        for transaction in transactions:\n            BankTransaction.objects.create(\n                bank_account=bank_account,\n                date=transaction['date'],\n                amount=transaction['amount'],\n                description=transaction['description'],\n                type=transaction['type'],\n                category=transaction['category'],\n                bank=bank,\n            )\n        bank_account.last_integration_date = transactions[0]['date'] if transactions else last_integration_date\n        bank_account.save()\n        logger.info(f'Added {len(transactions)} new transactions for {bank_account.name}')\n    except Exception as e:\n        logger.error(f'Error syncing transactions for {bank_account.name}: {e}')", "CodeBleu_score": 32.2066634774425}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n    # Construct the query URI\n    query_uri = f\"{self.base_url}/v3/company/{self.realm_id}/{entity}\"\n\n    # Get the total number of entries\n    response = requests.get(query_uri, headers=self.headers)\n    if response.status_code != 200:\n        self.logger.error(f\"Failed to get {entity} count: {response.text}\")\n        return\n\n    total_entries = response.json()[\"totalCount\"]\n\n    # Calculate the number of batches\n    num_batches = (total_entries + self.batch_size - 1) // self.batch_size\n\n    # Fetch and process the entries in batches\n    for batch in range(num_batches):\n        # Construct the query URI with the start and end index\n        start_index = batch * self.batch_size\n        end_index = min((batch + 1) * self.batch_size, total_entries)\n        query_uri = f\"{query_uri}?startPosition={start_index}&maxResults={end_index - start_index}\"\n\n        # Fetch the entries\n        response = requests.get(query_uri, headers=self.headers)\n        if response.status_code != 200:\n            self.logger.error(f\"Failed to get {entity} batch {batch + 1}: {response.text}\")\n            continue\n\n        # Preprocess and save the entries\n        entries = response.json()[entity]\n        for entry in entries:\n            try:\n                self._preprocess_entry(entry, entity)\n                self._save_entry(entry, entity)\n            except Exception as e:\n                self.logger.error(f\"Failed to process {entity} entry: {e}\")\n\n    self.logger.info(f\"Migrated {total_entries} {entity} entries\")\n", "CodeBleu_score": 32.749602024136735}, {"code": "def _migrate_entries(self, entity)\n    try:\n        self.log(\"Migrating entries for {}\".format(entity))\n        query_uri = \"https://quickbooks.api.intuit.com/v3/company/{}/query?query=select * from {}\".format(self.company_id, entity)\n        query_response = self.quickbooks_client.get(query_uri)\n        if query_response.status_code == 200:\n            query_response_json = query_response.json()\n            total_entries = query_response_json.get(\"totalCount\", 0)\n            self.log(\"Total entries found for {}: {}\".format(entity, total_entries))\n            if total_entries > 0:\n                page_size = 1000\n                total_pages = (total_entries + page_size - 1) // page_size\n                for page_number in range(1, total_pages + 1):\n                    query_uri_with_page = query_uri + \"&startPosition={}&maxResults={}\".format((page_number - 1) * page_size, page_size)\n                    query_response = self.quickbooks_client.get(query_uri_with_page)\n                    if query_response.status_code == 200:\n                        query_response_json = query_response.json()\n                        entries = query_response_json.get(\"QueryResponse\", {}).get(\"Customer\", [])\n                        for entry in entries:\n                            self.log(\"Preprocessing entry: {}\".format(entry))\n                            self.preprocess_entry(entry)\n                            self.log(\"Saving entry: {}\".format(entry))\n                            self.save_entry(entry)\n                    else:\n                        self.log(\"Error fetching entries: {}\".format(query_response.text))\n            else:\n                self.log(\"No entries found for {}\".format(entity))\n        else:\n            self.log(\"Error fetching entries: {}\".format(query_response.text))\n    except Exception as e:\n        self.log(\"Error migrating entries for {}: {}\".format(entity, str(e)))\n\n", "CodeBleu_score": 31.696165351112843}, {"code": "def _migrate_entries(self, entity)\n    try:\n        # Construct the query URI\n        query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/query?query=select * from {entity}\"\n\n        # Send the query request and retrieve the response\n        response = self.session.get(query_uri)\n\n        # Check if the response is successful\n        if response.status_code == 200:\n            # Get the total number of entries\n            total_entries = response.json()[\"totalCount\"]\n\n            # Calculate the number of batches\n            num_batches = (total_entries + 999) // 1000\n\n            # Loop through the batches\n            for i in range(num_batches):\n                # Construct the query URI with the offset and limit parameters\n                offset = i * 1000\n                limit = 1000\n                query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/query?query=select * from {entity} offset {offset} limit {limit}\"\n\n                # Send the query request and retrieve the response\n                response = self.session.get(query_uri)\n\n                # Check if the response is successful\n                if response.status_code == 200:\n                    # Get the entries from the response\n                    entries = response.json()[\"QueryResponse\"][\"entries\"]\n\n                    # Preprocess and save the entries\n                    self.preprocess_and_save_entries(entries, entity)\n                else:\n                    # Log the error and response text\n                    error_message = f\"Failed to retrieve entries for {entity} from QuickBooks: {response.text}\"\n                    self.logger.error(error_message)\n        else:\n            # Log the error and response text\n            error_message = f\"Failed to retrieve entries for {entity} from QuickBooks: {response.text}\"\n            self.logger.error(error_message)\n    except Exception as e:\n        # Log the exception\n        self.logger.exception(f\"Error migrating entries for {entity} from QuickBooks: {e}\")\n", "CodeBleu_score": 33.42130201859843}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n    if invoice.type == 'out_invoice':\n        if invoice.statement_ids:\n            self._save_journal_entry(invoice)\n        else:\n            self._save_sales_invoice(invoice)\n    elif invoice.type == 'in_invoice':\n        if invoice.statement_ids:\n            self._save_journal_entry(invoice)\n        else:\n            self._save_purchase_invoice(invoice)\n    elif invoice.type == 'out_refund':\n        if invoice.statement_ids:\n            self._save_journal_entry(invoice)\n        else:\n            self._save_sales_refund(invoice)\n    elif invoice.type == 'in_refund':\n        if invoice.statement_ids:\n            self._save_journal_entry(invoice)\n        else:\n            self._save_purchase_refund(invoice)\n", "CodeBleu_score": 19.881270834345617}, {"code": "def _save_invoice(self, invoice)\n    if invoice.type == 'out_invoice':\n        if invoice.journal_id.quickbooks_id:\n            invoice.quickbooks_id = self._generate_quickbooks_id(invoice.journal_id.quickbooks_id, invoice.name)\n        else:\n            invoice.quickbooks_id = self._generate_quickbooks_id(invoice.journal_id.quickbooks_id, invoice.name)\n        invoice.quickbooks_sync_token = self._generate_quickbooks_sync_token()\n        if invoice.transaction_ids:\n            linked_transactions = invoice.transaction_ids.filtered(lambda t: t.type == 'statement_charge' or t.type == 'reimburse_charge')\n            if linked_transactions:\n                invoice.is_journal_entry = True\n                invoice.journal_id.quickbooks_id = self._generate_quickbooks_id(invoice.journal_id.quickbooks_id, invoice.name)\n                invoice.journal_id.quickbooks_sync_token = self._generate_quickbooks_sync_token()\n                invoice.journal_id.quickbooks_sync_date = fields.Datetime.now()\n                invoice.journal_id.quickbooks_invoice_id = invoice.quickbooks_id\n                invoice.journal_id.quickbooks_invoice_sync_token = invoice.quickbooks_sync_token\n                invoice.journal_id.quickbooks_invoice_sync_date = fields.Datetime.now()\n                invoice.journal_id.quickbooks_invoice_type = invoice.type\n                invoice.journal_id.quickbooks_invoice_date = invoice.date_invoice\n                invoice.journal_id.quickbooks_invoice_amount = invoice.amount_total\n                invoice.journal_id.quickbooks_invoice_currency = invoice.currency_id.name\n                invoice.journal_id.quickbooks_invoice_payment_term = invoice.payment_term_id.name\n                invoice", "CodeBleu_score": 28.390929560406285}, {"code": "def _save_invoice(self, invoice)\n    invoice_type = invoice.get('type')\n    if invoice_type == 'StatementCharge':\n        self._save_journal_entry(invoice)\n    elif invoice_type == 'ReimburseCharge':\n        self._save_journal_entry(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n", "CodeBleu_score": 25.487707322716595}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    # Calculate the interval between visits\n    interval = (end_date - start_date) / no_of_visit\n    # Create an empty list to store the schedule\n    schedule = []\n    # Iterate through the number of visits\n    for i in range(no_of_visit):\n        # Calculate the next scheduled date\n        next_date = start_date + i * interval\n        # Check if the next date is a holiday\n        while next_date.weekday() in self.holidays:\n            # Adjust the next date to the next business day\n            next_date += datetime.timedelta(days=1)\n        # Append the next date to the schedule\n        schedule.append(next_date)\n    # Return the schedule list\n    return schedule\n\n", "CodeBleu_score": 20.27457440500188}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days // no_of_visit\n\n    # Initialize an empty list to store the schedule dates\n    schedule_list = []\n\n    # Iterate through the number of visits\n    for i in range(no_of_visit):\n        # Calculate the schedule date for this visit\n        schedule_date = start_date + timedelta(days=i * interval)\n\n        # Adjust the schedule date to avoid holidays\n        schedule_date = self.adjust_schedule_date(schedule_date, sales_person)\n\n        # Add the schedule date to the list\n        schedule_list.append(schedule_date)\n\n    # Return the list of schedule dates\n    return schedule_list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 22.56110028565589}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date) / no_of_visit\n\n    # Initialize an empty list to store the schedule dates\n    schedule_list = []\n\n    # Iterate through the number of visits\n    for i in range(no_of_visit):\n        # Calculate the next visit date\n        next_visit_date = start_date + (i * interval)\n\n        # Check if the next visit date is a holiday\n        if next_visit_date.weekday() in [5, 6]:\n            # If the next visit date is a holiday, find the next business day\n            next_visit_date = next_visit_date + timedelta(days=1)\n            while next_visit_date.weekday() in [5, 6]:\n                next_visit_date = next_visit_date + timedelta(days=1)\n\n        # Add the next visit date to the schedule list\n        schedule_list.append(next_visit_date)\n\n    # Return the schedule list\n    return schedule_list", "CodeBleu_score": 26.303629666956258}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = [])        $method = request()->method();\n        $url = route($view . '.bulk.action', ['handle' => '']);\n        $title = __('messages.bulk_action');\n        $path = 'bulk_action/' . $view;\n        $handle = 'bulk_action_' . $view;\n        $html = view($view . '.bulk_action', $data)->render();\n\n        return response()->json([\n            'success' => true,\n            'message' => __('messages.bulk_action_success'),\n            'data' => [\n                'title' => $title,\n                'path' => $path,\n                'handle' => $handle,\n                'html' => $html,\n            ],\n        ]);\n    }\n\n    /**\n     * This function returns a response with a success status, message, and data. The data includes the title, path, handle, and rendered HTML for the specified view and data.\n     */\n    public function response($view, $data = []) {\n        $method = request()->method();\n        $url = route($view . '.bulk.action', ['handle' => '']);\n        $title = __('messages.bulk_action');\n        $path = 'bulk_action/' . $view;\n        $handle = 'bulk_action_' . $view;\n        $html = view($view . '.bulk_action', $data)->render();\n\n        return response()->json([\n            'success' => true,\n            'message' => __('messages.bulk_action_success'),\n            'data' => [\n                'title' => $title,\n                'path' => $path,\n                'handle' => $handle,\n                'html' => $html,\n            ],\n        ]);\n    }\n\n    /**\n     * This function returns a response with a success status, message, and data. The data includes the title, path, handle, and rendered HTML for the specified view and data.\n     */\n    public function response($view, $data = []) {\n        $method = request()->method();\n        $url = route($view . '.bulk.action', ['handle' => '']);\n        $title = __('messages.bul", "CodeBleu_score": 40.66687347204866}, {"code": "<?\n   public function response($view, $data = [])        // Determine the method to handle the request\n        $method = request()->method();\n\n        // Construct the URL for bulk actions\n        $bulk_actions_url = route('bulk-actions', ['method' => $method]);\n\n        // Render the HTML content for the modal using the specified view and data\n        $modal_html = view($view, $data)->render();\n\n        // Return the response as JSON\n        return response()->json([\n            'success' => true,\n            'message' => 'Bulk actions processed successfully',\n            'data' => [\n                'title' => 'Bulk Actions',\n                'path' => $bulk_actions_url,\n                'handle' => $method,\n                'html' => $modal_html\n            ]\n        ]);\n    }\n", "CodeBleu_score": 40.316504667822365}, {"code": "<?\n   public function response($view, $data = [])        return response()->json([\n            'success' => true,\n            'message' => 'Bulk Action',\n            'data' => [\n                'title' => 'Bulk Action',\n                'path' => route('admin.bulk-action.index'),\n                'handle' => 'bulk-action',\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\n    }\n", "CodeBleu_score": 29.249407762423342}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request)    $selectedContacts = $request->get('contacts');\n\n    if (!$selectedContacts) {\n        return redirect()->back()->with('error', 'No contacts selected.');\n    }\n\n    try {\n        foreach ($selectedContacts as $contact) {\n            $this->dispatch(new DeleteContact($contact));\n        }\n\n        return redirect()->back()->with('success', 'Contacts deleted successfully.');\n    } catch (Exception $e) {\n        return redirect()->back()->with('error', 'Error deleting contacts: ' . $e->getMessage());\n    }\n}\n", "CodeBleu_score": 43.32754238483001}, {"code": "<?\npublic function deleteContacts($request)    // Get the selected contacts\n    $selectedContacts = $request->input('selectedContacts');\n\n    // Loop through the selected contacts and dispatch a delete operation for each one\n    foreach ($selectedContacts as $contactId) {\n        try {\n            // Dispatch the delete operation\n            dispatch(new DeleteContact($contactId));\n        } catch (Exception $e) {\n            // Display an error message\n            return response()->json(['error' => 'Failed to delete contact: ' . $e->getMessage()], 500);\n        }\n    }\n\n    // Return a success message\n    return response()->json(['success' => 'Contacts deleted successfully'], 200);\n}\n", "CodeBleu_score": 39.10352139534676}, {"code": "<?\npublic function deleteContacts($request)  $selectedContacts = $request->input('selected_contacts');\n  if (empty($selectedContacts)) {\n    return response()->json(['error' => 'No contacts selected']);\n  }\n\n  foreach ($selectedContacts as $contactId) {\n    try {\n      Contact::findOrFail($contactId)->delete();\n    } catch (Exception $e) {\n      return response()->json(['error' => 'Error deleting contact: ' . $e->getMessage()]);\n    }\n  }\n\n  return response()->json(['success' => 'Contacts deleted successfully']);\n}\n", "CodeBleu_score": 35.04626757516738}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request)    try {\n        $transactions = Transaction::whereIn('id', $request->get('transactions'))->get();\n        foreach ($transactions as $transaction) {\n            dispatch(new DeleteTransactionJob($transaction));\n        }\n        flash()->success('Transactions deleted successfully');\n    } catch (\\Exception $e) {\n        flash()->error('An error occurred while deleting transactions');\n    }\n}\n", "CodeBleu_score": 54.99084377534464}, {"code": "<?\npublic function deleteTransactions($request)    try {\n        $transactions = Transaction::find($request->transactions);\n\n        foreach ($transactions as $transaction) {\n            dispatch(new DeleteTransaction($transaction));\n        }\n\n        flash()->success(__('Transactions deleted successfully.'));\n    } catch (\\Exception $e) {\n        flash()->error(__('Error deleting transactions.'));\n    }\n}\n", "CodeBleu_score": 54.825045348046096}, {"code": "<?\npublic function deleteTransactions($request)    $transactions = Transaction::whereIn('id', $request->transactions)->get();\n    foreach ($transactions as $transaction) {\n        try {\n            dispatch(new DeleteTransactionJob($transaction));\n        } catch (Exception $e) {\n            flash()->error('Error deleting transaction: ' . $e->getMessage());\n        }\n    }\n}\n", "CodeBleu_score": 56.081639268036}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator)    $requestClass = get_class($this);\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    $data = $this->all();\n\n    foreach ($data as $key => $value) {\n        $request = new $requestClass($this->all(), [], $this->route()->parameters());\n        $request->setMethod($this->method());\n        $request->setUserResolver($this->getUserResolver());\n        $request->setRouteResolver($this->getRouteResolver());\n\n        $request->prepareForValidation();\n        $request->setValidator($validator);\n\n        try {\n            $request->validateResolved();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n            throw $e;\n        }\n    }\n}\n", "CodeBleu_score": 45.09787463126783}, {"code": "<?\npublic function withValidator($validator)    $requestClass = get_class($this);\n    if (class_exists($requestClass) && is_subclass_of($requestClass, FormRequest::class)) {\n        $request = new $requestClass();\n        foreach ($this->all() as $key => $value) {\n            $request->merge([$key => $value]);\n        }\n        $request->setContainer($this->container)->setRedirector($this->redirector);\n        $rules = $request->rules();\n        $validator->setRules($rules);\n        $validator->setCustomMessages($request->messages());\n        if (!$validator->passes()) {\n            $validator->errors()->add('validation', $validator->errors()->all());\n            throw new ValidationException($validator);\n        }\n    }\n}\n", "CodeBleu_score": 39.56201843944074}, {"code": "<?\npublic function withValidator($validator)    $requestClass = get_class($this);\n    if (is_subclass_of($requestClass, FormRequest::class) && !$this->is('json')) {\n        $request = new $requestClass;\n        foreach ($this->all() as $key => $value) {\n            $request->merge([$key => $value]);\n        }\n        $request->prepareForValidation();\n        $request->validateResolved();\n        $validator->merge($request->validator->errors());\n    }\n}\n", "CodeBleu_score": 22.982005782832367}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void    if ($this->instance instanceof ShouldUpdate) {\n        $this->instance->bootUpdate(...$arguments);\n    }\n}\n", "CodeBleu_score": 14.550974544657386}, {"code": "<?\npublic function bootUpdate(...$arguments): void    if ($this->model instanceof Model && $this->request instanceof Request) {\n        $this->model->update($this->request->all());\n    }\n}\n", "CodeBleu_score": 17.361068217389864}, {"code": "<?\npublic function bootUpdate(...$arguments): void    if ($this->shouldUpdate(...$arguments)) {\n        $this->update(...$arguments);\n    }\n}", "CodeBleu_score": 11.075530913259652}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name')    $request = request();\n    $sort = $request->sort ?? $sort;\n    $query->orderBy($sort);\n    if ($request->search) {\n        $query->where('name', 'like', '%' . $request->search . '%');\n    }\n    if ($request->expectsJson() && !$request->is('api/*')) {\n        return $query->get();\n    }\n    return $query->paginate($request->limit ?? 10);\n}\n", "CodeBleu_score": 46.242463243138566}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')\n    // Get the sorting parameter from the request.\n    $sort = $this->request->get('sort', $sort);\n\n    // Apply search and sorting to the query.\n    $query = $query->search()->orderBy($sort);\n\n    // Check if the request expects a JSON response and is not an API request.\n    if ($this->request->expectsJson() && !$this->request->is('api/*')) {\n        // Return all records.\n        return $query->get();\n    }\n\n    // Paginate the results based on a limit from the request or a default setting.\n    return $query->paginate($this->request->get('limit', 10));\n}\n", "CodeBleu_score": 45.624558662264484}, {"code": "<?\n public function scopeCollect($query, $sort = 'name')    // Get the sorting parameter from the request\n    $sort = request()->input('sort', $sort);\n\n    // Apply sorting to the query\n    $query->orderBy($sort);\n\n    // Check if the request expects a JSON response and is not an API request\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        // Return all records\n        return $query->get();\n    }\n\n    // Get the limit from the request\n    $limit = request()->input('limit', 10);\n\n    // Paginate the results based on the limit\n    return $query->paginate($limit);\n}\n", "CodeBleu_score": 44.174699765127684}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model)    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->status == 'partial') {\n        $openAmount = $model->transactions->sum('amount');\n    }\n\n    $dueDate = new Carbon($model->due_date);\n    $now = Carbon::now();\n\n    if ($now->gt($dueDate)) {\n        $overdueAmount = $model->amount - $openAmount;\n    } else {\n        $openAmount = $model->amount - $openAmount;\n    }\n\n    return [$openAmount, $overdueAmount];\n}\n", "CodeBleu_score": 48.44332765205412}, {"code": "<?\npublic function calculateDocumentTotals($model)    $openAmount = $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->status == 'partial') {\n        $openAmount = $overdueAmount = DB::table('transactions')\n            ->where('document_id', $model->id)\n            ->where('status', 'paid')\n            ->sum('amount');\n    }\n\n    if ($model->due_date < Carbon::now()) {\n        $overdueAmount = $model->amount - $openAmount;\n    } else {\n        $openAmount = $model->amount - $overdueAmount;\n    }\n\n    return [$openAmount, $overdueAmount];\n}\n", "CodeBleu_score": 51.50707708826956}, {"code": "<?\npublic function calculateDocumentTotals($model)    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->status == 'partial') {\n        $payments = $model->transactions()->where('type', 'payment')->get();\n        foreach ($payments as $payment) {\n            $openAmount += $payment->amount;\n        }\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->due_date != null) {\n        $today = Carbon::now();\n        if ($model->due_date < $today) {\n            $overdueAmount = $model->total;\n        } else {\n            $openAmount = $model->total;\n        }\n    }\n\n    return [$openAmount, $overdueAmount];\n}\n", "CodeBleu_score": 50.74257901420809}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}\n", "CodeBleu_score": 85.28937649864517}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->toBase()->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}\n", "CodeBleu_score": 85.28937649864517}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->toBase()->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}\n", "CodeBleu_score": 85.28937649864517}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request)    /**\n     * Retrieve the reconciliations from the request.\n     */\n    $reconciliations = $request->get('reconciliations');\n\n    /**\n     * Start a database transaction.\n     */\n    DB::beginTransaction();\n\n    /**\n     * Loop through each reconciliation and process it.\n     */\n    foreach ($reconciliations as $reconciliation) {\n        /**\n         * Retrieve the reconciliation from the database.\n         */\n        $reconciliation = Reconciliation::find($reconciliation['id']);\n\n        /**\n         * Set the reconciliation's status to reconciled.\n         */\n        $reconciliation->status = 'reconciled';\n\n        /**\n         * Save the reconciliation.\n         */\n        $reconciliation->save();\n\n        /**\n         * Retrieve the transactions within the reconciliation's date range and account ID.\n         */\n        $transactions = Transaction::where('date', '>=', $reconciliation->start_date)\n            ->where('date', '<=', $reconciliation->end_date)\n            ->where('account_id', $reconciliation->account_id)\n            ->get();\n\n        /**\n         * Loop through each transaction and mark it as reconciled.\n         */\n        foreach ($transactions as $transaction) {\n            $transaction->reconciled = true;\n            $transaction->save();\n        }\n    }\n\n    /**\n     * Commit the database transaction.\n     */\n    DB::commit();\n}\n", "CodeBleu_score": 38.242577208862116}, {"code": "<?\npublic function reconcile($request)    /**\n     * Retrieve the reconciliations based on the provided request.\n     */\n    $reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\n    /**\n     * Start a database transaction.\n     */\n    DB::beginTransaction();\n\n    try {\n        /**\n         * Loop through each reconciliation.\n         */\n        foreach ($reconciliations as $reconciliation) {\n            /**\n             * Set the reconciliation's status to reconciled.\n             */\n            $reconciliation->status = 'reconciled';\n\n            /**\n             * Save the reconciliation.\n             */\n            $reconciliation->save();\n\n            /**\n             * Retrieve all transactions within the reconciliation's date range and account ID.\n             */\n            $transactions = Transaction::where('date', '>=', $reconciliation->start_date)\n                ->where('date', '<=', $reconciliation->end_date)\n                ->where('account_id', $reconciliation->account_id)\n                ->get();\n\n            /**\n             * Loop through each transaction and mark it as reconciled.\n             */\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        }\n\n        /**\n         * Commit the database transaction.\n         */\n        DB::commit();\n\n        /**\n         * Return a success response.\n         */\n        return response()->json([\n            'message' => 'Reconciliations reconciled successfully.',\n        ]);\n    } catch (Exception $e) {\n        /**\n         * Rollback the database transaction if an exception is caught.\n         */\n        DB::rollback();\n\n        /**\n         * Return an error response.\n         */\n        return response()->json([\n            'error' => 'An error occurred while reconciling the reconciliations.',\n        ], 500);\n    }\n}\n", "CodeBleu_score": 36.13385002177549}, {"code": "<?\npublic function reconcile($request)    /**\n     * Retrieve the reconciliations from the database based on the provided request.\n     */\n    $reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\n    /**\n     * Start a database transaction to ensure all changes are rolled back if any error occurs.\n     */\n    DB::beginTransaction();\n\n    /**\n     * Loop through each reconciliation and process it within the transaction.\n     */\n    foreach ($reconciliations as $reconciliation) {\n        /**\n         * Set the reconciliation's status to reconciled.\n         */\n        $reconciliation->status = 'reconciled';\n\n        /**\n         * Save the reconciliation.\n         */\n        $reconciliation->save();\n\n        /**\n         * Retrieve all transactions within the reconciliation's date range and account ID.\n         */\n        $transactions = Transaction::where('account_id', $reconciliation->account_id)\n            ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n            ->get();\n\n        /**\n         * Loop through each transaction and mark it as reconciled.\n         */\n        foreach ($transactions as $transaction) {\n            $transaction->reconciled = true;\n            $transaction->save();\n        }\n    }\n\n    /**\n     * Commit the transaction if all changes were successful.\n     */\n    DB::commit();\n\n    /**\n     * Redirect the user back to the previous page with a success message.\n     */\n    return redirect()->back()->with('success', 'Reconciliations successfully reconciled.');\n}\n", "CodeBleu_score": 42.100705546090374}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation    $user = $this->user;\n    $user->invitations()->delete();\n\n    $invitation = $user->invitations()->create([\n        'token' => Str::random(32),\n    ]);\n\n    try {\n        Notification::send($user, new InvitationCreated($invitation));\n    } catch (Exception $e) {\n        throw new Exception('Failed to send invitation notification.');\n    }\n\n    return $invitation;\n}\n", "CodeBleu_score": 23.496364175230152}, {"code": "<?\npublic function handle(): UserInvitation    $this->user->invitations()->delete();\n\n    DB::beginTransaction();\n\n    try {\n        $invitation = $this->user->invitations()->create([\n            'token' => Str::random(32),\n        ]);\n\n        Notification::send($this->user, new UserInvitationNotification($invitation));\n\n        DB::commit();\n    } catch (\\Exception $e) {\n        DB::rollBack();\n\n        throw new \\Exception('Failed to send invitation notification.');\n    }\n\n    return $invitation;\n}\n", "CodeBleu_score": 27.24621884245385}, {"code": "<?\npublic function handle(): UserInvitation    $user = auth()->user();\n    $invitations = $user->invitations()->get();\n    if ($invitations->count() > 0) {\n        $invitations->each(function ($invitation) {\n            $invitation->delete();\n        });\n    }\n    $invitation = UserInvitation::create([\n        'user_id' => $user->id,\n        'token' => Str::random(32),\n    ]);\n    try {\n        Notification::send($user, new UserInvitationNotification($invitation));\n    } catch (\\Throwable $th) {\n        throw new \\Exception('Failed to send notification');\n    }\n    return $invitation;\n}\n", "CodeBleu_score": 37.3515429893076}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void    if ($this->isReconciled()) {\n        throw new Exception(\"Transaction has already been reconciled\");\n    }\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException(\"Transfer transactions are not authorized\");\n    }\n}", "CodeBleu_score": 23.953190541129015}, {"code": "<?\npublic function authorize(): void    if ($this->isReconciled()) {\n        throw new Exception('Transaction has been reconciled');\n    }\n\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException('Transfer transactions are not authorized');\n    }\n}", "CodeBleu_score": 27.834654308662355}, {"code": "<?\npublic function authorize(): void    if ($this->isReconciled()) {\n        throw new Exception('This transaction has been reconciled.');\n    }\n\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException('This transaction is a transfer.');\n    }\n}", "CodeBleu_score": 27.552923432776822}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName)    if (tenantId == 0) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_config\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_config_audit_diff_history\")) {\n        return true;\n    }\n    if (", "CodeBleu_score": 17.656333477476156}, {"code": "public boolean doTableFilter(String tableName)    if (tenantId == 0) {\n        return false;\n    }\n    if (tableName.equals(\"user\") || tableName.equals(\"user_role\") || tableName.equals(\"role\") || tableName.equals(\"role_permission\") || tableName.equals(\"permission\")) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 17.08807748369433}, {"code": "public boolean doTableFilter(String tableName)    if (tenantId != 0) {\n        return predefinedTables.contains(tableName);\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 7.78171197085626}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 69.75413413481412}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 69.75413413481412}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 69.5448423425499}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception    String result = null;\n    try {\n        AccountService accountService = (AccountService) request.getAttribute(\"accountService\");\n        List<Account> accounts = accountService.findAll();\n        List<AccountDto> accountDtos = new ArrayList<AccountDto>();\n        for (Account account : accounts) {\n            AccountDto accountDto = new AccountDto();\n            accountDto.setId(account.getId());\n            accountDto.setName(account.getName());\n            accountDtos.add(accountDto);\n        }\n        result = JsonUtil.toJson(accountDtos);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        result = JsonUtil.toJson(new Result(false, e.getMessage()));\n    }\n    return result;\n}", "CodeBleu_score": 42.70252667430776}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception    try {\n        List<Account> accountList = accountService.findBySelect(request);\n        List<Map<String, Object>> accountMapList = new ArrayList<>();\n        for (Account account : accountList) {\n            Map<String, Object> accountMap = new HashMap<>();\n            accountMap.put(\"id\", account.getId());\n            accountMap.put(\"name\", account.getName());\n            accountMapList.add(accountMap);\n        }\n        return JSON.toJSONString(accountMapList);\n    } catch (Exception e) {\n        log.error(\"\u67e5\u8be2\u8d26\u6237\u4fe1\u606f\u5931\u8d25\", e);\n        return \"{\\\"success\\\":false,\\\"message\\\":\\\"\u67e5\u8be2\u8d26\u6237\u4fe1\u606f\u5931\u8d25\\\"}\";\n    }\n}", "CodeBleu_score": 38.159913732800064}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception    try {\n        List<Account> accounts = accountService.findAll();\n        List<Map<String, Object>> accountList = new ArrayList<Map<String, Object>>();\n        for (Account account : accounts) {\n            Map<String, Object> accountMap = new HashMap<String, Object>();\n            accountMap.put(\"id\", account.getId());\n            accountMap.put(\"name\", account.getName());\n            accountList.add(accountMap);\n        }\n        return JsonUtil.toJson(accountList);\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        return JsonUtil.toJson(new Response(false, e.getMessage()));\n    }\n}", "CodeBleu_score": 37.7436883858439}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<AccountInfo> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        int count = accountService.countWithBalance(name, serialNo);\n        response.setData(accountList);\n        response.setTotal(count);\n        response.setCode(ResponseCode.SUCCESS);\n        response.setMsg(ResponseCode.SUCCESS_MSG);\n    } catch (Exception e) {\n        logger.error(\"listWithBalance error:\", e);\n        response.setCode(ResponseCode.FAIL);\n        response.setMsg(ResponseCode.FAIL_MSG);\n    }\n    return response;\n}", "CodeBleu_score": 42.82483651928442}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setResult(accountService.listWithBalance(name, serialNo, currentPage, pageSize));\n        response.setTotal(accountService.countWithBalance(name, serialNo));\n        response.setCode(ResponseCode.SUCCESS);\n        response.setMessage(ResponseMessage.SUCCESS);\n    } catch (Exception e) {\n        log.error(\"listWithBalance error:\", e);\n        response.setCode(ResponseCode.FAIL);\n        response.setMessage(ResponseMessage.FAIL);\n    }\n    return response;\n}", "CodeBleu_score": 35.45786565288226}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n            int count = accountService.countWithBalance(name, serialNo);\n            response.setData(new PageInfo<>(accounts, count));\n        } catch (Exception e) {\n            log.error(\"listWithBalance error:\", e);\n            response.setCode(ResponseCode.FAIL);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 40.456217339673685}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Map<String, Object> data = accountService.getStatistics(name, serialNo);\n        response.setCode(200);\n        response.setData(data);\n    } catch (Exception e) {\n        log.error(\"getStatistics error:\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 47.54867058086427}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.179465777321326}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        StatisticsResponse statisticsResponse = accountService.getStatistics(name, serialNo);\n        response.setCode(200);\n        response.setData(statisticsResponse);\n    } catch (Exception e) {\n        log.error(\"getStatistics error:\", e);\n        response.setCode(500);\n        response.setMsg(\"error\");\n    }\n    return response;\n}", "CodeBleu_score": 41.813049357900326}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception        BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n        try {\n            AccountHeadResponseInfo accountHeadResponseInfo = accountHeadService.getDetailByNumber(billNo);\n            if (accountHeadResponseInfo != null) {\n                baseResponseInfo.setResponseCode(200);\n                baseResponseInfo.setResponseMessage(\"Success\");\n                baseResponseInfo.setResponseData(accountHeadResponseInfo);\n            }\n        } catch (Exception e) {\n            log.error(\"getDetailByNumber error:{}\", e.getMessage());\n            baseResponseInfo.setResponseCode(500);\n            baseResponseInfo.setResponseMessage(\"getDetailByNumber error\");\n        }\n        return baseResponseInfo;\n    }", "CodeBleu_score": 32.5456865339547}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<BillDetailInfo> billDetailInfoList = accountHeadService.getDetailByNumber(billNo);\n        if (billDetailInfoList.size() > 0) {\n            response.setData(billDetailInfoList.get(0));\n            response.setCode(200);\n            response.setMessage(\"success\");\n        } else {\n            response.setCode(404);\n            response.setMessage(\"no data\");\n        }\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(\"error\");\n    }\n    return response;\n}", "CodeBleu_score": 39.27397297428299}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<BillDetailInfo> list = accountHeadService.getDetailByNumber(billNo);\n        if (list.size() > 0) {\n            response.setStatus(200);\n            response.setMessage(\"\u67e5\u8be2\u6210\u529f\");\n            response.setData(list.get(0));\n        } else {\n            response.setStatus(200);\n            response.setMessage(\"\u67e5\u8be2\u6210\u529f\");\n            response.setData(null);\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        response.setStatus(500);\n        response.setMessage(\"\u67e5\u8be2\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 38.394516451953656}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        String userId = (String) request.getAttribute(\"userId\");\n        response.setData(depotService.findDepotByUserId(userId));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(\"findDepotByCurrentUser error:\", e);\n        response.setCode(500);\n        response.setMessage(\"error\");\n    }\n    return response;\n}", "CodeBleu_score": 40.963263171368105}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(depotService.findDepotByCurrentUser(request));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(\"findDepotByCurrentUser error\", e);\n        response.setCode(500);\n        response.setMessage(\"findDepotByCurrentUser error\");\n    }\n    return response;\n}", "CodeBleu_score": 37.97091957215827}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        String userId = request.getParameter(\"userId\");\n        if (StringUtils.isBlank(userId)) {\n            response.setCode(1);\n            response.setMsg(\"userId is null\");\n            return response;\n        }\n        List<DepotInfo> depotInfos = depotService.findDepotByCurrentUser(userId);\n        response.setCode(0);\n        response.setMsg(\"success\");\n        response.setData(depotInfos);\n        return response;\n    } catch (Exception e) {\n        log.error(\"findDepotByCurrentUser error:\", e);\n        response.setCode(500);\n        response.setMsg(\"\u7cfb\u7edf\u5f02\u5e38\");\n        return response;\n    }\n}", "CodeBleu_score": 36.53441819396951}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    try {\n        List<Function> functions = functionService.findRoleFunction(type, keyId);\n        if (functions != null && functions.size() > 0) {\n            if (type.equals(\"0\")) {\n                functions = functions.stream().filter(function -> !function.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")).collect(Collectors.toList());\n            }\n            jsonObject.put(\"functions\", functions);\n        }\n        jsonArray.add(jsonObject);\n    } catch (Exception e) {\n        log.error(\"findRoleFunction error:\", e);\n    }\n    return jsonArray;\n}", "CodeBleu_score": 31.928782731659446}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray roleFunction = new JSONArray();\n    JSONObject roleFunctionList = new JSONObject();\n    JSONArray roleFunctionArray = new JSONArray();\n    try {\n        roleFunctionList.put(\"roleFunction\", roleFunctionArray);\n        List<Function> functionList = functionService.findRoleFunction(type, keyId);\n        if (functionList.size() > 0) {\n            for (Function function : functionList) {\n                JSONObject functionJson = new JSONObject();\n                functionJson.put(\"functionId\", function.getFunctionId());\n                functionJson.put(\"functionName\", function.getFunctionName());\n                functionJson.put(\"functionUrl\", function.getFunctionUrl());\n                functionJson.put(\"functionType\", function.getFunctionType());\n                functionJson.put(\"functionIcon\", function.getFunctionIcon());\n                functionJson.put(\"functionSort\", function.getFunctionSort());\n                functionJson.put(\"functionParentId\", function.getFunctionParentId());\n                functionJson.put(\"functionParentName\", function.getFunctionParentName());\n                functionJson.put(\"functionStatus\", function.getFunctionStatus());\n                functionJson.put(\"functionRemark\", function.getFunctionRemark());\n                if (request.getHeader(\"tenantId\") != null) {\n                    if (!request.getHeader(\"tenantId\").equals(\"1\")) {\n                        if (function.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                            continue;\n                        }\n                    }\n                }\n                roleFunctionArray.add(functionJson);\n            }\n        }\n        roleFunction.add(roleFunctionList);\n        return roleFunction;\n    } catch (Exception e) {\n        log.error(\"findRoleFunction error:\", e);\n        throw e;\n    }\n}", "CodeBleu_score": 41.04763448654703}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception    JSONArray jsonArray = new JSONArray();\n    List<Function> functions = functionService.findAll();\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functions\", functions);\n    if (!request.getHeader(\"token\").equals(\"admin\")) {\n        jsonObject.put(\"functions\", functions.stream().filter(function -> function.getTenantId().equals(request.getHeader(\"tenantId\"))).collect(Collectors.toList()));\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 23.071781190256488}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception     BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n    } catch (Exception e) {\n        log.error(\"getInfoByKey error\", e);\n        response.setCode(500);\n        response.setMessage(\"getInfoByKey error\");\n    }\n    return response;\n}", "CodeBleu_score": 39.60746658747246}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception     BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n    } catch (Exception e) {\n        log.error(\"get platform config info by key error:\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.48351062768554}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception         BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            response.setCode(200);\n            response.setData(platformConfigService.getInfoByKey(platformKey));\n        } catch (Exception e) {\n            log.error(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\uff01\", e);\n            response.setCode(500);\n            response.setMessage(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\uff01\");\n        }\n        return response;\n    }", "CodeBleu_score": 39.284314682663975}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        }\n    } catch (Exception e) {\n        log.error(\"getCurrentInfo error:\", e);\n        response.setCode(500);\n        response.setData(\"getCurrentInfo error\");\n    }\n    return response;\n}", "CodeBleu_score": 37.28219601886111}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getList(null);\n        if (list != null && list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo error\", e);\n        response.setCode(500);\n        response.setMsg(\"error\");\n    }\n    return response;\n}", "CodeBleu_score": 38.98469974381935}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfigInfo> list = systemConfigService.getSystemConfigList();\n        if (list != null && list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        } else {\n            response.setCode(500);\n            response.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n        }\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo error\", e);\n        response.setCode(500);\n        response.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 36.83567028227963}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = request.getFile(\"file\");\n        String fileName = file.getOriginalFilename();\n        String fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n        String filePath = file.getOriginalFilename();\n        String fileUrl = \"\";\n        if (fileType.equals(\"pdf\")) {\n            filePath = businessPath + \"/\" + fileName;\n            fileUrl = filePath;\n        } else {\n            filePath = businessPath + \"/\" + fileName;\n            fileUrl = filePath;\n        }\n        InputStream inputStream = file.getInputStream();\n        if (fileType.equals(\"pdf\")) {\n            ossClient.putObject(bucketName, filePath, inputStream);\n        } else {\n            ossClient.putObject(bucketName, filePath, inputStream);\n        }\n        baseResponseInfo.setCode(200);\n        baseResponseInfo.setData(fileUrl);\n    } catch (Exception e) {\n        logger.error(\"File upload failed: \", e);\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMsg(\"File upload failed\");\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 37.42516972744888}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    String businessPath = request.getParameter(\"businessPath\");\n    if (businessPath == null) {\n        businessPath = \"\";\n    }\n    MultipartFile file = null;\n    try {\n        file = request.getPart(\"file\");\n    } catch (Exception e) {\n        logger.error(\"upload file error\", e);\n    }\n    if (file == null) {\n        return new BaseResponseInfo(1, \"upload file error\");\n    }\n    String fileName = file.getOriginalFilename();\n    if (fileName == null) {\n        return new BaseResponseInfo(1, \"upload file error\");\n    }\n    String fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n    if (fileType == null) {\n        return new BaseResponseInfo(1, \"upload file error\");\n    }\n    String filePath = \"\";\n    if (fileType.equalsIgnoreCase(\"jpg\") || fileType.equalsIgnoreCase(\"jpeg\") || fileType.equalsIgnoreCase(\"png\") || fileType.equalsIgnoreCase(\"gif\")) {\n        filePath = businessPath + \"/\" + fileName;\n        try {\n            ossClient.putObject(ossConfig.getBucketName(), filePath, file.getInputStream());\n        } catch (Exception e) {\n            logger.error(\"upload file to oss error\", e);\n        }\n    } else {\n        filePath = businessPath + \"/\" + fileName;\n        try {\n            file.transferTo(new File(filePath));\n        } catch (Exception e) {\n            logger.error(\"upload file to local error\", e);\n        }\n    }\n    return new BaseResponseInfo(0, \"upload file success\", filePath);\n}", "CodeBleu_score": 30.68994966722557}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        // Get the business path from the request\n        String businessPath = request.getParameter(\"businessPath\");\n        // Get the uploaded file from the request\n        MultipartFile file = request.getFile(\"file\");\n        // Get the upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Save the file to either locally or AliOss\n        String filePath = fileUploadService.saveFile(businessPath, file, uploadType);\n        // Set the response code and data based on the success or failure of the upload\n        if (filePath != null) {\n            baseResponseInfo.setCode(BaseResponseInfo.SUCCESS);\n            baseResponseInfo.setData(filePath);\n        } else {\n            baseResponseInfo.setCode(BaseResponseInfo.FAIL);\n            baseResponseInfo.setData(\"\");\n        }\n    } catch (Exception e) {\n        // Log the exception\n        log.error(\"upload file error:\", e);\n        // Set the response code and data based on the failure of the upload\n        baseResponseInfo.setCode(BaseResponseInfo.FAIL);\n        baseResponseInfo.setData(\"\");\n    }\n    // Return the response\n    return baseResponseInfo;\n}", "CodeBleu_score": 38.56826228226462}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        List<List<String>> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(List.class);\n        exportExcelService.exportExcel(title, head, tip, dataList, response);\n    } catch (Exception e) {\n        logger.error(\"\u5bfc\u51faExcel\u5931\u8d25\uff1a\", e);\n    }\n}\n", "CodeBleu_score": 73.53385806006068}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            List<Map<String, Object>> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(Map.class);\n            // \u8c03\u7528\u670d\u52a1\u5c42\u5bfc\u51fa\n            this.exportService.exportExcelByParam(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            log.error(\"\u5bfc\u51faExcel\u5931\u8d25\", e);\n        }\n    }", "CodeBleu_score": 69.21063422183411}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response)        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            List<String> dataList = jsonObject.getList(\"dataList\", String.class);\n            excelExportService.exportExcel(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            log.error(\"\u5bfc\u51faExcel\u5931\u8d25\uff1a{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 72.37000582321022}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception     int result = 0;\n    try {\n        Account account = new Account();\n        account.setAccountName(obj.getString(\"accountName\"));\n        account.setAccountType(obj.getString(\"accountType\"));\n        account.setAccountNumber(obj.getString(\"accountNumber\"));\n        account.setBankName(obj.getString(\"bankName\"));\n        account.setBranchName(obj.getString(\"branchName\"));\n        account.setBranchCode(obj.getString(\"branchCode\"));\n        account.setBankAddress(obj.getString(\"bankAddress\"));\n        account.setBankPhone(obj.getString(\"bankPhone\"));\n        account.setBankEmail(obj.getString(\"bankEmail\"));\n        account.setBankWebsite(obj.getString(\"bankWebsite\"));\n        account.setBankContact(obj.getString(\"bankContact\"));\n        account.setBankContactPhone(obj.getString(\"bankContactPhone\"));\n        account.setBankContactEmail(obj.getString(\"bankContactEmail\"));\n        account.setBankContactWebsite(obj.getString(\"bankContactWebsite\"));\n        account.setBankContactAddress(obj.getString(\"bankContactAddress\"));\n        account.setBankContactAddress2(obj.getString(\"bankContactAddress2\"));\n        account.setBankContactAddress3(obj.getString(\"bankContactAddress3\"));\n        account.setBankContactAddress4(obj.getString(\"bankContactAddress4\"));\n        account.setBankContactAddress5(obj.getString(\"bankContactAddress5\"));\n        account.setBankContactAddress6(obj.getString(\"bankContactAddress6\"));\n        account.setBankContactAddress7(obj.getString(\"bankContactAddress7\"));\n        account.setBankContactAddress8(obj.getString(\"bankContactAddress8\"));\n        account.setBankContactAddress9(obj.getString(\"bankContactAddress9\"));\n        account.setBankContactAddress10(obj.getString(\"bankContactAddress10\"));\n        account.setBankContactAddress11(obj.getString(\"bankContactAddress11\"));\n        account.setBankContactAddress12(obj.getString(\"bankContactAddress12\"));\n        account.setBankContactAddress13(obj.getString(\"bankContactAddress", "CodeBleu_score": 16.23594021783772}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception     Account account = new Account();\n    account.initAccount(obj);\n    if (obj.has(\"amount\")) {\n        account.setAmount(obj.getDouble(\"amount\"));\n    } else {\n        account.setAmount(0.0);\n    }\n    if (getAccountCount() == 0) {\n        account.setDefault(true);\n    }\n    account.setEnabled(true);\n    try {\n        accountDao.insert(account);\n        Logger.log(request, \"Account \" + account.getAccountName() + \" inserted\");\n        return 1;\n    } catch (Exception e) {\n        Logger.log(request, \"Account \" + account.getAccountName() + \" insert failed\");\n        return 0;\n    }\n}", "CodeBleu_score": 30.90340779268701}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception     Account account = new Account();\n    account.setName(obj.getString(\"name\"));\n    account.setDescription(obj.getString(\"description\"));\n    account.setType(obj.getString(\"type\"));\n    account.setAmount(obj.getDouble(\"amount\"));\n    if (obj.has(\"default\")) {\n        account.setDefault(obj.getBoolean(\"default\"));\n    } else {\n        account.setDefault(false);\n    }\n    account.setEnabled(true);\n    account.setUser(request.getSession().getAttribute(\"user\"));\n    account.setCreatedAt(new Date());\n    account.setUpdatedAt(new Date());\n    int result = accountDao.insertAccount(account);\n    log.info(\"Account inserted: \" + account.toString());\n    return result;\n}", "CodeBleu_score": 32.65755622053631}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error while getting count of accounts with name: {} and serial number: {}\", name, serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 29.468884110786085}, {"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.104288019325963}, {"code": "public Long listWithBalanceCount(String name, String serialNo)    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"listWithBalanceCount error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.461378966312807}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"Error deleting depot item with ID \" + id, e);\n        throw e;\n    }\n}", "CodeBleu_score": 30.381933123541394}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(\"error in deleteDepotItem\", e);\n        throw new Exception(\"error in deleteDepotItem\", e);\n    }\n}", "CodeBleu_score": 29.241870506332234}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(\"\u5220\u9664\u5931\u8d25\", e);\n        throw new Exception(\"\u5220\u9664\u5931\u8d25\");\n    }\n    return result;\n}", "CodeBleu_score": 63.63298848556944}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    HttpClient httpClient = HttpClientBuilder.create().build();\n    try {\n        HttpGet request = new HttpGet(endpoint + \"/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey);\n        HttpResponse response = httpClient.execute(request);\n        String responseString = EntityUtils.toString(response.getEntity());\n        JSONObject jsonResponse = new JSONObject(responseString);\n        if (jsonResponse.has(\"key\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        httpClient.close();\n    }\n}", "CodeBleu_score": 42.80298936218676}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    try {\n        HttpClient httpClient = HttpClientBuilder.create().build();\n        String url = \"http://localhost:8080/projects/\" + projectName + \"/nodes?nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n        HttpGet request = new HttpGet(url);\n        HttpResponse response = httpClient.execute(request);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String result = EntityUtils.toString(entity);\n            JSONObject jsonObject = new JSONObject(result);\n            if (jsonObject.has(\"key\")) {\n                return true;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        httpClient.getConnectionManager().shutdown();\n    }\n    return false;\n}", "CodeBleu_score": 46.22214283340519}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)    HttpClient httpClient = HttpClientBuilder.create().build();\n    String url = \"http://localhost:8080/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n    HttpGet request = new HttpGet(url);\n    try {\n        HttpResponse response = httpClient.execute(request);\n        String responseString = EntityUtils.toString(response.getEntity());\n        if (responseString.contains(\"key\")) {\n            return true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        request.releaseConnection();\n    }\n    return false;\n}", "CodeBleu_score": 38.24894376756829}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    CloseableHttpClient httpClient = null;\n    HttpGet request = null;\n    CloseableHttpResponse response = null;\n    boolean success = false;\n    try {\n        httpClient = HttpClients.createDefault();\n        request = new HttpGet(String.format(ADD_EDGE_ENDPOINT, projectName, edgeType, fromType, toType, from, to));\n        response = httpClient.execute(request);\n        String responseBody = EntityUtils.toString(response.getEntity());\n        JSONObject json = new JSONObject(responseBody);\n        if (json.has(\"key\")) {\n            success = true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (response != null) {\n            try {\n                response.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (request != null) {\n            request.releaseConnection();\n        }\n        if (httpClient != null) {\n            try {\n                httpClient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return success;\n}", "CodeBleu_score": 38.02971830421767}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    HttpGet request = new HttpGet(String.format(ADD_EDGE_URL, projectName, edgeType, fromType, toType, from, to));\n    CloseableHttpClient client = HttpClients.createDefault();\n    try {\n        HttpResponse response = client.execute(request);\n        if (response.getStatusLine().getStatusCode() == 200) {\n            JSONObject json = new JSONObject(EntityUtils.toString(response.getEntity()));\n            if (json.has(\"key\")) {\n                return true;\n            }\n        }\n    }\n    catch (Exception e) {\n        e.printStackTrace();\n    }\n    finally {\n        try {\n            client.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 40.32306642811934}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)    CloseableHttpClient client = HttpClients.createDefault();\n    HttpGet request = new HttpGet(String.format(\"%s/%s/%s/%s/%s/%s\", endpoint, projectName, edgeType, fromType, toType, from));\n    request.addHeader(\"Authorization\", String.format(\"Bearer %s\", token));\n    request.addHeader(\"Content-Type\", \"application/json\");\n    try {\n        HttpResponse response = client.execute(request);\n        String responseString = EntityUtils.toString(response.getEntity());\n        JSONObject json = new JSONObject(responseString);\n        return json.has(\"key\");\n    }\n    catch (IOException e) {\n        e.printStackTrace();\n    }\n    finally {\n        try {\n            client.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 38.94227194348818}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event)    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(new Location(0, 0));\n        }\n        event.setTime(System.currentTimeMillis());\n        String json = event.toJson();\n        if (target == null) {\n            target = \"test\";\n        }\n        ProducerRecord<String, String> record = new ProducerRecord<String, String>(target, json);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 39.45666985734218}, {"code": "public void sendEvent(Event event)    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(new Location(\"Testing\", \"Testing\", \"Testing\"));\n        }\n        event.setTime(new Date());\n        String jsonString = gson.toJson(event);\n        String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n        ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 43.73414055593485}, {"code": "public void sendEvent(Event event)    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(1.0, 1.0));\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = new Gson().toJson(event);\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 45.1391681126457}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content)    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return ossClient.generatePresignedUrl(bucketName, objName, expiration).toString();\n}\n", "CodeBleu_score": 26.558758612123277}, {"code": "public String upload(String objName, byte[] content)    // Initialize the OSS client with access credentials\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    // Shut down the OSS client\n    ossClient.shutdown();\n    // Return the URL of the uploaded object\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 35.19311192410546}, {"code": "public String upload(String objName, byte[] content)    // Initialize the OSS client.\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n    // Upload the file content as an object.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    // Shut down the OSS client.\n    ossClient.shutdown();\n    // Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 34.185219512660034}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 24.5276838346144}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\",", "CodeBleu_score": 21.499576677869197}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfo(ipAddress);\n}\n", "CodeBleu_score": 27.534150755596787}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception    if (this.esClient != null && this.esHighLevelClient != null) {\n        return;\n    }\n    synchronized (this) {\n        if (this.esClient != null && this.esHighLevelClient != null) {\n            return;\n        }\n        String hosts = this.getHosts();\n        String[] hostArr = hosts.split(\",\");\n        String[] ports = this.getPorts().split(\",\");\n        List<HttpHost> httpHosts = new ArrayList<>();\n        for (int i = 0; i < hostArr.length; i++) {\n            httpHosts.add(new HttpHost(hostArr[i], Integer.parseInt(ports[i]), \"http\"));\n        }\n        this.esClient = new RestHighLevelClient(RestClient.builder(httpHosts.toArray(new HttpHost[0])));\n        this.esHighLevelClient = new RestHighLevelClient(RestClient.builder(httpHosts.toArray(new HttpHost[0])));\n    }\n}", "CodeBleu_score": 45.196989917027274}, {"code": "protected void ensureESClientInitialized() throws Exception    if (elasticsearchClient == null) {\n        synchronized (this) {\n            if (elasticsearchClient == null) {\n                List<String> clusterHosts = getClusterHosts();\n                List<Integer> clusterPorts = getClusterPorts();\n                if (clusterHosts.size() != clusterPorts.size()) {\n                    throw new IllegalArgumentException(\"Cluster hosts and ports must be of the same size\");\n                }\n                for (int i = 0; i < clusterHosts.size(); i++) {\n                    elasticsearchClient = new RestHighLevelClient(RestClient.builder(new HttpHost(clusterHosts.get(i), clusterPorts.get(i), \"http\")));\n                    elasticsearchClient.close();\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 36.565078756425315}, {"code": "protected void ensureESClientInitialized() throws Exception    if (esClient == null) {\n        synchronized (this) {\n            if (esClient == null) {\n                String hosts = config.get(ES_HOSTS);\n                String ports = config.get(ES_PORTS);\n                String clusterName = config.get(ES_CLUSTER_NAME);\n                esClient = new ESClient(hosts, ports, clusterName);\n            }\n        }\n    }\n}", "CodeBleu_score": 29.290314741183536}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    if (clusterHostList == null) {\n        return Collections.emptyList();\n    }\n    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    for (String host : clusterHostList.split(\",\")) {\n        String[] hostParts = host.split(\":\");\n        if (hostParts.length == 1) {\n            hosts.add(new HttpHost(hostParts[0], clusterPort));\n        } else if (hostParts.length == 2) {\n            hosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n        } else {\n            throw new IllegalArgumentException(\"Invalid host: \" + host);\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 46.67975229232094}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    if (clusterHostList == null || clusterHostList.length() == 0) {\n        throw new IllegalArgumentException(\"Cluster hosts must be specified\");\n    }\n    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostPort = host.split(\":\");\n            host = hostPort[0];\n            port = Integer.parseInt(hostPort[1]);\n        }\n        hosts.add(new HttpHost(host, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 39.04588896641925}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            hosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 44.012721930640915}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException    while (true) {\n        try {\n            Task task = queue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                switch (task.getType()) {\n                    case Task.TYPE_PLAIN_TEXT:\n                        PlainTextTask plainTextTask = (PlainTextTask) task;\n                        String recipient = plainTextTask.getRecipient();\n                        String message = plainTextTask.getMessage();\n                        if (isValid(recipient, message)) {\n                            send(recipient, message);\n                        } else {\n                            log.error(\"Invalid message data for recipient: \" + recipient);\n                        }\n                        break;\n                    case Task.TYPE_MEDIA:\n                        MediaTask mediaTask = (MediaTask) task;\n                        String recipient = mediaTask.getRecipient();\n                        String message = mediaTask.getMessage();\n                        String mediaUrl = mediaTask.getMediaUrl();\n                        if (isValid(recipient, message, mediaUrl)) {\n                            send(recipient, message, mediaUrl);\n                        } else {\n                            log.error(\"Invalid message data for recipient: \" + recipient);\n                        }\n                        break;\n                    case Task.TYPE_LOCATION:\n                        LocationTask locationTask = (LocationTask) task;\n                        String recipient = locationTask.getRecipient();\n                        String message = locationTask.getMessage();\n                        double latitude = locationTask.getLatitude();\n                        double longitude = locationTask.getLongitude();\n                        if (isValid(recipient, message, latitude, longitude)) {\n                            send(recipient, message, latitude, longitude);\n                        } else {\n                            log.error(\"Invalid message data for recipient: \" + recipient);\n                        }\n                        break;\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error while polling for tasks: \" + e.getMessage());\n        }\n    }\n}\n", "CodeBleu_score": 24.75146931279697}, {"code": "protected void pollingWork() throws InterruptedException    while (true) {\n        try {\n            Task task = queue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                if (task.getType() == Task.TYPE_TEXT) {\n                    TextTask textTask = (TextTask) task;\n                    String recipient = textTask.getRecipient();\n                    String message = textTask.getMessage();\n                    if (validateMessage(message)) {\n                        sendMessage(recipient, message);\n                    } else {\n                        logger.error(\"Invalid message data: \" + message);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error processing task\", e);\n        }\n    }\n}", "CodeBleu_score": 28.968610362560987}, {"code": "protected void pollingWork() throws InterruptedException    while (true) {\n        try {\n            // Poll for a task with a 30-second timeout\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                // Process the task based on its type\n                if (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n                    // Extract the recipient number and message data from the task\n                    String recipientNumber = task.getRecipientNumber();\n                    String message = task.getMessage();\n\n                    // Validate the message data\n                    if (message != null && !message.isEmpty()) {\n                        // Send the message\n                        sendMessage(recipientNumber, message);\n                    } else {\n                        // Log an error message if the message data is invalid\n                        log.error(\"Invalid message data for recipient number: {}\", recipientNumber);\n                    }\n                } else {\n                    // Log an error message if the task type is not recognized\n                    log.error(\"Unrecognized task type: {}\", task.getType());\n                }\n            }\n        } catch (Exception e) {\n            // Log an error message if an exception occurs\n            log.error(\"Error processing task: {}\", e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 28.351658002387136}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(uri);\n        httpGet.addHeader(\"Content-Type\", \"text/xml\");\n        httpGet.addHeader(\"Accept\", \"text/xml\");\n\n        try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n            HttpEntity entity = response.getEntity();\n            String content = EntityUtils.toString(entity, \"UTF-8\");\n            LOGGER.info(\"Response content: \" + content);\n            return content;\n        }\n    }\n}", "CodeBleu_score": 46.33461786068234}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception    CloseableHttpClient httpclient = HttpClients.createDefault();\n    HttpGet httpget = new HttpGet(uri);\n    String responseContent = null;\n    try (CloseableHttpResponse response = httpclient.execute(httpget)) {\n        HttpEntity entity = response.getEntity();\n        responseContent = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        logger.info(\"Response content: {}\", responseContent);\n    }\n    return responseContent;\n}", "CodeBleu_score": 52.25828247340362}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    HttpResponse response = httpClient.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, \"UTF-8\");\n    logger.info(\"Response content: \" + content);\n    return content;\n}", "CodeBleu_score": 59.842021288260895}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    Element root = doc.getDocumentElement();\n    if (root == null) {\n        return null;\n    }\n    Object[] decoded = decodeElement(root, doTrim);\n    if (decoded.length < 2) {\n        return null;\n    }\n    Map<String, Object> map = new HashMap<String, Object>();\n    for (int i = 0; i < decoded.length; i += 2) {\n        map.put((String) decoded[i], decoded[i + 1]);\n    }\n    return map;\n}\n", "CodeBleu_score": 58.99732984020114}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    dbf.setNamespaceAware(true);\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(new InputSource(new StringReader(messageXmlStr)));\n    NodeList childNodes = doc.getChildNodes();\n    return decodeToMap(childNodes, doTrim);\n}\n", "CodeBleu_score": 29.987885551376493}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    dbf.setNamespaceAware(true);\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(new InputSource(new StringReader(messageXmlStr)));\n    Element root = doc.getDocumentElement();\n    return decodeToMap(root, doTrim);\n}\n", "CodeBleu_score": 29.613601032535296}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)    final String transactionName = getTransactionName();\n    if (orderRecord.isAutoProcess()) {\n        log.info(\"Auto-processing order {}\", orderRecord.getC_Order_ID());\n        enqueueGenerateSchedules(transactionName, orderRecord);\n    } else {\n        if (orderRecord.isAutoShip()) {\n            log.info(\"Order {} is not eligible for auto-processing because it is postponed\", orderRecord.getC_Order_ID());\n            enqueueMissingShipmentSchedules(transactionName, orderRecord);\n        } else {\n            log.info(\"Order {} is not eligible for auto-processing because it is not auto-shipped\", orderRecord.getC_Order_ID());\n        }\n    }\n}", "CodeBleu_score": 25.563384333571353}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)    final String transactionName = orderRecord.getTransactionName();\n    if (transactionName == null || transactionName.isEmpty()) {\n        log.info(\"Order [{}] is not eligible for auto-processing because it does not have a transaction name\", orderRecord.getOrderId());\n        return;\n    }\n    log.info(\"Order [{}] is eligible for auto-processing\", orderRecord.getOrderId());\n    final String shipmentScheduleId = orderRecord.getShipmentScheduleId();\n    if (shipmentScheduleId == null || shipmentScheduleId.isEmpty()) {\n        log.info(\"Order [{}] is not eligible for auto-processing because it does not have a shipment schedule\", orderRecord.getOrderId());\n        return;\n    }\n    final String invoiceScheduleId = orderRecord.getInvoiceScheduleId();\n    if (invoiceScheduleId == null || invoiceScheduleId.isEmpty()) {\n        log.info(\"Order [{}] is not eligible for auto-processing because it does not have an invoice schedule\", orderRecord.getOrderId());\n        return;\n    }\n    log.info(\"Order [{}] is eligible for auto-processing\", orderRecord.getOrderId());\n    final String shipmentSchedulePostponeId = orderRecord.getShipmentSchedulePostponeId();\n    if (shipmentSchedulePostponeId == null || shipmentSchedulePostponeId.isEmpty()) {\n        log.info(\"Order [{}] is not eligible for auto-processing because it does not have a shipment schedule postpone\", orderRecord.getOrderId());\n        return;\n    }\n    final String invoiceSchedulePostponeId = orderRecord.getInvoiceSchedulePostponeId();\n    if (invoiceSchedulePostponeId == null || invoiceSchedulePostponeId.isEmpty()) {\n        log.info(\"Order [{}] is not eligible for auto-processing because it does not have an invoice schedule postpone\", orderRecord.getOrderId());\n        return;\n    }\n    log.info(\"Order [{}] is eligible for auto-processing\", orderRecord.getOrderId());\n    final String shipmentSchedulePostponeReason", "CodeBleu_score": 27.550893390435284}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)    // Check if order is eligible for auto-processing\n    if (!isOrderEligibleForAutoProcessing(orderRecord)) {\n        // If not eligible, schedule creation of missing shipment schedules\n        scheduleCreateMissingShipmentSchedules(orderRecord);\n        return;\n    }\n\n    // If eligible, log the action and enqueue the order for automatic shipping and invoicing\n    log.info(\"Enqueueing order for automatic shipping and invoicing: {}\", orderRecord.getDocumentNo());\n    enqueueOrderForAutoProcessing(orderRecord);\n}", "CodeBleu_score": 18.126834330025694}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User    $user = $this->getUser($request);\n    if ($user && $this->hasValidCredentials($user, $request)) {\n        return $user;\n    }\n    event(new Failed($user, $request));\n    throw $this->exception();\n}\n", "CodeBleu_score": 40.53019318529494}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User    /** @var User $user */\n    $user = $this->getUserByEmail($request->email);\n    if ($user && Hash::check($request->password, $user->getAuthPassword())) {\n        event(new Authenticated($user));\n        return $user;\n    }\n    event(new Failed($user, ['password' => ['Invalid credentials.']]));\n    throw new AuthenticationException();\n}\n", "CodeBleu_score": 37.95251468443735}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User    $user = $this->getUserByEmail($request->email);\n    if (!$user) {\n        event(new Failed($request, null, $this->getFailedEventMessage()));\n        throw $this->createException();\n    }\n    if (!$this->check($request, $user)) {\n        event(new Failed($request, $user, $this->getFailedEventMessage()));\n        throw $this->createException();\n    }\n    return $user;\n}\n", "CodeBleu_score": 36.727866762554015}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->incrementRequestsLimit($request);\n\n    throw new ValidationException(\n        ['email' => __('auth.failed')],\n    );\n}\n", "CodeBleu_score": 56.036035050982726}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->incrementRequestCount($request);\n\n    throw new ValidationException($request, [\n        'email' => __('auth.failed'),\n    ]);\n}", "CodeBleu_score": 57.372250392799685}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void    $this->incrementRequestLimit($request);\n\n    throw new ValidationException(\n        'Unable to authenticate with the provided credentials.',\n        new FailedAuthenticationException()\n    );\n}\n", "CodeBleu_score": 47.850569514691514}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request)    $userId = $request->session()->get('two_factor.user_id');\n    $user = User::find($userId);\n\n    if (!$user) {\n        return response()->json([\n            'message' => 'User not found',\n        ], 404);\n    }\n\n    $data = [\n        'two_factor_enabled' => $user->two_factor_enabled,\n        'remember_me' => $request->session()->get('two_factor.remember_me'),\n    ];\n\n    if ($user->two_factor_enabled) {\n        $data['public_key'] = $user->two_factor_public_key;\n    }\n\n    return response()->view('TwoFactorChallenge', $data);\n}\n", "CodeBleu_score": 46.67430983821498}, {"code": "<?\npublic function toResponse($request)    $userId = $request->session()->get('user_id');\n    $user = User::find($userId);\n\n    if (!$user) {\n        return redirect()->route('login');\n    }\n\n    $data = [\n        'two_factor_enabled' => $user->two_factor_enabled,\n        'remember_me' => $request->session()->get('remember_me', false),\n    ];\n\n    if ($user->two_factor_enabled) {\n        $publicKey = $user->two_factor_secret;\n        $data['public_key'] = $publicKey;\n    }\n\n    return view('TwoFactorChallenge', $data);\n}\n", "CodeBleu_score": 48.42619784698481}, {"code": "<?\npublic function toResponse($request)    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n    if (!$user) {\n        return redirect()->route('login');\n    }\n    $data = [\n        'twoFactorEnabled' => $user->two_factor_secret !== null,\n        'remember' => $request->session()->get('login.remember', false),\n    ];\n    $publicKey = $user->publicKey;\n    if ($publicKey) {\n        $data['publicKey'] = [\n            'type' => 'public-key',\n            'id' => base64_encode($publicKey->id),\n            'rawId' => base64_encode($publicKey->rawId),\n            'algorithm' => $publicKey->algorithm,\n            'usages' => $publicKey->usages,\n            'attestationType' => $publicKey->attestationType,\n            'transports' => $publicKey->transports,\n            'certificates' => $publicKey->certificates,\n        ];\n    }\n    return response()->view('TwoFactorChallenge', $data);\n}\n", "CodeBleu_score": 45.95657788559021}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        // Retrieve the associated user\n        $user = $userToken->user;\n\n        // Verify the user association\n        if ($user->driver !== $driver || $user->socialite_user_id !== $socialite->getId()) {\n            throw new Exception('Invalid user association');\n        }\n    } else {\n        // Create a new user or associate the socialite token with an existing user\n        $user = User::firstOrCreate([\n            'driver' => $driver,\n            'socialite_user_id' => $socialite->getId(),\n        ], [\n            'name' => $socialite->getName(),\n            'email' => $socialite->getEmail(),\n        ]);\n\n        $userToken = UserToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'socialite_user_id' => $socialite->getId(),\n            'token' => $socialite->token,\n            'refresh_token' => $socialite->refreshToken,\n            'expires_in' => $socialite->expiresIn,\n        ]);\n    }\n\n    return $user;\n}\n", "CodeBleu_score": 47.32010932477394}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        // Retrieve the associated user\n        $user = $userToken->user;\n\n        // Verify the user association\n        if ($user->email !== $socialite->getEmail()) {\n            throw new InvalidUserException('The user associated with this token does not match the provided socialite user.');\n        }\n    } else {\n        // Create a new user or associate the socialite token with an existing user\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (!$user) {\n            $user = User::create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'password' => Hash::make(Str::random(8)),\n            ]);\n        }\n\n        UserToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'socialite_user_id' => $socialite->getId(),\n        ]);\n    }\n\n    return $user;\n}\n", "CodeBleu_score": 48.309659186893626}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User    $token = $request->bearerToken();\n\n    if (!$token) {\n        $token = $request->input('token');\n    }\n\n    $user = User::where('token', $token)->first();\n\n    if ($user) {\n        $user->verifyDriver($driver);\n        return $user;\n    }\n\n    $user = User::where('email', $socialite->getEmail())->first();\n\n    if (!$user) {\n        $user = User::create([\n            'name' => $socialite->getName(),\n            'email' => $socialite->getEmail(),\n            'token' => $token,\n            'driver' => $driver,\n        ]);\n    } else {\n        $user->token = $token;\n        $user->driver = $driver;\n        $user->save();\n    }\n\n    return $user;\n}\n", "CodeBleu_score": 48.73963093532882}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $request->only('credentialAssertionData');\n\n    if ($this->validateAssertion($user, $credentials)) {\n        return true;\n    }\n\n    event(new FailedAuthentication($user, 'webauthn', $request->ip()));\n\n    throw new AuthenticationException();\n}\n", "CodeBleu_score": 46.163143655811}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    if (!$user = $request->user()) {\n        return false;\n    }\n\n    $credentials = $request->only('id', 'rawId', 'response.authenticatorData', 'response.clientDataJSON', 'response.signature', 'response.userHandle');\n\n    if ($this->validateAssertion($user, $credentials)) {\n        return true;\n    }\n\n    event(new Failed($user, $this, [\n        'message' => 'WebAuthn authentication failed.',\n    ]);\n\n    throw new AuthenticationException;\n}", "CodeBleu_score": 42.080979743966374}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool    // Get the user from the request.\n    $user = $request->user();\n\n    // If no user is found, return false.\n    if (!$user) {\n        return false;\n    }\n\n    // Get the filtered credentials from the request.\n    $credentials = $request->all();\n\n    // Validate the assertion using the user's credentials.\n    if (!$this->guard()->validate($credentials)) {\n        // Trigger a failed authentication event.\n        $this->fireFailedEvent($user, $credentials);\n\n        // Throw an authentication exception.\n        throw new AuthenticationException;\n    }\n\n    // Return true if the assertion is valid.\n    return true;\n}\n", "CodeBleu_score": 47.844353363359865}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User  try {\n    if ($email = $this->getEmail()) {\n      return User::findByEmail($email);\n    }\n  } catch (Exception $e) {\n    Log::error($e->getMessage());\n  }\n\n  return null;\n}\n", "CodeBleu_score": 32.08499690861768}, {"code": "<?\nprivate function user(): ?User    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (\\Exception $e) {\n        Log::error($e->getMessage());\n\n        return null;\n    }\n}\n", "CodeBleu_score": 24.911991911122055}, {"code": "<?\nprivate function user(): ?User    try {\n        if (!$this->email) {\n            Log::error('No email provided');\n            return null;\n        }\n\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (\\Exception $e) {\n        Log::error($e->getMessage());\n        return null;\n    }\n}\n", "CodeBleu_score": 34.35288713707687}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void    if (!config('scout.driver') || !config('scout.flush')) {\n        return;\n    }\n\n    $indexes = config('scout.meilisearch.indexes');\n\n    foreach ($indexes as $index => $model) {\n        $table = (new $model())->getTable();\n\n        $this->call('scout:flush', [\n            'model' => $model,\n            'index' => $index,\n            'table' => $table,\n        ]);\n    }\n\n    $this->info('Scout indexes have been flushed.');\n}", "CodeBleu_score": 48.01650407388802}, {"code": "<?\nprotected function scoutFlush(): void    if (config('scout.driver') !== 'meilisearch' || !config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.settings') as $index => $settings) {\n        $table = Str::of($settings['model'])->afterLast('\\\\');\n\n        $this->call('scout:flush', [\n            'model' => $settings['model'],\n            'index' => $index,\n        ]);\n\n        $this->info(\"The {$table} table index has been flushed.\");\n    }\n}\n", "CodeBleu_score": 52.22313192009217}, {"code": "<?\nprotected function scoutFlush(): void    if (!$this->scoutDriver || !config('scout.flush')) {\n        return;\n    }\n\n    foreach ($this->getIndexSettings() as $index => $settings) {\n        $table = $settings['table'] ?? null;\n\n        if (!$table) {\n            continue;\n        }\n\n        $this->call('scout:flush', [\n            'model' => $table,\n        ]);\n    }\n\n    $this->info('Scout indexes flushed.');\n}\n", "CodeBleu_score": 47.55688377132814}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard    // Read existing VCard from resource, setting UID if missing\n    $vcard = VCard::parse($resource->getVCard())->setUid($resource->getUid());\n\n    // If reading failed or VCard doesn't exist, create a new VCard with basic information\n    if ($vcard->isEmpty() || $vcard->getUid() === null) {\n        $vcard = new VCard();\n        $vcard->addName($resource->getFirstName(), $resource->getLastName());\n        $vcard->addEmail($resource->getEmail());\n        $vcard->addPhoneNumber($resource->getPhoneNumber());\n    }\n\n    // Apply exporters to add more details to VCard\n    $exporters = [\n        new AddressExporter(),\n        new PhotoExporter(),\n        new OrganizationExporter(),\n        new RoleExporter(),\n        new TitleExporter(),\n        new NoteExporter(),\n        new WebsiteExporter(),\n        new SocialMediaExporter(),\n        new InterestsExporter(),\n        new SkillsExporter(),\n        new EducationExporter(),\n        new WorkExperienceExporter(),\n        new LanguageExporter(),\n        new CertificationExporter(),\n        new AwardExporter(),\n        new MembershipExporter(),\n        new RelationshipExporter(),\n        new FreeTextExporter(),\n        new FreeFormExporter(),\n    ];\n\n    foreach ($exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}\n", "CodeBleu_score": 38.269959839887555}, {"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = VCard::create();\n    $vcard->addProperty(VCardProperty::create('uid', $resource->getUid()));\n\n    // ...\n\n    return $vcard;\n}\n", "CodeBleu_score": 11.04532175217246}, {"code": "<?\nprivate function export(VCardResource $resource): VCard    $vcard = new VCard();\n    // Set the UID if it's missing\n    if (!$vcard->getUid()) {\n        $vcard->setUid($resource->getUid());\n    }\n    // Read the VCard from the resource\n    try {\n        $vcard->readFromFile($resource->getPath());\n    } catch (VCardException $e) {\n        // If reading fails or the VCard doesn't exist, create a new VCard with basic information\n        $vcard->setFormattedName($resource->getName());\n        $vcard->setEmail($resource->getEmail());\n    }\n    // Apply the exporters\n    $exporters = [\n        new VCardExporter\\AddressExporter(),\n        new VCardExporter\\PhoneExporter(),\n        new VCardExporter\\PhotoExporter(),\n        new VCardExporter\\SocialMediaExporter(),\n        new VCardExporter\\WebsiteExporter(),\n    ];\n    foreach ($exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n    return $vcard;\n}\n", "CodeBleu_score": 34.28743243757957}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    $object = $this->getCard($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        $this->jobQueue->push(new DestroyContactJob($object));\n    } elseif ($object instanceof Group) {\n        $this->jobQueue->push(new DestroyGroupJob($object));\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 34.147415063227385}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    $object = $this->getObject($addressBookId, $cardUri);\n    if ($object === null) {\n        return false;\n    }\n\n    if ($object instanceof Contact) {\n        $this->jobQueue->dispatch(new DestroyContactJob($object));\n    } elseif ($object instanceof Group) {\n        $this->jobQueue->dispatch(new DestroyGroupJob($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}\n", "CodeBleu_score": 41.64674894593746}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool    // Get the object\n    $object = self::getObject($addressBookId, $cardUri);\n    if (!$object) {\n        return false;\n    }\n    // If it is a contact, dispatch a job to destroy the contact\n    if ($object->isContact()) {\n        dispatch(new DestroyContactJob($object->id));\n        return true;\n    }\n    // If it is a group, dispatch a job to destroy the group\n    if ($object->isGroup()) {\n        dispatch(new DestroyGroupJob($object->id));\n        return true;\n    }\n    return false;\n}\n", "CodeBleu_score": 33.2684743403074}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data)    if (!isset($data['file'])) {\n        return;\n    }\n\n    $file = $data['file'];\n\n    // Create a lead activity record with details from the request data and the authenticated user\n    $leadActivity = LeadActivity::create([\n        'lead_id' => $data['lead_id'],\n        'activity_type' => 'File Upload',\n        'description' => 'A file was uploaded',\n        'user_id' => Auth::user()->id,\n    ]);\n\n    // Create a new record with the file's name and storage path, associating it with the created lead activity\n    $fileRecord = File::create([\n        'name' => $file->getClientOriginalName(),\n        'path' => $file->store('uploads'),\n        'lead_activity_id' => $leadActivity->id,\n    ]);\n\n    return $fileRecord;\n}\n", "CodeBleu_score": 51.819334847152575}, {"code": "<?\npublic function upload(array $data)    if (!array_key_exists('file', $data)) {\n        return;\n    }\n\n    $leadActivity = LeadActivity::create([\n        'name' => $data['name'],\n        'description' => $data['description'],\n        'user_id' => Auth::id(),\n        'lead_id' => $data['lead_id'],\n        'type' => $data['type'],\n    ]);\n\n    $file = $data['file'];\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->storeAs('public/files', $fileName);\n\n    return File::create([\n        'name' => $fileName,\n        'path' => $filePath,\n        'lead_activity_id' => $leadActivity->id,\n    ]);\n}\n\n", "CodeBleu_score": 53.01238901783165}, {"code": "<?\npublic function upload(array $data)    $file = $this->request->file('file');\n    if (!$file) {\n        return response()->json(['message' => 'File not found'], 400);\n    }\n\n    $leadActivity = LeadActivity::create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->user()->id,\n        'description' => $data['description'],\n        'type' => $data['type'],\n    ]);\n\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->storeAs('files', $fileName);\n\n    $fileRecord = File::create([\n        'name' => $fileName,\n        'path' => $filePath,\n        'lead_activity_id' => $leadActivity->id,\n    ]);\n\n    return response()->json([\n        'message' => 'File uploaded successfully',\n        'file' => $fileRecord,\n    ], 201);\n}\n", "CodeBleu_score": 50.26674302955363}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    if ($exception instanceof ModelNotFoundException) {\n        if (request()->routeIs('admin.*')) {\n            return redirect()->route('admin.session.create');\n        }\n\n        return response()->view('errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n}\n", "CodeBleu_score": 33.55243596894428}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    if ($this->isAdminRoute() && $exception instanceof ModelNotFoundException) {\n        return redirect()->route('admin.login');\n    }\n\n    if ($this->isFrontRoute()) {\n        return redirect()->route('admin.login');\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    switch ($exception) {\n        case ($exception instanceof ModelNotFoundException):\n            return response()->view('errors.404', [], 404);\n        case ($exception instanceof PDOException):\n            return response()->view('errors.500', [], 500);\n        case ($exception instanceof ParseError):\n            return response()->view('errors.500', [], 500);\n    }\n}\n", "CodeBleu_score": 42.63766180208676}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)    if ($this->isAdminRoute()) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('admin.errors.404', [], 404);\n        }\n        if ($exception instanceof PDOException || $exception instanceof ParseError) {\n            return response()->view('admin.errors.500', [], 500);\n        }\n    }\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('front.errors.404', [], 404);\n    }\n    if ($exception instanceof PDOException || $exception instanceof ParseError) {\n        return response()->view('front.errors.500', [], 500);\n    }\n    if ($exception instanceof HttpException) {\n        return response()->view('errors.custom', ['statusCode' => $exception->getStatusCode()], $exception->getStatusCode());\n    }\n}\n", "CodeBleu_score": 38.75434030722565}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode)    if ($this->request->getHeader('Accept') === 'application/json') {\n        return $this->jsonResponse($statusCode);\n    }\n    return $this->viewResponse($path, $statusCode);\n}\n", "CodeBleu_score": 33.243518099266645}, {"code": "<?\nprivate function response($path, $statusCode)    if ($this->request->expectsJson()) {\n        return response()->json([\n            'error' => 'Resource not found.'\n        ], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [], $statusCode);\n}\n", "CodeBleu_score": 54.05745972741941}, {"code": "<?\nprivate function response($path, $statusCode)    if ($this->request->expectsJson()) {\n        return response()->json([\n            'message' => 'The given data was invalid.',\n            'errors' => [\n                'name' => [\n                    'The name field is required.',\n                ],\n            ],\n        ], $statusCode);\n    }\n\n    return view($path, [\n        'statusCode' => $statusCode,\n    ]);\n}\n", "CodeBleu_score": 50.701697269299004}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate()    // Get the request data\n    $data = request()->all();\n\n    // Get the activity IDs to update\n    $activityIds = $data['activity_ids'];\n\n    // Initialize a counter for the number of updates made\n    $updates = 0;\n\n    // Iterate over the activity IDs\n    foreach ($activityIds as $activityId) {\n        // Get the activity\n        $activity = Activity::find($activityId);\n\n        // Dispatch an event before the update\n        event(new ActivityUpdateBefore($activity));\n\n        // Update the activity's 'is_done' status\n        $activity->is_done = $data['is_done'];\n        $activity->save();\n\n        // Dispatch an event after the update\n        event(new ActivityUpdateAfter($activity));\n\n        // Increment the counter for the number of updates made\n        $updates++;\n    }\n\n    // Return a JSON response indicating success or failure based on whether any updates were made\n    if ($updates > 0) {\n        return response()->json(['success' => true, 'message' => 'Activities updated successfully.']);\n    } else {\n        return response()->json(['success' => false, 'message' => 'No activities were updated.']);\n    }\n}\n", "CodeBleu_score": 39.93218630277522}, {"code": "<?\npublic function massUpdate()    // Get the request data\n    $request = request();\n\n    // Get the activity IDs from the request data\n    $activityIds = $request->input('activity_ids');\n\n    // Initialize a counter to keep track of the number of updates made\n    $updatesMade = 0;\n\n    // Iterate over the activity IDs\n    foreach ($activityIds as $activityId) {\n        // Get the activity from the database\n        $activity = Activity::find($activityId);\n\n        // Dispatch an event before updating the activity\n        event(new ActivityBeforeUpdate($activity));\n\n        // Update the activity's 'is_done' status\n        $activity->is_done = true;\n        $activity->save();\n\n        // Dispatch an event after updating the activity\n        event(new ActivityAfterUpdate($activity));\n\n        // Increment the counter\n        $updatesMade++;\n    }\n\n    // Return a JSON response indicating success or failure based on whether any updates were made\n    return response()->json([\n        'success' => $updatesMade > 0,\n        'message' => $updatesMade > 0 ? 'Activities updated successfully' : 'No activities were updated',\n    ]);\n}\n", "CodeBleu_score": 40.026012396518325}, {"code": "<?\npublic function massUpdate()    $ids = request()->input('ids');\n    $is_done = request()->input('is_done');\n\n    $updated = 0;\n    foreach ($ids as $id) {\n        $activity = Activity::findOrFail($id);\n        if ($activity->is_done != $is_done) {\n            event(new ActivityUpdated($activity));\n            $activity->is_done = $is_done;\n            $activity->save();\n            event(new ActivityUpdated($activity));\n            $updated++;\n        }\n    }\n\n    if ($updated > 0) {\n        return response()->json(['message' => 'Activities updated successfully.']);\n    } else {\n        return response()->json(['message' => 'No activities were updated.'], 400);\n    }\n}\n", "CodeBleu_score": 40.7037063451895}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy()    // Get the activity IDs from the request data\n    $ids = $this->request->getData('ids');\n\n    // Loop through the activity IDs and delete each activity\n    foreach ($ids as $id) {\n        // Dispatch an event before deleting the activity\n        $this->dispatchEvent('Model.Activity.beforeDelete', $id);\n\n        // Delete the activity\n        $this->Activities->delete($id);\n\n        // Dispatch an event after deleting the activity\n        $this->dispatchEvent('Model.Activity.afterDelete', $id);\n    }\n\n    // Return a JSON response indicating a successful destruction\n    return $this->response->withType('application/json')\n        ->withStringBody(json_encode(['success' => true]));\n}\n", "CodeBleu_score": 26.498035485452526}, {"code": "<?\n public function massDestroy()  // Get the activity IDs from the request data\n  $ids = explode(',', request('ids'));\n\n  // Iterate over the activity IDs\n  foreach ($ids as $id) {\n      // Dispatch an event before deleting the activity\n      event(new ActivityDestroying($id));\n\n      // Delete the activity\n      Activity::where('id', $id)->delete();\n\n      // Dispatch an event after deleting the activity\n      event(new ActivityDestroyed($id));\n  }\n\n  // Return a JSON response indicating a successful destruction\n  return response()->json([\n      'success' => true\n  ]);\n}\n", "CodeBleu_score": 26.78802835133478}, {"code": "<?\n public function massDestroy()  try {\n    $ids = explode(',', request('ids'));\n    foreach ($ids as $id) {\n      event(new ActivityDeleting($id));\n      $activity = Activity::findOrFail($id);\n      if ($activity->delete()) {\n        event(new ActivityDeleted($id));\n      }\n    }\n    return response()->json(['success' => true]);\n  } catch (\\Exception $e) {\n    return response()->json(['success' => false, 'message' => $e->getMessage()]);\n  }\n}\n", "CodeBleu_score": 27.48783071197673}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards()    // Retrieve the current cards\n    $cards = DashboardCard::all();\n\n    // Iterate through the request data to match and update the 'selected' status of each card\n    foreach (request('cards') as $card) {\n        $cardModel = DashboardCard::find($card['id']);\n        $cardModel->selected = $card['selected'];\n        $cardModel->save();\n    }\n\n    // Return the updated cards as a JSON response\n    return response()->json($cards);\n}\n", "CodeBleu_score": 38.266213233733794}, {"code": "<?\n public function updateCards()    // Retrieve the current cards from the database\n    $cards = Card::all();\n\n    // Iterate through the request data to match and update the 'selected' status of each card\n    foreach (request('cards') as $cardData) {\n        $card = $cards->firstWhere('id', $cardData['id']);\n        $card->selected = $cardData['selected'];\n        $card->save();\n    }\n\n    // Return the updated cards as a JSON response\n    return response()->json($cards);\n}\n", "CodeBleu_score": 37.2254201469968}, {"code": "<?\n public function updateCards()    try {\n      // Retrieve the current cards\n      $cards = DashboardCard::all();\n\n      // Get the request data\n      $data = request()->all();\n\n      // Loop through the request data and update the 'selected' status of each card\n      foreach ($data as $card) {\n        $card_id = $card['id'];\n        $selected = $card['selected'];\n\n        // Find the card in the database\n        $dashboard_card = DashboardCard::find($card_id);\n\n        // Update the 'selected' status\n        $dashboard_card->selected = $selected;\n        $dashboard_card->save();\n      }\n\n      // Return the updated cards as a JSON response\n      return response()->json(['cards' => $cards]);\n    } catch (\\Exception $e) {\n      // Handle any errors that occur during the update process\n      return response()->json(['error' => $e->getMessage()], 500);\n    }\n  }\n", "CodeBleu_score": 39.12823852801031}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store()    event(new ConfigurationSaving($this->request->all()));\n\n    $configuration = Configuration::create($this->request->all());\n\n    event(new ConfigurationSaved($configuration));\n\n    flash()->success(trans('configurations.messages.created'));\n\n    return redirect()->back();\n}\n", "CodeBleu_score": 34.022788978860255}, {"code": "<?\npublic function store()    // Dispatch the 'config.creating' event\n    event(new ConfigCreating());\n\n    // Create the configuration\n    $config = new Config();\n    $config->name = request('name');\n    $config->value = request('value');\n    $config->save();\n\n    // Dispatch the 'config.created' event\n    event(new ConfigCreated($config));\n\n    // Flash a success message to the session\n    session()->flash('success', 'Configuration created successfully.');\n\n    // Redirect back to the previous page\n    return redirect()->back();\n}\n", "CodeBleu_score": 29.930252300884824}, {"code": "<?\npublic function store()    event(new ConfigurationStoring($request->all()));\n\n    $configuration = Configuration::create($request->all());\n\n    event(new ConfigurationStored($configuration));\n\n    flash()->success(trans('backend.configurations.created'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 32.51561370584128}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download()    /**\n     * Get the file path from the request parameters\n     */\n    $filePath = $this->request->getParam('file');\n\n    /**\n     * Construct the full file name\n     */\n    $fileName = 'config/' . $filePath . '.php';\n\n    /**\n     * Fetch the corresponding configuration from the repository\n     */\n    $config = $this->repository->get($filePath);\n\n    /**\n     * Return the file for download using the stored value\n     */\n    return $this->response->withFile($fileName, $config);\n}", "CodeBleu_score": 34.15392654893977}, {"code": "<?\npublic function download()    $fileName = $this->request->query('file');\n    $file = '../files/' . $fileName;\n    $config = $this->Config->findByName($fileName);\n    if ($config->file_type == 'image') {\n        $this->response->file($file, array('download' => true, 'name' => $fileName));\n    } elseif ($config->file_type == 'pdf') {\n        $this->response->file($file, array('download' => true, 'name' => $fileName));\n    } elseif ($config->file_type == 'video') {\n        $this->response->file($file, array('download' => true, 'name' => $fileName));\n    } elseif ($config->file_type == 'audio') {\n        $this->response->file($file, array('download' => true, 'name' => $fileName));\n    } elseif ($config->file_type == 'document') {\n        $this->response->file($file, array('download' => true, 'name' => $fileName));\n    } elseif ($config->file_type == 'other') {\n        $this->response->file($file, array('download' => true, 'name' => $fileName));\n    } else {\n        $this->response->file($file, array('download' => true, 'name' => $fileName));\n    }\n}\n", "CodeBleu_score": 27.465793206397326}, {"code": "<?\npublic function download()    $file_path = $_GET['file_path'];\n    $full_file_name = '../' . $file_path;\n    $file_config = $this->repository->get_file_config($file_path);\n\n    if (file_exists($full_file_name)) {\n        header('Content-Description: File Transfer');\n        header('Content-Type: ' . $file_config['mime_type']);\n        header('Content-Disposition: attachment; filename=\"' . $file_config['file_name'] . '\"');\n        header('Expires: 0');\n        header('Cache-Control: must-revalidate');\n        header('Pragma: public');\n        header('Content-Length: ' . filesize($full_file_name));\n        readfile($full_file_name);\n        exit;\n    } else {\n        echo \"File not found.\";\n    }\n}\n", "CodeBleu_score": 27.2607058130369}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(model);\n        sort.setSortOrder(list.indexOf(model));\n        sort.setUser(user);\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteByUser(user);\n    adminModelSortRepository.saveAll(sortList);\n    return new Result(true, \"Success\");\n}", "CodeBleu_score": 35.6301948736184}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setSortOrder(i);\n        adminModelSortList.add(adminModelSort);\n    }\n    adminModelSortService.deleteAll();\n    adminModelSortService.saveAll(adminModelSortList);\n    return Result.success();\n}", "CodeBleu_score": 51.90084438865319}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list)     List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setSortOrder(list.indexOf(model));\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortRepository.deleteAllByUser(user);\n    adminModelSortRepository.saveAll(adminModelSorts);\n    return ResponseEntity.ok(new SuccessResponse(true));\n}", "CodeBleu_score": 39.25712276068773}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminSetting adminSetting = adminSettingService.getAdminSettingById(moduleSetting.getId());\n    if (adminSetting.getModule().equals(ModuleEnum.CRM)) {\n        return Result.error(\"CRM\u6a21\u5757\u4e0d\u5141\u8bb8\u4fee\u6539\");\n    }\n    adminSetting.setStatus(moduleSetting.getStatus());\n    adminSettingService.saveOrUpdate(adminSetting);\n    return Result.success(\"\u4fee\u6539\u6210\u529f\");\n}", "CodeBleu_score": 54.314144963269776}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminConfig adminConfig = adminConfigService.getAdminConfigBySettingId(moduleSetting.getSettingId());\n    if (adminConfig.getModule().equalsIgnoreCase(ModuleEnum.CRM.name())) {\n        return Result.error(ResultEnum.CRM_MODULE_SETTING_CAN_NOT_BE_MODIFIED);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.save(adminConfig);\n    return Result.success(ResultEnum.SUCCESS);\n}", "CodeBleu_score": 60.62684246877077}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)    AdminConfig adminConfig = adminConfigService.getAdminConfigBySettingId(moduleSetting.getSettingId());\n    if (adminConfig.getModuleName().equalsIgnoreCase(ModuleName.CRM.name())) {\n        return Result.error(\"CRM module can not be disabled\");\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateAdminConfig(adminConfig);\n    return Result.success();\n}", "CodeBleu_score": 58.8429506374569}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     try {\n        // Retrieve the user configuration by the custom key\n        UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n        // If the configuration exists, update its value with the provided JSON\n        if (userConfiguration != null) {\n            userConfiguration.setValue(json);\n            userConfigurationRepository.save(userConfiguration);\n        } else {\n            // If the configuration does not exist, create a new user configuration with the provided JSON and save it\n            userConfiguration = new UserConfiguration();\n            userConfiguration.setCustomKey(customKey);\n            userConfiguration.setValue(json);\n            userConfigurationRepository.save(userConfiguration);\n        }\n        // Return a successful result\n        return new Result(true, \"Success\");\n    } catch (Exception e) {\n        // If an exception occurs, log the error and return an error result\n        log.error(\"Error while querying custom setting: {}\", e.getMessage());\n        return new Result(false, \"Error\");\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 45.30225348908027}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     try {\n        UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n        if (userConfiguration != null) {\n            userConfiguration.setCustomSetting(json.toString());\n            userConfigurationRepository.save(userConfiguration);\n        } else {\n            userConfiguration = new UserConfiguration();\n            userConfiguration.setCustomKey(customKey);\n            userConfiguration.setCustomSetting(json.toString());\n            userConfigurationRepository.save(userConfiguration);\n        }\n        return new Result(true, \"Success\");\n    } catch (Exception e) {\n        return new Result(false, \"Error: \" + e.getMessage());\n    }\n}\n", "CodeBleu_score": 49.87681599419146}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)     try {\n        // Get the user configuration by the custom key\n        UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n\n        // If the configuration exists, update its value with the provided JSON\n        if (userConfiguration != null) {\n            userConfiguration.setValue(json.toString());\n            userConfigurationRepository.save(userConfiguration);\n        } else {\n            // If the configuration does not exist, create a new user configuration with the provided JSON\n            UserConfiguration newUserConfiguration = new UserConfiguration();\n            newUserConfiguration.setCustomKey(customKey);\n            newUserConfiguration.setValue(json.toString());\n            userConfigurationRepository.save(newUserConfiguration);\n        }\n\n        // Return a successful result\n        return new Result(true, \"Custom setting saved successfully\");\n    } catch (Exception e) {\n        // Return an error result if an exception occurs\n        return new Result(false, \"Error saving custom setting: \" + e.getMessage());\n    }\n}\n", "CodeBleu_score": 47.273728588143435}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = adminUserMapper.selectById(userId);\n    if (user == null) {\n        return Result.fail(ResultCode.USER_NOT_EXIST);\n    }\n    String departmentName = departmentService.getDepartmentName(user.getDepartmentId());\n    user.setDepartmentName(departmentName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}\n", "CodeBleu_score": 45.295294112132524}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     AdminUser user = adminUserMapper.selectById(userId);\n    if (user == null) {\n        return Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n    }\n    String departmentName = departmentService.getDepartmentName(user.getDepartmentId());\n    user.setDepartmentName(departmentName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 46.0599750875496}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId)     // 1. get user detail\n    User user = userMapper.selectById(userId);\n    if (user == null) {\n        return Result.fail(\"user not exist\");\n    }\n    // 2. get department name\n    Department department = departmentMapper.selectById(user.getDepartmentId());\n    if (department == null) {\n        return Result.fail(\"department not exist\");\n    }\n    user.setDepartmentName(department.getName());\n    // 3. nullify salt and password\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 40.967065860011715}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice()     Long userId = (Long) session().get(\"userId\");\n    List<ReadNotice> readNoticeList = ReadNotice.find.query().where().eq(\"user_id\", userId).findList();\n    if (readNoticeList.size() > 0) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok(Json.toJson(\"success\"));\n}\n", "CodeBleu_score": 36.98326518580872}, {"code": " public Result readNotice()     int userId = session().get(\"userId\");\n    List<ReadNotice> readNotice = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNotice.size() > 1) {\n        for (ReadNotice rn : readNotice) {\n            rn.status = 1;\n            rn.update();\n        }\n    } else {\n        ReadNotice rn = new ReadNotice();\n        rn.userId = userId;\n        rn.status = 1;\n        rn.save();\n    }\n    return ok(Json.toJson(\"Success\"));\n}", "CodeBleu_score": 27.880096644124908}, {"code": " public Result readNotice()     int userId = session().get(\"userId\");\n    List<ReadNotice> readNotices = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 0) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.status = 1;\n        readNotice.userId = userId;\n        readNotice.save();\n    }\n    return ok(Json.toJson(\"success\"));\n}", "CodeBleu_score": 28.24762684823252}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    AdminConfig adminConfig = adminConfigRepository.findByName(\"companyInfo\");\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigRepository.save(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigRepository.save(adminConfig);\n    }\n}", "CodeBleu_score": 48.61428568023122}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    AdminConfig adminConfig = adminConfigRepository.findByName(\"companyInfo\");\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigRepository.save(adminConfig);\n}", "CodeBleu_score": 44.63994470086228}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)    AdminConfigBO adminConfigBO = new AdminConfigBO();\n    adminConfigBO.setName(\"companyInfo\");\n    adminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigBO.setType(ConfigTypeEnum.COMPANY.getCode());\n    adminConfigBO.setRemark(\"\u516c\u53f8\u4fe1\u606f\");\n    adminConfigBO.setCreateTime(new Date());\n    adminConfigBO.setUpdateTime(new Date());\n    adminConfigBO.setCreateUserId(1L);\n    adminConfigBO.setUpdateUserId(1L);\n    adminConfigBO.setCreateUserName(\"admin\");\n    adminConfigBO.setUpdateUserName(\"admin\");\n    adminConfigBO.setDeleted(false);\n    adminConfigBO.setId(1L);\n    adminConfigService.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 27.872505235655957}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig()    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String config = configService.getConfig(ConfigKeyEnum.ADMIN_COMPANY_CONFIG.getKey());\n    if (StringUtils.isNotBlank(config)) {\n        adminCompanyBO = JSON.parseObject(config, AdminCompanyBO.class);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 43.23175199796227}, {"code": "public AdminCompanyBO queryAdminConfig()    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    AdminCompanyConfig adminCompanyConfig = adminCompanyConfigDao.queryAdminCompanyConfigByKey(AdminCompanyConfig.ADMIN_COMPANY_CONFIG_KEY);\n    if (adminCompanyConfig != null) {\n        adminCompanyBO = JSON.parseObject(adminCompanyConfig.getConfigValue(), AdminCompanyBO.class);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 54.61918909108974}, {"code": "public AdminCompanyBO queryAdminConfig()    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    adminCompanyBO.setCompanyId(companyId);\n    adminCompanyBO.setCompanyName(companyName);\n    adminCompanyBO.setCompanyCode(companyCode);\n    adminCompanyBO.setCompanyType(companyType);\n    adminCompanyBO.setCompanyLogo(companyLogo);\n    adminCompanyBO.setCompanyDescription(companyDescription);\n    adminCompanyBO.setCompanyWebsite(companyWebsite);\n    adminCompanyBO.setCompanyContact(companyContact);\n    adminCompanyBO.setCompanyContactEmail(companyContactEmail);\n    adminCompanyBO.setCompanyContactPhone(companyContactPhone);\n    adminCompanyBO.setCompanyContactAddress(companyContactAddress);\n    adminCompanyBO.setCompanyContactCity(companyContactCity);\n    adminCompanyBO.setCompanyContactState(companyContactState);\n    adminCompanyBO.setCompanyContactZip(companyContactZip);\n    adminCompanyBO.setCompanyContactCountry(companyContactCountry);\n    adminCompanyBO.setCompanyContactFax(companyContactFax);\n    adminCompanyBO.setCompanyContactMobile(companyContactMobile);\n    adminCompanyBO.setCompanyContactTitle(companyContactTitle);\n    adminCompanyBO.setCompanyContactDepartment(companyContactDepartment);\n    adminCompanyBO.setCompanyContactNotes(companyContactNotes);\n    adminCompanyBO.setCompanyContactPhoto(companyContactPhoto);\n    adminCompanyBO.setCompanyContactPhotoThumbnail(companyContactPhotoThumbnail);\n    adminCompanyBO.setCompanyContactPhotoThumbnailUrl(companyContactPhotoThumbnailUrl);\n    adminCompanyBO.setCompanyContactPhotoUrl(companyContactPhotoUrl);\n    adminCompanyBO.setCompanyContactPhotoUrlThumbnail(companyContactPhotoUrlThumbnail);\n    adminCompanyBO.setCompanyContactPhotoUrlThumbnailUrl(companyContactPhotoUrlThumbnailUrl);\n    adminCompanyBO.setCompanyContactPhotoUrlThumbnailWidth(companyContactPhotoUrlThumbnailWidth);\n    adminCompanyBO.setCompanyContactPhotoUrlThumbnailHeight(companyContactPhotoUrlThumbnailHeight);\n    adminCompanyBO.setCompanyContactPhotoUrlWidth(companyContactPhotoUrlWidth);\n    adminCompanyBO.setCompanyContactPhoto", "CodeBleu_score": 14.129216714112616}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = AdminConfig.create(\"com.ibm.ws.logging.LogConfiguration\", \"Logging Configuration\");\n        config.set(\"logConfigurationName\", string);\n        config.set(\"logConfigurationType\", \"welcomeSpeech\");\n        config.set(\"logConfigurationEnabled\", true);\n        configList.add(config);\n    }\n    AdminConfig[] existingConfigs = AdminConfig.list(\"com.ibm.ws.logging.LogConfiguration\", \"Logging Configuration\").toArray(new AdminConfig[0]);\n    for (AdminConfig existingConfig : existingConfigs) {\n        if (existingConfig.get(\"logConfigurationName\").equals(stringList.get(0))) {\n            existingConfig.remove();\n        }\n    }\n    AdminConfig.saveAll(configList.toArray(new AdminConfig[0]));\n}", "CodeBleu_score": 37.212850271830476}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = AdminConfig.create(\"com.ibm.ws.logging.logConfiguration.LogConfiguration\", string);\n        config.set(\"logConfigurationName\", \"welcome\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        config.set(\"logConfigurationType\", \"com.ibm.ws.logging.logConfiguration.LogConfiguration", "CodeBleu_score": 26.174566370830128}, {"code": " public void setLogWelcomeSpeech(List<String> stringList)    List<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(string);\n        adminConfig.setEnabled(true);\n        adminConfig.setLogConfigurationName(LOG_CONFIGURATION_NAME);\n        adminConfigList.add(adminConfig);\n    }\n    AdminConfig[] adminConfigArray = new AdminConfig[adminConfigList.size()];\n    adminConfigArray = adminConfigList.toArray(adminConfigArray);\n    AdminConfig[] existingAdminConfigArray = AdminConfig.find(ADMIN_CONFIG_OBJECT_NAME, \"logConfigurationName\", LOG_CONFIGURATION_NAME).execute();\n    AdminConfig[] adminConfigArrayToRemove = new AdminConfig[existingAdminConfigArray.length];\n    for (int i = 0; i < existingAdminConfigArray.length; i++) {\n        adminConfigArrayToRemove[i] = existingAdminConfigArray[i];\n    }\n    AdminConfig.remove(adminConfigArrayToRemove);\n    AdminConfig.save(adminConfigArray);\n}", "CodeBleu_score": 30.008974134068684}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    // Retrieve the current user ID and user details\n    Long userId = SecurityUtils.getUserId();\n    User user = userService.getUserById(userId);\n    String username = user.getUsername();\n\n    // Retrieve the stored password and salt\n    String storedPassword = user.getPassword();\n    String salt = user.getSalt();\n\n    // Verify the password\n    String password = adminInitDataBO.getPassword();\n    String hashedPassword = DigestUtils.sha256Hex(password + salt);\n    if (!hashedPassword.equals(storedPassword)) {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n\n    // Generate a temporary access code\n    String accessCode = UUID.randomUUID().toString();\n\n    // Store the access code in Redis with a 10-minute expiration\n    redisTemplate.opsForValue().set(accessCode, userId, 10, TimeUnit.MINUTES);\n\n    return accessCode;\n}", "CodeBleu_score": 40.44991978411138}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    Long currentUserId = getCurrentUserId();\n    UserBO userBO = userService.getUserById(currentUserId);\n    String username = userBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = userBO.getSalt();\n    String storedPassword = passwordService.getPasswordByUsername(username, salt);\n    if (!password.equals(storedPassword)) {\n        throw new BusinessException(ErrorCode.PASSWORD_INCORRECT);\n    }\n    String accessCode = UUID.randomUUID().toString();\n    redisService.set(RedisKey.ADMIN_INIT_ACCESS_CODE + currentUserId, accessCode, 10, TimeUnit.MINUTES);\n    return accessCode;\n}\n", "CodeBleu_score": 41.98979992657213}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)    Integer currentUserId = adminInitDataBO.getUserId();\n    User user = userService.getUser(currentUserId);\n    if (user == null) {\n        throw new RuntimeException(\"user is not exist\");\n    }\n    String username = user.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = user.getSalt();\n    String storedPassword = user.getPassword();\n    if (!PasswordUtil.verifyPassword(password, username, salt, storedPassword)) {\n        throw new RuntimeException(\"password is not correct\");\n    }\n    String accessCode = UUID.randomUUID().toString();\n    redisTemplate.opsForValue().set(RedisKey.ADMIN_ACCESS_CODE + accessCode, currentUserId + \"\", 10, TimeUnit.MINUTES);\n    return accessCode;\n}", "CodeBleu_score": 38.37290057740524}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = \"initAuth:\" + userId;\n    List<String> unauthorizedMenuUrls = redisTemplate.opsForList().range(key, 0, -1);\n    if (unauthorizedMenuUrls.contains(request.getRequestURI())) {\n        return true;\n    }\n    return false;\n}\n", "CodeBleu_score": 38.13438826261767}, {"code": "private boolean verifyInitAuth()    String userId = (String) request.getSession().getAttribute(\"userId\");\n    String key = \"unauthorized_menu_\" + userId;\n    List<String> unauthorizedMenuList = redisTemplate.opsForList().range(key, 0, -1);\n    if (unauthorizedMenuList.contains(request.getRequestURI())) {\n        return true;\n    }\n    return false;\n}\n", "CodeBleu_score": 38.34583101746898}, {"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = \"user:\" + userId + \":initAuth\";\n    Set<String> initAuthList = redisTemplate.opsForSet().members(key);\n    if (initAuthList != null && initAuthList.contains(initAuthUrl)) {\n        return true;\n    }\n    return false;\n}\n", "CodeBleu_score": 41.66198129246387}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuService.saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.77187116329874}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    if (menuIdList == null || menuIdList.isEmpty()) {\n        return;\n    }\n    List<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        adminRoleMenuList.add(adminRoleMenu);\n    }\n    adminRoleMenuMapper.deleteByRoleId(roleId);\n    for (int i = 0; i < adminRoleMenuList.size(); i++) {\n        adminRoleMenuMapper.insertSelective(adminRoleMenuList.get(i));\n        if (i % 100 == 0) {\n            adminRoleMenuMapper.flushStatements();\n        }\n    }\n}", "CodeBleu_score": 59.83852932214546}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    for (int i = 0; i < roleMenuList.size(); i++) {\n        if (i % 1000 == 0) {\n            adminRoleMenuRepository.saveAll(roleMenuList.subList(i, Math.min(i + 1000, roleMenuList.size())));\n        }\n    }\n}", "CodeBleu_score": 52.09503244042265}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog)     IndexRequest indexRequest = new IndexRequest(\"syslog\");\n    indexRequest.source(BeanMap.create(sysLog), XContentType.JSON);\n    indexRequest.id(sysLog.getId());\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(TimeValue.timeValueSeconds(2));\n    indexRequest.timeout(", "CodeBleu_score": 18.73461798197024}, {"code": "public void saveSysLog(SysLog sysLog)     //get log index\n    String index = getIndex(sysLog);\n    //convert log object to map\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"id\", sysLog.getId());\n    map.put(\"type\", sysLog.getType());\n    map.put(\"host\", sysLog.getHost());\n    map.put(\"content\", sysLog.getContent());\n    map.put(\"time\", sysLog.getTime());\n    map.put(\"user\", sysLog.getUser());\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n    //remove id\n    map.remove(\"id\");\n    //create index request\n    IndexRequest indexRequest = new IndexRequest(index).source(map);\n    //submit request to es client\n    try {\n        client.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"save sys log error:{}\", e.getMessage());\n    }\n}\n", "CodeBleu_score": 45.049205346212815}, {"code": "public void saveSysLog(SysLog sysLog)     sysLog.setId(UUID.randomUUID().toString().replace(\"-\", \"\"));\n    sysLog.setCreateTime(new Date());\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"id\", sysLog.getId());\n    map.put(\"username\", sysLog.getUsername());\n    map.put(\"ip\", sysLog.getIp());\n    map.put(\"method\", sysLog.getMethod());\n    map.put(\"url\", sysLog.getUrl());\n    map.put(\"createTime\", sysLog.getCreateTime());\n    IndexRequest indexRequest = new IndexRequest(\"syslog\").source(map);\n    try {\n        client.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 39.9006778540909}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    Query query = new Query();\n    query.addSort(Sort.by(Sort.Direction.DESC, \"createTime\"));\n    query.addCriteria(Criteria.where(\"type\").is(querySysLogBO.getType()));\n    query.addCriteria(Criteria.where(\"createTime\").gte(querySysLogBO.getStartTime()));\n    query.addCriteria(Criteria.where(\"createTime\").lt(querySysLogBO.getEndTime()));\n    query.addCriteria(Criteria.where(\"createBy\").is(querySysLogBO.getCreateBy()));\n    query.fields().exclude(\"content\");\n    query.fields().exclude(\"createBy\");\n    query.fields().exclude(\"createTime\");\n    query.fields().exclude(\"updateBy\");\n    query.fields().exclude(\"updateTime\");\n    query.fields().exclude(\"remark\");\n    query.fields().exclude(\"delFlag\");\n    query.fields().exclude(\"params\");\n    try {\n        AggregationResults<SysLog> results = mongoTemplate.aggregate(query, \"sys_log\", SysLog.class);\n        List<SysLog> sysLogs = results.getMappedResults();\n        long total = results.getTotalElements();\n        return new BasePage<>(sysLogs, total, querySysLogBO.getPageNum(), querySysLogBO.getPageSize());\n    } catch (IOException e) {\n        log.error(\"querySysLogPageList error:{}\", e.getMessage());\n        return new BasePage<>();\n    }\n}", "CodeBleu_score": 34.3399009880898}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    if (!StringUtils.isEmpty(querySysLogBO.getStartTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n    }\n    if (!StringUtils.isEmpty(querySysLogBO.getEndTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n    }\n    if (!StringUtils.isEmpty(querySysLogBO.getModule())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"module\", querySysLogBO.getModule()));\n    }\n    if (!StringUtils.isEmpty(querySysLogBO.getType())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"type\", querySysLogBO.getType()));\n    }\n    if (!StringUtils.isEmpty(querySysLogBO.getContent())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"content\", querySysLogBO.getContent()));\n    }\n    if (!StringUtils.isEmpty(querySysLogBO.getIp())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n    }\n    if (!StringUtils.isEmpty(querySysLogBO.getOperator())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"operator\", querySysLogBO.getOperator()));\n    }\n    if (!StringUtils.isEmpty(querySysLogBO.getStatus())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"status\", querySysLogBO.getStatus()));\n    }\n    searchSourceBuilder.query(boolQueryBuilder);\n    searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"createTime\", \"module\", \"type\", \"content\", \"ip\", \"operator\", \"status\"}, null);\n    searchSourceBuilder.from", "CodeBleu_score": 27.795404790164653}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    searchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"logLevel\", querySysLogBO.getLogLevel())));\n    searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    searchSourceBuilder.fetchSource(new String[]{}, new String[]{\"createTime\", \"updateTime\", \"createBy\", \"updateBy\"});\n    searchSourceBuilder.from(querySysLogBO.getPageNum());\n    searchSourceBuilder.size(querySysLogBO.getPageSize());\n    SearchRequest searchRequest = new SearchRequest(ES_INDEX_SYS_LOG).source(searchSourceBuilder);\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        List<SysLog> sysLogs = new ArrayList<>();\n        for (SearchHit hit : searchResponse.getHits().getHits()) {\n            sysLogs.add(JSONObject.parseObject(hit.getSourceAsString(), SysLog.class));\n        }\n        return new BasePage<>(sysLogs, searchResponse.getHits().getTotalHits().value);\n    } catch (IOException e) {\n        log.error(\"querySysLogPageList error\", e);\n    }\n    return new BasePage<>();\n}", "CodeBleu_score": 48.784525539624084}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest)  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, (response) => {\n      response.pipe(file);\n      file.on('finish', () => {\n        file.close(resolve);\n      });\n    }).on('error', (err) => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}\n", "CodeBleu_score": 57.29790909710599}, {"code": "async function downloadFile(url, dest)  const file = fs.createWriteStream(dest);\n  const request = https.get(url, (response) => {\n    response.pipe(file);\n    file.on(\"finish\", () => {\n      file.close();\n      console.log(`Downloaded and saved file to ${dest}`);\n      resolve();\n    });\n  });\n  request.on(\"error\", (err) => {\n    fs.unlink(dest);\n    reject(err);\n  });\n}\n", "CodeBleu_score": 52.25381186798187}, {"code": "async function downloadFile(url, dest)  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, (response) => {\n      response.pipe(file);\n      file.on('finish', () => {\n        file.close();\n        resolve();\n      });\n    }).on('error', (err) => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}\n", "CodeBleu_score": 59.8248945457699}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)    return Flux.fromIterable(module.getDependsOn())\n        .flatMap(dependentModuleId -> {\n            if (circularDependencyCheckSet.contains(dependentModuleId)) {\n                log.warn(\"Circular dependency detected for module {}\", module.getId());\n                return Flux.empty();\n            }\n            circularDependencyCheckSet.add(dependentModuleId);\n            return applicationRepository.findById(dependentModuleId)\n                .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet))\n                .switchIfEmpty(applicationRepository.findById(dependentModuleId));\n        })\n        .filter(dependentModule -> !module.getDependsOn().contains(dependentModule.getId()));\n}", "CodeBleu_score": 47.77991055870202}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)    Set<String> processedModuleIds = new HashSet<>();\n    processedModuleIds.add(module.getModuleId());\n    circularDependencyCheckSet.add(module.getModuleId());\n    return Flux.fromIterable(module.getDependencies())\n            .flatMap(dependentModuleId -> {\n                if (processedModuleIds.contains(dependentModuleId)) {\n                    log.warn(\"Circular dependency detected for module: {}\", module.getModuleId());\n                    return Mono.empty();\n                }\n                processedModuleIds.add(dependentModuleId);\n                if (circularDependencyCheckSet.contains(dependentModuleId)) {\n                    log.warn(\"Circular dependency detected for module: {}\", module.getModuleId());\n                    return Mono.empty();\n                }\n                circularDependencyCheckSet.add(dependentModuleId);\n                return getApplicationModule(dependentModuleId);\n            })\n            .doOnNext(dependentModule -> circularDependencyCheckSet.remove(dependentModule.getModuleId()))\n            .doOnNext(dependentModule -> processedModuleIds.add(dependentModule.getModuleId()))\n            .doOnError(error -> log.warn(\"Error retrieving dependent modules for module: {}\", module.getModuleId(), error))\n            .doOnComplete(() -> circularDependencyCheckSet.remove(module.getModuleId()));\n}", "CodeBleu_score": 35.663052698173644}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)    // Check if the module ID is already in the circular dependency check set\n    if (circularDependencyCheckSet.contains(module.getId())) {\n        log.warn(\"Circular dependency detected for module with ID: {}\", module.getId());\n        return Flux.empty();\n    }\n\n    // Add the module ID to the circular dependency check set\n    circularDependencyCheckSet.add(module.getId());\n\n    // Retrieve the dependent modules for the given module\n    return moduleRepository.findByDependsOn(module.getId())\n            .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet))\n            .onErrorResume(error -> {\n                log.warn(\"Error retrieving dependent modules for module with ID: {}\", module.getId(), error);\n                return Flux.empty();\n            })\n            .mergeWith(Flux.just(module));\n}", "CodeBleu_score": 47.78357282440432}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    if (map != null) {\n        for (Map.Entry<?, ?> entry : map.entrySet()) {\n            if (entry.getKey() != null && entry.getKey().toString().equalsIgnoreCase(\"type\")) {\n                if (entry.getValue() != null && entry.getValue().toString().equalsIgnoreCase(\"module\")) {\n                    if (map.containsKey(\"appId\") && !map.get(\"appId\").toString().isEmpty()) {\n                        dependentModuleIds.add(map.get(\"appId\").toString());\n                    }\n                }\n            } else if (entry.getValue() instanceof Map) {\n                doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n            } else if (entry.getValue() instanceof List) {\n                for (Object obj : (List<?>) entry.getValue()) {\n                    if (obj instanceof Map) {\n                        doGetDependentModules((Map<?, ?>) obj, dependentModuleIds);\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 36.50815910345617}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey() instanceof String && entry.getValue() instanceof Map) {\n            Map<?, ?> nestedMap = (Map<?, ?>) entry.getValue();\n            String componentType = (String) nestedMap.get(\"componentType\");\n            if (\"module\".equals(componentType)) {\n                String appId = (String) nestedMap.get(\"appId\");\n                if (appId != null && !appId.isEmpty()) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            List<?> nestedList = (List<?>) entry.getValue();\n            for (Object obj : nestedList) {\n                if (obj instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) obj, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 46.342873847349914}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey() instanceof String && \"module\".equals(entry.getKey())) {\n            String moduleId = (String) entry.getValue();\n            if (!StringUtils.isBlank(moduleId)) {\n                dependentModuleIds.add(moduleId);\n            }\n        } else if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object value : (List<?>) entry.getValue()) {\n                if (value instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 40.25571284327142}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException     ImageInputStream imageInputStream = ImageIO.createImageInputStream(dataBuffer.getInputStream());\n    Iterator<ImageReader> readers = ImageIO.getImageReaders(imageInputStream);\n    if (readers.hasNext()) {\n        ImageReader reader = readers.next();\n        reader.setInput(imageInputStream);\n        ImageReadParam param = reader.getDefaultReadParam();\n        Rectangle rect = new Rectangle(0, 0, reader.getWidth(0), reader.getHeight(0));\n        param.setSourceRegion(rect);\n        BufferedImage image = reader.read(0, param);\n        if (createThumbnail) {\n            BufferedImage thumbnail = Thumbnails.of(image).size(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT).asBufferedImage();\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(thumbnail, \"JPEG\", baos);\n            dataBuffer.setInputStream(new ByteArrayInputStream(baos.toByteArray()));\n            dataBuffer.setContentType(\"image/jpeg\");\n        } else {\n            dataBuffer.setContentType(srcContentType.toString());\n        }\n        reader.dispose();\n    }\n    imageInputStream.close();\n    return new Asset(dataBuffer);\n}", "CodeBleu_score": 36.52274533348274}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException     if (createThumbnail) {\n        // Resize the image to a thumbnail size\n        BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(dataBuffer.toByteArray()));\n        int width = bufferedImage.getWidth();\n        int height = bufferedImage.getHeight();\n        int thumbnailWidth = Math.min(width, THUMBNAIL_WIDTH);\n        int thumbnailHeight = Math.min(height, THUMBNAIL_HEIGHT);\n        BufferedImage thumbnail = new BufferedImage(thumbnailWidth, thumbnailHeight, BufferedImage.TYPE_INT_RGB);\n        Graphics2D graphics2D = thumbnail.createGraphics();\n        graphics2D.drawImage(bufferedImage, 0, 0, thumbnailWidth, thumbnailHeight, null);\n        graphics2D.dispose();\n        dataBuffer = new DataBufferByte(ImageIO.write(thumbnail, \"JPEG\", new ByteArrayOutputStream()));\n        srcContentType = MediaType.IMAGE_JPEG;\n    }\n    return new Asset(dataBuffer, srcContentType);\n}", "CodeBleu_score": 35.95213968827542}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException   // Create a new Asset with the given content type\n  Asset asset = new Asset(srcContentType);\n  // Create a new DataBufferInputStream from the given DataBuffer\n  DataBufferInputStream dataBufferInputStream = new DataBufferInputStream(dataBuffer);\n  // Create a new BufferedImage from the DataBufferInputStream, using the given content type\n  BufferedImage bufferedImage = ImageIO.read(dataBufferInputStream);\n  // If creating a thumbnail, resize the image to a thumbnail size\n  if (createThumbnail) {\n    bufferedImage = resize(bufferedImage);\n  }\n  // Create a new ByteArrayOutputStream to write the image data to\n  ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n  // Write the image data to the ByteArrayOutputStream\n  ImageIO.write(bufferedImage, \"jpeg\", byteArrayOutputStream);\n  // Set the content type to JPEG if creating a thumbnail, otherwise retain the original content type\n  asset.setContentType(createThumbnail ? \"image/jpeg\" : srcContentType.toString());\n  // Set the asset data to the ByteArrayOutputStream\n  asset.setData(byteArrayOutputStream.toByteArray());\n  // Release the DataBuffer after processing\n  dataBuffer.release();\n  // Return the new Asset with the processed image data and content type\n  return asset;\n}", "CodeBleu_score": 37.87631633638993}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetRepository.findById(assetId).flatMap(asset -> {\n        exchange.getResponse().setStatusCode(HttpStatus.OK);\n        if (asset.getContentType() != null) {\n            exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n        }\n        DataBufferFactory bufferFactory = exchange.getResponse().bufferFactory();\n        return exchange.getResponse().writeWith(Mono.just(bufferFactory.wrap(asset.getData())));\n    });\n}", "CodeBleu_score": 44.0660048301383}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetRepository.findById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n            })\n            .then();\n}", "CodeBleu_score": 35.60469726430272}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)    return assetRepository.findById(assetId).flatMap(asset -> {\n        exchange.getResponse().setStatusCode(HttpStatus.OK);\n        exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n        exchange.getResponse().getHeaders().setContentLength(asset.getData().length);\n        DataBufferFactory dataBufferFactory = exchange.getResponse().bufferFactory();\n        DataBuffer buffer = dataBufferFactory.allocateBuffer().write(asset.getData());\n        return exchange.getResponse().writeWith(Mono.just(buffer));\n    });\n}", "CodeBleu_score": 43.17122383224434}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     if (workspaceMode == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return findAllEnterpriseOrganizations().flatMap(organization -> findAuthConfigsForOrganization(organization.getId()));\n}", "CodeBleu_score": 25.865851290952968}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     if (workspaceMode.equals(WorkspaceMode.SAAS)) {\n        return Flux.empty();\n    }\n    return findAllOrganizationsInEnterpriseMode().map(this::mapAuthConfigToFindAuthConfig);\n}", "CodeBleu_score": 20.801634532862895}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode()     if (workspaceMode.equals(WorkspaceMode.SAAS)) {\n        return Flux.empty();\n    }\n    return getEnterpriseOrganizations().flatMap(organization -> {\n        return getAuthConfigsForOrganization(organization.getId());\n    }).flatMap(authConfig -> {\n        return getAuthConfig(authConfig.getId());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(authConfig.getType());\n    }).flatMap(authConfig -> {\n        return getAuthConfigByType(auth", "CodeBleu_score": 23.259036002516584}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    return MongockSpring5.builder()\n        .setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate, \"mongock\"))\n        .addChangeLogsScanPackage(\"com.example.changelogs\")\n        .setSpringContext(springContext)\n        .setMigrationScanPackage(\"com.example.migrations\")\n        .setLockQuickConfig(true)\n        .setLockProvider(MongockSpring5.springDataLockProvider(mongoTemplate))\n        .buildRunner();\n}", "CodeBleu_score": 28.176504321657703}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    return MongockSpring5.builder()\n            .setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate, \"migration-lock\"))\n            .addMigrationScanPackage(\"com.example.migration\")\n            .setSpringContext(springContext)\n            .setMigrationScanner(new ScanByClassNameMigrationScanner())\n            .setMigrationRepository(new SpringDataMongoV4MigrationRepository(mongoTemplate))\n            .buildRunner();\n}", "CodeBleu_score": 27.3605968640793}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)    MongockSpring5.MongockApplicationRunner.Builder builder = MongockSpring5.withApplicationContext(springContext);\n    builder.setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate, \"mongock-locks\", WriteConcern.ACKNOWLEDGED, ReadConcern.MAJORITY));\n    builder.setChangeLogsScanPackage(\"com.example.migration\");\n    return builder.build();\n}\n", "CodeBleu_score": 39.046767300279726}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 71.57467961238515}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)        ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 73.52028552879332}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 71.57467961238515}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return getLatestLibraryQueryRecord(libraryQueryId).map(LibraryQueryRecord::getDsl).switchIfEmpty(getDSLByLibraryQueryId(libraryQueryId));\n}", "CodeBleu_score": 32.58623491970798}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return libraryQueryRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId).flatMap(libraryQuery -> {\n        if (libraryQuery.getDsl() != null) {\n            return Mono.just(libraryQuery.getDsl());\n        }\n        return Mono.just(libraryQuery.getLibraryQueryDsl());\n    });\n}", "CodeBleu_score": 46.85119701273666}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)    return getLatestLibraryQueryRecord(libraryQueryId).flatMap(libraryQueryRecord -> {\n        if (libraryQueryRecord.getDsl() != null) {\n            return Mono.just(libraryQueryRecord.getDsl());\n        } else {\n            return Mono.just(libraryQueryRecord.getDsl());\n        }\n    }).switchIfEmpty(Mono.defer(() -> {\n        return Mono.just(libraryQueryRepository.findById(libraryQueryId).map(LibraryQuery::getDsl).orElse(null));\n    }));\n}", "CodeBleu_score": 51.20157089588826}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        try {\n            long timeout = parseTimeout(timeoutStr);\n            if (datasource.getType() == DatasourceType.NODE) {\n                return executeQueryNode(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n            }\n            return executeQueryLocal(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } catch (TimeoutException e) {\n            return Mono.error(new PluginException(DatasourceType.NODE, \"Timeout\", e));\n        } catch (PluginException e) {\n            return Mono.error(e);\n        } catch (Exception e) {\n            log.error(\"Error executing query\", e);\n            return Mono.error(new PluginException(DatasourceType.NODE, \"Query execution error\", e));\n        }\n    }\n\n    /**\n     * This function parses the timeout duration from a string. If the string is not a valid integer, it throws a PluginException with a custom error message.\n     */\n    private long parseTimeout(String timeoutStr) throws PluginException {\n        try {\n            return Long.parseLong(timeoutStr);\n        } catch (NumberFormatException e) {\n            throw new PluginException(DatasourceType.NODE, \"Invalid timeout value\", e);\n        }\n    }\n\n    /**\n     * This function executes a query on a given datasource using Node.js. It uses a WebClient to send the query configuration and parameters to the Node.js server, and then uses a Mono to handle the response. If the response is an error, it maps it to a plugin exception and resumes with an error result. If the response is a successful result, it returns a Mono with the result.\n     */\n    private Mono<QueryExecutionResult> executeQueryNode(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            long timeout, QueryVisitorContext queryVisitorContext) {\n        WebClient webClient = WebClient.create(datasource.getUrl());\n        webClient.get().uri(uriBuilder -> uriBuilder.path(\"/query\").queryParam(\"timeout\", timeout).build())\n                .header(HttpHeaders.CONTENT", "CodeBleu_score": 46.321145065414164}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        try {\n            long timeout = getTimeout(timeoutStr);\n            Mono<QueryExecutionResult> queryExecutionResultMono = null;\n            if (datasource.getDatasourceType() == DatasourceType.NODE) {\n                queryExecutionResultMono = executeQueryOnNode(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n            } else {\n                queryExecutionResultMono = executeQueryLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n            }\n            return queryExecutionResultMono;\n        } catch (TimeoutException e) {\n            return Mono.just(new QueryExecutionResult(QueryExecutionStatus.TIMEOUT, null, null, null, null, null, null));\n        } catch (PluginException e) {\n            return Mono.just(new QueryExecutionResult(QueryExecutionStatus.ERROR, null, null, null, null, null, null));\n        } catch (Exception e) {\n            log.error(\"Error while executing query\", e);\n            return Mono.just(new QueryExecutionResult(QueryExecutionStatus.ERROR, null, null, null, null, null, null));\n        }\n    }\n", "CodeBleu_score": 42.395784946872304}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)        long timeout = Long.parseLong(timeoutStr);\n        Mono<QueryExecutionResult> result = null;\n        if (datasource.getType().equals(Datasource.TYPE_NODE)) {\n            result = executeNodeQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            result = executeLocalQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n        return result.timeout(Duration.ofMillis(timeout)).onErrorResume(TimeoutException.class, e -> {\n            return Mono.just(QueryExecutionResult.error(QueryExecutionError.TIMEOUT, \"Query execution timed out\"));\n        }).onErrorResume(PluginException.class, e -> {\n            return Mono.just(QueryExecutionResult.error(QueryExecutionError.PLUGIN_ERROR, \"Plugin error: \" + e.getMessage()));\n        }).doOnError(e -> {\n            log.error(\"Error while executing query\", e);\n        }).onErrorResume(e -> {\n            return Mono.just(QueryExecutionResult.error(QueryExecutionError.EXECUTION_ERROR, \"Query execution error: \" + e.getMessage()));\n        });\n    }\n    \n    /**\n * This function executes a query on a given datasource with specified configurations and parameters using Node.js. It creates a plugin instance and invokes the `executeQuery` method with the given query configurations, request parameters, timeout duration, and query visitor context. It handles the response by mapping the result to a `QueryExecutionResult` object. If the response contains an error, it logs the error and maps it to a generic query execution error.\n */\n private Mono<QueryExecutionResult> executeNodeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            long timeout, QueryVisitorContext queryVisitorContext) {\n        return Mono.fromCallable(() -> {\n            Plugin plugin = PluginRegistry.getPlugin(datasource.getPluginId());\n            Map<String, Object> response = plugin.executeQuery(queryConfig, requestParams, timeout, queryVisitorContext);\n            if (response", "CodeBleu_score": 45.188032524061384}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)        QueryExecutor queryExecutor = queryExecutorFactory.getQueryExecutor(datasource.getDatasourceType());\n        QueryExecutionContext queryExecutionContext = queryExecutor.buildQueryExecutionContext(queryConfig, requestParams);\n        Connection connection = datasource.getConnectionPool().getConnection();\n        return Mono.fromCallable(() -> queryExecutor.execute(queryExecutionContext, connection))\n                .doOnSuccess(result -> {\n                    queryVisitorContext.getQueryExecutionContext().setResult(result);\n                })\n                .onErrorResume(throwable -> {\n                    queryVisitorContext.getQueryExecutionContext().setError(throwable.getMessage());\n                    return Mono.just(new QueryExecutionResult());\n                });\n    }\n", "CodeBleu_score": 46.19233755627381}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)        return Mono.fromCallable(() -> {\n            QueryExecutor queryExecutor = getQueryExecutor(datasource);\n            QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n            Connection connection = datasource.getConnection();\n            return queryExecutor.executeQuery(connection, queryExecutionContext);\n        }).onErrorResume(throwable -> {\n            log.error(\"Error while executing query locally\", throwable);\n            return Mono.error(new QueryExecutionException(\"Error while executing query locally\", throwable));\n        });\n    }", "CodeBleu_score": 46.81433817191425}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)    QueryExecutor queryExecutor = getQueryExecutor(datasource);\n    QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryVisitorContext, requestParams);\n    return Mono.usingWhen(\n            Mono.fromCallable(() -> datasource.getConnectionPool().acquireConnection()),\n            connection -> {\n                try {\n                    return queryExecutor.execute(connection, queryExecutionContext);\n                } catch (Exception e) {\n                    return Mono.error(e);\n                }\n            },\n            connection -> Mono.fromRunnable(() -> datasource.getConnectionPool().releaseConnection(connection)),\n            error -> Mono.error(error));\n}\n", "CodeBleu_score": 42.302434406785046}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr)    if (timeoutStr == null || timeoutStr.trim().length() == 0) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    try {\n        String[] split = timeoutStr.trim().split(\"\\\\s+\");\n        if (split.length != 2) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        int value = Integer.parseInt(split[0]);\n        String unit = split[1];\n        if (unit.equalsIgnoreCase(\"ms\")) {\n            return value;\n        } else if (unit.equalsIgnoreCase(\"s\")) {\n            return value * 1000;\n        } else if (unit.equalsIgnoreCase(\"m\")) {\n            return value * 60 * 1000;\n        } else if (unit.equalsIgnoreCase(\"h\")) {\n            return value * 60 * 60 * 1000;\n        } else {\n            throw new IllegalArgumentException(\"Invalid timeout unit: \" + unit);\n        }\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n    }\n}", "CodeBleu_score": 31.077610248696253}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)    if (timeoutStr == null || timeoutStr.trim().length() == 0) {\n        timeoutStr = DEFAULT_QUERY_TIMEOUT;\n    }\n    String timeoutStr1 = timeoutStr.trim();\n    if (timeoutStr1.endsWith(\"ms\")) {\n        int timeoutMs = Integer.parseInt(timeoutStr1.substring(0, timeoutStr1.length() - 2));\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Query timeout cannot be greater than \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n        }\n        return timeoutMs;\n    } else if (timeoutStr1.endsWith(\"s\")) {\n        int timeoutMs = Integer.parseInt(timeoutStr1.substring(0, timeoutStr1.length() - 1)) * 1000;\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Query timeout cannot be greater than \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n        }\n        return timeoutMs;\n    } else {\n        throw new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n    }\n}", "CodeBleu_score": 34.640619728321376}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    String[] parts = timeoutStr.split(\"\\\\s*([a-zA-Z]+)\\\\s*\");\n    if (parts.length != 2) {\n        throw new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n    }\n    String valueStr = parts[0];\n    String unitStr = parts[1];\n    int value;\n    try {\n        value = Integer.parseInt(valueStr);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid query timeout value: \" + valueStr);\n    }\n    if (value < 0) {\n        throw new IllegalArgumentException(\"Query timeout value must be positive: \" + value);\n    }\n    int unit;\n    switch (unitStr.toLowerCase()) {\n        case \"ms\":\n            unit = 1;\n            break;\n        case \"s\":\n            unit = 1000;\n            break;\n        case \"m\":\n            unit = 60 * 1000;\n            break;\n        case \"h\":\n            unit = 60 * 60 * 1000;\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid query timeout unit: \" + unitStr);\n    }\n    int timeout = value * unit;\n    if (timeout > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout exceeds maximum allowed value: \" + timeout);\n    }\n    return timeout;\n}", "CodeBleu_score": 36.41951691575878}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)        // Retrieve the live queries from the given application\n        Mono<List<LiveQuery>> liveQueries = liveQueryRepository.findByApplicationId(application.getId());\n        // Extract the datasource IDs from the live queries\n        return liveQueries.flatMap(liveQueries1 -> {\n            List<String> datasourceIds = liveQueries1.stream()\n                    .map(liveQuery -> liveQuery.getDatasource().getId())\n                    .collect(Collectors.toList());\n            if (datasourceIds.isEmpty()) {\n                // If no datasource IDs are found, return an error\n                return Mono.error(new RuntimeException(\"No datasource IDs found for application \" + application.getId()));\n            }\n            // Iterate over the datasource IDs, copying each datasource to the current organization\n            return Flux.fromIterable(datasourceIds)\n                    .flatMap(datasourceId -> datasourceService.copyDatasource(currentOrganizationId, datasourceId, visitorId))\n                    .collectList()\n                    .map(copiedDatasourceIds -> {\n                        // Return a list of original and copied datasource ID pairs\n                        List<Pair<String, String>> originalAndCopiedDatasourceIds = new ArrayList<>();\n                        for (int i = 0; i < datasourceIds.size(); i++) {\n                            originalAndCopiedDatasourceIds.add(Pair.of(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n                        }\n                        return originalAndCopiedDatasourceIds;\n                    });\n        });\n    }\n\n\n", "CodeBleu_score": 48.622000483412926}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)    return Mono.zip(\n            getLiveQueries(application.getId(), visitorId)\n                    .flatMap(liveQueries -> {\n                        List<String> datasourceIds = new ArrayList<>();\n                        liveQueries.forEach(liveQuery -> {\n                            datasourceIds.addAll(liveQuery.getDatasourceIds());\n                        });\n                        return datasourceIds.isEmpty() ? Mono.error(new IllegalArgumentException(\"No datasources found for application \" + application.getName()))\n                                : Mono.just(datasourceIds);\n                    }),\n            Mono.just(currentOrganizationId))\n            .flatMap(tuple -> {\n                List<String> datasourceIds = tuple.getT1();\n                String currentOrganizationId = tuple.getT2();\n                List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> {\n                            return datasourceService.copyDatasource(datasourceId, currentOrganizationId)\n                                    .flatMap(copiedDatasource -> {\n                                        datasourceIdPairs.add(new Pair<>(datasourceId, copiedDatasource.getId()));\n                                        return Mono.just(copiedDatasource);\n                                    });\n                        })\n                        .then(Mono.just(datasourceIdPairs));\n            });\n}\n", "CodeBleu_score": 37.81372835111411}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)        return getLiveQueriesFromApplication(application.getId())\n                .flatMapMany(Flux::fromIterable)\n                .flatMap(liveQuery -> {\n                    List<String> datasourceIds = liveQuery.getDatasourceIds();\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new IllegalArgumentException(\"No datasource IDs found in the live query\"));\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> copyDatasourceToCurrentOrganization(currentOrganizationId, datasourceId, visitorId));\n                })\n                .collectList()\n                .map(copiedDatasources -> copiedDatasources.stream()\n                        .map(copiedDatasource -> new Pair<>(copiedDatasource.getOriginalDatasourceId(), copiedDatasource.getCopiedDatasourceId()))\n                        .collect(Collectors.toList()));\n    }\n\n    /**\n     * This function copies a datasource from a template to the current organization. It retrieves the datasource from the template organization, sets the organization ID to the current organization ID, and saves the datasource to the current organization. It then returns a Mono that emits a pair of the original and copied datasource IDs.\n     */\n    private Mono<Pair<String, String>> copyDatasourceToCurrentOrganization(String currentOrganizationId, String datasourceId,\n            String visitorId) {\n        return getDatasourceFromTemplate(datasourceId, visitorId)\n                .map(datasource -> {\n                    datasource.setOrganizationId(currentOrganizationId);\n                    return datasource;\n                })\n                .flatMap(datasource -> saveDatasourceToCurrentOrganization(datasource, visitorId))\n                .map(copiedDatasource -> new Pair<>(datasourceId, copiedDatasource.getId()));\n    }\n\n    /**\n     * This function retrieves the datasource from the template organization.\n     */\n    private Mono<Datasource> getDatasourceFromTemplate(String datasourceId, String visitorId) {\n        return datasourceRepository.", "CodeBleu_score": 37.69327638379861}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return Mono.from(datasourceService.getDatasourceById(datasourceId))\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.getDatasourceType() == DatasourceType.QUICK_REST_API || datasource.getDatasourceType() == DatasourceType.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasourceId);\n                }\n                return Mono.from(datasourceService.createDatasource(organizationId, visitorId, datasource.getDatasourceType(), datasource.getDatasourceTypeConfig(), datasource.getDatasourceConfig(), datasource.getDatasourceName(), datasource.getDatasourceDescription(), datasource.getDatasourceTags(), datasource.getDatasourceIcon(), datasource.getDatasourceIconColor(), datasource.getDatasourceIconBackgroundColor(), datasource.getDatasourceIconShape(), datasource.getDatasourceIconSize(), datasource.getDatasourceIconUrl(), datasource.getDatasourceIconUrlType(), datasource.getDatasourceIconUrlBackgroundColor(), datasource.getDatasourceIconUrlBackgroundColorType(), datasource.getDatasourceIconUrlBackgroundColorOpacity(), datasource.getDatasourceIconUrlBackgroundColorOpacityType(), datasource.getDatasourceIconUrlBackgroundColorOpacityValue(), datasource.getDatasourceIconUrlBackgroundColorOpacityValueType(), datasource.getDatasourceIconUrlBackgroundColorOpacityValue(), datasource.getDatasourceIconUrlBackgroundColorOpacityValueType(), datasource.getDatasourceIconUrlBackgroundColorOpacityValue(), datasource.getDatasourceIconUrlBackgroundColorOpacityValueType(), datasource.getDatasourceIconUrlBackgroundColorOpacityValue(), datasource.getDatasourceIconUrlBackgroundColorOpacityValueType(), datasource.getDatasourceIconUrlBackgroundColorOpacityValue(), datasource.getDatasourceIconUrlBackgroundColorOpacityValueType(), datasource.getDatasourceIconUrlBackgroundColorOpacityValue(),", "CodeBleu_score": 44.71965915639483}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return Mono.just(datasourceId)\n            .flatMap(id -> datasourceService.getDatasource(id))\n            .flatMap(datasource -> {\n                if (datasource.getType() == DatasourceType.STATIC) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getType() == DatasourceType.REST) {\n                    return Mono.just(datasource.getRestDatasource().getNewId());\n                }\n                if (datasource.getType() == DatasourceType.OPENBLOCKS) {\n                    return Mono.just(datasource.getOpenblocksDatasource().getNewId());\n                }\n                return Mono.just(datasource.getId())\n                        .flatMap(id -> datasourceService.copyDatasource(organizationId, id, visitorId));\n            });\n}", "CodeBleu_score": 59.498621870861825}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)    return this.datasourceService.getDatasource(datasourceId).flatMap(datasource -> {\n        if (datasource.isSystemStatic()) {\n            return Mono.just(datasourceId);\n        }\n        if (datasource.getDatasourceType() == DatasourceType.LEGACY_QUICK_REST_API || datasource.getDatasourceType() == DatasourceType.LEGACY_OPENBLOCKS_API) {\n            return Mono.just(datasourceId);\n        }\n        return this.datasourceService.createDatasource(organizationId, datasource.getDatasourceType(), datasource.getDatasourceConfig(), visitorId).flatMap(newDatasource -> {\n            return this.datasourceService.copyDatasource(datasourceId, newDatasource.getId(), visitorId).flatMap(copyDatasourceResult -> {\n                return Mono.just(newDatasource.getId());\n            });\n        });\n    });\n}", "CodeBleu_score": 56.60797928723292}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)    return uploadFile(filePart, user)\n        .flatMap(file -> {\n            if (user.getAvatar() != null) {\n                return removeFile(user.getAvatar())\n                    .flatMap(removed -> {\n                        user.setAvatar(file);\n                        return updateUser(user);\n                    });\n            } else {\n                user.setAvatar(file);\n                return updateUser(user);\n            }\n        })\n        .map(updated -> true)\n        .onErrorReturn(false);\n}\n", "CodeBleu_score": 29.044720102081516}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)    return uploadFile(filePart)\n        .flatMap(file -> {\n            if (user.getAvatar() != null) {\n                return deleteFile(user.getAvatar())\n                    .flatMap(deleted -> {\n                        if (deleted) {\n                            return Mono.just(true);\n                        } else {\n                            return Mono.just(false);\n                        }\n                    });\n            } else {\n                return Mono.just(true);\n            }\n        })\n        .flatMap(result -> {\n            if (result) {\n                user.setAvatar(file);\n                return userRepository.save(user);\n            } else {\n                return Mono.empty();\n            }\n        })\n        .flatMap(savedUser -> {\n            if (savedUser != null) {\n                return Mono.just(true);\n            } else {\n                return Mono.just(false);\n            }\n        });\n}", "CodeBleu_score": 25.18898163298202}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user)    return uploadFile(filePart)\n        .flatMap(url -> {\n            if (user.getAvatar() != null) {\n                return removeFile(user.getAvatar())\n                    .flatMap(removed -> {\n                        if (removed) {\n                            user.setAvatar(url);\n                            return userRepository.save(user)\n                                .map(u -> true);\n                        }\n                        return Mono.just(false);\n                    });\n            }\n            user.setAvatar(url);\n            return userRepository.save(user)\n                .map(u -> true);\n        });\n}\n", "CodeBleu_score": 30.896305483708048}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    return Mono.just(new User())\n            .map(user -> {\n                user.setName(authUser.getName());\n                user.setState(UserState.ENABLED);\n                user.setEnabled(true);\n                user.setAvatar(authUser.getAvatar());\n                return user;\n            })\n            .flatMap(user -> {\n                if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n                    user.setPassword(passwordEncoder.encode(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n                }\n                return userRepository.save(user);\n            })\n            .flatMap(user -> {\n                user.setNew(true);\n                return userRepository.save(user);\n            })\n            .flatMap(user -> {\n                return userConnectionService.createUserConnections(user, authUser);\n            })\n            .flatMap(user -> {\n                return user;\n            });\n}", "CodeBleu_score": 40.86042769556849}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ENABLED);\n    user.setAvatar(authUser.getAvatar());\n    user.setEnabled(true);\n    if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(AuthContextKey.PASSWORD)) {\n        user.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContextKey.PASSWORD)));\n    }\n    user.setNew(true);\n    return userRepository.save(user).flatMap(user1 -> {\n        user1.setConnections(authUser.getConnections());\n        return userRepository.save(user1);\n    });\n}", "CodeBleu_score": 45.71194489699195}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)    return Mono.just(authUser)\n        .map(authUser1 -> {\n            User user = new User();\n            user.setName(authUser1.getName());\n            user.setState(UserState.ENABLED);\n            user.setAvatar(authUser1.getAvatar());\n            user.setEnabled(true);\n            if (authUser1.getAuthSource() == AuthSource.EMAIL && !authUser1.getAuthContext().isEmpty()) {\n                user.setPassword(passwordEncoder.encode(authUser1.getAuthContext().get(0).getPassword()));\n            }\n            user.setNewUser(true);\n            return user;\n        })\n        .flatMap(user -> {\n            return userRepository.save(user)\n                .flatMap(user1 -> {\n                    return Mono.just(user1)\n                        .flatMap(user2 -> {\n                            return Mono.just(authUser)\n                                .map(authUser2 -> {\n                                    user2.setConnections(authUser2.getConnections().stream()\n                                        .map(authConnection -> {\n                                            Connection connection = new Connection();\n                                            connection.setAuthSource(authConnection.getAuthSource());\n                                            connection.setAuthId(authConnection.getAuthId());\n                                            return connection;\n                                        })\n                                        .collect(Collectors.toSet()));\n                                    return user2;\n                                })\n                                .flatMap(user3 -> {\n                                    return userRepository.save(user3);\n                                });\n                        });\n                });\n        });\n}", "CodeBleu_score": 36.55045952890587}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email)    return Mono.just(email)\n            .map(Email::new)\n            .flatMap(emailSource -> {\n                user.getConnections().add(emailSource);\n                return userRepository.save(user);\n            })\n            .map(savedUser -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n            .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 26.748572285536966}, {"code": "public Mono<Boolean> bindEmail(User user, String email)    return Mono.fromCallable(() -> {\n        // Create a new connection with the email source\n        Connection connection = new Connection();\n        connection.setSource(email);\n        connection.setType(ConnectionType.EMAIL);\n        // Add the connection to the user's connections\n        user.getConnections().add(connection);\n        // Save the user\n        userRepository.save(user);\n        return true;\n    })\n    .onErrorMap(DuplicateKeyException.class, e -> new UserAlreadyExistsException(user.getUsername()))\n    .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 30.59807794262704}, {"code": "public Mono<Boolean> bindEmail(User user, String email)    return Mono.create(sink -> {\n        try {\n            user.getConnections().add(new Connection(email, Connection.Type.EMAIL));\n            sink.success(userRepository.save(user).block());\n        } catch (DuplicateKeyException e) {\n            sink.error(new UserAlreadyExistsException(\"Email already in use\"));\n        }\n    });\n}", "CodeBleu_score": 22.253479115907034}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                user.setPassword(passwordEncoder.encode(newPassword));\n                return userRepository.save(user).thenReturn(true);\n            } else {\n                return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n            }\n        })\n        .onErrorResume(InvalidPasswordException.class, error -> Mono.just(false));\n}\n", "CodeBleu_score": 28.06265357115741}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (passwordEncoder.matches(oldPassword, user.getPassword())) {\n                return userRepository.updatePassword(userId, passwordEncoder.encode(newPassword))\n                    .thenReturn(true);\n            } else {\n                return Mono.error(new IllegalArgumentException(\"Invalid password\"));\n            }\n        })\n        .onErrorReturn(false);\n}", "CodeBleu_score": 22.401118331682028}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (!user.getPassword().equals(oldPassword)) {\n                    return Mono.error(new IllegalArgumentException(\"Invalid password\"));\n                }\n                user.setPassword(newPassword);\n                return userRepository.save(user);\n            })\n            .map(user -> true)\n            .onErrorReturn(false);\n}\n", "CodeBleu_score": 22.639071402600987}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)    // Retrieve the list of groups the user is a member of\n    Mono<List<Group>> groups = retrieveUserGroups(userId, withoutDynamicGroups);\n\n    // Retrieve the list of localized group names for the groups the user is a member of\n    Mono<List<String>> localizedGroupNames = groups.flatMap(groupList -> {\n        List<String> groupIds = groupList.stream().map(Group::getId).collect(Collectors.toList());\n        return getLocalizedGroupNames(groupIds, locale);\n    });\n\n    // Build the list of maps containing group IDs and localized group names\n    return Mono.zip(groups, localizedGroupNames, (groupList, localizedGroupNames) -> {\n        List<Map<String, String>> groupMaps = new ArrayList<>();\n        for (int i = 0; i < groupList.size(); i++) {\n            Group group = groupList.get(i);\n            String groupId = group.getId();\n            String localizedGroupName = localizedGroupNames.get(i);\n            if (!groupId.equals(ALL_USERS_GROUP_ID)) {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(\"id\", groupId);\n                groupMap.put(\"name\", localizedGroupName);\n                groupMaps.add(groupMap);\n            }\n        }\n        return groupMaps;\n    });\n}\n", "CodeBleu_score": 37.50769068643661}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)    return getGroups(userId, orgMember, withoutDynamicGroups).map(groups -> {\n        List<Map<String, String>> groupList = new ArrayList<>();\n        for (Group group : groups) {\n            if (group.getId() != null && !\"all\".equals(group.getId())) {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(\"id\", group.getId());\n                groupMap.put(\"name\", group.getName(locale));\n                groupList.add(groupMap);\n            }\n        }\n        return groupList;\n    });\n}", "CodeBleu_score": 28.660613567597625}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)    if (orgMember.isAdmin()) {\n        return getAllUserGroups(userId, locale);\n    } else {\n        return getUserGroups(userId, withoutDynamicGroups, locale);\n    }\n}\n", "CodeBleu_score": 12.714016029000238}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    return Mono.just(UserStatus.builder().userId(userId).hasShowNewUserGuidance(true).build())\n            .flatMap(userStatus -> mongoUpsertHelper(userStatus, UserStatus.class, UserStatus::getUserId))\n            .map(upsertResult -> upsertResult.getMatchedCount() == 0 || upsertResult.getModifiedCount() == 1);\n}", "CodeBleu_score": 30.30039447545352}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class, \"userId\", userId);\n}", "CodeBleu_score": 37.639845532134466}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, new Query(Criteria.where(\"userId\").is(userId)), UserStatus.class)\n        .map(result -> true);\n}", "CodeBleu_score": 33.4377844054358}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tgroup := new(errgroup.Group)\n\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p.manager) {\n\t\t\tgroup.Go(func() error {\n\t\t\t\tp.manager.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\tif err := group.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n}\n", "CodeBleu_score": 37.89353244000313}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\trunGroup := NewRunGroup()\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Key, p.Partition) {\n\t\t\trunGroup.Run(func() {\n\t\t\t\tp.Partition.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trunGroup.Wait()\n}\n\n", "CodeBleu_score": 35.255896993424855}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\trunGroup := NewRunGroup()\n\n\tc.partitions.Range(func(k, v any) bool {\n\t\tpartition := v.(PartitionManager)\n\t\tif predicatePartition(k.(string), partition) {\n\t\t\trunGroup.Run(func() {\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t\treturn true\n\t})\n\n\trunGroup.Wait()\n}\n", "CodeBleu_score": 36.97266361344506}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(math.Sqrt(averageWeightPerPartition * float64(maxItemsTotal))))\n}\n", "CodeBleu_score": 45.69281463310605}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(averageWeightPerPartition / 0.9))\n}\n", "CodeBleu_score": 38.7691245009624}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(avgWeightPerPartition / float64(maxItemsTotal)))\n\treturn maxSizePerPartition\n}\n", "CodeBleu_score": 41.063667660146166}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap()    Map<String, Object> contributorMap = new HashMap<String, Object>();\n    DatabaseMetaData metadata = null;\n    try {\n        metadata = connection.getMetaData();\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    if (metadata != null) {\n        try {\n            contributorMap.put(\"Database Product Name\", metadata.getDatabaseProductName());\n            contributorMap.put(\"Database Product Version\", metadata.getDatabaseProductVersion());\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    return contributorMap;\n}", "CodeBleu_score": 51.774157313513}, {"code": "public Map<String, Object> contributorMap()    Map<String, Object> contributorMap = new HashMap<String, Object>();\n    DatabaseMetaData dbmd = null;\n    try {\n        dbmd = connection.getMetaData();\n    } catch (SQLException e) {\n        logger.log(Level.SEVERE, \"Unable to retrieve database metadata\", e);\n    }\n    if (dbmd != null) {\n        try {\n            contributorMap.put(\"databaseProductName\", dbmd.getDatabaseProductName());\n            contributorMap.put(\"databaseProductVersion\", dbmd.getDatabaseProductVersion());\n        } catch (SQLException e) {\n            logger.log(Level.SEVERE, \"Unable to retrieve database metadata\", e);\n        }\n    }\n    return contributorMap;\n}", "CodeBleu_score": 50.24047215767904}, {"code": "public Map<String, Object> contributorMap()    Map<String, Object> map = new HashMap<>();\n    DatabaseMetaData dbmd = connection.getMetaData();\n    if (dbmd != null) {\n        map.put(\"databaseProductName\", dbmd.getDatabaseProductName());\n        map.put(\"databaseProductVersion\", dbmd.getDatabaseProductVersion());\n    }\n    return map;\n}", "CodeBleu_score": 43.027157871964235}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    // Get user settings from the configuration map\n    ConfigMap userSettings = configMap.getUserSettings();\n    if (userSettings == null) {\n        // Disable registration and email verification on registration\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        // Update GlobalInfo object with user settings\n        info.setRegistrationEnabled(userSettings.getRegistrationEnabled());\n        info.setEmailVerificationEnabled(userSettings.getEmailVerificationEnabled());\n    }\n}", "CodeBleu_score": 40.179632101396535}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    if (configMap.getUserSettings() == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(configMap.getUserSettings().isRegistrationEnabled());\n        info.setEmailVerificationEnabled(configMap.getUserSettings().isEmailVerificationEnabled());\n    }\n}", "CodeBleu_score": 32.19880314816803}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)    Map<String, Object> userSettings = configMap.get(ConfigMap.USER_SETTINGS);\n    if (userSettings == null) {\n        info.setDisableRegistration(true);\n        info.setDisableEmailVerification(true);\n    } else {\n        info.setDisableRegistration((Boolean) userSettings.get(ConfigMap.DISABLE_REGISTRATION));\n        info.setDisableEmailVerification((Boolean) userSettings.get(ConfigMap.DISABLE_EMAIL_VERIFICATION));\n    }\n}", "CodeBleu_score": 31.22542118204911}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart()    ThreadGroup tg = new ThreadGroup(\"restart\");\n    Thread t = new Thread(tg, new RestartThread(), \"restart\", 1024 * 1024);\n    t.setContextClassLoader(getClass().getClassLoader());\n    t.setDaemon(false);\n    t.start();\n    return \"restarting...\";\n}", "CodeBleu_score": 46.91336541829757}, {"code": "public Object restart()    new Thread(() -> {\n        try {\n            Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n            Thread.currentThread().setDaemon(false);\n            Thread.currentThread().start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }, \"restart\").start();\n    return \"restart has begun\";\n}", "CodeBleu_score": 25.015749805182374}, {"code": "public Object restart()    ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, new Runnable() {\n        @Override\n        public void run() {\n            try {\n                Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                Thread.currentThread().setDaemon(false);\n                Thread.currentThread().start();\n                Thread.sleep(1000);\n                System.exit(0);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    thread.start();\n    return \"restarting...\";\n}", "CodeBleu_score": 44.6916505376634}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 67.95574968143305}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)    ObjectMapper mapper = new ObjectMapper();\n    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    mapper.registerModule(new JavaTimeModule());\n    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(mapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(mapper));\n}\n", "CodeBleu_score": 45.348277329369814}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer)    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}\n", "CodeBleu_score": 67.95574968143305}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return RouterFunctions.route(\n            GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)),\n            request -> {\n                String path = request.path().substring(request.path().indexOf(\"/console\") + 8);\n                if (path.startsWith(\"/assets\")) {\n                    return Mono.empty();\n                }\n                return ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(\n                        Mono.just(\n                                new ClassPathResource(\"static/console/index.html\")\n                        ),\n                        Resource.class\n                );\n            }\n    );\n}", "CodeBleu_score": 31.719045860034424}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return RouterFunctions.route(\n            GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)),\n            request -> {\n                String path = request.path().replace(\"/console\", \"\");\n                if (path.startsWith(\"/assets/\")) {\n                    return ServerResponse.notFound().build();\n                }\n                return ServerResponse.ok()\n                        .contentType(MediaType.TEXT_HTML)\n                        .body(\n                                Mono.fromSupplier(\n                                        () -> {\n                                            try {\n                                                return new ClassPathResource(\n                                                                \"static/console/index.html\")\n                                                        .getInputStream();\n                                            } catch (IOException e) {\n                                                throw new UncheckedIOException(e);\n                                            }\n                                        }),\n                                byte[].class);\n            });\n}\n", "CodeBleu_score": 26.759684475143754}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()    return RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)),\n            request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).bodyValue(\n                    new ClassPathResource(\"/static/console/index.html\"))\n    );\n}\n", "CodeBleu_score": 24.566960619656307}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect()    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)),\n            request -> {\n                String path = request.path();\n                if (path.startsWith(\"/uc/assets/\")) {\n                    return ServerResponse.notFound().build();\n                }\n                return ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n                        .body(BodyInserters.fromResource(\"classpath:static/uc/index.html\"));\n            });\n}\n", "CodeBleu_score": 25.14546565502862}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()    return RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n            .and(RequestPredicates.not(RequestPredicates.websocket())),\n            request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(\n                    Mono.just(FileSystemResourceLoader.getInstance().getResource(\n                            \"classpath:static/index.html\")),\n                    Resource.class)\n    );\n}\n", "CodeBleu_score": 23.552429357931796}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n                    .and(RequestPredicates.not(RequestPredicates.websocket())),\n            request -> ServerResponse.ok()\n                    .contentType(MediaType.TEXT_HTML)\n                    .bodyValue(\n                            FileSystemResourceLoader.from(\n                                    Paths.get(\n                                            ucLocation.toAbsolutePath().toString(),\n                                            \"index.html\"))));\n}", "CodeBleu_score": 21.8703693279142}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    @Bean\n    public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n        MapSessionRepository sessionRepository = new MapSessionRepository(new ConcurrentHashMap<>());\n        sessionRepository.setDefaultMaxInactiveInterval(sessionProperties.getMaxInactiveInterval().toMillis());\n        return new CustomSessionRepository(sessionRepository);\n    }\n}", "CodeBleu_score": 34.54106925547485}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    @Bean\n    public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n        MapSessionProperties properties = new MapSessionProperties();\n        properties.setDefaultMaxInactiveInterval(sessionProperties.getTimeout().getSeconds());\n        MapSessionRepository sessionRepository = new MapSessionRepository(properties);\n        return new ReactiveMapSessionRepository(sessionRepository);\n    }\n}", "CodeBleu_score": 28.28979517634923}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository    return new MapSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 10.901803933258556}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isEnableTwoFactorAuthentication());\n    return userDetailsService;\n}", "CodeBleu_score": 46.477903855395006}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactorEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 50.04586961474673}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 46.49189567061319}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner.Builder builder = Comment.CommentOwner.newBuilder();\n    builder.setKind(\"email\");\n    builder.setEmail(this.email != null ? this.email : \"\");\n    builder.setDisplayName(this.name);\n    builder.setAvatarUrl(this.avatarUrl != null ? this.avatarUrl : \"\");\n    builder.setWebsiteUrl(this.websiteUrl != null ? this.websiteUrl : \"\");\n    return builder.build();\n}", "CodeBleu_score": 24.72278407174633}, {"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner.Builder builder = Comment.CommentOwner.newBuilder();\n    builder.setKind(Comment.CommentOwner.Kind.EMAIL);\n    builder.setEmail(email == null ? \"\" : email);\n    builder.setDisplayName(displayName);\n    builder.addAnnotations(Annotation.newBuilder().setKey(\"avatar\").setValue(avatar).build());\n    builder.addAnnotations(Annotation.newBuilder().setKey(\"website\").setValue(website).build());\n    return builder.build();\n}\n\n", "CodeBleu_score": 34.82069035724023}, {"code": "public Comment.CommentOwner toCommentOwner()    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(getEmail() == null ? \"\" : getEmail());\n    commentOwner.setDisplayName(getDisplayName());\n    commentOwner.setAvatar(getAvatar());\n    commentOwner.setWebsite(getWebsite());\n    return commentOwner;\n}", "CodeBleu_score": 32.53769303321213}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)    if (commentOwner.kind == 'email') {\n        User user = User.getByEmail(post.owner.email);\n        return user.name == commentOwner.name;\n    } else {\n        return commentOwner.name == post.owner.name;\n    }\n}", "CodeBleu_score": 20.350483490649}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)    if (commentOwner.kind == 'email') {\n        User user = getUserByPostOwner(post);\n        if (user != null && user.email == commentOwner.name) {\n            return true;\n        }\n    } else {\n        return commentOwner.name == post.owner.name;\n    }\n    return false;\n}\n", "CodeBleu_score": 20.720840440700037}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)  if (commentOwner.kind == 'email') {\n    User user = User.getByEmail(post.owner.name);\n    if (user != null) {\n      return user.email == commentOwner.name;\n    }\n  } else {\n    return commentOwner.name == post.owner.name;\n  }\n}\n", "CodeBleu_score": 20.490609246490916}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions()    ListOptions listOptions = new ListOptions();\n    if (this.selectors != null) {\n        listOptions.setFieldSelector(this.selectors.toFieldSelector());\n    }\n    if (this.keyword != null || this.ownerName != null) {\n        listOptions.setLabelSelector(this.toLabelSelector());\n    }\n    return listOptions;\n}", "CodeBleu_score": 11.247000107717396}, {"code": "public ListOptions toListOptions()    ListOptions listOptions = new ListOptions();\n    listOptions.setLabelSelector(labelSelector);\n    listOptions.setFieldSelector(fieldSelector);\n    if (keyword != null) {\n        listOptions.setFieldSelector(fieldSelector + \",\" + labelSelector + \",\" + keyword);\n    }\n    if (ownerName != null) {\n        listOptions.setFieldSelector(fieldSelector + \",\" + labelSelector + \",\" + keyword + \",\" + ownerName);\n    }\n    return listOptions;\n}\n\n", "CodeBleu_score": 19.325573429612493}, {"code": "public ListOptions toListOptions()    ListOptions listOptions = new ListOptions();\n    if (fieldSelector != null) {\n        listOptions.setFieldSelector(fieldSelector.toString());\n    }\n    if (labelSelector != null) {\n        listOptions.setLabelSelector(labelSelector.toString());\n    }\n    if (keyword != null) {\n        listOptions.setFieldSelector(\"metadata.name=\" + keyword);\n    }\n    if (ownerName != null) {\n        listOptions.setFieldSelector(\"metadata.ownerReferences.name=\" + ownerName);\n    }\n    return listOptions;\n}", "CodeBleu_score": 19.039819572288792}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName)    return Mono.justOrEmpty(commentName)\n        .flatMap(name -> counterService.fetchCounter(name))\n        .map(counter -> new CommentStats(counter.getCount(), counter.getUpvotes()))\n        .switchIfEmpty(Mono.just(new CommentStats(0, 0)));\n}", "CodeBleu_score": 37.957528008831176}, {"code": "Mono<CommentStats> fetchStats(String commentName)    return Mono.just(commentName)\n        .filter(Objects::nonNull)\n        .flatMap(c -> counterService.getCounter(c))\n        .map(c -> new CommentStats(c.getCount(), c.getUpvoteCount()))\n        .defaultIfEmpty(new CommentStats(0L, 0L));\n}", "CodeBleu_score": 37.5933891989589}, {"code": "Mono<CommentStats> fetchStats(String commentName)    return Mono.justOrEmpty(commentName)\n        .flatMap(name ->\n            reactiveRedisOperations.opsForValue().get(name)\n                .map(counter -> new CommentStats(commentName, counter.intValue()))\n                .defaultIfEmpty(new CommentStats(commentName, 0)));\n}\n", "CodeBleu_score": 40.33224625708554}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity)    Subscriber subscriber = new Subscriber(identity);\n    InterestReason reason = new InterestReason(InterestReason.Type.SOMEONE_REPLIED_TO_YOU, \"repliedOwner = \" + identity.getName());\n    subscriber.subscribe(reason);\n    subscriber.block();\n}\n", "CodeBleu_score": 34.30260409206193}, {"code": "void subscribeReply(UserIdentity identity)    // Create a subscriber from the given user identity\n    Subscriber subscriber = new Subscriber(identity);\n\n    // Set up an interest reason for the subscription\n    InterestReason reason = new InterestReason();\n    reason.setType(InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(new Condition(Condition.ConditionType.OWNER, identity.getName()));\n\n    // Subscribe the user to the notification center\n    NotificationCenter.subscribe(subscriber, reason);\n\n    // Block until the subscription is completed\n    subscriber.waitForSubscription();\n}\n", "CodeBleu_score": 37.47742999157243}, {"code": "void subscribeReply(UserIdentity identity)    Subscriber subscriber = new Subscriber(identity);\n    subscriber.setInterestReason(new InterestReason(InterestReason.Type.SOMEONE_REPLIED_TO_YOU, new Condition(Condition.Type.OWNER_MATCHES, identity.getName())));\n    NotificationCenter.subscribe(subscriber, new SubscriptionCallback() {\n        @Override\n        public void onSubscriptionCompleted(Subscriber subscriber, Subscription subscription) {\n            // Handle the successful subscription\n        }\n\n        @Override\n        public void onSubscriptionFailed(Subscriber subscriber, Subscription subscription, Exception exception) {\n            // Handle the failed subscription\n        }\n    });\n}\n", "CodeBleu_score": 32.89746099311007}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment)    comment.setApproved(true);\n    comment.setApprovedAt(Instant.now());\n    return client.update(comment).retryWhen(Retry.backoff(3, Duration.ofMillis(100)).filter(this::isOptimisticLockingFailure));\n}", "CodeBleu_score": 19.65763801908319}, {"code": "private Mono<Comment> approveComment(Comment comment)    comment.setApproved(true);\n    comment.setApprovedAt(Instant.now());\n    return client.update(comment, Comment::getVersion, (c, v) -> c.setVersion(v + 1));\n}", "CodeBleu_score": 16.915600681553936}, {"code": "private Mono<Comment> approveComment(Comment comment)    comment.setApproved(true);\n    comment.setLastUpdated(new Date());\n    return client.update(comment, Comment.class, comment.getId())\n            .onErrorResume(OptimisticLockingFailureException.class, e -> client.update(comment, Comment.class, comment.getId()).retry(1));\n}\n", "CodeBleu_score": 28.008032335635647}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->component = $this;\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record = $this->record;\n    }\n\n    return $action;\n}\n", "CodeBleu_score": 44.59312965152541}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}\n", "CodeBleu_score": 49.60499032956861}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction    if ($action instanceof MountableAction) {\n        $action->component = $this;\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record = $this->record;\n    }\n\n    return $action;\n}\n", "CodeBleu_score": 44.59312965152541}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static    $redirectUrl = $this->getSuccessRedirectUrl();\n    if ($redirectUrl) {\n        return $this->redirect($redirectUrl);\n    }\n    return $this;\n}\n", "CodeBleu_score": 48.400720285822764}, {"code": "<?\npublic function dispatchSuccessRedirect(): static    if ($this->successRedirectUrl) {\n        return $this->redirect($this->successRedirectUrl);\n    }\n\n    return $this;\n}\n", "CodeBleu_score": 35.98741497806035}, {"code": "<?\npublic function dispatchSuccessRedirect(): static    $successRedirectUrl = $this->getSuccessRedirectUrl();\n\n    if ($successRedirectUrl) {\n        return $this->redirect($successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 46.56213223741704}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    $tagModelClass = $this->getTagModelClass($state);\n\n    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = new $tagModelClass();\n\n    $tagNames = array_map(function ($tag) {\n        return trim($tag);\n    }, $state['tags']);\n\n    $tags = $tagModel->findOrCreate($tagNames);\n\n    $record->tags()->sync($tags->pluck('id'));\n}\n", "CodeBleu_score": 36.58748582971204}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    if ($record === null || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = $this->getTagModelClass($record);\n\n    $tagNames = Arr::wrap($state['tag_names'] ?? []);\n    $tagNames = array_map('trim', $tagNames);\n    $tagNames = array_filter($tagNames);\n\n    if (empty($tagNames)) {\n        return;\n    }\n\n    $tags = $tagModelClass::whereIn('name', $tagNames)->get();\n\n    $tagsToSync = $tags->pluck('id');\n\n    if ($tags->count() < count($tagNames)) {\n        $tagsToCreate = array_diff($tagNames, $tags->pluck('name')->toArray());\n\n        $tagsToCreate = array_map(function ($tagName) use ($tagModelClass) {\n            return [\n                'name' => $tagName,\n                'slug' => Str::slug($tagName),\n            ];\n        }, $tagsToCreate);\n\n        $tagsToCreate = $tagModelClass::insertGetId($tagsToCreate);\n\n        $tagsToSync = $tagsToSync->merge($tagsToCreate);\n    }\n\n    $record->tags()->sync($tagsToSync);\n}\n", "CodeBleu_score": 41.50624648598213}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void    $recordClass = get_class($record);\n\n    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tags = $this->getTags($state);\n\n    if (empty($tags)) {\n        return;\n    }\n\n    $tagModelClass = Tag::class;\n\n    if (method_exists($recordClass, 'tagModelClass')) {\n        $tagModelClass = $recordClass::tagModelClass();\n    }\n\n    $tagModel = new $tagModelClass;\n\n    $tagIds = [];\n\n    foreach ($tags as $tagName) {\n        $tag = $tagModel::firstOrCreate([\n            'name' => $tagName,\n        ]);\n\n        $tagIds[] = $tag->getKey();\n    }\n\n    $record->tags()->sync($tagIds);\n}\n", "CodeBleu_score": 41.18572264996073}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := util.ParseRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := fmt.Sprintf(\"repository:%s:%s\", spacePath, repoName)\n\tresource := fmt.Sprintf(\"pipeline:%s\", pipelineIdentifier)\n\treturn authorizer.Check(ctx, authorizer.WithFallback(session), scope, resource, permission)\n}\n", "CodeBleu_score": 49.336645473520775}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := util.ParseRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope, resource := buildPipelineScopeAndResource(spacePath, repoName, pipelineIdentifier)\n\treturn authorizer.Check(ctx, authorizer.WithSystemCtx(ctx), session, permission, scope, resource)\n}\n", "CodeBleu_score": 44.28841522839756}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := parseRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.NewScope(authz.ResourceTypePipeline, spacePath, repoName)\n\tresource := authz.NewResource(authz.ResourceTypePipeline, pipelineIdentifier)\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}\n", "CodeBleu_score": 53.7034139759951}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tscope, resource, err := space.ScopeAndResource()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 36.974978106752246}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tscope, resource, err := spaceScopeResource(space)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 37.11466784037211}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tscope, resource, err := getSpaceScopeAndResource(space)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 37.42793194318112}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tmarshaledData, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn marshaledData, nil\n\t}\n\n\tvar decodedData any\n\tif err := json.Unmarshal(source, &decodedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencodedData, err := json.Marshal(decodedData)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn json.RawMessage(strings.TrimSuffix(string(encodedData), \"\\n\")), nil\n}\n", "CodeBleu_score": 33.602386391749754}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\t// Check if the source is empty.\n\tif len(source) == 0 {\n\t\t// Marshal the provided data.\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error marshaling data: %w\", err)\n\t\t}\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields.\n\tvar decodedData any\n\tif err := json.Unmarshal(source, &decodedData); err != nil {\n\t\treturn nil, fmt.Errorf(\"error decoding source JSON: %w\", err)\n\t}\n\n\t// Encode the decoded data to ensure it conforms to the required format.\n\tencodedData, err := json.Marshal(decodedData)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error encoding decoded data: %w\", err)\n\t}\n\n\t// Remove any trailing newline from the result.\n\tresult := bytes.TrimSuffix(encodedData, []byte(\"\\n\"))\n\n\treturn result, nil\n}\n", "CodeBleu_score": 45.27853372527673}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tvar raw map[string]any\n\tif err := json.Unmarshal(source, &raw); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsource, err := json.Marshal(raw)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsource = bytes.TrimSuffix(source, []byte(\"\\n\"))\n\treturn source, nil\n}\n", "CodeBleu_score": 41.77828185787476}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 37.71786329055434}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 37.71786329055434}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 37.71786329055434}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Payload = []byte(in.Payload)\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Payload = []byte(in.Payload)\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Payload = []byte(in.Payload)\n\t\t\treturn nil\n\t\t},\n\t}\n}\n", "CodeBleu_score": 27.065962553146193}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    SanitizeEmptyPayload,\n\t\tenum.CheckPayloadKindRaw:      SanitizeRawPayload,\n\t\tenum.CheckPayloadKindMarkdown: SanitizeMarkdownPayload,\n\t\tenum.CheckPayloadKindPipeline: SanitizePipelinePayload,\n\t}\n}\n", "CodeBleu_score": 27.18283951207455}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:     checkSanitizerEmpty,\n\t\tenum.CheckPayloadKindRaw:       checkSanitizerRaw,\n\t\tenum.CheckPayloadKindMarkdown:  checkSanitizerMarkdown,\n\t\tenum.CheckPayloadKindPipeline:  checkSanitizerPipeline,\n\t\tenum.CheckPayloadKindPipeline2: checkSanitizerPipeline,\n\t}\n}\n", "CodeBleu_score": 29.466904318445092}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)    if not self.attached then\n        self.renderer:attach_buffer(self)\n    end\n    self.state.on_render = on_render\n    return self", "CodeBleu_score": 40.32930272310883}, {"code": "function Buffer:attach_to_renderer(on_render)    if self.renderer then\n        self.renderer:attach_buffer(self)\n        self.state.on_render = on_render\n    else\n        error(\"Buffer is not attached to a renderer\")\n    end\n    return self", "CodeBleu_score": 45.61517560460992}, {"code": "function Buffer:attach_to_renderer(on_render)    self.state.on_render = on_render\n    if not self.state.is_attached then\n        self.state.is_attached = true\n        self.renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 59.544878996926954}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)    local filename = vim.fn.expand('%:p')\n    if vim.v.lnum == 0 then\n        return\n    end\n    if not filename or filename == '' then\n        return\n    end\n    if not callback then\n        return\n    end\n    if not self.watcher then\n        self.watcher = vim.loop.new_fs_watcher()\n    end\n    self.watcher:stop()\n    self.watcher:close()\n    self.watcher = nil\n    if vim.loop.fs_watch_supported then\n        self.watcher = vim.loop.new_fs_watcher()\n        self.watcher:start(filename, function()\n            callback()\n        end)\n    else\n        vim.schedule(function()\n            callback()\n        end)\n    end", "CodeBleu_score": 44.30198490229808}, {"code": "function Buffer:watch(callback)    if not self.valid then\n        return\n    end\n    if not callback then\n        return\n    end\n    local filename = vim.api.nvim_buf_get_name(self.id)\n    if not filename then\n        return\n    end\n    local watcher = vim.loop.new_fs_event(filename, function()\n        callback()\n    end)\n    if not watcher then\n        vim.notify(\"Error watching file: \" .. filename, vim.log.levels.ERROR)\n        return\n    end\n    watcher:start()", "CodeBleu_score": 44.13060265778568}, {"code": "function Buffer:watch(callback)    if not self:isValid() then\n        return\n    end\n\n    if callback == nil then\n        return\n    end\n\n    local filename = self:getFilename()\n    if filename == nil then\n        return\n    end\n\n    local watcher = vim.loop.new_fs_watcher()\n    watcher:set_callback(function()\n        callback()\n    end)\n\n    local err = watcher:add(filename)\n    if err ~= nil then\n        vim.notify(err, vim.log.levels.ERROR)\n        return\n    end\n\n    self.watcher = watcher", "CodeBleu_score": 44.94549518053416}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()    if self.hex then return self.hex end\n\n    local spec = self.spec\n    local attr = self.attr\n    local highlight_name = self.highlight_name\n\n    if attr == \"bg\" then\n        spec = spec .. \" guibg=\"\n    else\n        spec = spec .. \" guifg=\"\n    end\n\n    local ok, hex = pcall(vim.api.nvim_get_hl_by_name, highlight_name, true)\n    if ok then\n        self.hex = hex.foreground\n        return self.hex\n    end\n\n    local ok, hex = pcall(vim.api.nvim_get_hl_by_name, spec, true)\n    if ok then\n        self.hex = hex.foreground\n        return self.hex\n    end\n\n    local ok, hex = pcall(vim.api.nvim_get_hl_by_name, spec .. \" guifg=NONE\", true)\n    if ok then\n        self.hex = hex.background\n        return self.hex\n    end\n\n    local ok, hex = pcall(vim.api.nvim_get_hl_by_name, spec .. \" guibg=NONE\", true)\n    if ok then\n        self.hex = hex.foreground\n        return self.hex\n    end\n\n    return \"\"", "CodeBleu_score": 52.872903008131345}, {"code": "function Color:to_hex()  if self.hex then\n    return self.hex\n  end\n  local spec = self.spec\n  local attr = spec.attr\n  local highlight = vim.api.nvim_get_hl_by_name(spec.name, true)\n  local hex = highlight[attr]\n  if hex then\n    self.hex = hex\n    return hex\n  end\n  local rgb = vim.api.nvim_get_hl_by_name(spec.name, false)\n  if rgb then\n    hex = Color.rgb_to_hex(rgb[attr])\n    self.hex = hex\n    return hex\n  end", "CodeBleu_score": 53.6108154381334}, {"code": "function Color:to_hex()  if self.hex then \n    return self.hex \n  end \n  local spec = self:get_spec() \n  local attribute = self:get_attribute() \n  local highlight_group = attribute == \"foreground\" and spec.fg or spec.bg \n  local ok, hex = pcall(vim.api.nvim_get_hl_by_name, highlight_group, true) \n  if ok then \n    self.hex = hex.foreground \n    return self.hex \n  end \n  return nil ", "CodeBleu_score": 56.383958998684236}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)    local lines = buffer:get_lines()\n    for _, line in ipairs(lines) do\n        for start, end in line:gmatch(pattern) do\n            buffer:add_highlight(start, end, hl)\n        end\n    end\n    return self", "CodeBleu_score": 37.106575887907454}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)    local lines = buffer:get_lines()\n    for i, line in ipairs(lines) do\n        local matches = {}\n        for match in line:gmatch(pattern) do\n            table.insert(matches, match)\n        end\n        for _, match in ipairs(matches) do\n            buffer:add_highlight(i, match:len(), hl)\n        end\n    end\n    return self", "CodeBleu_score": 46.40776583352725}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)    local lines = buffer:get_lines()\n    local hl_added = false\n\n    for _, line in ipairs(lines) do\n        local matches = vim.regex.find(line, pattern)\n        if matches then\n            for _, match in ipairs(matches) do\n                buffer:add_highlight(hl, match[1], match[2])\n                hl_added = true\n            end\n        end\n    end\n\n    return hl_added", "CodeBleu_score": 46.45950584926665}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)    local id = string.format(\"%d-%d\", row, col)\n    vim.api.nvim_buf_set_extmark(buffer, priority, {id = id}, {\n        virt_text = {\n            {text, hl},\n        },\n        virt_pos = pos,\n    })\n    return id", "CodeBleu_score": 51.44425176930443}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)  local id = buffer .. \":\" .. row .. \":\" .. col\n  vim.api.nvim_buf_set_extmark(buffer, priority, {\n    id = id,\n    end_row = row,\n    end_col = col,\n    virt_text = {\n      {text, hl}\n    },\n    virt_pos = pos\n  })\n  return id", "CodeBleu_score": 57.82365748982956}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)    local id = tostring(row) .. \",\" .. tostring(col)\n    vim.api.nvim_buf_set_extmark(buffer, vim.api.nvim_create_namespace(\"transpose_virtual_text\"), id, {\n        virt_text = {\n            { text, hl },\n        },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 56.54753208890241}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)    local lines = {}\n    local line = \"\"\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. char\n        end\n    end\n    if line ~= \"\" then\n        callback(line)\n    end", "CodeBleu_score": 54.22931207834141}, {"code": "function Spawn:parse_result(output, callback)\tlocal result = {}\n\tlocal line = \"\"\n\tfor i, char in ipairs(output) do\n\t\tif char == \"\\n\" then\n\t\t\tcallback(line)\n\t\t\tline = \"\"\n\t\telse\n\t\t\tline = line .. char\n\t\tend\n\tend\n\tif line ~= \"\" then\n\t\tcallback(line)\n\tend", "CodeBleu_score": 31.487817575595557}, {"code": "function Spawn:parse_result(output, callback)    local result = \"\"\n    local line = \"\"\n    for i = 1, #output do\n        local char = string.sub(output, i, i)\n        if char == \"\\n\" then\n            callback(line)\n            line = \"\"\n        else\n            line = line .. char\n        end\n    end\n    if line ~= \"\" then\n        callback(line)\n    end", "CodeBleu_score": 48.45037159514834}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, { recursive = true }, handler)\n    self.watchers[path] = watcher\n\n    return watcher", "CodeBleu_score": 48.03752057584932}, {"code": "function Watcher:watch_file(path, handler)    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event(path, {\n        recursive = true,\n        edge = false,\n        persistent = false,\n    })\n\n    watcher:start(function(err, events)\n        if err then\n            print(err)\n            return\n        end\n\n        for _, event in ipairs(events) do\n            if event.type == \"changed\" or event.type == \"created\" then\n                handler(event.path)\n            end\n        end\n    end)\n\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 42.7957574289193}, {"code": "function Watcher:watch_file(path, handler)  local watcher = self.watcher\n  if watcher then\n    return watcher\n  end\n\n  watcher = vim.loop.new_fs_event()\n  watcher:on(\"file\", function()\n    handler()\n  end)\n  watcher:start(path, { recursive = true })\n  self.watcher = watcher\n  return watcher", "CodeBleu_score": 46.19838591675101}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()  local hunks = {}\n  local buffer_lines = self.buffer:get_lines(1, -1)\n  local git_object = self.git_object\n  local git_repo = git_object:get_repo()\n  local git_index = git_repo:get_index()\n  local git_diff_index = git_repo:diff_index(git_index)\n  local git_diff_buffer = git_repo:diff_tree(git_diff_index, git_object, buffer_lines)\n  local git_diff_hunks = git_diff_buffer:get_hunks()\n  if git_diff_hunks == nil then\n    return git_diff_buffer\n  end\n  for i, git_diff_hunk in ipairs(git_diff_hunks) do\n    local git_diff_lines = git_diff_hunk:get_lines()\n    local git_diff_old_lines = git_diff_hunk:get_old_lines()\n    local git_diff_new_lines = git_diff_hunk:get_new_lines()\n    local git_diff_old_start = git_diff_hunk:get_old_start()\n    local git_diff_new_start = git_diff_hunk:get_new_start()\n    local git_diff_old_lines_count = git_diff_hunk:get_old_lines_count()\n    local git_diff_new_lines_count = git_diff_hunk:get_new_lines_count()\n    local git_diff_old_length = git_diff_hunk:get_old_length()\n    local git_diff_new_length = git_diff_hunk:get_new_length()\n    local git_diff_header = git_diff_hunk:get_header()\n    local git_diff_header_old = git_diff_hunk:get_header_old()\n    local git_diff_header_new = git_diff_hunk:get_header_new()\n    local git_diff_header_func = git_diff_hunk:get_header_func()\n    local git_diff_header_old_func =", "CodeBleu_score": 27.55842456361906}, {"code": "function GitBuffer:live_hunks()    local hunks = {}\n    local error = nil\n    local lines = self.buffer:get_lines()\n    local git = self.git\n    local git_path = git:get_path()\n    local git_repo = git:get_repo()\n    local git_repo_path = git:get_repo_path()\n    local git_repo_worktree = git:get_repo_worktree()\n    local git_repo_worktree_path = git:get_repo_worktree_path()\n    local git_repo_worktree_status = git:get_repo_worktree_status()\n    local git_repo_worktree_status_index = git:get_repo_worktree_status_index()\n    local git_repo_worktree_status_index_path = git:get_repo_worktree_status_index_path()\n    local git_repo_worktree_status_index_staged = git:get_repo_worktree_status_index_staged()\n    local git_repo_worktree_status_index_staged_path = git:get_repo_worktree_status_index_staged_path()\n    local git_repo_worktree_status_index_unstaged = git:get_repo_worktree_status_index_unstaged()\n    local git_repo_worktree_status_index_unstaged_path = git:get_repo_worktree_status_index_unstaged_path()\n    local git_repo_worktree_status_index_untracked = git:get_repo_worktree_status_index_untracked()\n    local git_repo_worktree_status_index_untracked_path = git:get_repo_worktree_status_index_untracked_path()\n    local git_repo_worktree_status_index_unmerged = git:get_repo_worktree_status_index_unmerged()\n    local git_repo_worktree_status_index_unmerged_path = git:get_repo_worktree_status_index_unmerged_path()\n    local git_repo_worktree_status_index_ignored = git:get_", "CodeBleu_score": 14.717194828667402}, {"code": "function GitBuffer:live_hunks()  local hunks = {}\n  local buffer_lines = self:buffer_lines()\n  local git_object = self.git_object\n  local git_file = git_object:get_file()\n  local git_hunks = git_file:get_hunks(buffer_lines)\n  if git_hunks == nil then\n    return git_object:get_error()\n  end\n\n  -- Set up signs for each line in the hunks\n  for _, hunk in ipairs(git_hunks) do\n    local hunk_lines = hunk:get_lines()\n    for _, line in ipairs(hunk_lines) do\n      local sign_type = GitBuffer.sign_types[line.type]\n      local sign_priority = GitBuffer.sign_priorities[line.type]\n      local sign_text = GitBuffer.sign_texts[line.type]\n      local sign_options = {priority = sign_priority, text = sign_text}\n      local sign = self:sign_create(line.number, sign_type, sign_options)\n      table.insert(hunk.signs, sign)\n    end\n    table.insert(hunks, hunk)\n  end\n\n  -- Update the buffer's signs\n  self:sign_update()\n\n  return hunks", "CodeBleu_score": 43.2806691764668}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)    local temp_file = io.open(self.temp_file_path, \"w\")\n    if not temp_file then\n        return \"Failed to open temporary file for writing\"\n    end\n\n    temp_file:write(patch)\n    temp_file:close()\n\n    local result, err = pcall(vim.cmd, \"Git stage \" .. self.temp_file_path)\n    if not result then\n        return \"Failed to stage hunk: \" .. err\n    end\n\n    os.remove(self.temp_file_path)\n    return nil", "CodeBleu_score": 38.7597716159967}, {"code": "function GitObject:stage_hunk_from_patch(patch)  local patch_file = io.open(self.patch_file, \"w\")\n  patch_file:write(patch)\n  patch_file:close()\n\n  local _, error = pcall(function()\n    os.execute(\"git apply --cached --apply --unsafe-paths \" .. self.patch_file)\n  end)\n\n  os.remove(self.patch_file)\n\n  if error then\n    return error\n  end", "CodeBleu_score": 41.41393761721413}, {"code": "function GitObject:stage_hunk_from_patch(patch)    local temp_file = io.open(self.temp_file_path, \"w\")\n    temp_file:write(patch)\n    temp_file:close()\n    local command = \"git add \" .. self.temp_file_path\n    local status, output = pcall(os.execute, command)\n    if not status then\n        return output\n    end\n    os.remove(self.temp_file_path)", "CodeBleu_score": 43.815236598857744}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n    request.addHeader(\"Authorization\", \"OAuth oauth_verifier=\\\"\" + verifier.getValue() + \"\\\"\");\n    request.addBodyParameter(\"oauth_consumer_key\", consumerKey);\n    request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n    request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n    request.addBodyParameter(\"oauth_signature_method\", \"HMAC-SHA1\");\n    request.addBodyParameter(\"oauth_timestamp\", Long.toString(System.currentTimeMillis() / 1000));\n    request.addBodyParameter(\"oauth_nonce\", Long.toString(System.currentTimeMillis()));\n    request.addBodyParameter(\"oauth_version\", \"1.0\");\n    request.addBodyParameter(\"oauth_signature\", generateSignature(request, requestToken.getTokenSecret()));\n    Response response = request.send();\n    return extractAccessToken(response.getBody());\n}", "CodeBleu_score": 48.730542262213106}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n    request.addHeader(\"Authorization\", \"OAuth realm=\\\"\" + realm + \"\\\", oauth_consumer_key=\\\"\" + consumerKey + \"\\\", oauth_token=\\\"\" + requestToken.getToken() + \"\\\", oauth_signature_method=\\\"\" + signatureMethod + \"\\\", oauth_timestamp=\\\"\" + timestamp + \"\\\", oauth_nonce=\\\"\" + nonce + \"\\\", oauth_version=\\\"\" + version + \"\\\", oauth_verifier=\\\"\" + verifier.getValue() + \"\\\"\");\n    request.addBodyParameter(\"oauth_consumer_key\", consumerKey);\n    request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n    request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n    request.addBodyParameter(\"oauth_signature_method\", signatureMethod);\n    request.addBodyParameter(\"oauth_timestamp\", timestamp);\n    request.addBodyParameter(\"oauth_nonce\", nonce);\n    request.addBodyParameter(\"oauth_version\", version);\n    request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n    consumer.sign(request);\n    Response response = request.send();\n    return extractor.extract(response.getBody());\n}", "CodeBleu_score": 44.72182437707439}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)    OAuthRequest request = new OAuthRequest(Verb.POST, getAccessTokenEndpoint());\n    request.addHeader(\"Authorization\", getAuthorizationHeader(requestToken, verifier));\n    request.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.OAUTH_CALLBACK, callback);\n    Response response = request.send();\n    return extractor.extract(response.getBody());\n}", "CodeBleu_score": 56.658526172994364}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host)    // Create a credentials provider with the specified credentials\n    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\n    // Add the host to an authentication cache using the Basic authentication scheme\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n\n    // Assign the credentials provider and auth cache to the context\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n\n    // Log the action of adding the host to the auth cache\n    logger.debug(\"Adding host to auth cache: {}\", host);\n}", "CodeBleu_score": 70.8303512330146}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credentialsProvider);\n    context.getAuthCache().put(host, new BasicScheme());\n    LOGGER.info(\"Added host to auth cache: {}\", host);\n}", "CodeBleu_score": 54.43569624946159}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)    context.setCredentialsProvider(new BasicCredentialsProvider() {\n        @Override\n        public Credentials getCredentials(AuthScope authScope) {\n            if (authScope.getHost().equals(host.getHostName())) {\n                return new UsernamePasswordCredentials(username, password);\n            } else {\n                return null;\n            }\n        }\n    });\n    context.getAuthCache().put(host, new BasicScheme());\n    LOG.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 30.16613092540656}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n    AvatarCache cache = jenkins.getExtension(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not available\");\n    }\n    String key = cache.seed(source);\n    if (key == null) {\n        return null;\n    }\n    String rootUrl = jenkins.getRootUrl();\n    try {\n        key = URLEncoder.encode(key, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\");\n    }\n    return rootUrl + \"avatar/cache/\" + size + \"/\" + key;\n}", "CodeBleu_score": 50.68209975837015}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance not initialized\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension not found\");\n    }\n    String key = cache.seed(source);\n    try {\n        return jenkins.getRootUrl() + \"cache/avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n}", "CodeBleu_score": 51.25180370701406}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not available\");\n    }\n    String key = cache.getKey(source);\n    cache.seed(key);\n    try {\n        return URLEncoder.encode(jenkins.getRootUrl() + \"avatar/\" + key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 51.937924422456916}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = ImageUtils.scale(image, 128, 128);\n    }\n    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 59.922430879271914}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = ImageUtils.scale(image, 128, 128);\n    }\n    this.image = image;\n}", "CodeBleu_score": 60.51926077836798}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)    this.source = source;\n    this.lastModified = lastModified;\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    }\n    if (image != null) {\n        if (image.getWidth() > 128 || image.getHeight() > 128) {\n            image = ImageUtils.scaleImage(image, 128, 128);\n        }\n        this.image = image;\n    }\n}", "CodeBleu_score": 51.65197373491735}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        future = null;\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 44.42060387717879}, {"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            ImageCacheEntry entry = future.get();\n            image = entry.getImage();\n            lastModified = entry.getLastModified();\n            future = null;\n            return false;\n        } catch (Exception e) {\n            future = null;\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 56.16143327750882}, {"code": "private synchronized boolean pending()    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            ImageCacheEntry entry = future.get();\n            image = entry.getImage();\n            lastModified = entry.getLastModified();\n            future = null;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 54.293580685609975}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException            if (node instanceof Job) {\n                Job job = (Job) node;\n                byte[] bytes = generateImage(job, req);\n                if (bytes == null) {\n                    rsp.sendError(HttpServletResponse.SC_NOT_FOUND, \"No graph found\");\n                } else {\n                    rsp.setContentType(\"image/png\");\n                    rsp.setHeader(\"Cache-Control\", \"public, max-age=0\");\n                    rsp.setHeader(\"Pragma\", \"cache\");\n                    rsp.setDateHeader(\"Expires\", 0);\n                    rsp.getOutputStream().write(bytes);\n                    rsp.getOutputStream().flush();\n                }\n            } else {\n                rsp.sendError(HttpServletResponse.SC_NOT_FOUND, \"No graph found\");\n            }\n        }", "CodeBleu_score": 39.41257208727731}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException            // Write the image to a byte array output stream\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(image, \"png\", baos);\n            // Flush the image if required\n            if (flush) {\n                baos.flush();\n            }\n            // Set appropriate headers for caching and content type\n            rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n            rsp.setHeader(\"Pragma\", \"no-cache\");\n            rsp.setHeader(\"Expires\", \"0\");\n            rsp.setContentType(\"image/png\");\n            // Write the byte array to the response output stream\n            rsp.getOutputStream().write(baos.toByteArray());\n        }", "CodeBleu_score": 44.60869948106343}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException            rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n            rsp.setHeader(\"Pragma\", \"no-cache\");\n            rsp.setHeader(\"Expires\", \"0\");\n            rsp.setContentType(\"image/png\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(getImage(req, node), \"png\", baos);\n            if (req.getParameter(\"flush\") != null) {\n                baos.flush();\n            }\n            rsp.getOutputStream().write(baos.toByteArray());\n        }", "CodeBleu_score": 38.657497734747594}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n    this.httpClient = buildHttpClient();\n    this.context = buildContext();\n}", "CodeBleu_score": 24.38163391005833}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n    this.clientProxy = getClientProxy();\n    this.httpClient = buildHttpClient();\n}", "CodeBleu_score": 24.853827595542516}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n    this.httpClient = buildHttpClient();\n    this.context = buildContext();\n    this.client = buildClient();\n}", "CodeBleu_score": 26.074272567959365}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)    BitbucketBranchValue sourceBranch = pullRequest.getSource();\n    if (sourceBranch != null) {\n        String sourceBranchName = sourceBranch.getName();\n        BitbucketBranchValue sourceBranchNode = sourceBranch.getNode();\n        if (sourceBranchNode != null) {\n            CommitClosure sourceClosure = new CommitClosure(sourceBranchNode.getHash());\n            commitClosures.put(sourceBranchName, sourceClosure);\n        }\n    }\n\n    BitbucketBranchValue destinationBranch = pullRequest.getDestination();\n    if (destinationBranch != null) {\n        String destinationBranchName = destinationBranch.getName();\n        BitbucketBranchValue destinationBranchNode = destinationBranch.getNode();\n        if (destinationBranchNode != null) {\n            CommitClosure destinationClosure = new CommitClosure(destinationBranchNode.getHash());\n            commitClosures.put(destinationBranchName, destinationClosure);\n        }\n    }\n}", "CodeBleu_score": 36.57196426700878}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)    BitbucketBranchValue sourceBranch = pullRequest.getSource();\n    if (sourceBranch != null) {\n        BitbucketBranchValue rawSourceBranch = sourceBranch.getRawNode();\n        if (rawSourceBranch != null) {\n            CommitClosure sourceCommitClosure = new CommitClosure(rawSourceBranch.getCommit());\n            sourceCommitClosure.setSourceBranch(true);\n            pullRequest.setSourceClosure(sourceCommitClosure);\n        }\n    }\n\n    BitbucketBranchValue destinationBranch = pullRequest.getDestination();\n    if (destinationBranch != null) {\n        BitbucketBranchValue rawDestinationBranch = destinationBranch.getRawNode();\n        if (rawDestinationBranch != null) {\n            CommitClosure destinationCommitClosure = new CommitClosure(rawDestinationBranch.getCommit());\n            destinationCommitClosure.setSourceBranch(false);\n            pullRequest.setDestinationClosure(destinationCommitClosure);\n        }\n    }\n}", "CodeBleu_score": 37.747388047507854}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)    BitbucketBranchValue sourceBranch = pullRequest.getFromRef();\n    if (sourceBranch != null) {\n        CommitClosure sourceClosure = new CommitClosure(sourceBranch.getRepository().getProject().getKey(), sourceBranch.getRepository().getName(), sourceBranch.getName());\n        sourceClosure.setRawNode(sourceBranch.getRawNode());\n        pullRequest.setSourceClosure(sourceClosure);\n    }\n    BitbucketBranchValue destinationBranch = pullRequest.getToRef();\n    if (destinationBranch != null) {\n        CommitClosure destinationClosure = new CommitClosure(destinationBranch.getRepository().getProject().getKey(), destinationBranch.getRepository().getName(), destinationBranch.getName());\n        destinationClosure.setRawNode(destinationBranch.getRawNode());\n        pullRequest.setDestinationClosure(destinationClosure);\n    }\n}", "CodeBleu_score": 39.30059328262391}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build)    final JenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n    if (locationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    final String url = locationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location URL is not set\");\n    }\n    return new DisplayURLProvider(build).getDisplayURL(url);\n}", "CodeBleu_score": 49.32197866980736}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location is not configured\");\n    }\n    if (location.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location URL is not configured\");\n    }\n    return location.getUrl();\n}", "CodeBleu_score": 52.12523521813641}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)    final JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    if (location.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location URL is not set\");\n    }\n    return new DisplayURLProvider(build).getDisplayURL();\n}", "CodeBleu_score": 52.283062332900656}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)     try {\n        URI uri = new URI(url);\n        if (uri.getHost().equals(\"localhost\")) {\n            throw new IllegalStateException(\"Bitbucket server URL cannot be localhost\");\n        }\n        if (uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Bitbucket server URL cannot be unconfigured-jenkins-location\");\n        }\n        if (bitbucket.isBitbucketCloud() && !uri.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket cloud URL must be fully qualified\");\n        }\n        return url;\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Bitbucket server URL is not well-formed\", e);\n    }\n}", "CodeBleu_score": 58.005783883998696}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)   if (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n    throw new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n  }\n  if (bitbucket.isCloud()) {\n    if (!url.startsWith(\"https://\")) {\n      throw new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n    }\n    if (!url.endsWith(\"/\")) {\n      url += \"/\";\n    }\n  }\n  return url;\n}", "CodeBleu_score": 28.377152425216835}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket)     try {\n        URL jenkinsUrl = new URL(url);\n        String host = jenkinsUrl.getHost();\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Invalid Jenkins URL: \" + url + \". Please use a fully qualified hostname.\");\n        }\n        if (bitbucket.isBitbucketCloud() && !host.contains(\".\")) {\n            throw new IllegalStateException(\"Invalid Jenkins URL: \" + url + \". For Bitbucket Cloud API clients, please use a fully qualified hostname.\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid Jenkins URL: \" + url, e);\n    }\n}", "CodeBleu_score": 46.8081905070834}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException        BitbucketContext context = BitbucketContext.get(build);\n        if (context.isNotificationsDisabled()) {\n            return;\n        }\n\n        BitbucketSCMRevision revision = (BitbucketSCMRevision) build.getRevision();\n        String revisionHash = revision.getHash();\n        String revisionType = revision.getType();\n        String buildKey = context.getBuildKey();\n        if (BitbucketSCMRevision.BRANCH.equals(revisionType)) {\n            if (context.isShareBuildKeyBetweenBranchAndPR()) {\n                buildKey = buildKey + \"/\" + revision.getBranch();\n            }\n            listener.getLogger().format(\"Branch build key: %s%n\", buildKey);\n        } else {\n            listener.getLogger().format(\"PR build key: %s%n\", buildKey);\n        }\n\n        BitbucketClient client = context.getClient();\n        if (BitbucketSCMRevision.BRANCH.equals(revisionType)) {\n            listener.getLogger().format(\"Sending branch build status notification%n\");\n            client.createBuildStatus(buildKey, revisionHash, source.getBuildStatus(build));\n        } else {\n            listener.getLogger().format(\"Sending PR build status notification%n\");\n            client.createPRBuildStatus(buildKey, revisionHash, source.getBuildStatus(build));\n        }\n    }\n\n", "CodeBleu_score": 36.92836430537568}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException        BitbucketContext context = BitbucketContext.get(source);\n        if (context.isNotificationsDisabled()) {\n            return;\n        }\n        Revision revision = build.getRevision();\n        if (revision == null) {\n            return;\n        }\n        String revisionHash = revision.getHash();\n        if (revisionHash == null) {\n            return;\n        }\n        boolean shareBuildKey = context.isShareBuildKey();\n        if (revision instanceof BranchRevision) {\n            BranchRevision branchRevision = (BranchRevision) revision;\n            String branchName = branchRevision.getName();\n            if (branchName == null) {\n                return;\n            }\n            if (shareBuildKey) {\n                listener.getLogger().println(\"Sending branch build status notification for branch: \" + branchName + \" and build key: \" + context.getBuildKey());\n                BitbucketClient client = BitbucketClientFactory.createClient(source, context.getBuildKey(), listener);\n                client.createBuildStatus(branchName, revisionHash, build);\n            } else {\n                listener.getLogger().println(\"Sending branch build status notification for branch: \" + branchName + \" and build key: \" + context.getBuildKey() + \":\" + branchName);\n                BitbucketClient client = BitbucketClientFactory.createClient(source, context.getBuildKey() + \":\" + branchName, listener);\n                client.createBuildStatus(branchName, revisionHash, build);\n            }\n        } else if (revision instanceof PullRequestRevision) {\n            PullRequestRevision pullRequestRevision = (PullRequestRevision) revision;\n            int pullRequestId = pullRequestRevision.getNumber();\n            if (pullRequestId <= 0) {\n                return;\n            }\n            if (shareBuildKey) {\n                listener.getLogger().println(\"Sending pull request build status notification for pull request: \" + pullRequestId + \" and build key: \" + context.getBuildKey());\n                BitbucketClient client = BitbucketClientFactory.createClient(source, context.getBuildKey(), listener);\n                client.createBuildStatus(pullRequest", "CodeBleu_score": 39.137456282849996}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException        if (source.isNotificationsDisabled()) {\n            return;\n        }\n        if (build.getResult() == null) {\n            return;\n        }\n        BitbucketContext context = source.getContext();\n        BitbucketSCMRevision revision = (BitbucketSCMRevision) build.getRevision();\n        String revisionHash = revision.getHash();\n        boolean shareBuildKey = source.isShareBuildKey();\n        String buildKey = revision.getBranch();\n        if (revision.isPullRequest()) {\n            if (shareBuildKey) {\n                buildKey = String.format(\"%s-%s\", buildKey, revision.getPullRequestId());\n            } else {\n                buildKey = revision.getPullRequestId();\n            }\n        }\n        String notificationType = revision.isPullRequest() ? \"Pull Request\" : \"Branch\";\n        listener.getLogger().format(\"Sending %s notification for %s build key: %s%n\", notificationType, build.getResult(), buildKey);\n        BitbucketClient client = context.getClient();\n        BitbucketBuildStatus buildStatus = new BitbucketBuildStatus(build.getResult(), revisionHash);\n        client.createBuildStatus(source.getProjectKey(), source.getRepositorySlug(), buildKey, buildStatus);\n    }", "CodeBleu_score": 39.40713320055299}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    if (shareBuildKeyBetweenBranchAndPr) {\n        return build.getParent().getFullName() + \"/\" + branch;\n    }\n    return build.getParent().getFullName();\n}", "CodeBleu_score": 27.591474826853812}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    if (shareBuildKeyBetweenBranchAndPr) {\n        return build.getFolder() + \"/\" + branch;\n    }\n    return build.getFullName();\n}", "CodeBleu_score": 22.289346945853755}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    if (shareBuildKeyBetweenBranchAndPr) {\n        return build.getParent().getFullName() + \"-\" + branch;\n    }\n    return build.getFullName();\n}\n", "CodeBleu_score": 25.63357160631271}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException    if (serverURL == null) {\n        serverURL = new URL(BitbucketSCMNavigator.DEFAULT_SERVER_URL);\n        logger.warn(\"serverURL is null, setting to default value: \" + serverURL);\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits();\n        traits.setLegacy(true);\n        logger.warn(\"traits are null, setting to legacy value: \" + traits);\n    }\n    return this;\n}", "CodeBleu_score": 13.978502799256704}, {"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = \"https://bitbucket.org\";\n        log.warn(\"BitbucketSCMNavigator.serverUrl is null. Setting to default value of 'https://bitbucket.org'\");\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits();\n        traits.setLegacy(true);\n        log.warn(\"BitbucketSCMNavigator.traits is null. Setting to default value of legacy traits\");\n    }\n    return this;\n}", "CodeBleu_score": 11.991083601956348}, {"code": "private Object readResolve() throws ObjectStreamException    if (serverUrl == null) {\n        serverUrl = getServerUrlFromTraits();\n        if (serverUrl == null) {\n            logger.warn(\"BitbucketSCMNavigator deserialized with null serverUrl. Legacy traits will be used to reconstruct the server URL.\");\n        }\n    }\n    if (traits == null) {\n        traits = new HashMap<>();\n        traits.put(BitbucketSCMNavigator.SERVER_URL_TRAIT, serverUrl);\n        traits.put(BitbucketSCMNavigator.REPOSITORY_TRAIT, repository);\n        traits.put(BitbucketSCMNavigator.BRANCH_TRAIT, branch);\n    }\n    return this;\n}", "CodeBleu_score": 18.831698355499867}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch)    BitbucketRepository repository = bitbucketRepositoryService.findByName(name);\n    if (isMatch) {\n        if (repository != null) {\n            proposedRepositoryCount.increment();\n            log.info(\"Proposed repository: {}\", repository.getName());\n        } else {\n            log.info(\"Proposed repository: {}\", name);\n        }\n    } else {\n        if (repository != null) {\n            ignoredRepositoryCount.increment();\n            log.info(\"Ignored repository: {}\", repository.getName());\n        } else {\n            log.info(\"Ignored repository: {}\", name);\n        }\n    }\n}\n", "CodeBleu_score": 41.619365110552984}, {"code": "public void record(@NonNull String name, boolean isMatch)    BitbucketRepository repository = bitbucketRepositoryService.findByName(name);\n    if (isMatch) {\n        if (repository.isProposed()) {\n            proposedCount++;\n        } else {\n            ignoredCount++;\n        }\n    } else {\n        if (repository.isProposed()) {\n            proposedCount--;\n        } else {\n            ignoredCount--;\n        }\n    }\n    log.info(\"{}: {}\", repository.getName(), isMatch ? \"proposed\" : \"ignored\");\n}", "CodeBleu_score": 46.69622810912244}, {"code": "public void record(@NonNull String name, boolean isMatch)    BitbucketRepository repository = repositoryService.getRepository(name);\n    if (repository == null) {\n        return;\n    }\n    if (isMatch) {\n        if (repository.getProposed()) {\n            proposedCount.incrementAndGet();\n        }\n        logger.info(\"Repository '{}' is proposed\", name);\n    } else {\n        logger.info(\"Repository '{}' is ignored\", name);\n    }\n}", "CodeBleu_score": 45.652027731092446}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException        if (marked instanceof BranchRevision) {\n            BranchRevision branch = (BranchRevision) marked;\n            String branchName = branch.getName();\n            if (branchName.contains(\"#\")) {\n                // This is a branch with a hash, so we need to fetch it\n                String hash = branchName.substring(branchName.indexOf(\"#\") + 1);\n                if (!git.revList(hash).isEmpty()) {\n                    // The hash exists locally, so we don't need to fetch it\n                    return rev;\n                }\n                // The hash doesn't exist locally, so we need to fetch it\n                String remote = branch.getRemote();\n                String refspec = branch.getRefspec();\n                String url = scm.getRepo().getRemote();\n                if (refspec == null) {\n                    refspec = branchName;\n                }\n                listener.getLogger().println(\"Fetching missing branch hash \" + hash + \" from \" + url);\n                git.fetch(url, hash, remote, refspec);\n                return rev;\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 38.546988234904916}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException        if (rev instanceof Branch) {\n            Branch branch = (Branch) rev;\n            String branchName = branch.getName();\n            if (branchName.contains(\"#\")) {\n                String[] parts = branchName.split(\"#\");\n                if (parts.length == 2) {\n                    String branchName = parts[0];\n                    String commitHash = parts[1];\n                    if (commitHash.length() == 40) {\n                        try {\n                            git.fetch(scm.getRemote(), branchName + \":\" + branchName, listener);\n                            return new Branch(branchName, commitHash);\n                        } catch (Exception e) {\n                            listener.error(\"Failed to fetch commit \" + commitHash + \" from remote repository \" + scm.getRemote() + \" for branch \" + branchName);\n                            listener.error(e.getMessage());\n                        }\n                    }\n                }\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 34.96342503763732}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException        if (marked instanceof BranchRevision) {\n            BranchRevision branch = (BranchRevision) marked;\n            if (branch.getRemote() != null) {\n                String remote = branch.getRemote();\n                String branchName = branch.getBranchName();\n                if (branchName != null && !branchName.isEmpty()) {\n                    if (branchName.contains(\"#\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"#\"));\n                    }\n                    if (branchName.contains(\":\")) {\n                        branchName = branchName.substring(branchName.indexOf(\":\") + 1);\n                    }\n                    if (branchName.contains(\"@\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"@\"));\n                    }\n                    if (branchName.contains(\"+\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"+\"));\n                    }\n                    if (branchName.contains(\"!\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"!\")) + \"*\";\n                    }\n                    if (branchName.contains(\"~\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"~\"));\n                    }\n                    if (branchName.contains(\"^\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"^\"));\n                    }\n                    if (branchName.contains(\":\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\":\"));\n                    }\n                    if (branchName.contains(\"*\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"*\"));\n                    }\n                    if (branchName.contains(\"?\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"?\"));\n                    }\n                    if (branchName.contains(\"[\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"[\"));\n                    }\n                    if (branchName.contains(\"]\")) {\n                        branchName = branchName.substring(0, branchName.indexOf(\"]\"));\n                    }\n                    if (branchName.", "CodeBleu_score": 29.665967486910304}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 60.59042744075334}, {"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 65.98972724525761}, {"code": "public Map<String, BitbucketHref> getLinks()    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 60.59042744075334}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[])  const selectedResources = await this.getSelectedResources(resourceStates);\n  if (!selectedResources) {\n    return;\n  }\n\n  const resourcesByRepository = this.groupResourcesByRepository(selectedResources);\n  for (const repository of Object.keys(resourcesByRepository)) {\n    const resources = resourcesByRepository[repository];\n    const filePaths = resources.map(resource => resource.getFilePath());\n    try {\n      await this.repository.add(filePaths);\n    } catch (error) {\n      this.logError(error);\n      this.showErrorMessage(`Failed to add files to repository: ${error.message}`);\n    }\n  }\n}\n", "CodeBleu_score": 49.798863408128625}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])    if (resourceStates.length === 0) {\n        return;\n    }\n\n    const resourceStatesByRepo = resourceStates.reduce((acc, resourceState) => {\n        const repo = resourceState.repository;\n        if (!acc[repo]) {\n            acc[repo] = [];\n        }\n        acc[repo].push(resourceState);\n        return acc;\n    }, {} as Record<string, SourceControlResourceState[]>);\n\n    for (const [repo, repoResourceStates] of Object.entries(resourceStatesByRepo)) {\n        const repoPath = await this.getRepoPath(repo);\n        if (!repoPath) {\n            continue;\n        }\n\n        const resourcePaths = await this.getResourcePaths(repoPath, repoResourceStates);\n        if (!resourcePaths) {\n            continue;\n        }\n\n        try {\n            await this.addResources(repoPath, resourcePaths);\n        } catch (error) {\n            this.logger.error(`Failed to add resources to repository ${repo}: ${error}`);\n            this.showErrorMessage(`Failed to add resources to repository ${repo}.`);\n        }\n    }\n}\n", "CodeBleu_score": 44.59801696487846}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])    // Retrieve the selected resource states\n    const selectedResourceStates = resourceStates.filter(resourceState => resourceState.selected);\n    if (selectedResourceStates.length === 0) {\n        return;\n    }\n\n    // Map the selected resources to their URIs\n    const resourceUris = selectedResourceStates.map(resourceState => resourceState.resourceUri);\n\n    // Process the resources by repository\n    const repositories = await this.getRepositories(resourceUris);\n    for (const repository of repositories) {\n        // Convert the resources to file paths\n        const filePaths = resourceUris.map(resourceUri => repository.getFilePath(resourceUri));\n\n        // Add the files to the repository\n        try {\n            await repository.addFiles(filePaths);\n        } catch (error) {\n            // Handle any errors\n            this.logError(error);\n            await this.showErrorMessage(`Error adding files to ${repository.name}: ${error.message}`);\n        }\n    }\n}\n", "CodeBleu_score": 51.563367611006086}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates    if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n        const resource = await vscode.commands.executeCommand<Resource>('scm.getResource', this.resourceStates[0]);\n        if (resource) {\n            this.resourceStates = [resource];\n        }\n    }\n    return this.resourceStates.filter(r => r instanceof Resource);\n}\n", "CodeBleu_score": 39.65825945082698}, {"code": "protected async getResourceStates    const resourceStates = this.resourceStates;\n    if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n        const scmResource = await vscode.commands.executeCommand<Uri>(\n            'vscode.scm.getResource',\n            this.resourceUri\n        );\n        if (scmResource) {\n            this.resourceStates = [scmResource];\n        }\n    }\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}\n", "CodeBleu_score": 36.68053008838592}, {"code": "protected async getResourceStates    if (!this.resourceStates || !this.resourceStates.length || !this.resourceStates[0] instanceof Uri) {\n        let resource = await this.getSingleScmResource();\n        this.resourceStates = [resource];\n    }\n\n    return this.resourceStates.filter(x => x instanceof Resource);\n}\n", "CodeBleu_score": 31.952227281601115}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    const scm = await this.scm.getSCMProvider(uri);\n    if (!scm) {\n      return undefined;\n    }\n\n    const scmUri = scm.getSCMResourceUri(uri);\n    if (!scmUri) {\n      return undefined;\n    }\n\n    const scmResource = await scm.getSCMResource(scmUri);\n    if (!scmResource) {\n      return undefined;\n    }\n\n    return scmResource;\n  }\n", "CodeBleu_score": 30.707373796790517}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    if (!uri) {\n      const activeEditor = window.activeTextEditor;\n      if (!activeEditor) {\n        return undefined;\n      }\n      uri = activeEditor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const scm = await this.scm.getSCMProvider(uri);\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = await scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }\n\n  /**\n   * This function retrieves the root folder of the current repository. If no repository is found, it returns undefined.\n   */\n  protected async getRepositoryRootFolder(): Promise<Uri | undefined> {\n    const scm = await this.scm.getSCMProvider(window.activeTextEditor?.document.uri);\n    if (!scm) {\n      return undefined;\n    }\n    return scm.getRepositoryRootFolder(window.activeTextEditor?.document.uri);\n  }\n\n  /**\n   * This function retrieves the root folder of the current repository. If no repository is found, it returns undefined.\n   */\n  protected async getRepositoryRootFolder(uri: Uri): Promise<Uri | undefined> {\n    const scm = await this.scm.getSCMProvider(uri);\n    if (!scm) {\n      return undefined;\n    }\n    return scm.getRepositoryRootFolder(uri);\n  }\n\n  /**\n   * This function retrieves the root folder of the current repository. If no repository is found, it returns undefined.\n   */\n  protected async getRepositoryRootFolder(uri: Uri): Promise<Uri | undefined> {\n    const scm = await this.scm.getSCMProvider(uri);\n    if (!scm) {\n      return undefined;\n    }\n    return scm.getRepositoryRootFolder(uri);\n  }\n\n  /**\n   * This", "CodeBleu_score": 44.912672504851784}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === 'svn') {\n      uri = uri.withScheme('file');\n    }\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n    const manager = await this.getSourceControlManager();\n    if (!manager) {\n      return undefined;\n    }\n    const repository = await manager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResource(uri);\n  }\n", "CodeBleu_score": 49.87183877051405}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange)    const repo = await this.getRemoteRepository(element.path);\n    if (element.status === 'modified') {\n      const oldRevision = element.oldRevision;\n      const newRevision = element.newRevision;\n      const oldPath = element.oldPath;\n      const newPath = element.newPath;\n      const oldRevisionPath = oldPath + '@' + oldRevision;\n      const newRevisionPath = newPath + '@' + newRevision;\n      const diffCmd = repo.getDiffCmd(oldRevisionPath, newRevisionPath);\n      this.runCommand(diffCmd);\n    } else if (element.status === 'added') {\n      const newPath = element.newPath;\n      const newRevision = element.newRevision;\n      const newRevisionPath = newPath + '@' + newRevision;\n      const openCmd = repo.getOpenCmd(newRevisionPath);\n      this.runCommand(openCmd);\n    }\n  }\n  ", "CodeBleu_score": 35.441859808857515}, {"code": " public async openDiffCmd(element: ISvnPathChange)    const remoteRepository = await this.getRemoteRepository(element);\n    if (!remoteRepository) {\n        return;\n    }\n    const oldRevision = element.oldRevision;\n    const newRevision = element.newRevision;\n    const oldPath = element.oldPath;\n    const newPath = element.newPath;\n    const isModified = oldRevision !== newRevision;\n    const isAdded = oldRevision === null && newRevision !== null;\n    if (isModified) {\n        await this.openDiff(remoteRepository, oldPath, oldRevision, newPath, newRevision);\n    } else if (isAdded) {\n        await this.openFile(remoteRepository, newPath, newRevision);\n    }\n}", "CodeBleu_score": 34.089339508926926}, {"code": " public async openDiffCmd(element: ISvnPathChange)  const repo = await this.getRepoForElement(element);\n  if (repo) {\n    if (element.isModified) {\n      const oldRevision = element.oldRevision;\n      const newRevision = element.newRevision;\n      const oldPath = element.oldPath;\n      const newPath = element.newPath;\n      const diffUri = repo.getDiffUri(oldPath, oldRevision, newPath, newRevision);\n      await vscode.commands.executeCommand('vscode.diff', diffUri, repo.uri);\n    } else {\n      const newPath = element.newPath;\n      const newRevision = element.newRevision;\n      const newUri = repo.getFileUri(newPath, newRevision);\n      await vscode.commands.executeCommand('vscode.open', newUri);\n    }\n  }\n}\n", "CodeBleu_score": 35.03967254272123}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)    if (!vscode.env.clipboard.writeText) {\n        vscode.window.showErrorMessage('Clipboard not supported');\n        return;\n    }\n    if (item.commit) {\n        vscode.env.clipboard.writeText(what === 'message' ? item.commit.message : item.commit.revision);\n    }\n}\n", "CodeBleu_score": 27.49322923611729}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)    const clipboard = vscode.env.clipboard;\n    if (!clipboard.hasStringSelection()) {\n        if (what === 'message') {\n            clipboard.writeText(item.commit.message);\n        } else if (what === 'revision') {\n            clipboard.writeText(item.commit.revision);\n        }\n    }\n}\n", "CodeBleu_score": 34.43751222698197}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)    if (!clipboard.isSupported) {\n        window.showErrorMessage('Clipboard not supported');\n        return;\n    }\n    if (item.commit) {\n        await clipboard.writeText(what === 'message' ? item.commit.message : item.commit.revision);\n    }\n}\n", "CodeBleu_score": 27.0913025175259}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException    List<GiteaConnectionFactory> factories = getFactories();\n    if (factories.isEmpty()) {\n        throw new IOException(\"No GiteaConnectionFactory implementations found\");\n    }\n    Collections.sort(factories);\n    GiteaConnectionFactory factory = factories.get(0);\n    return factory.open(this);\n}", "CodeBleu_score": 19.82948829724242}, {"code": "public GiteaConnection open() throws IOException, InterruptedException    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : factories) {\n        if (f.canOpen()) {\n            if (factory == null || factory.getPriority() < f.getPriority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found.\");\n    }\n    return factory.open();\n}", "CodeBleu_score": 22.656462883667583}, {"code": "public GiteaConnection open() throws IOException, InterruptedException    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen()) {\n            return factory.open();\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory found.\");\n}", "CodeBleu_score": 8.096549123245966}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader()  ClassLoader classLoader = Jenkins.getInstance() != null ? Jenkins.getInstance().getPluginManager().getClassLoader() : this.getClass().getClassLoader();\n  Gitea.setClassLoader(classLoader);\n  return this;\n}", "CodeBleu_score": 47.66719647766746}, {"code": "public Gitea jenkinsPluginClassLoader()    Jenkins jenkins = Jenkins.getInstance();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().getClassLoader() : getClass().getClassLoader();\n    return new Gitea(classLoader);\n}", "CodeBleu_score": 53.03669296133921}, {"code": "public Gitea jenkinsPluginClassLoader()  Jenkins jenkins = Jenkins.getInstance();\n  ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().getClassLoader() : getClass().getClassLoader();\n  return setClassLoader(classLoader);\n}", "CodeBleu_score": 52.305183551419724}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName;\n    this.serverUrl = normalizeUrl(serverUrl);\n    this.manageHooks = manageHooks && credentialsId != null;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeUrl(aliasUrl);\n}", "CodeBleu_score": 33.29618204514383}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName;\n    this.serverUrl = normalizeUrl(serverUrl);\n    this.manageHooks = manageHooks || credentialsId != null;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeUrl(aliasUrl);\n}", "CodeBleu_score": 31.08028589320505}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl)     this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 39.257180805824746}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    final ListBoxModel items = new ListBoxModel();\n    if (isAdmin()) {\n        final String normalizedServerUrl = normalizeServerUrl(serverUrl);\n        final List<Credentials> credentials = Credentials.getAll();\n        for (Credentials credential : credentials) {\n            if (credential.getType().equals(GiteaAuth.class.getName()) && normalizedServerUrl.equals(credential.getServerUrl())) {\n                items.add(credential.getId(), credential.getDescription());\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 37.43078315356468}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    ListBoxModel listBoxModel = new ListBoxModel();\n    if (getUser().isAdmin()) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        List<Credentials> credentials = Credentials.getAll(Credentials.class);\n        for (Credentials credential : credentials) {\n            if (credential instanceof GiteaAuth) {\n                if (serverUrl.equals(credential.getUrl())) {\n                    listBoxModel.add(credential.getId(), credential.getDisplayName());\n                }\n            }\n        }\n    }\n    return listBoxModel;\n}", "CodeBleu_score": 39.11567230569932}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)    ListBoxModel items = new ListBoxModel();\n    if (isAdmin()) {\n        String normalizedServerUrl = normalizeServerUrl(serverUrl);\n        List<Credential> credentials = Credential.getAll(CredentialScope.GLOBAL);\n        for (Credential credential : credentials) {\n            if (credential.getScope() == CredentialScope.GLOBAL && (credential.getServerUrl() == null || normalizedServerUrl.equals(normalizeServerUrl(credential.getServerUrl())))) {\n                items.add(credential.getId(), credential.getDisplayName());\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 36.98770891859558}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equalsIgnoreCase(scheme)) {\n                port = 80;\n            } else if (\"https\".equalsIgnoreCase(scheme)) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        String query = uri.getQuery();\n        if (query == null) {\n            query = \"\";\n        }\n        String fragment = uri.getFragment();\n        if (fragment == null) {\n            fragment = \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(host);\n        if (port != 80 && port != 443) {\n            sb.append(':').append(port);\n        }\n        sb.append(path);\n        if (!query.isEmpty()) {\n            sb.append('?').append(query);\n        }\n        if (!fragment.isEmpty()) {\n            sb.append('#').append(fragment);\n        }\n        String normalizedUrl = sb.toString();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 44.750482676653945}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        scheme = scheme.toLowerCase();\n        if (scheme.equals(\"http\") || scheme.equals(\"https\")) {\n            int port = uri.getPort();\n            if (port == -1) {\n                if (scheme.equals(\"http\")) {\n                    port = 80;\n                } else if (scheme.equals(\"https\")) {\n                    port = 443;\n                }\n            }\n            String host = uri.getHost();\n            if (host == null) {\n                host = \"\";\n            }\n            String path = uri.getPath();\n            if (path == null) {\n                path = \"\";\n            }\n            String query = uri.getQuery();\n            if (query == null) {\n                query = \"\";\n            }\n            String fragment = uri.getFragment();\n            if (fragment == null) {\n                fragment = \"\";\n            }\n            return scheme + \"://\" + host + \":\" + port + path + query + fragment;\n        }\n    } catch (URISyntaxException e) {\n        // Ignore exception\n    }\n    return serverUrl;\n}", "CodeBleu_score": 43.72456626658899}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equalsIgnoreCase(scheme)) {\n                port = 80;\n            } else if (\"https\".equalsIgnoreCase(scheme)) {\n                port = 443;\n            }\n        }\n        String normalizedUrl = scheme + \"://\" + uri.getHost();\n        if (port != -1) {\n            normalizedUrl += \":\" + port;\n        }\n        String path = uri.getPath();\n        if (path != null && !path.isEmpty()) {\n            normalizedUrl += path;\n        }\n        return normalizedUrl.replaceAll(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 43.737372556019174}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems()    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : GiteaServer.getAll()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isEmpty()) {\n            items.add(server.getUrl());\n        } else {\n            items.add(displayName, server.getUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 45.26804755560103}, {"code": "public ListBoxModel getServerItems()    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : giteaServers) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getUrl(), server.getUrl());\n        } else {\n            items.add(server.getUrl(), displayName);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 45.703211833073965}, {"code": "public ListBoxModel getServerItems()    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : GiteaServer.getAll()) {\n        String displayName = server.getDisplayName();\n        if (displayName == null || displayName.length() == 0) {\n            items.add(server.getUrl(), server.getUrl());\n        } else {\n            items.add(server.getUrl(), displayName);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 46.17938219240283}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    if (servers == null) {\n        return;\n    }\n    if (servers.isEmpty()) {\n        return;\n    }\n    List<GiteaServer> filteredServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server.getUrl() != null && !server.getUrl().isEmpty()) {\n            filteredServers.add(server);\n        }\n    }\n    filteredServers = filteredServers.stream().distinct().collect(Collectors.toList());\n    this.servers = filteredServers;\n    saveConfiguration();\n}", "CodeBleu_score": 37.74960459731187}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    if (servers == null) {\n        this.servers = null;\n        return;\n    }\n    this.servers = new ArrayList<>(servers.size());\n    for (GiteaServer server : servers) {\n        if (server != null && server.getUrl() != null) {\n            this.servers.add(server);\n        }\n    }\n    save();\n}", "CodeBleu_score": 24.09901891129901}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)    if (servers == null) {\n        this.servers.clear();\n        return;\n    }\n    if (servers.isEmpty()) {\n        this.servers.clear();\n        return;\n    }\n    if (servers.size() == 1) {\n        this.servers.clear();\n        this.servers.add(servers.get(0));\n        return;\n    }\n    if (servers.size() == 2) {\n        this.servers.clear();\n        this.servers.add(servers.get(0));\n        this.servers.add(servers.get(1));\n        return;\n    }\n    this.servers.clear();\n    this.servers.add(servers.get(0));\n    this.servers.add(servers.get(1));\n    this.servers.add(servers.get(2));\n}", "CodeBleu_score": 22.37887440452027}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)    serverUrl = normalizeUrl(serverUrl);\n    if (serverUrl == null) {\n        return false;\n    }\n    boolean removed = false;\n    for (int i = 0; i < servers.size(); i++) {\n        if (serverUrl.equals(servers.get(i).getUrl())) {\n            servers.remove(i);\n            removed = true;\n            break;\n        }\n    }\n    if (removed) {\n        updateServers();\n    }\n    return removed;\n}", "CodeBleu_score": 34.78052722317508}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (serverUrl.equals(this.serverUrl)) {\n        this.serverUrl = null;\n        this.serverUrlList.clear();\n        return true;\n    }\n    boolean removed = this.serverUrlList.remove(serverUrl);\n    if (removed) {\n        this.serverUrlList.clear();\n        this.serverUrlList.addAll(this.serverUrlList);\n    }\n    return removed;\n}", "CodeBleu_score": 32.6099951654676}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)  if (serverUrl == null) {\n    return false;\n  }\n  serverUrl=normalizeServerUrl(serverUrl);\n  if (serverUrl == null) {\n    return false;\n  }\n  int index=getServerIndex(serverUrl);\n  if (index == -1) {\n    return false;\n  }\n  servers.remove(index);\n  updateServerList();\n  return true;\n}", "CodeBleu_score": 24.261737275459488}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        ConfigElement configElement = new ConfigElement();\n        configElement.setType(element.asType().toString());\n        configElement.setName(element.getSimpleName().toString());\n        configElement.setDescription(element.getAnnotation(annotation).description());\n        configElement.setDefaultValue(element.getAnnotation(annotation).defaultValue());\n        descriptorElements.add(configElement);\n    }\n}", "CodeBleu_score": 34.1331832712229}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        Map<String, String> attributes = new HashMap<>();\n        for (Attribute attribute : element.getAnnotation(annotation).annotationType().getDeclaredMethods()) {\n            if (attribute.getReturnType().equals(String.class)) {\n                try {\n                    attributes.put(attribute.getSimpleName().toString(), (String) attribute.invoke(element.getAnnotation(annotation)));\n                } catch (IllegalAccessException | InvocationTargetException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        descriptorElements.add(new ConfigElement(element.getSimpleName().toString(), element.asType().toString(), attributes));\n    }\n}", "CodeBleu_score": 35.73307479540077}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        Map<String, Object> attributes = getAttributesFromAnnotation(element);\n        String type = element.asType().toString();\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 48.37873047922689}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     String annotationClassName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        String annotationName = annotation.getQualifiedName().toString();\n        if (annotationName.equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 39.57767147828057}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     String annotationClassName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 43.779681931730366}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass)     String annotationClassName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 43.779681931730366}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = [\n        [\n            [\"Employee\", \"=\", employee],\n            [\"Status\", \"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n        ]\n    ]\n\n    if approver_id:\n        filters.append(\n            [\n                [\"Approver\", \"=\", approver_id],\n                [\"Status\", \"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n            ]\n        )\n\n    if for_approval:\n        filters.append(\n            [\n                [\"Status\", \"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n                [\"Employee\", \"<>\", employee],\n            ]\n        )\n\n    return {\"filters\": filters}", "CodeBleu_score": 23.175284468503794}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"domain\": [\n            (\"employee\", \"=\", employee),\n            (\"state\", \"not in\", (\"cancel\", \"refuse\")),\n        ],\n        \"limit\": 1000,\n    }\n\n    if approver_id:\n        filters[\"domain\"].append((\"approver_id\", \"=\", approver_id))\n\n    if for_approval:\n        filters[\"domain\"].append((\"state\", \"in\", (\"to_approve\", \"to_validate\")))\n        filters[\"domain\"].append((\"employee\", \"<>\", employee))\n\n    return filters", "CodeBleu_score": 22.894633155843696}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"domain\": [\n            (\"employee\", \"=\", employee),\n            (\"state\", \"not in\", [\"canceled\", \"draft\"]),\n        ],\n    }\n    if for_approval:\n        filters[\"domain\"].append((\"approver_id\", \"=\", approver_id))\n        filters[\"domain\"].append((\"workflow_state\", \"in\", [\"pending_approval\"]))\n    else:\n        filters[\"domain\"].append((\"workflow_state\", \"=\", \"open\"))\n    return filters", "CodeBleu_score": 22.699724031316244}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    current_date = datetime.datetime.now().date()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail[\"allocated\"],\n            \"balance\": leave_detail[\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 44.060347014617065}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    current_date = datetime.datetime.now().date()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leave = leave_details[leave_type][\"allocated\"]\n        taken_leave = leave_details[leave_type][\"taken\"]\n        balance_leave = allocated_leave - taken_leave\n        leave_balance_map[leave_type] = {\n            \"allocated\": allocated_leave,\n            \"taken\": taken_leave,\n            \"balance\": balance_leave,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.184782439846764}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    today = datetime.date.today()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated = leave_details[leave_type][\"allocated\"]\n        taken = leave_details[leave_type][\"taken\"]\n        balance = allocated - taken\n        leave_balance_map[leave_type] = {\"allocated\": allocated, \"taken\": taken, \"balance\": balance}\n    return leave_balance_map", "CodeBleu_score": 40.551964791993534}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list(employee)\n    if holiday_list is None:\n        return []\n    holidays = get_holidays(holiday_list)\n    holidays = [\n        {\n            \"date\": holiday.date,\n            \"name\": holiday.name,\n            \"description\": strip_html(holiday.description),\n        }\n        for holiday in holidays\n        if not holiday.weekly_off\n    ]\n    holidays.sort(key=lambda x: x[\"date\"])\n    return holidays\n\n", "CodeBleu_score": 26.60126388806279}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list(employee)\n    if not holiday_list:\n        return []\n    holidays = get_holidays(holiday_list)\n    holidays = [holiday for holiday in holidays if not holiday.weekly_off]\n    holidays.sort(key=lambda x: x.date)\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays", "CodeBleu_score": 25.20916890533783}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list(employee)\n    if not holiday_list:\n        return []\n    holidays = get_holidays_from_db(holiday_list)\n    holidays = [\n        {\n            \"date\": holiday[\"date\"],\n            \"description\": strip_html(holiday[\"description\"]),\n        }\n        for holiday in holidays\n        if not holiday[\"weekly_off\"]\n    ]\n    holidays.sort(key=lambda x: x[\"date\"])\n    return holidays\n\n", "CodeBleu_score": 28.45767295730381}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n    # Get the settings for sending reminders\n    send_reminders = get_setting(\"send_reminders\")\n    frequency = get_setting(\"frequency\")\n    # Check if the settings indicate that reminders should be sent and if the frequency is set to \"Weekly\"\n    if send_reminders and frequency == \"Weekly\":\n        # Call the function to send the reminders\n        send_reminders_in_advance()\n", "CodeBleu_score": 24.833468496290525}, {"code": "def send_reminders_in_advance_weekly()\n    # Get the settings for sending reminders in advance\n    settings = get_settings()\n    if settings.send_reminders_in_advance:\n        # Check if the frequency is set to \"Weekly\"\n        if settings.reminder_frequency == \"Weekly\":\n            # Call the function to send the reminders\n            send_reminders_in_advance()\n", "CodeBleu_score": 15.763604559414501}, {"code": "def send_reminders_in_advance_weekly()\n    from send_reminders_in_advance_weekly_func import send_reminders_in_advance_weekly_func\n    send_reminders_in_advance_weekly_func()\n\n", "CodeBleu_score": 6.859249269592508}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0.0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += (self_rating.rating * self_rating.percentage_weightage)\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n", "CodeBleu_score": 19.10126415837913}, {"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0.0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, 2)", "CodeBleu_score": 20.216207922177585}, {"code": "def calculate_self_appraisal_score(self)\n    total_score = 0\n    for rating in self.self_ratings:\n        total_score += (rating.rating * 5) * (rating.percentage_weightage / 100)\n    self.self_appraisal_score = round(total_score, 2)", "CodeBleu_score": 24.614475261740797}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n    appraisal_cycle = self.env[\"hr.appraisal.cycle\"].browse(self.env.context.get(\"active_id\"))\n    if appraisal_cycle.final_score_formula:\n        # Gather necessary data for the formula\n        appraisal_cycle_doc = appraisal_cycle.sudo()\n        employee_ids = appraisal_cycle_doc.employee_ids.ids\n        appraisal_ids = appraisal_cycle_doc.appraisal_ids.ids\n        appraisal_line_ids = appraisal_cycle_doc.appraisal_ids.mapped(\"appraisal_line_ids\").ids\n        appraisal_feedback_ids = appraisal_cycle_doc.appraisal_ids.mapped(\"appraisal_feedback_ids\").ids\n        appraisal_line_feedback_ids = appraisal_cycle_doc.appraisal_ids.mapped(\"appraisal_line_ids.appraisal_feedback_ids\").ids\n        employee_self_appraisal_ids = appraisal_cycle_doc.employee_self_appraisal_ids.ids\n        employee_self_appraisal_line_ids = appraisal_cycle_doc.employee_self_appraisal_ids.mapped(\"appraisal_line_ids\").ids\n        employee_self_appraisal_feedback_ids = appraisal_cycle_doc.employee_self_appraisal_ids.mapped(\"appraisal_feedback_ids\").ids\n        employee_self_appraisal_line_feedback_ids = appraisal_cycle_doc.employee_self_appraisal_ids.mapped(\"appraisal_line_ids.appraisal_feedback_ids\").ids\n        employee_self_appraisal_line_feedback_ids = appraisal_cycle_doc.employee_self_appraisal_ids.mapped(\"appraisal_line_", "CodeBleu_score": 20.751513125163516}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = self.env[\"hr.appraisal.cycle\"].browse(self.env.context.get(\"active_id\"))\n    if appraisal_cycle.final_score_formula:\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace(\" \", \"\")\n        if appraisal_cycle.final_score_formula:\n            appraisal_cycle.final_score = self.env[\"hr.appraisal.cycle\"]._calculate_formula(\n                appraisal_cycle.final_score_formula,\n                appraisal_cycle.appraisal_ids,\n                appraisal_cycle.appraisal_line_ids,\n            )\n        else:\n            appraisal_cycle.final_score = False\n    else:\n        appraisal_cycle.final_score = (\n            appraisal_cycle.total_score + appraisal_cycle.average_feedback_score + appraisal_cycle.self_appraisal_score\n        ) / 3\n    appraisal_cycle.final_score = round(appraisal_cycle.final_score, 2)", "CodeBleu_score": 26.711032789841955}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = self.env['hr.appraisal.cycle'].browse(self.env.context.get('active_id'))\n    if appraisal_cycle.final_score_formula:\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('\\n', '')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('\\r', '')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace(' ', '')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('-', '+-')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('+-', '-')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('(', '')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace(')', '')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('%', '')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('*', '*1')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('/', '/1')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('//', '/')\n        appraisal_cycle.final_score_formula = appraisal_cycle.final_score_formula.replace('++', '+')\n        appraisal_cycle.final_score_formula = apprais", "CodeBleu_score": 20.07799766153992}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n    today_date = datetime.date.today()\n    if self.attendance_date > today_date and self.status != 'On Leave' and not self.leave_id:\n        raise ValidationError('Attendance cannot be marked for future dates unless the status is \"On Leave\" and there is no leave application.')\n    if self.attendance_date < self.employee_id.date_of_joining:\n        raise ValidationError('Attendance date cannot be earlier than the date of joining of the employee.')", "CodeBleu_score": 22.815209523372303}, {"code": "def validate_attendance_date(self)\n    attendance_date = self.attendance_date\n    if attendance_date > fields.Date.today():\n        if self.status != 'on_leave' or not self.leave_application_id:\n            raise ValidationError(_('Attendance cannot be marked for future dates unless status is \"On Leave\" and there is no leave application.'))\n    if attendance_date < self.employee_id.date_of_joining:\n        raise ValidationError(_('Attendance date cannot be earlier than the employee\\'s date of joining.'))\n", "CodeBleu_score": 24.748187308796272}, {"code": "def validate_attendance_date(self)\n    if self.attendance_date > fields.Date.today():\n        if self.status != \"On Leave\" or not self.leave_application_id:\n            raise ValidationError(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\")\n    if self.attendance_date < self.employee_id.date_of_joining:\n        raise ValidationError(\"Attendance date cannot be earlier than the employee's date of joining.\")", "CodeBleu_score": 24.46372334972273}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n    # Check if there is already an attendance record for the employee on the given date\n    existing_record = AttendanceRecord.objects.filter(employee=self.employee, date=self.date).first()\n    if existing_record:\n        # If a record already exists, raise an exception with a message indicating the employee, the date, and a link to the existing record\n        raise ValidationError(f\"Attendance record for {self.employee} on {self.date} already exists. Please update the existing record: {existing_record.get_absolute_url()}\")\n", "CodeBleu_score": 24.592556452456424}, {"code": "def validate_duplicate_record(self)\n    if self.env['hr.attendance'].search_count([('employee_id', '=', self.employee_id.id), ('check_in', '=', self.check_in), ('check_out', '=', self.check_out)]) > 1:\n        raise ValidationError(_('Duplicate attendance record found for employee %s on %s. Please check existing attendance record %s.') % (self.employee_id.name, self.check_in.date(), self.env['hr.attendance'].search([('employee_id', '=', self.employee_id.id), ('check_in', '=', self.check_in), ('check_out', '=', self.check_out)]).id))", "CodeBleu_score": 22.79342810928182}, {"code": "def validate_duplicate_record(self)\n    if self.env['hr.attendance'].search_count([('employee_id', '=', self.employee_id.id), ('check_in', '=', self.check_in), ('check_out', '=', self.check_out)]) > 1:\n        raise ValidationError(_(\"Attendance record already exists for employee %s on %s. Please check existing record at %s.\") % (self.employee_id.name, self.check_in, self.employee_id.attendance_action_url))\n\n", "CodeBleu_score": 18.620479759044855}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n    # Retrieve message details\n    message_details = self.get_message_details()\n\n    # Get email addresses of users in the specified group\n    group_email_addresses = self.get_group_email_addresses()\n\n    # Send email with summary\n    self.send_email_with_summary(message_details, group_email_addresses)\n\n    # Update status to \"Sent\"\n    self.update_status(\"Sent\")\n", "CodeBleu_score": 15.892834568637168}, {"code": "def send_summary(self)\n    # Retrieve message details\n    message_details = self.get_message_details()\n    # Get the email addresses of users in the specified group\n    group_emails = self.get_group_emails(message_details)\n    # Send an email with the summary using a template\n    self.send_email(group_emails)\n    # Update the status to \"Sent\"\n    self.update_status(\"Sent\")\n", "CodeBleu_score": 12.626612435094131}, {"code": "def send_summary(self)\n    # Get the message details\n    message_details = self.get_message_details()\n    # Get the email addresses of users in the specified group\n    group_emails = self.get_group_emails(message_details['group_id'])\n    # Send the email with the summary\n    self.send_email(group_emails, message_details['subject'], message_details['body'])\n    # Update the status to \"Sent\"\n    self.update_status(\"Sent\")\n", "CodeBleu_score": 16.43496801005809}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n    for interview in self.interviews:\n        if interview.job_applicant == self.job_applicant and interview.interview_round == self.interview_round:\n            raise ValueError(f\"Job applicant {self.job_applicant.first_name} {self.job_applicant.last_name} is not allowed to appear twice for the same interview round. Existing interview record: {interview.interview_round.name} ({interview.interview_round.date})\")\n", "CodeBleu_score": 26.878030753357013}, {"code": "def validate_duplicate_interview(self)\n    interview_round = self.round\n    job_applicant = self.job_applicant\n    interviews = Interview.objects.filter(round=interview_round, job_applicant=job_applicant)\n    if interviews.exists():\n        existing_interview = interviews.first()\n        raise ValidationError({\n            'job_applicant': f'Job applicant {job_applicant} is not allowed to appear twice for the same interview round. See existing interview record: {existing_interview.get_absolute_url()}'\n        })\n", "CodeBleu_score": 33.283682319525546}, {"code": "def validate_duplicate_interview(self)\n    # Check for duplicate interview records\n    duplicate_interview = self.env['hr.applicant.interview'].search([\n        ('job_applicant_id', '=', self.job_applicant_id.id),\n        ('interview_round_id', '=', self.interview_round_id.id),\n        ('id', 'not in', self.ids)\n    ])\n    if duplicate_interview:\n        raise ValidationError(_(\"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record: %s\") % (duplicate_interview.name))\n\n    # Check for duplicate interview records in the same interview round\n    duplicate_interview = self.env['hr.applicant.interview'].search([\n        ('job_applicant_id', '=', self.job_applicant_id.id),\n        ('interview_round_id', '=', self.interview_round_id.id),\n        ('id', 'not in', self.ids),\n        ('id', 'not in', self.interview_round_id.interview_ids.ids)\n    ])\n    if duplicate_interview:\n        raise ValidationError(_(\"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record: %s\") % (duplicate_interview.name))", "CodeBleu_score": 45.04764339791208}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n", "CodeBleu_score": 24.918652838027985}, {"code": "def calculate_average_rating(self)\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 26.676786691152678}, {"code": "def calculate_average_rating(self)\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n", "CodeBleu_score": 26.676786691152678}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n    interview = Interview(doc)\n    interview.interview_round = interview_round\n    interview.designation = designation\n    if interviewers:\n        interview.interviewers = interviewers\n    return interview\n", "CodeBleu_score": 22.65065982950255}, {"code": "def create_interview(doc):\n    interview = Interview()\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview\n", "CodeBleu_score": 25.946789135940644}, {"code": "def create_interview(doc):\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = Interview(doc['interview_round'], doc['designation'])\n    if 'interviewers' in doc:\n        for interviewer in doc['interviewers']:\n            interview.add_interviewer(interviewer)\n    return interview\n", "CodeBleu_score": 41.9519854870261}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n    job_offers = self.search_read([('document_status', '=', 1),\n                                   ('designation', '=', designation),\n                                   ('company', '=', company),\n                                   ('create_date', '>=', from_date),\n                                   ('create_date', '<=', to_date)],\n                                  ['name'])\n    return [offer['name'] for offer in job_offers]\n", "CodeBleu_score": 35.43828079420561}, {"code": "def get_job_offer(self, from_date, to_date)\n    job_offer_list = []\n    job_offer_query = self.db.query(JobOffer).filter(JobOffer.status == 1, JobOffer.designation == designation, JobOffer.company == company, JobOffer.created_at >= from_date, JobOffer.created_at <= to_date).all()\n    for job_offer in job_offer_query:\n        job_offer_list.append(job_offer.name)\n    return job_offer_list", "CodeBleu_score": 34.26388123498757}, {"code": "def get_job_offer(self, from_date, to_date)\n    job_offer_list = []\n    job_offer_query = self.get_job_offer_query(from_date, to_date)\n    job_offer_cursor = self.db.cursor()\n    job_offer_cursor.execute(job_offer_query)\n    job_offer_results = job_offer_cursor.fetchall()\n    for job_offer in job_offer_results:\n        job_offer_list.append(job_offer[0])\n    return job_offer_list\n", "CodeBleu_score": 31.94252937363764}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n    from frappe.utils import get_datetime\n    from frappe.query_builder import Interval, IntervalType\n    from frappe.query_builder.functions import Sum\n    from frappe.query_builder.functions import Count\n    from frappe.query_builder.functions import Ifnull\n    from frappe.query_builder.functions import Coalesce\n    from frappe.query_builder import DocType\n    from frappe.query_builder import And_\n    from frappe.query_builder import Case\n    from frappe.query_builder import When\n    from frappe.query_builder import Sum\n    from frappe.query_builder import Count\n    from frappe.query_builder import Ifnull\n    from frappe.query_builder import Coalesce\n    from frappe.query_builder import DocType\n    from frappe.query_builder import And_\n    from frappe.query_builder import Case\n    from frappe.query_builder import When\n    from frappe.query_builder import Sum\n    from frappe.query_builder import Count\n    from frappe.query_builder import Ifnull\n    from frappe.query_builder import Coalesce\n    from frappe.query_builder import DocType\n    from frappe.query_builder import And_\n    from frappe.query_builder import Case\n    from frappe.query_builder import When\n    from frappe.query_builder import Sum\n    from frappe.query_builder import Count\n    from frappe.query_builder import Ifnull\n    from frappe.query_builder import Coalesce\n    from frappe.query_builder import DocType\n    from frappe.query_builder import And_\n    from frappe.query_builder import Case\n    from frappe.query_builder import When\n    from frappe.query_builder import Sum\n    from frappe.query_builder import Count\n    from frappe.query_builder import Ifnull\n    from frappe.query_builder import Coalesce\n    from frappe.query_builder import DocType\n    from frappe.", "CodeBleu_score": 8.258773334183852}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    if company:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1, \"status\": \"Accepted\"})\n    elif department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1, \"status\": \"Accepted\"})\n    else:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n\n    if total_offers > 0:\n        acceptance_rate = accepted_offers / total_offers * 100\n    else:\n        acceptance_rate = 0\n\n    return acceptance_rate, \"Percent\"\n", "CodeBleu_score": 34.63848865098457}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    from erpnext.hr.doctype.offer_letter.offer_letter import OfferLetter\n    total_offers = frappe.db.count(\n        \"Offer Letter\",\n        filters=[[\"docstatus\", \"=\", 1], [\"company\", \"=\", company], [\"department\", \"=\", department]],\n    )\n    accepted_offers = frappe.db.count(\n        \"Offer Letter\",\n        filters=[\n            [\"docstatus\", \"=\", 1],\n            [\"company\", \"=\", company],\n            [\"department\", \"=\", department],\n            [\"status\", \"=\", \"Accepted\"],\n        ],\n    )\n    if total_offers == 0:\n        return 0\n    else:\n        acceptance_rate = (accepted_offers / total_offers) * 100\n        return acceptance_rate\n\n", "CodeBleu_score": 31.86096394288187}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    Result result = employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 69.47266142094819}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 66.1076960949622}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)    final Result result = this.employerService.register(employerForRegisterDto);\n    if (result.isSuccess()) {\n        return ResponseEntity.ok(result);\n    }\n    return ResponseEntity.badRequest().body(result);\n}", "CodeBleu_score": 58.36266890210467}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     final CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n    if (companyStaff == null) {\n        return new Result(false, \"Staff not found\");\n    }\n    if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getOldPassword())) {\n        return new Result(false, \"Password is incorrect\");\n    }\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(companyStaff);\n    return new Result(true, \"Staff updated\");\n}", "CodeBleu_score": 38.772508725141016}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     final Optional<CompanyStaff> companyStaffOptional = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n    if (companyStaffOptional.isEmpty()) {\n        return Result.failure(new ErrorData(ErrorType.RESOURCE_NOT_FOUND, \"Staff not found\"));\n    }\n    final CompanyStaff companyStaff = companyStaffOptional.get();\n    final boolean isPasswordMatch = passwordEncoder.matches(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n    if (!isPasswordMatch) {\n        return Result.failure(new ErrorData(ErrorType.INVALID_DATA, \"Password does not match\"));\n    }\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(companyStaff);\n    return Result.success();\n}\n", "CodeBleu_score": 46.325135478131614}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto)     final CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getStaffId()).orElse(null);\n    if (companyStaff == null) {\n        return Result.fail(ErrorResult.builder().message(\"Staff not found\").build());\n    }\n    if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return Result.fail(ErrorResult.builder().message(\"Password is incorrect\").build());\n    }\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(companyStaff);\n    return Result.ok();\n}", "CodeBleu_score": 43.44657897934559}]}
