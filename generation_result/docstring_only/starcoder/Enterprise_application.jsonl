{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n    # Get request arguments\n    args = self.get_args(**args)\n    # Get HTTP request arguments\n    http_args = self.get_http_args(**args)\n    # Get user information from request\n    user_info = self.get_user_info(args)\n    # Get user ID from user information\n    user_id = user_info[\"user_id\"]\n    # Get request method\n    method = args.get(\"method\", None)\n    # Get request action\n    action = args.get(\"action\", None)\n    # Get request ID\n    request_id = args.get(\"request_id\", None)\n    # Get request token\n    request_token = args.get(\"request_token\", None)\n    # Get request secret\n    request_secret = args.get(\"request_secret\", None)\n    # Get request status\n    request_status = args.get(\"request_status\", None)\n    # Get request status\n    request_type = args.get(\"request_type\", None)\n    # Get request status\n    request_action = args.get(\"request_action\", None)\n    # Get request status\n    request_start = args.get(\"request_start\", None)\n    # Get request status\n    request_end = args.get(\"request_end\", None)\n    # Get request status\n    request_sort = args.get(\"request_sort\", None)\n    # Get request status\n    request_order = args.get(\"request_order\", None)\n    # Get request status\n    request_page = args.get(\"request_page\", None)\n    # Get request status\n    request_per_page = args.get(\"request_per_page\", None)\n    # Get request status\n    request_filters = args.get(\"request_filters\", None)\n    # Get request status\n    request_fields = args.get(\"request_fields\", None)\n    # Get request status\n    request_query = args.get(\"request_query\", None)\n    # Get request status\n    request_view = args.get(\"request_view\", None)\n    # Get request status\n    request_search = args.get(\"request_search\", None)\n    # Get request status\n    request_group = args.get(\"request_group\", None)\n    # Get request status\n    request_limit = args.get(\"request_limit\", None)\n    # Get request status\n    request_offset = args.get(\"request_", "CodeBleu_score": 20.88824084779615}, {"code": "def export_zip_documents(self, **args)\n    # Get the request arguments\n    args = self.get_request_args(**args)\n    # Get the attachment IDs\n    attachment_ids = args.get('attachment_ids', [])\n    # Get the document IDs\n    document_ids = args.get('document_ids', [])\n    # Get the document types\n    document_types = args.get('document_types', [])\n    # Get the document IDs and types\n    document_ids_and_types = []\n    for document_id in document_ids:\n      document_ids_and_types.append({'document_id': document_id, 'document_type': 'document'})\n    for document_type in document_types:\n      document_ids_and_types.append({'document_id': None, 'document_type': document_type})\n    # Get the attachments\n    attachments = []\n    for attachment_id in attachment_ids:\n      attachments.append(self.db.get(attachment_id))\n    for document_id_and_type in document_ids_and_types:\n      attachments.extend(self.db.view('attachment/by_document', key=[document_id_and_type['document_id'], document_id_and_type['document_type']], include_docs=True))\n    # Verify read access to the attachments\n    for attachment in attachments:\n      if not self.is_attachment_readable(attachment):\n        raise HTTPForbidden()\n    # Verify that the attachments are not in the trash\n    for attachment in attachments:\n      if attachment.get('trashed'):\n        raise HTTPForbidden()\n    # Verify that the attachments are not in the deleted state\n    for attachment in attachments:\n      if attachment.get('deleted'):\n        raise HTTPForbidden()\n    # Verify that the attachments are not in the closed state\n    for attachment in attachments:\n      if attachment.get('closed'):\n        raise HTTPForbidden()\n    # Verify that the attachments are not in the cancelled state\n    for attachment in attachments:\n      if attachment.get('cancelled'):\n        raise HTTPForbidden()\n    # Verify that the attachments are not in the pending state\n    for attachment in attachments:\n      if attachment.get('pending'):\n        raise HTTPForbidden()\n    # Verify that the attachments are not in the draft state\n    for attachment in attachments:\n      if attachment.get('draft'):\n        raise HTTPForbidden()\n    # Verify that the attachments are not in the invalid state\n    for attachment in attachments:\n      if attachment.get", "CodeBleu_score": 24.367093609811985}, {"code": "def export_zip_documents(self, **args)\n    if not self.has_read_permission():\n      return self.not_found()\n    if not self.has_write_permission():\n      return self.forbidden()\n    if not self.has_rule_permission():\n      return self.forbidden()\n    if not self.has_attachment_permission():\n      return self.forbidden()\n    if not self.has_attachment_read_permission():\n      return self.forbidden()\n    if not self.has_attachment_write_permission():\n      return self.forbidden()\n    if not self.has_attachment_rule_permission():\n      return self.forbidden()\n    attachment_ids = args.get(\"attachment_ids\")\n    if attachment_ids is None:\n      return self.not_found()\n    attachment_ids = attachment_ids.split(\",\")\n    if len(attachment_ids) == 0:\n      return self.not_found()\n    attachments = Attachment.query(Attachment.id.IN(attachment_ids)).fetch()\n    if len(attachments)!= len(attachment_ids):\n      return self.not_found()\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, \"w\") as zf:\n      for attachment in attachments:\n        zf.writestr(attachment.name, attachment.content)\n    zip_file.seek(0)\n    self.response.headers[\"Content-Type\"] = \"application/zip\"\n    self.response.headers[\"Content-Disposition\"] = \"attachment; filename=attachments.zip\"\n    self.response.headers[\"Content-Length\"] = len(zip_file.getvalue())\n    return zip_file.getvalue()\n\n  def export_zip_documents_from_ids(self, **args):\n    \"\"\"The function export_zip_documents_from_ids retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\"\"\"\n    if not self.has_read_permission():\n      return self.not_found()\n    if not self.has_write_permission():\n      return self.forbidden()\n    if not self.has_rule_permission():\n      return self.forbidden()\n    if not self.has_attachment_permission():\n      return self.for", "CodeBleu_score": 34.98381152887165}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n    values = super()._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self.env['account.move'].search_count([('partner_id', 'in', self.ids), ('state', 'in', ['open', 'paid'])])\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['bill_count'] = self.env['account.move'].search_count([('partner_id', 'in', self.ids), ('state', '=', 'draft')])\n    return values\n\n", "CodeBleu_score": 35.74013246851644}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super(AccountChartTemplate, self)._prepare_home_portal_values(counters)\n    values['invoice_count'] = 0\n    values['bill_count'] = 0\n    if self.env['account.move'].check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = counters.get('account.move', 0)\n        values['bill_count'] = counters.get('account.move', 0)\n    return values\n", "CodeBleu_score": 26.10410908531086}, {"code": "def _prepare_home_portal_values(self, counters)\n    values = super(AccountAnalyticLine, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self.env['account.move'].search_count([('account_id', '=', self.account_id.id), ('move_type', '=', 'out_invoice')])\n        values['bill_count'] = self.env['account.move'].search_count([('account_id', '=', self.account_id.id), ('move_type', '=', 'out_refund')])\n    return values\n", "CodeBleu_score": 33.50144573322298}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\n    # Get the current user\n    user = self.get_user()\n\n    # Get the list of invoices\n    invoices = self.get_my_invoices(user, page, date_begin, date_end, sortby, filterby)\n\n    # Get the total number of invoices\n    count = self.get_my_invoices_count(user, date_begin, date_end, filterby)\n\n    # Get the page number\n    page_number = self.get_page_number(page, count)\n\n    # Get the pagination\n    pagination = self.get_pagination(page_number, count)\n\n    # Get the sorting/filtering options\n    sortby_options, filterby_options = self.get_sortby_options(sortby, filterby)\n\n    # Update the session history\n    self.update_session_history('invoices', invoices)\n\n    # Render the invoices page\n    self.render('portal/my_invoices.html', invoices=invoices, pagination=pagination, page_number=page_number, count=count, sortby=sortby, sortby_options=sortby_options, filterby=filterby, filterby_options=filterby_options)\n", "CodeBleu_score": 26.79038141431787}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    self.session.update(kw)\n    if date_begin:\n        self.session.date_begin = date_begin\n    if date_end:\n        self.session.date_end = date_end\n    if sortby:\n        self.session.sortby = sortby\n    if filterby:\n        self.session.filterby = filterby\n    self.session.page = page\n    self.session.update_history()\n    invoices = self.session.invoices\n    invoices = invoices.filter(Invoice.date_due >= self.session.date_begin, Invoice.date_due <= self.session.date_end)\n    if self.session.filterby:\n        invoices = invoices.filter(Invoice.status == self.session.filterby)\n    if self.session.sortby == \"date_due\":\n        invoices = invoices.order_by(Invoice.date_due.desc())\n    elif self.session.sortby == \"date_paid\":\n        invoices = invoices.order_by(Invoice.date_paid.desc())\n    elif self.session.sortby == \"amount\":\n        invoices = invoices.order_by(Invoice.amount.desc())\n    elif self.session.sortby == \"status\":\n        invoices = invoices.order_by(Invoice.status.desc())\n    else:\n        invoices = invoices.order_by(Invoice.date_due.desc())\n    invoices = invoices.paginate(page, self.session.pagesize)\n    self.session.invoices = invoices\n    return render_template(\"portal/my_invoices.html\", invoices=invoices, page=page, date_begin=self.session.date_begin, date_end=self.session.date_end, sortby=self.session.sortby, filterby=self.session.filterby, **kw)\n", "CodeBleu_score": 26.87162433851401}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n    if date_begin is None:\n        date_begin = datetime.date.today()\n    if date_end is None:\n        date_end = datetime.date.today()\n    if sortby is None:\n        sortby = 'invoice_date'\n    if filterby is None:\n        filterby = 'all'\n    if 'invoice_date' in sortby:\n        sortby = 'invoice_date'\n    else:\n        sortby = 'invoice_id'\n    if 'invoice_id' in sortby:\n        sortby = 'invoice_id'\n    else:\n        sortby = 'invoice_date'\n    if 'all' in filterby:\n        filterby = 'all'\n    else:\n        filterby = 'paid'\n    invoices = self.db.invoices.find({'user_id': self.session['user_id'], 'invoice_date': {'$gte': date_begin, '$lte': date_end}})\n    if 'paid' in filterby:\n        invoices = invoices.find({'paid': True})\n    invoices = invoices.sort(sortby, pymongo.DESCENDING)\n    invoices = invoices.skip(self.settings['invoices_per_page'] * (page - 1))\n    invoices = invoices.limit(self.settings['invoices_per_page'])\n    invoices = list(invoices)\n    self.session['invoice_ids'] = [invoice['invoice_id'] for invoice in invoices]\n    self.session.save()\n    self.render('invoices.html', invoices=invoices, page=page, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby)\n", "CodeBleu_score": 33.78706717896562}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    invoice_id = int(invoice_id)\n    invoice = Invoice.query.filter_by(id=invoice_id).first()\n    if not invoice:\n        abort(404)\n    if invoice.status == 'posted':\n        if not access_token:\n            abort(401)\n        if not invoice.access_token_valid(access_token):\n            abort(401)\n    if report_type:\n        report_type = report_type.lower()\n        if report_type not in ('pdf', 'html', 'text'):\n            abort(404)\n    if download:\n        if report_type == 'pdf':\n            return self.portal_my_invoice_download(invoice_id, access_token=access_token, report_type=report_type, **kw)\n        else:\n            abort(404)\n    return self.portal_my_invoice(invoice_id, report_type=report_type, **kw)\n\n", "CodeBleu_score": 25.96624087819733}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    invoice_id = int(invoice_id)\n    invoice = Invoice.get_by(id=invoice_id)\n    if not invoice:\n      abort(404)\n    if not invoice.is_visible():\n      abort(404)\n    if invoice.is_hidden():\n      abort(404)\n    if not invoice.is_accessible(access_token=access_token):\n      abort(404)\n    if report_type == 'pdf' and download:\n      return self.portal_my_invoice_download(invoice_id, access_token=access_token, **kw)\n    if report_type == 'pdf' and not download:\n      return self.portal_my_invoice_pdf(invoice_id, access_token=access_token, **kw)\n    if report_type == 'text':\n      return self.portal_my_invoice_text(invoice_id, access_token=access_token, **kw)\n    if report_type == 'html':\n      return self.portal_my_invoice_html(invoice_id, access_token=access_token, **kw)\n    return self.portal_my_invoice(invoice_id, access_token=access_token, **kw)\n  portal_my_invoice_detail = auth.public(portal_my_invoice_detail)\n\n  def portal_my_invoice_download(self, invoice_id, access_token=None, **kw):\n    \"\"\"The function portal_my_invoice_download checks access to an invoice and redirects if access is denied. If a PDF download of a posted invoice is requested, it retrieves legal documents, creates a zip file if there are multiple attachments, and returns the file with appropriate headers.\"\"\"\n    invoice_id = int(invoice_id)\n    invoice = Invoice.get_by(id=invoice_id)\n    if not invoice:\n      abort(404)\n    if not invoice.is_visible():\n      abort(404)\n    if invoice.is_hidden():\n      abort(404)\n    if not invoice.is_accessible(access_token=access_token):\n      abort(404)\n    if invoice.is_posted():\n      return self.portal_my_invoice_download_posted(invoice_id, access_token=access_token, **kw)\n    return self.portal_my_invoice_", "CodeBleu_score": 33.00649806572263}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n    invoice = get_object_or_404(Invoice, pk=invoice_id)\n    if not invoice.is_accessible_to(self.request.user):\n      raise PermissionDenied\n    if report_type is None:\n      report_type = self.request.GET.get('report_type', None)\n    if report_type is None:\n      report_type = 'html'\n    if report_type == 'pdf':\n      if not invoice.is_posted:\n        raise PermissionDenied\n      if not invoice.is_legal:\n        raise PermissionDenied\n      if not invoice.is_accessible_to(self.request.user):\n        raise PermissionDenied\n      if download:\n        return self.download_invoice_pdf(invoice, access_token)\n      else:\n        return self.show_invoice_pdf(invoice, access_token)\n    if report_type == 'text':\n      if not invoice.is_posted:\n        raise PermissionDenied\n      if not invoice.is_legal:\n        raise PermissionDenied\n      if not invoice.is_accessible_to(self.request.user):\n        raise PermissionDenied\n      return self.show_invoice_text(invoice, access_token)\n    if report_type == 'html':\n      return self.show_invoice_html(invoice, access_token)\n    raise Http404\n\n  def download_invoice_pdf(self, invoice, access_token):\n    \"\"\"The function download_invoice_pdf creates a zip file of legal documents and returns it with appropriate headers.\"\"\"\n    if access_token is None:\n      raise PermissionDenied\n    if invoice.access_token!= access_token:\n      raise PermissionDenied\n    if not invoice.is_legal:\n      raise PermissionDenied\n    if not invoice.is_accessible_to(self.request.user):\n      raise PermissionDenied\n    if invoice.is_posted:\n      documents = invoice.legaldocument_set.all()\n      if documents.count() == 0:\n        raise PermissionDenied\n      zip_file = create_invoice_zip(invoice)\n      response = HttpResponse(zip_file.getvalue(), content_type='application/zip')\n      response['Content-Disposition'] = 'attachment; filename=invoice-%s.zip' % invoice.invoice_number\n      return response\n    else:\n      raise PermissionDenied\n\n  def show_invoice_pdf(self, invoice, access_token):\n    \"\"\"The function show_invoice_pdf pre", "CodeBleu_score": 33.89238509212405}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n    domain = [('sale_ok', '=', True), ('purchase_ok', '=', True)]\n    if company:\n      domain.append(('company_id', '=', company.id))\n    else:\n      company = self.env.user.company_id\n    taxes = {}\n    taxes['sale'] = company.account_sale_tax_id or False\n    taxes['purchase'] = company.account_purchase_tax_id or False\n    for product in self.env['product.template'].search(domain):\n      if taxes['sale']:\n        product.taxes_id = [(6, 0, [taxes['sale'].id])]\n      if taxes['purchase']:\n        product.supplier_taxes_id = [(6, 0, [taxes['purchase'].id])]\n    return True\n\n  def _get_demo_data_partners(self, company=False):\n    \"\"\"The function _get_demo_data_partners creates a demo customer and vendor, and assigns them to the specified company.\"\"\"\n    company = company or self.env.user.company_id\n    customer = self.env['res.partner'].create({\n      'name': '<NAME>',\n      'email': '<EMAIL>',\n      'is_company': True,\n      'customer': True,\n      'company_id': company.id,\n    })\n    vendor = self.env['res.partner'].create({\n      'name': '<NAME>',\n      'email': '<EMAIL>',\n      'is_company': True,\n     'supplier': True,\n      'company_id': company.id,\n    })\n    return True\n\n  def _get_demo_data_invoice(self, company=False):\n    \"\"\"The function _get_demo_data_invoice creates a demo invoice for the specified company.\"\"\"\n    company = company or self.env.user.company_id\n    invoice = self.env['account.invoice'].create({\n      'partner_id': company.partner_id.id,\n      'company_id': company.id,\n      'account_id': company.property_account_receivable_id.id,\n      'currency_id': company.currency_id.id,\n      'date_invoice': fields.Date.from_string('2017-01-01'),\n      'date_due': fields.Date.from_string('2017-01-08'),", "CodeBleu_score": 32.056319067237965}, {"code": "def _get_demo_data_products(self, company=False)\n    if not company:\n        company = self.env.user.company_id\n    domain = [('company_id', '=', company.id), ('sale_ok', '=', True)]\n    if company.account_sale_tax_id:\n        domain += [('taxes_id', 'in', company.account_sale_tax_id.ids)]\n    if company.account_purchase_tax_id:\n        domain += [('purchase_taxes_id', 'in', company.account_purchase_tax_id.ids)]\n    return self.env['product.template'].search(domain)\n\n", "CodeBleu_score": 30.430949383382256}, {"code": "def _get_demo_data_products(self, company=False)\n    product_templates = self.env['product.template'].search([('domain', '=', company.domain)])\n    for product_template in product_templates:\n        product = product_template.product_variant_id\n        if company.account_sale_tax_id:\n            product.taxes_id = [(4, company.account_sale_tax_id.id, 0)]\n        if company.account_purchase_tax_id:\n            product.supplier_taxes_id = [(4, company.account_purchase_tax_id.id, 0)]\n", "CodeBleu_score": 18.940998021122144}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n    if not company:\n        return False\n    # try to find the account using the company's ID and the xml_id in the 'ir.model.data' model\n    try:\n        return self.env['account.account'].browse(self.env['ir.model.data'].xmlid_to_res_id('base.' + xml_id, raise_if_not_found=True))\n    except:\n        pass\n    # try to find an account matching the account_type within the company's domain\n    account_ids = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)])\n    if account_ids:\n        return account_ids[0]\n    # return the first account within the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n", "CodeBleu_score": 43.55688608478256}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    domain = [('company_id', '=', company.id), ('xml_id', '=', xml_id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    if not account:\n        domain = [('company_id', '=', company.id), ('user_type_id', '=', account_type.id)]\n        account = self.env['account.account'].search(domain, limit=1)\n    if not account:\n        domain = [('company_id', '=', company.id)]\n        account = self.env['account.account'].search(domain, limit=1)\n    return account\n", "CodeBleu_score": 48.23378730639894}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n    ir_model_data = self.pool.get('ir.model.data')\n    try:\n        return ir_model_data.get_object_reference(self._cr, self._uid, 'account', xml_id)[1]\n    except ValueError:\n        pass\n    domain = [('type', '=', account_type), ('company_id', '=', company.id)]\n    accounts = self.pool.get('account.account').search(self._cr, self._uid, domain)\n    if len(accounts) > 0:\n        return accounts[0]\n    else:\n        return self.pool.get('account.account').search(self._cr, self._uid, [('company_id', '=', company.id)])[0]\n", "CodeBleu_score": 45.902658215263315}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n    if self.type == \"Current Year Earnings\":\n      accounts = frappe.get_all(\"Account\", filters={\"type\": \"Current Year Earnings\", \"company\": self.company}, fields=[\"name\"])\n      if len(accounts) > 1:\n        raise frappe.ValidationError(\"There can be only one Current Year Earnings account per company.\")\n\n", "CodeBleu_score": 31.179093028723358}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    if self.type == \"Current Year Earnings\":\n      accounts = frappe.db.sql(\"\"\"SELECT name, company FROM `tabAccount` WHERE type = 'Current Year Earnings' AND name!= %s GROUP BY company\"\"\", self.name, as_dict=True)\n      if len(accounts) > 1:\n        companies = \", \".join([account.company for account in accounts])\n        frappe.throw(_(\"There can only be one Current Year Earnings account for each company. There are {0} Current Year Earnings accounts for the following companies: {1}.\").format(len(accounts), companies))\n", "CodeBleu_score": 30.587306687484517}, {"code": "def _check_account_type_unique_current_year_earning(self)\n    accounts = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    if len(accounts) > 1:\n        raise ValidationError(_('You can only have one Current Year Earnings account per company.'))\n\n", "CodeBleu_score": 16.875014452631696}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\n    if name:\n        domain = domain or []\n        if isinstance(name, str):\n            name = name.split(' ')\n        for i in range(len(name)):\n            domain += [('name', operator,''.join(name[i:]))]\n    elif self._context.get('default_partner_id') or self._context.get('default_user_id'):\n        domain = domain or []\n        if self._context.get('default_partner_id'):\n            domain += [('id', 'child_of', self._context['default_partner_id'])]\n        if self._context.get('default_user_id'):\n            domain += [('user_ids', 'in', [self._context['default_user_id']])]\n        order = 'frequency'\n    else:\n        domain = domain or []\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 45.45348315500352}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not name and self.env.context.get('default_partner_id') and self.env.context.get('default_partner_id')!= self.env.user.partner_id.id:\n        partner = self.env['res.partner'].browse(self.env.context['default_partner_id'])\n        domain = [('partner_id', '=', partner.id)]\n        order = 'website_published desc'\n        return self.search(domain, limit=limit, order=order)\n\n    domain = domain or []\n    if operator in ('ilike', 'like', '=', '=like', '=ilike'):\n        name = '%%%s%%' % name\n        operator = operator.replace('=', '')\n    if operator == 'not ilike' or operator == 'not like':\n        name = '%%%s%%' % name\n    if operator in ('=', 'ilike', 'like'):\n        domain = expression.AND([domain, [(self._rec_name, operator, name)]])\n    elif operator == 'not ilike' or operator == 'not like':\n        domain = expression.AND([domain, [(self._rec_name, operator, name)]])\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 47.70390830094946}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n    if not (name or operator == 'ilike' or domain):\n        args = self.env.context.get('active_test', False) and [('partner_id', 'in', self.ids)] or []\n        if 'default_partner_id' in self._context:\n            args.append(('partner_id', '=', self._context['default_partner_id']))\n        partner_data = self.env['res.partner'].read_group(args, ['partner_id'], ['partner_id'])\n        res = sorted([(r['partner_id'][0], r['partner_id_count']) for r in partner_data], key=lambda r: r[1], reverse=True)\n        return self.browse(res[:limit] and res[:limit][0][0] or [])\n\n    if not domain:\n        domain = []\n    if name:\n        domain = expression.AND([domain, [(operator, 'name', name)]])\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 41.07405194736073}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\n    # To copy translations, we need to:\n    # 1. Create a dictionary of the translations in the current record\n    # 2. Update the dictionary with the translations in the new record\n    # 3. Update the translations in the current record with the new dictionary\n    # 4. Update the translations in the cache to reflect the new name format (if applicable)\n\n    # 1. Create a dictionary of the translations in the current record\n    trans_dict = {}\n    for field in self._fields:\n        if field.translate and field.name not in excluded:\n            trans_dict[field.name] = self[field.name]\n\n    # 2. Update the dictionary with the translations in the new record\n    for field in new._fields:\n        if field.translate and field.name not in excluded:\n            trans_dict[field.name] = new[field.name]\n\n    # 3. Update the translations in the current record with the new dictionary\n    for field in self._fields:\n        if field.translate and field.name not in excluded:\n            self[field.name] = trans_dict[field.name]\n\n    # 4. Update the translations in the cache to reflect the new name format (if applicable)\n    if self.name_get_name_field():\n        self.update_name_cache(self[self.name_get_name_field()])\n", "CodeBleu_score": 23.542592971754235}, {"code": "def copy_translations(self, new, excluded=())\n\n    # Copy the translations from the current record to the new one\n    super(self.__class__, self).copy_translations(new, excluded)\n\n    # Update the name field in the cache to reflect the new name format\n    if self.name!= new.name:\n        self.update_translations(new, {'name': new.name})\n", "CodeBleu_score": 20.24059337989278}, {"code": "def copy_translations(self, new, excluded=())\n\n    for field in self._fields:\n        if field in excluded:\n            continue\n        if field == 'name':\n            continue\n        if field in new._fields:\n            if self[field]:\n                new[field] = self[field]\n        else:\n            new[field] = self[field]\n", "CodeBleu_score": 24.070405476466636}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n    if self.env.context.get('type') == 'out_invoice':\n        action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n        action['domain'] = [('id', 'in', self.env['account.move.line'].search([('move_id.sale_type', '=', 'contract'), ('account_id.user_type_id.type', '=','receivable')]).move_id.ids)]\n        action['context'] = {\n            'default_type': 'out_invoice',\n            'default_journal_id': self.env.ref('account.account_sales_journal').id,\n           'search_default_customer': 1,\n            'default_customer': self.id,\n           'search_default_group_by_move_lines': 1,\n            'group_by':'move_id'\n        }\n    elif self.env.context.get('type') == 'out_refund':\n        action = self.env.ref('account.action_move_out_refund_type').read()[0]\n        action['domain'] = [('id', 'in', self.env['account.move.line'].search([('move_id.sale_type', '=', 'contract'), ('account_id.user_type_id.type', '=','receivable')]).move_id.ids)]\n        action['context'] = {\n            'default_type': 'out_refund',\n            'default_journal_id': self.env.ref('account.account_sales_journal').id,\n           'search_default_customer': 1,\n            'default_customer': self.id,\n           'search_default_group_by_move_lines': 1,\n            'group_by':'move_id'\n        }\n    elif self.env.context.get('type') == 'in_invoice':\n        action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n        action['domain'] = [('id', 'in', self.env['account.move.line'].search([('move_id.sale_type', '=', 'contract'), ('account_id.user_type_id.type', '=', 'payable')]).move_id.ids)]\n        action['context'] = {\n            '", "CodeBleu_score": 39.55516063876314}, {"code": "def action_view_invoice(self)\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env['account.move'].default_get(['journal_id'])['journal_id'],\n        'default_partner_id': self.id,\n       'search_default_customer': 1,\n    }\n    action['domain'] = [('id', 'in', self.mapped('account_move_id').filtered(lambda move: move.is_sale_document()).ids)]\n    return action\n", "CodeBleu_score": 33.25803642646731}, {"code": "def action_view_invoice(self)\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_partner_id': self.id,\n        'default_journal_id': self.property_account_receivable_id.id,\n       'search_default_customer': self.id,\n       'search_default_draft': False,\n        'group_by':'move_id',\n       'search_default_group_by_no_group': True,\n       'search_default_move_type': 'out_invoice',\n       'search_default_period_from': self._context.get('invoice_date_from', False),\n       'search_default_period_to': self._context.get('invoice_date_to', False),\n    }\n    action['domain'] = [('id', 'in', self.mapped('account_move_ids').ids)]\n    return action\n\n", "CodeBleu_score": 34.60851546310275}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n    if not self.env.context.get('default_move_type', False):\n      self.env.context['default_move_type'] = 'in_invoice'\n    move_ids = self.env['account.move'].search([('purchase_id', '=', self.id)])\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n       'search_default_purchase_id': self.id,\n        'default_move_type': 'in_invoice',\n       'search_default_move_type': 'in_invoice',\n        'create': False,\n        'edit': False,\n        'delete': False,\n        'pivot_measures': ['product_uom_qty'],\n        'active_id': self.id,\n        'active_ids': move_ids.ids,\n        'active_model': 'account.move',\n       'search_view_id': self.env.ref('account.view_move_search').id,\n        'view_no_maturity': True,\n        'views': [[self.env.ref('account.view_move_tree').id, 'tree'], [self.env.ref('account.view_move_form').id, 'form']],\n        'view_mode': 'tree,form',\n       'search_view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'toolbar': False,\n    }\n    return action\n\n  @api.model\n  def create(self, vals):\n    \"\"\"The function create creates a new purchase order and creates a new account move to track the purchase order. It then creates a new purchase order line and returns the ID of the purchase order line. It also creates a new purchase order tax line and returns the ID of the purchase order tax line.\"\"\"\n    purchase_order_line_obj = self.env['purchase.order.line']\n    purchase_order_tax_line_obj = self.env['purchase.order.tax.line']\n    purchase_order_line_vals = {}\n    purchase_order_tax_line_vals = {}\n    purchase_order_vals = {}\n    account_move_vals = {}\n    purchase_order_vals.update(vals)\n    account_move_vals.update(vals)\n    account_move_vals['move_", "CodeBleu_score": 39.109109878999}, {"code": "def action_view_vendor_bill(self)\n    self = self.with_context(\n        active_model=\"account.move\",\n        active_ids=self.env[\"account.move\"].search([(\"purchase_id\", \"=\", self.id)]).ids,\n        active_id=self.id,\n        default_move_type=\"in_invoice\",\n        search_default_purchase=1,\n    )\n    return {\n        \"name\": _(\"Vendor Bills\"),\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"view_mode\": \"tree,form\",\n        \"context\": {\n            \"search_default_purchase\": 1,\n            \"default_purchase_id\": self.id,\n            \"search_default_move_type\": \"in_invoice\",\n        },\n    }\n\n", "CodeBleu_score": 32.57582557654077}, {"code": "def action_view_vendor_bill(self)\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type')\n    action['context'] = {\n       'search_default_move_type': 'in_invoice',\n        'default_move_type': 'in_invoice',\n       'search_default_journal_id': self.id,\n       'search_default_partner_id': self.partner_id.id,\n       'search_default_company_id': self.company_id.id,\n        'default_journal_id': self.id,\n        'default_partner_id': self.partner_id.id,\n        'default_company_id': self.company_id.id,\n       'search_default_period_id': self.period_id.id,\n        'default_period_id': self.period_id.id,\n       'search_default_date_range': 'due_date',\n        'default_date_range': 'due_date',\n    }\n    action['domain'] = [('id', 'in', self.env['account.move'].search([('journal_id', '=', self.id), ('partner_id', '=', self.partner_id.id), ('company_id', '=', self.company_id.id), ('move_type', '=', 'in_invoice')]).ids)]\n    return action\n", "CodeBleu_score": 37.7115866057368}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n    if isinstance(values, dict):\n      if 'attachment_ids' in values:\n        del values['attachment_ids']\n      with self.context_manager(values):\n        return super(AttachmentMixin, self).write(values)\n    else:\n      return super(AttachmentMixin, self).write(values)\n\n  def copy(self, default=None):\n    \"\"\"The function copy copies the current record and returns the new record. It checks attachments within a context manager before calling the parent class's copy method and returning the result.\"\"\"\n    with self.context_manager(default):\n      return super(AttachmentMixin, self).copy(default)\n\n  def unlink(self):\n    \"\"\"The function unlink deletes the current record and returns the result. It checks attachments within a context manager before calling the parent class's unlink method and returning the result.\"\"\"\n    with self.context_manager():\n      return super(AttachmentMixin, self).unlink()\n\n  def context_manager(self, values=None):\n    \"\"\"The function context_manager returns a context manager that checks attachments before performing the requested operation. It takes the current record as a parameter and returns a context manager that checks attachments before performing the requested operation.\"\"\"\n    return AttachmentContextManager(self, values)\n\n  def check_attachments(self, values):\n    \"\"\"The function check_attachments checks attachments before performing the requested operation. It takes the current record and values as parameters and returns a list of attachment ids that are not valid.\"\"\"\n    if values is None:\n      values = {}\n    attachment_ids = values.get('attachment_ids')\n    if attachment_ids is None:\n      attachment_ids = self.attachment_ids\n    if attachment_ids is None:\n      return []\n    return self.check_attachment_ids(attachment_ids)\n\n  def check_attachment_ids(self, attachment_ids):\n    \"\"\"The function check_attachment_ids checks attachments before performing the requested operation. It takes the current record and attachment ids as parameters and returns a list of attachment ids that are not valid.\"\"\"\n    return [attachment_id for attachment_id in attachment_ids if not self.check_attachment_id(attachment_id)]\n\n  def check_attachment_id(self, attachment_id):\n    \"\"\"The function check_attachment_id checks an attachment before performing the requested operation. It takes the current record and attachment id as parameters and returns True if the attachment id is valid, False otherwise.\"\"\"\n    return self.env['ir.", "CodeBleu_score": 31.973984057425554}, {"code": "def write(self, values)\n    if 'attachment_ids' in values:\n      attachment_ids = values.pop('attachment_ids')\n      if attachment_ids:\n        with self.context_manager(attachment_ids):\n          return super(AttachmentModel, self).write(values)\n      else:\n        return super(AttachmentModel, self).write(values)\n    else:\n      return super(AttachmentModel, self).write(values)\n\n  def context_manager(self, attachment_ids):\n    \"\"\"This function is a context manager that checks if the provided attachment_ids are valid. It returns an AttachmentError if any of the attachments are invalid.\"\"\"\n    for attachment_id in attachment_ids:\n      if not self.check_attachment_id(attachment_id):\n        raise AttachmentError('Invalid attachment ID: {}'.format(attachment_id))\n\n  def check_attachment_id(self, attachment_id):\n    \"\"\"This function checks if the provided attachment_id is valid. It returns True if the attachment_id is valid, and False if it is not.\"\"\"\n    return attachment_id in self.get_attachment_ids()\n\n  def get_attachment_ids(self):\n    \"\"\"This function returns a list of attachment_ids for the current record.\"\"\"\n    return [attachment.id for attachment in self.attachment_ids]\n\n  def get_attachment_names(self):\n    \"\"\"This function returns a list of attachment_names for the current record.\"\"\"\n    return [attachment.name for attachment in self.attachment_ids]\n\n  def get_attachment_urls(self):\n    \"\"\"This function returns a list of attachment_urls for the current record.\"\"\"\n    return [attachment.url for attachment in self.attachment_ids]\n\n  def get_attachment_mime_types(self):\n    \"\"\"This function returns a list of attachment_mime_types for the current record.\"\"\"\n    return [attachment.mime_type for attachment in self.attachment_ids]\n\n  def get_attachment_sizes(self):\n    \"\"\"This function returns a list of attachment_sizes for the current record.\"\"\"\n    return [attachment.size for attachment in self.attachment_ids]\n\n  def get_attachment_ids_and_names(self):\n    \"\"\"This function returns a list of tuples containing attachment_ids and attachment_names for the current record.\"\"\"\n    return [(attachment.id, attachment.name) for attachment in self.attachment_ids]\n\n  def get_attachment_ids_and_urls(self):", "CodeBleu_score": 32.54091900724544}, {"code": "def write(self, values)\n    if 'attachment_ids' in values:\n      del values['attachment_ids']\n    with self.context(values):\n      return super(AttachmentMixin, self).write(values)\n\n  def _check_attachments(self, values):\n    \"\"\"This function checks that attachments exist for all the attachment_ids in values. If any attachment_ids are missing, it raises an AttachmentNotFound exception. It also checks that the attachments are not in use by another record. It raises an AttachmentInUse exception if any are in use.\"\"\"\n    if 'attachment_ids' in values:\n      attachments = self.env['ir.attachment'].browse(values['attachment_ids'])\n      missing_attachments = attachments.filtered(lambda a: not a.exists())\n      if missing_attachments:\n        raise exceptions.AttachmentNotFound(missing_attachments)\n      in_use_attachments = attachments.filtered(lambda a: a.res_model and a.res_id)\n      if in_use_attachments:\n        raise exceptions.AttachmentInUse(in_use_attachments)\n\n  def _check_attachments_on_write(self, values):\n    \"\"\"This function checks that attachments exist for all the attachment_ids in values. If any attachment_ids are missing, it raises an AttachmentNotFound exception. It also checks that the attachments are not in use by another record. It raises an AttachmentInUse exception if any are in use.\"\"\"\n    if 'attachment_ids' in values:\n      attachments = self.env['ir.attachment'].browse(values['attachment_ids'])\n      missing_attachments = attachments.filtered(lambda a: not a.exists())\n      if missing_attachments:\n        raise exceptions.AttachmentNotFound(missing_attachments)\n      in_use_attachments = attachments.filtered(lambda a: a.res_model and a.res_id and a.res_model!= self._name and a.res_id!= self.id)\n      if in_use_attachments:\n        raise exceptions.AttachmentInUse(in_use_attachments)\n\n  @api.model\n  def create(self, values):\n    \"\"\"The function create calls _check_attachments to check that all attachments exist and are not in use. If so, it raises an AttachmentNotFound exception or AttachmentInUse exception. It then checks attachments within a context manager before calling the parent class's create method and returning the result.\"\"\"\n    self._check_attachments(values)\n    with self.context(values):\n      return super(", "CodeBleu_score": 32.64784238807007}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n    if self.env.context.get('skip_account_creation'):\n        return self.env['res.partner.bank'].new()\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.account_number), ('partner_id', '=', self.id)])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.account_number,\n            'partner_id': self.id,\n            'bank_id': self.bank_id.id,\n            'acc_type': self.bank_account_type,\n        })\n    return bank_account\n\n", "CodeBleu_score": 54.986320001979614}, {"code": "def _find_or_create_bank_account(self)\n    if self.skip_bank_account_creation:\n      return self.env['res.partner.bank'].new({'acc_number': '0000000000'})\n    else:\n      return self._find_or_create_bank_account_for_partner(self.company_id.partner_id)\n\n  def _find_or_create_bank_account_for_partner(self, partner):\n    \"\"\"The function _find_or_create_bank_account_for_partner ensures a single record context, searches for an existing bank account with the same account number and partner ID, creating a new one if none is found. The function returns the bank account filtered by the company ID.\"\"\"\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.bank_account_number), ('partner_id', '=', partner.id)])\n    if not bank_account:\n      bank_account = self.env['res.partner.bank'].create({\n        'acc_number': self.bank_account_number,\n        'partner_id': partner.id,\n        'company_id': self.company_id.id,\n       'state': 'open',\n        'bank_id': self.bank_id.id,\n       'sequence': 10,\n      })\n    return bank_account\n\n  def _get_bank_account_data(self):\n    \"\"\"The function _get_bank_account_data returns the bank account data for the partner bank account.\"\"\"\n    return {\n      'acc_number': self.bank_account_number,\n      'partner_id': self.partner_id.id,\n      'company_id': self.company_id.id,\n     'state': 'open',\n      'bank_id': self.bank_id.id,\n     'sequence': 10,\n    }\n\n  def _get_bank_data(self):\n    \"\"\"The function _get_bank_data returns the bank data for the bank account.\"\"\"\n    return {\n      'name': self.bank_id.name,\n      'bic': self.bank_id.bic,\n      'partner_id': self.partner_id.id,\n      'company_id': self.company_id.id,\n     'state': 'open',\n     'sequence': 10,\n    }\n\n  def _get_", "CodeBleu_score": 46.484323211080806}, {"code": "def _find_or_create_bank_account(self)\n    if self.skip_bank_account_creation:\n      return self.env['res.partner.bank'].new({\n        'acc_number': self.account_number,\n        'partner_id': self.partner_id.id,\n      })\n    return self.env['res.partner.bank'].search([\n      ('acc_number', '=', self.account_number),\n      ('partner_id', '=', self.partner_id.id),\n    ], limit=1)\n\n  @api.model\n  def _get_bank_account_data(self, partner_id, company_id):\n    \"\"\"The function _get_bank_account_data returns the bank account data for the given partner and company. It returns a dictionary with the bank account data, the bank account code, and the bank account name.\"\"\"\n    if partner_id:\n      bank_account_data = self.env['res.partner.bank'].search([\n        ('partner_id', '=', partner_id),\n        ('company_id', '=', company_id),\n      ], limit=1)\n      if bank_account_data:\n        bank_account_code = bank_account_data.acc_number\n        bank_account_name = bank_account_data.acc_holder_name\n      else:\n        bank_account_code = ''\n        bank_account_name = ''\n    else:\n      bank_account_code = ''\n      bank_account_name = ''\n    return {\n      'bank_account_code': bank_account_code,\n      'bank_account_name': bank_account_name,\n    }\n\n  @api.model\n  def _get_bank_account_fields(self, partner_id, company_id):\n    \"\"\"The function _get_bank_account_fields returns the bank account fields for the given partner and company.\"\"\"\n    if partner_id:\n      bank_account_data = self.env['res.partner.bank'].search([\n        ('partner_id', '=', partner_id),\n        ('company_id', '=', company_id),\n      ], limit=1)\n      if bank_account_data:\n        bank_account_code = bank_account_data.acc_number\n        bank_account_name = bank_account_data.acc_holder_name\n      else:\n        bank_account_code = ''\n        bank_account_name = ''\n    else:\n      bank_account_code", "CodeBleu_score": 43.42425620390266}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    # TODO: This function is a bit of a mess and could use some refactoring.\n    # TODO: This function is also very slow, and could probably be optimized.\n    # TODO: This function is also very memory intensive, and could probably be optimized.\n    # TODO: This function is also very hard to understand, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n\n    # TODO: This function is also very hard to understand, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    # TODO: This function is also very hard to test, and could probably be improved.\n    #", "CodeBleu_score": 1.5725316675342702}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    # Get the company currency and the transaction currency\n    company_currency = self.company_currency_id\n    transaction_currency = self.currency_id\n    # Get the exchange rate from the transaction currency to the company currency\n    rate = currency.with_context(date=self.date).rate\n    # Get the exchange rate from the transaction currency to the amount currency\n    amount_rate = amount_currency.with_context(date=self.date).rate\n    # Get the exchange rate from the company currency to the amount currency\n    company_amount_rate = company_currency.with_context(date=self.date).rate\n    # Get the exchange rate from the company currency to the transaction currency\n    company_rate = company_currency.with_context(date=self.date).rate / company_amount_rate\n    # Get the exchange rate from the amount currency to the company currency\n    amount_company_rate = amount_currency.with_context(date=self.date).rate / company_amount_rate\n    # Get the exchange rate from the amount currency to the transaction currency\n    amount_rate_company = amount_currency.with_context(date=self.date).rate / company_rate\n    # Get the exchange rate from the transaction currency to the amount currency\n    rate_amount = currency.with_context(date=self.date).rate / amount_rate\n    # Get the exchange rate from the company currency to the transaction currency\n    rate_company = company_currency.with_context(date=self.date).rate / amount_rate_company\n    # Get the exchange rate from the company currency to the amount currency\n    rate_company_amount = company_currency.with_context(date=self.date).rate / amount_company_rate\n    # Get the exchange rate from the amount currency to the transaction currency\n    rate_amount_company = amount_currency.with_context(date=self.date).rate / amount_rate_company\n    # Get the exchange rate from the transaction currency to the company currency\n    rate_company_currency = company_currency.with_context(date=self.date).rate / amount_company_rate\n    # Get the exchange rate from the amount currency to the company currency\n    rate_amount_company_currency = amount_currency.with_context(date=self.date).rate / company_rate\n    # Get the exchange rate from the company currency to the transaction currency", "CodeBleu_score": 14.908095357083385}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n    # Ensure single record context\n    self.ensure_one()\n    # Retrieve relevant accounting amounts and currencies\n    st_line_currency = self.currency_id\n    st_line_amount = self.amount_currency\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    if currency == st_line_currency:\n        # If the transaction currency and the st_line currency are the same,\n        # we can simply use the st_line amount and balance\n        transaction_amount = st_line_amount\n        journal_amount = balance\n        company_amount = balance\n    else:\n        # If the transaction currency and the st_line currency are different,\n        # we need to compute the transaction amount, journal amount, and company amount\n        if currency.is_zero(amount_currency):\n            # If the transaction currency is zero, we can simply use the st_line amount and balance\n            transaction_amount = st_line_amount\n            journal_amount = balance\n            company_amount = balance\n        else:\n            # If the transaction currency is not zero, we need to compute the transaction amount, journal amount, and company amount\n            if st_line_currency.is_zero(st_line_amount):\n                # If the st_line currency is zero, we can simply use the transaction amount and balance\n                transaction_amount = amount_currency\n                journal_amount = balance\n                company_amount = balance\n            else:\n                # If the st_line currency is not zero, we need to compute the transaction amount, journal amount, and company amount\n                if currency.is_zero(balance):\n                    # If the transaction currency is zero, we can simply use the st_line amount and balance\n                    transaction_amount = st_line_amount\n                    journal_amount = balance\n                    company_amount = balance\n                else:\n                    # If the transaction currency is not zero, we need to compute the transaction amount, journal amount, and company amount\n                    if st_line_currency.is_zero(balance):\n                        # If the st_line currency is zero, we can simply use the transaction amount and balance\n                        transaction_amount = amount_currency\n                        journal_amount = balance\n                        company_amount = balance\n                    else:\n                        # If the st_line currency is not zero, we need to compute the transaction amount, journal amount, and company amount\n                        # Compute the transaction amount\n                        transaction_amount = currency._convert(amount_currency, st_line_currency", "CodeBleu_score": 20.438191643732782}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ('bank', 'cash'):\n            for method in journal.outbound_payment_method_ids:\n                journal.outbound_payment_method_line_ids += [(0, 0, {'payment_method_id': method.id})]\n", "CodeBleu_score": 30.59188335915039}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5,)]\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.mapped('payment_method_line_ids')\n", "CodeBleu_score": 27.101546715521565}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n    for journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.mapped('payment_method_line_ids')\n", "CodeBleu_score": 24.200719760654042}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n    for move in self:\n        if move.date:\n            continue\n        if move.invoice_date:\n            if move.is_sale_document() and move.tax_report_347:\n                move.date = move.invoice_date + relativedelta(day=31)\n            else:\n                move.date = move.invoice_date\n        else:\n            move.date = fields.Date.context_today(move)\n        if move.date!= fields.Date.context_today(move):\n            move.date_expected = move.date\n            move.date_deadline = move.date\n            move.date_last_stage_update = move.date\n            move.date_open = move.date\n            move.date_closed = move.date\n            move.date_action = move.date\n            move.date_action_last = move.date\n            move.date_action_next = move.date\n            move.date_last_stage_update = move.date\n            move.date_confirm = move.date\n            move.date_confirm_last = move.date\n            move.date_confirm_next = move.date\n            move.date_approve = move.date\n            move.date_approve_last = move.date\n            move.date_approve_next = move.date\n            move.date_done = move.date\n            move.date_done_last = move.date\n            move.date_done_next = move.date\n            move.date_cancel = move.date\n            move.date_cancel_last = move.date\n            move.date_cancel_next = move.date\n            move.date_refuse = move.date\n            move.date_refuse_last = move.date\n            move.date_refuse_next = move.date\n            move.date_sent = move.date\n            move.date_sent_last = move.date\n            move.date_sent_next = move.date\n            move.date_reconcile = move.date\n            move.date_reconcile_last = move.date\n            move.date_reconcile_next = move.date\n            move.date_draft_picking_list = move.date\n            move.date_ready = move.date\n            move.date_ready_last = move.date\n            move.date_ready_next = move.date\n            move.date_late = move", "CodeBleu_score": 25.7155753293704}, {"code": "def _compute_date(self)\n    self.ensure_one()\n    if self.date:\n        return\n    if self.invoice_date:\n        if self.is_sale_document():\n            self.date = self._compute_accounting_date(self.invoice_date)\n        else:\n            self.date = self.invoice_date\n    else:\n        self.date = fields.Date.context_today(self)\n", "CodeBleu_score": 20.81173184070963}, {"code": "def _compute_date(self)\n    for move in self:\n        if not move.date:\n            if move.invoice_date:\n                if move.is_sale_document():\n                    date = move.invoice_date + relativedelta(day=1) - relativedelta(days=move.company_id.tax_report_line_ids.filtered(lambda r: r.tax_report_id == move.tax_report_id).mapped('report_base'))\n                else:\n                    date = move.invoice_date\n            else:\n                date = fields.Date.today()\n            move.date = date\n        if move.date!= move.date_maturity:\n            move.date_maturity = move.date\n", "CodeBleu_score": 39.17313010409625}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n    if self.type in ['out_invoice', 'out_refund']:\n        if self.partner_id.property_supplier_payment_term_id:\n            self.payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    elif self.type in ['in_invoice', 'in_refund']:\n        if self.partner_id.property_customer_payment_term_id:\n            self.payment_term_id = self.partner_id.property_customer_payment_term_id.id\n        else:\n            self.payment_term_id = False\n", "CodeBleu_score": 30.221015981180877}, {"code": "def _compute_invoice_payment_term_id(self)\n    for move in self:\n        if move.is_sale_document() and move.partner_id.property_payment_term:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term.id\n        elif move.is_purchase_document() and move.partner_id.property_supplier_payment_term:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term.id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.34397995844015}, {"code": "def _compute_invoice_payment_term_id(self)\n    for move in self:\n        if move.type in ('out_invoice', 'out_refund') and move.partner_id.property_supplier_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        elif move.type in ('in_invoice', 'in_refund') and move.partner_id.property_customer_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 46.420302913700006}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n    for tax in self.taxes:\n      tax_group_id = None\n      if tax.country:\n        tax_group_id = self.get_tax_group_id(tax.country, tax.company)\n      if not tax_group_id:\n        tax_group_id = self.get_tax_group_id(None, tax.company)\n      if not tax_group_id:\n        tax_group_id = self.get_tax_group_id(tax.country, None)\n      tax.tax_group_id = tax_group_id\n\n  def _compute_tax_group_name(self):\n    \"\"\"This function assigns the appropriate tax group name to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    for tax in self.taxes:\n      tax_group_name = None\n      if tax.country:\n        tax_group_name = self.get_tax_group_name(tax.country, tax.company)\n      if not tax_group_name:\n        tax_group_name = self.get_tax_group_name(None, tax.company)\n      if not tax_group_name:\n        tax_group_name = self.get_tax_group_name(tax.country, None)\n      tax.tax_group_name = tax_group_name\n\n  def _compute_tax_group_rate(self):\n    \"\"\"This function assigns the appropriate tax group rate to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    for tax in self.taxes:\n      tax_group_rate = None\n      if tax.country:\n        tax_group_rate = self.get_tax_group_rate(tax.country, tax.company)\n      if not tax_group_rate:\n        tax_group_rate = self.get_tax_group_rate(None, tax.company)", "CodeBleu_score": 19.212105582154297}, {"code": " def _compute_tax_group_id(self)\n    for tax in self.taxes:\n      # Get the country and company of the tax\n      tax_country = tax.country\n      tax_company = tax.company\n      # Search for a matching tax group\n      matching_tax_group = self.tax_groups.filter(country=tax_country, company=tax_company).first()\n      # If no matching tax group is found, search for a tax group without a country but within the same company\n      if matching_tax_group is None:\n        matching_tax_group = self.tax_groups.filter(country=None, company=tax_company).first()\n      # Assign the matching tax group to the tax\n      tax.tax_group = matching_tax_group\n\n  def _compute_tax_group_amount(self):\n    \"\"\"This function computes the amount of the tax based on the tax's tax group and the tax's rate.\"\"\"\n    for tax in self.taxes:\n      # Get the tax group of the tax\n      tax_group = tax.tax_group\n      # Compute the tax's amount\n      tax.amount = tax_group.rate * tax.amount\n", "CodeBleu_score": 18.69375323321018}, {"code": " def _compute_tax_group_id(self)\n    tax_group_id = None\n    tax_country = self.country\n    tax_company = self.company\n    tax_group_country = self.tax_group_country\n    tax_group_company = self.tax_group_company\n    tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax_country.id), ('company_id', '=', tax_company.id)], limit=1)\n    if not tax_group_id:\n      tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax_company.id)], limit=1)\n    if not tax_group_id:\n      tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax_country.id), ('company_id', '=', False)], limit=1)\n    if not tax_group_id:\n      tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', False)], limit=1)\n    if not tax_group_id:\n      tax_group_id = self.env['account.tax.group'].create({\n        'name': _('Tax Group'),\n        'country_id': tax_country.id,\n        'company_id': tax_company.id,\n      })\n    self.tax_group_id = tax_group_id.id\n\n  @api.depends('name')\n  def _compute_complete_name(self):\n    for tax in self:\n      if tax.name:\n        tax.complete_name = '%s - %s' % (tax.name, tax.description)\n      else:\n        tax.complete_name = tax.description\n\n  @api.depends('tax_exigibility', 'invoice_repartition_line_ids')\n  def _compute_tax_exigibility_type(self):\n    for tax in self:\n      if tax.tax_exigibility == 'on_invoice':\n        tax.tax_exigibility_type = 'on_invoice'\n      elif tax.tax_exigibility == 'on_payment':\n        tax.tax_exigibility_type = 'on_payment'\n      elif tax.tax_exigibility == '", "CodeBleu_score": 32.78235726967614}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    # Set the database in the session\n    self.session.get(url + 'login', params={'login': login, 'password': password})\n    # Prepare the POST request data\n    data = {'db': db, 'force': force}\n    files = {'file': open(module_file, 'rb')}\n    # Upload the module file to the server\n    response = self.session.post(url + 'base_import_module/login_upload', data=data, files=files)\n    # Check if the server has the required module installed\n    if 'The module is already installed' in response.text:\n        raise Exception('The module is already installed')\n    # Check if the server is outdated\n    if 'The server is outdated' in response.text:\n        raise Exception('The server is outdated')\n    # Return the server's response text\n    return response.text\n", "CodeBleu_score": 40.06418079607599}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\n    # Set the database in the session by accessing the login URL.\n    self.get(url)\n\n    # Prepare the POST request data.\n    data = {'login': login, 'password': password, 'db': db, 'force': force}\n    files = {'module_file': open(module_file, 'rb')}\n\n    # Upload the module file.\n    response = self.post('/base_import_module/login_upload', data=data, files=files)\n\n    # If the server does not have the required module installed or is outdated, raise an exception.\n    if response.status_code == 500:\n        raise Exception('Server does not have the required module installed or is outdated.')\n\n    return response.text\n", "CodeBleu_score": 38.253074289280185}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n    self.login_to_server(url, login, password, db)\n    self.prepare_post_request(module_file, db, force)\n    return self.send_post_request(url, login, password, db)\n", "CodeBleu_score": 10.554290393663624}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n    # Get configuration settings\n    database = config.get('database', 'name')\n    overwrite = config.get('translation', 'overwrite')\n    # Create database registry\n    registry = Registry(database)\n    # Create cursor\n    with registry.cursor() as cr:\n        # Create TranslationImporter\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        # Import translations\n        importer.import_translations()\n", "CodeBleu_score": 35.2109475914996}, {"code": "def import_translation()\n    db_name = request.env.context.get('lang_import_db_name')\n    overwrite = request.env.context.get('lang_import_overwrite')\n    if not db_name:\n        raise UserError(_(\"No database name specified for language import.\"))\n    if not overwrite:\n        overwrite = False\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        importer.load_translations(module='base')\n        importer.save_translations()\n        return True\n", "CodeBleu_score": 43.44959457627563}, {"code": "def import_translation()\n    # Get configuration settings\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    # Create a new database registry\n    registry = odoo.modules.registry.Registry(db_name)\n    # Create a new cursor\n    with registry.cursor() as cr:\n        # Create a new TranslationImporter\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        # Load the translations\n        importer.load_translations()\n", "CodeBleu_score": 41.26844848966038}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n    if name not in self.children:\n        new_child = Node(name, info)\n        new_child.depth = self.depth + 1\n        if self.parent:\n            new_child.parent = self.parent\n            if self.parent.parent:\n                new_child.grandparent = self.parent.parent\n            if self.parent.children:\n                new_child.sibling = self.parent.children[0]\n            new_child.sibling_index = 0\n            if new_child.sibling:\n                new_child.sibling_index = self.parent.children.index(new_child.sibling)\n            new_child.children = self.children\n            for child in new_child.children:\n                child.parent = new_child\n        self.children[name] = new_child\n        self.children = dict(sorted(self.children.items(), key=lambda x: x[0]))\n        return new_child\n    else:\n        return self.children[name]\n\n", "CodeBleu_score": 32.73035808520688}, {"code": "def add_child(self, name, info)\n    if name in self.children:\n        return self.children[name]\n    else:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        self.children[name] = new_node\n        if self.parent:\n            new_node.parent = self.parent\n            new_node.parent_key = self.parent_key\n            new_node.parent_value = self.parent_value\n            new_node.parent_type = self.parent_type\n            new_node.parent_start = self.parent_start\n            new_node.parent_end = self.parent_end\n            new_node.parent_start_line = self.parent_start_line\n            new_node.parent_end_line = self.parent_end_line\n            new_node.parent_start_column = self.parent_start_column\n            new_node.parent_end_column = self.parent_end_column\n        self.children = OrderedDict(sorted(self.children.items()))\n        return new_node\n", "CodeBleu_score": 27.193232999623206}, {"code": "def add_child(self, name, info)\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if new_node not in self.children:\n        self.children.append(new_node)\n        self.children.sort(key=lambda x: x.name)\n    new_node.parent = self\n    new_node.children = self.children\n    new_node.info = self.info\n    new_node.name = self.name\n    return new_node\n", "CodeBleu_score": 42.88353148236767}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n    result = []\n    result.append(dates)\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len(dates))\n    result.append([0] * len", "CodeBleu_score": 4.504699359057452}, {"code": "def build_result(account, dates, gl_entries)\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"assets\": [0] * len(dates),\n        \"liabilities\": [0] * len(dates),\n        \"equity\": [0] * len(dates),\n        \"income\": [0] * len(dates),\n        \"expenses\": [0] * len(dates),\n        \"net_worth\": [0] * len(dates),\n    }\n    root_type = account.root_type\n    for entry in gl_entries:\n        if entry.account == account:\n            result[\"balances\"][entry.date - 1] += entry.amount\n            if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n                result[root_type.lower()][entry.date - 1] += entry.amount\n            if root_type!= \"Expense\":\n                result[root_type.lower()][entry.date - 1] *= -1\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[root_type.lower()] = [x * -1 for x in result[root_type.lower()]]\n    if root_type == \"Asset\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"assets\"][i] = result[\"assets\"][i - 1] + result[\"balances\"][i]\n    elif root_type == \"Liability\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"liabilities\"][i] = result[\"liabilities\"][i - 1] + result[\"balances\"][i]\n    elif root_type == \"Equity\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"equity\"][i] = result[\"equity\"][i - 1] + result[\"balances\"][i]\n    elif root_type == \"Income\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"income\"][i] = result[\"income\"][i - 1] + result[\"balances\"][i]\n    elif root_type == \"Expense\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"expenses\"][i] = result[\"expenses\"][i - 1] + result[\"balances\"][i]\n    for i in range(len(result[\"balances\"])):\n       ", "CodeBleu_score": 20.944787618638983}, {"code": "def build_result(account, dates, gl_entries)\n    result = {}\n    result['dates'] = dates\n    result['balance'] = [0] * len(dates)\n    result['total'] = 0\n    result['account'] = account\n    result['type'] = account['type']\n    result['subtype'] = account['subtype']\n    result['code'] = account['code']\n    result['name'] = account['name']\n    result['path'] = account['path']\n    result['level'] = account['level']\n    result['parent_id'] = account['parent_id']\n    result['children'] = []\n    result['children_ids'] = []\n    result['children_types'] = []\n    result['children_names'] = []\n    result['children_codes'] = []\n    result['children_subtypes'] = []\n    result['children_paths'] = []\n    result['children_levels'] = []\n    result['children_parent_ids'] = []\n    result['children_balances'] = []\n    result['children_totals'] = []\n    result['children_types_ids'] = []\n    result['children_types_names'] = []\n    result['children_types_codes'] = []\n    result['children_types_subtypes'] = []\n    result['children_types_paths'] = []\n    result['children_types_levels'] = []\n    result['children_types_parent_ids'] = []\n    result['children_types_balances'] = []\n    result['children_types_totals'] = []\n    result['children_types_types'] = []\n    result['children_types_types_ids'] = []\n    result['children_types_types_names'] = []\n    result['children_types_types_codes'] = []\n    result['children_types_types_subtypes'] = []\n    result['children_types_types_paths'] = []\n    result['children_types_types_levels'] = []\n    result['children_types_types_parent_ids'] = []\n    result['children_types_types_balances'] = []\n    result['children_types_types_totals'] = []\n    result['children_types_types_types'] = []\n    result['children_types_types_types_ids'] = []\n    result['children_types_types_types_names'] = []\n    result['children_types_types_types_codes'] = []\n    result['children_types_", "CodeBleu_score": 10.483068116554081}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\n    if self.is_receivable or self.is_payable:\n        if self.docstatus == 1:\n            if self.old_parent_account_type == \"Receivable\" or self.old_parent_account_type == \"Payable\":\n                if self.parent_account_type!= \"Receivable\" and self.parent_account_type!= \"Payable\":\n                    if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s\"\"\", self.name):\n                        frappe.msgprint(_(\"Cannot change the account type of a receivable/payable account to non-receivable/payable type as there are existing general ledger entries for the account. Please check the Accounts report and make sure that there are no outstanding transactions for the account.\"), title=_(\"Account Type Change Not Allowed\"))\n                        self.add_comment(\"Comment\", _(\"Cannot change the account type of a receivable/payable account to non-receivable/payable type as there are existing general ledger entries for the account. Please check the Accounts report and make sure that there are no outstanding transactions for the account.\"))\n", "CodeBleu_score": 22.463858505881397}, {"code": "def validate_receivable_payable_account_type(self)\n\n    if not self.is_new():\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.previous_account_type not in [\"Receivable\", \"Payable\"]:\n                if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name):\n                    frappe.msgprint(_(\"Warning: Account type has been changed from Receivable/Payable to a non-Receivable/Payable type. Please check the Accounts report for details.\"))\n                    frappe.msgprint(_(\"Warning: The account has existing general ledger entries. Please check the General Ledger report for details.\"))\n                    self.add_comment(\"Accounts\", _(\"Warning: Account type has been changed from Receivable/Payable to a non-Receivable/Payable type. Please check the Accounts report for details.\"))\n                    self.add_comment(\"Accounts\", _(\"Warning: The account has existing general ledger entries. Please check the General Ledger report for details.\"))\n", "CodeBleu_score": 24.936557410936338}, {"code": "def validate_receivable_payable_account_type(self)\n    if self.account_type in [\"Receivable\", \"Payable\"] and self.previous_account_type not in [\"Receivable\", \"Payable\"]:\n      gl_entries = frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s\"\"\", self.name)\n      if gl_entries:\n        frappe.msgprint(_(\"Warning: Changing the account type from Receivable/Payable to non-Receivable/Payable will result in loss of existing ledger entries. Please check the Accounts report for details.\"), indicator='orange', title=_(\"Warning\"))\n        if not self.receivable_payable_comment:\n          self.receivable_payable_comment = _(\"Warning: Changing the account type from Receivable/Payable to non-Receivable/Payable will result in loss of existing ledger entries. Please check the Accounts report for details.\")\n        else:\n          self.receivable_payable_comment += \"\\n\" + _(\"Warning: Changing the account type from Receivable/Payable to non-Receivable/Payable will result in loss of existing ledger entries. Please check the Accounts report for details.\")\n", "CodeBleu_score": 22.95078764601275}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n    if not self.currency_id:\n        self.currency_id = self.company_id.currency_id.id\n    else:\n        self.currency_id.is_explicitly_set = True\n    if self.currency_id!= self.company_id.currency_id:\n        if self.company_id.currency_id.is_zero(self.balance):\n            self.currency_id = self.company_id.currency_id.id\n        else:\n            raise UserError(_('The account currency must be the same as the company currency.'))\n    return True\n", "CodeBleu_score": 26.112291782797097}, {"code": "def validate_account_currency(self)\n    if self.currency_id:\n        if self.currency_id!= self.company_id.currency_id:\n            # Check if there are any journal items with a different currency than the account currency\n            if self.env['account.move.line'].search([('account_id', '=', self.id), ('currency_id', '!=', self.currency_id)]):\n                raise UserError(_('You cannot change the currency of an account that already contains journal items with another currency. You must first remove these journal items, or change the currency of these items to match the new account currency.'))\n            # Check if there are any bank statements with a different currency than the account currency\n            if self.env['account.bank.statement'].search([('journal_id.default_debit_account_id', '=', self.id), ('journal_id.default_credit_account_id', '=', self.id), ('currency_id', '!=', self.currency_id)]):\n                raise UserError(_('You cannot change the currency of an account that is used in bank statements with another currency. You must first remove these bank statements, or change the currency of these statements to match the new account currency.'))\n            # Check if there are any bank statement line with a different currency than the account currency\n            if self.env['account.bank.statement.line'].search([('account_id', '=', self.id), ('currency_id', '!=', self.currency_id)]):\n                raise UserError(_('You cannot change the currency of an account that is used in bank statements with another currency. You must first remove these bank statements, or change the currency of these statements to match the new account currency.'))\n            # Check if there are any payment orders with a different currency than the account currency\n            if self.env['account.payment.order'].search([('account_id', '=', self.id), ('currency_id', '!=', self.currency_id)]):\n                raise UserError(_('You cannot change the currency of an account that is used in payment orders with another currency. You must first remove these payment orders, or change the currency of these orders to match the new account currency.'))\n            # Check if there are any payment order lines with a different currency than the account currency\n            if self.env['account.payment.order.line'].search([('account_id', '=', self.id), ('currency", "CodeBleu_score": 19.206771659964}, {"code": "def validate_account_currency(self)\n    if self.currency_id:\n        self.currency_id.ensure_one()\n    else:\n        self.currency_id = self.company_id.currency_id\n    if self.currency_id!= self.company_id.currency_id:\n        self.currency_id.is_explicitly_set = True\n    else:\n        self.currency_id.is_explicitly_set = False\n    if self.currency_id!= self.company_id.currency_id:\n        self.ensure_one()\n        if self.company_id.currency_id!= self.env.ref('base.USD'):\n            raise UserError(_('You cannot change the currency of this account. You must first convert the current entries to the new currency (%s).') % (self.company_id.currency_id.name))\n        else:\n            raise UserError(_('You cannot change the currency of this account. You must first convert the current entries to the new currency (%s).') % (self.currency_id.name))\n    else:\n        self.currency_id.is_explicitly_set = True\n", "CodeBleu_score": 25.00814008723357}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    aggregated_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {'debit': 0, 'credit': 0, 'account_currency': entry['account_currency']}\n        aggregated_entries[key]['debit'] += entry['debit']\n        aggregated_entries[key]['credit'] += entry['credit']\n    return aggregated_entries\n\n", "CodeBleu_score": 27.450397963758295}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    # Initialize dictionary to merge entries\n    merged_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n        # Initialize key\n        key = \"\"\n\n        # Iterate through each dimension\n        for dimension in accounting_dimensions:\n            # Add dimension value to key\n            key += str(entry[dimension]) + \"-\"\n\n        # Remove trailing \"-\"\n        key = key[:-1]\n\n        # Check if key exists\n        if key in merged_entries:\n            # Update debit\n            merged_entries[key][\"debit\"] += entry[\"debit\"]\n\n            # Update credit\n            merged_entries[key][\"credit\"] += entry[\"credit\"]\n\n            # Update debit_in_account_currency\n            merged_entries[key][\"debit_in_account_currency\"] += entry[\"debit_in_account_currency\"]\n\n            # Update credit_in_account_currency\n            merged_entries[key][\"credit_in_account_currency\"] += entry[\"credit_in_account_currency\"]\n        else:\n            # Add key to dictionary\n            merged_entries[key] = entry\n\n    # Return merged entries\n    return merged_entries\n\n", "CodeBleu_score": 35.84503830077257}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n    # Initialize a dictionary to merge entries\n    aggregated_entries = {}\n    # Iterate through each entry\n    for entry in entries:\n        # Initialize a key based on the specified accounting dimensions\n        key = \"\"\n        for dimension in accounting_dimensions:\n            key += str(entry[dimension]) + \"|\"\n        # Update the debit, credit, and their respective amounts in account currency\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += entry[\"debit\"]\n            aggregated_entries[key][\"credit\"] += entry[\"credit\"]\n            aggregated_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n            aggregated_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n        else:\n            aggregated_entries[key] = {\n                \"debit\": entry[\"debit\"],\n                \"credit\": entry[\"credit\"],\n                \"debit_amount\": entry[\"debit_amount\"],\n                \"credit_amount\": entry[\"credit_amount\"],\n            }\n    return aggregated_entries\n\n", "CodeBleu_score": 29.889155941502587}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n    if self.payment_type == \"Receive\":\n        supplier = frappe.db.get_value(\"Supplier\", {\"name\": self.party_name}, [\"on_hold\", \"hold_type\", \"release_date\"], as_dict=True)\n        if supplier.on_hold and supplier.hold_type == self.payment_type:\n            if getdate(self.posting_date) <= supplier.release_date:\n                frappe.throw(_(\"Supplier {0} is on hold until {1}\").format(self.party_name, formatdate(supplier.release_date)))\n    elif self.payment_type == \"Pay\":\n        supplier = frappe.db.get_value(\"Supplier\", {\"name\": self.party_name}, [\"on_hold\", \"hold_type\", \"release_date\"], as_dict=True)\n        if supplier.on_hold and supplier.hold_type == self.payment_type:\n            if getdate(self.posting_date) <= supplier.release_date:\n                frappe.throw(_(\"Supplier {0} is on hold until {1}\").format(self.party_name, formatdate(supplier.release_date)))\n\n", "CodeBleu_score": 34.064724867617834}, {"code": "def ensure_supplier_is_not_blocked(self)\n\n    # Check if the supplier is blocked\n    supplier_is_blocked = frappe.db.get_value(\"Supplier\", self.supplier, \"on_hold\")\n    if supplier_is_blocked:\n        # Get the supplier's information\n        supplier_info = frappe.db.get_value(\"Supplier\", self.supplier, [\"release_date\", \"on_hold_type\"], as_dict=1)\n        release_date = supplier_info.get(\"release_date\")\n        on_hold_type = supplier_info.get(\"on_hold_type\")\n\n        # Check if the supplier is on hold for payment and the transaction is a payment\n        if on_hold_type == \"Payment\" and self.is_pos:\n            # Check if the release date has passed\n            if getdate(nowdate()) > getdate(release_date):\n                # Release the supplier\n                frappe.db.set_value(\"Supplier\", self.supplier, \"on_hold\", 0)\n                frappe.db.set_value(\"Supplier\", self.supplier, \"on_hold_type\", \"\")\n                frappe.db.set_value(\"Supplier\", self.supplier, \"release_date\", \"\")\n                frappe.msgprint(_(\"Supplier has been released.\"))\n            else:\n                # Raise an exception\n                frappe.throw(_(\"Supplier is on hold until {0}.\").format(formatdate(release_date)))\n\n        # Check if the supplier is on hold for payment and the transaction is a payment\n        elif on_hold_type == \"Payment\" and not self.is_pos:\n            # Check if the release date has passed\n            if getdate(nowdate()) > getdate(release_date):\n                # Release the supplier\n                frappe.db.set_value(\"Supplier\", self.supplier, \"on_hold\", 0)\n                frappe.db.set_value(\"Supplier\", self.supplier, \"on_hold_type\", \"\")\n                frappe.db.set_value(\"Supplier\", self.supplier, \"release_date\", \"\")\n                frappe.msgprint(_(\"Supplier has been released.\"))\n            else:\n                # Raise an exception\n                frappe.throw(_(\"Supplier is on hold until {0}.\").format(formatdate(release_date)))\n\n        # Check if the supplier is on hold for invoice and the transaction is an invoice\n        elif on_hold_type == \"Invoice\" and not self", "CodeBleu_score": 35.13282680937575}, {"code": "def ensure_supplier_is_not_blocked(self)\n    if self.supplier:\n      if self.supplier.on_hold:\n        if self.supplier.on_hold == True:\n          if self.on_hold_type == 'payment':\n            if self.supplier.on_hold_type == 'payment':\n              if self.supplier.on_hold_date <= getdate(self.posting_date):\n                self.supplier.on_hold = False\n                self.supplier.on_hold_date = None\n                self.supplier.on_hold_type = None\n                self.supplier.save()\n          elif self.on_hold_type == 'invoice':\n            if self.supplier.on_hold_type == 'invoice':\n              if self.supplier.on_hold_date <= getdate(self.posting_date):\n                self.supplier.on_hold = False\n                self.supplier.on_hold_date = None\n                self.supplier.on_hold_type = None\n                self.supplier.save()\n          elif self.on_hold_type == 'both':\n            if self.supplier.on_hold_type == 'payment' or self.supplier.on_hold_type == 'invoice':\n              if self.supplier.on_hold_date <= getdate(self.posting_date):\n                self.supplier.on_hold = False\n                self.supplier.on_hold_date = None\n                self.supplier.on_hold_type = None\n                self.supplier.save()\n      if self.supplier.on_hold:\n        if self.supplier.on_hold == True:\n          if self.on_hold_type == 'payment':\n            if self.supplier.on_hold_type == 'payment':\n              if self.supplier.on_hold_date <= getdate(self.posting_date):\n                self.supplier.on_hold = False\n                self.supplier.on_hold_date = None\n                self.supplier.on_hold_type = None\n                self.supplier.save()\n          elif self.on_hold_type == 'invoice':\n            if self.supplier.on_hold_type == 'invoice':\n              if self.supplier.on_hold_date <= getdate(self.posting_date):\n                self.supplier.on_hold = False\n                self.supplier.on_hold_date = None\n                self.supplier.on_hold_type = None", "CodeBleu_score": 20.446095886433913}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = [\n      \"Purchase Invoice\",\n      \"Purchase Receipt\",\n      \"Sales Invoice\",\n      \"Sales Order\",\n      \"Delivery Note\",\n      \"Stock Entry\",\n      \"Stock Reconciliation\"\n    ]\n    for doctype in repost_doctypes:\n      if frappe.db.exists(\"DocType\", doctype):\n        repost_doctype = frappe.get_doc(\"DocType\", doctype)\n        if hasattr(repost_doctype, \"repost_vouchers\"):\n          repost_vouchers = repost_doctype.repost_vouchers\n          if isinstance(repost_vouchers, list):\n            repost_vouchers = \"\\n\".join(repost_vouchers)\n          if repost_vouchers:\n            repost_vouchers = frappe.parse_json(repost_vouchers)\n          else:\n            repost_vouchers = {}\n          if not repost_vouchers.get(self.doctype):\n            repost_vouchers[self.doctype] = {}\n          repost_vouchers[self.doctype][self.name] = True\n          repost_doctype.db_set(\"repost_vouchers\", repost_vouchers)\n        if hasattr(repost_doctype, \"vouchers\"):\n          vouchers = repost_doctype.vouchers\n          if isinstance(vouchers, list):\n            vouchers = \"\\n\".join(vouchers)\n          if vouchers:\n            vouchers = frappe.parse_json(vouchers)\n          else:\n            vouchers = {}\n          if not vouchers.get(self.doctype):\n            vouchers[self.doctype] = {}\n          vouchers[self.doctype][self.name] = True\n          repost_doctype.db_set(\"vouchers\", vouchers)\n        if hasattr(repost_doctype, \"ignore_validation\"):\n          repost_doctype.db_set(\"ignore_validation\", True)\n        if hasattr(repost_doctype, \"links\"):\n          repost_doctype.db_set(\"links\", [])\n", "CodeBleu_score": 21.115496693781267}, {"code": "def _remove_references_in_repost_doctypes(self)\n    if not self.repost_vouchers:\n      return\n    # First, get a list of repost doctypes that apply to this document.\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n      return\n    # Now, query for all rows in the repost doctypes that match the current document.\n    # Note that we can't just use the \"voucher_type\" and \"voucher_no\" fields because they may not have been set yet.\n    # Instead, we have to use the \"voucher_type_link\" and \"voucher_no_link\" fields, which are guaranteed to be set.\n    filters = [[\"voucher_type_link\", \"in\", repost_doctypes], [\"voucher_no_link\", \"=\", self.name]]\n    repost_voucher_rows = frappe.get_all(\"Repost Voucher\", filters=filters, fields=[\"name\", \"voucher_type_link\", \"voucher_no_link\", \"parent\", \"parenttype\"])\n    if not repost_voucher_rows:\n      return\n    # Now, group the rows by parent document type and parent document.\n    repost_voucher_rows_by_parent = {}\n    for repost_voucher_row in repost_voucher_rows:\n      parent_doctype = repost_voucher_row.get(\"parenttype\")\n      parent_name = repost_voucher_row.get(\"parent\")\n      repost_voucher_rows_by_parent.setdefault(parent_doctype, {})\n      repost_voucher_rows_by_parent[parent_doctype].setdefault(parent_name, [])\n      repost_voucher_rows_by_parent[parent_doctype][parent_name].append(repost_voucher_row)\n    # Now, retrieve each parent document and remove the relevant repost voucher rows.\n    for parent_doctype, parent_names in repost_voucher_rows_by_parent.items():\n      for parent_name, repost_voucher_rows in parent_names.items():\n        parent_doc = frappe.get_doc(parent_doctype, parent_name)\n        for repost_voucher_row in repost_voucher_rows:\n          if repost_voucher_row.get(\"voucher_type_link\") == \"Journal Entry\":\n            if repost_voucher_row.", "CodeBleu_score": 25.897892978452447}, {"code": "def _remove_references_in_repost_doctypes(self)\n    repost_doctypes = frappe.get_all(\"Repost Item Voucher Settings\", fields=[\"parent\"])\n    for repost_doctype in repost_doctypes:\n      repost_doctype = repost_doctype.parent\n      repost_doctype_details = frappe.get_doc(\"Repost Item Voucher Settings\", repost_doctype)\n      if repost_doctype_details.voucher_type == self.doctype and repost_doctype_details.voucher_no == self.name:\n        parent_doc_map = {}\n        voucher_rows = frappe.get_all(\"Repost Item Voucher\", filters={\"parent\": self.name, \"parenttype\": self.doctype}, fields=[\"parenttype\", \"parent\"])\n        for voucher_row in voucher_rows:\n          if voucher_row.parenttype not in parent_doc_map:\n            parent_doc_map[voucher_row.parenttype] = []\n          parent_doc_map[voucher_row.parenttype].append(voucher_row.parent)\n        for parent_doc_type in parent_doc_map:\n          for parent_doc in parent_doc_map[parent_doc_type]:\n            parent_doc = frappe.get_doc(parent_doc_type, parent_doc)\n            if repost_doctype_details.remove_from_repost_vouchers:\n              if \"repost_vouchers\" in parent_doc.as_dict():\n                if repost_doctype in parent_doc.repost_vouchers:\n                  parent_doc.repost_vouchers.remove(repost_doctype)\n                  parent_doc.flags.ignore_validate_update_after_submit = True\n                  parent_doc.flags.ignore_links = True\n                  parent_doc.save()\n            if repost_doctype_details.remove_from_vouchers:\n              if \"vouchers\" in parent_doc.as_dict():\n                if repost_doctype in parent_doc.vouchers:\n                  parent_doc.vouchers.remove(repost_doctype)\n                  parent_doc.flags.ignore_validate_update_after_submit = True\n                  parent_doc.flags.ignore_links = True\n                  parent_doc.save()\n", "CodeBleu_score": 20.171703883979543}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n        # Authenticate the client\n        self.authenticate()\n\n        # Construct the query parameters\n        params = {\n           'startDate': start_date,\n            'endDate': end_date,\n            'accountId': account_id\n        }\n\n        # Fetch transactions from the client\n        transactions = self.client.get_transactions(params)\n\n        # Return the transactions\n        return transactions\n\n    except Exception as e:\n        # Handle specific errors\n        if e.response.status_code == 401:\n            raise AuthenticationError(e.response.json()['error_description'])\n        elif e.response.status_code == 400:\n            raise BadRequestError(e.response.json()['error_description'])\n        elif e.response.status_code == 404:\n            raise NotFoundError(e.response.json()['error_description'])\n        else:\n            # Log any other exceptions\n            self.logger.error(e)\n            raise e\n", "CodeBleu_score": 27.77897450561359}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\n    # Authenticate the client.\n    self.authenticate()\n\n    # Construct the query parameters.\n    query_params = {\n     'startDate': start_date,\n      'endDate': end_date\n    }\n    if account_id:\n      query_params['accountId'] = account_id\n\n    # Fetch the transactions.\n    transactions = []\n    while True:\n      try:\n        # Get the transactions.\n        response = self.client.get('/v1/transactions', query_params=query_params)\n        transactions.extend(response['transactions'])\n\n        # If the number of transactions is less than the total, there are more transactions to fetch.\n        if len(transactions) < response['total']:\n          query_params['offset'] = response['offset'] + len(transactions)\n        else:\n          break\n      except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError) as e:\n        # Handle specific errors.\n        if isinstance(e, requests.exceptions.HTTPError) and e.response.status_code == 401:\n          raise AuthorizationException(e)\n        else:\n          raise e\n      except Exception as e:\n        # Log any other exceptions.\n        logger.exception(e)\n\n    return transactions\n\n  def get_transaction(self, transaction_id):\n    \"\"\"This function retrieves a single transaction by ID. It authenticates the client, fetches the transaction from the client, and handles specific errors by raising them and logging any other exceptions.\"\"\"\n\n    # Authenticate the client.\n    self.authenticate()\n\n    # Fetch the transaction.\n    try:\n      response = self.client.get('/v1/transactions/' + transaction_id)\n      return response['transaction']\n    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError) as e:\n      # Handle specific errors.\n      if isinstance(e, requests.exceptions.HTTPError) and e.response.status_code == 401:\n        raise AuthorizationException(e)\n      else:\n        raise e\n    except Exception as e:\n      # Log any other exceptions.\n      logger.exception(e)\n", "CodeBleu_score": 33.5124892357259}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n    try:\n      self.authenticate()\n      transactions = []\n      page_size = 1000\n      offset = 0\n      total = 1\n      while offset < total:\n        params = {\n         'startDate': start_date,\n          'endDate': end_date,\n          'offset': offset,\n          'limit': page_size,\n          'accountId': account_id\n        }\n        response = self.client.get(self.TRANSACTIONS_ENDPOINT, params=params)\n        if response.status_code == 401:\n          raise AuthenticationError\n        elif response.status_code == 403:\n          raise PermissionError\n        elif response.status_code == 404:\n          raise NotFoundError\n        elif response.status_code == 429:\n          raise RateLimitError\n        elif response.status_code == 500:\n          raise ServerError\n        elif response.status_code == 503:\n          raise ServiceUnavailableError\n        response_data = response.json()\n        transactions.extend(response_data['transactions'])\n        total = response_data['total']\n        offset += page_size\n      return transactions\n    except AuthenticationError:\n      logger.error('Authentication error')\n      raise\n    except PermissionError:\n      logger.error('Permission error')\n      raise\n    except NotFoundError:\n      logger.error('Not found error')\n      raise\n    except RateLimitError:\n      logger.error('Rate limit error')\n      raise\n    except ServerError:\n      logger.error('Server error')\n      raise\n    except ServiceUnavailableError:\n      logger.error('Service unavailable error')\n      raise\n    except Exception as e:\n      logger.error('Error retrieving transactions: {}'.format(e))\n      raise\n\n  def get_transactions_by_date(self, date, account_id=None):\n    \"\"\"This function retrieves transactions for a specified date and optional account ID. It authenticates the client, constructs the query parameters, and fetches the transactions from the client. If the number of retrieved transactions is less than the total, it continues fetching until all transactions are retrieved. It handles specific errors by raising them and logs any other exceptions.\"\"\"\n    return self.get_transactions(date, date, account_id)\n\n  def get_transactions_by_date_range(self, start_date, end_date, account_id=None):\n    \"\"\"This function retrieves transactions for a specified date range and optional account ID. It authenticates", "CodeBleu_score": 30.26684685919428}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n    try:\n        # parse the response\n        parsed_response = parse_response(response)\n\n        # get an access token\n        access_token = get_access_token(parsed_response)\n\n        # get the institution's name\n        institution_name = get_institution_name(parsed_response)\n\n        # check if the institution already exists\n        institution_exists = check_institution(institution_name)\n\n        # if the institution does not exist, create a new record\n        if institution_exists == False:\n            create_institution(token, institution_name, access_token)\n\n        # if the institution does exist, update the access token for the existing record\n        else:\n            update_institution(institution_name, access_token)\n\n    except Exception as e:\n        # log the error\n        logging.error(e)\n\n", "CodeBleu_score": 23.408906934322758}, {"code": "def add_institution(token, response)\n    try:\n        # Parse the response\n        parsed_response = json.loads(response.text)\n        # Retrieve an access token\n        access_token = PlaidConnector.get_access_token(token, parsed_response)\n        # Check if the bank already exists\n        existing_bank = Bank.objects.filter(name=parsed_response['item']['name'])\n        # If the bank does not exist, create and insert a new bank record\n        if not existing_bank:\n            new_bank = Bank(\n                name=parsed_response['item']['name'],\n                access_token=access_token\n            )\n            new_bank.save()\n        # If the bank exists, update the access token and save the record\n        else:\n            existing_bank.update(access_token=access_token)\n    except Exception as e:\n        # Log any errors that occur\n        logger.error(f'Error adding institution: {e}')\n\n", "CodeBleu_score": 40.29084641293771}, {"code": "def add_institution(token, response)\n    try:\n        response_dict = json.loads(response.text)\n        institution_id = response_dict['institution']['institution_id']\n        name = response_dict['institution']['name']\n        url = response_dict['institution']['url']\n        products = response_dict['institution']['products']\n        country_codes = response_dict['institution']['country_codes']\n        auth_supported = response_dict['institution']['auth_supported']\n        logo = response_dict['institution']['logo']\n\n        access_token = get_access_token(token, institution_id)\n\n        if access_token:\n            bank = Bank.query.filter_by(institution_id=institution_id).first()\n            if not bank:\n                new_bank = Bank(\n                    institution_id=institution_id,\n                    name=name,\n                    url=url,\n                    products=products,\n                    country_codes=country_codes,\n                    auth_supported=auth_supported,\n                    logo=logo,\n                    access_token=access_token\n                )\n                db.session.add(new_bank)\n                db.session.commit()\n                return True\n            else:\n                bank.access_token = access_token\n                db.session.commit()\n                return True\n        else:\n            return False\n    except Exception as e:\n        log_error(e)\n        return False\n\n", "CodeBleu_score": 30.36101447258869}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n    try:\n        # Get the last integration date\n        last_integration_date = bank_account.last_integration_date\n        # If there is no last integration date, set it to the beginning of time\n        if last_integration_date is None:\n            last_integration_date = datetime.datetime(1970, 1, 1)\n        # Get the start date for the transaction retrieval\n        start_date = last_integration_date + datetime.timedelta(days=1)\n        # Get the end date for the transaction retrieval\n        end_date = datetime.datetime.now()\n        # Get the transactions\n        transactions = bank.get_transactions(bank_account, start_date, end_date)\n        # Process the transactions\n        new_transactions = process_transactions(transactions)\n        # Save the new transactions\n        save_transactions(new_transactions)\n        # Update the last integration date to the date of the oldest transaction\n        if new_transactions:\n            oldest_transaction_date = min([t.date for t in new_transactions])\n            bank_account.last_integration_date = oldest_transaction_date\n            bank_account.save()\n        # Log the number of new transactions added\n        logger.info(f\"Synced {len(new_transactions)} new transactions for bank account {bank_account.id}\")\n    except Exception as e:\n        # Log the error message\n        logger.error(f\"Error syncing transactions for bank account {bank_account.id}: {e}\")\n\n", "CodeBleu_score": 32.177578887262555}, {"code": "def sync_transactions(bank, bank_account)\n    try:\n        start_date = get_last_integration_date(bank, bank_account)\n        end_date = datetime.date.today()\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            new_transactions = process_transactions(bank, bank_account, transactions)\n            if new_transactions:\n                for transaction in new_transactions:\n                    transaction.save()\n                update_last_integration_date(bank, bank_account, end_date)\n                logger.info('Synced %s new transactions for bank %s and bank account %s.', len(new_transactions), bank.name, bank_account.account_number)\n            else:\n                logger.info('No new transactions found for bank %s and bank account %s.', bank.name, bank_account.account_number)\n        else:\n            logger.info('No transactions found for bank %s and bank account %s.', bank.name, bank_account.account_number)\n    except Exception as e:\n        logger.error('An error occurred while syncing transactions for bank %s and bank account %s: %s', bank.name, bank_account.account_number, e)\n\n", "CodeBleu_score": 29.235536398736677}, {"code": "def sync_transactions(bank, bank_account)\n    # get the integration date from the bank account\n    integration_date = bank_account.integration_date\n    # if there is no integration date, set it to the oldest transaction date\n    if integration_date is None:\n        integration_date = BankTransaction.objects.filter(bank=bank, bank_account=bank_account).order_by('date').first().date\n    # get the start and end dates for the transaction retrieval\n    start_date = integration_date\n    end_date = datetime.datetime.today().date()\n    # get the transactions from the bank\n    try:\n        transactions = bank.get_transactions(bank_account, start_date, end_date)\n    except Exception as e:\n        # log the error\n        logger.error('Error retrieving transactions from bank: %s', e)\n        return\n    # process the transactions\n    new_transactions = []\n    for transaction in transactions:\n        # create a new bank transaction\n        new_transaction = BankTransaction(\n            bank=bank,\n            bank_account=bank_account,\n            date=transaction.date,\n            amount=transaction.amount,\n            description=transaction.description,\n            memo=transaction.memo,\n            category=transaction.category,\n            type=transaction.type,\n            status=transaction.status,\n            imported=True,\n            source_file=transaction.source_file,\n            source_file_line=transaction.source_file_line,\n        )\n        # add the new bank transaction to the list\n        new_transactions.append(new_transaction)\n    # add the new transactions to the database\n    BankTransaction.objects.bulk_create(new_transactions)\n    # update the integration date\n    bank_account.integration_date = BankTransaction.objects.filter(bank=bank, bank_account=bank_account).order_by('date').first().date\n    bank_account.save()\n    # log the number of new transactions added\n    logger.info('Added %s new transactions for bank %s and bank account %s', len(new_transactions), bank.name, bank_account.name)\n", "CodeBleu_score": 37.60345600448023}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n    # Construct the query URI\n    query_uri = f\"https://{self.domain}.quickbooks.com/v3/company/{self.realm_id}/{entity}?minorversion=37\"\n    # Get the total number of entries\n    total_entries = self._get_total_entries(query_uri)\n    # Fetch the entries in batches of 1000\n    for i in range(0, total_entries, 1000):\n      # Construct the query URI\n      query_uri = f\"https://{self.domain}.quickbooks.com/v3/company/{self.realm_id}/{entity}?minorversion=37&page={i}&pagesize=1000\"\n      # Fetch the entries\n      response = requests.get(query_uri, headers=self.headers)\n      # Check for errors\n      if response.status_code!= 200:\n        # Log the error\n        logger.error(f\"Error fetching {entity} entries from QuickBooks: {response.text}\")\n        # Skip to the next entity\n        continue\n      # Preprocess and save the entries\n      self._preprocess_and_save_entries(entity, response.json())\n\n  def _get_total_entries(self, query_uri):\n    \"\"\"This function gets the total number of entries for a specified query URI. It returns the total number of entries.\"\"\"\n    # Fetch the entries\n    response = requests.get(query_uri, headers=self.headers)\n    # Check for errors\n    if response.status_code!= 200:\n      # Log the error\n      logger.error(f\"Error fetching total number of entries from QuickBooks: {response.text}\")\n      # Return 0\n      return 0\n    # Return the total number of entries\n    return response.json()[\"TotalCount\"]\n\n  def _preprocess_and_save_entries(self, entity, entries):\n    \"\"\"This function preprocesses and saves entries for a specified entity. It converts the entries to a list of dictionaries, and then saves them to the database. Any exceptions encountered during the process are logged along with the response text.\"\"\"\n    # Convert the entries to a list of dictionaries\n    entries_list = []\n    for entry in entries[\"QueryResponse\"][entity]:\n      entries_list.append(entry)\n    # Save the entries to the database\n    try:\n      self.db.save_entries(entity, entries_list)", "CodeBleu_score": 30.388648900642814}, {"code": "def _migrate_entries(self, entity)\n\n    # Construct the query URI.\n    query_uri = self.construct_query_uri(entity)\n\n    # Determine the total number of entries.\n    total_entries = self.get_total_entries(query_uri)\n\n    # Fetch and save the entries in batches.\n    for batch_start_position in range(0, total_entries, 1000):\n      entries = self.fetch_entries(query_uri, batch_start_position)\n      self.preprocess_and_save_entries(entries, entity)\n\n  def construct_query_uri(self, entity):\n    \"\"\"This function constructs a query URI for a specified entity from a QuickBooks company. It uses the entity name and the start date from the configuration file.\"\"\"\n\n    # Construct the query URI.\n    query_uri = 'https://quickbooks.api.intuit.com/v3/company/{0}/{1}?minorversion=37&startposition={2}&maxresults=1000&orderby=TxnDate%20asc&query=TxnDate%20ge%20{3}'.format(self.company_id, entity, self.start_position, self.start_date)\n\n    return query_uri\n\n  def get_total_entries(self, query_uri):\n    \"\"\"This function determines the total number of entries for a specified query URI from a QuickBooks company. It sends a GET request to the query URI and parses the response to determine the total number of entries. Any exceptions encountered during the process are logged along with the response text.\"\"\"\n\n    # Send a GET request to the query URI.\n    response = requests.get(query_uri, headers=self.headers)\n\n    # Parse the response to determine the total number of entries.\n    total_entries = json.loads(response.text)['QueryResponse']['totalCount']\n\n    return total_entries\n\n  def fetch_entries(self, query_uri, batch_start_position):\n    \"\"\"This function fetches entries for a specified query URI from a QuickBooks company. It sends a GET request to the query URI and parses the response to determine the entries. Any exceptions encountered during the process are logged along with the response text.\"\"\"\n\n    # Send a GET request to the query URI.\n    response = requests.get(query_uri, headers=self.headers)\n\n    # Parse the response to determine the entries.\n    entries = json.loads(response.text", "CodeBleu_score": 32.23691297865363}, {"code": "def _migrate_entries(self, entity)\n    query_uri = self.construct_query_uri(entity)\n    total_count = self.get_total_count(query_uri)\n    if total_count > 0:\n      logging.info('Migrating %s entries for %s', total_count, entity)\n      for batch in range(0, total_count, 1000):\n        entries = self.fetch_entries(query_uri, batch)\n        if entries:\n          self.preprocess_entries(entries)\n          self.save_entries(entries)\n        else:\n          logging.error('No entries returned for %s', entity)\n    else:\n      logging.info('No entries to migrate for %s', entity)\n\n  def migrate_accounts(self):\n    \"\"\"This function migrates accounts from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('account')\n\n  def migrate_customers(self):\n    \"\"\"This function migrates customers from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('customer')\n\n  def migrate_vendors(self):\n    \"\"\"This function migrates vendors from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('vendor')\n\n  def migrate_classes(self):\n    \"\"\"This function migrates classes from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('class')\n\n  def migrate_employees(self):\n    \"\"\"This function migrates employees from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('employee')\n\n  def migrate_departments(self):\n    \"\"\"This function migrates departments from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('department')\n\n  def migrate_tax_rates(self):\n    \"\"\"This function migrates tax rates from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('taxrate')\n\n  def migrate_tax_codes(self):\n    \"\"\"This function migrates tax codes from a QuickBooks company. It calls the _migrate_entries function to perform the actual migration.\"\"\"\n    self._migrate_entries('tax", "CodeBleu_score": 18.61749834718087}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n    if invoice.type == \"SalesInvoice\":\n      self.save_sales_invoice(invoice)\n    elif invoice.type == \"JournalEntry\":\n      self.save_journal_entry(invoice)\n    else:\n      raise Exception(\"Invalid invoice type: {}\".format(invoice.type))\n\n  def save_sales_invoice(self, invoice):\n    \"\"\"This function saves a sales invoice.\"\"\"\n    qb_invoice = QuickBooksSalesInvoice()\n    qb_invoice.set_quickbooks_id(invoice.quickbooks_id)\n    qb_invoice.set_quickbooks_sync_token(invoice.quickbooks_sync_token)\n    qb_invoice.set_customer_id(invoice.customer_id)\n    qb_invoice.set_customer_name(invoice.customer_name)\n    qb_invoice.set_customer_email(invoice.customer_email)\n    qb_invoice.set_customer_phone(invoice.customer_phone)\n    qb_invoice.set_customer_address(invoice.customer_address)\n    qb_invoice.set_customer_address_two(invoice.customer_address_two)\n    qb_invoice.set_customer_city(invoice.customer_city)\n    qb_invoice.set_customer_state(invoice.customer_state)\n    qb_invoice.set_customer_zip(invoice.customer_zip)\n    qb_invoice.set_customer_country(invoice.customer_country)\n    qb_invoice.set_customer_balance(invoice.customer_balance)\n    qb_invoice.set_customer_credit_balance(invoice.customer_credit_balance)\n    qb_invoice.set_customer_type(invoice.customer_type)\n    qb_invoice.set_customer_taxable(invoice.customer_taxable)\n    qb_invoice.set_customer_tax_id(invoice.customer_tax_id)\n    qb_invoice.set_customer_terms(invoice.customer_terms)\n    qb_invoice.set_customer_ship_address(invoice.customer_ship_address)\n    qb_invoice.set_customer_ship_address_two(invoice.customer_ship_address_two)\n    qb_invoice.set_customer_ship_city(invoice.customer_ship_city)\n    qb_", "CodeBleu_score": 23.539763433232082}, {"code": "def _save_invoice(self, invoice)\n    if invoice.type == \"SalesInvoice\":\n      self.save_sales_invoice(invoice)\n    elif invoice.type == \"JournalEntry\":\n      self.save_journal_entry(invoice)\n    elif invoice.type == \"CreditMemo\":\n      self.save_credit_memo(invoice)\n    elif invoice.type == \"Bill\":\n      self.save_bill(invoice)\n    else:\n      raise Exception(\"Unknown invoice type: {}\".format(invoice.type))\n\n  def save_sales_invoice(self, invoice):\n    \"\"\"This function saves a sales invoice.\"\"\"\n    invoice_id = self.qb_client.get_invoice_id(invoice)\n    if invoice_id:\n      self.qb_client.update_invoice(invoice_id, invoice)\n    else:\n      self.qb_client.create_invoice(invoice)\n\n  def save_journal_entry(self, invoice):\n    \"\"\"This function saves a journal entry.\"\"\"\n    journal_entry_id = self.qb_client.get_journal_entry_id(invoice)\n    if journal_entry_id:\n      self.qb_client.update_journal_entry(journal_entry_id, invoice)\n    else:\n      self.qb_client.create_journal_entry(invoice)\n\n  def save_credit_memo(self, invoice):\n    \"\"\"This function saves a credit memo.\"\"\"\n    credit_memo_id = self.qb_client.get_credit_memo_id(invoice)\n    if credit_memo_id:\n      self.qb_client.update_credit_memo(credit_memo_id, invoice)\n    else:\n      self.qb_client.create_credit_memo(invoice)\n\n  def save_bill(self, invoice):\n    \"\"\"This function saves a bill.\"\"\"\n    bill_id = self.qb_client.get_bill_id(invoice)\n    if bill_id:\n      self.qb_client.update_bill(bill_id, invoice)\n    else:\n      self.qb_client.create_bill(invoice)\n\n  def _save_statement_charge(self, statement_charge):\n    \"\"\"This function saves a statement charge.\"\"\"\n    statement_charge_id = self.qb_client.get_statement_charge_id(statement_charge)\n    if statement_charge_id:\n      self.qb_client.update_statement_charge(statement_charge_id,", "CodeBleu_score": 26.973776477705957}, {"code": "def _save_invoice(self, invoice)\n    if invoice.type == \"SalesInvoice\":\n      invoice.save()\n    elif invoice.type == \"JournalEntry\":\n      invoice.save()\n    else:\n      raise Exception(\"Invoice type is not supported\")\n\n  def _save_credit_memo(self, credit_memo):\n    \"\"\"This function saves a credit memo based on its type. It generates a QuickBooks ID for the credit memo and checks if any linked transactions are of type \"StatementCharge\" or \"ReimburseCharge.\" If such linked transactions exist, it saves the credit memo as a journal entry; otherwise, it saves it as a credit memo.\"\"\"\n    if credit_memo.type == \"CreditMemo\":\n      credit_memo.save()\n    elif credit_memo.type == \"JournalEntry\":\n      credit_memo.save()\n    else:\n      raise Exception(\"Credit memo type is not supported\")\n\n  def _save_bill(self, bill):\n    \"\"\"This function saves a bill based on its type. It generates a QuickBooks ID for the bill and checks if any linked transactions are of type \"StatementCharge\" or \"ReimburseCharge.\" If such linked transactions exist, it saves the bill as a journal entry; otherwise, it saves it as a bill.\"\"\"\n    if bill.type == \"Bill\":\n      bill.save()\n    elif bill.type == \"JournalEntry\":\n      bill.save()\n    else:\n      raise Exception(\"Bill type is not supported\")\n\n  def _save_journal_entry(self, journal_entry):\n    \"\"\"This function saves a journal entry.\"\"\"\n    journal_entry.save()\n\n  def _save_payment(self, payment):\n    \"\"\"This function saves a payment.\"\"\"\n    payment.save()\n\n  def _save_bill_payment(self, bill_payment):\n    \"\"\"This function saves a bill payment.\"\"\"\n    bill_payment.save()\n\n  def _save_vendor(self, vendor):\n    \"\"\"This function saves a vendor.\"\"\"\n    vendor.save()\n\n  def _save_customer(self, customer):\n    \"\"\"This function saves a customer.\"\"\"\n    customer.save()\n\n  def _save_employee(self, employee):\n    \"\"\"This function saves an employee.\"\"\"\n    employee.save()\n\n  def _save_item(self, item):\n    \"\"\"This function saves an item.\"\"\"\n    item.save()\n\n  def _save_class(self, class_object):\n    \"\"\"This function saves a class.\"\"\"\n    class_object.save()\n\n  def _", "CodeBleu_score": 18.817936641478102}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    # Create a list of dates between the start and end date\n    date_list = pd.date_range(start_date, end_date).to_pydatetime().tolist()\n    # Create a list of holidays between the start and end date\n    holidays = pd.date_range(start_date, end_date, freq='B')\n    # Create a list of dates between the start and end date, excluding holidays\n    date_list_no_holidays = [x for x in date_list if x not in holidays]\n    # Create a list of schedule dates\n    schedule_list = []\n    # Create a list of schedule dates with no holidays\n    schedule_list_no_holidays = []\n    # Calculate the interval between visits\n    interval = (end_date - start_date) / (no_of_visit - 1)\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        # Add the current date to the schedule list\n        schedule_list.append(start_date + i * interval)\n        # Add the current date to the schedule list without holidays\n        schedule_list_no_holidays.append(date_list_no_holidays[i])\n    # Adjust dates to avoid holidays\n    schedule_list_adjusted = []\n    for i in range(no_of_visit):\n        # Find the next business day\n        next_business_day = schedule_list_no_holidays[i] + datetime.timedelta(days=1)\n        # Add the next business day to the schedule list\n        schedule_list_adjusted.append(next_business_day)\n    # Adjust dates to avoid holidays\n    schedule_list_adjusted = [x for x in schedule_list_adjusted if x not in holidays]\n    # Adjust dates to avoid holidays\n    schedule_list_adjusted = [x for x in schedule_list_adjusted if x not in holidays]\n    # Adjust dates to avoid holidays\n    schedule_list_adjusted = [x for x in schedule_list_adjusted if x not in holidays]\n    # Adjust dates to avoid holidays\n    schedule_list_adjusted = [x for x in schedule_list_adjusted if x not in holidays]\n    # Adjust dates to avoid holidays\n    schedule_list_adjusted = [x for x in schedule_list_adjusted if x not in holidays", "CodeBleu_score": 28.159946856878047}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\n    # create a list of dates between the start and end dates\n    date_list = pd.date_range(start_date, end_date).tolist()\n\n    # calculate the interval between visits\n    interval = (end_date - start_date) / no_of_visit\n\n    # create a list of schedule dates\n    schedule_list = [start_date + interval * i for i in range(no_of_visit)]\n\n    # adjust the schedule dates to avoid holidays\n    schedule_list = [\n        self.adjust_date_for_holidays(date, sales_person) for date in schedule_list\n    ]\n\n    return schedule_list\n\n", "CodeBleu_score": 22.14038515776734}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n    # Create a list of dates from the start date to the end date\n    date_list = pd.date_range(start_date, end_date).to_pydatetime().tolist()\n\n    # Create a list of holidays from the date range\n    holidays = self.get_holidays(start_date, end_date)\n\n    # Create a list of dates for the schedule\n    schedule_list = []\n\n    # Create a list of dates for the schedule\n    schedule_list = []\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date) / no_of_visit\n\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        # Add the interval to the start date to get the next visit date\n        next_visit_date = start_date + interval\n\n        # If the next visit date is a holiday, increment by one day\n        if next_visit_date in holidays:\n            next_visit_date += timedelta(days=1)\n\n        # Add the next visit date to the schedule list\n        schedule_list.append(next_visit_date)\n\n        # Set the start date for the next visit to the next visit date\n        start_date = next_visit_date\n\n    # Adjust the dates to avoid holidays\n    schedule_list = self.adjust_schedule(schedule_list, sales_person)\n\n    return schedule_list\n", "CodeBleu_score": 32.36297230012512}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = [])\n/*\n * Determine the method to handle the request.\n */\n      $method = $this->request->input('method');\n", "CodeBleu_score": 13.746168246869248}, {"code": "<?\n   public function response($view, $data = [])\n// Determine the method to handle the request.\n      $method = $this->request->method();\n", "CodeBleu_score": 9.606386766652133}, {"code": "<?\n   public function response($view, $data = [])\n//        $data['view'] = $view;", "CodeBleu_score": 5.908764367816092}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->get_selected_contacts();\n\tforeach($contacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t} catch(Exception $e) {\n\t\t\t$request->add_error(new Exception(\"An error occurred while deleting the selected contact. Please try again later. If this problem persists, please contact the system administrator.\"));\n\t\t}\n\t}\n}\n", "CodeBleu_score": 34.10146866558971}, {"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->get('contacts');\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t} catch (Exception $e) {\n\t\t\t$this->flash('error', $e->getMessage());\n\t\t}\n\t}\n}\n", "CodeBleu_score": 54.26522096823025}, {"code": "<?\npublic function deleteContacts($request)\t$contacts = $request->input('contacts');\n\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t} catch (Exception $e) {\n\t\t\t$request->session()->flash('alert-danger', 'Unable to delete contact.');\n\t\t}\n\t}\n}\n", "CodeBleu_score": 53.212899760250046}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request)\t$transactions = Transaction::whereIn('id', $request->input('transaction_ids'))\n\t\t->where('user_id', '=', Auth::user()->id)\n\t\t->get();\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash('An error occurred while attempting to delete the transaction. Please try again.', 'error');\n\t\t}\n\t}\n\n\treturn redirect('/transactions');\n}\n", "CodeBleu_score": 52.8626421911833}, {"code": "<?\npublic function deleteTransactions($request)\t$transactions = Transaction::whereIn('id', $request->input('ids'))->get();\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$transaction->delete();\n\t\t} catch (\\Exception $e) {\n\t\t\tflash('Error deleting transaction: '. $e->getMessage(), 'error');\n\t\t}\n\t}\n\treturn redirect('/transactions');\n}\n", "CodeBleu_score": 51.806719679708955}, {"code": "<?\npublic function deleteTransactions($request)\t$transactions = $this->transactionRepository->findTransactionsByIds($request->input('transaction_ids'));\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Exception $e) {\n\t\t\t$this->flash->error($e->getMessage());\n\t\t}\n\t}\n}\n", "CodeBleu_score": 60.613706856125326}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator)$requestClass = $this->getRequestClass();", "CodeBleu_score": 11.027189340191619}, {"code": "<?\npublic function withValidator($validator)\nforeach ($this->data as $row) {\n", "CodeBleu_score": 8.438477986382749}, {"code": "<?\npublic function withValidator($validator)foreach($this->data as $row) {", "CodeBleu_score": 8.421749090557835}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void\t$this->bootUpdateModel(...$arguments);\n\t$this->bootUpdateRequest(...$arguments);\n}\n", "CodeBleu_score": 9.34080251117193}, {"code": "<?\npublic function bootUpdate(...$arguments): void\t$this->shouldUpdate = false;\n\t$this->shouldUpdate = $this->shouldUpdate();\n\n\tif (count($arguments) > 0 && $arguments[0] instanceof Model) {\n\t\t$this->model = $arguments[0];\n\t}\n\n\tif (count($arguments) > 1 && $arguments[1] instanceof Request) {\n\t\t$this->request = $arguments[1];\n\t}\n}\n", "CodeBleu_score": 40.52824468950334}, {"code": "<?\npublic function bootUpdate(...$arguments): void\tif (isset($arguments[0]) && $arguments[0] instanceof Model) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\n\tif (isset($arguments[1]) && $arguments[1] instanceof Request) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n}\n", "CodeBleu_score": 23.14808812882361}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name') $request = request();\n $limit = $request->input('limit', 10);\n $sort = $request->input('sort', $sort);\n $search = $request->input('search');\n if ($request->expectsJson() &&!request()->is('api/*')) {\n return $query->get();\n }\n if ($search) {\n $query = $query->where(function ($query) use ($search) {\n $query->where('name', 'like', \"%$search%\")\n ->orWhere('email', 'like', \"%$search%\");\n });\n }\n return $query->orderBy($sort)->paginate($limit);\n }\n}\n", "CodeBleu_score": 52.75407329593082}, {"code": "<?\n public function scopeCollect($query, $sort = 'name') $request = app('request');\n $sort = $request->get('sort', $sort);\n $sort = in_array($sort, $this->sortable)? $sort : 'name';\n $query = $query->orderBy($sort, 'asc');\n if ($request->expectsJson() &&! $request->is('api/*')) {\n return $query->get();\n } else {\n return $query->paginate(config('settings.paginate'));\n }\n }\n}\n", "CodeBleu_score": 44.82637376378794}, {"code": "<?\n public function scopeCollect($query, $sort = 'name') $request = request();\n $limit = $request->get('limit')? $request->get('limit') : 10;\n $search = $request->get('search')? $request->get('search') : '';\n $sort = $request->get('sort')? $request->get('sort') : $sort;\n if ($request->expectsJson() &&! $request->is('api/*')) {\n return $query->orderBy($sort)->get();\n }\n return $query->where('name', 'like', '%$search%')->orderBy($sort)->paginate($limit);\n }\n */\n", "CodeBleu_score": 52.29362213617529}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model)\t$open_amount = 0;\n\t$overdue_amount = 0;\n\t$total_amount = 0;\n\t$payments = $model->getPayments();\n\t$total_amount = $payments->sum('amount');\n\t$status = $model->status;\n\tif($status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\t$due_date = $model->due_date;\n\t$today = date('Y-m-d');\n\t$open_amount = $total_amount;\n\tif($due_date < $today) {\n\t\t$overdue_amount = $total_amount;\n\t}\n\treturn [$open_amount, $overdue_amount];\n}\n", "CodeBleu_score": 33.640243381429606}, {"code": "<?\npublic function calculateDocumentTotals($model)\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\n\t$payments = $model->transactions->where('type', '=', 'payment');\n\n\tif ($model->status == 'partial') {\n\t\tforeach ($payments as $payment) {\n\t\t\t$openAmount += $payment->amount;\n\t\t}\n\t}\n\n\t$dueDate = Carbon::parse($model->due_date);\n\t$today = Carbon::today();\n\n\tif ($dueDate->gt($today)) {\n\t\t$openAmount = $model->total;\n\t} else {\n\t\t$overdueAmount = $model->total;\n\t}\n\n\treturn [$openAmount, $overdueAmount];\n}\n", "CodeBleu_score": 47.04619267557001}, {"code": "<?\npublic function calculateDocumentTotals($model)\t$paid = false;\n\t$open = 0;\n\t$overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$paid = true;\n\t} else {\n\t\t$payments = $model->transactions;\n\t\tforeach ($payments as $payment) {\n\t\t\t$open += $payment->amount;\n\t\t}\n\t}\n\n\t$dueDate = new DateTime($model->dueDate);\n\t$today = new DateTime();\n\t$diff = $dueDate->diff($today);\n\n\tif ($diff->invert == 1) {\n\t\t$overdue = $open;\n\t\t$open = 0;\n\t}\n\n\treturn array('paid' => $paid, 'open' => $open, 'overdue' => $overdue);\n}\n", "CodeBleu_score": 39.123786369510704}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)\t$page = $page?: $this->resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->getPerPage();\n\t$total = $this->toBase()->getCountForPagination();\n\t$results = $total? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\treturn $this->paginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}\n", "CodeBleu_score": 70.67360237472523}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)\t$page = $page?: LengthAwarePaginator::resolveCurrentPage($pageName);\n\n\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$total = $this->toBase()->getCountForPagination();\n\n\t$results = $total? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => LengthAwarePaginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}\n", "CodeBleu_score": 68.87174291032434}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)$page = $page?: Paginator::resolveCurrentPage($pageName);", "CodeBleu_score": 22.331035001852474}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request)\t$reconciliations = Reconciliation::where('reconciled', '=', false)\n\t\t->where('account_id', '=', $request->account_id)\n\t\t->where('date', '>=', $request->start_date)\n\t\t->where('date', '<=', $request->end_date)\n\t\t->get();\n\n\tDB::transaction(function() use ($reconciliations) {\n\t\tforeach ($reconciliations as $reconciliation) {\n\t\t\t$reconciliation->reconciled = true;\n\t\t\t$reconciliation->save();\n\n\t\t\t$transactions = Transaction::where('reconciliation_id', '=', $reconciliation->id)\n\t\t\t\t->where('date', '>=', $reconciliation->date)\n\t\t\t\t->where('date', '<=', $reconciliation->date)\n\t\t\t\t->get();\n\n\t\t\tforeach ($transactions as $transaction) {\n\t\t\t\t$transaction->reconciled = true;\n\t\t\t\t$transaction->save();\n\t\t\t}\n\t\t}\n\t});\n}\n", "CodeBleu_score": 37.69932018977508}, {"code": "<?\npublic function reconcile($request)\t$reconciliation = Reconciliation::find($request->input('reconciliation_id'));\n\t$reconciliation->status ='reconciled';\n\t$reconciliation->save();\n\n\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t->where('transaction_date', '>=', $reconciliation->start_date)\n\t\t->where('transaction_date', '<=', $reconciliation->end_date)\n\t\t->get();\n\n\tforeach ($transactions as $transaction) {\n\t\t$transaction->status ='reconciled';\n\t\t$transaction->save();\n\t}\n}\n", "CodeBleu_score": 31.950690967539686}, {"code": "<?\npublic function reconcile($request)\t$reconciliation = Reconciliation::find($request->reconciliation_id);\n\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t$reconciliation->save();\n\n\t$transactions = Transaction::where('reconciliation_id', $reconciliation->id)\n\t\t->where('date', '>=', $reconciliation->date_start)\n\t\t->where('date', '<=', $reconciliation->date_end)\n\t\t->where('account_id', $reconciliation->account_id)\n\t\t->get();\n\n\tforeach ($transactions as $transaction) {\n\t\t$transaction->status = Transaction::STATUS_RECONCILED;\n\t\t$transaction->save();\n\t}\n\n\treturn $reconciliation;\n}\n", "CodeBleu_score": 32.07545636829284}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation\t// Retrieve the user by email address\n\t$user = User::where('email', $this->email)->first();\n\n\t// If the user does not exist, throw an exception\n\tif (is_null($user)) {\n\t\tthrow new Exception(\"User does not exist\");\n\t}\n\n\t// Delete any existing invitations for the user\n\t$user->invitations()->delete();\n\n\t// Create a new invitation for the user\n\t$invitation = $user->invitations()->create([\n\t\t'token' => Str::random(16)\n\t]);\n\n\t// Attempt to dispatch a notification job to notify the user\n\ttry {\n\t\tdispatch(new UserInvitationNotification($invitation));\n\t} catch (Exception $e) {\n\t\t// If the notification failed, delete the invitation and throw an exception\n\t\t$invitation->delete();\n\t\tthrow new Exception(\"Failed to send invitation: {$e->getMessage()}\");\n\t}\n\n\t// Return the newly created invitation\n\treturn $invitation;\n}\n", "CodeBleu_score": 29.21703434982575}, {"code": "<?\npublic function handle(): UserInvitation\t$user = $this->argument('user');\n\n\t$invitations = UserInvitation::where('user_id', $user->id)->get();\n\n\tforeach ($invitations as $invitation) {\n\t\t$invitation->delete();\n\t}\n\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $user->id,\n\t\t'token' => Str::random(64),\n\t]);\n\n\ttry {\n\t\t(new NotifyUserInvitationJob($invitation))->handle();\n\t} catch (Exception $e) {\n\t\t$invitation->delete();\n\n\t\tthrow new Exception('Failed to dispatch notification job: '. $e->getMessage());\n\t}\n\n\treturn $invitation;\n}\n", "CodeBleu_score": 37.59725306756455}, {"code": "<?\npublic function handle(): UserInvitation\t$user = $this->argument('user');\n\t$token = $this->argument('token');\n\n\t$invitations = UserInvitation::where('user_id', $user->id)->where('token', $token)->get();\n\n\tforeach ($invitations as $invitation) {\n\t\t$invitation->delete();\n\t}\n\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $user->id,\n\t\t'token' => $token,\n\t]);\n\n\ttry {\n\t\tdispatch(new SendUserInvitationNotification($invitation));\n\t} catch (Exception $e) {\n\t\t$invitation->delete();\n\t\tthrow new Exception('Failed to dispatch notification: '. $e->getMessage());\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 38.72366124979191}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void\tif (this.reconciled) {\n\t\tthrow new Exception(\"Transaction has already been reconciled\");\n\t}\n\tif (this.transfer) {\n\t\tthrow new UnauthorizedException(\"Transfer transactions are not authorized\");\n\t}\n}\n", "CodeBleu_score": 15.564037583179024}, {"code": "<?\npublic function authorize(): void\tif (this.isReconciled()) {\n\t\tthrow new Exception(\"This transaction has already been reconciled\");\n\t}\n\tif (this.isTransfer()) {\n\t\tthrow new UnauthorizedException(\"This transaction is a transfer\");\n\t}\n}\n", "CodeBleu_score": 16.207915300601854}, {"code": "<?\npublic function authorize(): void\tif ($this->isReconciled()) {\n\t\tthrow new Exception(\"This transaction has already been reconciled\");\n\t}\n\tif ($this->isTransfer()) {\n\t\tthrow new UnauthorizedException(\"This transaction is a transfer\");\n\t}\n}\n", "CodeBleu_score": 19.652072985013472}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName)\tboolean isAllowed = false;\n\n\tif (tableName == null || tableName.isEmpty()) {\n\t\treturn isAllowed;\n\t}\n\n\tif (tableName.startsWith(\"Customer\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Product\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Order\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"OrderDetail\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Employee\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"EmployeeTerritory\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"EmployeeOrder\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Territory\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Region\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Shipper\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Supplier\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"Category\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"CustomerCustomerDemo\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"CustomerDemographic\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"CustomerAddress\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"EmployeeCustomer\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"EmployeeTerritory\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"OrderDetail\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"OrderDetail\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"ProductOrderDetail\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"ProductProductPhoto\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"ProductPhoto\")) {\n\t\tisAllowed = true;\n\t} else if (tableName.startsWith(\"ProductCategory\")) {\n\t\tisAllowed = true;\n\t}", "CodeBleu_score": 14.429617438844694}, {"code": "public boolean doTableFilter(String tableName)\tif (tableName.equals(\"Table1\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table2\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table3\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table4\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table5\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table6\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table7\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table8\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table9\")) {\n\t\treturn true;\n\t}\n\telse if (tableName.equals(\"Table10\")) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 14.556958350677643}, {"code": "public boolean doTableFilter(String tableName)\tif (tableName == null || tableName.isEmpty()) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"sys\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"system\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"mysql\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"information_schema\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"performance_schema\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"innodb\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"ndbinfo\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"test\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\")) {\n\t\treturn false;\n\t}\n\tif (tableName.startsWith(\"tmp\"))", "CodeBleu_score": 12.680463786104715}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer()\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}\n", "CodeBleu_score": 69.00705514897572}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}\n", "CodeBleu_score": 69.00705514897572}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer()\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}\n", "CodeBleu_score": 69.00705514897572}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception\ttry {\n\t\t// Retrieve the list of accounts from the database\n\t\tList<Account> accounts = accountService.findAll();\n\n\t\t// Convert the list of accounts to JSON format\n\t\tString accountsJSON = new AccountJSON().toJSON(accounts);\n\n\t\t// Return the JSON object\n\t\treturn accountsJSON;\n\t}\n\n\t// Handle any exceptions that may have occurred\n\tcatch (Exception e) {\n\t\te.printStackTrace();\n\t\tlogger.error(e.getMessage());\n\n\t\t// Return an error message\n\t\treturn \"{\\\"message\\\":\\\"An error has occurred\\\"}\";\n\t}\n}\n", "CodeBleu_score": 20.166556599702048}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception\ttry {\n\t\t// Get a list of accounts\n\t\tAccountService accountService = new AccountService();\n\t\tList<Account> accountList = accountService.findBySelect();\n\n\t\t// Convert the account list to JSON\n\t\tString accountListJSON = new AccountListJSON().toJSON(accountList);\n\n\t\t// Return the account list JSON\n\t\treturn accountListJSON;\n\t} catch (Exception e) {\n\t\t// Log the exception\n\t\tlogger.error(\"Exception: \", e);\n\n\t\t// Send an error message\n\t\treturn \"{\\\"ERROR\\\":\\\"Exception: \" + e.getMessage() + \"\\\"}\";\n\t}\n}\n", "CodeBleu_score": 26.012466901954745}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception\tAccountService accountService = new AccountService();\n\tList<Account> accounts = accountService.findBySelect();\n\tString json = new AccountJSON().serialize(accounts);\n\treturn json;\n}\n", "CodeBleu_score": 19.8000091218266}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception\n//    logger.info(\"listWithBalance() - Start\");", "CodeBleu_score": 10.866468777796063}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception BaseResponseInfo responseInfo = new BaseResponseInfo();\n try {\n AccountService accountService = new AccountService();\n List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n Long accountCount = accountService.count(name, serialNo);\n responseInfo.setCode(ResponseCode.SUCCESS);\n responseInfo.setMessage(ResponseMessage.SUCCESS);\n responseInfo.setCount(accountCount);\n responseInfo.setData(accounts);\n } catch (Exception e) {\n responseInfo.setCode(ResponseCode.FAILURE);\n responseInfo.setMessage(e.getMessage());\n logger.error(\"Exception occurred while fetching the account list with balance.\", e);\n }\n return responseInfo;\n }\n */\n\n}\n", "CodeBleu_score": 40.201373786446624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception BaseResponseInfo response = new BaseResponseInfo();\n response.setStatusCode(200);\n response.setMessage(\"SUCCESS\");\n try {\n // Initialize the account service.\n AccountService accountService = new AccountService();\n // Get the list of accounts and their count.\n List<Account> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n Long accountCount = accountService.count(name, serialNo);\n // Set the data for the response object.\n response.setData(accountList);\n response.setTotalCount(accountCount);\n } catch (Exception e) {\n response.setStatusCode(500);\n response.setMessage(\"FAILURE\");\n // Log the exception.\n logger.error(e.getMessage(), e);\n }\n return response;\n }\n */\n", "CodeBleu_score": 36.215535714186096}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception\tlogger.info(\"Received request to retrieve statistics for \" + name + \" with serial number \" + serialNo);\n\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setResponseCode(200);\n\tresponse.setResponseMessage(\"OK\");\n\tresponse.setResponseDescription(\"Statistics retrieved successfully.\");\n\n\t// Retrieve the account with the provided name and serial number.\n\tAccount account = accountService.getAccountByNameAndSerialNo(name, serialNo);\n\tif (account == null) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseMessage(\"Error\");\n\t\tresponse.setResponseDescription(\"Unable to retrieve statistics. Account not found.\");\n\t\tlogger.error(\"Unable to retrieve statistics for \" + name + \" with serial number \" + serialNo + \". Account not found.\");\n\t\treturn response;\n\t}\n\n\t// Retrieve the statistics for the account.\n\tList<Statistics> statistics = statisticsService.getStatistics(account);\n\tif (statistics == null) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseMessage(\"Error\");\n\t\tresponse.setResponseDescription(\"Unable to retrieve statistics.\");\n\t\tlogger.error(\"Unable to retrieve statistics for \" + name + \" with serial number \" + serialNo + \".\");\n\t\treturn response;\n\t}\n\n\t// Set the statistics in the response.\n\tresponse.setData(statistics);\n\tlogger.info(\"Retrieved statistics for \" + name + \" with serial number \" + serialNo + \".\");\n\treturn response;\n}\n", "CodeBleu_score": 28.391349007554872}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setStatusCode(200);\n\tresponse.setResponseCode(ResponseCode.SUCCESS);\n\tresponse.setResponseMessage(\"Statistics retrieved successfully\");\n\n\ttry {\n\t\tStatisticsService statisticsService = new StatisticsService();\n\t\tStatistics statistics = statisticsService.getStatistics(name, serialNo);\n\t\tresponse.setData(statistics);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving statistics\", e);\n\t\tresponse.setResponseCode(ResponseCode.FAILURE);\n\t\tresponse.setResponseMessage(\"Error retrieving statistics\");\n\t}\n\n\treturn response;\n}\n", "CodeBleu_score": 35.004320007115034}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception\tlogger.info(\"getStatistics called with name = {}, serialNo = {}\", name, serialNo);\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Retrieve statistics from account service\n\t\tAccountInfo accountInfo = accountService.getStatistics(name, serialNo);\n\t\t// Set response code to 200 and include data\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(accountInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception occurred while getting statistics\", e);\n\t\t// Set response code to 500 and include error message\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(\"Exception occurred while getting statistics\");\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 35.3093489205867}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception BaseResponseInfo responseInfo = new BaseResponseInfo();\n responseInfo.setStatusCode(200);\n try {\n BillInfo billInfo = billService.getBillInfoByBillNo(billNo);\n if (billInfo!= null) {\n responseInfo.setStatusCode(200);\n responseInfo.setResponse(billInfo);\n } else {\n responseInfo.setStatusCode(404);\n responseInfo.setResponse(\"Bill not found for bill number: \" + billNo);\n }\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n responseInfo.setStatusCode(500);\n responseInfo.setResponse(\"Error occured while retrieving bill details for bill number: \" + billNo);\n }\n return responseInfo;\n }\n */\n", "CodeBleu_score": 31.94322509576698}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception BaseResponseInfo response = new BaseResponseInfo();\n try {\n List<BillDetails> billDetails = billDetailsService.findByBillNo(billNo);\n if (billDetails.size() > 0) {\n BillDetails billDetail = billDetails.get(0);\n response.setStatusCode(200);\n response.setResponse(billDetail);\n } else {\n response.setStatusCode(404);\n response.setResponse(\"Bill not found\");\n }\n } catch (Exception e) {\n logger.error(\"Exception occurred while fetching bill details for bill number: \" + billNo, e);\n response.setStatusCode(500);\n response.setResponse(\"Exception occurred while fetching bill details for bill number: \" + billNo);\n }\n return response;\n }\n */\n\n}\n", "CodeBleu_score": 34.05572155491322}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception BaseResponseInfo response = new BaseResponseInfo();\n try {\n AccountHeadService accountHeadService = new AccountHeadService();\n AccountHead accountHead = accountHeadService.findByBillNumber(billNo);\n if (accountHead!= null) {\n response.setCode(200);\n response.setResult(accountHead);\n } else {\n response.setCode(404);\n response.setMessage(\"Bill number not found\");\n }\n } catch (Exception e) {\n response.setCode(500);\n response.setMessage(\"Exception occured while fetching the bill details\");\n }\n return response;\n }\n *\n */\n", "CodeBleu_score": 35.79960306712643}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setStatusCode(200);\n\t\tresponse.setData(depotService.findDepotByCurrentUser(request));\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setStatusCode(500);\n\t\tresponse.setMessage(\"Error while retrieving depot information\");\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 36.00691544291163}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tDepot depot = depotService.findDepotByCurrentUser(request);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depot);\n\t} catch (Exception e) {\n\t\tlogger.error(\"error\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"\u7cfb\u7edf\u9519\u8bef\");\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 37.41106114151202}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tresponseInfo.setStatusCode(200);\n\ttry {\n\t\tDepot depot = depotService.findDepotByCurrentUser(request);\n\t\tresponseInfo.setStatusCode(200);\n\t\tresponseInfo.setBody(depot);\n\t} catch (DepotNotFoundException e) {\n\t\tresponseInfo.setStatusCode(404);\n\t\tresponseInfo.setMessage(\"Depot not found.\");\n\t} catch (Exception e) {\n\t\tresponseInfo.setStatusCode(500);\n\t\tresponseInfo.setMessage(\"An error occurred while attempting to retrieve the depot information.\");\n\t\tlog.error(\"An error occurred while attempting to retrieve the depot information.\", e);\n\t}\n\treturn responseInfo;\n}\n", "CodeBleu_score": 29.77711254148342}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception\ttry {\n\t\t// Initialize the JSON array to store the functions.\n\t\tJSONArray functions = new JSONArray();\n\t\t// Get the list of functions based on the provided type and keyId parameters.\n\t\tList<RoleFunction> roleFunctions = roleFunctionService.findRoleFunctions(type, keyId);\n\t\t// Iterate through the list of functions.\n\t\tfor (RoleFunction roleFunction : roleFunctions) {\n\t\t\t// Create a JSON object to represent the function.\n\t\t\tJSONObject function = new JSONObject();\n\t\t\t// Populate the JSON object with the function's information.\n\t\t\tfunction.put(\"id\", roleFunction.getId());\n\t\t\tfunction.put(\"name\", roleFunction.getName());\n\t\t\tfunction.put(\"description\", roleFunction.getDescription());\n\t\t\t// Add the function to the JSON array.\n\t\t\tfunctions.add(function);\n\t\t}\n\t\t// Initialize the JSON object to represent the response.\n\t\tJSONObject response = new JSONObject();\n\t\t// Populate the response object.\n\t\tresponse.put(\"functions\", functions);\n\t\t// Add the response object to the JSON array.\n\t\tfunctions.add(response);\n\t\t// Return the JSON array.\n\t\treturn functions;\n\t} catch (Exception e) {\n\t\t// Log the exception.\n\t\tlogger.error(e.getMessage());\n\t\t// Re-throw the exception to be handled by the global exception handler.\n\t\tthrow e;\n\t}\n}\n", "CodeBleu_score": 26.43709937959317}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception\nJSONArray jsonArray = new JSONArray();\n", "CodeBleu_score": 11.20071963470192}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<RoleFunction> roleFunctions = roleFunctionService.findRoleFunctions(type, keyId);\n\t\tJSONObject json = new JSONObject();\n\t\tjson.put(\"roleFunctions\", roleFunctions);\n\t\tif (!isSystemAdmin(request)) {\n\t\t\tList<RoleFunction> roleFunctionsFiltered = new ArrayList<>();\n\t\t\tfor (RoleFunction roleFunction : roleFunctions) {\n\t\t\t\tif (!roleFunction.getRole().getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n\t\t\t\t\troleFunctionsFiltered.add(roleFunction);\n\t\t\t\t}\n\t\t\t}\n\t\t\tjson.put(\"roleFunctions\", roleFunctionsFiltered);\n\t\t}\n\t\tjsonArray.add(json);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving role functions\", e);\n\t\tthrow new Exception(e);\n\t}\n\treturn jsonArray;\n}\n", "CodeBleu_score": 33.555606043072}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception \tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tPlatformConfigService platformConfigService = new PlatformConfigService();\n\tPlatformConfigDO platformConfigDO = null;\n\ttry {\n\t\tplatformConfigDO = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\tresponseInfo.setStatusCode(200);\n\t\tresponseInfo.setBody(platformConfigDO);\n\t\tresponseInfo.setMessage(\"Platform configuration information retrieved successfully.\");\n\t\treturn responseInfo;\n\t} catch (Exception e) {\n\t\tresponseInfo.setStatusCode(500);\n\t\tresponseInfo.setMessage(\"An error occurred while retrieving platform configuration information.\");\n\t\tlogger.error(\"Platform configuration information retrieval failed\", e);\n\t\treturn responseInfo;\n\t}\n}\n", "CodeBleu_score": 31.807855310558885}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception BaseResponseInfo responseInfo = new BaseResponseInfo();", "CodeBleu_score": 13.699262965226161}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception \tBaseResponseInfo response = new BaseResponseInfo();\n\tPlatformConfigService platformConfigService = new PlatformConfigService();\n\tPlatformConfig platformConfig = null;\n\ttry {\n\t\tplatformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\tresponse.setStatusCode(200);\n\t\tresponse.setBody(platformConfig);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setStatusCode(500);\n\t\tresponse.setBody(e.getMessage());\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 40.98452111169131}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Get the system configuration list from the service.\n\t\tList<SystemConfiguration> systemConfigurationList = systemConfigurationService.getSystemConfigurationList();\n\t\t// Set the response code to 200 and include the first system configuration in the response data.\n\t\tresponse.setResponseCode(\"200\");\n\t\tresponse.setResponseData(systemConfigurationList.get(0));\n\t} catch (Exception e) {\n\t\t// Log the error.\n\t\tlogger.error(\"getCurrentInfo\", e);\n\t\t// Set the response code to 500 and include an error message in the response data.\n\t\tresponse.setResponseCode(\"500\");\n\t\tresponse.setResponseData(\"Error getting current system configuration: \" + e.getMessage());\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 32.06429490863646}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Get the configuration list from the service\n\t\tList<ConfigurationInfo> configList = configurationService.getCurrentConfigurationList();\n\t\t// Set the response code to 200 and include the first item from the list\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(configList.get(0));\n\t} catch (Exception e) {\n\t\t// Log the error\n\t\tlogger.error(e.getMessage(), e);\n\t\t// Set the response code to 500 and include an error message\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setData(\"An error has occurred. Please contact your system administrator.\");\n\t}\n\t// Return the response\n\treturn response;\n}\n", "CodeBleu_score": 34.87962819563436}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tSystemConfigurationService service = new SystemConfigurationService();\n\t\tSystemConfigurationList list = service.getCurrentInfo();\n\t\tresponse.setCode(200);\n\t\tresponse.setData(list);\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setData(\"Error: \" + e.getMessage());\n\t\tlogger.error(\"getCurrentInfo\", e);\n\t}\n\treturn response;\n}\n", "CodeBleu_score": 33.634212268588435}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Retrieve the business path from the request\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\t// Retrieve the file from the request\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\t// Get the file name\n\t\tString fileName = file.getOriginalFilename();\n\t\t// Get the file type\n\t\tString fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\t\t// Get the file size\n\t\tlong fileSize = file.getSize();\n\t\t// Create a file object\n\t\tFile fileObj = new File();\n\t\t// Set the file name\n\t\tfileObj.setFileName(fileName);\n\t\t// Set the file type\n\t\tfileObj.setFileType(fileType);\n\t\t// Set the file size\n\t\tfileObj.setFileSize(fileSize);\n\t\t// Set the file path\n\t\tfileObj.setFilePath(businessPath);\n\t\t// Set the file path\n\t\tfileObj.setFilePath(businessPath);\n\t\t// Set the file path\n\t\tfileObj.setFilePath(businessPath);\n\t\t// Set the file path\n\t\tfileObj.setFilePath(businessPath);\n\t\t// Save the file locally or to AliOss\n\t\tif (fileType.equals(\"jpg\") || fileType.equals(\"png\") || fileType.equals(\"jpeg\") || fileType.equals(\"gif\")) {\n\t\t\t// Save the file to AliOss\n\t\t\tfileObj = AliOssUtil.uploadFile(fileObj, file);\n\t\t} else {\n\t\t\t// Save the file locally\n\t\t\tfileObj = FileUtil.uploadFile(fileObj, file);\n\t\t}\n\t\t// Set the response code\n\t\tresponseInfo.setResponseCode(\"000000\");\n\t\t// Set the response data\n\t\tresponseInfo.setResponseData(fileObj);\n\t} catch (Exception e) {\n\t\t// Log the exception\n\t\tlogger.error(e.getMessage(), e);\n\t\t// Set the response code\n\t\tresponseInfo.setResponseCode(\"999999\");\n\t\t// Set the response message\n\t\tresponseInfo.setResponseMessage(e.getMessage());\n\t}\n\t// Return the response\n\treturn responseInfo;\n}\n\n}", "CodeBleu_score": 32.65993761649748}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)\ttry {\n\t\t// Get the business path from the request.\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\n\t\t// Get the file from the request.\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\n\t\t// Get the file name from the request.\n\t\tString fileName = file.getOriginalFilename();\n\n\t\t// Get the file suffix from the request.\n\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\n\t\t// Get the file name without suffix from the request.\n\t\tString name = fileName.substring(0, fileName.lastIndexOf(\".\"));\n\n\t\t// Get the file size from the request.\n\t\tlong size = file.getSize();\n\n\t\t// Get the file type from the request.\n\t\tString type = file.getContentType();\n\n\t\t// Get the file suffix from the request.\n\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\n\t\t// Get the file name without suffix from the request.\n\t\tString name = fileName.substring(0, fileName.lastIndexOf(\".\"));\n\n\t\t// Get the file size from the request.\n\t\tlong size = file.getSize();\n\n\t\t// Get the file type from the request.\n\t\tString type = file.getContentType();\n\n\t\t// Save the file to the local disk.\n\t\tString localPath = businessPath + File.separator + name + \".\" + suffix;\n\t\tfile.transferTo(new File(localPath));\n\n\t\t// Save the file to AliOss.\n\t\tString aliOssPath = businessPath + \"/\" + name + \".\" + suffix;\n\t\tAliOssUtils.upload(aliOssPath, file.getInputStream());\n\n\t\t// Set the response code.\n\t\tint code = 0;\n\n\t\t// Set the response data.\n\t\tString data = \"\";\n\n\t\t// Return the response.\n\t\treturn new BaseResponseInfo(code, data);\n\t} catch (Exception e) {\n\t\t// Log the exception.\n\t\tlogger.error(e.getMessage(), e);\n\n\t\t// Set the response code.\n\t\tint code = -1;\n\n\t\t// Set the response data.\n\t\tString data = \"\";\n\n\t\t// Return the response.\n\t\treturn new BaseResponseInfo(code, data);\n\t}\n}", "CodeBleu_score": 35.4161495373016}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response)\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tString fileType = request.getParameter(\"fileType\");\n\t\tString file = request.getParameter(\"file\");\n\t\tString fileId = request.getParameter(\"fileId\");\n\t\tString fileUrl = request.getParameter(\"fileUrl\");\n\t\tString fileName = request.getParameter(\"fileName\");\n\t\tString fileSuffix = request.getParameter(\"fileSuffix\");\n\t\tString fileKey = request.getParameter(\"fileKey\");\n\t\tString fileMd5 = request.getParameter(\"fileMd5\");\n\t\tString fileSha1 = request.getParameter(\"fileSha1\");\n\t\tString fileSha256 = request.getParameter(\"fileSha256\");\n\t\tString fileSha512 = request.getParameter(\"fileSha512\");\n\t\tString fileDescription = request.getParameter(\"fileDescription\");\n\t\tString fileSize = request.getParameter(\"fileSize\");\n\t\tString fileContentType = request.getParameter(\"fileContentType\");\n\t\tString fileWidth = request.getParameter(\"fileWidth\");\n\t\tString fileHeight = request.getParameter(\"fileHeight\");\n\t\tString fileOriginalName = request.getParameter(\"fileOriginalName\");\n\t\tString fileOriginalPath = request.getParameter(\"fileOriginalPath\");\n\t\tString fileOriginalSuffix = request.getParameter(\"fileOriginalSuffix\");\n\t\tString fileOriginalMd5 = request.getParameter(\"fileOriginalMd5\");\n\t\tString fileOriginalSha1 = request.getParameter(\"fileOriginalSha1\");\n\t\tString fileOriginalSha256 = request.getParameter(\"fileOriginalSha256\");\n\t\tString fileOriginalSha512 = request.getParameter(\"fileOriginalSha512\");\n\t\tString fileOriginalSize = request.getParameter(\"fileOriginalSize\");\n\t\tString fileOriginalContentType = request.getParameter(\"fileOriginalContentType\");\n\t\tString fileOriginalWidth = request.getParameter(\"fileOriginalWidth\");\n\t\tString fileOriginalHeight = request.getParameter(\"fileOriginalHeight\");\n\t\tString fileOriginalDescription = request.getParameter(\"fileOriginalDescription\");\n\t\tString fileOriginalBusinessPath = request.getParameter(\"fileOriginalBusinessPath\");\n\t\tString fileOriginalBusinessId = request.getParameter(\"fileOriginalBusinessId\");\n\t\tString fileOriginalBusinessType = request.getParameter(\"fileOriginalBusinessType\");\n\t\tString fileOriginalBusinessName = request.getParameter(\"fileOriginalBusinessName\");\n\t\tString fileOriginalBusinessAlias = request.getParameter(\"fileOriginal", "CodeBleu_score": 16.188005454407435}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response) try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n String dataList = jsonObject.getString(\"dataList\");\n String[] dataArray = dataList.split(\";\");\n String[] headArray = head.split(\",\");\n String[] tipArray = tip.split(\",\");\n String[] dataArrayTemp = new String[dataArray.length];\n for (int i = 0; i < dataArray.length; i++) {\n dataArrayTemp[i] = dataArray[i].replace(\"\\\"\", \"\");\n }\n List<String[]> data = Arrays.asList(dataArrayTemp);\n String fileName = title + \".xls\";\n response.setContentType(\"application/vnd.ms-excel\");\n response.addHeader(\"Content-Disposition\", \"attachment;filename=\" + fileName);\n OutputStream out = response.getOutputStream();\n ExcelExportUtil.exportExcel(title, headArray, tipArray, data, out);\n out.flush();\n out.close();\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }\n */\n", "CodeBleu_score": 65.29476202149691}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response) try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n List<List<String>> data = jsonObject.getJSONArray(\"data\").toJavaList(List.class);\n String fileName = jsonObject.getString(\"fileName\");\n exportExcel(title, head, tip, data, fileName, response);\n } catch (Exception e) {\n logger.error(\"exportExcelByParam error!\", e);\n }\n }\n */\n", "CodeBleu_score": 69.43866515212767}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response) try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n List<List<String>> data = new ArrayList<List<String>>();\n JSONArray jsonArray = jsonObject.getJSONArray(\"data\");\n for (int i = 0; i < jsonArray.size(); i++) {\n List<String> row = new ArrayList<String>();\n for (int j = 0; j < jsonArray.getJSONArray(i).size(); j++) {\n row.add(jsonArray.getJSONArray(i).getString(j));\n }\n data.add(row);\n }\n String fileName = title + \".xls\";\n response.setContentType(\"application/vnd.ms-excel\");\n response.addHeader(\"Content-Disposition\", \"attachment;filename=\" + fileName);\n OutputStream out = response.getOutputStream();\n EasyExcel.write(out, new ExportExcel()).head(head).title(title).sheet()", "CodeBleu_score": 55.72453235198067}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \t// Initialize the account object\n\tAccount account = new Account();\n\n\t// Set the account ID if specified\n\tif (obj.has(\"id\")) {\n\t\taccount.setId(obj.getInt(\"id\"));\n\t}\n\n\t// Set the account name if specified\n\tif (obj.has(\"name\")) {\n\t\taccount.setName(obj.getString(\"name\"));\n\t}\n\n\t// Set the account description if specified\n\tif (obj.has(\"description\")) {\n\t\taccount.setDescription(obj.getString(\"description\"));\n\t}\n\n\t// Set the account type if specified\n\tif (obj.has(\"type\")) {\n\t\taccount.setType(obj.getString(\"type\"));\n\t}\n\n\t// Set the account status if specified\n\tif (obj.has(\"status\")) {\n\t\taccount.setStatus(obj.getString(\"status\"));\n\t}\n\n\t// Set the account balance if specified\n\tif (obj.has(\"balance\")) {\n\t\taccount.setBalance(obj.getDouble(\"balance\"));\n\t}\n\n\t// Set the account creation date if specified\n\tif (obj.has(\"creation_date\")) {\n\t\taccount.setCreationDate(obj.getString(\"creation_date\"));\n\t}\n\n\t// Set the account last modified date if specified\n\tif (obj.has(\"last_modified_date\")) {\n\t\taccount.setLastModifiedDate(obj.getString(\"last_modified_date\"));\n\t}\n\n\t// Set the account last modified by if specified\n\tif (obj.has(\"last_modified_by\")) {\n\t\taccount.setLastModifiedBy(obj.getString(\"last_modified_by\"));\n\t}\n\n\t// Set the account created by if specified\n\tif (obj.has(\"created_by\")) {\n\t\taccount.setCreatedBy(obj.getString(\"created_by\"));\n\t}\n\n\t// Set the account default flag if specified\n\tif (obj.has(\"default_flag\")) {\n\t\taccount.setDefaultFlag(obj.getString(\"default_flag\"));\n\t}\n\n\t// Set the account default flag if specified\n\tif (obj.has(\"default_flag\")) {\n\t\taccount.setDefaultFlag(obj.getString(\"default_flag\"));\n\t}\n\n\t// Set the account default flag if specified\n\tif (obj.has(\"default_flag\")) {\n\t\taccount.setDefault", "CodeBleu_score": 16.623243117823968}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountBalance(obj.getDouble(\"accountBalance\"));\n\t\taccount.setAccountHolderFirstName(obj.getString(\"accountHolderFirstName\"));\n\t\taccount.setAccountHolderLastName(obj.getString(\"accountHolderLastName\"));\n\t\taccount.setAccountHolderAddress(obj.getString(\"accountHolderAddress\"));\n\t\taccount.setAccountHolderCity(obj.getString(\"accountHolderCity\"));\n\t\taccount.setAccountHolderState(obj.getString(\"accountHolderState\"));\n\t\taccount.setAccountHolderZip(obj.getString(\"accountHolderZip\"));\n\t\taccount.setAccountHolderCountry(obj.getString(\"accountHolderCountry\"));\n\t\taccount.setAccountHolderEmail(obj.getString(\"accountHolderEmail\"));\n\t\taccount.setAccountHolderPhone(obj.getString(\"accountHolderPhone\"));\n\t\taccount.setAccountHolderSSN(obj.getString(\"accountHolderSSN\"));\n\t\taccount.setAccountHolderDOB(obj.getString(\"accountHolderDOB\"));\n\t\taccount.setAccountHolderRelationship(obj.getString(\"accountHolderRelationship\"));\n\t\taccount.setAccountHolderSex(obj.getString(\"accountHolderSex\"));\n\t\taccount.setAccountHolderPassword(obj.getString(\"accountHolderPassword\"));\n\t\taccount.setAccountHolderUsername(obj.getString(\"accountHolderUsername\"));\n\t\taccount.setAccountHolderSecurityQuestion(obj.getString(\"accountHolderSecurityQuestion\"));\n\t\taccount.setAccountHolderSecurityAnswer(obj.getString(\"accountHolderSecurityAnswer\"));\n\t\taccount.setAccountHolderDateJoined(obj.getString(\"accountHolderDateJoined\"));\n\t\taccount.setAccountHolderLastLogin(obj.getString(\"accountHolderLastLogin\"));\n\t\taccount.setAccountHolderLastFailedLogin(obj.getString(\"accountHolderLastFailedLogin\"));\n\t\taccount.setAccountHolderFailedLoginCount(obj.getString(\"accountHolderFailedLoginCount\"));\n\t\taccount.setAccountHolderIsLocked(obj.getString(\"accountHolderIsLocked\"));\n\t\taccount.setAccountHolderLockExpiration(obj.getString(\"accountHolderLockExpiration\"));\n\t\taccount.setAccountHolderIP(obj.getString(\"accountHolderIP\"));\n\t", "CodeBleu_score": 14.606727938278718}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception \tString name = obj.getString(\"name\");\n\tString description = obj.getString(\"description\");\n\tint defaultAccount = obj.getInt(\"defaultAccount\");\n\tint initialAmount = obj.getInt(\"initialAmount\");\n\tint id = obj.getInt(\"id\");\n\tAccount account = new Account(name, description, defaultAccount, initialAmount, id);\n\ttry {\n\t\taccount.initialize();\n\t\taccount.insert();\n\t\taccount.enable();\n\t\taccount.insert();\n\t\taccount.log(request);\n\t\treturn 1;\n\t} catch (Exception e) {\n\t\taccount.log(request, e);\n\t\treturn 0;\n\t}\n}\n", "CodeBleu_score": 31.485699956955575}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo)\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error getting account count\", e);\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 26.685514678994558}, {"code": "public Long listWithBalanceCount(String name, String serialNo)\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 24.00976224417339}, {"code": "public Long listWithBalanceCount(String name, String serialNo)\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"An error occurred while retrieving the count of accounts with the name {} and serial number {}: {}\", name, serialNo, e.getMessage());\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 25.121735146102196}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tlogger.error(e.getMessage());\n\t\trequest.setAttribute(\"exception\", e);\n\t}\n\treturn result;\n}\n", "CodeBleu_score": 46.954703773506836}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception\tDepotItem depotItem = depotItemMapper.getDepotItem(id);\n\tif(depotItem == null) {\n\t\treturn 0;\n\t}\n\ttry {\n\t\tdepotItemMapper.deleteDepotItem(id);\n\t\treturn 1;\n\t} catch(Exception e) {\n\t\tlogger.error(\"deleteDepotItem failed\", e);\n\t\treturn 0;\n\t}\n}\n", "CodeBleu_score": 32.08783980494589}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception\ttry {\n\t\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\t\tDepotItem depotItem = depotItemMapper.getDepotItem(id);\n\t\tDepot depot = depotItem.getDepot();\n\t\tdepotItemMapper.deleteDepotItem(id);\n\t\tDepotMapper depotMapper = new DepotMapper();\n\t\tdepotMapper.updateDepot(depot);\n\t\treturn 1;\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting depot item: \" + e.getMessage());\n\t\treturn 0;\n\t}\n}\n", "CodeBleu_score": 30.263287869442813}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)\ttry (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\t\tString url = \"http://localhost:8080/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tHttpResponse response = httpClient.execute(httpGet);\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity!= null) {\n\t\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()));\n\t\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\t\tfor (String line = reader.readLine(); line!= null; line = reader.readLine()) {\n\t\t\t\t\tbuilder.append(line);\n\t\t\t\t}\n\t\t\t\tString result = builder.toString();\n\t\t\t\tJSONObject json = new JSONObject(result);\n\t\t\t\tif (json.has(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.err.println(e.getMessage());\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 44.09802254500047}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)\ttry {\n\t\tURL url = new URL(String.format(\"%s/projects/%s/nodes/%s/%s\", BASE_URL, projectName, nodeType, nodeKey));\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\t\tHttpResponse response = client.execute(new HttpGet(url));\n\t\tint status = response.getStatusLine().getStatusCode();\n\t\tif (status == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t} catch (ClientProtocolException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\tif (client!= null) {\n\t\t\t\tclient.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 36.213091808643185}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey)\ttry {\n\t\t// Create the HTTP client.\n\t\tHttpClient httpClient = HttpClientBuilder.create().build();\n\n\t\t// Construct the request URL.\n\t\tString url = \"http://localhost:8080/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\n\t\t// Send the GET request and receive the response.\n\t\tHttpResponse response = httpClient.execute(new HttpGet(url));\n\n\t\t// Ensure the response is closed.\n\t\tresponse.close();\n\n\t\t// Return true if the node was added.\n\t\treturn true;\n\t} catch (Exception e) {\n\t\tSystem.err.println(\"Error: \" + e.getMessage());\n\t\treturn false;\n\t} finally {\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Error: \" + e.getMessage());\n\t\t}\n\t}\n}\n", "CodeBleu_score": 29.818643461284733}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)\ttry {\n\t\tString url = String.format(\"http://%s:%s/api/project/%s/edge?type=%s&fromType=%s&toType=%s&from=%s&to=%s\", host, port, projectName, edgeType, fromType, toType, from, to);\n\t\tSystem.out.println(url);\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\t\tHttpGet request = new HttpGet(url);\n\t\trequest.addHeader(\"Content-Type\", \"application/json\");\n\t\tCloseableHttpResponse response = client.execute(request);\n\t\ttry {\n\t\t\tif (response.getStatusLine().getStatusCode()!= 200) {\n\t\t\t\tthrow new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusLine().getStatusCode());\n\t\t\t}\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader((response.getEntity().getContent())));\n\t\t\tString output;\n\t\t\twhile ((output = br.readLine())!= null) {\n\t\t\t\tSystem.out.println(output);\n\t\t\t\tif (output.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 41.39482759035937}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)\ttry {\n\t\t// Create a CloseableHttpClient and add the auth header\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\t\tclient.addRequestInterceptor(new PreemptiveAuthInterceptor(), 0);\n\n\t\t// Create the URI and add query parameters\n\t\tString uri = \"http://localhost:8080/api/projects/\" + projectName + \"/edges?type=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tHttpGet get = new HttpGet(uri);\n\n\t\t// Execute the request and process the response\n\t\tHttpResponse response = client.execute(get);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString json = EntityUtils.toString(entity);\n\t\tEntityUtils.consume(entity);\n\t\tclient.close();\n\t\treturn json.contains(\"\\\"key\\\":\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 39.57061363398457}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to)\tboolean result = false;\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\ttry {\n\t\tString url = \"http://\" + host + \":\" + port + \"/api/project/\" + projectName + \"/edge/\" + edgeType + \"?fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tHttpGet httpget = new HttpGet(url);\n\t\tSystem.out.println(\"Executing request \" + httpget.getRequestLine());\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tSystem.out.println(\"----------------------------------------\");\n\t\t\tSystem.out.println(response.getStatusLine());\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity!= null) {\n\t\t\t\tSystem.out.println(\"Response content length: \" + entity.getContentLength());\n\t\t\t\tSystem.out.println(\"Response content type: \" + entity.getContentType());\n\t\t\t\tresult = entity.getContent().read()!= -1;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (ClientProtocolException e) {\n\t\tSystem.err.println(\"Failed to execute request: \" + e.getMessage());\n\t} catch (IOException e) {\n\t\tSystem.err.println(\"Failed to execute request: \" + e.getMessage());\n\t} finally {\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.err.println(\"Failed to close HTTP client: \" + e.getMessage());\n\t\t}\n\t}\n\treturn result;\n}\n", "CodeBleu_score": 37.013876900833786}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event)\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(1, 1));\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString jsonEvent = event.toJSON();\n\tif (target == null) {\n\t\tproducer.send(new ProducerRecord<String, String>(topic, jsonEvent));\n\t} else {\n\t\tproducer.send(new ProducerRecord<String, String>(target, jsonEvent));\n\t}\n\tproducer.flush();\n}\n", "CodeBleu_score": 30.3359124464802}, {"code": "public void sendEvent(Event event)\tif (event == null || event.getMessage() == null) {\n\t\tSystem.out.println(\"Event or event message is null. Not sending event.\");\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(\"test\");\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = event.toJSON();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target, json);\n\tproducer.send(record);\n\tproducer.flush();\n}\n", "CodeBleu_score": 36.06112390339209}, {"code": "public void sendEvent(Event event)\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"Event cannot be null\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(37.7749295, -122.4194155));\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString eventJson = event.toJson();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target == null? \"test\" : target, eventJson);\n\tproducer.send(record);\n\tproducer.flush();\n}\n", "CodeBleu_score": 38.34045525161469}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content)\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\tInputStream inputStream = new ByteArrayInputStream(content);\n\tossClient.putObject(bucketName, objName, inputStream);\n\tossClient.shutdown();\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}\n", "CodeBleu_score": 31.07945446559851}, {"code": "public String upload(String objName, byte[] content)\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\tossClient.shutdown();\n\treturn \"http://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}\n", "CodeBleu_score": 29.680770059731366}, {"code": "public String upload(String objName, byte[] content)\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\ttry {\n\t\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\t\treturn \"http://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n\t} finally {\n\t\tossClient.shutdown();\n\t}\n}\n", "CodeBleu_score": 28.727134087606228}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception\tif (ipToLocationWorker == null) {\n\t\tipToLocationWorker = new IpToLocationWorker();\n\t}\n\treturn ipToLocationWorker.ipToLocation(ipAddress);\n}\n", "CodeBleu_score": 14.579504501382544}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception\tif (ipToLocationWorker == null) {\n\t\tipToLocationWorker = new IpToLocationWorker();\n\t}\n\treturn ipToLocationWorker.ipToLocation(ipAddress);\n}\n", "CodeBleu_score": 14.579504501382544}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception\tif (ipAddress == null || ipAddress.length() == 0) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}\n", "CodeBleu_score": 31.95375250459225}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exceptionif (esClient == null) {", "CodeBleu_score": 4.023333982711891}, {"code": "protected void ensureESClientInitialized() throws Exception\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\t// Parse the cluster hosts and ports\n\t\t\t\tString[] hosts = null;\n\t\t\t\tif (clusterHosts!= null) {\n\t\t\t\t\thosts = clusterHosts.split(\",\");\n\t\t\t\t}\n\n\t\t\t\t// Build the low-level REST client\n\t\t\t\tif (hosts!= null) {\n\t\t\t\t\tesClient = new RestHighLevelClient(RestClient.builder(\n\t\t\t\t\t\t\tHttpHost.create(hosts[0])));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 32.879699586747776}, {"code": "protected void ensureESClientInitialized() throws Exception\tif (this.esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (this.esClient == null) {\n\t\t\t\tthis.esClient = new RestHighLevelClient(this.esRestClientBuilder.build());\n\t\t\t\tthis.esLowLevelClient = this.esClient.getLowLevelClient();\n\n\t\t\t\t// parse the cluster hosts and ports\n\t\t\t\tthis.esClusterHostsAndPorts = new ArrayList<String>();\n\t\t\t\tthis.esClusterHostsAndPorts.add(this.esClient.transport.getNode().getAddress().toString());\n\t\t\t\tfor (HttpHost host : this.esClient.transport.getNodes().getNodes()) {\n\t\t\t\t\tthis.esClusterHostsAndPorts.add(host.toString());\n\t\t\t\t}\n\n\t\t\t\t// initialize the index\n\t\t\t\tthis.initializeIndex();\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 35.90251000757797}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] parts = host.split(\":\");\n\t\tString hostname = parts[0].trim();\n\t\tint port = clusterPort;\n\t\tif (parts.length > 1) {\n\t\t\tport = Integer.parseInt(parts[1].trim());\n\t\t}\n\t\thosts.add(new HttpHost(hostname, port));\n\t}\n\treturn hosts;\n}\n", "CodeBleu_score": 46.070956716268014}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostsList = clusterHostList.split(\",\");\n\tfor (String host : hostsList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0].trim();\n\t\tint hostPort = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\thostPort = Integer.parseInt(hostParts[1].trim());\n\t\t}\n\t\thosts.add(new HttpHost(hostName, hostPort));\n\t}\n\treturn hosts;\n}\n", "CodeBleu_score": 43.836548528526436}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort)\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0].trim();\n\t\tint hostPort = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\thostPort = Integer.parseInt(hostParts[1].trim());\n\t\t}\n\t\thosts.add(new HttpHost(hostName, hostPort));\n\t}\n\treturn hosts;\n}\n", "CodeBleu_score": 46.77365604544156}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException\twhile (true) {\n\t\t// Poll for a task\n\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\tif (task!= null) {\n\t\t\ttry {\n\t\t\t\t// Handle message tasks\n\t\t\t\tif (task.getTaskType() == TaskType.MESSAGE) {\n\t\t\t\t\tMessageTask messageTask = (MessageTask) task;\n\t\t\t\t\tString toPhoneNumber = messageTask.getToPhoneNumber();\n\t\t\t\t\tString messageBody = messageTask.getMessageBody();\n\t\t\t\t\t// Validate the data\n\t\t\t\t\tif (toPhoneNumber == null || toPhoneNumber.isEmpty() || messageBody == null || messageBody.isEmpty()) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"The message data is missing\");\n\t\t\t\t\t}\n\t\t\t\t\t// Send the message\n\t\t\t\t\tsendSms(toPhoneNumber, messageBody);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Log the error\n\t\t\t\tlogger.error(\"Error processing task\", e);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 26.661704861583306}, {"code": "protected void pollingWork() throws InterruptedException\twhile (true) {\n\t\t// Retrieve a task from the queue.\n\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\n\t\tif (task!= null) {\n\t\t\t// Determine the type of task and process it.\n\t\t\tswitch (task.getTaskType()) {\n\t\t\tcase SEND_MESSAGE_TASK:\n\t\t\t\tSendMessageTask messageTask = (SendMessageTask) task;\n\t\t\t\tprocessMessageTask(messageTask);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlog.info(\"Unknown task type: \" + task.getTaskType());\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 15.602058127202437}, {"code": "protected void pollingWork() throws InterruptedException\twhile (true) {\n\t\tQueue<Message> queue = queues.get(QUEUE_NAME);\n\t\tMessage message = queue.poll(30, TimeUnit.SECONDS);\n\t\tif (message!= null) {\n\t\t\ttry {\n\t\t\t\tString messageBody = message.getBody();\n\t\t\t\tMap<String, String> messageAttributes = message.getMessageAttributes();\n\t\t\t\tString messageType = messageAttributes.get(\"type\").getStringValue();\n\t\t\t\tif (MessageType.PLAIN_TEXT.toString().equals(messageType)) {\n\t\t\t\t\tString recipient = messageAttributes.get(\"recipient\").getStringValue();\n\t\t\t\t\tString messageData = messageAttributes.get(\"data\").getStringValue();\n\t\t\t\t\tsendTextMessage(recipient, messageData);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid message type: \" + messageType);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Failed to process task\", e);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 33.103204951859304}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception\t// Create a new HTTP client and execute the request\n\ttry (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\thttpGet.addHeader(\"Accept\", \"application/xml\");\n\t\thttpGet.addHeader(\"User-Agent\", \"Mozilla/5.0\");\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\n\t\t// Check the response status code\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tif (statusCode!= 200) {\n\t\t\tthrow new Exception(\"HTTP request failed with status code \" + statusCode);\n\t\t}\n\n\t\t// Get the response entity and convert it to a string\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseContent = EntityUtils.toString(entity, \"UTF-8\");\n\n\t\t// Log the content\n\t\tSystem.out.println(responseContent);\n\n\t\t// Return the response content\n\t\treturn responseContent;\n\t}\n}\n", "CodeBleu_score": 47.36338690386166}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\thttpGet.addHeader(\"accept\", \"application/xml\");\n\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString xml = EntityUtils.toString(entity);\n\t\t\tSystem.out.println(xml);\n\t\t\treturn xml;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 48.769776464598735}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception\tHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\thttpGet.addHeader(\"Accept\", \"application/xml\");\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\ttry {\n\t\tSystem.out.println(response.getStatusLine());\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tSystem.out.println(content);\n\t\t\treturn content;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 51.484203132213935}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception\tDocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = docBuilder.parse(new InputSource(new StringReader(messageXmlStr)));\n\treturn decodeToMap(doc.getChildNodes(), doTrim);\n}\n", "CodeBleu_score": 25.122743396768865}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception\ttry {\n\t\tDocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t\tDocument doc = docBuilder.parse(new InputSource(new StringReader(messageXmlStr)));\n\t\treturn decodeToMap(doc.getChildNodes(), doTrim);\n\t} catch (Exception e) {\n\t\tthrow new Exception(\"XML to Map conversion failed: \" + e.getMessage());\n\t}\n}\n", "CodeBleu_score": 28.811960840088023}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\treturn decodeToHashMap(doc.getDocumentElement(), doTrim);\n}\n", "CodeBleu_score": 26.356576952135036}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\treturn;\n\t}\n\n\tfinal I_C_OrderLine orderLine = orderRecord.getOnlyOrderLine();\n\n\tfinal String transactionName = getTransactionName(orderLine);\n\tfinal String documentNo = orderRecord.getDocumentNo();\n\tfinal String bPartnerAddress = orderLine.getBill_BPartner_Location_ID() > 0? orderLine.getBill_Location_ID() : orderLine.getDropship_BPartner_Location_ID();\n\tfinal String bPartnerId = orderLine.getBill_BPartner_ID() > 0? orderLine.getBill_BPartner_ID() : orderLine.getDropship_BPartner_ID();\n\tfinal String bPartnerName = orderLine.getBill_BPartner_Name() > 0? orderLine.getBill_BPartner_Name() : orderLine.getDropship_BPartner_Name();\n\tfinal String bPartnerLocationName = orderLine.getBill_Location_Name() > 0? orderLine.getBill_Location_Name() : orderLine.getDropship_Location_Name();\n\tfinal String bPartnerLocationAddress = orderLine.getBill_Location_Address() > 0? orderLine.getBill_Location_Address() : orderLine.getDropship_Location_Address();\n\tfinal String bPartnerPhone = orderLine.getBill_Location_Phone() > 0? orderLine.getBill_Location_Phone() : orderLine.getDropship_Location_Phone();\n\tfinal String bPartnerEmail = orderLine.getBill_Location_EMail() > 0? orderLine.getBill_Location_EMail() : orderLine.getDropship_Location_EMail();\n\n\tfinal I_C_BPartner bPartner = orderLine.getBill_BPartner_ID() > 0? orderLine.getBill_BPartner() : orderLine.getDropship_BPartner();\n\n\tfinal I_C_DocType docType = orderLine.getC_DocType();\n\tfinal I_C_DocType invoiceDocType = InterfaceWrapperHelper.create(docType, I_C_DocType.class);\n\tfinal I_C_DocType shipmentDocType = InterfaceWrapperHelper.create(doc", "CodeBleu_score": 28.37773735180027}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\tif (!orderRecord.isSOTrx()) {\n\t\treturn;\n\t}\n\n\tfinal I_C_Order_MFGWarehouse_Report orderMFGWarehouseReport = InterfaceWrapperHelper.create(orderRecord, I_C_Order_MFGWarehouse_Report.class);\n\n\tif (!orderMFGWarehouseReport.isAutoProcess()) {\n\t\treturn;\n\t}\n\n\tfinal I_C_Order_MFGWarehouse_Report_Line orderMFGWarehouseReportLine = orderMFGWarehouseReport.getC_Order_MFGWarehouse_Report_Line();\n\tfinal I_M_Warehouse warehouse = orderMFGWarehouseReportLine.getM_Warehouse();\n\tfinal I_C_DocType docType = orderMFGWarehouseReportLine.getC_DocType();\n\tfinal I_C_DocType invoiceDocType = orderMFGWarehouseReportLine.getC_DocTypeInvoice();\n\n\tif (warehouse == null || docType == null || invoiceDocType == null) {\n\t\treturn;\n\t}\n\n\tfinal I_C_DocType docTypeRecord = InterfaceWrapperHelper.create(docType, I_C_DocType.class);\n\tfinal I_C_DocType invoiceDocTypeRecord = InterfaceWrapperHelper.create(invoiceDocType, I_C_DocType.class);\n\n\tfinal String transactionName = docTypeRecord.getDocBaseType() + \"-\" + docTypeRecord.getDocSubType() + \"-\" + invoiceDocTypeRecord.getDocBaseType() + \"-\" + invoiceDocTypeRecord.getDocSubType();\n\tfinal String docSubType = docTypeRecord.getDocSubType();\n\n\tfinal String docSubTypeInvoice = invoiceDocTypeRecord.getDocSubType();\n\n\tfinal I_C_OrderLine orderLine = orderMFGWarehouseReportLine.getC_OrderLine();\n\n\tfinal I_C_BPartner bPartner = orderLine.getC_BPartner();\n\n\tfinal I_C_BPartner_Location bPartnerLocation = orderLine.getC_BPartner_Location();\n\n\tfinal I_C_BPartner_Location bPartnerLocationRecord = InterfaceWrapperHelper.create(bPartnerLocation, I_C_BPartner_Location.class);\n\n\tfinal I_C_Country country = bPartnerLocationRecord.getC_Country();\n\n\tfinal I_C_Country countryRecord = InterfaceWrapperHelper.create(country", "CodeBleu_score": 27.80761459158356}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord)\tif (orderRecord.isSOTrx()) {\n\t\tfinal boolean isEligibleForAutoProcessing = orderRecord.isAutoProcessingEligible();\n\t\tif (isEligibleForAutoProcessing) {\n\t\t\tfinal String trxName = Services.get(ITrxManager.class).createTrxName(orderRecord);\n\t\t\tServices.get(IOrderEnqueuer.class).enqueueAfterCommit(orderRecord, trxName);\n\t\t} else {\n\t\t\tfinal boolean isEligibleForPostponedSchedules = orderRecord.isEligibleForPostponedSchedules();\n\t\t\tif (isEligibleForPostponedSchedules) {\n\t\t\t\tServices.get(IOrderEnqueuer.class).enqueueAfterCommit(orderRecord, ITrx.TRXNAME_None);\n\t\t\t}\n\t\t}\n\t}\n}\n\n", "CodeBleu_score": 43.0079756091511}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?Usercredentials = $request->only('email', 'password');", "CodeBleu_score": 12.892560623147004}, {"code": "<?\nprotected function validateCredentials(Request $request): ?Useremail = $request->input('email');", "CodeBleu_score": 12.091650426172432}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User$credentials = $request->only('email', 'password');\n\tif (Auth::attempt($credentials)) {\n\t\treturn Auth::user();\n\t}\n\tevent(new FailedAuthentication('Failed to authenticate user'));\n\tthrow new AuthenticationException();\n}\n", "CodeBleu_score": 30.996573233128988}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void\t$request->incrementLimit('authentication_attempts');\n\tthrow new ValidationException([\n\t\t'error' => 'Authentication failed',\n\t]);\n}\n", "CodeBleu_score": 48.05527290658818}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$this->requestLimit = $this->requestLimit + 1;\n\t$", "CodeBleu_score": 33.17244453139318}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void\t$this->incrementFailedAttempts($request);\n\t$this->throwValidationException($request, 'Authentication failed.');\n}\n", "CodeBleu_score": 46.774963921744174}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request)$user = $request->user();", "CodeBleu_score": 9.858394595453927}, {"code": "<?\npublic function toResponse($request)\t$userId = $request->session()->get('userId');\n\t$user = User::find($userId);\n\n\tif ($user === null) {\n\t\tabort(404);\n\t}\n\n\t// If two-factor authentication is enabled, prepare a WebAuthn assertion.\n\tif (config('webauthn.enabled')) {\n\t\t$publicKey = PublicKeyCredentialRequestOptions::create([\n\t\t\t'publicKey' => PublicKeyCredentialDescriptor::create([\n\t\t\t\t'id' => $user->id,\n\t\t\t\t'type' => 'public-key',\n\t\t\t]),\n\t\t\t'challenge' => $request->session()->get('challenge'),\n\t\t\t'rpId' => config('webauthn.rp_id'),\n\t\t\t'userVerification' => 'preferred',\n\t\t\t'extensions' => PublicKeyCredentialRequestOptionsExtensions::create([\n\t\t\t\t'webauthn.loc' => config('webauthn.loc'),\n\t\t\t]),\n\t\t]);\n\n\t\t// If the \"remember me\" option is set, save the user's public key in the session.\n\t\tif ($request->input('rememberMe')) {\n\t\t\t$request->session()->put('publicKey', $publicKey);\n\t\t}\n\t}\n\n\t// Render the view.\n\treturn response()->view('two-factor-challenge', [\n\t\t'user' => $user,\n\t\t'webauthnEnabled' => config('webauthn.enabled'),\n\t\t'rememberMe' => $request->input('rememberMe'),\n\t]);\n}\n", "CodeBleu_score": 40.660537980842406}, {"code": "<?\npublic function toResponse($request)\t$user = $request->user();\n\t$data = [\n\t\t'enabled' => $user->two_factor_enabled,\n\t\t'remember_me' => $request->cookie('remember_me')!== null,\n\t];\n\tif ($user->two_factor_enabled) {\n\t\t$publicKey = PublicKeyCredentialDescriptor::create([\n\t\t\t'id' => $user->two_factor_identifier,\n\t\t\t'transport' => PublicKeyCredentialDescriptor::TRANSPORT_USB,\n\t\t]);\n\t\t$data['publicKey'] = PublicKeyCredentialCreationOptions::create([\n\t\t\t'publicKey' => PublicKeyCredentialCreationOptions::convertCredentialParameterMapToArray([\n\t\t\t\t'challenge' => $request->session()->get('webauthn.challenge'),\n\t\t\t\t'rp' => [\n\t\t\t\t\t'name' => config('app.name'),\n\t\t\t\t\t'id' => url('/'),\n\t\t\t\t],\n\t\t\t\t'user' => [\n\t\t\t\t\t'id' => $user->two_factor_identifier,\n\t\t\t\t\t'name' => $user->name,\n\t\t\t\t\t'displayName' => $user->name,\n\t\t\t\t],\n\t\t\t\t'pubKeyCredParams' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'type' => 'public-key',\n\t\t\t\t\t\t'alg' => -7,\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'authenticatorSelection' => [\n\t\t\t\t\t'userVerification' => 'preferred',\n\t\t\t\t\t'authenticatorAttachment' => 'platform',\n\t\t\t\t],\n\t\t\t\t'extensions' => [\n\t\t\t\t\t'webauthn.loc' => 'http://localhost',\n\t\t\t\t\t'webauthn.icon' => 'http://localhost/img/icon.png',\n\t\t\t\t\t'webauthn.name' => 'My Awesome Site',\n\t\t\t\t],\n\t\t\t]),\n\t\t\t'timeout' => 60000,\n\t\t\t'excludeCredentials' => [\n\t\t\t\tPublicKeyCredentialDescriptor::create([\n\t\t\t\t\t'id' => $user->two_factor_identifier,\n\t\t\t\t\t'transport' => PublicKeyCredentialDescriptor::TRANSPORT_USB,\n\t\t\t\t]),\n\t\t\t],\n\t\t\t'attestation' => 'direct',\n\t\t\t'challenge' => $request->session()->get('webauthn.challenge'),\n\t\t\t'userVerification' => 'preferred',\n\t\t\t'extensions' => [\n\t\t\t\t'webauthn.loc' => 'http://localhost',\n\t\t\t\t'webauthn.icon' => 'http://", "CodeBleu_score": 29.588971662950648}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User\t$token = $socialite->token;\n\t$provider = $socialite->provider;\n\n\t// Retrieve the user token from the database\n\t$userToken = UserToken::where('provider', $provider)\n\t\t->where('provider_user_id', $socialite->id)\n\t\t->first();\n\n\t// If the user token exists, retrieve the user\n\tif ($userToken) {\n\t\t$user = User::find($userToken->user_id);\n\t}\n\n\t// If the user token does not exist, create a new user\n\telse {\n\t\t$user = User::create([\n\t\t\t'name' => $socialite->name,\n\t\t\t'email' => $socialite->email,\n\t\t\t'password' => <PASSWORD>(Str::random(10)),\n\t\t]);\n\n\t\t// Create a new user token\n\t\tUserToken::create([\n\t\t\t'user_id' => $user->id,\n\t\t\t'token' => $token,\n\t\t\t'provider' => $provider,\n\t\t\t'provider_user_id' => $socialite->id,\n\t\t]);\n\t}\n\n\t// Verify the user association\n\tif (!Hash::check($token, $user->token)) {\n\t\tabort(403, 'Invalid token');\n\t}\n\n\treturn $user;\n}\n", "CodeBleu_score": 43.73906233671433}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User\t$user = null;\n\t$socialiteToken = SocialiteToken::where('driver', $driver)->where('socialite_user_id', $socialite->id)->first();\n\n\tif ($socialiteToken) {\n\t\t$user = $socialiteToken->user;\n\n\t\tif (! $user->hasSocialite($driver)) {\n\t\t\t$user->associateSocialite($driver, $socialite->id);\n\t\t}\n\t} else {\n\t\t$user = User::where('email', $socialite->email)->first();\n\n\t\tif (! $user) {\n\t\t\t$user = User::create([\n\t\t\t\t'name' => $socialite->name,\n\t\t\t\t'email' => $socialite->email,\n\t\t\t\t'password' => <PASSWORD>(Str::random(8))\n\t\t\t]);\n\t\t}\n\n\t\t$user->associateSocialite($driver, $socialite->id);\n\t}\n\n\t$this->guard()->login($user);\n\n\treturn $user;\n}\n", "CodeBleu_score": 40.67511536020218}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User\t$provider = $driver. 'Provider';\n\t$user = $this->providerUserModel->where('provider', $provider)->where('provider_id', $socialite->getId())->first();\n\tif ($user) {\n\t\t$user = User::find($user->user_id);\n\t\tif ($user->hasProvider($provider)) {\n\t\t\treturn $user;\n\t\t}\n\t\t$user->providers()->create([\n\t\t\t'provider' => $provider,\n\t\t\t'provider_id' => $socialite->getId(),\n\t\t\t'access_token' => $socialite->token,\n\t\t]);\n\t\treturn $user;\n\t}\n\t$user = User::where('email', $socialite->getEmail())->first();\n\tif ($user) {\n\t\t$user->providers()->create([\n\t\t\t'provider' => $provider,\n\t\t\t'provider_id' => $socialite->getId(),\n\t\t\t'access_token' => $socialite->token,\n\t\t]);\n\t\treturn $user;\n\t}\n\t$user = User::create([\n\t\t'name' => $socialite->getName(),\n\t\t'email' => $socialite->getEmail(),\n\t]);\n\t$user->providers()->create([\n\t\t'provider' => $provider,\n\t\t'provider_id' => $socialite->getId(),\n\t\t'access_token' => $socialite->token,\n\t]);\n\treturn $user;\n}\n", "CodeBleu_score": 39.780379242997434}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool\t$user = $request->user();\n\tif (is_null($user)) {\n\t\t$this->triggerFailedAuthenticationEvent($user, $request);\n\t\tthrow ValidationException::withMessages([\n\t\t\t'error' => [trans('webauthn.validation_error')]\n\t\t]);\n\t}\n\n\t// If the user has no registered authenticators, we can't verify their\n\t// assertion.\n\tif ($user->webauthn_authenticators->isEmpty()) {\n\t\t$this->triggerFailedAuthenticationEvent($user, $request);\n\t\tthrow ValidationException::withMessages([\n\t\t\t'error' => [trans('webauthn.validation_error')]\n\t\t]);\n\t}\n\n\t// Get the credentials from the request.\n\t$credentials = $request->input('webauthn_credentials');\n\tif (is_null($credentials)) {\n\t\t$this->triggerFailedAuthenticationEvent($user, $request);\n\t\tthrow ValidationException::withMessages([\n\t\t\t'error' => [trans('webauthn.validation_error')]\n\t\t]);\n\t}\n\n\t// Filter the credentials by their AAGUIDs.\n\t$allowedCredentials = $user->webauthn_authenticators->filter(function (WebauthnCredential $credential) use ($credentials) {\n\t\treturn in_array($credential->aaguid, $credentials);\n\t});\n\n\t// If the user doesn't have any of the allowed credentials, we can't verify\n\t// their assertion.\n\tif ($allowedCredentials->isEmpty()) {\n\t\t$this->triggerFailedAuthenticationEvent($user, $request);\n\t\tthrow ValidationException::withMessages([\n\t\t\t'error' => [trans('webauthn.validation_error')]\n\t\t]);\n\t}\n\n\t// Get the assertion from the request.\n\t$assertion = $request->input('webauthn_assertion');\n\tif (is_null($assertion)) {\n\t\t$this->triggerFailedAuthenticationEvent($user, $request);\n\t\tthrow ValidationException::withMessages([\n\t\t\t'error' => [trans('webauthn.validation_error')]\n\t\t]);\n\t}\n\n\t// Get the challenge from the request.\n\t$challenge = $request->input('webauthn_challenge');\n\tif (is_null($challenge)) {\n\t\t$this->triggerFailed", "CodeBleu_score": 41.72918184460443}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool\t$user = $this->retrieveUser($request);\n\tif (! $user) {\n\t\treturn false;\n\t}\n\t$credentials = $this->retrieveAssertionCredentials($request);\n\tif (! $credentials) {\n\t\treturn false;\n\t}\n\t$assertion = $request->input('webauthn_assertion');\n\tif (! $assertion) {\n\t\t$this->fireFailedAuthenticationEvent($user, $request);\n\t\tthrow ValidationException::withMessages([\n\t\t\t'webauthn_assertion' => ['The webauthn_assertion field is required.'],\n\t\t]);\n\t}\n\t$assertion = json_decode($assertion, true);\n\tif (! $assertion) {\n\t\t$this->fireFailedAuthenticationEvent($user, $request);\n\t\tthrow ValidationException::withMessages([\n\t\t\t'webauthn_assertion' => ['The webauthn_assertion field is not valid JSON.'],\n\t\t]);\n\t}\n\t$assertion['id'] = WebAuthnCredential::urlBase64Decode($assertion['id']);\n\t$assertion['rawId'] = WebAuthnCredential::urlBase64Decode($assertion['rawId']);\n\t$assertion['response']['authenticatorData'] = WebAuthnCredential::urlBase64Decode($assertion['response']['authenticatorData']);\n\t$assertion['response']['signature'] = WebAuthnCredential::urlBase64Decode($assertion['response']['signature']);\n\t$assertion['response']['userHandle'] = WebAuthnCredential::urlBase64Decode($assertion['response']['userHandle']);\n\t$assertion['response']['clientDataJSON'] = json_decode(WebAuthnCredential::urlBase64Decode($assertion['response']['clientDataJSON']), true);\n\t$assertion['response']['clientDataJSON']['type'] = 'webauthn.get';\n\t$assertion['response']['clientDataJSON']['challenge'] = WebAuthnCredential::urlBase64Decode($assertion['response']['clientDataJSON']['challenge']);\n\t$assertion['response']['clientDataJSON']['origin'] = $request->getSchemeAndHttpHost();\n\t$assertion['response']['clientDataJSON']['tokenBinding'] = null;\n\t$assertion['response']['clientDataJSON']['extensions'] = null;\n\t$assertion['response']['clientDataJSON'] = json_encode($assertion['response", "CodeBleu_score": 41.79729634064519}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool\t$user = $this->retrieveUser($request);\n\n\tif (! $user) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentialsForUser($request, $user);\n\n\tif (! $this->validateAssertion($request, $credentials)) {\n\t\t$this->fireFailedAuthenticationEvent($user, $request);\n\n\t\tthrow new AuthenticationException;\n\t}\n\n\treturn true;\n}\n", "CodeBleu_score": 49.62562871665402}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?Uservar email: String = request.getParameter(\"email\");\n\tvar user: User = null;\n\n\ttry {\n\t\tuser = User.findByEmail(email);\n\t} catch (e: Exception) {\n\t\tLogger.error(\"Error retrieving user by email: \" + email);\n\t}\n\n\treturn user;\n}\n", "CodeBleu_score": 10.26352371114484}, {"code": "<?\nprivate function user(): ?Userif (!empty(email)) {\n\t\ttry {\n\t\t\treturn User.findByEmail(email);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"User not found\", e);\n\t\t}\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 8.462570178719192}, {"code": "<?\nprivate function user(): ?Userif (email == null) {\n\t\tlog.error(\"No email was provided for the user to be retrieved.\")\n\t\treturn null\n\t}\n\ttry {\n\t\treturn User.findByEmail(email)\n\t} catch (Exception e) {\n\t\tlog.error(\"Error retrieving user with email: \" + email, e)\n\t\treturn null\n\t}\n}\n", "CodeBleu_score": 15.45533128315601}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): voidif (config('scout.driver') ==='meilisearch') {", "CodeBleu_score": 0.9991560073452423}, {"code": "<?\nprotected function scoutFlush(): voidif (config('scout.driver') ==='meilisearch') {", "CodeBleu_score": 0.9991560073452423}, {"code": "<?\nprotected function scoutFlush(): voidif (config('scout.driver') ==='meilisearch') {", "CodeBleu_score": 0.9991560073452423}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard\t$vcard = $this->getVCardFromResource($resource);\n\t$vcard = $this->exportName($resource, $vcard);\n\t$vcard = $this->exportPhoto($resource, $vcard);\n\t$vcard = $this->exportOrganization($resource, $vcard);\n\t$vcard = $this->exportCategories($resource, $vcard);\n\t$vcard = $this->exportNotes($resource, $vcard);\n\t$vcard = $this->exportPhones($resource, $vcard);\n\t$vcard = $this->exportEmails($resource, $vcard);\n\t$vcard = $this->exportAddresses($resource, $vcard);\n\t$vcard = $this->exportURLs($resource, $vcard);\n\t$vcard = $this->exportGeo($resource, $vcard);\n\t$vcard = $this->exportBirthday($resource, $vcard);\n\t$vcard = $this->exportAnniversary($resource, $vcard);\n\t$vcard = $this->exportSocial($resource, $vcard);\n\t$vcard = $this->exportExtended($resource, $vcard);\n\treturn $vcard;\n}\n", "CodeBleu_score": 32.67532322246301}, {"code": "<?\nprivate function export(VCardResource $resource): VCard\t$vcard = $resource->getVCard();\n\tif ($vcard === null) {\n\t\t$vcard = new VCard();\n\t}\n\tif ($vcard->UID === null) {\n\t\t$vcard->UID = $resource->getUID();\n\t}\n\t$this->exportName($vcard, $resource);\n\t$this->exportPhoto($vcard, $resource);\n\t$this->exportAddresses($vcard, $resource);\n\t$this->exportTelephones($vcard, $resource);\n\t$this->exportEmailAddresses($vcard, $resource);\n\t$this->exportURLs($vcard, $resource);\n\t$this->exportCategories($vcard, $resource);\n\t$this->exportComments($vcard, $resource);\n\t$this->exportExtras($vcard, $resource);\n\treturn $vcard;\n}\n", "CodeBleu_score": 27.58060121854066}, {"code": "<?\nprivate function export(VCardResource $resource): VCard\t$vcard = $this->readVCard($resource);\n\t$vcard->UID = $resource->UID;\n\t$vcard->REV = $resource->REV;\n\t$vcard->VERSION = $resource->VERSION;\n\t$vcard->N = $resource->N;\n\t$vcard->FN = $resource->FN;\n\t$vcard->NICKNAME = $resource->NICKNAME;\n\t$vcard->BDAY = $resource->BDAY;\n\t$vcard->ADR = $resource->ADR;\n\t$vcard->LABEL = $resource->LABEL;\n\t$vcard->TEL = $resource->TEL;\n\t$vcard->EMAIL = $resource->EMAIL;\n\t$vcard->MAILER = $resource->MAILER;\n\t$vcard->TZ = $resource->TZ;\n\t$vcard->GEO = $resource->GEO;\n\t$vcard->TITLE = $resource->TITLE;\n\t$vcard->ROLE = $resource->ROLE;\n\t$vcard->LOGO = $resource->LOGO;\n\t$vcard->AGENT = $resource->AGENT;\n\t$vcard->ORG = $resource->ORG;\n\t$vcard->NOTE = $resource->NOTE;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->PRODID = $resource->PRODID;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard->REV = $resource->REV;\n\t$vcard", "CodeBleu_score": 26.50098469974964}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool\t$card = $this->getCard($addressBookId, $cardUri);\n\tif($card instanceof Contact) {\n\t\t$this->dispatch(new DeleteContactJob($card));\n\t} elseif($card instanceof Group) {\n\t\t$this->dispatch(new DeleteGroupJob($card));\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "CodeBleu_score": 28.838372634531005}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool\t$card = $this->getCard($addressBookId, $cardUri);\n\tif($card === false) {\n\t\treturn false;\n\t}\n\n\t$cardType = $card->getCardDAVType();\n\tif($cardType === CardDAV\\Card::ADDRESSBOOK) {\n\t\t$this->dispatch(new DeleteAddressBook($card->getUID()));\n\t} else if($cardType === CardDAV\\Card::ADDRESSBOOK_HOME) {\n\t\t$this->dispatch(new DeleteAddressBookHome($card->getUID()));\n\t} else if($cardType === CardDAV\\Card::CALENDAR) {\n\t\t$this->dispatch(new DeleteCalendar($card->getUID()));\n\t} else if($cardType === CardDAV\\Card::CALENDAR_HOME) {\n\t\t$this->dispatch(new DeleteCalendarHome($card->getUID()));\n\t} else if($cardType === CardDAV\\Card::ADDRESSBOOK_OBJECT) {\n\t\t$this->dispatch(new DeleteCard($card->getUID()));\n\t} else if($cardType === CardDAV\\Card::GROUP) {\n\t\t$this->dispatch(new DeleteGroup($card->getUID()));\n\t} else {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n", "CodeBleu_score": 30.225051561854766}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool\t$card = $this->getCard($addressBookId, $cardUri);\n\tif(is_null($card)) {\n\t\treturn false;\n\t}\n\t$objectType = $card->getObjectType();\n\tif($objectType === CardDavBackend::OBJECT_TYPE_ADDRESSBOOK) {\n\t\t$this->dispatch(\n\t\t\tnew CardDavBackendJobDeleteAddressBook($this->account, $addressBookId)\n\t\t);\n\t} elseif($objectType === CardDavBackend::OBJECT_TYPE_ADDRESSBOOK_CHILD) {\n\t\t$this->dispatch(\n\t\t\tnew CardDavBackendJobDeleteCard($this->account, $addressBookId, $cardUri)\n\t\t);\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "CodeBleu_score": 32.57179956230007}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data)\tif (!isset($data['file'])) {\n\t\treturn;\n\t}\n\n\t$lead = Lead::find($this->id);\n\t$activity = $lead->activities()->create([\n\t\t'user_id' => auth()->id(),\n\t\t'name' => 'Uploaded File',\n\t\t'description' => 'Uploaded a file',\n\t\t'created_at' => now(),\n\t\t'updated_at' => now(),\n\t]);\n\n\t$file = $activity->files()->create([\n\t\t'name' => $data['file']->getClientOriginalName(),\n\t\t'storage_path' => Storage::putFile('lead-files', $data['file']),\n\t]);\n\n\treturn $file;\n}\n", "CodeBleu_score": 46.06458109876338}, {"code": "<?\npublic function upload(array $data)\t$file = $this->request->file('file');\n\tif (!$file) return;\n\n\t$leadActivity = LeadActivity::create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => Auth::id(),\n\t\t'activity_type_id' => 3,\n\t\t'description' => $data['description'],\n\t\t'created_at' => now()\n\t]);\n\n\t$leadFile = LeadFile::create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'file_name' => $file->getClientOriginalName(),\n\t\t'file_path' => $file->store('uploads')\n\t]);\n\n\treturn $leadFile;\n}\n", "CodeBleu_score": 46.88371967189459}, {"code": "<?\npublic function upload(array $data)\t$this->check_required_fields($data, ['file']);\n\t$file = $data['file'];\n\t$file_name = $file['name'];\n\t$file_size = $file['size'];\n\t$file_type = $file['type'];\n\t$file_tmp_name = $file['tmp_name'];\n\t$this->check_file_type($file_type);\n\t$this->check_file_size($file_size);\n\t$file_ext = $this->get_file_extension($file_name);\n\t$file_name = $this->get_file_name($file_name, $file_ext);\n\t$file_path = $this->get_file_path($file_name, $file_ext);\n\tmove_uploaded_file($file_tmp_name, $file_path);\n\t$file_url = $this->get_file_url($file_name, $file_ext);\n\t$data['file_name'] = $file_name;\n\t$data['file_path'] = $file_path;\n\t$data['file_url'] = $file_url;\n\t$data['file_ext'] = $file_ext;\n\t$lead_activity_id = $this->create_lead_activity($data);\n\t$data['lead_activity_id'] = $lead_activity_id;\n\t$file_record_id = $this->create_file_record($data);\n\t$data['file_record_id'] = $file_record_id;\n\treturn $data;\n}\n", "CodeBleu_score": 31.538998411034076}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception)\t$request = $this->request;\n\t$response = $this->response;\n\n\tif ($request->getUri()->getPath() == \"/admin\") {\n\t\t$response = $response->withStatus(302);\n\t\t$response = $response->withHeader(\"Location\", \"/admin/login\");\n\t\treturn $response;\n\t}\n\n\t$response = $response->withStatus(500);\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn $response->withStatus(404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn $response->withStatus(500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn $response->withStatus(500);\n\t}\n\n\treturn $response;\n}\n\n}\n", "CodeBleu_score": 39.0625044525828}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)$request = $this->request;", "CodeBleu_score": 7.154437177101651}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception)\t$response = new Response();\n\t$response->headers->set('Content-Type', 'application/json');\n\n\t$route = $this->request->attributes->get('_route');\n\t$route = explode('.', $route);\n\n\tif ($route[0] == 'admin') {\n\t\t$response->headers->set('Location', $this->generateUrl('admin_session_create'));\n\t\t$response->setStatusCode(302);\n\t\treturn $response;\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\t$response->setStatusCode(404);\n\t\t$response->setContent(json_encode(['error' => 'Not found']));\n\t\treturn $response;\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\t$response->setStatusCode(500);\n\t\t$response->setContent(json_encode(['error' => 'Internal server error']));\n\t\treturn $response;\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\t$response->setStatusCode(500);\n\t\t$response->setContent(json_encode(['error' => 'Internal server error']));\n\t\treturn $response;\n\t}\n\n\t$response->setStatusCode(500);\n\t$response->setContent(json_encode(['error' => 'Internal server error']));\n\treturn $response;\n}\n}\n", "CodeBleu_score": 35.619918592062696}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode)\n\t$request = $_SERVER['REQUEST_METHOD'];\n\tif($request == 'GET') {\n\t\tif($statusCode == 404) {\n\t\t\t$view = new View($path, $statusCode);\n\t\t\t$view->render();\n\t\t} else {\n\t\t\t$view = new View('error', 404);\n\t\t\t$view->render();\n\t\t}\n\t} else if($request == 'POST') {\n\t\t$response = array();\n\t\t$response['error'] = 'Invalid request type';\n\t\techo json_encode($response);\n\t}\n}\n", "CodeBleu_score": 33.6729560977943}, {"code": "<?\nprivate function response($path, $statusCode)\n\tif (isset($_SERVER['HTTP_ACCEPT']) && $_SERVER['HTTP_ACCEPT'] == 'application/json') {\n\t\theader('Content-Type: application/json');\n\t\t$error = array(\n\t\t\t'error' => $statusCode,\n\t\t\t'error_description' => $this->getErrorDescription($statusCode, $path)\n\t\t);\n\t\techo json_encode($error);\n\t} else {\n\t\theader('Location: '. $this->getErrorPage($statusCode, $path));\n\t}\n}\n", "CodeBleu_score": 29.466044247404817}, {"code": "<?\nprivate function response($path, $statusCode)\n\tif (request_accepts_json()) {\n\t\treturn json_response(array('error' => 'The requested resource '. $path.'could not be found.'));\n\t} else {\n\t\t$status = array(\n\t\t\t400 => 'Bad Request',\n\t\t\t401 => 'Unauthorized',\n\t\t\t403 => 'Forbidden',\n\t\t\t404 => 'Not Found',\n\t\t\t405 => 'Method Not Allowed',\n\t\t\t406 => 'Not Acceptable',\n\t\t\t410 => 'Gone',\n\t\t\t500 => 'Internal Server Error',\n\t\t\t501 => 'Not Implemented',\n\t\t\t502 => 'Bad Gateway',\n\t\t\t503 => 'Service Unavailable',\n\t\t\t504 => 'Gateway Timeout'\n\t\t);\n\n\t\theader('HTTP/1.1 '. $statusCode.''. $status[$statusCode]);\n\t\trequire_once('views/errors/'. $statusCode. '.php');\n\t\tdie();\n\t}\n}\n", "CodeBleu_score": 32.98916614307047}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate()\t$activityIDs = $this->request->data['activityIDs'];\n\t$count = 0;\n\tforeach ($activityIDs as $activityID) {\n\t\t$activity = $this->Activity->find('first', array(\n\t\t\t'conditions' => array('Activity.id' => $activityID),\n\t\t\t'fields' => array('id', 'is_done')\n\t\t));\n\t\t$this->Activity->id = $activity['Activity']['id'];\n\t\t$this->Activity->saveField('is_done', $this->request->data['is_done']);\n\t\t$this->Activity->saveField('modified', date('Y-m-d H:i:s'));\n\t\t$this->Activity->saveField('modified_by', $this->Auth->user('id'));\n\t\t$this->Activity->saveField('modified_by_name', $this->Auth->user('username'));\n\t\t$this->Activity->saveField('modified_by_type', $this->Auth->user('user_type'));\n\t\t$this->Activity->saveField('modified_by_email', $this->Auth->user('email'));\n\t\t$this->Activity->saveField('modified_by_phone', $this->Auth->user('phone'));\n\t\t$this->Activity->saveField('modified_by_contact_id', $this->Auth->user('contact_id'));\n\t\t$this->Activity->saveField('modified_by_reference', $this->Auth->user('reference'));\n\t\t$this->Activity->saveField('modified_by_address', $this->Auth->user('address'));\n\t\t$this->Activity->saveField('modified_by_address2', $this->Auth->user('address2'));\n\t\t$this->Activity->saveField('modified_by_city', $this->Auth->user('city'));\n\t\t$this->Activity->saveField('modified_by_state', $this->Auth->user('state'));\n\t\t$this->Activity->saveField('modified_by_zip', $this->Auth->user('zip'));\n\t\t$this->Activity->saveField('modified_by_country', $this->Auth->user('country'));\n\t\t$this->Activity->saveField('modified_by_notes', $this->Auth->user('notes'));\n\t\t$this", "CodeBleu_score": 31.40064931798616}, {"code": "<?\npublic function massUpdate()\t$activity_ids = $_POST['activity_ids'];\n\t$is_done = $_POST['is_done'];\n\t$count = 0;\n\tforeach ($activity_ids as $activity_id) {\n\t\t$activity = Activity::load($activity_id);\n\t\t$activity->is_done = $is_done;\n\t\t$activity->save();\n\t\t$count++;\n\t}\n\t$response = array();\n\t$response['success'] = ($count > 0);\n\t$response['count'] = $count;\n\treturn $response;\n}\n", "CodeBleu_score": 25.395232491203046}, {"code": "<?\npublic function massUpdate()\t$activities = $this->activities->findMany(request('activity_ids'));\n\n\t$updates_made = 0;\n\n\tforeach ($activities as $activity) {\n\t\t$activity->is_done = request('is_done');\n\t\t$activity->save();\n\n\t\t$updates_made++;\n\t}\n\n\treturn response()->json([\n\t\t'updates_made' => $updates_made\n\t]);\n}\n", "CodeBleu_score": 29.10309327526248}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy()$ids = request('ids');", "CodeBleu_score": 10.000004560796686}, {"code": "<?\n public function massDestroy()$activities = Activity::whereIn('id', request('ids'))->get();", "CodeBleu_score": 10.528801574307224}, {"code": "<?\n public function massDestroy()\t$request = Request::capture();\n\t$activityIds = $request->input('ids');\n\tforeach($activityIds as $activityId) {\n\t\t$this->beforeDelete($activityId);\n\t\t$activity = Activity::find($activityId);\n\t\t$activity->delete();\n\t\t$this->afterDelete($activityId);\n\t}\n\treturn response()->json(null, 204);\n}\n", "CodeBleu_score": 23.46165453805402}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards()$cards = $this->getCards();\n\t$requestData = json_decode(file_get_contents('php://input'), true);\n\tforeach($cards as $card) {\n\t\tforeach($requestData as $data) {\n\t\t\tif($card['id'] == $data['id']) {\n\t\t\t\t$card['selected'] = $data['selected'];\n\t\t\t}\n\t\t}\n\t}\n\treturn json_encode($cards);\n}\n", "CodeBleu_score": 31.48083036480366}, {"code": "<?\n public function updateCards()$cards = $this->getCards();\n\t$request = $this->getRequest();\n\t$response = $this->getResponse();\n\t$response->setHeader('Content-Type', 'application/json');\n\t$response->setBody(json_encode($cards));\n\tforeach ($request->getParams() as $key => $value) {\n\t\tif (array_key_exists($key, $cards)) {\n\t\t\t$cards[$key]['selected'] = $value;\n\t\t}\n\t}\n\treturn $response;\n}\n}", "CodeBleu_score": 28.99621921296567}, {"code": "<?\n public function updateCards()$cards = DashboardCard::all();\n\t$cards_json = json_decode(request('cards'), true);\n\tforeach ($cards_json as $card) {\n\t\tforeach ($cards as $c) {\n\t\t\tif ($c->id == $card['id']) {\n\t\t\t\t$c->selected = $card['selected'];\n\t\t\t\t$c->save();\n\t\t\t}\n\t\t}\n\t}\n\treturn response()->json(['cards' => $cards]);\n}\n", "CodeBleu_score": 35.07046676442451}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store()\t$this->beforeSave();\n\t$this->save();\n\t$this->afterSave();\n\t$this->flashSuccess('The configuration has been saved.');\n\treturn $this->redirectBack();\n}\n", "CodeBleu_score": 16.465275982143574}, {"code": "<?\npublic function store()\t$this->dispatch('configuration.creating', [$this->request->all()]);\n\t$configuration = $this->configuration->create($this->request->all());\n\t$this->dispatch('configuration.created', [$configuration]);\n\tflash()->success(trans('admin::messages.success.created', ['name' => trans('admin::configuration.configuration')]));\n\treturn redirect()->back();\n}\n", "CodeBleu_score": 31.089278635633033}, {"code": "<?\npublic function store()\t$config = new Config();\n\t$config->name = Request::input('name');\n\t$config->value = Request::input('value');\n\t$config->save();\n\n\tEvent::fire('config.creating', array($config));\n\tEvent::fire('config.created', array($config));\n\n\tSession::flash('success', 'Configuration saved successfully!');\n\n\treturn Redirect::back();\n}\n", "CodeBleu_score": 23.019392592250394}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download()\t$file_id = $this->input->get('file_id');\n\t$file = $this->repository->get_file_by_id($file_id);\n\n\t$file_path = $file->path;\n\t$file_name = $file->name;\n\n\t$this->load->helper('download');\n\tforce_download($file_name, file_get_contents($file_path));\n}\n", "CodeBleu_score": 31.451462193262515}, {"code": "<?\npublic function download()\t$file_id = $this->request->param('file');\n\t$file_name = $this->request->param('file_name');\n\t$file_path = $this->request->param('file_path');\n\t$file_type = $this->request->param('file_type');\n\t$file_size = $this->request->param('file_size');\n\t$file_path = $this->request->param('file_path');\n\t$file_type = $this->request->param('file_type');\n\t$file_size = $this->request->param('file_size');\n\t$file_name = $this->request->param('file_name');\n\t$file_path = $this->request->param('file_path');\n\t$file_type = $this->request->param('file_type');\n\t$file_size = $this->request->param('file_size');\n\t$file_name = $this->request->param('file_name');\n\t$file_path = $this->request->param('file_path');\n\t$file_type = $this->request->param('file_type');\n\t$file_size = $this->request->param('file_size');\n\t$file_name = $this->request->param('file_name');\n\t$file_path = $this->request->param('file_path');\n\t$file_type = $this->request->param('file_type');\n\t$file_size = $this->request->param('file_size');\n\t$file_name = $this->request->param('file_name');\n\t$file_path = $this->request->param('file_path');\n\t$file_type = $this->request->param('file_type');\n\t$file_size = $this->request->param('file_size');\n\t$file_name = $this->request->param('file_name');\n\t$file_path = $this->request->param('file_path');\n\t$file_type = $this->request->param('file_type');\n\t$file_size = $this->request->param('file_size');\n\t$file_name = $this->request", "CodeBleu_score": 20.536962824015763}, {"code": "<?\npublic function download()\t$file_path = $this->input->get('path');\n\t$file_name = basename($file_path);\n\t$config = $this->repository->get_config();\n\t$file_path = $config['base_path']. $file_path;\n\t$this->load->helper('download');\n\tforce_download($file_name, file_get_contents($file_path));\n}\n", "CodeBleu_score": 38.54105278317521}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) \tList<AdminModelSort> modelSortList = new ArrayList<AdminModelSort>();\n\tfor (String modelName : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setSort(list.indexOf(modelName));\n\t\tmodelSort.setModelName(modelName);\n\t\tmodelSortList.add(modelSort);\n\t}\n\n\tList<AdminModelSort> existingModelSorts = adminService.getHeaderModelSorts(user);\n\tfor (AdminModelSort modelSort : existingModelSorts) {\n\t\tadminService.deleteHeaderModelSort(modelSort);\n\t}\n\n\tadminService.saveHeaderModelSorts(modelSortList);\n\n\treturn ok();\n}\n", "CodeBleu_score": 33.7584604190509}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) \ttry {\n\t\tList<AdminModelSort> adminModelSortList = new ArrayList<AdminModelSort>();\n\t\tfor (String model : list) {\n\t\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\t\tadminModelSort.setSort(0);\n\t\t\tadminModelSort.setSortName(model);\n\t\t\tadminModelSortList.add(adminModelSort);\n\t\t}\n\t\tList<AdminModelSort> existingAdminModelSortList = adminModelSortService.getAdminModelSortList(session.getAttribute(\"userId\"));\n\t\tif (existingAdminModelSortList!= null) {\n\t\t\tfor (AdminModelSort existingAdminModelSort : existingAdminModelSortList) {\n\t\t\t\tadminModelSortService.deleteAdminModelSort(existingAdminModelSort);\n\t\t\t}\n\t\t}\n\t\tadminModelSortService.saveAdminModelSortList(adminModelSortList);\n\t\treturn new Result(true, \"Header sort order updated successfully\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn new Result(false, \"Header sort order not updated\");\n\t}\n}\n", "CodeBleu_score": 35.46694869019654}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) \tList<AdminModelSort> newSorts = new ArrayList<AdminModelSort>();\n\tfor (String modelName : list) {\n\t\tAdminModelSort newSort = new AdminModelSort();\n\t\tnewSort.setAdminModel(modelName);\n\t\tnewSort.setSort(list.indexOf(modelName));\n\t\tnewSorts.add(newSort);\n\t}\n\tList<AdminModelSort> existingSorts = adminModelSortService.findByAdminUser(adminUser);\n\tfor (AdminModelSort existingSort : existingSorts) {\n\t\tadminModelSortService.delete(existingSort);\n\t}\n\tadminModelSortService.save(newSorts);\n\treturn new Result(true, \"Success\");\n}\n", "CodeBleu_score": 31.01092776591233}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)\ttry {\n\t\tModuleSettingBO currentModuleSetting = moduleSettingService.getModuleSetting(moduleSetting.getModuleSettingId());\n\t\tif (currentModuleSetting == null) {\n\t\t\treturn new ErrorResult(new Error(ErrorCode.MODULE_SETTING_NOT_FOUND));\n\t\t}\n\t\tif (currentModuleSetting.getModule().getName().equals(CRM_MODULE)) {\n\t\t\treturn new ErrorResult(new Error(ErrorCode.MODULE_SETTING_CANNOT_BE_UPDATED));\n\t\t}\n\t\tmoduleSettingService.updateModuleSetting(moduleSetting);\n\t\treturn new SuccessResult(moduleSetting);\n\t} catch (Exception e) {\n\t\treturn new ErrorResult(new Error(ErrorCode.UNKNOWN_ERROR, e.getMessage()));\n\t}\n}\n", "CodeBleu_score": 42.617924474039384}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)\tModuleSettingBO existingModuleSetting = moduleSettingService.get(moduleSetting.getId());\n\tif (existingModuleSetting == null) {\n\t\treturn Result.error(\"Module setting not found\");\n\t}\n\tModuleBO module = moduleService.get(existingModuleSetting.getModuleId());\n\tif (module.getName().equals(\"CRM\")) {\n\t\treturn Result.error(\"CRM module settings cannot be modified\");\n\t}\n\texistingModuleSetting.setStatus(moduleSetting.getStatus());\n\tmoduleSettingService.save(existingModuleSetting);\n\treturn Result.success();\n}\n", "CodeBleu_score": 47.31972321892256}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting)\tModuleSettingBO setting = moduleSettingService.findModuleSettingById(moduleSetting.getId());\n\tif (setting.getModule().getName().equals(Module.CRM)) {\n\t\treturn new ErrorResult(new Error(ErrorCode.SETTING_FOR_MODULE_NOT_FOUND));\n\t}\n\tsetting.setStatus(moduleSetting.getStatus());\n\tmoduleSettingService.updateModuleSetting(setting);\n\treturn new SuccessResult(moduleSetting);\n}\n", "CodeBleu_score": 50.01217491200366}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) \n// Get the current user", "CodeBleu_score": 4.583333335504956}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)  JSONObject config = new JSONObject();\n config.put(\"customKey\", customKey);\n config.put(\"customValue\", json);\n return this.saveUserConfiguration(config);\n }\n", "CodeBleu_score": 18.5442635564325}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey)  try {\n String customSetting = UserConfiguration.queryCustomSetting(customKey);\n if(customSetting!= null){\n customSetting = customSetting.replace(\"'\", \"\\\"\");\n JSONObject jsonObj = new JSONObject(customSetting);\n for (int i = 0; i < json.length(); i++) {\n JSONObject obj = json.getJSONObject(i);\n jsonObj.put(obj.getString(\"key\"), obj.get(\"value\"));\n }\n UserConfiguration.updateCustomSetting(customKey, jsonObj.toString());\n } else {\n UserConfiguration.createCustomSetting(customKey, json.toString());\n }\n return new Result(true, \"Custom setting saved successfully!\");\n } catch (Exception e) {\n return new Result(false, e.getMessage());\n }\n }\n */\n", "CodeBleu_score": 36.82207891765161}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) \tAdminUser user = adminUserService.queryUserInfo(userId);\n\tif (user!= null) {\n\t\tDepartment department = departmentService.queryDepartmentById(user.getDepartmentId());\n\t\tuser.setDepartmentName(department.getDepartmentName());\n\t\tuser.setSalt(null);\n\t\tuser.setPassword(null);\n\t}\n\treturn Result.newSuccessResult(user);\n}\n", "CodeBleu_score": 43.19444302084806}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) \tAdminUser user = userRepository.findOne(userId);\n\tif (user == null) {\n\t\treturn new Result<AdminUser>(null, false, \"User not found\");\n\t}\n\n\tDepartment department = departmentRepository.findOne(user.getDepartmentId());\n\tif (department!= null) {\n\t\tuser.setDepartmentName(department.getName());\n\t}\n\n\tuser.setSalt(null);\n\tuser.setPassword(<PASSWORD>);\n\n\treturn new Result<AdminUser>(user, true, \"User found\");\n}\n", "CodeBleu_score": 38.09521467976451}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) \tAdminUser user = adminUserService.getUser(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"user not found\");\n\t}\n\tString departmentName = departmentService.getDepartmentName(user.getDepartmentId());\n\tuser.setDepartmentName(departmentName);\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.success(user);\n}", "CodeBleu_score": 44.677910380111655}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() \t// get the current user\n\tUser user = User.find.where().eq(\"email\", session().get(\"email\")).findUnique();\n\t// get the current user's ID\n\tint userID = user.userID;\n\t// get all \"readNotice\" entries for the current user\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userID\", userID).findList();\n\t// check if there are multiple \"readNotice\" entries for the current user\n\tif (readNotices.size() > 1)  {\n\t\t// update the status to 1 for all matching entries\n\t\tfor (ReadNotice readNotice : readNotices)  {\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t}\n\telse  {\n\t\t// create a new \"readNotice\" entry with status 1 and save it\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.userID = userID;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\t// return a success result\n\treturn ok();\n}\n", "CodeBleu_score": 26.805378720565145}, {"code": " public Result readNotice() \tDynamicForm form = formFactory.form().bindFromRequest();\n\tLong userId = Long.parseLong(session().get(\"id\"));\n\tUser user = User.find.byId(userId);\n\tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"user\", user).findList();\n\tif (readNoticeList.size() > 0) {\n\t\tfor (ReadNotice readNotice : readNoticeList) {\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.user = user;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok(Json.toJson(\"success\"));\n}\n", "CodeBleu_score": 27.689263723264272}, {"code": " public Result readNotice() \tString userId = session(\"userId\");\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\tif (readNotices.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.readNotice = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else if (readNotices.size() == 1) {\n\t\tReadNotice readNotice = readNotices.get(0);\n\t\treadNotice.readNotice = 1;\n\t\treadNotice.update();\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.userId = userId;\n\t\treadNotice.readNotice = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok();\n}\n", "CodeBleu_score": 25.6824485446418}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)\tConfiguration c = Configuration.findByName(\"companyInfo\");\n\tif (c == null) {\n\t\tc = new Configuration();\n\t\tc.name = \"companyInfo\";\n\t}\n\tc.value = adminCompanyBO.toJSON();\n\tc.save();\n}\n", "CodeBleu_score": 23.59299311719076}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)\tAdminConfig adminConfig = AdminConfig.find(\"companyInfo\").first();\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.name = \"companyInfo\";\n\t}\n\tadminConfig.value = adminCompanyBO.toJson();\n\tadminConfig.save();\n}\n", "CodeBleu_score": 38.54819870625646}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO)\t// Get the configuration for company information\n\tAdminConfig adminConfig = adminConfigService.getAdminConfig(\"companyInfo\");\n\tif (adminConfig == null) {\n\t\t// Create a new configuration for company information\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(\"companyInfo\");\n\t\tadminConfig.setConfigValue(\"{}\");\n\t\tadminConfig.setConfigType(\"JSON\");\n\t\tadminConfig.setConfigDescription(\"Company information\");\n\t\tadminConfig.setConfigGroup(\"Company\");\n\t\tadminConfig.setConfigKey(\"Company\");\n\t\tadminConfigService.saveAdminConfig(adminConfig);\n\t}\n\t// Update the configuration's value with the provided company information in JSON format\n\tadminConfig.setConfigValue(adminCompanyBO.getCompanyInfo());\n\tadminConfigService.saveAdminConfig(adminConfig);\n}\n", "CodeBleu_score": 43.29708344122953}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig()\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString adminConfig = AdminCompanyDAO.queryAdminConfig(AdminCompanyDAO.ADMIN_CONFIG_KEY);\n\tif (adminConfig!= null) {\n\t\tadminCompanyBO = AdminCompanyBO.fromAdminConfig(adminConfig);\n\t}\n\treturn adminCompanyBO;\n}\n", "CodeBleu_score": 39.32199625260759}, {"code": "public AdminCompanyBO queryAdminConfig()\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tadminCompanyBO.setCompanyId(companyId);\n\tadminCompanyBO.setCompanyName(companyName);\n\tadminCompanyBO.setCompanyEmail(companyEmail);\n\tadminCompanyBO.setCompanyPhone(companyPhone);\n\tadminCompanyBO.setCompanyAddress(companyAddress);\n\tadminCompanyBO.setCompanyCity(companyCity);\n\tadminCompanyBO.setCompanyState(companyState);\n\tadminCompanyBO.setCompanyZip(companyZip);\n\tadminCompanyBO.setCompanyCountry(companyCountry);\n\tadminCompanyBO.setCompanyUrl(companyUrl);\n\tadminCompanyBO.setCompanyLogo(companyLogo);\n\tadminCompanyBO.setCompanyLogoUrl(companyLogoUrl);\n\tadminCompanyBO.setCompanyCurrency(companyCurrency);\n\tadminCompanyBO.setCompanyLanguage(companyLanguage);\n\tadminCompanyBO.setCompanyTimeZone(companyTimeZone);\n\tadminCompanyBO.setCompanyDateFormat(companyDateFormat);\n\tadminCompanyBO.setCompanyTimeFormat(companyTimeFormat);\n\tadminCompanyBO.setCompanyDecimalSymbol(companyDecimalSymbol);\n\tadminCompanyBO.setCompanyThousandSymbol(companyThousandSymbol);\n\tadminCompanyBO.setCompanyDefaultTaxRate(companyDefaultTaxRate);\n\tadminCompanyBO.setCompanyDefaultTaxName(companyDefaultTaxName);\n\tadminCompanyBO.setCompanyDefaultTaxType(companyDefaultTaxType);\n\tadminCompanyBO.setCompanyDefaultTaxShipping(companyDefaultTaxShipping);\n\tadminCompanyBO.setCompanyDefaultTaxClass(companyDefaultTaxClass);\n\tadminCompanyBO.setCompanyDefaultTaxZone(companyDefaultTaxZone);\n\tadminCompanyBO.setCompanyDefaultTaxDescription(companyDefaultTaxDescription);\n\tadminCompanyBO.setCompanyDefaultTaxDisplayInPrice(companyDefaultTaxDisplayInPrice);\n\tadminCompanyBO.setCompanyDefaultTaxDisplayInProduct(companyDefaultTaxDisplayInProduct);\n\tadminCompanyBO.setCompanyDefaultTaxUseShippingAddress(companyDefaultTaxUseShippingAddress);\n\tadminCompanyBO.setCompanyDefaultTaxApplyAfterDiscount(companyDefaultTaxApplyAfterDiscount);\n\tadminCompanyBO.setCompanyDefaultTaxPercentage(companyDefaultTaxPercentage);\n\tadminCompanyBO.setCompanyDefaultTaxAmount(companyDefaultTaxAmount);\n\tadmin", "CodeBleu_score": 14.323872318592104}, {"code": "public AdminCompanyBO queryAdminConfig()\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tadminCompany.setCompanyId(this.companyId);\n\tadminCompany.setCompanyName(this.companyName);\n\tadminCompany.setCompanyDescription(this.companyDescription);\n\tadminCompany.setCompanyWebsite(this.companyWebsite);\n\tadminCompany.setCompanyPhone(this.companyPhone);\n\tadminCompany.setCompanyAddress(this.companyAddress);\n\tadminCompany.setCompanyEmail(this.companyEmail);\n\tadminCompany.setCompanyLogo(this.companyLogo);\n\tadminCompany.setCompanyLogoUrl(this.companyLogoUrl);\n\tadminCompany.setCompanyBanner(this.companyBanner);\n\tadminCompany.setCompanyBannerUrl(this.companyBannerUrl);\n\tadminCompany.setCompanyAddress2(this.companyAddress2);\n\tadminCompany.setCompanyCity(this.companyCity);\n\tadminCompany.setCompanyState(this.companyState);\n\tadminCompany.setCompanyZip(this.companyZip);\n\tadminCompany.setCompanyCountry(this.companyCountry);\n\tadminCompany.setCompanyLang(this.companyLang);\n\tadminCompany.setCompanyTimeZone(this.companyTimeZone);\n\tadminCompany.setCompanyCurrency(this.companyCurrency);\n\tadminCompany.setCompanyTaxRate(this.companyTaxRate);\n\tadminCompany.setCompanyTaxRate2(this.companyTaxRate2);\n\tadminCompany.setCompanyTaxState(this.companyTaxState);\n\tadminCompany.setCompanyTaxState2(this.companyTaxState2);\n\tadminCompany.setCompanyReturnPolicy(this.companyReturnPolicy);\n\tadminCompany.setCompanyShippingPolicy(this.companyShippingPolicy);\n\tadminCompany.setCompanyShippingCost(this.companyShippingCost);\n\tadminCompany.setCompanyShippingCost2(this.companyShippingCost2);\n\tadminCompany.setCompanyShippingState(this.companyShippingState);\n\tadminCompany.setCompanyShippingState2(this.companyShippingState2);\n\tadminCompany.setCompanyShippingZip(this.companyShippingZip);\n\tadminCompany.setCompanyShippingZip2(this.companyShippingZip2);\n\tadminCompany.setCompanyShippingCountry(this.companyShippingCountry);\n\tadminCompany.setCompanyShippingCountry2", "CodeBleu_score": 11.575084803327558}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList) AdminConfig[] existingConfigs = AdminConfig.list(this.getAdminObject().getObjectName()).toArray(new AdminConfig[0]);\n for (AdminConfig config : existingConfigs) {\n if (config.getProperty(\"logConfigName\").getValue().equals(\"WelcomeSpeech\")) {\n config.remove();\n }\n }\n AdminConfig[] newConfigs = new AdminConfig[stringList.size()];\n for (int i = 0; i < stringList.size(); i++) {\n newConfigs[i] = AdminConfig.create(\"LogConfig\", this.getAdminObject().getObjectName(), new String[] {\"logConfigName\", \"logConfigType\", \"logConfigContents\"}, new String[] {\"WelcomeSpeech\", \"Custom\", stringList.get(i)});\n }\n AdminConfig.save(newConfigs);\n }\n */\n", "CodeBleu_score": 35.0229414191095}, {"code": " public void setLogWelcomeSpeech(List<String> stringList) AdminConfig[] configs = AdminConfig.getid(\"/Log/\"+logConfigurationName+\"/WelcomeFile:WelcomeFile\");\n if (configs.length > 0) {\n AdminConfig.remove(configs);\n }\n for (String string : stringList) {\n AdminConfig.create(\"WelcomeFile\", AdminConfig.getid(\"/Log/\"+logConfigurationName), new String[] { \"text\", string });\n }\n AdminConfig.save();\n }\n}\n", "CodeBleu_score": 29.922687811642813}, {"code": " public void setLogWelcomeSpeech(List<String> stringList) AdminConfig[] logWelcomeSpeeches = AdminConfig.list(\"LogModule\", logConfigName).getChild(\"logWelcomeSpeeches\").list(\"logWelcomeSpeech\");\n AdminConfig[] logWelcomeSpeechObjects = new AdminConfig[stringList.size()];\n for (int i = 0; i < stringList.size(); i++) {\n logWelcomeSpeechObjects[i] = AdminConfig.create(\"LogWelcomeSpeech\", logConfigName, new String[] {\"logWelcomeSpeech\", stringList.get(i)});\n }\n for (int i = 0; i < logWelcomeSpeeches.length; i++) {\n AdminConfig.remove(logWelcomeSpeeches[i].getObjectName());\n }\n AdminConfig.save(logWelcomeSpeechObjects);\n }\n */\n", "CodeBleu_score": 33.428858570622324}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>BO.<PASSWORD>();\n\n\t// Get the user ID and user details from the database\n\tUser user = userRepository.findByUsername(username);\n\tif (user == null) {\n\t\tthrow new InvalidPasswordException(\"Invalid username\");\n\t}\n\n\t// Check the password against the stored password\n\tif (!passwordEncoder.matches(password, user.getPassword())) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\n\t// Generate a temporary access code\n\tString accessCode = generateAccessCode();\n\n\t// Store the access code in Redis with a 10-minute expiration\n\tredisService.set(accessCode, username, 10 * 60);\n\n\treturn accessCode;\n}\n", "CodeBleu_score": 29.050946812496743}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\tString salt = adminInitDataBO.getSalt();\n\tString hashedPassword = <PASSWORD>(password, salt);\n\tAdmin admin = adminRepository.findByUsername(username);\n\tif (admin!= null) {\n\t\tif (admin.getPassword().equals(hashedPassword)) {\n\t\t\tString accessCode = UUID.randomUUID().toString();\n\t\t\tredisService.set(accessCode, admin.getId(), 600);\n\t\t\treturn accessCode;\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid password\");\n\t\t}\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Invalid username\");\n\t}\n}\n", "CodeBleu_score": 30.004398755067545}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO)\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\tString salt = adminInitDataBO.getSalt();\n\n\tif (StringUtils.isEmpty(username) || StringUtils.isEmpty(password) || StringUtils.isEmpty(salt)) {\n\t\tthrow new IllegalArgumentException(\"Username, password, and salt are required.\");\n\t}\n\n\tString hashedPassword = passwordEncoder.encodePassword(password, salt);\n\n\tUserBO userBO = userDAO.findByUsername(username);\n\tif (userBO == null) {\n\t\tthrow new IllegalArgumentException(\"Username is not valid.\");\n\t}\n\n\tif (!hashedPassword.equals(userBO.getPassword())) {\n\t\tthrow new IllegalArgumentException(\"Password is not valid.\");\n\t}\n\n\tString accessCode = UUID.randomUUID().toString();\n\tredisTemplate.opsForValue().set(accessCode, username, 10, TimeUnit.MINUTES);\n\n\treturn accessCode;\n}\n", "CodeBleu_score": 33.107789694665115}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth()\tString userId = getUserId();\n\tString key = \"unauthorized_menu_urls_\" + userId;\n\tList<String> unauthorizedUrls = redis.lrange(key, 0, -1);\n\tif (unauthorizedUrls!= null && unauthorizedUrls.contains(INIT_AUTH_URL)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 34.635967849360796}, {"code": "private boolean verifyInitAuth()\t// Get the user ID\n\tString userId = getUserId();\n\t// Construct a key\n\tString key = \"initAuth:\" + userId;\n\t// Get the list of unauthorized menu URLs\n\tList<String> unauthorizedMenuUrls = redis.lrange(key, 0, -1);\n\t// If the initial authentication URL is in the list, return true\n\tif (unauthorizedMenuUrls.contains(initialAuthUrl)) {\n\t\treturn true;\n\t}\n\t// Otherwise, return false\n\telse {\n\t\treturn false;\n\t}\n}\n", "CodeBleu_score": 31.990762983276948}, {"code": "private boolean verifyInitAuth()\t// Get the user ID.\n\tString userId = (String) session.getAttribute(\"userId\");\n\t// Construct the key.\n\tString key = \"auth:init:\" + userId;\n\t// Fetch the list of unauthorized menu URLs from Redis.\n\tList<String> unauthUrls = redisService.get(key);\n\t// If the initial authentication URL is in this list, it means no authorization.\n\tif (unauthUrls!= null && unauthUrls.contains(request.getRequestURI())) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 37.14603461328912}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)\tif (CollectionUtils.isEmpty(menuIdList)) {\n\t\treturn;\n\t}\n\t// 1. Delete the existing role-menu associations of the role\n\tadminRoleMenuDao.deleteByRoleId(roleId);\n\t// 2. Save the role-menu associations of the role in batches\n\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tint batchSize = 500;\n\tint totalCount = adminRoleMenuList.size();\n\tfor (int i = 0; i < totalCount; i += batchSize) {\n\t\tList<AdminRoleMenu> subList = adminRoleMenuList.subList(i, Math.min(i + batchSize, totalCount));\n\t\tadminRoleMenuDao.saveAll(subList);\n\t}\n}\n", "CodeBleu_score": 57.239853368710655}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\troleMenuMapper.saveRoleMenu(roleMenuList);\n}\n", "CodeBleu_score": 53.03887067222494}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList)\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tif (roleMenuList.size() > 0) {\n\t\tadminRoleMenuMapper.saveRoleMenu(roleMenuList);\n\t}\n}\n", "CodeBleu_score": 54.16785069003737}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) \ttry {\n\t\tIndexRequest indexRequest = new IndexRequest(\"sys_log\").source(convertSysLogToMap(sysLog));\n\t\tindexRequest.id(sysLog.getId());\n\t\tindexRequest.opType(DocWriteRequest.OpType.INDEX);\n\t\tindexRequest.version(sysLog.getVersion());\n\t\tindexRequest.versionType(VersionType.EXTERNAL);\n\t\tindexRequest.routing(sysLog.getAppId());\n\t\tindexRequest.timestamp(Date.from(sysLog.getCreatedOn().toInstant()));\n\t\tindexRequest.setIfSeqNo(sysLog.getSeqNo());\n\t\tindexRequest.setIfPrimaryTerm(sysLog.getPrimaryTerm());\n\t\tindexRequest.setPipeline(\"sys_log_pipeline\");\n\t\tindexRequest.timeout(TimeValue.timeValueMinutes(1L));\n\t\tindexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);\n\t\telasticsearchClient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Error occurred while saving system log\", e);\n\t}\n}\n", "CodeBleu_score": 31.320490297127396}, {"code": "public void saveSysLog(SysLog sysLog) \ttry {\n\t\t// Retrieve the log index from the system log.\n\t\tString index = sysLog.getLogIndex();\n\n\t\t// Convert the log object to a map.\n\t\tMap<String, Object> logMap = new HashMap<>();\n\t\tlogMap.put(\"id\", sysLog.getId());\n\t\tlogMap.put(\"log_level\", sysLog.getLogLevel());\n\t\tlogMap.put(\"log_message\", sysLog.getLogMessage());\n\t\tlogMap.put(\"log_time\", sysLog.getLogTime());\n\t\tlogMap.put(\"log_date\", sysLog.getLogDate());\n\t\tlogMap.put(\"log_index\", sysLog.getLogIndex());\n\n\t\t// Format the creation time.\n\t\tString logCreationTime = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").format(sysLog.getLogTime());\n\n\t\t// Remove the ID from the map.\n\t\tlogMap.remove(\"id\");\n\n\t\t// Create an index request and submit it to the Elasticsearch client.\n\t\tIndexRequest indexRequest = new IndexRequest(index);\n\t\tindexRequest.source(logMap);\n\t\tindexRequest.id(logCreationTime);\n\t\trestHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, listener);\n\t} catch (Exception e) {\n\t\t// Log the error message.\n\t\tLOGGER.error(e.getMessage(), e);\n\t}\n}\n", "CodeBleu_score": 45.20241984772685}, {"code": "public void saveSysLog(SysLog sysLog) \t// Get the log index\n\tString index = sysLog.getLogIndex();\n\t// Convert the log object to a map\n\tMap<String, Object> logMap = new HashMap<String, Object>();\n\tlogMap.putAll(sysLog.getSysLogMap());\n\t// Format the creation time\n\tlogMap.put(\"creation_time\", sysLog.getCreationTime().toString());\n\t// Remove the ID\n\tlogMap.remove(\"id\");\n\t// Create an index request\n\tIndexRequest indexRequest = new IndexRequest(index);\n\tindexRequest.source(logMap);\n\t// Submit the index request to the Elasticsearch client\n\ttry {\n\t\tesClient.index(indexRequest);\n\t} catch (Exception e) {\n\t\t// Log the error message\n\t\tlogger.error(e.getMessage());\n\t}\n}\n", "CodeBleu_score": 34.07655336110098}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)\ttry {\n\t\t// Initialize the search criteria\n\t\tSearchCriteria searchCriteria = new SearchCriteria();\n\t\tsearchCriteria.setSortBy(\"createdDate\");\n\t\tsearchCriteria.setSortDirection(\"DESC\");\n\t\tsearchCriteria.setExcludedFields(\"id,createdDate,modifiedDate,createdBy,modifiedBy,version\");\n\t\t// Initialize the search request\n\t\tSearchRequest searchRequest = new SearchRequest();\n\t\tsearchRequest.setQuery(querySysLogBO.getQuery());\n\t\tsearchRequest.setPageable(querySysLogBO.getPageable());\n\t\tsearchRequest.setSearchCriteria(searchCriteria);\n\t\t// Execute the search request\n\t\tSearchResponse<SysLog> searchResponse = restClient.search(searchRequest, SysLog.class);\n\t\t// Map the search results to a BasePage object\n\t\tBasePage<SysLog> basePage = new BasePage<>();\n\t\tbasePage.setPageNumber(searchResponse.getPageNumber());\n\t\tbasePage.setPageSize(searchResponse.getPageSize());\n\t\tbasePage.setTotalPages(searchResponse.getTotalPages());\n\t\tbasePage.setTotalElements(searchResponse.getTotalElements());\n\t\tbasePage.setFirst(searchResponse.isFirst());\n\t\tbasePage.setLast(searchResponse.isLast());\n\t\tbasePage.setContent(searchResponse.getContent());\n\t\treturn basePage;\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error querying system logs: \" + e.getMessage());\n\t\tthrow new BusinessException(e);\n\t}\n}\n", "CodeBleu_score": 35.762790914717876}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)\t// Initialize the search criteria\n\tSearchCriteria searchCriteria = new SearchCriteria();\n\tsearchCriteria.setSortDirection(SortDirection.DESCENDING);\n\tsearchCriteria.setSortField(\"creationTime\");\n\tsearchCriteria.setExcludeFields(Arrays.asList(\"id\", \"creationTime\"));\n\n\t// Execute the search request\n\ttry {\n\t\tPaginatedSearchResponse<SysLog> searchResponse = restClient.queryPaginatedList(querySysLogBO.getSearchCriteria(), searchCriteria, SysLog.class);\n\n\t\t// Map the search results to SysLog objects\n\t\tList<SysLog> sysLogList = new ArrayList<>();\n\t\tfor (SysLog sysLog : searchResponse.getResults()) {\n\t\t\tsysLogList.add(new SysLog(sysLog));\n\t\t}\n\n\t\t// Populate the BasePage object with the search results\n\t\tBasePage<SysLog> page = new BasePage<>();\n\t\tpage.setResults(sysLogList);\n\t\tpage.setTotalHits(searchResponse.getTotalHits());\n\t\tpage.setCurrentPage(querySysLogBO.getCurrentPage());\n\n\t\treturn page;\n\t}\n\tcatch (IOException e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 38.868797034945224}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO)\tBasePage<SysLog> page = new BasePage<>();\n\ttry {\n\t\t// Initialize the search criteria\n\t\tSearchCriteria criteria = new SearchCriteria();\n\t\tcriteria.setSortBy(SysLog.FIELD_CREATION_TIME);\n\t\tcriteria.setSortDirection(SortDirection.DESCENDING);\n\t\tcriteria.setExcludeFields(SysLog.FIELD_ID, SysLog.FIELD_CREATION_TIME, SysLog.FIELD_MODIFICATION_TIME);\n\t\t// Set the search criteria\n\t\tquerySysLogBO.setCriteria(criteria);\n\t\t// Execute the search request using a REST client\n\t\tSearchResponse response = restClient.search(querySysLogBO);\n\t\t// Map the search results to SysLog objects\n\t\tList<SysLog> sysLogList = new ArrayList<>();\n\t\tfor (SearchHit hit : response.getHits()) {\n\t\t\tSysLog sysLog = new SysLog();\n\t\t\tsysLog.setId(hit.getId());\n\t\t\tsysLog.setCreationTime(hit.getCreationTime());\n\t\t\tsysLog.setModificationTime(hit.getModificationTime());\n\t\t\tsysLog.setSource(hit.getSource());\n\t\t\tsysLogList.add(sysLog);\n\t\t}\n\t\t// Populate the BasePage object with the search results\n\t\tpage.setList(sysLogList);\n\t\tpage.setTotalHits(response.getTotalHits());\n\t\tpage.setPageNumber(querySysLogBO.getPageNumber());\n\t\tpage.setPageSize(querySysLogBO.getPageSize());\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error querying system logs: \" + e.getMessage(), e);\n\t}\n\treturn page;\n}\n", "CodeBleu_score": 39.160816302608346}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest)\tconst file = fs.createWriteStream(dest);\n\tconst request = https.get(url, (response) => {\n\t\tresponse.pipe(file);\n\t});\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on('finish', () => {\n\t\t\tfile.close(resolve);\n\t\t});\n\t\trequest.on('error', (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err.message);\n\t\t});\n\t});\n}\n", "CodeBleu_score": 45.400872876202484}, {"code": "async function downloadFile(url, dest)\tconst file = fs.createWriteStream(dest);\n\tconst request = https.get(url, (response) => {\n\t\tresponse.pipe(file);\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\trequest.on(\"error\", (err) => {\n\t\t\tfs.unlink(dest, () => {});\n\t\t\treject(err.message);\n\t\t});\n\t\tfile.on(\"finish\", () => {\n\t\t\tfile.close();\n\t\t\tresolve();\n\t\t});\n\t});\n}\n", "CodeBleu_score": 48.02507803429491}, {"code": "async function downloadFile(url, dest)\ttry {\n\t\tconst res = await fetch(url);\n\t\tconst fileStream = fs.createWriteStream(dest);\n\t\tres.body.pipe(fileStream);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfileStream.on('finish', () => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\tfileStream.on('error', (err) => {\n\t\t\t\tfs.unlink(dest, () => {});\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t} catch (err) {\n\t\tfs.unlink(dest, () => {});\n\t\tthrow err;\n\t}\n}\n", "CodeBleu_score": 45.45177896614163}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)\treturn module.getDependencies()\n\t\t.filter(dependency ->!circularDependencyCheckSet.contains(dependency.getId()))\n\t\t.flatMap(dependency -> {\n\t\t\tcircularDependencyCheckSet.add(dependency.getId());\n\t\t\treturn this.applicationService.find(dependency.getId())\n\t\t\t\t.switchIfEmpty(Mono.fromRunnable(() -> {\n\t\t\t\t\tthis.logger.warn(\"Could not find module with ID {} for module with ID {}\", dependency.getId(), module.getId());\n\t\t\t\t}))\n\t\t\t\t.onErrorResume(error -> {\n\t\t\t\t\tthis.logger.warn(\"Error retrieving module with ID {} for module with ID {}\", dependency.getId(), module.getId());\n\t\t\t\t\treturn Mono.empty();\n\t\t\t\t})\n\t\t\t\t.map(dependentModule -> {\n\t\t\t\t\tdependentModule.setDependencies(Collections.singletonList(module));\n\t\t\t\t\treturn dependentModule;\n\t\t\t\t})\n\t\t\t\t.thenMany(this.getDependentModules(dependentModule, circularDependencyCheckSet));\n\t\t});\n}\n", "CodeBleu_score": 43.17318697302797}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet)\treturn Flux.fromIterable(module.getDependencies())\n\t\t.filter(dependency ->!circularDependencyCheckSet.contains(dependency.getId()))\n\t\t.concatMap(dependency -> {\n\t\t\tcircularDependencyCheckSet.add(dependency.getId());\n\t\t\treturn applicationRepository.findById(dependency.getId())\n\t\t\t\t.switchIfEmpty(Mono.just(new Application(dependency.getId(), dependency.getName(), Collections.emptyList())))\n\t\t\t\t.onErrorResume(error -> {\n\t\t\t\t\tlog.warn(\"Failed to retrieve application module '{}' with error: {}\", dependency.getId(), error.getMessage());\n\t\t\t\t\treturn Mono.just(new Application(dependency.getId(), dependency.getName(), Collections.emptyList()));\n\t\t\t\t})\n\t\t\t\t.map(dependentModule -> {\n\t\t\t\t\tdependentModule.setDependencies(getDependentModules(dependentModule, circularDependencyCheckSet).collectList().block());\n\t\t\t\t\treturn dependentModule;\n\t\t\t\t});\n\t\t});\n}\n", "CodeBleu_score": 42.34139843469058}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet) return Flux.fromIterable(module.getDependencies())", "CodeBleu_score": 18.288807230366665}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)if (map!= null) {\n\t\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\t\tObject value = entry.getValue();\n\t\t\tif (value instanceof Map) {\n\t\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t\t} else if (value instanceof List) {\n\t\t\t\tdoGetDependentModules((List<?>) value, dependentModuleIds);\n\t\t\t} else if (value instanceof String && \"module\".equals(entry.getKey())) {\n\t\t\t\tString moduleId = (String) value;\n\t\t\t\tif (moduleId!= null &&!moduleId.isEmpty()) {\n\t\t\t\t\tdependentModuleIds.add(moduleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 28.89275733735337}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)for (Object entry : map.entrySet()) {\n\t\tMap.Entry<?,?> entryMap = (Map.Entry<?,?>) entry;\n\t\tObject value = entryMap.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tfor (Object listEntry : (List<?>) value) {\n\t\t\t\tif (listEntry instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) listEntry, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (value instanceof String) {\n\t\t\tString componentType = (String) entryMap.getKey();\n\t\t\tif (componentType.equals(\"module\")) {\n\t\t\t\tString moduleId = (String) value;\n\t\t\t\tif (!moduleId.isEmpty()) {\n\t\t\t\t\tdependentModuleIds.add(moduleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 36.35463400165212}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds)for (Object key : map.keySet()) {\n\t\tObject value = map.get(key);\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tdoGetDependentModules((List<?>) value, dependentModuleIds);\n\t\t} else if (key.equals(\"componentType\") && value.equals(\"module\")) {\n\t\t\tString appId = (String) map.get(\"appId\");\n\t\t\tif (appId!= null &&!appId.isEmpty()) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 33.39421875080965}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException \tAsset asset = new Asset();\n\tInputStream is = dataBuffer.getStream();\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tbyte[] buf = new byte[1024];\n\tint len = is.read(buf);\n\twhile (len > 0) {\n\t\tbaos.write(buf, 0, len);\n\t\tlen = is.read(buf);\n\t}\n\tis.close();\n\tbyte[] imageBytes = baos.toByteArray();\n\tbaos.close();\n\tif (createThumbnail) {\n\t\t// create thumbnail\n\t\tBufferedImage image = ImageIO.read(new ByteArrayInputStream(imageBytes));\n\t\tBufferedImage thumbnail = Scalr.resize(image, Scalr.Method.AUTOMATIC, Scalr.Mode.AUTOMATIC, THUMBNAIL_SIZE, THUMBNAIL_SIZE, Scalr.OP_ANTIALIAS);\n\t\tByteArrayOutputStream thumbnailBaos = new ByteArrayOutputStream();\n\t\tImageIO.write(thumbnail, \"JPEG\", thumbnailBaos);\n\t\timageBytes = thumbnailBaos.toByteArray();\n\t\tthumbnailBaos.close();\n\t}\n\tasset.setContent(imageBytes);\n\tif (createThumbnail) {\n\t\tasset.setContentType(MediaType.JPEG);\n\t} else {\n\t\tasset.setContentType(srcContentType);\n\t}\n\tdataBuffer.release();\n\treturn asset;\n }\n}", "CodeBleu_score": 35.243432859375915}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException  Asset asset = new Asset();\n asset.setContentType(srcContentType);\n if (createThumbnail) {\n // Resize the image to 128x128 pixels.\n ImageInputStream in = ImageIO.createImageInputStream(dataBuffer);\n Iterator<ImageReader> readers = ImageIO.getImageReaders(in);\n ImageReader reader = readers.next();\n reader.setInput(in);\n ImageReadParam param = reader.getDefaultReadParam();\n param.setSourceRegion(new Rectangle(0, 0, 128, 128));\n BufferedImage thumbnail = reader.read(0, param);\n // Encode the thumbnail as a JPEG image.\n ByteArrayOutputStream out = new ByteArrayOutputStream();\n ImageIO.write(thumbnail, \"jpg\", out);\n out.flush();\n asset.setData(out.toByteArray());\n asset.setContentType(MediaType.IMAGE_JPEG);\n } else {\n // Retain the original image content type and data.\n asset.setData(dataBuffer.readAllBytes());\n }\n return asset;\n }\n}", "CodeBleu_score": 34.68048359808314}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException \n// Create a new Asset.", "CodeBleu_score": 7.878789110369761}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)\treturn assetService.getAsset(assetId)\n\t\t\t.map(asset -> {\n\t\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\tresponse.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t\t\t}\n\t\t\t\treturn response.writeWith(Flux.just(asset.getData()));\n\t\t\t});\n}\n", "CodeBleu_score": 44.63847195791551}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)\treturn Mono.justOrEmpty(assetId)\n\t\t\t.flatMap(id -> assetService.getAsset(id))\n\t\t\t.flatMap(asset -> {\n\t\t\t\tif (asset == null) {\n\t\t\t\t\treturn Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\t\tresponse.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t\t\t\t}\n\t\t\t\t\treturn response.writeWith(asset.getData());\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 51.120995361125}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId)\treturn getAsset(assetId)\n\t\t.map(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t\t}\n\t\t\treturn asset;\n\t\t})\n\t\t.flatMap(asset -> {\n\t\t\tDataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n\t\t\treturn exchange.getResponse().writeWith(Flux.just(buffer));\n\t\t});\n}\n", "CodeBleu_score": 42.34786032362412}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() \treturn Flux.fromIterable(getOrganizationService().getOrganizations())\n\t\t.map(org -> org.getAuthenticationConfiguration())\n\t\t.filter(authConfig -> authConfig!= null)\n\t\t.map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getAuthenticationType(), authConfig.getAuthenticationConfiguration()))\n\t\t.onErrorResume(e -> Flux.empty());\n}\n", "CodeBleu_score": 19.769911022762678}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() \treturn Flux.fromIterable(authConfigRepository.findAll())\n\t\t.map(authConfig -> {\n\t\t\tFindAuthConfig findAuthConfig = new FindAuthConfig();\n\t\t\tfindAuthConfig.setAuthConfigId(authConfig.getId());\n\t\t\tfindAuthConfig.setAuthConfigName(authConfig.getName());\n\t\t\tfindAuthConfig.setAuthConfigType(authConfig.getType());\n\t\t\treturn findAuthConfig;\n\t\t});\n}\n", "CodeBleu_score": 17.616074325526327}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() \tFlux<FindAuthConfig> configs = Flux.empty();\n\tif (workspace.getWorkspaceMode() == WorkspaceMode.ENTERPRISE) {\n\t\tconfigs = Flux.fromIterable(workspace.getOrganizations().stream()\n\t\t\t.map(org -> new FindAuthConfig(org.getId(), org.getAuthenticationConfiguration()))\n\t\t\t.collect(Collectors.toList()));\n\t}\n\treturn configs;\n}\n", "CodeBleu_score": 23.6073322362501}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)\t// Build a SpringBootMongockBuilder\n\tSpringBootMongockBuilder builder = new SpringBootMongockBuilder(mongoTemplate)\n\t\t.setApplicationContext(springContext)\n\t\t.setLockRepository(new MongoLockRepository(mongoTemplate.getCollection(\"dbchangeloglock\"), \"cluster-1\"))\n\t\t.setMigrationRepository(new MongoRepository(mongoTemplate.getCollection(\"dbchangelog\")))\n\t\t.setChangeLogPackages(\"com.example.demo.db.changelogs\")\n\t\t.setTransactionEnabled(false)\n\t\t.setWriteConcern(WriteConcern.MAJORITY)\n\t\t.setReadConcern(ReadConcern.MAJORITY)\n\t\t.setThrowExceptionIfCannotObtainLock(true);\n\t// Return the MongockApplicationRunner\n\treturn builder.buildApplicationRunner();\n}\n", "CodeBleu_score": 46.19850292664282}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)\t// Set up the MongoDB driver with specific write and read concerns\n\tMongoClientSettings mongoClientSettings = MongoClientSettings.builder()\n\t\t\t.writeConcern(WriteConcern.MAJORITY)\n\t\t\t.readConcern(ReadConcern.MAJORITY)\n\t\t\t.applyToClusterSettings(builder -> builder.hosts(Collections.singletonList(new ServerAddress(\"localhost\", 27017))))\n\t\t\t.build();\n\n\t// Build the Mongock runner\n\treturn MongockSpring5.builder()\n\t\t\t.setDriver(MongoDriver.withSettings(mongoClientSettings))\n\t\t\t.addChangeLogsScanPackage(CHANGE_LOG_PACKAGE)\n\t\t\t.setSpringContext(springContext)\n\t\t\t.buildApplicationRunner();\n}\n", "CodeBleu_score": 45.93945731352191}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate)\t// Set up the MongoDB driver with specific write and read concerns\n\tMongoClientSettings settings = MongoClientSettings.builder()\n\t\t\t.writeConcern(WriteConcern.MAJORITY)\n\t\t\t.readConcern(ReadConcern.MAJORITY)\n\t\t\t.applyToClusterSettings(builder -> builder.hosts(Arrays.asList(new ServerAddress(\"localhost\", 27017))))\n\t\t\t.build();\n\tMongoClient mongoClient = MongoClients.create(settings);\n\n\t// Specify the package to scan for change logs\n\tString changeLogsScanPackage = \"com.example.demo.db.changelogs\";\n\n\t// Integrate the Spring application context\n\tSpringDataMongoTemplate springDataMongoTemplate = new SpringDataMongoTemplate(mongoClient, mongoTemplate.getDb().getName());\n\tSpringService springService = new SpringService(springContext);\n\n\t// Build and return the MongockApplicationRunner\n\treturn MongockSpring5.builder()\n\t\t\t.setDriver(springDataMongoTemplate)\n\t\t\t.addChangeLogsScanPackage(changeLogsScanPackage)\n\t\t\t.setSpringContext(springService)\n\t\t\t.buildApplicationRunner();\n}\n", "CodeBleu_score": 44.310678083662026}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}\n", "CodeBleu_score": 25.818716027404538}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}\n", "CodeBleu_score": 25.818716027404538}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter)\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}\n", "CodeBleu_score": 72.55711220942965}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)\treturn Mono.justOrEmpty(libraryQueryId)\n\t\t.flatMap(id -> libraryQueryService.getLatestLibraryQueryRecordByLibraryQueryId(id))\n\t\t.switchIfEmpty(libraryQueryService.getLibraryQueryById(libraryQueryId))\n\t\t.map(libraryQuery -> {\n\t\t\tMap<String, Object> liveDsl = libraryQuery.getDsl();\n\t\t\tif (liveDsl == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"No DSL found for library query with ID: \" + libraryQueryId);\n\t\t\t}\n\t\t\treturn liveDsl;\n\t\t});\n}\n", "CodeBleu_score": 39.19981975064507}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)\treturn getLiveDSLByLibraryQueryId(libraryQueryId, null);\n}\n", "CodeBleu_score": 14.409305255551022}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId)\treturn Mono.fromCallable(() -> {\n\t\t// Get the latest library query record\n\t\tLibraryQueryRecord libraryQueryRecord = libraryQueryService.getLatestLibraryQueryRecordByLibraryQueryId(libraryQueryId);\n\t\tif (libraryQueryRecord == null) {\n\t\t\t// If no record is found, fetch the DSL directly from the library query by its ID\n\t\t\tString libraryQueryDSL = libraryQueryService.getLibraryQueryDSLById(libraryQueryId);\n\t\t\treturn DSLUtil.getLiveDSLByDSL(libraryQueryDSL);\n\t\t}\n\t\treturn DSLUtil.getLiveDSLByDSL(libraryQueryRecord.getDsl());\n\t});\n}\n", "CodeBleu_score": 37.35438040995608}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)\n//        String query = (String) queryConfig.get(QUERY);", "CodeBleu_score": 8.928572078345304}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)\n//    long timeout = Long.parseLong(timeoutStr);", "CodeBleu_score": 8.928571450438868}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext)\n//        String timeoutStr = requestParams.getOrDefault(\"timeout\", \"0\").toString();", "CodeBleu_score": 8.928800580764834}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)\tQueryExecutor queryExecutor = QueryExecutorFactory.getQueryExecutor(datasource.getType());\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\treturn datasource.getConnectionPool().getConnection()\n\t\t\t.flatMap(connection -> queryExecutor.execute(queryExecutionContext, connection))\n\t\t\t.onErrorResume(error -> handleQueryExecutionError(error, datasource, queryConfig, requestParams));\n}\n", "CodeBleu_score": 41.43419098661424}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)\nDataSourceType datasourceType = datasource.getType();\n", "CodeBleu_score": 19.445089604300996}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext)\n// Get the query executor for the datasource", "CodeBleu_score": 9.453795447364275}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr)\tif (timeoutStr == null || timeoutStr.isEmpty()) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tString[] parts = timeoutStr.split(\" \");\n\tif (parts.length!= 2) {\n\t\tthrow new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n\t}\n\ttry {\n\t\tint value = Integer.parseInt(parts[0]);\n\t\tTimeUnit unit = TimeUnit.valueOf(parts[1].toUpperCase());\n\t\tlong duration = unit.toMillis(value);\n\t\tif (duration > MAX_QUERY_TIMEOUT_MS) {\n\t\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed value: \" + timeoutStr);\n\t\t}\n\t\treturn (int) duration;\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid timeout value: \" + parts[0], e);\n\t} catch (IllegalArgumentException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid timeout unit: \" + parts[1], e);\n\t}\n}", "CodeBleu_score": 35.066465060270765}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)\tif (timeoutStr == null || timeoutStr.isEmpty()) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tString[] parts = timeoutStr.split(\" \");\n\tif (parts.length!= 2) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\tint value;\n\ttry {\n\t\tvalue = Integer.parseInt(parts[0]);\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\tString unit = parts[1].toLowerCase();\n\tif (unit.startsWith(\"s\")) {\n\t\tvalue *= 1000;\n\t} else if (!unit.startsWith(\"ms\")) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\tif (value > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum allowed value of \" + MAX_QUERY_TIMEOUT_MS + \" ms: \" + timeoutStr);\n\t}\n\treturn value;\n}\n", "CodeBleu_score": 30.56689674245024}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr)\tif (timeoutStr == null || timeoutStr.isEmpty()) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tMatcher matcher = TIMEOUT_PATTERN.matcher(timeoutStr);\n\tif (!matcher.matches()) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\tint value = Integer.parseInt(matcher.group(1));\n\tString unit = matcher.group(2);\n\tint multiplier = 1;\n\tswitch (unit) {\n\t\tcase \"ms\":\n\t\t\tmultiplier = 1;\n\t\t\tbreak;\n\t\tcase \"s\":\n\t\t\tmultiplier = 1000;\n\t\t\tbreak;\n\t\tcase \"m\":\n\t\t\tmultiplier = 60 * 1000;\n\t\t\tbreak;\n\t\tcase \"h\":\n\t\t\tmultiplier = 60 * 60 * 1000;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\tint timeoutMs = value * multiplier;\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum: \" + timeoutStr);\n\t}\n\treturn timeoutMs;\n}\n", "CodeBleu_score": 29.75040792652018}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)\tMono<List<Pair<String, String>>> datasourceIdPairs = getDatasourceIdsFromApplication(application, visitorId)\n\t\t\t.flatMap(datasourceIds -> copyDatasourcesToCurrentOrganization(currentOrganizationId, datasourceIds, visitorId))\n\t\t\t.onErrorResume(error -> Mono.just(new ArrayList<>()));\n\treturn datasourceIdPairs;\n}\n", "CodeBleu_score": 34.144490917033075}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)\treturn getLiveQueriesFromApplication(application, visitorId)\n\t\t\t.flatMap(liveQueries -> {\n\t\t\t\tif (liveQueries.size() == 0) {\n\t\t\t\t\treturn Mono.error(new IllegalArgumentException(\"No live queries found in application \" + application.getId()));\n\t\t\t\t}\n\t\t\t\tList<String> datasourceIds = liveQueries.stream().map(LiveQuery::getDatasources).flatMap(List::stream).distinct().collect(Collectors.toList());\n\t\t\t\treturn copyDatasourcesToCurrentOrganization(currentOrganizationId, datasourceIds, visitorId);\n\t\t\t});\n}\n", "CodeBleu_score": 44.98694794476603}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId)\treturn getLiveQueriesFromApplication(application, visitorId).map(liveQueries -> {\n\t\tList<String> datasourceIds = liveQueries.stream().map(LiveQuery::getDataSourceId).collect(Collectors.toList());\n\t\treturn copyDatasources(datasourceIds, currentOrganizationId, visitorId);\n\t});\n}\n", "CodeBleu_score": 33.139550991064745}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)\treturn Mono.fromSupplier(() -> {\n\t\ttry {\n\t\t\tif (datasourceId.equals(\"quick-rest-api\") || datasourceId.equals(\"legacy-openblocks-api\")) {\n\t\t\t\treturn datasourceId;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Datasource.copy(organizationId, datasourceId, visitorId).id;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t});\n}\n", "CodeBleu_score": 21.752707548770594}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)\tif (datasourceId.equals(\"system-static-datasource\")) {\n\t\treturn Mono.just(datasourceId);\n\t} else if (datasourceId.equals(\"legacy-quick-rest-api-datasource\") || datasourceId.equals(\"legacy-openblocks-api-datasource\")) {\n\t\treturn Mono.just(datasourceId);\n\t} else {\n\t\treturn getDatasource(organizationId, datasourceId, visitorId)\n\t\t\t.map(datasource -> {\n\t\t\t\tdatasource.setDatasourceId(null);\n\t\t\t\tdatasource.setDatasourceName(datasource.getDatasourceName() + \" (Copy)\");\n\t\t\t\treturn datasource;\n\t\t\t})\n\t\t\t.flatMap(datasource -> createDatasource(organizationId, datasource, visitorId));\n\t}\n}\n", "CodeBleu_score": 38.905655407106984}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId)\treturn getDatasourceById(organizationId, datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t} else if (datasource.isLegacyQuickRestAPI() || datasource.isLegacyOpenblocksAPI()) {\n\t\t\t\treturn datasource.getNewId()\n\t\t\t\t\t.map(newId -> newId.replace(\"new-\", \"old-\"));\n\t\t\t} else {\n\t\t\t\treturn createDatasource(organizationId, datasource.getDatasourceType(), datasource.getDatasourceName(), datasource.getDatasourceDescription(), datasource.getDatasourceQuery(), datasource.getDatasourceParams(), visitorId)\n\t\t\t\t\t.map(newDatasource -> newDatasource.getId());\n\t\t\t}\n\t\t});\n}\n", "CodeBleu_score": 45.01201697870357}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user) return Mono.fromCallable(() -> {\n try {\n String photoName = user.getUsername() + \"_\" + UUID.randomUUID() + \".\" + FilenameUtils.getExtension(filePart.filename());\n String photoPath = Paths.get(System.getProperty(\"user.dir\"), \"uploads\", \"profile_photos\", photoName).toString();\n filePart.transferTo(new File(photoPath));\n user.setAvatar(photoName);\n userRepository.save(user);\n if (user.getAvatar()!= null) {\n String oldPhotoPath = Paths.get(System.getProperty(\"user.dir\"), \"uploads\", \"profile_photos\", user.getAvatar()).toString();\n File oldPhoto = new File(oldPhotoPath);\n if (oldPhoto.exists()) {\n oldPhoto.delete();\n }\n }\n return true;\n } catch (Exception e) {\n e.printStackTrace();\n return false;\n }\n }).subscribeOn(Schedulers.boundedElastic());\n }\n}", "CodeBleu_score": 36.88309999158548}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user) // Create a Mono<String> that will contain the file's name.\n Mono<String> filename = Mono.create(sink -> {\n // Save the file to the system.\n String filename = saveFile(filePart);\n // Send the filename to the sink.\n sink.success(filename);\n });\n // Create a Mono<Boolean> that will contain the result of the operation.\n Mono<Boolean> result = filename.map(name -> {\n // Remove the user's previous avatar if it exists.\n removeAvatar(user);\n // Update the user's profile with the new avatar.\n user.setAvatar(name);\n userRepository.save(user);\n return true;\n });\n return result;\n }\n *\n * @param filePart\n * @return\n */\n private String saveFile(Part filePart) {\n // Create a unique filename for the file.\n String filename = UUID.randomUUID().toString();\n // Create a path to the file.\n Path path = Paths.get(UPLOAD_FOLDER, filename);\n // Save the file to the system.\n try {\n filePart.write(path.toString());\n } catch (IOException e) {\n e.printStackTrace();\n }\n // Return the filename.\n return filename;\n }\n\n private void removeAvatar(User user) {\n // Check if the user has an avatar.\n if (user.getAvatar()!= null) {\n // Remove the file from the system.\n Path path = Paths.get(UPLOAD_FOLDER, user.getAvatar());\n try {\n Files.deleteIfExists(path);\n } catch (IOException e) {\n e.printStackTrace();\n }\n }\n }\n}\n", "CodeBleu_score": 38.78505052923787}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user) return Mono.fromCallable(() -> {\n String filename = Paths.get(filePart.filename()).getFileName().toString();\n String fileExtension = filename.substring(filename.lastIndexOf('.'));\n String avatarPath = \"avatars/\" + user.getId() + fileExtension;\n String previousAvatarPath = user.getAvatar();\n try {\n Files.copy(filePart.inputStream(), Paths.get(avatarPath), StandardCopyOption.REPLACE_EXISTING);\n } catch (IOException e) {\n throw new RuntimeException(\"Could not save avatar\", e);\n }\n if (previousAvatarPath!= null) {\n try {\n Files.deleteIfExists(Paths.get(previousAvatarPath));\n } catch (IOException e) {\n throw new RuntimeException(\"Could not delete previous avatar\", e);\n }\n }\n user.setAvatar(avatarPath);\n return true;\n }).subscribeOn(Schedulers.boundedElastic());\n }\n", "CodeBleu_score": 37.36877377515363}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)\treturn Mono.just(authUser)\n\t\t\t.map(authUser -> {\n\t\t\t\tString username = authUser.getUsername();\n\t\t\t\tString email = authUser.getEmail();\n\t\t\t\tString password = authUser.getPassword();\n\t\t\t\tString name = authUser.getName();\n\t\t\t\tString avatarLink = authUser.getAvatarLink();\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(name);\n\t\t\t\tuser.setState(UserState.NEW);\n\t\t\t\tuser.setEnabled(true);\n\t\t\t\tuser.setAvatarLink(avatarLink);\n\t\t\t\tuser.setAuthSource(authUser.getAuthSource());\n\t\t\t\tuser.setEmail(email);\n\t\t\t\tif (password!= null &&!password.isEmpty()) {\n\t\t\t\t\tuser.setPassword(password);\n\t\t\t\t}\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\treturn userRepository.save(user)\n\t\t\t\t\t\t.then(userRepository.createConnectionsFromUser(user))\n\t\t\t\t\t\t.then(Mono.just(user));\n\t\t\t});\n}\n", "CodeBleu_score": 40.10904504923395}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)\tif (authUser == null) {\n\t\tthrow new IllegalArgumentException(\"AuthUser cannot be null\");\n\t}\n\tif (authUser.getAuthSource() == null) {\n\t\tthrow new IllegalArgumentException(\"AuthUser must have an auth source\");\n\t}\n\tif (authUser.getAuthSource().isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"AuthUser must have an auth source\");\n\t}\n\tif (authUser.getAuthId() == null) {\n\t\tthrow new IllegalArgumentException(\"AuthUser must have an auth id\");\n\t}\n\tif (authUser.getAuthId().isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"AuthUser must have an auth id\");\n\t}\n\n\tString authSource = authUser.getAuthSource();\n\tString authId = authUser.getAuthId();\n\tString name = authUser.getName();\n\tString email = authUser.getEmail();\n\tString avatar = authUser.getAvatar();\n\tString password = <PASSWORD>();\n\tboolean enabled = authUser.isEnabled();\n\n\t// Create the user\n\tUser user = new User();\n\tuser.setName(name);\n\tuser.setEmail(email);\n\tuser.setAvatar(avatar);\n\tuser.setEnabled(enabled);\n\tuser.setState(UserState.NEW);\n\n\t// Set the password if the auth source is email and the password is not null\n\tif (authSource.equals(AuthSource.email.toString()) && password!= null &&!password.isEmpty()) {\n\t\tuser.setPassword(password);\n\t}\n\n\t// Set the user's connections\n\tuser.setConnections(authUser.getConnections());\n\n\t// Create the user's connections\n\treturn createUserConnections(user)\n\t\t.then(Mono.defer(() -> {\n\t\t\t// Save the user\n\t\t\treturn userRepository.save(user);\n\t\t}));\n}\n", "CodeBleu_score": 41.569749776268594}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser)\tMono<User> newUser = Mono.defer(() -> {\n\t\tUser newUser = new User();\n\t\tnewUser.setName(authUser.getName());\n\t\tnewUser.setState(UserState.NEW);\n\t\tnewUser.setEnabled(true);\n\t\tnewUser.setAvatarLink(authUser.getAvatarLink());\n\n\t\tif (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getPassword()!= null) {\n\t\t\tString encryptedPassword = passwordEncoder.encode(authUser.getPassword());\n\t\t\tnewUser.setPassword(encryptedPassword);\n\t\t}\n\n\t\treturn Mono.just(newUser);\n\t});\n\n\tMono<User> userWithConnections = newUser.zipWith(Mono.defer(() -> {\n\t\treturn userConnectionService.createConnectionsFromAuthUser(authUser);\n\t})).map(tuple -> {\n\t\tUser newUser = tuple.getT1();\n\t\tSet<UserConnection> connections = tuple.getT2();\n\t\tnewUser.setConnections(connections);\n\t\tnewUser.setNew(true);\n\t\treturn newUser;\n\t});\n\n\treturn userWithConnections.flatMap(userRepository::save);\n}\n", "CodeBleu_score": 46.91379140587246}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email)\treturn Mono.just(email)\n\t\t.map(e -> new EmailConnection(e))\n\t\t.flatMap(connection -> userRepository.addConnection(user, connection))\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t.onErrorResume(e -> Mono.error(new EmailBindingException(e)));\n}\n", "CodeBleu_score": 17.02815151991957}, {"code": "public Mono<Boolean> bindEmail(User user, String email)\treturn emailRepository.createConnection(user.getId(), email).onErrorResume(DuplicateKeyException.class, e -> Mono.just(ErrorCode.EMAIL_ALREADY_BOUND));\n}\n", "CodeBleu_score": 10.49512580021929}, {"code": "public Mono<Boolean> bindEmail(User user, String email)\treturn Mono.just(email)\n\t\t.map(e -> new EmailConnection(e, \"email\", true))\n\t\t.map(connection -> user.addConnection(connection))\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.error(new EmailAlreadyBoundException(email)))\n\t\t.then(Mono.defer(() -> userRepository.save(user)))\n\t\t.map(user -> true);\n}\n", "CodeBleu_score": 17.691596612819378}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)\treturn userRepository.findById(userId)\n\t\t.filter(user -> {\n\t\t\tif (!passwordEncoder.matches(oldPassword, user.getPassword())) {\n\t\t\t\treturn Mono.error(new InvalidPasswordException(\"Invalid password\"));\n\t\t\t}\n\t\t\treturn Mono.just(true);\n\t\t})\n\t\t.flatMap(user -> {\n\t\t\tuser.setPassword(passwordEncoder.encode(newPassword));\n\t\t\treturn userRepository.save(user);\n\t\t})\n\t\t.map(user -> true);\n}\n", "CodeBleu_score": 23.541201671684426}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)\treturn userRepository.findById(userId)\n\t\t.flatMap(user -> {\n\t\t\tif (user.getPassword().equals(passwordEncoder.encode(oldPassword))) {\n\t\t\t\tuser.setPassword(passwordEncoder.encode(<PASSWORD>));\n\t\t\t\treturn userRepository.save(user);\n\t\t\t} else {\n\t\t\t\treturn Mono.error(new IllegalArgumentException(\"Invalid password\"));\n\t\t\t}\n\t\t})\n\t\t.map(user -> true);\n}\n", "CodeBleu_score": 20.73982401786465}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword)\treturn Mono.from(userRepository.findById(userId)\n\t\t\t.switchIfEmpty(Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND, \"User not found\"))))\n\t\t\t.filter(user -> user.getPassword().equals(passwordEncoder.encode(oldPassword)))\n\t\t\t.map(user -> {\n\t\t\t\tuser.setPassword(passwordEncoder.encode(newPassword));\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(userRepository::save)\n\t\t\t.map(user -> true)\n\t\t\t.switchIfEmpty(Mono.error(new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Invalid password\")));\n}\n", "CodeBleu_score": 32.00177028512052}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)\nList<Map<String, String>> userDetailGroups = new ArrayList<>();\n", "CodeBleu_score": 9.698839062056651}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)\tList<Map<String, String>> groups = new ArrayList<>();\n\tif (withoutDynamicGroups) {\n\t\treturn Mono.just(groups);\n\t}\n\treturn groupService.getUserGroups(orgMember, locale)\n\t\t\t.filter(group ->!group.isAllUsersGroup())\n\t\t\t.map(group -> {\n\t\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\t\tgroupMap.put(\"id\", group.getId());\n\t\t\t\tgroupMap.put(\"name\", group.getName());\n\t\t\t\treturn groupMap;\n\t\t\t}).collectList()\n\t\t\t.map(groups::addAll);\n}\n", "CodeBleu_score": 28.996075104397377}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale)\tList<Mono<Group>> groupsMono = new ArrayList<>();\n\tif (orgMember.isAdmin()) {\n\t\tgroupsMono.add(groupService.getGroupsByRole(Role.ADMIN, locale));\n\t} else if (!withoutDynamicGroups) {\n\t\tgroupsMono.add(groupService.getGroupsByRole(Role.USER, locale));\n\t}\n\tgroupsMono.add(groupService.getGroupsByMember(orgMember, locale));\n\treturn Flux.merge(groupsMono).collectList().map(groups -> groups.stream().filter(group ->!group.isAllUsersGroup())\n\t\t\t.map(group -> new HashMap<String, String>() {{\n\t\t\t\tput(\"id\", group.getId());\n\t\t\t\tput(\"name\", group.getName());\n\t\t\t}}).collect(Collectors.toList()));\n}\n", "CodeBleu_score": 33.732729163999586}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setUserId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus);\n}", "CodeBleu_score": 30.983416055672308}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)\treturn Mono.just(new UserStatus(userId, true))\n\t\t.map(userStatus -> mongoUpsertHelper.doUpsert(userStatus, UserStatus.class, UserStatus.class))\n\t\t.map(result -> result.getUpsertedId()!= null);\n}\n", "CodeBleu_score": 23.443934432963864}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId)\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setUserId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus);\n}\n", "CodeBleu_score": 30.983416055672308}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"Cache.ClearMatching: partition predicate cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"Cache.ClearMatching: value predicate cannot be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tpartitions := c.Partitions()\n\tfor _, p := range partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}\n", "CodeBleu_score": 37.38540439733096}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\twg := sync.WaitGroup{}\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tfor k, v := range p.entries {\n\t\t\t\t\tif predicateValue(k, v) {\n\t\t\t\t\t\tp.Delete(k)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}\n", "CodeBleu_score": 42.07932323381543}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) \tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.closed {\n\t\treturn\n\t}\n\tc.runGroup.Add(1)\n\tgo func() {\n\t\tdefer c.runGroup.Done()\n\t\tfor partitionName, partition := range c.partitions {\n\t\t\tif predicatePartition(partitionName, partition) {\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t}\n\t\t}\n\t}()\n}\n", "CodeBleu_score": 36.39003005329748}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(numPartitions) * float64(totalWeightQuantity)))\n}\n", "CodeBleu_score": 32.83688453650401}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tmaxSizePerPartition := totalWeightQuantity / numPartitions\n\tif maxItemsTotal > 0 {\n\t\tmaxSizePerPartition = int(math.Ceil(float64(maxSizePerPartition) / float64(maxItemsTotal)))\n\t}\n\treturn maxSizePerPartition\n}\n", "CodeBleu_score": 43.39254917795553}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"calculateMaxSizePerPartition: numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := averageWeightPerPartition / maxItemsTotal\n\treturn maxSizePerPartition\n}\n", "CodeBleu_score": 45.34229937895245}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap()\tMap<String, Object> contributorMap = new HashMap<String, Object>();\n\tDatabaseMetaData dbmd = getConnection().getMetaData();\n\ttry {\n\t\tif (dbmd!= null) {\n\t\t\tString databaseProductName = dbmd.getDatabaseProductName();\n\t\t\tString databaseProductVersion = dbmd.getDatabaseProductVersion();\n\t\t\tcontributorMap.put(\"databaseProductName\", databaseProductName);\n\t\t\tcontributorMap.put(\"databaseProductVersion\", databaseProductVersion);\n\t\t}\n\t} catch (SQLException e) {\n\t\tlogger.error(\"Error while retrieving database connection metadata\", e);\n\t}\n\treturn contributorMap;\n}\n", "CodeBleu_score": 46.97762986859495}, {"code": "public Map<String, Object> contributorMap()\tMap<String, Object> map = new HashMap<String, Object>();\n\tConnection connection = null;\n\ttry {\n\t\tconnection = this.getConnection();\n\t\tDatabaseMetaData meta = connection.getMetaData();\n\t\tString productName = meta.getDatabaseProductName();\n\t\tString productVersion = meta.getDatabaseProductVersion();\n\t\tif (productName!= null) {\n\t\t\tmap.put(\"productName\", productName);\n\t\t}\n\t\tif (productVersion!= null) {\n\t\t\tmap.put(\"productVersion\", productVersion);\n\t\t}\n\t} catch (Exception e) {\n\t\t// ignore\n\t} finally {\n\t\tif (connection!= null) {\n\t\t\ttry {\n\t\t\t\tconnection.close();\n\t\t\t} catch (Exception e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n}\n", "CodeBleu_score": 44.01258799934418}, {"code": "public Map<String, Object> contributorMap()\tMap<String, Object> contributorMap = new HashMap<>();\n\tConnection connection = getConnection();\n\ttry {\n\t\tDatabaseMetaData dbmd = connection.getMetaData();\n\t\tif (dbmd!= null) {\n\t\t\tcontributorMap.put(\"databaseProductName\", dbmd.getDatabaseProductName());\n\t\t\tcontributorMap.put(\"databaseProductVersion\", dbmd.getDatabaseProductVersion());\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tlogger.error(\"Error while attempting to retrieve database metadata\", e);\n\t}\n\tfinally {\n\t\tif (connection!= null) {\n\t\t\ttry {\n\t\t\t\tconnection.close();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlogger.error(\"Error while attempting to close connection\", e);\n\t\t\t}\n\t\t}\n\t}\n\treturn contributorMap;\n}\n", "CodeBleu_score": 42.430004120292985}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)\t// Get the user settings from the configuration map.\n\tString userSettings = configMap.get(\"userSettings\");\n\tif (userSettings == null) {\n\t\t// Disable registration and email verification on registration.\n\t\tinfo.setRegisterEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t} else {\n\t\t// Update the GlobalInfo object with the user settings.\n\t\tJSONObject json = new JSONObject(userSettings);\n\t\tinfo.setRegisterEnabled(json.optBoolean(\"registerEnabled\", true));\n\t\tinfo.setEmailVerificationEnabled(json.optBoolean(\"emailVerificationEnabled\", true));\n\t}\n}\n", "CodeBleu_score": 37.25515103465373}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)\tif (configMap.containsKey(ConfigKeys.USER_SETTINGS)) {\n\t\tUserSettings userSettings = configMap.get(ConfigKeys.USER_SETTINGS);\n\t\tinfo.setUserSettings(userSettings);\n\t}\n}\n", "CodeBleu_score": 16.244685953408666}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap)\tif (configMap.containsKey(\"registration\")) {\n\t\tinfo.setRegistrationEnabled(configMap.getBoolean(\"registration\"));\n\t}\n\tif (configMap.containsKey(\"emailVerification\")) {\n\t\tinfo.setEmailVerificationEnabled(configMap.getBoolean(\"emailVerification\"));\n\t}\n}\n", "CodeBleu_score": 14.593163117255958}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart()\ttry {\n\t\t// Create a new thread group and thread to execute the restart process.\n\t\tThreadGroup threadGroup = new ThreadGroup(\"Restart\");\n\t\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader.\n\t\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\t\tThread.currentThread().setContextClassLoader(Restart.class.getClassLoader());\n\n\t\t\t\t\t// Create a new instance of the application class and execute the application's main method.\n\t\t\t\t\tClass<?> applicationClass = Class.forName(Restart.APPLICATION_CLASS_NAME);\n\t\t\t\t\tMethod mainMethod = applicationClass.getMethod(\"main\", new Class[] { String[].class });\n\t\t\t\t\tmainMethod.invoke(null, new Object[] { Restart.APPLICATION_ARGUMENTS });\n\t\t\t\t} catch (Exception exception) {\n\t\t\t\t\texception.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Start the thread.\n\t\tthread.start();\n\n\t\t// Return a message indicating the restart has begun.\n\t\treturn \"The application has begun restarting. The application will restart in 10 seconds.\";\n\t} catch (Exception exception) {\n\t\texception.printStackTrace();\n\t\treturn \"An error occurred while attempting to restart the application.\";\n\t}\n}\n", "CodeBleu_score": 44.08997213408152}, {"code": "public Object restart()\t// Create a new thread group and thread to execute the restart process.\n\tThreadGroup threadGroup = new ThreadGroup(\"Restart\");\n\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader.\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tThread.currentThread().setContextClassLoader(Restart.class.getClassLoader());\n\n\t\t\t\t// Start the thread.\n\t\t\t\tThread.currentThread().start();\n\n\t\t\t\t// Return a message indicating the restart has begun.\n\t\t\t\treturn \"Restart has begun.\";\n\t\t\t}\n\t\t\tcatch (Exception exception) {\n\t\t\t\t// Return an error message.\n\t\t\t\treturn \"Error: \" + exception.getMessage();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Start the thread.\n\tthread.start();\n\n\t// Return a message indicating the restart has begun.\n\treturn \"Restart has begun.\";\n}\n", "CodeBleu_score": 45.05730294864725}, {"code": "public Object restart()\tThreadGroup threadGroup = new ThreadGroup(\"Restart Thread Group\");\n\tthreadGroup.setDaemon(false);\n\tThread restartThread = new Thread(threadGroup, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t\t\t\tThread.currentThread().setContextClassLoader(classLoader);\n\t\t\t\tString[] args = new String[0];\n\t\t\t\tString[] jvmArgs = new String[0];\n\t\t\t\tString[] commandLineArgs = new String[0];\n\t\t\t\tString[] classPathArgs = new String[0];\n\t\t\t\tString[] classPathArray = new String[0];\n\t\t\t\tString[] classPathStrings = new String[0];\n\t\t\t\tString[] classPath = new String[0];\n\t\t\t\tString[] classPathStrings1 = new String[0];\n\t\t\t\tString[] classPathStrings2 = new String[0];\n\t\t\t\tString[] classPathStrings3 = new String[0];\n\t\t\t\tString[] classPathStrings4 = new String[0];\n\t\t\t\tString[] classPathStrings5 = new String[0];\n\t\t\t\tString[] classPathStrings6 = new String[0];\n\t\t\t\tString[] classPathStrings7 = new String[0];\n\t\t\t\tString[] classPathStrings8 = new String[0];\n\t\t\t\tString[] classPathStrings9 = new String[0];\n\t\t\t\tString[] classPathStrings10 = new String[0];\n\t\t\t\tString[] classPathStrings11 = new String[0];\n\t\t\t\tString[] classPathStrings12 = new String[0];\n\t\t\t\tString[] classPathStrings13 = new String[0];\n\t\t\t\tString[] classPathStrings14 = new String[0];\n\t\t\t\tString[] classPathStrings15 = new String[0];\n\t\t\t\tString[] classPathStrings16 = new String[0];\n\t\t\t\tString[] classPathStrings17 = new String[0];\n\t\t\t\tString[] classPathStrings18 = new String[0];\n\t\t\t\tString[] classPathStrings19 = new String[0];\n\t\t\t\tString[] classPathStrings20 = new String[0];\n\t\t\t\tString[] classPathStrings21 = new String[0];\n\t\t\t\tString[] classPathStrings22 = new String[0];\n\t\t\t\tString[] classPathStrings23 = new String[0];", "CodeBleu_score": 36.77038669714137}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }\n}", "CodeBleu_score": 82.83081219616841}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) ObjectMapper mapper = new ObjectMapper();\n mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n mapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true);\n mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);\n mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n mapper.configure(SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS, false);\n mapper.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false);\n mapper.configure(SerializationFeature.WRITE_NULL_STRING_VALUES, false);\n mapper.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false);\n mapper.configure(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED, false);\n mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n mapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n mapper.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, true);\n mapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, true);\n mapper.configure(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES, true);\n mapper.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES, true);\n mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n mapper.configure(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS, true);\n mapper.configure(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, true);\n mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, true);\n mapper.configure(DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES, true);\n mapper.configure(DeserializationFeature.WRAP_EXCEPTIONS, true);\n mapper.configure(DeserializationFeature.EAGER_DESERIALIZER_FETCH, true);\n mapper.configure(DeserializationFeature.UNWRAP_ROOT_VALUE, true);\n mapper", "CodeBleu_score": 16.403448762263935}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(getObjectMapper()));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(getObjectMapper()));\n }\n */\n\n}\n", "CodeBleu_score": 50.539850380654705}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection()\treturn route(GET(\"/console/**\"), request -> accept(HTML).filter(not(WebSocketRequest.class)).andThen(new Function<ServerRequest, ServerResponse>() {\n\t\t@Override\n\t\tpublic ServerResponse apply(ServerRequest request) {\n\t\t\treturn ok().contentType(MediaType.TEXT_HTML).bodyValue(new ClassPathResource(\"console/index.html\"));\n\t\t}\n\t}));\n}\n", "CodeBleu_score": 21.876510927941368}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()\treturn route(GET(\"/console/**\"), request -> accept(TEXT_HTML)\n\t\t\t.filter(this::isNotWebSocketRequest)\n\t\t\t.filter(this::isNotConsoleAssetsRequest)\n\t\t\t.andThen(request::accepted)\n\t\t\t.andThen(this::consoleIndex));\n}\n", "CodeBleu_score": 13.948821724071635}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection()\treturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.not(RequestPredicates.websocket())),\n\t\t\tthis::consoleIndex);\n}\n", "CodeBleu_score": 19.07790430623236}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect()\treturn route(GET(\"/uc/**\"), request -> accept(MediaType.TEXT_HTML)\n\t\t\t.and(not(isWebSocketUpgrade())).and(not(path(\"/uc/assets/**\")))\n\t\t\t.and(UC_LOCATION.map(ucLocation -> ucLocation.resolve(\"index.html\"))).map(ucIndex -> ok().contentType(MediaType.TEXT_HTML)\n\t\t\t.body(fromFile(ucIndex))));\n}\n", "CodeBleu_score": 25.968680681821443}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()\treturn route(GET(\"/uc/**\"), request -> request.contentType(TEXT_HTML)\n\t\t\t.and(not(isWebSocketUpgrade())).and(not(path(\"/uc/assets/**\"))).and(acceptsTextHtml())\n\t\t\t.uri(ucLocation() + \"/index.html\"));\n}\n", "CodeBleu_score": 18.838603529616254}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect()\treturn route(GET(\"/uc/**\"), accept(MediaType.TEXT_HTML), request -> {\n\t\tif (request.headers().get(HttpHeaders.UPGRADE)!= null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (request.path().equals(\"/uc/\")) {\n\t\t\treturn ucIndex(request);\n\t\t}\n\t\tif (request.path().equals(\"/uc\")) {\n\t\t\treturn ucIndex(request);\n\t\t}\n\t\tif (request.path().startsWith(\"/uc/assets/\")) {\n\t\t\treturn null;\n\t\t}\n\t\treturn ucIndex(request);\n\t});\n}\n", "CodeBleu_score": 23.49547130119704}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository\tReactiveIndexedSessionRepository<MapSession> sessionRepository = new ReactiveRedisIndexedSessionRepository(MapSession.class, redisConnectionFactory);\n\tsessionRepository.setDefaultMaxInactiveInterval(serverProperties.getSession().getTimeout());\n\treturn sessionRepository;\n}\n", "CodeBleu_score": 26.22222160297017}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository\tReactiveIndexedSessionRepository<MapSession> sessionRepository = new ReactiveIndexedSessionRepository<>();\n\tsessionRepository.setSessionMap(new ConcurrentHashMap<>());\n\tsessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(serverProperties.getSession().getTimeout()));\n\treturn sessionRepository;\n}", "CodeBleu_score": 29.98503387146491}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository\tReactiveIndexedSessionRepository<MapSession> sessionRepository = new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n\tsessionRepository.setDefaultMaxInactiveInterval(serverProperties.getSession().getTimeout());\n\treturn sessionRepository;\n}\n", "CodeBleu_score": 30.479755039459455}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().getTwoFactorAuthentication().isEnabled());\n\treturn userDetailsService;\n}\n", "CodeBleu_score": 47.02947668777118}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tif (haloProperties.getSecurity().getTwoFactorAuthentication().isEnabled()) {\n\t\tuserDetailsService.setTwoFactorAuthenticationService(new DefaultTwoFactorAuthenticationService(haloProperties));\n\t}\n\treturn userDetailsService;\n}\n", "CodeBleu_score": 46.18137032720397}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties)\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailService.setEnable2fa(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n\treturn userDetailService;\n}\n", "CodeBleu_score": 48.33341272714022}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner()\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(displayName);\n\tif (email!= null) {\n\t\towner.setEmail(email);\n\t} else {\n\t\towner.setEmail(\"\");\n\t}\n\towner.setAvatarUrl(avatarUrl);\n\towner.setUrl(websiteUrl);\n\treturn owner;\n}\n", "CodeBleu_score": 27.16529653135217}, {"code": "public Comment.CommentOwner toCommentOwner()\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.kind = \"email\";\n\towner.displayName = displayName;\n\tif (email!= null) {\n\t\towner.email = email;\n\t}\n\towner.avatar = new Comment.CommentOwner.Avatar();\n\towner.avatar.url = avatarUrl;\n\towner.avatar.isDefault = true;\n\towner.website = new Comment.CommentOwner.Website();\n\towner.website.url = websiteUrl;\n\treturn owner;\n}\n", "CodeBleu_score": 28.983211051356527}, {"code": "public Comment.CommentOwner toCommentOwner()\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(displayName);\n\tif (email!= null) {\n\t\towner.setEmail(email);\n\t}\n\towner.setAvatarUrl(avatarUrl);\n\towner.setUrl(websiteUrl);\n\treturn owner;\n}\n", "CodeBleu_score": 26.194837259933028}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)\tif (post.owner.kind == \"user\") {\n\t\treturn post.owner.name == commentOwner.name;\n\t} else {\n\t\tUser user = User.query().filter(User.email == post.owner.name).get();\n\t\treturn user.email == commentOwner.name;\n\t}\n}\n", "CodeBleu_score": 31.60552298628848}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)\tif (post.owner.kind == \"user\") {\n\t\treturn post.owner.name == commentOwner.name;\n\t} else {\n\t\tUser user = User.query(User.email == post.owner.name).get();\n\t\treturn user.email == commentOwner.name;\n\t}\n}\n", "CodeBleu_score": 26.63520505359005}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner)\tif (post.owner.kind == \"user\") {\n\t\treturn post.owner.name == commentOwner.name;\n\t} else {\n\t\tUser user = User.get(post.owner.name);\n\t\treturn user.email == commentOwner.name;\n\t}\n}\n", "CodeBleu_score": 17.442075047192183}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions()\tListOptions options = new ListOptions();\n\tString fieldQuery = \"\";\n\tif (labelSelector!= null) {\n\t\tfieldQuery += labelSelector;\n\t}\n\tif (fieldSelector!= null) {\n\t\tif (fieldQuery.length() > 0) {\n\t\t\tfieldQuery += \",\";\n\t\t}\n\t\tfieldQuery += fieldSelector;\n\t}\n\tif (fieldQuery.length() > 0) {\n\t\toptions.setFieldSelector(fieldQuery);\n\t}\n\tif (keyword!= null) {\n\t\toptions.setKeyword(keyword);\n\t}\n\tif (owner!= null) {\n\t\toptions.setOwner(owner);\n\t}\n\treturn options;\n}\n", "CodeBleu_score": 18.538489091490128}, {"code": "public ListOptions toListOptions()\tListOptions listOptions = new ListOptions();\n\tString fieldSelector = \"\";\n\tif (labelSelector!= null) {\n\t\tfieldSelector = labelSelector;\n\t}\n\tif (fieldSelector.length() > 0) {\n\t\tfieldSelector += \",\";\n\t}\n\tif (fieldSelector.length() == 0 || fieldSelector.endsWith(\",\")) {\n\t\tfieldSelector += \"metadata.name=\" + name;\n\t} else {\n\t\tfieldSelector += \"metadata.name=\" + name + \",\" + fieldSelector;\n\t}\n\tif (ownerName!= null) {\n\t\tif (fieldSelector.length() > 0) {\n\t\t\tfieldSelector += \",\";\n\t\t}\n\t\tfieldSelector += \"metadata.ownerReferences.name=\" + ownerName;\n\t}\n\tlistOptions.setFieldSelector(fieldSelector);\n\treturn listOptions;\n}\n", "CodeBleu_score": 21.59079067903667}, {"code": "public ListOptions toListOptions()\tListOptions options = new ListOptions();\n\tString fieldSelector = \"\";\n\tString labelSelector = \"\";\n\tString keyword = \"\";\n\tString ownerName = \"\";\n\tString ownerUuid = \"\";\n\tif (getSelectors()!= null) {\n\t\tfor (Selector selector : getSelectors()) {\n\t\t\tif (selector.getKeyword()!= null) {\n\t\t\t\tkeyword = selector.getKeyword();\n\t\t\t}\n\t\t\tif (selector.getOwnerName()!= null) {\n\t\t\t\townerName = selector.getOwnerName();\n\t\t\t}\n\t\t\tif (selector.getOwnerUuid()!= null) {\n\t\t\t\townerUuid = selector.getOwnerUuid();\n\t\t\t}\n\t\t\tif (selector.getLabelSelector()!= null) {\n\t\t\t\tlabelSelector = selector.getLabelSelector();\n\t\t\t}\n\t\t\tif (selector.getFieldSelector()!= null) {\n\t\t\t\tfieldSelector = selector.getFieldSelector();\n\t\t\t}\n\t\t}\n\t}\n\tif (keyword!= null &&!keyword.isEmpty()) {\n\t\tfieldSelector += \"keyword=\" + keyword;\n\t}\n\tif (ownerName!= null &&!ownerName.isEmpty()) {\n\t\tfieldSelector += \",ownerName=\" + ownerName;\n\t}\n\tif (ownerUuid!= null &&!ownerUuid.isEmpty()) {\n\t\tfieldSelector += \",ownerUuid=\" + ownerUuid;\n\t}\n\tif (labelSelector!= null &&!labelSelector.isEmpty()) {\n\t\toptions.setLabelSelector(labelSelector);\n\t}\n\toptions.setFieldSelector(fieldSelector);\n\treturn options;\n}\n", "CodeBleu_score": 26.53269117313662}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName)\tif (commentName == null) {\n\t\treturn Mono.just(new CommentStats(0, 0));\n\t} else {\n\t\treturn counterRepository.findById(commentName).map(counter -> new CommentStats(counter.getUpvotes(), counter.getDownvotes()));\n\t}\n}\n", "CodeBleu_score": 17.491839159814834}, {"code": "Mono<CommentStats> fetchStats(String commentName)\tif (commentName == null) {\n\t\treturn Mono.just(CommentStats.builder().upvotes(0).build());\n\t}\n\treturn counterRepository.findById(commentName).map(CommentStats::fromCounter);\n}\n", "CodeBleu_score": 15.63179810517209}, {"code": "Mono<CommentStats> fetchStats(String commentName)\tif (commentName == null) {\n\t\treturn Mono.just(new CommentStats());\n\t}\n\treturn commentCounterRepository.findById(commentName)\n\t\t\t.map(counter -> new CommentStats(counter.getUpvotes()));\n}\n", "CodeBleu_score": 35.051458169486295}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity)\t// Create a subscriber from the given user identity.\n\tSubscriber subscriber = new Subscriber(identity);\n\n\t// Set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name.\n\tInterest interest = new Interest();\n\tinterest.setInterestType(InterestType.SUBSCRIBE);\n\tinterest.setInterestReason(InterestReason.SOMEONE_REPLIED_TO_YOU);\n\tinterest.setCondition(new Condition(\"replied_owner\", Operator.EQUALS, identity.getName()));\n\n\t// Subscribe the user to the notification center and block until the subscription is completed.\n\tNotificationCenter.subscribe(subscriber, interest);\n}\n", "CodeBleu_score": 37.26034709938819}, {"code": "void subscribeReply(UserIdentity identity)\t// create a subscriber from the given identity\n\tSubscriber subscriber = new Subscriber(identity);\n\t// set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name\n\tsubscriber.setInterestReason(InterestReason.SOMEONE_REPLIED_TO_YOU, \"name = '\" + identity.getName() + \"'\");\n\t// subscribe the user to the notification center and block until the subscription is completed\n\tNotificationCenter.getInstance().subscribe(subscriber, new NotificationListener() {\n\t\t@Override\n\t\tpublic void handleNotification(Notification notification) {\n\t\t\tSystem.out.println(\"Subscription completed for \" + subscriber.getIdentity().getName());\n\t\t}\n\t});\n}\n", "CodeBleu_score": 31.7881535158474}, {"code": "void subscribeReply(UserIdentity identity)\t// Create a subscriber from the user identity\n\tSubscriber subscriber = Subscriber.Builder(identity).build();\n\n\t// Set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name\n\tInterestSubscription interestSubscription = InterestSubscription.Builder()\n\t\t.setSubscriptionId(UUID.randomUUID().toString())\n\t\t.setReason(InterestSubscription.Reason.someoneRepliedToYou())\n\t\t.setCondition(InterestSubscription.Condition.ownerMatches(identity.getName()))\n\t\t.build();\n\n\t// Subscribe the user to the notification center\n\tNotificationCenter.subscribe(subscriber, interestSubscription);\n\n\t// Block until the subscription is completed\n\tNotificationCenter.waitForSubscriptionToComplete(subscriber, interestSubscription);\n}\n", "CodeBleu_score": 37.48898321753148}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment)\treturn Mono.fromSupplier(() -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApprovedOn(OffsetDateTime.now());\n\t\treturn comment;\n\t}).retryBackoff(3, Duration.ofSeconds(1), Duration.ofMillis(500))\n\t\t.doOnNext(updatedComment -> {\n\t\t\tcomment.setApproved(updatedComment.isApproved());\n\t\t\tcomment.setApprovedOn(updatedComment.getApprovedOn());\n\t\t})\n\t\t.flatMap(updatedComment -> client.put().uri(\"/comments/{commentId}\", comment.getId())\n\t\t\t.body(BodyInserters.fromValue(updatedComment))\n\t\t\t.retrieve()\n\t\t\t.onStatus(status -> status.is4xxClientError(), response -> response.bodyToMono(Error.class)\n\t\t\t\t.map(error -> {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid comment: \" + error.getMessage());\n\t\t\t\t}))\n\t\t\t.bodyToMono(Comment.class));\n}\n", "CodeBleu_score": 28.60476377654163}, {"code": "private Mono<Comment> approveComment(Comment comment)\treturn client.update(comment, new CommentUpdate().approved(true).version(comment.version()))\n\t\t.retry(1)\n\t\t.onErrorResume(OptimisticLockException.class, e -> client.update(comment, new CommentUpdate().approved(true).version(comment.version())))\n\t\t.map(updatedComment -> {\n\t\t\tcomment.approved(true);\n\t\t\tcomment.updated(Instant.now());\n\t\t\treturn comment;\n\t\t});\n}\n", "CodeBleu_score": 31.783273857500312}, {"code": "private Mono<Comment> approveComment(Comment comment)\treturn Mono.defer(() -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApproveTime(Instant.now());\n\t\treturn client.update(comment);\n\t})\n\t.retry(OptimisticLockingFailureException.class, 3);\n}\n", "CodeBleu_score": 20.29706554753886}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record($this->record);\n\t}\n\n\treturn $action;\n}\n", "CodeBleu_score": 44.894147495986495}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticActionif ($action instanceof MountableAction) {", "CodeBleu_score": 15.466609891690291}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}\n", "CodeBleu_score": 46.11195104393794}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static\t$url = $this->getSuccessRedirectUrl();\n\tif ($url!== null) {\n\t\t$this->redirect($url);\n\t}\n\treturn $this;\n}\n", "CodeBleu_score": 51.80978569565964}, {"code": "<?\npublic function dispatchSuccessRedirect(): static\tif(strlen($this->successRedirectUrl) > 0) {\n\t\theader(\"Location: \". $this->successRedirectUrl);\n\t\texit();\n\t}\n\treturn $this;\n}\n", "CodeBleu_score": 27.60626657460955}, {"code": "<?\npublic function dispatchSuccessRedirect(): static\t$successRedirect = $this->getSuccessRedirect();\n\tif ($successRedirect) {\n\t\t$this->redirect($successRedirect);\n\t}\n\treturn $this;\n}\n", "CodeBleu_score": 44.54619018755166}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void\t$tags = $state['tags'];\n\tif (!$record ||!$record->hasMethod('tags')) {\n\t\treturn;\n\t}\n\t$tagModelClass = $record->tags()->getModel();\n\t$tagIds = [];\n\tforeach ($tags as $tagName) {\n\t\t$tag = $tagModelClass::firstOrCreate(['name' => $tagName]);\n\t\t$tagIds[] = $tag->getKey();\n\t}\n\t$record->tags()->sync($tagIds);\n}\n", "CodeBleu_score": 27.136537210290935}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void\t$tagModel = $this->getTagsModel();\n\tif (!$record ||!$record->hasMethod('tags')) {\n\t\treturn;\n\t}\n\t$tagNames = $state[$this->name]?? [];\n\t$tagIds = $tagModel->findOrCreateIds($tagNames);\n\t$record->tags()->sync($tagIds);\n}\n", "CodeBleu_score": 21.159299465664787}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void\tif (!$record instanceof Taggable) {\n\t\treturn;\n\t}\n\t$tagNames = $state[static::FIELD_TAG_NAMES]?? [];\n\t$tagIds = [];\n\tforeach ($tagNames as $tagName) {\n\t\t$tag = Tag::where(Tag::FIELD_NAME, $tagName)->first();\n\t\tif ($tag === null) {\n\t\t\t$tag = Tag::create([\n\t\t\t\tTag::FIELD_NAME => $tagName,\n\t\t\t]);\n\t\t}\n\t\t$tagIds[] = $tag->getKey();\n\t}\n\t$record->syncTags($tagIds);\n}\n", "CodeBleu_score": 27.156175122560033}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repositoryName, err := utils.GetSpacePathAndNameFromRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(authz.UserScope, spacePath)\n\tresource := authz.NewResource(PipelineResourceType, pipelineIdentifier, repositoryName)\n\n\t// Check the permission.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 46.41930408463879}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, name, err := repo.SplitPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope, err := authz.NewRepositoryScope(spacePath, name)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tresource := authz.NewPipelineResource(pipelineIdentifier)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 45.821023622034595}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error \tspacePath, repoName, err := authz.GetSpaceAndRepoFromRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.NewRepositoryScope(spacePath, repoName)\n\tresource := authz.NewRepositoryResource(scope, pipelineIdentifier)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 44.90607878665418}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparentSpace, name := space.ParentSpace, space.Name\n\tscope := fmt.Sprintf(\"space:%s\", parentSpace)\n\tresource := fmt.Sprintf(\"space:%s:%s\", parentSpace, name)\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}\n", "CodeBleu_score": 44.09548426446466}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tparentSpace, name := types.SplitSpacePath(space.Path)\n\tscope := types.SpaceScope(parentSpace)\n\tresource := types.NewSpaceResource(name)\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}\n", "CodeBleu_score": 43.45862047399526}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error\tif permission == enum.PermissionNone {\n\t\treturn nil\n\t}\n\n\tif space.Parent!= nil {\n\t\tparentSpace := types.Space{\n\t\t\tName: space.Parent.Name,\n\t\t\tType: space.Parent.Type,\n\t\t}\n\t\treturn CheckSpace(ctx, authorizer, session, &parentSpace, permission)\n\t}\n\n\tscope := fmt.Sprintf(\"space:%s\", space.Name)\n\tresource := fmt.Sprintf(\"space:%s:%s\", space.Type, space.Name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}\n", "CodeBleu_score": 52.96835699161829}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\t// If the source is empty, marshal the data and return\n\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\t// Decode the source into a map\n\tvar sourceMap map[string]interface{}\n\tif err := json.Unmarshal(source, &sourceMap); err!= nil {\n\t\treturn nil, err\n\t}\n\t// Remove any unknown fields\n\tfor k := range sourceMap {\n\t\tif _, ok := data.(map[string]interface{})[k];!ok {\n\t\t\tdelete(sourceMap, k)\n\t\t}\n\t}\n\t// Encode the map to JSON\n\tresult, err := json.Marshal(sourceMap)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\t// Remove any trailing newline\n\tresult = bytes.TrimSuffix(result, []byte(\"\\n\"))\n\treturn result, nil\n}\n", "CodeBleu_score": 49.014467241677096}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif source == nil || len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\tvar payload map[string]interface{}\n\tif err := json.Unmarshal(source, &payload); err!= nil {\n\t\treturn nil, err\n\t}\n\tsanitized, err := json.Marshal(payload)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tsanitized = bytes.TrimSuffix(sanitized, []byte(\"\\n\"))\n\treturn sanitized, nil\n}\n", "CodeBleu_score": 42.336801736535556}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error)\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tvar payload map[string]any\n\tif err := json.Unmarshal(source, &payload); err!= nil {\n\t\treturn nil, err\n\t}\n\tpayload, err := json.Marshal(payload)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tpayload = bytes.TrimSuffix(payload, []byte(\"\\n\"))\n\treturn payload, nil\n}\n", "CodeBleu_score": 37.81467571410603}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\t// Validate the repository reference.\n\tif err := validateRepoRef(repoRef); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoClient.GetRepository(ctx, &repo_pb.GetRepositoryRequest{Repo: &types.Repo{Name: repoRef}})\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session's access to the repository.\n\tif err := auth.AuthorizeRepository(ctx, session, repoRef, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 45.88023806165477}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\t// Validate the repository reference.\n\tif err := c.validateRepositoryReference(repoRef); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repositoryService.GetRepository(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the access permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 44.889994596578056}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error)\t// Validate the repository reference.\n\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session's permissions on the repository.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}\n", "CodeBleu_score": 35.96892620138076}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    checkSanitizerEmpty,\n\t\tenum.CheckPayloadKindMarkdown: checkSanitizerMarkdown,\n\t\tenum.CheckPayloadKindRaw:      checkSanitizerRaw,\n\t\tenum.CheckPayloadKindPipeline: checkSanitizerPipeline,\n\t}\n\treturn checkSanitizers\n}\n", "CodeBleu_score": 30.213566636693145}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.EmptyPayloadKind] = sanitizeEmptyPayload\n\tcheckSanitizers[enum.RawPayloadKind] = sanitizeRawPayload\n\tcheckSanitizers[enum.MarkdownPayloadKind] = sanitizeMarkdownPayload\n\tcheckSanitizers[enum.PipelinePayloadKind] = sanitizePipelinePayload\n\treturn checkSanitizers\n}\n", "CodeBleu_score": 42.186706057534934}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.EmptyPayloadKind] = emptyCheckSanitizer\n\tcheckSanitizers[enum.RawPayloadKind] = rawCheckSanitizer\n\tcheckSanitizers[enum.MarkdownPayloadKind] = markdownCheckSanitizer\n\tcheckSanitizers[enum.PipelinePayloadKind] = pipelineCheckSanitizer\n\treturn checkSanitizers\n}\n", "CodeBleu_score": 41.99895646566726}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\tif self.renderer ~= nil then\n\t\treturn\n\tend\n\tself.renderer = self.screen.renderer\n\tself.screen.renderer.buffers[self.id] = self\n\tself.on_render = on_render\n\treturn self", "CodeBleu_score": 47.84883894701489}, {"code": "function Buffer:attach_to_renderer(on_render)\tif not self.attached_to_renderer then\n\t\tself.renderer:attach_buffer(self)\n\t\tself.attached_to_renderer = true\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 50.06099202685645}, {"code": "function Buffer:attach_to_renderer(on_render)\tif not self.attached_to_renderer then\n\t\tself.renderer:attach(self)\n\t\tself.attached_to_renderer = true\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 50.13815260113278}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\tif not self:valid() then\n\t\treturn\n\tend\n\tif self.watcher then\n\t\tself.watcher:stop()\n\t\tself.watcher = nil\n\tend\n\tif callback then\n\t\tlocal function watch_callback()\n\t\t\tif not self:valid() then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif self.filename and self.filename:len() > 0 then\n\t\t\t\tlocal file_info = fs.stat(self.filename)\n\t\t\t\tif file_info and file_info.mtime then\n\t\t\t\t\tif file_info.mtime ~= self.last_mtime then\n\t\t\t\t\t\tself.last_mtime = file_info.mtime\n\t\t\t\t\t\tcallback()\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tprint(\"Error: Could not stat file '\".. self.filename.. \"'\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tself.watcher = timer.new(watch_callback, 1)\n\t\tself.watcher:start()\n\tend", "CodeBleu_score": 43.797223494673155}, {"code": "function Buffer:watch(callback)\tif not self.valid then return end\n\tif not self.filename then return end\n\tif not callback then return end\n\n\tlocal watcher = nil\n\tif vim.loop.os_uname().sysname == \"Windows\" then\n\t\twatcher = vim.loop.new_fs_event()\n\telse\n\t\twatcher = vim.loop.new_fs_poll()\n\tend\n\n\tlocal function watch_callback(err, events)\n\t\tif err then\n\t\t\tvim.api.nvim_err_writeln(\"Error in file watcher: \".. err)\n\t\t\treturn\n\t\tend\n\t\tcallback()\n\tend\n\n\tlocal function watch_stop_callback()\n\t\tif watcher then\n\t\t\twatcher:close()\n\t\t\twatcher = nil\n\t\tend\n\tend\n\n\twatcher:start(self.filename, vim.loop.FS_EVENT_FLAG_NEW | vim.loop.FS_EVENT_FLAG_MODIFY, watch_callback)\n\tvim.api.nvim_buf_attach(self.buffer, false, {\n\t\ton_lines = watch_callback,\n\t\ton_detach = watch_stop_callback,\n\t\ton_close = watch_stop_callback\n\t})", "CodeBleu_score": 40.16105444879934}, {"code": "function Buffer:watch(callback)\tif self.valid and callback ~= nil then\n\t\tif self.filename ~= nil then\n\t\t\tif self.watch_id ~= nil then\n\t\t\t\tvim.loop.unwatch_file(self.watch_id)\n\t\t\tend\n\t\t\tself.watch_id = vim.loop.fs_watch(self.filename, function(err, events)\n\t\t\t\tif err ~= nil then\n\t\t\t\t\tvim.api.nvim_err_writeln(\"Error watching file: \".. err)\n\t\t\t\telse\n\t\t\t\t\tif events ~= nil and events ~= '' then\n\t\t\t\t\t\tcallback(self)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend)\n\t\telse\n\t\t\tvim.api.nvim_err_writeln(\"Buffer has no filename.\")\n\t\tend\n\tend", "CodeBleu_score": 42.030516564893574}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\tif self.hex ~= nil then\n\t\treturn self.hex\n\tend\n\tlocal spec = self.spec\n\tif spec == nil then\n\t\treturn nil\n\tend\n\tlocal fg = true\n\tif spec.background ~= nil then\n\t\tfg = false\n\tend\n\tlocal hl_group = self.hl_group\n\tif hl_group == nil then\n\t\treturn nil\n\tend\n\tlocal fg_hex = nil\n\tlocal bg_hex = nil\n\tif fg then\n\t\tfg_hex = vim.fn.synIDattr(vim.fn.hlID(hl_group), 'fg#')\n\telse\n\t\tbg_hex = vim.fn.synIDattr(vim.fn.hlID(hl_group), 'bg#')\n\tend\n\tif fg_hex ~= nil then\n\t\tself.hex = fg_hex\n\telseif bg_hex ~= nil then\n\t\tself.hex = bg_hex\n\telse\n\t\treturn nil\n\tend\n\treturn self.hex", "CodeBleu_score": 50.27042944483804}, {"code": "function Color:to_hex()\tif self.hex ~= nil then\n\t\treturn self.hex\n\tend\n\n\tlocal fg = self.spec.foreground\n\tlocal bg = self.spec.background\n\n\tif fg == nil and bg == nil then\n\t\treturn nil\n\tend\n\n\tif fg == nil then\n\t\tfg = bg\n\tend\n\n\tif bg == nil then\n\t\tbg = fg\n\tend\n\n\tlocal fg_hl = fg.highlight\n\tlocal bg_hl = bg.highlight\n\n\tif fg_hl == nil and bg_hl == nil then\n\t\treturn nil\n\tend\n\n\tif fg_hl == nil then\n\t\tfg_hl = bg_hl\n\tend\n\n\tif bg_hl == nil then\n\t\tbg_hl = fg_hl\n\tend\n\n\tlocal fg_hex = fg_hl.guifg\n\tlocal bg_hex = bg_hl.guibg\n\n\tif fg_hex == nil and bg_hex == nil then\n\t\treturn nil\n\tend\n\n\tif fg_hex == nil then\n\t\tfg_hex = bg_hex\n\tend\n\n\tif bg_hex == nil then\n\t\tbg_hex = fg_hex\n\tend\n\n\tself.hex = Color.to_hex_string(fg_hex)\n\treturn self.hex", "CodeBleu_score": 41.65990772189073}, {"code": "function Color:to_hex()\tif self.hex ~= nil then\n\t\treturn self.hex\n\tend\n\tlocal fg = vim.api.nvim_get_hl_by_name(self.name, true)\n\tif fg.foreground ~= nil then\n\t\tself.hex = fg.foreground\n\telse\n\t\tlocal bg = vim.api.nvim_get_hl_by_name(self.name, false)\n\t\tif bg.background ~= nil then\n\t\t\tself.hex = bg.background\n\t\telse\n\t\t\tself.hex = nil\n\t\tend\n\tend\n\tif self.hex ~= nil then\n\t\tself.hex = self:to_hex_string(self.hex)\n\t\tself.hex_cache[self.name] = self.hex\n\tend\n\treturn self.hex", "CodeBleu_score": 42.95791903372865}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\tbuffer.add_highlight(pattern, 0, -1, hl)", "CodeBleu_score": 8.390183372029275}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\tbuffer:add_highlight(\"pattern\", pattern, 0, -1, hl)\n\treturn self", "CodeBleu_score": 9.898094275785137}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tlocal start = 1\n\t\twhile true do\n\t\t\tlocal start_pos, end_pos = string.find(line, pattern, start, true)\n\t\t\tif start_pos == nil then break end\n\t\t\tbuffer:add_highlight(start_pos - 1, end_pos - 1, hl)\n\t\t\tstart = end_pos + 1\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 50.99642505757686}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\tlocal id = buffer.id.. row.. col\n\tbuffer:set_extmark(row, col, pos, {virt_text = {{text, hl}}, virt_text_pos = \"right_align\", priority = priority})\n\treturn id", "CodeBleu_score": 48.4941004536913}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\tif not self.virtual_text_enabled then return end\n\tlocal id = self:get_virtual_text_id(buffer, row, col)\n\tbuffer:set_extmark(row - 1, col - 1, id, {virt_text = { {text, hl} }, virt_text_pos = pos, priority = priority})\n\treturn id", "CodeBleu_score": 49.36376739286605}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\tlocal id = self.id_generator\n\tlocal id_str = tostring(id)\n\tself.id_generator = self.id_generator + 1\n\tbuffer.api.buf_set_extmark(buffer, pos, row, col, {virt_text = {{text, hl}}, virt_text_pos = pos, virt_text_id = id_str, priority = priority})\n\treturn id", "CodeBleu_score": 48.91823671769878}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\tlocal line = \"\"\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"\\n\" then\n\t\t\tcallback(line)\n\t\t\tline = \"\"\n\t\telse\n\t\t\tline = line.. char\n\t\tend\n\tend\n\tif line ~= \"\" then\n\t\tcallback(line)\n\tend", "CodeBleu_score": 27.21987428487428}, {"code": "function Spawn:parse_result(output, callback)\tlocal line = \"\"\n\tfor c in output:gmatch(\".\") do\n\t\tif c == \"\\n\" then\n\t\t\tcallback(line)\n\t\t\tline = \"\"\n\t\telse\n\t\t\tline = line.. c\n\t\tend\n\tend\n\tif line ~= \"\" then\n\t\tcallback(line)\n\tend", "CodeBleu_score": 24.609952439174553}, {"code": "function Spawn:parse_result(output, callback)\tlocal line = \"\"\n\tlocal is_line_continuation = false\n\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"\\n\" then\n\t\t\tif is_line_continuation then\n\t\t\t\tline = line.. \"\\n\"\n\t\t\t\tis_line_continuation = false\n\t\t\telse\n\t\t\t\tcallback(line)\n\t\t\t\tline = \"\"\n\t\t\tend\n\t\telse\n\t\t\tif is_line_continuation then\n\t\t\t\tline = line.. char\n\t\t\telse\n\t\t\t\tline = line.. char\n\t\t\t\tif char == \"\\r\" then\n\t\t\t\t\tis_line_continuation = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\tif line ~= \"\" then\n\t\tcallback(line)\n\tend", "CodeBleu_score": 46.93800595611454}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\tlocal watcher = self:get_watcher(path)\n\tif not watcher then\n\t\twatcher = self:create_watcher(path, handler)\n\t\twatcher:start()\n\tend\n\treturn watcher", "CodeBleu_score": 27.65204540619556}, {"code": "function Watcher:watch_file(path, handler)\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\tlocal watcher = uv.new_fs_event()\n\twatcher:start(path, handler, uv.FS_EVENT_RECURSIVE)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 41.29817790766675}, {"code": "function Watcher:watch_file(path, handler)\tif not handler then \n\t\terror(\"Handler must be specified\")\n\tend\n\tif self.watchers[path] then \n\t\treturn self.watchers[path]\n\tend\n\tlocal watcher = vim.loop.new_fs_event()\n\twatcher:start(path, vim.loop.FS_EVENT_RECURSIVE, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 46.09957154026558}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\tlocal lines = self.buffer:get_line_count()\n\tlocal hunks = {}\n\tlocal signs = {}\n\tlocal hunk_start = 0\n\tlocal hunk_end = 0\n\tlocal hunk_type = nil\n\tlocal hunk_priority = 0\n\tlocal hunk_line_count = 0\n\tlocal hunk_lines = {}\n\tlocal hunk_line = nil\n\tlocal hunk_line_index = 0\n\tlocal hunk_line_start = 0\n\tlocal hunk_line_end = 0\n\tlocal hunk_line_type = nil\n\tlocal hunk_line_priority = 0\n\tlocal hunk_line_text = nil\n\tlocal hunk_line_text_length = 0\n\tlocal hunk_line_text_start = 0\n\tlocal hunk_line_text_end = 0\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_line_text_priority = 0\n\tlocal hunk_line_text_type = nil\n\tlocal hunk_", "CodeBleu_score": 13.573970534585115}, {"code": "function GitBuffer:live_hunks()\tlocal lines = self.buffer:get_lines()\n\tif not lines then\n\t\treturn lines\n\tend\n\n\tlocal hunks = self.git:live_hunks(lines)\n\tif not hunks then\n\t\treturn hunks\n\tend\n\n\tself:clear_signs()\n\n\tfor _, hunk in pairs(hunks) do\n\t\tlocal start_line = hunk.start_line\n\t\tlocal end_line = hunk.end_line\n\t\tlocal lines = hunk.lines\n\n\t\tif hunk.type == \"add\" then\n\t\t\tfor line_number, line in pairs(lines) do\n\t\t\t\tif line_number == 1 then\n\t\t\t\t\tself.buffer:add_sign(start_line, \"GitSignsAdd\", \"Add\")\n\t\t\t\telse\n\t\t\t\t\tself.buffer:add_sign(start_line + line_number - 1, \"GitSignsAdd\", \"Add\")\n\t\t\t\tend\n\t\t\tend\n\t\telseif hunk.type == \"delete\" then\n\t\t\tfor line_number, line in pairs(lines) do\n\t\t\t\tif line_number == 1 then\n\t\t\t\t\tself.buffer:add_sign(start_line, \"GitSignsDelete\", \"Delete\")\n\t\t\t\telse\n\t\t\t\t\tself.buffer:add_sign(start_line + line_number - 1, \"GitSignsDelete\", \"Delete\")\n\t\t\t\tend\n\t\t\tend\n\t\telseif hunk.type == \"change\" then\n\t\t\tfor line_number, line in pairs(lines) do\n\t\t\t\tif line_number == 1 then\n\t\t\t\t\tself.buffer:add_sign(start_line, \"GitSignsChange\", \"Change\")\n\t\t\t\telse\n\t\t\t\t\tself.buffer:add_sign(start_line + line_number - 1, \"GitSignsChange\", \"Change\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\treturn hunks", "CodeBleu_score": 37.779642260601}, {"code": "function GitBuffer:live_hunks()\tif not self.git_object then\n\t\treturn \"No git object\"\n\tend\n\n\tlocal hunks, err = self.git_object:live_hunks(self.bufnr)\n\tif err then\n\t\treturn err\n\tend\n\n\tlocal signs = {}\n\tfor _, hunk in pairs(hunks) do\n\t\tlocal sign_id = hunk.sign_id\n\t\tsigns[sign_id] = {\n\t\t\ttype = hunk.type,\n\t\t\tpriority = hunk.priority,\n\t\t\thunk = hunk,\n\t\t}\n\tend\n\n\tvim.fn.sign_unplace(\"*\", { id = self.bufnr })\n\tfor _, sign in pairs(signs) do\n\t\tlocal hunk = sign.hunk\n\t\tlocal line_start = hunk.line_start\n\t\tlocal line_end = hunk.line_end\n\t\tlocal sign_type = sign.type\n\t\tlocal sign_priority = sign.priority\n\t\tlocal sign_id = hunk.sign_id\n\t\tvim.fn.sign_place(sign_id, \"GitSigns\", sign_type, self.bufnr, {\n\t\t\tline = line_start,\n\t\t\tpriority = sign_priority,\n\t\t})\n\t\tvim.fn.sign_place(sign_id, \"GitSigns\", sign_type, self.bufnr, {\n\t\t\tline = line_end,\n\t\t\tpriority = sign_priority,\n\t\t})\n\tend\n\n\tself.signs = signs\n\n\treturn hunks", "CodeBleu_score": 46.680198344385744}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\tlocal hunk = patch:hunk()\n\tlocal path = self:path()\n\tlocal temp_file = io.tmpfile()\n\ttemp_file:write(hunk:content())\n\ttemp_file:seek(\"set\", 0)\n\tlocal command = \"git -C \".. path.. \" apply --cached --unidiff-zero - \"\n\tlocal result = os.execute(command, temp_file)\n\ttemp_file:close()\n\tif result ~= 0 then\n\t\treturn \"Failed to stage hunk from patch\"\n\tend", "CodeBleu_score": 42.35646284116497}, {"code": "function GitObject:stage_hunk_from_patch(patch)\tlocal temp_file = io.tmpfile()\n\ttemp_file:write(patch)\n\ttemp_file:flush()\n\tlocal result, error = self:run_command(\"apply --cached --unidiff-zero -\")\n\ttemp_file:close()\n\treturn result, error", "CodeBleu_score": 34.11562274909904}, {"code": "function GitObject:stage_hunk_from_patch(patch)\tlocal tmp_file = os.tmpname()\n\tlocal tmp_file_handle = io.open(tmp_file, \"w\")\n\ttmp_file_handle:write(patch)\n\ttmp_file_handle:close()\n\tlocal cmd = \"git apply --cached \".. tmp_file\n\tlocal result = os.execute(cmd)\n\tos.remove(tmp_file)\n\tif result ~= 0 then\n\t\treturn \"Error staging hunk from patch\"\n\tend", "CodeBleu_score": 44.65905204484132}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier)\t// Create an OAuth request to the access token endpoint.\n\tOAuthRequest request = new OAuthRequest(Verb.POST, accessTokenUrl);\n\n\t// Add the necessary authentication header and body parameters to the request.\n\trequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\n\trequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n\t// Send the request and extract the access token from the response.\n\tToken accessToken = accessTokenExtractor.extract(request.send());\n\n\treturn accessToken;\n}\n", "CodeBleu_score": 47.1832347176769}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)\tOAuthRequest request = new OAuthRequest(Verb.POST, ACCESS_TOKEN_ENDPOINT);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, CLIENT_ID);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, CLIENT_SECRET);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, REDIRECT_URI);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\trequest.addBodyParameter(OAuthConstants.SCOPE, SCOPE);\n\tToken accessToken = service.getAccessToken(request, new OAuth20Service.OAuth20ServiceResponseHandler() {\n\t\t@Override\n\t\tpublic void onResponse(int statusCode, Map<String, String> headers, String content) throws IOException {\n\t\t\tSystem.out.println(\"Response status code: \" + statusCode);\n\t\t\tSystem.out.println(\"Response body: \" + content);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onException(Exception e) {\n\t\t\tSystem.out.println(\"Error: \" + e.getMessage());\n\t\t}\n\t});\n\treturn accessToken;\n}\n", "CodeBleu_score": 37.046015934914365}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier)\t// Create an OAuth request to the access token endpoint.\n\tOAuthRequest request = new OAuthRequest(Verb.POST, ACCESS_TOKEN_ENDPOINT);\n\n\t// Add the necessary authentication header parameters.\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, CONSUMER_KEY);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, CONSUMER_SECRET);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, REDIRECT_URI);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\n\t// Send the request and extract the response body.\n\tToken accessToken = service.getAccessToken(request);\n\n\treturn accessToken;\n}\n", "CodeBleu_score": 41.481064060939765}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host)\t// Create a credentials provider\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\t// Create credentials from the username and password\n\tCredentials credentials = new UsernamePasswordCredentials(username, password);\n\t// Add the credentials to the provider\n\tcredsProvider.setCredentials(AuthScope.ANY, credentials);\n\t// Create an auth cache\n\tBasicAuthCache authCache = new BasicAuthCache();\n\t// Generate an NTLM token for the host\n\tNTLMEngineImpl engine = new NTLMEngineImpl();\n\t// Generate a type 1 message\n\tbyte[] type1 = engine.generateType1Message();\n\t// Create a type 1 message token\n\tNTLMToken token = new NTLMToken(type1, \"DOMAIN\");\n\t// Add the token to the cache\n\tauthCache.put(host, token);\n\t// Add the cache to the context\n\tcontext.setAuthCache(authCache);\n\t// Log the action\n\tlogger.info(\"Added host to NTLM auth cache: \" + host.getHostName());\n}\n", "CodeBleu_score": 45.110895720419606}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)\t// Create a credentials provider with the specified credentials\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\n\t// Add the host to the authentication cache using the Basic authentication scheme\n\tBasicAuthCache authCache = new BasicAuthCache();\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\n\t// Log the action\n\tlogger.info(\"Configured context for host: \" + host.getHostName());\n}\n", "CodeBleu_score": 44.13609359655686}, {"code": "public void configureContext(HttpClientContext context, HttpHost host)\tAuthCache authCache = new BasicAuthCache();\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\tcontext.setAuthCache(authCache);\n\tBasicCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\tlogger.info(\"Added host to auth cache: \" + host.getHostName());\n}\n", "CodeBleu_score": 50.72490028196539}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)\tAvatarCache avatarCache = AvatarCache.getInstance();\n\tif (avatarCache == null) {\n\t\tthrow new RuntimeException(\"AvatarCache is not initialized\");\n\t}\n\tString cacheKey = source.getKey();\n\tavatarCache.seed(cacheKey);\n\tString url = Jenkins.getInstance().getRootUrl() + \"/plugin/avatar-cache/images/\" + URLEncoder.encode(cacheKey, StandardCharsets.UTF_8) + \"/\" + size;\n\treturn url;\n}\n", "CodeBleu_score": 35.07186982829512}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)\tAvatarCache avatarCache = AvatarCache.get();\n\tif (avatarCache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache instance is null\");\n\t}\n\n\tString key = source.getKey();\n\tif (key == null) {\n\t\tthrow new IllegalStateException(\"AvatarCacheSource key is null\");\n\t}\n\n\tavatarCache.seed(key);\n\n\tString encodedKey = URLEncoder.encode(key, StandardCharsets.UTF_8);\n\tif (encodedKey == null) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding unsupported\");\n\t}\n\n\treturn avatarCache.getRootUrl() + \"/\" + encodedKey + \"/\" + size;\n}\n", "CodeBleu_score": 35.308837861930314}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size)\tAvatarCache avatarCache = AvatarCache.getInstance();\n\tif (avatarCache == null) {\n\t\tthrow new RuntimeException(\"AvatarCache not found\");\n\t}\n\tString key = source.getKey(size);\n\tavatarCache.seed(key);\n\tString url = Jenkins.get().getRootUrl();\n\tif (url == null) {\n\t\tthrow new RuntimeException(\"Jenkins root URL not found\");\n\t}\n\ttry {\n\t\turl += \"/plugin/avatar-cache/images/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n\treturn url;\n}\n", "CodeBleu_score": 44.23244860337168}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t}\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tthis.image = Scalr.resize(image, Scalr.Method.SPEED, 128);\n\t}\n}\n", "CodeBleu_score": 50.92245398961823}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)\tthis.source = source;\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}\n", "CodeBleu_score": 31.693919871596133}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified)\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\timage = Scalr.resize(image, Scalr.Method.BALANCED, 128, 128);\n\t}\n\tthis.source = source;\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}\n", "CodeBleu_score": 48.21780233096049}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending()\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tfuture.get();\n\t\t} catch (Exception e) {\n\t\t\treturn true;\n\t\t}\n\t\tif (future.isCancelled()) {\n\t\t\treturn true;\n\t\t}\n\t\tupdateCache();\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "CodeBleu_score": 26.120017007877166}, {"code": "private synchronized boolean pending()\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tfuture.get();\n\t\t\treturn false;\n\t\t} catch (InterruptedException e) {\n\t\t\treturn true;\n\t\t} catch (ExecutionException e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}\n", "CodeBleu_score": 25.79377777290001}, {"code": "private synchronized boolean pending()\tif (future == null)\n\t\treturn false;\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tImage image = future.get();\n\t\t\tif (image!= null) {\n\t\t\t\tset(image);\n\t\t\t\tlastModified = System.currentTimeMillis();\n\t\t\t}\n\t\t\tfuture = null;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\t// ignore\n\t} catch (ExecutionException e) {\n\t\t// ignore\n\t}\n\treturn true;\n}\n", "CodeBleu_score": 36.26500333331571}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException\tOutputStream os = rsp.getOutputStream();\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\twriteImage(baos, node);\n\tif (req.checkIfModified(node, baos.toByteArray())) {\n\t\trsp.setStatus(304);\n\t\treturn;\n\t}\n\trsp.setHeader(\"Expires\", \"Fri, 01 Jan 1990 00:00:00 GMT\");\n\trsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n\trsp.setHeader(\"Pragma\", \"no-cache\");\n\trsp.setContentType(\"image/png\");\n\tbaos.writeTo(os);\n\tif (rsp.isCommitted()) {\n\t\tLOGGER.warning(\"Response already committed\");\n\t} else {\n\t\trsp.flushBuffer();\n\t}\n}\n", "CodeBleu_score": 40.26490443986042}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException\nOutputStream os = rsp.getOutputStream();\n", "CodeBleu_score": 16.140768840225583}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException\trsp.setHeader(\"Expires\", \"0\"); // don't cache images\n\trsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\"); // HTTP 1.1.\n\trsp.setHeader(\"Pragma\", \"no-cache\"); // HTTP 1.0.\n\trsp.setContentType(\"image/png\");\n\n\tOutputStream os = rsp.getOutputStream();\n\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n\tImageIO.write(getImage(req, node), \"PNG\", bos);\n\tbyte[] image = bos.toByteArray();\n\tos.write(image);\n\tos.flush();\n}\n", "CodeBleu_score": 44.28272170971537}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)this.enableCache = enableCache;", "CodeBleu_score": 13.332015725857199}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\n\t// Create an HTTP client with a keep-alive strategy, connection manager, and retry handler.\n\tHttpClient httpClient = HttpClients.custom()\n\t\t\t.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n\t\t\t.setConnectionManager(new BasicHttpClientConnectionManager())\n\t\t\t.setRetryHandler(new DefaultHttpRequestRetryHandler(0, false))\n\t\t\t.build();\n\n\t// Configure the HTTP client and context for authentication if an authenticator is provided.\n\tif (authenticator!= null) {\n\t\tauthenticator.configureHttpClient(httpClient);\n\t\tauthenticator.configureContext(context);\n\t}\n\n\t// Set client proxy parameters before building the HTTP client.\n\tif (proxyHost!= null) {\n\t\tHttpHost proxy = new HttpHost(proxyHost, proxyPort);\n\t\tDefaultHttpClient httpClientWrapper = new DefaultHttpClient(httpClient);\n\t\thttpClientWrapper.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n\t\thttpClient = httpClientWrapper;\n\t}\n\n\t// Build the HTTP client.\n\tthis.httpClient = httpClient;\n}\n", "CodeBleu_score": 43.44694102245676}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator)\tthis(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator, null, null, null);\n}\n", "CodeBleu_score": 9.587623889640714}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)\tString sourceBranch = pullRequest.getSourceBranch();\n\tif (sourceBranch!= null) {\n\t\tBitbucketBranchValue sourceBranchValue = bitbucketBranchService.getBranch(pullRequest.getRepoOwner(), pullRequest.getRepoSlug(), sourceBranch);\n\t\tif (sourceBranchValue!= null && sourceBranchValue.getRawNode()!= null) {\n\t\t\tClosure sourceBranchClosure = new Closure(sourceBranchValue.getRawNode());\n\t\t\tpullRequest.setSourceBranchClosure(sourceBranchClosure);\n\t\t}\n\t}\n\tString destinationBranch = pullRequest.getDestinationBranch();\n\tif (destinationBranch!= null) {\n\t\tBitbucketBranchValue destinationBranchValue = bitbucketBranchService.getBranch(pullRequest.getRepoOwner(), pullRequest.getRepoSlug(), destinationBranch);\n\t\tif (destinationBranchValue!= null && destinationBranchValue.getRawNode()!= null) {\n\t\t\tClosure destinationBranchClosure = new Closure(destinationBranchValue.getRawNode());\n\t\t\tpullRequest.setDestinationBranchClosure(destinationBranchClosure);\n\t\t}\n\t}\n}\n", "CodeBleu_score": 37.31617672382209}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)\tString srcBranch = pullRequest.getSourceBranch();\n\tString dstBranch = pullRequest.getDestinationBranch();\n\tString srcCommit = pullRequest.getSourceCommit();\n\tString dstCommit = pullRequest.getDestinationCommit();\n\tString srcRepo = pullRequest.getSourceRepo();\n\tString dstRepo = pullRequest.getDestinationRepo();\n\tString srcOwner = pullRequest.getSourceOwner();\n\tString dstOwner = pullRequest.getDestinationOwner();\n\tString srcBranchName = pullRequest.getSourceBranchName();\n\tString dstBranchName = pullRequest.getDestinationBranchName();\n\tString srcRepoName = pullRequest.getSourceRepoName();\n\tString dstRepoName = pullRequest.getDestinationRepoName();\n\tString srcRepoUrl = pullRequest.getSourceRepoUrl();\n\tString dstRepoUrl = pullRequest.getDestinationRepoUrl();\n\tString srcBranchUrl = pullRequest.getSourceBranchUrl();\n\tString dstBranchUrl = pullRequest.getDestinationBranchUrl();\n\tString srcCommitUrl = pullRequest.getSourceCommitUrl();\n\tString dstCommitUrl = pullRequest.getDestinationCommitUrl();\n\tString srcCommitHash = pullRequest.getSourceCommitHash();\n\tString dstCommitHash = pullRequest.getDestinationCommitHash();\n\tString srcCommitMessage = pullRequest.getSourceCommitMessage();\n\tString dstCommitMessage = pullRequest.getDestinationCommitMessage();\n\tString srcCommitAuthor = pullRequest.getSourceCommitAuthor();\n\tString dstCommitAuthor = pullRequest.getDestinationCommitAuthor();\n\tString srcCommitTimestamp = pullRequest.getSourceCommitTimestamp();\n\tString dstCommitTimestamp = pullRequest.getDestinationCommitTimestamp();\n\tString srcCommitTimestampStr = pullRequest.getSourceCommitTimestampStr();\n\tString dstCommitTimestampStr = pullRequest.getDestinationCommitTimestampStr();\n\tString srcCommitTimestampUnix = pullRequest.getSourceCommitTimestampUnix();\n\tString dstCommitTimestampUnix = pullRequest.getDestinationCommitTimestampUnix();\n\tString srcCommitTimestampStrUnix = pullRequest.getSourceCommitTimestampStrUnix();\n\tString dstCommitTimestampStrUnix = pullRequest.getDestinationCommitTimestampStrUnix();\n\tString srcCommitTimestampStrShort = pullRequest.getSourceCommitTimestampStrShort();\n\tString dstCommitTimestampStrShort = pullRequest.getDestinationCommitTimestampStrShort();\n\tString srcCommitTimestampStrShortTZ = pullRequest", "CodeBleu_score": 21.58664830969455}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest)\tString sourceBranchName = pullRequest.getSource().getBranch().getName();\n\tString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\tsetupClosureForBranch(sourceBranchName, pullRequest.getSource().getRawNode());\n\tsetupClosureForBranch(destinationBranchName, pullRequest.getDestination().getRawNode());\n}\n", "CodeBleu_score": 37.58122760969018}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build)String jenkinsLocationConfiguration = build.getJenkinsLocationConfiguration()\n\tif (jenkinsLocationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\")\n\t}\n\tString rootUrl = jenkinsLocationConfiguration.getUrl()\n\tif (rootUrl == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location URL is null\")\n\t}\n\treturn rootUrl\n}\n", "CodeBleu_score": 44.726311508457954}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)String url = getJenkinsLocationConfiguration(build).getUrl();\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins URL configured for this build.\");\n\t}\n\treturn url;\n}\n", "CodeBleu_score": 46.98750203769448}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build)JenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tString rootURL = locationConfiguration.getUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured\");\n\t}\n\treturn rootURL;\n}\n", "CodeBleu_score": 51.35238986319537}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) \tif (url == null) {\n\t\tthrow new IllegalArgumentException(\"URL cannot be null\")\n\t}\n\ttry {\n\t\tURL u = new URL(url)\n\t\tString host = u.getHost()\n\t\tif (host == null || host.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"URL must be well-formed\")\n\t\t}\n\t\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"URL must not be localhost or unconfigured-jenkins-location\")\n\t\t}\n\t\tif (bitbucket.isCloud() &&!host.contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"URL must be fully qualified for Bitbucket Cloud\")\n\t\t}\n\t\treturn url\n\t}\n\tcatch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"URL must be well-formed\", e)\n\t}\n}\n", "CodeBleu_score": 42.24215447627185}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) if (url == null)  {", "CodeBleu_score": 4.960968359083886}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) \ttry {\n\t\tURL parsedURL = new URL(url);\n\t\tif (parsedURL.getHost().equals(\"localhost\") || parsedURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL must be a fully qualified URL. This is likely due to the Jenkins URL being configured as 'localhost' or 'unconfigured-jenkins-location'.\");\n\t\t}\n\t\tif (bitbucket.isCloud() &&!parsedURL.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL must be a fully qualified URL. This is likely due to the Jenkins URL being configured as a relative URL.\");\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"The Jenkins URL is malformed. Ensure that it is a valid URL and that it uses the HTTP or HTTPS protocol.\", e);\n\t}\n}\n", "CodeBleu_score": 53.461255439204805}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedExceptionif (source.isDisableNotifications()) {\n\t\tlistener.getLogger().println(\"Bitbucket build notifications are disabled.\");\n\t\treturn;\n\t}\n\tString revision = build.getEnvironment(listener).get(\"GIT_COMMIT\");\n\tif (revision == null) {\n\t\tlistener.error(\"Could not retrieve SCM revision from environment. Build notifications will not be sent.\");\n\t\treturn;\n\t}\n\tString revisionType = source.getRevisionType();\n\tif (revisionType.equals(BitbucketSCMSource.RevisionType.BRANCH)) {\n\t\tsendNotification(source, build, listener, revision, revisionType, null);\n\t} else if (revisionType.equals(BitbucketSCMSource.RevisionType.PR)) {\n\t\tString pr = build.getEnvironment(listener).get(\"CHANGE_ID\");\n\t\tif (pr == null) {\n\t\t\tlistener.error(\"Could not retrieve pull request ID from environment. Build notifications will not be sent.\");\n\t\t\treturn;\n\t\t}\n\t\tsendNotification(source, build, listener, revision, revisionType, pr);\n\t} else {\n\t\tlistener.error(\"Invalid revision type: \" + revisionType + \". Build notifications will not be sent.\");\n\t}\n}\n", "CodeBleu_score": 28.112576074359737}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedExceptionSCMRevision revision = build.getAction(ParametersAction.class).getLastBuiltRevision();\n\tif (revision == null) {\n\t\tlistener.error(\"Could not determine SCM revision for build \" + build.getUrl());\n\t\treturn;\n\t}\n\tString hash = revision.getSha1String();\n\tString buildKey = build.getDisplayName();\n\tboolean isPullRequest = build.getParent() instanceof AbstractBuild && ((AbstractBuild) build.getParent()).getPullRequests().size() > 0;\n\tif (source.getBuildStatus() == BuildStatus.Disabled) {\n\t\tlistener.getLogger().println(\"Build notifications are disabled for \" + source.getRepoSlug());\n\t\treturn;\n\t}\n\tif (source.getBuildStatus() == BuildStatus.Enabled) {\n\t\tif (source.getBuildKey()!= null &&!source.getBuildKey().isEmpty()) {\n\t\t\tbuildKey = source.getBuildKey();\n\t\t}\n\t\tif (isPullRequest && source.getBuildName()!= null &&!source.getBuildName().isEmpty()) {\n\t\t\tbuildKey = source.getBuildName();\n\t\t}\n\t}\n\tif (source.getBuildStatus() == BuildStatus.EnabledForPullRequests) {\n\t\tif (source.getBuildKey()!= null &&!source.getBuildKey().isEmpty()) {\n\t\t\tbuildKey = source.getBuildKey();\n\t\t}\n\t\tif (source.getBuildName()!= null &&!source.getBuildName().isEmpty()) {\n\t\t\tbuildKey = source.getBuildName();\n\t\t}\n\t}\n\tif (source.getRevisionType() == RevisionType.Branch) {\n\t\tif (isPullRequest) {\n\t\t\tlistener.getLogger().println(\"Skipping build notification for pull request \" + buildKey + \" on branch \" + hash);\n\t\t\treturn;\n\t\t}\n\t}\n\tif (source.getRevisionType() == RevisionType.PullRequests) {\n\t\tif (!isPullRequest) {\n\t\t\tlistener.getLogger().println(\"Skipping build notification for branch \" + buildKey + \" on pull request \" + hash);\n\t\t\treturn;\n\t\t}\n\t}\n\tBitbucketClient client = new BitbucketClient(source, build, listener);\n\tString type = \"commit\";\n\tif (revision instanceof SCMRevisionImpl) {\n\t\tif", "CodeBleu_score": 37.121134254065815}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedExceptionif (source.isNotifyCommit()) {\n\t\tlistener.getLogger().println(\"Skipping Bitbucket build status notifications for \" + source.getRepoSlug() + \" because commit notifications are enabled\");\n\t\treturn;\n\t}\n\n\tSCMRevision revision = build.getAction(GitSCM.class).getRevision();\n\tif (revision == null) {\n\t\tlistener.getLogger().println(\"Skipping Bitbucket build status notifications for \" + source.getRepoSlug() + \" because the revision could not be determined\");\n\t\treturn;\n\t}\n\n\tString revisionSha = revision.getSha1String();\n\tString revisionType = revision.getType().name();\n\tString buildKey = source.getBuildKey();\n\n\tif (revisionType.equals(\"BRANCH\")) {\n\t\tif (buildKey == null) {\n\t\t\tbuildKey = revisionSha;\n\t\t}\n\t} else if (revisionType.equals(\"PULL_REQUEST\")) {\n\t\tif (buildKey == null) {\n\t\t\tbuildKey = source.getPullRequestId();\n\t\t}\n\t} else {\n\t\tlistener.getLogger().println(\"Skipping Bitbucket build status notifications for \" + source.getRepoSlug() + \" because the revision type is \" + revisionType);\n\t\treturn;\n\t}\n\n\tBitbucketClient client = source.getClient();\n\tclient.buildStatus(source.getRepoOwner(), source.getRepoSlug(), revisionSha, buildKey, build.getResult().toString(), build.getAbsoluteUrl());\n}\n", "CodeBleu_score": 32.09034149525356}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)String buildKey = \"\";\n if (shareBuildKeyBetweenBranchAndPR) {\n String jobFolder = build.getParent().getFullName();\n buildKey = jobFolder + \"/\" + branch;\n } else {\n buildKey = build.getParent().getFullName();\n }\n return buildKey;\n }\n}", "CodeBleu_score": 49.97905724338999}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)String buildKey = build.getParent().getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n buildKey = buildKey + \"/\" + branch;\n }\n return buildKey;\n }\n}", "CodeBleu_score": 32.09534614690594}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR)    String buildKey = build.getParent().getFullName();", "CodeBleu_score": 20.154920702891737}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException\tif (serverUrl == null) {\n\t\tserverUrl = new BitbucketSCMSourceDefaults.ServerUrl();\n\t\tLOGGER.warning(\"Bitbucket server URL was null during deserialization. Setting to default: \" + serverUrl);\n\t}\n\tif (traits == null) {\n\t\ttraits = new BitbucketSCMNavigatorTrait[0];\n\t\tLOGGER.warning(\"Bitbucket traits array was null during deserialization. Reconstructing traits to reflect legacy behavior.\");\n\t\ttraits = new BitbucketSCMNavigatorTrait[]{\n\t\t\t\tnew BitbucketSCMNavigatorTrait(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false", "CodeBleu_score": 16.818722481953614}, {"code": "private Object readResolve() throws ObjectStreamException\tif (serverUrl == null) {\n\t\tserverUrl = BitbucketSCMNavigator.getLegacyServerUrl(project);\n\t\tLOGGER.log(Level.WARNING, \"Bitbucket SCM Navigator '{0}' does not have a server URL set. Using the server URL from the project instead: {1}\", new Object[] { name, serverUrl });\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<SCMNavigatorTrait<?>>();\n\t\ttraits.add(new BitbucketProjectTrait(project));\n\t\tLOGGER.log(Level.WARNING, \"Bitbucket SCM Navigator '{0}' does not have any traits set. Adding the BitbucketProjectTrait trait to the navigator. The trait will use the server URL from the project.\", name);\n\t}\n\treturn this;\n}\n\n}", "CodeBleu_score": 22.53449643942251}, {"code": "private Object readResolve() throws ObjectStreamException\tif (serverUrl == null) {\n\t\tserverUrl = BitbucketSCMNavigator.BITBUCKET_CLOUD_API_URL;\n\t\tLOGGER.log(Level.WARNING, \"Bitbucket server URL was null, using default Bitbucket Cloud URL: {0}\", serverUrl);\n\t}\n\tif (traits == null) {\n\t\ttraits = new BitbucketSCMNavigatorTrait.Builder().autoBuild();\n\t\tLOGGER.log(Level.WARNING, \"Bitbucket SCM Navigator traits were null, using default traits: {0}\", traits);\n\t}\n\treturn this;\n}\n\n}", "CodeBleu_score": 16.61414088799845}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch)\tif (isMatch) {\n\t\tproposed.add(name);\n\t}\n\telse {\n\t\tignored.add(name);\n\t}\n}\n", "CodeBleu_score": 14.897838364164025}, {"code": "public void record(@NonNull String name, boolean isMatch)\tRepository repository = repositoryService.findRepositoryByName(name);\n\tif (repository!= null) {\n\t\tif (isMatch) {\n\t\t\trepository.setProposedCount(repository.getProposedCount() + 1);\n\t\t\trepositoryService.update(repository);\n\t\t\tlogger.info(\"Proposing repository: \" + name);\n\t\t} else {\n\t\t\trepository.setIgnoredCount(repository.getIgnoredCount() + 1);\n\t\t\trepositoryService.update(repository);\n\t\t\tlogger.info(\"Ignoring repository: \" + name);\n\t\t}\n\t} else {\n\t\tlogger.info(\"Repository not found: \" + name);\n\t}\n}\n", "CodeBleu_score": 38.30820442207884}, {"code": "public void record(@NonNull String name, boolean isMatch)\tRepository repository = repositoryService.getRepositoryByName(name);\n\tif (repository!= null) {\n\t\tif (isMatch) {\n\t\t\trepository.setProposed(true);\n\t\t\trepository.setIgnored(false);\n\t\t\trepository.setProposedCount(repository.getProposedCount() + 1);\n\t\t}\n\t\telse {\n\t\t\trepository.setProposed(false);\n\t\t\trepository.setIgnored(true);\n\t\t\trepository.setIgnoredCount(repository.getIgnoredCount() + 1);\n\t\t}\n\t\trepositoryService.save(repository);\n\t}\n}\n", "CodeBleu_score": 38.33251264228574}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedExceptionif (marked == null) {\n\t\treturn rev;\n\t}\n\tif (marked.getBranches().isEmpty()) {\n\t\treturn rev;\n\t}\n\tif (marked.getBranches().size() > 1) {\n\t\tlistener.getLogger().println(\"Cannot handle more than one branch\");\n\t\treturn rev;\n\t}\n\tBranchSpec branch = marked.getBranches().get(0);\n\tif (branch.getName().startsWith(\"refs/remotes/\")) {\n\t\tlistener.getLogger().println(\"Cannot handle remote branches\");\n\t\treturn rev;\n\t}\n\tString hash = branch.getName();\n\tif (hash.startsWith(\"refs/heads/\")) {\n\t\thash = hash.substring(\"refs/heads/\".length());\n\t}\n\tif (hash.length()!= 40) {\n\t\tlistener.getLogger().println(\"Cannot handle non-hash branches\");\n\t\treturn rev;\n\t}\n\tString remote = scm.getRemote();\n\tif (remote == null) {\n\t\tlistener.getLogger().println(\"Cannot handle non-remote branches\");\n\t\treturn rev;\n\t}\n\tString remoteUrl = scm.getRemoteUrls().get(0);\n\tif (remoteUrl == null) {\n\t\tlistener.getLogger().println(\"Cannot handle non-remote branches\");\n\t\treturn rev;\n\t}\n\tString cloneUrl = remoteUrl.replace(\"https://\", \"https://oauth2:\" + getAccessToken(build) + \"@\");\n\tString refspec = \"+\" + hash + \":\" + branch.getName();\n\tlistener.getLogger().println(\"Fetching \" + refspec + \" from \" + cloneUrl);\n\ttry {\n\t\tgit.fetch_().from(cloneUrl, refspec).execute();\n\t} catch (GitException e) {\n\t\tlistener.getLogger().println(\"Failed to fetch \" + refspec + \": \" + e.getMessage());\n\t}\n\treturn rev;\n}\n", "CodeBleu_score": 39.629750821067944}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedExceptionlistener.getLogger().println(\"Decorating revision \" + rev.getSha1());\n\tString remote = scm.getRemote();\n\tString branch = scm.getBranches().get(0).getName();\n\tString cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n\tString refspec = branch + \":\" + branch;\n\tboolean decorated = false;\n\tif (rev instanceof BranchRevision) {\n\t\tlistener.getLogger().println(\"Checking out \" + branch + \" from \" + remote);\n\t\tgit.checkout(new BranchSpec(branch));\n\t\tgit.clean(new CleanCommand().setCleanDirectories(true).setIgnore(false));\n\t\tgit.fetch(new URIish(remote), new StringRefSpec(refspec), false, null);\n\t\tgit.reset(new ResetCommand().setMode(ResetType.HARD).setRef(rev.getSha1()));\n\t\tdecorated = true;\n\t} else if (rev instanceof ChangeRequestSCMHeadRevision) {\n\t\tString sha1 = ((ChangeRequestSCMHeadRevision) rev).getSha1();\n\t\tlistener.getLogger().println(\"Checking out \" + branch + \"@\" + sha1 + \" from \" + remote);\n\t\tgit.checkout(new BranchSpec(branch));\n\t\tgit.clean(new CleanCommand().setCleanDirectories(true).setIgnore(false));\n\t\tgit.fetch(new URIish(remote), new StringRefSpec(refspec), false, null);\n\t\tgit.reset(new ResetCommand().setMode(ResetType.HARD).setRef(sha1));\n\t\tdecorated = true;\n\t} else if (rev instanceof SCMRevisionImpl) {\n\t\tlistener.getLogger().println(\"Checking out \" + rev.getSha1());\n\t\tgit.checkout(new BranchSpec(rev.getSha1()));\n\t\tgit.clean(new CleanCommand().setCleanDirectories(true).setIgnore(false));\n\t\tdecorated = true;\n\t}\n\tif (decorated) {\n\t\tlistener.getLogger().println(\"Decorated revision \" + rev.getSha1());\n\t\treturn rev;\n\t}\n\tlistener.getLogger().println(\"Fetching \" + branch + \" from \" + cloneLink);\n\tgit.clone(new URIish(cloneLink), new File(\".\").getAbsolutePath(), new CloneCommand().setBranch", "CodeBleu_score": 33.63869844596829}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedExceptionif (rev == null) {\n\t\treturn null;\n\t}\n\tif (marked == null) {\n\t\treturn rev;\n\t}\n\tif (marked.getBranches().isEmpty()) {\n\t\treturn rev;\n\t}\n\tif (marked.getBranches().size()!= 1) {\n\t\tthrow new AbortException(\"Decorated revision must have exactly one branch\");\n\t}\n\tString branch = marked.getBranches().get(0).getName();\n\tString hash = marked.getBranches().get(0).getSHA1String();\n\tif (hash == null) {\n\t\tthrow new AbortException(\"Decorated revision must have a branch with a hash\");\n\t}\n\tif (rev.getBranches().isEmpty()) {\n\t\treturn rev;\n\t}\n\tif (rev.getBranches().size()!= 1) {\n\t\tthrow new AbortException(\"Revision to build must have exactly one branch\");\n\t}\n\tString revBranch = rev.getBranches().get(0).getName();\n\tString revHash = rev.getBranches().get(0).getSHA1String();\n\tif (revHash == null) {\n\t\tthrow new AbortException(\"Revision to build must have a branch with a hash\");\n\t}\n\tif (!branch.equals(revBranch)) {\n\t\tthrow new AbortException(\"Decorated revision and revision to build must have the same branch\");\n\t}\n\tif (hash.equals(revHash)) {\n\t\treturn rev;\n\t}\n\tString cloneLink = scm.getExtensions().get(CloneOption.class).getCloneLinks().get(0).getHref();\n\tString localRepo = cloneLink.substring(cloneLink.indexOf(\"://\") + 3);\n\tlocalRepo = localRepo.substring(0, localRepo.indexOf(\".git\"));\n\tlocalRepo = localRepo.replace(\"/\", \"_\");\n\tString localBranch = \"remotes/origin/\" + branch;\n\tString remoteBranch = \"refs/remotes/origin/\" + branch;\n\tString localHash = \"refs/remotes/origin/\" + branch + \"/\" + hash;\n\tString remoteHash = \"refs/remotes/origin/\" + branch + \"/\" + revHash;\n\tString refspec = remoteBranch + \":\" + localBranch;\n\tlistener.getLogger().println(\"Fetching \" + remote", "CodeBleu_score": 36.477625596810945}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks()\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().getHref());\n\t}\n\treturn result;\n}\n", "CodeBleu_score": 55.15828979745281}, {"code": "public Map<String, BitbucketHref> getLinks()\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tList<BitbucketHref> list = entry.getValue();\n\t\tif (list!= null &&!list.isEmpty()) {\n\t\t\tresult.put(entry.getKey(), list.get(0));\n\t\t}\n\t}\n\treturn result;\n}\n", "CodeBleu_score": 61.82810237972956}, {"code": "public Map<String, BitbucketHref> getLinks()\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}\n", "CodeBleu_score": 64.87724424888668}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[])\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repositoryToResources: Map<string, SourceControlResourceState[]> = new Map();\n\tfor (const resource of resourceStates) {\n\t\tconst repository = await this.repositoryFor(resource);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst resources = repositoryToResources.get(repository.rootUri.toString()) || [];\n\t\tresources.push(resource);\n\t\trepositoryToResources.set(repository.rootUri.toString(), resources);\n\t}\n\n\tconst repositories = Array.from(repositoryToResources.keys());\n\tif (repositories.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repositoryToErrorMessages: Map<string, string[]> = new Map();\n\tconst repositoryToSuccessfulResources: Map<string, SourceControlResourceState[]> = new Map();\n\tfor (const repository of repositories) {\n\t\tconst resources = repositoryToResources.get(repository) || [];\n\t\tconst repository = this.repositoryFor(resources[0]);\n\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst repositoryToErrorMessages = new Map();\n\t\tconst repositoryToSuccessfulResources = new Map();\n\t\tconst repository = this.repositoryFor(resources[0]);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst repositoryToErrorMessages = new Map();\n\t\tconst repositoryToSuccessfulResources = new Map();\n\t\tfor (const resource of resources) {\n\t\t\tconst repository = this.repositoryFor(resource);\n\t\t\tif (!repository) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst resourceUri = resource.resourceUri;\n\t\t\tconst resourcePath = resourceUri.fsPath;\n\t\t\tconst repository = this.repositoryFor(resource);\n\t\t\tif (!repository) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst repositoryToErrorMessages = new Map();\n\t\t\tconst repositoryToSuccessfulResources = new Map();\n\t\t\ttry {\n\t\t\t\tconst repository = this.repositoryFor(resource);\n\t\t\t\tif (!repository) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst resourceUri = resource.resourceUri;\n\t\t\t\tconst resourcePath = resourceUri.fsPath;\n\t\t\t\tconst repository = this.repositoryFor(resource);\n\t\t\t\tif (!repository) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst", "CodeBleu_score": 38.06969456992684}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])\t// If no resources are selected, return\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Map the resource states to their URIs\n\tconst resourceURIs = resourceStates.map(resourceState => resourceState.resourceUri);\n\n\t// Retrieve the repository for each URI\n\tconst repositories = await Promise.all(resourceURIs.map(resourceURI => this.repositoryFor(resourceURI)));\n\n\t// Map the repositories to a set of unique repositories\n\tconst uniqueRepositories = new Set(repositories);\n\n\t// For each repository, add the resources to the repository\n\tfor (const repository of uniqueRepositories) {\n\t\t// If the repository is not valid, log the error and continue\n\t\tif (!repository) {\n\t\t\tconst errorMessage = localize('sourcecontrol.noRepository', 'Unable to find repository for resource {0}', resourceURIs[0].toString());\n\t\t\tthis.logService.error(errorMessage);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get the file paths for the resources\n\t\tconst filePaths = resourceURIs.map(resourceURI => this.toFilePath(resourceURI));\n\n\t\t// Add the resources to the repository\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\t// If the error is not a file not found error, log the error and continue\n\t\t\tif (error.gitErrorCode!== GitErrorCodes.NotFound) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Otherwise log the error and show an error message\n\t\t\tthis.logService.error(error);\n\t\t\tthis.messageService.show(Severity.Error, localize('sourcecontrol.fileNotFound', 'Unable to add file to repository. File not found.'));\n\t\t}\n\t}\n}\n", "CodeBleu_score": 48.74584179573025}, {"code": "public async execute(...resourceStates: SourceControlResourceState[])\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resource);\n\n\tconst repositories = await this.repository.getRepositories(resources);\n\n\tif (repositories.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repository = repositories[0];\n\n\tconst repositoryUri = repository.rootUri;\n\n\tconst repositoryFiles: URI[] = [];\n\n\tconst errors: string[] = [];\n\n\tconst fileChanges = resources.map(resource => {\n\t\tconst filePath = URI.parse(resource.uri).path;\n\n\t\tconst fileChange = new FileChange(filePath, FileChangeType.ADD, repositoryUri);\n\t\trepositoryFiles.push(fileChange.resource);\n\n\t\treturn fileChange;\n\t});\n\n\ttry {\n\t\tawait repository.add(fileChanges);\n\t} catch (error) {\n\t\terrors.push(error.message);\n\t}\n\n\tif (errors.length > 0) {\n\t\tconst message = errors.join('\\n');\n\t\tconst label = localize('add.error.label', \"Failed to add to Source Control\");\n\t\tconst actions: MessageItem[] = [{\n\t\t\ttitle: localize('add.error.open', \"Open Repository\")\n\t\t}];\n\t\tconst options: MessageOptions = {\n\t\t\ttype: 'error',\n\t\t\tmessage,\n\t\t\tactions\n\t\t};\n\n\t\tthis.messageService.show(Severity.Error, options, { sticky: true });\n\n\t\treturn;\n\t}\n\n\tconst repositoryFileChanges = fileChanges.map(fileChange => new SourceControlResourceState(fileChange.resource, repositoryUri, repository.rootUri, FileChangeType.ADD, repository.label));\n\n\tthis.sourceControl.acceptInputCommand(repositoryFileChanges);\n}", "CodeBleu_score": 44.15337724287317}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates\tif (this.resourceStates.length === 0 ||!(this.resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getSCMResource();\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}\n", "CodeBleu_score": 29.612861847521398}, {"code": "protected async getResourceStates\tconst resourceStates = this.resourceStates;\n\tif (resourceStates.length === 0 ||!(resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getResourceState();\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\treturn this.resourceStates.filter(resource => resource instanceof Resource);\n}\n", "CodeBleu_score": 31.10058889687888}, {"code": "protected async getResourceStates\tconst resourceStates = this.resourceStates;\n\tif (resourceStates.length === 0 ||!(resourceStates[0] instanceof Uri)) {\n\t\tconst resource = await this.getResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resource => resource instanceof Resource);\n}\n", "CodeBleu_score": 34.45730080941052}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    const editor = window.activeTextEditor;\n    if (uri) {\n      uri = this.toFileUri(uri);\n    } else if (editor) {\n      uri = editor.document.uri;\n    } else {\n      return undefined;\n    }\n    if (uri.scheme === 'file') {\n      const repository = await this.getSCMRepository(uri);\n      if (repository) {\n        return repository.getSCMResource(uri);\n      }\n      return undefined;\n    }\n    return undefined;\n  }\n", "CodeBleu_score": 32.535154565508925}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>\n/*\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {\n", "CodeBleu_score": 8.025661611521953}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> * Retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {\n * Retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {\n * Retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {\n * Retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {\n * Retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns", "CodeBleu_score": 29.967243573215228}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange) const repo = await this.svnService.getRepository(element.repository);\n if (!repo) {\n return;\n }\n\n let oldPath = element.oldPath;\n let newPath = element.newPath;\n let oldRevision = element.oldRevision;\n let newRevision = element.newRevision;\n\n if (element.status === SvnStatus.Modified) {\n const oldUri = Uri.parse(repo.rootUri);\n oldUri.path = oldPath;\n const newUri = Uri.parse(repo.rootUri);\n newUri.path = newPath;\n this.diffService.openDiff(oldUri, newUri, oldRevision, newRevision);\n } else if (element.status === SvnStatus.Added) {\n const uri = Uri.parse(repo.rootUri);\n uri.path = newPath;\n this.diffService.openDiff(uri, uri, newRevision, newRevision);\n }\n }\n */\n", "CodeBleu_score": 43.57718253522982}, {"code": " public async openDiffCmd(element: ISvnPathChange) const repository = await this.svnService.getRepository(element.repository);\n const revision = element.newPath.revision;\n const oldRevision = element.oldPath.revision;\n const oldPath = element.oldPath.path;\n const newPath = element.newPath.path;\n let diffArgs: string[];\n if (element.changeType === SvnChangeType.Modified) {\n diffArgs = ['diff', '-r', `${oldRevision}:${revision}`, oldPath, newPath];\n } else if (element.changeType === SvnChangeType.Added) {\n diffArgs = ['cat', '-r', revision, newPath];\n } else if (element.changeType === SvnChangeType.Deleted) {\n diffArgs = ['cat', '-r', oldRevision, oldPath];\n }\n const diffCommand = new Command('svn', diffArgs, {\n cwd: repository.localRoot,\n });\n diffCommand.run();\n }\n */\n\n}\n", "CodeBleu_score": 41.351704714304326}, {"code": " public async openDiffCmd(element: ISvnPathChange) const repository = await this.svnService.getRepository(element.repository);\n if (element.changeType === SvnChangeType.Modified) {\n const oldFile = element.oldPath + '@' + element.oldRevision;\n const newFile = element.newPath + '@' + element.newRevision;\n const diffCmd = await this.svnService.getDiffCommand(repository, oldFile, newFile);\n await this.commandService.executeCommand(diffCmd);\n } else if (element.changeType === SvnChangeType.Added) {\n const newFile = element.newPath + '@' + element.newRevision;\n const fileUri = Uri.parse(newFile);\n const fileStat = await this.fileService.resolve(fileUri);\n await this.editorService.openEditor({ resource: fileStat.resource, options: { preserveFocus: true } });\n }\n }\n */\n\n}\n", "CodeBleu_score": 40.344926378466816}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)\tconst clipboard = await getClipboard();\n\tif (!clipboard) {\n\t\tvscode.window.showErrorMessage('The clipboard is not supported in this environment');\n\t\treturn;\n\t}\n\n\tif (what === 'commit') {\n\t\tclipboard.writeText(item.commit.message || item.commit.sha);\n\t} else if (what ==='revision') {\n\t\tclipboard.writeText(item.commit.sha);\n\t}\n}\n", "CodeBleu_score": 32.431848629119244}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)\tif (!navigator.clipboard) {\n\t\tvscode.window.showErrorMessage('Clipboard not supported');\n\t\treturn;\n\t}\n\n\tif (what ==='message') {\n\t\tawait navigator.clipboard.writeText(item.commit.message);\n\t} else if (what ==='revision') {\n\t\tawait navigator.clipboard.writeText(item.commit.sha);\n\t}\n}\n", "CodeBleu_score": 25.98039122056256}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem)\tif (!vscode.env.clipboard.writeText) {\n\t\tvscode.window.showErrorMessage('The clipboard is not supported in this environment');\n\t\treturn;\n\t}\n\n\tif (what ==='message') {\n\t\tvscode.env.clipboard.writeText(item.commit.message);\n\t} else if (what ==='revision') {\n\t\tvscode.env.clipboard.writeText(item.commit.sha);\n\t}\n}\n", "CodeBleu_score": 26.756347435939954}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException\tGiteaConnection connection = null;\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\ttry {\n\t\t\tconnection = factory.open();\n\t\t\tif (connection!= null) {\n\t\t\t\treturn connection;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t// Ignore this exception and try the next factory.\n\t\t}\n\t}\n\tif (connection == null) {\n\t\tthrow new IOException(\"Unable to open a connection to Gitea\");\n\t}\n\treturn connection;\n}\n", "CodeBleu_score": 16.987033807455223}, {"code": "public GiteaConnection open() throws IOException, InterruptedException\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : factories) {\n\t\tif (factory == null || factory.getPriority() > f.getPriority()) {\n\t\t\ttry {\n\t\t\t\tfactory = f;\n\t\t\t\tf.open();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"Unable to open a connection to Gitea.\");\n\t}\n\treturn factory.getConnection();\n}\n", "CodeBleu_score": 18.272924789987222}, {"code": "public GiteaConnection open() throws IOException, InterruptedException\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : factories) {\n\t\tif (factory == null || f.getPriority() > factory.getPriority()) {\n\t\t\ttry {\n\t\t\t\tfactory = f;\n\t\t\t\tfactory.open();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"Unable to open connection to Gitea.\");\n\t}\n\treturn factory.getConnection();\n}\n", "CodeBleu_score": 18.396273251699604}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader()\tClassLoader classLoader = Jenkins.getInstance()!= null? Jenkins.getInstance().getPluginManager().uberClassLoader : getClass().getClassLoader();\n\treturn new Gitea(this, classLoader);\n}\n", "CodeBleu_score": 46.14659712513397}, {"code": "public Gitea jenkinsPluginClassLoader()\tClassLoader classLoader = Jenkins.getInstance() == null? getClass().getClassLoader() : Jenkins.getInstance().pluginManager.uberClassLoader;\n\treturn (Gitea) Proxy.newProxyInstance(classLoader, new Class[]{Gitea.class}, new InvocationHandler() {\n\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\treturn method.invoke(gitea, args);\n\t\t}\n\t});\n}\n", "CodeBleu_score": 40.67110853342204}, {"code": "public Gitea jenkinsPluginClassLoader()\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins!= null) {\n\t\tClassLoader classLoader = jenkins.getPluginManager().uberClassLoader;\n\t\tif (classLoader!= null) {\n\t\t\treturn (Gitea) Class.forName(\"org.jenkinsci.plugin.gitea.Gitea\", true, classLoader).newInstance();\n\t\t}\n\t}\n\treturn (Gitea) Class.forName(\"org.jenkinsci.plugin.gitea.Gitea\").newInstance();\n}\n", "CodeBleu_score": 39.31307344802721}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) \tthis.displayName = displayName == null? serverUrl : displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeAliasUrl(aliasUrl);\n}\n", "CodeBleu_score": 29.595800125480874}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) \tthis.displayName = displayName == null? serverUrl : displayName;\n\tthis.serverUrl = StringUtils.stripEnd(serverUrl, \"/\");\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = StringUtils.stripEnd(aliasUrl, \"/\");\n}\n", "CodeBleu_score": 28.31270336527928}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) \tthis.displayName = displayName == null? serverUrl : displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = aliasUrl == null? null : aliasUrl.trim();\n}\n", "CodeBleu_score": 30.6050196880881}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)\tListBoxModel items = new ListBoxModel();\n\tString serverUrlNorm = normalizeServerUrl(serverUrl);\n\tif (serverUrlNorm == null) {\n\t\treturn items;\n\t}\n\tif (!hasAdminPermission(serverUrlNorm)) {\n\t\treturn items;\n\t}\n\tfor (GiteaAuth giteaAuth : GiteaAuth.all()) {\n\t\tif (giteaAuth.matches(serverUrlNorm)) {\n\t\t\titems.add(giteaAuth.getCredentialsId(), giteaAuth.getCredentialsId());\n\t\t}\n\t}\n\treturn items;\n}\n", "CodeBleu_score": 35.525005436873705}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)\tListBoxModel model = new ListBoxModel();\n\ttry {\n\t\tif (serverUrl.equals(\"\")) {\n\t\t\treturn model;\n\t\t}\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\tif (!hasAdminPermission(serverUrl)) {\n\t\t\treturn model;\n\t\t}\n\t\tfor (GiteaAuth auth : GiteaAuth.all()) {\n\t\t\tif (auth.matches(serverUrl)) {\n\t\t\t\tmodel.add(auth.credentialsId, auth.credentialsId);\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLOGGER.log(Level.WARNING, \"Failed to populate credentials dropdown list\", e);\n\t}\n\treturn model;\n}\n", "CodeBleu_score": 37.00144333179194}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl)\tListBoxModel items = new ListBoxModel();\n\tif (!hasAdmin()) {\n\t\titems.add(\"No credentials\", \"\");\n\t\treturn items;\n\t}\n\n\ttry {\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\tfor (GiteaAuth auth : GiteaAuth.all()) {\n\t\t\tif (auth.matches(serverUrl)) {\n\t\t\t\titems.add(auth.getDescription(), auth.getId());\n\t\t\t}\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\titems.add(\"Invalid server URL\", \"\");\n\t}\n\n\treturn items;\n}\n", "CodeBleu_score": 36.8096225301184}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase());\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (\"http\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} else if (\"https\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t}\n\t\t}\n\t\treturn uri.toString().replace(\"\\\\\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}\n", "CodeBleu_score": 27.66442270743852}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase());\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (\"http\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} else if (\"https\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t}\n\t\t}\n\t\treturn uri.normalize().toString();\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 26.539966454920787}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase());\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (\"http\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} else if (\"https\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t}\n\t\t}\n\t\treturn uri.toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}\n", "CodeBleu_score": 27.42802780968153}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems()\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServers.getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getUrl();\n\t\t}\n\t\titems.add(displayName, server.getUrl());\n\t}\n\treturn items;\n}\n", "CodeBleu_score": 45.80399786298213}, {"code": "public ListBoxModel getServerItems()\tListBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServer.getAll()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getUrl();\n\t\t}\n\t\tmodel.add(displayName, server.getUrl());\n\t}\n\treturn model;\n}\n", "CodeBleu_score": 43.62762826672819}, {"code": "public ListBoxModel getServerItems()\tListBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : servers) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getUrl();\n\t\t}\n\t\tmodel.add(displayName, server.getUrl());\n\t}\n\treturn model;\n}\n", "CodeBleu_score": 42.54510415545851}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)\tif (servers == null) {\n\t\tthis.servers = Collections.emptyList();\n\t} else {\n\t\tthis.servers = new ArrayList<>();\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!server.hasAdminPermission()) {\n\t\t\t\tthrow new IllegalArgumentException(\"Not an admin of the Gitea server\");\n\t\t\t}\n\n\t\t\tif (StringUtils.isBlank(server.getUrl())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.servers.stream().filter(s -> s.getUrl().equals(server.getUrl())).count() > 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.servers.add(server);\n\t\t}\n\t}\n\n\tsave();\n}\n", "CodeBleu_score": 28.252584113158}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)\tif (servers == null) {\n\t\treturn;\n\t}\n\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (server.getUrl() == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (server.getUrl().isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnewServers.add(server);\n\t}\n\n\tif (newServers.isEmpty()) {\n\t\treturn;\n\t}\n\n\tnewServers.sort(Comparator.comparing(GiteaServer::getUrl));\n\n\tif (newServers.equals(servers)) {\n\t\treturn;\n\t}\n\n\tGiteaServer[] oldServers = getServers();\n\tif (oldServers.length!= newServers.size()) {\n\t\tsave();\n\t}\n\n\tsetServers(newServers.toArray(new GiteaServer[0]));\n}\n", "CodeBleu_score": 30.956878458915643}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers)\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tif (!Jenkins.ADMINISTER.name().equals(Jenkins.getAuthentication().getName())) {\n\t\tthrow new AccessDeniedException(\"Admin permissions are required to configure Gitea servers.\");\n\t}\n\tList<GiteaServer> newServers = new ArrayList<GiteaServer>(servers.size());\n\tfor (GiteaServer server : servers) {\n\t\tif (server.getUrl()!= null &&!server.getUrl().isEmpty()) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tif (newServers.size()!= servers.size()) {\n\t\tLOGGER.log(Level.WARNING, \"Empty or duplicate Gitea server URLs provided. Ignoring them.\");\n\t}\n\tGiteaConfiguration.get().setServers(newServers);\n\tsave();\n}\n", "CodeBleu_score": 32.59915837791285}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\tfor (int i = 0; i < servers.size(); i++) {\n\t\tGiteaServer server = servers.get(i);\n\t\tif (serverUrl.equals(server.getUrl())) {\n\t\t\tservers.remove(i);\n\t\t\tserver.setLoggedIn(false);\n\t\t\tserver.setLoginError(false);\n\t\t\tserver.setLoginErrorMessage(null);\n\t\t\tserver.setLoginUsername(null);\n\t\t\tserver.setLoginPassword(null);\n\t\t\tserver.setLoginAccessToken(null);\n\t\t\tserver.setLoginRefreshToken(null);\n\t\t\tserver.setLoginTokenExpiresAt(null);\n\t\t\tserver.setLoginScopes(null);\n\t\t\tserver.setLoginCreatedAt(null);\n\t\t\tserver.setLoginUpdatedAt(null);\n\t\t\tserver.setLoginLastUsedAt(null);\n\t\t\tserver.setLoginLastUsedAgo(null);\n\t\t\tserver.setLoginExpiresAt(null);\n\t\t\tserver.setLoginExpiresAgo(null);\n\t\t\tserver.setLoginAvatarUrl(null);\n\t\t\tserver.setLoginName(null);\n\t\t\tserver.setLoginEmail(null);\n\t\t\tserver.setLoginIsAdmin(false);\n\t\t\tserver.setLoginIsUser(false);\n\t\t\tserver.setLoginIsApp(false);\n\t\t\tserver.setLoginIsOrg(false);\n\t\t\tserver.setLoginIsSudo(false);\n\t\t\tserver.setLoginIsExpired(false);\n\t\t\tserver.setLoginIsSuspended(false);\n\t\t\tserver.setLoginIsBlocked(false);\n\t\t\tserver.setLoginIsPending(false);\n\t\t\tserver.setLoginIsTwoFactor(false);\n\t\t\tserver.setLoginTwoFactorType(null);\n\t\t\tserver.setLoginTwoFactorCode(null);\n\t\t\tserver.setLoginTwoFactorRemember(false);\n\t\t\tserver.setLoginTwoFactorRememberBrowser(false);\n\t\t\tserver.setLoginTwoFactorRememberTime(null);\n\t\t\tserver.setLoginTwoFactorRememberExpires(null);\n\t\t\tserver.setLoginTwoFactorBackupCode(null);\n\t\t\tserver.setLoginTwoFactorBackupCodes(null);\n\t\t\tserver.setLoginTwoFactor", "CodeBleu_score": 23.453164958467852}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = serverUrl.toLowerCase();\n\tfor (GiteaServer server : servers) {\n\t\tif (serverUrl.equals(server.getUrl())) {\n\t\t\tservers.remove(server);\n\t\t\tupdateServerList();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 21.153905527119125}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl)\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl.isEmpty()) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < serverList.size(); i++) {\n\t\tif (serverList.get(i).getUrl().equals(serverUrl)) {\n\t\t\tserverList.remove(i);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "CodeBleu_score": 26.382385048549523}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tConfigElement configElement = new ConfigElement();\n\t\tconfigElement.setKey(annotatedElement.getSimpleName().toString());\n\t\tconfigElement.setType(annotatedElement.asType().toString());\n\t\tconfigElement.setAnnotation(annotation.getSimpleName().toString());\n\t\tdescriptorElements.add(configElement);\n\t}\n}\n", "CodeBleu_score": 40.47588584635659}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tList<? extends AnnotationMirror> annotationMirrors = annotatedElement.getAnnotationMirrors();\n\t\tfor (AnnotationMirror annotationMirror : annotationMirrors) {\n\t\t\tMap<? extends ExecutableElement,? extends AnnotationValue> elementValues = annotationMirror.getElementValues();\n\t\t\tfor (Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : elementValues.entrySet()) {\n\t\t\t\tString key = entry.getKey().getSimpleName().toString();\n\t\t\t\tObject value = entry.getValue().getValue();\n\t\t\t\tif (key.equals(\"type\")) {\n\t\t\t\t\tString type = value.toString();\n\t\t\t\t\tdescriptorElements.add(new DescriptorElement(type, annotatedElement));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "CodeBleu_score": 45.231208274396074}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation)\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tif (element.getKind()!= ElementKind.FIELD) {\n\t\t\tthrow new IllegalArgumentException(\"Only fields can be annotated with @\" + annotation.getSimpleName());\n\t\t}\n\t\tVariableElement variableElement = (VariableElement) element;\n\t\tString type = variableElement.asType().toString();\n\t\tString name = variableElement.getSimpleName().toString();\n\t\tString defaultValue = \"\";\n\t\tConfigElement configElement = new ConfigElement(name, type, defaultValue);\n\t\tdescriptorElements.add(configElement);\n\t}\n}\n", "CodeBleu_score": 36.002213194954464}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) \tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 45.71067332247124}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) \tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 40.398874413399845}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) \tString qualifiedName = annotationClass.getName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tif (qualifiedName.equals(annotation.getQualifiedName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}\n", "CodeBleu_score": 38.95650314060358}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n    if for_approval:\n        filters[\"status\"] = [\"Open\", \"Approved\", \"Rejected\"]\n        filters[\"$or\"] = [\n            {\"status\": \"Open\", \"leave_approver\": {\"$ne\": approver_id}},\n            {\"status\": \"Approved\", \"leave_approver\": approver_id},\n        ]\n    else:\n        filters[\"status\"] = [\"Open\", \"Approved\"]\n        filters[\"$or\"] = [{\"status\": \"Open\"}, {\"status\": \"Approved\", \"leave_approver\": approver_id}]\n    return filters\n\n", "CodeBleu_score": 28.0257442487435}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"Open\", \"Approved\", \"Rejected\"],\n                \"docstatus\": 0,\n                \"leave_approver\": (\"!=\", employee),\n            }\n        )\n    else:\n        filters.update({\"status\": \"Open\", \"docstatus\": 0})\n    if approver_id:\n        filters.update({\"leave_approver\": approver_id})\n    return filters\n\n", "CodeBleu_score": 27.962884507535655}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\" if not for_approval else \"Pending Approval\",\n    }\n    if for_approval:\n        filters[\"approver_id\"] = \"not in ({})\".format(employee)\n        filters[\"status\"] = \"Pending Approval\"\n    if approver_id:\n        filters[\"approver_id\"] = approver_id\n    return filters\n\n", "CodeBleu_score": 23.75752412605412}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    today = datetime.now().date()\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            'allocated': leave_details[leave_type]['allocated'],\n            'balance': leave_details[leave_type]['allocated']\n        }\n        for leave in leave_details[leave_type]['leaves']:\n            if leave['start_date'] <= today <= leave['end_date']:\n                leave_balance_map[leave_type]['balance'] -= leave['days']\n    return leave_balance_map\n\n", "CodeBleu_score": 36.34745608908433}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    leave_details = get_leave_details(employee)\n    current_date = datetime.today().date()\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = leave_details[leave_type][\"allocated\"]\n        leave_balance_map[leave_type][\"balance\"] = leave_details[leave_type][\"allocated\"] - sum(\n            [\n                leave_details[leave_type][\"taken\"][i]\n                for i in leave_details[leave_type][\"taken\"]\n                if leave_details[leave_type][\"taken\"][i] >= current_date\n            ]\n        )\n    return leave_balance_map\n\n", "CodeBleu_score": 35.478109584440126}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[\"allocated\"],\n            \"balance\": leave_details[\"allocated\"] - leave_details[\"taken\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 34.57032244810314}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holidays_for_employee_from_db(employee)\n    if holiday_list:\n        holiday_list = [holiday for holiday in holiday_list if holiday[\"type\"]!= \"Weekly off\"]\n        holiday_list.sort(key=lambda holiday: holiday[\"date\"])\n        for holiday in holiday_list:\n            holiday[\"description\"] = strip_html_from_string(holiday[\"description\"])\n    return holiday_list\n\n", "CodeBleu_score": 22.518331784831684}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.query.filter(Holiday.holiday_list_id == holiday_list.id).filter(Holiday.weekly_off == False).order_by(Holiday.date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n", "CodeBleu_score": 31.604460785121535}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n    holiday_list = get_holiday_list(employee)\n    if holiday_list == []:\n        return []\n    else:\n        holidays = db.session.query(Holiday).filter(Holiday.employee == employee).filter(Holiday.type!= 'Weekly off').order_by(Holiday.date).all()\n        for holiday in holidays:\n            holiday.description = bleach.clean(holiday.description, tags=[], strip=True)\n        return holidays\n", "CodeBleu_score": 32.29727841423354}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n    # Retrieve the HR settings.\n    hr_settings = frappe.get_single(\"HR Settings\")\n    # Check if the HR settings specify to send reminders and if the frequency is set to \"Weekly.\"\n    if hr_settings.send_weekly_reminders and hr_settings.weekly_reminder_frequency == \"Weekly\":\n        # Call the function to send the reminders.\n        send_reminders_in_advance_weekly_helper()\n", "CodeBleu_score": 16.325021783562967}, {"code": "def send_reminders_in_advance_weekly()\n    # Get the HR settings\n    hr_settings = frappe.get_doc(\"HR Settings\")\n\n    # Check if the HR settings specify to send reminders and if the frequency is set to \"Weekly.\"\n    if hr_settings.send_weekly_reminders and hr_settings.weekly_reminder_frequency == \"Weekly\":\n        # Call the function to send reminders\n        send_reminders_in_advance(\"Weekly\")\n\n", "CodeBleu_score": 18.110677010307466}, {"code": "def send_reminders_in_advance_weekly()\n    # Get the settings\n    hr_settings = frappe.get_doc(\"HR Settings\")\n    weekly_holiday_reminders_frequency = hr_settings.weekly_holiday_reminders_frequency\n    weekly_holiday_reminders_day = hr_settings.weekly_holiday_reminders_day\n    weekly_holiday_reminders_time = hr_settings.weekly_holiday_reminders_time\n    weekly_holiday_reminders_sent = hr_settings.weekly_holiday_reminders_sent\n    weekly_holiday_reminders_last_sent_on = hr_settings.weekly_holiday_reminders_last_sent_on\n\n    # Get the current day of the week\n    current_day = date.today().weekday()\n\n    # If the current day of the week is the same as the day specified in the HR Settings and the reminders have not been sent yet, send the reminders\n    if current_day == weekly_holiday_reminders_day and weekly_holiday_reminders_frequency == \"Weekly\" and weekly_holiday_reminders_sent == 0:\n        # Set the reminders sent flag to 1\n        hr_settings.weekly_holiday_reminders_sent = 1\n        hr_settings.save()\n\n        # Call a function to send the reminders\n        send_weekly_holiday_reminders(weekly_holiday_reminders_time)\n", "CodeBleu_score": 24.090109783324973}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0\n    for self_rating in self_ratings:\n        self_appraisal_score += (self_rating.rating * self_rating.weightage) / 100\n    self_appraisal_score = round(self_appraisal_score, 2)\n    return self_appraisal_score\n\n", "CodeBleu_score": 19.88666881608588}, {"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += (\n            self_rating.rating * self_rating.weightage / 100\n        )\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 23.286156507482445}, {"code": "def calculate_self_appraisal_score(self)\n    self_appraisal_score = 0.0\n    for rating in self_ratings:\n        self_appraisal_score += rating.rating * rating.weightage\n    self_appraisal_score = round(self_appraisal_score, 2)\n    return self_appraisal_score\n\n", "CodeBleu_score": 20.311650610035358}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n    # Get appraisal cycle document\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # If final score is calculated by a formula, calculate it\n    if appraisal_cycle.final_score_formula:\n        # Get formula\n        formula = appraisal_cycle.final_score_formula\n\n        # Get total score\n        total_score = self.total_score\n\n        # Get average feedback score\n        average_feedback_score = self.average_feedback_score\n\n        # Get self-appraisal score\n        self_appraisal_score = self.self_appraisal_score\n\n        # Get the appraisal's precision\n        precision = self.precision\n\n        # Get the appraisal's scale\n        scale = self.scale\n\n        # Sanitize formula\n        formula = formula.replace(\"total_score\", str(total_score))\n        formula = formula.replace(\"average_feedback_score\", str(average_feedback_score))\n        formula = formula.replace(\"self_appraisal_score\", str(self_appraisal_score))\n        formula = formula.replace(\"precision\", str(precision))\n        formula = formula.replace(\"scale\", str(scale))\n\n        # Evaluate formula\n        final_score = eval(formula)\n\n        # Set final score with the appropriate precision\n        self.final_score = round(final_score, precision)\n    # Otherwise, calculate final score as the average of the total score, average feedback score, and self-appraisal score\n    else:\n        # Get the appraisal's precision\n        precision = self.precision\n\n        # Calculate final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n\n        # Set final score with the appropriate precision\n        self.final_score = round(final_score, precision)\n\n    # Save the appraisal\n    self.save()\n", "CodeBleu_score": 36.51947189517513}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        self.final_score = self.evaluate_formula(appraisal_cycle.final_score_formula)\n    else:\n        self.final_score = round(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, 2\n        )\n    self.final_score = round(self.final_score, appraisal_cycle.precision)\n\n", "CodeBleu_score": 19.019839578156457}, {"code": "def calculate_final_score(self)\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.formula:\n        self.formula = appraisal_cycle.formula\n        self.evaluate_formula()\n    else:\n        self.calculate_average_score()\n        self.calculate_final_score = self.final_score\n        self.final_score = round(self.final_score, 2)\n    self.save()\n", "CodeBleu_score": 13.787360549456068}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n    if self.attendance_date and self.attendance_date > getdate(nowdate()):\n        if self.status!= \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be a future date unless the status is 'On Leave'.\"))\n        else:\n            leave_record = frappe.db.sql(\"\"\"select name from `tabLeave Application` where employee = %s and %s between from_date and to_date and docstatus = 1\"\"\", (self.employee, self.attendance_date))\n            if leave_record:\n                frappe.throw(_(\"Attendance date cannot be before employee's joining date or before the leave application.\"))\n    elif self.attendance_date and self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date.\"))\n", "CodeBleu_score": 37.499103638210606}, {"code": "def validate_attendance_date(self)\n    if self.attendance_date:\n      if self.attendance_date > getdate(nowdate()):\n        frappe.throw(_(\"Attendance date cannot be a future date.\"))\n      elif self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be earlier than employee's joining date.\"))\n    else:\n      frappe.throw(_(\"Attendance date is required.\"))\n", "CodeBleu_score": 19.912211174347004}, {"code": "def validate_attendance_date(self)\n    if self.attendance_date > getdate(nowdate()):\n        if self.status!= \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be a future date unless the status is 'On Leave'.\"))\n        else:\n            leave_record = frappe.db.sql(\"\"\"select name from `tabLeave Application` where employee=%s and %s between from_date and to_date and docstatus=1\"\"\", (self.employee, self.attendance_date), as_dict=True)\n            if not leave_record:\n                frappe.throw(_(\"Attendance date cannot be a future date if there is no leave application for the employee.\"))\n    if self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be before the employee's date of joining.\"))\n", "CodeBleu_score": 36.14024182490043}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n    attendance_record = frappe.db.sql(\"\"\"SELECT name FROM `tabAttendance` WHERE employee=%s AND attendance_date=%s\"\"\", (self.employee, self.attendance_date), as_dict=True)\n    if attendance_record:\n        frappe.throw(_(\"Attendance record already exists for employee {0} on {1}.\").format(self.employee, formatdate(self.attendance_date)), DuplicateRecordError)\n", "CodeBleu_score": 34.15128957504563}, {"code": "def validate_duplicate_record(self)\n    if self.employee_id:\n        if self.check_duplicate_record():\n            message = \"Attendance Record already exists for employee {0} on {1}.\".format(\n                self.employee_id.employee_name, self.attendance_date)\n            duplicate_record = frappe.db.get_value(\n                \"Attendance\", {\"employee\": self.employee_id, \"attendance_date\": self.attendance_date})\n            frappe.throw(\n                message=_(message), title=_(\"Duplicate Record\"), exc=DuplicateRecordError,\n                duplicate_record=duplicate_record)\n\n", "CodeBleu_score": 39.76470859750159}, {"code": "def validate_duplicate_record(self)\n    if self.employee_id:\n        attendance_date = self.attendance_date\n        employee_id = self.employee_id\n        query = frappe.db.sql(\n            \"\"\"\n            SELECT name FROM `tabAttendance` WHERE employee = %s AND attendance_date = %s AND name!= %s\n            \"\"\",\n            (employee_id, attendance_date, self.name),\n            as_dict=True,\n        )\n        if query:\n            msg = _(\"Attendance record already exists for employee {0} on {1}\").format(\n                employee_id, attendance_date\n            )\n            msg += \"<br><b><a href='#Form/Attendance/{0}'>{0}</a></b>\".format(\n                query[0].name\n            )\n            frappe.throw(msg, title=_(\"Duplicate Entry\"))\n\n", "CodeBleu_score": 33.16931790947215}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\"\"\n    # Get message details\n    messages = self.get_messages()\n    # Get the email addresses of all users in the specified group\n    emails = self.get_group_members()\n    # Send the email with the summary\n    self.send_email(messages, emails)\n    # Update the status to \"Sent\"\n    self.update_status(\"Sent\")\n", "CodeBleu_score": 11.860329668740155}, {"code": "def send_summary(self)\"\"\n\n    # Get the group details\n    group_id = self.group_id\n    group_name = self.group_name\n    group_email = self.group_email\n    group_members = self.group_members\n\n    # Get the date\n    date = datetime.now().strftime(\"%d/%m/%Y\")\n\n    # Get the replies\n    replies = self.get_replies()\n\n    # Get the email addresses\n    email_addresses = self.get_email_addresses()\n\n    # Get the template\n    template = self.get_template()\n\n    # Get the subject\n    subject = self.get_subject()\n\n    # Get the message\n    message = self.get_message()\n\n    # Get the HTML message\n    html_message = self.get_html_message()\n\n    # Get the sender\n    sender = self.get_sender()\n\n    # Get the password\n    password = <PASSWORD>()\n\n    # Get the recipient\n    recipient = self.get_recipient()\n\n    # Send the email\n    self.send_email(subject, message, html_message, sender, password, recipient)\n\n    # Update the status\n    self.update_status(\"Sent\")\n", "CodeBleu_score": 33.7186229326052}, {"code": "def send_summary(self)\"\"\n\n    # Get message details\n    message_details = self.get_message_details()\n\n    # Get list of email addresses of users in group\n    email_list = self.get_group_emails()\n\n    # Get a list of users who have not yet received their daily summary\n    users_not_yet_sent = self.get_users_not_yet_sent(email_list)\n\n    # Get a list of users who have already received their daily summary\n    users_already_sent = self.get_users_already_sent(email_list)\n\n    # Get a list of users who have not yet received their daily summary\n    users_not_yet_sent = self.get_users_not_yet_sent(email_list)\n\n    # Get a list of users who have already received their daily summary\n    users_already_sent = self.get_users_already_sent(email_list)\n\n    # Send summary to users who have not yet received it\n    self.send_summary_to_users(users_not_yet_sent, message_details)\n\n    # Update the status of the users who have received their daily summary\n    self.update_status(users_already_sent)\n", "CodeBleu_score": 18.48497804551567}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n    interview = frappe.db.sql(\"\"\"select name from `tabInterview` where job_applicant=%s and round=%s and name!=%s\"\"\", (self.name, self.round, self.name), as_dict=True)\n    if interview:\n        frappe.throw(_(\"Job Applicant {0} has already been interviewed for the {1} round. Please check the existing interview record {2}.\").format(frappe.bold(self.applicant_name), frappe.bold(self.round), frappe.utils.get_link_to_form(\"Interview\", interview[0].name)))\n", "CodeBleu_score": 31.767368759761784}, {"code": "def validate_duplicate_interview(self)\n    if self.job_applicant_id:\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant_id)\n        if job_applicant.interview_round == self.interview_round:\n            interview = frappe.get_all(\"Interview\", filters={\"job_applicant\": self.job_applicant_id, \"interview_round\": self.interview_round})\n            if interview:\n                interview = frappe.get_doc(\"Interview\", interview[0].name)\n                interview_link = get_link_to_form(\"Interview\", interview.name)\n                job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant_id)\n                message = _(\"The job applicant {0} has already been scheduled for interview in {1}. Please check {2} for more information.\").format(job_applicant_link, interview_round, interview_link)\n                frappe.throw(message)\n\n", "CodeBleu_score": 40.76196799190033}, {"code": "def validate_duplicate_interview(self)\n    if self.interview_round_id:\n        duplicate_interview = frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.name,\n                \"interview_round\": self.interview_round_id,\n                \"docstatus\": 1,\n            },\n        )\n        if duplicate_interview:\n            interview = frappe.get_doc(\"Interview\", duplicate_interview)\n            link = get_link_to_form(\"Interview\", interview.name)\n            raise frappe.ValidationError(\n                f\"The job applicant {self.applicant_name} has already been interviewed for this round. Please check the {link}.\"\n            )\n\n", "CodeBleu_score": 47.981889143591246}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n    if len(self.skill_assessments) == 0:\n        self.average_rating = 0\n    else:\n        ratings = []\n        for assessment in self.skill_assessments:\n            if assessment.rating!= None:\n                ratings.append(assessment.rating)\n        self.average_rating = sum(ratings) / len(ratings)\n", "CodeBleu_score": 29.44207371073997}, {"code": "def calculate_average_rating(self)\n    # Calculate the average rating\n    if self.skill_assessments.count() > 0:\n        self.average_rating = sum(\n            [assessment.rating for assessment in self.skill_assessments.all() if assessment.rating is not None]) / self.skill_assessments.count()\n    else:\n        self.average_rating = 0\n    # Save the average rating\n    self.save()\n\n", "CodeBleu_score": 26.62550326717998}, {"code": "def calculate_average_rating(self)\n    self.average_rating = 0\n    number_of_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            self.average_rating += assessment.rating\n            number_of_assessments += 1\n    if number_of_assessments:\n        self.average_rating = self.average_rating / number_of_assessments\n    else:\n        self.average_rating = 0\n", "CodeBleu_score": 22.696741246433422}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n    if isinstance(doc, str):\n        interview = Interview(round=doc)\n    elif isinstance(doc, dict):\n        interview = Interview(**doc)\n    else:\n        raise TypeError(\"Document must be a string or a dictionary.\")\n    if interview.interviewers:\n        interview.interviewers = [Interviewer(**interviewer) for interviewer in interview.interviewers]\n    return interview\n", "CodeBleu_score": 34.27479103054995}, {"code": "def create_interview(doc):\n    interview = Interview()\n    if isinstance(doc, str):\n        interview.set_interview_round(doc)\n    elif isinstance(doc, dict):\n        interview.set_interview_round(doc[\"interview_round\"])\n        interview.set_designation(doc[\"designation\"])\n        interview.set_interviewers(doc[\"interviewers\"])\n    return interview\n", "CodeBleu_score": 29.78425626496164}, {"code": "def create_interview(doc):\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.status = \"Interview Scheduled\"\n    interview.save()\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interviewers\", {\"interviewer\": interviewer})\n        interview.save()\n    return interview\n", "CodeBleu_score": 39.8951467954241}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n    from_date = datetime.strptime(from_date, \"%Y-%m-%d\")\n    to_date = datetime.strptime(to_date, \"%Y-%m-%d\")\n    job_offers = frappe.db.sql(\n        \"\"\"select name from `tabJob Offer` where designation = %s and company = %s and creation between %s and %s and docstatus = 1\"\"\",\n        (self.designation, self.company, from_date, to_date),\n    )\n    return job_offers\n\n", "CodeBleu_score": 44.67697989422043}, {"code": "def get_job_offer(self, from_date, to_date)\n    try:\n        # Get the job offer names from the database\n        job_offer_names = self.db_manager.get_job_offer_names_by_date(from_date, to_date)\n\n        # Get the job offers from the database\n        job_offers = self.db_manager.get_job_offers_by_date(from_date, to_date)\n\n        # Create a list of job offer names\n        job_offer_names = [job_offer[0] for job_offer in job_offer_names]\n\n        # Create a list of job offers\n        job_offers = [job_offer[0] for job_offer in job_offers]\n\n        # Create a list of job offers with the same length as the list of job offer names\n        job_offers_with_names = [None] * len(job_offer_names)\n\n        # Loop through the job offer names and the job offers\n        for i in range(len(job_offer_names)):\n            # Loop through the job offers\n            for j in range(len(job_offers)):\n                # Check if the job offer names and the job offers match\n                if job_offer_names[i] == job_offers[j]:\n                    # Add the job offer to the list of job offers with the same length as the list of job offer names\n                    job_offers_with_names[i] = job_offers[j]\n\n        # Return the list of job offers with the same length as the list of job offer names\n        return job_offers_with_names\n    except Exception as e:\n        # Print the stack trace\n        traceback.print_exc()\n\n        # Print an error message\n        print(\"Error: \" + str(e))\n\n        # Return an error message\n        return \"Error: \" + str(e)\n\n", "CodeBleu_score": 38.49558034715036}, {"code": "def get_job_offer(self, from_date, to_date)\n    job_offers = []\n    for job_offer in self.get_all_job_offers():\n        if job_offer.get_document_status() == 1 and job_offer.get_created_date() >= from_date and job_offer.get_created_date() <= to_date and job_offer.get_designation() == self.get_designation() and job_offer.get_company() == self.get_company():\n            job_offers.append(job_offer)\n    return job_offers\n", "CodeBleu_score": 32.46816567382497}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n    total_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1\"\"\")\n    if total_offers:\n        total_offers = total_offers[0][0]\n    else:\n        total_offers = 0\n    accepted_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted'\"\"\")\n    if accepted_offers:\n        accepted_offers = accepted_offers[0][0]\n    else:\n        accepted_offers = 0\n    if total_offers > 0:\n        acceptance_rate = round((accepted_offers / total_offers) * 100, 2)\n    else:\n        acceptance_rate = 0\n    return {\n        \"fieldtype\": \"Percent\",\n        \"fieldname\": \"offer_acceptance_rate\",\n        \"label\": \"Offer Acceptance Rate\",\n        \"width\": 120,\n        \"default\": acceptance_rate,\n        \"read_only\": 1\n    }\n\n", "CodeBleu_score": 26.65941559453903}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n    if company:\n        job_offers = frappe.db.sql(\"\"\"SELECT count(*) AS offer_count FROM `tabJob Offer` WHERE company=%s AND docstatus=1\"\"\", company, as_dict=True)\n        accepted_offers = frappe.db.sql(\"\"\"SELECT count(*) AS accepted_offer_count FROM `tabJob Offer` WHERE company=%s AND status='Accepted' AND docstatus=1\"\"\", company, as_dict=True)\n    elif department:\n        job_offers = frappe.db.sql(\"\"\"SELECT count(*) AS offer_count FROM `tabJob Offer` WHERE department=%s AND docstatus=1\"\"\", department, as_dict=True)\n        accepted_offers = frappe.db.sql(\"\"\"SELECT count(*) AS accepted_offer_count FROM `tabJob Offer` WHERE department=%s AND status='Accepted' AND docstatus=1\"\"\", department, as_dict=True)\n    else:\n        job_offers = frappe.db.sql(\"\"\"SELECT count(*) AS offer_count FROM `tabJob Offer` WHERE docstatus=1\"\"\", as_dict=True)\n        accepted_offers = frappe.db.sql(\"\"\"SELECT count(*) AS accepted_offer_count FROM `tabJob Offer` WHERE status='Accepted' AND docstatus=1\"\"\", as_dict=True)\n\n    if job_offers and accepted_offers:\n        if job_offers[0].offer_count > 0:\n            return {\n                \"offer_count\": job_offers[0].offer_count,\n                \"accepted_offer_count\": accepted_offers[0].accepted_offer_count,\n                \"acceptance_rate\": (accepted_offers[0].accepted_offer_count / job_offers[0].offer_count) * 100,\n                \"fieldtype\": \"Percent\"\n            }\n        else:\n            return {\n                \"offer_count\": job_offers[0].offer_count,\n                \"accepted_offer_count\": accepted_offers[0].accepted_offer_count,\n                \"acceptance_rate\": 0,\n                \"fieldtype\": \"Percent\"\n            }\n    else:\n        return {\n            \"offer_count\": 0,\n            \"accepted_offer_count\": 0,\n            \"acceptance_rate\": 0,\n            \"fieldtype\": \"Percent\"\n        }\n\n", "CodeBleu_score": 23.1110934400512}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\n    if not company and not department:\n        # Get all job offers\n        job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) AS total_offers FROM `tabJob Offer` WHERE docstatus = 1\"\"\", as_dict=True)\n        total_offers = job_offers[0].total_offers\n        # Get all accepted job offers\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) AS accepted_offers FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted'\"\"\", as_dict=True)\n        accepted_offers = accepted_job_offers[0].accepted_offers\n        # Calculate acceptance rate\n        acceptance_rate = (accepted_offers / total_offers) * 100\n        # Return the acceptance rate\n        return acceptance_rate\n    elif company and not department:\n        # Get all job offers\n        job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) AS total_offers FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s\"\"\", company, as_dict=True)\n        total_offers = job_offers[0].total_offers\n        # Get all accepted job offers\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) AS accepted_offers FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted' AND company = %s\"\"\", company, as_dict=True)\n        accepted_offers = accepted_job_offers[0].accepted_offers\n        # Calculate acceptance rate\n        acceptance_rate = (accepted_offers / total_offers) * 100\n        # Return the acceptance rate\n        return acceptance_rate\n    elif not company and department:\n        # Get all job offers\n        job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) AS total_offers FROM `tabJob Offer` WHERE docstatus = 1 AND department = %s\"\"\", department, as_dict=True)\n        total_offers = job_offers[0].total_offers\n        # Get all accepted job offers\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(name) AS accepted_offers FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted' AND department = %s\"\"\", department, as_dict=True)\n        accepted_offers = accepted_job_offers[0].accepted_", "CodeBleu_score": 23.19860534903142}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isFailure()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}\n", "CodeBleu_score": 68.83743238878735}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isFailure()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}\n", "CodeBleu_score": 68.83743238878735}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto)\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isFailure()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\t}\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 68.83743238878735}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) \tfinal Long staffId = companyStaffForUpdateDto.getStaffId();\n\tfinal String password = companyStaffForUpdateDto.getPassword();\n\tfinal String firstName = companyStaffForUpdateDto.getFirstName();\n\tfinal String lastName = companyStaffForUpdateDto.getLastName();\n\n\tfinal Optional<CompanyStaff> existingStaff = companyStaffRepository.findById(staffId);\n\tif (existingStaff.isEmpty()) {\n\t\treturn Result.failure(ErrorCode.NOT_FOUND, \"Staff with ID \" + staffId + \" not found\");\n\t}\n\n\tfinal CompanyStaff existingStaffEntity = existingStaff.get();\n\n\tif (!existingStaffEntity.getPassword().equals(password)) {\n\t\treturn Result.failure(ErrorCode.BAD_REQUEST, \"Password does not match existing password\");\n\t}\n\n\texistingStaffEntity.setFirstName(firstName);\n\texistingStaffEntity.setLastName(lastName);\n\n\tcompanyStaffRepository.save(existingStaffEntity);\n\n\treturn Result.success();\n}\n", "CodeBleu_score": 38.39111260375312}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) // First, retrieve the staff record by ID, returning an error result if not found.\n    Result<CompanyStaff> result = retrieveStaff(companyStaffForUpdateDto.getStaffId());\n    if (result.isFailure()) {\n        return result;\n    }\n    CompanyStaff companyStaff = result.getValue();\n", "CodeBleu_score": 22.402125265097478}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) \t// retrieve the staff record by ID\n\tfinal CompanyStaff companyStaff = this.companyStaffRepository.findById(companyStaffForUpdateDto.getStaffId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn Result.failure(ResultStatus.NOT_FOUND);\n\t}\n\t// check business rules\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn Result.failure(ResultStatus.BUSINESS_RULE_VIOLATION);\n\t}\n\t// update the staff's first and last names\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t// save the changes\n\tthis.companyStaffRepository.save(companyStaff);\n\t// return success\n\treturn Result.success();\n}\n", "CodeBleu_score": 41.270293128618114}]}
